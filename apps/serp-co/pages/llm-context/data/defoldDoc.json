[
  {
    "owner": "defold",
    "repo": "doc",
    "content": "TITLE: Complete Defold Car Script with Drag Implementation (Lua)\nDESCRIPTION: Provides the full Lua script (`car.script`) for a car game object in Defold. It includes initialization (`init`), input handling (`on_input`), and the main physics loop (`update`) which incorporates steering (using quaternions and slerp), acceleration, velocity updates, position updates, wheel rotation, and the implemented drag calculation. Depends on Defold API (`go`, `msg`, `hash`) and `vmath` library.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/car.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal turn_speed = 0.1                           \t\t\t          \t-- Slerp factor\nlocal max_steer_angle_left = vmath.quat_rotation_z(math.pi / 6)\t    -- 30 degrees\nlocal max_steer_angle_right = vmath.quat_rotation_z(-math.pi / 6)   -- -30 degrees\nlocal steer_angle_zero = vmath.quat_rotation_z(0)\t\t\t          \t-- Zero degrees\nlocal wheels_vector = vmath.vector3(0, 72, 0)         \t\t\t      -- Vector from center of back and front wheel pairs\n\nlocal acceleration = 100 \t\t                      \t\t\t\t\t-- The acceleration of the car\nlocal drag = 1.1                                                  \t-- the drag constant\n\nfunction init(self)\n\t-- Send a message to the render script (see builtins/render/default.render_script) to set the clear color.\n\t-- This changes the background color of the game. The vector4 contains color information\n\t-- by channel from 0-1: Red = 0.2. Green = 0.2, Blue = 0.2 and Alpha = 1.0\n\tmsg.post(\"@render:\", \"clear_color\", { color = vmath.vector4(0.2, 0.2, 0.2, 1.0) } )\n\n\t-- Acquire input focus so we can react to input\n\tmsg.post(\".\", \"acquire_input_focus\")\n\n\t-- Some variables\n\tself.steer_angle = vmath.quat()\n\tself.direction = vmath.quat()\n\n\t-- Velocity and acceleration are car relative (not rotated)\n\tself.velocity = vmath.vector3()\n\tself.acceleration = vmath.vector3()\n\n\t-- Input vector. This is modified later in the on_input function\n\t-- to store the input.\n\tself.input = vmath.vector3()\nend\n\nfunction update(self, dt)\n\t-- Set acceleration to the y input\n\tself.acceleration.y = self.input.y * acceleration\n\n\t-- Calculate the new positions of front and back wheels\n\tlocal front_vel = vmath.rotate(self.steer_angle, self.velocity)\n\tlocal new_front_pos = vmath.rotate(self.direction, wheels_vector + front_vel)\n\tlocal new_back_pos = vmath.rotate(self.direction, self.velocity)\n\n\t-- Calculate the car's new direction\n\tlocal new_dir = vmath.normalize(new_front_pos - new_back_pos)\n\tself.direction = vmath.quat_rotation_z(math.atan2(new_dir.y, new_dir.x) - math.pi / 2)\n\n\t-- Speed is the magnitude of the velocity\n\tlocal speed = vmath.length(self.velocity)\n\n\t-- Apply drag\n\tself.acceleration = self.acceleration - speed * self.velocity * drag\n\n\t-- Stop if we are already slow enough\n\tif speed < 0.5 then self.velocity = vmath.vector3() end\n\n\t-- Calculate new velocity based on current acceleration\n\tself.velocity = self.velocity + self.acceleration * dt\n\n\t-- Update position based on current velocity and direction\n\tlocal pos = go.get_position()\n\tpos = pos + vmath.rotate(self.direction, self.velocity)\n\tgo.set_position(pos)\n\n\t-- Interpolate the wheels using vmath.slerp\n\tif self.input.x > 0 then\n\t\tself.steer_angle = vmath.slerp(turn_speed, self.steer_angle, max_steer_angle_right)\n\telseif self.input.x < 0 then\n\t\tself.steer_angle = vmath.slerp(turn_speed, self.steer_angle, max_steer_angle_left)\n\telse\n\t\tself.steer_angle = vmath.slerp(turn_speed, self.steer_angle, steer_angle_zero)\n\tend\n\n\t-- Update the wheel rotation\n\tgo.set_rotation(self.steer_angle, \"left_wheel\")\n\tgo.set_rotation(self.steer_angle, \"right_wheel\")\n\n\t-- Set the game object's rotation to the direction\n\tgo.set_rotation(self.direction)\n\n\t-- reset acceleration and input\n\tself.acceleration = vmath.vector3()\n\tself.input = vmath.vector3()\nend\n\nfunction on_input(self, action_id, action)\n\t-- set the input vector to correspond to the key press\n\tif action_id == hash(\"left\") then\n\t\tself.input.x = -1\n\telseif action_id == hash(\"right\") then\n\t\tself.input.x = 1\n\telseif action_id == hash(\"accelerate\") then\n\t\tself.input.y = 1\n\telseif action_id == hash(\"brake\") then\n\t\tself.input.y = -1\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Performing Ray Cast in Defold Physics Engine using Lua\nDESCRIPTION: This code snippet demonstrates how to perform a ray cast in Defold's physics engine. It sets up start and end positions for the ray, defines collision groups to test against, and uses the physics.raycast() function to perform the cast. The result is then checked and processed.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-ray-casts.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction update(self, dt)\n  -- request ray cast\n  local my_start = vmath.vector3(0, 0, 0)\n  local my_end = vmath.vector3(100, 1000, 1000)\n  local my_groups = { hash(\"my_group1\"), hash(\"my_group2\") }\n\n  local result = physics.raycast(my_start, my_end, my_groups)\n  if result then\n      -- act on the hit (see 'ray_cast_response' message for all values)\n      print(result.id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Character Logic in Defold (Lua)\nDESCRIPTION: This Lua script defines the complete logic for a player character in a Defold game. It initializes player properties (velocity, state), handles input focus, updates player position based on physics (gravity, acceleration, friction, max speed) and input each frame, manages animations (idle, run, jump, fall) based on movement and state, processes collision messages (`contact_point_response`) to react to obstacles, and handles user input (`left`, `right`, `jump`, `touch`) for movement and jumping, including double-tap jump for touch controls. Key constants like `move_acceleration`, `gravity`, and `jump_takeoff_speed` are defined for tweaking game feel. It uses Defold APIs like `msg`, `sprite`, `go`, `vmath`, and `hash`.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/platformer.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- player.script\n\n-- these are the tweaks for the mechanics, feel free to change them for a different feeling\n-- the acceleration to move right/left\nlocal move_acceleration = 3500\n-- acceleration factor to use when air-borne\nlocal air_acceleration_factor = 0.8\n-- max speed right/left\nlocal max_speed = 450\n-- gravity pulling the player down in pixel units\nlocal gravity = -1000\n-- take-off speed when jumping in pixel units\nlocal jump_takeoff_speed = 550\n-- time within a double tap must occur to be considered a jump (only used for mouse/touch controls)\nlocal touch_jump_timeout = 0.2\n\n-- prehashing ids improves performance\nlocal msg_contact_point_response = hash(\"contact_point_response\")\nlocal msg_animation_done = hash(\"animation_done\")\nlocal group_obstacle = hash(\"obstacle\")\nlocal input_left = hash(\"left\")\nlocal input_right = hash(\"right\")\nlocal input_jump = hash(\"jump\")\nlocal input_touch = hash(\"touch\")\nlocal anim_run = hash(\"run\")\nlocal anim_idle = hash(\"idle\")\nlocal anim_jump = hash(\"jump\")\nlocal anim_fall = hash(\"fall\")\n\nfunction init(self)\n    -- this lets us handle input in this script\n    msg.post(\".\", \"acquire_input_focus\")\n\n    -- initial player velocity\n    self.velocity = vmath.vector3(0, 0, 0)\n    -- support variable to keep track of collisions and separation\n    self.correction = vmath.vector3()\n    -- if the player stands on ground or not\n    self.ground_contact = false\n    -- movement input in the range [-1,1]\n    self.move_input = 0\n    -- the currently playing animation\n    self.anim = nil\n    -- timer that controls the jump-window when using mouse/touch\n    self.touch_jump_timer = 0\nend\n\nlocal function play_animation(self, anim)\n    -- only play animations which are not already playing\n    if self.anim ~= anim then\n        -- tell the sprite to play the animation\n        sprite.play_flipbook(\"#sprite\", anim)\n        -- remember which animation is playing\n        self.anim = anim\n    end\nend\n\nlocal function update_animations(self)\n    -- make sure the player character faces the right way\n    sprite.set_hflip(\"#sprite\", self.move_input < 0)\n    -- make sure the right animation is playing\n    if self.ground_contact then\n        if self.velocity.x == 0 then\n            play_animation(self, anim_idle)\n        else\n            play_animation(self, anim_run)\n        end\n    else\n        if self.velocity.y > 0 then\n            play_animation(self, anim_jump)\n        else\n            play_animation(self, anim_fall)\n        end\n    end\nend\n\nfunction update(self, dt)\n    -- determine the target speed based on input\n    local target_speed = self.move_input * max_speed\n    -- calculate the difference between our current speed and the target speed\n    local speed_diff = target_speed - self.velocity.x\n    -- the complete acceleration to integrate over this frame\n    local acceleration = vmath.vector3(0, gravity, 0)\n    if speed_diff ~= 0 then\n        -- set the acceleration to work in the direction of the difference\n        if speed_diff < 0 then\n            acceleration.x = -move_acceleration\n        else\n            acceleration.x = move_acceleration\n        end\n        -- decrease the acceleration when air-borne to give a slower feel\n        if not self.ground_contact then\n            acceleration.x = air_acceleration_factor * acceleration.x\n        end\n    end\n    -- calculate the velocity change this frame (dv is short for delta-velocity)\n    local dv = acceleration * dt\n    -- check if dv exceeds the intended speed difference, clamp it in that case\n    if math.abs(dv.x) > math.abs(speed_diff) then\n        dv.x = speed_diff\n    end\n    -- save the current velocity for later use\n    -- (self.velocity, which right now is the velocity used the previous frame)\n    local v0 = self.velocity\n    -- calculate the new velocity by adding the velocity change\n    self.velocity = self.velocity + dv\n    -- calculate the translation this frame by integrating the velocity\n    local dp = (v0 + self.velocity) * dt * 0.5\n    -- apply it to the player character\n    go.set_position(go.get_position() + dp)\n\n    -- update the jump timer\n    if self.touch_jump_timer > 0 then\n        self.touch_jump_timer = self.touch_jump_timer - dt\n    end\n\n    update_animations(self)\n\n    -- reset volatile state\n    self.correction = vmath.vector3()\n    self.move_input = 0\n    self.ground_contact = false\n\nend\n\nlocal function handle_obstacle_contact(self, normal, distance)\n    -- project the correction vector onto the contact normal\n    -- (the correction vector is the 0-vector for the first contact point)\n    local proj = vmath.dot(self.correction, normal)\n    -- calculate the compensation we need to make for this contact point\n    local comp = (distance - proj) * normal\n    -- add it to the correction vector\n    self.correction = self.correction + comp\n    -- apply the compensation to the player character\n    go.set_position(go.get_position() + comp)\n    -- check if the normal points enough up to consider the player standing on the ground\n    -- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)\n    if normal.y > 0.7 then\n        self.ground_contact = true\n    end\n    -- project the velocity onto the normal\n    proj = vmath.dot(self.velocity, normal)\n    -- if the projection is negative, it means that some of the velocity points towards the contact point\n    if proj < 0 then\n        -- remove that component in that case\n        self.velocity = self.velocity - proj * normal\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    -- check if we received a contact point message\n    if message_id == msg_contact_point_response then\n        -- check that the object is something we consider an obstacle\n        if message.group == group_obstacle then\n            handle_obstacle_contact(self, message.normal, message.distance)\n        end\n    end\nend\n\nlocal function jump(self)\n    -- only allow jump from ground\n    -- (extend this with a counter to do things like double-jumps)\n    if self.ground_contact then\n        -- set take-off speed\n        self.velocity.y = jump_takeoff_speed\n        -- play animation\n        play_animation(self, anim_jump)\n    end\nend\n\nlocal function abort_jump(self)\n    -- cut the jump short if we are still going up\n    if self.velocity.y > 0 then\n        -- scale down the upwards speed\n        self.velocity.y = self.velocity.y * 0.5\n    end\nend\n\nfunction on_input(self, action_id, action)\n    if action_id == input_left then\n        self.move_input = -action.value\n    elseif action_id == input_right then\n        self.move_input = action.value\n    elseif action_id == input_jump then\n        if action.pressed then\n            jump(self)\n        elseif action.released then\n            abort_jump(self)\n        end\n    elseif action_id == input_touch then\n        -- move towards the touch-point\n        local diff = action.x - go.get_position().x\n        -- only give input when far away (more than 10 pixels)\n        if math.abs(diff) > 10 then\n            -- slow down when less than 100 pixels away\n            self.move_input = diff / 100\n            -- clamp input to [-1,1]\n            self.move_input = math.min(1, math.max(-1, self.move_input))\n        end\n        if action.released then\n            -- start timing the last release to see if we are about to jump\n            self.touch_jump_timer = touch_jump_timeout\n        elseif action.pressed then\n            -- jump on double tap\n            if self.touch_jump_timer > 0 then\n                jump(self)\n            end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request in Defold using Lua\nDESCRIPTION: Demonstrates how to perform a basic HTTP GET request to retrieve data from a server using Defold's http.request() function. The example includes a callback function to handle the asynchronous response.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/http-requests.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function handle_response(self, id, response)\n\tprint(response.status, response.response)\nend\n\nhttp.request(\"https://www.defold.com\", \"GET\", handle_response)\n```\n\n----------------------------------------\n\nTITLE: Iterating with While Loops in Lua - Lua\nDESCRIPTION: Shows how to use 'while' loops to iterate over a table of weekdays, printing each value. No dependencies. Demonstrates incrementing an index and accessing array-style tables in Lua.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nweekdays = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n            \"Thursday\", \"Friday\", \"Saturday\"}\n\n-- Print each weekday\ni = 1\nwhile weekdays[i] do\n    print(weekdays[i])\n    i = i + 1\nend\n```\n\n----------------------------------------\n\nTITLE: Drawing Debug Text and Lines in Defold using the @render Socket\nDESCRIPTION: This code demonstrates how to draw debug text and lines on the screen during runtime using the @render socket. It shows how to display variable values, colored text, and debug lines between game objects, which is useful for visual debugging.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-game-logic.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Draw value of \"my_val\" with debug text on the screen\nmsg.post(\"@render:\", \"draw_text\", { text = \"My value: \" .. my_val, position = vmath.vector3(200, 200, 0) })\n\n-- Draw colored text on the screen\nlocal color_green = vmath.vector4(0, 1, 0, 1)\nmsg.post(\"@render:\", \"draw_debug_text\", { text = \"Custom color\", position = vmath.vector3(200, 180, 0), color = color_green })\n\n-- Draw debug line between player and enemy on the screen\nlocal start_p = go.get_position(\"player\")\nlocal end_p = go.get_position(\"enemy\")\nlocal color_red = vmath.vector4(1, 0, 0, 1)\nmsg.post(\"@render:\", \"draw_line\", { start_point = start_p, end_point = end_p, color = color_red })\n```\n\n----------------------------------------\n\nTITLE: Collision Separation Using Contact Normals in Defold (Lua)\nDESCRIPTION: Implements per-contact-point separation logic to keep the player character from overlapping with level geometry. Projects the current correction vector onto the contact normal, computes the compensation, accumulates the result, and applies the correction to the character's position. Required context: `self.correction` holds the accumulated correction (should be reset every frame), `normal` is the contact normal vector, and `distance` is the contact penetration value. Also uses Defold functions like `go.get_position()` and `go.set_position()`. Handles both single and multiple contact points per frame.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/platformer.md#2025-04-23_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal proj = vmath.dot(self.correction, normal) -- <1>\\nlocal comp = (distance - proj) * normal -- <2>\\nself.correction = self.correction + comp -- <3>\\ngo.set_position(go.get_position() + comp) -- <4>\n```\n\n----------------------------------------\n\nTITLE: Optimized Message Handling with Prehashed Strings in Lua\nDESCRIPTION: Improved version of message handling where strings are hashed once and stored in local variables for better performance.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/optimization-speed.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MESSAGE1 = hash(\"message1\")\nlocal MESSAGE2 = hash(\"message2\")\nlocal MESSAGE3 = hash(\"message3\")\nlocal MESSAGE4 = hash(\"message4\")\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == MESSAGE1 then\n        msg.post(sender, MESSAGE3)\n    elseif message_id == MESSAGE2 then\n        msg.post(sender, MESSAGE4)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Addressing Game Objects and Components in Lua\nDESCRIPTION: This code snippet demonstrates various ways to address game objects and components in Defold using Lua. It includes examples of creating objects, setting properties, getting positions, and sending messages.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/addressing.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal id = factory.create(\"#enemy_factory\")\nlabel.set_text(\"my_gameobject#my_label\", \"Hello World!\")\n\nlocal pos = go.get_position(\"my_gameobject\")\ngo.set_position(pos, \"/level/stuff/other_gameobject\")\n\nmsg.post(\"#\", \"hello_there\")\nlocal id = go.get_id(\".\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Native Extension in C++\nDESCRIPTION: A complete example of a C++ extension that provides a string reverse function to Lua. It demonstrates the extension lifecycle callbacks, Lua binding, and proper use of the Defold SDK macros.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// myextension.cpp\n// Extension lib defines\n#define LIB_NAME \"MyExtension\"\n#define MODULE_NAME \"myextension\"\n\n// include the Defold SDK\n#include <dmsdk/sdk.h>\n\nstatic int Reverse(lua_State* L)\n{\n    // The number of expected items to be on the Lua stack\n    // once this struct goes out of scope\n    DM_LUA_STACK_CHECK(L, 1);\n\n    // Check and get parameter string from stack\n    char* str = (char*)luaL_checkstring(L, 1);\n\n    // Reverse the string\n    int len = strlen(str);\n    for(int i = 0; i < len / 2; i++) {\n        const char a = str[i];\n        const char b = str[len - i - 1];\n        str[i] = b;\n        str[len - i - 1] = a;\n    }\n\n    // Put the reverse string on the stack\n    lua_pushstring(L, str);\n\n    // Return 1 item\n    return 1;\n}\n\n// Functions exposed to Lua\nstatic const luaL_reg Module_methods[] =\n{\n    {\"reverse\", Reverse},\n    {0, 0}\n};\n\nstatic void LuaInit(lua_State* L)\n{\n    int top = lua_gettop(L);\n\n    // Register lua names\n    luaL_register(L, MODULE_NAME, Module_methods);\n\n    lua_pop(L, 1);\n    assert(top == lua_gettop(L));\n}\n\ndmExtension::Result AppInitializeMyExtension(dmExtension::AppParams* params)\n{\n    return dmExtension::RESULT_OK;\n}\n\ndmExtension::Result InitializeMyExtension(dmExtension::Params* params)\n{\n    // Init Lua\n    LuaInit(params->m_L);\n    printf(\"Registered %s Extension\\n\", MODULE_NAME);\n    return dmExtension::RESULT_OK;\n}\n\ndmExtension::Result AppFinalizeMyExtension(dmExtension::AppParams* params)\n{\n    return dmExtension::RESULT_OK;\n}\n\ndmExtension::Result FinalizeMyExtension(dmExtension::Params* params)\n{\n    return dmExtension::RESULT_OK;\n}\n\n\n// Defold SDK uses a macro for setting up extension entry points:\n//\n// DM_DECLARE_EXTENSION(symbol, name, app_init, app_final, init, update, on_event, final)\n\n// MyExtension is the C++ symbol that holds all relevant extension data.\n// It must match the name field in the `ext.manifest`\nDM_DECLARE_EXTENSION(MyExtension, LIB_NAME, AppInitializeMyExtension, AppFinalizeMyExtension, InitializeMyExtension, 0, 0, FinalizeMyExtension)\n```\n\n----------------------------------------\n\nTITLE: Frame Update Logic in Defold Script\nDESCRIPTION: Shows how to implement per-frame update logic with delta time in a script component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction update(self, dt)\n  self.age = self.age + dt -- increase age with the timestep\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Snake Game Logic in Lua for Defold\nDESCRIPTION: This script implements the core logic for a Snake game, including snake movement, food placement, collision detection, and input handling. It uses Defold's tilemap and input systems, and includes functions for game initialization, updates, and input processing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function put_food(self)\n    self.food = {x = math.random(2, 47), y = math.random(2, 47)}\n    tilemap.set_tile(\"#grid\", \"layer1\", self.food.x, self.food.y, 3)        \nend\n\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\")\n\n    self.segments = {\n        {x = 7, y = 24},\n        {x = 8, y = 24},\n        {x = 9, y = 24},\n        {x = 10, y = 24} }\n    self.dir = {x = 1, y = 0}\n    self.dirqueue = {}\n    self.speed = 7.0\n    self.alive = true\n    self.t = 0\n\n    math.randomseed(socket.gettime())\n    put_food(self)\nend\n\nfunction update(self, dt)\n    self.t = self.t + dt\n    if self.t >= 1.0 / self.speed and self.alive then\n        local newdir = table.remove(self.dirqueue, 1)\n\n        if newdir then\n            local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y\n            if not opposite then\n                self.dir = newdir\n            end\n        end\n\n        local head = self.segments[#self.segments]\n        local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}\n\n        table.insert(self.segments, newhead)\n\n        local tile = tilemap.get_tile(\"#grid\", \"layer1\", newhead.x, newhead.y)\n\n        if tile == 2 or tile == 4 then\n            self.alive = false\n        elseif tile == 3 then\n            self.speed = self.speed + 1\n            put_food(self)\n        else\n            local tail = table.remove(self.segments, 1)\n            tilemap.set_tile(\"#grid\", \"layer1\", tail.x, tail.y, 1)\n        end\n\n        for i, s in ipairs(self.segments) do\n            tilemap.set_tile(\"#grid\", \"layer1\", s.x, s.y, 2)            \n        end\n\n        self.t = 0\n    end\nend\n\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"up\") and action.pressed then\n        table.insert(self.dirqueue, {x = 0, y = 1})\n    elseif action_id == hash(\"down\") and action.pressed then\n        table.insert(self.dirqueue, {x = 0, y = -1})\n    elseif action_id == hash(\"left\") and action.pressed then\n        table.insert(self.dirqueue, {x = -1, y = 0})\n    elseif action_id == hash(\"right\") and action.pressed then\n        table.insert(self.dirqueue, {x = 1, y = 0})\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Message Handling in Defold Script\nDESCRIPTION: Shows how to handle incoming messages in a script component using on_message callback.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"increase_score\") then\n        self.total_score = self.total_score + message.score\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Manipulating GUI Node Size in Lua\nDESCRIPTION: This snippet shows how to get a reference to a GUI node, retrieve its size, modify it, and set the new size.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-script.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- extend the health bar by 10 units\nlocal healthbar_node = gui.get_node(\"healthbar\")\nlocal size = gui.get_size(healthbar_node)\nsize.x = size.x + 10\ngui.set_size(healthbar_node, size)\n```\n\n----------------------------------------\n\nTITLE: Checking for Extension Availability in Lua\nDESCRIPTION: A code snippet demonstrating how to check if an extension is available on the current platform before using it. This pattern is recommended when the extension might not be supported on all platforms.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n    if myextension ~= nil then\n        myextension.do_something()\n    end\n```\n\n----------------------------------------\n\nTITLE: Playing Sound in Defold\nDESCRIPTION: Basic example of playing a sound with custom properties including delay, gain, pan and speed.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sound.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nsound.play(\"go#sound\", {delay = 1, gain = 0.5, pan = -1.0, speed = 1.25})\n```\n\n----------------------------------------\n\nTITLE: Game Board Management and Win Detection in Lua\nDESCRIPTION: Functions for clearing, building, and managing the game board, including win condition detection and board regeneration if starting in winning state.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal function clear_board(self)\n    for y = 0,boardheight - 1 do\n        for x = 0,boardwidth - 1 do\n            if self.board[x][y] ~= nil then\n                go.delete(self.board[x][y].id)\n                self.board[x][y] = nil\n            end\n        end\n    end\nend\n\nlocal function build_board(self)\n    build_blocklist(self)\n    local magic_blocks = mark_magic_regions(self)\n    if count_magic_regions(magic_blocks) == 1 then\n        clear_board(self)\n        build_board(self)\n    end\n    highlight_magic(magic_blocks)\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning Game Objects with Factory Component in Lua\nDESCRIPTION: This snippet demonstrates how to use factory.create() to spawn a new game object at a random y position within a specified range.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- factory.script\nlocal p = go.get_position()\np.y = vmath.lerp(math.random(), min_y, max_y)\nlocal component = \"#star_factory\"\nfactory.create(component, p)\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame Update Logic in Defold Render Script\nDESCRIPTION: Handles the main rendering loop including clearing buffers, setting up cameras, and drawing different types of game objects with appropriate render states. Manages both 3D models and 2D elements like sprites and GUI.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction update(self)\n    local state = self.state\n     if not state.valid then\n        if not update_state(state) then\n            return\n        end\n    end\n\n    local predicates = self.predicates\n    -- clear screen buffers\n    --\n    render.set_depth_mask(true)\n    render.set_stencil_mask(0xff)\n    render.clear(state.clear_buffers)\n\n    local camera_world = state.cameras.camera_world\n    render.set_viewport(0, 0, state.window_width, state.window_height)\n    render.set_view(camera_world.view)\n    render.set_projection(camera_world.proj)\n\n\n    -- render models\n    --\n    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)\n    render.enable_state(render.STATE_CULL_FACE)\n    render.enable_state(render.STATE_DEPTH_TEST)\n    render.set_depth_mask(true)\n    render.draw(predicates.model_pred)\n    render.set_depth_mask(false)\n    render.disable_state(render.STATE_DEPTH_TEST)\n    render.disable_state(render.STATE_CULL_FACE)\n\n     -- render world (sprites, tilemaps, particles etc)\n     --\n    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)\n    render.enable_state(render.STATE_DEPTH_TEST)\n    render.enable_state(render.STATE_STENCIL_TEST)\n    render.enable_state(render.STATE_BLEND)\n    render.draw(predicates.tile)\n    render.draw(predicates.particle)\n    render.disable_state(render.STATE_STENCIL_TEST)\n    render.disable_state(render.STATE_DEPTH_TEST)\n\n    -- debug\n    render.draw_debug3d()\n\n    -- render GUI\n    --\n    local camera_gui = state.cameras.camera_gui\n    render.set_view(camera_gui.view)\n    render.set_projection(camera_gui.proj)\n    render.enable_state(render.STATE_STENCIL_TEST)\n    render.draw(predicates.gui, camera_gui.frustum)\n    render.draw(predicates.text, camera_gui.frustum)\n    render.disable_state(render.STATE_STENCIL_TEST)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Position Animation in Defold\nDESCRIPTION: Example showing how to set and animate a game object's vertical position property using loop-pingpong playback and bounce easing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/property-animation.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Set the position property y component to 200\ngo.set(\".\", \"position.y\", 200)\n-- Then animate it\ngo.animate(\".\", \"position.y\", go.PLAYBACK_LOOP_PINGPONG, 100, go.EASING_OUTBOUNCE, 2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Game Controller Script in Lua\nDESCRIPTION: This script manages the overall game state, handling transitions between the main menu and the game board. It uses collection proxies to dynamically load and unload the game board, and responds to messages for starting the game and returning to the main menu.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_23\n\nLANGUAGE: Lua\nCODE:\n```\n-- main.script\nfunction init(self)\n    msg.post(\"#\", \"to_main_menu\")\n    self.state = \"MAIN_MENU\"\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"to_main_menu\") then\n        if self.state ~= \"MAIN_MENU\" then\n            msg.post(\"#boardproxy\", \"unload\")\n        end\n        msg.post(\"main:/main#menu\", \"enable\") -- <1>\n        self.state = \"MAIN_MENU\"\n    elseif message_id == hash(\"start_game\") then\n        msg.post(\"#boardproxy\", \"load\")\n        msg.post(\"#menu\", \"disable\")\n    elseif message_id == hash(\"proxy_loaded\") then\n        -- Board collection has loaded...\n        msg.post(sender, \"init\")\n        msg.post(\"board:/board#script\", \"start_level\", { difficulty = 1 }) -- <2>\n        msg.post(sender, \"enable\")\n        self.state = \"GAME_RUNNING\"\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Magic Block Region Detection in Lua\nDESCRIPTION: Functions for detecting and marking connected regions of magic blocks on the game board. Includes helpers for finding adjacent blocks and spreading region markers.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal function adjacent_magic_blocks(blocks, block)\n    return filter(function (e)\n        return (block.x == e.x and math.abs(block.y - e.y) == 1) or\n            (block.y == e.y and math.abs(block.x - e.x) == 1)\n    end, blocks)\nend\n\nlocal function mark_neighbors(blocks, block, region)\n    local neighbors = adjacent_magic_blocks(blocks, block)\n    for i, m in pairs(neighbors) do\n        if m.region == nil then\n            m.region = region\n            mark_neighbors(blocks, m, region)\n        end\n    end\nend\n\nlocal function mark_magic_regions(self)\n    local m_blocks = magic_blocks(self)\n    for i, m in pairs(m_blocks) do\n        m.region = nil\n        local n = 0\n        for _ in pairs(adjacent_magic_blocks(m_blocks, m)) do n = n + 1 end\n        m.neighbors = n\n    end\n    local region = 1\n    for i, m in pairs(m_blocks) do\n        if m.region == nil then\n            m.region = region\n            mark_neighbors(m_blocks, m, region)\n            region = region + 1\n        end\n    end\n    return m_blocks\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Car Physics and Position per Frame in Lua\nDESCRIPTION: This `update` function runs every frame and implements the car's movement logic. It sets acceleration based on input, calculates new positions for front and back wheels considering steering, determines the car's new direction vector, updates velocity based on acceleration and delta time (`dt`), and updates the game object's position (`go.set_position`). It also interpolates the steering angle smoothly using `vmath.slerp` based on left/right input, updates the visual rotation of the wheel game objects (`go.set_rotation`) and the main car body, and finally resets the acceleration and input vectors for the next frame.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/car.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction update(self, dt)\n\t-- Set acceleration to the y input\n\tself.acceleration.y = self.input.y * acceleration\t\t\t\t-- <1>\n\n\t-- Calculate the new positions of front and back wheels\n\tlocal front_vel = vmath.rotate(self.steer_angle, self.velocity)\n\tlocal new_front_pos = vmath.rotate(self.direction, wheels_vector + front_vel)\n\tlocal new_back_pos = vmath.rotate(self.direction, self.velocity)\t\t\t\t\t\t\t\t-- <2>\n\n\t-- Calculate the car's new direction\n\tlocal new_dir = vmath.normalize(new_front_pos - new_back_pos)\n\tself.direction = vmath.quat_rotation_z(math.atan2(new_dir.y, new_dir.x) - math.pi / 2)\t\t\t-- <3>\n\n\t-- Calculate new velocity based on current acceleration\n\tself.velocity = self.velocity + self.acceleration * dt\t\t\t-- <4>\n\n\t-- Update position based on current velocity and direction\n\tlocal pos = go.get_position()\n\tpos = pos + vmath.rotate(self.direction, self.velocity)\n\tgo.set_position(pos)\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- <5>\n\n\t-- Interpolate the wheels using vmath.slerp\n\tif self.input.x > 0 then\t\t\t\t\t\t\t\t\t\t\t\t\t-- <6>\n\t\tself.steer_angle = vmath.slerp(turn_speed, self.steer_angle, max_steer_angle_right)\n\telseif self.input.x < 0 then\n\t\tself.steer_angle = vmath.slerp(turn_speed, self.steer_angle, max_steer_angle_left)\n\telse\n\t\tself.steer_angle = vmath.slerp(turn_speed, self.steer_angle, steer_angle_zero)\n\tend\n\n\t-- Update the wheel rotation\n\tgo.set_rotation(self.steer_angle, \"left_wheel\")\t\t\t\t\t-- <7>\n\tgo.set_rotation(self.steer_angle, \"right_wheel\")\n\n\t-- Set the game object's rotation to the direction\n\tgo.set_rotation(self.direction)\n\n\t-- reset acceleration and input\n\tself.acceleration = vmath.vector3()\t\t\t\t\t\t\t\t-- <8>\n\tself.input = vmath.vector3()\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Physics Event Handler in Defold\nDESCRIPTION: Complete example of implementing a physics world listener function that handles different types of physics events including contact points, collisions, triggers, and raycasts.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-events.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function physics_world_listener(self, event, data)\n    if event == hash(\"contact_point_event\") then\n        -- Handle detailed contact point data\n        pprint(data)\n    elseif event == hash(\"collision_event\") then\n        -- Handle general collision data\n        pprint(data)\n    elseif event == hash(\"trigger_event\") then\n        -- Handle trigger interaction data\n        pprint(data)\n    elseif event == hash(\"ray_cast_response\") then\n        -- Handle raycast hit data\n        pprint(data)\n    elseif event == hash(\"ray_cast_missed\") then\n        -- Handle raycast miss data\n        pprint(data)\n    end\nend\n\nfunction init(self)\n    physics.set_listener(physics_world_listener)\nend\n```\n\n----------------------------------------\n\nTITLE: Playing Flipbook Animations on Sprites with Input Handling in Lua\nDESCRIPTION: This Lua code demonstrates how to play flipbook animations on sprites based on user input. It includes functions for playing idle animations and handling dodge actions with transition animations.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flipbook-animation.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function play_idle_animation(self)\n    if self.dodge then\n        sprite.play_flipbook(\"#sprite\", hash(\"dodge_idle\"))\n    else\n        sprite.play_flipbook(\"#sprite\", hash(\"idle\"))\n    end\nend\n\nfunction on_input(self, action_id, action)\n    -- \"dodge\" is our input action\n    if action_id == hash(\"dodge\") then\n        if action.pressed then\n            sprite.play_flipbook(\"#sprite\", hash(\"start_dodge\"), play_idle_animation)\n            -- remember that we are dodging\n            self.dodge = true\n        elseif action.released then\n            sprite.play_flipbook(\"#sprite\", hash(\"stop_dodge\"), play_idle_animation)\n            -- we are not dodging anymore\n            self.dodge = false\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Understanding Lua Scope Management in Defold\nDESCRIPTION: Demonstrates different scope levels in Defold including global, script, component instance, and local scopes. Shows how variable visibility is affected by scope and lifetime within different script functions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\n-- 'my_global_value' will be available from all scripts, gui_scripts, render script and modules (Lua files)\nmy_global_value = \"global scope\"\n\n-- this value will be shared through all component instances that use this particular script file\nlocal script_value = \"script scope\"\n\nfunction init(self, dt)\n    -- This value will be available on this script component instance\n    self.foo = \"self scope\"\n\n    -- this value will be available inside init() and after it's declaration\n    local local_foo = \"local scope\"\n    print(local_foo)\nend\n\nfunction update(self, dt)\n    print(self.foo)\n    print(my_global_value)\n    print(script_value)\n    print(local_foo) -- will print nil, since local_foo is only visible in init()\nend\n```\n\n----------------------------------------\n\nTITLE: Breaking and Returning from Loops and Functions in Lua - Lua\nDESCRIPTION: Highlights 'break' and 'return' control flow statements, showing how to exit loops and return values from functions. Demonstrates constraints: both statements must be the last in a block. Uses a 'while' loop and a simple function; prints final results.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\na = 1\nwhile true do\n    a = a + 1\n    if a >= 100 then\n        break\n    end\nend\n\nfunction my_add(a, b)\n    return a + b\nend\n\nprint(my_add(10, 12)) --> 22\n```\n\n----------------------------------------\n\nTITLE: Initializing Board State, Helpers, and Level Start in Defold Lua Script\nDESCRIPTION: This Lua script (`board.script`) defines initial properties and constants for a game board, including dimensions, block size, colors, and game state variables. It includes helper functions `filter` (for filtering tables based on a function) and `build_blocklist` (to create a flat list of blocks from the 2D board structure). The `init` function initializes the board state, acquires input focus, and posts a message to start level generation via `build_board`. The `on_message` function listens for the 'start_level' message to trigger board construction.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\ngo.property(\"timer\", 0)     -- Use to time events\nlocal blocksize = 80        -- Distance between block centers\nlocal edge = 40             -- Left and right edge.\nlocal bottom_edge = 50      -- Bottom edge.\nlocal boardwidth = 7        -- Number of columns\nlocal boardheight = 9       -- Number of rows\nlocal centeroff = vmath.vector3(8, -8, 0) -- Center offset for connector gfx since there's shadow below in the block img\nlocal dropamount = 3        -- The number of blocks dropped on a \"drop\"\nlocal colors = { hash(\"orange\"), hash(\"pink\"), hash(\"blue\"), hash(\"yellow\"), hash(\"green\") }\n\n--\n-- filter(function, table)\n-- e.g: filter(is_even, {1,2,3,4}) -> {2,4}\n--\nlocal function filter(func, tbl)\n    local new = {}\n    for i, v in pairs(tbl) do\n        if func(v) then\n            new[i] = v\n        end\n    end\n    return new\nend\n\n--\n-- Build a list of blocks in 1 dimension for easy filtering\n--\nlocal function build_blocklist(self)\n    self.blocks = {}\n    for x, l in pairs(self.board) do\n        for y, b in pairs(self.board[x]) do\n            table.insert(self.blocks, { id = b.id, color = b.color, x = b.x, y = b.y })\n        end\n    end\nend\n\n--\n-- INIT\n--\nfunction init(self)\n    self.board = {}             -- Contains the board structure\n    self.blocks = {}            -- List of all blocks. Used for easy filtering on selection.\n    self.chain = {}             -- Current selection chain\n    self.connectors = {}        -- Connector elements to mark the selection chain\n    self.num_magic = 3          -- Number of magic blocks on the board\n    self.drops = 1              -- Number of drops you have available\n    self.magic_blocks = {}      -- Magic blocks that are lined up\n    self.dragging = false       -- Drag touch input\n    msg.post(\".\", \"acquire_input_focus\")\n    msg.post(\"#\", \"start_level\")\nend\n\nlocal function build_board(self)\n    math.randomseed(os.time())\n    local pos = vmath.vector3()\n    local c\n    local x = 0\n    local y = 0\n    for x = 0,boardwidth-1 do\n        pos.x = edge + blocksize / 2 + blocksize * x\n        self.board[x] = {}\n        for y = 0,boardheight-1 do\n            pos.y = bottom_edge + blocksize / 2 + blocksize * y\n            -- Calc z\n            pos.z = x * -0.1 + y * 0.01 -- <1>\n            c = colors[math.random(#colors)]    -- Pick a random color\n            local id = factory.create(\"#blockfactory\", pos, null, { color = c })\n            self.board[x][y] = { id = id, color = c,  x = x, y = y }\n        end\n    end\n\n    -- Build 1d list that we can easily filter.\n    build_blocklist(self)\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"start_level\") then\n        build_board(self)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Game Objects with Factory in Lua\nDESCRIPTION: Code snippet demonstrating how to dynamically create a game object using a factory component in Defold. The function returns the ID of the created object which can be stored for later reference.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/flash.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal logo_id = factory.create(\"factories#logo_factory\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Game Logic in Board Script for Defold\nDESCRIPTION: The main game script handling level starts, restarts, level completion, next level progression, and drop mechanics. It contains the core game logic that interacts with the GUI components.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_29\n\nLANGUAGE: Lua\nCODE:\n```\n-- board.script\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"start_level\") then\n        self.num_magic = message.difficulty + 1\n        build_board(self)\n\n        msg.post(\"#gui\", \"set_drop_counter\", { drops = self.drops } )\n\n        msg.post(\"present_level#gui\", \"show\", { level = message.difficulty } )\n        -- Wait some...\n        go.animate(\"#\", \"timer\", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 2, 0, function ()\n            msg.post(\"present_level#gui\", \"hide\")\n            msg.post(\".\", \"acquire_input_focus\")\n        end)\n    elseif message_id == hash(\"restart_level\") then\n        clear_board(self)\n        build_board(self)\n        self.drops = 1\n        msg.post(\"#gui\", \"set_drop_counter\", { drops = self.drops } )\n        msg.post(\".\", \"acquire_input_focus\")\n    elseif message_id == hash(\"level_completed\") then\n        -- turn off input\n        msg.post(\".\", \"release_input_focus\")\n\n        -- Animate the magic!\n        for i, m in ipairs(magic_blocks(self)) do\n            go.set_scale(0.17, m.id)\n            go.animate(m.id, \"scale\", go.PLAYBACK_LOOP_PINGPONG, 0.19, go.EASING_INSINE, 0.5, 0)\n        end\n\n        -- Show completion screen\n        msg.post(\"level_complete#gui\", \"show\")\n    elseif message_id == hash(\"next_level\") then\n        clear_board(self)\n        self.drops = self.drops + 1\n        -- Difficulty level is number of magic blocks - 1\n        msg.post(\"#\", \"start_level\", { difficulty = self.num_magic })\n    elseif message_id == hash(\"drop\") then\n        s = dropspots(self)\n        if #s == 0 then\n            -- Can't perform drop\n            msg.post(\"no_drop_room#gui\", \"show\")\n        elseif self.drops > 0 then\n            -- Do the drop\n            drop(self, s)\n            self.drops = self.drops - 1\n            msg.post(\"#gui\", \"set_drop_counter\", { drops = self.drops } )\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Non-Reactive State Machine Implementation\nDESCRIPTION: Example of traditional state machine implementation using update loop.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- Counter to keep track of time.\n    self.counter = 0\n    -- We need this to keep track of our state.\n    self.state = \"first\"\nend\n\nfunction update(self, dt)\n    self.counter = self.counter + dt\n    if self.counter >= 2.0 and self.state == \"first\" then\n        -- send message after 2 seconds\n        msg.post(\"some_object\", \"some_message\")\n        self.state = \"waiting\"\n    end\n    if self.counter >= 5.0 and self.state == \"second\" then\n        -- send message 5 seconds after we received \"response\"\n        msg.post(\"another_object\", \"another_message\")\n        -- Nil the state so we don't reach this state block again.\n        self.state = nil\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"response\") then\n        -- \"first\" state done. enter next\n        self.state = \"second\"\n        -- zero the counter\n        self.counter = 0\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Pause Button Input in Lua for Defold\nDESCRIPTION: Handles mouse press input to detect when player clicks the pause button in the HUD. When pressed, sends a show message to the pause menu component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"mouse_press\") and action.pressed then\n        -- Did the player press PAUSE?\n        local pausenode = gui.get_node(\"pause\")\n        if gui.pick_node(pausenode, action.x, action.y) then\n            -- Tell the pause menu to take over.\n            msg.post(\"pause_menu\", \"show\")\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform Behavior Script in Defold\nDESCRIPTION: This script controls the movement and lifecycle of platforms. It initializes with a default speed, moves the platform leftward in update(), automatically deletes the platform when it moves offscreen, and can have its speed adjusted via messaging.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- platform.script\nfunction init(self)\n    self.speed = 540      -- Default speed in pixels/s\nend\n\nfunction update(self, dt)\n    local pos = go.get_position()\n    if pos.x < -500 then\n        go.delete() -- <1>\n    end\n    pos.x = pos.x - self.speed * dt\n    go.set_position(pos)\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"set_speed\") then\n        self.speed = message.speed\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to GUI Components in Lua\nDESCRIPTION: This code demonstrates how to send a message to a GUI component from another script, passing data as a table.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-script.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal stats = { score = 4711, stars = 3, health = 6 }\nmsg.post(\"hud#gui\", \"set_stats\", stats)\n```\n\n----------------------------------------\n\nTITLE: Initializing Interactive 15-Puzzle Game State with Defold in Lua\nDESCRIPTION: Defines the 'init' function to set up the interactive puzzle. Sends a message to acquire input focus, seeds Lua's randomizer based on current time (requiring the 'socket' library), generates a random but solvable board state, draws it to the screen, resets the win completion flag, and hides the win label. The function expects tilemap and label components configured in the collection, and relies on previously defined helper functions ('scramble', 'solvable', 'draw'). No parameters are required; the main side effects are changes in self.board, self.done, and visual state.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\") -- <1>\n    math.randomseed(socket.gettime()) -- <2>\n    self.board = scramble({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0}) -- <3>\n    while not solvable(self.board) do -- <4>\n        self.board = scramble(self.board)\n    end\n    draw(self.board) -- <5>\n    self.done = false -- <6>\n    msg.post(\"#done\", \"disable\") -- <7>\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Kinematic Collision Resolution in Lua for Defold\nDESCRIPTION: This snippet provides a more sophisticated approach to resolving kinematic collisions in Defold. It handles multiple contact points, calculates proper separation vectors, and accumulates corrections to avoid overshooting.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-resolving-collisions.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n  -- correction vector\n  self.correction = vmath.vector3()\nend\n\nfunction update(self, dt)\n  -- reset correction\n  self.correction = vmath.vector3()\nend\n\nfunction on_message(self, message_id, message, sender)\n  -- Handle collision\n  if message_id == hash(\"contact_point_response\") then\n    -- Get the info needed to move out of collision. We might\n    -- get several contact points back and have to calculate\n    -- how to move out of all of them by accumulating a\n    -- correction vector for this frame:\n    if message.distance > 0 then\n      -- First, project the accumulated correction onto\n      -- the penetration vector\n      local proj = vmath.project(self.correction, message.normal * message.distance)\n      if proj < 1 then\n        -- Only care for projections that does not overshoot.\n        local comp = (message.distance - message.distance * proj) * message.normal\n        -- Apply compensation\n        go.set_position(go.get_position() + comp)\n        -- Accumulate correction done\n        self.correction = self.correction + comp\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Constructing and Manipulating URL Objects in Lua\nDESCRIPTION: Demonstrates different methods for creating and working with URL objects in Defold, including construction from strings, parameters, and building from empty objects. Shows how to access and modify URL components.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/addressing.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Construct URL object from a string:\nlocal my_url = msg.url(\"main:/manager#controller\")\nprint(my_url) --> url: [main:/manager#controller]\nprint(my_url.socket) --> 786443 (internal numeric value)\nprint(my_url.path) --> hash: [/manager]\nprint(my_url.fragment) --> hash: [controller]\n\n-- Construct URL from parameters:\nlocal my_url = msg.url(\"main\", \"/manager\", \"controller\")\nprint(my_url) --> url: [main:/manager#controller]\n\n-- Build from empty URL object:\nlocal my_url = msg.url()\nmy_url.socket = \"main\" -- specify by valid name\nmy_url.path = hash(\"/manager\") -- specify as string or hash\nmy_url.fragment = \"controller\" -- specify as string or hash\n\n-- Post to target specified by URL\nmsg.post(my_url, \"hello_manager!\")\n```\n\n----------------------------------------\n\nTITLE: Handling Collision Response in Lua for Defold\nDESCRIPTION: This snippet demonstrates how to handle a 'collision_response' message in Defold. It checks for the message type and prints the ID of the object collided with.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-messages.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n    -- check for the message\n    if message_id == hash(\"collision_response\") then\n        -- take action\n        print(\"I collided with\", message.other_id)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Compute Shader Program in GLSL\nDESCRIPTION: This GLSL compute shader demonstrates reading from an input texture and constant buffer, performing a simple color multiplication, and writing the result to a storage texture. It shows the basic structure of a compute shader in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/compute.md#2025-04-23_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\n#version 450\n\nlayout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;\n\nuniform vec4 color;\nuniform sampler2D texture_in;\n\nlayout(rgba32f) uniform image2D texture_out;\n\nvoid main()\n{\n    ivec2 tex_coord   = ivec2(gl_GlobalInvocationID.xy);\n    vec4 output_value = vec4(0.0, 0.0, 0.0, 1.0);\n    vec2 tex_coord_uv = vec2(float(tex_coord.x)/(gl_NumWorkGroups.x), float(tex_coord.y)/(gl_NumWorkGroups.y));\n    vec4 input_value = texture(texture_in, tex_coord_uv);\n    output_value.rgb = input_value.rgb * color.rgb;\n    imageStore(texture_out, tex_coord, output_value);\n}\n```\n\n----------------------------------------\n\nTITLE: Defold Built-in Sprite Vertex Shader (sprite.vp) in GLSL\nDESCRIPTION: The standard Defold vertex shader (`sprite.vp`) for sprites. It takes world-space vertex positions and UV coordinates as attributes. It transforms the position using the combined view and projection matrix (`view_proj` uniform) to calculate the final clip-space position (`gl_Position`) and passes the UV coordinates (`var_texcoord0`) to the fragment shader via a varying variable.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_13\n\nLANGUAGE: glsl\nCODE:\n```\n-- sprite.vp\nuniform mediump mat4 view_proj;             // [1]\n\nattribute mediump vec4 position;            // [2]\nattribute mediump vec2 texcoord0;\n\nvarying mediump vec2 var_texcoord0;         // [3]\n\nvoid main()\n{\n  gl_Position = view_proj * vec4(position.xyz, 1.0);    // [4]\n  var_texcoord0 = texcoord0;                            // [5]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Objects with Predicates in Lua\nDESCRIPTION: Example showing how to create and use render predicates to control drawing of objects based on material tags. Demonstrates single and multiple tag matching.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- a predicate matching all sprites with tag \"tree\"\nlocal trees = render.predicate({\"tree\"})\n-- will draw Sprite 1, 2 and 3\nrender.draw(trees)\n\n-- a predicate matching all sprites with tag \"outlined\"\nlocal outlined = render.predicate({\"outlined\"})\n-- will draw Sprite 1, 2 and 4\nrender.draw(outlined)\n\n-- a predicate matching all sprites with tags \"outlined\" AND \"tree\"\nlocal outlined_trees = render.predicate({\"outlined\", \"tree\"})\n-- will draw Sprite 1 and 2\nrender.draw(outlined_trees)\n```\n\n----------------------------------------\n\nTITLE: Handling Level Completion Effects with Defold GUI Script - Lua\nDESCRIPTION: This snippet demonstrates the orchestration of level completion effects using Defold's GUI scripting API in Lua. The script initializes UI elements, fades in the heading, increments the score with animated bounces and color interpolations, and reveals stars and a high-score imprint in response to a specific message. It closely interacts with Defold's GUI functions such as set_color, set_scale, animate, and new_box_node, and relies on per-frame animation with timing and easing. Dependencies include the Defold GUI module, vmath for vector math, and a set of defined GUI node names. Key parameters include animation timings, score increments, scaling factors, and the message properties for score and star levels. The snippet expects score and star_levels in the message, and handles their visual effects in a sequenced, stateful manner.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/level-complete.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- file: level_complete.gui_script\n\n-- how fast the score is incremented per second\nlocal score_inc_speed = 51100\n-- how long time between each update of the score\nlocal dt = 0.03\n-- scale of the score at the start of counting\nlocal score_start_scale = 0.7\n-- scale of the score when the target score has been reached\nlocal score_end_scale = 1.0\n-- how much the score \"bounces\" at each increment\nlocal score_bounce_factor = 1.1\n-- how many small stars to spawn for each big star\nlocal small_star_count = 16\n\nlocal function setup(self)\n    -- make heading color transparent\n    local c = gui.get_color(self.heading)\n    c.w = 0\n    gui.set_color(self.heading, c)\n    -- make heading shadow transparent\n    c = gui.get_shadow(self.heading)\n    c.w = 0\n    gui.set_shadow(self.heading, c)\n    -- set heading to twice the scale initially\n    local s = 2\n    gui.set_scale(self.heading, vmath.vector3(s, s, s))\n    -- set initial score (0)\n    gui.set_text(self.score, \"0\")\n    -- set score color to opaque white\n    gui.set_color(self.score, vmath.vector4(1, 1, 1, 1))\n    -- set scale so the score can grow while counting\n    gui.set_scale(self.score, vmath.vector4(score_start_scale, score_start_scale, 1, 0))\n\n    -- make all big stars transparent\n    for i=1,#self.stars do\n        gui.set_color(self.stars[i], vmath.vector4(1, 1, 1, 0))\n    end\n    -- make the imprint transparent\n    gui.set_color(self.imprint, vmath.vector4(1, 1, 1, 0))\n    -- the score currently being displayed\n    self.current_score = 0\n    -- the target score when counting\n    self.target_score = 0\nend\n\nfunction init(self)\n    -- retrieve nodes for easier access\n    self.heading = gui.get_node(\"heading\")\n    self.stars = {gui.get_node(\"star_left\"), gui.get_node(\"star_mid\"), gui.get_node(\"star_right\")}\n    self.score = gui.get_node(\"score\")\n    self.imprint = gui.get_node(\"imprint\")\n    -- start color of the score\n    self.score_start_color = vmath.vector4(1, 1, 1, 1)\n    -- save score color and animate towards it during counting later\n    self.score_end_color = gui.get_color(self.score)\n    setup(self)\nend\n\n-- delete a small star, called when the star has finished animating\nlocal function delete_small_star(self, small_star)\n    gui.delete_node(small_star)\nend\n\n-- animate a small star according to the given initial position and angle\nlocal function animate_small_star(self, pos, angle)\n    -- direction of travel for the small star\n    local dir = vmath.vector3(math.cos(angle), math.sin(angle), 0, 0)\n    -- create a small star\n    local small_star = gui.new_box_node(pos + dir * 20, vmath.vector3(64, 64, 0))\n    -- set its texture\n    gui.set_texture(small_star, \"small_star\")\n    -- set its color to full white\n    gui.set_color(small_star, vmath.vector4(1, 1, 1, 1))\n    -- set start scale low\n    local start_s = 0.3\n    gui.set_scale(small_star, vmath.vector3(start_s, start_s, 1))\n    -- variation in scale of each small star\n    local end_s_var = 1\n    -- actual end scale of this star\n    local end_s = 0.5 + math.random() * end_s_var\n    gui.animate(small_star, gui.PROP_SCALE, vmath.vector4(end_s, end_s, 1, 0), gui.EASING_NONE, 0.5)\n    -- variation in distance traveled (essentially speed of the star)\n    local dist_var = 300\n    -- actual distance the star will travel\n    local dist = 400 + math.random() * dist_var\n    gui.animate(small_star, gui.PROP_POSITION, pos + dir * dist, gui.EASING_NONE, 0.5)\n    gui.animate(small_star, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0), gui.EASING_OUT, 0.3, 0.2, delete_small_star)\nend\n\n-- spawn a number of small stars\nlocal function spawn_small_stars(self, star)\n    -- position of the big star the small star will spawn around\n    local p = gui.get_position(star)\n    for i = 1,small_star_count do\n        -- calculate the angle of the particular small star\n        local angle = 2 * math.pi * i/small_star_count\n        -- as well as position\n        local pos = vmath.vector3(p.x, p.y, 0)\n        -- spawn and animate the small star\n        animate_small_star(self, pos, angle)\n    end\nend\n\n-- start the animation of a big star fading in\nlocal function animate_star(self, star)\n    -- fade in duration\n    local fade_in = 0.2\n    -- make it transparent\n    gui.set_color(star, vmath.vector4(1, 1, 1, 0))\n    -- fade in\n    gui.animate(star, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_IN, fade_in)\n    -- initial scale\n    local scale = 5\n    gui.set_scale(star, vmath.vector3(scale, scale, 1))\n    -- shrink back into place\n    gui.animate(star, gui.PROP_SCALE, vmath.vector4(1, 1, 1, 0), gui.EASING_IN, fade_in, 0, spawn_small_stars)\nend\n\n-- start the animation of the imprint fading in\nlocal function animate_imprint(self)\n    -- wait a bit before the imprint appears\n    local delay = 0.8\n    -- fade in duration\n    local fade_in = 0.2\n    -- initial scale\n    local scale = 4\n    gui.set_scale(self.imprint, vmath.vector4(scale, scale, 1, 0))\n    -- shrink back into place\n    gui.animate(self.imprint, gui.PROP_SCALE, vmath.vector4(1, 1, 1, 0), gui.EASING_IN, fade_in, delay)\n    -- also fade in\n    gui.animate(self.imprint, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_IN, fade_in, delay)\nend\n\n-- increment the score one step towards the target\nlocal function inc_score(self, node)\n    -- how much the score is incremented this step\n    local score_inc = score_inc_speed * dt\n    -- new score after increment\n    local new_score = self.current_score + score_inc\n    for i = 1,#self.stars do\n        -- start animating a big star if we cross the level in score for it to appear\n        if self.current_score < self.star_levels[i] and new_score >= self.star_levels[i] then\n            animate_star(self, self.stars[i])\n        end\n    end\n    -- update score, but clamp at target\n    self.current_score = math.min(new_score, self.target_score)\n    -- update the score on screen\n    gui.set_text(self.score, tostring(self.current_score))\n    -- if we are not yet done, keep animating and incrementing\n    if self.current_score < self.target_score then\n        -- how close we are to the target\n        local f = self.current_score / self.target_score\n        -- blend the color to get a slow fade\n        local c = vmath.lerp(f, self.score_start_color, self.score_end_color)\n        gui.animate(self.score, gui.PROP_COLOR, c, gui.EASING_NONE, dt, 0, inc_score)\n        -- new scale for this step\n        local s = vmath.lerp(f, score_start_scale, score_end_scale)\n        -- increase the scale by the bounce factor\n        local sp = s * score_bounce_factor\n        -- animate from bounced scale back to the appropriate scale\n        gui.set_scale(self.score, vmath.vector4(sp, sp, 1, 0))\n        gui.animate(self.score, gui.PROP_SCALE, vmath.vector4(s, s, 1, 0), gui.EASING_NONE, dt)\n    else\n        -- we are done, fade in the imprint\n        -- NOTE! this should in a real case be checked against the actual stored high score\n        animate_imprint(self)\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    -- someone tells us that we should display the level completed scene\n    if message_id == hash(\"level_completed\") then\n        -- retrieve the obtained score and at which score levels the stars should be displayed\n        self.target_score = message.score\n        self.star_levels = message.star_levels\n        -- fade in heading (\"level completed\")\n        local c = gui.get_color(self.heading)\n        c.w = 1\n        gui.animate(self.heading, gui.PROP_COLOR, c, gui.EASING_IN, dt, 0.0, inc_score)\n        c = gui.get_shadow(self.heading)\n        c.w = 1\n\n```\n\n----------------------------------------\n\nTITLE: Complete 15-Puzzle Game Script for Defold (Lua)\nDESCRIPTION: Aggregates all necessary helper functions and gameplay logic for the interactive 15-puzzle, including inversions calculation, tile finding, solvability check, board scrambling, tile swapping, rendering, and event handlers for initialization, input, and game reload. Requires tilemap and input components, the 'socket' library to seed randomness, and presumes a square board; expects and manipulates a flat array representing the puzzle state. Output is board manipulation and display logic, suitable for use as a Defold script attached to a game object.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal function inversions(t)\n    local inv = 0\n    for i=1, #t do\n        for j=i+1, #t do\n            if t[i] > t[j] and t[j] ~= 0 then\n                inv = inv + 1\n            end\n        end\n    end\n    return inv\nend\n\nlocal function find(t, tile)\n    for i=1, #t do\n        if t[i] == tile then\n            local y = 5 - math.ceil(i/4)\n            local x = i - (math.ceil(i/4) - 1) * 4\n            return x,y\n        end\n    end\nend\n\nlocal function solvable(t)\n    local x,y = find(t, 0)\n    if y % 2 == 1 and inversions(t) % 2 == 0 then\n        return true\n    end\n    if y % 2 == 0 and inversions(t) % 2 == 1 then\n        return true\n    end\n    return false    \nend\n\nlocal function scramble(t)\n    for i=1, #t do\n        local tmp = t[i]\n        local r = math.random(#t)\n        t[i] = t[r]\n        t[r] = tmp\n    end\n    return t\nend\n\nlocal function swap(t, i, j)\n    local tmp = t[i]\n    t[i] = t[j]\n    t[j] = tmp\n    return t\nend\n\nlocal function draw(t)\n    for i=1, #t do\n        local y = 5 - math.ceil(i/4)\n        local x = i - (math.ceil(i/4) - 1) * 4\n        tilemap.set_tile(\"#tilemap\",\"layer1\",x,y,t[i])\n    end\nend\n\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\")\n    math.randomseed(socket.gettime())\n    self.board = scramble({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0})   \n    while not solvable(self.board) do\n        self.board = scramble(self.board)\n    end\n    draw(self.board)\n    self.done = false\n    msg.post(\"#done\", \"disable\")\nend\n\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"press\") and action.pressed and not self.done then\n        local x = math.ceil(action.x / 128)\n        local y = math.ceil(action.y / 128)\n        local ex, ey = find(self.board, 0)\n        if math.abs(x - ex) + math.abs(y - ey) == 1 then\n            self.board = swap(self.board, (4-ey)*4+ex, (4-y)*4+x)\n            draw(self.board)\n        end\n        ex, ey = find(self.board, 0)\n        if inversions(self.board) == 0 and ex == 4 then\n            self.done = true\n            msg.post(\"#done\", \"enable\")\n        end\n    end\nend\n\nfunction on_reload(self)\n    self.done = false\n    msg.post(\"#done\", \"disable\")\nend\n```\n\n----------------------------------------\n\nTITLE: Trapezoidal Integration for Displacement Calculation in Lua\nDESCRIPTION: Calculates the displacement (`dx`) for the current frame by integrating over the velocities at the start (`v0`) and end (`self.velocity`) of the frame. This uses trapezoidal integration for improved motion fidelity. Inputs required: `v0`, `self.velocity`, and `dt`. Outputs a value suitable for offsetting the character's position.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/platformer.md#2025-04-23_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal dx = (v0 + self.velocity) * dt * 0.5\n```\n\n----------------------------------------\n\nTITLE: Handling User Input for Car Control in Lua\nDESCRIPTION: This `on_input` function is called by the Defold engine whenever the game object receives input (provided it has acquired input focus). It checks the `action_id` against the pre-hashed input names ('left', 'right', 'accelerate', 'brake'). Based on the matching action, it sets the `x` (steering) or `y` (acceleration/braking) component of the `self.input` vector. This vector is then used in the `update` function to affect the car's movement.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/car.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n\t-- set the input vector to correspond to the key press\n\tif action_id == left then\n\t\tself.input.x = -1\n\telseif action_id == right then\n\t\tself.input.x = 1\n\telseif action_id == accelerate then\n\t\tself.input.y = 1\n\telseif action_id == brake then\n\t\tself.input.y = -1\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Jump Takeoff Speed in Defold (Lua)\nDESCRIPTION: This Lua snippet sets the vertical velocity of the player character to a predefined jump takeoff speed when the jump input is pressed. It assumes that 'jump_takeoff_speed' is defined elsewhere in the code as a constant. This logic should only be triggered on the press event (not while the button is held). No additional dependencies are required beyond Lua and the Defold engine. The expected input is a jump button press, and the output is an updated vertical velocity on the player character object.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/platformer.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- jump_takeoff_speed is a constant defined elsewhere\\nself.velocity.y = jump_takeoff_speed\n```\n\n----------------------------------------\n\nTITLE: Handling Directional Movement with Input in Defold\nDESCRIPTION: This snippet implements a complete on_input function that responds to 'left' and 'right' action inputs. When these buttons are pressed, the game object's position is updated accordingly to create movement.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n  if action_id == hash(\"left\") and action.pressed then\n    -- move left\n    local pos = go.get_position()\n    pos.x = pos.x - 100\n    go.set_position(pos)\n  elseif action_id == hash(\"right\") and action.pressed then\n    -- move right\n    local pos = go.get_position()\n    pos.x = pos.x + 100\n    go.set_position(pos)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Socket Connection in Lua\nDESCRIPTION: Demonstrates how to create a TCP socket connection, connect to localhost on port 8123, set a non-blocking timeout, send data, and receive a response. The code creates a basic socket connection without error handling.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/socket-connections.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal client = socket.tcp()\nclient:connect(\"127.0.0.1\", 8123)\nclient:settimeout(0)\nclient:send(\"foobar\")\nlocal response = client:receive(\"*l\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Components in Defold\nDESCRIPTION: Shows how to enable a previously disabled component using the 'enable' message in Lua.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/components.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- enable the component with id 'weapon'\nmsg.post(\"#weapon\", \"enable\")\n```\n\n----------------------------------------\n\nTITLE: Using a Lua Module in Defold\nDESCRIPTION: This snippet demonstrates how to require and use a Lua module in Defold, assigning it to a local variable for proper scoping.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal m = require \"mymodule\"\nm.hello() --> \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Sprite Fragment Shader Implementation\nDESCRIPTION: Complete example of a fragment shader for sprite rendering with texture sampling and tinting\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_8\n\nLANGUAGE: glsl\nCODE:\n```\n#version 140\n\nin vec2 var_texcoord0;\n\nout vec4 color_out;\n\nuniform sampler2D texture_sampler;\n\nuniform fs_uniforms\n{\n    vec4 tint;\n};\n\nvoid main()\n{\n    // Premultiply alpha since all runtime textures already are\n    vec4 tint_pm = vec4(tint.xyz * tint.w, tint.w);\n    color_out = texture(texture_sampler, var_texcoord0.xy) * tint_pm;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cube Mesh Using Triangle Strips in Lua\nDESCRIPTION: This snippet demonstrates how to create a cube mesh at runtime using Defold buffers. It defines vertices for a cube, creates a buffer with a position stream, and sets the buffer on a mesh component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/mesh.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- cube\nlocal vertices = {\n\t0, 0, 0,\n\t0, 1, 0,\n\t1, 0, 0,\n\t1, 1, 0,\n\t1, 1, 1,\n\t0, 1, 0,\n\t0, 1, 1,\n\t0, 0, 1,\n\t1, 1, 1,\n\t1, 0, 1,\n\t1, 0, 0,\n\t0, 0, 1,\n\t0, 0, 0,\n\t0, 1, 0\n}\n\n-- create a buffer with a position stream\nlocal buf = buffer.create(#vertices / 3, {\n\t{ name = hash(\"position\"), type=buffer.VALUE_TYPE_FLOAT32, count = 3 }\n})\n\n-- get the position stream and write the vertices\nlocal positions = buffer.get_stream(buf, \"position\")\nfor i, value in ipairs(vertices) do\n\tpositions[i] = vertices[i]\nend\n\n-- set the buffer with the vertices on the mesh\nlocal res = go.get(\"#mesh\", \"vertices\")\nresource.set_buffer(res, buf)\n```\n\n----------------------------------------\n\nTITLE: Cloning GUI Nodes and Node Trees in Lua\nDESCRIPTION: This snippet illustrates how to clone individual nodes and entire node trees, as well as how to manipulate the cloned nodes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-script.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- clone the healthbar\nlocal healthbar_node = gui.get_node(\"healthbar\")\nlocal healthbar_node_2 = gui.clone(healthbar_node)\n\n-- clone button node-tree\nlocal button = gui.get_node(\"my_button\")\nlocal new_button_nodes = gui.clone_tree(button)\n\n-- get the new tree root\nlocal new_root = new_button_nodes[\"my_button\"]\n\n-- move the root (and children) 300 to the right\nlocal root_position = gui.get_position(new_root)\nroot_position.x = root_position.x + 300\ngui.set_position(new_root, root_position)\n```\n\n----------------------------------------\n\nTITLE: Measuring Lengths of Strings and Tables in Lua - Lua\nDESCRIPTION: Shows the behavior of the unary length operator (#) for strings and tables. Explores outcomes with various table types (sequences, associative tables, those with nil 'holes'). No dependencies. The output gives the length of input strings or tables, but results for tables with nil values are implementation-dependent.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\ns = \"donkey\"\nprint(#s) --> 6\n\nt = { \"a\", \"b\", \"c\", \"d\" }\nprint(#t) --> 4\n\nu = { a = 1, b = 2, c = 3 }\nprint(#u) --> 0\n\nv = { \"a\", \"b\", nil }\nprint(#v) --> 2\n```\n\n----------------------------------------\n\nTITLE: Reading Overridden Config Values Using sys.get_config_number and sys.get_config_string - Lua\nDESCRIPTION: Shows how to access config values, including those set via the command-line, at runtime within Defold using Lua. The sys.get_config_number and sys.get_config_string functions retrieve number and string config values respectively. Dependencies: Defold Lua runtime. Inputs are config value key names, outputs are the values as number or string. Used for runtime logic dependent on configuration; ensure the keys passed exist or handle nil results.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/project-settings.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_value = sys.get_config_number(\"test.my_value\")\\nlocal my_value2 = sys.get_config_string(\"test.my_value2\")\n```\n\n----------------------------------------\n\nTITLE: Character Animation Functions in Lua\nDESCRIPTION: Functions to handle character animation state changes between running and jumping states with smooth blending transitions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function play_animation(self, anim)\n    if self.anim ~= anim then\n        local anim_props = { blend_duration = 0.15 }\n        spine.play_anim(\"#spinemodel\", anim, go.PLAYBACK_LOOP_FORWARD, anim_props)\n        self.anim = anim\n    end\nend\n\nlocal function update_animation(self)\n    if self.ground_contact then\n        play_animation(self, hash(\"run\"))\n    else\n        play_animation(self, hash(\"jump\"))\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Spawned Object Communicating with Parent in Lua\nDESCRIPTION: This script for a spawned object demonstrates how to use the parent property to send a message back to the parent object when the spawned object is being deleted.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- drone.script\ngo.property(\"parent\", msg.url())\n\n...\n\nfunction final(self)\n    -- I'm dead.\n    msg.post(self.parent, \"drone_dead\")\nend\n```\n\n----------------------------------------\n\nTITLE: Binding and Dispatching Compute Program in Lua\nDESCRIPTION: This snippet demonstrates how to bind a compute program to the render context, enable textures, and dispatch the program. It also shows how to pass render constants to the dispatch call.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/compute.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nrender.set_compute(\"my_compute\")\nrender.enable_texture(\"blur_render_target\", \"tex_blur\")\nrender.enable_texture(self.storage_texture, \"tex_storage\")\nrender.dispatch_compute(128, 128, 1)\nlocal constants = render.constant_buffer()\nconstants.tint = vmath.vector4(1, 1, 1, 1)\nrender.dispatch_compute(32, 32, 32, {constants = constants})\nrender.set_compute()\n```\n\n----------------------------------------\n\nTITLE: Making HTTP POST Request in Defold using Lua\nDESCRIPTION: Demonstrates how to send data to a server using an HTTP POST request in Defold. The example includes headers specifying content type, request body, and a callback function to process the response.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/http-requests.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function handle_response(self, id, response)\n\tprint(response.status, response.response)\nend\n\nlocal headers = {\n\t[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\n}\nlocal body = \"foo=bar\"\nhttp.request(\"https://httpbin.org/post\", \"POST\", handle_response, headers, body)\n```\n\n----------------------------------------\n\nTITLE: Initializing Car State and Environment in Lua\nDESCRIPTION: This `init` function is called once when the script component is initialized. It sets the game's background color to grey by sending a 'clear_color' message to the '@render:' socket. It acquires input focus for the game object using `msg.post('.', 'acquire_input_focus')` so it can receive input events. Finally, it initializes script instance variables (`self`) to store the car's current state, including steer angle (`vmath.quat`), direction (`vmath.quat`), velocity (`vmath.vector3`), acceleration (`vmath.vector3`), and input state (`vmath.vector3`).\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/car.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n\t-- Send a message to the render script (see builtins/render/default.render_script) to set the clear color.\n\t-- This changes the background color of the game. The vector4 contains color information\n\t-- by channel from 0-1: Red = 0.2. Green = 0.2, Blue = 0.2 and Alpha = 1.0\n\tmsg.post(\"@render:\", \"clear_color\", { color = vmath.vector4(0.2, 0.2, 0.2, 1.0) } )\t\t--<1>\n\n\t-- Acquire input focus so we can react to input\n\tmsg.post(\".\", \"acquire_input_focus\")\t\t-- <2>\n\n\t-- Some variables\n\tself.steer_angle = vmath.quat()\t\t\t\t -- <3>\n\tself.direction = vmath.quat()\n\n\t-- Velocity and acceleration are car relative (not rotated)\n\tself.velocity = vmath.vector3()\n\tself.acceleration = vmath.vector3()\n\n\t-- Input vector. This is modified later in the on_input function\n\t-- to store the input.\n\tself.input = vmath.vector3()\nend\n```\n\n----------------------------------------\n\nTITLE: Runtime Sound Resource Modification\nDESCRIPTION: Example showing how to change a sound resource at runtime using resource loading and setting.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sound.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal boom = sys.load_resource(\"/sounds/boom.wav\")\nlocal path = go.get(\"#sound\", \"sound\")\nresource.set_sound(path, boom)\n```\n\n----------------------------------------\n\nTITLE: Factory Object Creation with Properties in Lua\nDESCRIPTION: Demonstrates how to set script properties when creating objects through factory and collection factory, including property initialization for multiple objects.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script-properties.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal props = { health = 50, target = msg.url(\"player\") }\nlocal id = factory.create(\"#can_factory\", nil, nil, props)\n\n-- Accessing to factory created script properties\nlocal url = msg.url(nil, id, \"can\")\nlocal can_health = go.get(url, \"health\")\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal props = {}\nprops[hash(\"/can1\")] = { health = 150 }\nprops[hash(\"/can2\")] = { health = 250, target = msg.url(\"player\") }\nprops[hash(\"/can3\")] = { health = 200 }\n\nlocal ids = collectionfactory.create(\"#cangang_factory\", nil, nil, props)\n```\n\n----------------------------------------\n\nTITLE: Performing Raycast in Defold Using Lua\nDESCRIPTION: This snippet demonstrates how to perform a raycast in Defold's physics system. It sets up start and end points for the ray, specifies collision groups, and handles the result of the raycast. The function is placed in an update loop for continuous checking.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/physics-ray-casts.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction update(self, dt)\n  -- 投射射线\n  local my_start = vmath.vector3(0, 0, 0)\n  local my_end = vmath.vector3(100, 1000, 1000)\n  local my_groups = { hash(\"my_group1\"), hash(\"my_group2\") }\n\n  local result = physics.raycast(my_start, my_end, my_groups)\n  if result then\n      -- 处理射线碰撞结果 (所有数据参见 'ray_cast_response' 消息)\n      print(result.id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Optimizing Vector3 Usage in Defold\nDESCRIPTION: Demonstrates how to optimize memory usage by modifying existing vector objects instead of creating new ones. This approach prevents unnecessary garbage collection by avoiding the creation of new vector3 objects.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\n-- Instead of doing self.velocity = vmath.vector3() which creates a new object\n-- we zero an existing velocity vector object's components\nself.velocity.x = 0\nself.velocity.y = 0\nself.velocity.z = 0\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime Texture in Defold\nDESCRIPTION: Creates a new texture resource at runtime with specified parameters like width, height, type and format.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/atlas.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal params = {\n  width  = 128,\n  height = 128,\n  type   = resource.TEXTURE_TYPE_2D,\n  format = resource.TEXTURE_FORMAT_RGBA,\n}\nlocal my_texture_id = resource.create_texture(\"/my_custom_texture.texturec\", params)\n```\n\n----------------------------------------\n\nTITLE: Getting and Using Game Object IDs in Defold with Lua\nDESCRIPTION: Examples showing how to get game object IDs and use them for addressing. The engine returns absolute path hashes that can be used in place of string IDs.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/addressing.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_id = go.get_id()\nprint(my_id) --> hash: [/path/to/the/object]\n\nlocal spawned_id = factory.create(\"#some_factory\")\nprint(spawned_id) --> hash: [/instance42]\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Animation with Coroutines in Lua (Defold) - Lua\nDESCRIPTION: Shows creation and use of coroutines to manage incremental game-object movement across animation frames. Uses coroutine.yield to emit intermediate positions, and resumes execution through update() calls. Dependencies: Lua coroutine API, Defold's 'go' and 'vmath' modules. Final result is movement of a game object to specified y-coordinates on each frame; demonstrates how to yield/resume execution between frames.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\n-- This is our coroutine\nlocal function sequence(self)\n    coroutine.yield(120)\n    coroutine.yield(320)\n    coroutine.yield(510)\n    coroutine.yield(240)\n    return 440 -- return the final value\nend\n\nfunction init(self)\n    self.co = coroutine.create(sequence) -- Create the coroutine. 'self.co' is a thread object\n    go.set_position(vmath.vector3(100, 0, 0)) -- Set initial position\nend\n\nfunction update(self, dt)\n    local status, y_pos = coroutine.resume(self.co, self) -- Continue execution of coroutine.\n    if status then\n        -- If the coroutine is still not terminated/dead, use its yielded return value as a new position\n        go.set_position(vmath.vector3(100, y_pos, 0))\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Drawing Board State onto Tilemap in Lua\nDESCRIPTION: This Lua function `draw(t)` takes a table `t` representing the board state and renders it onto a Defold Tilemap component identified as \"#tilemap\". It iterates through the table, calculates the corresponding (x, y) tilemap coordinates for each tile index (adjusting for the tilemap's bottom-left origin), and uses `tilemap.set_tile` to place the tile.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Draw a table list of tiles onto a 4x4 tilemap\nlocal function draw(t)\n    for i=1, #t do\n        local y = 5 - math.ceil(i/4) -- <1>\n        local x = i - (math.ceil(i/4) - 1) * 4\n        tilemap.set_tile(\"#tilemap\",\"layer1\",x,y,t[i])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Stateless Lua Module with External State\nDESCRIPTION: This snippet shows how to create a stateless Lua module that externalizes state management to the user through a constructor function and explicit state passing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal M = {}\n\nfunction M.alter_state(the_state, v)\n    the_state.value = the_state.value + v\nend\n\nfunction M.get_state(the_state)\n    return the_state.value\nend\n\nfunction M.new(v)\n    local state = {\n        value = v\n    }\n    return state\nend\n\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Monitoring Garbage Collection in Defold\nDESCRIPTION: Shows how to monitor the current memory usage of a Defold application using collectgarbage(). This is useful for tracking memory consumption and diagnosing potential memory leaks or performance issues.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nprint(collectgarbage(\"count\") * 1024)\n```\n\n----------------------------------------\n\nTITLE: Handling Analog Stick Input in Defold\nDESCRIPTION: This code shows how to handle analog stick input in Defold. It demonstrates continuous input detection for the left stick's downward movement and prints the action value, which ranges from 0.0 to -1.0.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"gamepad_lstick_down\") then\n        -- left stick was moved down\n        print(action.value) -- a value between 0.0 an -1.0\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Touch Input for Block Linking in Lua Game\nDESCRIPTION: This function handles touch input for linking blocks. It detects initial touch, dragging over same-colored neighbors, and touch release. It creates visual connectors for linked blocks and ignores magic blocks.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\nfunction on_input(self, action_id, action)\n\n    ...\n\n    -- If trying to manipulate magic blocks, ignore.\n    if self.board[x][y].color == hash(\"magic\") then\n        return\n    end\n\n    if action.pressed then\n        -- List of neighbors of the same color as touched block\n        self.neighbors = same_color_neighbors(self, x, y)\n        self.chain = {}\n        table.insert(self.chain, self.board[x][y])\n\n        -- Mark block.\n        p = go.get_position(self.board[x][y].id)\n        local id = factory.create(\"#connectorfactory\", p + centeroff)\n        table.insert(self.connectors, id)\n\n        self.dragging = true\n    elseif self.dragging then\n        -- then drag\n        if in_blocklist(self.neighbors, self.board[x][y].id) and not in_blocklist(self.chain, self.board[x][y].id) then\n            -- dragging over a same-colored neighbor\n            table.insert(self.chain, self.board[x][y])\n            self.neighbors = same_color_neighbors(self, x, y)\n\n            -- Mark block.\n            p = go.get_position(self.board[x][y].id)\n            local id = factory.create(\"#connectorfactory\", p + centeroff)\n            table.insert(self.connectors, id)\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Modifying Tile Map Contents in Lua Runtime\nDESCRIPTION: Demonstrates how to read and write tile map contents dynamically during game execution. The example shows checking for a specific tile type and replacing it with another tile.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/tilemap.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal tile = tilemap.get_tile(\"/level#map\", \"ground\", x, y)\n\nif tile == 2 then\n    -- Replace grass-tile (2) with dangerous hole tile (number 4).\n    tilemap.set_tile(\"/level#map\", \"ground\", x, y, 4)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Basic Directional Input in Defold (Lua)\nDESCRIPTION: This Lua snippet defines the 'on_input' function, which is called by the Defold engine when input is received. It checks the 'action_id' (mapped in 'game.input_binding') and whether the action corresponds to a key press ('action.pressed'). Based on the input action ('up', 'down', 'left', 'right'), it directly updates the 'self.dir' table to change the snake's movement direction. This version is susceptible to issues with rapid key presses and reversing direction.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"up\") and action.pressed then -- <1>\n        self.dir.x = 0 -- <2>\n        self.dir.y = 1\n    elseif action_id == hash(\"down\") and action.pressed then\n        self.dir.x = 0\n        self.dir.y = -1\n    elseif action_id == hash(\"left\") and action.pressed then\n        self.dir.x = -1\n        self.dir.y = 0\n    elseif action_id == hash(\"right\") and action.pressed then\n        self.dir.x = 1\n        self.dir.y = 0\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Mouse Wheel Scroll in Lua for Defold\nDESCRIPTION: This code snippet shows how to handle mouse wheel scroll events in Defold. It checks for the 'mouse_wheel_up' action and verifies if the wheel was scrolled by examining the action.value field.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-mouse-and-touch.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"mouse_wheel_up\") then\n        if action.value == 1 then\n            -- mouse wheel is scrolled up\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Sampling Multiple Textures in GLSL Fragment Shader\nDESCRIPTION: This GLSL code snippet demonstrates a fragment shader that samples two textures using separate sampler2D uniforms. It shows how to work with multiple textures in Defold shaders, which is useful for more complex rendering effects in model components.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/material.md#2025-04-23_snippet_5\n\nLANGUAGE: glsl\nCODE:\n```\n-- mymodel.fp\nvarying mediump vec2 var_texcoord0;\nuniform lowp sampler2D TEXTURE_1;\nuniform lowp sampler2D TEXTURE_2;\nvoid main()\n{\n    lowp vec4 color1 = texture2D(TEXTURE_1, var_texcoord0.xy);\n    lowp vec4 color2 = texture2D(TEXTURE_2, var_texcoord0.xy);\n    gl_FragColor = color1 * color2;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Objects Using Full URLs in Defold Lua\nDESCRIPTION: Examples showing how to send messages to game objects using full URL strings that include socket, path, and fragment components to target objects in different game worlds.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/addressing.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Send \"hello\" to the manager script and team buddy bean\nmsg.post(\"main:/manager#controller\", \"hello_manager\")\nmsg.post(\"main:/team_2/buddy#controller\", \"hello_buddy\")\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Button Input in Lua for Defold\nDESCRIPTION: This snippet demonstrates how to detect left mouse button press and release events in Defold. It uses the 'on_input' function to check for the 'mouse_button_left' action and determines if the button was pressed or released.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-mouse-and-touch.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"mouse_button_left\") then\n        if action.pressed then\n            -- left mouse button pressed\n        elseif action.released then\n            -- left mouse button released\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Render Predicates in Lua\nDESCRIPTION: Demonstrates how to create render predicates based on material tags and use them to control rendering order of sprites with different materials.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/render.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- 一个优先级对应所有标签为 \"tree\" 的 sprites\nlocal trees = render.predicate({\"tree\"})\n-- 渲染 Sprite 1, 2 和 3\nrender.draw(trees)\n\n-- 一个优先级对应所有标签为 \"outlined\" 的 sprites\nlocal outlined = render.predicate({\"outlined\"})\n-- 渲染 Sprite 1, 2 和 4\nrender.draw(outlined)\n\n-- 一个优先级对应所有包含标签为 \"outlined\" 的且包含标签为 \"tree\" 的 sprites\nlocal outlined_trees = render.predicate({\"outlined\", \"tree\"})\n-- 渲染 Sprite 1 和 2\nrender.draw(outlined_trees)\n```\n\n----------------------------------------\n\nTITLE: Updating Snake Movement and Rendering with Defold Lua Script\nDESCRIPTION: Defines the update(self, dt) function called every frame, implementing the snake's real-time movement and rendering logic. At set intervals determined by the speed variable, it moves the snake by updating its segments: computes a new head position in the direction of movement, adds it, removes the tail, clears the tile at the tail position, and draws the updated segments using Defold's tilemap.set_tile function. Assumes dependencies on Defold's tilemap system and the Lua runtime, and requires correct handling of segment tables and timers. Expects no input beyond Lua data and engine callbacks, modifies the playfield, and redraws the snake correctly; limitations may arise from tile indexing or movement logic errors.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction update(self, dt)\n    self.t = self.t + dt -- <1>\n    if self.t >= 1.0 / self.speed then -- <2>\n        local head = self.segments[#self.segments] -- <3>\n        local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y} -- <4>\n\n        table.insert(self.segments, newhead) -- <5>\n\n        local tail = table.remove(self.segments, 1) -- <6>\n        tilemap.set_tile(\"#grid\", \"layer1\", tail.x, tail.y, 0) -- <7>\n\n        for i, s in ipairs(self.segments) do -- <8>\n            tilemap.set_tile(\"#grid\", \"layer1\", s.x, s.y, 2) -- <9>\n        end\n\n        self.t = 0 -- <10>\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Pause Menu Input Handling in Defold\nDESCRIPTION: Manages the pause menu visibility and input focus. Includes message handling for showing the menu and input handling for resuming the game. Consumes all input while active to prevent interaction with game elements below.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n  if message_id == hash(\"show\") then\n    -- Show the pause menu.\n    local node = gui.get_node(\"pause_menu\")\n    gui.set_enabled(node, true)\n\n    -- Acquire input.\n    msg.post(\".\", \"acquire_input_focus\")\n  end\nend\n\nfunction on_input(self, action_id, action)\n  if action_id == hash(\"mouse_press\") and action.pressed then\n\n    -- do things...\n\n    local resumenode = gui.get_node(\"resume\")\n    if gui.pick_node(resumenode, action.x, action.y) then\n        -- Hide the pause menu\n        local node = gui.get_node(\"pause_menu\")\n        gui.set_enabled(node, false)\n\n        -- Release input.\n        msg.post(\".\", \"release_input_focus\")\n    end\n  end\n\n  -- Consume all input. Anything below us on the input stack\n  -- will never see input until we release input focus.\n  return true\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing and Unloading Collection Proxy in Lua\nDESCRIPTION: This Lua code demonstrates how to load a collection proxy, initialize it, enable it, and then unload it all within the init() function, before the first update() call. It showcases the order of operations in Defold's initialization stage.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/application-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    print(\"init()\")\n    msg.post(\"#collectionproxy\", \"load\")\nend\n\nfunction update(self, dt)\n    -- The proxy collection is unloaded before this code is reached.\n    print(\"update()\")\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"proxy_loaded\") then\n        print(\"proxy_loaded. Init, enable and then unload.\")\n        msg.post(\"#collectionproxy\", \"init\")\n        msg.post(\"#collectionproxy\", \"enable\")\n        msg.post(\"#collectionproxy\", \"unload\")\n        -- The proxy collection objects' init() and final() functions\n        -- are called before we reach this object's update()\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Parsing Query Parameters in HTML5 Game\nDESCRIPTION: Helper function to parse URL query parameters into a Lua table, demonstrating URL parameter handling in HTML5 games.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function get_query_parameters()\n    local url = html5.run(\"window.location\")\n    -- get the query part of the url (the bit after ?)\n    local query = url:match(\".*?(.*)\")\n    if not query then\n        return {}\n    end\n\n    local params = {}\n    -- iterate over all key value pairs\n    for kvp in query:gmatch(\"([^&]+)\") do\n        local key, value = kvp:match(\"(.+)=(.+)\")\n        params[key] = value\n    end\n    return params\nend\n\nfunction init(self)\n    local params = get_query_parameters()\n    print(params.foo1) -- bar1\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Game Object Position in Lua Script (Defold)\nDESCRIPTION: This snippet demonstrates how to get the position of a game object named 'bean' within a collection also named 'bean' using Defold's go.get_position() function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/building-blocks.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- file: can.script\n-- get position of the \"bean\" game object in the \"bean\" collection\nlocal pos = go.get_position(\"bean/bean\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Render Script for 3D Models in Defold (Lua)\nDESCRIPTION: This snippet shows how to modify the default render script to enable rendering of 3D models. It sets up a predicate for models, enables depth testing, sets an orthographic projection, and draws the models.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/model.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n  self.model_pred = render.predicate({\"model\"})\n  ...\nend\n\nfunction update()\n  ...\n  render.set_depth_mask(true)\n  render.enable_state(render.STATE_DEPTH_TEST)\n  render.set_projection(stretch_projection(-1000, 1000))  -- orthographic\n  render.draw(self.model_pred)\n  render.set_depth_mask(false)\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Cutting Jump Short when Input is Released in Defold (Lua)\nDESCRIPTION: This Lua code checks if the player character is still moving upwards when the jump input is released, and if so, scales down the vertical velocity to quickly halt the jump. This enables variable jump heights based on input duration, as seen in classic platformers. The snippet depends on the presence of 'self.velocity.y' and requires it to represent the vertical velocity. The expected input is a jump input release event; the output is a modified velocity that can shorten the jump arc.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/platformer.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- cut the jump short if we are still going up\\nif self.velocity.y > 0 then\\n    -- scale down the upwards speed\\n    self.velocity.y = self.velocity.y * 0.5\\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Minimap Position Handling\nDESCRIPTION: Full implementation of minimap position tracking including initialization and position updates.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n  self.minimap_positions = {}\nend\n\nlocal function update_minimap(self)\n  for url, pos in pairs(self.minimap_positions) do\n    -- update position on map\n    ...\n  end\nend\n\nfunction on_message(self, message_id, message, sender)\n  if message_id == hash(\"update_score\") then\n    local score_node = gui.get_node(\"score\")\n    gui.set_text(score_node, \"SCORE: \" .. message.score)\n  elseif message_id == hash(\"update_minimap\") then\n    self.minimap_positions[sender] = message.position\n    update_minimap(self)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic GUI Nodes in Lua\nDESCRIPTION: This code demonstrates how to create new box and text nodes dynamically, setting their position, size, color, and font properties.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-script.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Create a new box node\nlocal new_position = vmath.vector3(400, 300, 0)\nlocal new_size = vmath.vector3(450, 400, 0)\nlocal new_boxnode = gui.new_box_node(new_position, new_size)\ngui.set_color(new_boxnode, vmath.vector4(0.2, 0.26, 0.32, 1))\n\n-- Create a new text node\nlocal new_textnode = gui.new_text_node(new_position, \"Hello!\")\ngui.set_font(new_textnode, \"sourcesans\")\ngui.set_color(new_textnode, vmath.vector4(0.69, 0.6, 0.8, 1.0))\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Script Properties in Lua\nDESCRIPTION: Example showing how to define and use basic script properties for health and target URL in a game object component. Demonstrates property definition, initialization, and message handling.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- can.script\n-- Define script properties for health and an attack target\ngo.property(\"health\", 100)\ngo.property(\"target\", msg.url())\n\nfunction init(self)\n  -- store initial position of target.\n  -- self.target is an url referencing another objects.\n  self.target_pos = go.get_position(self.target)\n  ...\nend\n\nfunction on_message(self, message_id, message, sender)\n  if message_id == hash(\"take_damage\") then\n    -- decrease the health property\n    self.health = self.health - message.damage\n    if self.health <= 0 then\n      go.delete()\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform Spawning Controller in Lua\nDESCRIPTION: Script that handles dynamic platform spawning for an endless runner game. Controls spawn intervals, platform types, and positions based on predefined heights and random selection.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\ngo.property(\"speed\", 360)\n\nlocal grid = 460\nlocal platform_heights = { 100, 200, 350 }\n\nfunction init(self)\n    msg.post(\"ground/controller#controller\", \"set_speed\", { speed = self.speed })\n    self.gridw = 0\nend\n\nfunction update(self, dt)\n    self.gridw = self.gridw + self.speed * dt\n\n    if self.gridw >= grid then\n        self.gridw = 0\n\n        if math.random() > 0.2 then\n            local h = platform_heights[math.random(#platform_heights)]\n            local f = \"#platform_factory\"\n            if math.random() > 0.5 then\n                f = \"#platform_long_factory\"\n            end\n\n            local p = factory.create(f, vmath.vector3(1600, h, 0), nil, {}, 0.6)\n            msg.post(p, \"set_speed\", { speed = self.speed })\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Drag Force in Defold Update Function (Lua)\nDESCRIPTION: Calculates the car's speed (using squared magnitude of velocity for efficiency) and applies a drag force opposing the motion by reducing the acceleration. It uses the formula `acceleration = acceleration - speed * velocity * drag`. Also includes a check to stop the car completely if its speed drops below a threshold (0.5). Requires `vmath` library and assumes `self.velocity` and `self.acceleration` are `vector3` objects.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/car.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction update(self, dt)\n\t...\n\t-- Speed is the magnitude of the velocity\n\tlocal speed = vmath.length_sqr(self.velocity)\n\n\t-- Apply drag\n\tself.acceleration = self.acceleration - speed * self.velocity * drag\n\n\t-- Stop if we are already slow enough\n\tif speed < 0.5 then self.velocity = vmath.vector3(0) end\n\t...\nend\n```\n\n----------------------------------------\n\nTITLE: Working with Returned Collection Ids in Lua\nDESCRIPTION: Example showing how to use the returned id table from a collection factory to modify a specific spawned object and print the structure of the returned ids.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-factory.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal bean_ids = collectionfactory.create(\"#bean_factory\")\ngo.set_scale(0.5, bean_ids[hash(\"/bean\")])\npprint(bean_ids)\n-- DEBUG:SCRIPT:\n-- {\n--   hash: [/shield] = hash: [/collection0/shield], -- <1>\n--   hash: [/bean] = hash: [/collection0/bean],\n-- }\n```\n\n----------------------------------------\n\nTITLE: Implementing Compute Shader Render Script in Lua\nDESCRIPTION: A render script that demonstrates how to set up and dispatch compute shaders in Defold. The script handles texture binding, setting constants, and dispatching compute operations across a 128x128x1 working group.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/compute.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- respond to the message \"set_backing_texture\"\n-- to set the backing texture for the compute program\nfunction on_message(self, message_id, message)\n    if message_id == hash(\"set_backing_texture\") then\n        self.texture_in = message.texture_in\n        self.texture_out = message.texture_out\n    end\nend\n\nfunction update(self)\n    render.set_compute(\"compute\")\n    -- We can bind textures to specific named constants\n    render.enable_texture(self.texture_in, \"texture_in\")\n    render.enable_texture(self.texture_out, \"texture_out\")\n    render.set_constant(\"color\", vmath.vector4(0.5, 0.5, 0.5, 1.0))\n    -- Dispatch the compute program as many times as we have pixels.\n    -- This constitutes our \"working group\". The shader will be invoked\n    -- 128 x 128 x 1 times, or once per pixel.\n    render.dispatch_compute(128, 128, 1)\n    -- when we are done with the compute program, we need to unbind it\n    render.set_compute()\nend\n```\n\n----------------------------------------\n\nTITLE: Fixed Fit Projection for High Resolution Graphics\nDESCRIPTION: Render script configuration to scale graphics while maintaining aspect ratio, ensuring consistent content display across different screen sizes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/adapting-graphics-to-screen-size.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nmsg.post(\"@render:\", \"use_fixed_fit_projection\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Fullscreen Graded Quad Using Render Target in Defold (Lua)\nDESCRIPTION: This Lua render script function configures the Defold engine to draw a fullscreen quad using the render target's color buffer as input for post-processing. It switches between the off-screen buffer and the screen buffer, sets viewport and projection matrices for a 1:1 screen mapping, enables the quad's texture, draws with the 'grade' predicate, and then disables the texture. Dependencies: self.target (render target handle), self.grade_pred (predicate for 'grade' tag), proper material and shader setup. Inputs: none directly; relies on preconfigured render targets. Outputs: quad drawn to the window, post-processed by shaders. Limitations: assumes previous setup from the tutorial is done.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction update(self)\n  render.set_render_target(self.target)\n\n  ...\n\n  render.set_render_target(render.RENDER_TARGET_DEFAULT)\n\n  render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color}) -- <1>\n\n  render.set_viewport(0, 0, render.get_window_width(), render.get_window_height()) -- <2>\n  render.set_view(vmath.matrix4()) -- <3>\n  render.set_projection(vmath.matrix4())\n\n  render.enable_texture(0, self.target, render.BUFFER_COLOR_BIT) -- <4>\n  render.draw(self.grade_pred) -- <5>\n  render.disable_texture(0, self.target) -- <6>\nend\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Snake Game State and Input Focus in Defold (Lua)\nDESCRIPTION: This Lua code snippet shows the 'init' function for a Defold script ('snake.script'). It acquires input focus for the current game object using 'msg.post', initializes the snake's starting segments as a table of coordinates, sets the initial movement direction, defines the snake's speed, and initializes a timer variable 'self.t'.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\") -- <1>\n\n    self.segments = {\n        {x = 7, y = 24},\n        {x = 8, y = 24},\n        {x = 9, y = 24},\n        {x = 10, y = 24} }\n    self.dir = {x = 1, y = 0}\n    self.speed = 7.0\n\n    self.t = 0\nend\n```\n\n----------------------------------------\n\nTITLE: Cross-World Message Passing\nDESCRIPTION: Shows how to send messages between different game worlds using collection proxies.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"level:/player#controller\", \"wake_up\")\n```\n\n----------------------------------------\n\nTITLE: Listing and Setting Cameras in Render Script\nDESCRIPTION: Shows how to iterate through available cameras, set them for rendering, and disable the camera setting in a render script.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfor k,v in pairs(camera.get_cameras()) do\n    render.set_camera(v)\n    -- do rendering here\nend\nrender.set_camera()\n```\n\n----------------------------------------\n\nTITLE: Calculating Delta Velocity with Acceleration in Lua\nDESCRIPTION: This snippet computes the amount of velocity change (`dv`) for the player character in one frame based on an acceleration value and the frame delta-time (`dt`). It is used in the main movement loop to integrate acceleration and is essential for achieving smooth, acceleration-based motion. Required: The variables `acceleration` (numeric) and `dt` (frame time-step). Expected output is the updated velocity increment for this frame.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/platformer.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal dv = acceleration * dt\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Closures in Lua - Lua\nDESCRIPTION: Demonstrates closure creation by defining a function within a function, capturing lexical scope variables. Useful for generating independent counters or stateful functions. Each created counter maintains its own internal state; outputs incremented values across calls.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nfunction create_counter(x)\n    -- 'x' is a local variable in 'create_counter'\n    return function()\n        x = x + 1\n        return x\n    end\nend\n\ncount1 = create_counter(10)\ncount2 = create_counter(20)\nprint(count1()) --> 11\nprint(count2()) --> 21\nprint(count1()) --> 12\n```\n\n----------------------------------------\n\nTITLE: Modifying Label Properties in Lua\nDESCRIPTION: This code shows how to change various properties of a label component at runtime, including color, outline, and scale, using the go.set() and go.get() functions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/label.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- Set the color of the \"my_label\" component in the same game object\n    -- as this script. Color is a RGBA value stored in a vector4.\n    local grey = vmath.vector4(0.5, 0.5, 0.5, 1.0)\n    go.set(\"#my_label\", \"color\", grey)\n\n    -- ...and remove the outline, by setting its alpha to 0...\n    go.set(\"#my_label\", \"outline.w\", 0)\n\n    -- ...and scale it x2 along x axis.\n    local scale_x = go.get(\"#my_label\", \"scale.x\")\n    go.set(\"#my_label\", \"scale.x\", scale_x * 2)\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Block Existence in List for Lua Game\nDESCRIPTION: This helper function checks whether a given block exists in a list of blocks. It's used to verify if a block is part of the current chain or neighbors during touch input handling.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\n--\n-- Does the block exist in the list of blocks?\n--\nlocal function in_blocklist(blocks, block)\n    for i, b in pairs(blocks) do\n        if b.id == block then\n            return true\n        end\n    end\n    return false\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Block Removal and Sliding on Touch Release in Lua Game\nDESCRIPTION: This code snippet is part of the input handling function. It removes linked blocks, sets removed positions to nil, and slides remaining blocks down when the player releases touch after creating a valid chain of blocks.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\nfunction on_input(self, action_id, action)\n\n    ...\n\n    elseif action_id == hash(\"touch\") and action.released then\n        -- Player released touch.\n        self.dragging = false\n\n        if #self.chain > 1 then\n            -- There is a chain of blocks. Remove it from board and slide the remaining blocks down.\n            remove_chain(self)\n            nilremoved(self)\n            slide_board(self)\n        end\n\n        -- Empty chain of connector graphics.\n        for i, c in ipairs(self.connectors) do\n            go.delete(c)\n        end\n        self.connectors = {}\n    end\n```\n\n----------------------------------------\n\nTITLE: Disabling a Sprite Component in Lua\nDESCRIPTION: This code snippet shows how to disable a sprite component named 'body' when the game starts. It's placed in a script component and uses relative addressing to send a 'disable' message to the sprite component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/addressing.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    msg.post(\"#body\", \"disable\") -- <1>\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Lua Module with Metatables for State Management\nDESCRIPTION: This snippet shows how to create a Lua module using metatables to manage state and provide object-oriented-like syntax for state manipulation.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal M = {}\n\nfunction M:alter_state(v)\n    -- self is added as first argument when using : notation\n    self.value = self.value + v\nend\n\nfunction M:get_state()\n    return self.value\nend\n\nfunction M.new(v)\n    local state = {\n        value = v\n    }\n    return setmetatable(state, { __index = M })\nend\n\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Handling Render Script Messages in Defold\nDESCRIPTION: Processes incoming messages to the render script including clear color changes and camera view/projection updates. Demonstrates how to handle communication between game objects and the render script.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal MSG_CLEAR_COLOR =         hash(\"clear_color\")\nlocal MSG_WINDOW_RESIZED =      hash(\"window_resized\")\nlocal MSG_SET_VIEW_PROJ =       hash(\"set_view_projection\")\n\nfunction on_message(self, message_id, message)\n    if message_id == MSG_CLEAR_COLOR then\n        -- Someone sent us a new clear color to be used.\n        update_clear_color(state, message.color)\n    elseif message_id == MSG_SET_VIEW_PROJ then\n        -- The camera component that has camera focus will sent set_view_projection\n        -- messages to the @render socket. We can use the camera information to\n        -- set view (and possibly projection) of the rendering.\n        camera.view = message.view\n        self.camera_projection = message.projection or vmath.matrix4()\n        update_camera(camera, state)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Native Extension in Lua\nDESCRIPTION: Example Lua code that demonstrates how to call the 'reverse' function from the myextension module to reverse a string.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nlocal reverse_s = myextension.reverse(s)\nprint(reverse_s) --> ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Projection with Zoom in Lua\nDESCRIPTION: Code to enable fixed projection with custom zoom level, maintaining aspect ratio with fixed scale regardless of window size.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"@render:\", \"use_fixed_projection\", { near = -1, far = 1, zoom = 2 })\n```\n\n----------------------------------------\n\nTITLE: Using Render Resources in Defold\nDESCRIPTION: Demonstrates how to use render resources like materials and render targets in a render script, including enabling materials, setting render targets, and binding textures.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- \"my_material\" will now be used for all draw calls associated with the predicate\nrender.enable_material(\"my_material\")\n-- anything drawn by the predicate will end up in \"my_render_target\"\nrender.set_render_target(\"my_render_target\")\nrender.draw(self.my_full_screen_predicate)\nrender.set_render_target(render.RENDER_TARGET_DEFAULT)\nrender.disable_material()\n\n-- bind the render target result texture to whatever is getting rendered via the predicate\nrender.enable_texture(0, \"my_render_target\", render.BUFFER_COLOR0_BIT)\nrender.draw(self.my_tile_predicate)\n```\n\n----------------------------------------\n\nTITLE: Sound Gating Implementation\nDESCRIPTION: Complete implementation of a sound gating system to prevent multiple instances of the same sound playing too close together.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sound.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Don't allow the same sound to be played within \"gate_time\" interval.\nlocal gate_time = 0.3\n\nfunction init(self)\n    -- Store played sound timers in a table and count down each frame until they have been\n    -- in the table for \"gate_time\" seconds. Then remove them.\n    self.sounds = {}\nend\n\nfunction update(self, dt)\n    -- Count down the stored timers\n    for k,_ in pairs(self.sounds) do\n        self.sounds[k] = self.sounds[k] - dt\n        if self.sounds[k] < 0 then\n            self.sounds[k] = nil\n        end\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"play_gated_sound\") then\n        -- Only play sounds that are not currently in the gating table.\n        if self.sounds[message.soundcomponent] == nil then\n            -- Store sound timer in table\n            self.sounds[message.soundcomponent] = gate_time\n            -- Play the sound\n            sound.play(message.soundcomponent, { gain = message.gain })\n        else\n            -- An attempt to play a sound was gated\n            print(\"gated \" .. message.soundcomponent)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Converting Screen to World Coordinates in Lua for Defold Camera\nDESCRIPTION: A function that converts screen coordinates to world coordinates taking into account camera projection and view matrices. Handles mouse input conversion when camera has been panned, zoomed or uses non-default projection.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\n--- Convert from screen to world coordinates\n-- @param sx Screen x\n-- @param sy Screen y\n-- @param sz Screen z\n-- @param window_width Width of the window (use render.get_width() or window.get_size().x)\n-- @param window_height Height of the window (use render.get_height() or window.get_size().y)\n-- @param projection Camera/render projection (use go.get(\"#camera\", \"projection\"))\n-- @param view Camera/render view (use go.get(\"#camera\", \"view\"))\n-- @return wx World x\n-- @return wy World y\n-- @return wz World z\nlocal function screen_to_world(sx, sy, sz, window_width, window_height, projection, view)\n    local inv = vmath.inv(projection * view)\n    sx = (2 * sx / window_width) - 1\n    sy = (2 * sy / window_height) - 1\n    sz = (2 * sz) - 1\n    local wx = sx * inv.m00 + sy * inv.m01 + sz * inv.m02 + inv.m03\n    local wy = sx * inv.m10 + sy * inv.m11 + sz * inv.m12 + inv.m13\n    local wz = sx * inv.m20 + sy * inv.m21 + sz * inv.m22 + inv.m23\n    return wx, wy, wz\nend\n```\n\n----------------------------------------\n\nTITLE: Updating GUI Text Node Content in Lua\nDESCRIPTION: Example of handling a message to update the text content of a GUI score node. The code demonstrates how to get a reference to a node and set its text value using the gui.set_text() function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-text.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"set_score\") then\n        local s = gui.get_node(\"score\")\n        gui.set_text(s, message.score)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Render Script Components in Defold\nDESCRIPTION: Sets up render predicates, cameras and initial state for the rendering system. Creates predicates for tiles, GUI, text, particles and models, and initializes two cameras - one for world space and one for GUI.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- Define the render predicates. Each predicate is drawn by itself and\n    -- that allows us to change the state of OpenGL between the draws.\n    self.predicates = create_predicates(\"tile\", \"gui\", \"text\", \"particle\", \"model\")\n\n    -- Create and fill data tables will be used in update()\n    local state = create_state()\n    self.state = state\n    local camera_world = create_camera(state, \"camera_world\", true)\n    init_camera(camera_world, get_stretch_projection)\n    local camera_gui = create_camera(state, \"camera_gui\")\n    init_camera(camera_gui, get_gui_projection)\n    update_state(state)\nend\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading of Factory Resources in Lua\nDESCRIPTION: This snippet shows how to load factory resources asynchronously when 'Load Dynamically' is checked, using a callback function to create objects when resources are ready.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nfunction load_complete(self, url, result)\n    -- Loading is complete, resources are ready to spawn\n    self.go_id = factory.create(url)\nend\n\nfunction init(self)\n    -- No factory resources are loaded when the factory's parent\n    -- collection is loaded. Calling load will load the resources.\n    factory.load(\"#factory\", load_complete)\nend\n\nfunction final(self)\n    -- Delete game object. Will decref resources.\n    -- In this case resources aren't deleted since the factory component\n    -- still holds a reference.\n    go.delete(self.go_id)\n\n    -- Calling unload will decref resources held by the factory component,\n    -- resulting in resources being destroyed.\n    factory.unload(\"#factory\")\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrolling Ground Logic in Defold (Lua)\nDESCRIPTION: This Lua script (`ground.script`) controls the horizontal movement of multiple ground game objects (`ground0` through `ground6`) to create an infinite scrolling effect. It initializes a speed variable in `init()` and, in `update()`, iterates through the ground pieces, moves them leftward based on speed and delta time (`dt`), and repositions any piece that moves off the left edge (-228 pixels) to the right edge (1368 pixels). It relies on the Defold API functions `go.get_position` and `go.set_position`.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- ground.script\nlocal pieces = { \"ground0\", \"ground1\", \"ground2\", \"ground3\",\n                    \"ground4\", \"ground5\", \"ground6\" } -- <1>\n\nfunction init(self) -- <2>\n    self.speed = 360  -- Speed in pixels/s\nend\n\nfunction update(self, dt) -- <3>\n    for i, p in ipairs(pieces) do -- <4>\n        local pos = go.get_position(p)\n        if pos.x <= -228 then -- <5>\n            pos.x = 1368 + (pos.x + 228)\n        end\n        pos.x = pos.x - self.speed * dt -- <6>\n        go.set_position(pos, p) -- <7>\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Reading Previous Velocity for Integration in Lua\nDESCRIPTION: This snippet saves the character's velocity before it's modified, storing it as `v0`. This is crucial for accurate calculation of movement integration, particularly when applying trapezoidal integration to derive displacement. Depends on `self.velocity` being up to date from the last frame; outputs `v0` for further calculations.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/platformer.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal v0 = self.velocity\n```\n\n----------------------------------------\n\nTITLE: Modifying Pie Graph Nodes at Runtime in Lua\nDESCRIPTION: This code demonstrates how to manipulate pie graph nodes during runtime. It shows how to get and set various properties including fill angle, perimeter vertices, outer bounds, and how to animate the inner radius of a pie node with a ping-pong loop effect.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/gui-pie.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal pienode = gui.get_node(\"my_pie_node\")\n\n-- get the outer bounds\nlocal fill_angle = gui.get_fill_angle(pienode)\n\n-- increase perimeter vertices\nlocal vertices = gui.get_perimeter_vertices(pienode)\ngui.set_perimeter_vertices(pienode, vertices + 1)\n\n-- change outer bounds\ngui.set_outer_bounds(pienode, gui.PIEBOUNDS_RECTANGLE)\n\n-- animate the inner radius\ngui.animate(pienode, \"inner_radius\", 100, gui.EASING_INOUTSINE, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)\n```\n\n----------------------------------------\n\nTITLE: Acquiring Input Focus in Defold\nDESCRIPTION: This snippet demonstrates how to make a game object receive input events by acquiring input focus. Posting this message to a game object adds its input-capable components to the input stack.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- tell the current game object (\".\") to acquire input focus\nmsg.post(\".\", \"acquire_input_focus\")\n```\n\n----------------------------------------\n\nTITLE: Handling Touch Input for Block Interaction in Defold Lua Script\nDESCRIPTION: This `on_input` function within `board.script` processes user input, specifically the \"touch\" action (mapped to the left mouse button or single touch). It calculates the board grid coordinates (x, y) corresponding to the input position and checks if it's within bounds. On initial press (`action.pressed`), it sends a temporary \"make_orange\" message to the touched block's script and sets `self.dragging` to true. While dragging (`self.dragging` true, `action.pressed` false), it sends \"make_green\" messages to blocks under the cursor. On release (`action.released`), it sets `self.dragging` to false.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"touch\") and action.value == 1 then\n        -- What block was touched or dragged over?\n        local x = math.floor((action.x - edge) / blocksize)\n        local y = math.floor((action.y - bottom_edge) / blocksize)\n\n        if x < 0 or x >= boardwidth or y < 0 or y >= boardheight or self.board[x][y] == nil then\n            -- outside board.\n            return\n        end\n\n        if action.pressed then\n            -- Player started touch\n            msg.post(self.board[x][y].id, \"make_orange\")\n\n            self.dragging = true\n        elseif self.dragging then\n            -- then drag\n            msg.post(self.board[x][y].id, \"make_green\")\n        end\n    elseif action_id == hash(\"touch\") and action.released then\n        -- Player released touch.\n        self.dragging = false\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Window Resize System Message in Defold (Lua)\nDESCRIPTION: This Lua snippet demonstrates how to handle the 'window_resized' system message within a Defold script, using pattern matching on message IDs. Upon detecting the window resize event, the callback utilizes the 'width' and 'height' properties of the message for adaptive rendering logic. Requires Defold's message-passing subsystem, and 'vmath' for further dimension calculations. The key input is 'message_id', and outputs are any rendering or layout alterations triggered inside the handler.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal MSG_WINDOW_RESIZED =      hash(\"window_resized\")\n\nfunction on_message(self, message_id, message)\n  if message_id == MSG_WINDOW_RESIZED then\n    -- The window was resized. message.width and message.height contain the new dimensions.\n    ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Trigger Response in Lua for Defold\nDESCRIPTION: This snippet demonstrates handling a 'trigger_response' message in Defold. It distinguishes between entry and exit triggers and prints appropriate messages.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-messages.md#2025-04-23_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n    -- check for the message\n    if message_id == hash(\"trigger_response\") then\n        if message.enter then\n            -- take action for entry\n            print(\"I am now inside\", message.other_id)\n        else\n            -- take action for exit\n            print(\"I am now outside\", message.other_id)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing and Animating Main Menu GUI in Lua\nDESCRIPTION: This script initializes the main menu GUI, animates decorative elements, and handles user input for starting the game. It uses Defold's GUI and messaging system to create visual effects and trigger game start.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_21\n\nLANGUAGE: Lua\nCODE:\n```\n-- main_menu.gui_script\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\")\n\n    local bs = { \"brick1\", \"brick2\", \"brick3\", \"brick4\", \"brick5\", \"brick6\" }\n    for i, b in ipairs(bs) do\n        local n = gui.get_node(b)\n        local rt = (math.random() * 3) + 1\n        local a = math.random(-45, 45)\n        gui.set_color(n, vmath.vector4(1, 1, 1, 0))\n\n        gui.animate(n, \"position.y\", -100 - math.random(0, 50), gui.EASING_INSINE, 1 + rt, 0, nil, gui.PLAYBACK_LOOP_FORWARD)\n        gui.animate(n, \"color.w\", 1, gui.EASING_INSINE, 1 + rt, 0, nil, gui.PLAYBACK_LOOP_FORWARD)\n        gui.animate(n, \"rotation.z\", a, gui.EASING_INSINE, 1 + rt, 0, nil, gui.PLAYBACK_LOOP_FORWARD)\n    end\n\n    gui.animate(gui.get_node(\"start\"), \"color.x\", 1, gui.EASING_INOUTSINE, 1, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)\nend\n\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"touch\") and action.pressed then\n        local start = gui.get_node(\"start\")\n\n        if gui.pick_node(start, action.x, action.y) then\n            msg.post(\"/main#script\", \"start_game\")\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Messaging Spawned Game Objects in Lua\nDESCRIPTION: This function demonstrates how to create a game object using a factory and immediately send a message to it.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function create_hunter(target_id)\n    local id = factory.create(\"#hunterfactory\")\n    msg.post(id, \"hunt\", { target = target_id })\n    return id\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Gamepad Connection and Disconnection in Defold\nDESCRIPTION: This snippet shows how to detect when a gamepad is connected or disconnected in Defold. It uses the 'gamepad_connected' and 'gamepad_disconnected' actions to handle these events for specific gamepad numbers.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"gamepad_connected\") then\n        if action.gamepad == 0 then\n          -- gamepad 0 was connected\n        end\n    elseif action_id == hash(\"gamepad_disconnected\") then\n        if action.gamepad == 0 then\n          -- gamepad 0 was disconnected\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Block Properties and Appearance in Defold Lua Script\nDESCRIPTION: This Lua script (`block.script`) is attached to individual block game objects. The `init` function sets the initial scale of the block's game object using `go.set_scale`. It checks the `color` property (passed during creation via the factory) and sets the sprite's animation to the corresponding color flipbook using `sprite.play_flipbook`. If no color is provided (`self.color` is nil), it disables the sprite component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- block.script\ngo.property(\"color\", hash(\"none\"))\n\nfunction init(self)\n    go.set_scale(0.18)        -- render scaled down\n\n    if self.color ~= nil then\n        sprite.play_flipbook(\"#sprite\", self.color)\n    else\n        msg.post(\"#sprite\", \"disable\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Hero Initialization Function in Lua\nDESCRIPTION: Initialization function for the hero character that sets up input handling and initial position state.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\")\n    self.position = go.get_position()\n    msg.post(\"#\", \"reset\")\nend\n```\n\n----------------------------------------\n\nTITLE: GUI Node Animation in Defold\nDESCRIPTION: Shows how to animate multiple properties of a GUI node including color, outline, and position using gui.animate().\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/property-animation.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal node = gui.get_node(\"button\")\nlocal color = gui.get_color(node)\n-- Animate the color to white\ngui.animate(node, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_INOUTQUAD, 0.5)\n-- Animate the outline red color component\ngui.animate(node, \"outline.x\", 1, gui.EASING_INOUTQUAD, 0.5)\n-- And move to x position 100\ngui.animate(node, hash(\"position.x\"), 100, gui.EASING_INOUTQUAD, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Playing Flipbook Animations on GUI Box Nodes in Lua\nDESCRIPTION: This Lua code shows how to play a flipbook animation on a GUI box node. It demonstrates changing the animation or image of a node at runtime.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flipbook-animation.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    local character_node = gui.get_node(\"character\")\n    -- This requires that the node has a default animation in the same atlas or tile source as\n    -- the new animation/image we're playing.\n    gui.play_flipbook(character_node, \"jump_left\")\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Snake State and Parameters with Defold Lua Script\nDESCRIPTION: Implements the init() function called by Defold when the game script is first initialized. It creates and stores the initial list of snake segments as tables, sets initial movement direction, speed (in tiles per second), and a timer variable in the component instance. This snippet depends on Defold Lua scripting conventions, where the self table is used to persist state and parameters throughout the script's lifetime. Inputs and outputs are managed through the Lua table structure, and the tilemap and renderer are not directly interacted with at this stage.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction init(self)\n    self.segments = {\n        {x = 7, y = 24},\n        {x = 8, y = 24},\n        {x = 9, y = 24},\n        {x = 10, y = 24} } -- <1>\n    self.dir = {x = 1, y = 0} -- <2>\n    self.speed = 7.0 -- <3>\n\n    self.t = 0 -- <4>\nend\n```\n\n----------------------------------------\n\nTITLE: Improved Color Lookup with Blue Channel Interpolation in GLSL\nDESCRIPTION: Enhanced GLSL fragment shader that implements blue channel interpolation to avoid banding. It samples from two adjacent cells and interpolates the colors based on the fractional part of the blue value.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_9\n\nLANGUAGE: glsl\nCODE:\n```\nvarying mediump vec4 position;\nvarying mediump vec2 var_texcoord0;\n\nuniform lowp sampler2D original;\nuniform lowp sampler2D lut;\n\n#define MAXCOLOR 15.0\n#define COLORS 16.0\n#define WIDTH 256.0\n#define HEIGHT 16.0\n\nvoid main()\n{\n  vec4 px = texture2D(original, var_texcoord0.xy);\n\n    float cell = px.b * MAXCOLOR;\n\n    float cell_l = floor(cell); // <1>\n    float cell_h = ceil(cell);\n\n    float half_px_x = 0.5 / WIDTH;\n    float half_px_y = 0.5 / HEIGHT;\n    float r_offset = half_px_x + px.r / COLORS * (MAXCOLOR / COLORS);\n    float g_offset = half_px_y + px.g * (MAXCOLOR / COLORS);\n\n    vec2 lut_pos_l = vec2(cell_l / COLORS + r_offset, g_offset); // <2>\n    vec2 lut_pos_h = vec2(cell_h / COLORS + r_offset, g_offset);\n\n    vec4 graded_color_l = texture2D(lut, lut_pos_l); // <3>\n    vec4 graded_color_h = texture2D(lut, lut_pos_h);\n\n    // <4>\n    vec4 graded_color = mix(graded_color_l, graded_color_h, fract(cell));\n\n    gl_FragColor = graded_color;\n}\n```\n\n----------------------------------------\n\nTITLE: Compositing Dual Layers in Fragment Shader - GLSL\nDESCRIPTION: This GLSL fragment shader samples two textures using different sets of UV coordinates, one original and one with an animated offset, and adds their RGB values together to produce a scrolling wave effect. The shader expects normalized RGBA textures, and assumes both 'tex0' and 'tex1' sampler2Ds are set up in the material. Alpha is always set to 1.0, so the output is fully opaque. Intended for effects where additive blending is desirable; transparency is ignored in this version. Limitations include not supporting custom blending or alpha-based compositing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/texture-scrolling.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n// water_scroll.fp\\n\\nvarying mediump vec2 var_texcoord0; // var texcoord 0 used with water_bg sampler\\nvarying mediump vec2 var_texcoord1; // var texcoord 1 used with water_waves sampler, UV animation calulation done in vertex program\\n\\nuniform lowp sampler2D tex0; // Material sampler slot 0 = water background / set in plane.model\\nuniform lowp sampler2D tex1; // Material sampler slot 1 = water waves / set in plane.model\\n\\nvoid main()\\n{\\n    vec4 water_bg = texture2D(tex0, var_texcoord0.xy);\\n    vec4 water_waves = texture2D(tex1, var_texcoord1.xy);\\n    \\n    gl_FragColor = vec4(water_bg.rgb + water_waves.rgb ,1.0); // add texture waves to bg using addition(+), alpha set to 1.0 as there is no transparency being used0\\n}\n```\n\n----------------------------------------\n\nTITLE: Sprite Vertex Shader Implementation\nDESCRIPTION: Complete example of a vertex shader for sprite rendering with uniform blocks and vertex attributes\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_7\n\nLANGUAGE: glsl\nCODE:\n```\n#version 140\n\nuniform vx_uniforms\n{\n    mat4 view_proj;\n};\n\n// positions are in world space\nin vec4 position;\nin vec2 texcoord0;\n\nout vec2 var_texcoord0;\n\nvoid main()\n{\n    gl_Position = view_proj * vec4(position.xyz, 1.0);\n    var_texcoord0 = texcoord0;\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring String Memory Allocation in Lua\nDESCRIPTION: Shows how to measure the memory overhead of string operations in Lua. This snippet demonstrates that each print operation with collectgarbage() creates a new string that consumes 22 bytes of memory.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nprint(collectgarbage(\"count\") * 1024)       -- 88611\nprint(collectgarbage(\"count\") * 1024)       -- 88633. 22 bytes allocated\n```\n\n----------------------------------------\n\nTITLE: Handling Messages in Ground Controller Script in Defold\nDESCRIPTION: This function handles incoming messages in the ground script, specifically responding to the 'set_speed' message to update the ground movement speed. The function demonstrates Defold's message passing system.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- ground.script\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"set_speed\") then -- <1>\n        self.speed = message.speed -- <2>\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Releasing Input Focus in Defold\nDESCRIPTION: This snippet shows how to stop a game object from receiving input events by releasing input focus. This removes the object's components from the input stack, preventing further input handling.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- tell the current game object (\".\") to release input focus.\nmsg.post(\".\", \"release_input_focus\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Score Animation and HUD Logic in Defold Lua\nDESCRIPTION: This Lua script (`hud.gui_script`) manages a dynamic score HUD in a Defold GUI scene. It handles receiving 'add_score' messages, creating temporary score text nodes at specified positions, and animating them with floating and swooshing effects towards a central total score display. The script incrementally updates the total score towards a target value, applying a bounce animation and spawning star particle effects during updates. It depends on the Defold engine API (`gui.*`, `vmath.*`, `hash`, `msg.*`), a font named \"small_score\", and a texture named \"star\".\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/hud.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- file: hud.gui_script\n-- how fast the score counts up per second\nlocal score_inc_speed = 1000\n\nfunction init(self)\n    -- the target score is the current score in the game\n    self.target_score = 0\n    -- the current score being counted up towards the target score\n    self.current_score = 0\n    -- the score as displayed in the hud\n    self.displayed_score = 0\n    -- keep a reference to the node displaying the score for later use below\n    self.score_node = gui.get_node(\"score\")\nend\n\nlocal function delete_star(self, star)\n    -- star has finished animation, delete it\n    gui.delete_node(star)\nend\n\nlocal function fade_out_star(self, star)\n    -- fade out the star before deletion\n    gui.animate(star, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0), gui.EASING_INOUT, 0.2, 0.0, delete_star)\nend\n\nlocal function spawn_stars(self, amount)\n    -- position of the score node, to be used for placing the stars\n    local p = gui.get_position(self.score_node)\n    -- distance from the position where the star is spawned\n    local start_distance = 0\n    -- distance where the star stops\n    local end_distance = 240\n    -- angle distance between each star in the star circle\n    local angle_step = 2 * math.pi / amount\n    -- randomize start angle\n    local angle = angle_step * math.random()\n    for i=1,amount do\n        -- increment the angle by the step to get an even distribution of stars\n        angle = angle + angle_step\n        -- direction of the star movement\n        local dir = vmath.vector3(math.cos(angle), math.sin(angle), 0)\n        -- start/end positions of the star\n        local start_p = p + dir * start_distance\n        local end_p = p + dir * end_distance\n        -- create the star node\n        local star = gui.new_box_node(vmath.vector3(start_p.x, start_p.y, 0), vmath.vector3(30, 30, 0))\n        -- set its texture\n        gui.set_texture(star, \"star\")\n        -- set to transparent\n        gui.set_color(star, vmath.vector4(1, 1, 1, 0))\n        -- fade in\n        gui.animate(star, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_OUT, 0.2, 0.0, fade_out_star)\n        -- animate position\n        gui.animate(star, gui.PROP_POSITION, end_p, gui.EASING_NONE, 0.55)\n    end\nend\n\nfunction update(self, dt)\n    -- check if the score needs to be updated\n    if self.current_score < self.target_score then\n        -- increment the score for this timestep to grow towards the target score\n        self.current_score = self.current_score + score_inc_speed * dt\n        -- clamp the score so it doesn't grow past the target score\n        self.current_score = math.min(self.current_score, self.target_score)\n        -- floor the score so it can be displayed without decimals\n        local floored_score = math.floor(self.current_score)\n        -- check if the displayed score should be updated\n        if self.displayed_score ~= floored_score then\n            -- update displayed score\n            self.displayed_score = floored_score\n            -- update the text of the score node\n            gui.set_text(self.score_node, string.format(\"%d p\", self.displayed_score))\n            -- set the scale of the score node to be slightly bigger than normal\n            local s = 1.3\n            gui.set_scale(self.score_node, vmath.vector3(s, s, s))\n            -- then animate the scale back to the original value\n            s = 1.0\n            gui.animate(self.score_node, gui.PROP_SCALE, vmath.vector3(s, s, s), gui.EASING_OUT, 0.2)\n            -- spawn stars\n            spawn_stars(self, 4)\n        end\n    end\nend\n\n-- this function stores the added score so that the displayed score can be counted up in the update function\nlocal function swoosh_done(self, node)\n    -- retrieve score from node\n    local amount = tonumber(gui.get_text(node))\n    -- increase the target score, see the update function for how the score is updated to match the target score\n    self.target_score = self.target_score + amount\n    -- remove the temp score\n    gui.delete_node(node)\nend\n\n-- this function animates the node from having floated first to swoosh away towards the displayed total score\nlocal function float_done(self, node)\n    local duration = 0.2\n    -- swoosh away towards the displayed score\n    gui.animate(node, gui.PROP_POSITION, gui.get_position(self.score_node), gui.EASING_IN, duration, 0.0, swoosh_done)\n    -- also fade out partially during the swoosh\n    gui.animate(node, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0.6), gui.EASING_IN, duration)\nend\n\nfunction on_message(self, message_id, message, sender)\n    -- register added score, this message could be sent by anyone wanting to increment the score\n    if message_id == hash(\"add_score\") then\n        -- create a new temporary score node\n        local node = gui.new_text_node(message.position, tostring(message.amount))\n        -- use the small font for it\n        gui.set_font(node, \"small_score\")\n        -- initially transparent\n        gui.set_color(node, vmath.vector4(1, 1, 1, 0))\n        gui.set_outline(node, vmath.vector4(0, 0, 0, 0))\n        -- fade in\n        gui.animate(node, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_OUT, 0.3)\n        gui.animate(node, gui.PROP_OUTLINE, vmath.vector4(0, 0, 0, 1), gui.EASING_OUT, 0.3)\n        -- float\n        local offset = vmath.vector3(0, 20, 0)\n        gui.animate(node, gui.PROP_POSITION, gui.get_position(node) + offset, gui.EASING_NONE, 0.5, 0.0, float_done)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Input Handling in Defold Script\nDESCRIPTION: Demonstrates how to handle input events in a script component that has input focus.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"touch\") and action.pressed then\n        print(\"Touch\", action.x, action.y)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Fixed Update Physics Handling in Defold\nDESCRIPTION: Demonstrates frame-rate independent physics updates using fixed_update callback.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction fixed_update(self, dt)\n  msg.post(\"#co\", \"apply_force\", {force = vmath.vector3(1, 0, 0), position = go.get_world_position()})\nend\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Font Resources in Defold GUI Components\nDESCRIPTION: This code demonstrates how to get and set font resources in a GUI component at runtime. The example shows declaring a font property, retrieving the current default font, assigning a new font to the default font ID, and verifying the change.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ngo.property(\"mybigfont\", resource.font(\"/assets/mybig.font\"))\n\nfunction init(self)\n  -- get the font file currently assigned to the font with id 'default'\n  print(go.get(\"#gui\", \"fonts\", { key = \"default\" })) -- /builtins/fonts/default.font\n\n  -- set the font with id 'default' to the font file assigned to the resource property 'mybigfont'\n  go.set(\"#gui\", \"fonts\", self.mybigfont, { key = \"default\" })\n\n  -- get the new font file assigned to the font with id 'default'\n  print(go.get(\"#gui\", \"fonts\", { key = \"default\" })) -- /assets/mybig.font\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Node Draw Order with Lua in Defold\nDESCRIPTION: This code demonstrates how to programmatically control the drawing order of GUI nodes in Defold. It gets references to two nodes and then checks their drawing order, moving one above the other if needed.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/gui.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal bean_node = gui.get_node(\"bean\")\nlocal shield_node = gui.get_node(\"shield\")\n\nif gui.get_index(shield_node) < gui.get_index(bean_node) then\n  gui.move_above(shield_node, bean_node)\nend\n```\n\n----------------------------------------\n\nTITLE: Including the Defold SDK header in C++\nDESCRIPTION: The basic include statement required to use the Defold SDK in your native extension. This header gives access to all SDK functionality for interfacing with both the native platform layer and the Lua layer.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-defold-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <dmsdk/sdk.h>\n```\n\n----------------------------------------\n\nTITLE: Cursor-Based Animation Control in Defold (Lua)\nDESCRIPTION: Demonstrates how to control model animation using the cursor property and go.animate(). This allows for fine-grained control over animation playback and timing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/model-animation.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Set the animation on #model but don't start it\nmodel.play_anim(\"#model\", \"wiggle\", go.PLAYBACK_NONE)\n-- Set the cursor to the beginning of the animation\ngo.set(\"#model\", \"cursor\", 0)\n-- Tween the cursor between 0 and 1 pingpong with in-out quad easing.\ngo.animate(\"#model\", \"cursor\", go.PLAYBACK_LOOP_PINGPONG, 1, go.EASING_INOUTQUAD, 3)\n```\n\n----------------------------------------\n\nTITLE: Hero Character Collision and Death Handler in Lua\nDESCRIPTION: Script handling hero character collision responses, death animation, and reset functionality. Includes position correction and animation state management.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"reset\") then\n        self.velocity = vmath.vector3(0, 0, 0)\n        self.correction = vmath.vector3()\n        self.ground_contact = false\n        self.anim = nil\n        go.set(\".\", \"euler.z\", 0)\n        go.set_position(self.position)\n        msg.post(\"#collisionobject\", \"enable\")\n\n    elseif message_id == hash(\"contact_point_response\") then\n        if message.group == hash(\"danger\") then\n            play_animation(self, hash(\"death\"))\n            msg.post(\"#collisionobject\", \"disable\")\n            go.animate(\".\", \"euler.z\", go.PLAYBACK_ONCE_FORWARD, 160, go.EASING_LINEAR, 0.7)\n            go.animate(\".\", \"position.y\", go.PLAYBACK_ONCE_FORWARD, go.get_position().y - 200, go.EASING_INSINE, 0.5, 0.2,\n                function()\n                    msg.post(\"#\", \"reset\")\n                end)\n        elseif message.group == hash(\"geometry\") then\n            handle_geometry_contact(self, message.normal, message.distance)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Gamepad Input in Defold\nDESCRIPTION: This code demonstrates how to handle input from multiple gamepads in Defold. It checks for the 'gamepad_start' action and identifies which gamepad (by number) the input originated from.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"gamepad_start\") then\n        if action.gamepad == 0 then\n          -- gamepad 0 wants to join the game\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Input for Tile Swapping in Defold 15-Puzzle (Lua)\nDESCRIPTION: Implements the 'on_input' function, processing mouse events to handle tile moves when the user clicks a tile. Depending on coordinates and game state, it finds the empty square, checks adjacency, swaps if allowed, redraws, and checks win conditions to display the completion message. Dependencies include the 'find', 'swap', 'draw', and 'inversions' helpers. It expects a mouse trigger action named 'press' with position fields defined in the input bindings; no output, but may update self.board, self.done, and show the '#done' component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Deal with user input\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"press\") and action.pressed and not self.done then -- <1>\n        local x = math.ceil(action.x / 128) -- <2>\n        local y = math.ceil(action.y / 128)\n        local ex, ey = find(self.board, 0) -- <3>\n        if math.abs(x - ex) + math.abs(y - ey) == 1 then -- <4>\n            self.board = swap(self.board, (4-ey)*4+ex, (4-y)*4+x) -- <5>\n            draw(self.board) -- <6>\n        end\n        ex, ey = find(self.board, 0)\n        if inversions(self.board) == 0 and ex == 4 then -- <7>\n            self.done = true\n            msg.post(\"#done\", \"enable\")\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Exploring Local, Global Variables and Lexical Scoping in Lua - Lua\nDESCRIPTION: Explains the difference between local and global variables, with examples of lexical scope and function-level variable visibility. Demonstrates explicit local declaration and shadowing, and delayed variable availability based on declaration order. No external dependencies; prints output for undefined and defined variable accesses.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nfunction my_func(a, b)\n    -- 'a' and 'b' are local to this function and available through its scope\n\n    do\n        local x = 1\n    end\n\n    print(x) --> nil. 'x' is not available outside the do-end scope\n    print(foo) --> nil. 'foo' is declared after 'my_func'\n    print(foo_global) --> \"value 2\"\nend\n\nlocal foo = \"value 1\"\nfoo_global = \"value 2\"\n\nprint(foo) --> \"value 1\". 'foo' is available in the topmost scope after declaration.\n```\n\n----------------------------------------\n\nTITLE: Sending a Gated Sound Play Message in Defold with Lua\nDESCRIPTION: This snippet shows how to send a message to play a gated sound, including the sound component and gain.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/sound.md#2025-04-23_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nmsg.post(\"/sound_gate#script\", \"play_gated_sound\", { soundcomponent = \"/sounds#explosion1\", gain = 1.0 })\n```\n\n----------------------------------------\n\nTITLE: Checking Camera Enabled Status in Lua\nDESCRIPTION: Demonstrates how to check if a camera is enabled before using it for rendering.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nif camera.get_enabled(\"main:/my_go#camera\") then\n    render.set_camera(\"main:/my_go#camera\")\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Velocity with Delta in Lua\nDESCRIPTION: This snippet adds the computed velocity change (`dv`) to the current velocity. This reflecting the updated speed for the character after accounting for this frame's acceleration. It depends on `self.velocity` and `dv` being defined beforehand. Updates `self.velocity` in place.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/platformer.md#2025-04-23_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nself.velocity = self.velocity + dv\n```\n\n----------------------------------------\n\nTITLE: Handling Digital Button Input in Defold\nDESCRIPTION: This snippet demonstrates how to detect and respond to digital button presses and releases on a gamepad in Defold. It checks for the 'gamepad_lpad_left' action and handles both pressed and released states.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"gamepad_lpad_left\") then\n        if action.pressed then\n            -- start moving left\n        elseif action.released then\n            -- stop moving left\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Coin Behavior Implementation\nDESCRIPTION: Script controlling coin collection mechanics and animation, including collision detection and visual feedback.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n-- coin.script\nfunction init(self)\n    self.collected = false\nend\n\nfunction on_message(self, message_id, message, sender)\n    if self.collected == false and message_id == hash(\"collision_response\") then\n        self.collected = true\n        msg.post(\"#sprite\", \"disable\")\n    elseif message_id == hash(\"start_animation\") then\n        pos = go.get_position()\n        go.animate(go.get_id(), \"position.y\", go.PLAYBACK_LOOP_PINGPONG, pos.y + 24, go.EASING_INOUTSINE, 0.75, message.delay)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Uniform Blocks in GLSL\nDESCRIPTION: Demonstrates how to declare and use uniform blocks for non-opaque uniform types, showing matrix transformations in a vertex shader\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nuniform vertex_inputs\n{\n    mat4 mtx_world;\n    mat4 mtx_proj;\n    mat4 mtx_view;\n    mat4 mtx_normal;\n    ...\n};\n\nvoid main()\n{\n    // Individual members of the uniform block can be used as-is\n    gl_Position = mtx_proj * mtx_view * mtx_world * vec4(position, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Camera for Rendering\nDESCRIPTION: Shows how to set a specific camera for rendering in a render script, useful for scenarios like multiplayer games.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nrender.set_camera(\"main:/my_go#camera\")\n```\n\n----------------------------------------\n\nTITLE: Handling Collection Proxy Unload Completion in Defold\nDESCRIPTION: Demonstrates how to respond to the 'proxy_unloaded' message that a collection proxy sends when unloading is complete. This can be used to trigger follow-up actions after a world is fully unloaded.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-proxy.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"proxy_unloaded\") then\n        -- Ok, the world is unloaded...\n        ...\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Movement in Lua for Defold\nDESCRIPTION: This snippet demonstrates how to handle mouse movement events in Defold. It checks for the presence of x and y coordinates in the action table and uses them to update the position of a game object.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-mouse-and-touch.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action.x and action.y then\n        -- let game object follow mouse/touch movement\n        local pos = vmath.vector3(action.x, action.y, 0)\n        go.set_position(pos)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive New File Dialog in Lua for Defold Editor\nDESCRIPTION: This snippet demonstrates how to create a reactive component for a New File dialog using Defold's editor UI framework. It showcases the use of state hooks, conditional button enabling, and dialog result handling.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts-ui.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal dialog = editor.ui.component(function(props)\n    local name, set_name = editor.ui.use_state(\"\")\n\n    return editor.ui.dialog({ \n        title = props.title,\n        content = editor.ui.vertical({\n            padding = editor.ui.PADDING.LARGE,\n            children = { \n                editor.ui.string_field({ \n                    value = name,\n                    on_value_changed = set_name \n                }) \n            }\n        }),\n        buttons = {\n            editor.ui.dialog_button({ \n                text = \"Cancel\", \n                cancel = true \n            }),\n            editor.ui.dialog_button({ \n                text = \"Create File\",\n                enabled = name ~= \"\",\n                default = true,\n                result = name\n            })\n        }\n    })\nend)\n\nlocal file_name = editor.ui.show_dialog(dialog({ title = \"New File Name\" }))\nif file_name then \n    print(\"create \" .. file_name)\nelse\n    print(\"cancelled\")\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Vertex Attributes in Defold\nDESCRIPTION: Example showing how to set and animate custom vertex attributes for sprite components using go.set and go.animate functions. The code demonstrates setting a tint color and creating a ping-pong animation effect.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/material.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ngo.set(\"#sprite\", \"tint\", vmath.vector4(1,0,0,1))\n\ngo.animate(\"#sprite\", \"tint\", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1,0,0,1), go.EASING_LINEAR, 2)\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Lua Tables with sys Functions in Defold\nDESCRIPTION: Demonstrates how to get platform-independent file paths and save/load Lua tables using Defold's sys.save() and sys.load() functions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/file-access.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- get a platform independent path to the file \"highscore\" for application \"mygame\"\nlocal path = sys.get_save_file(\"mygame\", \"highscore\")\n\n-- save a Lua table with some data\nlocal ok = sys.save(path, { highscore = 100 })\nif not ok then\n\tprint(\"Failed to save\", path)\n\treturn\nend\n\n-- load the data\nlocal data = sys.load(path)\nprint(data.highscore) -- 100\n```\n\n----------------------------------------\n\nTITLE: Adding Food Placement Logic in Defold Snake Game (Lua)\nDESCRIPTION: This snippet introduces a local function 'put_food' and modifies the 'init' function. 'put_food' calculates a random position within the grid boundaries, stores it in 'self.food', and updates the tilemap ('#grid') to display the food tile (tile ID 3). The 'init' function is updated to seed the random number generator using 'socket.gettime()' (to ensure different results each run) and calls 'put_food' to place the initial food item when the game starts.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function put_food(self) -- <1>\n    self.food = {x = math.random(2, 47), y = math.random(2, 47)} -- <2>\n    tilemap.set_tile(\"#grid\", \"layer1\", self.food.x, self.food.y, 3) -- <3>\nend\n\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\")\n\n    self.segments = {\n        {x = 7, y = 24},\n        {x = 8, y = 24},\n        {x = 9, y = 24},\n        {x = 10, y = 24} }\n    self.dir = {x = 1, y = 0}\n    self.dirqueue = {}\n    self.speed = 7.0\n    self.t = 0\n\n    math.randomseed(socket.gettime()) -- <4>\n    put_food(self) -- <5>\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Level Presentation Dialog in Defold\nDESCRIPTION: A simple script that displays the current level number in a dialog when shown and handles hiding the dialog.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_27\n\nLANGUAGE: Lua\nCODE:\n```\n-- present_level.gui_script\nfunction init(self)\n    msg.post(\"#\", \"hide\")\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"hide\") then\n        msg.post(\"#\", \"disable\")\n    elseif message_id == hash(\"show\") then\n        local n = gui.get_node(\"message\")\n        gui.set_text(n, \"Level \" .. message.level)\n        msg.post(\"#\", \"enable\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Animating Material Constants in Lua\nDESCRIPTION: This Lua code snippet shows how to set and animate a material constant of type CONSTANT_TYPE_USER using go.set() and go.animate() functions in Defold. It sets the 'tint' property of a sprite component to a red color and then animates it.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/material.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ngo.set(\"#sprite\", \"tint\", vmath.vector4(1,0,0,1))\n\ngo.animate(\"#sprite\", \"tint\", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1,0,0,1), go.EASING_LINEAR, 2)\n```\n\n----------------------------------------\n\nTITLE: Disabling a Sprite Component in Defold using Lua\nDESCRIPTION: A simple script that disables a sprite component named 'body' in the current game object during initialization using the '#' shorthand for addressing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/addressing.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    msg.post(\"#body\", \"disable\") -- <1>\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Joint Properties in Defold\nDESCRIPTION: Demonstrates how to read and modify joint properties during runtime. This example shows increasing a hinge joint's motor speed based on an acceleration condition.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-joints.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction update(self, dt)\n    if self.accelerating then\n        local hinge_props = physics.get_joint_properties(\"obj_a#collisionobject\", \"my_hinge\")\n        -- increase motor speed by 100 revolutions per second\n        hinge_props.motor_speed = hinge_props.motor_speed + 100 * 2 * math.pi * dt\n        physics.set_joint_properties(\"obj_a#collisionobject\", \"my_hinge\", hinge_props)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying Material Constants with go.set in Defold Lua\nDESCRIPTION: Shows how to set the value of a material constant at runtime using Defold's go.set function in Lua. Requires Defold engine and predefined material/component paths. The \"{{ include.component }}\" and \"{{ include.variable }}\" values are dynamically replaced with the actual component and variable names. Takes a vector as input and updates the material property instantly, with no transitional animation.\nSOURCE: https://github.com/defold/doc/blob/master/docs/ru/shared/material-constants.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ngo.set(\"#{{ include.component }}\", \"{{ include.variable }}\", vmath.vector4(1,0,0,1))\n```\n\n----------------------------------------\n\nTITLE: Multiple Variable Debug Printing in Lua\nDESCRIPTION: Shows how to print multiple variables in a single print statement for debugging purposes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nprint(score, health, ammo)\n```\n\n----------------------------------------\n\nTITLE: Using a Lua Module with Metatables for State Management\nDESCRIPTION: This snippet demonstrates how to use a Lua module that uses metatables for state management, showing the object-oriented-like syntax for method calls.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal m = require \"main.mymodule\"\nlocal my_state = m.new(42)\nmy_state:alter_state(1) -- \"my_state\" is added as first argument when using : notation\nprint(my_state:get_state()) --> 43\n```\n\n----------------------------------------\n\nTITLE: Managing Block Behavior and Effects in Lua\nDESCRIPTION: Script for handling block initialization, magic transformation, and effect management. Controls scaling, sprite management, and cleanup of magic effects.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\n-- block.script\nfunction init(self)\n    go.set_scale(0.18) -- render scaled down\n\n    self.fx1 = nil\n    self.fx2 = nil\n\n    msg.post(\"#cover\", \"disable\")\n\n    if self.color ~= nil then\n        sprite.play_flipbook(\"#sprite\", self.color)\n    else\n        msg.post(\"#sprite\", \"disable\")\n    end\nend\n\nfunction final(self)\n    if self.fx1 ~= nil then\n        go.delete(self.fx1)\n    end\n\n    if self.fx2 ~= nil then\n        go.delete(self.fx2)\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"make_magic\") then\n        self.color = hash(\"magic\")\n        msg.post(\"#cover\", \"enable\")\n        msg.post(\"#sprite\", \"enable\")\n        sprite.play_flipbook(\"#sprite\", hash(\"magic-sphere_layer1\"))\n\n        self.fx1 = factory.create(\"#fxfactory\", p, nil, { direction = hash(\"left\") })\n        self.fx2 = factory.create(\"#fxfactory\", p, nil, { direction = hash(\"right\") })\n\n        go.set_parent(self.fx1, go.get_id())\n        go.set_parent(self.fx2, go.get_id())\n\n        go.set(self.fx1, \"position.z\", 0.01)\n        go.set(self.fx1, \"scale\", 1)\n        go.set(self.fx2, \"position.z\", 0.02)\n        go.set(self.fx2, \"scale\", 1)\n    elseif message_id == hash(\"lights_on\") or message_id == hash(\"lights_off\") then\n        msg.post(self.fx1, message_id)\n        msg.post(self.fx2, message_id)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Basic Punch Message in Lua\nDESCRIPTION: Demonstrates sending a simple 'punch' message from hero to enemy script component using relative addressing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"enemy#controller\", \"punch\")\n```\n\n----------------------------------------\n\nTITLE: Using Hashed Identifiers for Object Manipulation in Lua\nDESCRIPTION: Illustrates how to properly use hashed identifiers with game objects, including working with spawned objects, absolute paths, and the limitations of using hashed relative addresses.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/addressing.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal spawned_id = factory.create(\"#some_factory\")\nlocal pos = vmath.vector3(100, 100, 0)\ngo.set_position(pos, spawned_id)\n\nlocal other_id = hash(\"/path/to/the/object\")\ngo.set_position(pos, other_id)\n\n-- This will not work! Relative addresses must be given as strings.\nlocal relative_id = hash(\"my_object\")\ngo.set_position(pos, relative_id)\n```\n\n----------------------------------------\n\nTITLE: Controlling Animation Playback with Cursor in Lua\nDESCRIPTION: This snippet demonstrates advanced animation control using go.animate() to manipulate the 'cursor' property of a Model component. It sets up a ping-pong animation with easing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/model-animation.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- 设置 #model 上的动画但不播放\nmodel.play_anim(\"#model\", \"wiggle\", go.PLAYBACK_NONE)\n-- 把播放头设置为动画起始位置\ngo.set(\"#model\", \"cursor\", 0)\n-- 基于 in-out quad 缓动对播放头进行从 0 到 1 的 pingpong 补间.\ngo.animate(\"#model\", \"cursor\", go.PLAYBACK_LOOP_PINGPONG, 1, go.EASING_INOUTQUAD, 3)\n```\n\n----------------------------------------\n\nTITLE: Handling Punch Message Reception\nDESCRIPTION: Shows how to receive and handle the punch message in the enemy script, reducing health when message is received.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n  if message_id == hash(\"punch\") then\n    self.health = self.health - 100\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-touch Input in Lua for Defold\nDESCRIPTION: This code snippet shows how to handle multi-touch input events in Defold. It iterates through the touch points in the action.touch table and creates a new object at each touch point using a factory.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-mouse-and-touch.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"touch_multi\") then\n        -- Spawn at each touch point\n        for i, touchdata in ipairs(action.touch) do\n            local pos = vmath.vector3(touchdata.x, touchdata.y, 0)\n            factory.create(\"#factory\", pos)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Lua Table Operations\nDESCRIPTION: Demonstrates table creation and manipulation, including sequences and associative arrays.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Initialize a table as a sequence\nweekdays = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n            \"Thursday\", \"Friday\", \"Saturday\"}\nprint(weekdays[1]) --> \"Sunday\"\nprint(weekdays[5]) --> \"Thursday\"\n\n-- Initialize a table as a record with sequence values\nmoons = { Earth = { \"Moon\" },\n          Uranus = { \"Puck\", \"Miranda\", \"Ariel\", \"Umbriel\", \"Titania\", \"Oberon\" } }\nprint(moons.Uranus[3]) --> \"Ariel\"\n\n-- Build a table from an empty constructor {}\na = 1\nt = {}\nt[1] = \"first\"\nt[a + 1] = \"second\"\nt.x = 1 -- same as t[\"x\"] = 1\n\n-- Iterate over the table key, value pairs\nfor key, value in pairs(t) do\n    print(key, value)\nend\n--> 1   first\n--> 2   second\n--> x   1\n\nu = t -- u now refers to the same table as t\nu[1] = \"changed\"\n\nfor key, value in pairs(t) do -- still iterating over t!\n    print(key, value)\nend\n--> 1   changed\n--> 2   second\n--> x   1\n```\n\n----------------------------------------\n\nTITLE: Color Manipulation (Desaturation) in Fragment Shader for Defold (GLSL)\nDESCRIPTION: This GLSL fragment shader samples a color from a texture (provided via the 'original' sampler uniform), computes its grayscale (desaturated) value using NTSC coefficients, and assigns it as the fragment color. It is designed for testing post-processing pipelines and requires the corresponding material and render script setup to correctly bind the sampler to the render target texture. Inputs: interpolated texture coordinates. Outputs: a grayscale RGBA color. Limitations: expects the 'original' texture to be bound at slot 0.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\n// grade.fp\nvarying mediump vec4 position;\nvarying mediump vec2 var_texcoord0;\n\nuniform lowp sampler2D original;\n\nvoid main()\n{\n  vec4 color = texture2D(original, var_texcoord0.xy);\n  // Desaturate the color sampled from the original texture\n  float grey = color.r * 0.3 + color.g * 0.59 + color.b * 0.11;\n  gl_FragColor = vec4(grey, grey, grey, 1.0);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Message Data\nDESCRIPTION: Example of sending a message with nested table data structures containing game stats and inventory.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal inventory_table = { sword = true, shield = true, bow = true, arrows = 9 }\nlocal stats = { score = 100, stars = 2, health = 4, inventory = inventory_table }\nmsg.post(\"other_object#script\", \"set_stats\", stats)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Loading with Dynamic Collection Factory in Lua\nDESCRIPTION: Demonstrates how to use a collection factory with dynamic loading enabled in synchronous mode, which loads resources on demand when creating objects.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-factory.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- No factory resources are loaded when the collection factory's\n    -- parent collection is loaded. Calling create without\n    -- having called load will create the resources synchronously.\n    self.go_ids = collectionfactory.create(\"#collectionfactory\")\nend\n\nfunction final(self)  \n    -- Delete game objects. Will decref resources.\n    -- In this case resources are deleted since the collection\n    -- factory component holds no reference.\n    go.delete(self.go_ids)\n\n    -- Calling unload will do nothing since factory holds\n    -- no references\n    collectionfactory.unload(\"#factory\")\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Tint Color in Defold\nDESCRIPTION: Example showing how to modify a sprite's color tint using the built-in sprite shader. The tint is set using RGBA values between 0 and 1.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/faq/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal red = 1\nlocal green = 0.3\nlocal blue = 0.55\nlocal alpha = 1\ngo.set(\"#sprite\", \"tint\", vmath.vector4(red, green, blue, alpha))\n```\n\n----------------------------------------\n\nTITLE: Implementing Ground Piece Movement in Lua\nDESCRIPTION: A Lua script demonstrating the initialization and update of ground pieces in a game, including callout comments for documentation purposes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/test.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal pieces = { \"ground0\", \"ground1\", \"ground2\", \"ground3\",\n                    \"ground4\", \"ground5\", \"ground6\" } -- <1>\n\nfunction init(self) -- <2>\n    self.speed = 6\nend\n\n-- This is a comment to the functionality of the function and it is running quite long to force a linebreak\nfunction update(self, dt)\n    for i, p in ipairs(pieces) do -- <3>\n        local pos = go.get_position(p)\n        if pos.x <> -228 then\n            pos.x = 1368 + (pos.x + 228)\n        end\n        pos.x = pos.x - self.speed\n        go.set_position(pos, p)\n    end\nend\n-- This is a comment to the functionality of the function and it is running quite long to force a\n```\n\n----------------------------------------\n\nTITLE: Defining Car Control Constants in Lua\nDESCRIPTION: This snippet defines several local constants used throughout the car script for controlling its behavior. It includes turn speed factor, maximum steering angles (using `vmath.quat_rotation_z`), zero steer angle, the vector representing wheel placement, and the car's acceleration value. It also pre-hashes input action names ('left', 'right', 'accelerate', 'brake') for performance and readability.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/car.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Constants\nlocal turn_speed = 0.1                           \t\t\t\t\t\t\t\t  -- Slerp factor\nlocal max_steer_angle_left = vmath.quat_rotation_z(math.pi / 6)     -- 30 degrees\nlocal max_steer_angle_right = vmath.quat_rotation_z(-math.pi / 6)   -- -30 degrees\nlocal steer_angle_zero = vmath.quat_rotation_z(0)\t\t\t\t\t\t\t\t\t  -- Zero degrees\nlocal wheels_vector = vmath.vector3(0, 72, 0)         \t\t\t\t\t-- Vector from center of back and front wheel pairs\n\nlocal acceleration = 100 \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- The acceleration of the car\n\n-- prehash the inputs\nlocal left = hash(\"left\")\nlocal right = hash(\"right\")\nlocal accelerate = hash(\"accelerate\")\nlocal brake = hash(\"brake\")\n```\n\n----------------------------------------\n\nTITLE: Destroying Joint in Defold\nDESCRIPTION: Removes a previously created joint from a collision object using the physics.destroy_joint() function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-joints.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nphysics.destroy_joint(\"obj_a#collisionobject\", \"my_test_joint\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Render Predicates for Material Tags in Defold Render Script (Lua)\nDESCRIPTION: This Lua snippet from Defold's render script initializes several predicates, including a new predicate for objects tagged 'grade'. Each predicate enables separate rendering of tagged elements (such as tiles, GUI, text, particles, and the grading quad). Must be placed in the init() function of the render script. Dependencies: render API available in Defold, materials/shaders must be tagged consistently.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    self.tile_pred = render.predicate({\"tile\"})\n    self.gui_pred = render.predicate({\"gui\"})\n    self.text_pred = render.predicate({\"text\"})\n    self.particle_pred = render.predicate({\"particle\"})\n    self.grade_pred = render.predicate({\"grade\"}) -- <1>\n\n    ...\nend\n\n```\n\n----------------------------------------\n\nTITLE: Component Cleanup in Defold Final Callback\nDESCRIPTION: Demonstrates cleanup operations in a script component's final callback when the component is being deleted.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction final(self)\n  if self.my_var == \"something\" then\n      -- do some cleanup\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Processing Contact Point Response in Lua for Defold\nDESCRIPTION: This code shows how to handle a 'contact_point_response' message in Defold. It checks the mass of the collided object and prints a message if it's over 10 kilos.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-messages.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n    -- check for the message\n    if message_id == hash(\"contact_point_response\") then\n        -- take action\n        if message.other_mass > 10 then\n            print(\"I collided with something weighing more than 10 kilos!\")\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Collection Proxy Load Completion in Defold\nDESCRIPTION: Shows how to respond to the 'proxy_loaded' message that a collection proxy sends when loading is complete. The code initializes and enables the newly loaded collection, making it ready for use.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-proxy.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"proxy_loaded\") then\n        -- New world is loaded. Init and enable it.\n        msg.post(sender, \"init\")\n        msg.post(sender, \"enable\")\n        ...\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Lua Module Using Closures for State Management\nDESCRIPTION: This snippet demonstrates how to create a Lua module using closures to manage state, providing a memory-efficient alternative to metatables.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal M = {}\n\nfunction M.new(v)\n    local state = {\n        value = v\n    }\n\n    state.alter_state = function(v)\n        state.value = state.value + v\n    end\n\n    state.get_state = function()\n        return state.value\n    end\n\n    return state\nend\n\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Particle Effects in Lua\nDESCRIPTION: Demonstrates how to play and stop a particle effect component from Lua code in Defold. The example shows how to reference a particle effect component in the current game object using the hash notation.\nSOURCE: https://github.com/defold/doc/blob/master/docs/ru/manuals/particlefx.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- запустить эффект частиц в текущем игровом объекте\nparticlefx.play(\"#particles\")\n\n-- остановить эффект частиц в текущем игровом объекте\nparticlefx.stop(\"#particles\")\n```\n\n----------------------------------------\n\nTITLE: Drawing Debug Text to Screen with Defold Renderer (Lua)\nDESCRIPTION: This Lua code demonstrates how to send a message to the Defold rendering system to display debug text at a given position. The snippet constructs a 3D vector for the on-screen position and posts a 'draw_text' message with the desired text and coordinates. Dependencies are the Defold messaging API and the built-in always_on_top font. The primary input is the debug text and its position; the output is on-screen debug text, primarily for development and diagnostics.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n-- draw a text message\nlocal pos = vmath.vector3(500, 500, 0)\nmsg.post(\"@render:\", \"draw_text\", { text = \"Hello world!\", position = pos })  \n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Joint in Defold\nDESCRIPTION: Creates a fixed joint (rope) constraint between two collision objects. The joint connects specific points on each object with a maximum length constraint.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-joints.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nphysics.create_joint(physics.JOINT_TYPE_FIXED, \"obj_a#collisionobject\", \"my_test_joint\", vmath.vector3(10, 0, 0), \"obj_b#collisionobject\", vmath.vector3(0, 20, 0), { max_length = 20 })\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Scale Using URL Reference in Lua\nDESCRIPTION: Demonstrates setting a sprite component's scale property using a URL reference and hashed property name\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/properties.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Set the x-scale of the sprite component\nlocal url = msg.url(\"#sprite\")\nlocal prop = hash(\"scale.x\")\ngo.set(url, prop, 2.0)\n```\n\n----------------------------------------\n\nTITLE: Sending Score Update Message\nDESCRIPTION: Example of sending a score update message with data payload to the interface GUI component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nself.score = self.score + 100\nmsg.post(\"/interface#gui\", \"update_score\", { score = self.score })\n```\n\n----------------------------------------\n\nTITLE: Finding Same-Color Neighbors in Lua Game Board\nDESCRIPTION: This function returns a list of adjacent blocks with the same color as the block at the given position (x, y). It uses a filter function applied to the full list of blocks.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\n--\n-- Returns a list of neighbor blocks of the same color as the\n-- block on x, y\n--\nlocal function same_color_neighbors(self, x, y)\n    local f = function (v)\n        return (v.id ~= self.board[x][y].id) and\n               (v.x == x or v.x == x - 1 or v.x == x + 1) and\n               (v.y == y or v.y == y - 1 or v.y == y + 1) and\n               (v.color == self.board[x][y].color)\n    end\n    return filter(f, self.blocks)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for Limited S3 Access in AWS\nDESCRIPTION: This JSON snippet defines an IAM policy that allows listing all buckets, getting ACL for a specific bucket, and uploading resources to that bucket. It's used to create a user with limited access for Live Update.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/live-update-aws.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListAllMyBuckets\"\n            ],\n            \"Resource\": \"arn:aws:s3:::*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetBucketAcl\"\n            ],\n            \"Resource\": \"arn:aws:s3:::defold-liveupdate-example\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::defold-liveupdate-example/*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Lua String Operations\nDESCRIPTION: Shows string manipulation including concatenation, multi-line strings, and escape sequences.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nmy_string = \"hello\"\nanother_string = 'world'\nprint(my_string .. another_string) --> \"helloworld\"\n\nprint(\"10.2\" + 1) --> 11.2\nprint(my_string + 1) -- error, can't convert \"hello\"\nprint(my_string .. 1) --> \"hello1\"\n\nprint(\"one\\nstring\") --> one\n                     --> string\n\nprint(\"\\097bc\") --> \"abc\"\n\nmulti_line_string = [[\nHere is a chunk of text that runs over several lines. This is all\nput into the string and is sometimes very handy.\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Script API Definition for Defold Extension\nDESCRIPTION: Example YAML structure for defining a native extension's API to enable editor auto-complete. The definition includes member functions, parameters, return values, and usage examples. The file must use the .script_api extension and follow YAML format.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-script-api.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: The name of the extension\n  type: table\n  desc: Extension description\n  members:\n  - name: Name of the first member\n    type: Member type\n    desc: Member description\n    # if member type is \"function\"\n    parameters:\n    - name: Name of the first parameter\n      type: Parameter type\n      desc: Parameter description\n    - name: Name of the second parameter\n      type: Parameter type\n      desc: Parameter description\n    # if member type is \"function\"\n    returns:\n    - name: Name of first return value\n      type: Return value type\n      desc: Return value description\n    examples:\n    - desc: First example of member usage\n    - desc: Second example of member usage\n\n  - name: Name of the second member\n    ...\n```\n\n----------------------------------------\n\nTITLE: Drawing Debug Lines with Defold Renderer (Lua)\nDESCRIPTION: This Lua snippet shows how to draw a white debug line in a Defold application by sending a 'draw_line' message to the render script. It uses 'vmath.vector3' and 'vmath.vector4' to construct the required parameters, which are sent in a table as the message payload. Dependencies include Defold's built-in message system and math library. Inputs are the line endpoints and color, while the output is a rendered line for debugging visualization. Constraints include using this API for debugging purposes only.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n-- draw a white line\nlocal p1 = vmath.vector3(0, 0, 0)\nlocal p2 = vmath.vector3(1000, 1000, 0)\nlocal col = vmath.vector4(1, 1, 1, 1)\nmsg.post(\"@render:\", \"draw_line\", { start_point = p1, end_point = p2, color = col } )  \n```\n\n----------------------------------------\n\nTITLE: Naive Kinematic Collision Resolution in Lua for Defold\nDESCRIPTION: This snippet demonstrates a simple but naive approach to resolving kinematic collisions in Defold. It handles 'contact_point_response' messages and moves the object based on the collision normal and distance.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-resolving-collisions.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n  -- Handle collision\n  if message_id == hash(\"contact_point_response\") then\n    local newpos = go.get_position() + message.normal * message.distance\n    go.set_position(newpos)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings and Numbers in Lua - Lua\nDESCRIPTION: Demonstrates string concatenation using the '..' operator, showing automatic conversion of numbers to strings when concatenated. No dependencies. Outputs concatenated results as strings.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nprint(\"donkey\" .. \"kong\") --> \"donkeykong\"\nprint(1 .. 2) --> \"12\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Editor Commands in Lua\nDESCRIPTION: Demonstrates how to implement custom editor commands for removing comments from Lua files and minifying JSON files, including selection handling and command execution.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal M = {}\n\nfunction M.get_commands()\n  return {\n    {\n      label = \"Remove Comments\",\n      locations = {\"Edit\", \"Assets\"},\n      query = {\n        selection = {type = \"resource\", cardinality = \"one\"}\n      },\n      active = function(opts)\n        local path = editor.get(opts.selection, \"path\")\n        return ends_with(path, \".lua\") or ends_with(path, \".script\")\n      end,\n      run = function(opts)\n        local text = editor.get(opts.selection, \"text\")\n        editor.transact({\n          editor.tx.set(opts.selection, \"text\", strip_comments(text))\n        })\n      end\n    },\n    {\n      label = \"Minify JSON\",\n      locations = {\"Assets\"},\n      query = {\n        selection = {type = \"resource\", cardinality = \"one\"}\n      },\n      active = function(opts)\n        return ends_with(editor.get(opts.selection, \"path\"), \".json\")\n      end,\n      run = function(opts)\n        local path = editor.get(opts.selection, \"path\")\n        editor.execute(\"./scripts/minify-json.sh\", path:sub(2))\n      end\n    }\n  }\nend\n\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime Atlas in Defold\nDESCRIPTION: Creates an atlas resource at runtime with animation and geometry parameters, then applies it to a sprite component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/atlas.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal params = {\n  texture = texture_id,\n  animations = {\n    {\n      id          = \"my_animation\",\n      width       = width,\n      height      = height,\n      frame_start = 1,\n      frame_end   = 2,\n    }\n  },\n  geometries = {\n    {\n      vertices  = {\n        0,     0,\n        0,     height,\n        width, height,\n        width, 0\n      },\n      uvs = {\n        0,     0,\n        0,     height,\n        width, height,\n        width, 0\n      },\n      indices = {0,1,2,0,2,3}\n    }\n  }\n}\nlocal my_atlas_id = resource.create_atlas(\"/my_atlas.texturesetc\", params)\n\n-- assign the atlas to the 'sprite' component on the same go\ngo.set(\"#sprite\", \"image\", my_atlas_id)\n\n-- play the \"animation\"\nsprite.play_flipbook(\"#sprite\", \"my_animation\")\n```\n\n----------------------------------------\n\nTITLE: Tracking Spawned Game Objects in Lua\nDESCRIPTION: This snippet demonstrates how to track spawned game objects by storing their IDs in a table for later reference or deletion.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- spawner.script\nself.spawned_coins = {}\n\n...\n\n-- Spawn a coin and store it in the \"coins\" table.\nlocal id = factory.create(\"#coinfactory\", coin_position)\ntable.insert(self.spawned_coins, id)\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Groups Based on Device Music State\nDESCRIPTION: Code to check if device music is playing and mute all sound groups accordingly.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sound.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- If sound playing on this iPhone/Android device, silence everything\nif sound.is_music_playing() then\n    for i, group_hash in ipairs(sound.get_groups()) do\n        sound.set_group_gain(group_hash, 0)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Resetting GameObject Transform in Defold Editor Script\nDESCRIPTION: This Lua snippet defines a command to reset the transform (position, rotation, scale) of a selected game object in the Defold editor. It uses editor.get() to query the current state and editor.transact() to bundle modifications into a single undoable step.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n{\n  label = \"Reset transform\",\n  locations = {\"Outline\"},\n  query = {selection = {type = \"outline\", cardinality = \"one\"}},\n  active = function(opts)\n    local node = opts.selection\n    return editor.can_set(node, \"position\") \n       and editor.can_set(node, \"rotation\") \n       and editor.can_set(node, \"scale\")\n  end,\n  run = function(opts)\n    local node = opts.selection\n    editor.transact({\n      editor.tx.set(node, \"position\", {0, 0, 0}),\n      editor.tx.set(node, \"rotation\", {0, 0, 0}),\n      editor.tx.set(node, \"scale\", {1, 1, 1})\n    })\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lua Module for Development with Hot Reloading\nDESCRIPTION: This snippet demonstrates a workaround for hot reloading Lua modules during development by using a global variable.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\n--- module.lua\n\n-- Replace with local M = {} when done\nuniquevariable12345 = uniquevariable12345 or {}\nlocal M = uniquevariable12345\n\nM.value = 4711\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Implementing Board GUI Script in Defold\nDESCRIPTION: A Lua script for the main board GUI that handles showing/hiding the interface, updating the drop counter, and processing user input for restart and drop actions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_24\n\nLANGUAGE: Lua\nCODE:\n```\n-- board.gui_script\nfunction init(self)\n    msg.post(\"#\", \"show\")\n    msg.post(\"/restart#gui\", \"hide\")\n    msg.post(\"/level_complete#gui\", \"hide\")\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"hide\") then\n        msg.post(\"#\", \"disable\")\n    elseif message_id == hash(\"show\") then\n        msg.post(\"#\", \"enable\")\n    elseif message_id == hash(\"set_drop_counter\") then\n        local n = gui.get_node(\"drop_counter\")\n        gui.set_text(n, message.drops .. \" x\")\n    end\nend\n\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"touch\") and action.pressed then\n        local restart = gui.get_node(\"restart\")\n        local drop = gui.get_node(\"drop\")\n\n        if gui.pick_node(restart, action.x, action.y) then\n            -- Show the restart dialog box.\n            msg.post(\"/restart#gui\", \"show\")\n            msg.post(\"#\", \"hide\")\n        elseif gui.pick_node(drop, action.x, action.y) then\n            msg.post(\"/board#script\", \"drop\")\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Sliding Remaining Blocks Down in Lua Game Board\nDESCRIPTION: This function applies shift-down logic to all blocks on the game board. It iterates through each column, moving blocks down to fill empty spaces left by removed blocks. It also updates the visual position of moved blocks with an animation.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\n--\n-- Apply shift-down logic to all blocks.\n--\nlocal function slide_board(self)\n    -- Slide all remaining blocks down into blank spots.\n    -- Going column by column makes this easy.\n    local dy = 0\n    local pos = vmath.vector3()\n    for x = 0,boardwidth - 1 do\n        dy = 0\n        for y = 0,boardheight - 1 do\n            if self.board[x][y] ~= nil then\n                if dy > 0 then\n                    -- Move down dy steps\n                    self.board[x][y - dy] = self.board[x][y]\n                    self.board[x][y] = nil\n                    -- Calc new position\n                    self.board[x][y - dy].y = self.board[x][y - dy].y - dy\n                    go.animate(self.board[x][y-dy].id, \"position.y\", go.PLAYBACK_ONCE_FORWARD, bottom_edge + blocksize / 2 + blocksize * (y - dy), go.EASING_OUTBOUNCE, 0.3)\n                    -- Calc new z\n                    go.set(self.board[x][y-dy].id, \"position.z\", x * -0.1 + (y-dy) * 0.01)\n                end\n            else\n                dy = dy + 1\n            end\n        end\n    end\n    -- blocklist needs updating\n    build_blocklist(self)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with State Updates in Lua\nDESCRIPTION: This example shows how to create a counter component using the use_state hook in Defold's editor UI. It demonstrates state initialization, updating with a function, and creating buttons to increment the counter.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts-ui.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function increment_by(n, by)\n    return n + by\nend\n\nlocal counter = editor.ui.component(function(props)\n    local count, set_count = editor.ui.use_state(0)\n    \n    return editor.ui.horizontal({\n        spacing = editor.ui.SPACING.SMALL,\n        children = {\n            editor.ui.label({\n                text = tostring(count),\n                alignment = editor.ui.ALIGNMENT.LEFT,\n                grow = true\n            }),\n            editor.ui.text_button({\n                text = \"+1\",\n                on_pressed = function() set_count(increment_by, 1) end\n            }),\n            editor.ui.text_button({\n                text = \"+5\",\n                on_pressed = function() set_count(increment_by, 5) end\n            })\n        }\n    })\nend)\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Gamepad Input in Defold\nDESCRIPTION: This code demonstrates how to access raw, unfiltered gamepad input in Defold. It prints the raw button, axis, and hat input data for any connected gamepad using the 'Raw' binding.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"raw\") then\n        pprint(action.gamepad_buttons)\n        pprint(action.gamepad_axis)\n        pprint(action.gamepad_hats)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning Objects with Parent Reference in Lua\nDESCRIPTION: This example shows how to spawn an object and set its parent to the URL of the spawning script component, allowing the spawned object to communicate back to its parent.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- spawner.script\n-- Spawn a drone and set its parent to the url of this script component\nself.spawned_drone = factory.create(\"#dronefactory\", drone_position, nil, { parent = msg.url() })\n\n...\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"drone_dead\") then\n        self.spawned_drone = nil\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Save Game Function in Lua\nDESCRIPTION: This function demonstrates how to implement a cross-platform save game system, accommodating both console and non-console platforms. It uses platform-specific APIs for consoles and Defold's built-in functions for other platforms.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/porting-guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function save_game(data, user_id, cb)\n\tif console then\n\t\tlocal filename = \"savegame\"\n\t\tconsoleapi.save(user_id, filename, data, cb)\n\telse\n\t\tlocal filename = sys.get_save_file(\"mygame\", \"savegame\" .. user_id)\n\t\tlocal success = sys.save(filename, data)\n\t\tcb(success)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Lua Module for Hot Reloading\nDESCRIPTION: This snippet shows a simple Lua module definition. It's used to explain issues with hot reloading modules in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\n-- module.lua\nlocal M = {} -- creates a new table in the local scope\nM.value = 4711\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Scheduling Local Push Notifications in Lua\nDESCRIPTION: Example code for scheduling a local push notification. It demonstrates setting a notification to appear after 3 seconds with a title, message, payload data, and action text.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extension-push.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- 3秒后推送本地通知\nlocal payload = '{\"data\" : {\"field\" : \"Some value\", \"field2\" : \"Other value\"}}'\nid, err = push.schedule(3, \"A notification!\", \"Hello there\", payload, { action = \"get going\" })\n```\n\n----------------------------------------\n\nTITLE: Resource Properties Definition and Usage in Lua\nDESCRIPTION: Shows how to define and use resource properties for various asset types like atlases, fonts, materials, textures, and tile sources.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script-properties.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\ngo.property(\"my_atlas\", resource.atlas(\"/atlas.atlas\"))\ngo.property(\"my_font\", resource.font(\"/font.font\"))\ngo.property(\"my_material\", resource.material(\"/material.material\"))\ngo.property(\"my_texture\", resource.texture(\"/texture.png\"))\ngo.property(\"my_tile_source\", resource.tile_source(\"/tilesource.tilesource\"))\n```\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n  go.set(\"#sprite\", \"image\", self.my_atlas)\n  go.set(\"#label\", \"font\", self.my_font)\n  go.set(\"#sprite\", \"material\", self.my_material)\n  go.set(\"#model\", \"texture0\", self.my_texture)\n  go.set(\"#tilemap\", \"tile_source\", self.my_tile_source)\nend\n```\n\n----------------------------------------\n\nTITLE: Script Using a Global Scope Module\nDESCRIPTION: A script that requires a globally scoped module and uses its values. When the module is hot reloaded with changes, the new values will be reflected in this script's execution.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/hot-reload.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- user.script\nrequire \"my_module\"\n\nfunction update(self, dt)\n    print(my_module.val) -- hot reload \"my_module.lua\" and the new value will print\nend\n```\n\n----------------------------------------\n\nTITLE: Setting and Overriding Config Values at Engine Startup with Command Line - Bash\nDESCRIPTION: Demonstrates how to provide config values to the Defold engine using command-line flags during application startup. You can specify the main collection for bootstrapping or set custom values that override those in game.project. Each overridden value is passed as a --config argument. Required dependency: Defold engine CLI. Inputs are config key-value pairs, outputs are overridden in-engine config parameters. Limitations include syntax requirements and correct usage of flags.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/project-settings.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Specify a bootstrap collection\\n$ dmengine --config=bootstrap.main_collection=/my.collectionc\\n\\n# Set two custom config values\\n$ dmengine --config=test.my_value=4711 --config=test2.my_value2=foobar\n```\n\n----------------------------------------\n\nTITLE: Attempting to Prevent Self-Collision in Input Handling (Lua)\nDESCRIPTION: This snippet shows a modified conditional logic within the 'on_input' function, attempting to prevent the snake from immediately reversing direction into itself. It adds checks (e.g., 'self.dir.y ~= -1' for the 'up' action) to the 'if' clauses. However, this approach is noted in the surrounding text as insufficient to handle rapid sequential key presses.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nif action_id == hash(\"up\") and self.dir.y ~= -1 and action.pressed then\n    ...\nelseif action_id == hash(\"down\") and self.dir.y ~= 1 and action.pressed then\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Tracked Spawned Game Objects in Lua\nDESCRIPTION: This code shows two methods to delete all tracked spawned game objects: iterating through the table or using go.delete() with the entire table.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- spawner.script\n-- Delete all spawned coins.\nfor _, coin_id in ipairs(self.spawned_coins) do\n    go.delete(coin_id)\nend\n\n-- or alternatively\ngo.delete(self.spawned_coins)\n```\n\n----------------------------------------\n\nTITLE: Setting Physics World Listener in Defold\nDESCRIPTION: Example of setting up a physics world listener within a collection proxy to handle physics events for a specific physics world.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-events.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- Assuming this script is attached to a game object within the collection loaded by the proxy\n    -- Set the physics world listener for the physics world of this collection proxy\n    physics.set_listener(physics_world_listener)\nend\n```\n\n----------------------------------------\n\nTITLE: Playing 3D Model Animation in Lua\nDESCRIPTION: This snippet demonstrates how to play a 3D model animation using the model.play_anim() function. It plays the 'wiggle' animation on the '#model' in a loop ping-pong mode.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/model-animation.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- 在 #model 上来回播放 \"wiggle\" 动画\n    model.play_anim(\"#model\", \"wiggle\", go.PLAYBACK_LOOP_PINGPONG)\nend\n```\n\n----------------------------------------\n\nTITLE: Animating Material Constants with go.animate in Defold Lua\nDESCRIPTION: Demonstrates animating a material constant over time in Defold using Lua's go.animate function. Requires the Defold engine, a valid component path (\"{{ include.component }}\"), and material variable name (\"{{ include.variable }}\"). The property transitions smoothly to the vector (1,0,0,1) with linear easing over 2 seconds, looping in a ping-pong fashion. Outputs an ongoing animation until manually stopped or the object is deleted.\nSOURCE: https://github.com/defold/doc/blob/master/docs/ru/shared/material-constants.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ngo.animate(\"#{{ include.component }}\", \"{{ include.variable }}\", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1,0,0,1), go.EASING_LINEAR, 2)\n```\n\n----------------------------------------\n\nTITLE: Block Drop Mechanics Implementation in Lua\nDESCRIPTION: Functions for implementing the drop mechanic, including finding valid drop spots and animating new blocks falling onto the board.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal function dropspots(self)\n    local spots = {}\n    for x = 0, boardwidth - 1 do\n        for y = 0, boardheight - 1 do\n            if self.board[x][y] == nil then\n                table.insert(spots, { x = x, y = y })\n                break\n            end\n        end\n    end\n    for c = 1, #spots - dropamount do\n        table.remove(spots, math.random(#spots))\n    end\n    return spots\nend\n\nlocal function drop(self, spots)\n    for i, s in pairs(spots) do\n        local pos = vmath.vector3()\n        pos.x = edge + blocksize / 2 + blocksize * s.x\n        pos.y = 1000\n        c = colors[math.random(#colors)]\n        local id = factory.create(\"#blockfactory\", pos, null, { color = c })\n        go.animate(id, \"position.y\", go.PLAYBACK_ONCE_FORWARD, bottom_edge + blocksize / 2 + blocksize * s.y, go.EASING_OUTBOUNCE, 0.5)\n        go.set(id, \"position.z\", s.x * -0.1 + s.y * 0.01)\n        self.board[s.x][s.y] = { id = id, color = c,  x = s.x, y = s.y }\n    end\n    build_blocklist(self)\nend\n```\n\n----------------------------------------\n\nTITLE: Animating Shader Constants in Defold Script - Lua\nDESCRIPTION: This Lua script, used in Defold, animates the x component of the 'animation_time' material constant by means of the built-in 'go.animate' function. It loops the value from 0.0 to 1.0 over 4 seconds with linear easing, enabling the corresponding shader code to produce smoothly looping UV scrolling. This script depends on the object tree containing a model assigned to \"/scroll#plane\" with the correct material setup. Only the x value is animated, matching the shader's expectation, and suitable for repeated scrolling effects. Limitation: the animation is not time-delta-driven, so custom timing or pausing/stepping would require modifications.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/texture-scrolling.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- animate_shader.script\\nlocal animate = 1.0\\n-- local float will be used to set animation_time constant in scroll material , only x constant value is used in the shader \\n-- so there is no need to create a vector 4\\n\\nfunction init(self)\\n\\tgo.animate(\"/scroll#plane\", \"animation_time.x\", go.PLAYBACK_LOOP_FORWARD, animate, go.EASING_LINEAR, 4.0)\\nend\n```\n\n----------------------------------------\n\nTITLE: Lua Variable Types and Conditions\nDESCRIPTION: Shows usage of nil and boolean types in Lua, including conditional statements and variable checking.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nprint(my_var) -- will print 'nil' since 'my_var' is not yet assigned a value\n```\n\nLANGUAGE: lua\nCODE:\n```\nflag = true\nif flag then\n    print(\"flag is true\")\nelse\n    print(\"flag is false\")\nend\n\nif my_var then\n    print(\"my_var is not nil nor false!\")\nend\n\nif not my_var then\n    print(\"my_var is either nil or false!\")\nend\n```\n\n----------------------------------------\n\nTITLE: Finding Tile Coordinates in Lua\nDESCRIPTION: This Lua function `find(t, tile)` searches the board state table `t` for a specific `tile` value. It returns the corresponding (x, y) coordinates within the 4x4 grid, adjusting the y-coordinate based on the tilemap's bottom-left origin (row 1 is at the bottom).\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Find the x and y position of a given tile\nlocal function find(t, tile)\n    for i=1, #t do\n        if t[i] == tile then\n            local y = 5 - math.ceil(i/4) -- <1>\n            local x = i - (math.ceil(i/4) - 1) * 4\n            return x,y\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Addressing Specific Components of Spawned Game Objects in Lua\nDESCRIPTION: This function shows how to create a game object and then access specific components of it using msg.url() to construct URLs.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function create_guard(unarmed)\n    local id = factory.create(\"#guardfactory\")\n    if unarmed then\n        local weapon_sprite_url = msg.url(nil, id, \"weapon\")\n        msg.post(weapon_sprite_url, \"disable\")\n\n        local body_sprite_url = msg.url(nil, id, \"body\")\n        sprite.play_flipbook(body_sprite_url, hash(\"red_guard\"))\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Snake Alive State Flag in Defold (Lua)\nDESCRIPTION: This snippet shows a modification to the 'init' function, adding a boolean flag 'self.alive' and initializing it to 'true'. This flag is used to track whether the snake is currently alive or if a game-over condition has been met.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\")\n\n    self.segments = {\n        {x = 7, y = 24},\n        {x = 8, y = 24},\n        {x = 9, y = 24},\n        {x = 10, y = 24} }\n    self.dir = {x = 1, y = 0}\n    self.dirqueue = {}\n    self.speed = 7.0\n    self.alive = true -- <1>\n    self.t = 0\n\n    math.randomseed(socket.gettime())\n    put_food(self)\nend\n```\n\n----------------------------------------\n\nTITLE: Animating Saucer Game Object with Horizontal and Sine-Wave Movement in Defold (Lua)\nDESCRIPTION: Moves a saucer sprite leftward at a constant speed while animating its y-position in a sine wave for a smooth up-and-down motion. The script initializes by storing the starting y-position and setting a counter for sine calculation. The update() function decrements the x-position by 2 units per frame, computes a new y-value using math.sin based on the counter, and deletes the object if it moves off-screen. Intended for use on a game object with a sprite and requires Defold's go API and Lua's math library.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/parallax.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- file: spaceship.script\\n\\nfunction init(self)\\n    -- remeber initial y position such that we\\n    -- can move the spaceship without changing the script\\n    self.start_y = go.get_position().y\\n    -- set counter to zero. use for sin-movement below\\n    self.counter = 0\\nend\\n\\nfunction update(self, dt)\\n    -- decrease x-position by 2 units per frame\\n    local p = go.get_position()\\n    p.x = p.x - 2\\n\\n    -- move the y position around initial y\\n    p.y = self.start_y + 8 * math.sin(self.counter * 0.08)\\n\\n    -- update position\\n    go.set_position(p)\\n\\n    -- remove shaceship when outside of screen\\n    if p.x < - 32 then\\n        go.delete()\\n    end\\n\\n    -- increase the counter\\n    self.counter = self.counter + 1\\nend\n```\n\n----------------------------------------\n\nTITLE: Remote Debugging Connection in Lua\nDESCRIPTION: Code to initialize a remote debugging session by connecting to ZeroBrane's debug server using a specific IP address.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/zerobrane.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ndbg = require \"builtins.scripts.mobdebug\"\ndbg.start(\"192.168.5.101\")\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Zoom Projection in Defold Render Script\nDESCRIPTION: Code to implement zoomed projection for retro-style games, scales the game view by a factor of 4 while maintaining pixel-perfect rendering.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/adapting-graphics-to-screen-size.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nmsg.post(\"@render:\", \"use_fixed_projection\", { zoom = 4 })\n```\n\n----------------------------------------\n\nTITLE: Configuring Texture Filtering in Defold Project Settings\nDESCRIPTION: Configuration example showing how to set texture filtering options in the game.project file. Sets both minifying and magnifying filters to 'nearest' for pixel-perfect rendering.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/texture-filtering.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[graphics]\ndefault_texture_min_filter = nearest\ndefault_texture_mag_filter = nearest\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Properties in Lua\nDESCRIPTION: This snippet demonstrates how to use various functions and properties to control sprites at runtime in Defold. It includes examples of playing animations, flipping sprites, and setting sprite properties.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/sprite.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nsprite.play_flipbook()\nsprite.set_hflip()\nsprite.set_vflip()\n\ngo.get()\ngo.set()\n\n-- Sprite properties\ncursor = go.get(\"#sprite\", \"cursor\")\ngo.set(\"#sprite\", \"image\", hash(\"new_atlas\"))\ngo.set(\"#sprite\", \"material\", hash(\"new_material\"))\ngo.set(\"#sprite\", \"playback_rate\", 2)\ngo.set(\"#sprite\", \"scale\", vmath.vector3(2, 2, 1))\ngo.set(\"#sprite\", \"size\", vmath.vector3(100, 100, 0))\ngo.set(\"#sprite\", \"tint\", vmath.vector4(1, 0, 0, 1))\n```\n\n----------------------------------------\n\nTITLE: Platform Coin Spawning System\nDESCRIPTION: Enhanced platform script that handles coin spawning and cleanup, including parent-child relationships for movement.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n-- platform.script\nfunction init(self)\n    self.speed = 540     -- Default speed in pixels/s\n    self.coins = {}\nend\n\nfunction final(self)\n    for i,p in ipairs(self.coins) do\n        go.delete(p)\n    end\nend\n\nfunction update(self, dt)\n    local pos = go.get_position()\n    if pos.x < -500 then\n        msg.post(\"/level/controller#controller\", \"delete_spawn\", { id = go.get_id() })\n    end\n    pos.x = pos.x - self.speed * dt\n    go.set_position(pos)\nend\n\nfunction create_coins(self, params)\n    local spacing = 56\n    local pos = go.get_position()\n    local x = pos.x - params.coins * (spacing*0.5) - 24\n    for i = 1, params.coins do\n        local coin = factory.create(\"#coin_factory\", vmath.vector3(x + i * spacing , pos.y + 64, 1))\n        msg.post(coin, \"set_parent\", { parent_id = go.get_id() })\n        msg.post(coin, \"start_animation\", { delay = i/10 })\n        table.insert(self.coins, coin)\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"set_speed\") then\n        self.speed = message.speed\n    elseif message_id == hash(\"create_coins\") then\n        create_coins(self, message)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Vertex Transformation for Fullscreen Quad in Defold (GLSL)\nDESCRIPTION: This GLSL vertex shader transforms model-space positions for a fullscreen quad into clip space using a supplied view-projection matrix. It passes interpolated texture coordinates to the fragment shader. Dependencies include the Defold engine's material system and the declaration of a uniform 'view_proj' representing the camera matrix. Inputs: vertex position (vec4), texture coordinate (vec2). Output: transformed position, forwarded texture coord. No special parameters; must be set as the vertex program of a model component's material.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\n// grade.vp\nuniform mediump mat4 view_proj;\n\n// positions are in world space\nattribute mediump vec4 position;\nattribute mediump vec2 texcoord0;\n\nvarying mediump vec2 var_texcoord0;\n\nvoid main()\n{\n  gl_Position = view_proj * vec4(position.xyz, 1.0);\n  var_texcoord0 = texcoord0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using a Required Lua Module in Defold\nDESCRIPTION: This snippet demonstrates how to require and use a Lua module in a Defold script. It uses the previously defined direction_animation function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nrequire \"main.anim\"\n\nfunction update(self, dt)\n    -- update position, set direction etc\n    ...\n\n    -- set animation\n    local anim = direction_animation(self.dir, \"player\")\n    if anim ~= self.current_anim then\n        sprite.play_flipbook(\"#sprite\", anim)\n        self.current_anim = anim\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Stopping Sound Playback in Defold with Lua\nDESCRIPTION: This code shows how to stop a playing sound using the sound.stop() function in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/sound.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nsound.stop(\"go#sound\")\n```\n\n----------------------------------------\n\nTITLE: Handling Script Reloads and Simulating Level Completion in Defold - Lua\nDESCRIPTION: This function, intended for Defold GUI scripts, manages behavior when the script is reloaded by invoking a setup function and simulating a completed level. It uses msg.post to send a 'level_completed' message to the GUI proxy, passing the player's score and star thresholds. Dependencies include the Defold 'msg' and 'gui' APIs, and the presence of a 'setup' function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/level-complete.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- this function is called when the script is reloaded\n-- by setting up the scene and simulating level complete, we get a really fast workflow for tweaking\nfunction on_reload(self)\n    -- make sure any setup changes are taken into account\n    setup(self)\n    -- simulate that the level has been completed\n    msg.post(\"#gui\", \"level_completed\", {score = 102000, star_levels = {40000, 70000, 100000}})\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Instance Attributes in GLSL Vertex Shader\nDESCRIPTION: This GLSL code snippet demonstrates how to define per-vertex and per-instance attributes in a vertex shader for use with instancing in Defold. It includes position, texture coordinates, and normal as per-vertex attributes, and world matrix, normal matrix, and instance color as per-instance attributes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/material.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n// Per vertex attributes\nattribute highp vec4 position;\nattribute mediump vec2 texcoord0;\nattribute mediump vec3 normal;\n\n// Per instance attributes\nattribute mediump mat4 mtx_world;\nattribute mediump mat4 mtx_normal;\nattribute mediump vec4 instance_color;\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Nodes in Lua\nDESCRIPTION: Demonstrates how to access and interact with template-based GUI nodes at runtime using the node's template ID prefix. The example shows checking for node interaction using the pick_node function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-template.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif gui.pick_node(gui.get_node(\"button_1/button\"), x, y) then\n    -- Do something...\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Axis-Aligned Bounding Box for Mesh Culling in Lua\nDESCRIPTION: This snippet shows how to set the axis-aligned bounding box (AABB) as metadata on a buffer for mesh culling. It uses 6 floats to represent the minimum and maximum points of the AABB.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/mesh.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nbuffer.set_metadata(buf, hash(\"AABB\"), { 0, 0, 0, 1, 1, 1 }, buffer.VALUE_TYPE_FLOAT32)\n```\n\n----------------------------------------\n\nTITLE: Spawning a Collection with Collectionfactory in Lua\nDESCRIPTION: Creates a new instance of a collection using the collection factory component. Returns a table mapping collection-local ids to runtime ids of spawned game objects.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-factory.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal bean_ids = collectionfactory.create(\"#bean_factory\")\n```\n\n----------------------------------------\n\nTITLE: Drawing Scene to Custom Render Target in Lua\nDESCRIPTION: This snippet modifies the `update` function of a Defold render script to redirect drawing operations to a previously created custom render target (`self.target`). It first activates the custom target using `render.set_render_target()`. Then, standard rendering operations like clearing buffers, setting the viewport (matching the render target's dimensions), setting the view matrix, and drawing various predicates (represented by '...') are performed. Finally, it switches back to the default frame buffer using `render.set_render_target(render.RENDER_TARGET_DEFAULT)`, ensuring the entire scene is captured in the off-screen target before potential post-processing steps. Requires the `render` module and assumes `self.target`, `self.clear_color`, and `self.view` are initialized.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua\nfunction update(self)\n  render.set_render_target(self.target) -- <1>\n\n  render.set_depth_mask(true)\n  render.set_stencil_mask(0xff)\n  render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})\n\n  render.set_viewport(0, 0, render.get_width(), render.get_height()) -- <2>\n  render.set_view(self.view)\n  ...\n\n  render.set_render_target(render.RENDER_TARGET_DEFAULT) -- <3>\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Merging HTML Templates for Web Application Configuration\nDESCRIPTION: This example demonstrates how to merge a base HTML template with an extension template for web application configuration. It shows how to use merge attributes to control the merging behavior of different script sections.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-manifest-merge-tool.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<body>\n <script id='engine-loader' type='text/javascript' src='dmloader.js'></script>\n <script id='engine-setup' type='text/javascript'>\n function load_engine() {\n     var engineJS = document.createElement('script');\n     engineJS.type = 'text/javascript';\n     engineJS.src = '{{exe-name}}_wasm.js';\n     document.head.appendChild(engineJS);\n }\n </script>\n <script id='engine-start' type='text/javascript'>\n     load_engine();\n </script>\n</body>\n</html>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<body>\n <script id='engine-loader' type='text/javascript' src='mydmloader.js'></script>\n <script id='engine-start' type='text/javascript' merge='keep'>\n     my_load_engine();\n </script>\n</body>\n</html>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html>\n<head></head>\n<body>\n    <script id='engine-loader' type='text/javascript' src='mydmloader.js'></script>\n    <script id='engine-setup' type='text/javascript'>\n        function load_engine() {\n            var engineJSdocument.createElement('script');\n            engineJS.type = 'text/javascript';\n            engineJS.src = '{{exe-name}}_wasm.js';\n            document.head.appendChild(engineJS);\n        }\n    </script>\n    <script id='engine-start' type='text/javascript' merge='keep'>\n        my_load_engine(\n    </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining a Buffer Resource in JSON for Defold\nDESCRIPTION: This snippet demonstrates the JSON structure of a Buffer resource in Defold. It defines a stream of 3D positions using 32-bit floating point numbers. The buffer contains a single stream named 'position' with a count of 3 (representing x, y, z coordinates) and an array of float values.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/buffer.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"position\",\n    \"type\": \"float32\",\n    \"count\": 3,\n    \"data\": [\n      -1.0,\n      -1.0,\n      -1.0,\n      -1.0,\n      -1.0,\n      1.0,\n      ...\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Components in Defold\nDESCRIPTION: Demonstrates how to disable various components using the 'disable' message in Lua. Examples include disabling components on the same game object, on a specific game object, and disabling all components.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/components.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- disable the component with id 'weapon' on the same game object as this script\nmsg.post(\"#weapon\", \"disable\")\n\n-- disable the component with id 'shield' on the 'enemy' game object\nmsg.post(\"enemy#shield\", \"disable\")\n\n-- disable all components on the current game object\nmsg.post(\".\", \"disable\")\n\n-- disable all components on the 'enemy' game object\nmsg.post(\"enemy\", \"disable\")\n```\n\n----------------------------------------\n\nTITLE: Installing Push Notification Extension Dependencies in game.project\nDESCRIPTION: Code snippet showing the extension URLs needed to implement push notifications in Defold. It includes URLs for both the push notification extension and Firebase core extension.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extension-push.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nhttps://github.com/defold/extension-push/archive/master.zip\n```\n\n----------------------------------------\n\nTITLE: Updating Velocity Before Drag Calculation in Defold (Lua)\nDESCRIPTION: Shows the section within the `update` function where the car's velocity is updated based on its current acceleration and the time delta (`dt`), immediately before the drag calculation is applied. This demonstrates basic Euler integration for velocity calculation.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/car.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction update(self, dt)\n\t...\n  -- Calculate new velocity based on current acceleration\n\tself.velocity = self.velocity + self.acceleration * dt\n\t...\nend\n```\n\n----------------------------------------\n\nTITLE: Resizing Collision Shapes in Defold\nDESCRIPTION: This code demonstrates how to resize different types of collision shapes (capsule, sphere, box) at runtime using the physics.set_shape() function. It sets new dimensions for each shape type.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-shapes.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- set capsule shape data\nlocal capsule_data = {\n  type = physics.SHAPE_TYPE_CAPSULE,\n  diameter = 10,\n  height = 20,\n}\nphysics.set_shape(\"#collisionobject\", \"my_capsule_shape\", capsule_data)\n\n-- set sphere shape data\nlocal sphere_data = {\n  type = physics.SHAPE_TYPE_SPHERE,\n  diameter = 10,\n}\nphysics.set_shape(\"#collisionobject\", \"my_sphere_shape\", sphere_data)\n\n-- set box shape data\nlocal box_data = {\n  type = physics.SHAPE_TYPE_BOX,\n  dimensions = vmath.vector3(10, 10, 5),\n}\nphysics.set_shape(\"#collisionobject\", \"my_box_shape\", box_data)\n```\n\n----------------------------------------\n\nTITLE: Animating Main Menu Elements with Defold GUI in Lua\nDESCRIPTION: This Lua code defines an animation timeline for Defold GUI nodes representing main menu elements (background and menu items). It implements five animation stages, chaining them with callbacks: fading in while scaling up, then applying a series of scale bounces, ending with a fade effect for the background. Dependencies include Defold's GUI API and vmath for vector operations. Key parameters control node selection, scale factors, color alpha values, and animation start delays. The code expects GUI nodes named 'background', 'new_game', 'new_game_shadow', etc., to be defined in a linked 'menu.gui'. Inputs are GUI node references; outputs are smooth visual transitions. It assumes proper setup of node names and resources, and hardcodes timing and scale parameters for specific effects.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/main-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- file: menu.gui_script\n\n-- the functions animX represents the animation time-line\n-- first is anim1 executed, when finished anim2 is executed, etc\n-- anim1 to anim4 creates a bouncing rubber effect.\n-- anim5 fades down alpha and is only used for the background\n\nlocal function anim5(self, node)\n\tif gui.get_node(\"background\") == node then\n\t\t-- special case for background. animate alpha to 60%\n\t\tlocal to_color = gui.get_color(node)\n\t\tto_color.w = 0.6\n\t\tgui.animate(node, gui.PROP_COLOR, to_color, gui.EASING_OUTCUBIC, 2.4, 0.1)\n\tend\nend\n\nlocal function anim4(self, node)\n\t-- animate scale to 100%\n\tlocal s = 1\n\tgui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUTCUBIC, 0.24, 0, anim5)\nend\n\nlocal function anim3(self, node)\n\t-- animate scale to 106%\n\tlocal s = 1.06\n\tgui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUTCUBIC, 0.24, 0, anim4)\nend\n\nlocal function anim2(self, node)\n\t-- animate scale to 98%\n\tlocal s = 0.98\n\tgui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUTCUBIC, 0.24, 0, anim3)\nend\n\nlocal function anim1(node, d)\n\t-- set scale to 70%\n\tlocal start_scale = 0.7\n\tgui.set_scale(node, vmath.vector4(start_scale, start_scale, start_scale, 0))\n\n\t-- get current color and set alpha to 0 to fade up\n\tlocal from_color = gui.get_color(node)\n\tlocal to_color = gui.get_color(node)\n\tfrom_color.w = 0\n\tgui.set_color(node, from_color)\n\n\t-- animate alpha value from 0 to 1\n\tgui.animate(node, gui.PROP_COLOR, to_color, gui.EASING_INOUTCUBIC, 0.4, d)\n\n\t-- animate scale from %70 to 110%\n\tlocal s = 1.1\n\tgui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUTCUBIC, 0.4, d, anim2)\nend\n\nfunction init(self)\n\t-- start animations for all nodes\n\t-- background, button-boxes and text are animated equally\n\t-- d is the animation start delay\n\tlocal d = 0.4\n\tanim1(gui.get_node(\"new_game\"), d)\n\tanim1(gui.get_node(\"new_game_shadow\"), d)\n\tanim1(gui.get_node(\"new_game_button\"), d)\n\n\td = 0.3\n\tanim1(gui.get_node(\"quit\"), d)\n\tanim1(gui.get_node(\"quit_shadow\"), d)\n\tanim1(gui.get_node(\"quit_button\"), d)\n\n\td = 0.1\n\tanim1(gui.get_node(\"background\"), d)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Accelerometer Input in Defold\nDESCRIPTION: This snippet shows how to capture and respond to accelerometer data in a Defold script. The on_input function checks if accelerometer values are available and allows for custom reactions based on device movement.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action.acc_x and action.acc_y and action.acc_z then\n        -- react to accelerometer data\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing the on_reload() Function\nDESCRIPTION: An example of the on_reload() function which is called when a script is hot reloaded. This can be used to inspect data, change state, or send messages to other game objects after a reload occurs.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/hot-reload.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_reload(self)\n    print(self.velocity)\n\n    msg.post(\"/level#controller\", \"setup\")\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Window Resize Events in Defold Render Script\nDESCRIPTION: This code shows how to respond to window resize events in a Defold render script. This is useful for detecting orientation changes and adapting the rendering accordingly.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-layouts.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message)\n  if message_id == hash(\"window_resized\") then\n    -- The window was resized. message.width and message.height contain the\n    -- new dimensions of the window.\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Input for Score Addition in Defold Lua\nDESCRIPTION: This Lua script (`main.script`) acquires input focus and listens for touch/click events within a Defold game object. Upon detecting a press (`action.pressed` for the \"touch\" action), it retrieves the input coordinates (`action.x`, `action.y`) and sends an `add_score` message to the HUD component identified by the URL \"main:/hud#hud\". The message includes the input position and a fixed score amount (1500). It requires the Defold engine API (`msg.*`, `vmath.*`, `hash`) and a corresponding GUI component running `hud.gui_script` at the specified address to receive the message.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/hud.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- On click/touch get touch position and send it via message to hud gui script as well as the scored point amount.\n\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\")\nend\n\nfunction on_input(self, action_id, action)\n    local pos = vmath.vector3(action.x, action.y, 0) -- use input action.x & action.y as x & y positions of touch\n    if action_id == hash(\"touch\") then\n        if action.pressed then\n            msg.post(\"main:/hud#hud\", \"add_score\" , { position = pos, amount = 1500})\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Linked Blocks in Lua Game Board\nDESCRIPTION: This function removes the currently selected chain of blocks from the game board. It marks the positions as 'removing' instead of nil to distinguish between newly removed blocks and previously removed ones for magic block logic.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\n-- Remove the currently selected block-chain\n--\nlocal function remove_chain(self)\n    -- Delete all chained blocks\n    for i, c in ipairs(self.chain) do\n        self.board[c.x][c.y] = hash(\"removing\")\n        go.delete(c.id)\n    end\n    self.chain = {}\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Score Update in GUI\nDESCRIPTION: Shows how to handle the score update message in the GUI script and update the display.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n  if message_id == hash(\"update_score\") then\n    local score_node = gui.get_node(\"score\")\n    gui.set_text(score_node, \"SCORE: \" .. message.score)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Properties when Spawning Collections in Lua\nDESCRIPTION: Demonstrates passing property parameters to game objects when spawning a collection by constructing a table where keys are object ids and values are property tables.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-factory.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal props = {}\nprops[hash(\"/bean\")] = { shield = false }\nlocal ids = collectionfactory.create(\"#bean_factory\", nil, nil, props)\n```\n\n----------------------------------------\n\nTITLE: Updating Shader Uniform Over Time with Lua Script in Defold\nDESCRIPTION: This Lua script manages the time value for a shader animation in Defold. The 'init' function initializes a time counter 't'. The 'update' function, called each frame, increments 't' by the delta time ('dt') and uses 'go.set' to pass the updated time value as the x-component of a vector4 to the 'time' uniform of the model component ('#model'). This script needs to be attached to the game object containing the model component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/shadertoy.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\\n    self.t = 0 -- <1>\\nend\\n\\nfunction update(self, dt)\\n    self.t = self.t + dt -- <2>\\n    go.set(\"#model\", \"time\", vmath.vector4(self.t, 0, 0, 0)) -- <3>\\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Gradient in Font Shader\nDESCRIPTION: A code snippet demonstrating how to implement a horizontal gradient effect in a font fragment shader using the texture_size_recip variable that provides cache information to shaders in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/font.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nfloat horizontal_gradient = fract(var_texcoord0.y / texture_size_recip.w);\n```\n\n----------------------------------------\n\nTITLE: File Server Route Implementation\nDESCRIPTION: Demonstrates creating a file server endpoint that serves files from the project root\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nhttp.server.route(\"/my-extension/files/{*file}\", function(request)\n  local attrs = editor.external_file_attributes(request.file)\n  if attrs.is_file then\n    return http.server.external_file_response(request.file)\n  else\n    return 404\n  end\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Level Reset in Controller Script\nDESCRIPTION: Controller script that manages platform spawning and level reset functionality. Tracks spawned platforms and handles their deletion on reset.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- controller.script\ngo.property(\"speed\", 360)\n\nlocal grid = 460\nlocal platform_heights = { 100, 200, 350 }\n\nfunction init(self)\n    msg.post(\"ground/controller#controller\", \"set_speed\", { speed = self.speed })\n    self.gridw = 0\n    self.spawns = {}\nend\n\nfunction update(self, dt)\n    self.gridw = self.gridw + self.speed * dt\n\n    if self.gridw >= grid then\n        self.gridw = 0\n\n        -- Maybe spawn a platform at random height\n        if math.random() > 0.2 then\n            local h = platform_heights[math.random(#platform_heights)]\n            local f = \"#platform_factory\"\n            if math.random() > 0.5 then\n                f = \"#platform_long_factory\"\n            end\n\n            local p = factory.create(f, vmath.vector3(1600, h, 0), nil, {}, 0.6)\n            msg.post(p, \"set_speed\", { speed = self.speed })\n            table.insert(self.spawns, p)\n        end\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"reset\") then\n        msg.post(\"hero#hero\", \"reset\")\n        for i,p in ipairs(self.spawns) do\n            go.delete(p)\n        end\n        self.spawns = {}\n    elseif message_id == hash(\"delete_spawn\") then\n        for i,p in ipairs(self.spawns) do\n            if p == message.id then\n                table.remove(self.spawns, i)\n                go.delete(p)\n            end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Main Collection Bootstrap Setting Example\nDESCRIPTION: Example showing how to set the main collection in the bootstrap category of the game.project file, with paths requiring a 'c' suffix to reference compiled files.\nSOURCE: https://github.com/defold/doc/blob/master/docs/ru/manuals/project-settings.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[bootstrap]\nmain_collection = /main/main.collectionc\n```\n\n----------------------------------------\n\nTITLE: Script Properties for Collection Game Objects in Lua\nDESCRIPTION: Example script for a game object in a collection that defines a shield property which controls whether a child object is kept or deleted when spawned.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-factory.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- bean/controller.script\ngo.property(\"shield\", true)\n\nfunction init(self)\n    if not self.shield then\n        go.delete(\"shield\")\n    end     \nend\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Texture in Lua Script\nDESCRIPTION: This snippet shows how to create a storage texture in a Lua script file, which can be used as backing storage for compute programs. It also demonstrates how to get the texture handle and notify the renderer.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/compute.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    local t_backing = resource.create_texture(\"/my_backing_texture.texturec\", {\n        type   = resource.TEXTURE_TYPE_IMAGE_2D,\n        width  = 128,\n        height = 128,\n        format = resource.TEXTURE_FORMAT_RGBA32F,\n        flags  = resource.TEXTURE_USAGE_FLAG_STORAGE + resource.TEXTURE_USAGE_FLAG_SAMPLE,\n    })\n    local t_backing_handle = resource.get_texture_info(t_backing).handle\n    msg.post(\"@render:\", \"set_backing_texture\", { handle = t_backing_handle })\nend\n```\n\n----------------------------------------\n\nTITLE: Zooming Orthographic Camera in Lua\nDESCRIPTION: Demonstrates how to zoom an orthographic camera by changing its orthographic zoom property.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\ngo.set(\"#camera\", \"orthographic_zoom\", 2)\n```\n\n----------------------------------------\n\nTITLE: Unloading a Collection in Defold\nDESCRIPTION: Shows the sequence of messages for properly unloading a collection: disable, final, and unload. This process disables components, calls script final() functions, and removes the world from memory.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-proxy.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- unload the level\nmsg.post(\"#myproxy\", \"disable\")\nmsg.post(\"#myproxy\", \"final\")\nmsg.post(\"#myproxy\", \"unload\")\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Projection in Defold Render Script\nDESCRIPTION: Shows how to set different viewport projection modes (Stretch, Fixed Fit, Fixed, and Camera) in a Defold render script.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/render.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nmsg.post(\"@render:\", \"use_stretch_projection\", { near = -1, far = 1 })\n\nmsg.post(\"@render:\", \"use_fixed_fit_projection\", { near = -1, far = 1 })\n\nmsg.post(\"@render:\", \"use_fixed_projection\", { near = -1, far = 1, zoom = 2 })\n\nmsg.post(\"@render:\", \"use_camera_projection\")\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Components via URL Strings in Lua\nDESCRIPTION: Shows how to send messages to specific components in game objects using fully qualified URL strings, including socket, path, and fragment components for precise addressing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/addressing.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Send \"hello\" to the manager script and team buddy bean\nmsg.post(\"main:/manager#controller\", \"hello_manager\")\nmsg.post(\"main:/team_2/buddy#controller\", \"hello_buddy\")\n```\n\n----------------------------------------\n\nTITLE: Sending Minimap Position Updates\nDESCRIPTION: Demonstrates sending position updates for minimap tracking from enemy objects.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal pos = go.get_position()\nmsg.post(\"/interface#gui\", \"update_minimap\", { position = pos })\n```\n\n----------------------------------------\n\nTITLE: Checking Puzzle Solvability in Lua\nDESCRIPTION: The `solvable(t)` function determines if a 15-puzzle configuration represented by table `t` is solvable. It uses the `find` function to locate the empty tile (0) and the `inversions` function to count inversions. It returns true if the configuration meets the solvability criteria: (empty tile row is odd AND inversions are even) OR (empty tile row is even AND inversions are odd).\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Is the given table list of 4x4 tiles solvable?\nlocal function solvable(t)\n    local x,y = find(t, 0)\n    if y % 2 == 1 and inversions(t) % 2 == 0 then\n        return true\n    end\n    if y % 2 == 0 and inversions(t) % 2 == 1 then\n        return true\n    end\n    return false    \nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Script Properties in Lua\nDESCRIPTION: Shows different methods of accessing and modifying script properties, including direct access through self and using go.get/set functions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script-properties.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- my_script.script\ngo.property(\"my_property\", 1)\n\nfunction update(self, dt)\n  -- Read and write the property\n  if self.my_property == 1 then\n      self.my_property = 3\n  end\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\n-- another.script\n\n-- increase \"my_property\" in \"myobject#script\" by 1\nlocal val = go.get(\"myobject#my_script\", \"my_property\")\ngo.set(\"myobject#my_script\", \"my_property\", val + 1)\n\n-- animate \"my_property\" in \"myobject#my_script\"\ngo.animate(\"myobject#my_script\", \"my_property\", go.PLAYBACK_LOOP_PINGPONG, 100, go.EASING_LINEAR, 2.0)\n```\n\n----------------------------------------\n\nTITLE: Converting PNG to ICO using ImageMagick\nDESCRIPTION: Command to convert a PNG image to a Windows ICO file with multiple resolution variants using ImageMagick's convert tool. Creates icon sizes from 16x16 to 256x256 pixels.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/windows.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconvert icon_256x256px.png -compress None -define icon:auto-resize=256,128,96,64,48,32,24,16 favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Animating GUI Properties with Defold - Lua\nDESCRIPTION: These lines demonstrate animating GUI node properties in Defold using the gui.animate function. The first line animates the shadow property of the heading node towards a variable 'c' with 'EASING_IN' easing over duration 'dt' using a zero delay. The second line shrinks the heading node into place by animating its scale to (1, 1, 1, 0) using the same easing and a fixed duration. The snippet assumes 'self.heading', 'c', and 'dt' are defined in the script context.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/level-complete.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ngui.animate(self.heading, gui.PROP_SHADOW, c, gui.EASING_IN, dt, 0.0)\n-- shrink it into place\ngui.animate(self.heading, gui.PROP_SCALE, vmath.vector4(1, 1, 1, 0), gui.EASING_IN, 0.2, 0.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Drawing Test Board in Lua\nDESCRIPTION: This snippet demonstrates a Defold script's `init` function. It initializes the `self.board` property with an inverted tile sequence for testing purposes and then calls the `draw` function to display this initial state on the associated tilemap.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- An inverted board, for test\n    self.board = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n    draw(self.board)\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration Settings via Command Line\nDESCRIPTION: Examples of how to override game.project settings when launching the Defold engine from the command line, including setting the bootstrap collection and custom configuration values.\nSOURCE: https://github.com/defold/doc/blob/master/docs/ru/manuals/project-settings.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Указать коллекцию начальной загрузки\n$ dmengine --config=bootstrap.main_collection=/my.collectionc\n\n# Установить два пользовательских конфигурационных значения\n$ dmengine --config=test.my_value=4711 --config=test2.my_value2=1234\n```\n\n----------------------------------------\n\nTITLE: Defining CocoaPods dependencies for iOS in Podfile\nDESCRIPTION: This code snippet demonstrates how to define CocoaPods dependencies for an iOS project in a Podfile. It specifies the minimum iOS version and lists required pods with their versions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-cocoapods.md#2025-04-23_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nplatform :ios '11.0'\n\npod 'FirebaseCore', '10.22.0'\npod 'FirebaseInstallations', '10.22.0'\n```\n\n----------------------------------------\n\nTITLE: Modifying Z-Position in Defold\nDESCRIPTION: Shows how to change a game object's z-position programmatically in Defold using go.get_position() and go.set_position().\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal pos = go.get_position()\npos.z  = 0.5\ngo.set_position(pos)\n```\n\n----------------------------------------\n\nTITLE: Initializing Compute Resources in Lua Script\nDESCRIPTION: This Lua script demonstrates how to set up input and output textures for a compute program. It creates a storage texture for output and notifies the renderer of both input and output textures.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/compute.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\ngo.property(\"texture_in\", resource.texture())\n\nfunction init(self)\n    local t_backing = resource.create_texture(\"/my_backing_texture.texturec\", {\n        type   = resource.TEXTURE_TYPE_IMAGE_2D,\n        width  = 128,\n        height = 128,\n        format = resource.TEXTURE_FORMAT_RGBA32F,\n        flags  = resource.TEXTURE_USAGE_FLAG_STORAGE + resource.TEXTURE_USAGE_FLAG_SAMPLE,\n    })\n\n    local textures = {\n        texture_in = resource.get_texture_info(self.texture_in).handle,\n        texture_out = resource.get_texture_info(t_backing).handle\n    }\n\n    msg.post(\"@render:\", \"set_backing_texture\", textures)\nend\n```\n\n----------------------------------------\n\nTITLE: Sound Group Analysis and Gain Management\nDESCRIPTION: Comprehensive example showing how to analyze sound groups, convert gains to decibels, and get RMS/peak values.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sound.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfor i, group_hash in ipairs(sound.get_groups()) do\n    -- The name string is only available in debug. Returns \"unknown_*\" in release.\n    local name = sound.get_group_name(group_hash)\n    local gain = sound.get_group_gain(group_hash)\n\n    -- Convert to decibel.\n    local db = 20 * math.log10(gain)\n\n    -- Get RMS (gain Root Mean Square). Left and right channel separately.\n    local left_rms, right_rms = sound.get_rms(group_hash, 2048 / 65536.0)\n    left_rmsdb = 20 * math.log10(left_rms)\n    right_rmsdb = 20 * math.log10(right_rms)\n\n    -- Get gain peak. Left and right separately.\n    left_peak, right_peak = sound.get_peak(group_hash, 2048 * 10 / 65536.0)\n    left_peakdb = 20 * math.log10(left_peak)\n    right_peakdb = 20 * math.log10(right_peak)\nend\n\n-- Set the master gain to +6 dB (math.pow(10, 6/20)).\nsound.set_group_gain(\"master\", 1.995)\n```\n\n----------------------------------------\n\nTITLE: Setting Camera with Frustum Culling in Render Script\nDESCRIPTION: Shows how to set a camera with frustum culling enabled in a render script.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nrender.set_camera(\"main:/my_go#camera\", {use_frustum = true})\n```\n\n----------------------------------------\n\nTITLE: Stopping Particle Effects in Defold GUI\nDESCRIPTION: This snippet shows how to stop a particle effect that is playing on a GUI node. It retrieves the particle effect node and then stops the effect using the gui.stop_particlefx function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/gui-particlefx.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- stop the particle effect\nlocal particles_node = gui.get_node(\"particlefx\")\ngui.stop_particlefx(particles_node)\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic Textures in Defold Scripts\nDESCRIPTION: Shows how to create and manage dynamic textures in game object scripts and pass texture handles to the render script for rendering.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_texture_resource = resource.create_texture(\"/my_texture.texture\", tparams)\n-- note: my_texture_resource is a hash to the resource path, which can't be used as a handle!\nlocal my_texture_handle = resource.get_texture_info(my_texture_resource)\n-- my_texture_handle contains information about the texture, such as width, height and so on\n-- it does also contain the handle, which is what we are after\nmsg.post(\"@render:\", \"set_texture\", { handle = my_texture_handle.handle })\n```\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message)\n    if message_id == hash(\"set_texture\") then\n        self.my_texture = message.handle\n    end\nend\n\nfunction update(self)\n    -- bind the custom texture to the draw state\n    render.enable_texture(0, self.my_texture)\n    -- do drawing..\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Queueing for Snake Movement in Defold (Lua)\nDESCRIPTION: This set of Lua functions ('init', 'update', 'on_input') implements a robust input handling system using a queue ('self.dirqueue'). The 'init' function initializes the queue. The 'on_input' function adds new direction vectors to the queue instead of directly changing 'self.dir'. The 'update' function dequeues the next direction, checks if it's opposite to the current direction, and updates 'self.dir' only if it's a valid move. This handles rapid key presses correctly and prevents immediate self-collision.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    msg.post(\".\", \"acquire_input_focus\")\n\n    self.segments = {\n        {x = 7, y = 24},\n        {x = 8, y = 24},\n        {x = 9, y = 24},\n        {x = 10, y = 24} }\n    self.dir = {x = 1, y = 0}\n    self.dirqueue = {} -- <1>\n    self.speed = 7.0\n\n    self.t = 0\nend\n\nfunction update(self, dt)\n    self.t = self.t + dt\n    if self.t >= 1.0 / self.speed then\n        local newdir = table.remove(self.dirqueue, 1) -- <2>\n        if newdir then\n            local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y -- <3>\n            if not opposite then\n                self.dir = newdir -- <4>\n            end\n        end\n\n        local head = self.segments[#self.segments]\n        local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}\n\n        table.insert(self.segments, newhead)\n\n        local tail = table.remove(self.segments, 1)\n        tilemap.set_tile(\"#grid\", \"layer1\", tail.x, tail.y, 0)\n\n        for i, s in ipairs(self.segments) do\n            tilemap.set_tile(\"#grid\", \"layer1\", s.x, s.y, 2)\n        end\n\n        self.t = 0\n    end\nend\n\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"up\") and action.pressed then\n        table.insert(self.dirqueue, {x = 0, y = 1}) -- <5>\n    elseif action_id == hash(\"down\") and action.pressed then\n        table.insert(self.dirqueue, {x = 0, y = -1})\n    elseif action_id == hash(\"left\") and action.pressed then\n        table.insert(self.dirqueue, {x = -1, y = 0})\n    elseif action_id == hash(\"right\") and action.pressed then\n        table.insert(self.dirqueue, {x = 1, y = 0})\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Files with Lua io Functions in Defold\nDESCRIPTION: Shows how to open, write to, flush, close, and read from files using standard Lua io library functions with proper error handling.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/file-access.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- open myfile.txt for writing in binary mode\n-- returns nil plus error message on failure\nlocal f, err = io.open(\"path/to/myfile.txt\", \"wb\")\nif not f then\n\tprint(\"Something went wrong while opening the file\", err)\n\treturn\nend\n\n-- write to the file, flush it to disk and then close the file\nf:write(\"Foobar\")\nf:flush()\nf:close()\n\n-- open myfile.txt for reading in binary mode\n-- returns nil plus error message on failure\nlocal f, err = io.open(\"path/to/myfile.txt\", \"rb\")\nif not f then\n\tprint(\"Something went wrong while opening the file\", err)\n\treturn\nend\n\n-- read the entire file as a string\n-- returns nil on failure\nlocal s = f:read(\"*a\")\nif not s then\n\tprint(\"Error while reading file\")\n\treturn\nend\n\nprint(s) -- Foobar\n```\n\n----------------------------------------\n\nTITLE: Handling Layout Change Messages in Defold\nDESCRIPTION: This code demonstrates how to detect and respond to layout changes in a Defold GUI component. The script listens for 'layout_changed' messages and checks which specific layout was selected to execute appropriate logic.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-layouts.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n  if message_id == hash(\"layout_changed\") and message.id == hash(\"My Landscape\") then\n    -- switching layout to landscape\n  elseif message_id == hash(\"layout_changed\") and message.id == hash(\"My Portrait\") then\n    -- switching layout to portrait\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing IAC Listener in Lua\nDESCRIPTION: Demonstrates how to set up an IAC listener function to handle invocation events, such as when the app is launched from a URL or other external source. The code shows how to access origin and URL data from the payload.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/iac.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function iac_listener(self, payload, type)\n     if type == iac.TYPE_INVOCATION then\n         -- This was an invocation\n         print(payload.origin) -- origin may be empty string if it could not be resolved\n         print(payload.url)\n     end\nend\n\nfunction init(self)\n     iac.set_listener(iac_listener)\nend\n```\n\n----------------------------------------\n\nTITLE: Building a Form Layout with Grid Component in Defold Editor\nDESCRIPTION: This example demonstrates creating a form layout using the grid component with labels and string fields. It creates a two-column grid where the first column contains right-aligned labels and the second column contains expandable text input fields.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts-ui.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\neditor.ui.grid({\n    padding = editor.ui.PADDING.LARGE, -- add padding around dialog edges\n    columns = {{}, {grow = true}}, -- make 2nd column grow\n    children = {\n        {\n            editor.ui.label({ \n                text = \"Level Name\",\n                alignment = editor.ui.ALIGNMENT.RIGHT\n            }),\n            editor.ui.string_field({})\n        },\n        {\n            editor.ui.label({ \n                text = \"Author\",\n                alignment = editor.ui.ALIGNMENT.RIGHT\n            }),\n            editor.ui.string_field({})\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating GLSL Fragment Shader for Time-Based Animation in Defold\nDESCRIPTION: This GLSL code snippet demonstrates modifying a fragment shader to incorporate time-based animation. It declares a 'time' uniform of type vec4 (using low precision) and utilizes its 'x' component within the main function to calculate a time value, influencing the visual output over time. This requires a corresponding material with a 'time' fragment constant defined.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/shadertoy.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\n...\\nvarying mediump vec2 var_texcoord0;\\nuniform lowp vec4 time; // <1>\\n\\nvoid main()\\n{\\n    //get coords and direction\\n    vec2 res = vec2(2.0, 1.0);\\n    vec2 uv = var_texcoord0.xy * res.xy - 0.5;\\n    vec3 dir = vec3(uv * zoom, 1.0);\\n    float time = time.x * speed + 0.25; // <2>\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Handling Spawned Game Object Properties in Lua\nDESCRIPTION: This snippet shows how to define and use a script property 'score' in a spawned game object, and how to reference it in the update and message handling functions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- star.script\ngo.property(\"score\", 1)\n\nlocal speed = -240\n\nfunction update(self, dt)\n    local p = go.get_position()\n    p.x = p.x + speed * dt\n    if p.x < -32 then\n        go.delete()\n    end\n    go.set_position(p)\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"collision_response\") then\n        msg.post(\"main#gui\", \"add_score\", {amount = self.score})\n        go.delete()\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hashed Game Object Identifiers in Lua\nDESCRIPTION: Demonstrates how to retrieve and print hashed identifiers for game objects, including both current objects and newly spawned instances. Shows how the engine returns absolute path identifiers as hash values.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/addressing.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_id = go.get_id()\nprint(my_id) --> hash: [/path/to/the/object]\n\nlocal spawned_id = factory.create(\"#some_factory\")\nprint(spawned_id) --> hash: [/instance42]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid 'go' Namespace Usage in GUI Scripts\nDESCRIPTION: This snippet illustrates that the 'go' namespace is not available in GUI scripts, causing an error when attempting to use go.get_id().\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-script.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n   local id = go.get_id()\nend\n```\n\n----------------------------------------\n\nTITLE: ZeroBrane Editor Configuration\nDESCRIPTION: Configuration settings to enable automatic file opening during debugging sessions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/zerobrane.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n- to automatically open files requested during debugging\neditor.autoactivate = true\n```\n\n----------------------------------------\n\nTITLE: Hero Reset Animation and Messaging\nDESCRIPTION: Hero script modification to trigger level reset after death animation completes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\ngo.animate(\".\", \"position.y\", go.PLAYBACK_ONCE_FORWARD, go.get_position().y - 200, go.EASING_INSINE, 0.5, 0.2,\n    function()\n        msg.post(\"controller#controller\", \"reset\")\n    end)\n```\n\n----------------------------------------\n\nTITLE: Setting Stretch Projection in Lua\nDESCRIPTION: Code to enable stretch projection in the render script, which maintains game dimensions while allowing content stretching on window resize.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"@render:\", \"use_stretch_projection\", { near = -1, far = 1 })\n```\n\n----------------------------------------\n\nTITLE: Basic Lua Script with Hot Reloadable Variable\nDESCRIPTION: A simple Lua script demonstrating how changing a local variable and hot reloading the file will immediately affect the running game. The variable value change will be reflected in the output without restarting the game.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/hot-reload.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_value = 10\n\nfunction update(self, dt)\n    print(my_value)\nend\n```\n\n----------------------------------------\n\nTITLE: Playing a Sound in Defold with Lua\nDESCRIPTION: This snippet demonstrates how to play a sound using the sound.play() function in Defold, with options for delay, gain, pan, and speed.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/sound.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nsound.play(\"go#sound\", {delay = 1, gain = 0.5, pan = -1.0, speed = 1.25})\n```\n\n----------------------------------------\n\nTITLE: Manipulating Pie Nodes at Runtime in Lua\nDESCRIPTION: This code demonstrates how to modify pie node properties at runtime using Defold GUI functions. It shows how to get and set fill angle, increase perimeter vertices, change outer bounds, and animate the inner radius of a pie node.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-pie.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal pienode = gui.get_node(\"my_pie_node\")\n\n-- get the outer bounds\nlocal fill_angle = gui.get_fill_angle(pienode)\n\n-- increase perimeter vertices\nlocal vertices = gui.get_perimeter_vertices(pienode)\ngui.set_perimeter_vertices(pienode, vertices + 1)\n\n-- change outer bounds\ngui.set_outer_bounds(pienode, gui.PIEBOUNDS_RECTANGLE)\n\n-- animate the inner radius\ngui.animate(pienode, \"inner_radius\", 100, gui.EASING_INOUTSINE, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Render Script in Defold\nDESCRIPTION: Example of how to send messages from game objects to the render script using the @render socket, specifically showing how to change the clear color.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Change the clear color.\nmsg.post(\"@render:\", \"clear_color\", { color = vmath.vector4(0.3, 0.4, 0.5, 0) })\n```\n\n----------------------------------------\n\nTITLE: Local Table Lua Module Pattern\nDESCRIPTION: A common Lua module pattern that creates a local table, populates it and returns it. This pattern can cause issues with hot reloading as the returned table reference isn't updated when the module is reloaded.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/hot-reload.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n--- my_module.lua\nlocal M = {} -- a new table object is created here\nM.val = 10\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Animating Model Cursor in Defold (Lua)\nDESCRIPTION: This code shows how to set a 'run' animation on a model and then animate the animation cursor using go.animate. The cursor is animated in a loop between 0 and 1 over 10 seconds.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/model.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- set the run animation\nmodel.play_anim(\"#model\", \"run\", go.PLAYBACK_NONE)\n-- animate the cursor\ngo.animate(\"#model\", \"cursor\", go.PLAYBACK_LOOP_PINGPONG, 1, go.EASING_LINEAR, 10)\n```\n\n----------------------------------------\n\nTITLE: Initializing GUI Script Template in Lua\nDESCRIPTION: This snippet shows the basic structure of a GUI script in Defold, including lifecycle functions like init, final, update, on_message, on_input, and on_reload.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-script.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n   -- Add initialization code here\n   -- Remove this function if not needed\nend\n\nfunction final(self)\n   -- Add finalization code here\n   -- Remove this function if not needed\nend\n\nfunction update(self, dt)\n   -- Add update code here\n   -- Remove this function if not needed\nend\n\nfunction on_message(self, message_id, message, sender)\n   -- Add message-handling code here\n   -- Remove this function if not needed\nend\n\nfunction on_input(self, action_id, action)\n   -- Add input-handling code here\n   -- Remove this function if not needed\nend\n\nfunction on_reload(self)\n   -- Add input-handling code here\n   -- Remove this function if not needed\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Camera View Projection in Render Script\nDESCRIPTION: Shows how to handle the set_view_projection message from a camera component in the render script, updating view and projection matrices.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message)\n    if message_id == hash(\"set_view_projection\") then\n        self.view = message.view\n        self.projection = message.projection\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Logical Operators and Conditional Expressions in Lua - Lua\nDESCRIPTION: Demonstrates use of 'and', 'or', and 'not' logical operators in Lua to combine Boolean expressions and control execution flow. Includes both direct value evaluations and conditional logic blocks; no dependencies required.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nprint(true or false) --> true\nprint(true and false) --> false\nprint(not false) --> true\n\nif a == 5 and b == 6 then\n    print(\"a is 5 and b is 6\")\nend\n```\n\n----------------------------------------\n\nTITLE: Example Game Resource Dependency Graph Structure in JSON\nDESCRIPTION: An example of the game.graph.json file structure that is automatically generated during project bundling. This file contains a list of all resources in the project and their dependencies, which is used for splitting content into separate volumes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/live-update.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\" : \"/game/player.goc\",\n  \"hexDigest\" : \"caa342ec99794de45b63735b203e83ba60d7e5a1\",\n  \"children\" : [ \"/game/ship.spritec\", \"/game/player.scriptc\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Basic Model Animation in Defold (Lua)\nDESCRIPTION: Demonstrates how to start a looping animation on a 3D model component using model.play_anim(). The animation 'wiggle' is played in a ping-pong loop mode.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/model-animation.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- Start the \"wiggle\" animation back and forth on #model\n    model.play_anim(\"#model\", \"wiggle\", go.PLAYBACK_LOOP_PINGPONG)\nend\n```\n\n----------------------------------------\n\nTITLE: Example Output of Defold Message Dispatch Test\nDESCRIPTION: This text block shows the console output generated by running the accompanying Lua script. It displays the number of message dispatch passes executed by the Defold engine between the `init` function and the first `update`, and subsequently between each `update` call, illustrating the engine's dispatch limit.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n```txt\nDEBUG:SCRIPT: INIT\nINFO:ENGINE: Defold Engine 1.2.36 (5b5af21)\nDEBUG:SCRIPT: UPDATE 1\nDEBUG:SCRIPT: 10 dispatch passes before this update.\nDEBUG:SCRIPT: UPDATE 2\nDEBUG:SCRIPT: 75 dispatch passes before this update.\nDEBUG:SCRIPT: UPDATE 3\nDEBUG:SCRIPT: 75 dispatch passes before this update.\nDEBUG:SCRIPT: UPDATE 4\nDEBUG:SCRIPT: 75 dispatch passes before this update.\nDEBUG:SCRIPT: UPDATE 5\nDEBUG:SCRIPT: 75 dispatch passes before this update.\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Local Cache in Defold Command Line Build\nDESCRIPTION: This command enables the local cache for Defold builds using the command line tool Bob. It specifies the path where compiled assets will be stored externally.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/caching-assets.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\njava -jar bob.jar --resource-cache-local /Users/john.doe/defold_local_cache\n```\n\n----------------------------------------\n\nTITLE: Swapping and Scrambling Table Elements in Lua\nDESCRIPTION: These Lua functions provide utilities for randomizing the board state. `swap(t, i, j)` exchanges the elements at indices `i` and `j` in table `t`. `scramble(t)` shuffles the elements of table `t` in place using the `swap` function and `math.random`, implementing a variation of the Fisher-Yates shuffle.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Swap two items in a table list\nlocal function swap(t, i, j)\n    local tmp = t[i]\n    t[i] = t[j]\n    t[j] = tmp\n    return t\nend\n\n-- Randomize the order of a the elements in a table list\nlocal function scramble(t)\n    local n = #t\n    for i = 1, n - 1 do\n        t = swap(t, i, math.random(i, n))\n    end\n    return t\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating UV Offsets in Vertex Shader - GLSL\nDESCRIPTION: This GLSL vertex shader applies a horizontal (U axis) UV offset to the second texture layer by subtracting an 'animation_time' constant from the x component of the original UV coordinates. It passes both the original and offset UVs to the fragment shader via varying variables. Required dependencies include a model supplying 'position' and 'texcoord0' attributes, and a material that sets 'animation_time' as a vertex constant. The shader expects to be used with a matching fragment shader, and is best used in cases where minimizing per-fragment computation is desired. The main limitation is that it only scrolls along the x(U) axis, but can be adapted to scroll along y(V) or both axes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/texture-scrolling.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n// water_scroll.vp\\n\\n// UV / Texture Scroll\\nattribute highp vec4 position;\\nattribute mediump vec2 texcoord0;\\n\\nuniform mediump mat4 mtx_worldview;\\nuniform mediump mat4 mtx_proj;\\nuniform mediump vec4 animation_time; // vertex constant set up in material as type user.\\n\\nvarying mediump vec2 var_texcoord0; // setup var texcoord 0\\nvarying mediump vec2 var_texcoord1; // setup var texcoord 1\\n\\nvoid main()\\n{\\n    vec4 p = mtx_worldview * vec4(position.xyz, 1.0);\\n    var_texcoord0 = texcoord0;\\n    var_texcoord1 = vec2(texcoord0.x - animation_time.x, texcoord0.y); // Calculate var texcoord 1 uv offset on U(x) axis to fragment program \\n    gl_Position = mtx_proj * p;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Detection and Game Logic in Update (Lua)\nDESCRIPTION: This modified 'update' function incorporates collision detection and resulting game logic. It first checks if the snake is alive ('self.alive') before proceeding with movement. It gets the tile ID at the snake's new head position using 'tilemap.get_tile'. If the tile is an obstacle or part of the snake body (tile ID 2 or 4), 'self.alive' is set to 'false'. If it's food (tile ID 3), the snake's speed increases, and new food is placed. If it's empty space, the snake's tail segment is removed (causing growth when food is eaten, as the tail isn't removed then). Finally, it updates the tilemap with the snake's new position.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/snake.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction update(self, dt)\n    self.t = self.t + dt\n    if self.t >= 1.0 / self.speed and self.alive then -- <1>\n        local newdir = table.remove(self.dirqueue, 1)\n\n        if newdir then\n            local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y\n            if not opposite then\n                self.dir = newdir\n            end\n        end\n\n        local head = self.segments[#self.segments]\n        local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}\n\n        table.insert(self.segments, newhead)\n\n        local tile = tilemap.get_tile(\"#grid\", \"layer1\", newhead.x, newhead.y) -- <2>\n\n        if tile == 2 or tile == 4 then\n            self.alive = false -- <3>\n        elseif tile == 3 then\n            self.speed = self.speed + 1 -- <4>\n            put_food(self)\n        else\n            local tail = table.remove(self.segments, 1) -- <5>\n            tilemap.set_tile(\"#grid\", \"layer1\", tail.x, tail.y, 1)\n        end\n\n        for i, s in ipairs(self.segments) do\n            tilemap.set_tile(\"#grid\", \"layer1\", s.x, s.y, 2)            \n        end\n\n        self.t = 0\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the use_memo Hook for Password Validation in Lua\nDESCRIPTION: This snippet demonstrates the use of the use_memo hook to optimize performance in a password validation scenario. It memoizes the validation result to prevent unnecessary recalculations when unrelated state changes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts-ui.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function validate_password(password)\n    if #password < 8 then\n        return false, \"Password must be at least 8 characters long.\"\n    elseif not password:match(\"%l\") then\n        return false, \"Password must include at least one lowercase letter.\"\n    elseif not password:match(\"%u\") then\n        return false, \"Password must include at least one uppercase letter.\"\n    elseif not password:match(\"%d\") then\n        return false, \"Password must include at least one number.\"\n    else\n        return true, \"Password is valid.\"\n    end\nend\n\n-- ...later, in component function\nlocal username, set_username = editor.ui.use_state('')\nlocal password, set_password = editor.ui.use_state('')\nlocal valid, message = editor.ui.use_memo(validate_password, password)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Render Script from GUI Script in Defold\nDESCRIPTION: Shows how to send a message to change clear color from a GUI script to the render script in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/render.md#2025-04-23_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\n-- 更改清屏颜色.\nmsg.post(\"@render:\", \"clear_color\", { color = vmath.vector4(0.3, 0.4, 0.5, 0) })\n```\n\n----------------------------------------\n\nTITLE: Setting Removed Blocks to Nil in Lua Game Board\nDESCRIPTION: This function sets all board positions marked as 'removing' to nil, effectively removing them from the game board. It's used after the remove_chain function to finalize block removal.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\n--\n-- Set removed blocks to nil\n--\nlocal function nilremoved(self)\n    for y = 0,boardheight - 1 do\n        for x = 0,boardwidth - 1 do\n            if self.board[x][y] == hash(\"removing\") then\n                self.board[x][y] = nil\n            end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Board State in Lua\nDESCRIPTION: This snippet shows the Lua table representation of a solved 15-puzzle board. It uses a one-dimensional list where numbers 1-15 represent tiles and 0 represents the empty space, ordered sequentially from top-left to bottom-right.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- The completed board looks like this:\nself.board = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Camera Component in Lua\nDESCRIPTION: Demonstrates how to enable and disable a camera component using message passing in Lua.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"#camera\", \"disable\")\nmsg.post(\"#camera\", \"enable\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Node Draw Order in Defold GUI\nDESCRIPTION: Example showing how to programmatically change the draw order of GUI nodes by comparing their indices and moving one node above another.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal bean_node = gui.get_node(\"bean\")\nlocal shield_node = gui.get_node(\"shield\")\n\nif gui.get_index(shield_node) < gui.get_index(bean_node) then\n  gui.move_above(shield_node, bean_node)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP-based Sound Streaming in Lua for Defold\nDESCRIPTION: Demonstrates how to stream sound data from a web server using HTTP range requests. The code handles parsing content ranges, creating sound resources dynamically, and setting them on sound components. Requires a web server supporting HTTP range requests.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sound-streaming.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function parse_range(s)\n    local _, _, rstart, rend, size = string.find(s, \"(%d+)-(%d+)/(%d+)\") -- \"bytes 0-16383/103277\"\n    return rstart, rend, size\nend\n\nlocal function http_result(self, _id, response, extra)\n    if response.status == 200 or response.status == 206 then\n        local relative_path = self.filename\n        local range = response.headers['content-range'] -- content-range = \"bytes 0-16383/103277\"\n        local rstart, rend, filesize = parse_range(range)\n\n        -- Create the Defold resource, \"partial\" will enable the streaming mode\n        print(\"Creating resource\", relative_path)\n        local hash = resource.create_sound_data(relative_path, { data = response.response, filesize = filesize, partial = true })\n\n        go.set(self.component, \"sound\", hash) -- override the resource data on the component\n        sound.play(self.component) -- start the playing\n    end\nend\n\nlocal function load_web_sound(base_url, relative_path)\n    local url = base_url .. \"/\" .. relative_path\n    local headers = {}\n    headers['Range'] = string.format(\"bytes=%d-%d\", 0, 16384-1)\n\n    http.request(url, \"GET\", http_result, headers, nil, { ignore_cache = true })\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Camera Components in Lua\nDESCRIPTION: Demonstrates how to access camera components from within the same collection, from a different collection, and from the render script using URLs.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\ncamera.get_fov(\"/go#camera\")\ncamera.get_fov(\"main:/go#camera\")\nrender.set_camera(\"main:/go#camera\")\n```\n\n----------------------------------------\n\nTITLE: Running iOS Simulator Commands\nDESCRIPTION: Shell commands to manage iOS simulators including listing devices, booting a simulator, installing apps and launching the simulator application.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/ios.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# show a list of available devices\nxcrun simctl list\n\n# boot an iPhone X simulator\nxcrun simctl boot \"iPhone X\"\n\n# install your.app to a booted simulator\nxcrun simctl install booted your.app\n\n# launch the simulator\nopen /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app\n```\n\n----------------------------------------\n\nTITLE: Enabling Software Rendering\nDESCRIPTION: Command to enable software rendering for systems with outdated OpenGL drivers.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/linux-faq.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ LIBGL_ALWAYS_SOFTWARE=1 ./Defold\n```\n\n----------------------------------------\n\nTITLE: Controlling Particle Effects with Lua in Defold\nDESCRIPTION: This snippet demonstrates how to start and stop a particle effect named 'particles' in the current game object using Lua scripting in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/particlefx.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- start the effect component \"particles\" in the current game object\nparticlefx.play(\"#particles\")\n\n-- stop the effect component \"particles\" in the current game object\nparticlefx.stop(\"#particles\")\n```\n\n----------------------------------------\n\nTITLE: Debugging iOS Apps with ios-deploy\nDESCRIPTION: Command to install, launch, and attach the LLDB debugger to an iOS application using the ios-deploy tool.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/debugging-game-and-system-logs.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nios-deploy --debug --bundle <path_to_game.app> # 注意: 不是 .ipa 文件\n```\n\n----------------------------------------\n\nTITLE: Using Animation Completion Callback in Lua\nDESCRIPTION: This code shows how to use a completion callback function with model.play_anim(). The callback function 'wiggle_done' is called when the animation finishes playing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/model-animation.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function wiggle_done(self, message_id, message, sender)\n    -- 播放完毕\nend\n\nfunction init(self)\n    model.play_anim(\"#model\", \"wiggle\", go.PLAYBACK_ONCE_FORWARD, nil, wiggle_done)\nend\n```\n\n----------------------------------------\n\nTITLE: Starting a Particle Effect in Defold GUI\nDESCRIPTION: This code snippet demonstrates how to start a particle effect by getting a reference to the particle node and calling the play_particlefx function. It requires a particle effect node to be already set up in the GUI.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-particlefx.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- start the particle effect\nlocal particles_node = gui.get_node(\"particlefx\")\ngui.play_particlefx(particles_node)\n```\n\n----------------------------------------\n\nTITLE: Minimal Fragment Shader Example in GLSL\nDESCRIPTION: A basic GLSL fragment shader that demonstrates the minimal structure. It sets the output fragment color `gl_FragColor` to black (0,0,0,1). Like the minimal vertex shader, this serves as a simple syntax example rather than a functional shader.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_14\n\nLANGUAGE: glsl\nCODE:\n```\nvoid main()\n{\n    gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Flow with If-Then-Else Statements in Lua - Lua\nDESCRIPTION: Demonstrates single and multi-branch conditional ('if', 'elseif', 'else') logic in Lua. No dependencies. Handles numeric and string comparisons, outputs descriptive messages based on which branch is executed. Showcases the recommended Lua approach over switch-like constructs.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\na = 5\nb = 4\n\nif a < b then\n    print(\"a is smaller than b\")\nend\n\nif a == '1' then\n    print(\"a is 1\")\nelseif a == '2' then\n    print(\"a is 2\")\nelseif a == '3' then\n    print(\"a is 3\")\nelse\n    print(\"I have no idea what a is...\")\nend\n```\n\n----------------------------------------\n\nTITLE: Using Camera Projection in Render Script\nDESCRIPTION: Demonstrates how to instruct the render script to use the projection provided by the camera component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"@render:\", \"use_camera_projection\")\n```\n\n----------------------------------------\n\nTITLE: Including Shader Code Snippets in GLSL\nDESCRIPTION: Demonstrates how to include external .glsl files in a shader using #include directives. Shows different ways to specify file paths relative to the project or current file.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/shader.md#2025-04-23_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\n// Full path\n#include \"/main/my-snippet.glsl\"\n// Same directory\n#include \"my-snippet.glsl\"\n// Subdirectory\n#include \"sub-folder/my-snippet.glsl\"\n// Parent directory subdirectory\n#include \"../some-other-folder/my-snippet.glsl\"\n// Parent directory\n#include \"../root-level-snippet.glsl\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ZeroBrane Debugger in Lua\nDESCRIPTION: Basic code to start a debugging session by connecting to ZeroBrane's debug server on localhost.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/zerobrane.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ndbg = require \"builtins.scripts.mobdebug\"\ndbg.start()\n```\n\n----------------------------------------\n\nTITLE: Minimal Vertex Shader Example in GLSL\nDESCRIPTION: A basic GLSL vertex shader that demonstrates the minimal structure. It sets the output vertex position `gl_Position` to a fixed zero vector (0,0,0,1), which isn't practically useful for rendering but shows the core syntax.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_12\n\nLANGUAGE: glsl\nCODE:\n```\nvoid main()\n{\n    gl_Position = vec4(0.0,0.0,0.0,1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Collection Proxy in Defold\nDESCRIPTION: Demonstrates how to send a 'load' message to a collection proxy component to begin loading a new game world. The engine allocates space for a new world and instantiates all game objects from the referenced collection.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Tell the proxy \"myproxy\" to start loading.\nmsg.post(\"#myproxy\", \"load\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Android Logs with ADB\nDESCRIPTION: These commands show how to use Android Debug Bridge (ADB) to view all logs and Defold-specific logs from an Android device. It requires the Android SDK to be installed and the device to be connected via USB.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-game-and-system-logs.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <path_to_android_sdk>/platform-tools/\n$ adb logcat\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <path_to_android_sdk>/platform-tools/\n$ adb logcat -s defold\n```\n\n----------------------------------------\n\nTITLE: Alternative Command for Running HTTP Server with Python 3\nDESCRIPTION: An explicit command using python3 to start a local HTTP server, which is useful on systems where both Python 2 and 3 are installed.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m http.server\n```\n\n----------------------------------------\n\nTITLE: Setting GNOME DPI Scaling for Defold\nDESCRIPTION: Commands to adjust display scaling for Defold on 4k/HiDPI monitors using GNOME settings.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/linux-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gsettings set org.gnome.desktop.interface scaling-factor 2\n$ ./Defold\n```\n\n----------------------------------------\n\nTITLE: Accessing Bone Game Objects in Defold (Lua)\nDESCRIPTION: Shows how to retrieve the game object ID of a specific bone in a model's skeleton using model.get_go(). This allows for direct manipulation of the bone object.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/model-animation.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Get the middle bone go of our wiggler model\nlocal bone_go = model.get_go(\"#wiggler\", \"Bone_002\")\n\n-- Now do something useful with the game object...\n```\n\n----------------------------------------\n\nTITLE: Installing APK using ADB Command Line\nDESCRIPTION: Command to install an APK file to a connected Android device using the Android Debug Bridge (adb) tool.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/android.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ adb install Defold\\ examples.apk\n4826 KB/s (18774344 bytes in 3.798s)\n  pkg: /data/local/tmp/my_app.apk\nSuccess\n```\n\n----------------------------------------\n\nTITLE: Updating Render Script in Defold\nDESCRIPTION: Shows the update() function in a Defold render script, handling rendering of 3D models, world objects, and GUI elements.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/render.md#2025-04-23_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nfunction update(self)\n    local state = self.state\n     if not state.valid then\n        if not update_state(state) then\n            return\n        end\n    end\n\n    local predicates = self.predicates\n    -- clear screen buffers\n    --\n    render.set_depth_mask(true)\n    render.set_stencil_mask(0xff)\n    render.clear(state.clear_buffers)\n\n    local camera_world = state.cameras.camera_world\n    render.set_viewport(0, 0, state.window_width, state.window_height)\n    render.set_view(camera_world.view)\n    render.set_projection(camera_world.proj)\n\n\n    -- render models\n    --\n    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)\n    render.enable_state(render.STATE_CULL_FACE)\n    render.enable_state(render.STATE_DEPTH_TEST)\n    render.set_depth_mask(true)\n    render.draw(predicates.model_pred)\n    render.set_depth_mask(false)\n    render.disable_state(render.STATE_DEPTH_TEST)\n    render.disable_state(render.STATE_CULL_FACE)\n\n     -- render world (sprites, tilemaps, particles etc)\n     --\n    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)\n    render.enable_state(render.STATE_DEPTH_TEST)\n    render.enable_state(render.STATE_STENCIL_TEST)\n    render.enable_state(render.STATE_BLEND)\n    render.draw(predicates.tile)\n    render.draw(predicates.particle)\n    render.disable_state(render.STATE_STENCIL_TEST)\n    render.disable_state(render.STATE_DEPTH_TEST)\n\n    -- debug\n    render.draw_debug3d()\n\n    -- render GUI\n    --\n    local camera_gui = state.cameras.camera_gui\n    render.set_view(camera_gui.view)\n    render.set_projection(camera_gui.proj)\n    render.enable_state(render.STATE_STENCIL_TEST)\n    render.draw(predicates.gui, camera_gui.frustum)\n    render.draw(predicates.text, camera_gui.frustum)\n    render.disable_state(render.STATE_STENCIL_TEST)\nend\n```\n\n----------------------------------------\n\nTITLE: Sampling Textures in GLSL Fragment Shader\nDESCRIPTION: This GLSL code snippet shows a simple fragment shader that samples a texture using a sampler2D uniform. It demonstrates how to use texture sampling in Defold shaders, which is commonly used for sprite, tilemap, GUI, and particle effect components.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/material.md#2025-04-23_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\n-- mysprite.fp\nvarying mediump vec2 var_texcoord0;\nuniform lowp sampler2D MY_SAMPLER;\nvoid main()\n{\n    gl_FragColor = texture2D(MY_SAMPLER, var_texcoord0.xy);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Animating Material Constants in Defold - Lua\nDESCRIPTION: These Lua code snippets show how to set and animate a material constant for a Defold component using go.set and go.animate. They require the Defold game engine and its core Lua API, including vmath for vectors. The first line sets a material constant to a solid red color, while the second animates the same constant between values in a ping-pong loop using linear easing over 2 seconds. Parameters include the target component's id and the property being manipulated via string templates. The inputs are component and variable names, and the values to set or animate to. These calls are runtime actions and depend on the Defold material system supporting the specified constants.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/material-constants.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ngo.set(\"#{{ include.component }}\", \"{{ include.variable }}\", vmath.vector4(1,0,0,1))\n```\n\nLANGUAGE: lua\nCODE:\n```\ngo.animate(\"#{{ include.component }}\", \"{{ include.variable }}\", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1,0,0,1), go.EASING_LINEAR, 2)\n```\n\n----------------------------------------\n\nTITLE: Declaring Opaque Uniforms in GLSL\nDESCRIPTION: Example of declaring opaque uniform types like samplers and images in GLSL shaders\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\nuniform sampler2D my_texture;\nuniform image2D my_image;\n```\n\n----------------------------------------\n\nTITLE: Muting Game Sounds When Device Music is Playing in Defold\nDESCRIPTION: This snippet checks if the device's music player is running and mutes all game sounds if true by setting the gain of all sound groups to 0.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/sound.md#2025-04-23_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nif sound.is_music_playing() then\n    for i, group_hash in ipairs(sound.get_groups()) do\n        sound.set_group_gain(group_hash, 0)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Fit Projection in Lua\nDESCRIPTION: Code to enable fixed fit projection which maintains aspect ratio while showing additional content on window resize.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/render.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"@render:\", \"use_fixed_fit_projection\", { near = -1, far = 1 })\n```\n\n----------------------------------------\n\nTITLE: Changing Sound Resource at Runtime in Defold with Lua\nDESCRIPTION: This code demonstrates how to change the sound resource of a sound component at runtime using resource.set_sound().\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/sound.md#2025-04-23_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal boom = sys.load_resource(\"/sounds/boom.wav\")\nlocal path = go.get(\"#sound\", \"sound\")\nresource.set_sound(path, boom)\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Groups and Gain in Defold with Lua\nDESCRIPTION: This code demonstrates how to work with sound groups, convert gain to decibels, get RMS and peak values, and set the master gain in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/sound.md#2025-04-23_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nfor i, group_hash in ipairs(sound.get_groups()) do\n    local name = sound.get_group_name(group_hash)\n    local gain = sound.get_group_gain(group_hash)\n\n    local db = 20 * math.log10(gain)\n\n    local left_rms, right_rms = sound.get_rms(group_hash, 2048 / 65536.0)\n    left_rmsdb = 20 * math.log10(left_rms)\n    right_rmsdb = 20 * math.log10(right_rms)\n\n    left_peak, right_peak = sound.get_peak(group_hash, 2048 * 10 / 65536.0)\n    left_peakdb = 20 * math.log10(left_peak)\n    right_peakdb = 20 * math.log10(right_peak)\nend\n\nsound.set_group_gain(\"master\", 1.995)\n```\n\n----------------------------------------\n\nTITLE: Using a Lua Module and Demonstrating Hot Reloading Issues\nDESCRIPTION: This snippet shows how to use a Lua module and demonstrates why hot reloading doesn't affect the module's values.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal m = require \"module\"\nprint(m.value) --> \"4711\" (even if \"module.lua\" is changed and hot reloaded)\n```\n\n----------------------------------------\n\nTITLE: Using Completion Callbacks with Flipbook Animations in Lua\nDESCRIPTION: These Lua code snippets demonstrate how to use completion callbacks with flipbook animations for both sprites and GUI nodes. The callbacks are used to trigger events or chain animations.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flipbook-animation.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function flipbook_done(self)\n    msg.post(\"#\", \"jump_completed\")\nend\n\nfunction init(self)\n    sprite.play_flipbook(\"#character\", \"jump_left\", flipbook_done)\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function flipbook_done(self)\n    msg.post(\"#\", \"jump_completed\")\nend\n\nfunction init(self)\n    gui.play_flipbook(gui.get_node(\"character\"), \"jump_left\", flipbook_done)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Matrix4 Material Constant in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to set a material constant of type CONSTANT_TYPE_USER_MATRIX4 using the go.set() function in Defold. It sets the 'm' property of a sprite component to an identity matrix.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/material.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\ngo.set(\"#sprite\", \"m\", vmath.matrix4())\n```\n\n----------------------------------------\n\nTITLE: Installing ADB on Ubuntu Linux\nDESCRIPTION: Command to install Android Debug Bridge tools on Ubuntu Linux using apt-get package manager.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/android-adb.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install android-tools-adb\n```\n\n----------------------------------------\n\nTITLE: Playing Model Animation in Defold (Lua)\nDESCRIPTION: This snippet demonstrates how to play an animation on a 3D model component in Defold. It uses the model.play_anim function to play a 'jump' animation once with a blend duration.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/model.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal play_properties = { blend_duration = 0.1 }\nmodel.play_anim(\"#model\", \"jump\", go.PLAYBACK_ONCE_FORWARD, play_properties)\n```\n\n----------------------------------------\n\nTITLE: Installing iOS App using ios-deploy\nDESCRIPTION: Command to deploy an iOS app to a connected device using ios-deploy tool.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code-ios.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ios-deploy -b <AppName>.ipa\n```\n\n----------------------------------------\n\nTITLE: Runtime Configuration Access in Lua\nDESCRIPTION: Demonstrates how to access game.project configuration values at runtime using sys.get_config functions. Shows examples for both string and number values.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/project-settings.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal title = sys.get_config_string(\"project.title\")\nlocal gravity_y = sys.get_config_number(\"physics.gravity_y\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Animating Background Layer 1 for Parallax in Defold (Lua)\nDESCRIPTION: Implements the parallax effect for the first background tilemap layer by shifting its x-position by 1 unit per frame. The clear color of the renderer is set on initialization via a message to the render object. Requires Defold's game object (go) and vector math (vmath) APIs. The script should be attached to a game object with a tilemap component; it expects no input parameters. The update loop is responsible for position updates; values are hardcoded and can be changed for different speeds or effects.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/parallax.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- file: background1.script\\n\\nfunction init(self)\\n    msg.post(\"@render:\", \"clear_color\", { color = vmath.vector4(0.52, 0.80, 1, 0) } )\\nend\\n\\n-- the background is a tilemap in a gameobject\\n-- we move the gameobject for the parallax effect\\n\\nfunction update(self, dt)\\n    -- decrease x-position by 1 units per frame for parallax effect\\n    local p = go.get_position()\\n    p.x = p.x + 1\\n    go.set_position(p)\\nend\n```\n\n----------------------------------------\n\nTITLE: Global Scope Lua Module for Hot Reloading\nDESCRIPTION: A Lua module that defines variables in the global scope, making them accessible and modifiable through hot reloading. Changes to the module will be reflected in scripts that use it.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/hot-reload.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n--- my_module.lua\nmy_module = {}\nmy_module.val = 10\n```\n\n----------------------------------------\n\nTITLE: Modern GLSL Vertex Input Declaration\nDESCRIPTION: Example of declaring vertex input attributes in modern GLSL syntax, replacing the legacy 'attribute' keyword with 'in'.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nin vec4 position;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Material Resources in Defold GUI Components\nDESCRIPTION: This code shows how to get and set material resources in a GUI component at runtime. The example demonstrates declaring a material property, retrieving the current material, assigning a new material to an effect ID, and verifying the change.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ngo.property(\"myeffect\", resource.material(\"/assets/myeffect.material\"))\n\nfunction init(self)\n  -- get the material file currently assigned to the material with id 'effect'\n  print(go.get(\"#gui\", \"materials\", { key = \"effect\" })) -- /effect.material\n\n  -- set the material id 'effect' to the material file assigned to the resource property 'myeffect'\n  go.set(\"#gui\", \"materials\", self.myeffect, { key = \"effect\" })\n\n  -- get the new material file assigned to the material with id 'effect'\n  print(go.get(\"#gui\", \"materials\", { key = \"effect\" })) -- /assets/myeffect.material\nend\n```\n\n----------------------------------------\n\nTITLE: Using Hash IDs for Addressing in Defold Lua\nDESCRIPTION: Examples demonstrating how to use hash IDs for addressing game objects, including factory-created objects and absolute path references. Note that relative addressing requires strings, not hashes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/addressing.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal spawned_id = factory.create(\"#some_factory\")\nlocal pos = vmath.vector3(100, 100, 0)\ngo.set_position(pos, spawned_id)\n\nlocal other_id = hash(\"/path/to/the/object\")\ngo.set_position(pos, other_id)\n\n-- 这样无法工作! 相对地址必须使用字符串.\nlocal relative_id = hash(\"my_object\")\ngo.set_position(pos, relative_id)\n```\n\n----------------------------------------\n\nTITLE: Accessing Bone Hierarchy in Lua\nDESCRIPTION: This code snippet shows how to access a specific bone in a 3D model's hierarchy using the model.get_go() function. It retrieves the central bone of the 'wiggler' model.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/model-animation.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- 得到 wiggler 模型的中央骨骼\nlocal bone_go = model.get_go(\"#wiggler\", \"Bone_002\")\n\n-- 然后可以任意操作该游戏对象...\n```\n\n----------------------------------------\n\nTITLE: Getting GUI Node Color in Lua\nDESCRIPTION: This snippet illustrates how to get the color of a GUI node using the gui.get_color() function. It shows the specific GUI node property access method.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/properties.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Get the color of the button\nlocal node = gui.get_node(\"button\")\nlocal color = gui.get_color(node)\n```\n\n----------------------------------------\n\nTITLE: Checking for Unknown Gamepad in Defold\nDESCRIPTION: This snippet shows how to check if a connected gamepad is unknown (not mapped) in Defold. It uses the 'gamepad_unknown' flag to determine if the gamepad will only generate raw input or mapped input actions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_is == hash(\"connected\") then\n        if action.gamepad_unknown then\n            print(\"The connected gamepad is unidentified and will only generate raw input\")\n        else\n            print(\"The connected gamepad is known and will generate input actions for buttons and sticks\")\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Cancelling Velocity Towards Colliding Surface in Defold (Lua)\nDESCRIPTION: Prevents the player character from moving further into geometry during collision by projecting the player velocity onto the collision normal and, if necessary, subtracting any inward component. Relies on `vmath.dot` for projection and expects `self.velocity` and `message.normal` to exist. Only affects `self.velocity` if the projection is negative. Helps prevent repeated penetration into level geometry after applying collision correction.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/platformer.md#2025-04-23_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nproj = vmath.dot(self.velocity, message.normal) -- <1>\\nif proj < 0 then\\n    self.velocity = self.velocity - proj * message.normal -- <2>\\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Stateful Lua Module\nDESCRIPTION: This snippet demonstrates how to create a stateful Lua module that maintains internal state shared between all users of the module.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal M = {}\n\n-- all users of the module will share this table\nlocal state = {}\n\nfunction M.do_something(foobar)\n    table.insert(state, foobar)\nend\n\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Installing ios-deploy Tool with Homebrew\nDESCRIPTION: Command to install the ios-deploy command line tool using Homebrew package manager. This tool is required for the 'Install on connected device' and 'Launch installed app' features in the Defold editor.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/ios.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install ios-deploy\n```\n\n----------------------------------------\n\nTITLE: Camera Manipulation Functions in Lua\nDESCRIPTION: Illustrates various camera manipulation functions available in the camera module, including getting and setting aspect ratio, far Z, field of view, and more.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/camera.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ncamera.get_aspect_ratio(camera)\ncamera.get_far_z(camera)\ncamera.get_fov(camera)\ncamera.set_aspect_ratio(camera, ratio)\ncamera.set_far_z(camera, far_z)\ncamera.set_near_z(camera, near_z)\n```\n\n----------------------------------------\n\nTITLE: Remotery Profiler Console Output\nDESCRIPTION: Example of console output showing Remotery profiler initialization and connection details.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/profiling.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nINFO:ENGINE: Defold Engine 1.3.4 (80b1b73)\nINFO:DLIB: Initialized Remotery (ws://127.0.0.1:17815/rmt)\nINFO:ENGINE: Loading data from: build/default\n```\n\n----------------------------------------\n\nTITLE: Basic Defold Addressing Examples in Lua\nDESCRIPTION: Examples showing different ways to address game objects and components in Defold using various formats including factory creation, message posting, and property access.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/addressing.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal id = factory.create(\"#enemy_factory\")\nlabel.set_text(\"my_gameobject#my_label\", \"Hello World!\")\n\nlocal pos = go.get_position(\"my_gameobject\")\ngo.set_position(pos, \"/level/stuff/other_gameobject\")\n\nmsg.post(\"#\", \"hello_there\")\nlocal id = go.get_id(\".\")\n```\n\n----------------------------------------\n\nTITLE: Handling Messages in Defold Render Script\nDESCRIPTION: Illustrates the on_message() function in a Defold render script, processing messages for clear color and camera view projection.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/render.md#2025-04-23_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal MSG_CLEAR_COLOR =         hash(\"clear_color\")\nlocal MSG_WINDOW_RESIZED =      hash(\"window_resized\")\nlocal MSG_SET_VIEW_PROJ =       hash(\"set_view_projection\")\n\nfunction on_message(self, message_id, message)\n  if message_id == MSG_CLEAR_COLOR then\n      -- 根据消息命令清空屏幕.\n      self.clear_color = message.color\n  elseif message_id == MSG_SET_VIEW_PROJ then\n      -- 焦点摄像机每一帧都发送 set_view_projection\n      -- 消息到 @render 端口. 使用摄像机发来的数据可以\n      -- 设置渲染视口 (及映射).\n      camera.view = message.view\n      self.camera_projection = message.projection or vmath.matrix4()\n      update_camera(camera, state)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Undoable Action Example\nDESCRIPTION: Shows how to implement an undoable action to set a node property\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\n{\n  action = \"set\",\n  node_id = opts.selection,\n  property = \"text\",\n  value = \"current time is \" .. os.date()\n}\n```\n\n----------------------------------------\n\nTITLE: Messaging Between Game Worlds in Defold\nDESCRIPTION: Demonstrates how to send messages between different collection worlds using the collection name as part of the addressing. The example shows sending a message to a loader object in the main collection.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-proxy.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- tell the loader to load the next level:\nmsg.post(\"main:/loader#script\", \"load_level\", { level_id = 2 })\n```\n\n----------------------------------------\n\nTITLE: Debugging with Print Functions in Lua\nDESCRIPTION: Examples of using print() and pprint() functions in Defold for debugging. The pprint() function is particularly useful for displaying table contents, including nested tables.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/flash.md#2025-04-23_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nprint(\"Hello world!\"\")\n\nprint(score, health, ammo)\n\nfactions = {\"red\", \"green\", \"blue\"}\nworld = {name = \"Terra\", teams = factions}\npprint(world)\n```\n\n----------------------------------------\n\nTITLE: Available Custom Setting Attributes in INI Format (Defold)\nDESCRIPTION: Lists the available attributes for custom project settings in Defold's `.properties` files, using the INI format with dot notation. It includes `type` for value parsing (bool, string, number, integer, string_array, resource), `help` for editor tips, `default` for default values, and `private` (1 or 0) to exclude settings from the final bundle. Comments explain the purpose and usage, noting that some features are currently only used by `bob.jar` or not yet implemented in the editor.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/project-settings.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n```\n// `type` - used for the value string parsing (only in bob.jar for now)\nmy_property.type = string // one of the following values: bool, string, number, integer, string_array, resource\n\n// `help` - used as help tip in the editor (not used for now)\nmy_property.help = string\n\n// `default` - value used as default if user didn't set value manually (only in bob.jar for now)\nmy_property.default = string\n\n// `private` - private value used during the bundle process but will be removed from the bundle itself\nmy_property.private = 1 // boolean value 1 or 0\n\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Text Node Without ID in Lua\nDESCRIPTION: This code shows how to create a dynamic text node without assigning an ID, emphasizing that the returned reference is sufficient for node manipulation.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-script.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Add a text node\nlocal new_textnode = gui.new_text_node(vmath.vector3(100, 100, 0), \"Hello!\")\n-- \"new_textnode\" contains the reference to the node.\n-- The node has no id, and that is fine. There's no reason why we want\n-- to do gui.get_node() when we already have the reference.\n```\n\n----------------------------------------\n\nTITLE: Numeric and Generic For Loops in Lua - Lua\nDESCRIPTION: Covers both numeric and generic 'for' loops in Lua, demonstrating iteration over sequences and customized increments. Also shows iterating with 'ipairs' to access sequence values. No dependencies required; outputs loop variable values to console.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\n-- Print the numbers 1 to 10\nfor i = 1, 10 do\n    print(i)\nend\n\n-- Print the numbers 1 to 10 and increment with 2 each time\nfor i = 1, 10, 2 do\n    print(i)\nend\n\n-- Print the numbers 10 to 1\nfor i=10, 1, -1 do\n    print(i)\nend\n\nt = { \"a\", \"b\", \"c\", \"d\" }\n-- Iterate over the sequence and print the values\nfor i, v in ipairs(t) do\n    print(v)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Registration and Listener in Lua\nDESCRIPTION: Lua code that handles push notification registration for both iOS and Android platforms. It includes platform detection, registration callback to obtain the device token, and a listener function to process incoming notifications.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extension-push.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function push_listener(self, payload, origin)\n    -- 通知到达这里.\n    pprint(payload)\nend\n\nfunction init(self)\n    local sysinfo = sys.get_sys_info()\n    if sysinfo.system_name == \"Android\" then\n        msg.post(\"#\", \"push_android\")\n    elseif sysinfo.system_name == \"iPhone OS\" then\n        msg.post(\"#\", \"push_ios\")\n    end\nend\n\nfunction on_message(self, message_id, message)\n    if message_id == hash(\"push_ios\") then\n        local alerts = {push.NOTIFICATION_BADGE, push.NOTIFICATION_SOUND, push.NOTIFICATION_ALERT}\n        push.register(alerts, function (self, token, error)\n            if token then\n                local t = \"\"\n                for i = 1,#token do\n                    t = t .. string.format(\"%02x\", string.byte(token, i))\n                end\n                -- 打印设备token\n                print(t)\n            else\n                -- 错误\n                print(error.error)\n            end\n        end)\n        push.set_listener(push_listener)\n    elseif message_id == hash(\"push_android\") then\n        push.register(nil, function (self, token, error)\n            if token then\n                -- 打印设备token\n                print(token)\n            else\n                -- 错误\n                print(error.error)\n            end\n        end)\n        push.set_listener(push_listener)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Game Object Parent in Lua Script (Defold)\nDESCRIPTION: This snippet demonstrates how to change the parent of a game object at runtime using Defold's messaging system. It sets the parent of 'child_bean' to the game object with id 'bean'.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/building-blocks.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal parent = go.get_id(\"bean\")\nmsg.post(\"child_bean\", \"set_parent\", { parent_id = parent })\n```\n\n----------------------------------------\n\nTITLE: Extension Manifest Configuration in YAML\nDESCRIPTION: Example of an ext.manifest file showing platform-specific configuration for iOS builds, including framework dependencies, compiler flags, linker flags, libraries and custom defines.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-ext-manifests.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"AdExtension\"\n\nplatforms:\n    arm64-ios:\n        context:\n            frameworks: [\"CoreGraphics\", \"CFNetwork\", \"GLKit\", \"CoreMotion\", \"MessageUI\", \"MediaPlayer\", \"StoreKit\", \"MobileCoreServices\", \"AdSupport\", \"AudioToolbox\", \"AVFoundation\", \"CoreGraphics\", \"CoreMedia\", \"CoreMotion\", \"CoreTelephony\", \"CoreVideo\", \"Foundation\", \"GLKit\", \"JavaScriptCore\", \"MediaPlayer\", \"MessageUI\", \"MobileCoreServices\", \"OpenGLES\", \"SafariServices\", \"StoreKit\", \"SystemConfiguration\", \"UIKit\", \"WebKit\"]\n            flags:      [\"-stdlib=libc++\"]\n            linkFlags:  [\"-ObjC\"]\n            libs:       [\"z\", \"c++\", \"sqlite3\"]\n            defines:    [\"MY_DEFINE\"]\n\n    armv7-ios:\n        context:\n            frameworks: [\"CoreGraphics\", \"CFNetwork\", \"GLKit\", \"CoreMotion\", \"MessageUI\", \"MediaPlayer\", \"StoreKit\", \"MobileCoreServices\", \"AdSupport\", \"AudioToolbox\", \"AVFoundation\", \"CoreGraphics\", \"CoreMedia\", \"CoreMotion\", \"CoreTelephony\", \"CoreVideo\", \"Foundation\", \"GLKit\", \"JavaScriptCore\", \"MediaPlayer\", \"MessageUI\", \"MobileCoreServices\", \"OpenGLES\", \"SafariServices\", \"StoreKit\", \"SystemConfiguration\", \"UIKit\", \"WebKit\"]\n            flags:      [\"-stdlib=libc++\"]\n            linkFlags:  [\"-ObjC\"]\n            libs:       [\"z\", \"c++\", \"sqlite3\"]\n            defines:    [\"MY_DEFINE\"]\n```\n\n----------------------------------------\n\nTITLE: Controlling Time Step in Collection Proxies\nDESCRIPTION: Shows how to adjust the time step scaling of a loaded collection using the 'set_time_step' message. This affects update rates for physics, animations, and other time-dependent systems in the collection.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-proxy.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- update loaded world at one-fifth-speed.\nmsg.post(\"#myproxy\", \"set_time_step\", {factor = 0.2, mode = 1}\n```\n\n----------------------------------------\n\nTITLE: Preparing Debug Symbols for Native Extensions\nDESCRIPTION: Commands to extract and rename debug symbols for native extensions from the build archive.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code-ios.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd myproject\n$ unzip .internal/cache/arm64-ios/build.zip\n$ mv dmengine.dSYM <AppName>.dSYM\n$ mv <AppName>.dSYM/Contents/Resources/DWARF/dmengine <AppName>.dSYM/Contents/Resources/DWARF/<AppName>\n```\n\n----------------------------------------\n\nTITLE: Creating and Passing Texture Handles in Defold\nDESCRIPTION: Shows how to create a texture handle in a game object script and pass it to the render script for use in drawing commands.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/render.md#2025-04-23_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal my_texture_resource = resource.create_texture(\"/my_texture.texture\", tparams)\n-- 注意: my_texture_resource 是资源路径的哈希值, 不能用作句柄!\nlocal my_texture_handle = resource.get_texture_info(my_texture_resource)\n-- my_texture_handle 包含纹理的信息, 比如宽度, 高度等等\n-- 它还包含句柄, 这就是我们所需要的\nmsg.post(\"@render:\", \"set_texture\", { handle = my_texture_handle.handle })\n```\n\n----------------------------------------\n\nTITLE: Animating Game Object Position in Lua Script (Defold)\nDESCRIPTION: This code shows how to animate the X position of a game object named 'can' using Defold's go.animate() function. It creates a looping ping-pong animation with linear easing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/building-blocks.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- animate X position of \"can\" game object\ngo.animate(\"can\", \"position.x\", go.PLAYBACK_LOOP_PINGPONG, 100, go.EASING_LINEAR, 1.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing Component Variables in Defold Script\nDESCRIPTION: Shows how to initialize variables in a script component's init callback that persist through the component's lifetime.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n  -- These variables are available through the lifetime of the component instance\n  self.my_var = \"something\"\n  self.age = 0\nend\n```\n\n----------------------------------------\n\nTITLE: Script Using a Local Table Module\nDESCRIPTION: A script that requires a module using the local table pattern. Hot reloading the module will not affect this script because it retains the original reference to the module table.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/hot-reload.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- user.script\nlocal mm = require \"my_module\"\n\nfunction update(self, dt)\n    print(mm.val) -- will print 10 even if you change and hot reload \"my_module.lua\"\nend\n```\n\n----------------------------------------\n\nTITLE: Mutual Function Forward Declaration in Lua - Lua\nDESCRIPTION: Shows how to forward-declare and define mutually recursive local functions in Lua. Demonstrates the need for declaration ordering and provides alternatives with different function assignment styles. Best practice is suggested for scripting with mutually-referencing local functions in game logic.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal func2 -- Forward declare 'func2'\n\nlocal function func1(a)\n    print(\"func1\")\n    func2(a)\nend\n\nfunction func2(a) -- or func2 = function(a)\n    print(\"func2\")\n    if a < 10 then\n        func1(a + 1)\n    end\nend\n\nfunction init(self)\n    func1(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Synchronous Loading of Factory Resources in Lua\nDESCRIPTION: This example demonstrates synchronous loading of factory resources when 'Load Dynamically' is checked. It creates objects immediately, which may cause a hitch.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- No factory resources are loaded when the factory's parent\n    -- collection is loaded. Calling create without having called\n    -- load will create the resources synchronously.\n    self.go_id = factory.create(\"#factory\")\nend\n\nfunction final(self)  \n    -- Delete game objects. Will decref resources.\n    -- In this case resources are deleted since the factory component\n    -- holds no reference.\n    go.delete(self.go_id)\n\n    -- Calling unload will do nothing since factory holds no references\n    factory.unload(\"#factory\")\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning Game Objects with Properties and Scaling in Lua\nDESCRIPTION: This example shows how to spawn a game object with no rotation, double scale, and a custom 'score' property set to 10.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- factory.script\nlocal p = go.get_position()\np.y = vmath.lerp(math.random(), min_y, max_y)\nlocal component = \"#star_factory\"\n-- Spawn with no rotation but double scale.\n-- Set the score of the star to 10.\nfactory.create(component, p, nil, { score = 10 }, 2.0)\n```\n\n----------------------------------------\n\nTITLE: Sending Component Message in Lua\nDESCRIPTION: Example showing how to send a disable message to a sprite component named 'weapon' on the current game object using Defold's message passing system.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/glossary.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"#weapon\", \"disable\")\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Resources using sys.load_resource in Defold\nDESCRIPTION: Uses sys.load_resource() to load custom resources that have been included in the main game archive through the Custom Resources field in game.project. Resources can be individual files or entire directories.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/custom-resources.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nsys.load_resource()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Vertex Shader for Quad Model in Defold (GLSL)\nDESCRIPTION: This GLSL vertex shader (`star-nest.vp`) is part of the material setup for a quad model in Defold. It takes the model's vertex position and texture coordinates (`texcoord0`) as input attributes. It transforms the position using the standard Defold `view_proj` matrix uniform and passes the texture coordinates (`var_texcoord0`) to the fragment shader as a varying variable.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/shadertoy.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n// star-nest.vp\nuniform mediump mat4 view_proj;\n\n// positions are in world space\nattribute mediump vec4 position;\nattribute mediump vec2 texcoord0;\n\nvarying mediump vec2 var_texcoord0;\n\nvoid main()\n{\n    gl_Position = view_proj * vec4(position.xyz, 1.0);\n    var_texcoord0 = texcoord0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Stapling Notarization Ticket to macOS Application\nDESCRIPTION: This command staples the notarization ticket to the application bundle, finalizing the notarization process.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/macos.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ xcrun stapler staple \"Game.app\"\n```\n\n----------------------------------------\n\nTITLE: Manipulating Components in Lua with Defold Runtime API\nDESCRIPTION: Demonstrates how to interact with components at runtime using Defold's messaging and sound systems. Shows disabling a sprite component and playing a sound with delay and gain parameters.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/components.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- disable the can \"body\" sprite\nmsg.post(\"can#body\", \"disable\")\n\n-- play \"hoohoo\" sound on \"bean\" in 1 second\nsound.play(\"bean#hoohoo\", { delay = 1, gain = 0.5 } )\n```\n\n----------------------------------------\n\nTITLE: Enabling Components in Defold using Lua\nDESCRIPTION: Demonstrates how to enable a component in Defold by sending an 'enable' message to a specific component.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/components.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- 开启 id 为 'weapon' 的组件\nmsg.post(\"#weapon\", \"enable\")\n```\n\n----------------------------------------\n\nTITLE: Using Texture Handles in Defold Render Script\nDESCRIPTION: Demonstrates how to receive and use a texture handle in a Defold render script for drawing operations.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/render.md#2025-04-23_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nfunction on_message(self, message_id, message)\n    if message_id == hash(\"set_texture\") then\n        self.my_texture = message.handle\n    end\nend\n\nfunction update(self)\n    -- 将自定义纹理绑定到绘制状态\n    render.enable_texture(0, self.my_texture)\n    -- 进行绘制..\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Defold Message Dispatch Passes in Lua\nDESCRIPTION: This Lua script demonstrates how Defold processes message chains and the limit on dispatch passes per frame. It initiates a message chain in `init()`, continuously reposts the message in `on_message()`, and counts the number of dispatches occurring between `update()` calls to illustrate the engine's behavior.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/message-passing.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n```lua\nfunction init(self)\n    -- We’re starting a long message chain during object init\n    -- and keeps it running through a number of update() steps.\n    print(\"INIT\")\n    msg.post(\"#\", \"msg\")\n    self.updates = 0\n    self.count = 0\nend\n\nfunction update(self, dt)\n    if self.updates < 5 then\n        self.updates = self.updates + 1\n        print(\"UPDATE \" .. self.updates)\n        print(self.count .. \" dispatch passes before this update.\")\n        self.count = 0\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"msg\") then\n        self.count = self.count + 1\n        msg.post(\"#\", \"msg\")\n    end\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Animation in Defold\nDESCRIPTION: Examples of creating custom easing curves using vector values for property animations.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/property-animation.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal values = { 0, 0.4, 0.2, 0.2, 0.5, 1 }\nlocal my_easing = vmath.vector(values)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal values = { 0, 0, 0, 0, 0, 0, 0, 0,\n                 1, 1, 1, 1, 1, 1, 1, 1,\n                 0, 0, 0, 0, 0, 0, 0, 0,\n                 1, 1, 1, 1, 1, 1, 1, 1,\n                 0, 0, 0, 0, 0, 0, 0, 0,\n                 1, 1, 1, 1, 1, 1, 1, 1,\n                 0, 0, 0, 0, 0, 0, 0, 0,\n                 1, 1, 1, 1, 1, 1, 1, 1 }\nlocal square_easing = vmath.vector(values)\ngo.animate(\"go\", \"position.y\", go.PLAYBACK_LOOP_PINGPONG, 200, square_easing, 2.0)\n```\n\n----------------------------------------\n\nTITLE: Creating a Confirmation Dialog in Defold Editor\nDESCRIPTION: This snippet demonstrates how to create a simple confirmation dialog in the Defold editor using the editor.ui module. It registers a command in the View menu that shows a dialog with Cancel and Perform buttons.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts-ui.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal M = {}\n\nfunction M.get_commands()\n    return {\n        {\n            label = \"Do with confirmation\",\n            locations = {\"View\"},\n            run = function()\n                local result = editor.ui.show_dialog(editor.ui.dialog({\n                    title = \"Perform action?\",\n                    buttons = {\n                        editor.ui.dialog_button({\n                            text = \"Cancel\",\n                            cancel = true,\n                            result = false\n                        }),\n                        editor.ui.dialog_button({\n                            text = \"Perform\",\n                            default = true,\n                            result = true\n                        })\n                    }\n                }))\n                print('Perform action:', result)\n            end\n        }\n    }\nend\n\nreturn M\n\n```\n\n----------------------------------------\n\nTITLE: Basic Editor Script Structure in Lua\nDESCRIPTION: Shows the basic structure of a Defold editor script with placeholder functions for defining commands, language servers, and preferences schema.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal M = {}\n\nfunction M.get_commands()\n  -- TODO - define editor commands\nend\n\nfunction M.get_language_servers()\n  -- TODO - define language servers\nend\n\nfunction M.get_prefs_schema()\n  -- TODO - define preferences\nend\n\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Hot Reload Handling in Defold Script\nDESCRIPTION: Shows implementation of hot reload callback for debugging and development.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_reload(self)\n  print(self.age) -- print the age of this game object\nend\n```\n\n----------------------------------------\n\nTITLE: Optimized URL Caching in Lua\nDESCRIPTION: Improved version of URL handling where the URL is cached during initialization for better performance in frequent operations.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/optimization-speed.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n    function init(self)\n        self.enemy_url = msg.url(\"enemy\")\n    end\n\n    function update(self, dt)\n        local pos = go.get_position(self.enemy_url)\n        -- do something with pos\n    end\n```\n\n----------------------------------------\n\nTITLE: Controlling Particle Effects with Lua in Defold\nDESCRIPTION: This code snippet demonstrates how to start and stop particle effects using Lua scripting in Defold. It shows commands to play and stop a particle effect component named 'particles' on the current game object.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/particlefx.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- 开始当前游戏对象上的粒子特效组件 \"particles\" 的播放\nparticlefx.play(\"#particles\")\n\n-- 停止当前游戏对象上的粒子特效组件 \"particles\" 的播放\nparticlefx.stop(\"#particles\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Constant Buffers in Defold (Lua)\nDESCRIPTION: Demonstrates how to create a new constant buffer using `render.constant_buffer()`, set a uniform value (e.g., `tint` as a red `vmath.vector4`), and pass this custom buffer to `render.draw()` to override default shader constants for a specific draw call. Requires the Defold `render` and `vmath` modules. Note that constant buffers cannot be iterated using `pairs()` or `ipairs()`. Assumes execution within a Defold render script context.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/material.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nself.constants = render.constant_buffer() -- <1>\nself.constants.tint = vmath.vector4(1, 0, 0, 1) -- <2>\n...\nrender.draw(self.my_pred, {constants = self.constants}) -- <3>\n```\n\n----------------------------------------\n\nTITLE: Visual Profiler Control Functions\nDESCRIPTION: List of available functions for controlling the visual profiler's presentation of data in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/profiling.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nprofiler.set_ui_mode()\nprofiler.set_ui_view_mode()\nprofiler.view_recorded_frame()\n```\n\n----------------------------------------\n\nTITLE: Enabling Visual Profiler in Defold\nDESCRIPTION: Code snippet showing how to toggle the visual profiler on hot reload in Defold. The visual profiler displays live information overlaid on the running application.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/profiling.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_reload(self)\n    -- Toggle the visual profiler on hot reload.\n    profiler.enable_ui(true)\nend\n```\n\n----------------------------------------\n\nTITLE: Installing ImageMagick on Linux for Icon Creation\nDESCRIPTION: Command to install the ImageMagick software suite on Linux systems using apt package manager.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/windows.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install imagemagick\n```\n\n----------------------------------------\n\nTITLE: Setting Label Text in Lua\nDESCRIPTION: This snippet demonstrates how to set the text of a label component at runtime using the label.set_text() function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/label.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n    -- Set the text of the \"my_label\" component in the same game object\n    -- as this script.\n    label.set_text(\"#my_label\", \"New text\")\nend\n```\n\n----------------------------------------\n\nTITLE: Getting GUI Node Color in Lua\nDESCRIPTION: Shows how to retrieve the color property of a GUI node using gui.get_color()\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/properties.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Get the color of the button\nlocal node = gui.get_node(\"button\")\nlocal color = gui.get_color(node)\n```\n\n----------------------------------------\n\nTITLE: Magic Block Light Effects Management in Lua\nDESCRIPTION: Functions for managing light effects on magic blocks, including counting regions, shutting down lights, and highlighting connected blocks.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal function count_magic_regions(blocks)\n    local maxr = 0\n    for i, m in pairs(blocks) do\n        if m.region > maxr then\n            maxr = m.region\n        end\n    end\n    return maxr\nend\n\nlocal function shutdown_lined_up_magic(self)\n    for i, m in ipairs(self.lined_up_magic) do\n        msg.post(m.id, \"lights_off\")\n    end\nend\n\nlocal function highlight_magic(blocks)\n    for i, m in pairs(blocks) do\n        if m.neighbors > 0 then\n            msg.post(m.id, \"lights_on\")\n        else\n            msg.post(m.id, \"lights_off\")\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Stopping Sound Playback\nDESCRIPTION: Simple example showing how to stop a playing sound.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sound.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nsound.stop(\"go#sound\")\n```\n\n----------------------------------------\n\nTITLE: Modern GLSL Version Declaration\nDESCRIPTION: Version declaration required for modern GLSL shaders in Defold 1.9.2+. This enables the modern shader pipeline.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n#version 140\n```\n\n----------------------------------------\n\nTITLE: Animating Background Layer 2 for Parallax in Defold (Lua)\nDESCRIPTION: Demonstrates a parallax effect for the second background layer by incrementing its x-position by 0.5 units per frame. Intended for a game object with a tilemap and script, moving more slowly than the first layer to simulate depth. Uses Defold's go API to retrieve and set positions; all values are hardcoded. The script should be attached to the intended background layer object.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/parallax.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- file: background2.script\\n\\n-- the background is a tilemap in a gameobject\\n-- we move the gameobject for the parallax effect\\n\\nfunction update(self, dt)\\n    -- decrease x-position by 0.5 units per frame for parallax effect\\n    local p = go.get_position()\\n    p.x = p.x + 0.5\\n    go.set_position(p)\\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Analog Stick Extreme Positions in Defold\nDESCRIPTION: This snippet shows how to use analog sticks as digital directional input in Defold. It checks if the left stick has been moved to its extreme down position, treating it as a digital button press.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"gamepad_lstick_down\") and action.pressed then\n        -- left stick was moved to its extreme down position\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Live Update Archives and Collection Proxies in Lua for Defold\nDESCRIPTION: This script demonstrates how to handle live update archives and collection proxies in Defold. It includes functions for mounting zip files, downloading archives, and loading levels with missing resources. The script uses Defold's liveupdate, collectionproxy, and http modules.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/live-update-scripting.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- You'll need to track which archive contains which content\n-- In this example, we only use a single liveupdate archive, containing all missing resource.\n-- If you are using multiple archive, you need to structure the downloads accordingly\nlocal lu_infos = {\n    liveupdate = {\n        name = \"liveupdate\",\n        priority = 10,\n    }\n}\n\nlocal function get_lu_info_for_level(level_name)\n    if level_name == \"level1\" then\n        return lu_infos['liveupdate']\n    end\nend\n\nlocal function mount_zip(self, name, priority, path, callback)\n\tliveupdate.add_mount(name, \"zip:\" .. path, priority, function(_uri, _path, _status) -- <1>\n\t\tcallback(_uri, _path, _status)\n\tend)\nend\n\nfunction init(self)\n    self.http_url = sys.get_config_string(\"game.http_url\", nil) -- <2>\n\n    local level_name = \"level1\"\n\n    local info = get_lu_info_for_level(level_name) -- <3>\n\n    msg.post(\"#\", \"load_level\", {level = \"level1\", info = info }) -- <4>\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"load_level\") then\n        local missing_resources = collectionproxy.missing_resources(\"#\" .. message.level) -- <5>\n\n        if #missing_resources then\n            msg.post(\"#\", \"download_archive\", message) -- <6>\n        else\n            msg.post(\"#\" .. message.level, \"load\")\n        end\n\n    elseif message_id == hash(\"download_archive\") then\n\t\tlocal zip_filename = message.info.name .. \".zip\"\n\t\tlocal download_path = sys.get_save_file(\"mygame\", zip_filename)\n        local url = self.http_url .. \"/\" .. zip_filename\n\n        -- Make the request. You can use credentials\n        http.request(url, \"GET\", function(self, id, response) -- <7>\n\t\t\tif response.status == 200 or response.status == 304 then\n\t\t\t\tmount_zip(self, message.info.name, message.info.priority, download_path, function(uri, path, status) -- <8>\n\t\t\t\t\tmsg.post(\"#\", \"load_level\", message) -- try to load the level again\n\t\t\t\tend)\n\n\t\t\telse\n\t\t\t\tprint(\"Failed to download archive \", download_path, \"from\", url, \":\", response.status)\n\t\t\tend\n\t\tend, nil, nil, {path=download_path})\n\n    elseif message_id == hash(\"proxy_loaded\") then -- the level is loaded, and we can enable it\n        msg.post(sender, \"init\")\n        msg.post(sender, \"enable\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Printing Save File Path in Lua for Defold\nDESCRIPTION: This snippet demonstrates how to print the path of the save file in Defold, which is useful for locating the application support folder where live update resources are stored.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/live-update.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nprint(sys.get_save_file(\"\", \"\"))\n```\n\n----------------------------------------\n\nTITLE: Handling Physics World Limitations in Defold\nDESCRIPTION: Example showing how to work around physics world limitations by using message passing to handle physics operations that can't be performed directly in the listener.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/physics-events.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function physics_world_listener(self, event, data)\n    if event == hash(\"contact_point_event\") then\n        local position_a = data.a.normal * SIZE\n        local position_b =  data.b.normal * SIZE\n        local url_a = msg.url(nil, data.a.id, \"collisionobject\")\n        local url_b = msg.url(nil, data.b.id, \"collisionobject\")\n        -- fill the message in the same way arguments should be passed to `physics.create_joint()`\n        local message = {physics.JOINT_TYPE_FIXED, url_a, \"joind_id\", position_a, url_b, position_b, {max_length = SIZE}}\n        -- send message to the object itself\n        msg.post(\".\", \"create_joint\", message)\n    end\nend\n\nfunction on_message(self, message_id, message)\n    if message_id == hash(\"create_joint\") then\n        -- unpack message with function arguments\n        physics.create_joint(unpack(message))\n    end\nend\n\nfunction init(self)\n    physics.set_listener(physics_world_listener)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Sound Gate\nDESCRIPTION: Example of sending a message to the sound gate system to play a gated sound.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sound.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"/sound_gate#script\", \"play_gated_sound\", { soundcomponent = \"/sounds#explosion1\", gain = 1.0 })\n```\n\n----------------------------------------\n\nTITLE: URL Handling Examples in Lua\nDESCRIPTION: Different methods of accessing game object positions, showing inefficient approaches using strings and hashes that require conversion to URLs.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/optimization-speed.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n    local pos = go.get_position(\"enemy\")\n    local pos = go.get_position(hash(\"enemy\"))\n    local pos = go.get_position(msg.url(\"enemy\"))\n    -- do something with pos\n```\n\n----------------------------------------\n\nTITLE: Checking Binary UUID\nDESCRIPTION: Command to verify the UUID of a binary file for debug symbol matching.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code-ios.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ dwarfdump -u <PathToBinary>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Extension Manifest in YAML\nDESCRIPTION: An example of an ext.manifest file that defines a C++ extension symbol called \"MyExtension\". This manifest is required for all Defold native extensions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# C++ symbol in your extension\nname: \"MyExtension\"\n```\n\n----------------------------------------\n\nTITLE: Modern Texture Sampling in GLSL\nDESCRIPTION: Demonstrates the unified 'texture' function for sampling different texture types\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_6\n\nLANGUAGE: glsl\nCODE:\n```\nuniform sampler2D my_texture;\nuniform sampler2DArray my_texture_array;\n\n// instead of:\n// vec4 sampler_2d = texture2D(my_texture, uv);\n// vec4 sampler_2d_array = texture2DArray(my_texture_array, vec3(uv, slice));\n// do:\nvec4 sampler_2d = texture(my_texture, uv);\nvec4 sampler_2d_array = texture(my_texture_array, vec3(uv, slice));\n```\n\n----------------------------------------\n\nTITLE: Stopping a Particle Effect in Defold GUI\nDESCRIPTION: This code snippet shows how to stop a running particle effect by getting a reference to the particle node and calling the stop_particlefx function. It assumes the particle effect has already been started.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui-particlefx.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- stop the particle effect\nlocal particles_node = gui.get_node(\"particlefx\")\ngui.stop_particlefx(particles_node)\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine Arguments in HTML5\nDESCRIPTION: Shows how to configure engine arguments in the HTML setup script to pass custom configuration parameters to the game.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script id='engine-setup' type='text/javascript'>\nvar extra_params = {\n    ...,\n    engine_arguments: [\"--config=foo1=bar1\",\"--config=foo2=bar2\"],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Preferences Usage Example\nDESCRIPTION: Demonstrates how to get and set preferences using the editor API\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n-- Get a specific preference\neditor.prefs.get(\"my_json_formatter.indent.type\")\n-- Returns: \"spaces\"\n\n-- Get an entire preference group\neditor.prefs.get(\"my_json_formatter\")\n-- Returns:\n-- {\n--   jq_path = \"\",\n--   indent = {\n--     size = 2,\n--     type = \"spaces\"\n--   }\n-- }\n\n-- Set multiple nested preferences at once\neditor.prefs.set(\"my_json_formatter.indent\", {\n    type = \"tabs\",\n    size = 1\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Heap Usage in Defold HTML5 Games using Lua\nDESCRIPTION: This Lua snippet is intended for use within Defold projects to monitor the current heap memory usage at runtime when running as an HTML5 build. It uses the 'html5.run' function to execute JavaScript in the browser context and retrieves the size of the WebAssembly heap (HEAP8) in megabytes. Key dependencies are the Defold runtime and access to the 'html5' Lua module. The 'mem' variable holds the calculated value which is then printed via 'print(mem)'. The snippet should be placed inside an update or relevant function, and only runs when the 'html5' variable is truthy. Inputs: none. Output: numeric; logs heap size in MB to the Defold console.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/optimization-memory-html5.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif html5 then\\n    local mem = tonumber(html5.run(\"HEAP8.length\") / 1024 / 1024)\\n    print(mem)\\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Lua Module with Closures for State Management\nDESCRIPTION: This snippet shows how to use a Lua module that uses closures for state management, demonstrating the simplified syntax for method calls.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nlocal m = require \"main.mymodule\"\nlocal my_state = m.new(42)\nmy_state.alter_state(1)\nprint(my_state.get_state())\n```\n\n----------------------------------------\n\nTITLE: Sending \"reset\" Message to Current Script Component in Lua\nDESCRIPTION: This Lua snippet illustrates using the '#' shorthand address to send a `reset` message to the current script component itself using Defold's `msg.post` function. This allows a script to trigger its own `on_message` function handler for the \"reset\" message, often used for resetting its internal state.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/url-shorthands.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Post \"reset\" to the current script\nmsg.post(\"#\", \"reset\")\n```\n\n----------------------------------------\n\nTITLE: Counting Tile Inversions in Lua\nDESCRIPTION: The `inversions(t)` function calculates the number of inversions in a given tile list `t`. An inversion is counted whenever a tile precedes another tile with a lower number, excluding comparisons involving the empty tile (represented by 0). This count is crucial for determining puzzle solvability.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/15-puzzle.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Count the number of inversions in a list of tiles\nlocal function inversions(t)\n    local inv = 0\n    for i=1, #t do\n        for j=i+1, #t do\n            if t[i] > t[j] and t[j] ~= 0 then -- <1>\n                inv = inv + 1\n            end\n        end\n    end\n    return inv\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Lua Module with Encapsulation\nDESCRIPTION: This snippet shows how to create a basic Lua module that encapsulates data and functions. It demonstrates proper use of local scope to avoid global pollution.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal M = {}\n\n-- private\nlocal message = \"Hello world!\"\n\nfunction M.hello()\n    print(message)\nend\n\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Using a Stateless Lua Module with External State\nDESCRIPTION: This snippet demonstrates how to use a stateless Lua module that externalizes state management, creating and manipulating a state object.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal m = require \"main.mymodule\"\nlocal my_state = m.new(42)\nm.alter_state(my_state, 1)\nprint(m.get_state(my_state)) --> 43\n```\n\n----------------------------------------\n\nTITLE: Identifier for x86_64 iOS Simulator Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for the 64-bit x86 iOS Simulator environment within the Defold build system. Used for testing iOS builds on macOS hardware.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n`x86_64-ios`\n```\n\n----------------------------------------\n\nTITLE: Setting GameObject Position Component in Lua\nDESCRIPTION: Example showing how to set a specific component (x) of a game object's position property using go.set()\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/properties.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Set the x position of \"game_object\" to 10.\ngo.set(\"game_object\", \"position.x\", 10)\n```\n\n----------------------------------------\n\nTITLE: Modern GLSL Varying Variable Declaration\nDESCRIPTION: Examples showing how to declare varying variables in both vertex and fragment shaders using modern GLSL syntax with 'in' and 'out' keywords.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\n// In vertex shader:\nout vec4 var_color;\n\n// In fragment shader:\nin vec4 var_color;\n```\n\n----------------------------------------\n\nTITLE: Using Arithmetic Operators in Lua - Lua\nDESCRIPTION: Demonstrates basic arithmetic operations (+, -, *, /, ^) in Lua, including use of negation and exponentiation. No external dependencies are required. Shows combining operations and how operator precedence affects results; prints the numeric result directly.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\na = -1\nprint(a * 2 + 3 / 4^5) --> -1.9970703125\n```\n\n----------------------------------------\n\nTITLE: Using Relational and Comparison Operators in Lua - Lua\nDESCRIPTION: Shows how relational operators (<, >, <=, >=, ==, ~=) work in Lua with variables and values of different types (numbers, strings). Highlights reference-based comparison for tables, userdata, and functions. No dependencies; outputs Boolean results or descriptive messages.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\na = 5\nb = 6\n\nif a <= b then\n    print(\"a is less than or equal to b\")\nend\n\nprint(\"A\" < \"a\") --> true\nprint(\"aa\" < \"ab\") --> true\nprint(10 == \"10\") --> false\nprint(tostring(10) == \"10\") --> true\n```\n\n----------------------------------------\n\nTITLE: Handling Game Input and Chain Removal in Lua\nDESCRIPTION: Implementation of touch input handling for block chain removal and magic block sliding. Manages block chain validation and cleanup of visual connectors.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"touch\") and action.released then\n        self.dragging = false\n\n        if #self.chain > 1 then\n            remove_chain(self)\n            slide_magic_blocks(self)\n            nilremoved(self)\n            slide_board(self)\n        end\n        self.chain = {}\n        for i, c in ipairs(self.connectors) do\n            go.delete(c)\n        end\n        self.connectors = {}\n    end\n```\n\n----------------------------------------\n\nTITLE: Accessing Bundle Resources in Defold\nDESCRIPTION: Demonstrates how to access files bundled with your application using the application path and standard I/O functions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/file-access.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal path = sys.get_application_path()\nlocal f = io.open(path .. \"/mycommonfile.txt\", \"rb\")\nlocal txt, err = f:read(\"*a\")\nif not txt then\n\tprint(err)\n\treturn\nend\nprint(txt)\n```\n\n----------------------------------------\n\nTITLE: Canceling Property Animations in Defold\nDESCRIPTION: Demonstrates how to stop ongoing animations for a specific property using go.cancel_animations().\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/property-animation.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Stop euler z rotation animation on the current game object\ngo.cancel_animations(\".\", \"euler.z\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Level Controller Script in Defold Lua\nDESCRIPTION: This script controls the level's behavior, including setting the running speed. It uses a script property to define a default speed value that can be customized in the editor, and sends this speed to the ground controller via messaging.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- controller.script\ngo.property(\"speed\", 360) -- <1>\n\nfunction init(self)\n    msg.post(\"ground/controller#ground\", \"set_speed\", { speed = self.speed })\nend\n```\n\n----------------------------------------\n\nTITLE: Screen Blend Mode Calculation in GLSL\nDESCRIPTION: Screen blending that brightens colors by inverting multiply blend mode calculation\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/blend-modes.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\nsrc.rgb - dst.rgb * dst.rgb\n```\n\n----------------------------------------\n\nTITLE: Implementing Level Complete Dialog in Defold\nDESCRIPTION: A script for the level completion dialog that handles showing/hiding the dialog and sends a next_level message when the player clicks continue.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_26\n\nLANGUAGE: Lua\nCODE:\n```\n-- level_complete.gui_script\nfunction init(self)\n    msg.post(\"#\", \"hide\")\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"hide\") then\n        msg.post(\"#\", \"disable\")\n        msg.post(\".\", \"release_input_focus\")\n    elseif message_id == hash(\"show\") then\n        msg.post(\"#\", \"enable\")\n        msg.post(\".\", \"acquire_input_focus\")\n    end\nend\n\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"touch\") and action.pressed then\n        local continue = gui.get_node(\"continue\")\n\n        if gui.pick_node(continue, action.x, action.y) then\n            msg.post(\"board#script\", \"next_level\")\n            msg.post(\"#\", \"hide\")\n        end\n    end\n    -- Consume all input until we're gone.\n    return true\nend\n```\n\n----------------------------------------\n\nTITLE: Automatic Number-String Conversions in Lua - Lua\nDESCRIPTION: Illustrates Lua's ability to automatically convert strings to numbers when used in arithmetic expressions. Requires no dependencies. The '+' operator converts the string operand to a numeric type and performs addition; outputs the result as a number.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nprint(\"10\" + 1) --> 11\n```\n\n----------------------------------------\n\nTITLE: Defold Built-in Sprite Fragment Shader (sprite.fp) in GLSL\nDESCRIPTION: The standard Defold fragment shader (`sprite.fp`) for sprites. It receives interpolated UV coordinates (`var_texcoord0`) from the vertex shader. It uses these coordinates to sample the sprite's texture (`DIFFUSE_TEXTURE` sampler uniform) and applies a `tint` color (uniform vec4), handling pre-multiplied alpha correctly. The final calculated color is outputted via `gl_FragColor`.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_15\n\nLANGUAGE: glsl\nCODE:\n```\n// sprite.fp\nvarying mediump vec2 var_texcoord0;             // [1]\n\nuniform lowp sampler2D DIFFUSE_TEXTURE;         // [2]\nuniform lowp vec4 tint;                         // [3]\n\nvoid main()\n{\n  lowp vec4 tint_pm = vec4(tint.xyz * tint.w, tint.w);          // [4]\n  lowp vec4 diff = texture2D(DIFFUSE_TEXTURE, var_texcoord0.xy);// [5]\n  gl_FragColor = diff * tint_pm;                                // [6]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Java Access Bridge in .accessibility.properties (Plaintext)\nDESCRIPTION: Shows the configuration lines within the `.accessibility.properties` file that cause the `java.awt.AWTError: Assistive Technology not found` crash. To resolve the issue, prepend these lines with a hash mark (`#`) to comment them out. This file is typically located in the user's home directory on Windows (`C:\\Users\\<username>`).\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/windows-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nassistive_technologies=com.sun.java.accessibility.AccessBridge\nscreen_magnifier_present=true\n```\n\n----------------------------------------\n\nTITLE: Applying Texture to Model Component\nDESCRIPTION: Sets a texture on a model component using the go.set() function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/atlas.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ngo.set(\"#model\", \"texture0\", my_texture_id)\n```\n\n----------------------------------------\n\nTITLE: Animation Completion Callback in Defold (Lua)\nDESCRIPTION: Shows how to implement a callback function that triggers when a non-looping animation completes. Useful for chaining animations or triggering events after animation completion.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/model-animation.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function wiggle_done(self, message_id, message, sender)\n    -- Done animating\nend\n\nfunction init(self)\n    model.play_anim(\"#model\", \"wiggle\", go.PLAYBACK_ONCE_FORWARD, nil, wiggle_done)\nend\n```\n\n----------------------------------------\n\nTITLE: Message Handling with Unhashed Strings in Lua\nDESCRIPTION: Example showing inefficient message handling where strings are hashed on every message received, leading to unnecessary overhead.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/optimization-speed.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"message1\") then\n        msg.post(sender, hash(\"message3\"))\n    elseif message_id == hash(\"message2\") then\n        msg.post(sender, hash(\"message4\"))\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Block Sliding Logic in Lua\nDESCRIPTION: Function to handle magic block sliding mechanics on the game board. Processes blocks row by row and handles sliding animations based on available spaces.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\nlocal function slide_magic_blocks(self)\n    local row_m\n    for y = 0,boardheight - 1 do\n        row_m = {}\n        for x = 0,boardwidth - 1 do\n            if self.board[x][y] ~= nil and self.board[x][y] ~= hash(\"removing\") and self.board[x][y].color == hash(\"magic\") then\n                table.insert(row_m, self.board[x][y])\n            end\n        end\n\n        local mc = #row_m + 1\n        while #row_m < mc do\n            mc = #row_m\n            for i, m in pairs(row_m) do\n                local x = m.x\n                if y > 0 and self.board[x][y-1] == hash(\"removing\") then\n                    row_m[i] = nil\n                elseif x > 0 and self.board[x-1][y] == hash(\"removing\") then\n                    self.board[x-1][y] = self.board[x][y]\n                    self.board[x-1][y].x = x - 1\n                    go.animate(self.board[x][y].id, \"position.x\", go.PLAYBACK_ONCE_FORWARD, edge + blocksize / 2 + blocksize * (x - 1), go.EASING_OUTBOUNCE, 0.3)\n                    go.set(self.board[x][y].id, \"position.z\", (x - 1) * -0.1 + y * 0.01)\n                    self.board[x][y] = hash(\"removing\")\n                    row_m[i] = nil\n                elseif x < boardwidth - 1 and self.board[x + 1][y] == hash(\"removing\") then\n                    self.board[x+1][y] = self.board[x][y]\n                    self.board[x+1][y].x = x + 1\n                    go.animate(self.board[x+1][y].id, \"position.x\", go.PLAYBACK_ONCE_FORWARD, edge + blocksize / 2 + blocksize * (x + 1), go.EASING_OUTBOUNCE, 0.3)\n                    go.set(self.board[x+1][y].id, \"position.z\", (x + 1) * -0.1 + y * 0.01)\n                    self.board[x][y] = hash(\"removing\")\n                    row_m[i] = nil\n                end\n            end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Engine Arguments in Lua Runtime\nDESCRIPTION: Demonstrates how to retrieve engine configuration parameters at runtime using sys.get_config().\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal foo1 = sys.get_config(\"foo1\")\nlocal foo2 = sys.get_config(\"foo2\")\nprint(foo1) -- bar1\nprint(foo2) -- bar2\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading with Dynamic Collection Factory in Lua\nDESCRIPTION: Shows how to load collection factory resources asynchronously using the load function with a callback, allowing spawning when resources are ready.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-factory.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction load_complete(self, url, result)\n    -- Loading is complete, resources are ready to spawn\n    self.go_ids = collectionfactory.create(url)\nend\n\nfunction init(self)\n    -- No factory resources are loaded when the collection factory's\n    -- parent collection is loaded. Calling load will load the resources.\n    collectionfactory.load(\"#factory\", load_complete)\nend\n\nfunction final(self)\n    -- Delete game object. Will decref resources.\n    -- In this case resources aren't deleted since the collection factory\n    -- component still holds a reference.\n    go.delete(self.go_ids)\n\n    -- Calling unload will decref resources held by the factory component,\n    -- resulting in resources being destroyed.\n    collectionfactory.unload(\"#factory\")\nend\n```\n\n----------------------------------------\n\nTITLE: Creating GameObject Instance in Lua with Defold Factory\nDESCRIPTION: Example of using a Defold factory component to spawn a game object instance. The factory.create function returns the id of the created game object which can be stored for later reference.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal logo_id = factory.create(\"factories#logo_factory\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in Defold Editor Script\nDESCRIPTION: This Lua snippet demonstrates how to implement lifecycle hooks in a Defold editor script. It shows an example of the 'on_build_started' hook, which writes build information to a JSON file when a build is initiated.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal M = {}\n\nfunction M.on_build_started(opts)\n  local file = io.open(\"assets/build.json\", \"w\")\n  file:write('{\"build_time\": \"' .. os.date() .. '\"}')\n  file:close()\nend\n\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Changing Dynamic Prototype in Factory Component in Lua\nDESCRIPTION: This example demonstrates how to change the prototype of a factory component at runtime when the 'Dynamic Prototype' option is enabled.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/factory.md#2025-04-23_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nfactory.unload(\"#factory\") -- unload the previous resources\nfactory.set_prototype(\"#factory\", \"/main/levels/enemyA.goc\")\nlocal enemy_id = factory.create(\"#factory\")\n```\n\n----------------------------------------\n\nTITLE: Basic Lua Syntax and Comments\nDESCRIPTION: Demonstrates basic Lua syntax including single-line and block comments, statement separation, and conditional blocks.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n--[[\nHere is a block of comments that can run\nover several lines in the source file.\n--]]\n\na = 10\nb = 20 ; c = 30 -- two statements on one line\n\nif my_variable == 3 then\n    call_some_function(true) -- Here is a line comment\nelse\n    call_another_function(false)\nend\n```\n\n----------------------------------------\n\nTITLE: Getting URL in HTML5 Game\nDESCRIPTION: Shows how to access the current window location URL from Lua code using html5.run().\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal url = html5.run(\"window.location\")\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Lua Print Function Reference\nDESCRIPTION: Reference to Lua's print function used for debug logging in Defold engine.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/build-variants.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nprint()\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Servers in Defold Editor Script\nDESCRIPTION: This Lua function defines language server configurations for the Defold editor. It specifies the command to start the language server, the languages it supports, and file patterns to watch for changes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction M.get_language_servers()\n  local command = 'build/plugins/my-ext/plugins/bin/' .. editor.platform .. '/lua-lsp'\n  if editor.platform == 'x86_64-win32' then\n    command = command .. '.exe'\n  end\n  return {\n    {\n      languages = {'lua'},\n      watched_files = {\n        { pattern = '**/.luacheckrc' }\n      },\n      command = {command, '--stdio'}\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Reactive Timer-Based Implementation\nDESCRIPTION: Example of reactive implementation using timer callbacks instead of update loop.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function send_first()\n\tmsg.post(\"some_object\", \"some_message\")\nend\n\nfunction init(self)\n\t-- Wait 2s then call send_first()\n\ttimer.delay(2, false, send_first)\nend\n\nlocal function send_second()\n\tmsg.post(\"another_object\", \"another_message\")\nend\n\nfunction on_message(self, message_id, message, sender)\n\tif message_id == hash(\"response\") then\n\t\t-- Wait 5s then call send_second()\n\t\ttimer.delay(5, false, send_second)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Connector Game Object in Lua\nDESCRIPTION: This script initializes a connector game object by setting its scale and z-position. It's used to visually indicate linked blocks on the game board.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- connector.script\nfunction init(self)\n    go.set_scale(0.18)              -- Set the scale of this game object.\n    go.set(\".\", \"position.z\", 1)    -- Put on top.\nend\n```\n\n----------------------------------------\n\nTITLE: Monitoring Collection Time Step Changes in Defold\nDESCRIPTION: Demonstrates a debug script that prints the dt (delta time) value in update() to monitor the effects of time step changes. This helps visualize how time step adjustments affect game object updates.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-proxy.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction update(self, dt)\n    print(\"update() with timestep (dt) \" .. dt)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Color Change Messages in Defold Block Script\nDESCRIPTION: This `on_message` function within `block.script` handles messages sent to individual block game objects, specifically listening for \"make_orange\" and \"make_green\". Upon receiving these messages (sent from `board.script`'s `on_input`), it updates the block's sprite animation to the corresponding color (\"orange\" or \"green\") using `sprite.play_flipbook`, providing visual feedback for the input handling.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- block.script\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"make_orange\") then\n        sprite.play_flipbook(\"#sprite\", hash(\"orange\"))\n    elseif message_id == hash(\"make_green\") then\n        sprite.play_flipbook(\"#sprite\", hash(\"green\"))\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Toggling Physics Debug Visualization\nDESCRIPTION: Shows how to enable physics debug visualization in Defold using message posting.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nmsg.post(\"@system:\", \"toggle_physics_debug\")\n```\n\n----------------------------------------\n\nTITLE: Mapping Android KeyEvents to Defold Button Indices\nDESCRIPTION: Provides a reference table mapping Android `AKEYCODE_*` constants (representing physical button presses) to the numerical indices used within Defold's `.gamepads` configuration file for defining button actions on Android. This is necessary for customizing gamepad layouts. Relevant from Defold 1.2.183, with additional mappings from 1.2.186.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Key event to button index   | Index | Version |\n|-----------------------------|-------|---------|\n| `AKEYCODE_BUTTON_A`           | 0     | 1.2.183 |\n| `AKEYCODE_BUTTON_B`           | 1     | 1.2.183 |\n| `AKEYCODE_BUTTON_C`           | 2     | 1.2.183 |\n| `AKEYCODE_BUTTON_X`           | 3     | 1.2.183 |\n| `AKEYCODE_BUTTON_L1`          | 4     | 1.2.183 |\n| `AKEYCODE_BUTTON_R1`          | 5     | 1.2.183 |\n| `AKEYCODE_BUTTON_Y`           | 6     | 1.2.183 |\n| `AKEYCODE_BUTTON_Z`           | 7     | 1.2.183 |\n| `AKEYCODE_BUTTON_L2`          | 8     | 1.2.183 |\n| `AKEYCODE_BUTTON_R2`          | 9     | 1.2.183 |\n| `AKEYCODE_DPAD_CENTER`        | 10    | 1.2.183 |\n| `AKEYCODE_DPAD_DOWN`          | 11    | 1.2.183 |\n| `AKEYCODE_DPAD_LEFT`          | 12    | 1.2.183 |\n| `AKEYCODE_DPAD_RIGHT`         | 13    | 1.2.183 |\n| `AKEYCODE_DPAD_UP`            | 14    | 1.2.183 |\n| `AKEYCODE_BUTTON_START`       | 15    | 1.2.183 |\n| `AKEYCODE_BUTTON_SELECT`      | 16    | 1.2.183 |\n| `AKEYCODE_BUTTON_THUMBL`      | 17    | 1.2.183 |\n| `AKEYCODE_BUTTON_THUMBR`      | 18    | 1.2.183 |\n| `AKEYCODE_BUTTON_MODE`        | 19    | 1.2.183 |\n| `AKEYCODE_BUTTON_1`           | 20    | 1.2.186 |\n| `AKEYCODE_BUTTON_2`           | 21    | 1.2.186 |\n| `AKEYCODE_BUTTON_3`           | 22    | 1.2.186 |\n| `AKEYCODE_BUTTON_4`           | 23    | 1.2.186 |\n| `AKEYCODE_BUTTON_5`           | 24    | 1.2.186 |\n| `AKEYCODE_BUTTON_6`           | 25    | 1.2.186 |\n| `AKEYCODE_BUTTON_7`           | 26    | 1.2.186 |\n| `AKEYCODE_BUTTON_8`           | 27    | 1.2.186 |\n| `AKEYCODE_BUTTON_9`           | 28    | 1.2.186 |\n| `AKEYCODE_BUTTON_10`          | 29    | 1.2.186 |\n| `AKEYCODE_BUTTON_11`          | 30    | 1.2.186 |\n| `AKEYCODE_BUTTON_12`          | 31    | 1.2.186 |\n| `AKEYCODE_BUTTON_13`          | 32    | 1.2.186 |\n| `AKEYCODE_BUTTON_14`          | 33    | 1.2.186 |\n| `AKEYCODE_BUTTON_15`          | 34    | 1.2.186 |\n| `AKEYCODE_BUTTON_16`          | 35    | 1.2.186 |\n```\n\n----------------------------------------\n\nTITLE: Converting Star Nest Shadertoy Fragment Shader to Defold (GLSL)\nDESCRIPTION: This GLSL fragment shader (`star-nest.fp`) is the Defold-adapted version of the 'Star Nest' shader from Shadertoy. It takes UV coordinates (`var_texcoord0`) as input from the vertex shader. Modifications include using `var_texcoord0` instead of `fragCoord`, handling resolution differences (initially static `vec2(1.0, 1.0)`), removing `iMouse` input, initializing `time` statically, and outputting the final color to `gl_FragColor`. The core volumetric rendering logic from the original shader remains largely unchanged.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/shadertoy.md#2025-04-23_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\n// Star Nest by Pablo Román Andrioli\n// This content is under the MIT License.\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nvarying mediump vec2 var_texcoord0; // <1>\n\nvoid main() // <2>\n{\n    // get coords and direction\n    vec2 res = vec2(1.0, 1.0); // <3>\n    vec2 uv = var_texcoord0.xy * res.xy - 0.5;\n    vec3 dir = vec3(uv * zoom, 1.0);\n    float time = 0.0; // <4>\n\n    float a1=0.5; // <5>\n    float a2=0.8;\n    mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n    mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n    dir.xz*=rot1;\n    dir.xy*=rot2;\n    vec3 from = vec3(1.0, 0.5, 0.5);\n    from += vec3(time * 2.0, time, -2.0);\n    from.xz *= rot1;\n    from.xy *= rot2;\n\n    //volumetric rendering\n    float s = 0.1, fade = 1.0;\n    vec3 v = vec3(0.0);\n    for(int r = 0; r < volsteps; r++) {\n        vec3 p = from + s * dir * 0.5;\n        // tiling fold\n        p = abs(vec3(tile) - mod(p, vec3(tile * 2.0)));\n        float pa, a = pa = 0.0;\n        for (int i=0; i < iterations; i++) {\n            // the magic formula\n            p = abs(p) / dot(p, p) - formuparam;\n            // absolute sum of average change\n            a += abs(length(p) - pa);\n            pa = length(p);\n        }\n        //dark matter\n        float dm = max(0.0, darkmatter - a * a * 0.001);\n        a *= a * a;\n        // dark matter, don't render near\n        if(r > 6) fade *= 1.0 - dm;\n        v += fade;\n        // coloring based on distance\n        v += vec3(s, s * s, s * s * s * s) * a * brightness * fade;\n        fade *= distfading;\n        s += stepsize;\n    }\n    // color adjust\n    v = mix(vec3(length(v)), v, saturation);\n    gl_FragColor = vec4(v * 0.01, 1.0); // <6>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Collision Between Objects in ActionScript\nDESCRIPTION: Code demonstrating how to use the hitTestObject method for collision detection between two movie clips in Flash. This performs a bounding box collision test.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/flash.md#2025-04-23_snippet_3\n\nLANGUAGE: ActionScript\nCODE:\n```\nbullet.hitTestObject(bullseye);\n```\n\n----------------------------------------\n\nTITLE: Changing Dynamic Prototype for Collection Factory in Lua\nDESCRIPTION: Demonstrates how to change which collection prototype a factory component creates at runtime using the set_prototype function when Dynamic Prototype is enabled.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/collection-factory.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\ncollectionfactory.unload(\"#factory\") -- unload the previous resources\ncollectionfactory.set_prototype(\"#factory\", \"/main/levels/level1.collectionc\")\nlocal ids = collectionfactory.create(\"#factory\")\n```\n\n----------------------------------------\n\nTITLE: Pattern-Based Route Implementation\nDESCRIPTION: Shows how to create a route with URL patterns to extract parameters from the request path\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nhttp.server.route(\"/my-extension/setting/{category}.{key}\", function(request)\n  return http.server.response(200, tostring(editor.get(\"/game.project\", request.category .. \".\" .. request.key)))\nend)\n```\n\n----------------------------------------\n\nTITLE: Lua Preprocessing Example in Defold\nDESCRIPTION: Demonstrates use of preprocessing directives for conditional code inclusion based on build variants.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/script.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- Use one of the following keywords: RELEASE, DEBUG or HEADLESS\n--#IF DEBUG\nlocal lives_num = 999\n--#ELSE \nlocal lives_num = 3\n--#ENDIF\n```\n\n----------------------------------------\n\nTITLE: Testing Point Collision with Shape in ActionScript\nDESCRIPTION: Example of using hitTestPoint method with shapeFlag parameter for more accurate pixel-level collision detection in Flash. This checks if a point intersects with an object's shape.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/flash.md#2025-04-23_snippet_4\n\nLANGUAGE: ActionScript\nCODE:\n```\nbullseye.hitTestPoint(bullet.x, bullet.y, true);\n```\n\n----------------------------------------\n\nTITLE: JSON Request Handler Route Implementation\nDESCRIPTION: Demonstrates creating a route that accepts JSON POST requests and echoes back the request details\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nhttp.server.route(\"/my-extension/echo-request\", \"POST\", \"json\", function(request)\n  return http.server.json_response(request)\nend)\n```\n\n----------------------------------------\n\nTITLE: Lua Function Operations\nDESCRIPTION: Illustrates function declaration and usage, including anonymous functions and function passing.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Assign 'my_plus' to function\nmy_plus = function(p, q)\n    return p + q\nend\n\nprint(my_plus(4, 5)) --> 9\n\n-- Convenient syntax to assign function to variable 'my_mult'\nfunction my_mult(p, q)\n    return p * q\nend\n\nprint(my_mult(4, 5)) --> 20\n\n-- Takes a function as parameter 'func'\nfunction operate(func, p, q)\n    return func(p, q) -- Calls the provided function with parameters 'p' and 'q'\nend\n\nprint(operate(my_plus, 4, 5)) --> 9\nprint(operate(my_mult, 4, 5)) --> 20\n\n-- Create an adder function and return it\nfunction create_adder(n)\n    return function(a)\n        return a + n\n    end\nend\n\nadder = create_adder(2)\nprint(adder(3)) --> 5\nprint(adder(10)) --> 12\n```\n\n----------------------------------------\n\nTITLE: Using Render Resources in Defold Render Script\nDESCRIPTION: Demonstrates how to use render resources (materials and render targets) defined in the .render file within a render script.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/render.md#2025-04-23_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\n-- \"my_material\" 现在将用于优先级关联的所有绘制调用\nrender.enable_material(\"my_material\")\n-- 谓词绘制的任何内容都将以 \"my_render_target\" 结尾\nrender.set_render_target(\"my_render_target\")\nrender.draw(self.my_full_screen_predicate)\nrender.set_render_target(render.RENDER_TARGET_DEFAULT)\nrender.disable_material()\n\n-- 将渲染目标结果纹理绑定到通过优先级渲染的任何内容\nrender.enable_texture(0, \"my_render_target\", render.BUFFER_COLOR0_BIT)\nrender.draw(self.my_tile_predicate)\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete New File Dialog in Defold Editor\nDESCRIPTION: This code snippet creates a complete dialog for creating a new file, with a text input field that updates a local variable. It demonstrates handling user input and conditional actions based on dialog result.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts-ui.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- initial file name, will be replaced by the dialog\nlocal file_name = \"\"\nlocal create_file = editor.ui.show_dialog(editor.ui.dialog({\n    title = \"Create New File\",\n    content = editor.ui.horizontal({\n        padding = editor.ui.PADDING.LARGE,\n        spacing = editor.ui.SPACING.MEDIUM,\n        children = {\n            editor.ui.label({\n                text = \"New File Name\",\n                alignment = editor.ui.ALIGNMENT.CENTER\n            }),\n            editor.ui.string_field({\n                grow = true,\n                text = file_name,\n                -- Typing callback:\n                on_text_changed = function(new_text)\n                    file_name = new_text\n                end\n            })\n        }\n    }),\n    buttons = {\n        editor.ui.dialog_button({ text = \"Cancel\", cancel = true, result = false }),\n        editor.ui.dialog_button({ text = \"Create File\", default = true, result = true })\n    }\n}))\nif create_file then\n    print(\"create\", file_name)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Fragment Shader for UV Coordinate Testing in Defold (GLSL)\nDESCRIPTION: This initial GLSL fragment shader (`star-nest.fp`) is used for verifying the setup of the quad model and its UV coordinates (`var_texcoord0`) received from the vertex shader. It simply outputs the UV coordinates as color (X to red, Y to green), resulting in a gradient across the quad, allowing visual confirmation of correct coordinate mapping.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/shadertoy.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n// star-nest.fp\nvarying mediump vec2 var_texcoord0;\n\nvoid main()\n{\n    gl_FragColor = vec4(var_texcoord0.xy, 0.0, 1.0);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Console Output After Script Hot Reload\nDESCRIPTION: Example of console output showing the effect of hot reloading a script with a modified variable value. The output changes from printing '10' to printing '11' after the reload without any game restart.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/hot-reload.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n...\nDEBUG:SCRIPT: 10\nDEBUG:SCRIPT: 10\nDEBUG:SCRIPT: 10\nINFO:RESOURCE: /main/hunter.scriptc was successfully reloaded.\nDEBUG:SCRIPT: 11\nDEBUG:SCRIPT: 11\nDEBUG:SCRIPT: 11\n...\n```\n\n----------------------------------------\n\nTITLE: GLSL Header Guard Implementation\nDESCRIPTION: Shows how to implement header guards in GLSL to prevent multiple definitions\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_10\n\nLANGUAGE: glsl\nCODE:\n```\n// In pi.glsl\n#ifndef PI_GLSL_H\n#define PI_GLSL_H\n\nconst float PI = 3.14159265359;\n\n#endif // PI_GLSL_H\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Texture Resources in Defold GUI Components\nDESCRIPTION: This code demonstrates how to get and set texture resources in a GUI component at runtime. The example shows declaring a texture atlas property, retrieving the current atlas, assigning a new atlas to a theme ID, and verifying the change.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/gui.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ngo.property(\"mytheme\", resource.atlas(\"/assets/mytheme.atlas\"))\n\nfunction init(self)\n  -- get the texture file currently assigned to the texture with id 'theme'\n  print(go.get(\"#gui\", \"textures\", { key = \"theme\" })) -- /theme.atlas\n\n  -- set the texture with id 'theme' to the texture file assigned to the resource property 'mytheme'\n  go.set(\"#gui\", \"textures\", self.mytheme, { key = \"theme\" })\n\n  -- get the new texture file assigned to the texture with id 'theme'\n  print(go.get(\"#gui\", \"textures\", { key = \"theme\" })) -- /assets/mytheme.atlas\n\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Game Object Position in Lua\nDESCRIPTION: This snippet demonstrates how to set the x position of a game object using the go.set() function. It shows how to access sub-properties of vector3 types using dot notation.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/properties.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Set the x positon of \"game_object\" to 10.\ngo.set(\"game_object\", \"position.x\", 10)\n```\n\n----------------------------------------\n\nTITLE: Defining a Lua Function for Direction Animation\nDESCRIPTION: This snippet defines a function that determines the animation direction based on x and y coordinates. It's stored in a separate Lua file for reuse.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/modules.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction direction_animation(direction, char)\n    local d = \"\"\n    if direction.x > 0 then\n        d = \"right\"\n    elseif direction.x < 0 then\n        d = \"left\"\n    elseif direction.y > 0 then\n        d = \"up\"\n    elseif direction.y < 0 then\n        d = \"down\"\n    end\n    return hash(char .. \"-\" .. d)\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Engine Info in Lua\nDESCRIPTION: Code snippet showing how to get the Defold engine version information at runtime using the sys.get_engine_info() function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/faq/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nsys.get_engine_info()\n```\n\n----------------------------------------\n\nTITLE: Creating MovieClip Instance in ActionScript\nDESCRIPTION: Example of dynamically creating and adding a MovieClip instance to the Flash Stage\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_0\n\nLANGUAGE: actionscript\nCODE:\n```\nvar logo:Logo = new Logo();\naddChild(logo);\n```\n\n----------------------------------------\n\nTITLE: GLSL Include Path Examples\nDESCRIPTION: Demonstrates various ways to include GLSL source files using relative and absolute paths\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_9\n\nLANGUAGE: glsl\nCODE:\n```\n// Absolute path\n#include \"/main/my-snippet.glsl\"\n// The file is in the same folder\n#include \"my-snippet.glsl\"\n// The file is in a sub-folder on the same level as 'my-shader'\n#include \"sub-folder/my-snippet.glsl\"\n// The file is in a sub-folder on the parent directory, i.e /some-other-folder/my-snippet.glsl\n#include \"../some-other-folder/my-snippet.glsl\"\n// The file is on the parent directory, i.e /root-level-snippet.glsl\n#include \"../root-level-snippet.glsl\"\n```\n\n----------------------------------------\n\nTITLE: Looping with Repeat-Until in Lua - Lua\nDESCRIPTION: Demonstrates the use of 'repeat-until' to iterate through a table until a specific condition is met. No dependencies required. The block executes at least once; prints values as it traverses the input table.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nweekdays = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n            \"Thursday\", \"Friday\", \"Saturday\"}\n\n-- Print each weekday\ni = 0\nrepeat\n    i = i + 1\n    print(weekdays[i])\nuntil weekdays[i] == \"Saturday\"\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Component Scale in Lua\nDESCRIPTION: This code shows how to set the x-scale of a sprite component using go.set(). It demonstrates using URLs and hashed property names for referencing objects and properties.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/properties.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Set the x-scale of the sprite component\nlocal url = msg.url(\"#sprite\")\nlocal prop = hash(\"scale.x\")\ngo.set(url, prop, 2.0)\n```\n\n----------------------------------------\n\nTITLE: Disabling Components in Defold using Lua\nDESCRIPTION: Shows different ways to disable components in Defold by sending 'disable' messages to specific components, all components on a game object, or all components on the current game object.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/components.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- 把此脚本所在的游戏对象上 id 为 'weapon' 的组件关闭\nmsg.post(\"#weapon\", \"disable\")\n\n-- 关闭 'enemy' 游戏对象上 id 为 'shield' 的所有组件\nmsg.post(\"enemy#shield\", \"disable\")\n\n-- 关闭当前游戏对象上的所有组件\nmsg.post(\".\", \"disable\")\n\n-- 关闭 'enemy' 游戏对象上的所有组件\nmsg.post(\"enemy\", \"disable\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Magic Effects Animation in Lua\nDESCRIPTION: Script for managing rotating magic effect animations with light controls. Handles object rotation animation and light effect toggling via messages.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\n-- magic_fx.script\ngo.property(\"direction\", hash(\"left\"))\n\nfunction init(self)\n    msg.post(\"#\", \"lights_off\")\n    if self.direction == hash(\"left\") then\n        go.set(\".\", \"euler.z\", 0)\n        go.animate(\".\", \"euler.z\", go.PLAYBACK_LOOP_FORWARD, 360,  go.EASING_LINEAR, 3 + math.random())\n    else\n        go.set(\".\", \"euler.z\", 0)\n        go.animate(\".\", \"euler.z\", go.PLAYBACK_LOOP_FORWARD, -360,  go.EASING_LINEAR, 2 + math.random())\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"lights_on\") then\n        msg.post(\"#light\", \"enable\")\n    elseif message_id == hash(\"lights_off\") then\n        msg.post(\"#light\", \"disable\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Debug Printing in Lua\nDESCRIPTION: Demonstrates how to use the print() function for basic debugging output in Defold, similar to Flash's trace() command.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nprint(\"Hello world!\"\")\n```\n\n----------------------------------------\n\nTITLE: Basic Fragment Shader in GLSL\nDESCRIPTION: A simple fragment shader that sets every pixel to black. This is not practically useful but demonstrates the basic structure.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/shader.md#2025-04-23_snippet_4\n\nLANGUAGE: GLSL\nCODE:\n```\nvoid main()\n{\n    gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Off-Screen Render Target in Lua\nDESCRIPTION: This code shows the `init` function within a Defold render script, modified to create an off-screen render target. It sets up render predicates, configures a clear color, defines parameters for the render target's color buffer (using RGBA format and current game dimensions obtained via `render.get_width()` and `render.get_height()`), and finally creates the render target resource named \"original\". This target will store the rendered game scene before post-processing. It depends on Defold's `render`, `sys`, and `vmath` modules.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua\nfunction init(self)\n    self.tile_pred = render.predicate({\"tile\"})\n    self.gui_pred = render.predicate({\"gui\"})\n    self.text_pred = render.predicate({\"text\"})\n    self.particle_pred = render.predicate({\"particle\"})\n\n    self.clear_color = vmath.vector4(0, 0, 0, 0)\n    self.clear_color.x = sys.get_config(\"render.clear_color_red\", 0)\n    self.clear_color.y = sys.get_config(\"render.clear_color_green\", 0)\n    self.clear_color.z = sys.get_config(\"render.clear_color_blue\", 0)\n    self.clear_color.w = sys.get_config(\"render.clear_color_alpha\", 0)\n\n    self.view = vmath.matrix4()\n\n    local color_params = { format = render.FORMAT_RGBA,\n                       width = render.get_width(),\n                       height = render.get_height() } -- <1>\n    local target_params = {[render.BUFFER_COLOR_BIT] = color_params }\n\n    self.target = render.render_target(\"original\", target_params) -- <2>\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Pixels in Defold\nDESCRIPTION: Sets pixel data for a created texture using a buffer stream with RGBA values.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/atlas.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal width = 128\nlocal height = 128\nlocal buf = buffer.create(width * height, { { name=hash(\"rgba\"), type=buffer.VALUE_TYPE_UINT8, count=4 } } )\nlocal stream = buffer.get_stream(buf, hash(\"rgba\"))\n\nfor y=1, height do\n    for x=1, width do\n        local index = (y-1) * width * 4 + (x-1) * 4 + 1\n        stream[index + 0] = 0xff\n        stream[index + 1] = 0x80\n        stream[index + 2] = 0x10\n        stream[index + 3] = 0xFF\n    end\nend\n\nlocal params = { width=width, height=height, x=0, y=0, type=resource.TEXTURE_TYPE_2D, format=resource.TEXTURE_FORMAT_RGBA, num_mip_maps=1 }\nresource.set_texture(my_texture_id, params, buf)\n```\n\n----------------------------------------\n\nTITLE: Sending \"acquire_input_focus\" to Current Game Object in Lua\nDESCRIPTION: This Lua snippet demonstrates how to use the '.' shorthand address to send the `acquire_input_focus` message to the game object containing the current script using Defold's `msg.post` function. This is typically used to make the game object responsive to user input.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/url-shorthands.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Let this game object acquire input focus\nmsg.post(\".\", \"acquire_input_focus\")\n```\n\n----------------------------------------\n\nTITLE: Defining Atlas Animation Frames\nDESCRIPTION: Example of how to structure animation frames in a diffuse atlas file for sprite animations. Shows the naming convention for frame sequences.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sprite.md#2025-04-23_snippet_0\n\nLANGUAGE: atlas\nCODE:\n```\nrun:\n    /main/images/hero_run_color_1.png\n    /main/images/hero_run_color_2.png\n    ...\n```\n\n----------------------------------------\n\nTITLE: Pixel-Perfect Collision Detection in Flash\nDESCRIPTION: Shows how to use hitTestPoint() method in Flash for pixel-perfect collision detection against an object's shape.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_6\n\nLANGUAGE: actionscript\nCODE:\n```\nbullseye.hitTestPoint(bullet.x, bullet.y, true);\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmarking with Vector Operations in Lua\nDESCRIPTION: Shows how to benchmark performance-critical code using socket.gettime() to measure execution time. This example demonstrates the creation of 2000 vector3 objects and measures the execution time in milliseconds.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal t = socket.gettime()\nlocal table = {}\nfor i=1,2000 do\n    table[i] = vmath.vector3(i, i, i)\nend\nprint((socket.gettime() - t) * 1000)\n\n-- DEBUG:SCRIPT: 0.40388\n```\n\n----------------------------------------\n\nTITLE: Sprite Fragment Shader in GLSL\nDESCRIPTION: A more complex fragment shader for sprites. It samples a texture and applies a tint color.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/shader.md#2025-04-23_snippet_5\n\nLANGUAGE: GLSL\nCODE:\n```\nvarying mediump vec2 var_texcoord0;\n\nuniform lowp sampler2D DIFFUSE_TEXTURE;\nuniform lowp vec4 tint;\n\nvoid main()\n{\n  lowp vec4 tint_pm = vec4(tint.xyz * tint.w, tint.w);\n  lowp vec4 diff = texture2D(DIFFUSE_TEXTURE, var_texcoord0.xy);\n  gl_FragColor = diff * tint_pm;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Restart Dialog GUI Script in Defold\nDESCRIPTION: A Lua script that manages the restart dialog, handling user interaction for yes/no choices and quitting to the main menu.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_25\n\nLANGUAGE: Lua\nCODE:\n```\n-- restart.gui_script\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"hide\") then\n        msg.post(\"#\", \"disable\")\n        msg.post(\".\", \"release_input_focus\")\n    elseif message_id == hash(\"show\") then\n        msg.post(\"#\", \"enable\")\n        msg.post(\".\", \"acquire_input_focus\")\n    end\nend\n\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"touch\") and action.pressed then\n        local yes = gui.get_node(\"yes\")\n        local no = gui.get_node(\"no\")\n        local quit = gui.get_node(\"quit\")\n\n        if gui.pick_node(no, action.x, action.y) then\n            msg.post(\"#\", \"hide\")\n            msg.post(\"/board#gui\", \"show\")\n        elseif gui.pick_node(yes, action.x, action.y) then\n            msg.post(\"board:/board#script\", \"restart_level\")\n            msg.post(\"/board#gui\", \"show\")\n            msg.post(\"#\", \"hide\")\n        elseif gui.pick_node(quit, action.x, action.y) then\n            msg.post(\"main:/main#script\", \"to_main_menu\")\n            msg.post(\"#\", \"hide\")\n        end\n    end\n    -- Consume all input until we're gone.\n    return true\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Label with Right Alignment in Defold Editor\nDESCRIPTION: This snippet shows how to create a label component with right alignment in the Defold editor. The editor.ui.ALIGNMENT.RIGHT constant is used to position the text within its assigned bounds.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts-ui.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\neditor.ui.label({\n    text = \"Hello\",\n    alignment = editor.ui.ALIGNMENT.RIGHT\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Visual Connectors on Touch Release in Lua Game\nDESCRIPTION: This code snippet handles the touch release event by removing all visual connectors created during the block linking process. It's part of the input handling function for the game board.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- board.script\nfunction on_input(self, action_id, action)\n\n    ...\n\n    elseif action_id == hash(\"touch\") and action.released then\n        -- Player released touch.\n        self.dragging = false\n\n        -- Empty chain of connector graphics.\n        for i, c in ipairs(self.connectors) do\n            go.delete(c)\n        end\n        self.connectors = {}\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Job Folder from Executable using ARM Linux Android Tools\nDESCRIPTION: This command extracts the job folder name from the debug information in a compiled Android library file. It uses arm-linux-androideabi-readelf to examine the debug string section of the libdmengine.so file, which is necessary for setting up proper path mappings in Android Studio.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code-android.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ arm-linux-androideabi-readelf --string-dump=.debug_str build/armv7-android/libdmengine.so | grep /job\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Lookup in GLSL Fragment Shader\nDESCRIPTION: GLSL code for the fragment shader that implements color lookup using a lookup table texture. It samples the original color and maps it to the graded color using the lookup table.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_8\n\nLANGUAGE: glsl\nCODE:\n```\nvarying mediump vec4 position;\nvarying mediump vec2 var_texcoord0;\n\nuniform lowp sampler2D original;\nuniform lowp sampler2D lut; // <1>\n\n#define MAXCOLOR 15.0 // <2>\n#define COLORS 16.0\n#define WIDTH 256.0\n#define HEIGHT 16.0\n\nvoid main()\n{\n    vec4 px = texture2D(original, var_texcoord0.xy); // <3>\n\n    float cell = floor(px.b * MAXCOLOR); // <4>\n\n    float half_px_x = 0.5 / WIDTH; // <5>\n    float half_px_y = 0.5 / HEIGHT;\n\n    float x_offset = half_px_x + px.r / COLORS * (MAXCOLOR / COLORS);\n    float y_offset = half_px_y + px.g * (MAXCOLOR / COLORS); // <6>\n\n    vec2 lut_pos = vec2(cell / COLORS + x_offset, y_offset); // <7>\n\n    vec4 graded_color = texture2D(lut, lut_pos); // <8>\n\n    gl_FragColor = graded_color; // <9>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic HTTP Server Route in Defold\nDESCRIPTION: Shows how to create a basic HTTP server route that responds with 'Hello world!' on GET requests\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nprint(\"My route: \" .. http.server.url .. \"/my-extension\")\n\nfunction M.get_http_server_routes()\n  return {\n    http.server.route(\"/my-extension\", \"GET\", function(request)\n      return http.server.response(200, \"Hello world!\")\n    end)\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Installing an APK using ADB\nDESCRIPTION: Command to install an APK file on a connected Android device using the Android Debug Bridge (ADB) tool. This example demonstrates the installation process and shows the success message from ADB after completion.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/android.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ adb install Defold\\ examples.apk\n4826 KB/s (18774344 bytes in 3.798s)\n  pkg: /data/local/tmp/my_app.apk\nSuccess\n```\n\n----------------------------------------\n\nTITLE: Measuring Memory Allocation for Vector3 Objects in Defold\nDESCRIPTION: Demonstrates how to measure memory usage of vector3 objects using collectgarbage() function. Shows the memory implications of creating new objects and how to track the exact memory footprint.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nprint(collectgarbage(\"count\") * 1024)       -- 88634\nlocal v = vmath.vector3()\nprint(collectgarbage(\"count\") * 1024)       -- 88704. 70 bytes in total has been allocated\n```\n\n----------------------------------------\n\nTITLE: Modifying Z-Position of Game Objects in Lua\nDESCRIPTION: Code showing how to change a game object's Z-axis position using Lua script in Defold. This affects the rendering order (depth) of objects, similar to changing the display index in Flash.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/flash.md#2025-04-23_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal pos = go.get_position()\npos.z  = 0.5\ngo.set_position(pos)\n```\n\n----------------------------------------\n\nTITLE: Game Project Bootstrap Configuration Example\nDESCRIPTION: Shows a real example of configuring the main collection bootstrap setting in game.project. Note the 'c' suffix for compiled file reference.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/project-settings.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[bootstrap]\nmain_collection = /main/main.collectionc\n```\n\n----------------------------------------\n\nTITLE: Lua Number Operations\nDESCRIPTION: Demonstrates number handling in Lua, including integer and floating-point operations.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nprint(10) --> prints '10'\nprint(10.0) --> '10'\nprint(10.000000000001) --> '10.000000000001'\n\na = 5 -- integer\nb = 7/3 -- float\nprint(a - b) --> '2.6666666666667'\n```\n\n----------------------------------------\n\nTITLE: Recommended Extension Project Structure\nDESCRIPTION: A file structure example showing the recommended organization for extension projects, including separate directories for different platform implementations, resources, and source files.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    /root\n        /input\n        /main                            -- All the files for the actual example project\n            /...\n        /myextension                     -- The actual root folder of the extension\n            ext.manifest\n            /include                     -- External includes, used by other extensions\n            /libs\n                /<platform>              -- External libraries for all supported platforms\n            /src\n                myextension.cpp          -- The extension Lua api and the extension life cycle functions\n                                            Also contains generic implementations of your Lua api functions.\n                myextension_private.h    -- Your internal api that each platform will implement (I.e. `myextension_Init` etc)\n                myextension.mm           -- If native calls are needed for iOS/macOS. Implements `myextension_Init` etc for iOS/macOS\n                myextension_android.cpp  -- If JNI calls are needed for Android. Implements `myextension_Init` etc for Android\n                /java\n                    /<platform>          -- Any java files needed for Android\n            /res                         -- Any resources needed for a platform\n            /external\n                README.md                -- Notes/scripts on how to build or package any external libraries\n        /bundleres                       -- Resources that should be bundles for (see game.project and the [bundle_resources setting]([physics scale setting](/manuals/project-settings/#project))\n            /<platform>\n        game.project\n        game.appmanifest                 -- Any extra app configuration info\n```\n\n----------------------------------------\n\nTITLE: Basic INI File Format Structure in game.project\nDESCRIPTION: Demonstrates the basic structure of the game.project configuration file using INI format with categories and settings.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/project-settings.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[category1]\nsetting1 = value\nsetting2 = value\n[category2]\n...\n```\n\n----------------------------------------\n\nTITLE: Verifying ADB Installation\nDESCRIPTION: Command to verify ADB installation by listing connected Android devices. The output shows a sample connected device.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/android-adb.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ adb devices\nList of devices attached\n31002535c90ef000    device\n```\n\n----------------------------------------\n\nTITLE: Sprite Vertex Shader in GLSL\nDESCRIPTION: A more complex vertex shader for sprites. It transforms vertex positions and passes texture coordinates to the fragment shader.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/shader.md#2025-04-23_snippet_3\n\nLANGUAGE: GLSL\nCODE:\n```\nuniform mediump mat4 view_proj;\n\nattribute mediump vec4 position;\nattribute mediump vec2 texcoord0;\n\nvarying mediump vec2 var_texcoord0;\n\nvoid main()\n{\n  gl_Position = view_proj * vec4(position.xyz, 1.0);\n  var_texcoord0 = texcoord0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Drag Constant in Defold Car Script (Lua)\nDESCRIPTION: Declares a local Lua variable `drag` to represent the drag coefficient constant used in physics calculations for the car script. This constant influences how much the car slows down based on its speed.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/car.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal drag = 1.1\t        --the drag constant <1>\n```\n\n----------------------------------------\n\nTITLE: Constructing URL Objects in Defold Lua\nDESCRIPTION: Multiple ways to create and manipulate URL objects in Lua, including construction from strings, parameters, or building from an empty URL object by setting its properties.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/addressing.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Construct URL object from a string:\nlocal my_url = msg.url(\"main:/manager#controller\")\nprint(my_url) --> url: [main:/manager#controller]\nprint(my_url.socket) --> 786443 (internal numeric value)\nprint(my_url.path) --> hash: [/manager]\nprint(my_url.fragment) --> hash: [controller]\n\n-- Construct URL from parameters:\nlocal my_url = msg.url(\"main\", \"/manager\", \"controller\")\nprint(my_url) --> url: [main:/manager#controller]\n\n-- Build from empty URL object:\nlocal my_url = msg.url()\nmy_url.socket = \"main\" -- specify by valid name\nmy_url.path = hash(\"/manager\") -- specify as string or hash\nmy_url.fragment = \"controller\" -- specify as string or hash\n\n-- Post to target specified by URL\nmsg.post(my_url, \"hello_manager!\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Shadowing in Lua - Lua\nDESCRIPTION: Illustrates how local variables can shadow global or outer-scope variables by redeclaring with the same name in an inner block or function. Demonstrates impact of shadowing on function scope and shows assignments and prints to clarify current variable context.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/lua.md#2025-04-23_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nmy_global = \"global\"\nprint(my_global) -->\"global\"\n\nlocal v = \"local\"\nprint(v) --> \"local\"\n\nlocal function test(v)\n    print(v)\nend\n\nfunction init(self)\n    v = \"apple\"\n    print(v) --> \"apple\"\n    test(\"banana\") --> \"banana\"\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Gamepad Support in HTML5 for Defold\nDESCRIPTION: This function checks if the current platform (HTML5) supports gamepads in Defold. It uses the html5.run() function to check for the existence of the navigator.getGamepads function in the browser.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function supports_gamepads()\n    return not html5 or (html5.run('typeof navigator.getGamepads === \"function\"') == \"true\")\nend\n\nif supports_gamepads() then\n    print(\"Platform supports gamepads\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Project Templates with welcome.edn in Defold\nDESCRIPTION: This EDN (Extensible Data Notation) snippet shows how to configure custom project templates that will appear in Defold's New Project window. The configuration defines a category of templates and specifies details for each template including name, description, image, ZIP URL source, and root folder handling.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-templates.md#2025-04-23_snippet_0\n\nLANGUAGE: edn\nCODE:\n```\n{:new-project\n  {:categories [\n    {:label \"My Templates\"\n     :templates [\n          {:name \"My project\"\n           :description \"My template with everything set up the way I want it.\"\n           :image \"empty.svg\"\n           :zip-url \"https://github.com/britzl/template-project/archive/master.zip\"\n           :skip-root? true},\n          {:name \"My other project\"\n           :description \"My other template with everything set up the way I want it.\"\n           :image \"empty.svg\"\n           :zip-url \"https://github.com/britzl/template-other-project/archive/master.zip\"\n           :skip-root? true}]\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entitlements XML for macOS Application\nDESCRIPTION: This XML defines the entitlements required for most games on macOS, including JIT compilation, unsigned executable memory, and dynamic linker environment variables.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/macos.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>com.apple.security.cs.allow-jit</key>\n    <true/>\n    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>\n    <true/>\n    <key>com.apple.security.cs.allow-dyld-environment-variables</key>\n    <true/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Gradient Effect in GLSL Shader for Font Rendering\nDESCRIPTION: Shader code snippet that demonstrates how to create a horizontal gradient effect for text rendering using the texture_size_recip uniform variable. The calculation uses the texture coordinates and cache cell height ratio to generate a gradient pattern.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/font.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nfloat horizontal_gradient = fract(var_texcoord0.y / texture_size_recip.w);\n```\n\n----------------------------------------\n\nTITLE: Simplified Animation Frame Names\nDESCRIPTION: Example showing the resulting frame names after applying rename patterns in the atlas configuration.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sprite.md#2025-04-23_snippet_2\n\nLANGUAGE: atlas\nCODE:\n```\nrun/hero_run_1\nrun/hero_run_2\n...\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Resources in Defold\nDESCRIPTION: Shows how to load custom resources included with your application using sys.load_resource() and parse JSON data.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/file-access.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Load level data into a string\nlocal data, error = sys.load_resource(\"/assets/level_data.json\")\n-- Decode json string to a Lua table\nif data then\n  local data_table = json.decode(data)\n  pprint(data_table)\nelse\n  print(error)\nend\n```\n\n----------------------------------------\n\nTITLE: Ant Glob Pattern Examples for Texture Profile Paths\nDESCRIPTION: Demonstrates the path pattern matching syntax used in texture profiles to target specific resources for compression. Shows how to use wildcards like *, ?, and ** to match file paths.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/texture-profiles.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/gui/**/*.atlas\n/**/*.atlas\n```\n\n----------------------------------------\n\nTITLE: Mapping Android MotionEvents to Defold Axis Indices\nDESCRIPTION: Provides a reference table mapping Android `AMOTION_EVENT_AXIS_*` constants (representing analog inputs like joysticks and triggers) to the numerical indices used within Defold's `.gamepads` configuration file for defining axis movements on Android. This is needed for configuring analog controls.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-gamepads.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Motion event to axis index  | Index |\n|-----------------------------|-------|\n| `AMOTION_EVENT_AXIS_X`        | 0     |\n| `AMOTION_EVENT_AXIS_Y`        | 1     |\n| `AMOTION_EVENT_AXIS_Z`        | 2     |\n| `AMOTION_EVENT_AXIS_RZ`       | 3     |\n| `AMOTION_EVENT_AXIS_LTRIGGER` | 4     |\n| `AMOTION_EVENT_AXIS_RTRIGGER` | 5     |\n| `AMOTION_EVENT_AXIS_HAT_X`    | 6     |\n| `AMOTION_EVENT_AXIS_HAT_Y`    | 7     |\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Actions via Defold Editor (Lua)\nDESCRIPTION: This Lua snippet demonstrates how to execute a shell command as a non-undoable action within the Defold editor’s scripting environment. It constructs an action table specifying \"shell\" as the action and provides a \"command\" key, which is an array of the script to run and its arguments. The example uses \"./scripts/minify-json.sh\" and trims the leading \"/\" from a selected path via \"editor.get(opts.selection, \\\"path\\\"):sub(2)\". Prerequisites include the existence of the specified shell script and the selection context from the editor. The primary output is the execution of the shell script; undo history will be cleared, so version control is recommended for reversibility.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\n{\n  action = \"shell\",\n  command = {\n    \"./scripts/minify-json.sh\",\n    editor.get(opts.selection, \"path\"):sub(2) -- trim leading \"/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Additive Blend Mode Calculation in GLSL\nDESCRIPTION: Additive blending that brightens the background by adding source and destination color values\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/blend-modes.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nsrc.rgb + dst.rgb\n```\n\n----------------------------------------\n\nTITLE: Configuring Luacheck Settings in Defold\nDESCRIPTION: Default Luacheck configuration settings for Defold projects. These settings control linting behavior by disabling unused argument warnings, line length limits, and certain whitespace-related warnings.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/writing-code.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nunused_args = false      -- don't warn on unused arguments (common for .script files)\nmax_line_length = false  -- don't warn on long lines\nignore = {\n    \"611\",               -- line contains only whitespace\n    \"612\",               -- line contains trailing whitespace\n    \"614\"                -- trailing whitespace in a comment\n},\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header\nDESCRIPTION: YAML frontmatter defining the title and brief description for the Defold scene editor documentation page\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/scene-editing.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: The Defold scene editor\nbrief: Defold contains a number of editors, but the Scene Editor is the one used the most. This manual explains how to use it.\n---\n```\n\n----------------------------------------\n\nTITLE: Parsing Resource Graph JSON in Defold\nDESCRIPTION: Example of a JSON entry in the game.graph.json file, which contains information about resource dependencies for Live Update. This data can be used to group resources into separate archives.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/live-update.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\" : \"/game/player.goc\",\n  \"hexDigest\" : \"caa342ec99794de45b63735b203e83ba60d7e5a1\",\n  \"children\" : [ \"/game/ship.spritec\", \"/game/player.scriptc\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Normal Map Atlas Animation Frames\nDESCRIPTION: Example showing the corresponding normal map atlas structure that matches the diffuse atlas, demonstrating parallel frame naming.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/sprite.md#2025-04-23_snippet_1\n\nLANGUAGE: atlas\nCODE:\n```\nrun:\n    /main/images/hero_run_normal_1.png\n    /main/images/hero_run_normal_2.png\n    ...\n```\n\n----------------------------------------\n\nTITLE: Removing Old Mounts in Lua for Defold Live Update\nDESCRIPTION: This function loops through existing mounts, checks their version against the minimum supported version, and removes outdated mounts. It uses liveupdate.get_mounts() to retrieve mount information and liveupdate.remove_mount() to remove invalid mounts.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/live-update-scripting.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function remove_old_mounts()\n\tlocal mounts = liveupdate.get_mounts() -- table with mounts\n\n    -- Each mount has: mount.uri, mount.priority, mount.name\n\tfor _,mount in ipairs(mounts) do\n\n        -- This requires the file name to be unique, so that we don't get a file from a different archive\n        -- This data is created by the developer as a way to specify meta data for the archive\n\t\tlocal version_data = sys.load_resource(\"/version_\" .. mount.name .. \".json\")\n\n\t\tif version_data then\n\t\t\tversion_data = json.decode(version_data)\n\t\telse\n\t\t\tversion_data = {version = 0} -- if it has no version file, it's likely an old/invalid archive\n\t\tend\n\n        -- verify the archive version against the version supported by the game\n        if version_data.version < sys.get_config_int(\"game.minimum_lu_version\") then\n            -- it was invalid, so we'll unmount it!\n            liveupdate.remove_mount(mount.name)\n        end\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Heap Usage via Browser Console in JavaScript\nDESCRIPTION: This JavaScript snippet can be executed directly in the browser's developer console when running a Defold HTML5 game. It returns the current WebAssembly heap memory (HEAP8) size in megabytes by dividing the HEAP8 typed array length by 1024 twice. There are no external dependencies. Input: none; Output: a numeric value displayed in the console representing the heap size in MB. This is a convenient way to check memory allocation without modifying game code.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/optimization-memory-html5.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nHEAP8.length / 1024 / 1024\n```\n\n----------------------------------------\n\nTITLE: Obfuscating Lua Function with Prometheus in Defold\nDESCRIPTION: Demonstrates the use of Prometheus Lua obfuscator to aggressively obfuscate a simple Lua function. This example shows the original code and its obfuscated output, highlighting how obfuscation can make the code difficult for humans to understand while maintaining functionality.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/application-security.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction init(self)\n print(\"hello\")\n test.greet(\"Bob\")\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal v={\"+qdW\",\"ZK0tEKf=\";\"XP/IX3+=\"}for o,J in ipairs({{1;3};{1,1},{2,3}})do while J[1]<J[2]do v[J[1]],v[J[2]],J[1],J[2]=v[J[2]],v[J[1]],J[1]+1,J[2]-1 end end local function J(o)return v[o+45816]end do local o={[\"/\"]=9;[\"8\"]=48;[\"9\"]=1;q=38,o=62;V=33;y=43,d=61,B=50,L=54;v=2;[\"0\"]=21,n=31;p=63;R=5;N=3;i=10;e=35;C=7;l=56;a=47,J=58;m=59;[\"2\"]=36;z=11;M=12;Z=26;O=18;[\"5\"]=20;s=8,[\"4\"]=30,P=55;w=4;U=29;Q=28;r=24,h=41;G=45;c=19;W=34,k=57;T=14,t=44,S=0;f=60;F=42,E=27;u=40;X=25,j=17;[\"3\"]=23,b=13;[\"1\"]=53;Y=32,A=22,K=6,[\"+\"]=16,[\"6\"]=46;[\"7\"]=51;I=37;D=52;H=15,x=49,g=39}local J=type local x=string.sub local d=v local l=string.len local W=string.char local L=table.insert local w=table.concat local h=math.floor for v=1,#d,1 do local X=d[v]if J(X)==\"string\"then local J=l(X)local H={}local S=1 local k=0 local K=0 while S<=J do local v=x(X,S,S)local d=o[v]if d then k=k+d*64^(3-K)K=K+1 if K==4 then K=0 local o=h(k/65536)local v=h((k%65536)/256)local J=k%256 L(H,W(o,v,J))k=0 end elseif v==\"=\"then L(H,W(h(k/65536)))if S>=J or x(X,S+1,S+1)~=\"=\"then L(H,W(h((k%65536)/256)))end break end S=S+1 end d[v]=w(H)end end end local function o(o)test[J(-45815)](o)end function init(v)print(J(-45813))o(J(-45814))end\n```\n\n----------------------------------------\n\nTITLE: Using Project Settings as Tokens in JavaScript\nDESCRIPTION: Example of how to use Defold project settings as tokens in custom JavaScript code within HTML templates. This demonstrates accessing the display width from game.project.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doSomething() {\n    var x = {{display.width}};\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Private Custom Setting in INI Format (Defold)\nDESCRIPTION: Demonstrates the INI format for defining a custom project setting (`my_property`) within a category (`my_category`) in Defold's `.properties` files. It specifically shows how to mark a property as private using the `.private` attribute suffix with a value of 1, preventing it from being included in the final bundle.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/project-settings.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n```\n[my_category]\nmy_property.private = 1\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader Output Declaration\nDESCRIPTION: Shows how to declare fragment shader outputs using 'out' instead of deprecated gl_FragColor\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_5\n\nLANGUAGE: glsl\nCODE:\n```\nout vec4 color_out;\n\nvoid main()\n{\n    color_out = vec4(1.0, 0.0, 0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Authentication Pattern\nDESCRIPTION: Pattern for using environment variables to store authentication credentials in library URLs securely.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/libraries.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://__PRIVATE_USERNAME__:__PRIVATE_TOKEN__@github.com/defold/private/archive/main.zip\n```\n\n----------------------------------------\n\nTITLE: Preferences Schema Definition\nDESCRIPTION: Shows how to define preferences schema with different types and scopes\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nfunction M.get_prefs_schema()\n  return {\n    [\"my_json_formatter.jq_path\"] = editor.prefs.schema.string(),\n    [\"my_json_formatter.indent.size\"] = editor.prefs.schema.integer({default = 2, scope = editor.prefs.SCOPE.PROJECT}),\n    [\"my_json_formatter.indent.type\"] = editor.prefs.schema.enum({values = {\"spaces\", \"tabs\"}, scope = editor.prefs.SCOPE.PROJECT}),\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Android Base Manifest Example in XML\nDESCRIPTION: Example of a base AndroidManifest.xml file that defines basic application properties including package name, version information, required features, and permissions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-manifest-merge-tool.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version='1.0' encoding='utf-8'?>\n<manifest xmlns:android='http://schemas.android.com/apk/res/android'\n        package='com.defold.testmerge'\n        android:versionCode='14'\n        android:versionName='1.0'\n        android:installLocation='auto'>\n    <uses-feature android:required='true' android:glEsVersion='0x00020000' />\n    <uses-sdk android:minSdkVersion='9' android:targetSdkVersion='26' />\n    <application android:label='Test Project' android:hasCode='true'>\n    </application>\n    <uses-permission android:name='android.permission.VIBRATE' />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Multiplicative Blend Mode Calculation in GLSL\nDESCRIPTION: Multiplicative blending that darkens the background by multiplying source and destination color values\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/blend-modes.md#2025-04-23_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\nsrc.rgb * dst.rgb\n```\n\n----------------------------------------\n\nTITLE: Basic Defold Project Build with Bob\nDESCRIPTION: Demonstrates the basic usage of Bob to build a Defold project from the current directory. The build output goes to the default build/default directory.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/bob.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd /Applications/Defold-beta/branches/14/4/main\n$ java -jar bob.jar\n100%\n$\n```\n\n----------------------------------------\n\nTITLE: Custom Background Color Override in CSS\nDESCRIPTION: Example of customizing the editor's background colors using a custom CSS stylesheet.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-styling.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n* {\n\t-df-background-darker:    derive(#0a0a42, -10%);\n\t-df-background-dark:      derive(#0a0a42, -5%);\n\t-df-background:           #0a0a42;\n\t-df-background-light:     derive(#0a0a42, 10%);\n\t-df-background-lighter:   derive(#0a0a42, 20%);\n}\n```\n\n----------------------------------------\n\nTITLE: Platform Edge Detection and Deletion\nDESCRIPTION: Platform script modification to handle platform deletion when reaching the left edge of the screen by sending a message to the controller.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/runner.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nif pos.x < -500 then\n    msg.post(\"/level/controller#controller\", \"delete_spawn\", { id = go.get_id() })\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Defold Build and Bundle Command Chain\nDESCRIPTION: Shows how to chain multiple Bob commands to resolve libraries, clean the build directory, build archive data, and bundle a macOS application. Includes directory listing showing the resulting build artifacts.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/bob.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ java -jar bob.jar --archive --platform x86-darwin resolve distclean build bundle\n100%\n$ ls -al build/default/\ntotal 70784\ndrwxr-xr-x   13 sicher  staff       442  1 Dec 10:15 .\ndrwxr-xr-x    3 sicher  staff       102  1 Dec 10:15 ..\ndrwxr-xr-x    3 sicher  staff       102  1 Dec 10:15 My Game.app\ndrwxr-xr-x    8 sicher  staff       272  1 Dec 10:15 builtins\n-rw-r--r--    1 sicher  staff    140459  1 Dec 10:15 digest_cache\ndrwxr-xr-x    4 sicher  staff       136  1 Dec 10:15 fonts\n-rw-r--r--    1 sicher  staff  35956340  1 Dec 10:15 game.darc\n-rw-r--r--    1 sicher  staff       735  1 Dec 10:15 game.projectc\ndrwxr-xr-x  223 sicher  staff      7582  1 Dec 10:15 graphics\ndrwxr-xr-x    3 sicher  staff       102  1 Dec 10:15 input\ndrwxr-xr-x   20 sicher  staff       680  1 Dec 10:15 logic\ndrwxr-xr-x   27 sicher  staff       918  1 Dec 10:15 sound\n-rw-r--r--    1 sicher  staff    131926  1 Dec 10:15 state\n$\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Bundle Resources\nDESCRIPTION: Shows the required directory structure for bundle resources across different platforms. Demonstrates platform-specific folders (win32, android) and a common folder for shared resources.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/bundle-resources.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nres\n├── win32\n│   └── mywin32file.txt\n├── common\n│   └── mycommonfile.txt\n└── android\n    ├── myandroidfile.txt\n    └── res\n        └── xml\n            └── filepaths.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Emscripten 2.0.11 Service in Docker Compose\nDESCRIPTION: YAML configuration for adding an Emscripten 2.0.11 service to docker-compose.yml. Defines service properties including image source, network settings, and profiles for Docker container orchestration.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-docker-images.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nemscripten_2011-dev:\n    image: europe-west1-docker.pkg.dev/extender-426409/extender-public-registry/extender-emsdk-2011-env:latest\n    extends:\n    file: common-services.yml\n    service: remote_builder\n    profiles:\n    - all\n    - web\n    networks:\n    default:\n        aliases:\n        - emsdk-2011\n```\n\n----------------------------------------\n\nTITLE: Creating an Android Keystore using Terminal Command\nDESCRIPTION: Command to generate a new keystore file for signing Android applications. This creates a keystore with specified organization details, password protection, and validity period that can be used to sign APK and AAB files for Google Play distribution.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/android.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -genkey -v -noprompt -dname \"CN=John Smith, OU=Area 51, O=US Air Force, L=Unknown, ST=Nevada, C=US\" -keystore mykeystore.keystore -storepass 5Up3r_53cR3t -alias myAlias -keyalg RSA -validity 9125\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffer Resource in JSON Format for Defold\nDESCRIPTION: This example shows the JSON structure of a buffer resource that describes a 3D position data stream using 32-bit floating point numbers. The buffer contains coordinates for vertices in 3D space.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/buffer.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"position\",\n    \"type\": \"float32\",\n    \"count\": 3,\n    \"data\": [\n      -1.0,\n      -1.0,\n      -1.0,\n      -1.0,\n      -1.0,\n      1.0,\n      ...\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Bob Build Tool Command Line Help Output\nDESCRIPTION: Complete command line help output showing all available options and parameters for the Bob build tool. Includes options for building, bundling, signing, and configuring the build process for different platforms.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/bob.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ java -jar bob.jar --help\nusage: bob [options] [commands]\n -a,--archive                            Build archive\n -ar,--architectures <arg>               Comma separated list of\n                                         architectures to include for the\n                                         platform\n    --archive-resource-padding <arg>     The alignment of the resources in\n                                         the game archive. Default is 4\n -bf,--bundle-format <arg>               Which formats to create the\n                                         application bundle in. Comma\n                                         separated list. (Android: 'apk'\n                                         and 'aab')\n    --binary-output <arg>                Location where built engine\n                                         binary will be placed. Default is\n                                         \"<build-output>/<platform>/\"\n -bo,--bundle-output <arg>               Bundle output directory\n -br,--build-report <arg>                DEPRECATED! Use\n                                         --build-report-json instead\n -brhtml,--build-report-html <arg>       Filepath where to save a build\n                                         report as HTML\n -brjson,--build-report-json <arg>       Filepath where to save a build\n                                         report as JSON\n    --build-artifacts <arg>              If left out, will default to\n                                         build the engine. Choices:\n                                         'engine', 'plugins', 'library'.\n                                         Comma separated list.\n    --build-server <arg>                 The build server (when using\n                                         native extensions)\n    --build-server-header <arg>          Additional build server header to\n                                         set\n -ce,--certificate <arg>                 DEPRECATED! Use --keystore\n                                         instead\n -d,--debug                              DEPRECATED! Use --variant=debug\n                                         instead\n    --debug-ne-upload                    Outputs the files sent to build\n                                         server as upload.zip\n    --debug-output-spirv <arg>           Force build SPIR-V shaders\n    --debug-output-wgsl <arg>            Force build WGSL shaders\n    --defoldsdk <arg>                    What version of the defold sdk\n                                         (sha1) to use\n -e,--email <arg>                        User email\n -ea,--exclude-archive                   Exclude resource archives from\n                                         application bundle. Use this to\n                                         create an empty Defold\n                                         application for use as a build\n                                         target\n    --exclude-build-folder <arg>         DEPRECATED! Use '.defignore' file\n                                         instead\n -h,--help                               This help message\n -i,--input <arg>                        DEPRECATED! Use --root instead\n    --identity <arg>                     Sign identity (iOS)\n -kp,--key-pass <arg>                    Password of the deployment key if\n                                         different from the keystore\n                                         password (Android)\n -ks,--keystore <arg>                    Deployment keystore used to sign\n                                         APKs (Android)\n -ksa,--keystore-alias <arg>             The alias of the signing key+cert\n                                         you want to use (Android)\n -ksp,--keystore-pass <arg>              Password of the deployment\n                                         keystore (Android)\n -l,--liveupdate <arg>                   Yes if liveupdate content should\n                                         be published\n    --manifest-private-key <arg>         Private key to use when signing\n                                         manifest and archive.\n    --manifest-public-key <arg>          Public key to use when signing\n                                         manifest and archive.\n    --max-cpu-threads <arg>              Max count of threads that bob.jar\n                                         can use\n -mp,--mobileprovisioning <arg>          mobileprovisioning profile (iOS)\n    --ne-build-dir <arg>                 Specify a folder with includes or\n                                         source, to build a specific\n                                         library. More than one occurrence\n                                         is allowed.\n    --ne-output-name <arg>               Specify a library target name\n -o,--output <arg>                       Output directory. Default is\n                                         \"build/default\"\n -p,--platform <arg>                     Platform (when building and\n                                         bundling)\n -pk,--private-key <arg>                 DEPRECATED! Use --keystore\n                                         instead\n -r,--root <arg>                         Build root directory. Default is\n                                         current directory\n    --resource-cache-local <arg>         Path to local resource cache.\n    --resource-cache-remote <arg>        URL to remote resource cache.\n    --resource-cache-remote-pass <arg>   Password/token to authenticate\n                                         access to the remote resource\n                                         cache.\n    --resource-cache-remote-user <arg>   Username to authenticate access\n                                         to the remote resource cache.\n    --settings <arg>                     Path to a game project settings\n                                         file. More than one occurrence is\n                                         allowed. The settings files are\n                                         applied left to right.\n    --strip-executable                   Strip the dmengine of debug\n                                         symbols (when bundling iOS or\n                                         Android)\n -tc,--texture-compression <arg>         Use texture compression as\n                                         specified in texture profiles\n -tp,--texture-profiles <arg>            DEPRECATED! Use\n                                         --texture-compression instead\n -u,--auth <arg>                         User auth token\n    --use-async-build-server             DEPRECATED! Asynchronous build is\n                                         now the default.\n    --use-lua-bytecode-delta             Use byte code delta compression\n                                         when building for multiple\n                                         architectures\n    --use-uncompressed-lua-source        Use uncompressed and unencrypted\n                                         Lua source code instead of byte\n                                         code\n    --use-vanilla-lua                    DEPRECATED! Use\n                                         --use-uncompressed-lua-source\n                                         instead.\n -v,--verbose                            Verbose output\n    --variant <arg>                      Specify debug, release or\n                                         headless version of dmengine\n                                         (when bundling)\n    --version                            Prints the version number to the\n                                         output\n    --with-symbols                       Generate the symbol file (if\n                                         applicable)\n```\n\n----------------------------------------\n\nTITLE: Basic Vertex Shader in GLSL\nDESCRIPTION: A simple vertex shader that outputs a fixed position at the origin. This is not practically useful but demonstrates the basic structure.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/shader.md#2025-04-23_snippet_2\n\nLANGUAGE: GLSL\nCODE:\n```\nvoid main()\n{\n    gl_Position = vec4(0.0,0.0,0.0,1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Physics Debug Visualization in Lua\nDESCRIPTION: Code snippet showing how to toggle the physics debug visualization in Defold. This helps developers see collision objects, collision vectors, and other physics-related information during debugging.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/flash.md#2025-04-23_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nmsg.post(\"@system:\", \"toggle_physics_debug\")\n```\n\n----------------------------------------\n\nTITLE: Swapping Display Object Depths in Flash\nDESCRIPTION: Demonstrates how to swap the depth index positions of two display objects in Flash using swapChildren().\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_3\n\nLANGUAGE: actionscript\nCODE:\n```\nswapChildren(logo2,logo3);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Defold Android Extensions\nDESCRIPTION: This build.gradle snippet shows how to specify repositories and dependencies for a Defold native extension. The example demonstrates adding Firebase and Google Play Services dependencies to an Android project.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-gradle.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'com.google.firebase:firebase-installations:17.2.0'\n    implementation 'com.google.android.gms:play-services-base:18.2.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Symbolicating iOS Callstack\nDESCRIPTION: This set of commands shows how to symbolicate an iOS callstack. It includes steps for extracting symbols, downloading vanilla symbols if needed, and using the atos tool to symbolicate addresses.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ unzip <project>/build/arm64-darwin/build.zip\n# it will produce a Contents/Resources/DWARF/dmengine\n\n$ wget http://d.defold.com/archive/<sha1>/engine/arm64-darwin/dmengine.dSYM\n\n$ atos -arch arm64 -o Contents/Resources/DWARF/dmengine 0x1492c4\n\n$ atos -arch arm64 -o MyApp.dSYM/Contents/Resources/DWARF/MyApp -l0x100000000 0x1492c4\n\n$ atos -arch arm64 -o MyApp.dSYM/Contents/Resources/DWARF/MyApp 0x1001492c4\ndmCrash::OnCrash(int) (in MyApp) (backtrace_execinfo.cpp:27)\n```\n\n----------------------------------------\n\nTITLE: Signing macOS Application with Codesign\nDESCRIPTION: This command signs the macOS application using codesign, applying the specified developer ID, runtime options, and entitlements.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/macos.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ codesign --force --sign \"Developer ID Application: Company Name\" --options runtime --deep --timestamp --entitlements entitlement.plist Game.app\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Render Script by Disabling Tile Drawing in Lua\nDESCRIPTION: This snippet demonstrates how to test if a custom Defold render script is active by temporarily commenting out the `render.draw()` call for the 'tile' predicate. This predicate typically includes sprites and tilemaps. When this modified script is hot-reloaded (<kbd>⌘ + R</kbd>), the absence of sprites and tiles confirms the custom script is being used by the engine. It requires the `render` and `vmath` modules.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n...\n\nrender.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1, 1))\n\n-- render.draw(self.tile_pred) -- <1>\nrender.draw(self.particle_pred)\nrender.draw_debug3d()\n\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the IAC Extension in Defold\nDESCRIPTION: Shows how to add the Inter-app communication extension as a dependency in your game.project file using the GitHub repository URL.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/iac.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/defold/extension-iac/archive/master.zip\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Guards in GLSL\nDESCRIPTION: Shows how to use header guards to prevent multiple definitions when including the same file multiple times in a shader.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/shader.md#2025-04-23_snippet_1\n\nLANGUAGE: GLSL\nCODE:\n```\n#ifndef PI_GLSL_H\n#define PI_GLSL_H\n\nconst float PI = 3.14159265359;\n\n#endif // PI_GLSL_H\n```\n\n----------------------------------------\n\nTITLE: Defold Animation Types Documentation\nDESCRIPTION: Markdown documentation outlining the different types of animation supported in Defold, including built-in animations and those available through extensions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/animation.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Animation in Defold manual\nbrief: This manual describes Defold's animation support.\n---\n\n# Animation\n\nDefold has built-in support for many types of animation that you can use as a source of graphics for components:\n\n* [Flip-book animation](/manuals/flipbook-animation) - Playing a series of still images in succession\n* [Model animation](/manuals/model-animation) - Playing 3D skinned animations\n* [Property animation](/manuals/property-animation) - Animate properties such as position, scale, rotation and many others\n\nAdditional animation formats can be added through extensions:\n\n* [Rive animation](/extension-rive) - Playing vector based 2D skeletal animations\n* [Spine animation](/extension-spine) - Playing textured 2D skeletal animations\n```\n\n----------------------------------------\n\nTITLE: Inlining Custom CSS in HTML Template\nDESCRIPTION: HTML code snippet for inlining custom CSS specified in game.project into the index.html template. Uses triple braces to prevent character escaping.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<style>\n{{{DEFOLD_CUSTOM_CSS_INLINE}}}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Graphics API Support Table in Markdown\nDESCRIPTION: This markdown table describes the graphics APIs supported by Defold for different operating systems and platforms. It includes information on primary and fallback APIs where relevant.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/shared/graphics-api.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| System   | Graphics API               | Note                     |\n|----------|----------------------------|---------------------------|\n| macOS    | Metal (via MoltenVK)       |                          |\n| Windows  | OpenGL 3.1 or Vulkan 1.1   |                          |\n| Linux    | OpenGL 3.1 or Vulkan 1.1   |                          |\n| Android  | OpenGLES 3.0 or Vulkan 1.1 | Fallback to OpenGLES 2.0 |\n| iOS      | Metal (via MoltenVK)       |                          |\n| HTML5    | WebGL 2.0                  | Fallback to WebGL 1.0    |\n```\n\n----------------------------------------\n\nTITLE: Modifying Board Script Initialization in Lua\nDESCRIPTION: This snippet shows the modified initialization function for the board script. It sets up various game state variables but removes the temporary board setup call that was previously included.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_22\n\nLANGUAGE: Lua\nCODE:\n```\n-- board.script\n--\n-- INIT\n--\nfunction init(self)\n    self.board = {}                -- Contains the board structure\n    self.blocks = {}            -- List of all blocks. Used for easy filtering on selection.\n\n    self.chain = {}                -- Current selection chain\n    self.connectors = {}        -- Connector elements to mark the selection chain\n    self.num_magic = 3            -- Number of magic blocks on the board\n\n    self.drops = 1                -- Number of drops you have available\n\n    self.magic_blocks = {}        -- Magic blocks that are lined up\n\n    self.dragging = false        -- Drag touch input\nend\n```\n\n----------------------------------------\n\nTITLE: Sharing Code in Markdown\nDESCRIPTION: This snippet demonstrates how to share code in a markdown format, using triple backticks to create a code block. It's a recommended way to share code in forum posts or issue reports for better readability and easier modification.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/getting-help.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nprint(\"Hello code!\")\n```\n```\n\n----------------------------------------\n\nTITLE: Symbolicating Android Callstack\nDESCRIPTION: This series of commands demonstrates how to symbolicate an Android callstack using the addr2line tool. It includes steps to unzip the engine, find the callstack address, and resolve it.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ ls <project>/build/<platform>/[lib]dmengine[.exe|.so]\n\n$ unzip dmengine.apk -d dmengine_1_2_105\n\n$ arm-linux-androideabi-addr2line -C -f -e dmengine_1_2_105/lib/armeabi-v7a/libdmengine.so _address_\n```\n\n----------------------------------------\n\nTITLE: Mapping iOS Stack Trace Addresses to Source Code\nDESCRIPTION: Commands for extracting and using iOS debug symbols to map memory addresses from crash reports to source code locations. This involves downloading or extracting symbol files and using the atos tool to perform address translation.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/debugging-native-code.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip <project>/build/arm64-darwin/build.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ wget http://d.defold.com/archive/<sha1>/engine/arm64-darwin/dmengine.dSYM\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ atos -arch arm64 -o Contents/Resources/DWARF/dmengine 0x1492c4\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ atos -arch arm64 -o MyApp.dSYM/Contents/Resources/DWARF/MyApp -l0x100000000 0x1492c4\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ atos -arch arm64 -o MyApp.dSYM/Contents/Resources/DWARF/MyApp 0x1001492c4\ndmCrash::OnCrash(int) (in MyApp) (backtrace_execinfo.cpp:27)\n```\n\n----------------------------------------\n\nTITLE: GLSL Local Include Usage\nDESCRIPTION: Demonstrates how to use includes for local code reuse without header guards\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/shader.md#2025-04-23_snippet_11\n\nLANGUAGE: glsl\nCODE:\n```\n// In red-color.glsl\nvec3 my_red_color = vec3(1.0, 0.0, 0.0);\n\n// In my-shader.fp\nvec3 get_red_color()\n{\n  #include \"red-color.glsl\"\n  return my_red_color;\n}\n\nvec3 get_red_color_inverted()\n{\n  #include \"red-color.glsl\"\n  return 1.0 - my_red_color;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Web Font Implementation in CSS\nDESCRIPTION: Example of using a Google Web Font in the editor interface.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-styling.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Architects+Daughter&display=swap');\n\n.root {\n    -fx-font-family: \"Architects Daughter\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Parameters for HTML5 Engine Loader\nDESCRIPTION: Example of customizing engine loader parameters by redefining CUSTOM_PARAMETERS object. Shows how to disable context menu and set WebGL unsupported callback.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<script id='custom_setup' type='text/javascript'>\n    CUSTOM_PARAMETERS['disable_context_menu'] = false;\n    CUSTOM_PARAMETERS['unsupported_webgl_callback'] = function() {\n        console.log(\"Oh-oh. WebGL not supported...\");\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mapping Android Stack Trace Addresses to Source Code\nDESCRIPTION: Commands for locating and using Android debug symbols to map memory addresses from crash reports to source code locations. This process involves finding the engine files, extracting them, identifying addresses, and using addr2line to convert them to source code references.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/debugging-native-code.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ls <project>/build/<platform>/[lib]dmengine[.exe|.so]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip dmengine.apk -d dmengine_1_2_105\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ arm-linux-androideabi-addr2line -C -f -e dmengine_1_2_105/lib/armeabi-v7a/libdmengine.so _address_\n```\n\n----------------------------------------\n\nTITLE: Creating Movie Clips Dynamically in ActionScript\nDESCRIPTION: Code snippet showing how to dynamically create a movie clip instance from a class in Flash using ActionScript. The example creates a new Logo instance and adds it to the display list.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/flash.md#2025-04-23_snippet_0\n\nLANGUAGE: ActionScript\nCODE:\n```\nvar logo:Logo = new Logo();\naddChild(logo);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Android Crash Logs Using ADB\nDESCRIPTION: Command to retrieve crash logs from an Android device using Android Debug Bridge (ADB). This uses the run-as command to access app-specific data and outputs the crash log to a local file.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/debugging-native-code.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ adb shell \"run-as com.defold.example sh -c 'cat /data/data/com.defold.example/files/_crash'\" > ./_crash\n```\n\n----------------------------------------\n\nTITLE: Launching Defold Editor from macOS Terminal\nDESCRIPTION: Command to start the Defold editor from a macOS terminal to access editor logs in real-time. This approach allows viewing log output directly in the terminal window while the editor is running.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ > ./path/to/Defold.app/Contents/MacOS/Defold\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Nested Tables in Lua\nDESCRIPTION: Demonstrates the use of pprint() function to display nested table structures in a readable format.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfactions = {\"red\", \"green\", \"blue\"}\nworld = {name = \"Terra\", teams = factions}\npprint(world)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker for Google Artifact Registry\nDESCRIPTION: Command to configure Docker to use gcloud as a credential helper for downloading container images from the Google Artifact registry.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-local-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud auth configure-docker europe-west1-docker.pkg.dev\n```\n\n----------------------------------------\n\nTITLE: Running Local HTTP Server for HTML5 Testing with Python 2\nDESCRIPTION: Command to create a local HTTP server using Python 2 for testing HTML5 bundles. This is necessary because HTML5 builds cannot be tested by directly opening the index.html file in a browser.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m SimpleHTTPServer\n```\n\n----------------------------------------\n\nTITLE: Merging XML Manifests for iOS Application Configuration\nDESCRIPTION: This example shows how to merge a base XML manifest with an extension manifest for iOS app configuration. It demonstrates various merging strategies for different types of data and uses merge markers to control the behavior.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-manifest-merge-tool.md#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version='1.0' encoding='UTF-8'?>\n<!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>\n<plist version='1.0'>\n<dict>\n    <key>NSAppTransportSecurity</key>\n    <dict>\n        <key>NSExceptionDomains</key>\n        <dict>\n            <key>foobar.net</key>\n            <dict>\n                <key>testproperty</key>\n                <true/>\n            </dict>\n        </dict>\n    </dict>\n    <key>INT</key>\n    <integer>8</integer>\n\n    <key>REAL</key>\n    <real>8.0</real>\n\n    <!-- Keep this value even if an extension manifest contains the same key -->\n    <key merge='keep'>BASE64</key>\n    <data>SEVMTE8gV09STEQ=</data>\n\n    <!-- If an extension manifest also has an array with this key then any dictionary values will be merged with the first dictionary value of the base array -->\n    <key>Array1</key>\n    <array>\n        <dict>\n            <key>Foobar</key>\n            <array>\n                <string>a</string>\n            </array>\n        </dict>\n    </array>\n\n    <!-- Do not attempt to merge the values of this array, instead values from extension manifests should be added to the end of the array -->\n    <key merge='keep'>Array2</key>\n    <array>\n        <dict>\n            <key>Foobar</key>\n            <array>\n                <string>a</string>\n            </array>\n        </dict>\n    </array>\n</dict>\n</plist>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version='1.0' encoding='UTF-8'?>\n<!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>\n<plist version='1.0'>\n<dict>\n    <key>NSAppTransportSecurity</key>\n    <dict>\n        <key>NSExceptionDomains</key>\n        <dict>\n            <key>facebook.com</key>\n            <dict>\n                <key>NSIncludesSubdomains</key>\n                <true/>\n                <key>NSThirdPartyExceptionRequiresForwardSecrecy</key>\n                <false/>\n            </dict>\n        </dict>\n    </dict>\n    <key>INT</key>\n    <integer>42</integer>\n\n    <!-- Replace the existing value in the base manifest -->\n    <key merge='replace'>REAL</key>\n    <integer>16.0</integer>\n\n    <key>BASE64</key>\n    <data>Rk9PQkFS</data>\n\n    <key>Array1</key>\n    <array>\n        <dict>\n            <key>Foobar</key>\n            <array>\n                <string>b</string>\n            </array>\n        </dict>\n    </array>\n\n    <key>Array2</key>\n    <array>\n        <dict>\n            <key>Foobar</key>\n            <array>\n                <string>b</string>\n            </array>\n        </dict>\n    </array>\n</dict>\n</plist>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version='1.0'?>\n<!DOCTYPE plist SYSTEM 'file://localhost/System/Library/DTDs/PropertyList.dtd'>\n<plist version='1.0'>\n    <!-- Nested merge of dictionaries from base and extension manifests -->\n    <dict>\n        <key>NSAppTransportSecurity</key>\n        <dict>\n            <key>NSExceptionDomains</key>\n            <dict>\n                <key>foobar.net</key>\n                <dict>\n                    <key>testproperty</key>\n                    <true/>\n                </dict>\n                <key>facebook.com</key>\n                <dict>\n                    <key>NSIncludesSubdomains</key>\n                    <true/>\n                    <key>NSThirdPartyExceptionRequiresForwardSecrecy</key>\n                    <false/>\n                </dict>\n            </dict>\n        </dict>\n\n        <!-- From the base manifest -->\n        <key>INT</key>\n        <integer>8</integer>\n\n        <!-- The value from the base manifest was replaced since the merge marker was set to \"replace\" in the extension manifest -->\n        <key>REAL</key>\n        <real>16.0</real>\n\n        <!-- The value from the base manifest was used since the merge marker was set to \"keep\" in the base manifest -->\n        <key>BASE64</key>\n        <data>SEVMTE8gV09STEQ=</data>\n\n        <!-- The value from the extender manifest was added since no merge marker was specified -->\n        <key>INT</key>\n        <integer>42</integer>\n\n        <!-- The dictionary values of the array were merged since the base manifest defaults to \"merge\" -->\n        <key>Array1</key>\n        <array>\n            <dict>\n                <key>Foobar</key>\n                <array>\n                    <string>a</string>\n                    <string>b</string>\n                </array>\n            </dict>\n        </array>\n\n        <!-- The dictionary values were added to the array since the base manifest used \"keep\" -->\n        <key>Array2</key>\n        <array>\n            <dict>\n                <key>Foobar</key>\n                <array>\n                    <string>a</string>\n                </array>\n            </dict>\n            <dict>\n                <key>Foobar</key>\n                <array>\n                    <string>b</string>\n                </array>\n            </dict>\n        </array>\n    </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Platform Profiles\nDESCRIPTION: Example of starting the build server with multiple platform profiles (Android, Web, and Windows) simultaneously.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-local-setup.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -p extender -f server/docker/docker-compose.yml --profile android --profile web --profile windows up\n```\n\n----------------------------------------\n\nTITLE: Identifier for x86_64 Windows Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for 64-bit x86 processors on the Windows platform within the Defold build system. Used for creating 64-bit Windows executables.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n`x86_64-win32`\n```\n\n----------------------------------------\n\nTITLE: Swapping Children Display Order in ActionScript\nDESCRIPTION: Example of changing the display order of movie clips in Flash by swapping their positions in the display list. This affects which objects appear on top of others.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/flash.md#2025-04-23_snippet_7\n\nLANGUAGE: ActionScript\nCODE:\n```\nswapChildren(logo2,logo3);\n```\n\n----------------------------------------\n\nTITLE: C++ Debug Logging Functions\nDESCRIPTION: Native extension logging function references used in Defold for debug information.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/build-variants.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ndmLogInfo()\n```\n\nLANGUAGE: cpp\nCODE:\n```\ndmLogError()\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring libffi\nDESCRIPTION: Commands to install and configure libffi library for Defold compatibility.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/linux-faq.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wget http://ftp.br.debian.org/debian/pool/main/libf/libffi/libffi7_3.3-6_amd64.deb\n$ sudo dpkg -i libffi7_3.3-6_amd64.deb\n$ LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libffi.so.7 ./Defold\n```\n\n----------------------------------------\n\nTITLE: Font ASCII Character Set Example\nDESCRIPTION: Example of ASCII printable characters (character codes 32-126) used as default font characters in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/font.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nspace ! \" # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Memory in YAML\nDESCRIPTION: Sets the initial memory size for web applications in bytes. Must be a multiple of WebAssembly page size (64KiB).\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/app-manifest.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninitialMemory: 33554432\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Size in YAML\nDESCRIPTION: Sets the stack size for web applications in bytes.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/app-manifest.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstackSize: 5242880\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Using Shell Command in Defold Editor Script\nDESCRIPTION: This Lua snippet defines a command to format JSON files using the 'jq' shell command. It demonstrates how to execute shell commands, capture their output, and modify the editor state based on the result.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n{\n  label = \"Format JSON\",\n  locations = {\"Assets\"},\n  query = {selection = {type = \"resource\", cardinality = \"one\"}},\n  action = function(opts)\n    local path = editor.get(opts.selection, \"path\")\n    return path:match(\".json$\") ~= nil\n  end,\n  run = function(opts)\n    local text = editor.get(opts.selection, \"text\")\n    local new_text = editor.execute(\"jq\", \"-n\", \"--argjson\", \"data\", text, \"$data\", {\n      reload_resources = false, -- don't reload resources since jq does not touch disk\n      out = \"capture\" -- return text output instead of nothing\n    })\n    editor.transact({ editor.tx.set(opts.selection, \"text\", new_text) })\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Iconset to ICNS File for macOS Application Icon\nDESCRIPTION: This command uses the iconutil tool to convert a folder of PNG icons (iconset) into a single ICNS file for use as a macOS application icon.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/macos.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\niconutil -c icns -o game.icns game.iconset\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Builder Platform in Extender\nDESCRIPTION: YAML configuration for defining a remote builder platform in application-local-dev-app.yml. Specifies the URL and instance ID for the Emscripten 2.0.11 environment.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-docker-images.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    emsdk-2011:\n        url: http://emsdk-2011:9000\n        instanceId: emsdk-2011\n```\n\n----------------------------------------\n\nTITLE: Calculating Color Lookup Cell in Math\nDESCRIPTION: Formula for finding the cell with the correct red-green color set based on the blue component value.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/grading.md#2025-04-23_snippet_7\n\nLANGUAGE: math\nCODE:\n```\ncell = \\left \\lfloor{B \\times (N - 1)} \\right \\rfloor\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Scheduled Local Notifications\nDESCRIPTION: Example output from retrieving all currently scheduled local notifications. The result is a table indexed by notification IDs, with each entry containing the notification details.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extension-push.md#2025-04-23_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nDEBUG:SCRIPT:\n{\n  0 = {\n    payload = {\"data\":{\"field\":\"Some value\",\"field2\":\"Other value\"}},\n    title = A notification!,\n    priority = 2,\n    seconds = 6.009774,\n    message = Hey hey,\n  }\n  1 = {\n    payload = {\"data\":{\"field\":\"Some value\",\"field2\":\"Other value\"}},\n    title = Another notification!,\n    priority = 2,\n    seconds = 12.652521,\n    message = Hello there,\n  }\n  2 = {\n    payload = {\"data\":{\"field\":\"Some value\",\"field2\":\"Other value\"}},\n    title = Hey, much notification!,\n    priority = 2,\n    seconds = 15.553719,\n    message = Please answer!,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Shortcuts in Defold using EDN Format\nDESCRIPTION: This snippet demonstrates how to define custom keyboard shortcuts for the Defold editor using EDN format. Each entry consists of a key or key combination and the corresponding editor action. Custom shortcuts are defined in a .edn file which must be specified in the editor preferences.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-keyboard-shortcuts.md#2025-04-23_snippet_0\n\nLANGUAGE: edn\nCODE:\n```\n[\n [\"A\" :add]\n [\"Alt+Backspace\" :delete-prev-word]\n [\"Alt+Delete\" :delete-next-word]\n [\"Alt+Down\" :end-of-line]\n [\"Alt+Down\" :move-down]\n [\"Alt+Left\" :prev-word]\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Safari Version in YAML\nDESCRIPTION: Sets the minimum supported version of Safari for js-web and wasm-web builds. The value cannot be less than 90000.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/app-manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nminSafariVersion: 90000\n```\n\n----------------------------------------\n\nTITLE: Checking Notarization Status for macOS Application\nDESCRIPTION: This command checks the status of a notarization request using altool, requiring the request UUID and developer username.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/macos.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ xcrun altool --notarization-info 2EFE2717-52EF-43A5-96DC-0797E4CA1041\n               -u \"AC_USERNAME\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Firefox Version in YAML\nDESCRIPTION: Sets the minimum supported version of Firefox for js-web and wasm-web builds. The value cannot be less than 34.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/app-manifest.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nminFirefoxVersion: 34\n```\n\n----------------------------------------\n\nTITLE: Graphics API Support Table in Markdown\nDESCRIPTION: Markdown table showing the graphics API support matrix for different operating systems, including primary APIs and fallback options where applicable.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/graphics-api.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| System   | Graphics API               | Note                     |\n|----------|----------------------------|--------------------------|\n| macOS    | OpenGL 3.3 or Metal        | Vulkan via MoltenVK      |\n| Windows  | OpenGL 3.3 or Vulkan 1.1   |                          |\n| Linux    | OpenGL 3.3 or Vulkan 1.1   |                          |\n| Android  | OpenGLES 3.0 or Vulkan 1.1 | Fallback to OpenGLES 2.0 |\n| iOS      | OpenGLES 3.0 or Metal      | Vulkan via MoltenVK      |\n| HTML5    | WebGL 2.0 or WebGPU        | Fallback to WebGL 1.0    |\n```\n\n----------------------------------------\n\nTITLE: Converting PNG to ICO using ImageMagick on Linux\nDESCRIPTION: This command uses the 'convert' tool from ImageMagick to transform a PNG image into an ICO file with multiple sizes for Windows application icons.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/windows.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconvert icon_256x256px.png -compress None -define icon:auto-resize=256,128,96,64,48,32,24,16 favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Retrieving Android Crash Log via ADB\nDESCRIPTION: This command uses the Android Debug Bridge (ADB) to retrieve the crash log from a debuggable Android app and save it to a local file.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ adb shell \"run-as com.defold.example sh -c 'cat /data/data/com.defold.example/files/_crash'\" > ./_crash\n```\n\n----------------------------------------\n\nTITLE: Implementing a Temporary \"No Drop Room\" Dialog in Defold\nDESCRIPTION: A script for a dialog that appears briefly when there's no space for a drop action, automatically hiding itself after a timer expires.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/tutorials/magic-link.md#2025-04-23_snippet_28\n\nLANGUAGE: Lua\nCODE:\n```\n-- no_drop_room.gui_script\nfunction init(self)\n    msg.post(\"#\", \"hide\")\n    self.t = 0\nend\n\nfunction update(self, dt)\n    if self.t < 0 then\n        msg.post(\"#\", \"hide\")\n    else\n        self.t = self.t - dt\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"hide\") then\n        msg.post(\"#\", \"disable\")\n    elseif message_id == hash(\"show\") then\n        self.t = 1\n        msg.post(\"#\", \"enable\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Display Objects in Flash\nDESCRIPTION: Example of creating and adding Logo movie clip instances to the display list, demonstrating how depth indexing works in Flash.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_2\n\nLANGUAGE: actionscript\nCODE:\n```\nvar logo1:Logo = new Logo();\nvar logo2:Logo = new Logo();\nvar logo3:Logo = new Logo();\n\naddChild(logo1);\naddChild(logo2);\naddChild(logo3);\n```\n\n----------------------------------------\n\nTITLE: LLDB Source Path Mapping Configuration\nDESCRIPTION: Commands to configure source path mappings in LLDB for source-level debugging.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code-ios.md#2025-04-23_snippet_4\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) settings set target.source-map /Users/builder/ci/builds/engine-ios-64-master/build /Users/mathiaswesterdahl/work/defold\n(lldb) settings append target.source-map /private/var/folders/m5/bcw7ykhd6vq9lwjzq1mkp8j00000gn/T/job4836347589046353012/upload/videoplayer/src /Users/mathiaswesterdahl/work/projects/extension-videoplayer-native/videoplayer/src\n```\n\n----------------------------------------\n\nTITLE: Starting Python SimpleHTTPServer for Local HTML5 Testing\nDESCRIPTION: Command to start a Python SimpleHTTPServer for serving HTML5 games locally when testing Defold applications. This helps avoid freezing issues at the splash screen in Chrome when running directly from the filesystem.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/html5-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ python -m SimpleHTTPServer [port]\n```\n\n----------------------------------------\n\nTITLE: Identifier for ARM64 Android Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for 64-bit ARM processors on the Android platform within the Defold build system. Standard for modern Android devices.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n`arm64-android`\n```\n\n----------------------------------------\n\nTITLE: Identifier for macOS Platform in Defold\nDESCRIPTION: Represents the Apple macOS platform (formerly OS X) as a target environment within the Defold engine configuration and build system. Used for creating desktop applications for macOS.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`osx`\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote Cache in Defold Command Line Build\nDESCRIPTION: This command enables the remote cache for Defold builds using the command line tool Bob. It specifies the URL of the remote server where compiled assets will be stored and accessed via HTTP.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/caching-assets.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\njava -jar bob.jar --resource-cache-remote http://192.168.0.100/\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket Policy for Anonymous Access in AWS\nDESCRIPTION: This JSON snippet defines an S3 bucket policy that allows anonymous users to retrieve files from the bucket, enabling game clients to download Live Update resources.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/live-update-aws.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AddPerm\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::defold-liveupdate-example/*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ImageMagick on Linux for Icon Generation\nDESCRIPTION: This command installs ImageMagick on a Linux system using apt package manager. ImageMagick is used for creating Windows application icons.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/windows.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install imagemagick\n```\n\n----------------------------------------\n\nTITLE: Debugging iOS App with ios-deploy\nDESCRIPTION: This command demonstrates how to use ios-deploy to install, launch, and attach a debugger to an iOS app. It requires the iOS app bundle (.app file) and a valid provisioning profile.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-game-and-system-logs.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ios-deploy --debug --bundle <path_to_game.app>\n```\n\n----------------------------------------\n\nTITLE: Starting Python Local HTTP Server\nDESCRIPTION: Command to start a simple HTTP server using Python to serve local dependency files. The server will run on localhost:8000 and serve files from the current directory.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/working-offline.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m SimpleHTTPServer\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine Arguments in Defold Editor\nDESCRIPTION: Example showing how to format engine arguments that will be passed to the dmengine executable when building and running a project. Each argument should be on a separate line.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-preferences.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--config=bootstrap.main_collection=/my dir/1.collectionc\n--verbose\n--graphics-adapter=vulkan\n```\n\n----------------------------------------\n\nTITLE: Defining Texture Format Constants\nDESCRIPTION: List of supported texture format constants for RGB and RGBA configurations with various bit depths and compression options.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/texture-profiles.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTEXTURE_FORMAT_RGB\nTEXTURE_FORMAT_RGBA\nTEXTURE_FORMAT_RGB_16BPP\nTEXTURE_FORMAT_RGBA_16BPP\nTEXTURE_FORMAT_LUMINANCE\nTEXTURE_FORMAT_LUMINANCE_ALPHA\n```\n\n----------------------------------------\n\nTITLE: Identifier for Linux Platform in Defold\nDESCRIPTION: Represents the Linux operating system as a target environment within the Defold engine configuration and build system. Used for creating desktop applications for Linux distributions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n`linux`\n```\n\n----------------------------------------\n\nTITLE: Installing Defold on Linux - Unzip Command\nDESCRIPTION: Command to extract the Defold Linux archive to a target directory. This is the first step in installing Defold on Linux systems.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/install.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip Defold-x86_64-linux.zip -d Defold\n```\n\n----------------------------------------\n\nTITLE: Accessing macOS Game Executable via Console\nDESCRIPTION: Command to run a macOS game application via terminal by accessing the executable inside the .app package.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/debugging-game-and-system-logs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ > ./mygame.app/Contenst/MacOS/mygame\n```\n\n----------------------------------------\n\nTITLE: Installing ADB on macOS\nDESCRIPTION: Command to install Android platform tools on macOS using Homebrew package manager.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/android-adb.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ brew cask install android-platform-tools\n```\n\n----------------------------------------\n\nTITLE: Android Merged Manifest Result in XML\nDESCRIPTION: Example of the final AndroidManifest.xml after merging the base manifest with an extension manifest. The merged manifest combines all elements and upgrades the GLES version requirement.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-manifest-merge-tool.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version='1.0' encoding='utf-8'?>\n<manifest xmlns:android='http://schemas.android.com/apk/res/android'\n    package='com.defold.testmerge'\n    android:installLocation='auto'\n    android:versionCode='14'\n    android:versionName='1.0' >\n    <uses-sdk\n        android:minSdkVersion='9'\n        android:targetSdkVersion='26' />\n    <uses-permission android:name='android.permission.VIBRATE' />\n    <uses-feature\n        android:glEsVersion='0x00030000'\n        android:required='true' />\n    <application\n        android:hasCode='true'\n        android:label='Test Project' >\n        <meta-data\n            android:name='com.facebook.sdk.ApplicationName'\n            android:value='Test Project' />\n        <activity\n            android:name='com.facebook.FacebookActivity'\n            android:configChanges='keyboard|keyboardHidden|screenLayout|screenSize|orientation'\n            android:label='Test Project'\n            android:theme='@android:style/Theme.Translucent.NoTitleBar' />\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Using ADB to View Android Logs\nDESCRIPTION: Command to use Android Debug Bridge (ADB) to view all system logs from a connected Android device.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/debugging-game-and-system-logs.md#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n$ cd <path_to_android_sdk>/platform-tools/\n$ adb logcat\n```\n\n----------------------------------------\n\nTITLE: Identifier for x86 Windows Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for 32-bit x86 processors on the Windows platform within the Defold build system. Used for creating 32-bit Windows executables.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n`x86-win32`\n```\n\n----------------------------------------\n\nTITLE: Checking OpenGL Version\nDESCRIPTION: Commands to check OpenGL version and example output for troubleshooting graphics issues.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/linux-faq.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nglxinfo | grep version\n```\n\nLANGUAGE: text\nCODE:\n```\nserver glx version string: 1.4\nclient glx version string: 1.4\nGLX version: 1.4\nMax core profile version: 4.6\nMax compat profile version: 4.6\nMax GLES1 profile version: 1.1\nMax GLES[23] profile version: 3.2\nOpenGL core profile version string: 4.6 (Core Profile) Mesa 20.2.6\nOpenGL core profile shading language version string: 4.60\nOpenGL version string: 4.6 (Compatibility Profile) Mesa 20.2.6\nOpenGL shading language version string: 4.60\nOpenGL ES profile version string: OpenGL ES 3.2 Mesa 20.2.6\nOpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20\nGL_EXT_shader_implicit_conversions, GL_EXT_shader_integer_mix,\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Credentials Profile for Defold Live Update\nDESCRIPTION: This INI snippet shows how to structure the credentials file for AWS programmatic access. It includes the access key ID and secret access key for the user created for Live Update.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/live-update-aws.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[defold-liveupdate-example]\naws_access_key_id = <Access key ID>\naws_secret_access_key = <Secret access key>\n```\n\n----------------------------------------\n\nTITLE: Linux Project Configuration Link\nDESCRIPTION: Reference to the Linux section in game.project settings file for platform-specific configurations\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/linux.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Linux section](/manuals/project-settings/#linux)\n```\n\n----------------------------------------\n\nTITLE: Identifier for Android Platform in Defold\nDESCRIPTION: Represents the Google Android platform as a target environment within the Defold engine configuration and build system. Used for creating builds deployable on Android devices.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`android`\n```\n\n----------------------------------------\n\nTITLE: iOS Push Notification Payload Structure Example\nDESCRIPTION: Sample output showing the structure of a received push notification payload on iOS. It includes badge count, alert message, and sound settings in the 'aps' dictionary.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extension-push.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nDEBUG:SCRIPT:\n{\n  aps = {\n    badge = 42,\n    alert = Testing.. (1),\n    sound = default,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Font Definitions in SCSS\nDESCRIPTION: Default font declarations and typography settings for the Defold editor interface.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-styling.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@font-face {\n  src: url(\"SourceSansPro-Light.ttf\");\n}\n\n@font-face {\n  src: url(\"DejaVuSansMono.ttf\");\n}\n\n$default-font-mono: 'Dejavu Sans Mono';\n$default-font: 'Source Sans Pro';\n$default-font-bold: 'Source Sans Pro Semibold';\n$default-font-italic: 'Source Sans Pro Italic';\n$default-font-light: 'Source Sans Pro Light';\n\n.root {\n    -fx-font-size: 13px;\n    -fx-font-family: $default-font;\n}\n\nText.strong {\n  -fx-font-family: $default-font-bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Directory Structure of Defold Documentation in Bash\nDESCRIPTION: This terminal output shows the result of a directory listing command (likely 'ls -la') on the Defold documentation project directory. It displays directories for different documentation categories with their permissions, ownership information, sizes, and modification dates.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/bob.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndrwxr-xr-x  223 sicher  staff      7582  1 Dec 10:15 graphics\ndrwxr-xr-x    3 sicher  staff       102  1 Dec 10:15 input\ndrwxr-xr-x   20 sicher  staff       680  1 Dec 10:15 logic\ndrwxr-xr-x   27 sicher  staff       918  1 Dec 10:15 sound\n-rw-r--r--    1 sicher  staff    131926  1 Dec 10:15 state\n$\n```\n\n----------------------------------------\n\nTITLE: Android Extension Manifest Example in XML\nDESCRIPTION: Example of an extension's AndroidManifest.xml that will be merged with the base manifest, adding Facebook SDK integration and upgrading the required GLES version.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extensions-manifest-merge-tool.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version='1.0' encoding='utf-8'?>\n<manifest xmlns:android='http://schemas.android.com/apk/res/android' package='com.defold.testmerge'>\n     <uses-sdk android:targetSdkVersion=\"{{android.target_sdk_version}}\" />\n    <uses-feature android:required='true' android:glEsVersion='0x00030000' />\n    <application>\n        <meta-data android:name='com.facebook.sdk.ApplicationName'\n            android:value='Test Project' />\n        <activity android:name='com.facebook.FacebookActivity'\n          android:theme='@android:style/Theme.Translucent.NoTitleBar'\n          android:configChanges='keyboard|keyboardHidden|screenLayout|screenSize|orientation'\n          android:label='Test Project' />\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Collision Detection in Flash using hitTestObject\nDESCRIPTION: Example of basic collision detection in Flash using the hitTestObject() method between two movie clips.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/flash.md#2025-04-23_snippet_5\n\nLANGUAGE: actionscript\nCODE:\n```\nbullet.hitTestObject(bullseye);\n```\n\n----------------------------------------\n\nTITLE: Identifier for ARM64 macOS Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for 64-bit ARM processors (Apple Silicon) on the macOS platform within the Defold build system. Used for native builds on M1/M2/M3 Macs.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n`arm64-osx`\n```\n\n----------------------------------------\n\nTITLE: Identifier for JavaScript Web Target in Defold\nDESCRIPTION: Specifies the target architecture (`js`) and platform (`web`) pair for the JavaScript (HTML5) build on the Web platform within the Defold build system. Generates standard HTML5/JS output.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n`js-web`\n```\n\n----------------------------------------\n\nTITLE: Local Font Implementation in CSS\nDESCRIPTION: Example of using a local font file in the editor interface.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-styling.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'Comic Sans MS';\n  src: local(\"cs.ttf\");\n}\n\n.root {\n  -fx-font-family: 'Comic Sans MS';\n}\n```\n\n----------------------------------------\n\nTITLE: Identifier for iOS Platform in Defold\nDESCRIPTION: Represents the Apple iOS platform as a target environment within the Defold engine configuration and build system. Used to specify builds targeting iPhones and iPads.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`ios`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating LaTeX Math in Markdown\nDESCRIPTION: Shows how to use LaTeX math notation in Markdown, both inline and as separate blocks.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/test.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n$\\int\\frac {d\\theta}{1+\\theta^2} = \\tan^{-1} \\theta+ C$\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```math\n\\int\\frac {d\\theta}{1+\\theta^2} = \\tan^{-1} \\theta+ C\n```\n```\n\n----------------------------------------\n\nTITLE: Stopping the Extender Services\nDESCRIPTION: Command to stop all running Docker Compose services for the Extender build server.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-local-setup.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -p extender down\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions for macOS Application\nDESCRIPTION: This command adds execute permissions to the game executable, allowing anyone to run the application on macOS.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/macos.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ chmod +x Game.app/Contents/MacOS/Game\n```\n\n----------------------------------------\n\nTITLE: GitLab Private Repository Authentication\nDESCRIPTION: URL format for accessing private GitLab repositories using a personal access token as a URL parameter.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/libraries.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://gitlab.com/defold/private/-/archive/main/test-main.zip?private_token=personal-access-token\n```\n\n----------------------------------------\n\nTITLE: Identifier for ARM64 iOS Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for 64-bit ARM processors on the iOS platform within the Defold build system. This is standard for modern iOS devices.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n`arm64-ios`\n```\n\n----------------------------------------\n\nTITLE: Defining Default Color Palette in SCSS\nDESCRIPTION: Default color definitions for the Defold editor UI, including background, component, and text colors with their variations.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-styling.md#2025-04-23_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n* {\n\t// Background\n\t-df-background-darker:    derive(#212428, -10%);\n\t-df-background-dark:      derive(#212428, -5%);\n\t-df-background:           #212428;\n\t-df-background-light:     derive(#212428, 10%);\n\t-df-background-lighter:   derive(#212428, 20%);\n\n\t// Component\n\t-df-component-darker:     derive(#464c55, -20%);\n\t-df-component-dark:       derive(#464c55, -10%);\n\t-df-component:            #464c55;\n\t-df-component-light:      derive(#464c55, 10%);\n\t-df-component-lighter:    derive(#464c55, 20%);\n\n\t// Text & icons\n\t-df-text-dark:            derive(#b4bac1, -10%);\n\t-df-text:                 #b4bac1;\n\t-df-text-selected:        derive(#b4bac1, 20%);\n}\n```\n\n----------------------------------------\n\nTITLE: Identifier for Windows Platform in Defold\nDESCRIPTION: Represents the Microsoft Windows platform as a target environment within the Defold engine configuration and build system. Used for creating desktop applications for Windows (often covers both 32-bit and 64-bit unless paired with specific architecture).\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n`win32`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Folder from Executable\nDESCRIPTION: Command to extract the job folder information from the executable's debug map.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code-ios.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ dsymutil -dump-debug-map <executable> 2>&1 >/dev/null | grep /job\n```\n\n----------------------------------------\n\nTITLE: Identifier for WebAssembly Web Target in Defold\nDESCRIPTION: Specifies the target architecture (`wasm`) and platform (`web`) pair for the WebAssembly build on the Web platform within the Defold build system. Generates optimized WebAssembly output for modern browsers.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n`wasm-web`\n```\n\n----------------------------------------\n\nTITLE: Downloading Prebuilt JAR Files\nDESCRIPTION: Script to download prebuilt server (extender.jar) and manifest merge tool (manifestmergetool.jar) from Google Artifact Registry with specific versions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-local-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nTMP_DIR=$(pwd)/server/_tmp\nAPPLICATION_DIR=$(pwd)/server/app\n# set necessary version of Extender and Manifest merge tool\n# versions can be found at Github release page https://github.com/defold/extender/releases\n# or you can pull latest version (see code sample below)\nEXTENDER_VERSION=2.6.5\nMANIFESTMERGETOOL_VERSION=1.3.0\necho \"Download prebuild jars to ${APPLICATION_DIR}\"\nrm -rf ${TMP_DIR}\nmkdir -p ${TMP_DIR}\nrm -rf ${APPLICATION_DIR}\nmkdir -p ${APPLICATION_DIR}\n\ngcloud artifacts files download \\\n--project=extender-426409 \\\n--location=europe-west1 \\\n--repository=extender-maven \\\n--destination=${TMP_DIR} \\\ncom/defold/extender/server/${EXTENDER_VERSION}/server-${EXTENDER_VERSION}.jar\n\ngcloud artifacts files download \\\n--project=extender-426409 \\\n--location=europe-west1 \\\n--repository=extender-maven \\\n--destination=${TMP_DIR} \\\ncom/defold/extender/manifestmergetool/${MANIFESTMERGETOOL_VERSION}/manifestmergetool-${MANIFESTMERGETOOL_VERSION}.jar\n\ncp ${TMP_DIR}/$(ls ${TMP_DIR} | grep server-${EXTENDER_VERSION}.jar) ${APPLICATION_DIR}/extender.jar\ncp ${TMP_DIR}/$(ls ${TMP_DIR} | grep manifestmergetool-${MANIFESTMERGETOOL_VERSION}.jar) ${APPLICATION_DIR}/manifestmergetool.jar\n```\n\n----------------------------------------\n\nTITLE: Notarizing macOS Application with Altool\nDESCRIPTION: This command uploads the zipped application for notarization using altool, specifying the bundle ID, developer credentials, and file.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/macos.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ xcrun altool --notarize-app\n               --primary-bundle-id \"com.acme.foobar\"\n               --username \"AC_USERNAME\"\n               --password \"@keychain:AC_PASSWORD\"\n               --asc-provider <ProviderShortname>\n               --file Game.zip\n```\n\n----------------------------------------\n\nTITLE: Identifier for x86_64 macOS Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for 64-bit x86 processors (Intel) on the macOS platform within the Defold build system. Used for builds targeting Intel-based Macs.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n`x86_64-osx`\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Chrome Version in YAML\nDESCRIPTION: Sets the minimum supported version of Chrome for js-web and wasm-web builds. The value cannot be less than 32.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/app-manifest.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nminChromeVersion: 32\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker and Google Cloud Configuration\nDESCRIPTION: Command to test Docker and Google Cloud setup by pulling the base image used by build server containers. Requires Docker Desktop to be running.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-local-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull --platform linux/amd64 europe-west1-docker.pkg.dev/extender-426409/extender-public-registry/extender-base-env:latest\n```\n\n----------------------------------------\n\nTITLE: GitHub Private Repository Authentication\nDESCRIPTION: URL format for accessing private GitHub repositories using a personal access token.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/libraries.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github-username:personal-access-token@github.com/defold/private/archive/main.zip\n```\n\n----------------------------------------\n\nTITLE: Identifier for x86_64 Linux Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for 64-bit x86 processors on the Linux platform within the Defold build system. Standard for most Linux desktop distributions.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n`x86_64-linux`\n```\n\n----------------------------------------\n\nTITLE: Starting the Extender Server\nDESCRIPTION: Command to start the build server using Docker Compose with a specified platform profile.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-local-setup.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -p extender -f server/docker/docker-compose.yml --profile <profile> up\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication URL Format\nDESCRIPTION: Example showing how to format a library URL with basic authentication credentials for private repository access.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/libraries.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://username:password@github.com/defold/private/archive/main.zip\n```\n\n----------------------------------------\n\nTITLE: Authorizing Google Cloud Authentication\nDESCRIPTION: Command to log in to Google Cloud for authentication, which is necessary for downloading Docker container images from the Artifact registry.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-local-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Heap Size in Defold Editor\nDESCRIPTION: Configuration example for increasing the Java heap size to 6GB in the Defold editor's config file. This setting helps resolve OutOfMemoryError issues by adjusting the maximum memory allocation for the Java virtual machine.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/editor-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvmargs = -Xmx6gb,-Dfile.encoding=UTF-8,-Djna.nosys=true,-Ddefold.launcherpath=${bootstrap.launcherpath},-Ddefold.resourcespath=${bootstrap.resourcespath},-Ddefold.version=${build.version},-Ddefold.editor.sha1=${build.editor_sha1},-Ddefold.engine.sha1=${build.engine_sha1},-Ddefold.buildtime=${build.time},-Ddefold.channel=${build.channel},-Ddefold.archive.domain=${build.archive_domain},-Djava.net.preferIPv4Stack=true,-Dsun.net.client.defaultConnectTimeout=30000,-Dsun.net.client.defaultReadTimeout=30000,-Djogl.texture.notexrect=true,-Dglass.accessible.force=false,--illegal-access=warn,--add-opens=java.base/java.lang=ALL-UNNAMED,--add-opens=java.desktop/sun.awt=ALL-UNNAMED,--add-opens=java.desktop/sun.java2d.opengl=ALL-UNNAMED,--add-opens=java.xml/com.sun.org.apache.xerces.internal.jaxp=ALL-UNNAMED\n```\n\n----------------------------------------\n\nTITLE: Building iOS App Bundle with Debug Symbols\nDESCRIPTION: Command to build an iOS app bundle using bob.jar with debug symbols enabled. Includes platform specification, build options and code signing parameters.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code-ios.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd myproject\n$ wget http://d.defold.com/archive/<sha1>/bob/bob.jar\n$ java -jar bob.jar --platform armv7-darwin build --with-symbols --variant debug --archive bundle -bo build/ios -mp <app>.mobileprovision --identity \"iPhone Developer: Your Name (ID)\"\n```\n\n----------------------------------------\n\nTITLE: Setting up CORS Configuration for S3 Bucket in AWS\nDESCRIPTION: This XML snippet configures Cross-Origin Resource Sharing (CORS) for an S3 bucket, allowing access from any website. This is necessary for HTML5 game clients.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/live-update-aws.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n    <CORSRule>\n        <AllowedOrigin>*</AllowedOrigin>\n        <AllowedMethod>GET</AllowedMethod>\n    </CORSRule>\n</CORSConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Identifier for Web Platform in Defold\nDESCRIPTION: Represents web browsers as a target environment (HTML5/JavaScript/WebAssembly) within the Defold engine configuration and build system. Used for creating builds that run in a web browser.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n`web`\n```\n\n----------------------------------------\n\nTITLE: Running Defold Game from macOS Terminal\nDESCRIPTION: This command demonstrates how to launch a Defold game executable from the macOS terminal. It navigates into the .app file and runs the game binary.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-game-and-system-logs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ > ./mygame.app/Contents/MacOS/mygame\n```\n\n----------------------------------------\n\nTITLE: Filtering Android Logs for Defold Output\nDESCRIPTION: Command to filter Android logs to show only Defold-related output using ADB logcat with the -s flag.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/debugging-game-and-system-logs.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n$ cd <path_to_android_sdk>/platform-tools/\n$ adb logcat -s defold\n--------- beginning of /dev/log/system\n--------- beginning of /dev/log/main\nI/defold  ( 6210): INFO:DLIB: SSDP started (ssdp://192.168.0.97:58089, http://0.0.0.0:38637)\nI/defold  ( 6210): INFO:ENGINE: Defold Engine 1.2.50 (8d1b912)\nI/defold  ( 6210): INFO:ENGINE: Loading data from:\nI/defold  ( 6210): INFO:ENGINE: Initialised sound device 'default'\nI/defold  ( 6210): \nD/defold  ( 6210): DEBUG:SCRIPT: Hello there, log!\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Exclusions in .defignore\nDESCRIPTION: Example of .defignore file configuration showing how to exclude specific files and folders from Defold projects. The paths are specified one per line and can target individual files or entire directories.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/project-defignore.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/path/to/file.png\n/otherpath\n```\n\n----------------------------------------\n\nTITLE: Installing ADB on Fedora\nDESCRIPTION: Command to install Android tools on Fedora 18/19 using yum package manager.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/android-adb.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo yum install android-tools\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Route with cURL\nDESCRIPTION: Shell command example showing how to test the JSON endpoint using curl and jq\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/editor-scripts.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://0.0.0.0:12345/my-extension/echo-request?q=1' -X POST --data '{\"input\": \"json\"}' | jq\n```\n\n----------------------------------------\n\nTITLE: Identifier for ARMv7 Android Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for 32-bit ARMv7 processors on the Android platform within the Defold build system. Targets older 32-bit Android devices.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n`armv7-android`\n```\n\n----------------------------------------\n\nTITLE: Configuring Defold UI Scaling in Config File\nDESCRIPTION: Configuration options for vmargs to adjust UI scaling using glass.gtk.uiScale parameter.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/linux-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvmargs = -Dglass.gtk.uiScale=1.5,-Dfile.encoding=UTF-8,...\nvmargs = -Dglass.gtk.uiScale=175%,-Dfile.encoding=UTF-8,...\nvmargs = -Dglass.gtk.uiScale=192dpi,-Dfile.encoding=UTF-8,...\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Conflict Error Example\nDESCRIPTION: Example error message showing conflicts in AndroidManifest.xml when multiple extensions provide conflicting property tags, specifically related to Firebase and AdMob integration.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/android-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSEVERE: /tmp/job4531953598647135356/upload/AndroidManifest.xml:32:13-58\nError: Attribute property#android.adservices.AD_SERVICES_CONFIG@resource\nvalue=(@xml/ga_ad_services_config) from AndroidManifest.xml:32:13-58 is also\npresent at AndroidManifest.xml:92:13-59 value=(@xml/gma_ad_services_config).\nSuggestion: add 'tools:replace=\"android:resource\"' to <property> element at\nAndroidManifest.xml to override.\n```\n\n----------------------------------------\n\nTITLE: LLDB Debug Symbol Configuration\nDESCRIPTION: LLDB commands for adding debug symbols and verifying their loading.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/debugging-native-code-ios.md#2025-04-23_snippet_3\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) add-dsym <PathTo.dSYM>\n(lldb) image list <AppName>\n```\n\n----------------------------------------\n\nTITLE: Device Token Output for iOS Push Notifications\nDESCRIPTION: Example of the device token output format when successfully registering for push notifications on iOS. The token is a hexadecimal string that uniquely identifies the device.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extension-push.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nDEBUG:SCRIPT: 1f8ba7869b84b10df69a07aa623cd7f55f62bca22cef61b51fedac643ec61ad8\n```\n\n----------------------------------------\n\nTITLE: Elementary OS Mouse Click Fix\nDESCRIPTION: Command to prevent mouse clicks from passing through the Defold editor on Elementary OS.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/linux-faq.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ GTK_CSD=0 ./Defold\n```\n\n----------------------------------------\n\nTITLE: Determining Latest Extender Versions\nDESCRIPTION: Script to query Google Artifact Registry for the latest versions of the extender and manifestmergetool packages.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-local-setup.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nEXTENDER_VERSION=$(gcloud artifacts versions list \\\n    --project=extender-426409 \\\n    --location=europe-west1 \\\n    --repository=extender-maven \\\n    --package=\"com.defold.extender:server\" \\\n    --sort-by=\"~createTime\" \\\n    --limit=1 \\\n    --format=\"value(name)\")\n\nMANIFESTMERGETOOL_VERSION=$(gcloud artifacts versions list \\\n    --project=extender-426409 \\\n    --location=europe-west1 \\\n    --repository=extender-maven \\\n    --package=\"com.defold.extender:manifestmergetool\" \\\n    --sort-by=\"~createTime\" \\\n    --limit=1 \\\n    --format=\"value(name)\")\n```\n\n----------------------------------------\n\nTITLE: Inspecting Provisioning Profile Entitlements\nDESCRIPTION: Command to inspect the entitlements within an iOS mobile provisioning profile using the security cms tool.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/ios-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsecurity cms -D -i /path/to/iOSTeamProfile.mobileprovision\n```\n\n----------------------------------------\n\nTITLE: Identifier for ARM64 Linux Target in Defold\nDESCRIPTION: Specifies the target architecture-platform pair for 64-bit ARM processors on the Linux platform within the Defold build system. Targets devices like Raspberry Pi or other ARM-based Linux systems.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/platforms.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n`arm64-linux`\n```\n\n----------------------------------------\n\nTITLE: Cloning Extender Repository\nDESCRIPTION: Commands to clone the Git repository containing the Defold build server code and navigate to its directory.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/extender-local-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/defold/extender.git\ncd extender\n```\n\n----------------------------------------\n\nTITLE: Inspecting App Entitlements with codesign\nDESCRIPTION: Command to check the entitlements of a bundled iOS application using the codesign tool.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/ios-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncodesign -d --ent :- /path/to/the.app\n```\n\n----------------------------------------\n\nTITLE: Code Reference for Build Variants\nDESCRIPTION: Reference to build variants terminology in code, used within the Defold engine context.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/build-variants.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nBuild variants\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAL Dependencies\nDESCRIPTION: Commands to install required OpenAL libraries for running Defold games.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/linux-faq.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ apt-get install libopenal-dev\n```\n\n----------------------------------------\n\nTITLE: ASTC Format Constants\nDESCRIPTION: List of supported ASTC texture format constants with different block compression sizes for RGBA channels.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/texture-profiles.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nTEXTURE_FORMAT_RGBA_ASTC_4X4\nTEXTURE_FORMAT_RGBA_ASTC_5X4\nTEXTURE_FORMAT_RGBA_ASTC_5X5\nTEXTURE_FORMAT_RGBA_ASTC_6X5\nTEXTURE_FORMAT_RGBA_ASTC_6X6\nTEXTURE_FORMAT_RGBA_ASTC_8X5\nTEXTURE_FORMAT_RGBA_ASTC_8X6\nTEXTURE_FORMAT_RGBA_ASTC_8X8\nTEXTURE_FORMAT_RGBA_ASTC_10X5\nTEXTURE_FORMAT_RGBA_ASTC_10X6\nTEXTURE_FORMAT_RGBA_ASTC_10X8\nTEXTURE_FORMAT_RGBA_ASTC_10X10\nTEXTURE_FORMAT_RGBA_ASTC_12X10\nTEXTURE_FORMAT_RGBA_ASTC_12X12\n```\n\n----------------------------------------\n\nTITLE: Launching Defold on Linux - Command Line\nDESCRIPTION: Commands to navigate to the Defold installation directory and launch the application from the terminal.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/install.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd Defold\n$ ./Defold\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Gating in Defold with Lua\nDESCRIPTION: This code implements a sound gating mechanism to prevent rapid repetition of the same sound within a specified time frame.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/sound.md#2025-04-23_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal gate_time = 0.3\n\nfunction init(self)\n    self.sounds = {}\nend\n\nfunction update(self, dt)\n    for k,_ in pairs(self.sounds) do\n        self.sounds[k] = self.sounds[k] - dt\n        if self.sounds[k] < 0 then\n            self.sounds[k] = nil\n        end\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"play_gated_sound\") then\n        if self.sounds[message.soundcomponent] == nil then\n            self.sounds[message.soundcomponent] = gate_time\n            sound.play(message.soundcomponent, { gain = message.gain })\n        else\n            print(\"gated \" .. message.soundcomponent)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing FCM Push Notifications with curl\nDESCRIPTION: Command-line example using curl to test sending push notifications to an Android device through Firebase Cloud Messaging (FCM). It demonstrates the HTTP POST request format with required headers and payload.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extension-push.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ curl  -X POST  -H \"Content-type: application/json\"  -H 'Authorization: key=SERVER_KEY' -d '{\"registration_ids\" : [\"TOKEN_ID\"], \"data\": {\"alert\": \"Hello\"}}' https://fcm.googleapis.com/fcm/send\n```\n\n----------------------------------------\n\nTITLE: Executing YouTube Video Metadata Fetching Script in Python\nDESCRIPTION: This code snippet demonstrates how to run a Python script that fetches metadata for YouTube videos. The script generates entries for new videos to be added to the Defold documentation.\nSOURCE: https://github.com/defold/doc/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./scripts/fetch_youtube_video_metadata.py \"https://www.youtube.com/watch?v=R4oEB6e8G0A\" \"https://www.youtube.com/watch?v=iRDa8NAJtzQ\"\n```\n\n----------------------------------------\n\nTITLE: ZeroBrane Debug Server Connection Log\nDESCRIPTION: Example debug server connection output showing successful connection and path mapping.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/zerobrane.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nDebugger server started at localhost:8172.\nMapped remote request for '/' to '/Users/my_user/Documents/Projects/Defold_project/'.\nDebugging session started in '/Users/my_user/Documents/Projects/Defold_project'.\n```\n\n----------------------------------------\n\nTITLE: Processing Text Input in Lua for Defold GUI\nDESCRIPTION: This code snippet shows how to handle text input in Defold. It captures typed characters and appends them to existing text in a GUI node, demonstrating basic text input functionality.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-key-and-text.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"text\") then\n        -- Concatenate the typed character to the \"user\" node...\n        local node = gui.get_node(\"user\")\n        local name = gui.get_text(node)\n        name = name .. action.text\n        gui.set_text(node, name)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Key Triggers in Lua for Defold\nDESCRIPTION: This snippet demonstrates how to handle key trigger input in Defold. It checks for a 'left' action and responds to both pressed and released states, allowing for control of character movement.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/input-key-and-text.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_input(self, action_id, action)\n    if action_id == hash(\"left\") then\n        if action.pressed then\n            -- start moving left\n        elseif action.released then\n            -- stop moving left\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore using Command Line\nDESCRIPTION: Command to generate a custom keystore file for signing Android applications with specified details like certificate name, organization, password, and validity period.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/android.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -genkey -v -noprompt -dname \"CN=John Smith, OU=Area 51, O=US Air Force, L=Unknown, ST=Nevada, C=US\" -keystore mykeystore.keystore -storepass 5Up3r_53cR3t -alias myAlias -keyalg RSA -validity 9125\n```\n\n----------------------------------------\n\nTITLE: Device Token Output for Android Push Notifications\nDESCRIPTION: Example of the device token output format when successfully registering for push notifications on Android. The token is provided by Firebase Cloud Messaging service.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extension-push.md#2025-04-23_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nDEBUG:SCRIPT: APA91bHkcKm0QHAMUCEQ_Dlpq2gzset6vh0cz46kDDV6230C5rFivyWZMCxGXcjxRDKg1PK4z1kWg3xnUVqSDiO_4_RiG8b8HeYJfaoW1ho4ukWYXjq5RE0Sy-JTyrhqRusUP_BxRTcE\n```\n\n----------------------------------------\n\nTITLE: Initializing Render Script in Defold\nDESCRIPTION: Demonstrates the init() function in a Defold render script, setting up render predicates and cameras.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/render.md#2025-04-23_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfunction init(self)\n  -- 定义渲染优先级. 每个优先级的绘制不相干所以绘制时可以任意修改 OpenGL 的状态.\n    self.predicates = create_predicates(\"tile\", \"gui\", \"text\", \"particle\", \"model\")\n\n    -- 创建和填充数据表将在 update() 中使用\n    local state = create_state()\n    self.state = state\n    local camera_world = create_camera(state, \"camera_world\", true)\n    init_camera(camera_world, get_stretch_projection)\n    local camera_gui = create_camera(state, \"camera_gui\")\n    init_camera(camera_gui, get_gui_projection)\n    update_state(state)\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Scheduled Local Notification Details\nDESCRIPTION: Code showing how to retrieve information about a specific scheduled local notification using its ID. The returned table contains all details about the notification.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extension-push.md#2025-04-23_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\nDEBUG:SCRIPT:\n{\n  payload = {\"data\":{\"field\":\"Some value\",\"field2\":\"Other value\"}},\n  title = A notification!,\n  priority = 2,\n  seconds = 19.991938,\n  message = Hello there,\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: The main documentation structure defining the title and brief description of the Defold project setup guide.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/project-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Project setup\nbrief: This manual covers how to create or open a project in Defold.\n---\n```\n\n----------------------------------------\n\nTITLE: Example Code Output in Markdown\nDESCRIPTION: This snippet shows the result of the markdown code block, displaying the actual code that would be rendered in a forum post or documentation.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/getting-help.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nprint(\"Hello code!\")\n```\n\n----------------------------------------\n\nTITLE: Starting Particle Effects in Defold GUI\nDESCRIPTION: This snippet demonstrates how to start a particle effect on a GUI node. It retrieves a reference to the particle effect node and then plays the effect using the gui.play_particlefx function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/gui-particlefx.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- start the particle effect\nlocal particles_node = gui.get_node(\"particlefx\")\ngui.play_particlefx(particles_node)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and Installing Defold App on Android Device\nDESCRIPTION: Commands for managing Defold app installation on Android devices using ADB, specifically handling certificate conflicts by uninstalling before reinstalling.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/android-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ adb uninstall com.defold.examples\nSuccess\n$ adb install Defold\\ examples.apk\n4826 KB/s (18774344 bytes in 3.798s)\n      pkg: /data/local/tmp/Defold examples.apk\nSuccess\n```\n\n----------------------------------------\n\nTITLE: Conditional Splash Image CSS Template\nDESCRIPTION: CSS code snippet using Mustache templating to conditionally include a splash image background if one is specified in the project settings.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n{{#DEFOLD_SPLASH_IMAGE}}\n\t\tbackground-image: url(\"{{DEFOLD_SPLASH_IMAGE}}\");\n{{/DEFOLD_SPLASH_IMAGE}}\n```\n\n----------------------------------------\n\nTITLE: Checking for Extension Support in Lua\nDESCRIPTION: A code snippet demonstrating how to check if an extension is supported on the current platform before using it in Lua code.\nSOURCE: https://github.com/defold/doc/blob/master/docs/zh/manuals/extensions-best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nif myextension ~= nil then\n    myextension.do_something()\nend\n```\n\n----------------------------------------\n\nTITLE: Reading Custom Configuration Values in Lua\nDESCRIPTION: Example of how to read custom configuration values using the sys.get_config() function in Lua, including converting string values to numbers.\nSOURCE: https://github.com/defold/doc/blob/master/docs/ru/manuals/project-settings.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_value = tonumber(sys.get_config(\"test.my_value\"))\n```\n\n----------------------------------------\n\nTITLE: Basic game.project File Format in INI\nDESCRIPTION: The basic structure of the game.project configuration file in Defold, which follows the INI format with categories and key-value pairs.\nSOURCE: https://github.com/defold/doc/blob/master/docs/ru/manuals/project-settings.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[category1]\nsetting1 = value\nsetting2 = value\n[category2]\n...\n```\n\n----------------------------------------\n\nTITLE: Getting System Information in Lua\nDESCRIPTION: Code snippet demonstrating how to retrieve system information at runtime using the sys.get_sys_info() function.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/faq/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nsys.get_sys_info()\n```\n\n----------------------------------------\n\nTITLE: Running Local HTTP Server for HTML5 Testing with Python 3\nDESCRIPTION: Command to create a local HTTP server using Python 3 for testing HTML5 bundles. This provides an alternative command for Python 3 users.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/manuals/html5.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Alpha Blend Mode Calculation in GLSL\nDESCRIPTION: Normal alpha blending calculation that combines source and destination colors based on source alpha\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/blend-modes.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nsrc.a * src.rgb + (1 - src.a) * dst.rgb\n```\n\n----------------------------------------\n\nTITLE: Installing GNOME Libraries\nDESCRIPTION: Command to install libgnome for browser-dependent features in Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/linux-faq.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ apt-get install libgnome\n```\n\n----------------------------------------\n\nTITLE: Setting Mesa GL Version Override\nDESCRIPTION: Commands to override Mesa GL version for compatibility with Defold.\nSOURCE: https://github.com/defold/doc/blob/master/docs/en/shared/linux-faq.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ MESA_GL_VERSION_OVERRIDE=2.1 ./Defold\n```"
  }
]