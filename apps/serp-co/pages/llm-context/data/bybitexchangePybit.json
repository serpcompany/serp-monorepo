[
  {
    "owner": "bybit-exchange",
    "repo": "pybit",
    "content": "TITLE: Placing Batch Orders\nDESCRIPTION: This code creates and submits a batch of limit orders for USDC options using the place_batch_order method. It constructs a payload containing order parameters like symbol, side, order type, quantity, and price for each order. The 'category' is set to 'option', and the orders are submitted in bulk within the 'request' field of the payload. It assumes an initialized HTTP session object.\nSOURCE: https://github.com/bybit-exchange/pybit/blob/master/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Create five long USDC Options orders.\n# (Currently, only USDC Options support sending orders in bulk.)\npayload = {\"category\": \"option\"}\norders = [{\n  \"symbol\": \"BTC-30JUN23-20000-C\",\n  \"side\": \"Buy\",\n  \"orderType\": \"Limit\",\n  \"qty\": \"0.1\",\n  \"price\": i,\n} for i in [15000, 15500, 16000, 16500, 16600]]\n\npayload[\"request\"] = orders\n# Submit the orders in bulk.\nsession.place_batch_order(payload)\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Session\nDESCRIPTION: This code snippet creates an HTTP session to interact with the Bybit API. It initializes the HTTP object with the testnet flag set to False, indicating that it will connect to the mainnet. It also includes the API key and API secret for authentication.\nSOURCE: https://github.com/bybit-exchange/pybit/blob/master/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsession = HTTP(\n    testnet=False,\n    api_key=\"...\",\n    api_secret=\"...\",\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Orderbook\nDESCRIPTION: This code snippet retrieves the order book for the BTCUSDT perpetual contract using the get_orderbook method of the HTTP session object.  The category is set to \"linear\" and the symbol to \"BTCUSDT\" to specify the desired market. The method returns the order book data from the Bybit API.\nSOURCE: https://github.com/bybit-exchange/pybit/blob/master/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nsession.get_orderbook(category=\"linear\", symbol=\"BTCUSDT\")\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Module\nDESCRIPTION: This code snippet imports the HTTP module from the pybit.unified_trading submodule. This module provides the functionality to interact with the Bybit Unified Trading API using HTTP requests. It is a necessary step before creating an HTTP session.\nSOURCE: https://github.com/bybit-exchange/pybit/blob/master/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pybit.unified_trading import HTTP\n```\n\n----------------------------------------\n\nTITLE: Installing Pybit\nDESCRIPTION: This command installs the pybit library using pip, the Python package installer. Pybit requires Python 3.9.1 or higher and provides an interface for interacting with Bybit's HTTP and WebSocket APIs. It retrieves the latest version of pybit from PyPI and installs it along with its dependencies.\nSOURCE: https://github.com/bybit-exchange/pybit/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install pybit\n```\n\n----------------------------------------\n\nTITLE: Closing Position with Helpers Class\nDESCRIPTION: Demonstrates how to use the `Helpers` class and its `close_position` method to close a position. It requires an HTTP session object initialized from `pybit.unified_trading`. The code imports the necessary class, instantiates it with the session, and calls the `close_position` method with category and symbol parameters. The output is the result of the close position operation.\nSOURCE: https://github.com/bybit-exchange/pybit/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pybit.helpers import Helpers\nmy_helper = Helpers(session)  # your HTTP session object (eg, from pybit.unified_trading import HTTP)\nprint(my_helper.close_position(category=\"linear\", symbol=\"BTCUSDT\"))\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies\nDESCRIPTION: This snippet outlines the required Python packages and their minimum or specific versions. It's crucial for setting up the project environment. The listed packages include requests, websocket-client, and pycryptodome. The `requests` package is used for making HTTP requests; `websocket-client` is used for real-time data streams; and `pycryptodome` is used for cryptographic operations.\nSOURCE: https://github.com/bybit-exchange/pybit/blob/master/requirements.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrequests>=2.22.0\nwebsocket-client==1.5.0\npycryptodome==3.20.0\n```"
  }
]