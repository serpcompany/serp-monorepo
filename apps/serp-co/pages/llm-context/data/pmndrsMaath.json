[
  {
    "owner": "pmndrs",
    "repo": "maath",
    "content": "TITLE: Implementing animation with damp functions in maath\nDESCRIPTION: Examples of using various damp functions for animating different types of properties including vectors, colors, rotations, and more.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { damp, damp2, damp3, damp4, dampE, dampM, dampQ, dampS, dampC } from 'maath/easing'\n\nfunction frameloop() {\n  const delta = clock.getDelta()\n  // Animates foo.bar to 10\n  damp(foo, \"bar\", 10, 0.25, delta)\n\n  // Animates mesh.position to 0,1,2\n  damp3(mesh.position, [0, 1, 2], 0.25, delta)\n  // Also takes vectors, shallow vectors and scalars\n  // damp3(mesh.position, new THREE.Vector3(0, 1, 2), 0.25, delta)\n  // damp3(mesh.position, { x: 0, y: 1, z: 2 }, 0.25, delta)\n  // damp3(mesh.scale, 2, 0.25, delta)\n\n  dampC(mesh.material.color, \"green\", 0.25, delta)\n  // Also takes colors, fake colors, numbers and arrays\n  // dampC(mesh.material.color, new THREE.Color(\"green\"), 0.25, delta)\n  // dampC(mesh.material.color, 0xdead00, 0.25, delta)\n  // dampC(mesh.material.color, [1, 0, 0], 0.25, delta)\n  // dampC(mesh.material.color, { r: 1, g: 0, b: 0 }, 0.25, delta)\n\n  // Animates an euler with a shortest-path algorithm\n  dampE(mesh.rotation, [Math.PI / 2, 0, 0], 0.25, delta)\n  // Also takes eulers\n  // dampE(mesh.rotation, new THREE.Euler(Math.PI / 2, 0, 0), 0.25, delta)\n\n  // damp2 for Vector2\n  // damp4 for Vector4\n  // dampM for Matrix4\n  // dampQ for Quaternion\n  // dampS for Spherical\n```\n\n----------------------------------------\n\nTITLE: Easing functions in maath\nDESCRIPTION: Examples of using various easing functions including sine, cubic, quint, circ, quart, and expo with in, out, and inOut variants.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sine, cubic, quint, circ, quart, expo } from \"maath/easing\";\n\nsine.in(t);\nsine.out(t);\nsine.inOut(t);\n```\n\n----------------------------------------\n\nTITLE: Miscellaneous Math Functions in maath\nDESCRIPTION: Various mathematical utility functions provided by the maath library, including clamping, angle conversion, and vector operations.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Clamps a value between a range.\nclamp(value: number, min: number, max: number): number\n// Loops the value t, so that it is never larger than length and never smaller than 0.\nrepeat(t: number, length: number): number\n// Calculates the shortest difference between two given angles.\ndeltaAngle(current: number, target: number): number\n// Converts degrees to radians.\ndegToRad(degrees: number): number\n// Converts radians to degrees.\nradToDeg(radians: number): number\n// adapted from https://gist.github.com/stephanbogner/a5f50548a06bec723dcb0991dcbb0856 by https://twitter.com/st_phan\nfibonacciOnSphere(buffer: TypedArray, { radius = 1 }): void\n// Checks if vector a is equal to vector b, with tolerance\nvectorEquals(a, b, eps = Number.EPSILON): boolean\n/**\n * Sorts vectors in lexicographic order, works with both v2 and v3\n *\n *  Use as:\n *  const sorted = arrayOfVectors.sort(lexicographicOrder)\n */\n// https://en.wikipedia.org/wiki/Lexicographic_order\nlexicographic(a: Vector2 | Vector3, b: Vector2 | Vector3): number\n/**\n * Convex Hull\n *\n * Returns an array of 2D Vectors representing the convex hull of a set of 2D Vectors\n */\nconvexHull(_points: Vector2[]): Vector2[]\n// ...\nremap(x: number, [low1, high1]: number[], [low2, high2]: number[])\n```\n\n----------------------------------------\n\nTITLE: Using damp functions for smooth animation in maath\nDESCRIPTION: API definition for the damp function which provides smooth, refresh-rate independent animations.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport function damp(\n  /** The object */\n  current: { [key: string]: any },\n  /** The key to animate */\n  prop: string,\n  /** To target (or goal) value */\n  target: number,\n  /** Approximate time to reach the target. A smaller value will reach the target faster. */\n  smoothTime = 0.25,\n  /** Frame delta, for refreshrate independence */\n  delta = 0.01,\n  /** Optionally allows you to clamp the maximum speed. If smoothTime is 0.25s and looks OK\n   *  going between two close points but not for points far apart as it'll move very rapid,\n   *  then a maxSpeed of e.g. 1 which will clamp the speed to 1 unit per second, it may now\n   *  take much longer than smoothTime to reach the target if it is far away. */\n  maxSpeed = Infinity,\n  /** Easing function */\n  easing = (t: number) => 1 / (1 + t + 0.48 * t * t + 0.235 * t * t * t),\n  /** End of animation precision */\n  eps = 0.001\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Geometries\nDESCRIPTION: Examples of creating and manipulating geometries using functions from the maath/geometry module.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst geo = new RoundedPlaneGeometry();\nconst mesh = new THREE.Mesh(geo, material);\n\napplyBoxUV(bufferGeometry);\napplySphereUV(bufferGeometry);\napplyCylindricalUV(bufferGeometry);\n```\n\n----------------------------------------\n\nTITLE: Miscellaneous utility functions in maath\nDESCRIPTION: A collection of various utility functions including clamp, repeat, angle conversions, and vector operations.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// Clamps a value between a range.\nclamp(value: number, min: number, max: number): number\n// Loops the value t, so that it is never larger than length and never smaller than 0.\nrepeat(t: number, length: number): number\n// Calculates the shortest difference between two given angles.\ndeltaAngle(current: number, target: number): number\n// Converts degrees to radians.\ndegToRad(degrees: number): number\n// Converts radians to degrees.\nradToDeg(radians: number): number\n// adapted from https://gist.github.com/stephanbogner/a5f50548a06bec723dcb0991dcbb0856 by https://twitter.com/st_phan\nfibonacciOnSphere(buffer: TypedArray, { radius = 1 }): void\n// Checks if vector a is equal to vector b, with tolerance\nvectorEquals(a, b, eps = Number.EPSILON): boolean\n/**\n * Sorts vectors in lexicographic order, works with both v2 and v3\n *\n *  Use as:\n *  const sorted = arrayOfVectors.sort(lexicographicOrder)\n */\n// https://en.wikipedia.org/wiki/Lexicographic_order\nlexicographic(a: Vector2 | Vector3, b: Vector2 | Vector3): number\n/**\n * Convex Hull\n *\n * Returns an array of 2D Vectors representing the convex hull of a set of 2D Vectors\n */\nconvexHull(_points: Vector2[]): Vector2[]\n// ...\nremap(x: number, [low1, high1]: number[], [low2, high2]: number[])\n```\n\n----------------------------------------\n\nTITLE: Using Buffer Manipulation Functions\nDESCRIPTION: Examples of using buffer manipulation functions from the maath library, including toVectorArray, swizzleBuffer, addAxis, and lerpBuffers.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myBuffer = new Float32Array(100 * 3);\nconst myArray = toVectorArray(myBuffer, 3);\n\nswizzleBuffer(myBuffer, \"xzy\"); // buffer is now [0, 2, 1]\n\nconst my2DBuffer = new Float32Array(100 * 2);\nconst my3DBuffer = addAxis(my2DBuffer, 2, () => Math.random());\nconst my4DBuffer = addAxis(my3DBuffer, 3, () => 1);\n\nconst mySphere = inSphere(new Float32Array(100 * 3), { radius: 4 });\nconst myBox = inBox(new Float32Array(100 * 3), { side: 4 });\nconst interpolationTarget = myBox.slice(0);\nlerpBuffers(mySphere, myBox, interpolationTarget, Math.sin(performance.now()));\n```\n\n----------------------------------------\n\nTITLE: Special damping functions for angles and lookAt in maath\nDESCRIPTION: Shows specialized damping functions for animating angles with shortest-path behavior and for smooth lookAt animations.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { dampAngle, dampLookAt } from \"maath/easing\";\n\n// Animates angle to targetAngle, with a shortest-path algorithm\ndampAngle(angle, targetAngle, 0.25, delta);\n// Animates a meshes look-up\ndampLookAt(mesh, focus, 0.25, delta);\n```\n\n----------------------------------------\n\nTITLE: Using Easing Functions for Animation\nDESCRIPTION: Examples of using easing functions from the maath/easing module for smooth animations and transitions.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { damp, damp2, damp3, damp4, dampE, dampM, dampQ, dampS, dampC } from 'maath/easing'\n\nfunction frameloop() {\n  const delta = clock.getDelta()\n  // Animates foo.bar to 10\n  damp(foo, \"bar\", 10, 0.25, delta)\n\n  // Animates mesh.position to 0,1,2\n  damp3(mesh.position, [0, 1, 2], 0.25, delta)\n\n  dampC(mesh.material.color, \"green\", 0.25, delta)\n\n  // Animates an euler with a shortest-path algorithm\n  dampE(mesh.rotation, [Math.PI / 2, 0, 0], 0.25, delta)\n}\n```\n\n----------------------------------------\n\nTITLE: Specific easing functions in maath\nDESCRIPTION: Demonstrates using specialized easing functions including rounded-square wave, unity smooth damping, and linear interpolation.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { rsqw, exp, linear } from \"maath/easing\";\n\n// rounded-square wave\nrsqw(t, delta);\n// unity smooth damping\nexp(t);\n// linear\nlinear(t); // === t\n```\n\n----------------------------------------\n\nTITLE: Using Easing Functions and Variants\nDESCRIPTION: Examples of using various easing functions and their variants from the maath/easing module.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sine, cubic, quint, circ, quart, expo } from \"maath/easing\";\n\nsine.in(t);\nsine.out(t);\nsine.inOut(t);\n\nimport { rsqw, exp, linear } from \"maath/easing\";\n\n// rounded-square wave\nrsqw(t, delta);\n// unity smooth damping\nexp(t);\n// linear\nlinear(t); // === t\n```\n\n----------------------------------------\n\nTITLE: Matrix Operations in maath\nDESCRIPTION: Examples of matrix operations provided by the maath/matrix module, including determinant calculations and minor extraction.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst d = determinant2(1, 1, 2, 2);\nconst d3 = determinant3(1, 1, 1, 2, 2, 2);\nconst minor = getMinor([1, 2, 1, 2, 1, 1, 3, 2, 3], 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Calculating 3x3 matrix determinant with maath\nDESCRIPTION: Example of using the determinant3 function to calculate the determinant of a 3x3 matrix.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst d = determinant3(1, 1, 1, 2, 2, 2);\n```\n\n----------------------------------------\n\nTITLE: Calculating 2x2 matrix determinant with maath\nDESCRIPTION: Example of using the determinant2 function to calculate the determinant of a 2x2 matrix.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst d = determinant2(1, 1, 2, 2);\n```\n\n----------------------------------------\n\nTITLE: Creating rounded plane geometry with maath\nDESCRIPTION: Example of using the roundedPlaneGeometry function to create a plane with rounded corners in Three.js.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst geo = new RoundedPlaneGeometry();\nconst mesh = new THREE.Mesh(geo, material);\n```\n\n----------------------------------------\n\nTITLE: Interpolating between buffers with maath\nDESCRIPTION: Shows how to linearly interpolate between two buffers using the lerpBuffers function, useful for shape morphing.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySphere = inSphere(new Float32Array(100 * 3), { radius: 4 });\nconst myBox = inBox(new Float32Array(100 * 3), { side: 4 });\n\nconst interpolationTarget = myBox.slice(0);\n\nlerpBuffers(mySphere, myBox, interpolationTarget, Math.sin(performance.now()));\n```\n\n----------------------------------------\n\nTITLE: Adding an axis to buffers with maath\nDESCRIPTION: Examples of using the addAxis function to add a dimension to typed arrays, such as converting 2D coordinates to 3D.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst my2DBuffer = new Float32Array(100 * 2);\nconst my3DBuffer = addAxis(my2DBuffer, 2, () => Math.random()); // zAxis will now be a random value between 0 and 1\nconst my4DBuffer = addAxis(my3DBuffer, 3, () => 1); // 4th value (imagine a in rgba) will be 1\n```\n\n----------------------------------------\n\nTITLE: Swizzling buffer vectors with maath\nDESCRIPTION: Shows how to rearrange vector components in a buffer using the swizzleBuffer function.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myBuffer = new Float32Array(100 * 3);\nmyBuffer.push(0, 1, 2);\n\nswizzleBuffer(myBuffer, \"xzy\"); // buffer is now [0, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Converting buffer to vector array in maath\nDESCRIPTION: Demonstrates using the toVectorArray function to convert a typed array into an array of Vector objects.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myBuffer = new Float32Array(100 * 3);\nconst myArray = toVectorArray(myBuffer, 3);\n```\n\n----------------------------------------\n\nTITLE: Special Damping Functions for Angles and LookAt\nDESCRIPTION: Examples of using special damping functions for angles and lookAt operations.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { dampAngle, dampLookAt } from \"maath/easing\";\n\n// Animates angle to targetAngle, with a shortest-path algorithm\ndampAngle(angle, targetAngle, 0.25, delta);\n// Animates a meshes look-up\ndampLookAt(mesh, focus, 0.25, delta);\n```\n\n----------------------------------------\n\nTITLE: Importing random functions from maath\nDESCRIPTION: Shows how to import functionality from the random namespace of maath for random number generation.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as random from \"maath/random\";\n```\n\n----------------------------------------\n\nTITLE: Importing Triangle Module from maath Library\nDESCRIPTION: Example showing how to import the triangle module from the maath library for geometry operations.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as triangle from \"maath/triangle\";\n```\n\n----------------------------------------\n\nTITLE: Getting matrix minor with maath\nDESCRIPTION: Shows how to use the getMinor function to get the minor of a matrix at a specific row and column.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst minor = getMinor([1, 2, 1, 2, 1, 1, 3, 2, 3], 1, 1);\n\n// minor will be the determinant of the submatrix without row 1 and colum 1\n// | 1 1 |\n// | 2 3 |\n```\n\n----------------------------------------\n\nTITLE: Importing Triangle Utilities from maath in JavaScript\nDESCRIPTION: Code snippet showing how to import triangle-related utilities from the maath library. These utilities are marked as 'TBD' (To Be Determined) in the documentation.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as triangle from \"maath/triangle\";\n```\n\n----------------------------------------\n\nTITLE: Importing from maath using namespaces or specific entry points\nDESCRIPTION: Shows how to import functionality from maath using either the main entry point or specific namespace entry points.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// you can import the namespaces from the main entrypoint\nimport { buffer, random } from \"maath\";\n// or import each function or all of them from each namespace entrypoint\nimport * as buffer from \"maath/buffer\";\nimport { inSphere } from \"maath/random\";\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Modules from maath\nDESCRIPTION: Examples of importing specific modules or functions from the maath library.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// you can import the namespaces from the main entrypoint\nimport { buffer, random } from \"maath\";\n// or import each function or all of them from each namespace entrypoint\nimport * as buffer from \"maath/buffer\";\nimport { inSphere } from \"maath/random\";\n```\n\n----------------------------------------\n\nTITLE: Maath Changelog in Markdown\nDESCRIPTION: Comprehensive changelog showing version updates from 0.0.1 to 0.10.8, including minor releases, patches, and feature additions like damping functions, geometric utilities, and mathematical operations.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# maath\n\n## 0.10.8\n\n### Patch Changes\n\n- fix: lower three peer dep requirement\n\n## 0.10.7\n\n### Patch Changes\n\n- yarn\n\n## 0.10.6\n\n### Patch Changes\n\n- ???\n\n## 0.10.5\n\n### Patch Changes\n\n- add parameters to roundedplanegeo\n\n## 0.10.4\n\n### Patch Changes\n\n- up\n\n## 0.10.3\n\n### Patch Changes\n\n- fix publish\n\n## 0.10.2\n\n### Patch Changes\n\n- fix: autoburst\"\n\n## 0.10.1\n\n### Patch Changes\n\n- manual burst flash gen\n\n## 0.10.0\n\n### Minor Changes\n\n- feat: flashgen\n\n## 0.9.0\n\n### Minor Changes\n\n- add damptLookAt\n\n## 0.8.2\n\n### Patch Changes\n\n- expose repeat\n\n## 0.8.1\n\n### Patch Changes\n\n- add linear\n\n## 0.8.0\n\n### Minor Changes\n\n- add easings functions\n\n## 0.7.0\n\n### Minor Changes\n\n- feat: applyCylindricalUV\n\n## 0.6.0\n\n### Minor Changes\n\n- uv gen\n\n## 0.5.3\n\n### Patch Changes\n\n- fix damp return\n\n## 0.5.2\n\n### Patch Changes\n\n- fix types\n\n## 0.5.1\n\n### Patch Changes\n\n- fix uppercase for roundedplanegeom\n\n## 0.5.0\n\n### Minor Changes\n\n- new category for geometry + roundedplane\n\n## 0.4.2\n\n### Patch Changes\n\n- fix: dampc rgb array support\n\n## 0.4.1\n\n### Patch Changes\n\n- fix: eps check for dampm\"\n\n## 0.4.0\n\n### Minor Changes\n\n- feat: dampm, support for matrix4\"\n\n## 0.3.0\n\n### Minor Changes\n\n- feat: dampq, support for quaternions\n\n## 0.2.0\n\n### Minor Changes\n\n- feat: damp2,3,4,E,C\n\n## 0.1.1\n\n### Patch Changes\n\n- fix: damp is missing eps\n\n## 0.1.0\n\n### Minor Changes\n\n- 1a033d1: adds entry point that exports everything\n- feat: exp, deltaAngle, damp, dampAngle\n\n## 0.0.2\n\n### Patch Changes\n\n- f9084f6: change(buffer): Makes addAxis more generic, allowing adding axis to 2D and 3D buffers\n\n## 0.0.1\n\n### Patch Changes\n\n- ecdd821: new(misc): Adds coords transformation helpers\n- 8107891: new(misc): Adds 2D coords transformation helpers\n```\n\n----------------------------------------\n\nTITLE: Installing maath via yarn\nDESCRIPTION: Command to install the maath library using yarn package manager.\nSOURCE: https://github.com/pmndrs/maath/blob/main/packages/maath/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add maath\n```\n\n----------------------------------------\n\nTITLE: Installing maath Library with Yarn\nDESCRIPTION: Command to install the maath library using Yarn package manager.\nSOURCE: https://github.com/pmndrs/maath/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add maath\n```"
  }
]