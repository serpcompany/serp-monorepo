[
  {
    "owner": "open62541",
    "repo": "open62541",
    "content": "TITLE: Initializing Open62541 Client\nDESCRIPTION: This code snippet initializes an OPC UA client, connects to a server, reads the value of a variable node, and prints the value to the console. It utilizes the Open62541 library to establish a connection and interact with the server.\nSOURCE: https://github.com/open62541/open62541/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n#include <open62541/client.h>\n#include <open62541/client_highlevel.h>\n\nint main(int argc, char *argv[])\n{\n    /* Create a client and connect */\n    UA_Client *client = UA_Client_new();\n    UA_ClientConfig_setDefault(UA_Client_getConfig(client));\n    UA_StatusCode status = UA_Client_connect(client, \"opc.tcp://localhost:4840\");\n    if(status != UA_STATUSCODE_GOOD) {\n        UA_Client_delete(client);\n        return status;\n    }\n\n    /* Read the value attribute of the node. UA_Client_readValueAttribute is a\n     * wrapper for the raw read service available as UA_Client_Service_read. */\n    UA_Variant value; /* Variants can hold scalar values and arrays of any type */\n    UA_Variant_init(&value);\n    status = UA_Client_readValueAttribute(client, UA_NODEID_STRING(1, \"the.answer\"), &value);\n    if(status == UA_STATUSCODE_GOOD &&\n       UA_Variant_hasScalarType(&value, &UA_TYPES[UA_TYPES_INT32])) {\n        printf(\"the value is: %i\\n\", *(UA_Int32*)value.data);\n    }\n\n    /* Clean up */\n    UA_Variant_clear(&value);\n    UA_Client_delete(client); /* Disconnects the client internally */\n    return status == UA_STATUSCODE_GOOD ? EXIT_SUCCESS : EXIT_FAILURE;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Server with Multiple Namespaces\nDESCRIPTION: Create an OPC UA server and initialize multiple namespaces, handling potential errors during namespace addition.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/nodeset_compiler.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nUA_Server *server = UA_Server_new();\nUA_ServerConfig_setDefault(UA_Server_getConfig(server));\n\n/* Create nodes from nodeset */\nUA_StatusCode retval = ua_namespace_di(server);\nif(retval != UA_STATUSCODE_GOOD) {\n    UA_LOG_ERROR(UA_Log_Stdout, UA_LOGCATEGORY_SERVER,\n                 \"Adding the DI namespace failed. Please check previous error output.\");\n    UA_Server_delete(server);\n    return (int)UA_STATUSCODE_BADUNEXPECTEDERROR;\n}\n\nretval |= ua_namespace_plc(server);\nif(retval != UA_STATUSCODE_GOOD) {\n    UA_LOG_ERROR(UA_Log_Stdout, UA_LOGCATEGORY_SERVER,\n                 \"Adding the PLCopen namespace failed. Please check previous error output.\");\n    UA_Server_delete(server);\n    return (int)UA_STATUSCODE_BADUNEXPECTEDERROR;\n}\n\nretval = UA_Server_run(server, &running);\n```\n\n----------------------------------------\n\nTITLE: Initializing Open62541 Server\nDESCRIPTION: This code snippet initializes an OPC UA server, adds a variable node representing an integer value, and runs the server until an interrupt is received. The variable node is added to the server's address space with a specified browse name and attributes.\nSOURCE: https://github.com/open62541/open62541/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <open62541/server.h>\n\nint main(int argc, char** argv)\n{\n    /* Create a server listening on port 4840 (default) */\n    UA_Server *server = UA_Server_new();\n\n    /* Add a variable node to the server */\n\n    /* 1) Define the variable attributes */\n    UA_VariableAttributes attr = UA_VariableAttributes_default;\n    attr.displayName = UA_LOCALIZEDTEXT(\"en-US\", \"the answer\");\n    UA_Int32 myInteger = 42;\n    UA_Variant_setScalar(&attr.value, &myInteger, &UA_TYPES[UA_TYPES_INT32]);\n\n    /* 2) Define where the node shall be added with which browsename */\n    UA_NodeId newNodeId = UA_NODEID_STRING(1, \"the.answer\");\n    UA_NodeId parentNodeId = UA_NS0ID(OBJECTSFOLDER);\n    UA_NodeId parentReferenceNodeId = UA_NS0ID(ORGANIZES);\n    UA_NodeId variableType = UA_NODEID_NULL; /* take the default variable type */\n    UA_QualifiedName browseName = UA_QUALIFIEDNAME(1, \"the answer\");\n\n    /* 3) Add the node */\n    UA_Server_addVariableNode(server, newNodeId, parentNodeId,\n                              parentReferenceNodeId, browseName,\n                              variableType, attr, NULL, NULL);\n\n    /* Run the server (until ctrl-c interrupt) */\n    UA_StatusCode status = UA_Server_runUntilInterrupt(server);\n\n    /* Clean up */\n    UA_Server_delete(server);\n    return status == UA_STATUSCODE_GOOD ? EXIT_SUCCESS : EXIT_FAILURE;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Parsing an OPC UA EventFilter in C\nDESCRIPTION: This code demonstrates how to create an OPC UA EventFilter by parsing a query string. It initializes an EventFilter structure, defines a SQL-like query string with SELECT, WHERE, and FOR clauses, converts the string to a ByteString, and parses it into the EventFilter structure.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_2.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Eventfilter */\nUA_EventFilter filter;\nUA_EventFilter_init(&filter);\n\n/* query string */\nchar *inp = \"SELECT\\n\"\n            \"\\n\"\n            \"PATH \\\"/Message\\\", PATH \\\"/Severity\\\", PATH \\\"/EventType\\\"\\n\"\n            \"\\n\"\n            \"WHERE\\n\"\n            \"OR(OR(OR(OFTYPE ns=1;i=5002, $4), OR($5, OFTYPE i=3035)), OR($1,$2))\\n\"\n            \"\\n\"\n            \"FOR\\n\"\n            \"$1:= OFTYPE $7\\n\"\n            \"$2:= OFTYPE $8\\n\"\n            \"$4:= OFTYPE ns=1;i=5003\\n\"\n            \"$5:= OFTYPE ns=1;i=5004\\n\"\n            \"$7:= NODEID ns=1;i=5000\\n\"\n            \"$8:= ns=1;i=5001\";\n\n/* UA_EventFilter_parse takes a Bytestring as input*/\nUA_ByteString case_2 = UA_String_fromChars(inp);\n/* create the eventfilter from the string */\nUA_EventFilter_parse(filter, &case_2);\n\nUA_ByteString_clear(&case_2);\n```\n\n----------------------------------------\n\nTITLE: Creating and Parsing OPC UA EventFilter from Query String in C\nDESCRIPTION: This snippet demonstrates how to create an OPC UA EventFilter from a SQL-like query string. It initializes a filter object, defines a query with SELECT, WHERE, and FOR clauses for filtering events, converts the string to a ByteString, and parses it into the EventFilter structure.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_0.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Eventfilter */\nUA_EventFilter filter;\nUA_EventFilter_init(&filter);\n/* query string */\nchar *inp = \"SELECT\\n\"\n            \"PATH \\\"/Message\\\", PATH \\\"/0:Severity\\\", PATH \\\"/EventType\\\"\\n\"\n            \"WHERE\\n\"\n            \"OR($\\\"ref_1\\\", $\\\"ref_2\\\")\\n\"\n            \"FOR\\n\"\n            \"$\\\"ref_2\\\":= OFTYPE ns=1;i=5003\\n\"\n            \"$\\\"ref_1\\\":= OFTYPE i=3035\";\n/* UA_EventFilter_parse takes a Bytestring as input*/\nUA_ByteString case_0 = UA_String_fromChars(inp);\n/* create the eventfilter from the string */\nUA_EventFilter_parse(filter, &case_0);\nUA_ByteString_clear(&case_0);\n```\n\n----------------------------------------\n\nTITLE: Building open62541 example\nDESCRIPTION: These commands copy an example server file, and then compile it using gcc, linking against the open62541 library. The resulting executable is named 'server'. This demonstrates how to compile and link an open62541 application after the library is installed.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/building.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncp /path-to/examples/tutorial_server_firststeps.c . # copy the example server\ngcc -std=c99 -o server tutorial_server_firststeps.c -lopen62541\n```\n\n----------------------------------------\n\nTITLE: Checking UA_StatusCode Return Values in C\nDESCRIPTION: This snippet demonstrates how to use the `UA_CHECK_STATUS` macro to check a `UA_StatusCode` return value and execute a specific action (e.g., returning the error code) if an error is detected. The macro takes the status code and the evaluation on error as parameters.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nUA_StatusCode rv = someAction();\nUA_CHECK_STATUS(rv, return rv);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Parsing UA_EventFilter from Query String in C\nDESCRIPTION: This snippet demonstrates how to create an event filter from a string query in open62541. It initializes a UA_EventFilter structure, defines a SQL-like query string for event filtering, converts it to a UA_ByteString, and parses it using UA_EventFilter_parse function. The query selects message, severity, and event type paths with specific filtering conditions.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_4.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Eventfilter */\nUA_EventFilter filter;\nUA_EventFilter_init(&filter);\n\n/* query string */\nchar *inp = \"SELECT\\n\"\n            \"\\n\"\n            \"PATH \\\"/Message\\\",\\n\"\n            \"PATH \\\"/0:Severity\\\",\\n\"\n            \"PATH \\\"/EventType\\\"\\n\"\n            \"\\n\"\n            \"WHERE\\n\"\n            \"\\n\"\n            \"AND($4, TYPEID i=5000 PATH \\\"/Severity\\\" GREATERTHAN $\\\"ref\\\")\\n\"\n            \"\\n\"\n            \"FOR\\n\"\n            \"$\\\"ref\\\":= 99\\n\"\n            \"$4:= OFTYPE ns=1;i=5000\";\n\n/* UA_EventFilter_parse takes a Bytestring as input*/\nUA_ByteString case_4 = UA_String_fromChars(inp);\n/* create the eventfilter from the string */\nUA_EventFilter_parse(filter, &case_4);\n\nUA_ByteString_clear(&case_4);\n```\n\n----------------------------------------\n\nTITLE: Creating and Parsing Event Filter in C using open62541\nDESCRIPTION: This snippet demonstrates how to create an event filter using a query string, parse it into a UA_EventFilter structure, and clean up resources. It uses the UA_EventFilter_parse function to convert a string representation into a structured filter.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_1.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Eventfilter */\nUA_EventFilter filter;\nUA_EventFilter_init(&filter);\n\n/* query string */\nchar *inp = \"SELECT\\n\"\n            \"\\n\"\n            \"PATH \\\"/Message\\\",\\n\"\n            \"PATH \\\"/Severity\\\",\\n\"\n            \"PATH \\\"/EventType\\\"\\n\"\n            \"\\n\"\n            \"WHERE\\n\"\n            \"OFTYPE ns=1;i=5001\";\n\n/* UA_EventFilter_parse takes a Bytestring as input*/\nUA_ByteString case_1 = UA_String_fromChars(inp);\n/* create the eventfilter from the string */\nUA_EventFilter_parse(filter, &case_1);\n\nUA_ByteString_clear(&case_1);\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Project Configuration\nDESCRIPTION: Example CMake configuration for a project using open62541 as a dependency, showing both pkg-config and CMake-based library definition approaches.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/building.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(\"open62541SampleApplication\")\nadd_executable(main main.c)\n\n# Linux/Unix configuration using pkg-config\nfind_package(PkgConfig)\npkg_check_modules(open62541 REQUIRED open62541)\ntarget_link_libraries(main open62541)\n\n# Alternative CMake-based library definition.\n# This might not be included in some package distributions.\n#\n#   find_package(open62541 REQUIRED)\n#   target_link_libraries(main open62541::open62541)\n```\n\n----------------------------------------\n\nTITLE: Building and Running Pub/Sub Applications with Open62541\nDESCRIPTION: Demonstrates how to compile and execute Pub/Sub applications using Open62541 with encryption features enabled through TPM. The build process utilizes CMake with specific flags to enable examples and encryption using MbedTLS and TPM2 libraries.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm2_pkcs11.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd open62541/\nmkdir build && cd build\ncmake -DUA_BUILD_EXAMPLES=ON -DUA_ENABLE_PUBSUB=ON -DUA_ENABLE_ENCRYPTION=MBEDTLS -DUA_ENABLE_ENCRYPTION_TPM2=ON ..\nmake\n```\n\nLANGUAGE: bash\nCODE:\n```\n./bin/examples/pubsub_publish_encrypted_tpm opc.eth://<MAC_of_subscriber_node> <interface> <userpin_of_token> <slotId> <encrypt_key_label> <sign_key_label>\n./bin/examples/pubsub_subscribe_encrypted_tpm opc.eth://<MAC_of_subscriber_node> <interface> <userpin_of_token> <slotId> <encrypt_key_label> <sign_key_label>\n```\n\n----------------------------------------\n\nTITLE: JSON Variant Encoding Example\nDESCRIPTION: Example of a JSON-encoded Variant data type representing a 2x4 matrix of numerical values, demonstrating the complex type system of OPC UA\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/ua2json/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Type\": 3,\n    \"Body\": [1,2,3,4,5,6,7,8],\n    \"Dimension\": [2, 4]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Parsing an Event Filter from String in C\nDESCRIPTION: Demonstrates how to initialize an event filter, create a query string, and parse it into an event filter structure using UA_EventFilter_parse. The example shows a complex query that selects message, severity and event type fields with multiple conditions in the WHERE clause.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_3.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Eventfilter */\nUA_EventFilter filter;\nUA_EventFilter_init(&filter);\n\n/* query string */\nchar *inp = \"SELECT\\n\"\n            \"\\n\"\n            \"PATH \\\"/Message\\\",\\n\"\n            \"PATH \\\"/Severity\\\",\\n\"\n            \"PATH \\\"/EventType\\\"\\n\"\n            \"\\n\"\n            \"WHERE\\n\"\n            \"AND((OFTYPE ns=1;i=5001), $1)\\n\"\n            \"\\n\"\n            \"FOR\\n\"\n            \"$1:=  AND($20, $30)\\n\"\n            \"$20:= INT64 99 == 99\\n\"\n            \"$30:= TYPEID i=5000 PATH \\\"/Severity\\\" > 99\";\n\n/* UA_EventFilter_parse takes a Bytestring as input*/\nUA_ByteString case_3 = UA_String_fromChars(inp);\n/* create the eventfilter from the string */\nUA_EventFilter_parse(filter, &case_3);\n\nUA_ByteString_clear(&case_3);\n```\n\n----------------------------------------\n\nTITLE: Defining OPC UA Information Model in XML\nDESCRIPTION: This XML snippet defines an OPC UA information model with custom types, objects, and methods. It includes a FieldDevice object type with a Pump subtype, along with associated variables and methods.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/nodeset_compiler.rst#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<UANodeSet xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:uax=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n               xmlns=\"http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\"\n               xmlns:s1=\"http://yourorganisation.org/example_nodeset/\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <NamespaceUris>\n        <Uri>http://yourorganisation.org/example_nodeset/</Uri>\n    </NamespaceUris>\n    <Aliases>\n        <Alias Alias=\"Boolean\">i=1</Alias>\n        <Alias Alias=\"UInt32\">i=7</Alias>\n        <Alias Alias=\"String\">i=12</Alias>\n        <Alias Alias=\"HasModellingRule\">i=37</Alias>\n        <Alias Alias=\"HasTypeDefinition\">i=40</Alias>\n        <Alias Alias=\"HasSubtype\">i=45</Alias>\n        <Alias Alias=\"HasProperty\">i=46</Alias>\n        <Alias Alias=\"HasComponent\">i=47</Alias>\n        <Alias Alias=\"Argument\">i=296</Alias>\n    </Aliases>\n    <Extensions>\n        <Extension>\n            <ModelInfo Tool=\"UaModeler\" Hash=\"Zs8w1AQI71W8P/GOk3k/xQ==\"\n                       Version=\"1.3.4\"/>\n        </Extension>\n    </Extensions>\n    <UAReferenceType NodeId=\"ns=1;i=4001\" BrowseName=\"1:providesInputTo\">\n        <DisplayName>providesInputTo</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasSubtype\" IsForward=\"false\">\n                i=33\n            </Reference>\n        </References>\n        <InverseName Locale=\"en-US\">inputProcidedBy</InverseName>\n    </UAReferenceType>\n    <UAObjectType IsAbstract=\"true\" NodeId=\"ns=1;i=1001\"\n                  BrowseName=\"1:FieldDevice\">\n        <DisplayName>FieldDevice</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasSubtype\" IsForward=\"false\">\n                i=58\n            </Reference>\n            <Reference ReferenceType=\"HasComponent\">ns=1;i=6001</Reference>\n            <Reference ReferenceType=\"HasComponent\">ns=1;i=6002</Reference>\n        </References>\n    </UAObjectType>\n    <UAVariable DataType=\"String\" ParentNodeId=\"ns=1;i=1001\"\n                NodeId=\"ns=1;i=6001\" BrowseName=\"1:ManufacturerName\"\n                UserAccessLevel=\"3\" AccessLevel=\"3\">\n        <DisplayName>ManufacturerName</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasTypeDefinition\">i=63</Reference>\n            <Reference ReferenceType=\"HasModellingRule\">i=78</Reference>\n            <Reference ReferenceType=\"HasComponent\" IsForward=\"false\">\n                ns=1;i=1001\n            </Reference>\n        </References>\n    </UAVariable>\n    <UAVariable DataType=\"String\" ParentNodeId=\"ns=1;i=1001\"\n                NodeId=\"ns=1;i=6002\" BrowseName=\"1:ModelName\"\n                UserAccessLevel=\"3\" AccessLevel=\"3\">\n        <DisplayName>ModelName</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasTypeDefinition\">i=63</Reference>\n            <Reference ReferenceType=\"HasModellingRule\">i=78</Reference>\n            <Reference ReferenceType=\"HasComponent\" IsForward=\"false\">\n                ns=1;i=1001\n            </Reference>\n        </References>\n    </UAVariable>\n    <UAObjectType NodeId=\"ns=1;i=1002\" BrowseName=\"1:Pump\">\n        <DisplayName>Pump</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasComponent\">ns=1;i=6003</Reference>\n            <Reference ReferenceType=\"HasComponent\">ns=1;i=6004</Reference>\n            <Reference ReferenceType=\"HasSubtype\" IsForward=\"false\">\n                ns=1;i=1001\n            </Reference>\n            <Reference ReferenceType=\"HasComponent\">ns=1;i=7001</Reference>\n            <Reference ReferenceType=\"HasComponent\">ns=1;i=7002</Reference>\n        </References>\n    </UAObjectType>\n    <UAVariable DataType=\"Boolean\" ParentNodeId=\"ns=1;i=1002\"\n                NodeId=\"ns=1;i=6003\" BrowseName=\"1:isOn\" UserAccessLevel=\"3\"\n                AccessLevel=\"3\">\n        <DisplayName>isOn</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasTypeDefinition\">i=63</Reference>\n            <Reference ReferenceType=\"HasModellingRule\">i=78</Reference>\n            <Reference ReferenceType=\"HasComponent\" IsForward=\"false\">\n                ns=1;i=1002\n            </Reference>\n        </References>\n    </UAVariable>\n    <UAVariable DataType=\"UInt32\" ParentNodeId=\"ns=1;i=1002\"\n                NodeId=\"ns=1;i=6004\" BrowseName=\"1:MotorRPM\"\n                UserAccessLevel=\"3\" AccessLevel=\"3\">\n        <DisplayName>MotorRPM</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasTypeDefinition\">i=63</Reference>\n            <Reference ReferenceType=\"HasModellingRule\">i=78</Reference>\n            <Reference ReferenceType=\"HasComponent\" IsForward=\"false\">\n                ns=1;i=1002\n            </Reference>\n        </References>\n    </UAVariable>\n    <UAMethod ParentNodeId=\"ns=1;i=1002\" NodeId=\"ns=1;i=7001\"\n              BrowseName=\"1:startPump\">\n        <DisplayName>startPump</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasModellingRule\">i=78</Reference>\n            <Reference ReferenceType=\"HasProperty\">ns=1;i=6005</Reference>\n            <Reference ReferenceType=\"HasComponent\" IsForward=\"false\">\n                ns=1;i=1002\n            </Reference>\n        </References>\n    </UAMethod>\n    <UAVariable DataType=\"Argument\" ParentNodeId=\"ns=1;i=7001\" ValueRank=\"1\"\n                NodeId=\"ns=1;i=6005\" ArrayDimensions=\"1\"\n                BrowseName=\"OutputArguments\">\n        <DisplayName>OutputArguments</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasModellingRule\">i=78</Reference>\n            <Reference ReferenceType=\"HasProperty\"\n                       IsForward=\"false\">ns=1;i=7001</Reference>\n            <Reference ReferenceType=\"HasTypeDefinition\">i=68</Reference>\n        </References>\n        <Value>\n            <ListOfExtensionObject>\n                <ExtensionObject>\n                    <TypeId>\n                        <Identifier>i=297</Identifier>\n                    </TypeId>\n                    <Body>\n                        <Argument>\n                            <Name>started</Name>\n                            <DataType>\n                                <Identifier>i=1</Identifier>\n                            </DataType>\n                            <ValueRank>-1</ValueRank>\n                            <ArrayDimensions></ArrayDimensions>\n                            <Description/>\n                        </Argument>\n                    </Body>\n                </ExtensionObject>\n            </ListOfExtensionObject>\n        </Value>\n    </UAVariable>\n    <UAMethod ParentNodeId=\"ns=1;i=1002\" NodeId=\"ns=1;i=7002\"\n              BrowseName=\"1:stopPump\">\n        <DisplayName>stopPump</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasModellingRule\">i=78</Reference>\n            <Reference ReferenceType=\"HasProperty\">ns=1;i=6006</Reference>\n            <Reference ReferenceType=\"HasComponent\"\n                       IsForward=\"false\">ns=1;i=1002</Reference>\n        </References>\n    </UAMethod>\n    <UAVariable DataType=\"Argument\" ParentNodeId=\"ns=1;i=7002\" ValueRank=\"1\"\n                NodeId=\"ns=1;i=6006\" ArrayDimensions=\"1\"\n                BrowseName=\"OutputArguments\">\n        <DisplayName>OutputArguments</DisplayName>\n        <References>\n            <Reference ReferenceType=\"HasModellingRule\">i=78</Reference>\n            <Reference ReferenceType=\"HasProperty\" IsForward=\"false\">\n                ns=1;i=7002\n            </Reference>\n            <Reference ReferenceType=\"HasTypeDefinition\">i=68</Reference>\n        </References>\n        <Value>\n            <ListOfExtensionObject>\n                <ExtensionObject>\n                    <TypeId>\n                        <Identifier>i=297</Identifier>\n                    </TypeId>\n                    <Body>\n                        <Argument>\n                            <Name>stopped</Name>\n                            <DataType>\n                                <Identifier>i=1</Identifier>\n                            </DataType>\n                            <ValueRank>-1</ValueRank>\n                            <ArrayDimensions></ArrayDimensions>\n                            <Description/>\n                        </Argument>\n                    </Body>\n                </ExtensionObject>\n            </ListOfExtensionObject>\n        </Value>\n    </UAVariable>\n</UANodeSet>\n```\n\n----------------------------------------\n\nTITLE: Logging Errors with UA_CHECK_STATUS in C\nDESCRIPTION: This snippet demonstrates how to use the logging variants of `UA_CHECK_STATUS` macros (e.g., `UA_CHECK_STATUS_ERROR`) to log errors at different levels. It uses a logger instance, a log category, and a custom message to report the error.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nUA_Logger *logger = &server->config.logger;\n\nUA_StatusCode rv = someAction();\n/* logging \"error\" level with the \"_ERROR\" suffix */\nUA_CHECK_STATUS_ERROR(rv, return rv, logger, UA_LOGCATEGORY_SERVER, \"my message\");\n```\n\n----------------------------------------\n\nTITLE: Example Build Macro Definition\nDESCRIPTION: Defines a macro for adding example executables with proper linking and configuration. Includes special handling for nodeset injection when enabled.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_example EXAMPLE_NAME EXAMPLE_SOURCE)\n    add_executable(${EXAMPLE_NAME} ${STATIC_OBJECTS}\n                   ${EXAMPLE_SOURCE} ${ARGN} ${PROJECT_SOURCE_DIR}/common.h)\n    target_link_libraries(${EXAMPLE_NAME} open62541::open62541)\n    assign_source_group(${EXAMPLE_SOURCE})\n    set_target_properties(${EXAMPLE_NAME} PROPERTIES FOLDER \"open62541/examples\")\n    set_target_properties(${EXAMPLE_NAME} PROPERTIES\n                          VS_DEBUGGER_WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n\n    if(UA_ENABLE_NODESET_INJECTOR)\n        set(UA_NODESETINJECTOR_EXAMPLE_NAMES ${EXAMPLE_NAME} ${UA_NODESETINJECTOR_EXAMPLE_NAMES})\n        add_custom_command(TARGET ${EXAMPLE_NAME} POST_BUILD\n                           COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR}\n                                                    --target ${EXAMPLE_NAME})\n    endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Creating a Pump Object Instance in C\nDESCRIPTION: This code snippet demonstrates how to create an instance of a pump object using Open62541. It shows the necessary includes, the setup for the server, and the creation of an object node for the pump.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/nodeset_compiler.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* This work is licensed under a Creative Commons CCZero 1.0 Universal License.\n * See http://creativecommons.org/publicdomain/zero/1.0/ for more information. */\n\n#include <signal.h>\n#include <stdio.h>\n#include \"open62541.h\"\n\n/* Files myNS.h and myNS.c are created from myNS.xml */\n#include \"myNS.h\"\n\nUA_Boolean running = true;\n\nstatic void stopHandler(int sign) {\n    UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_SERVER, \"received ctrl-c\");\n    running = false;\n}\n\nint main(int argc, char **argv) {\n    signal(SIGINT, stopHandler);\n    signal(SIGTERM, stopHandler);\n\n    UA_Server *server = UA_Server_new();\n    UA_ServerConfig_setDefault(UA_Server_getConfig(server));\n\n    UA_StatusCode retval = myNS(server);\n    /* Create nodes from nodeset */\n    if(retval != UA_STATUSCODE_GOOD) {\n        UA_LOG_ERROR(UA_Log_Stdout, UA_LOGCATEGORY_SERVER, \"Could not add the example nodeset. \"\n            \"Check previous output for any error.\");\n        retval = UA_STATUSCODE_BADUNEXPECTEDERROR;\n    } else {\n        UA_NodeId createdNodeId;\n        UA_ObjectAttributes object_attr = UA_ObjectAttributes_default;\n\n        object_attr.description = UA_LOCALIZEDTEXT(\"en-US\", \"A pump!\");\n        object_attr.displayName = UA_LOCALIZEDTEXT(\"en-US\", \"Pump1\");\n\n        // we assume that the myNS nodeset was added in namespace 2.\n        // You should always use UA_Server_addNamespace to check what the\n        // namespace index is for a given namespace URI. UA_Server_addNamespace\n        // will just return the index if it is already added.\n        UA_Server_addObjectNode(server, UA_NODEID_NUMERIC(1, 0),\n```\n\n----------------------------------------\n\nTITLE: Compiling NodeSet XML to C Code using Python\nDESCRIPTION: This code snippet shows how to use the nodeset compiler script to generate C code from a NodeSet XML file. It lists required positional and optional arguments that can be passed to the script for effective operation.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/nodeset_compiler.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python ./nodeset_compiler.py -h\nusage: nodeset_compiler.py [-h] [-e <existingNodeSetXML>] [-x <nodeSetXML>]\n                           [--internal-headers]\n                           [-b <blacklistFile>] [-i <ignoreFile>]\n                           [-t <typesArray>]\n                           [-v]\n                           <outputFile>\n\npositional arguments:\n  <outputFile>          The path/basename for the <output file>.c and <output\n                        file>.h files to be generated. This will also be the\n                        function name used in the header and c-file.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e <existingNodeSetXML>, --existing <existingNodeSetXML>\n                        NodeSet XML files with nodes that are already present\n                        on the server.\n  -x <nodeSetXML>, --xml <nodeSetXML>\n                        NodeSet XML files with nodes that shall be generated.\n  --internal-headers    Include internal headers instead of amalgamated header\n  -b <blacklistFile>, --blacklist <blacklistFile>\n                        Loads a list of NodeIDs stored in blacklistFile (one\n                        NodeID per line). Any of the nodeIds encountered in\n                        this file will be removed from the nodeset prior to\n                        compilation. Any references to these nodes will also\n                        be removed\n  -i <ignoreFile>, --ignore <ignoreFile>\n                        Loads a list of NodeIDs stored in ignoreFile (one\n                        NodeID per line). Any of the nodeIds encountered in\n                        this file will be kept in the nodestore but not\n                        printed in the generated code\n  -t <typesArray>, --types-array <typesArray>\n                        Types array for the given namespace. Can be used\n                        mutliple times to define (in the same order as the\n                        .xml files, first for --existing, then --xml) the type\n                        arrays\n  --max-string-length MAX_STRING_LENGTH\n                        Maximum allowed length of a string literal. If longer,\n                        it will be set to an empty string\n  -v, --verbose         Make the script more verbose. Can be applied up to 4\n                        times\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python ./nodeset_compiler.py --types-array=UA_TYPES --existing ../../deps/ua-nodeset/Schema/Opc.Ua.NodeSet2.xml --xml myNS.xml myNS\n```\n\nLANGUAGE: bash\nCODE:\n```\nINFO:__main__:Preprocessing (existing) ../../deps/ua-nodeset/Schema/Opc.Ua.NodeSet2.xml\nINFO:__main__:Preprocessing myNS.xml\nINFO:__main__:Generating Code\nINFO:__main__:NodeSet generation code successfully printed\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for TPM and PKCS#11\nDESCRIPTION: Installs essential libraries and tools required for setting up TPM and PKCS#11, which includes `libcurl`, `libjson-c`, `libssl`, as well as TPM2 Software Stack and Tools. Ensures the environment is correctly configured for subsequent steps.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm2_pkcs11.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt -y install acl autoconf autoconf-archive automake build-essential cmake doxygen gcc git iproute2 libcurl4-openssl-dev libjson-c-dev libcmocka0 libcmocka-dev libglib2.0-dev libini-config-dev libmbedtls-dev libssl-dev libsqlite3-dev libtool libyaml-dev pkg-config procps python3-pip sqlite3 udev uthash-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ${HOME}\ngit clone https://github.com/tpm2-software/tpm2-tss.git\ncd ${HOME}/tpm2-tss\n./bootstrap\n./configure --with-udevrulesdir=/etc/udev/rules.d --with-udevrulesprefix=70-\nmake -j$(nproc)\nsudo make install\nsudo ldconfig\nsudo udevadm control --reload-rules && sudo udevadm trigger\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install tpm2-tools\nsudo apt install opensc\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ${HOME}\ngit clone https://github.com/tpm2-software/tpm2-pkcs11.git\ncd ${HOME}/tpm2-pkcs11\ngit fetch origin pull/717/head:local_branch && git checkout local_branch\n./bootstrap\n./configure\nmake -j$(nproc)\nsudo make install\nsudo ldconfig\ncp ${HOME}/tpm2-pkcs11/src/pkcs11.h /usr/include\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ${HOME}/tpm2-pkcs11/tools/\nsudo pip3 install pyasn1_modules\npip3 install .\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Options for open62541\nDESCRIPTION: Sets up encryption options for open62541, including support for different encryption libraries like OpenSSL, mbedTLS, and LibreSSL. It also configures TPM2 security options if enabled.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(UA_ENCRYPTION_PLUGINS \"MBEDTLS\" \"OPENSSL\" \"LIBRESSL\")\nset(UA_ENABLE_ENCRYPTION OFF CACHE STRING \"Encryption support (LibreSSL EXPERIMENTAL)\")\nSET_PROPERTY(CACHE UA_ENABLE_ENCRYPTION PROPERTY STRINGS \"OFF\" ${UA_ENCRYPTION_PLUGINS})\noption(UA_ENABLE_ENCRYPTION_OPENSSL \"Deprecated: Enable encryption support (uses openssl)\" OFF)\nmark_as_advanced(UA_ENABLE_ENCRYPTION_OPENSSL)\noption(UA_ENABLE_ENCRYPTION_MBEDTLS \"Deprecated: Enable encryption support (uses mbedTLS)\" OFF)\nmark_as_advanced(UA_ENABLE_ENCRYPTION_MBEDTLS)\n\nlist (FIND UA_ENCRYPTION_PLUGINS ${UA_ENABLE_ENCRYPTION} _tmp)\nif(UA_ENABLE_ENCRYPTION STREQUAL \"OFF\" OR ${_tmp} GREATER -1)\n    set(UA_ENABLE_ENCRYPTION_OPENSSL OFF)\n    set(UA_ENABLE_ENCRYPTION_MBEDTLS OFF)\n    set(UA_ENABLE_ENCRYPTION_LIBRESSL OFF)\n    if(UA_ENABLE_ENCRYPTION STREQUAL \"MBEDTLS\")\n        set(UA_ENABLE_ENCRYPTION_MBEDTLS ON)\n    elseif(UA_ENABLE_ENCRYPTION STREQUAL \"OPENSSL\")\n        set(UA_ENABLE_ENCRYPTION_OPENSSL ON)\n    elseif(UA_ENABLE_ENCRYPTION STREQUAL \"LIBRESSL\")\n        set(UA_ENABLE_ENCRYPTION_LIBRESSL ON)\n    endif()\n# Only for backward compatability\nelseif(UA_ENABLE_ENCRYPTION)\n    message(DEPRECATION \"Set UA_ENABLE_ENCRYPTION to the desired encryption library.\" )\n    if(NOT UA_ENABLE_ENCRYPTION_OPENSSL)\n    set(UA_ENABLE_ENCRYPTION_MBEDTLS ON)\n    endif()\nelse()\n    message(DEPRECATION \"Set UA_ENABLE_ENCRYPTION to the desired encryption library.\" )\n    if(UA_ENABLE_ENCRYPTION_MBEDTLS)\n        set(UA_ENABLE_ENCRYPTION \"MBEDTLS\")\n        set(UA_ENABLE_ENCRYPTION_OPENSSL OFF)\n    endif()\n    if(UA_ENABLE_ENCRYPTION_OPENSSL)\n        set(UA_ENABLE_ENCRYPTION \"OPENSSL\")\n        set(UA_ENABLE_ENCRYPTION_MBEDTLS OFF)\n    endif()\nendif()\n\n# TPM Security\nset(UA_ENABLE_ENCRYPTION_TPM2 \"OFF\" CACHE STRING \"TPM encryption support\")\nSET_PROPERTY(CACHE UA_ENABLE_ENCRYPTION_TPM2 PROPERTY STRINGS \"ON\" \"OFF\")\n\nif(UA_ENABLE_ENCRYPTION_TPM2 STREQUAL \"OFF\")\n    set(UA_ENABLE_TPM2_SECURITY OFF)\n    set(UA_ENABLE_TPM2_KEYSTORE OFF)\nelse()\n    set(UA_ENABLE_TPM2_SECURITY ON)\n    set(UA_ENABLE_TPM2_KEYSTORE ON)\nendif()\n\nif(UA_ENABLE_TPM2_SECURITY)\n    if(NOT UA_ENABLE_ENCRYPTION)\n        message(FATAL_ERROR \"TPM2 encryption cannot be used with disabled UA_ENABLE_ENCRYPTION\")\n    endif()\n    find_library(TPM2_LIB tpm2_pkcs11)\n    message(${TPM2_LIB})\nendif()\n\nif(UA_ENABLE_TPM2_KEYSTORE)\n    if(NOT UA_ENABLE_ENCRYPTION)\n        message(FATAL_ERROR \"TPM2 Keystore cannot be used with disabled UA_ENABLE_ENCRYPTION\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Cleanup Routine using goto in C\nDESCRIPTION: This snippet demonstrates a scenario where a cleanup routine is used in multiple locations within the function, making a `goto` statement appropriate. The `goto` statement allows jumping to a common cleanup label, ensuring consistent resource release.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nvoid yesCleanupRoutine(void *data) {\n    \n    data = malloc(sizeof(int));\n    UA_CHECK_MEM(data, return UA_STATUSCODE_BADOUTOFMEMORY);\n  \n    /* jumps to cleanup routine upon encountering a bad statuscode */\n    UA_StatusCode rv = do_something();\n    UA_CHECK_STATUS(rv, goto cleanup);\n \n    /* jumps to the same cleanup routine */\n    rv = do_something_else();\n    UA_CHECK_STATUS(rv, goto cleanup);\n   \n    return UA_STATUSCODE_GOOD;\n    \ncleanup:\n    free(data);\n    return rv;\n}\n```\n\n----------------------------------------\n\nTITLE: Building OPC UA PubSub Application with TPM Encryption\nDESCRIPTION: These commands build the OPC UA PubSub application with TPM encryption support. It configures CMake with the necessary options and compiles the project.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm_keystore.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../\nmkdir build && cd build\ncmake -DUA_BUILD_EXAMPLES=ON -DUA_ENABLE_PUBSUB=ON -DUA_ENABLE_ENCRYPTION=MBEDTLS -DUA_ENABLE_ENCRYPTION_TPM2=ON ..\nmake -j$(nproc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Information for open62541\nDESCRIPTION: Sets the version information for the open62541 project. It defines major, minor, and patch versions, as well as additional version labels. The version can be overwritten based on Git information if available.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(OPEN62541_VER_MAJOR 1)\nset(OPEN62541_VER_MINOR 4)\nset(OPEN62541_VER_PATCH 10)\nset(OPEN62541_VER_LABEL \"-undefined\") # like \"-rc1\" or \"-g4538abcd\" or \"-g4538abcd-dirty\"\nset(OPEN62541_VER_COMMIT \"unknown-commit\")\n\n# Overwrite the version information based on git if available and we are the main cmake project.\nif (CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)\n    include(SetGitBasedVersion)\n    set_open62541_version()\nendif()\n\n# Examples for the version string are:\n# v1.2\n# v1.2.3\n# v1.2.3-rc1\n# v1.2.3-rc1-dirty\n# v1.2.3-5-g4538abcd\n# v1.2.3-5-g4538abcd-dirty\nset(OPEN62541_VERSION \"v${OPEN62541_VER_MAJOR}.${OPEN62541_VER_MINOR}.${OPEN62541_VER_PATCH}${OPEN62541_VER_LABEL}\")\nMESSAGE(STATUS \"open62541 Version: ${OPEN62541_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Checking Status Codes with UA_CHECK_STATUS in C\nDESCRIPTION: This snippet illustrates checking status codes using `UA_CHECK_STATUS` without logging, and demonstrates multiple statements in EVAL_ON_ERROR. It shows how the macro can be used to evaluate an expression if the status code is not `UA_STATUSCODE_GOOD`.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nstatic UA_StatusCode\nfoo(int *errorCounter) {\n    \n    UA_StatusCode rv = do_something();\n    /* if rv != UA_STATUSCODE_GOOD then \"return rv\" gets evaluated */\n    UA_CHECK_STATUS(rv, return rv);\n  \n    rv = do_another_thing();\n    \n    /* \n    EVAL_ON_ERROR can take multiple statements\n    (e.g. first modifying some value then return the error code) \n    */\n    UA_CHECK_STATUS(rv, rv = UA_STATUSCODE_BAD; errorCounter++; return rv);\n\n    return UA_STATUSCODE_GOOD;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing open62541 on Debian\nDESCRIPTION: These commands add the open62541 PPA to the system, update the package list, and install the development package for open62541. This allows users to access the latest versions of the library and its dependencies on Debian-based systems.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/building.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:open62541-team/ppa\nsudo apt-get update\nsudo apt-get install libopen62541-1-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Library Headers and Sources in CMake\nDESCRIPTION: Defines the core library headers and source files needed to build open62541. Includes dependencies, core UA types, server components, client components, and PubSub functionality.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(lib_headers ${PROJECT_SOURCE_DIR}/deps/open62541_queue.h\n                ${PROJECT_SOURCE_DIR}/deps/pcg_basic.h\n                ${PROJECT_SOURCE_DIR}/deps/libc_time.h\n                ${PROJECT_SOURCE_DIR}/deps/base64.h\n                # ...additional headers...\n                ${PROJECT_SOURCE_DIR}/src/pubsub/ua_pubsub_keystorage.h)\n```\n\n----------------------------------------\n\nTITLE: Generating DI Nodeset with CMake\nDESCRIPTION: Compile the Device Integration (DI) nodeset XML using ua_generate_nodeset, specifying dependencies and type arrays for namespace generation.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/nodeset_compiler.rst#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nua_generate_nodeset(\n    NAME \"di\"\n    FILE \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.NodeSet2.xml\"\n    TYPES_ARRAY \"UA_TYPES_DI\"\n    INTERNAL\n    DEPENDS_TYPES \"UA_TYPES\"\n    DEPENDS_NS    \"${UA_NODESET_DIR}/Schema/Opc.Ua.NodeSet2.xml\"\n    DEPENDS_TARGET \"open62541-generator-types-di\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for open62541\nDESCRIPTION: Sets up the CMake project for open62541, including minimum CMake version, project name, and language requirements. It also handles special cases for Android and fuzzing builds.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\n# Default android platform of android.toolchain.cmake is \"19\" but we need \"24\" for \"epoll_create1\" and \"<ifaddrs.h>\"\nset(ANDROID_PLATFORM 24)\n\nif(UA_BUILD_FUZZING OR UA_BUILD_OSS_FUZZ OR UA_BUILD_FUZZING_CORPUS)\n    project(open62541) # We need to have C++ support configured for fuzzing\nelse()\n    project(open62541 C) # Do not look for a C++ compiler\nendif()\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding Conversion Command\nDESCRIPTION: Bash command to encode a binary OPC UA Variant back to its original JSON representation\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/ua2json/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cat variant.bin | ua2json encode -t Variant\n```\n\n----------------------------------------\n\nTITLE: Configuring TPM Keys for Encryption and Authorization\nDESCRIPTION: Creates necessary directories and persistent keys needed for encrypting data within the Pub/Sub system. These steps include creating a primary key, associating it with a token, and importing the AES and HMAC keys into TPM.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm2_pkcs11.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ${HOME}/\nmkdir pkcs11_store && cd pkcs11_store\ntpm2_createprimary -c primary.ctx\ntpm2_evictcontrol -c 0x81000001\ntpm2_evictcontrol -c primary.ctx 0x81000001\n```\n\nLANGUAGE: bash\nCODE:\n```\ntpm2_import -C 0x81000001 -G aes -i aes128_sym.key -u aes_key.pub -r aes_key.priv\n```\n\nLANGUAGE: bash\nCODE:\n```\npid=\"$(tpm2_ptool init --primary-handle=0x81000001 --path=${HOME}/pkcs11_store | grep id | cut -d' ' -f 2-2)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ntpm2_ptool addtoken --pid=$pid --sopin=123456 --userpin=123456 --label=opcua --path=${HOME}/pkcs11_store\n```\n\nLANGUAGE: bash\nCODE:\n```\ntpm2_ptool link --label=opcua --userpin=123456 --key-label=enc_key --path=${HOME}/pkcs11_store aes_key.pub aes_key.priv\n```\n\nLANGUAGE: bash\nCODE:\n```\ntpm2_ptool import --label=opcua --key-label=sign_key --userpin=123456 --privkey=hmac.key --algorithm=hmac --path=${HOME}/pkcs11_store\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for open62541\nDESCRIPTION: Sets various build options for the open62541 project, including debug level, features like amalgamation, shared libraries, and specific OPC UA functionalities such as subscriptions, events, and encodings.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE)\n    message(STATUS \"CMAKE_BUILD_TYPE not given; setting to 'Debug'\")\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING \"Choose the type of build\" FORCE)\nendif()\n\nstring(TOLOWER \"${CMAKE_BUILD_TYPE}\" BUILD_TYPE_LOWER_CASE)\n\noption(UA_ENABLE_AMALGAMATION \"Concatenate the library to a single file open62541.h/.c\" OFF)\noption(BUILD_SHARED_LIBS \"Enable building of shared libraries (dll/so)\" OFF)\nset(UA_LOGLEVEL 100 CACHE STRING \"Minimal level for logs (in addition to the log plugin settings) (100=TRACE, 200=DEBUG, 300=INFO, 400=WARNING, 500=ERROR, 600=FATAL)\")\noption(UA_ENABLE_DIAGNOSTICS \"Enable diagnostics information exposed by the server\" ON)\noption(UA_ENABLE_METHODCALLS \"Enable the Method service set\" ON)\noption(UA_ENABLE_SUBSCRIPTIONS \"Enable subscriptions support\" ON)\noption(UA_ENABLE_SUBSCRIPTIONS_EVENTS \"Enable event monitoring\" ON)\noption(UA_ENABLE_DA \"Enable OPC UA DataAccess (Part 8) definitions\" ON)\noption(UA_ENABLE_HISTORIZING \"Enable basic support for historical access (client and server)\" ON)\noption(UA_ENABLE_DISCOVERY \"Enable Discovery Service (LDS)\" ON)\noption(UA_ENABLE_JSON_ENCODING \"Enable JSON encoding\" ON)\noption(UA_ENABLE_XML_ENCODING \"Enable XML encoding\" ON)\noption(UA_ENABLE_NODESETLOADER \"Enable nodesetLoader public API\" OFF)\noption(UA_ENABLE_GDS_PUSHMANAGEMENT \"Enable GDS pushManagement support\" OFF)\noption(UA_ENABLE_DATATYPES_ALL \"Generate all datatypes for namespace zero (uses more binary space)\" ON)\n```\n\n----------------------------------------\n\nTITLE: Running OPC UA PubSub Applications with TPM Encryption\nDESCRIPTION: These commands demonstrate how to run the OPC UA PubSub publisher and subscriber applications with TPM-based encryption. They specify the Ethernet interface, encryption keys, TPM slot, and other necessary parameters.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm_keystore.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/examples/pubsub_publish_encrypted_tpm_keystore opc.eth://<MAC_of_subscriber_node> <interface> <encryption_key> <signing_key> <solt_id> <user_pin> <key_lable>\n./bin/examples/pubsub_subscribe_encrypted_tpm_keystore opc.eth://<MAC_of_subscriber_node> <interface> <encryption_key> <signing_key> <solt_id> <user_pin> <key_lable>\n```\n\n----------------------------------------\n\nTITLE: Configuring Check Unit Testing Framework Dependencies in CMake\nDESCRIPTION: Sets up the Check unit testing framework and its dependencies. It finds the Check package, configures the library list based on the platform, and sets up include and library directories.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Check dependency\nfind_package(Check REQUIRED)\nset(LIBS ${CHECK_LIBRARIES} ${open62541_LIBRARIES})\nif(NOT WIN32 AND NOT APPLE AND NOT (CMAKE_HOST_SYSTEM_NAME MATCHES \"OpenBSD\") AND NOT (CMAKE_HOST_SYSTEM_NAME MATCHES \"FreeBSD\"))\n  list(APPEND LIBS subunit)\nendif()\ninclude_directories(${CHECK_INCLUDE_DIRS})\nlink_directories(${CHECK_LIBRARY_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Creating and Encrypting AES Key with TPM\nDESCRIPTION: This C program encrypts AES keys using the TPM. It takes parameters for slot ID, user PIN, key label, input file, and output file to seal the encryption and signing keys.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm_keystore.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcc cert_encrypt_tpm.c -o cert_encrypt_tpm -ltpm2_pkcs11 -lssl -lcrypto\n./cert_encrypt_tpm -s<slotID> -p<userPin> -l<keyLable> -f<keyToBeEncrypted> -o<keyToStoreEncryptedData>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for OPC UA PubSub with TPM\nDESCRIPTION: This command installs all necessary packages for setting up the OPC UA PubSub environment with TPM support. It includes development tools, libraries, and dependencies required for the project.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm_keystore.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt -y install acl autoconf autoconf-archive automake build-essential cmake doxygen gcc git iproute2 libcurl4-openssl-dev libjson-c-dev libcmocka0 libcmocka-dev libglib2.0-dev libini-config-dev libmbedtls-dev libssl-dev libsqlite3-dev libtool libyaml-dev pkg-config procps python3-pip sqlite3 udev uthash-dev\n```\n\n----------------------------------------\n\nTITLE: Logging Messages with Different Levels using UA_CHECK_STATUS in C\nDESCRIPTION: This snippet shows how to generate logging messages with different levels (error, warn, info, fatal) using `UA_CHECK_STATUS_ERROR`, `UA_CHECK_STATUS_WARN`, `UA_CHECK_STATUS_INFO`, and `UA_CHECK_STATUS_FATAL`. The logger and log category are specified, along with a formatted message.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nstatic UA_StatusCode\nfoo(UA_Server *server) {\n    \n    /* assign the logger for later simple use */\n    UA_Logger *logger = &server->config.logger;\n    \n    UA_StatusCode rv = do_something_error();\n\n    /* \n    if rv != UA_STATUSCODE_GOOD then \n    an error logging message is generated and \n    \"return rv\" gets evaluated\n    */\n    UA_CHECK_STATUS_ERROR(rv, return rv,\n                   logger, UA_LOGCATEGORY_SERVER,\n                   \"My error logging message with special info: %d\", 42);\n\n    rv = do_something_warn();\n    UA_CHECK_STATUS_WARN(rv, return rv,\n                   logger, UA_LOGCATEGORY_SERVER,\n                   \"My warning logging message with special info: %d\", 42);\n\n    rv = do_something_info();\n    UA_CHECK_STATUS_INFO(rv, return rv,\n                   logger, UA_LOGCATEGORY_SERVER,\n                   \"My info logging message with special info: %d\", 42);\n\n    rv = do_something_fatal();\n    UA_CHECK_STATUS_FATAL(rv, return rv,\n                   logger, UA_LOGCATEGORY_SERVER,\n                   \"My fatal logging message with special info: %d\", 42);\n\n\n    return UA_STATUSCODE_GOOD;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function for Adding open62541 Unit Tests\nDESCRIPTION: Creates a function that simplifies adding unit tests to the build system. The function extracts the test name, creates an executable, links required libraries, and adds the test to CTest with Valgrind support if enabled.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# the unit test are built directly on the open62541 object files. so they can\n# access symbols that are hidden/not exported to the shared library\n\nfunction(ua_add_test test_path_relative)\n    string(REPLACE \".\" \";\" PARTS ${test_path_relative})\n    list(POP_FRONT PARTS PATH_WITHOUT_EXTENSION)\n    string(REPLACE \"/\" \";\" QUALIFIED_PATHNAME ${PATH_WITHOUT_EXTENSION})\n    list(POP_BACK QUALIFIED_PATHNAME TEST_NAME)\n\n    add_executable(${TEST_NAME} ${test_path_relative} ${ARGN} $<TARGET_OBJECTS:open62541-object> $<TARGET_OBJECTS:open62541-plugins> $<TARGET_OBJECTS:open62541-testplugins>)\n    target_link_libraries(${TEST_NAME} ${LIBS})\n    add_test_valgrind(${TEST_NAME} ${TESTS_BINARY_DIR}/${TEST_NAME})\n    if(UA_ENABLE_NODESET_INJECTOR)\n        set(UA_NODESETINJECTOR_TEST_NAMES ${TEST_NAME} ${UA_NODESETINJECTOR_TEST_NAMES} PARENT_SCOPE)\n    endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Argument Struct in OPC UA\nDESCRIPTION: Describes the metadata and type information for method arguments, including name, description, and data type\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/schema/datatypes_method.txt#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    QualifiedName browseName;\n    LocalizedText description;\n    NodeId dataType;\n    int32_t valueRank;\n    size_t arrayDimensionsSize;\n    uint32_t *arrayDimensions;\n} Argument;\n```\n\n----------------------------------------\n\nTITLE: Generating DI Namespace Datatypes with CMake\nDESCRIPTION: Generate data types for the Device Integration (DI) nodeset using ua_generate_datatypes CMake function. This process creates C code representations of binary types for encoding and decoding.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/nodeset_compiler.rst#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nua_generate_datatypes(\n    NAME \"ua_types_di\"\n    TARGET_SUFFIX \"types-di\"\n    FILE_CSV \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.NodeIds.csv\"\n    FILES_BSD \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.Types.bsd\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu/Debian\nDESCRIPTION: Commands to install required dependencies for building open62541 on Ubuntu/Debian systems, including basic build tools and optional feature dependencies.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/building.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install git build-essential gcc pkg-config cmake python3\n\n# enable additional features\nsudo apt-get install cmake-curses-gui     # for the ccmake graphical interface\nsudo apt-get install libmbedtls-dev       # for encryption support\nsudo apt-get install check libsubunit-dev # for unit tests\nsudo apt-get install libpcap-dev          # for network-replay unit tests\nsudo apt-get install python3-sphinx graphviz  # for documentation generation\nsudo apt-get install python3-sphinx-rtd-theme # documentation style\nsudo apt-get install libavahi-client-dev libavahi-common-dev # for LDS-ME (multicast discovery)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Unit Tests for open62541\nDESCRIPTION: Adds the core unit tests for fundamental data types, algorithms and utility functions. These tests verify basic functionality like builtin types, ziptree implementation, and memory management.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nua_add_test(check_types_builtin.c)\nua_add_test(check_ziptree.c)\nua_add_test(check_mp_printf.c)\n```\n\n----------------------------------------\n\nTITLE: Defining CallResponse Struct in OPC UA\nDESCRIPTION: Represents the complete response to a method call request, containing results for multiple method invocations\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/schema/datatypes_method.txt#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    ResponseHeader responseHeader;\n    size_t resultsSize;\n    CallMethodResult *results;\n} CallResponse;\n```\n\n----------------------------------------\n\nTITLE: Building Open62541 with TPM2 Support\nDESCRIPTION: CMake configuration for building open62541 with TPM2 encryption support\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/encryption/README_client_server_tpm_keystore.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DUA_BUILD_EXAMPLES=ON -DUA_ENABLE_PUBSUB=ON -DUA_ENABLE_ENCRYPTION=MBEDTLS -DUA_ENABLE_ENCRYPTION_TPM2=ON ..\n```\n\n----------------------------------------\n\nTITLE: Converting PublisherId Between Variant and Tagged Union in Open62541 (C)\nDESCRIPTION: New functions are provided to convert between UA_PublisherId (a tagged union) and UA_Variant for compatibility with standard-defined data types.\nSOURCE: https://github.com/open62541/open62541/blob/master/CHANGES.md#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nUA_PublisherId_fromVariant\nUA_PublisherId_toVariant\n```\n\n----------------------------------------\n\nTITLE: Checking Boolean Values and Memory Allocation with Logging in C\nDESCRIPTION: This snippet provides short examples to explain the basic usage of `UA_CHECK` and `UA_CHECK_MEM` macros.  It shows how to check boolean values and memory allocation, and how to log errors when the checks fail.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nstatic UA_StatusCode\nfoo() {\n \n    /* assign the logger for later simple use */\n    UA_Logger *logger = &server->config.logger;\n    \n    UA_Boolean mustBeTrue = do_something();\n    /* if mustBeTrue != true then \"return UA_STATUSCODE_BAD\" gets evaluated */\n    UA_CHECK(mustBeTrue, return UA_STATUSCODE_BAD);\n   \n    UA_StatusCode rv = UA_STATUSCODE_GOOD;\n    /*\n    EVAL_ON_ERROR can take multiple statements\n    (e.g. first assigning some value then return the error code) \n    */\n    UA_CHECK(mustBeTrue, rv = UA_STATUSCODE_BAD; return rv);\n\n    UA_Boolean mustBeTrue = do_something_else();\n    /* \n    if mustBeTrue != true then \n    an error logging message is generated and \n    \"return UA_STATUSCODE_BAD\" gets evaluated \n    */\n    UA_CHECK_ERROR(mustBeTrue, return UA_STATUSCODE_BAD,\n                   logger, UA_LOGCATEGORY_SERVER,\n                   \"My logging message with special info: %d\", 42);\n\n \n    void *data = malloc(1, 1);\n    UA_CHECK_MEM(data, return UA_STATUSCODE_BADOUTOFMEMORY);\n   \n    void *data2 = malloc(1, 1);\n    UA_CHECK_MEM_ERROR(data2, return UA_STATUSCODE_BADOUTOFMEMORY,\n                   logger, UA_LOGCATEGORY_SERVER,\n                   \"My logging message with special info: %d\", 42);\n \n    return UA_STATUSCODE_GOOD;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CallMethodResult Struct in OPC UA\nDESCRIPTION: Captures the result of a method invocation, including status code and potential output arguments from the method call\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/schema/datatypes_method.txt#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    StatusCode statusCode;\n    size_t outputArgumentsSize;\n    Variant *outputArguments;\n} CallMethodResult;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for TCTI and PKCS#11\nDESCRIPTION: Exports environment variables to ensure that the TPM tools and PKCS#11 library are able to locate and access the TPM device and key store.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm2_pkcs11.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho 'export TPM2TOOLS_TCTI=\"device:/dev/tpm0\"' >> .bashrc\necho 'export TPM2_PKCS11_STORE=\"'${HOME}'/pkcs11_store\"' >> .bashrc\necho 'PATH=$PATH:'${HOME}'/pkcs11_store:'${HOME}'/tpm2-pkcs11/tools' >> .bashrc\nsource .bashrc\n```\n\n----------------------------------------\n\nTITLE: Conditional MbedTLS Encryption Support in CMake\nDESCRIPTION: Adds MbedTLS-based encryption support if enabled or during amalgamation. Includes various security policies and certificate handling implementations.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_ENCRYPTION_MBEDTLS OR UA_ENABLE_AMALGAMATION)\n    list(INSERT plugin_sources 0\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/securitypolicy_common.h)\n    list(APPEND plugin_sources\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/securitypolicy_common.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/securitypolicy_basic128rsa15.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/securitypolicy_basic256.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/securitypolicy_basic256sha256.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/securitypolicy_aes128sha256rsaoaep.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/securitypolicy_aes256sha256rsapss.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/securitypolicy_pubsub_aes128ctr.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/securitypolicy_pubsub_aes256ctr.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/create_certificate.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/mbedtls/certificategroup.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating AES and HMAC Keys with OpenSSL\nDESCRIPTION: Generates AES and HMAC keys using OpenSSL to be used on both Publisher and Subscriber nodes. This step is essential for setting up encryption and authentication within the Pub/Sub applications.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm2_pkcs11.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand 16 > aes128_sym.key\nopenssl rand 32 > hmac.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Headers and Sources in CMake for open62541\nDESCRIPTION: Sets up lists of plugin headers and source files for the open62541 project. Includes core plugins like access control, certificate management, logging, and node storage.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(plugin_headers ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/accesscontrol_default.h\n                   ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/certificategroup_default.h\n                   ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/log_stdout.h\n                   ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/nodestore_default.h\n                   ${PROJECT_SOURCE_DIR}/plugins/include/open62541/server_config_default.h\n                   ${PROJECT_SOURCE_DIR}/plugins/include/open62541/client_config_default.h\n                   ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/securitypolicy_default.h\n                   ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/create_certificate.h)\n\nset(plugin_sources ${PROJECT_SOURCE_DIR}/plugins/ua_log_stdout.c\n                   ${PROJECT_SOURCE_DIR}/plugins/ua_accesscontrol_default.c\n                   ${PROJECT_SOURCE_DIR}/plugins/ua_nodestore_ziptree.c\n                   ${PROJECT_SOURCE_DIR}/plugins/ua_nodestore_hashmap.c\n                   ${PROJECT_SOURCE_DIR}/plugins/ua_config_default.c\n                   ${PROJECT_SOURCE_DIR}/plugins/crypto/ua_certificategroup_none.c\n                   ${PROJECT_SOURCE_DIR}/plugins/crypto/ua_securitypolicy_none.c)\n```\n\n----------------------------------------\n\nTITLE: Setting up and Running Zephyr OPC UA Server in bash\nDESCRIPTION: A sequence of commands to initialize a west workspace, build a native simulation executable, configure networking, and run an OPC UA server. It also includes a command to test the server by reading a value using the python-opcua CLI client.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/zephyr/server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize the west workspace\ncd examples/zephyr\nwest init -l server\nwest update\n# Build the native sim executable\ncd server\nwest build -p -b native_sim\n# Setup host side ethernet interface (see\n# https://github.com/zephyrproject-rtos/net-tools or\n# https://docs.zephyrproject.org/latest/boards/native/native_sim/doc/index.html#peripherals)\nsudo ./<path-to-net-tools>/net-setup.sh &\n# Execute the OPC UA server\n./build/zephyr/zephyr.exe &\n# Read the answer value via python-opcua CLI\nuaread -u \"opc.tcp://192.0.2.10:4840\" -n \"ns=1;s=the.answer\"\n```\n\n----------------------------------------\n\nTITLE: System Clock Function Declarations for Architecture Implementation\nDESCRIPTION: Core timestamp functions that must be implemented for each architecture. These functions handle UTC time, local time offset, and monotonic time measurements.\nSOURCE: https://github.com/open62541/open62541/blob/master/arch/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUA_DateTime UA_DateTime_now(void);\n\nUA_Int64 UA_DateTime_localTimeUtcOffset(void);\n\nUA_DateTime UA_DateTime_nowMonotonic(void);\n```\n\n----------------------------------------\n\nTITLE: OPC UA Security Policy Examples\nDESCRIPTION: Illustrates different security policies for encryption and transmission in OPC UA protocol\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/core_concepts.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSecurityPolicies:\n- None (cleartext transmission)\n- Basic256Sha256 (RSA with SHA256, AES256 encryption)\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace Zero Configuration Options in CMake\nDESCRIPTION: This snippet sets the configuration options for Namespace Zero in the Open62541 project. It defines the completeness level of Namespace Zero as minimal, reduced, or full and applies respective operations based on the chosen setting. It includes linking flags for the MSVC if a full namespace is specified, along with setting properties for integration tests and fuzzing.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(UA_NAMESPACE_ZERO \"REDUCED\" CACHE STRING \"Completeness of the generated namespace zero (minimal/reduced/full)\")\nSET_PROPERTY(CACHE UA_NAMESPACE_ZERO PROPERTY STRINGS \"MINIMAL\" \"REDUCED\" \"FULL\")\nif(UA_NAMESPACE_ZERO STREQUAL \"MINIMAL\")\n    set(UA_GENERATED_NAMESPACE_ZERO OFF)\nelse()\n    set(UA_GENERATED_NAMESPACE_ZERO ON)\nendif()\n\nif(UA_NAMESPACE_ZERO STREQUAL \"FULL\")\n    set(UA_GENERATED_NAMESPACE_ZERO_FULL ON)\nelse()\n    set(UA_GENERATED_NAMESPACE_ZERO_FULL OFF)\nendif()\n\nif(MSVC AND UA_NAMESPACE_ZERO STREQUAL \"FULL\")\n    # For the full NS0 we need a stack size of 8MB (as it is default on linux)\n    # See https://github.com/open62541/open62541/issues/1326\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /STACK:8000000\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding PubSub Examples\nDESCRIPTION: This snippet conditionally adds examples related to the PubSub functionality based on the `UA_ENABLE_PUBSUB` flag. It includes various tutorial and server-side examples for publishing and subscribing using PubSub.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_PUBSUB)\n    add_example(tutorial_pubsub_connection pubsub/tutorial_pubsub_connection.c)\n    add_example(tutorial_pubsub_publish pubsub/tutorial_pubsub_publish.c)\n    add_example(tutorial_pubsub_subscribe pubsub/tutorial_pubsub_subscribe.c)\n    add_example(server_pubsub_publish_on_demand pubsub/server_pubsub_publisher_on_demand.c)\n    add_example(server_pubsub_publisher_iop pubsub/server_pubsub_publisher_iop.c)\n    add_example(pubsub_subscribe_standalone_dataset pubsub/pubsub_subscribe_standalone_dataset.c)\n\n    add_example(server_pubsub_publish_rt_offsets pubsub_realtime/server_pubsub_publish_rt_offsets.c)\n    add_example(server_pubsub_subscribe_rt_offsets pubsub_realtime/server_pubsub_subscribe_rt_offsets.c)\n\n    ## Apple does not implement timer functions required by one of the examples\n    ## And apple does not implement librt posix extension\n    if(UA_ARCHITECTURE_POSIX AND NOT APPLE)\n        add_example(server_pubsub_publish_rt_state_machine\n                    pubsub_realtime/server_pubsub_publish_rt_state_machine.c)\n        target_link_libraries(server_pubsub_publish_rt_state_machine \"rt\")\n        add_example(server_pubsub_subscribe_rt_state_machine\n                    pubsub_realtime/server_pubsub_subscribe_rt_state_machine.c)\n        target_link_libraries(server_pubsub_subscribe_rt_state_machine \"rt\")\n    endif()\n\n    if(UA_ENABLE_ENCRYPTION_MBEDTLS)\n        add_example(pubsub_publish_encrypted pubsub/pubsub_publish_encrypted.c)\n        add_example(pubsub_subscribe_encrypted pubsub/pubsub_subscribe_encrypted.c)\n        if(UA_ENABLE_TPM2_SECURITY)\n            add_example(pubsub_publish_encrypted_tpm pubsub/pubsub_publish_encrypted_tpm.c)\n            add_example(pubsub_subscribe_encrypted_tpm pubsub/pubsub_subscribe_encrypted_tpm.c)\n        endif()\n        if(UA_ENABLE_TPM2_KEYSTORE)\n            add_example(pubsub_publish_encrypted_tpm_keystore\n                        pubsub/pubsub_publish_encrypted_tpm_keystore.c)\n            add_example(pubsub_subscribe_encrypted_tpm_keystore\n                        pubsub/pubsub_subscribe_encrypted_tpm_keystore.c)\n            target_link_libraries(pubsub_publish_encrypted_tpm_keystore tpm2_pkcs11 ssl crypto)\n            target_link_libraries(pubsub_subscribe_encrypted_tpm_keystore tpm2_pkcs11 ssl crypto)\n        endif()\n        if(UA_ENABLE_PUBSUB_SKS)\n            add_subdirectory(pubsub/sks)\n        endif()\n    endif()\n\n    if(UA_ENABLE_MQTT)\n        add_example(tutorial_pubsub_mqtt_publish pubsub/tutorial_pubsub_mqtt_publish.c)\n        add_example(tutorial_pubsub_mqtt_subscribe pubsub/tutorial_pubsub_mqtt_subscribe.c)\n    endif()\n\n    if(UA_ENABLE_PUBSUB_FILE_CONFIG)\n        add_example(server_pubsub_file_configuration pubsub/server_pubsub_file_configuration.c)\n    endif()\n\n    add_example(server_pubsub_subscribe_custom_monitoring\n                pubsub/server_pubsub_subscribe_custom_monitoring.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: OPC UA EventFilter JSON Representation\nDESCRIPTION: This JSON representation shows the structure of the OPC UA EventFilter generated from the parsed query string. It includes SelectClauses for Message, Severity, and EventType, and a complex WhereClause with nested filter operations and operands.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_2.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    SelectClauses: [\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Message\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Severity\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"EventType\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            }\n    ],\n    WhereClause: {\n            Elements: [\n                    {\n                            FilterOperator: 11,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 1\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 2\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 11,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 3\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 4\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 11,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 5\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 6\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 11,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 7\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 8\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 11,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 9\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 10\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"ns=1;i=5000\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"ns=1;i=5001\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"ns=1;i=5002\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"ns=1;i=5003\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"ns=1;i=5004\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n```\n\n----------------------------------------\n\nTITLE: Setting Architecture for open62541 Build\nDESCRIPTION: Configures the target architecture for building open62541. It allows selection between 'none', 'posix', 'win32', and 'zephyr' architectures, with automatic detection for Windows and POSIX systems.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(UA_ARCHITECTURES \"none\" \"posix\" \"win32\" \"zephyr\")\nset(UA_ARCHITECTURE \"\" CACHE STRING \"Architecture to build open62541 for\")\nSET_PROPERTY(CACHE UA_ARCHITECTURE PROPERTY STRINGS \"\" ${UA_ARCHITECTURES})\n\nif(\"${UA_ARCHITECTURE}\" STREQUAL \"\")\n    if(WIN32)\n        set(UA_ARCHITECTURE \"win32\" CACHE STRING \"\"  FORCE)\n    else()\n        set(UA_ARCHITECTURE \"posix\" CACHE STRING \"\" FORCE)\n    endif()\nendif()\n\nmessage(STATUS \"The selected architecture is: ${UA_ARCHITECTURE}\")\nif(\"${UA_ARCHITECTURE}\" STREQUAL \"posix\")\n    set(UA_ARCHITECTURE_POSIX 1)\nelseif(\"${UA_ARCHITECTURE}\" STREQUAL \"win32\")\n    set(UA_ARCHITECTURE_WIN32 1)\nelseif(\"${UA_ARCHITECTURE}\" STREQUAL \"zephyr\")\n    set(UA_ARCHITECTURE_ZEPHYR 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Client Application Launch Command\nDESCRIPTION: Command to run the OPC UA client with TPM2 encryption\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/encryption/README_client_server_tpm_keystore.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/examples/client_encryption_tpm_keystore opc.tcp://localhost:4840 ../tools/tpm_keystore/client_cert_sealed.der ../tools/tpm_keystore/client_key_sealed.der 1 123456 tpm_encrypt_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Tests\nDESCRIPTION: Configuration for encryption-related test cases with support for different crypto backends (MbedTLS, OpenSSL, LibreSSL).\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_ENCRYPTION_MBEDTLS)\n    ua_add_test(encryption/check_encryption_basic128rsa15.c)\n    ua_add_test(encryption/check_encryption_basic256.c)\n    ua_add_test(encryption/check_encryption_basic256sha256.c)\n    ua_add_test(encryption/check_encryption_aes128sha256rsaoaep.c)\n    ua_add_test(encryption/check_encryption_aes256sha256rsapss.c)\n    ua_add_test(encryption/check_username_connect_none.c)\n    ua_add_test(encryption/check_encryption_key_password.c)\n    ua_add_test(encryption/check_cert_generation.c)\n    ua_add_test(encryption/check_csr_generation.c)\n    ua_add_test(encryption/check_update_certificate.c)\n    ua_add_test(encryption/check_update_trustlist.c)\n    ua_add_test(encryption/check_certificategroup.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Nodeset Loader Examples\nDESCRIPTION: This snippet conditionally adds examples related to the Nodeset Loader functionality based on the `UA_ENABLE_NODESETLOADER` flag. It includes a subdirectory containing the relevant examples.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_NODESETLOADER)\n    add_subdirectory(nodeset_loader)\nendif()\n```\n\n----------------------------------------\n\nTITLE: OPC UA Authentication Mechanisms\nDESCRIPTION: Lists the currently defined authentication methods for establishing a secure session\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/core_concepts.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAuthentication Methods:\n- Anonymous login\n- Username/password\n- Kerberos\n- X509 certificates\n```\n\n----------------------------------------\n\nTITLE: Conditional JSON Configuration File Support in CMake\nDESCRIPTION: Adds support for JSON-based server configuration if JSON encoding is enabled. Includes necessary header and source files.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_JSON_ENCODING)\n    list(APPEND plugin_headers ${PROJECT_SOURCE_DIR}/plugins/include/open62541/server_config_file_based.h)\n    list(APPEND plugin_sources ${PROJECT_SOURCE_DIR}/plugins/ua_config_json.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Error Checking for Alarm and Condition Subscription\nDESCRIPTION: This snippet enforces a dependency rule for alarms and conditions related to the event subscription settings. It ensures that alarms and conditions can only be enabled if the event subscriptions are also enabled and the full Namespace Zero is used, helping to prevent misconfigurations.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif((UA_ENABLE_SUBSCRIPTIONS_ALARMS_CONDITIONS) AND (NOT (UA_ENABLE_SUBSCRIPTIONS_EVENTS AND UA_NAMESPACE_ZERO STREQUAL \"FULL\")))\n    message(FATAL_ERROR \"Unable to enable A&C without UA_ENABLE_SUBSCRIPTIONS_EVENTS and full namespace 0\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional NodeSet Loader Support in CMake\nDESCRIPTION: Adds support for NodeSet loading functionality if enabled. Configures the NodeSet Loader as part of the open62541 library and includes necessary files and dependencies.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_NODESETLOADER)\n    # This is required because of issues with policy CMP0077.\n    # Source: https://stackoverflow.com/a/54404924\n    option(ENABLE_BUILD_INTO_OPEN62541 \"make nodesetLoader part of the open62541 library\" off)\n    set(ENABLE_BUILD_INTO_OPEN62541 on)\n\n    add_subdirectory(${PROJECT_SOURCE_DIR}/deps/nodesetLoader)\n\n    list(APPEND lib_sources ${NODESETLOADER_SOURCES})\n    list(APPEND plugin_headers ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/nodesetloader.h)\n    list(APPEND plugin_sources ${PROJECT_SOURCE_DIR}/plugins/ua_nodesetloader.c)\n    list(APPEND open62541_LIBRARIES ${NODESETLOADER_DEPS_LIBS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Verification Folders in Open62541 (C)\nDESCRIPTION: The UA_CertificateVerification_CertFolders() function has been extended to include a parameter for specifying the folder where rejected certificates should be stored.\nSOURCE: https://github.com/open62541/open62541/blob/master/CHANGES.md#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nUA_CertificateVerification_CertFolders()\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries for open62541 in CMake\nDESCRIPTION: This snippet defines the target libraries for open62541, handling different architectures and creating object libraries for the main code and plugins.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nif(${UA_ARCHITECTURE} STREQUAL \"zephyr\")\n    zephyr_library_named(open62541-object)\n    zephyr_library_named(open62541-plugins)\n    target_sources(open62541-object PRIVATE ${lib_sources} ${lib_headers} ${exported_headers})\n    target_sources(open62541-plugins PRIVATE ${plugin_sources} ${plugin_headers})\nelse()\n    add_library(open62541-object OBJECT ${lib_sources} ${lib_headers} ${exported_headers})\n    add_library(open62541-plugins OBJECT ${plugin_sources} ${plugin_headers})\nendif()\nadd_library(open62541 $<TARGET_OBJECTS:open62541-object> $<TARGET_OBJECTS:open62541-plugins>)\n\nadd_dependencies(open62541-object open62541-code-generation)\nadd_dependencies(open62541-plugins open62541-code-generation)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules for open62541 in CMake\nDESCRIPTION: This snippet configures the installation rules for the open62541 library, including the library itself, CMake configuration files, and additional tools and schemas.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS open62541\n        EXPORT open62541Targets\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        INCLUDES DESTINATION include)\n\nset(open62541_install_tools_dir share/open62541)\nset(open62541_install_schema_dir share/open62541/schema)\n\ninclude(CMakePackageConfigHelpers)\nset(cmake_configfile_install ${CMAKE_INSTALL_LIBDIR}/cmake/open62541)\nconfigure_package_config_file(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/cmake/open62541Config.cmake.in\"\n                              \"${CMAKE_CURRENT_BINARY_DIR}/open62541Config.cmake\"\n                              INSTALL_DESTINATION \"${cmake_configfile_install}\"\n                              PATH_VARS open62541_install_tools_dir\n                                        open62541_install_schema_dir)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/open62541Config.cmake\"\n              \"${CMAKE_CURRENT_SOURCE_DIR}/tools/cmake/open62541Macros.cmake\"\n        DESTINATION \"${cmake_configfile_install}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional TPM2 Security Support in CMake\nDESCRIPTION: Adds TPM2-based security policy implementations if TPM2 security is enabled. Includes AES128 and AES256 counter mode implementations for PubSub.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_TPM2_SECURITY)\n    list(APPEND plugin_sources\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/pkcs11/securitypolicy_pubsub_aes128ctr_tpm.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/pkcs11/securitypolicy_pubsub_aes256ctr_tpm.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating OPC UA Nodeset for Special Models in CMake\nDESCRIPTION: This snippet shows the generation of OPC UA nodesets for special models like DI, AutoID, PROFINET, and others. Each model has its unique configuration and set of dependencies.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/nodeset_injector/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nua_generate_nodeset_and_datatypes(\n        NAME \"${NODESET_NAME}\"\n        FILE_CSV \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.Di.NodeIds.csv\"\n        FILE_NS \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.Di.NodeSet2.xml\"\n        INTERNAL\n        AUTOLOAD\n)\n```\n\n----------------------------------------\n\nTITLE: Generated OPC UA EventFilter JSON Structure\nDESCRIPTION: This JSON representation shows the resulting EventFilter structure after parsing the query string. It includes SelectClauses for Message, Severity, and EventType properties, and a WhereClause with OR operator combining two OFTYPE conditions for different NodeIds.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_0.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    SelectClauses: [\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Message\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Severity\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"EventType\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            }\n    ],\n    WhereClause: {\n            Elements: [\n                    {\n                            FilterOperator: 11,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 1\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 2\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"i=3035\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"ns=1;i=5003\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    }\n            ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PubSub Tests\nDESCRIPTION: Setup for PubSub-related test cases including encoding, connections, and platform-specific features.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_PUBSUB)\n    ua_add_test(pubsub/check_pubsub_encoding.c)\n    ua_add_test(pubsub/check_pubsub_encoding_custom.c)\n    ua_add_test(pubsub/check_pubsub_pds.c)\n    ua_add_test(pubsub/check_pubsub_connection_udp.c)\n    ua_add_test(pubsub/check_pubsub_publish.c)\n    ua_add_test(pubsub/check_pubsub_get_state.c)\n    ua_add_test(pubsub/check_pubsub_udp_unicast.c)\n    ua_add_test(pubsub/check_pubsub_publisherid.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing TPM2 Software Stack\nDESCRIPTION: These commands clone, configure, and install the TPM2 Software Stack library. It sets up the necessary components for interacting with the TPM.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/README_pubsub_tpm_keystore.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ${HOME}\ngit clone https://github.com/tpm2-software/tpm2-tss.git\ncd ${HOME}/tpm2-tss\ngit checkout 2.4.6\n./bootstrap\n./configure --with-udevrulesdir=/etc/udev/rules.d --with-udevrulesprefix=70-\nmake -j$(nproc)\nsudo make install\nsudo ldconfig\nsudo udevadm control --reload-rules && sudo udevadm trigger\n```\n\n----------------------------------------\n\nTITLE: Discovery Service Configuration\nDESCRIPTION: Sets up multicast discovery service dependencies using either mDNSd or Avahi implementations when discovery features are enabled.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_DISCOVERY_MULTICAST_MDNSD)\n    list(APPEND lib_headers\n        ${PROJECT_BINARY_DIR}/src_generated/mdnsd_config.h\n        ${PROJECT_SOURCE_DIR}/deps/mdnsd/libmdnsd/1035.h\n        # ...additional headers...\n    )\n    list(APPEND lib_sources\n        ${PROJECT_SOURCE_DIR}/src/server/ua_discovery_mdns.c\n        # ...additional sources...\n    )\nelseif(UA_ENABLE_DISCOVERY_MULTICAST_AVAHI)\n    list(APPEND lib_sources\n      ${PROJECT_SOURCE_DIR}/src/server/ua_discovery_mdns_avahi.c\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generated EventFilter JSON Structure\nDESCRIPTION: This snippet shows the JSON representation of the EventFilter after parsing. It contains SelectClauses for Message, Severity, and EventType paths, and a WhereClause with filtering conditions including operator elements and filter operands. The structure demonstrates the complex hierarchical nature of OPC UA event filters.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_4.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    SelectClauses: [\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Message\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Severity\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"EventType\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            }\n    ],\n    WhereClause: {\n            Elements: [\n                    {\n                            FilterOperator: 10,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 1\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 2\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"ns=1;i=5000\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 2,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=601\",\n                                            Body: {\n                                                    TypeDefinitionId: \"i=5000\",\n                                                    BrowsePath: [\n                                                            {\n                                                                    Name: \"Severity\"\n                                                            }\n                                                    ],\n                                                    AttributeId: 13,\n                                                    IndexRange: null\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: Int64,\n                                                            Body: \"99\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    }\n            ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MQTT Event Loop Test for open62541\nDESCRIPTION: Conditionally adds an MQTT event loop test when MQTT support is enabled. This test verifies the MQTT protocol integration with the event loop system.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_MQTT)\n    ua_add_test(check_eventloop_mqtt.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating PLCopen Nodeset with CMake\nDESCRIPTION: Generate the PLCopen nodeset XML, specifying dependencies on other nodesets and type arrays.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/nodeset_compiler.rst#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nua_generate_nodeset(\n    NAME \"plc\"\n    FILE \"${UA_NODESET_DIR}/PLCopen/Opc.Ua.PLCopen.NodeSet2_V1.02.xml\"\n    INTERNAL\n    DEPENDS_TYPES\n        \"UA_TYPES\" \"UA_TYPES_DI\"\n    DEPENDS_NS\n        \"${UA_NODESET_DIR}/Schema/Opc.Ua.NodeSet2.xml\"\n        \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.NodeSet2.xml\"\n    DEPENDS_TARGET \"open62541-generator-ns-di\"\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Historizing Support in CMake\nDESCRIPTION: Adds support for historizing functionality if enabled. Includes headers and sources for history data backends, gathering, and database operations.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_HISTORIZING)\n    list(APPEND plugin_headers\n         ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/historydata/history_data_backend.h\n         ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/historydata/history_data_gathering.h\n         ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/historydata/history_database_default.h\n         ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/historydata/history_data_gathering_default.h\n         ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/historydata/history_data_backend_memory.h)\n    list(APPEND plugin_sources\n         ${PROJECT_SOURCE_DIR}/plugins/historydata/ua_history_data_backend_memory.c\n         ${PROJECT_SOURCE_DIR}/plugins/historydata/ua_history_data_gathering_default.c\n         ${PROJECT_SOURCE_DIR}/plugins/historydata/ua_history_database_default.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenSSL/LibreSSL Encryption Support in CMake\nDESCRIPTION: Adds OpenSSL or LibreSSL-based encryption support if enabled or during amalgamation. Includes various security policies and certificate handling implementations.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_ENCRYPTION_OPENSSL OR UA_ENABLE_ENCRYPTION_LIBRESSL OR UA_ENABLE_AMALGAMATION)\n    list(INSERT plugin_sources 0\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/securitypolicy_common.h)\n    list(APPEND plugin_sources\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/securitypolicy_common.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/securitypolicy_basic128rsa15.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/securitypolicy_basic256.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/securitypolicy_basic256sha256.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/securitypolicy_aes128sha256rsaoaep.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/securitypolicy_aes256sha256rsapss.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/securitypolicy_eccnistp256.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/create_certificate.c\n         ${PROJECT_SOURCE_DIR}/plugins/crypto/openssl/certificategroup.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Valgrind Flags and Test Macros for Memory Testing\nDESCRIPTION: Sets up Valgrind flags for memory testing and defines macros for adding tests with or without Valgrind. These macros handle platform differences (like using Dr. Memory on Windows) and support fuzzing corpus generation if enabled.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Unit Test Definition Macro\n# For now we need to disable the libc freeres. See https://github.com/open62541/open62541/pull/1003#issuecomment-315045143\n# This also requires to disable the phtread cache with no-nptl-pthread-stackcache\nset(VALGRIND_FLAGS --quiet --trace-children=yes --leak-check=full --run-libc-freeres=yes --sim-hints=no-nptl-pthread-stackcache --track-fds=yes)\nmacro(add_test_valgrind TEST_NAME)\n    if(UA_ENABLE_UNIT_TESTS_MEMCHECK)\n        if(MSVC)\n            add_test(${TEST_NAME} drmemory -batch -exit_code_if_errors 1 -results_to_stderr -summary -- ${ARGN})\n        else()\n            set(VALGRIND_LOG ${TESTS_BINARY_DIR}/${TEST_NAME}.log)\n            set(VALGRIND_CMD valgrind --error-exitcode=1 --suppressions=${PROJECT_SOURCE_DIR}/tests/valgrind_suppressions.supp ${VALGRIND_FLAGS} --log-file=${VALGRIND_LOG} ${ARGN})\n            add_test(${TEST_NAME} ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/tests/valgrind_check_error.py ${VALGRIND_LOG} ${VALGRIND_CMD})\n        endif()\n    else()\n        add_test(${TEST_NAME} ${ARGN})\n    endif()\n    if(UA_BUILD_FUZZING_CORPUS)\n        target_sources(check_${TEST_NAME} PRIVATE ${PROJECT_SOURCE_DIR}/tests/fuzz/ua_debug_dump_pkgs_file.c)\n        file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/corpus/${TEST_NAME})\n        target_compile_definitions(check_${TEST_NAME} PRIVATE UA_CORPUS_OUTPUT_DIR=\"${PROJECT_BINARY_DIR}/corpus/${TEST_NAME}\")\n    endif()\nendmacro()\n\nmacro(add_test_no_valgrind TEST_NAME)\n    if(NOT UA_ENABLE_UNIT_TESTS_MEMCHECK)\n        add_test(${TEST_NAME} ${ARGN})\n    endif()\n    if(UA_BUILD_FUZZING_CORPUS)\n        target_sources(check_${TEST_NAME} PRIVATE ${PROJECT_SOURCE_DIR}/tests/fuzz/ua_debug_dump_pkgs_file.c)\n        file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/corpus/${TEST_NAME})\n        target_compile_definitions(check_${TEST_NAME} PRIVATE UA_CORPUS_OUTPUT_DIR=\"${PROJECT_BINARY_DIR}/corpus/${TEST_NAME}\")\n    endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring TPM Certificate Encryption Executable Build with Dependencies\nDESCRIPTION: Defines an executable target 'cert_encrypt_tpm' that compiles from cert_encrypt_tpm.c source file and links against the TPM PKCS#11 library and OpenSSL libraries (ssl and crypto).\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/tpm_keystore/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(cert_encrypt_tpm cert_encrypt_tpm.c)\ntarget_link_libraries(cert_encrypt_tpm tpm2_pkcs11 ssl crypto)\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion for POSIX and Win32 Architectures in CMake\nDESCRIPTION: Adds additional source files to the plugin_sources list if the architecture is POSIX or Win32. Includes files for timers, event loops, and network-related functionality.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ARCHITECTURE_POSIX OR UA_ARCHITECTURE_WIN32)\n    list(APPEND plugin_sources\n         ${PROJECT_SOURCE_DIR}/arch/common/timer.h\n         ${PROJECT_SOURCE_DIR}/arch/common/timer.c\n         ${PROJECT_SOURCE_DIR}/arch/posix/clock_posix.c\n         ${PROJECT_SOURCE_DIR}/arch/common/eventloop_common.h\n         ${PROJECT_SOURCE_DIR}/arch/common/eventloop_common.c\n         ${PROJECT_SOURCE_DIR}/arch/posix/eventloop_posix.h\n         ${PROJECT_SOURCE_DIR}/arch/posix/eventloop_posix.c\n         ${PROJECT_SOURCE_DIR}/arch/posix/eventloop_posix_tcp.c\n         ${PROJECT_SOURCE_DIR}/arch/posix/eventloop_posix_udp.c\n         ${PROJECT_SOURCE_DIR}/arch/posix/eventloop_posix_eth.c\n         ${PROJECT_SOURCE_DIR}/arch/posix/eventloop_posix_interrupt.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Encryption Plugin Inclusion in CMake\nDESCRIPTION: Includes encryption plugins for Unix, Win32, or during amalgamation. Adds common filestore implementations for certificates and security policies.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(((UNIX OR UA_ARCHITECTURE_WIN32) AND UA_ENABLE_ENCRYPTION) OR UA_ENABLE_AMALGAMATION)\n    list(APPEND plugin_sources ${PROJECT_SOURCE_DIR}/plugins/crypto/ua_filestore_common.h\n                               ${PROJECT_SOURCE_DIR}/plugins/crypto/ua_filestore_common.c\n                               ${PROJECT_SOURCE_DIR}/plugins/crypto/ua_certificategroup_filestore.c\n                               ${PROJECT_SOURCE_DIR}/plugins/crypto/ua_securitypolicy_filestore.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Nodesets and Datatypes CMake Instructions\nDESCRIPTION: The purpose of this snippet is to generate node sets and datatypes for different models like GDS, PADIM, and LADS using the `ua_generate_nodeset_and_datatypes` function. It specifies the paths to necessary files such as XML, CSV, and BSD, sets dependencies like 'di', 'irdi', and 'amb', and handles the condition where a nodeset is unsupported with a warning message. This requires an existing OPC UA directory structure and proper CMake setup.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/nodeset_injector/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nFILE_NS \"${UA_NODESET_DIR}/${MODEL}/Sercos.NodeSet2.xml\"\nINTERNAL\nAUTOLOAD\nDEPENDS \"di\"\n)\nelseif(MODEL STREQUAL \"GDS\")\nua_generate_nodeset_and_datatypes(\nNAME \"${NODESET_NAME}\"\nIMPORT_BSD \"UA_TYPES#${UA_NODESET_DIR}/Schema/Opc.Ua.Types.bsd\"\nFILE_CSV \"${UA_NODESET_DIR}/${MODEL}/OpcUaGdsModel.csv\"\nFILE_NS \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.Gds.NodeSet2.xml\"\nINTERNAL\nAUTOLOAD\n)\nelseif(MODEL STREQUAL \"PADIM\")\nua_generate_nodeset_and_datatypes(\nNAME \"irdi\"\nFILE_NS \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.IRDI.NodeSet2.xml\"\nINTERNAL\nAUTOLOAD\n)\nset(TMP_NSURI \"http://opcfoundation.org/UA/${MODEL}/\")\nconfigure_file(${PROJECT_SOURCE_DIR}/tools/nodeset_injector/empty.bsd.template \"${CMAKE_BINARY_DIR}/bsd_files_gen/Opc.Ua.${MODEL}.Types.bsd\")\nua_generate_nodeset_and_datatypes(\nNAME \"${NODESET_NAME}\"\nFILE_NS \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.${MODEL}.NodeSet2.xml\"\nFILE_CSV \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.${MODEL}.NodeIds.csv\"\nFILE_BSD \"${CMAKE_BINARY_DIR}/bsd_files_gen/Opc.Ua.${MODEL}.Types.bsd\"\nINTERNAL\nAUTOLOAD\nDEPENDS \"di\"\nDEPENDS \"irdi\"\n)\nelseif(MODEL STREQUAL \"LADS\")\nua_generate_nodeset_and_datatypes(\nNAME \"${NODESET_NAME}\"\nFILE_CSV \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.${MODEL}.NodeIds.csv\"\nFILE_NS \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.${MODEL}.NodeSet2.xml\"\nINTERNAL\nAUTOLOAD\nDEPENDS \"di\"\nDEPENDS \"amb\"\nDEPENDS \"machinery\"\n)\nelse()\nMESSAGE(WARNING \"The specified nodeset '${MODEL}' is not supported or is misspelled.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating OPC UA Nodeset for Single XML Models in CMake\nDESCRIPTION: This snippet demonstrates the process of generating an OPC UA nodeset for models with a single XML file and no dependencies. It locates the necessary CSV and XML files, then calls the ua_generate_nodeset_and_datatypes function with appropriate parameters.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/nodeset_injector/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# get csv file\nfile(GLOB files \"${UA_NODESET_DIR}/${MODEL}/*.csv\")\nforeach(file ${files})\n    string(REGEX MATCH \"(.*nodeids.csv)|(.*NodeIds.csv)|(Opc.Ua.${MODEL}.NodeSet[2]?.csv)\" csv_file_match ${file})\n    if(csv_file_match)\n        set(csv_file ${file})\n    endif()\nendforeach()\n# get xml file\nfile(GLOB files \"${UA_NODESET_DIR}/${MODEL}/*.xml\")\nforeach(file ${files})\n    string(REGEX MATCH \"Opc.Ua.${MODEL}.NodeSet[2]?.xml\" xml_file_match ${file})\n    if(xml_file_match)\n        set(xml_file ${file})\n    endif()\nendforeach()\n\nua_generate_nodeset_and_datatypes(\n        NAME \"${NODESET_NAME}\"\n        FILE_CSV \"${csv_file}\"\n        IMPORT_BSD \"UA_TYPES#${UA_NODESET_DIR}/Schema/Opc.Ua.Types.bsd\"\n        FILE_NS \"${xml_file}\"\n        INTERNAL\n        AUTOLOAD\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Memory and Range Unit Tests for open62541\nDESCRIPTION: Adds tests for memory handling and range checking of OPC UA types. These tests ensure proper memory allocation, freeing, and range validation.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nua_add_test(check_types_memory.c)\nua_add_test(check_types_range.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Discovery and Fuzzing Options\nDESCRIPTION: This snippet configures options related to discovery services and fuzz testing. It enables specific features that are necessary for comprehensive testing and discovery. It ensures that if certain fuzzy testing options are enabled, other related features are forced on to ensure compatibility and thorough testing.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_BUILD_FUZZING OR UA_BUILD_OSS_FUZZ OR UA_BUILD_FUZZING_CORPUS)\n    # Force enable options not passed in the build script, to also fuzzy-test this code\n    set(UA_ENABLE_DISCOVERY ON CACHE STRING \"\" FORCE)\n    set(UA_ENABLE_DISCOVERY_MULTICAST MDNSD CACHE STRING \"\" FORCE)\n    set(UA_ENABLE_DISCOVERY_MULTICAST_MDNSD ON CACHE STRING \"\" FORCE)\n    set(UA_ENABLE_ENCRYPTION ON CACHE STRING \"OFF\" FORCE)\n    set(UA_ENABLE_ENCRYPTION_MBEDTLS ON CACHE STRING \"\" FORCE)\n    set(UA_ENABLE_HISTORIZING ON CACHE STRING \"\" FORCE)\n    set(UA_ENABLE_JSON_ENCODING ON CACHE STRING \"\" FORCE)\n    set(UA_ENABLE_SUBSCRIPTIONS ON CACHE STRING \"\" FORCE)\n    set(UA_ENABLE_SUBSCRIPTIONS_EVENTS ON CACHE STRING \"\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating OPC UA Nodeset for Models with Multiple Dependencies in CMake\nDESCRIPTION: This snippet demonstrates generating OPC UA nodesets for models with multiple dependencies. It shows examples for various models like CAS, TMC, Pumps, and others, each with its specific set of dependencies.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/nodeset_injector/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nua_generate_nodeset_and_datatypes(\n        NAME \"${NODESET_NAME}\"\n        FILE_CSV \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.${MODEL}.NodeIds.csv\"\n        FILE_NS \"${UA_NODESET_DIR}/${MODEL}/Opc.Ua.${MODEL}.NodeSet2.xml\"\n        INTERNAL\n        AUTOLOAD\n        DEPENDS \"di\"\n        DEPENDS \"machinery\"\n        DEPENDS \"ia\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing open62541 on OpenBSD\nDESCRIPTION: This command installs the pre-built open62541 package on OpenBSD. It retrieves the binary package from the OpenBSD mirrors, providing a quick and easy way to install the library on OpenBSD systems.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/building.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npkg_add open62541\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Command Line Syntax\nDESCRIPTION: Command line interface for ua2json that supports encoding and decoding of OPC UA messages with optional type specification and file handling\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/ua2json/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ua2json [encode|decode] [-t dataType] [-o outputFile] [inputFile]\n```\n\n----------------------------------------\n\nTITLE: Configuring open62541 as ESP-IDF Component\nDESCRIPTION: This CMake script sets up a project that integrates the open62541 OPC UA library with the ESP-IDF framework. It adds open62541 as a dependency, retrieves its sources and include paths, creates a component structure compatible with ESP-IDF, and sets the architecture to FreeRTOS/LWIP.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/ci/azure-devops/freeRTOS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../../../ ${CMAKE_BINARY_DIR}/lib)\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\n\nget_target_property(OPEN62541_SOURCES open62541-object SOURCES)\nget_target_property(OPEN62541_INCLUDES open62541-object INCLUDE_DIRECTORIES)\n\n# Create an open62541 component for ESP IDF\nset(open62541_component_dir ${CMAKE_CURRENT_LIST_DIR}/components/open62541-lib)\nfile(MAKE_DIRECTORY ${open62541_component_dir})\nfile(WRITE ${open62541_component_dir}/CMakeLists.txt \"\nset(COMPONENT_SRCS ${OPEN62541_SOURCES})\nset(COMPONENT_ADD_INCLUDEDIRS ${OPEN62541_INCLUDES})\nset(COMPONENT_REQUIRES lwip mbedtls freertos)\nregister_component()\n\")\n\nadd_definitions(-DUA_ARCHITECTURE_FREERTOSLWIP)\n\nproject(hello-world)\n\nadd_dependencies(open62541-lib open62541-code-generation)\n```\n\n----------------------------------------\n\nTITLE: Generating OPC UA Nodeset for Models with DI Dependency in CMake\nDESCRIPTION: This snippet shows the process of generating an OPC UA nodeset for models that depend on the DI (Device Integration) model. It follows a similar pattern to the previous snippet but adds the DI dependency to the ua_generate_nodeset_and_datatypes function call.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/nodeset_injector/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nua_generate_nodeset_and_datatypes(\n        NAME \"${NODESET_NAME}\"\n        FILE_CSV \"${csv_file}\"\n        IMPORT_BSD \"UA_TYPES#${UA_NODESET_DIR}/Schema/Opc.Ua.Types.bsd\"\n        FILE_NS \"${xml_file}\"\n        INTERNAL\n        AUTOLOAD\n        DEPENDS \"di\"\n)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Subscription Dependencies for Event Enabling\nDESCRIPTION: This snippet checks for conditions related to enabling events within the Open62541 framework. It ensures that enabling event subscriptions is only permitted if subscriptions are enabled and the Namespace Zero is set to full. Violating this rule will produce a fatal error message, enforcing proper configuration.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif((UA_ENABLE_SUBSCRIPTIONS_EVENTS) AND (NOT (UA_ENABLE_SUBSCRIPTIONS AND UA_NAMESPACE_ZERO STREQUAL \"FULL\")))\n    message(FATAL_ERROR \"Unable to enable events without UA_ENABLE_SUBSCRIPTIONS and full namespace 0\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Error Handling without Cleanup Routine in C\nDESCRIPTION: This snippet demonstrates a scenario where a cleanup routine is not necessary because memory is freed directly after an error is detected. This is suitable when a cleanup action is performed only in a single location within the function.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nvoid noCleanupRoutine(void *data) {\n   \n    data = malloc(sizeof(int));\n    UA_CHECK_MEM(data, return UA_STATUSCODE_BADOUTOFMEMORY);\n     \n    UA_StatusCode rv = do_something();\n    UA_CHECK_STATUS(rv, free(data); return rv);\n    \n    return UA_STATUSCODE_GOOD;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Plugins for open62541\nDESCRIPTION: Configures the test plugins library which includes special implementations for testing, such as clock simulation, policy testing, and network layer mocking. Additional sources are added conditionally based on the platform and enabled features.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Use additional plugins for testing\nset(test_plugin_sources\n    ${PROJECT_SOURCE_DIR}/tests/testing-plugins/testing_clock.c\n    ${PROJECT_SOURCE_DIR}/tests/testing-plugins/testing_policy.c\n    ${PROJECT_SOURCE_DIR}/tests/testing-plugins/testing_networklayers.c)\n\n# Network replay tests currently require a Linux environment.\n# Also only do it for 64bit builds, as there is a bug in the Debian multi-arch installation.\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\" AND NOT UA_FORCE_32BIT)\n    list(APPEND test_plugin_sources\n                ${PROJECT_SOURCE_DIR}/tests/testing-plugins/testing_networklayers_pcap.c)\n    list(APPEND LIBS pcap)\nendif()\n\nif(UA_ENABLE_PUBSUB)\n    # Add ethernet_config.h to ensure the tests are rebuild when it changes\n    list(APPEND test_plugin_sources ${PROJECT_SOURCE_DIR}/tests/pubsub/ethernet_config.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Feature Examples Configuration\nDESCRIPTION: Sets up build targets for various feature demonstrations including encryption, discovery, and access control examples. Includes conditional compilation based on enabled features.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_ENCRYPTION OR\n   UA_ENABLE_ENCRYPTION STREQUAL \"MBEDTLS\" OR\n   UA_ENABLE_ENCRYPTION STREQUAL \"OPENSSL\")\n    add_example(server_encryption encryption/server_encryption.c)\n    add_example(server_encryption_filestore encryption/server_encryption_filestore.c)\n    add_example(client_encryption encryption/client_encryption.c)\n    target_include_directories(server_encryption PRIVATE \"${PROJECT_SOURCE_DIR}/examples\")\n    target_include_directories(client_encryption PRIVATE \"${PROJECT_SOURCE_DIR}/examples\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows MinGW Build Commands\nDESCRIPTION: Batch commands for building open62541 with MinGW on Windows, including directory setup and CMake configuration.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/building.rst#2025-04-21_snippet_2\n\nLANGUAGE: bat\nCODE:\n```\ncd <path-to>\\open62541\nmkdir build\ncd build\n<path-to>\\cmake.exe .. -G \"MinGW Makefiles\"\n:: You can use use cmake-gui for a graphical user-interface to select features\nmake\n```\n\n----------------------------------------\n\nTITLE: Adding JSON-related Unit Tests for open62541\nDESCRIPTION: Conditionally adds JSON encoding and PubSub-related JSON tests when JSON encoding is enabled. These tests verify the JSON parser, encoding/decoding of builtin types to JSON, and PubSub JSON functionality.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_JSON_ENCODING)\n    ua_add_test(check_cj5.c)\n    ua_add_test(check_types_builtin_json.c)\n\n    if(UA_ENABLE_PUBSUB)\n        ua_add_test(pubsub/check_pubsub_encoding_json.c)\n        ua_add_test(pubsub/check_pubsub_publish_json.c)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generated Event Filter JSON Structure\nDESCRIPTION: Shows the JSON representation of the event filter structure after parsing. The structure contains SelectClauses for Message, Severity, and EventType fields, and a WhereClause with complex filter conditions including operators and operands.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_3.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    SelectClauses: [\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Message\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Severity\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"EventType\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            }\n    ],\n    WhereClause: {\n            Elements: [\n                    {\n                            FilterOperator: 10,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 1\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 2\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"ns=1;i=5001\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 10,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 3\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=592\",\n                                            Body: {\n                                                    Index: 4\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 0,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: Int64,\n                                                            Body: \"99\"\n                                                    }\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: Int64,\n                                                            Body: \"99\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    },\n                    {\n                            FilterOperator: 2,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=601\",\n                                            Body: {\n                                                    TypeDefinitionId: \"i=5000\",\n                                                    BrowsePath: [\n                                                            {\n                                                                    Name: \"Severity\"\n                                                            }\n                                                    ],\n                                                    AttributeId: 13,\n                                                    IndexRange: null\n                                            }\n                                    },\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: Int64,\n                                                            Body: \"99\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    }\n            ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tutorial Examples Configuration\nDESCRIPTION: Configures build targets for tutorial examples including basic server and client implementations. Conditional compilation based on feature flags.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_example(tutorial_datatypes tutorial_datatypes.c)\nadd_example(tutorial_server_firststeps tutorial_server_firststeps.c)\nadd_example(tutorial_server_variable tutorial_server_variable.c)\nadd_example(tutorial_server_datasource tutorial_server_datasource.c)\nadd_example(tutorial_server_variabletype tutorial_server_variabletype.c)\nadd_example(tutorial_server_object tutorial_server_object.c)\nadd_example(tutorial_server_reverseconnect tutorial_server_reverseconnect.c)\n```\n\n----------------------------------------\n\nTITLE: Reproducing Fuzzing Issues for open62541 in Bash\nDESCRIPTION: This snippet shows how to reproduce fuzzing issues for the open62541 project. It builds the fuzzers and reproduces a specific testcase using the oss-fuzz infrastructure.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/fuzz/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# clone oss-fuzz repo\ncd oss-fuzz\n# Change $OPEN62541_DIR to your local checkout of open62541\n# And change $DOWNLOADS to your download location\npython infra/helper.py build_fuzzers --sanitizer address open62541 $OPEN62541_DIR && python infra/helper.py reproduce open62541 fuzz_binary_decode $DOWNLOADS/clusterfuzz-testcase-minimized-fuzz_binary_decode-5686300273803264\n```\n\n----------------------------------------\n\nTITLE: Enum Definition Style in C\nDESCRIPTION: This snippet shows the preferred way to define enums in Open62541. Enums should be used when defining related constants. Public enums are prefixed with `UA_` and enum values are in full capital letters.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum {\n    UA_SECURECHANNELSTATE_FRESH,\n    UA_SECURECHANNELSTATE_OPEN,\n    UA_SECURECHANNELSTATE_CLOSED\n} UA_SecureChannelState;\n```\n\n----------------------------------------\n\nTITLE: PLCopen and DI Nodeset Generation\nDESCRIPTION: Generates types and namespace for DI (Device Integration) and PLCopen, including dependencies and example servers.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/nodeset/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nua_generate_nodeset_and_datatypes(\n    NAME \"di\"\n    FILE_CSV \"${FILE_CSV_DIRPREFIX}/DI/Opc.Ua.Di.NodeIds.csv\"\n    FILE_BSD \"${FILE_BSD_PLCOPEN_DIRPREFIX}/DI/Opc.Ua.Di.Types.bsd\"\n    FILE_NS \"${FILE_NS_DIRPREFIX}/DI/Opc.Ua.Di.NodeSet2.xml\"\n    INTERNAL\n)\n\nua_generate_nodeset_and_datatypes(\n    NAME \"plc\"\n    FILE_NS \"${FILE_NS_DIRPREFIX}/PLCopen/Opc.Ua.PLCopen.NodeSet2_V1.02.xml\"\n    DEPENDS \"di\"\n    INTERNAL\n)\n```\n\n----------------------------------------\n\nTITLE: Generating PLCopen Nodeset\nDESCRIPTION: Generates the PLCopen nodeset which depends on the DI nodeset. PLCopen doesn't define custom types, so only the nodeset is generated from the NodeSet2 XML file.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n    # generate PLCopen namespace which is using DI\n    ua_generate_nodeset_and_datatypes(\n        NAME \"tests-plc\"\n        # PLCopen does not define custom types. Only generate the nodeset\n        FILE_NS \"${UA_NODESET_DIR}/PLCopen/Opc.Ua.PLCopen.NodeSet2_V1.02.xml\"\n        # PLCopen depends on the di nodeset, which must be generated before\n        OUTPUT_DIR \"${GENERATE_OUTPUT_DIR}\"\n        DEPENDS \"tests-di\"\n        INTERNAL\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement Formatting in C\nDESCRIPTION: This snippet demonstrates the proper formatting for `if`, `else if`, and `else` statements in C according to the Open62541 coding style. Opening braces are on the same line as the conditional, and `else if` and `else` are placed on the same line as the closing brace of the preceding block.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nif(a) {\n    doSomething();\n} else if(b) {\n    doSomething();\n} else doSomething();\n```\n\n----------------------------------------\n\nTITLE: Generating Custom XML Nodeset\nDESCRIPTION: Generates namespace from XML file with conditional logic for standalone vs integrated builds.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/nodeset/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n    ua_generate_nodeset_and_datatypes(\n        NAME \"example\"\n        FILE_NS \"${FILE_NS_DIRPREFIX}/server_nodeset.xml\"\n        DEPENDS \"${CMAKE_CURRENT_LIST_DIR}/../../tools/schema/Opc.Ua.NodeSet2.Reduced.xml\"\n    )\nelse()\n    ua_generate_nodeset_and_datatypes(\n        NAME \"example\"\n        FILE_NS \"${FILE_NS_DIRPREFIX}/server_nodeset.xml\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test for ADI Nodeset Compiler\nDESCRIPTION: Creates a test target for checking the ADI nodeset compiler. The test uses the generated DI and ADI sources and depends on the ADI generator.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n    ua_add_test(check_nodeset_compiler_adi.c\n                ${UA_NODESET_TESTS_DI_SOURCES}\n                ${UA_NODESET_TESTS_ADI_SOURCES}\n                ${UA_TYPES_TESTS_DI_SOURCES}\n                ${UA_TYPES_TESTS_ADI_SOURCES})\n    add_dependencies(check_nodeset_compiler_adi open62541-generator-ns-tests-adi)\n```\n\n----------------------------------------\n\nTITLE: Adding Miscellaneous Core Unit Tests for open62541\nDESCRIPTION: Adds tests for various core functionalities like custom types, message chunking, utility functions, secure channel handling, timers, and event loops. These tests verify essential components of the OPC UA stack.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nua_add_test(check_types_custom.c)\nua_add_test(check_chunking.c)\nua_add_test(check_utils.c)\nua_add_test(check_kvm_utils.c)\nua_add_test(check_securechannel.c)\nua_add_test(check_timer.c)\nua_add_test(check_eventloop.c)\nua_add_test(check_eventloop_tcp.c)\nua_add_test(check_eventloop_udp.c)\nua_add_test(check_eventloop_interrupt.c)\n```\n\n----------------------------------------\n\nTITLE: Multicast Discovery Configuration\nDESCRIPTION: Configures mDNS discovery support with export header generation and library setup. Handles platform-specific library creation for Apple systems.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_DISCOVERY_MULTICAST_MDNSD)\n  include(GenerateExportHeader)\n    set(MDNSD_LOGLEVEL 300 CACHE STRING \"Level at which logs shall be reported\" FORCE)\n    \n    if (APPLE)\n    \tadd_library(libmdnsd INTERFACE ${PROJECT_SOURCE_DIR}/deps/mdnsd/libmdnsd/mdnsd.h)\n    else()\n    \tadd_library(libmdnsd ${PROJECT_SOURCE_DIR}/deps/mdnsd/libmdnsd/mdnsd.h)\n    endif()\n    \n    set_property(TARGET libmdnsd PROPERTY LINKER_LANGUAGE C)\n    set_property(TARGET libmdnsd PROPERTY DEFINE_SYMBOL \"MDNSD_DYNAMIC_LINKING_EXPORT\")\n    configure_file(\"deps/mdnsd/libmdnsd/mdnsd_config_extra.in\"\n                   \"${PROJECT_BINARY_DIR}/src_generated/mdnsd_config_extra\")\n    file(READ \"${PROJECT_BINARY_DIR}/src_generated/mdnsd_config_extra\" MDNSD_CONFIG_EXTRA)\n    generate_export_header(libmdnsd EXPORT_FILE_NAME \"${PROJECT_BINARY_DIR}/src_generated/mdnsd_config.h\"\n                           BASE_NAME MDNSD DEFINE_NO_DEPRECATED CUSTOM_CONTENT_FROM_VARIABLE MDNSD_CONFIG_EXTRA)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating AutoID Nodeset and Datatypes\nDESCRIPTION: Generates types and namespace for AutoID which depends on DI. This tests structures with optional fields using CSV, BSD, and NodeSet2 XML files as inputs.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n    # generate AutoID namespace which is using DI (test e.g. for structures with optional fields)\n    ua_generate_nodeset_and_datatypes(\n            NAME \"tests-autoid\"\n            FILE_CSV \"${PROJECT_SOURCE_DIR}/tests/nodeset-compiler/Opc.Ua.AutoID.NodeIds.csv\"\n            FILE_BSD \"${PROJECT_SOURCE_DIR}/tests/nodeset-compiler/Opc.Ua.AutoID.Types.bsd\"\n            OUTPUT_DIR \"${GENERATE_OUTPUT_DIR}\"\n            FILE_NS \"${UA_NODESET_DIR}/AutoID/Opc.Ua.AutoID.NodeSet2.xml\"\n            DEPENDS \"tests-di\"\n            INTERNAL\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Multithreading Tests\nDESCRIPTION: Conditional configuration for multithreading test cases when UA_MULTITHREADING is enabled.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif (UA_MULTITHREADING GREATER_EQUAL 100)\n    ua_add_test(multithreading/check_mt_addVariableNode.c)\n    ua_add_test(multithreading/check_mt_addVariableTypeNode.c)\n    ua_add_test(multithreading/check_mt_addObjectNode.c)\n    ua_add_test(multithreading/check_mt_readValueAttribute.c)\n    ua_add_test(multithreading/check_mt_writeValueAttribute.c)\n    ua_add_test(multithreading/check_mt_readWriteDelete.c)\n    ua_add_test(multithreading/check_mt_readWriteDeleteCallback.c)\n    ua_add_test(multithreading/check_mt_addDeleteObject.c)\n    ua_add_test(server/check_server_asyncop.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding PubSub Encrypted SKS Examples\nDESCRIPTION: This CMake snippet adds two example applications, `pubsub_publish_encrypted_sks` and `pubsub_subscribe_encrypted_sks`, which demonstrate encrypted PubSub functionality using security key service (SKS). The `add_example` macro is used to specify both the target name and corresponding C source file for each example.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/sks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_example(pubsub_publish_encrypted_sks pubsub_publish_encrypted_sks.c)\nadd_example(pubsub_subscribe_encrypted_sks pubsub_subscribe_encrypted_sks.c)\n```\n\n----------------------------------------\n\nTITLE: Documentation Commenting Style in C\nDESCRIPTION: This snippet illustrates the style used for documentation comments in public header files within the Open62541 project. These comments, starting with a double-star (/** ... */), are used to generate documentation.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n/** This is documentation */\n```\n\n----------------------------------------\n\nTITLE: Generating ADI (Analyzer Device Integration) Nodeset and Datatypes\nDESCRIPTION: Generates types and namespace for Analyzer Device Integration (ADI) specification, which depends on the DI nodeset. Uses CSV, BSD, and NodeSet2 XML files as inputs.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n    # Generate types and namespace for ADI\n    ua_generate_nodeset_and_datatypes(\n        NAME \"tests-adi\"\n        FILE_CSV \"${UA_NODESET_DIR}/ADI/OpcUaAdiModel.csv\"\n        FILE_BSD \"${UA_NODESET_DIR}/ADI/Opc.Ua.Adi.Types.bsd\"\n        OUTPUT_DIR \"${GENERATE_OUTPUT_DIR}\"\n        FILE_NS \"${UA_NODESET_DIR}/ADI/Opc.Ua.Adi.NodeSet2.xml\"\n        DEPENDS \"tests-di\"\n        INTERNAL\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for open62541 Tests\nDESCRIPTION: Configures all necessary include directories for the tests, including the open62541 core library, internal headers, testing plugins, and generated files. Additional include paths are added for encryption libraries if enabled.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(open62541_BUILD_INCLUDE_DIRS TARGET open62541 PROPERTY INTERFACE_INCLUDE_DIRECTORIES)\ninclude_directories(${open62541_BUILD_INCLUDE_DIRS})\n# ua_server_internal.h\ninclude_directories(\"${PROJECT_SOURCE_DIR}/deps\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/src\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/src/server\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/src/pubsub\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/src/client\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/src/util\")\n# testing_clock.h\ninclude_directories(\"${CMAKE_CURRENT_SOURCE_DIR}/testing-plugins\")\n# #include <src_generated/<...>.h>\ninclude_directories(\"${PROJECT_BINARY_DIR}\")\ninclude_directories(\"${PROJECT_BINARY_DIR}/../plugins\")\n\nif(UA_ENABLE_ENCRYPTION_MBEDTLS)\n    # mbedtls includes\n    include_directories(${MBEDTLS_INCLUDE_DIRS})\nendif()\n\nif(UA_ENABLE_ENCRYPTION_OPENSSL)\n    # openssl includes\n    include_directories(${OPENSSL_INCLUDE_DIR})\nendif()\n\nif(UA_ENABLE_ENCRYPTION_LIBRESSL)\n    # openssl includes\n    include_directories(${LIBRESSL_INCLUDE_DIR})\nendif()\n\nif(CMAKE_HOST_SYSTEM_NAME MATCHES \"OpenBSD\")\n    include_directories(AFTER /usr/local/include)\n    link_directories(AFTER /usr/local/lib)\n    add_definitions(-Wno-gnu-zero-variadic-macro-arguments)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Nodeset Injector Functionality\nDESCRIPTION: Includes the nodeset injector functionality when UA_ENABLE_NODESET_INJECTOR is enabled. This adds the nodeset injector generator to the solution folders and includes its subdirectory.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_NODESET_INJECTOR)\n    set_target_properties(open62541-generator-nodesetinjector PROPERTIES FOLDER \"open62541/generators\")\n    add_subdirectory(tools/nodeset_injector)\n    set(UA_NODESETINJECTOR_GENERATORS ${UA_NODESETINJECTOR_GENERATORS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Commenting Style in C\nDESCRIPTION: This snippet demonstrates the preferred style for multi-line comments in C within the Open62541 project. It emphasizes using C-style comments (/* ... */) and providing a general description of the code's purpose rather than detailing its implementation.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/* Lorem ipsum dolor sit amet */\n\n/* Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy\n * eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam\n * voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita\n * kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem\n * ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod\n * tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\n * At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd\n * gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. */\n```\n\n----------------------------------------\n\nTITLE: Generating DI (Device Integration) Nodeset and Datatypes\nDESCRIPTION: Generates types and namespace for Device Integration (DI) specification from CSV, BSD, and NodeSet2 XML files. Uses the ua_generate_nodeset_and_datatypes macro to create the necessary files.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n    # Generate types and namespace for DI\n    ua_generate_nodeset_and_datatypes(\n        NAME \"tests-di\"\n        FILE_CSV \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.NodeIds.csv\"\n        FILE_BSD \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.Types.bsd\"\n        OUTPUT_DIR \"${GENERATE_OUTPUT_DIR}\"\n        FILE_NS \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.NodeSet2.xml\"\n        INTERNAL\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Build Settings\nDESCRIPTION: Sets up include paths for the project and configures initial build settings including warning suppressions and corpus output directory setup.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/fuzz/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(open62541_BUILD_INCLUDE_DIRS TARGET open62541 PROPERTY INTERFACE_INCLUDE_DIRECTORIES)\ninclude_directories(${open62541_BUILD_INCLUDE_DIRS})\ninclude_directories(\"${PROJECT_SOURCE_DIR}/deps\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/src\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/src/server\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/tests/testing-plugins\")\n\nif(NOT MSVC)\n    add_definitions(-Wno-deprecated-declarations)\nendif()\n```\n\n----------------------------------------\n\nTITLE: MSVC Compiler Configuration\nDESCRIPTION: Sets up Microsoft Visual C++ compiler flags, warning levels, and static CRT linking options.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /W3 /w44996\")\n  if(UA_FORCE_WERROR)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /WX\")\n  endif()\n\n  if(UA_MSVC_FORCE_STATIC_CRT AND NOT BUILD_SHARED_LIBS)\n    set(CompilerFlags CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_C_FLAGS\n        CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE)\n    foreach(CompilerFlag ${CompilerFlags})\n      string(REPLACE \"/MD\" \"/MT\" ${CompilerFlag} \"${${CompilerFlag}}\")\n    endforeach()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking ua2json Executable with CMake\nDESCRIPTION: This CMake code defines the `ua2json` executable target and links it against the `open62541` library. It sets up dependencies and target properties to ensure proper building and debugging of the `ua2json` tool.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/ua2json/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ua2json ua2json.c)\ntarget_link_libraries(ua2json open62541 ${open62541_LIBRARIES})\nassign_source_group(ua2json)\nadd_dependencies(ua2json open62541-object)\nset_target_properties(ua2json PROPERTIES FOLDER \"open62541/tools/ua2json\")\nset_target_properties(ua2json PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n```\n\n----------------------------------------\n\nTITLE: Generating documentation from tutorial code examples\nDESCRIPTION: Uses the generate_rst macro to create documentation from tutorial example code files, covering topics such as data types, server setup, variables, events, alarms, objects, methods, client usage, and publish-subscribe patterns.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Doc from tutorial code\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_datatypes.c ${DOC_SRC_DIR}/tutorial_datatypes.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_server_firststeps.c ${DOC_SRC_DIR}/tutorial_server_firststeps.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_server_variable.c ${DOC_SRC_DIR}/tutorial_server_variable.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_server_variabletype.c ${DOC_SRC_DIR}/tutorial_server_variabletype.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_server_datasource.c ${DOC_SRC_DIR}/tutorial_server_datasource.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_server_events.c ${DOC_SRC_DIR}/tutorial_server_events.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_server_alarms_conditions.c ${DOC_SRC_DIR}/tutorial_server_alarms_conditions.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_server_monitoreditems.c ${DOC_SRC_DIR}/tutorial_server_monitoreditems.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_server_object.c ${DOC_SRC_DIR}/tutorial_server_object.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_server_method.c ${DOC_SRC_DIR}/tutorial_server_method.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/tutorial_client_firststeps.c ${DOC_SRC_DIR}/tutorial_client_firststeps.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/pubsub/tutorial_pubsub_publish.c ${DOC_SRC_DIR}/tutorial_pubsub_publish.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/examples/pubsub/tutorial_pubsub_subscribe.c ${DOC_SRC_DIR}/tutorial_pubsub_subscribe.rst)\n\n# generate_rst(${PROJECT_SOURCE_DIR}/examples/pubsub_realtime/pubsub_TSN_publisher.c ${DOC_SRC_DIR}/pubsub_TSN_publisher.rst)\n# generate_rst(${PROJECT_SOURCE_DIR}/examples/pubsub_realtime/pubsub_TSN_loopback.c ${DOC_SRC_DIR}/pubsub_TSN_loopback.rst)\n# generate_rst(${PROJECT_SOURCE_DIR}/examples/pubsub_realtime/nodeset/pubsub_nodeset_rt_publisher.c ${DOC_SRC_DIR}/pubsub_nodeset_rt_publisher.rst)\n# generate_rst(${PROJECT_SOURCE_DIR}/examples/pubsub_realtime/nodeset/pubsub_nodeset_rt_subscriber.c ${DOC_SRC_DIR}/pubsub_nodeset_rt_subscriber.rst)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project Settings\nDESCRIPTION: Initial CMake configuration including version requirements and project setup for Open62541 examples.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(open62541-examples C)\nif(${CMAKE_VERSION} VERSION_LESS 3.12)\n    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin API Documentation Structure with reStructuredText\nDESCRIPTION: This RST code defines the table of contents structure for plugin API documentation in the open62541 project. It lists all the available plugin subsystems that can be extended by developers.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/plugin.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   plugin_log\n   plugin_nodestore\n   plugin_accesscontrol\n   plugin_eventloop\n   plugin_certificategroup\n   plugin_securitypolicy\n```\n\n----------------------------------------\n\nTITLE: Adding XML-related Unit Tests for open62541\nDESCRIPTION: Conditionally adds XML encoding tests when XML encoding is enabled. These tests verify the XML parser and encoding/decoding of builtin types to XML.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_XML_ENCODING)\n    ua_add_test(check_yxml.c)\n    ua_add_test(check_types_builtin_xml.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating plugin documentation from header files\nDESCRIPTION: Uses the generate_rst macro to create documentation files for various plugin interfaces including access control, logging, node store, event loop, certificate management, and security policies.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/plugin/accesscontrol.h ${DOC_SRC_DIR}/plugin_accesscontrol.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/plugin/log.h ${DOC_SRC_DIR}/plugin_log.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/plugin/nodestore.h ${DOC_SRC_DIR}/plugin_nodestore.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/plugin/eventloop.h ${DOC_SRC_DIR}/plugin_eventloop.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/plugin/certificategroup.h ${DOC_SRC_DIR}/plugin_certificategroup.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/plugin/securitypolicy.h ${DOC_SRC_DIR}/plugin_securitypolicy.rst)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for open62541 in CMake\nDESCRIPTION: This snippet defines functions to set up private and public include directories for the open62541 library and its components.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(include_directories_private)\n    foreach(_include_dir IN ITEMS ${ARGN})\n        target_include_directories(open62541-object PRIVATE ${_include_dir})\n        target_include_directories(open62541-plugins PRIVATE ${_include_dir})\n    endforeach()\nendfunction()\n\nfunction(include_directories_public)\n    include_directories_private(${ARGN})\n    foreach(_include_dir IN ITEMS ${ARGN})\n        target_include_directories(open62541 PUBLIC $<BUILD_INTERFACE:${_include_dir}>)\n    endforeach()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Fuzzer Target Creation Macro\nDESCRIPTION: Defines a CMake macro for creating fuzzer targets with common configuration. Sets up include directories and links necessary libraries for each fuzzer.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/fuzz/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_fuzzer FUZZER_NAME FUZZER_SOURCE)\n    add_executable(${FUZZER_NAME} ${FUZZER_SOURCE}\n                                  ${PROJECT_SOURCE_DIR}/tests/testing-plugins/testing_networklayers.c\n                                  $<TARGET_OBJECTS:open62541-object>\n                                  $<TARGET_OBJECTS:open62541-plugins>)\n    target_link_libraries(${FUZZER_NAME} ${LIBS})\n    target_include_directories(${FUZZER_NAME} PRIVATE ${PROJECT_SOURCE_DIR}/src/server)\n    target_include_directories(${FUZZER_NAME} PRIVATE ${PROJECT_SOURCE_DIR}/deps/mdnsd)\n    assign_source_group(${FUZZER_SOURCE})\n    list(APPEND FUZZER_TARGETS ${FUZZER_NAME})\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Resulting Event Filter Structure in JSON\nDESCRIPTION: This JSON representation shows the structure of the event filter after parsing. It includes SelectClauses for Message, Severity, and EventType, as well as a WhereClause specifying the event type.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_1.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    SelectClauses: [\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Message\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"Severity\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            },\n            {\n                    TypeDefinitionId: \"i=2041\",\n                    BrowsePath: [\n                            {\n                                    Name: \"EventType\"\n                            }\n                    ],\n                    AttributeId: 13,\n                    IndexRange: null\n            }\n    ],\n    WhereClause: {\n            Elements: [\n                    {\n                            FilterOperator: 14,\n                            FilterOperands: [\n                                    {\n                                            TypeId: \"i=595\",\n                                            Body: {\n                                                    Value: {\n                                                            Type: NodeId,\n                                                            Body: \"ns=1;i=5001\"\n                                                    }\n                                            }\n                                    }\n                            ]\n                    }\n            ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PubSub documentation from multiple header files\nDESCRIPTION: Creates a custom command to generate a single RST file for PubSub documentation by combining multiple related header files.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# PubSub docs are concatendated from multiple files\nadd_custom_command(OUTPUT ${DOC_SRC_DIR}/pubsub.rst\n                   DEPENDS ${PROJECT_SOURCE_DIR}/tools/c2rst.py\n                           ${PROJECT_SOURCE_DIR}/include/open62541/server_pubsub.h\n                           ${PROJECT_SOURCE_DIR}/include/open62541/pubsub.h\n                   COMMAND ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/tools/c2rst.py\n                                      ${PROJECT_SOURCE_DIR}/include/open62541/server_pubsub.h\n                                      ${PROJECT_SOURCE_DIR}/include/open62541/pubsub.h\n                                      ${DOC_SRC_DIR}/pubsub.rst)\nlist(APPEND GENERATED_RST ${DOC_SRC_DIR}/pubsub.rst)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Plugins Library for open62541\nDESCRIPTION: Defines the open62541-testplugins library that contains the test plugin implementations. It depends on the open62541 library and exports dynamic linking symbols.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(open62541-testplugins OBJECT ${test_plugin_sources})\nadd_dependencies(open62541-testplugins open62541)\ntarget_compile_definitions(open62541-testplugins PRIVATE -DUA_DYNAMIC_LINKING_EXPORT)\n```\n\n----------------------------------------\n\nTITLE: Conditional Discovery Support in CMake\nDESCRIPTION: Adds support for discovery functionality if enabled. Includes necessary header and source files for discovery operations.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_DISCOVERY)\n    list(APPEND lib_headers ${PROJECT_SOURCE_DIR}/src/server/ua_discovery.h)\n    list(APPEND lib_sources ${PROJECT_SOURCE_DIR}/src/server/ua_discovery.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining macro for RST generation from C headers\nDESCRIPTION: Creates a macro to generate RST documentation files from C header files using a Python script. The macro adds the output to a list of generated RST files.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(generate_rst in out)\n    add_custom_command(OUTPUT ${out}\n                       DEPENDS ${PROJECT_SOURCE_DIR}/tools/c2rst.py ${in}\n                       COMMAND ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/tools/c2rst.py ${in} ${out})\n    list(APPEND GENERATED_RST \"${out}\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Generating DI Nodeset Types and Namespace\nDESCRIPTION: Configures the generation of types and namespace for Device Integration (DI) specification using ua_generate_nodeset_and_datatypes macro.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-loader/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nua_generate_nodeset_and_datatypes(\n    NAME \"nodesetloader-di\"\n    FILE_CSV \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.NodeIds.csv\"\n    FILE_BSD \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.Types.bsd\"\n    OUTPUT_DIR \"${GENERATE_OUTPUT_DIR}\"\n    FILE_NS \"${UA_NODESET_DIR}/DI/Opc.Ua.Di.NodeSet2.xml\"\n    INTERNAL)\n```\n\n----------------------------------------\n\nTITLE: Adding Test for AutoID Nodeset Compiler\nDESCRIPTION: Creates a test target for checking the AutoID nodeset compiler. The test uses the generated DI and AutoID sources and depends on the AutoID generator.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n    ua_add_test(check_nodeset_compiler_autoid.c\n                ${UA_NODESET_TESTS_DI_SOURCES}\n                ${UA_NODESET_TESTS_AUTOID_SOURCES}\n                ${UA_TYPES_TESTS_DI_SOURCES}\n                ${UA_TYPES_TESTS_AUTOID_SOURCES})\n    add_dependencies(check_nodeset_compiler_autoid open62541-generator-ns-tests-autoid)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Autoinject Library Initialization and Dependencies\nDESCRIPTION: This snippet includes instructions to add the 'autoinject_library' using source files and link it with 'open62541'. It sets up the library to be linked with examples and tests, based on conditions specified by configuration options like 'UA_NODESETINJECTOR_GENERATORS'. This setup is meant for correctly building the Open62541 project where unit tests and examples depend on generated nodesets.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/nodeset_injector/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(autoinject_library ${UA_NODESETINJECTOR_SOURCE_FILES} ${PROJECT_BINARY_DIR}/src_generated/open62541/nodesetinjector.c)\ntarget_link_libraries(autoinject_library open62541)\nset(UA_NODESETINJECTOR_GENERATORS ${UA_NODESETINJECTOR_GENERATORS} PARENT_SCOPE)\nforeach(EXAMPLE_NAME ${UA_NODESETINJECTOR_EXAMPLE_NAMES})\nif(UA_NODESETINJECTOR_GENERATORS)\ntarget_link_libraries(${EXAMPLE_NAME} autoinject_library)\nadd_dependencies(${EXAMPLE_NAME} ${UA_NODESETINJECTOR_GENERATORS})\nendif()\nendforeach()\nif(UA_BUILD_UNIT_TESTS)\nforeach(TEST_NAME ${UA_NODESETINJECTOR_TEST_NAMES})\nif(UA_NODESETINJECTOR_GENERATORS)\ntarget_link_libraries(${TEST_NAME} autoinject_library)\nadd_dependencies(${TEST_NAME} ${UA_NODESETINJECTOR_GENERATORS})\nendif()\nendforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodeset Loader Examples in CMake for Open62541\nDESCRIPTION: Conditional CMake configuration that adds nodeset loader examples to the build process only when UA_NAMESPACE_ZERO is set to 'FULL'. This ensures that the examples requiring full nodeset functionality are only built when the appropriate capabilities are available.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/nodeset_loader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_NAMESPACE_ZERO STREQUAL \"FULL\")\n    add_example(nodeset_loader nodeset_loader.c)\n    add_example(server_nodeset_loader server_nodeset_loader.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Parsing Unit Tests for open62541\nDESCRIPTION: Conditionally adds tests for string parsing capabilities when parsing is enabled. This includes type parsing and, if subscriptions events are enabled, event filter parsing tests.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_PARSING)\n    ua_add_test(check_types_parse.c)\n    if(UA_ENABLE_SUBSCRIPTIONS_EVENTS)\n        ua_add_test(server/check_eventfilter_parser.c)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test for PLCopen Nodeset Compiler\nDESCRIPTION: Creates a test target for checking the PLCopen nodeset compiler. The test uses the generated DI and PLCopen sources and depends on the PLCopen generator.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n    ua_add_test(check_nodeset_compiler_plc.c\n                ${UA_NODESET_TESTS_DI_SOURCES}\n                ${UA_NODESET_TESTS_PLC_SOURCES}\n                ${UA_TYPES_TESTS_DI_SOURCES}\n                ${UA_TYPES_TESTS_PLC_SOURCES})\n    add_dependencies(check_nodeset_compiler_plc open62541-generator-ns-tests-plc)\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding Component Configuration\nDESCRIPTION: Configures additional headers and sources when JSON encoding is enabled. Includes JSON parsing dependencies and implementation files.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_JSON_ENCODING)\n    list(APPEND lib_headers ${PROJECT_SOURCE_DIR}/deps/cj5.h\n                            ${PROJECT_SOURCE_DIR}/deps/parse_num.h\n                            ${PROJECT_SOURCE_DIR}/src/ua_types_encoding_json.h)\n    list(APPEND lib_sources ${PROJECT_SOURCE_DIR}/deps/cj5.c\n                            ${PROJECT_SOURCE_DIR}/deps/parse_num.c\n                            ${PROJECT_SOURCE_DIR}/src/ua_types_encoding_json.c\n                            ${PROJECT_SOURCE_DIR}/src/ua_types_encoding_json_105.c\n                            ${PROJECT_SOURCE_DIR}/src/pubsub/ua_pubsub_networkmessage_json.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Example Addition Based on Namespace Configuration\nDESCRIPTION: This CMake snippet conditionally adds the `server_pubsub_central_sks` example if the `UA_NAMESPACE_ZERO` variable is set to \"FULL\". It checks the equality of the string variable and then uses the `add_example` macro to add the respective C file to the build.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/pubsub/sks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_NAMESPACE_ZERO STREQUAL \"FULL\")\n    add_example(server_pubsub_central_sks server_pubsub_central_sks.c)  \nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Registering ESP-IDF Component with CMake\nDESCRIPTION: Sets up component configuration for an ESP-IDF project using CMake. Specifies dependencies on open62541-lib and spi_flash, defines source files, and registers the component in the ESP-IDF build system.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/ci/azure-devops/freeRTOS/components/main/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(COMPONENT_REQUIRES open62541-lib )\nset(COMPONENT_PRIV_REQUIRES spi_flash )\nset(COMPONENT_SRCS hello_world_main.c)\nset(COMPONENT_ADD_INCLUDEDIRS \"\")\n\nregister_component()\n```\n\n----------------------------------------\n\nTITLE: Generating NodeSet for Interface Tests in OPC UA\nDESCRIPTION: Conditionally generates a nodeset for interface testing when using the FULL namespace zero variant. This creates the necessary data structures for testing interfaces.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_NAMESPACE_ZERO STREQUAL \"FULL\")\n    set(NODESET_COMPILER_OUTPUT_DIR \"${CMAKE_BINARY_DIR}/src_generated/tests\")\n\n    # Generate namespace for interfaces test\n    ua_generate_nodeset_and_datatypes(\n        NAME \"tests-interfaces\"\n        OUTPUT_DIR \"${NODESET_COMPILER_OUTPUT_DIR}\"\n        FILE_NS \"${CMAKE_CURRENT_SOURCE_DIR}/server/interface-testmodel.xml\"\n        INTERNAL\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion for Zephyr Architecture in CMake\nDESCRIPTION: Adds Zephyr-specific source files to the plugin_sources list if the architecture is Zephyr. Includes files for timers, event loops, and network functionality tailored for Zephyr RTOS.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ARCHITECTURE_ZEPHYR)\n    list(APPEND plugin_sources\n         ${PROJECT_SOURCE_DIR}/arch/common/timer.h\n         ${PROJECT_SOURCE_DIR}/arch/common/timer.c\n         ${PROJECT_SOURCE_DIR}/arch/zephyr/clock_zephyr.c\n         ${PROJECT_SOURCE_DIR}/arch/common/eventloop_common.h\n         ${PROJECT_SOURCE_DIR}/arch/common/eventloop_common.c\n         ${PROJECT_SOURCE_DIR}/arch/zephyr/eventloop_zephyr.h\n         ${PROJECT_SOURCE_DIR}/arch/zephyr/eventloop_zephyr.c\n         ${PROJECT_SOURCE_DIR}/arch/zephyr/eventloop_zephyr_tcp.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Test Nodeset for Full Namespace Zero\nDESCRIPTION: Generates test nodeset and datatypes that depend on DI when using the full namespace zero. Uses custom test files from the project source directory.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n#generate testnodeset\nif(UA_NAMESPACE_ZERO STREQUAL \"FULL\")\n\n    # Generate types and namespace for ADI\n    ua_generate_nodeset_and_datatypes(\n        NAME \"tests-testnodeset\"\n        FILE_CSV \"${PROJECT_SOURCE_DIR}/tests/nodeset-compiler/testnodeset.csv\"\n        FILE_BSD \"${PROJECT_SOURCE_DIR}/tests/nodeset-compiler/testtypes.bsd\"\n        OUTPUT_DIR \"${GENERATE_OUTPUT_DIR}\"\n        FILE_NS \"${PROJECT_SOURCE_DIR}/tests/nodeset-compiler/testnodeset.xml\"\n        DEPENDS \"tests-di\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Password Test Build\nDESCRIPTION: CMake configuration for building server password test executable with conditional linking for Linux systems.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(check_server_password server/check_server_password.c $<TARGET_OBJECTS:open62541-object> $<TARGET_OBJECTS:open62541-plugins> $<TARGET_OBJECTS:open62541-testplugins>)\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\ntarget_link_libraries(check_server_password ${LIBS} -lcrypt)\nelse()\ntarget_link_libraries(check_server_password ${LIBS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: OPC UA Security Mode Example\nDESCRIPTION: Demonstrates the three possible security modes for a SecureChannel in OPC UA protocol\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/core_concepts.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSecurityMode can be:\n- None\n- Sign\n- SignAndEncrypt\n```\n\n----------------------------------------\n\nTITLE: Configuring MinSizeRel Build Flags in CMake\nDESCRIPTION: Sets compiler and linker flags for minimizing binary size in release builds. Includes stack protector removal and specific linker optimizations for non-Windows platforms.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_BUILD_TYPE STREQUAL \"MinSizeRel\")\n    check_add_cc_flag(\"-fno-stack-protector\")\nendif()\nif(NOT OS9)\n    set(CMAKE_C_LINK_FLAGS \"${CMAKE_C_LINK_FLAGS} -s\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -s\")\nendif()\nif(NOT WIN32 AND NOT CYGWIN AND NOT APPLE)\n    set(CMAKE_C_LINK_FLAGS \"${CMAKE_C_LINK_FLAGS} -Wl,-z,norelro -Wl,--hash-style=gnu -Wl,--build-id=none\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test for Client Namespace Mapping\nDESCRIPTION: Creates a test target for checking client namespace mapping functionality. The test uses the generated DI and PLCopen sources.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n    ua_add_test(check_client_nsMapping.c\n            ${UA_NODESET_TESTS_DI_SOURCES}\n            ${UA_NODESET_TESTS_PLC_SOURCES}\n            ${UA_TYPES_TESTS_DI_SOURCES}\n            ${UA_TYPES_TESTS_PLC_SOURCES})\n    add_dependencies(check_client_nsMapping open62541-generator-ns-tests-plc)\n```\n\n----------------------------------------\n\nTITLE: Generating client documentation from multiple header files\nDESCRIPTION: Creates a custom command to generate a single RST file for client documentation by combining multiple related client header files including subscriptions and high-level APIs.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Client docs are concatendated from multiple files\nadd_custom_command(OUTPUT ${DOC_SRC_DIR}/client.rst\n                   DEPENDS ${PROJECT_SOURCE_DIR}/tools/c2rst.py\n                           ${PROJECT_SOURCE_DIR}/include/open62541/client.h\n                           ${PROJECT_SOURCE_DIR}/include/open62541/client_subscriptions.h\n                           ${PROJECT_SOURCE_DIR}/include/open62541/client_highlevel.h\n                           ${PROJECT_SOURCE_DIR}/include/open62541/client_highlevel_async.h\n                   COMMAND ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/tools/c2rst.py\n                                      ${PROJECT_SOURCE_DIR}/include/open62541/client.h\n                                      ${PROJECT_SOURCE_DIR}/include/open62541/client_subscriptions.h\n                                      ${PROJECT_SOURCE_DIR}/include/open62541/client_highlevel.h\n                                      ${PROJECT_SOURCE_DIR}/include/open62541/client_highlevel_async.h\n                                      ${DOC_SRC_DIR}/client.rst)\nlist(APPEND GENERATED_RST ${DOC_SRC_DIR}/client.rst)\n```\n\n----------------------------------------\n\nTITLE: Adding Test for Custom Test Nodeset Compiler\nDESCRIPTION: Creates a test target for checking the custom test nodeset compiler. The test uses the generated DI and test nodeset sources and depends on the test nodeset generator.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n    ua_add_test(check_nodeset_compiler_testnodeset.c\n                ${UA_NODESET_TESTS_DI_SOURCES}\n                ${UA_NODESET_TESTS_TESTNODESET_SOURCES}\n                ${UA_TYPES_TESTS_DI_SOURCES}\n                ${UA_TYPES_TESTS_TESTNODESET_SOURCES})\n    add_dependencies(check_nodeset_compiler_testnodeset open62541-generator-ns-tests-testnodeset)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring FilterOperator and FilterOperands in OPC UA - JSON\nDESCRIPTION: This JSON snippet represents configurations for an OPC UA filter operation, specifying a filter operator identified by an integer code and a list of filter operands. Each operand is defined with a TypeId and a Body containing a NodeId. The primary use of this configuration is to set up and execute filtering in an OPC UA application, which requires parsing and interpreting these structured data definitions. The expected input is a JSON object with specific fields, and there are no additional dependencies beyond a typical JSON parser.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/eventfilter_query/case_2.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"FilterOperator\": 14,\n    \"FilterOperands\": [\n        {\n            \"TypeId\": \"i=595\",\n            \"Body\": {\n                \"Value\": {\n                    \"Type\": NodeId,\n                    \"Body\": \"i=3035\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Companion Specifications for Full Namespace Zero\nDESCRIPTION: Conditional block that executes test configuration for companion specifications when using the full namespace zero (NS0). Sets up the output directory for generated files.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_NAMESPACE_ZERO STREQUAL \"FULL\")\n\n    set(GENERATE_OUTPUT_DIR \"${CMAKE_BINARY_DIR}/src_generated/tests\")\n```\n\n----------------------------------------\n\nTITLE: Conditional MQTT Event Loop Inclusion in CMake\nDESCRIPTION: Adds MQTT event loop source file if MQTT support is enabled in the build configuration.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(UA_ENABLE_MQTT)\n    list(APPEND plugin_sources ${PROJECT_SOURCE_DIR}/arch/common/eventloop_mqtt.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Multiline Expression Formatting in C\nDESCRIPTION: This snippet shows the correct formatting for multiline expressions in C according to Open62541 coding guidelines. Lines should be aligned to improve readability.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nint a = 1 +\n        2 +\n        3;\n\nint b = ((1) + 2) -\n        (4 * 5 / 6 % 7);\n```\n\n----------------------------------------\n\nTITLE: Defining CallRequest Struct in OPC UA\nDESCRIPTION: Encapsulates a collection of method call requests to be processed, allowing multiple method invocations in a single request\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/schema/datatypes_method.txt#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    RequestHeader requestHeader;\n    size_t methodsToCallSize;\n    CallMethodRequest *methodsToCall;\n} CallRequest;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Integration Test Executables\nDESCRIPTION: Configures client and server executables for integration testing with proper linking and output directory settings.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-loader/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(add_node_integration_test_client client.c\n                   $<TARGET_OBJECTS:open62541-object> $<TARGET_OBJECTS:open62541-plugins> $<TARGET_OBJECTS:open62541-testplugins>)\nset_target_properties(add_node_integration_test_client PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\ntarget_link_libraries(add_node_integration_test_client ${LIBS})\n\nadd_executable(add_node_integration_test_server server.c\n                   $<TARGET_OBJECTS:open62541-object> $<TARGET_OBJECTS:open62541-plugins> $<TARGET_OBJECTS:open62541-testplugins>)\nset_target_properties(add_node_integration_test_server PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\ntarget_link_libraries(add_node_integration_test_server ${LIBS})\n```\n\n----------------------------------------\n\nTITLE: Expected Output from OPC UA Client Read Operation\nDESCRIPTION: The expected response when reading a value from the OPC UA server using the python-opcua CLI client. It shows a warning about secure channel timeout and returns the value 42.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/zephyr/server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nWARNING: Requested secure channel timeout to be 3600000ms, got 600000ms instead\n42\n```\n\n----------------------------------------\n\nTITLE: Generating RST files from core header files\nDESCRIPTION: Uses the generate_rst macro to create documentation files from the main open62541 header files for types, common functions, utilities, status codes, and server functionality.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Doc from headers\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/types.h ${DOC_SRC_DIR}/types.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/common.h ${DOC_SRC_DIR}/common.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/util.h ${DOC_SRC_DIR}/util.rst)\ngenerate_rst(${PROJECT_BINARY_DIR}/src_generated/open62541/statuscodes.h ${DOC_SRC_DIR}/statuscodes.rst)\ngenerate_rst(${PROJECT_SOURCE_DIR}/include/open62541/server.h ${DOC_SRC_DIR}/server.rst)\n```\n\n----------------------------------------\n\nTITLE: Setting PubSub State for Components in Open62541 (C)\nDESCRIPTION: Functions for setting PubSub state have been modified to include an additional parameter for the cause of the state change and have a new parameter order.\nSOURCE: https://github.com/open62541/open62541/blob/master/CHANGES.md#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nUA_DataSetWriter_setPubSubState\nUA_WriterGroup_setPubSubState\nUA_DataSetReader_setPubSubState\nUA_ReaderGroup_setPubSubState\n```\n\n----------------------------------------\n\nTITLE: Configuring DI Comparison Test Executable\nDESCRIPTION: Sets up the compilation and linking of the DI comparison test executable with necessary dependencies and test configuration.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-loader/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(check_nodeset_loader_compare_di check_nodeset_loader_compare_di.c\n               ${UA_NODESET_NODESETLOADER_DI_SOURCES} ${UA_TYPES_NODESETLOADER_DI_SOURCES}\n               $<TARGET_OBJECTS:open62541-object> $<TARGET_OBJECTS:open62541-plugins> $<TARGET_OBJECTS:open62541-testplugins>)\nadd_dependencies(check_nodeset_loader_compare_di open62541-generator-ns-nodesetloader-di)\ntarget_link_libraries(check_nodeset_loader_compare_di ${LIBS})\nadd_test_valgrind(check_nodeset_loader_compare_di ${TESTS_BINARY_DIR}/check_nodeset_loader_compare_di)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags for Fuzzing\nDESCRIPTION: Sets up compiler flags for different Clang versions to enable Address Sanitizer and fuzzing capabilities. Includes version-specific configurations for sanitization options.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/fuzz/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O1 -fsanitize=address\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O1 -fsanitize=address\")\nelseif(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 10.0)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fno-omit-frame-pointer -gline-tables-only -fsanitize=address -fsanitize-address-use-after-scope\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer -gline-tables-only -fsanitize=address -fsanitize-address-use-after-scope\")\nelse()\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fno-omit-frame-pointer -gline-tables-only -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer -gline-tables-only -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CallMethodRequest Struct in OPC UA\nDESCRIPTION: Represents a request to invoke a method in the OPC UA protocol, containing details about the method to be called and its parameters\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/schema/datatypes_method.txt#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    RequestHeader requestHeader;\n    NodeId objectId;\n    NodeId methodId;\n    size_t inputArgumentsSize;\n    Variant *inputArguments;\n} CallMethodRequest;\n```\n\n----------------------------------------\n\nTITLE: Conditional Windows Encryption Header Addition\nDESCRIPTION: Adds Windows-specific encryption headers when encryption is enabled for Windows architecture.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_ENCRYPTION AND UA_ARCHITECTURE_WIN32)\n    list(APPEND lib_headers ${PROJECT_SOURCE_DIR}/deps/tr_dirent.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Nodeset Loader Tests in CMake\nDESCRIPTION: Sets up basic nodeset loader test definitions and directory configuration for the test environment.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-loader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_compile_definitions(OPEN62541_NODESET_DIR=\"${UA_NODESET_DIR}/\")\nua_add_test(check_nodeset_loader_di.c)\nua_add_test(check_nodeset_loader_autoid.c)\nua_add_test(check_nodeset_loader_plc.c)\nua_add_test(check_nodeset_loader_input.c)\n```\n\n----------------------------------------\n\nTITLE: Conditional Syslog Logging Support for Unix Systems in CMake\nDESCRIPTION: Adds support for syslog logging on Unix-based systems. Includes the necessary header and source files for syslog integration.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX)\n    list(APPEND plugin_headers ${PROJECT_SOURCE_DIR}/plugins/include/open62541/plugin/log_syslog.h)\n    list(APPEND plugin_sources ${PROJECT_SOURCE_DIR}/plugins/ua_log_syslog.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags in CMake for Windows and Non-Windows Platforms\nDESCRIPTION: Configures compiler flags based on the platform. For MSVC (Windows), it reduces warning levels and sets the appropriate runtime library. For other platforms, it disables specific warnings related to unused variables, functions, and GNU zero variadic macro arguments.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /W1\") # Reduce warnings level\n    add_compile_options(\n        $<$<CONFIG:>:/MD>\n        $<$<CONFIG:Debug>:/MDd>\n        $<$<CONFIG:Release>:/MD>\n    )    \nelse()\n    add_compile_options(-Wno-unused-variable -Wno-unused-function)\n    add_compile_options(-Wno-gnu-zero-variadic-macro-arguments) # silence warning for the check library\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Third-Party Libraries Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the third-party libraries used in the open62541 project. It includes columns for the library name, license, and a brief description of each library's purpose.\nSOURCE: https://github.com/open62541/open62541/blob/master/deps/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Library         | License          | Description                                     |\n|-----------------|------------------|-------------------------------------------------|\n| mdnsd           | BSD-3-Clause     | mDNS library                                    |\n| ua-nodeset      | MIT              | Official OPC UA Nodeset files by the OPCF       |\n| parse_num       | MIT              | Char to int conversion, from musl               |\n| base64          | BSD              | Base64 encoding and decoding                    |\n| itoa            | MIT              | Int to char conversion                          |\n| open62541_queue | BSD-3-Clause     | FIFO and LIFO queue implementation              |\n| pcg_basic       | Apache License 2 | Random Number Generation                        |\n| ziptree         | MPL 2.0          | Reusable zip tree implementation                |\n| mqtt-c          | MIT              | a portable MQTT client in C                     |\n| dtoa            | BSL (Boost)      | Printing of float numbers                       |\n| mp_printf       | MIT              | Our version of github:mpaland/printf            |\n| utf8            | MPL 2.0          | Lightweight utf8 de/encoding                    |\n| tr_dirent       | MIT              | Dirent interface for Microsoft Visual Studio    |\n| yxml            | MIT              | Small XML parser (https://dev.yorhel.nl/yxml)   |\n| musl_inet_pton  | MIT              | A musl implementation of the inet_pton function |\n```\n\n----------------------------------------\n\nTITLE: Setting Nodeset Injector Variables\nDESCRIPTION: This snippet conditionally sets variables related to the Nodeset Injector functionality based on the `UA_ENABLE_NODESET_INJECTOR` flag. It sets variables for generators, source files, and example names in the parent scope.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_NODESET_INJECTOR)\n    set(UA_NODESETINJECTOR_GENERATORS ${UA_NODESETINJECTOR_GENERATORS} PARENT_SCOPE)\n    set(UA_NODESETINJECTOR_SOURCE_FILES ${UA_NODESETINJECTOR_SOURCE_FILES} PARENT_SCOPE)\n    set(UA_NODESETINJECTOR_EXAMPLE_NAMES ${UA_NODESETINJECTOR_EXAMPLE_NAMES} PARENT_SCOPE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Organizing open62541 Generator Components in Solution Folders\nDESCRIPTION: Groups the generator targets used in the open62541 build process into the 'open62541/generators' folder in the Visual Studio solution.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(open62541-generator-namespace PROPERTIES FOLDER \"open62541/generators\")\nset_target_properties(open62541-generator-statuscode PROPERTIES FOLDER \"open62541/generators\")\nset_target_properties(open62541-generator-transport PROPERTIES FOLDER \"open62541/generators\")\nset_target_properties(open62541-generator-types PROPERTIES FOLDER \"open62541/generators\")\n```\n\n----------------------------------------\n\nTITLE: Reproducing Fuzzing Build Failure for open62541 in Bash\nDESCRIPTION: This snippet demonstrates how to reproduce a fuzzing build failure for the open62541 project using the oss-fuzz infrastructure. It clones the oss-fuzz repository and builds the fuzzers with address sanitizer.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/fuzz/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# clone oss-fuzz repo\ncd oss-fuzz\n# Change $OPEN62541_DIR to your local checkout of open62541\npython infra/helper.py build_fuzzers --sanitizer address open62541 $OPEN62541_DIR && python infra/helper.py check_build --sanitizer address open62541\n```\n\n----------------------------------------\n\nTITLE: Commented Code for Optional Structure and Union Tests\nDESCRIPTION: Commented out code that would generate datatypes for testing optional structures and unions. Includes the datatype generation and test target configuration.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n#[[ua_generate_datatypes(\n        NAME \"optstruct-union\"\n        TARGET_SUFFIX \"types-optstruct-union\"\n        NAMESPACE_IDX 2\n        FILE_CSV \"${PROJECT_SOURCE_DIR}/tests/nodeset-compiler/testnodeset.csv\"\n        FILES_BSD \"${PROJECT_SOURCE_DIR}/tests/nodeset-compiler/testtypes.bsd\"\n)\n\nua_add_test(check_nodeset_compiler_optstructs_union.c\n            ${UA_NODESET_TESTS_DI_SOURCES}\n            ${UA_NODESET_TESTS_PLC_SOURCES}\n            ${UA_TYPES_TESTS_DI_SOURCES}\n            ${UA_TYPES_TESTS_PLC_SOURCES})]]\n```\n\n----------------------------------------\n\nTITLE: Sample Commit Messages\nDESCRIPTION: Provides two example commit messages demonstrating proper formatting and content structure for documentation and bug fix commits.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndocs(server): add function documentation\n```\n\nLANGUAGE: text\nCODE:\n```\nfix(core): fix parsing of endpoint url\\n\\nParsing of endpoint urls now also supports https\n```\n\n----------------------------------------\n\nTITLE: Building open62541 Docker Container Locally\nDESCRIPTION: Commands to clone the open62541 repository and build the Docker container locally. This sequence clones the GitHub repository, navigates to the project directory, and builds the Docker image using the provided Dockerfile.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/docker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/open62541/open62541\ncd open62541\ndocker build -f tools/docker/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Generating NodeID Header\nDESCRIPTION: Generates a header file containing node IDs from a CSV file with specified prefix and target suffix.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/nodeset/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nua_generate_nodeid_header(\n    NAME \"example_nodeids\"\n    ID_PREFIX \"EXAMPLE_NS\"\n    TARGET_SUFFIX \"ids_example\"\n    FILE_CSV \"${FILE_CSV_DIRPREFIX}/server_nodeset.csv\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Valgrind for Memory Testing in CMake\nDESCRIPTION: Sets up Valgrind for memory checking if unit tests with memory checking are enabled and not compiling with MSVC.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Valgrind dependency\nif(NOT MSVC AND UA_ENABLE_UNIT_TESTS_MEMCHECK)\n    find_package(Valgrind REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Nodeset Injector Test Configuration\nDESCRIPTION: Conditional configuration for nodeset injector tests that sets parent scope variable if nodeset injector is enabled.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(UA_ENABLE_NODESET_INJECTOR)\n    set(UA_NODESETINJECTOR_TEST_NAMES ${UA_NODESETINJECTOR_TEST_NAMES} PARENT_SCOPE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for Generated Test Sources in CMake\nDESCRIPTION: Configures the include directories to include generated test source files from the project binary directory.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-compiler/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\"${PROJECT_BINARY_DIR}/src_generated/tests\")\n```\n\n----------------------------------------\n\nTITLE: Adding Linux-specific Ethernet Event Loop Test\nDESCRIPTION: Conditionally adds an Ethernet event loop test for Linux platforms when memory checking is not enabled. This test requires raw socket capabilities which aren't compatible with Valgrind.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\" AND NOT UA_ENABLE_UNIT_TESTS_MEMCHECK)\n    # Requires raw socket capability, currently not possible with valgrind\n    ua_add_test(check_eventloop_eth.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Formatting in C\nDESCRIPTION: This snippet demonstrates the formatting guidelines for `switch` statements in C within the Open62541 project.  The `case` keyword is not indented, and the content of each `case` is indented on new lines. Code blocks within a `case` should follow standard brace conventions.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nswitch(a) {\ncase 0:\n    doA();\ncase 1: {\n    doB();\n    doC();\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Compiler Settings for macOS\nDESCRIPTION: Configures macOS-specific compiler flags and RPATH settings.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n    set(CMAKE_MACOSX_RPATH 1)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D_DARWIN_C_SOURCE=1\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Output and Build Settings\nDESCRIPTION: This CMake script sets the runtime output directory, adds an executable named 'ua', and links it with the open62541 library. It also assigns source groups and dependencies, and sets target properties including the visual studio debugger working directory. Dependencies include CMake and open62541 library.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/ua-cli/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\nadd_executable(ua ua.c)\ntarget_link_libraries(ua open62541 ${open62541_LIBRARIES})\nassign_source_group(ua-cli)\nadd_dependencies(ua open62541-object)\nset_target_properties(ua PROPERTIES FOLDER \"open62541/tools/ua-cli\")\nset_target_properties(ua PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Prefixes in CMake\nDESCRIPTION: Defines directory prefixes for CSV, BSD, and NS files used in nodeset generation.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/nodeset/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FILE_CSV_DIRPREFIX ${PROJECT_SOURCE_DIR}/nodeset)\nset(FILE_BSD_DIRPREFIX ${PROJECT_SOURCE_DIR}/nodeset)\nset(FILE_NS_DIRPREFIX ${PROJECT_SOURCE_DIR}/nodeset)\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Test Execution\nDESCRIPTION: Sets up test execution commands for integration tests using bash scripts with client and server executables.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/nodeset-loader/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_program(BASH_PROGRAM bash)\n\nadd_test(check_nodeset_loader_add_node_integration\n         ${BASH_PROGRAM} ${CMAKE_CURRENT_SOURCE_DIR}/run_test.sh\n         \"${CMAKE_CURRENT_BINARY_DIR}/add_node_integration_test_client\"\n         \"${CMAKE_CURRENT_BINARY_DIR}/add_node_integration_test_server\")\n\nadd_test(check_nodeset_loader_DI_ordering_integration\n         ${BASH_PROGRAM} ${CMAKE_CURRENT_SOURCE_DIR}/run_test_ordering.sh\n         \"${CMAKE_CURRENT_BINARY_DIR}/add_node_integration_test_client\"\n         \"${CMAKE_CURRENT_BINARY_DIR}/add_node_integration_test_server\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Visual Studio Solution Folders in CMake\nDESCRIPTION: Enables the use of solution folders in Visual Studio and sets the default folder for predefined CMake targets.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\nset_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER \"_CmakePredifinedTargets\")\n```\n\n----------------------------------------\n\nTITLE: Copying generated type definitions for documentation\nDESCRIPTION: Creates a custom command to copy generated type definitions from the build directory to the documentation source directory.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated type definitions\nadd_custom_command(OUTPUT ${DOC_SRC_DIR}/types_generated.rst\n                   COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_BINARY_DIR}/src_generated/open62541/types_generated.rst ${DOC_SRC_DIR}\n                   DEPENDS ${PROJECT_BINARY_DIR}/src_generated/open62541/types_generated.rst)\nlist(APPEND GENERATED_RST ${DOC_SRC_DIR}/types_generated.rst)\n```\n\n----------------------------------------\n\nTITLE: Copying documentation source files in CMake\nDESCRIPTION: Copies documentation source files from the project source directory to the documentation source directory, excluding specific files that require special handling.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy all files from /doc dir to the /doc_src dir. doc_src is used to compile the documentation.\n# Use custom copy command to make sure files are correctly updated when they are changed.\nfile(GLOB DOC_SRC \"${PROJECT_SOURCE_DIR}/doc/*\")\nlist(REMOVE_ITEM DOC_SRC \"${PROJECT_SOURCE_DIR}/doc/conf.py\")\nlist(REMOVE_ITEM DOC_SRC \"${PROJECT_SOURCE_DIR}/doc/CMakeLists.txt\")\nstring(REPLACE \"${PROJECT_SOURCE_DIR}/doc\" \"${DOC_SRC_DIR}\" DOC_TARGET \"${DOC_SRC}\")\nfile(COPY ${DOC_SRC} DESTINATION ${DOC_SRC_DIR})\n\nconfigure_file(\"${PROJECT_SOURCE_DIR}/doc/conf.py\" \"${DOC_SRC_DIR}/conf.py\")\n\nlist(APPEND GENERATED_RST \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Output Directories for Tests\nDESCRIPTION: Sets the output directories for compiled test binaries, with different paths for MSVC and other platforms.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n#############################\n# Compiled binaries folders #\n#############################\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/tests)\nif (MSVC)\n    set(TESTS_BINARY_DIR ${CMAKE_BINARY_DIR}/bin/tests/${CMAKE_BUILD_TYPE})\nelse()\n    set(TESTS_BINARY_DIR ${CMAKE_BINARY_DIR}/bin/tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Organizing open62541 Library Components in Solution Folders\nDESCRIPTION: Groups the main open62541 library targets into the 'open62541/lib' folder in the Visual Studio solution.\nSOURCE: https://github.com/open62541/open62541/blob/master/CMakeLists.txt#2025-04-21_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(open62541 PROPERTIES FOLDER \"open62541/lib\")\nset_target_properties(open62541-object PROPERTIES FOLDER \"open62541/lib\")\nset_target_properties(open62541-plugins PROPERTIES FOLDER \"open62541/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory in CMake\nDESCRIPTION: This CMake command sets the runtime output directory for executables to the `bin` subdirectory within the build directory. This ensures that the compiled `ua2json` executable will be placed in the specified location.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/ua2json/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n```\n\n----------------------------------------\n\nTITLE: Commit Message Format Example in Text\nDESCRIPTION: Shows the standardized format for commit messages following the Conventional Commits specification, including header, body and footer structure.\nSOURCE: https://github.com/open62541/open62541/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<type>(<scope>): <subject>\\n<BLANK LINE>\\n<body>\\n<BLANK LINE>\\n<footer>\n```\n\n----------------------------------------\n\nTITLE: Defining documentation build targets in CMake\nDESCRIPTION: Creates custom targets for building LaTeX source files, PDF documentation, and HTML documentation using Sphinx. Sets dependencies and build properties for these targets to ensure proper build ordering.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Doc targets\n\nadd_custom_target(doc_latex ${SPHINX_EXECUTABLE}\n                  -b latex \"${DOC_SRC_DIR}\" \"${DOC_LATEX_DIR}\"\n                  DEPENDS ${GENERATED_RST} ${DOC_TARGET}\n                  COMMENT \"Building LaTeX sources for documentation with Sphinx\")\nadd_dependencies(doc_latex open62541)\n\nadd_custom_target(doc_pdf ${PDFLATEX_COMPILER} -interaction=batchmode \"open62541.tex\"\n                  WORKING_DIRECTORY ${DOC_LATEX_DIR}\n                  # compile it twice so that the contents pages are correct\n                  COMMAND ${PDFLATEX_COMPILER} -interaction=batchmode \"open62541.tex\"\n                  DEPENDS ${PDFLATEX_COMPILER}\n                  COMMENT \"Generating PDF documentation from LaTeX sources\")\nadd_dependencies(doc_pdf doc_latex)\n\nadd_custom_target(doc ${SPHINX_EXECUTABLE}\n                  -b html \"${DOC_SRC_DIR}\" \"${DOC_HTML_DIR}\"\n                  DEPENDS ${GENERATED_RST} ${DOC_TARGET}\n                  COMMENT \"Building HTML documentation with Sphinx\")\nadd_dependencies(doc open62541)\n\nset_target_properties(doc doc_latex doc_pdf PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD TRUE)\nset_target_properties(doc doc_latex doc_pdf PROPERTIES FOLDER \"open62541/doc\")\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with reStructuredText Table of Contents\nDESCRIPTION: This snippet defines the documentation structure for the open62541 project using reStructuredText's toctree directive. It lists all the documentation pages to be included in the navigation.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/toc.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n\n   index\n   core_concepts\n   building\n   types\n   server\n   client\n   pubsub\n   tutorials\n   common\n   util\n   nodeset_compiler\n   statuscodes\n   plugin\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Runtime Output Directory\nDESCRIPTION: Configures the output directory for executable files built by CMake to be in a 'bin' subdirectory of the build directory.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/tpm_keystore/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n```\n\n----------------------------------------\n\nTITLE: Setting up documentation directories in CMake for open62541\nDESCRIPTION: Configures the directory structure for documentation output including LaTeX documentation, HTML documentation, and source files.\nSOURCE: https://github.com/open62541/open62541/blob/master/doc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Sphinx)\nfind_package(LATEX)\n\nset(DOC_LATEX_DIR ${PROJECT_BINARY_DIR}/doc_latex)\nset(DOC_HTML_DIR ${PROJECT_BINARY_DIR}/doc)\nset(DOC_SRC_DIR ${PROJECT_BINARY_DIR}/doc_src)\n\nmake_directory(${DOC_SRC_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr OPC UA Server with open62541 in CMake\nDESCRIPTION: This CMake script sets up a Zephyr RTOS-based OPC UA server project. It configures the minimum CMake version, defines the Python interpreter path, adds extra Zephyr modules, and links the application with the open62541 library.\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/zephyr/server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nproject(server)\n\n# set(CMAKE_OBJCOPY /usr/bin/arm-linux-gnueabihf-objcopy)\nset(Python3_EXECUTABLE \"/usr/bin/python3\" CACHE STRING \"\" FORCE)\nset(EXTRA_ZEPHYR_MODULES ${CMAKE_CURRENT_SOURCE_DIR}/../../../arch)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\ntarget_sources(app PRIVATE src/main.c)\ntarget_link_libraries(app PUBLIC open62541)\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key for Security Vulnerability Reporting\nDESCRIPTION: Public PGP key block for secure encrypted communication with the open62541 security team for vulnerability disclosure\nSOURCE: https://github.com/open62541/open62541/blob/master/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\\n\\nmDMEZyvNHBYJKwYBBAHaRw8BAQdAVVciLHk9qEu38ZmqGfUuB9SD7lvw6Z8lTm6G\\nH2zqh4O0NG9wZW42MjU0MSBUZWFtIDxvcGVuNjI1NDEtc2VjdXJpdHlAZ29vZ2xl\\nZ3JvdXBzLmNvbT6ImQQTFgoAQRYhBMlp8zR7pjG9VoaVFK5VKNbXA7F8BQJnK80c\\nAhsDBQkFoxmUBQsJCAcCAiICBhUKCQgLAgQWAgMBAh4HAheAAAoJEK5VKNbXA7F8\\nvLcBAIC7/R5gZrqXm+js+tQrMgua/7Rr8h2CGC8GVogwLmYBAQDF9XzoZMBPQu5j\\nVtudpc3lzQy4g8qzIvtwTaQe4KOhCLg4BGcrzRwSCisGAQQBl1UBBQEBB0Acmd51\\nrRZ3697if50xOUeu2tdHjOWMn+P3Ga5/2ZIGKwMBCAeIfgQYFgoAJhYhBMlp8zR7\\npjG9VoaVFK5VKNbXA7F8BQJnK80cAhsMBQkFoxmUAAoJEK5VKNbXA7F8y4UA/RSe\\nNKKvTqtDayyNn6kRKLnuBAPlXTjvpMARcSMFe9APAQCdu22yS4KB3cGBHoXMSTwO\\ntfp1v8HATMXKB65FmujmBg==\\n=Juz6\\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: OPC UA Data Types Enumeration\nDESCRIPTION: A comprehensive listing of data types and structures used in the Open62541 OPC UA server implementation. These types are used for handling subscriptions, monitoring items, filtering data, and managing event notifications.\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/schema/datatypes_subscriptions.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSubscriptionAcknowledgement\nFilterOperator\nContentFilterElement\nContentFilter\nContentFilterElementResult\nContentFilterResult\nEventFilterResult\nDeadbandType\nAggregateConfiguration\nAggregateFilter\nMonitoringMode\nMonitoringParameters\nCreateMonitoredItemsRequest\nMonitoredItemCreateRequest\nMonitoredItemCreateResult\nCreateMonitoredItemsResponse\nMonitoredItemModifyRequest\nModifyMonitoredItemsRequest\nMonitoredItemModifyResult\nModifyMonitoredItemsResponse\nSetMonitoringModeRequest\nSetMonitoringModeResponse\nDataChangeTrigger\nSetTriggeringRequest\nSetTriggeringResponse\nDeleteMonitoredItemsRequest\nDeleteMonitoredItemsResponse\nCreateSubscriptionRequest\nCreateSubscriptionResponse\nModifySubscriptionRequest\nModifySubscriptionResponse\nSetPublishingModeRequest\nSetPublishingModeResponse\nDataChangeFilter\nEventFilter\nFilterOperand\nElementOperand\nLiteralOperand\nAttributeOperand\nSimpleAttributeOperand\nEventNotificationList\nEventFieldList\nDataChangeNotification\nNotificationMessage\nMonitoredItemNotification\nStatusChangeNotification\nPublishRequest\nPublishResponse\nRepublishRequest\nRepublishResponse\nDeleteSubscriptionsRequest\nDeleteSubscriptionsResponse\nTransferResult\nTransferSubscriptionsRequest\nTransferSubscriptionsResponse\nSetTriggeringRequest\nSetTriggeringResponse\nTimeZoneDataType\n```\n\n----------------------------------------\n\nTITLE: Creating Verbose Test Target for Detailed Output\nDESCRIPTION: Adds a custom target for running tests with verbose output, making it easier to debug failing tests.\nSOURCE: https://github.com/open62541/open62541/blob/master/tests/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(test-verbose COMMAND ${CMAKE_CTEST_COMMAND} --verbose)\n```\n\n----------------------------------------\n\nTITLE: Server Application Launch Command\nDESCRIPTION: Command to run the OPC UA server with TPM2 encryption\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/encryption/README_client_server_tpm_keystore.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/examples/server_encryption_tpm_keystore ../tools/tpm_keystore/server_cert_sealed.der ../tools/tpm_keystore/server_key_sealed.der 1 123456 tpm_encrypt_key\n```\n\n----------------------------------------\n\nTITLE: Binary Encoding Conversion Command\nDESCRIPTION: Bash command to decode a JSON-encoded Variant to its binary OPC UA representation using ua2json and xxd for hexadecimal output\nSOURCE: https://github.com/open62541/open62541/blob/master/tools/ua2json/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cat variant.json | ua2json decode -t Variant | xxd\n00000000: c308 0000 0001 0203 0405 0607 0802 0000  ................\n00000010: 0002 0000 0004 0000 00                   .........\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for TPM2\nDESCRIPTION: Command to install required system packages for TPM2 integration\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/encryption/README_client_server_tpm_keystore.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt -y install acl autoconf autoconf-archive automake build-essential cmake doxygen gcc git iproute2 libcurl4-openssl-dev libjson-c-dev libcmocka0 libcmocka-dev libglib2.0-dev libini-config-dev libmbedtls-dev libssl-dev libsqlite3-dev libtool libyaml-dev pkg-config procps python3-pip sqlite3 udev uthash-dev\n```\n\n----------------------------------------\n\nTITLE: Enabling All PubSub Components in Open62541 (C)\nDESCRIPTION: A new method UA_Server_enableAllPubSubComponents has been added to simplify enabling the entire system of configured PubSub components.\nSOURCE: https://github.com/open62541/open62541/blob/master/CHANGES.md#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUA_Server_enableAllPubSubComponents\n```\n\n----------------------------------------\n\nTITLE: TPM2 Certificate Encryption\nDESCRIPTION: C program compilation command for TPM2 certificate encryption tool\nSOURCE: https://github.com/open62541/open62541/blob/master/examples/encryption/README_client_server_tpm_keystore.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcc cert_encrypt_tpm.c -o cert_encrypt_tpm -ltpm2_pkcs11 -lssl -lcrypto\n```"
  }
]