[
  {
    "owner": "gohugoio",
    "repo": "hugo",
    "content": "TITLE: Creating and Configuring a New Hugo Site\nDESCRIPTION: Series of commands to create a new Hugo site with the Ananke theme, initialize Git, and start the Hugo development server.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/quick-start.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhugo new site quickstart\ncd quickstart\ngit init\ngit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke\necho \"theme = 'ananke'\" >> hugo.toml\nhugo server\n```\n\n----------------------------------------\n\nTITLE: Creating a New Hugo Site\nDESCRIPTION: This command creates a new Hugo site with a default directory structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/directory-structure.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo new site my-site\n```\n\n----------------------------------------\n\nTITLE: Structuring Hugo Layouts Directory (Text)\nDESCRIPTION: Illustrates the typical directory and file organization for Hugo templates. There are no runtime dependencies, but knowledge of Hugo's project structure and templating system is required. The structure example displays the relative path for key directories and important HTML template files, including base, partial, section, shortcode, and content views. This is a guideline for developers setting up file/folder structure in Hugo sites.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\\n├── _default/\\n│   ├── _markup/\\n│   │   ├── render-image.html   <-- render hook\\n│   │   └── render-link.html    <-- render hook\\n│   ├── baseof.html\\n│   ├── home.html\\n│   ├── section.html\\n│   ├── single.html\\n│   ├── taxonomy.html\\n│   └── term.html\\n├── articles/\\n│   └── card.html               <-- content view\\n├── partials/\\n│   ├── footer.html\\n│   └── header.html\\n└── shortcodes/\\n    ├── audio.html\\n    └── video.html\n```\n\n----------------------------------------\n\nTITLE: Example Front Matter and Markdown Content\nDESCRIPTION: Sample content for a new Hugo post, including front matter and Markdown body text.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/quick-start.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n+++\ntitle = 'My First Post'\ndate = 2024-01-14T07:07:07+01:00\ndraft = true\n+++\n## Introduction\n\nThis is **bold** text, and this is *emphasized* text.\n\nVisit the [Hugo](https://gohugo.io) website!\n```\n\n----------------------------------------\n\nTITLE: Including Hugo's Embedded Templates\nDESCRIPTION: Shows how to include Hugo's built-in embedded templates using the template function. This allows for including standard functionality like Google Analytics, Open Graph tags, and more.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_21\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/google_analytics.html\" . }}\n{{ template \"_internal/opengraph\" . }}\n{{ template \"_internal/pagination.html\" . }}\n{{ template \"_internal/schema.html\" . }}\n{{ template \"_internal/twitter_cards.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Paginated List with Paginator Method - Hugo Go HTML Template\nDESCRIPTION: This snippet uses Hugo's Paginator to page through the current page collection, outputting each entry's title and link. No manual page size is specified; it uses default site configuration for pagination. At the end, Hugo's internal pagination control template is invoked for navigation UI. It relies on Hugo’s built-in Paginator and template functions, and outputs HTML sections for each page item and navigation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ template \"_internal/pagination.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Hugo Deployment\nDESCRIPTION: A complete GitHub Actions workflow configuration for building and deploying a Hugo site to GitHub Pages. It includes steps for installing Hugo, setting up the environment, building the site, and deploying to Pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-github-pages/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Sample workflow for building and deploying a Hugo site to GitHub Pages\nname: Deploy Hugo site to Pages\n\non:\n  # Runs on pushes targeting the default branch\n  push:\n    branches:\n      - main\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\n# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.\n# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: false\n\n# Default to bash\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  # Build job\n  build:\n    runs-on: ubuntu-latest\n    env:\n      HUGO_VERSION: 0.145.0\n      HUGO_ENVIRONMENT: production\n      TZ: America/Los_Angeles\n    steps:\n      - name: Install Hugo CLI\n        run: |\n          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\\n          && sudo dpkg -i ${{ runner.temp }}/hugo.deb\n      - name: Install Dart Sass\n        run: sudo snap install dart-sass\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          submodules: recursive\n          fetch-depth: 0\n      - name: Setup Pages\n        id: pages\n        uses: actions/configure-pages@v5\n      - name: Install Node.js dependencies\n        run: \"[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true\"\n      - name: Cache Restore\n        id: cache-restore\n        uses: actions/cache/restore@v4\n        with:\n          path: |\n            ${{ runner.temp }}/hugo_cache\n          key: hugo-${{ github.run_id }}\n          restore-keys:\n            hugo-\n      - name: Build with Hugo\n        run: |\n          hugo \\\n            --gc \\\n            --minify \\\n            --baseURL \"${{ steps.pages.outputs.base_url }}/\" \\\n            --cacheDir \"${{ runner.temp }}/hugo_cache\"\n      - name: Cache Save\n        id: cache-save\n        uses: actions/cache/save@v4\n        with:\n          path: |\n            ${{ runner.temp }}/hugo_cache\n          key: ${{ steps.cache-restore.outputs.cache-primary-key }}\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: ./public\n\n  # Deployment job\n  deploy:\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n----------------------------------------\n\nTITLE: Configuring Syntax Highlighted Code Fences in Hugo (Markdown)\nDESCRIPTION: This snippet demonstrates how to write a Markdown fenced code block in Hugo that triggers syntax highlighting via the built-in mechanism. It specifies the programming language (go) and configuration options such as line numbering and highlighted lines. Requires Hugo site with syntax highlighting enabled and may need proper configuration for options in the site's markup settings. Inputs are code written inside a Markdown code fence, annotated with language and options. The output is a highlighted code block when the page is rendered.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/syntax-highlighting.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```go {linenos=inline hl_lines=[3,\"6-8\"] style=emacs}\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    for i := 0; i < 3; i++ {\n        fmt.Println(\"Value of i:\", i)\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Indexing Slices and Maps in Hugo Templates (go-html-template)\nDESCRIPTION: Shows how to access elements of a slice or map variable within a Hugo template using the 'index' function. The first example retrieves 'baz' from a slice by index, and the second retrieves 'baz' from a map by key. Inputs are manually created slices or maps, and the outputs are static string values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_12\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $slice := slice \\\"foo\\\" \\\"bar\\\" \\\"baz\\\" }}\\n{{ index $slice 2 }} → baz\\n\\n{{ $map := dict \\\"a\\\" \\\"foo\\\" \\\"b\\\" \\\"bar\\\" \\\"c\\\" \\\"baz\\\" }}\\n{{ index $map \\\"c\\\" }} → baz\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing Extended/Deploy Hugo Edition using Go\nDESCRIPTION: Compiles and installs the extended/deploy edition of Hugo, including both extended features (like Sass/SCSS) and deployment capabilities (e.g., Azure, GCP). Requires Go (1.23.0+), a C compiler, and `CGO_ENABLED=1`. The build tags '-tags extended,withdeploy' enable the necessary features. Run from the Hugo project root.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended,withdeploy\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Template with Blocks in Hugo (Go HTML Template)\nDESCRIPTION: Defines a base template (typically placed in layouts/_default/baseof.html) using the \"block\" keyword in Go HTML Template. It establishes global page structure, including placeholders for title, main content, and footer, which can be selectively overridden in derived templates. Prerequisite: Hugo project with baseof.html; uses Hugo's templating features. Input context is the current page data (.), output is rendered HTML with overridable content areas. Limitations: Only Hugo template and block syntax permitted inside designated areas.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/base.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta charset=\\\"utf-8\\\">\\n    <title>{{ block \\\"title\\\" . }}\\n      <!-- Blocks may include default content. -->\\n      {{ .Site.Title }}\\n    {{ end }}</title>\\n  </head>\\n  <body>\\n    <!-- Code that all your templates share, like a header -->\\n    {{ block \\\"main\\\" . }}\\n      <!-- The part of the page that begins to differ between templates -->\\n    {{ end }}\\n    {{ block \\\"footer\\\" . }}\\n    <!-- More shared code, perhaps a footer but that can be overridden if need be in  -->\\n    {{ end }}\\n  </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Portable section comparison using MainSections\nDESCRIPTION: Example showing how theme authors can avoid hardcoding section names by using the MainSections method with the 'in' operator.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_14\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where .Site.RegularPages \"Section\" \"in\" .Site.MainSections }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Content Directories in Hugo TOML\nDESCRIPTION: Demonstrates setting up English and French languages in Hugo's configuration file. It specifies their respective content directories (`content/english`, `content/french`) using the `contentDir` parameter, enabling the 'Translation by content directory' method. Language weights and names are also defined.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\nlanguages:\n  en:\n    weight: 10\n    languageName: \"English\"\n    contentDir: \"content/english\"\n  fr:\n    weight: 20\n    languageName: \"Français\"\n    contentDir: \"content/french\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Parameter in Hugo Templates (Ascending)\nDESCRIPTION: This Go Hugo Template snippet demonstrates grouping a collection of pages (`.Pages`) by the front matter parameter 'color'. It uses the `GroupByParam` method without a sort order specified, resulting in groups sorted in ascending order by the parameter value (`.Key`). The outer `range` iterates through each group, and the inner `range` iterates through the pages within that group, displaying their link titles and relative permalinks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByParam.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByParam \"color\" }}\n  <p>{{ .Key | title }}</p>\n  <ul>\n    {{ range .Pages }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Hugo Site Configuration in TOML\nDESCRIPTION: Demonstrates the essential configuration settings (`baseURL`, `languageCode`, `title`) required in a Hugo configuration file (e.g., `hugo.toml`) for a basic site setup. These settings define the site's root URL, default language, and main title.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = 'https://example.org/'\nlanguageCode = 'en-us'\ntitle = 'My New Hugo Site'\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Using Homebrew - Shell\nDESCRIPTION: Installs the extended edition of the Hugo static site generator on macOS or Linux using the Homebrew package manager. Requires that Homebrew is already installed on the system. The command fetches and installs Hugo and its dependencies automatically. No additional parameters are needed; just run the command in a terminal. The expected output is a fully installed Hugo executable accessible from the command line. Only works on systems where Homebrew is supported.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/installation/homebrew.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install hugo\n\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Installation\nDESCRIPTION: Verifies the Hugo installation by displaying the version information.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/usage.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo version\n```\n\nLANGUAGE: text\nCODE:\n```\nhugo v0.123.0-3c8a4713908e48e6523f058ca126710397aa4ed5+extended linux/amd64 BuildDate=2024-02-19T16:32:38Z VendorInfo=gohugoio\n```\n\n----------------------------------------\n\nTITLE: Using Go Pipes for Asset Processing in Hugo\nDESCRIPTION: Example of using Go Pipes for improved readability in Hugo templates. This snippet demonstrates how to get a SASS file, compile it, minify it, and add a fingerprint for cache busting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-pipes/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $style := resources.Get \"sass/main.scss\" | css.Sass | resources.Minify | resources.Fingerprint }}\n<link rel=\"stylesheet\" href=\"{{ $style.Permalink }}\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Parameters in Hugo Templates\nDESCRIPTION: Shows how to access custom site parameters defined in the Hugo configuration file. The example demonstrates accessing nested parameters and using them for formatting dates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_29\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Params.subtitle }} → The Best Widgets on Earth\n{{ .Site.Params.author.name }} → John Smith\n\n{{ $layout := .Site.Params.layouts.rfc_1123 }}\n{{ .Site.Lastmod.Format $layout }} → Tue, 17 Oct 2023 13:21:02 PDT\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Hugo Site using Shell\nDESCRIPTION: This command uses the Hugo CLI (`hugo`) to scaffold a new website project named `myblog` in the current directory. It creates the basic directory structure and configuration files required for a Hugo site. Requires the Hugo executable to be installed and in the system's PATH.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo new site myblog\n```\n\n----------------------------------------\n\nTITLE: Accessing EXIF Metadata from an Image in Hugo Go Templates\nDESCRIPTION: Accesses the EXIF metadata of an image resource (`$image`) using the `.Exif` method. A `with` block is used to safely handle images without EXIF data. It demonstrates accessing the Date, Lat/Long, and iterating through all available Tags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_17\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with $image.Exif }}\n  Date: {{ .Date }}\n  Lat/Long: {{ .Lat }}/{{ .Long }}\n  Tags:\n  {{ range $k, $v := .Tags }}\n    TAG: {{ $k }}: {{ $v }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Hugo Pages with collections.Group (or group alias)\nDESCRIPTION: This Go HTML Template snippet demonstrates how to use the `group` function (an alias for `collections.Group`) to categorize Hugo pages. It first takes the first 10 regular pages and assigns them to a group with the key \"New\". It then takes the last 10 regular pages and assigns them to a group with the key \"Old\". Both groups are combined into a single slice called `$groups`. The template then iterates through this slice, printing each group's key (e.g., \"New\", \"Old\") as a heading, followed by an unordered list of pages within that group, displaying each page's title, link, and formatted date. This requires access to Hugo's page collections (`.Site.RegularPages`) and standard template functions like `first`, `last`, `slice`, and page variables.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Group.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $new := .Site.RegularPages | first 10 | group \"New\" }}\n{{ $old := .Site.RegularPages | last 10 | group \"Old\" }}\n{{ $groups := slice $new $old }}\n{{ range $groups }}\n  <h3>{{ .Key }}{{/* Prints \"New\", \"Old\" */}}</h3>\n  <ul>\n    {{ range .Pages }}\n      <li>\n        <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n        <div class=\"meta\">{{ .Date.Format \"Mon, Jan 2, 2006\" }}</div>\n      </li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Method Equivalence When Context Is Page in Hugo (go-html-template)\nDESCRIPTION: Further demonstrates that '.Title' can be accessed directly when the context is a 'Page' object, producing the same result as accessing via '.Page.Title'. No special prerequisites.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_16\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Title }} → My Site Title\\n{{ .Title }} → My Page Title\n```\n\n----------------------------------------\n\nTITLE: Defining a Hugo List Item (li) Content View Template\nDESCRIPTION: Shows the Go HTML template code for an `li.html` content view (`layouts/_default/li.html`). This template is intended for rendering a page as a compact list item, displaying only the linked page title (`.LinkTitle`) and its date within `<li>` tags. It's called using `{{ .Render \"li\" }}` from another template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/content-view.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<li>\n  <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n  <div class=\"meta\">{{ .Date.Format \"Mon, Jan 2, 2006\" }}</div>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Specifying Dimensions for Image Processing Methods in Hugo Go Templates\nDESCRIPTION: Provides examples of the dimension strings used with various image processing methods (`.Resize`, `.Fit`, `.Fill`, `.Crop`) on an image resource (`$image`). Demonstrates width-only ('600x'), height-only ('x400'), and width-and-height ('600x400') specifications.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_19\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := $image.Resize \"600x\" }}\n{{ $image := $image.Resize \"x400\" }}\n{{ $image := $image.Resize \"600x400\" }}\n{{ $image := $image.Fit \"600x400\" }}\n{{ $image := $image.Fill \"600x400\" }}\n{{ $image := $image.Crop \"600x400\" }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Blocks in Hugo Templates\nDESCRIPTION: Shows how to create conditional blocks using if, else if, and else statements in Hugo templates. The example compares a variable against different values and executes different code blocks accordingly.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_23\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := 42 }}\n{{ if eq $var 6 }}\n  {{ print \"var is 6\" }}\n{{ else if eq $var 7 }}\n  {{ print \"var is 7\" }}\n{{ else if eq $var 42 }}\n  {{ print \"var is 42\" }}\n{{ else }}\n  {{ print \"var is something else\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using a Value-Returning Hugo Partial in Go HTML Template\nDESCRIPTION: Demonstrates how to call a value-returning partial (`GetFeatured.html`) within another template (`layouts/index.html`). The returned value (a list of featured pages) is then iterated over using `range`. The number `5` is passed as the context to the partial.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{/* layouts/index.html */}}\n{{ range partial \"GetFeatured.html\" 5 }}\n  [...]\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating a List of Translations in Hugo Go HTML Template\nDESCRIPTION: Provides a Go HTML template snippet (`layouts/partials/i18nlist.html`) that checks if a page is translated (`.IsTranslated`) and then iterates through its `.Translations`. It generates an unordered list of links to each available translation, displaying the language code, link title, and word count (if it's a page), using the `i18n` function for labels.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if .IsTranslated }}\n<h4>{{ i18n \"translations\" }}</h4>\n<ul>\n  {{ range .Translations }}\n  <li>\n    <a href=\"{{ .RelPermalink }}\">{{ .Language.Lang }}: {{ .LinkTitle }}{{ if .IsPage }} ({{ i18n \"wordCount\" . }}){{ end }}</a>\n  </li>\n  {{ end }}\n</ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Hugo Render Hooks Lookup Order Example\nDESCRIPTION: An example of the template lookup order for render hooks, demonstrating how to create different hooks based on page type, kind, language, and output format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\n├── _default/\n│   └── _markup/\n│       ├── render-link.html\n│       └── render-link.rss.xml\n├── books/\n│   └── _markup/\n│       ├── render-link.html\n│       └── render-link.rss.xml\n└── films/\n    └── _markup/\n        ├── render-link.html\n        └── render-link.rss.xml\n```\n\n----------------------------------------\n\nTITLE: Module Import with Hugo's Asset Virtual File System (JavaScript)\nDESCRIPTION: These JavaScript snippets illustrate various import syntaxes as supported by Hugo's js.Build and its virtualized assets directory. Utilizing ES build's resolver and Hugo's module system, imports like 'my/module', './lib', and specific assets with extensions resolve to well-defined files under 'assets/'. Dependencies: modules must exist in the Hugo assets directory, import specifiers must match asset file structure. These patterns enable modular, layered JS development within Hugo sites.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Build.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { hello } from 'my/module';\n\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { hello3 } from 'my/module/hello3';\n\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { hello4 } from './lib';\n\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as data from 'my/module/data.json';\n\n```\n\n----------------------------------------\n\nTITLE: Output Directory Structure for Multilingual Hugo Site pre-v0.123.0 (text)\nDESCRIPTION: ASCII diagram showing how Hugo duplicated page resources for each language under 'public/' prior to v0.123.0, giving insight into legacy resource handling. Illustrates inefficiencies that v0.123.0 aims to solve.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\npublic/\\n├── de/\\n│   ├── my-bundle/\\n│   │   ├── a.jpg     <-- shared page resource\\n│   │   ├── b.jpg     <-- shared page resource\\n│   │   ├── c.de.jpg\\n│   │   └── index.html\\n│   └── index.html\\n├── en/\\n│   ├── my-bundle/\\n│   │   ├── a.jpg     <-- shared page resource (duplicate)\\n│   │   ├── b.jpg     <-- shared page resource (duplicate)\\n│   │   ├── c.en.jpg\\n│   │   └── index.html\\n│   └── index.html\\n└── index.html\\n\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Hugo Content Adapters (Text)\nDESCRIPTION: Demonstrates the expected content directory structure for Hugo sites using content adapters. Illustrates how special files like _content.gotmpl reside in individual sections, enabling dynamic content generation from within specific directories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── articles/\\n│   ├── _index.md\\n│   ├── article-1.md\\n│   └── article-2.md\\n├── books/\\n│   ├── _content.gotmpl  <-- content adapter\\n│   └── _index.md\\n└── films/\\n    ├── _content.gotmpl  <-- content adapter\\n    └── _index.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Matter in TOML for Hugo Content Files - TOML\nDESCRIPTION: This TOML code block demonstrates a typical front matter setup for Hugo, including required fields like title, date, draft status, weight, and a custom parameter group under 'params'. Dependency: Hugo static site generator (v0.123.0+ for params). Key parameters include 'title' (string), 'date' (datetime), 'draft' (bool), 'weight' (int), and 'params' (table for custom metadata such as 'author'). Inputs are the file-level metadata; outputs affect how Hugo renders the page and makes parameters available in templates. Limitations: TOML syntax must be correct and supported fields must be used appropriately.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/front-matter.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Example'\\ndate = 2024-02-02T04:14:54-08:00\\ndraft = false\\nweight = 10\\n[params]\\nauthor = 'John Smith'\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Processing Shortcode Template (Go HTML Template)\nDESCRIPTION: Defines an `image.html` shortcode template that finds an image page resource, processes it, and generates an `<img>` tag. It uses the `path` parameter to get the image via `.Page.Resources.Get`, resizes it to the specified `width` and converts to WebP format using `.Process`, and includes `width`, `height`, and `alt` attributes (from the `alt` parameter). The `with` statement handles context changes, and `$` accesses the top-level shortcode context to retrieve parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- with .Page.Resources.Get (.Get \"path\") }}\n  {{- with .Process (printf \"resize %dx wepb\" ($.Get \"width\")) -}}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"{{ $.Get \"alt\" }}\">\n  {{- end }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Glossary List Page with Descendant Content - Go HTML Template\nDESCRIPTION: This Go HTML Template renders a <dl>-based glossary by iterating over the .Pages collection to list each term's title and content. Requires usage in a Hugo list template (e.g., for '/glossary'), with descendant pages containing the glossary terms. Outputs HTML <dt> (term) and <dd> (definition) elements for each glossary page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/build-options.md#2025-04-23_snippet_6\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n<dl>\\n  {{ range .Pages }}\\n    <dt>{{ .Title }}</dt>\\n    <dd>{{ .Content }}</dd>\\n  {{ end }}\\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Including Next-and-Prev Method Documentation - Hugo Go Template\nDESCRIPTION: This snippet demonstrates the inclusion of shared documentation or example usage for the Next and Prev methods on Hugo pages using an include directive within a Go Template. The included file (next-and-prev.md) likely provides additional context or sample code for retrieving the next or previous page in a collection. This approach requires the referenced include file to exist in the designated path, and is intended for enhancing documentation pages within Hugo's documentation system. Inputs are the relative path to the include file, and output is the rendered content within the documentation page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/Next.md#2025-04-23_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{% include \"/_common/methods/pages/next-and-prev.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Parameters in Hugo Templates\nDESCRIPTION: Demonstrates how to access custom page parameters defined in the front matter of a content file. The example shows how to access both standard and nested custom parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_30\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Params.display_related }} → true\n{{ .Params.author.email }} → jsmith@example.org\n{{ .Params.author.name }} → John Smith\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Hugo Extended Release using Go Install\nDESCRIPTION: Command to download, compile, and install the latest tagged release of the Hugo extended edition directly from the official GitHub repository using `go install`. Requires Go (1.23.0+), a C compiler, and `CGO_ENABLED=1`. The '@latest' suffix specifies the latest release version.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Conditions with with in Hugo Templates\nDESCRIPTION: Demonstrates how to test multiple conditions using with and else with statements in Hugo templates. The example shows how to check multiple variables sequentially and execute code based on their truthiness.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_28\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $v1 := 0 }}\n{{ $v2 := 42 }}\n{{ with $v1 }}\n  {{ . }}\n{{ else with $v2 }}\n  {{ . }} → 42\n{{ else }}\n  {{ print \"v1 and v2 are falsy\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Computing Complement with Page Collections (Hugo, Go HTML Template)\nDESCRIPTION: This code demonstrates using the 'complement' function to filter out unwanted content types from a collection of site pages, such as excluding 'blog' and 'faqs' content. It uses 'where' to build $blog and $faqs collections, then applies a pipeline to list all remaining pages, rendering links in HTML. The snippet relies on Hugo's built-in variables ('site.RegularPages'), 'where', and 'complement' functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Complement.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $blog := where site.RegularPages \"Type\" \"blog\" }}\\n{{ $faqs := where site.RegularPages \"Type\" \"faqs\" }}\\n{{ range site.RegularPages | complement $blog $faqs }}\\n  <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing Extended Hugo Edition using Go\nDESCRIPTION: Command to compile and install the extended edition of Hugo, enabling features like Sass/SCSS processing. Requires Go (1.23.0+), a C compiler (GCC or Clang), and setting the CGO_ENABLED environment variable to 1. The '-tags extended' flag instructs Go to include extended features during the build. Run from the Hugo project root.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended\n```\n\n----------------------------------------\n\nTITLE: String Piping and Function Chaining in Hugo Template (go-html-template)\nDESCRIPTION: Shows equivalent methods of passing arguments to functions using both direct calls and the pipeline ('|') syntax. Demonstrates converting a string to lowercase, trimming suffixes, and arithmetic pipelines. Requires Hugo templating with the 'strings' and arithmetic functions enabled. Consistently produces identical output regardless of the syntax used.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.ToLower \\\"Hugo\\\" }} → hugo\\n{{ \\\"Hugo\\\" | strings.ToLower }} → hugo\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.TrimSuffix \\\"o\\\" (strings.ToLower \\\"Hugo\\\") }} → hug\\n{{ \\\"Hugo\\\" | strings.ToLower | strings.TrimSuffix \\\"o\\\" }} → hug\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ mul 6 (add 2 5) }} → 42\\n{{ 5 | add 2 | mul 6 }} → 42\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Variables in Hugo HTML Template (go-html-template)\nDESCRIPTION: Demonstrates how to declare and use variables within a Hugo HTML template to render values and computed expressions. Requires Hugo and uses built-in template functions such as 'mul' for arithmetic operations. Variables $v1 and $v2 are set and their product is displayed within paragraph tags; all values are rendered using Hugo's templating syntax.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $v1 := 6 }}\\n{{ $v2 := 7 }}\\n<p>The product of {{ $v1 }} and {{ $v2 }} is {{ mul $v1 $v2 }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Hugo Content Directory to URL Mapping (Text)\nDESCRIPTION: This snippet demonstrates the file and directory structure under the 'content' directory in a Hugo project. It shows how markdown files are mapped to output URLs using tree diagrams and inline comments. The purpose is to help users visualize section nesting and the resultant site URLs, and there are no dependencies or executable components.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/organization/index.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\\n└── content\\n    └── about\\n    |   └── index.md  // <- https://example.org/about/\\n    ├── posts\\n    |   ├── firstpost.md   // <- https://example.org/posts/firstpost/\\n    |   ├── happy\\n    |   |   └── ness.md  // <- https://example.org/posts/happy/ness/\\n    |   └── secondpost.md  // <- https://example.org/posts/secondpost/\\n    └── quote\\n        ├── first.md       // <- https://example.org/quote/first/\\n        └── second.md      // <- https://example.org/quote/second/\n```\n\n----------------------------------------\n\nTITLE: Default Hugo Site Directory Structure\nDESCRIPTION: This shows the default directory structure created when initializing a new Hugo site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/directory-structure.md#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nmy-site/\n├── archetypes/\n│   └── default.md\n├── assets/\n├── content/\n├── data/\n├── i18n/\n├── layouts/\n├── static/\n├── themes/\n└── hugo.toml         <-- site configuration\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output for Foo/Bar/Baz Context Example (html)\nDESCRIPTION: Provides the rendered HTML output corresponding to a Hugo template that iterates and changes context, displaying the page title and a list of string items. There are no dependencies; output is exemplary of what Hugo produces, with hard-coded title and values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2>My Page Title</h2>\\n<p>foo</p>\\n<p>bar</p>\\n<p>baz</p>\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output for Dollar Root Context Access Example (html)\nDESCRIPTION: Displays the rendered output of a Hugo template using dollar-sign context reference, combining the Page's title and an inner value. The output is static HTML generated by the template with exemplary content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>My Page Title - foo</p>\n```\n\n----------------------------------------\n\nTITLE: Handling Errors for Remote Image Resources in Hugo Go Templates\nDESCRIPTION: Attempts to fetch a remote image using `try (resources.GetRemote $url)`. The `with` block checks the result. If `.Err` is set, it logs an error using `errorf`. If `.Value` is set (success), it renders the image. Otherwise, a generic error is logged. This provides robust error handling for remote resources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://gohugo.io/img/hugo-logo.png\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\">\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Content Archetype with Go Template - TOML\nDESCRIPTION: Defines the canonical archetype template in TOML format for new Hugo content. Employs Go template actions such as 'replace' and '.Date' to dynamically fill the title and date fields at content creation. Requires Hugo's templating system and presumes context objects (like .File and .Date) are available during the generation. Key parameters: .File.ContentBaseName, .Date, outputs a TOML file that seeds front matter; expects to be saved as archetypes/default.md. Limitations: variables are only evaluated once during content generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = '{{ replace .File.ContentBaseName `-` ` ` | title }}'\ndate = '{{ .Date }}'\ndraft = true\n\n```\n\n----------------------------------------\n\nTITLE: Basic usage of collections.Where in Hugo templates\nDESCRIPTION: Basic examples showing how to filter pages by section or filter data objects by properties without specifying an operator (defaults to equality).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where .Site.RegularPages \"Section\" \"books\" }}\n{{ $books := where .Site.Data.books \"genres\" \"suspense\" }}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with Autoprefixer\nDESCRIPTION: This JavaScript configuration file for PostCSS sets up Autoprefixer as a plugin. It's typically named postcss.config.js and placed in the root of the Hugo project.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/PostCSS.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Pagination Configuration Example - Hugo TOML/YAML-style\nDESCRIPTION: This snippet shows the configuration block for the 'pagination' section in Hugo's site config. The keys 'disableAliases', 'pagerSize', and 'path' specify whether to generate aliases, how many items per page, and URL structure. Intended to be placed inside config.toml or config.yaml. No executable logic—serves as example config for the documentation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_8\n\nLANGUAGE: hugo\nCODE:\n```\n[pagination]\n  disableAliases = false\n  pagerSize = 2\n  path = 'page'\n```\n\n----------------------------------------\n\nTITLE: Setting the 'slug' Front Matter Field in Hugo (TOML)\nDESCRIPTION: Demonstrates how to override the last segment of a page path in Hugo by setting the 'slug' property in TOML front matter. Required for customizing individual page URLs without affecting section pages. Include 'title' and 'slug' variables; outputs a page with the defined slug in its URL structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'My First Post'\\nslug = 'my-first-post'\n```\n\n----------------------------------------\n\nTITLE: Example Public Directory Structure for Hugo Aliases (Text)\nDESCRIPTION: Shows the generated file tree for aliases created in Hugo. Demonstrates how redirects and canonical files are outputted in the 'public' directory, mapping old URLs to new ones via auto-generated subdirectories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\npublic/\\n\\u251C\\u2500\\u2500 posts/\\n\\u2502   \\u251C\\u2500\\u2500 new-file-name/\\n\\u2502   \\u2502   \\u2514\\u2500\\u2500 index.html\\n\\u2502   \\u251C\\u2500\\u2500 previous-file-name/\\n\\u2502   \\u2502   \\u2514\\u2500\\u2500 index.html\\n\\u2502   \\u2514\\u2500\\u2500 index.html\\n\\u2514\\u2500\\u2500 index.html\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Key with Dynamic String for Hugo resources.GetRemote (Go HTML Template)\nDESCRIPTION: Highlights dynamic cache key override using print and now.Format, useful for daily cache busting or schedule-triggered fetching. Essential for resources that change predictably and need controlled update frequency, leveraging the full flexibility of Hugo template functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://example.org/images/a.jpg\" }}\n{{ $cacheKey := print $url (now.Format \"2006-01-02\") }}\n{{ $opts := dict \"key\" $cacheKey }}\n{{ $resource := resources.GetRemote $url $opts }}\n```\n\n----------------------------------------\n\nTITLE: Combining Pages Using Append for Dynamic Content Lists in Hugo Templates (Go HTML Template)\nDESCRIPTION: This advanced example demonstrates how to merge query results (Pages) using the append function in Hugo. It selects the two most recent press releases and appends four recent articles, then renders the combined result in an HTML list. Dependencies: Hugo's site and where functions. Inputs are content queries; output is a rendered HTML. Useful for blending multiple content types in a single listing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Append.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $p := where site.RegularPages \\\"Type\\\" \\\"press-releases\\\" | first 2 }}\\n{{ $p = $p | append (where site.RegularPages \\\"Type\\\" \\\"articles\\\" | first 4) }}\\n\\n{{ with $p }}\\n  <ul>\\n    {{ range . }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Calling the Image Shortcode with Named Parameters\nDESCRIPTION: Demonstrates how to call the custom `image` shortcode from a Markdown file (`content/example/index.md`) using named parameters. The `path`, `width`, and `alt` arguments are explicitly named.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n{{</* image path=a.jpg width=300 alt=\"A white kitten\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Positional Parameters in Shortcode Template (Go HTML Template)\nDESCRIPTION: Illustrates how to access positional parameters within a Hugo shortcode template (`layouts/shortcodes/image.html`). It uses the `.Get` method with zero-based integer indices (0, 1, 2) to retrieve the values passed positionally and assigns them to descriptive variables (`$path`, `$width`, `$alt`) for better readability and use within the template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $path := .Get 0 }}\n{{ $width := .Get 1 }}\n{{ $alt := .Get 2 }}\n```\n\n----------------------------------------\n\nTITLE: Custom date comparison in collections.Where with TOML dates\nDESCRIPTION: Example showing how to filter event pages based on a custom date field in TOML front matter, comparing with the current time.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $events := where .Site.RegularPages \"Type\" \"events\" }}\n{{ $futureEvents := where $events \"Params.eventDate\" \"gt\" now }}\n```\n\n----------------------------------------\n\nTITLE: Hugo Pipes Caching with Pipe Chain Example\nDESCRIPTION: Demonstrates how Hugo Pipes caches operations based on the entire pipe chain. This example shows getting a JavaScript file, building it, minifying, and fingerprinting it.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-pipes/introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $mainJs := resources.Get \"js/main.js\" | js.Build \"main.js\" | minify | fingerprint }}\n```\n\n----------------------------------------\n\nTITLE: Extending Single Page Rendering with Dates and Taxonomies - Hugo Go HTML Template\nDESCRIPTION: This advanced Hugo template snippet extends the basic single page by also displaying the page's creation date and associated tags. It utilizes Hugo functions such as time.Format for date formatting and .GetTerms for fetching taxonomy terms, while iterating through tag data to output their links. Prerequisites include having taxonomies (\\\"tags\\\") configured in the Hugo site and relevant page front matter. Input data comes from page variables, producing a section with formatted title, date, content, and a sidebar with a list of tags. It is limited to pages where tags metadata is present and will not render the tags aside if none are set.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/single.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \\\"main\\\" }}\n  <section>\n    <h1>{{ .Title }}</h1>\n    {{ with .Date }}\n      {{ $dateMachine := . | time.Format \\\"2006-01-02T15:04:05-07:00\\\" }}\n      {{ $dateHuman := . | time.Format \\\":date_long\\\" }}\n      <time datetime=\\\"{{ $dateMachine }}\\\">{{ $dateHuman }}</time>\n    {{ end }}\n    <article>\n      {{ .Content }}\n    </article>\n    <aside>\n      {{ with .GetTerms \\\"tags\\\" }}\n        <div>{{ (index . 0).Parent.LinkTitle }}</div>\n        <ul>\n          {{ range . }}\n            <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\n          {{ end }}\n        </ul>\n      {{ end }}\n    </aside>\n  </section>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Building a Slice Incrementally in Hugo Templates (Go HTML Template)\nDESCRIPTION: This snippet demonstrates initializing an empty slice and successively appending single and multiple elements (including slices) to it. It showcases the flexibility in building up an array dynamically, useful for various list construction scenarios. No special dependencies; works in any Hugo template context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Append.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice }}\\n{{ $s }} → []\\n\\n{{ $s = $s | append \\\"a\\\" }}\\n{{ $s }} → [a]\\n\\n{{ $s = $s | append \\\"b\\\" \\\"c\\\" }}\\n{{ $s }} → [a b c]\\n\\n{{ $s = $s | append (slice \\\"d\\\" \\\"e\\\") }}\\n{{ $s }} → [a b c d e]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Site Pages in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the .Site.Pages method to loop through all pages in a Hugo site. It creates an HTML structure with links to each page using their relative permalinks and link titles.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Pages.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Querying Remote Resource HTTP Metadata with Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use Hugo's resources.GetRemote function in a Go HTML template to fetch a remote image and extract HTTP response metadata using the Data method. It includes error handling for failed requests and conditional logic to access specific properties such as ContentLength, ContentType, Headers, Status, StatusCode, and TransferEncoding. The example expects Hugo v0.56 or later, requires valid remote URLs, and depends on the try function as well as correct configuration of requested response headers through the options dictionary. Inputs include a remote image URL and a dictionary of header options. Outputs are the various response metadata values or error messages if retrieval fails.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Data.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ $url := \"https://example.org/images/a.jpg\" }}\n{{ $opts := dict \"responseHeaders\" (slice \"Server\") }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    {{ with .Data }}\n      {{ .ContentLength }} → 42764\n      {{ .ContentType }} → image/jpeg\n      {{ .Headers }} → map[Server:[Netlify]]\n      {{ .Status }} → 200 OK\n      {{ .StatusCode }} → 200\n      {{ .TransferEncoding }} → []\n    {{ end }}\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Elements from a Slice using collections.Uniq in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the uniq function (alias for collections.Uniq) to remove duplicate elements from a slice. The function processes the slice and returns a new slice with only unique elements, preserving the original order of first appearance.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Uniq.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ slice 1 3 2 1 | uniq }} → [1 3 2]\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Rendering with Render Hook (Go HTML Template)\nDESCRIPTION: Overrides Hugo's Markdown rendering for links, using the 'urls.Parse' function to determine if a link is external (absolute URL) and adding a 'rel=\"external\"' attribute. Inputs: '.Destination', '.Title', '.Text'. Makes use of 'safeURL' filter and conditional Go template logic. Outputs a fully formed <a> tag with optional 'title' and 'rel' attributes as needed. Requires Hugo v0.62+ and knowledge of render hooks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- $u := urls.Parse .Destination -}}\\n<a href=\"{{ .Destination | safeURL }}\"\\n  {{- with .Title }} title=\"{{ . }}\"{{ end -}}\\n  {{- if $u.IsAbs }} rel=\"external\"{{ end -}}\\n>\\n  {{- with .Text }}{{ . }}{{ end -}}\\n</a>\\n{{- /* chomp trailing newline */ -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options with TOML - Hugo - TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to set advanced build options in Hugo. It enables build statistics output and defines multiple cache busters for watching specific files such as hugo_stats.json, postcss or tailwind config files, and JavaScript or TypeScript files. The configuration is designed for projects using tools like Tailwind CSS (JIT mode) and leverages regular expressions to target asset cache invalidation precisely. Requires Hugo with support for build stats and cache busters; relevant for teams using asset pipelines involving Sass, PostCSS, or Tailwind.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/build.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[build]\n  [build.buildStats]\n    enable = true\n  [[build.cachebusters]]\n    source = \"assets/watching/hugo_stats\\\\.json\"\n    target = \"styles\\\\.css\"\n  [[build.cachebusters]]\n    source = \"(postcss|tailwind)\\\\.config\\\\.js\"\n    target = \"css\"\n  [[build.cachebusters]]\n    source = \"assets/.*\\\\.(js|ts|jsx|tsx)\"\n    target = \"js\"\n  [[build.cachebusters]]\n    source = \"assets/.*\\\\.(.*)$\"\n    target = \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Hugo Module\nDESCRIPTION: Command to initialize a new Hugo module with a specified GitHub path\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-modules/use-modules.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo mod init github.com/<your_user>/<your_project>\n```\n\n----------------------------------------\n\nTITLE: Displaying Taxonomy Terms in Hugo Templates\nDESCRIPTION: This Go HTML Template snippet, intended for a single page layout (`layouts/_default/single.html`), demonstrates how to access and display taxonomy terms associated with the current page. It uses the `.GetTerms` method to retrieve terms for the \"tags\" taxonomy, then iterates over them using `range` to create a list of links to each term's dedicated page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/front-matter.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GetTerms \"tags\" }}\n  <p>Tags</p>\n  <ul>\n    {{ range . }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Looping Through Collections in Hugo Templates\nDESCRIPTION: Shows how to iterate through a slice using the range function in Hugo templates. The example demonstrates looping through a collection and providing fallback content if the collection is empty.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_25\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"foo\" \"bar\" \"baz\" }}\n{{ range $s }}\n  <p>{{ . }}</p>\n{{ else }}\n  <p>The collection is empty</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site with Basic Settings and Parameters in TOML\nDESCRIPTION: Provides a simple example of a `hugo.toml` configuration file, defining core site settings (`baseURL`, `languageCode`, `title`) and custom site parameters under the `[params]` table, including nested parameters for contact information.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = 'https://example.org/'\nlanguageCode = 'en-us'\ntitle = 'ABC Widgets, Inc.'\n[params]\nsubtitle = 'The Best Widgets on Earth'\n[params.contact]\nemail = 'info@example.org'\nphone = '+1 202-555-1212'\n```\n\n----------------------------------------\n\nTITLE: Defining and Using an Inline Hugo Partial in Go HTML Template\nDESCRIPTION: Illustrates how to define a partial directly within the template file using the `define` keyword and call it using the `partial` function. This inline partial (`my-inline-partial.html`) returns a simple integer value (32). Note that inline partial names must be unique across the entire site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\nValue: {{ partial \"my-inline-partial.html\" . }}\n\n{{ define \"partials/my-inline-partial.html\" }}\n{{ $value := 32 }}\n{{ return $value }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Calling the Year Shortcode in Markdown\nDESCRIPTION: Shows how to invoke the custom `year` shortcode within a Markdown content file (`content/example.md`). The `{{</* year */>}}` syntax inserts the output of the `year.html` template (the current year) into the content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nThis is {{</* year */>}}, and look at how far we've come.\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing a Resource from a String with Template Actions - Go HTML Template\nDESCRIPTION: This Go HTML Template example demonstrates how to use resources.FromString in conjunction with resources.ExecuteAsTemplate to create a resource from a string that itself contains Hugo template actions. A string template is defined with embedded actions, converted to a resource, processed with ExecuteAsTemplate to evaluate the template logic, and finally published. Requires Hugo context and the resources.ExecuteAsTemplate function. The input is a template string; the output is a fully rendered and published site.json file in the public root. Appropriate for cases where the string content must be dynamically templated at build time.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/FromString.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if .IsHome }}\n  {{ $string := `\n    {{ $rfc3339 := \"2006-01-02T15:04:05Z07:00\" }}\n    {{ $m := dict\n      \"hugo_version\" hugo.Version\n      \"build_date\" (now.Format $rfc3339)\n      \"last_modified\" (site.Lastmod.Format $rfc3339)\n    }}\n    {{ $json := jsonify $m }}\n    `\n  }}\n  {{ $r := resources.FromString \"\" $string }}\n  {{ $r = $r | resources.ExecuteAsTemplate \"site.json\" . }}\n  {{ $r.Publish }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Image Transformations with .Process in Hugo Template\nDESCRIPTION: This example demonstrates combining multiple image processing instructions within a single `.Process` call. It retrieves an image resource, then crops it to 200x200 pixels anchored to the top-right corner, converts it to WebP format, sets the quality to 85, and uses the Lanczos resampling filter. The resulting image's details are used to generate an HTML `<img>` tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Process.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Process \"crop 200x200 topright webp q85 lanczos\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Site-Level Parameters in Hugo Configuration (TOML)\nDESCRIPTION: Defines a site-wide parameter `display_toc` with a value of `true` within the `[params]` table in the Hugo configuration file (e.g., `hugo.toml` or `config.toml`). This sets a default value that can be accessed via `site.Params.display_toc` or potentially overridden by page parameters when using the `.Param` method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Param.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[params]\ndisplay_toc = true\n```\n\n----------------------------------------\n\nTITLE: Deployment Shell Script\nDESCRIPTION: A shell script that builds the Hugo site and deploys it to a remote server using rsync. Variables for user, host, and directory make the script reusable and configurable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\nUSER=my-user\nHOST=my-server.com\nDIR=my/directory/to/topologix.fr/   # the directory where your website files should go\n\nhugo && rsync -avz --delete public/ ${USER}@${HOST}:~/${DIR} # this will delete everything on the server that's not in the local public directory \n\nexit 0\n```\n\n----------------------------------------\n\nTITLE: Chaining Map/Object Access and Methods in Hugo Templates (go-html-template)\nDESCRIPTION: Provides examples of accessing map/object fields with dot notation and chaining methods on objects in Hugo. Demonstrates both direct dictionary key access (\\'$map.c\\') and property/method access on Hugo's .Site and .Page objects for retrieving titles. Inputs are map and object variables, outputs are property values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_13\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $map := dict \\\"a\\\" \\\"foo\\\" \\\"b\\\" \\\"bar\\\" \\\"c\\\" \\\"baz\\\" }}\\n{{ $map.c }} → baz\\n\\n{{ $homePage := .Site.Home }}\\n{{ $homePage.Title }} → My Homepage\n```\n\n----------------------------------------\n\nTITLE: Example: Full Multilingual Configuration in Hugo (Hugo Syntax)\nDESCRIPTION: A comprehensive example that combines global, per-language, and per-language parameter settings for both German and English content. Demonstrates specifying content directory, disabling flags, language codes and directions, display names, language-specific titles, sorting weights, and additional custom parameters. This configuration enables fine-tuned control over multilingual site builds and language switchers. Intended for production multilingual Hugo sites; all entries must use valid language codes and TOML table syntax.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/languages.md#2025-04-23_snippet_4\n\nLANGUAGE: hugo\nCODE:\n```\ndefaultContentLanguage = 'de'\\ndefaultContentLanguageInSubdir = true\\ndisableDefaultLanguageRedirect = false\\n\\n[languages.de]\\ncontentDir = 'content/de'\\ndisabled = false\\nlanguageCode = 'de-DE'\\nlanguageDirection = 'ltr'\\nlanguageName = 'Deutsch'\\ntitle = 'Projekt Dokumentation'\\nweight = 1\\n\\n[languages.de.params]\\nsubtitle = 'Referenz, Tutorials und Erklärungen'\\n\\n[languages.en]\\ncontentDir = 'content/en'\\ndisabled = false\\nlanguageCode = 'en-US'\\nlanguageDirection = 'ltr'\\nlanguageName = 'English'\\ntitle = 'Project Documentation'\\nweight = 2\\n\\n[languages.en.params]\\nsubtitle = 'Reference, Tutorials, and Explanations'\n```\n\n----------------------------------------\n\nTITLE: Filtering and Limiting Collections with Where and First in Hugo - Go HTML Template\nDESCRIPTION: Combining the where and first functions, this snippet filters the .Pages collection to only those with Section equal to \\\"articles\\\", then limits the result to the first 5 pages. It demonstrates function chaining in Hugo templates, requiring .Pages to be a collection of pages with Section attributes. The main parameters are the filter values for where and the count for first. The output is the rendered summary of the first 5 filtered pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/First.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range where .Pages \\\"Section\\\" \\\"articles\\\" | first 5 }}\n  {{ .Render \\\"summary\\\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Parameters in Hugo Configuration\nDESCRIPTION: This snippet shows how to define custom parameters in the Hugo site configuration file. It includes examples of simple key-value pairs, nested structures, and parameters with hyphens.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Params.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[params]\n  subtitle = 'The Best Widgets on Earth'\n  copyright-year = '2023'\n  [params.author]\n    email = 'jsmith@example.org'\n    name = 'John Smith'\n  [params.layouts]\n    rfc_1123 = 'Mon, 02 Jan 2006 15:04:05 MST'\n    rfc_3339 = '2006-01-02T15:04:05-07:00'\n```\n\n----------------------------------------\n\nTITLE: Publishing Hugo Site\nDESCRIPTION: Command to build the Hugo site for production, excluding draft, future, and expired content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/quick-start.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nhugo\n```\n\n----------------------------------------\n\nTITLE: Creating a Brightness Filter in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the `images.Brightness` function within a Hugo template. It assigns an image filter to the variable `$filter`. This filter increases the image brightness by 12%. The percentage parameter must be between -100 (black image) and 100 (white image), with 0 having no effect. The resulting filter can then be applied to an image resource using the `Apply` method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Brightness.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Brightness 12 }}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single Image with Error Handling in Hugo Templates (go-html-template)\nDESCRIPTION: Fetches an image resource from the current page bundle and renders it with its actual dimensions. If the specified file does not exist, throws an error and displays a corresponding message. Dependencies: Hugo's .Resources API, valid $path; expects 'images/a.jpg' to exist as a page resource, outputs an <img> tag or a template error. Relies on .RelPermalink, .Width, and .Height of the image resource.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $path := \"images/a.jpg\" }}\\n{{ with .Resources.Get $path }}\\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\\n{{ else }}\\n  {{ errorf \"Unable to get page resource %q\" $path }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Hashing and Rendering Resource Links Using Hugo Fingerprint (Go HTML Template)\nDESCRIPTION: This example shows how to use Hugo's resources.Get and resources.Fingerprint functions within a Go HTML template to hash a JavaScript file using the sha256 algorithm and generate a script tag with SRI attributes. It requires Hugo's built-in resource pipeline. The input is the resource path and desired hashing algorithm; the output is a rendered HTML script tag whose src and integrity attributes are derived from the processed resource. .RelPermalink gives the hashed file path and .Data.Integrity provides the SRI value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/Fingerprint.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \\\"js/main.js\\\" }}\n  {{ with . | fingerprint \\\"sha256\\\" }}\n    <script src=\\\"{{ .RelPermalink }}\\\" integrity=\\\"{{ .Data.Integrity }}\\\" crossorigin=\\\"anonymous\\\"></script>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Hugo Partial with Context in Go HTML Template\nDESCRIPTION: Demonstrates the basic syntax for calling a Hugo partial template from another template using the `partial` function. It emphasizes the need to pass the current context (`.`) as the second argument to make variables available within the partial.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"<PATH>/<PARTIAL>.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Gallery Shortcode in Hugo\nDESCRIPTION: Creates a gallery shortcode that expects a 'class' argument and wraps inner content in a div.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_16\n\nLANGUAGE: go-html-template\nCODE:\n```\n<div class=\"{{ .Get \"class\" }}\">\n  {{ .Inner }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Language Navigator in Hugo Go HTML Template\nDESCRIPTION: A Go HTML template snippet (`layouts/partials/allLanguages.html`) designed to build a language switcher. It accesses all translations of the site's home page (`.Site.Home.AllTranslations`) and creates an unordered list of links, where each link points to the home page (`.RelPermalink`) of a specific language, displaying the full language name (`.Language.LanguageName`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n{{ range $.Site.Home.AllTranslations }}\n<li><a href=\"{{ .RelPermalink }}\">{{ .Language.LanguageName }}</a></li>\n{{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Variables in a Hugo Shortcode Template\nDESCRIPTION: This Go HTML Template snippet defines the structure for the `book-details.html` shortcode. It demonstrates accessing the calling page's context using the `.Page` variable, which is automatically available within shortcodes. `.Page.Title` retrieves the standard page title, while `.Page.Params.author`, `.Page.Params.publication_year`, and `.Page.Params.isbn` retrieve custom parameters defined in the calling page's front matter. The shortcode outputs an unordered list containing these book details.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Page.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  <li>Title: {{ .Page.Title }}</li>\n  <li>Author: {{ .Page.Params.author }}</li>\n  <li>Published: {{ .Page.Params.publication_year }}</li>\n  <li>ISBN: {{ .Page.Params.isbn }}</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Calling Nested Hugo Partials in Go HTML Template\nDESCRIPTION: Shows how to call partial templates located within subdirectories of the `layouts/partials` folder. The path provided to the `partial` function should be relative to the `partials` directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"header/site-header.html\" . }}\n{{ partial \"footer/scripts.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Cascade Rules in Hugo Front Matter\nDESCRIPTION: This TOML front matter snippet for a home page (`content/_index.md`) demonstrates defining multiple, targeted cascade rules using an array of tables (`[[cascade]]`). The first rule cascades `color = 'red'` to pages (`kind = 'page'`) under `/books/**`. The second rule cascades `color = 'blue'` to pages (`kind = 'page'`) under `/films/**`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/front-matter.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Home'\n[[cascade]]\n[cascade.params]\ncolor = 'red'\n[cascade.target]\npath = '{/books/**}'\nkind = 'page'\n[[cascade]]\n[cascade.params]\ncolor = 'blue'\n[cascade.target]\npath = '{/films/**}'\nkind = 'page'\n```\n\n----------------------------------------\n\nTITLE: Configuring Taxonomies in Hugo TOML\nDESCRIPTION: This TOML snippet shows how to define custom taxonomies within a Hugo site configuration file (e.g., `hugo.toml` or `config.toml`). It maps the singular keys `tag` and `genre` to their plural forms `tags` and `genres` respectively, making these available for classifying content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/front-matter.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[taxonomies]\ntag = 'tags'\ngenre = 'genres'\n```\n\n----------------------------------------\n\nTITLE: Hugo Theme Directory Structure\nDESCRIPTION: This shows the directory structure created when generating a new Hugo theme.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/directory-structure.md#2025-04-23_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nmy-theme/\n├── archetypes/\n├── assets/\n├── content/\n├── data/\n├── i18n/\n├── layouts/\n├── static/\n├── LICENSE\n├── README.md\n├── hugo.toml\n└── theme.toml\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Bundling with js.Build (Go HTML Template)\nDESCRIPTION: This Go HTML Template snippet shows a basic usage of js.Build, obtaining a JavaScript file and building it with an output path. It demonstrates a minimal configuration without advanced options. Expected input: JavaScript asset path; output: processed resource with provided target path.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Build.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $built := resources.Get \"js/index.js\" | js.Build \"main.js\" }}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Article Card View (Go HTML Template)\nDESCRIPTION: Defines the 'card' content view template, rendering a card div with article title, link, and summary. Dependencies: page context fields like '.RelPermalink', '.LinkTitle', and '.Summary'. Intended for use with the .Render function in Hugo. Outputs a summary card for a content page; to be used as a child in lists or grids.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n<div class=\"card\">\\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n  {{ .Summary }}\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Hugo Partial that Returns a Value in Go HTML Template\nDESCRIPTION: Example of a Hugo partial (`layouts/partials/GetFeatured.html`) that returns a value instead of rendering HTML. It uses the `return` statement at the end to output the first N regular pages marked as featured (where N is passed as context).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{/* layouts/partials/GetFeatured.html */}}\n{{ return first . (where site.RegularPages \"Params.featured\" true) }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested, Localized Menus with a Recursive Partial in Go Template\nDESCRIPTION: This Go HTML Template partial (`layouts/partials/menu.html`) renders a potentially nested navigation menu. It accepts the current page context and a menu ID, retrieves the menu entries using `site.Menus`, and calls a recursive inline partial (`inline/menu/walk.html`) to generate the HTML `<ul>` and `<li>` structure. The template handles marking active and ancestor menu items using `IsMenuCurrent`/`HasMenuCurrent` and localizes menu entry names using the `T` function if an `Identifier` is present.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/menu.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- $page := .page }}\n{{- $menuID := .menuID }}\n\n{{- with index site.Menus $menuID }}\n  <nav>\n    <ul>\n      {{- partial \"inline/menu/walk.html\" (dict \"page\" $page \"menuEntries\" .) }}\n    </ul>\n  </nav>\n{{- end }}\n\n{{- define \"partials/inline/menu/walk.html\" }}\n  {{- $page := .page }}\n  {{- range .menuEntries }}\n    {{- $attrs := dict \"href\" .URL }}\n    {{- if $page.IsMenuCurrent .Menu . }}\n      {{- $attrs = merge $attrs (dict \"class\" \"active\" \"aria-current\" \"page\") }}\n    {{- else if $page.HasMenuCurrent .Menu .}}\n      {{- $attrs = merge $attrs (dict \"class\" \"ancestor\" \"aria-current\" \"true\") }}\n    {{- end }}\n    {{- $name := .Name }}\n    {{- with .Identifier }}\n      {{- with T . }}\n        {{- $name = . }}\n      {{- end }}\n    {{- end }}\n    <li>\n      <a\n        {{- range $k, $v := $attrs }}\n          {{- with $v }}\n            {{- printf \" %s=%q\" $k $v | safeHTMLAttr }}\n          {{- end }}\n        {{- end -}}\n      >{{ $name }}</a>\n      {{- with .Children }}\n        <ul>\n          {{- partial \"inline/menu/walk.html\" (dict \"page\" $page \"menuEntries\" .) }}\n        </ul>\n      {{- end }}\n    </li>\n  {{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Create Article Content with Archetype - Shell\nDESCRIPTION: Demonstrates how to use the Hugo CLI to generate new content files that utilize the appropriate archetype template based on path. Assumes archetypes/articles.md exists. Input: destination file within the 'articles' section. Output: populated content file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhugo new content articles/something.md\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Hugo Content Directory Structure with Sections\nDESCRIPTION: This text block displays a typical Hugo content directory structure, differentiating between directories treated as sections (like `articles` and `products`, or those with an `_index.md` file) and regular directories. It serves as a visual aid for understanding how Hugo organizes content hierarchically and identifies sections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/sections.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── articles/             <-- section (top-level directory)\n│   ├── 2022/\n│   │   ├── article-1/\n│   │   │   ├── cover.jpg\n│   │   │   └── index.md\n│   │   └── article-2.md\n│   └── 2023/\n│       ├── article-3.md\n│       └── article-4.md\n├── products/             <-- section (top-level directory)\n│   ├── product-1/        <-- section (has _index.md file)\n│   │   ├── benefits/     <-- section (has _index.md file)\n│   │   │   ├── _index.md\n│   │   │   ├── benefit-1.md\n│   │   │   └── benefit-2.md\n│   │   ├── features/     <-- section (has _index.md file)\n│   │   │   ├── _index.md\n│   │   │   ├── feature-1.md\n│   │   │   └── feature-2.md\n│   │   └── _index.md\n│   └── product-2/        <-- section (has _index.md file)\n│       ├── benefits/     <-- section (has _index.md file)\n│       │   ├── _index.md\n│       │   ├── benefit-1.md\n│       │   └── benefit-2.md\n│       ├── features/     <-- section (has _index.md file)\n│       │   ├── _index.md\n│       │   ├── feature-1.md\n│       │   └── feature-2.md\n│       └── _index.md\n├── _index.md\n└── about.md\n```\n\n----------------------------------------\n\nTITLE: Displaying Merged Hugo Site Configuration via CLI\nDESCRIPTION: Shows the `hugo config` command, which outputs the complete, merged site configuration, including settings from files, themes, modules, and environment variables.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nhugo config\n```\n\n----------------------------------------\n\nTITLE: Creating and Reusing Image Filter Chains in Hugo Go Templates\nDESCRIPTION: Demonstrates creating a reusable filter chain by storing filter functions in a slice (`$filters`). This slice can then be passed to the `.Filter` method for multiple images (`$image1`, `$image2`), promoting code reuse.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_15\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filters := slice  (images.GaussianBlur 6) (images.Pixelate 8) }}\n{{ $image1 := $image1.Filter $filters }}\n{{ $image2 := $image2.Filter $filters }}\n```\n\n----------------------------------------\n\nTITLE: Error-Handled Retrieval of a Missing Remote Resource with Hugo resources.GetRemote (Go HTML Template)\nDESCRIPTION: Demonstrates handling failed requests for missing or broken remote resources using resources.GetRemote. Uses try to capture errors and renders error messages on failure. This snippet highlights that Hugo does not treat HTTP 404 as an error and returns nil, requiring explicit handling in templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://broken-example.org/images/a.jpg\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Checking Sitemap Disable Status in Go Template\nDESCRIPTION: Retrieves the boolean 'Disable' setting for the current page using the `.Sitemap` method. If `true`, the page should be excluded from the sitemap. This is typically set in the page's front matter. Requires Hugo v0.125.0 or later.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sitemap.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Sitemap.Disable }}\n```\n\n----------------------------------------\n\nTITLE: Querying and Paginating Pages in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to query all regular pages of type 'posts' using Hugo's 'where' function and initialize pagination with the '.Paginate' method. It iterates through the resulting pages to render each as a linked title and includes an internal partial for pagination navigation. Dependencies include the Hugo static site generator and the '_internal/pagination.html' partial template. Main parameters are the site collection, page type, and the paginator. Inputs are site pages, and outputs are an HTML-rendered paginated list of post titles. The code assumes Hugo is running in a template context and that the '_internal/pagination.html' partial exists.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/Pages.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ template \"_internal/pagination.html\" . }}\n\n```\n\n----------------------------------------\n\nTITLE: Debug Taxonomy Structure in Hugo\nDESCRIPTION: Dumps the data structure of the alphabetically sorted taxonomy for inspection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Alphabetical.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump $taxonomyObject.Alphabetical }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Configuration Directory Structure for Multiple Environments\nDESCRIPTION: Provides an example directory structure for managing Hugo configurations across different environments (`_default`, `production`, `staging`). Hugo merges settings, prioritizing environment-specific configurations over the `_default` settings when an environment is specified (e.g., via `--environment staging`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── config/\n    ├── _default/\n    │   ├── hugo.toml\n    │   ├── menus.en.toml\n    │   ├── menus.de.toml\n    │   └── params.toml\n    ├── production/\n    │   ├── hugo.toml\n    │   └── params.toml\n    └── staging/\n        ├── hugo.toml\n        └── params.toml\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Context and Iterating with Hugo HTML Template (go-html-template)\nDESCRIPTION: Shows how to access the current Page context, iterate through a simple string slice, and utilize 'range' and 'with' for contextual data scoping. Requires Hugo and a content page available for .Title to resolve. The '.Title' fetches the page title, while 'range' and 'with' demonstrate context switching for scoped rendering of values within template blocks. Inputs include the Page context and hard-coded slices or strings, and output is HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<h2>{{ .Title }}</h2>\\n\\n{{ range slice \\\"foo\\\" \\\"bar\\\" }}\\n  <p>{{ . }}</p>\\n{{ end }}\\n\\n{{ with \\\"baz\\\" }}\\n  <p>{{ . }}</p>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Custom Authors Taxonomy Template with Metadata and Portraits - Go HTML Template\nDESCRIPTION: Defines a Hugo taxonomy template for the 'authors' taxonomy. Lists each author alphabetically, showing their name, affiliation, and portrait image (100x100 px if available). Relies on proper term folder structure, front matter, and Hugo Page Resource image processing. Each list item includes both metadata and a processed portrait image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_11\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n  {{ range .Data.Terms.Alphabetical }}\n    <h2><a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a></h2>\n    <p>Affiliation: {{ .Page.Params.Affiliation }}</p>\n    {{ with .Page.Resources.Get \"portrait.jpg\" }}\n      {{ with .Fill \"100x100\" }}\n        <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"portrait\">\n      {{ end }}\n    {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Value and Type with printf in Go HTML Template\nDESCRIPTION: This snippet illustrates using the `printf` template function in Hugo to inspect a simple variable. It first assigns the integer `42` to the variable `$value`. Then, it uses `printf` with the format string `\"%[1]v (%[1]T)\"` to display both the value (`%v`) and the Go data type (`%T`) of the variable. The expected output `\"42 (int)\"` is shown as a comment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/inspection.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $value := 42 }}\n{{ printf \"%[1]v (%[1]T)\" $value }} → 42 (int)\n```\n\n----------------------------------------\n\nTITLE: Posting Data with Custom Content-Type via Hugo resources.GetRemote (Go HTML Template)\nDESCRIPTION: Demonstrates posting JSON data to a remote server using resources.GetRemote with method set to POST and body containing the data. The Content-Type header is set to application/json. This example is essential for API requests that require payloads and explicit content negotiation. Ensure the 'dict' function is available and all keys are properly cased for method and headers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://example.org/api\" }}\n{{ $opts := dict\n  \"method\" \"post\"\n  \"body\" `{\"complete\": true}` \n  \"headers\" (dict  \"Content-Type\" \"application/json\")\n}}\n{{ $resource := resources.GetRemote $url $opts }}\n```\n\n----------------------------------------\n\nTITLE: Breakdown of _index.md to URL Mapping in Hugo (Text)\nDESCRIPTION: This snippet visually maps the placement of an _index.md file within the Hugo 'content/posts' directory to its output URL and permalink. It serves to clarify how Hugo translates a specific file path into a destination URL and associated section/slug components. The notation used is diagrammatic and not executable, making it suitable for documentation purposes only.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/organization/index.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.         url\\n.       ⊢--^-⊣\\n.        path    slug\\n.       ⊢--^-⊣⊢---^---⊣\\n.           file path\\n.       ⊢------^------⊣\\ncontent/posts/_index.md\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Map with Hugo's dict Function\nDESCRIPTION: This snippet demonstrates the basic usage of the `dict` function (alias for `collections.Dictionary`) in a Hugo template. It creates a map named `$m` by providing alternating string keys ('a', 'b') and their corresponding values (1, 2).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Dictionary.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m := dict \"a\" 1 \"b\" 2 }}\n```\n\n----------------------------------------\n\nTITLE: Returning a Value from a Hugo Partial Using return Statement - Go HTML Template\nDESCRIPTION: This snippet showcases how to return a value directly from a partial template using the 'return' statement. The code conditionally assigns a string of 'even' or 'odd' based on the modulus of the input, then returns the result. Only one return statement may exist and it must be at the end of the template. Requires Hugo version supporting return in partials and the included 'math' template functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/IncludeCached.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $result := \\\"\\\" }}\\n{{ if math.ModBool . 2 }}\\n  {{ $result = \\\"even\\\" }}\\n{{ else }}\\n  {{ $result = \\\"odd\\\" }}\\n{{ end }}\\n{{ return $result }}\n```\n\n----------------------------------------\n\nTITLE: Generating Paginator Navigation Links in Hugo\nDESCRIPTION: This Go HTML template demonstrates how to create pagination navigation. It first filters regular pages of type \"posts\", creates a paginator object using `.Paginate`, lists the titles and links of pages on the current paginated page, and then generates links for \"First\", \"Previous\", \"Next\", and \"Last\" pages using the `.First`, `.Prev`, `.Next`, and `.Last` methods of the paginator object. These links are conditionally rendered within `{{ with ... }}` blocks, ensuring they only appear if the corresponding page exists.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/Prev.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <ul>\n    {{ with .First }}\n      <li><a href=\"{{ .URL }}\">First</a></li>\n    {{ end }}\n    {{ with .Prev }}\n      <li><a href=\"{{ .URL }}\">Previous</a></li>\n    {{ end }}\n    {{ with .Next }}\n      <li><a href=\"{{ .URL }}\">Next</a></li>\n    {{ end }}\n    {{ with .Last }}\n      <li><a href=\"{{ .URL }}\">Last</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Overriding 'main' and 'title' Blocks in a Hugo Single Template (Go HTML Template)\nDESCRIPTION: Defines both \"title\" and \"main\" blocks in a single page template (layouts/_default/single.html), replacing their default contents from baseof.html. The 'title' block customizes the HTML page title, while 'main' outputs title and content for the page. Depends on Hugo's template inheritance and .Title, .Content, and .Site.Title data. Inputs: current page object (.), outputs: HTML injected in respective block locations. Both blocks are fully custom, demonstrating block overrides.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/base.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \\\"title\\\" }}\\n  <!-- This will override the default value set in baseof.html; i.e., \\\"{{ .Site.Title }}\\\" in the original example-->\\n  {{ .Title }} &ndash; {{ .Site.Title }}\\n{{ end }}\\n{{ define \\\"main\\\" }}\\n  <h1>{{ .Title }}</h1>\\n  {{ .Content }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Applying String Functions to a Slice using collections.Apply in Go Hugo Template\nDESCRIPTION: This snippet demonstrates the use of the `collections.Apply` function in a Go Hugo template. It initializes a string slice `[\"hello\", \"world\"]`. First, it applies the `strings.FirstUpper` function to capitalize the first letter of each element. Then, it applies the `strings.Replace` function to replace all occurrences of 'l' with '_' in the modified slice elements. The `.` placeholder represents the current element being processed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Apply.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"hello\" \"world\" }}\n\n{{ $s = apply $s \"strings.FirstUpper\" \".\" }}\n{{ $s }} → [Hello World]\n\n{{ $s = apply $s \"strings.Replace\" \".\" \"l\" \"_\" }}\n{{ $s }} →  [He__o Wor_d]\n```\n\n----------------------------------------\n\nTITLE: Listing Pages Sorted by Parameter Using Hugo Templates (Go HTML Template)\nDESCRIPTION: This snippet demonstrates iterating over a collection of pages sorted by the 'author' front matter parameter in ascending order using the ByParam method in Hugo's Go HTML Template. Requires a Hugo project with pages that have the 'author' parameter set in their front matter. It outputs a list of links with the page's relative permalink and display title. If the parameter is absent in the page, Hugo will fallback to the site configuration if the key exists.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByParam.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByParam \"author\" }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Remote Data with transform.Unmarshal and Hugo resources.GetRemote (Go HTML Template)\nDESCRIPTION: This snippet explains fetching remote JSON data with resources.GetRemote and converting it into a template-accessible dictionary using transform.Unmarshal. It combines try error handling, conditionally checking for error or value, and unmarshals the resource content into the $data variable. This workflow is vital for consuming remote APIs and integrating their data in Hugo sites.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $url := \"https://example.org/books.json\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    {{ $data = . | transform.Unmarshal }}\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Structuring Hugo Configuration using a Directory\nDESCRIPTION: Illustrates the use of a `config` directory to organize Hugo configuration settings by environment (`_default`, `production`), root key (`hugo`, `menus`, `params`), and language (`en`, `de`). This allows for more modular and environment-specific configurations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── config/\n    ├── _default/\n    │   ├── hugo.toml\n    │   ├── menus.en.toml\n    │   ├── menus.de.toml\n    │   └── params.toml\n    └── production/\n        └── params.toml\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Page Resource by Path in Hugo Go Template\nDESCRIPTION: Attempts to retrieve a single page resource using its exact path relative to the page bundle (e.g., \"images/a.jpg\") via the `.Resources.Get` method. The `with` action checks if a resource was found. If successful, it generates an HTML `<img>` tag using the resource's properties. This requires the `.Resources` collection on the current page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Resources.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.Get \"images/a.jpg\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Footer Partial without Context - Hugo Go HTML Template\nDESCRIPTION: This snippet invokes a 'footer.html' partial using the 'partial' function, omitting context. The partial does not require access to the current page and only outputs static or global content. Returns the rendered footer HTML fragment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/Include.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \\\"footer.html\\\" }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Filtering and Sorting in Hugo (Go HTML Template)\nDESCRIPTION: This Go HTML template snippet demonstrates how to paginate a collection of pages in Hugo within a list template (e.g., layouts/_default/list.html). It first filters regular pages to include only those in the 'articles' section using `where .Site.RegularPages \"Section\" \"articles\"`, sorts the resulting collection by title using `.ByTitle`, and then applies the `.Paginate` method with a specific size (7) to create pagers. It iterates through the `.Pages` of the current pager to display links and includes Hugo's internal pagination template (`_internal/pagination.html`) for navigation between pagers. Note that pagination results are cached after the first call to `.Paginate` or `.Paginator`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Paginate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template {file=\"layouts/_default/list.html\"}\n{{ $pages := where .Site.RegularPages \"Section\" \"articles\" }}\n{{ $pages = $pages.ByTitle }}\n{{ range (.Paginate $pages 7).Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\n{{ end }}\n{{ template \"_internal/pagination.html\" . }}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Articles as Cards on Home Page (Go HTML Template)\nDESCRIPTION: In the home page context, this defines the 'main' block, outputs page content, and iterates over all pages in the 'articles' section, using the 'Render' method to insert the 'card' view for each. Depends on Hugo’s 'site.RegularPages', 'where' filter, and '.Render' function. Outputs a list of cards with article previews. Assumes the existence of a 'card.html' content view template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\\n  {{ .Content }}\\n  <ul>\\n    {{ range where site.RegularPages \"Section\" \"articles\" }}\\n      {{ .Render \"card\" }}\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using else if for Multiple Condition Evaluation in Hugo Go Templates (Go HTML Template)\nDESCRIPTION: This snippet illustrates advanced branching using 'else if' to evaluate multiple conditions in Hugo's Go Template language. Depending on the exact value of the variable, a corresponding string is printed. Key parameters are the variable and comparison values; output varies per matched condition. This pattern benefits complex logic inside templates without custom logic outside the template scope.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/if.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := 12 }}\\n{{ if eq $var 6 }}\\n  {{ print \"var is 6\" }}\\n{{ else if eq $var 7 }}\\n  {{ print \"var is 7\" }}\\n{{ else if eq $var 42 }}\\n  {{ print \"var is 42\" }}\\n{{ else }}\\n  {{ print \"var is something else\" }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Ranging Through Pages Collection by Title in Hugo Templates\nDESCRIPTION: Demonstrates how to iterate through a page collection sorted by title using the Pages method in a Hugo template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Pages.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByTitle }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML List of Filtered Pages - html\nDESCRIPTION: Shows the resulting HTML output after applying the corresponding Hugo template filter to the site content. Each example lists the posts that match the filter operation. Used to illustrate final visible output to end users. No dependencies; purely illustrative.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\n  <li><a href=\"/posts/post-1/\">Post 1</a></li>\\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\n  <li><a href=\"/posts/post-2/\">Post 2</a></li>\\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\n  <li><a href=\"/posts/post-2/\">Post 2</a></li>\\n  <li><a href=\"/posts/post-3/\">Post 3</a></li>\\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\n  <li><a href=\"/posts/post-1/\">Post 1</a></li>\\n  <li><a href=\"/posts/post-3/\">Post 3</a></li>\\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\n  <li><a href=\"/posts/post-1/\">Post 1</a></li>\\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\n  <li><a href=\"/posts/post-1/\">Post 2</a></li>\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Hugo Configuration Files via CLI\nDESCRIPTION: Shows how to combine multiple configuration files (`a.toml`, `b.yaml`, `c.json`) using the `hugo` command-line tool. Settings are merged with left-to-right precedence, meaning settings in `c.json` override conflicting settings in `b.yaml`, which override `a.toml`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nhugo --config a.toml,b.yaml,c.json\n```\n\n----------------------------------------\n\nTITLE: Delimiting Maps in Hugo Template - go-html-template\nDESCRIPTION: Shows how to utilize the delimit function on a map in Hugo templates, where map values are joined into a string with specified delimiters, after the map is sorted by key. Requires Hugo's built-in dict and delimit template functions. Parameters: the map to process, the main delimiter, and an optional last delimiter. Output is a sorted and joined string of the map's values. Note that map value ordering is guaranteed via key sorting, and only values are included.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Delimit.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m := dict \"b\" 2 \"a\" 1 \"c\" 3 }}\n{{ delimit $m \", \" }} → 1, 2, 3\n{{ delimit $m \", \" \" and \"}} → 1, 2 and 3\n```\n\n----------------------------------------\n\nTITLE: Iterating Through All Site Pages in Go HTML Template\nDESCRIPTION: This Go HTML template snippet demonstrates how to use the `range` action to iterate over the collection of pages returned by `.Site.AllPages`. For each page in the collection, it generates an `<h2>` tag containing a link (`<a>`) pointing to the page's relative permalink (`.RelPermalink`) and displaying the page's link title (`.LinkTitle`). This pattern is useful for creating comprehensive lists or navigational elements that include all page types across all languages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/AllPages.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.AllPages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Publish Date in Hugo Go-HTML Templates\nDESCRIPTION: This Go-HTML template snippet demonstrates how to iterate over Hugo pages grouped by publish date, using a layout string (e.g., 'January 2006') to determine the granularity of grouping. Within each group, the pages are iterated and displayed as a linked list with their titles. No external dependencies are needed beyond Hugo's templating engine. Inputs include the .Pages collection and the layout string for date-format grouping. The output is structured HTML markup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByPublishDate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByPublishDate \\\"January 2006\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Custom Parameters in Hugo (TOML)\nDESCRIPTION: This TOML snippet demonstrates configuring custom site parameters for a multilingual Hugo site. It defines separate `[params]` sections within each language block (`[languages.de]` and `[languages.en]`) to provide language-specific values for `subtitle` and `contact` details.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/params.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = 'https://example.org/'\ndefaultContentLanguage = 'en'\n\n[languages.de]\nlanguageCode = 'de-DE'\nlanguageDirection = 'ltr'\nlanguageName = 'Deutsch'\ntitle = 'Projekt Dokumentation'\nweight = 1\n\n[languages.de.params]\nsubtitle = 'Referenz, Tutorials und Erklärungen'\n\n[languages.de.params.contact]\nemail = 'info@de.example.org'\nphone = '+49 30 1234567'\n\n[languages.en]\nlanguageCode = 'en-US'\nlanguageDirection = 'ltr'\nlanguageName = 'English'\ntitle = 'Project Documentation'\nweight = 2\n\n[languages.en.params]\nsubtitle = 'Reference, Tutorials, and Explanations'\n\n[languages.en.params.contact]\nemail = 'info@example.org'\nphone = '+1 206-555-1212'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Hugo Site - TOML\nDESCRIPTION: This TOML configuration snippet defines a Hugo static site with multilingual support, specifying English and French site roots. The main site title, base URL, disabled kinds (such as taxonomy, term, sitemap), and sections for `languages` (with distinct sub-keys for English and French) control multilingual deployment. Dependencies are Hugo’s config resolution system and the corresponding theme/templates. Key parameters: `baseURL`, `title`, `languageName`, `weight`, and the `disableKinds` array. The file is interpreted by Hugo at build or serve time and has no direct runtime output, but it governs generated site behavior and navigation structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__multihost.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Hugo Server Test\"\nbaseURL = \"https://example.org/\"\ndisableKinds = [\"taxonomy\", \"term\", \"sitemap\"]\n[languages]\n[languages.en]\nbaseURL = \"https://en.example.org/\"\nlanguageName = \"English\"\ntitle = \"Hugo Server Test\"\nweight = 1\n[languages.fr]\nbaseURL = \"https://fr.example.org/\"\ntitle = \"Hugo Serveur Test\"\nlanguageName = \"Français\"\nweight = 2\n\n```\n\n----------------------------------------\n\nTITLE: Basic Image Resizing by Width in Hugo Template\nDESCRIPTION: This Go HTML template snippet retrieves an image resource named 'original.jpg' using `resources.Get`. It then resizes the image to a width of 300 pixels while maintaining the original aspect ratio using the `.Resize \"300x\"` method. Finally, it generates an HTML `<img>` tag using the resized image's relative permalink, width, and height.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Resize.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Resize \"300x\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Data Using .Site.Data in Go HTML Template\nDESCRIPTION: Demonstrates how to access and iterate over data loaded from the `data/books/` directory using Hugo's Go HTML templates. It accesses the site's data via `.Site.Data.books`, then ranges over the categories ('fiction', 'nonfiction') and the books within each category, displaying the title and ISBN.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Data.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range $category, $books := .Site.Data.books }}\n  <p>{{ $category | title }}</p>\n  <ul>\n    {{ range $books }}\n      <li>{{ .title }} ({{ .isbn }})</li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating Customized QR Codes with Hugo images.QR and Options - Go HTML Template\nDESCRIPTION: This snippet illustrates generating a QR code with explicit options for error correction level, scale, and output directory using Hugo's images.QR function. It initializes a dictionary with 'level', 'scale', and 'targetDir', invokes images.QR with both the text and options, and renders an <img> with the resulting resource details. Requires Hugo 0.141.0 or later. Key parameters are the text to encode, option keys, and the outputs (.RelPermalink, .Width, .Height), supporting advanced customization and organization of generated QR assets.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/QR.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $text := \"https://gohugo.io\" }}\\n{{ $opts := dict \\n  \"level\" \"high\" \\n  \"scale\" 3\\n  \"targetDir\" \"images/qr\"\\n}}\\n{{ with images.QR $text $opts }}\\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Developing and Testing a Hugo Site\nDESCRIPTION: Runs a local development server to view and test the Hugo site, with LiveReload functionality for automatic updates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/usage.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhugo server\n```\n\nLANGUAGE: text\nCODE:\n```\nWeb Server is available at http://localhost:1313/ \n```\n\nLANGUAGE: sh\nCODE:\n```\nhugo server --navigateToChanged\n```\n\n----------------------------------------\n\nTITLE: Processing and Linking a CSS Template Resource in Go HTML Template\nDESCRIPTION: This Go HTML template snippet demonstrates how to use `resources.Get` to access the CSS template file and then `resources.ExecuteAsTemplate` to process it. The function takes the target path (`css/main.css`), the context (`$`, typically the current page), and the template resource as arguments. The result is a new resource whose `RelPermalink` is used to link the generated CSS file in the HTML head.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/ExecuteAsTemplate.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"css/template.css\" }}\n  {{ with resources.ExecuteAsTemplate \"css/main.css\" $ . }}\n    <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering and Resizing Multiple Images in Hugo Templates (go-html-template)\nDESCRIPTION: Iterates over all image resources in the page bundle, resizing each to 300 pixels wide and outputting their respective <img> tags. Assumes resources respond to .Resize and expose properties like .RelPermalink, .Width, and .Height. Input: collection from .Resources.ByType \"image\"; output: HTML image tags for each resource, resized as specified.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Resources.ByType \"image\" }}\\n  {{ with .Resize \"300x\" }}\\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Fitting with Hugo Fit Method\nDESCRIPTION: This Go HTML Template snippet demonstrates how to fetch an image resource using `resources.Get` and then apply the `Fit` method to downscale it. The image is resized to fit within a 200x200 pixel boundary while maintaining its aspect ratio. The resulting resized image's relative permalink, width, and height are used to generate an HTML `<img>` tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Fit.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Fit \"200x200\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Archetype Lookup Order Illustration - Text\nDESCRIPTION: Enumerates the prioritized search order for archetype resolution in Hugo when creating new content. Outlines fallback paths from project-level to theme-level and built-in defaults. This assists users in debugging or overriding archetype selection behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n1. archetypes/posts.md\n1. archetypes/default.md\n1. themes/my-theme/archetypes/posts.md\n1. themes/my-theme/archetypes/default.md\n\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URLs with Leading Slash (Hugo)\nDESCRIPTION: Illustrates how urls.AbsURL function generates absolute URLs when the input begins with a slash. The resulting URL is relative to the protocol and host of the baseURL.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/AbsURL.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ absURL \"/\" }}          → https://example.org/\n{{ absURL \"/articles\" }}  → https://example.org/articles\n{{ absURL \"/style.css\" }} → https://example.org/style.css\n```\n\n----------------------------------------\n\nTITLE: Limiting Page Collection Iteration - go-html-template\nDESCRIPTION: This snippet demonstrates iterating over only the first three pages in a collection using Hugo's Limit function within a go-html-template. It leverages the \".Pages.Limit 3\" syntax, displaying each page's title and relative permalink inside an HTML heading and link. Dependencies include Hugo (static site generator), with inputs expected to include a .Pages collection and output generated HTML for three page links; customization requires the existence of .LinkTitle and .RelPermalink on the page objects.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/Limit.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.Limit 3 }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Captured href Attributes from Submatches - Go HTML Template\nDESCRIPTION: This Go HTML Template snippet iterates over the array of submatches captured by findRESubmatch and prints the second item of each (the href attribute). This is commonly used to extract and display URLs from an HTML document. Requires the $matches variable as set up in previous snippets.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FindRESubmatch.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range $matches }}\n  {{ index . 1 }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Example Error Output from Image Shortcode\nDESCRIPTION: Shows an example error message generated by the Hugo build process when the enhanced image shortcode (with error handling) is called without the required `width` argument. The message clearly states the missing argument, the shortcode name (`image`), and the exact location (`.Position`) in the content file where the error occurred.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nERROR The \"image\" shortcode requires a 'width' argument: see \"/home/user/project/content/example/index.md:7:1\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Directory Contents with readDir in Go HTML Template\nDESCRIPTION: Demonstrates using the `readDir` function (an alias for `os.ReadDir`) within a Hugo template to iterate over the contents of the \"content\" directory relative to the project root. It accesses the `Name` and `IsDir` properties of each `FileInfo` object returned by the function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/ReadDir.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range readDir \"content\" }}\n  {{ .Name }} → {{ .IsDir }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Targeting Cascaded Front Matter by Path in Hugo\nDESCRIPTION: This TOML front matter snippet for a home page (`content/_index.md`) shows how to target cascaded parameters. The `color` parameter (`red`) is cascaded only to pages whose logical path matches the glob pattern `/articles/**` (including the section page `/articles` itself), using the `target.path` key within the `[cascade]` table.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/front-matter.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Home'\n[cascade.params]\ncolor = 'red'\n[cascade.target]\npath = '{/articles,/articles/**}'\n```\n\n----------------------------------------\n\nTITLE: Reading and Listing Data from a JSON Resource in Hugo Templates (go-html-template)\nDESCRIPTION: Accesses a JSON page resource, unmarshals it, and loops over its items to produce an HTML list of titles. If the resource file ('data/books.json') does not exist, the template throws an error. This snippet depends on transform.Unmarshal and Hugo's resource accessors. Inputs: JSON resource path; outputs: <ul> with <li> of titles, or an error.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $path := \"data/books.json\" }}\\n{{ with .Resources.Get $path }}\\n  {{ with . | transform.Unmarshal }}\\n    <p>Books:</p>\\n    <ul>\\n      {{ range . }}\\n        <li>{{ .title }}</li>\\n      {{ end }}\\n    </ul>\\n  {{ end }}\\n{{ else }}\\n  {{ errorf \"Unable to get page resource %q\" $path }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Content in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to render the content of a page in Hugo templates. The .Content method processes Markdown and shortcodes, converting them to HTML for display on the page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Content.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Content }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Content with `.Param` in Hugo Templates (Go HTML)\nDESCRIPTION: Illustrates using the `.Param` method within a Go HTML template to conditionally render the Table of Contents (`.TableOfContents`). The code retrieves the value of the `display_toc` parameter, checking the current page's parameters first and then falling back to the site's parameters. The content within the `if` block is rendered only if the retrieved value is truthy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Param.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if .Param \"display_toc\" }}\n  {{ .TableOfContents }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output for Book 1 Translations - HTML\nDESCRIPTION: Displays the HTML output generated by the Hugo template on the Book 1 page, listing links to all language versions. Each list item includes anchor tags with localized hrefs, hreflang attributes, and language names. This serves as a reference for correct rendering of translation navigation for users.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/AllTranslations.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/books/book-1/\" hreflang=\"en-US\">Book 1 (English)</a></li>\n  <li><a href=\"/de/books/book-1/\" hreflang=\"de-DE\">Book 1 (Deutsch)</a></li>\n  <li><a href=\"/fr/books/book-1/\" hreflang=\"fr-FR\">Book 1 (Français)</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Parameters from Menu Entries in Go Template\nDESCRIPTION: This Go HTML Template snippet shows how to access page-specific data directly from menu entries within a Hugo template. It iterates through the 'main' menu (`site.Menus.main`) and, for each entry linked to a page (`.Page`), it attempts to retrieve and display a custom parameter named 'version' (defined in the page's `.Params`). The `with` function ensures the code doesn't break if a menu entry isn't linked to a page or if the 'version' parameter is missing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/menu.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- range site.Menus.main }}\n  <a href=\"{{ .URL }}\">\n    {{ .Name }}\n    {{- with .Page }}\n      {{- with .Params.version -}}\n        ({{ . }})\n      {{- end }}\n    {{- end }}\n  </a>\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Applying a Single Image Filter with Hugo .Filter (Go HTML Template)\nDESCRIPTION: This snippet demonstrates how to fetch an image resource and apply a single image filter, specifically Grayscale, using Hugo's .Filter method in a Go HTML Template. It leverages the 'with' block for resource existence checks and uses interpolation to render image attributes. Prerequisites include a valid image path and the availability of the images.Grayscale filter. The output is an HTML img element referencing the processed image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Filter.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Filter images.Grayscale }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Excluding Pages with Undefined Boolean Fields Using Complement - go-html-template\nDESCRIPTION: Combines two filtered collections: one where 'Params.exclude' is not true and another where it is undefined (nil), then uses 'complement' to exclude undefined. This technique ensures only pages with explicit 'exclude' values are considered, avoiding edge cases with nils. Requires Hugo version supporting 'collections.Complement'. Outputs an unordered list of remaining pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_19\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $p1 := where .Site.RegularPages \"Params.exclude\" \"ne\" true }}\\n{{ $p2 := where .Site.RegularPages \"Params.exclude\" \"eq\" nil }}\\n<ul>\\n  {{ range $p1 | complement $p2 }}\\n    <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\\n  {{ end }}\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Main Content Block with Hugo Go HTML Template - go-html-template\nDESCRIPTION: This snippet defines the \\\"main\\\" block in a Hugo single page template, rendering the page title and content. It uses Hugo's .Title and .Content variables within Go HTML Template syntax. No additional dependencies are required beyond Hugo's default template processing. The output consists of an <h1> element for the title and raw content rendering; no metadata or taxonomies are displayed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/single.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \\\"main\\\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Content Block in Hugo Home Template (Go HTML Template)\nDESCRIPTION: This snippet defines a 'main' template block for Hugo's home page using Go HTML templates. It renders the page's content and iterates through site regular pages, displaying a link for each. No external dependencies are required beyond standard Hugo templating support. Inputs are the template context ('.'), and the output is rendered HTML for the homepage main section.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/home.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  {{ .Content }}\n  {{ range site.RegularPages }}\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Compound Image Filter: Crop, Center, Rotate, WebP, Quality, and Hint in Hugo go-html-template\nDESCRIPTION: Demonstrates applying a sequence of transformations: crop, center anchor, rotate, convert to WebP, lower output quality, and set the encoding hint to \\\"icon\\\". Useful for WebP icon asset pipelines where fine tuning is needed for size and visual style in Hugo projects.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"crop 200x200 center r90 webp q50 icon\" }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Sliced, Sorted, and Limited Article Lists (Go HTML Template)\nDESCRIPTION: This snippet combines Hugo's 'after' and 'first' functions to show how to render two distinct sections for articles: the featured (most recent) and recent (2nd to 4th most recent) articles. It leverages the '.Pages.ByPublishDate.Reverse' helper to sort articles in descending publish date order. Dependencies include Hugo's templating language, page collection helpers, and usage of 'first' and 'after'. Key parameters include the number of articles to display, sorting method, and the page collection. The template outputs structured HTML sections for both featured and recent articles, with each article's title, link, and description rendered dynamically.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/After.md#2025-04-23_snippet_1\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ define \"main\" }}\n  <section class=\"row featured-article\">\n    <h2>Featured Article</h2>\n    {{ range first 1 .Pages.ByPublishDate.Reverse }}\n    <header>\n      <h3><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h3>\n    </header>\n    <p>{{ .Description }}</p>\n  {{ end }}\n  </section>\n  <div class=\"row recent-articles\">\n    <h2>Recent Articles</h2>\n    {{ range first 3 (after 1 .Pages.ByPublishDate.Reverse) }}\n      <section class=\"recent-article\">\n        <header>\n          <h3><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h3>\n        </header>\n        <p>{{ .Description }}</p>\n      </section>\n    {{ end }}\n  </div>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Template for Tailwind CSS Processing\nDESCRIPTION: Hugo partial template that processes CSS with the Tailwind CSS CLI. It handles both development and production environments with appropriate optimizations and resource fingerprinting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/TailwindCSS.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with (templates.Defer (dict \"key\" \"global\")) }}\n  {{ with resources.Get \"css/main.css\" }}\n    {{ $opts := dict\n      \"minify\" hugo.IsProduction\n      \"inlineImports\" true\n    }}\n    {{ with . | css.TailwindCSS $opts }}\n      {{ if hugo.IsProduction }}\n        {{ with . | fingerprint }}\n          <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\">\n        {{ end }}\n      {{ else }}\n        <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\">\n      {{ end }}\n    {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Including Open Graph Metadata Template - Hugo Go Template\nDESCRIPTION: Shows how to add the Open Graph meta tag generator to a Hugo site by invoking the embedded template. Requires appropriate configuration in site params and/or page front matter for accurate metadata output. Suitable for enhancing SEO and social sharing previews.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/opengraph.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Adapting Shortcode Template for Markdown Notation (Go HTML Template)\nDESCRIPTION: Shows the required modifications to the `card.html` shortcode template when using the `{{% %}}` notation. Key changes include adjusting indentation and adding a blank line before `.Inner` to comply with CommonMark specifications for raw HTML blocks within Markdown. The `.Page.RenderString` (or `markdownify`) function must be removed, as Hugo now handles the rendering of the entire block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Inner.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n<div class=\"card\">\n  {{ with .Get \"title\" }}\n  <div class=\"card-title\">{{ . }}</div>\n  {{ end }}\n  <div class=\"card-content\">\n\n  {{ .Inner | strings.TrimSpace }}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Languages for Localization in Hugo TOML\nDESCRIPTION: Example Hugo configuration (TOML format) establishing a multilingual setup for localization demonstrations. It sets English (`en`) as the `defaultContentLanguage` and defines configurations for English, French (`fr`), and German (`de`), including their respective `contentDir`, `languageName`, and `weight` under the `[languages]` table.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_5\n\nLANGUAGE: hugo\nCODE:\n```\ndefaultContentLanguage = 'en'\n\n[languages]\n[languages.en]\ncontentDir = 'content/en'\nlanguageName = 'English'\nweight = 1\n[languages.fr]\ncontentDir = 'content/fr'\nlanguageName = 'Français'\nweight = 2\n[languages.de]\ncontentDir = 'content/de'\nlanguageName = 'Deutsch'\nweight = 3\n```\n\n----------------------------------------\n\nTITLE: Rendering Taxonomy Terms List (Go HTML Template)\nDESCRIPTION: Implements the 'main' block for taxonomy pages, showing the taxonomy's title, content, and links to each term in the taxonomy. It is used for listing terms in categories, tags, or custom taxonomies. Inputs are '.Title', '.Content', and '.Pages'; outputs headings and links for navigation. Must be called in the context of a taxonomy page and used within a base template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\\n  <h1>{{ .Title }}</h1>\\n  {{ .Content }}\\n  {{ range .Pages }}\\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Including Partial Templates in Hugo\nDESCRIPTION: Demonstrates how to include partial templates using the partial and partialCached functions. Partial templates are reusable template components stored in layouts/partials directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_22\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"breadcrumbs.html\" . }}\n{{ partialCached \"css.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Sorting Menu Entries in Descending Order Using the Sort Function\nDESCRIPTION: An alternative approach to sort menu entries in descending order by name using the generic sort function. This demonstrates more flexible sorting options compared to the ByName method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/ByName.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range sort .Site.Menus.main \"Name\" \"desc\" }}\n    <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages Sorted by Lastmod (Ascending) in Go HTML Template\nDESCRIPTION: This Go HTML Template snippet demonstrates iterating through a page collection (`.Pages`) sorted by last modification date (`ByLastmod`) in ascending order (default). For each page, it generates an H2 heading containing a link constructed using the page's relative permalink (`.RelPermalink`) and link title (`.LinkTitle`). Assumes `.Pages` is available in the current context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByLastmod.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByLastmod }}\\n  <h2><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></h2>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Permalinks - Hugo Configuration - TOML\nDESCRIPTION: This TOML configuration sets up a multilingual Hugo website with different permalink patterns per language. It defines English ('en') and Spanish ('es') site variants, each with their own content directories and language-specific permalink rules for 'books' under [languages.<lang>.permalinks.page] and [languages.<lang>.permalinks.section]. Required: Hugo with multilingual support. Major parameters include language codes, contentDir, languageName, and unique permalink URL structures for each language. Output: English book URLs are generated as '/en/books/:slug/'; Spanish as '/es/libros/:slug/'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/permalinks.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'en'\ndefaultContentLanguageInSubdir = true\n\n[languages.en]\ncontentDir = 'content/en'\nlanguageCode = 'en-US'\nlanguageDirection = 'ltr'\nlanguageName = 'English'\nweight = 1\n\n[languages.en.permalinks.page]\nbooks = \"/books/:slug/\"\n\n[languages.en.permalinks.section]\nbooks = \"/books/\"\n\n[languages.es]\ncontentDir = 'content/es'\nlanguageCode = 'es-ES'\nlanguageDirection = 'ltr'\nlanguageName = 'Español'\nweight = 2\n\n[languages.es.permalinks.page]\nbooks = \"/libros/:slug/\"\n\n[languages.es.permalinks.section]\nbooks = \"/libros/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RSS Feed Outputs in Hugo Configuration (TOML/YAML/Hugo Config)\nDESCRIPTION: This code snippet sets up output formats per page kind in Hugo's configuration. The 'home' and 'section' page kinds include both 'html' and 'rss' outputs, while 'taxonomy' and 'term' generate only 'html'. Define these entries in your Hugo config file (config.toml, config.yaml, or config.json) to control which pages generate RSS feeds. Keys correspond to page kinds, and values to desired output formats; modify as needed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/rss.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n[outputs]\nhome = ['html', 'rss']\nsection = ['html', 'rss']\ntaxonomy = ['html']\nterm = ['html']\n```\n\n----------------------------------------\n\nTITLE: Using collections.Seq Function in Hugo Templates\nDESCRIPTION: Examples of using the collections.Seq function in Hugo templates to generate integer sequences. The function can take different parameter formats: a single LAST parameter, FIRST and LAST parameters, or FIRST, INCREMENT, and LAST parameters. The function is limited to generating 2000 elements maximum.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Seq.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ seq 2 }} → [1 2]\n{{ seq 0 2 }} → [0 1 2]\n{{ seq -2 2 }} → [-2 -1 0 1 2]\n{{ seq -2 2 2 }} → [-2 0 2]\n```\n\n----------------------------------------\n\nTITLE: Error-Handled Retrieval of Remote Image Resource with Hugo resources.GetRemote in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to fetch a remote image using the resources.GetRemote function within a Hugo Go HTML template, utilizing the try statement for structured error handling. If an error is encountered, it is raised; otherwise, successful retrieval is followed by dynamically rendering an HTML img tag using the resource's RelPermalink, Width, and Height. The snippet illustrates the deprecation of the Err method and the adoption of the try pattern. Dependencies include Hugo 0.141.0 or later due to syntax changes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://example.org/images/a.jpg\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Section Template Using Hugo Go HTML Templates\nDESCRIPTION: This snippet defines a main block for a section template in Hugo using Go HTML Templates. It renders the section's content, retrieves and paginates all pages of type 'posts', iteratively lists them with links using their relative permalinks and link titles, and includes a pagination partial. Dependencies include Hugo's templating system and the existence of the section template file. The input is the Hugo context ('.'), and it expects a site structure with content organized by type; outputs are structured HTML markup for the section listing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/section.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <main>\n    {{ .Content }}\n\n    {{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n    {{ $paginator := .Paginate $pages }}\n\n    {{ range $paginator.Pages }}\n      <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n    {{ end }}\n\n    {{ template \"_internal/pagination.html\" . }}\n  </main>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Output Format in Hugo (TOML)\nDESCRIPTION: This TOML configuration snippet defines a new custom output format named `atom`. It associates the format with the previously defined `application/atom+xml` media type and sets `noUgly` to `true` to prevent `.html` suffix addition even if `uglyURLs` is enabled globally.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[outputFormats.atom]\nmediaType = 'application/atom+xml'\nnoUgly = true\n```\n\n----------------------------------------\n\nTITLE: Filling Dimensions by Cropping and Resizing in Hugo Go Templates\nDESCRIPTION: Uses the `.Fill` method to resize and crop an image resource (`$image`) to exactly match the specified dimensions ('600x400'). Both width and height are required. The crop anchor point can be specified as an option.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_11\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := $image.Fill \"600x400\" }}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Shortcode Directory Structure\nDESCRIPTION: Illustrates the standard directory structure for organizing custom Hugo shortcode templates within the `layouts/shortcodes` directory. Shortcodes can be placed at the root or within subdirectories for better organization (e.g., `diagrams/`, `media/`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\n└── shortcodes/\n    ├── diagrams/\n    │   ├── kroki.html\n    │   └── plotly.html\n    ├── media/\n    │   ├── audio.html\n    │   ├── gallery.html\n    │   └── video.html\n    ├── capture.html\n    ├── column.html\n    ├── include.html\n    └── row.html\n```\n\n----------------------------------------\n\nTITLE: Highlighting Go Code with transform.Highlight in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the transform.Highlight function to highlight Go code in Hugo templates. It shows the basic usage without additional options.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Highlight.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $input := `fmt.Println(\"Hello World!\")` }}\n{{ transform.Highlight $input \"go\" }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Blockquote Render Hook with Citations\nDESCRIPTION: Template that renders blockquotes as HTML figure elements with optional citation and caption support.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/blockquotes.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<figure>\n  <blockquote {{ with .Attributes.cite }}cite=\"{{ . }}\"{{ end }}>\n    {{ .Text }}\n  </blockquote>\n  {{ with .Attributes.caption }}\n    <figcaption class=\"blockquote-caption\">\n      {{ . | safeHTML }}\n    </figcaption>\n  {{ end }}\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Complex API Response Decoding in Hugo\nDESCRIPTION: Complete example showing how to fetch a remote resource from GitHub's API, handle errors, unmarshal JSON, decode base64 content, and render markdown.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/encoding/Base64Decode.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://api.github.com/repos/gohugoio/hugo/readme\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    {{ with . | transform.Unmarshal }}\n      {{ .content | base64Decode | markdownify }}\n    {{ end }}\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Date in Front Matter\nDESCRIPTION: Shows how to set the date field in a Hugo content's front matter. The date is specified in ISO 8601 format with timezone offset.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Date.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Article 1'\ndate = 2023-10-19T00:40:04-07:00\n```\n\n----------------------------------------\n\nTITLE: Reporting Development Environment Status in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use {{ hugo.IsDevelopment }} in a Go HTML template to determine if Hugo is running in development mode. It outputs a boolean value (true or false) based on the runtime environment. No additional dependencies are needed beyond Hugo version 0.120.0 or later. The snippet is typically used for conditional rendering or debugging within templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/IsDevelopment.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.IsDevelopment }} → true/false\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Using Page Resources in Hugo\nDESCRIPTION: Modern alternative to getJSON using .Resources.Get method and transform.Unmarshal to access page-specific JSON resources with improved error handling.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $p := \"books.json\" }}\n{{ with .Resources.Get $p }}\n  {{ $data = . | transform.Unmarshal }}\n{{ else }}\n  {{ errorf \"Unable to get resource %q\" $p }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rebinding Context with with Statement in Hugo\nDESCRIPTION: Shows how to use the with statement to rebind the context (.) in Hugo templates. The example demonstrates testing a variable and executing different code blocks based on its truthiness.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_27\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"foo\" }}\n{{ with $var }}\n  {{ . }} → foo\n{{ else }}\n  {{ print \"var is falsy\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using collections.Union as OR Filter in Where Queries\nDESCRIPTION: Shows how to use the union function to create OR logic in Hugo's where queries. This example combines different filtering criteria to build a complex page selection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Union.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where .Site.RegularPages \"Type\" \"not in\" (slice \"page\" \"about\") }}\n{{ $pages = $pages | union (where .Site.RegularPages \"Params.pinned\" true) }}\n{{ $pages = $pages | intersect (where .Site.RegularPages \"Params.images\" \"!=\" nil) }}\n```\n\n----------------------------------------\n\nTITLE: Generating Pagination Links with PageNumber in Hugo Templates\nDESCRIPTION: This Go HTML template snippet demonstrates creating pagination for posts. It first filters regular pages by type 'posts', then uses the `.Paginate` function to create a paginator object. It iterates through the paginator's `Pagers` collection to generate an unordered list (`<ul>`) of links, where each link points to a specific page (`.URL`) and displays its corresponding page number (`.PageNumber`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/PageNumber.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <ul>\n    {{ range .Pagers }}\n      <li><a href=\"{{ .URL }}\">{{ .PageNumber }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Passing Custom HTTP Headers with Hugo resources.GetRemote in Go HTML Template\nDESCRIPTION: This snippet shows how to pass custom HTTP headers, including Authorization, when fetching a remote resource with resources.GetRemote. The function accepts an options map with headers defined as a key-value dictionary. This allows API access with required authorization tokens. Assumes the presence of the dict function and proper structuring of the headers parameter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://example.org/api\" }}\n{{ $opts := dict\n  \"headers\" (dict \"Authorization\" \"Bearer abcd\")\n}}\n{{ $resource := resources.GetRemote $url $opts }}\n```\n\n----------------------------------------\n\nTITLE: Basic Code Block Render Hook Implementation\nDESCRIPTION: A simple implementation of a code block render hook that uses Hugo's built-in syntax highlighting via transform.HighlightCodeBlock function to render code blocks with Chroma.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/code-blocks.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $result := transform.HighlightCodeBlock . }}\n{{ $result.Wrapped }}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Image Filters Sequentially in Hugo (Go HTML Template)\nDESCRIPTION: This code snippet illustrates applying a sequence of image filters, namely Grayscale and GaussianBlur, to an image resource using Hugo's .Filter method with a filter slice. Filters are stored in a slice and then applied from left to right. Required dependencies include Hugo resources functions and the respective image filters. Outputs an HTML img pointing to the processed image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Filter.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filters := slice\n  images.Grayscale\n  (images.GaussianBlur 8)\n}}\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Filter $filters }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling PostCSS Plugin Based on Hugo Environment (JavaScript)\nDESCRIPTION: Demonstrates how to use the `HUGO_ENVIRONMENT` environment variable (passed by Hugo to the PostCSS process) within `postcss.config.js` to conditionally include a PostCSS plugin (like `purgecss`) only when the environment is not 'development'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/PostProcess.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.HUGO_ENVIRONMENT !== 'development' ? purgecss : null,\n```\n\n----------------------------------------\n\nTITLE: Bundling with js.Build Options, Externals, and Defines (Go HTML Template)\nDESCRIPTION: This example demonstrates advanced js.Build usage with externals, defines for the environment, and a custom target path. It builds a main JS script and outputs a script HTML tag with a defer attribute. Dependencies: external libraries (react, react-dom), defines for process.env, and asset resource existence. Designed for projects requiring fine-tuned JS builds and external module exclusion.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Build.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $externals := slice \"react\" \"react-dom\" }}\n{{ $defines := dict \"process.env.NODE_ENV\" \\`\"development\"\\` }}\n\n{{ $opts := dict \"targetPath\" \"main.js\" \"externals\" $externals \"defines\" $defines }}\n{{ $built := resources.Get \"scripts/main.js\" | js.Build $opts }}\n<script src=\"{{ $built.RelPermalink }}\" defer></script>\n\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output for Lowercase Title Example (html)\nDESCRIPTION: Provides the HTML output for a Hugo template converting a page title to lowercase using conditional rendering. Demonstrates that conditionals and string functions produce transformed output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n  \\n  \\n    <h2>my page title</h2>\\n  \n```\n\n----------------------------------------\n\nTITLE: Accessing Passed Context in a Partial Template - Hugo Go HTML Template\nDESCRIPTION: This snippet shows how to access and render values from the context dictionary within a partial template. The dot binding ('.') gives access to keys such as 'name', 'major', and 'gpa', as well as a nested 'page' object for building links. Returns HTML markup with personalized content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/Include.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n<p>{{ .name }} is majoring in {{ .major }}.</p>\\n<p>Their grade point average is {{ .gpa }}.</p>\\n<p>See <a href=\\\"{{ .page.RelPermalink }}\\\">details.</a></p>\n```\n\n----------------------------------------\n\nTITLE: Listing Basic EXIF Data and All Tags in Hugo (Go Template)\nDESCRIPTION: This snippet demonstrates how to retrieve an image resource using `resources.Get`, access its EXIF data via the `.Exif` method, and display the creation date (`.Date`), GPS coordinates (`.Lat`, `.Long`), and iterate through all available EXIF tags (`.Tags`) using a `range` loop, presenting them in an HTML table. It assumes an image exists at `images/a.jpg`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Exif.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ with .Exif }}\n    <p>Date: {{ .Date }}</p>\n    <p>Lat/Long: {{ .Lat }}/{{ .Long }}</p>\n    {{ with .Tags }}\n      <p>Tags</p>\n      <table>\n        <thead>\n          <tr><th>Tag</th><th>Value</th></tr>\n        </thead>\n        <tbody>\n          {{ range $k, $v := . }}\n          <tr><td>{{ $k }}</td><td>{{ $v }}</td></tr>\n          {{ end }}\n        </tbody>\n      </table>\n    {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Related Pages with Hugo's Related Function - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to display a list of related pages in a Hugo template using the Related method with the current page as the argument. It iterates over the first five related pages, displaying their title and permalink. The code requires Hugo's templating engine and assumes it's used in a layout file such as \"layouts/_default/single.html\". Input is the current page context; output is a list of hyperlinks to related pages within the HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/Related.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.RegularPages.Related . | first 5 }}\n  <p>Related pages:</p>\n  <ul>\n    {{ range . }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Footer Partial (`footer.html`) in Go HTML Template\nDESCRIPTION: Provides an example of a `footer.html` partial template used on spf13.com. It includes basic footer content like copyright information and a link to the Creative Commons license.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n<footer>\n  <div>\n    <p>\n    &copy; 2013-14 Steve Francia.\n    <a href=\"https://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons Attribution\">Some rights reserved</a>;\n    please attribute properly and link back.\n    </p>\n  </div>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Cropping Images with Hugo Resource Method - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use Hugo's .Crop method within a Go HTML Template to crop an image resource to a specified width and height (here, 200x200 pixels) without resizing. It uses the resources.Get function to load the image, then .Crop for cropping, displaying the result with dynamic dimensions. Dependencies include Hugo's resource processing methods within the templating context. The input is the image path and desired crop size (width x height); output is an HTML image tag using the processed image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Crop.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Crop \"200x200\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Custom Pagination Partial Invocation - Hugo Go HTML Template\nDESCRIPTION: This example indicates how to call a custom pagination navigation component by referencing a partial template ('pagination.html'). The partial must be placed in the 'layouts/partials' directory. It uses Hugo's partial function with the current context, and renders any user-defined pagination UI logic. Outputs HTML navigation as implemented by the developer.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"pagination.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Calculating Resource Content Length in Hugo Template\nDESCRIPTION: Illustrates how to obtain the size in bytes of a resource's content by fetching the resource with `resources.Get`, accessing `.Content`, and passing it to the `len` template function. Requires the `quotations/kipling.txt` resource.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Content.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"quotations/kipling.txt\" }}\n  {{ .Content | len }} → 42\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling a Remote JSON Resource in Hugo\nDESCRIPTION: Shows how to fetch and unmarshal a JSON file from a remote URL using resources.GetRemote.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Unmarshal.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $url := \"https://example.org/books.json\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    {{ $data = . | transform.Unmarshal }}\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n\n{{ range where $data \"author\" \"Victor Hugo\" }}\n  {{ .title }} → Les Misérables\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Listing Related Content using the Related Method in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to include a list of up to five related pages in a Hugo template partial using the Related method. It iterates through the resulting pages and generates a list of links to their permalinks and link titles. This requires Hugo's Go HTML templating, access to the site context (site.RegularPages), and works with the default related content configuration unless customized. The snippet takes the current page as context and outputs an unordered HTML list to the template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/related-content.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with site.RegularPages.Related . | first 5 }}\\n  <p>Related content:</p>\\n  <ul>\\n    {{ range . }}\\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Limiting Collections Using First in Hugo - Go HTML Template\nDESCRIPTION: This example demonstrates how to use the Hugo template function first to iterate over the first 5 elements of the .Pages collection and renders each page's summary. It requires Hugo templating and assumes that .Pages is a valid iterable collection. The key parameter is the integer specifying how many items to retrieve (5), and the output is the rendered summary for each of those pages. The code must be placed within a Go HTML Template context in a Hugo project.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/First.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range first 5 .Pages }}\n  {{ .Render \\\"summary\\\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Menu Entry Parameters in Go Template\nDESCRIPTION: This Go HTML Template snippet, intended for a partial like `layouts/partials/menu.html`, illustrates how to use custom parameters defined directly on menu entries (via site config or front matter). It iterates through the 'main' menu and uses the `with` function to conditionally add a `class` attribute to the anchor tag (`<a>`) if a `class` parameter is defined in the menu entry's `.Params`. This allows for styling or adding specific attributes to menu items based on their definition.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/menu.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- range site.Menus.main }}\n  <a {{ with .Params.class -}} class=\"{{ . }}\" {{ end -}} href=\"{{ .URL }}\">\n    {{ .Name }}\n  </a>\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom 404 Page Template in Hugo Using Go HTML Templates\nDESCRIPTION: This snippet shows how to define a 404 error page template in Hugo by placing a Go HTML template file (`404.html`) in the `layouts` directory. The template uses Hugo's templating syntax to present a user-friendly error message and provides a link to return to the homepage via `.Site.Home.RelPermalink`. No external dependencies are required beyond the Hugo static site generator. The template expects to be rendered for HTTP 404 errors, and supports further customization via standard Hugo template variables. Outputs static HTML for missing pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/404.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \\\"main\\\" }}\\n  <h1>404 Not Found</h1>\\n  <p>The page you requested cannot be found.</p>\\n  <p>\\n    <a href=\\\"{{ .Site.Home.RelPermalink }}\\\">\\n      Return to the home page\\n    </a>\\n  </p>\\n{{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by Boolean Value - go-html-template\nDESCRIPTION: Filters pages in Hugo by checking the 'Params.exclude' boolean front matter using the 'eq' operator. This returns pages where the 'exclude' parameter is explicitly set to false. The list will not include pages where 'exclude' is undefined. Requires Hugo and the go-html-template engine. Inputs: .Site.RegularPages collection. Output: HTML list of qualifying pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_15\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\\n  {{ range where .Site.RegularPages \"Params.exclude\" \"eq\" false }}\\n    <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\\n  {{ end }}\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Render Result Example After Processing Shortcodes (HTML)\nDESCRIPTION: This snippet demonstrates the output HTML produced by Hugo after calling RenderShortcodes on a content file. It shows that the 'ref' shortcode was expanded to a full URL and that surrounding emphasized Markdown was preserved in the output. This example is useful for understanding the transformation Hugo applies after processing all included shortcodes in a content context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RenderShortcodes.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nhttps://example.org/privacy/\n\nAn *emphasized* word.\n```\n\n----------------------------------------\n\nTITLE: Accessing Disqus Shortname in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to access the Disqus shortname configured for the site via the Hugo configuration object from within a Go HTML template. No external dependencies are required except the standard Hugo templating engine. The key parameter, Disqus.Shortname, should be defined in the configuration under Services. The expected output is the shortname string, and it is typically used within layouts to enable Disqus comments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/services.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Config.Services.Disqus.Shortname }}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Formatting Specific EXIF Fields in Hugo Go Templates\nDESCRIPTION: Accesses specific EXIF fields (Date, ApertureValue, BrightnessValue, etc.) from an image resource (`$image`) via the `.Exif.Tags` map. Nested `with` blocks ensure fields exist before access. It uses `time.Format` for dates and `lang.FormatNumber` for numeric formatting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_18\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with $image.Exif }}\n  <ul>\n    {{ with .Date }}<li>Date: {{ .Format \"January 02, 2006\" }}</li>{{ end }}\n    {{ with .Tags.ApertureValue }}<li>Aperture: {{ lang.FormatNumber 2 . }}</li>{{ end }}\n    {{ with .Tags.BrightnessValue }}<li>Brightness: {{ lang.FormatNumber 2 . }}</li>{{ end }}\n    {{ with .Tags.ExposureTime }}<li>Exposure Time: {{ . }}</li>{{ end }}\n    {{ with .Tags.FNumber }}<li>F Number: {{ . }}</li>{{ end }}\n    {{ with .Tags.FocalLength }}<li>Focal Length: {{ . }}</li>{{ end }}\n    {{ with .Tags.ISOSpeedRatings }}<li>ISO Speed Ratings: {{ . }}</li>{{ end }}\n    {{ with .Tags.LensModel }}<li>Lens Model: {{ . }}</li>{{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Current Time with time.Format in Hugo\nDESCRIPTION: This snippet demonstrates how to format and localize the time.Time value returned by time.Now using the time.Format function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/Now.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ time.Now | time.Format \"Jan 2006\" }}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Image Resource (Error on Not Found) in Hugo Go Templates\nDESCRIPTION: Retrieves an image 'sunset.jpg' using `GetMatch` (which supports wildcards) and renders it using an `<img>` tag. It uses the image resource's `.RelPermalink`, `.Width`, and `.Height` properties. This code will cause a build error if the image resource is not found.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := .Resources.GetMatch \"sunset.jpg\" }}\n<img src=\"{{ $image.RelPermalink }}\" width=\"{{ $image.Width }}\" height=\"{{ $image.Height }}\">\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency by Locale in Hugo Go HTML Template\nDESCRIPTION: Go HTML template code demonstrating currency localization. It uses Hugo's `lang.FormatCurrency` function to format a numeric value (512.5032). The function takes the number of decimal places (2) and the currency code (\"USD\") as arguments, rendering the output according to the current language's currency formatting conventions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ 512.5032 | lang.FormatCurrency 2 \"USD\" }}\n```\n\n----------------------------------------\n\nTITLE: Creating Cache Variants in Hugo partialCached - Go HTML Template\nDESCRIPTION: This example demonstrates passing additional arguments to partialCached for cache key variants. Here, the rendered partial is cached based on both the current context and the section of the page. Useful for templates where output depends on page section, avoiding unnecessary re-renders. Requires a partial template ('footer.html'), context dot (.), and .Section variable available in the template context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/IncludeCached.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partialCached \\\"footer.html\\\" . .Section }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Date using Hugo GroupByDate - go-html-template\nDESCRIPTION: This snippet demonstrates how to group Hugo pages by date formatted as 'January 2006' using the GroupByDate method in a Hugo template. The outer range iterates over the groups, displaying the group key (e.g., the month and year), and the inner range lists each page in the group with links. Requires Hugo templating; expects the '.Pages' collection to be available in the current scope. The input is the list of pages, and the output is a grouped and enumerated HTML structure. The default sorting is descending by date based on site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByDate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByDate \\\"January 2006\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Shortcode with Error Handling (Go HTML Template)\nDESCRIPTION: Enhances the `image.html` shortcode by adding robust error handling. It checks for the presence of required named parameters (`path`, `width`) using nested `with` statements and the `.Get` method. If a required parameter is missing, it calls `errorf` to halt the build with an informative message including the shortcode name (`$.Name`) and position (`$.Position`). It also uses `warnf` if the image resource specified by `path` cannot be found. A default empty `alt` attribute is provided if the `alt` parameter is omitted.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- with .Get \"path\" }}\n  {{- with $r := $.Page.Resources.Get ($.Get \"path\") }}\n    {{- with $.Get \"width\" }}\n      {{- with $r.Process (printf \"resize %dx wepb\" ($.Get \"width\" )) }}\n        {{- $alt := or ($.Get \"alt\") \"\" -}}\n        <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"{{ $alt }}\">\n      {{- end }}\n    {{- else }}\n      {{- errorf \"The %q shortcode requires a 'width' argument: see %s\" $.Name $.Position }}\n    {{- end }}\n  {{- else }}\n    {{- warnf \"The %q shortcode was unable to find %s: see %s\" $.Name ($.Get \"path\") $.Position }}\n  {{- end }}\n{{- else }}\n  {{- errorf \"The %q shortcode requires a 'path' argument: see %s\" .Name .Position }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Accessing nested parameters in collections.Where\nDESCRIPTION: Example showing how to filter pages based on a nested parameter in the page's Params map.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $result := where .Site.RegularPages \"Params.foo\" \"bar\" }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Matched Global Image Resources in Go Hugo Template\nDESCRIPTION: This Go Hugo Template snippet uses the `resources.Match` function with the glob pattern \"images/*.jpg\" to find all JPG files directly within the 'images' folder of the global 'assets' directory or its mounts. It then iterates through the returned collection of resources using `range`. For each matched image resource, it generates an HTML `<img>` tag, setting the `src`, `width`, `height`, and `alt` attributes using the resource's properties (`.RelPermalink`, `.Width`, `.Height`). This function operates on global resources and uses case-insensitive glob matching.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/Match.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range resources.Match \"images/*.jpg\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Entries in Hugo Page Front Matter (TOML)\nDESCRIPTION: These TOML examples demonstrate defining menu entries directly within a page's front matter using the `menus` key. You can assign a page to a single menu (using a string), multiple menus (using an array), or define advanced properties like `parent`, `weight`, `pre` (for prepended HTML), and custom `params` within a specific menu's table (`[menus.main]`). This provides granular control over how and where a page appears in navigation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/menus.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Add page to the 'main' menu\ntitle = 'About'\nmenus = 'main'\n```\n\nLANGUAGE: toml\nCODE:\n```\n# Add page to 'main' and 'footer' menus\ntitle = 'Contact'\nmenus = ['main','footer']\n```\n\nLANGUAGE: toml\nCODE:\n```\n# Define advanced properties for the 'main' menu entry\ntitle = 'Software'\n[menus.main]\nparent = 'Products'\nweight = 20\npre = '<i class=\"fa-solid fa-code\"></i>'\n[menus.main.params]\nclass = 'center'\n```\n\n----------------------------------------\n\nTITLE: Querying Relative References with Hugo RelRef Method in Go HTML Templates\nDESCRIPTION: Shows how to use the RelRef method in Hugo Go HTML Templates to generate language- and format-aware relative URLs. The snippets require Hugo's templating runtime and accept an options map ('dict') specifying 'path', 'lang', and 'outputFormat'. Inputs are configuration maps; output is a relative URL string suitable for inserting into generated HTML. Assumes the page context ('.') supports RelRef and that the paths exist in content. Limitations include dependency on existing content structure and language configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/RelRef.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"path\" \"/books/book-1\" }}\n{{ .RelRef $opts }} → /en/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }}\n{{ .RelRef $opts }} → /de/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }}\n{{ .RelRef $opts }} → /de/books/book-1/index.json\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Date and Sorting by Title using Hugo GroupByDate - go-html-template\nDESCRIPTION: This snippet groups Hugo pages by date ('January 2006') and then sorts each group of pages by their title using the ByTitle method. It builds upon the GroupByDate pattern, outputting the group key and listing links to each page in title order. Dependencies include Hugo templating methods; input is a page collection with title metadata present. Output is grouped and alphabetically sorted lists per date group.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByDate.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByDate \\\"January 2006\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages.ByTitle }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .Title }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency using lang.FormatCurrency in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the lang.FormatCurrency function in a Hugo Go HTML template to format a numeric value as currency with a given precision and currency code. Requires Hugo with language/localization support enabled. Inputs include a numeric value, the number of decimal places (precision), and an ISO currency code (e.g., 'USD'). Outputs a localized string, such as '$512.50'. Limitation: follows current language/region settings for formatting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/FormatCurrency.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ 512.5032 | lang.FormatCurrency 2 \"USD\" }} → $512.50\n```\n\n----------------------------------------\n\nTITLE: Complete ByCount Template Example\nDESCRIPTION: A complete template example showing how to display taxonomy terms with their counts and associated pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/ByCount.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range $taxonomyObject.ByCount }}\n  <h2><a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a> ({{ .Count }})</h2>\n  <ul>\n    {{ range .Pages.ByTitle }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Date Normalization Examples with AddDate in Hugo Templates\nDESCRIPTION: Illustrates the date normalization behavior when adding months or years results in invalid dates. It shows how Hugo adjusts the final date when the resulting day doesn't exist in the target month.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/AddDate.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d := \"2023-01-31\" | time.AsTime }}\n{{ $d.AddDate 0 1 0 | time.Format \"2006-01-02\" }} → 2023-03-03\n\n{{ $d := \"2024-01-31\" | time.AsTime }}\n{{ $d.AddDate 0 1 0 | time.Format \"2006-01-02\" }} → 2024-03-02\n\n{{ $d := \"2024-02-29\" | time.AsTime }}\n{{ $d.AddDate 1 0 0 | time.Format \"2006-01-02\" }} → 2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Appending Slices with hugo.Store.Add - Go HTML Template\nDESCRIPTION: Shows how hugo.Store.Add can append one slice to another for a given key. Initially sets a slice, then adds more slice data. Input: key, initial slice, additional slice. Output: single concatenated slice. Requires both existing and added values to be slice types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Store.Set \"greetings\" (slice \"Hello\") }}\n{{ hugo.Store.Add \"greetings\" (slice \"Welcome\" \"Cheers\") }}\n{{ hugo.Store.Get \"greetings\" }} → [Hello Welcome Cheers]\n```\n\n----------------------------------------\n\nTITLE: Replacing Patterns Using replaceRE in Hugo Templates - Go HTML Template\nDESCRIPTION: Shows how to use Hugo's replaceRE function to replace all instances of a specified regular expression pattern in a string. This example replaces sequences of two or more dashes in a string with a single dash. The only dependency is the Hugo templating engine; input parameters include the pattern, replacement string, and target string. The output is the modified string after replacements are applied.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/ReplaceRE.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := \"a-b--c---d\" }}\\n{{ replaceRE `(-{2,})` \"-\" $s }} → a-b-c-d\n```\n\n----------------------------------------\n\nTITLE: Generating and Publishing site.json via Hugo Template - Go HTML Template\nDESCRIPTION: This Go HTML Template snippet creates a site.json file in the Hugo public directory with metadata such as build date, Hugo version, and last modification date. It constructs a dictionary of metadata, serializes it to JSON using the jsonify function, creates a resource using resources.FromString, and publishes it with the .Publish method. Prerequisites: Hugo site context, access to hugo.Version, now, site.Lastmod, and the dict and jsonify template functions. Inputs include the page context (dot) and the template logic. The output is a published site.json in the public directory root. Assumes use in baseof.html or similar layout; only publishes when rendering the home page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/FromString.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if .IsHome }}\n  {{ $rfc3339 := \"2006-01-02T15:04:05Z07:00\" }}\n  {{ $m := dict\n    \"hugo_version\" hugo.Version\n    \"build_date\" (now.Format $rfc3339)\n    \"last_modified\" (site.Lastmod.Format $rfc3339)\n  }}\n  {{ $json := jsonify $m }}\n  {{ $r := resources.FromString \"site.json\" $json }}\n  {{ $r.Publish }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Menus Using the Children Method in Hugo Templates\nDESCRIPTION: Template code demonstrating how to render a hierarchical menu structure by checking for child menu entries with HasChildren and iterating through the Children collection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Children.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li>\n      <a href=\"{{ .URL }}\">{{ .Name }}</a>\n      {{ if .HasChildren }}\n        <ul>\n          {{ range .Children }}\n            <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n          {{ end }}\n        </ul>\n      {{ end }}\n    </li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing a React-based Runner Script for js.Batch in JavaScript\nDESCRIPTION: This JavaScript code defines an example runner function (`Run`) exported as default, designed to work with `js.Batch`. It imports React and ReactDOM, iterates through the scripts and instances provided in the `group` data structure, finds corresponding DOM elements by a conventional ID format (`script.id-instance.id`), and renders React components using the script's binding and instance parameters via `React.createElement` and `ReactDOM.createRoot().render()`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as ReactDOM from 'react-dom/client';\nimport * as React from 'react';\n\nexport default function Run(group) {\n  console.log('Running react-create-elements.js', group);\n  const scripts = group.scripts;\n  for (const script of scripts) {\n    for (const instance of script.instances) {\n      /* This is a convention in this project. */\n      let elId = `${script.id}-${instance.id}`;\n      let el = document.getElementById(elId);\n      if (!el) {\n        console.warn(`Element with id ${elId} not found`);\n        continue;\n      }\n      const root = ReactDOM.createRoot(el);\n      const reactEl = React.createElement(script.binding, instance.params);\n      root.render(reactEl);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Related Content Indices with Options Map - Go HTML Template\nDESCRIPTION: This snippet shows how to pass a dictionary of options to Hugo's Related method, allowing fine-tuning of which indices (such as \"tags\" or \"keywords\") are used to determine related content. The snippet takes the current page as the document input and restricts related content matching to the specified indices. Dependencies include Hugo's template system and the expectation that some indices are configured. Input is a dictionary with \"document\" and \"indices\"; output is a filtered list of related pages for display.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/Related.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict\n  \"document\" .\n  \"indices\" (slice \"tags\" \"keywords\")\n}}\n{{ with .Site.RegularPages.Related $opts | first 5 }}\n  <p>Related pages:</p>\n  <ul>\n    {{ range . }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Handling Both Named and Positional Parameters (Go HTML Template)\nDESCRIPTION: Shows how to create a flexible Hugo shortcode template (`layouts/shortcodes/image.html`) that can accept either named or positional arguments. It uses the `.IsNamedParams` boolean method to check how the shortcode was called. Based on the result, the `cond` function (an alias for `compare.Conditional`) is used to retrieve the parameter value either by its name (`.Get \"paramName\"`) or by its position (`.Get index`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_11\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $path := cond (.IsNamedParams) (.Get \"path\") (.Get 0) }}\n{{ $width := cond (.IsNamedParams) (.Get \"width\") (.Get 1) }}\n{{ $alt := cond (.IsNamedParams) (.Get \"alt\") (.Get 2) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML block defines front matter metadata for a Hugo content page. It sets the main page title ('Lang functions'), the link title used in menus ('lang'), a description summarizing the page content, and placeholders for categories and keywords. Hugo uses this metadata to render the page correctly within the site structure and for SEO purposes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Lang functions\nlinkTitle: lang\ndescription: Use these functions to adapt your site to meet language and regional requirements.\ncategories: []\nkeywords: []\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Breadcrumb Navigation using Hugo Ancestors\nDESCRIPTION: This Go HTML template snippet demonstrates how to create breadcrumb navigation in Hugo. It iterates over the reversed list of ancestors for the current page (`.Ancestors.Reverse`), creating list items with links for each ancestor and marking the current page as active. It relies on Hugo's page variables like `.RelPermalink` and `.LinkTitle`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/sections.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{file=\"layouts/partials/breadcrumb.html\"}\n<nav aria-label=\"breadcrumb\" class=\"breadcrumb\">\n  <ol>\n    {{ range .Ancestors.Reverse }}\n      <li>\n        <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n      </li>\n    {{ end }}\n    <li class=\"active\">\n      <a aria-current=\"page\" href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n    </li>\n  </ol>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific EXIF Tag Values in Hugo (Go Template)\nDESCRIPTION: This example shows retrieving an image resource (`resources.Get`) and accessing specific EXIF tag values through the `.Exif.Tags` collection. It demonstrates conditional rendering using `with` for each tag (Date, ApertureValue, BrightnessValue, ExposureTime, FNumber, FocalLength, ISOSpeedRatings, LensModel) and formatting the date using `time.Format` and numeric values using `lang.FormatNumber`. Requires the image `images/a.jpg`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Exif.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ with .Exif }}\n    <ul>\n      {{ with .Date }}<li>Date: {{ .Format \"January 02, 2006\" }}</li>{{ end }}\n      {{ with .Tags.ApertureValue }}<li>Aperture: {{ lang.FormatNumber 2 . }}</li>{{ end }}\n      {{ with .Tags.BrightnessValue }}<li>Brightness: {{ lang.FormatNumber 2 . }}</li>{{ end }}\n      {{ with .Tags.ExposureTime }}<li>Exposure Time: {{ . }}</li>{{ end }}\n      {{ with .Tags.FNumber }}<li>F Number: {{ . }}</li>{{ end }}\n      {{ with .Tags.FocalLength }}<li>Focal Length: {{ . }}</li>{{ end }}\n      {{ with .Tags.ISOSpeedRatings }}<li>ISO Speed Ratings: {{ . }}</li>{{ end }}\n      {{ with .Tags.LensModel }}<li>Lens Model: {{ . }}</li>{{ end }}\n    </ul>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages by Weight in Hugo List Template - Go HTML Template\nDESCRIPTION: This snippet ranges over the pages in the current section, sorted by their 'weight' parameter in descending order, outputting a level-two header and link for each page's LinkTitle. It requires Hugo's templating language and assumes .Pages context is available. Inputs are regular pages within a section, and the output is HTML markup for navigation or indexes. This pattern underpins navigation logic by leveraging page weights for sort order.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/page/nextinsection-and-previnsection.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByWeight }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using a Value-Returning Partial in a Template\nDESCRIPTION: Example showing how to use a partial that returns a boolean value in a conditional statement to control template flow.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/return.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $number := 42 }}\n{{ if partial \"is-even.html\" $number }}\n  <p>{{ $number }} is even</p>\n{{ else }}\n  <p>{{ $number }} is odd</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Copying a Resource Using Hugo Templates - Go HTML Template\nDESCRIPTION: Retrieves an image resource using \"resources.Get\", copies it to a new target path via \"resources.Copy\", and outputs an HTML <img> element with properties for the copied resource. Requires Hugo site generation context with configured resource pipelines. The code expects a source image and creates a copy at the specified relative path. Parameters include the resource source path and the new target path. The resulting resource's attributes (RelPermalink, Width, Height) are used for dynamic HTML generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/Copy.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ with resources.Copy \"img/new-image-name.jpg\" . }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Date and Sorting Pages Within Groups by Title\nDESCRIPTION: This example demonstrates grouping pages by 'eventDate' (default descending order for groups) and then sorting the pages *within* each group alphabetically by their title using `.Pages.ByTitle`. The outer loop iterates through the date groups, and the inner loop iterates through the title-sorted pages within that specific group.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByParamDate.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByParamDate \"eventDate\" \"January 2006\" }}\n  <p>{{ .Key }}</p>\n  <ul>\n    {{ range .Pages.ByTitle }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Paginated Pages in Hugo with Go HTML Template\nDESCRIPTION: This snippet demonstrates using Hugo's Paginator within a template file (e.g., layouts/_default/list.html) to iterate through the paginated collection of regular pages provided in the page context. It accesses each paginated page's relative permalink and link title to create headings with navigation links. The included template statement renders the built-in pagination navigation UI. Requires a Hugo site and template context; parameters are implicitly derived from the current page. The paginator's size is controlled by the site configuration. Input is the page context; output is rendered HTML for the paginated list and links. Filtering and sorting cannot be applied using Paginator, as it operates on the existing collection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Paginator.md#2025-04-23_snippet_0\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n```go-html-template {file=\\\"layouts/_default/list.html\\\"}\n{{ range .Paginator.Pages }}\n  <h2><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n{{ template \\\"_internal/pagination.html\\\" . }}\n```\n```\n\n----------------------------------------\n\nTITLE: Sorting Pages by Expiry Date Hugo Go HTML Templates\nDESCRIPTION: This snippet illustrates how to iterate over a collection of pages sorted by their expiry date in ascending order using Hugo templating. Dependencies include a properly configured Hugo site with the expiryDate field in front matter. The .Pages.ByExpiryDate method provides pre-sorted pages, and key properties like .RelPermalink and .LinkTitle are used for rendering links and headings. Input is a .Pages collection from the page context; output is an HTML fragment listing page links sorted by earliest expiry.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByExpiryDate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByExpiryDate }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Cropping/Resizing with .Fill Options in Go HTML Template\nDESCRIPTION: This example illustrates using the `.Fill` method with advanced processing specifications. It fetches the image `images/original.jpg` and applies `.Fill` with a detailed spec string: \"200x200 top webp q85 lanczos\". This crops/resizes the image to 200x200, anchors the crop to the top, converts the output format to WebP, sets the quality to 85, and uses the Lanczos resampling filter. The resulting `<img>` tag displays the processed image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Fill.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Fill \"200x200 top webp q85 lanczos\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote Resource Title Hash in Hugo Go HTML Template\nDESCRIPTION: Demonstrates retrieving the title of a remote resource in Hugo using Go HTML template syntax. The resource is fetched from a remote URL via resources.GetRemote, and its Title method returns a hashed file name. This provides a way to reference remote assets with consistent file names. Inputs are remote URLs, outputs are hashed file titles as generated by Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Title.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.GetRemote \\\"https://example.org/images/a.jpg\\\" }}\n  {{ .Title }} → /a_18432433023265451104.jpg\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Fitting an Image to Dimensions in Hugo Go Templates\nDESCRIPTION: Uses the `.Fit` method to downscale an image resource (`$image`) to fit within the specified dimensions ('600x400') while maintaining the original aspect ratio. Both width and height must be provided.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := $image.Fit \"600x400\" }}\n```\n\n----------------------------------------\n\nTITLE: Section Template with Pagination - Hugo Go HTML Template\nDESCRIPTION: This Hugo template snippet performs pagination over the built-in '.Pages' collection, rendering a header and link for each. It uses the Paginate method and calls the embedded pagination template for controls. Appropriate for use in a section or list template in a Hugo project. Requires standard Hugo page variables and outputs paged HTML lists with navigation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range (.Paginate .Pages).Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ template \"_internal/pagination.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Parsing a Time String and Converting to time.Time with Hugo time.AsTime (Go Templates)\nDESCRIPTION: Demonstrates using the Hugo 'time.AsTime' function to parse an ISO-8601 formatted date/time string within a Go HTML template and convert it to a time.Time value. Requires Hugo's templating environment and expects a valid string date/time input (e.g., '2023-10-15T13:18:50-07:00'). The output is a Go time.Time object reflecting the provided time string; invalid or unparsable strings may produce errors or fallback behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/AsTime.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := \"2023-10-15T13:18:50-07:00\" }}\n{{ time.AsTime $t }} → 2023-10-15 13:18:50 -0700 PDT (time.Time)\n```\n\n----------------------------------------\n\nTITLE: Conditional 'Read More' Link based on Summary Truncation - Hugo Go HTML Template\nDESCRIPTION: This snippet extends the previous example by conditionally displaying a 'Read more...' link when the content has been truncated by the summary. It uses Hugo's .Truncated property of the Page object, which is true when the summary is auto-generated due to content length exceeding the summary divider. No external dependencies are needed, but this template must be used in a Hugo environment. Inputs are the current page and its properties, and the output is a list of page headings, summaries, and optionally a 'Read more...' link.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Summary.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages }}\\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n  {{ .Summary }}\\n  {{ if .Truncated }}\\n    <a href=\"{{ .RelPermalink }}\">Read more...</a>\\n  {{ end }}\\n{{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Iterating Sorted Pages by Ascending Weight in Go HTML Template\nDESCRIPTION: This Go HTML template snippet demonstrates how to loop through a collection of Hugo pages (`.Pages`) sorted by their `weight` front matter parameter in ascending order (lighter items first). It uses the `ByWeight` method and displays each page's title as a link using `.LinkTitle` and `.RelPermalink`. Pages require a non-zero integer `weight` in their front matter; unweighted or zero-weighted pages appear last.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByWeight.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByWeight }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Render Hook Template in Hugo\nDESCRIPTION: A complete template implementation for a table render hook that matches the GitHub Flavored Markdown specification. This template handles table attributes, headers with alignment, and body cells with proper alignment styling.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/tables.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<table\n  {{- range $k, $v := .Attributes }}\n    {{- if $v }}\n      {{- printf \" %s=%q\" $k $v | safeHTMLAttr }}\n    {{- end }}\n  {{- end }}>\n  <thead>\n    {{- range .THead }}\n      <tr>\n        {{- range . }}\n          <th\n            {{- with .Alignment }}\n              {{- printf \" style=%q\" (printf \"text-align: %s\" .) | safeHTMLAttr }}\n            {{- end -}}\n          >\n            {{- .Text -}}\n          </th>\n        {{- end }}\n      </tr>\n    {{- end }}\n  </thead>\n  <tbody>\n    {{- range .TBody }}\n      <tr>\n        {{- range . }}\n          <td\n            {{- with .Alignment }}\n              {{- printf \" style=%q\" (printf \"text-align: %s\" .) | safeHTMLAttr }}\n            {{- end -}}\n          >\n            {{- .Text -}}\n          </td>\n        {{- end }}\n      </tr>\n    {{- end }}\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination for Multilingual Hugo Sites in TOML\nDESCRIPTION: This TOML snippet demonstrates configuring the pagination settings for multiple languages in a Hugo static site. It defines content directories, language codes, directions, weights, and specifies unique pagination options for English and German (such as disableAliases, pagerSize, and path). Dependencies include a Hugo setup supporting multilingual configuration and knowledge of TOML syntax. The key parameters control per-language pagination behavior, such as disabling alias generation and setting custom URL paths for pager pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[languages.en]\ncontentDir = 'content/en'\nlanguageCode = 'en-US'\nlanguageDirection = 'ltr'\nlanguageName = 'English'\nweight = 1\n[languages.en.pagination]\ndisableAliases = true\npagerSize = 10\npath = 'page'\n[languages.de]\ncontentDir = 'content/de'\nlanguageCode = 'de-DE'\nlanguageDirection = 'ltr'\nlanguageName = 'Deutsch'\nweight = 2\n[languages.de.pagination]\ndisableAliases = true\npagerSize = 20\npath = 'blatt'\n```\n\n----------------------------------------\n\nTITLE: Using Default Function with Set Values\nDESCRIPTION: Examples demonstrating how the default function returns the second argument when it is set. Shows behavior with numbers, strings, maps, slices, and boolean values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Default.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ default 42 1 }} → 1\n{{ default 42 \"foo\" }} → foo\n{{ default 42 (dict \"k\" \"v\") }} → map[k:v]\n{{ default 42 (slice \"a\" \"b\") }} → [a b]\n{{ default 42 true }} → true\n\n<!-- As noted above, the boolean \"false\" is considered set -->\n{{ default 42 false }} → false\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output for Book 1 Translations (HTML)\nDESCRIPTION: Shows the expected HTML output generated by the Go HTML template when rendering the \"Book 1\" page on the English site. It displays an unordered list (`<ul>`) containing links (`<a>`) to the German (`de`) and French (`fr`) translations of \"Book 1\", including the correct relative permalinks (`/de/books/book-1/`, `/fr/books/book-1/`) and `hreflang` attributes (`de-DE`, `fr-FR`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Translations.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/de/books/book-1/\" hreflang=\"de-DE\">Book 1 (Deutsch)</a></li>\n  <li><a href=\"/fr/books/book-1/\" hreflang=\"fr-FR\">Book 1 (Français)</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Iterating Sorted Pages by Descending Weight in Go HTML Template\nDESCRIPTION: This Go HTML template snippet shows how to loop through a collection of Hugo pages (`.Pages`) sorted by their `weight` front matter parameter in descending order (heavier items first). It chains the `Reverse` method to `ByWeight` and displays each page's title as a link using `.LinkTitle` and `.RelPermalink`. Pages require a non-zero integer `weight` in their front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByWeight.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByWeight.Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with PurgeCSS and Autoprefixer (JavaScript)\nDESCRIPTION: Defines a PostCSS configuration (`postcss.config.js`) that includes the Autoprefixer plugin and conditionally includes the PurgeCSS plugin based on the `HUGO_ENVIRONMENT` variable. PurgeCSS is configured to use `hugo_stats.json` to determine which CSS selectors, classes, and IDs to keep.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/PostProcess.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst autoprefixer = require('autoprefixer');\nconst purgeCSSPlugin = require('@fullhuman/postcss-purgecss').default;\n\nconst purgecss = purgeCSSPlugin({\n  content: ['./hugo_stats.json'],\n  defaultExtractor: content => {\n    const els = JSON.parse(content).htmlElements;\n    return [\n      ...(els.tags || []),\n      ...(els.classes || []),\n      ...(els.ids || []),\n    ];\n  },\n  // https://purgecss.com/safelisting.html\n  safelist: []\n});\n\nmodule.exports = {\n  plugins: [\n    process.env.HUGO_ENVIRONMENT !== 'development' ? purgecss : null,\n    autoprefixer,\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Resize Image Filter in Hugo go-html-template\nDESCRIPTION: Defines an image filter using images.Process to resize an image to 300 pixels width. This filter can be applied within Hugo templates to transform images. No external dependencies are required aside from a Hugo project using the images module. The argument \\\"resize 300x\\\" specifies the resize action and width, where the height is automatically adjusted to maintain aspect ratio. The resulting filter can be applied to image resources within a template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"resize 300x\" }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Link Render Hook with External Link Detection\nDESCRIPTION: A link render hook template that adds a 'rel' attribute set to 'external' for external links by parsing the URL to determine if it's absolute.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/links.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- $u := urls.Parse .Destination -}}\n<a href=\"{{ .Destination | safeURL }}\"\n  {{- with .Title }} title=\"{{ . }}\"{{ end -}}\n  {{- if $u.IsAbs }} rel=\"external\"{{ end -}}\n>\n  {{- with .Text }}{{ . }}{{ end -}}\n</a>\n{{- /* chomp trailing newline */ -}}\n```\n\n----------------------------------------\n\nTITLE: Concise Conditional Image Rendering in Hugo Go Templates\nDESCRIPTION: A more concise version of conditional image rendering. It combines the resource retrieval (`.Resources.GetMatch`) directly within the `with` block. If the image is found, its context is passed into the block for rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.GetMatch \"sunset.jpg\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Image Filters Sequentially with Hugo images.Filter in Go HTML Template\nDESCRIPTION: This snippet illustrates how to apply multiple image filters (Grayscale and GaussianBlur) in sequence using Hugo's images.Filter function within a Go HTML template. Filters are composed into a slice and then passed to images.Filter along with the image resource. The resulting filtered image is rendered with its relevant attributes. Dependencies include Hugo, configured image filters, and a source image file. Inputs are the image resource and a slice of filters; output is the processed image ready for use in the template. This technique allows for flexible filter chaining.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Filter.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filters := slice\n  images.Grayscale\n  (images.GaussianBlur 8)\n}}\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with images.Filter $filters . }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Section (Descending) in Go HTML Template\nDESCRIPTION: This snippet shows how to use the `GroupBy` function in a Hugo template to group pages by their 'Section' field, explicitly sorting the groups in descending order. It iterates through the sorted groups, displays the section key, and then lists the pages within each group with their links. The 'desc' argument specifies the descending sort order.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupBy.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupBy \"Section\" \"desc\" }}\n  <p>{{ .Key }}</p>\n  <ul>\n    {{ range .Pages }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Parameter in Hugo Templates (Descending)\nDESCRIPTION: This Go Hugo Template snippet shows how to group pages (`.Pages`) by the 'color' front matter parameter and sort the groups in descending order. It uses the `GroupByParam` method with the second argument set to \"desc\". The outer `range` iterates through each group, ordered descendingly by the key (`.Key`), and the inner `range` lists the pages within each group, displaying their link titles and relative permalinks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByParam.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByParam \"color\" \"desc\" }}\n  <p>{{ .Key | title }}</p>\n  <ul>\n    {{ range .Pages }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Custom date comparison with range and conditional\nDESCRIPTION: Alternative approach for date comparison when working with YAML, JSON, or quoted TOML date values, using range and conditional logic.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_11\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $events := where .Site.RegularPages \"Type\" \"events\" }}\n{{ $futureEvents := slice }}\n{{ range $events }}\n  {{ if gt (time.AsTime .Params.eventDate) now }}\n    {{ $futureEvents = $futureEvents | append . }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using Logical Operators in Hugo Templates\nDESCRIPTION: Demonstrates how to use the and and or logical operators in Hugo templates. The example shows how to evaluate multiple boolean conditions and set a result based on the outcome.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_24\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $v1 := true }}\n{{ $v2 := false }}\n{{ $v3 := false }}\n{{ $result := false }}\n\n{{ if and $v1 $v2 $v3 }}\n  {{ $result = true }}\n{{ end }}\n{{ $result }} → false\n\n{{ if or $v1 $v2 $v3 }}\n  {{ $result = true }}\n{{ end }}\n{{ $result }} → true\n```\n\n----------------------------------------\n\nTITLE: Structuring Content Directories in Hugo - Text\nDESCRIPTION: Displays the recommended folder and file structure for organizing Hugo content sections and regular pages. Useful for understanding relative paths used in GetPage calls. There are no dependencies; this is purely illustrative, highlighting where .md files should be placed under the 'content' directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GetPage.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── works/\\n│   ├── paintings/\\n│   │   ├── _index.md\\n│   │   ├── starry-night.md\\n│   │   └── the-mona-lisa.md\\n│   ├── sculptures/\\n│   │   ├── _index.md\\n│   │   ├── david.md\\n│   │   └── the-thinker.md\\n│   └── _index.md\\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Filtering Page Resources by Media Type in Hugo Go Template\nDESCRIPTION: Iterates through page resources filtered by a specific media type (e.g., \"image\") using the `.Resources.ByType` method. For each resource found, it generates an HTML `<img>` tag using the resource's relative permalink (`.RelPermalink`), width (`.Width`), and height (`.Height`). This snippet requires the `.Resources` collection available in the current page context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Resources.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Resources.ByType \"image\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Pages by Ascending Publish Date in Hugo Go HTML Templates\nDESCRIPTION: This snippet demonstrates how to use Hugo's template range function to iterate over pages sorted by publish date in ascending order using the ByPublishDate method. It requires a Hugo site context where .Pages represents a collection of pages, and uses template expressions within a Go HTML Template. Each iteration outputs a heading with a link, referencing the RelPermalink and LinkTitle page variables. The input is the .Pages collection, and the output is a series of h2 elements ordered by publish date (oldest to newest).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByPublishDate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByPublishDate }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using safe.JSStr for Unescaped JavaScript Strings in Hugo\nDESCRIPTION: This Go HTML Template snippet shows how to use the `safeJSStr` (or `safe.JSStr`) function. The `$title` variable is piped through `safeJSStr` before being embedded in the JavaScript string. This signals to Hugo that the string is safe and should not be escaped.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/JSStr.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ $title := \"Lilo & Stitch\" }}\n<script>\n  const a = \"Title: \" + {{ $title | safeJSStr }};\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers by Locale in Hugo Go HTML Template\nDESCRIPTION: Go HTML template code demonstrating number localization. It uses Hugo's `lang.FormatNumber` function to format a numeric value (512.5032). The function takes the number of decimal places (2) as an argument and renders the output (including decimal separators) according to the current language's number formatting conventions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ 512.5032 | lang.FormatNumber 2 }}\n```\n\n----------------------------------------\n\nTITLE: Structuring Headless Page Bundles in Hugo - Text\nDESCRIPTION: Shows how to organize a headless page bundle in Hugo, placing content assets (images) and an index.md file marked as headless. This structure enables the use of GetPage and Resources in templates to access image data programmatically. Purely illustrative; no dependencies or code execution involved.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GetPage.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── headless/    \\n│   ├── a.jpg\\n│   ├── b.jpg\\n│   ├── c.jpg\\n│   └── index.md  <-- front matter: headless = true\\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Section Query in Hugo - HTML\nDESCRIPTION: Shows the resulting HTML rendered by querying the '/works/paintings' section using Hugo's GetPage and iterating over its child pages. This output lists paintings and their artists in an unordered list. No direct dependencies; intended as static output for demonstration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GetPage.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\n  <li>Starry Night by Vincent van Gogh</li>\\n  <li>The Mona Lisa by Leonardo da Vinci</li>\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Accessing Local CSV Data in Hugo Templates\nDESCRIPTION: Demonstrates how to access local CSV files using the getCSV function with file paths relative to the working directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := getCSV \",\" \"other-files/pets.csv\" }}\n{{ $data := getCSV \",\" \"other-files/\" \"pets.csv\" }}\n```\n\n----------------------------------------\n\nTITLE: Compiling JavaScript Assets with Babel in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates usage of the Hugo 'js.Babel' function within a Go HTML template to process a JavaScript file. It dynamically sets Babel options such as minification, comment removal, and sourcemap mode based on the production environment and fingerprinting for integrity. Dependencies include a configured Hugo project and installed Babel/Node.js toolchain. The input is a resource (JS file), and the output is an HTML <script> tag referencing the file, optionally with a cryptographic integrity hash for production.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Babel.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"js/main.js\" }}\\n  {{ $opts := dict\\n    \"minified\" hugo.IsProduction\\n    \"noComments\" hugo.IsProduction\\n    \"sourceMap\" (cond hugo.IsProduction \"none\" \"external\")\\n  }}\\n  {{ with . | js.Babel $opts }}\\n    {{ if hugo.IsProduction }}\\n      {{ with . | fingerprint }}\\n        <script src=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"></script>\\n      {{ end }}\\n    {{ else }}\\n      <script src=\"{{ .RelPermalink }}\"></script>\\n    {{ end }}\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Pagination Configuration with Aliases Disabled - Hugo TOML/YAML-style\nDESCRIPTION: This is a configuration example for Hugo’s pagination settings, explicitly disabling aliases on the first pager while keeping other pagination settings, such as page size and path. Intended for placement inside the site's main config file (TOML/YAML). Not executable but affects build output as shown elsewhere in the documentation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_11\n\nLANGUAGE: hugo\nCODE:\n```\n[pagination]\n  disableAliases = true\n  pagerSize = 2\n  path = 'page'\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Resource Errors with Try Function in Hugo Templates\nDESCRIPTION: A practical example of using 'try' with resources.GetRemote to handle errors when fetching remote resources, preventing build failures and providing fallback behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/try.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://broken-example.org/images/a.jpg\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ warnf \"%s\" . }}\n  {{ else with .Value }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ else }}\n    {{ warnf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Different Constraints in Hugo Go Templates\nDESCRIPTION: Demonstrates the `.Resize` method on an image resource (`$image`). Shows resizing to a specific width preserving aspect ratio ('600x'), resizing to a specific height preserving aspect ratio ('x400'), and resizing to exact dimensions ('600x400') which might distort the aspect ratio.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{/* Resize to a width of 600px and preserve aspect ratio */}}\n{{ $image := $image.Resize \"600x\" }}\n\n{{/* Resize to a height of 400px and preserve aspect ratio */}}\n{{ $image := $image.Resize \"x400\" }}\n\n{{/* Resize to a width of 600px and a height of 400px */}}\n{{ $image := $image.Resize \"600x400\" }}\n```\n\n----------------------------------------\n\nTITLE: Processing CSS with PostCSS in Hugo\nDESCRIPTION: This snippet demonstrates how to use the postCSS function to process a CSS resource in a Hugo template. It retrieves a CSS file and applies PostCSS transformations before linking it in the HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/PostCSS.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"css/main.css\" | postCSS }}\n  <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Usage Example: Creating a Multi-Option Image Filter in Hugo go-html-template\nDESCRIPTION: Provides an example of combining resize, quality, and format operations in a single images.Process filter: shrinks to 256 pixels width, sets quality to 40, and outputs in WebP format. Suitable for workflow automation or template inline image transformations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_15\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"resize 256x q40 webp\" }}\n```\n\n----------------------------------------\n\nTITLE: Basic YouTube Shortcode Usage in Hugo\nDESCRIPTION: Demonstrates how to include a YouTube video in Markdown content by using the youtube shortcode with the video ID as a positional argument.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/youtube.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{</* youtube 0RKpf3rK57I */>}}\n```\n\n----------------------------------------\n\nTITLE: Using encoding.Jsonify with Hugo Templates\nDESCRIPTION: Examples of using the jsonify function in Hugo templates to convert objects to JSON with different formatting options. The first example shows basic usage, the second adds indentation, and the third sets both prefix and indentation for more readable JSON output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/encoding/Jsonify.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ dict \"title\" .Title \"content\" .Plain | jsonify }}\n{{ dict \"title\" .Title \"content\" .Plain | jsonify (dict \"indent\" \"  \") }}\n{{ dict \"title\" .Title \"content\" .Plain | jsonify (dict \"prefix\" \" \" \"indent\" \"  \") }}\n```\n\n----------------------------------------\n\nTITLE: Building Pager Navigation with Hugo Paginate in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use Hugo's built-in Paginate function to paginate posts and generate standard navigation links using the pager's First, Prev, Next, and Last methods. It first retrieves all regular pages of type 'posts', applies pagination, then renders each page's title and permalink in a loop. The unordered list at the end creates navigation links to the first, previous, next, and last pages if they exist. Dependencies include Hugo version with Pagination support. Inputs are the content type and pagination configuration in the site; output creates a navigable list of paginated posts.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/Next.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\\n{{ $paginator := .Paginate $pages }}\\n\\n{{ range $paginator.Pages }}\\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n{{ end }}\\n\\n{{ with $paginator }}\\n  <ul>\\n    {{ with .First }}\\n      <li><a href=\"{{ .URL }}\">First</a></li>\\n    {{ end }}\\n    {{ with .Prev }}\\n      <li><a href=\"{{ .URL }}\">Previous</a></li>\\n    {{ end }}\\n    {{ with .Next }}\\n      <li><a href=\"{{ .URL }}\">Next</a></li>\\n    {{ end }}\\n    {{ with .Last }}\\n      <li><a href=\"{{ .URL }}\">Last</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating Pages from Remote JSON Data in Hugo Content Adapter (Go HTML Template)\nDESCRIPTION: A complete example of using a Hugo content adapter to fetch remote JSON data, unmarshal it, and generate pages and associated resources for each book item. Makes use of try, resources.GetRemote, dict-building, AddPage, and AddResource. Handles error states and maps data keys to expected page fields.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{/* Get remote data. */}}\\n{{ $data := dict }}\\n{{ $url := \"https://gohugo.io/shared/examples/data/books.json\" }}\\n{{ with try (resources.GetRemote $url) }}\\n  {{ with .Err }}\\n    {{ errorf \"Unable to get remote resource %s: %s\" $url . }}\\n  {{ else with .Value }}\\n    {{ $data = . | transform.Unmarshal }}\\n  {{ else }}\\n    {{ errorf \"Unable to get remote resource %s\" $url }}\\n  {{ end }}\\n{{ end }}\\n\\n{{/* Add pages and page resources. */}}\\n{{ range $data }}\\n\\n  {{/* Add page. */}}\\n  {{ $content := dict \"mediaType\" \"text/markdown\" \"value\" .summary }}\\n  {{ $dates := dict \"date\" (time.AsTime .date) }}\\n  {{ $params := dict \"author\" .author \"isbn\" .isbn \"rating\" .rating \"tags\" .tags }}\\n  {{ $page := dict\\n    \"content\" $content\\n    \"dates\" $dates\\n    \"kind\" \"page\"\\n    \"params\" $params\\n    \"path\" .title\\n    \"title\" .title\\n  }}\\n  {{ $.AddPage $page }}\\n\\n  {{/* Add page resource. */}}\\n  {{ $item := . }}\\n  {{ with $url := $item.cover }}\\n    {{ with try (resources.GetRemote $url) }}\\n      {{ with .Err }}\\n        {{ errorf \"Unable to get remote resource %s: %s\" $url . }}\\n      {{ else with .Value }}\\n        {{ $content := dict \"mediaType\" .MediaType.Type \"value\" .Content }}\\n        {{ $params := dict \"alt\" $item.title }}\\n        {{ $resource := dict\\n          \"content\" $content\\n          \"params\" $params\\n          \"path\" (printf \"%s/cover.%s\" $item.title .MediaType.SubType)\\n        }}\\n        {{ $.AddResource $resource }}\\n      {{ else }}\\n        {{ errorf \"Unable to get remote resource %s\" $url }}\\n      {{ end }}\\n    {{ end }}\\n  {{ end }}\\n\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multihost Multilingual Sites in Hugo (Hugo Syntax)\nDESCRIPTION: Shows how to configure separate baseURLs for each language for a multihost deployment, where each language variant of the site can be published to its own root URL. Each '[languages.X]' table contains 'baseURL', 'languageName', 'title', and 'weight'. Mandatory to specify a baseURL for all languages if any are set. Outputs are multi-root 'public' directories, one per language. Useful for deploying multilingual sites to multiple domains or subdomains.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/languages.md#2025-04-23_snippet_5\n\nLANGUAGE: hugo\nCODE:\n```\ndefaultContentLanguage = 'fr'\\n[languages]\\n  [languages.en]\\n    baseURL = 'https://en.example.org/'\\n    languageName = 'English'\\n    title = 'In English'\\n    weight = 2\\n  [languages.fr]\\n    baseURL = 'https://fr.example.org'\\n    languageName = 'Français'\\n    title = 'En Français'\\n    weight = 1\n```\n\n----------------------------------------\n\nTITLE: Using debug.Dump with Hugo Templates\nDESCRIPTION: Demonstrates how to use the debug.Dump function to display the structure of a data object (site.Data.books) within an HTML pre element for better readability.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/debug/Dump.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump site.Data.books }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Applying PostCSS and PostProcessing in Hugo Template (Go HTML Template)\nDESCRIPTION: Hugo template code that retrieves a CSS resource (`css/main.css`). In development mode, it links the original CSS directly. In production mode, it applies PostCSS transformations, minification, fingerprinting, and finally uses `resources.PostProcess` to delay the actual processing until after the build. It then links the processed, fingerprinted CSS file with an integrity attribute.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/PostProcess.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"css/main.css\" }}\n  {{ if hugo.IsDevelopment }}\n    <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\">\n  {{ else }}\n    {{ with . | postCSS | minify | fingerprint | resources.PostProcess }}\n      <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\">\n    {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering img Tag with Dynamic Width and Height - Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet shows how to render an HTML img element in Hugo templates with both width and height attributes dynamically populated using the .Width and .Height properties. It leverages the resources.Get function to obtain the image resource and uses the RelPermalink, Width, and Height methods for their respective attribute values. This method ensures that the image dimensions reflect the actual resource and is intended for use within Hugo project templates where the specified image is present.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Width.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing hugo.Store after Triggering Content Rendering - Go HTML Template\nDESCRIPTION: Demonstrates a workaround for accessing hugo.Store values in contexts where content hasn't been rendered yet. Assigns page content to a noop variable to trigger rendering, allowing Get to return the expected value. Inputs: .Content is accessed before hugo.Store.Get. Output: enables retrieval of up-to-date Store values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $noop := .Content }}\n{{ hugo.Store.Get \"mykey\" }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Hugo Page Date Resolution Order in TOML\nDESCRIPTION: Configures the `[frontmatter]` section in Hugo's TOML configuration to prioritize a custom date field `myDate` over the default `date` field when determining the page's primary date via the `Date` method. This allows developers to define specific date fields that take precedence over Hugo's defaults.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/front-matter.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[frontmatter]\ndate = [\"myDate\", \"date\"]\n```\n\n----------------------------------------\n\nTITLE: Querying Pages in Other Languages with GetPage in Hugo Multilingual - Go HTML Template\nDESCRIPTION: Demonstrates querying a page in a non-default language ('de' for German) in a Hugo multilingual site. Uses 'where' filter to select the target language Site, indexes into it, then retrieves the desired page path and outputs its title. Depends on correct multilingual site configuration. Inputs: language code and content path; outputs localized page metadata, or no output if not present.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GetPage.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with where .Site.Sites \"Language.Lang\" \"eq\" \"de\" }}\\n  {{ with index . 0 }}\\n    {{ with .GetPage \"/works/paintings/starry-night\" }}\\n      {{ .Title }} → Sternenklare Nacht\\n    {{ end }}\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Term Page with Page List (Go HTML Template)\nDESCRIPTION: Defines the 'main' block for a term template, rendering the term's title, content, and the associated pages. Intended for Hugo taxonomy term pages, it depends on '.Title', '.Content', and '.Pages'. Outputs a heading for the term and links to each page. Relies on correct taxonomy setup in the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\\n  <h1>{{ .Title }}</h1>\\n  {{ .Content }}\\n  {{ range .Pages }}\\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Querying Resources from a Headless Page Bundle in Hugo - Go HTML Template\nDESCRIPTION: Retrieves the 'headless' page bundle using GetPage and iterates over all image resources, rendering an <img> tag for each with src, width, and height from page resource parameters. Relies on correct headless bundle structure and Hugo's .Resources interface. Outputs an HTML tag per image in the corresponding home template section; skips if no such content is found.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GetPage.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/headless\" }}\\n  {{ range .Resources.ByType \"image\" }}\\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Applying a Single Image Filter with Hugo images.Filter in Go HTML Template\nDESCRIPTION: This code snippet demonstrates how to retrieve an image resource using Hugo's resources.Get and then apply a single image filter (images.Grayscale) using the images.Filter function within a Go HTML template. The processed image's relative permalink, width, and height are then used in an HTML <img> tag. Requires Hugo with resources and images modules enabled; the input is an image path, and the output is filtered image properties accessible for rendering. This approach is suitable for single filter application and simple template logic.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Filter.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with images.Filter images.Grayscale . }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Hugo Content Directory Structure Example\nDESCRIPTION: An example of a Hugo content directory structure showing the organization of content files and section pages. This structure is used in the GetPage examples that follow.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GetPage.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── works/\n│   ├── paintings/\n│   │   ├── _index.md\n│   │   ├── starry-night.md\n│   │   └── the-mona-lisa.md\n│   ├── sculptures/\n│   │   ├── _index.md\n│   │   ├── david.md\n│   │   └── the-thinker.md\n│   └── _index.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Converting Image Format using Process Method in Hugo Go Templates\nDESCRIPTION: Uses the `.Process` method on an image resource (`$jpg`) to convert its format. The string \"png\" specifies the target format. The resulting PNG image resource is assigned to the `$png` variable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{/* Convert the image from JPG to PNG. */}}\n{{ $png := $jpg.Process \"png\" }}\n```\n\n----------------------------------------\n\nTITLE: Sorting Maps in Ascending Order with Hugo\nDESCRIPTION: Illustrates sorting map objects in ascending order by a specific key using the collections.Sort function in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Sort.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range sort site.Params.authors \"firstname\" }}\n  {{ .firstName }}\n{{ end }}\n\n{{ range sort site.Params.authors \"firstname\" \"asc\" }}\n  {{ .firstName }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hugo Pagination Navigation with HasNext\nDESCRIPTION: This Hugo template snippet demonstrates how to create pagination controls. It first defines a paginator for regular pages of type \"posts\". It then iterates through the pages on the current pager. Finally, it constructs navigation links (First, Previous, Next, Last), using the `.HasNext` method to conditionally render the \"Next\" link only if a subsequent page exists. This relies on the Paginator object provided by Hugo's `.Paginate` function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/HasNext.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <ul>\n    {{ with .First }}\n      <li><a href=\"{{ .URL }}\">First</a></li>\n    {{ end }}\n    {{ if .HasPrev }}\n      <li><a href=\"{{ .Prev.URL }}\">Previous</a></li>\n    {{ end }}\n    {{ if .HasNext }}\n      <li><a href=\"{{ .Next.URL }}\">Next</a></li>\n    {{ end }}\n    {{ with .Last }}\n      <li><a href=\"{{ .URL }}\">Last</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Counting Substring Occurrences with strings.Count in Go HTML Templates\nDESCRIPTION: Demonstrates the usage of the `strings.Count` function within Go HTML templates using Hugo's pipe syntax. It counts non-overlapping instances of a specified substring within a given string (`\"aaabaab\"`). Examples show counting single characters (`\"a\"`), multi-character substrings (`\"aa\"`, `\"aaa\"`), and the special case of an empty substring (`\"\"`), illustrating the expected integer output for each scenario.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Count.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"aaabaab\" | strings.Count \"a\" }} → 5\n{{ \"aaabaab\" | strings.Count \"aa\" }} → 2\n{{ \"aaabaab\" | strings.Count \"aaa\" }} → 1\n{{ \"aaabaab\" | strings.Count \"\" }} → 8\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Section (Ascending) in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the `GroupBy` function in a Hugo template to group pages by their 'Section' field. It iterates through the groups (sorted ascending by default based on the 'Section' value) and then iterates through the pages within each group, displaying the section key and a list of page links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupBy.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupBy \"Section\" }}\n  <p>{{ .Key }}</p>\n  <ul>\n    {{ range .Pages }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages Sorted by Title Ascending (Go HTML Template)\nDESCRIPTION: This Go HTML template snippet iterates through a collection of pages (`.Pages`) sorted alphabetically by title in ascending order using `.ByTitle`. For each page, it generates an H2 heading containing a link to the page's relative permalink (`.RelPermalink`) and displays the page title (`.Title`). This demonstrates the default behavior of `.ByTitle`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByTitle.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByTitle }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Multilingual Hugo Site Configuration (toml)\nDESCRIPTION: Provides a sample configuration for enabling multilingual support in a Hugo site. It designates default language, subdirectories, and language-specific metadata in TOML format. The configuration is referenced when discussing page resource duplication in multilingual bundles. Inputs: TOML settings for languages; outputs: a configuration Hugo reads during site build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'de'\\ndefaultContentLanguageInSubdir = true\\n\\n[languages.de]\\nlanguageCode = 'de-DE'\\nlanguageName = 'Deutsch'\\nweight = 1\\n\\n[languages.en]\\nlanguageCode = 'en-US'\\nlanguageName = 'English'\\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Extracting Dominant Colors from an Image in Hugo Go Templates\nDESCRIPTION: Uses the `.Colors` method on an image resource (`$image`) to extract a slice of dominant colors (as hex strings) using a simple histogram method. The result is assigned to the `$colors` variable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_16\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $colors := $image.Colors }}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Page Title in Hugo Template - Go HTML Template\nDESCRIPTION: Displays the current page's title in a Hugo template using Go HTML Template syntax. Uses the Title method to access the value of the 'title' field or an auto-generated title for section/taxonomy/term pages. Requires Hugo to process and render the template; outputs the resolved title as a string at render time. Must be placed inside a .html template file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Title.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Title }} → About us\n```\n\n----------------------------------------\n\nTITLE: Creating a Script Instance with Parameters using js.Batch in Go Templates\nDESCRIPTION: This Go template code illustrates creating an instance ('myinstance') of a defined script ('myscript') within a specific group ('mygroup') of a `js.Batch`. It uses `SetOptions` to pass a dictionary of parameters (`param1`: \"value1\") to this specific instance. These parameters are made available to runner scripts within the same group.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with js.Batch \"js/mybatch\" }}\n  {{ with .Group \"mygroup\" }}\n      {{ with .Instance \"myscript\" \"myinstance\" }}\n          {{ .SetOptions (dict \"params\" (dict \"param1\" \"value1\")) }}\n      {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages Sorted by Date (Descending) in Go Hugo Template\nDESCRIPTION: This snippet shows how to loop through a collection of Hugo pages (`.Pages`), sorted by their date field in descending order by chaining `.Reverse` after `.ByDate`. Within the loop, it creates an `<h2>` heading with a link (`<a>`) pointing to the page's relative permalink (`.RelPermalink`), using the page's link title (`.LinkTitle`) as the link text. The sorting mechanism is based on the site's date configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByDate.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByDate.Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Site Languages List with Hugo Template - Go Template\nDESCRIPTION: This Go-based Hugo template iterates through the .Site.Languages collection and outputs each language's title and display name as an HTML list item. It utilizes the range action to access each language object, pulling Title and LanguageName for display. Expects that languages are configured in the site config; returns an unordered HTML list with language meta-information.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Languages.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Languages }}\n    <li>{{ .Title }} ({{ .LanguageName }})</li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hugo Content Structure Using Directory Tree Output (text)\nDESCRIPTION: Illustrates the layout of a simple Hugo site's 'content' directory with one leaf bundle and a regular page. No dependencies are required; the snippet shows intended directory structure rather than runnable code. Directory trees are depicted with indentations to clarify how index files and resources (such as images) are grouped in leaf bundles. Inputs are static content file names and folders, outputs are the visual tree, and it is limited to explanatory documentation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-bundles.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── about/\\n│   ├── index.md\\n│   └── welcome.jpg\\n└── privacy.md\n```\n\n----------------------------------------\n\nTITLE: Using collections.Querify with Different Input Types in Hugo Templates\nDESCRIPTION: Demonstrates three equivalent ways to use the collections.Querify function with a map, a slice, and scalar values to generate a URL query string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Querify.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ collections.Querify (dict \"a\" 1 \"b\" 2) }}\n{{ collections.Querify (slice \"a\" 1 \"b\" 2) }}\n{{ collections.Querify \"a\" 1 \"b\" 2 }}\n```\n\n----------------------------------------\n\nTITLE: Checking Language Support with transform.CanHighlight in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the transform.CanHighlight function in Hugo templates to check if a language is supported by the Chroma syntax highlighter. It shows examples for both a supported language (Go) and an unsupported language (Klingon).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/CanHighlight.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ transform.CanHighlight \"go\" }} → true\n{{ transform.CanHighlight \"klingon\" }} → false\n```\n\n----------------------------------------\n\nTITLE: Illustrating Hugo Configuration File Location\nDESCRIPTION: Shows the recommended project structure where the primary Hugo site configuration file (`hugo.toml`, `hugo.yaml`, or `hugo.json`) is placed directly in the project's root directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── hugo.toml\n```\n\n----------------------------------------\n\nTITLE: Building Pager Navigation with Hugo - Go HTML Template\nDESCRIPTION: This snippet illustrates how to initialize a paginator for posts with Hugo's .Paginate function and render both the list of paginated pages and navigation links (First, Previous, Next, Last) using Hugo's Go HTML Template language. It depends on Hugo's templating engine and expects RegularPages of type \"posts\". Parameters include the site data context, and outputs are a list of post links as well as paginated navigation. Limitations: Only works within Hugo templates and assumes a paginated content structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/First.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <ul>\n    {{ with .First }}\n      <li><a href=\"{{ .URL }}\">First</a></li>\n    {{ end }}\n    {{ with .Prev }}\n      <li><a href=\"{{ .URL }}\">Previous</a></li>\n    {{ end }}\n    {{ with .Next }}\n      <li><a href=\"{{ .URL }}\">Next</a></li>\n    {{ end }}\n    {{ with .Last }}\n      <li><a href=\"{{ .URL }}\">Last</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Pagination with HasPrev Check in Hugo Go Templates\nDESCRIPTION: This Go HTML template snippet showcases how to create pagination for a list of posts in Hugo. It first filters pages by type using `where site.RegularPages \"Type\" \"posts\"`, then uses the `.Paginate` function to create a paginator object. The core logic demonstrates conditional rendering of the \"Previous\" navigation link using the `.HasPrev` method on the paginator object, ensuring the link only appears when a preceding page exists.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/HasPrev.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <ul>\n    {{ with .First }}\n      <li><a href=\"{{ .URL }}\">First</a></li>\n    {{ end }}\n    {{ if .HasPrev }}\n      <li><a href=\"{{ .Prev.URL }}\">Previous</a></li>\n    {{ end }}\n    {{ if .HasNext }}\n      <li><a href=\"{{ .Next.URL }}\">Next</a></li>\n    {{ end }}\n    {{ with .Last }}\n      <li><a href=\"{{ .URL }}\">Last</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Structure in TOML Configuration - Hugo - TOML\nDESCRIPTION: Demonstrates how to create menu entries for different menus (e.g., 'main', 'footer') using Hugo's configuration file in TOML. The snippets define menu items with properties such as 'name', 'pageRef', 'weight', and optional hierarchical relationships with 'parent'. No external dependencies required; snippet must be placed within the Hugo config file. Inputs are menu declarations, outputs are menu data available to templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/menus.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[menus.main]]\\nname = 'Home'\\npageRef = '/'\\nweight = 10\\n\\n[[menus.main]]\\nname = 'Products'\\npageRef = '/products'\\nweight = 20\\n\\n[[menus.main]]\\nname = 'Services'\\npageRef = '/services'\\nweight = 30\n```\n\nLANGUAGE: toml\nCODE:\n```\n[[menus.footer]]\\nname = 'Terms'\\npageRef = '/terms'\\nweight = 10\\n\\n[[menus.footer]]\\nname = 'Privacy'\\npageRef = '/privacy'\\nweight = 20\n```\n\nLANGUAGE: toml\nCODE:\n```\n[[menus.main]]\\nname = 'Products'\\npageRef = '/products'\\nweight = 10\\n\\n[[menus.main]]\\nname = 'Hardware'\\npageRef = '/products/hardware'\\nparent = 'Products'\\nweight = 1\\n\\n[[menus.main]]\\nname = 'Software'\\npageRef = '/products/software'\\nparent = 'Products'\\nweight = 2\\n\\n[[menus.main]]\\nname = 'Services'\\npageRef = '/services'\\nweight = 20\\n\\n[[menus.main]]\\nname = 'Hugo'\\npre = '<i class=\\\"fa fa-heart\\\"></i>'\\nurl = 'https://gohugo.io/'\\nweight = 30\\n[menus.main.params]\\nrel = 'external'\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Amplify Deployment for Hugo\nDESCRIPTION: YAML configuration file for AWS Amplify that defines the build environment, installs required dependencies (Dart Sass, Go, Hugo), and configures the build process for a Hugo site with caching for optimization.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-aws-amplify/index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\nenv:\n  variables:\n    # Application versions\n    DART_SASS_VERSION: 1.85.0\n    GO_VERSION: 1.23.3\n    HUGO_VERSION: 0.144.2\n    # Time zone\n    TZ: America/Los_Angeles\n    # Cache\n    HUGO_CACHEDIR: ${PWD}/.hugo\n    NPM_CONFIG_CACHE: ${PWD}/.npm\nfrontend:\n  phases:\n    preBuild:\n      commands:\n        # Install Dart Sass\n        - curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\n        - sudo tar -C /usr/local/bin -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\n        - rm dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\n        - export PATH=/usr/local/bin/dart-sass:$PATH\n\n        # Install Go\n        - curl -LJO https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz\n        - sudo tar -C /usr/local -xf go${GO_VERSION}.linux-amd64.tar.gz\n        - rm go${GO_VERSION}.linux-amd64.tar.gz\n        - export PATH=/usr/local/go/bin:$PATH\n\n        # Install Hugo\n        - curl -LJO https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\n        - sudo tar -C /usr/local/bin -xf hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\n        - rm hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\n        - export PATH=/usr/local/bin:$PATH\n\n        # Check installed versions\n        - go version\n        - hugo version\n        - node -v\n        - npm -v\n        - sass --embedded --version\n\n        # Install Node.JS dependencies\n        - \"[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci --prefer-offline || true\"\n\n        # https://github.com/gohugoio/hugo/issues/9810\n        - git config --add core.quotepath false\n    build:\n      commands:\n        - hugo --gc --minify\n  artifacts:\n    baseDirectory: public\n    files:\n      - '**/*'\n  cache:\n    paths:\n      - ${HUGO_CACHEDIR}/**/*\n      - ${NPM_CONFIG_CACHE}/**/*\n```\n\n----------------------------------------\n\nTITLE: Converting Image Format with Resize in Hugo\nDESCRIPTION: Demonstrates how to convert an image to WebP format using the Resize method. The template maintains the original dimensions but changes the image format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_23\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image.Resize \"600x webp\" }}\n```\n\n----------------------------------------\n\nTITLE: Highlighting JavaScript with Options in Hugo's transform.Highlight\nDESCRIPTION: This example shows how to use transform.Highlight to render JavaScript code with additional options. It demonstrates setting line numbers and a specific highlighting style.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Highlight.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $input := `console.log('Hello World!');` }}\n{{ $lang := \"js\" }}\n{{ transform.Highlight $input $lang \"lineNos=table, style=api\" }}\n```\n\n----------------------------------------\n\nTITLE: Global Resource Alternative with transform.Unmarshal\nDESCRIPTION: Demonstrates the recommended alternative to data.GetCSV using resources.Get and transform.Unmarshal for global resources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $p := \"data/pets.csv\" }}\n{{ with resources.Get $p }}\n  {{ $opts := dict \"delimiter\" \",\" }}\n  {{ $data = . | transform.Unmarshal $opts }}\n{{ else }}\n  {{ errorf \"Unable to get resource %q\" $p }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Concatenating JS Resources with Hugo resources.Concat - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to load JavaScript resource files using Hugo's 'resources.Get' and concatenate them into a single bundle via 'resources.Concat'. Dependencies include Hugo's resource pipeline and Go HTML Template syntax. The key parameters are the paths to the source JS files and the output bundle path. The input consists of resource file references; the output is a single bundled resource published to 'js/bundle.js'. All input resources must share the same media type, and the result is cached by target path.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/Concat.md#2025-04-23_snippet_0\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ $plugins := resources.Get \"js/plugins.js\" }}\\n{{ $global := resources.Get \"js/global.js\" }}\\n{{ $js := slice $plugins $global | resources.Concat \"js/bundle.js\" }}\n```\n\n----------------------------------------\n\nTITLE: Joining Paths with path.Join in Hugo Templates - go-html-template\nDESCRIPTION: Demonstrates the usage of the path.Join function in Hugo go-html-template syntax to join multiple path fragments into a single normalized path. path.Join automatically handles redundant slashes, removes empty segments, and resolves '.' or '..' directory navigations. Input parameters are the path segments (one or more strings), and the output is the resulting clean path string. There are no external dependencies besides the standard path.Join and path.Clean from Go, but this function is invoked within a Hugo template using the {{ ... }} notation, returning a string suitable for paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/path/Join.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ path.Join \"partial\" \"news.html\" }} \\u2192 partial/news.html\n{{ path.Join \"partial/\" \"news.html\" }} \\u2192 partial/news.html\n{{ path.Join \"foo/bar\" \"baz\" }} \\u2192 foo/bar/baz\n{{ path.Join \"foo\" \"bar\" \"baz\" }} \\u2192 foo/bar/baz\n{{ path.Join \"foo\" \"\" \"baz\" }} \\u2192 foo/baz\n{{ path.Join \"foo\" \".\" \"baz\" }} \\u2192 foo/baz\n{{ path.Join \"foo\" \"..\" \"baz\" }} \\u2192 baz\n{{ path.Join \"/..\" \"foo\" \"..\" \"baz\" }} \\u2192 baz\n```\n\n----------------------------------------\n\nTITLE: Enable Content Adapter Execution for All Languages (Go HTML Template)\nDESCRIPTION: Shows how to use the EnableAllLanguages method to run a content adapter across all languages in a multilingual Hugo site. Combines this with AddPage functionality, enabling simultaneous creation of translated content from the same adapter file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .EnableAllLanguages }}\\n{{ $content := dict\\n  \"mediaType\" \"text/markdown\"\\n  \"value\" \"The _Hunchback of Notre Dame_ was written by Victor Hugo.\"\\n}}\\n{{ $page := dict\\n  \"content\" $content\\n  \"kind\" \"page\"\\n  \"path\" \"the-hunchback-of-notre-dame\"\\n  \"title\" \"The Hunchback of Notre Dame\"\\n}}\\n{{ .AddPage $page }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Content Views in a Hugo List Template\nDESCRIPTION: Demonstrates a default list template (`layouts/_default/list.html`) in Hugo using Go HTML templates. It iterates through the `.Pages` collection and calls the `.Render` function for each page, specifically requesting the 'summary' view (`{{ .Render \"summary\" }}`). This delegates the rendering of each list item to the corresponding `summary.html` template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/content-view.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<main id=\"main\">\n  <div>\n    <h1 id=\"title\">{{ .Title }}</h1>\n    {{ range .Pages }}\n      {{ .Render \"summary\" }}\n    {{ end }}\n  </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Configuring Goldmark Passthrough Extension for Math Rendering in Hugo\nDESCRIPTION: Shows the configuration required in Hugo to enable the Goldmark passthrough extension for preserving LaTeX math markup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/ToMath.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n[markup.goldmark.extensions.passthrough]\nenable = true\n\n[markup.goldmark.extensions.passthrough.delimiters]\nblock = [['\\\\[', '\\\\]'], ['$$', '$$']]\ninline = [['\\\\(', '\\\\)']]\n```\n\n----------------------------------------\n\nTITLE: Embedding X (Twitter) Cards Metadata Template - Hugo Go Template\nDESCRIPTION: Demonstrates inclusion of Hugo’s embedded Twitter Cards template for generating social meta tags that enable rich content attachments on tweets about the site. The output is dynamically assembled based on site params or page-level front matter configuration, supporting both image and text-only modes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/twitter_cards.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Applying Rotation and Conversion with .Process in Hugo Template\nDESCRIPTION: This snippet shows how to use the `.Process` method sequentially on an existing image resource (`$image`) to apply transformations. First, it rotates the image 90 degrees counter-clockwise (`r90`). Then, it converts the rotated image to the WebP format (`webp`). The final `$image` variable holds the resource after both transformations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Process.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{/* Rotate 90 degrees counter-clockwise. */}}\n{{ $image := $image.Process \"r90\" }}\n\n{{/* Convert to WebP. */}}\n{{ $image := $image.Process \"webp\" }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Expiry Date Using Hugo Go HTML Template\nDESCRIPTION: Demonstrates grouping a collection of pages by their expiration date using the GroupByExpiryDate method with a human-readable date layout (e.g., \"January 2006\"). Assumes the presence of the Hugo site context and a .Pages collection. Lists each group with its key and outputs links to each page within the group. Dependencies: Hugo site object with front matter containing expiryDate fields, proper configuration of layouts and templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByExpiryDate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByExpiryDate \\\"January 2006\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Returning a Value from a Partial Template - Hugo Go HTML Template\nDESCRIPTION: This example demonstrates how to use a 'return' statement within a partial template to output a computed value instead of rendered HTML. The snippet sets a variable based on whether the input ('.') is even or odd, then returns the string 'even' or 'odd'. Only one return statement is allowed, and it must be at the end of the partial template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/Include.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $result := \\\"\\\" }}\\n{{ if math.ModBool . 2 }}\\n  {{ $result = \\\"even\\\" }}\\n{{ else }}\\n  {{ $result = \\\"odd\\\" }}\\n{{ end }}\\n{{ return $result }}\n```\n\n----------------------------------------\n\nTITLE: Nested comparisons in collections.Where\nDESCRIPTION: Examples showing two equivalent approaches to performing multiple filter operations: sequential filtering and nested function calls.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_13\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where .Site.RegularPages \"Type\" \"tutorials\" }}\n{{ $pages = where $pages \"Params.level\" \"eq\" \"beginner\" }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where (where .Site.RegularPages \"Type\" \"tutorials\") \"Params.level\" \"eq\" \"beginner\" }}\n```\n\n----------------------------------------\n\nTITLE: Setting Draft Status in Front Matter (TOML)\nDESCRIPTION: Defines a post as a draft in the front matter of a Markdown file using TOML syntax. When draft is set to true, Hugo will not publish the page by default unless the --buildDrafts flag is used.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Draft.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Post 1'\ndraft = true\n```\n\n----------------------------------------\n\nTITLE: Hugo Template Directory Structure\nDESCRIPTION: Shows the typical structure of Hugo layouts directory with various template files. This illustrates where Hugo would look for the contact.html template specified in the front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Layout.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\n└── _default/\n    ├── baseof.html\n    ├── contact.html\n    ├── home.html\n    ├── list.html\n    └── single.html\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Values in Hugo Scratch Pad\nDESCRIPTION: Demonstrates how to create a new scratch pad, set a value, and retrieve it using the Set and Get methods.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/NewScratch.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := newScratch }}\n{{ $s.Set \"greeting\" \"Hello\" }}\n{{ $s.Get \"greeting\" }} → Hello\n```\n\n----------------------------------------\n\nTITLE: Basic 'with' Statement in Hugo Templates\nDESCRIPTION: Demonstrates basic usage of the 'with' statement to bind context to a variable and execute a block only if the variable is truthy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/with.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"foo\" }}\n{{ with $var }}\n  {{ . }} → foo\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Padding Color from Image Dominant Colors in Go HTML Template\nDESCRIPTION: Fetches an image resource (`images/original.jpg`), creates a padding filter using `images.Padding` with 20px vertical and 40px horizontal padding. The padding color is dynamically set by extracting the third dominant color (`index .Colors 2`) from the image resource itself. The filter is then applied to the image, and an HTML `<img>` tag is generated using the padded image's relative permalink and dimensions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Padding.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ $filter := images.Padding 20 40 (index .Colors 2) }}\n  {{ with . | images.Filter $filter }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Hugo Site Methods Documentation\nDESCRIPTION: YAML front matter block defining metadata for the Hugo documentation page about Site methods. Includes title, link title, description, and aliases configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Site methods\nlinkTitle: Site\ndescription: Use these methods with Site objects.\ncategories: []\nkeywords: []\naliases: [/variables/site/]\n---\n```\n\n----------------------------------------\n\nTITLE: Formatting Time as RFC3339 String in Hugo\nDESCRIPTION: This example shows how to format a time.Time object as an RFC3339 formatted string using Hugo's time.Format function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ $t := \"2017-01-02T15:04:05-07:00\" | time.AsTime }}\n{{ $timeString := $t | time.Format \"2006-01-02T15:04:05Z07:00\" }}\n```\n\n----------------------------------------\n\nTITLE: GitLab Pages CI/CD Configuration for Hugo with Dart Sass\nDESCRIPTION: Complete GitLab CI/CD configuration for building a Hugo site with Dart Sass, showing version variables, installation of dependencies, and the build process in a controlled environment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/Sass.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  HUGO_VERSION: 0.144.2\n  DART_SASS_VERSION: 1.85.0\n  GIT_DEPTH: 0\n  GIT_STRATEGY: clone\n  GIT_SUBMODULE_STRATEGY: recursive\n  TZ: America/Los_Angeles\nimage:\n  name: golang:1.20-buster\npages:\n  script:\n    # Install Dart Sass\n    - curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\n    - tar -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\n    - cp -r dart-sass/* /usr/local/bin\n    - rm -rf dart-sass*\n    # Install Hugo\n    - curl -LJO https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb\n    - apt install -y ./hugo_extended_${HUGO_VERSION}_linux-amd64.deb\n    - rm hugo_extended_${HUGO_VERSION}_linux-amd64.deb\n    # Build\n    - hugo --gc --minify\n  artifacts:\n    paths:\n      - public\n  rules:\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n```\n\n----------------------------------------\n\nTITLE: Creating Custom GoAT Render Hook in Hugo\nDESCRIPTION: A custom code block render hook for GoAT diagrams that creates figure elements with optional captions. It uses the diagrams.Goat function to process the diagram markup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/diagrams/Goat.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $caption := or .Attributes.caption \"\" }}\n{{ $class := or .Attributes.class \"diagram\" }}\n{{ $id := or .Attributes.id (printf \"diagram-%d\" (add 1 .Ordinal)) }}\n\n<figure id=\"{{ $id }}\">\n  {{ with diagrams.Goat (trim .Inner \"\\n\\r\") }}\n    <svg class=\"{{ $class }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\"  xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n      {{ .Inner }}\n    </svg>\n  {{ end }}\n  <figcaption>{{ $caption }}</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Description in Hugo Templates\nDESCRIPTION: Example of how to use the .Description page variable in a Hugo template to set the meta description tag in the HTML head. This pulls the description value from the page's front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Description.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<head>\n  ...\n  <meta name=\"description\" content=\"{{ .Description }}\">\n  ...\n</head>\n```\n\n----------------------------------------\n\nTITLE: Numeric comparison in collections.Where\nDESCRIPTION: Examples showing how to filter pages based on numeric values using various comparison operators like equality, inequality, greater than, and less than.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $books := where site.RegularPages \"Section\" \"eq\" \"books\" }}\n\n{{ $pages := where $books \"Params.price\" \"eq\" 42 }}\n{{ $pages := where $books \"Params.price\" \"ne\" 42.67 }}\n{{ $pages := where $books \"Params.price\" \"ge\" 42 }}\n{{ $pages := where $books \"Params.price\" \"gt\" 42.67 }}\n{{ $pages := where $books \"Params.price\" \"le\" 42 }}\n{{ $pages := where $books \"Params.price\" \"lt\" 42.67 }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markup with RenderString in Hugo Templates - go-html-template\nDESCRIPTION: Illustrates the basic usage of the RenderString function in a Hugo template to convert a markup-formatted string into HTML. This snippet shows how to define a source string and render it using the Hugo template pipeline. The key parameter is the input string containing markup, and the output is the corresponding HTML. Requires Hugo's template rendering context and the RenderString method to be available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RenderString.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := \"An *emphasized* word\" }}\\n{{ $s | .RenderString }} → An <em>emphasized</em> word\n```\n\n----------------------------------------\n\nTITLE: Content Directory Structure for Taxonomy Example\nDESCRIPTION: Shows the content directory structure used for the examples, with book content files tagged with different genres.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Data.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── books/\n│   ├── and-then-there-were-none.md --> genres: suspense\n│   ├── death-on-the-nile.md        --> genres: suspense\n│   └── jamaica-inn.md              --> genres: suspense, romance\n│   └── pride-and-prejudice.md      --> genres: romance\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Applying Image Filter using Resource.Filter Method in Hugo Template\nDESCRIPTION: Demonstrates an alternative method to apply the text filter (`$filter`) by calling the `.Filter` method directly on the image resource object (`$r`). This method achieves the same result as using the `images.Filter` function. If successful, it outputs an HTML `<img>` tag for the resulting image, including its relative permalink, width, and height.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Text.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with $r }}\n  {{ with .Filter $filter }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Shuffling Arrays with collections.Shuffle in Hugo Templates\nDESCRIPTION: Demonstrates how to use collections.Shuffle to randomly permute arrays of numbers and strings. The function takes a collection as input and returns a new collection with elements in random order. Results vary between builds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Shuffle.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ shuffle (seq 1 2 3) }} → [3 1 2] \n{{ shuffle (slice \"a\" \"b\" \"c\") }} → [b a c] \n```\n\n----------------------------------------\n\nTITLE: Example Hugo Sitemap Template (XML)\nDESCRIPTION: A basic `sitemap.xml` template using Go template syntax. It iterates through all pages, outputting the permalink, last modification date (if available), and the page-specific change frequency obtained via `.Sitemap.ChangeFreq`. This demonstrates how to use the `.Sitemap` methods within a sitemap layout.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sitemap.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n{{ printf \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>\" | safeHTML }}\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n  xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n  {{ range .Pages }}\n    <url>\n      <loc>{{ .Permalink }}</loc>\n      {{ if not .Lastmod.IsZero }}\n        <lastmod>{{ .Lastmod.Format \"2006-01-02T15:04:05-07:00\" | safeHTML }}</lastmod>\n      {{ end }}\n      {{ with .Sitemap.ChangeFreq }}\n        <changefreq>{{ . }}</changefreq>\n      {{ end }}\n    </url>\n  {{ end }}\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Advanced Netlify Configuration for Hugo Sites with Dart Sass\nDESCRIPTION: An extended Netlify configuration file (netlify.toml) for Hugo sites that require Dart Sass. It includes environment variables for Hugo and Dart Sass versions, and a custom build command to install and use Dart Sass.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-netlify/index.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[build.environment]\nHUGO_VERSION = \"0.144.2\"\nDART_SASS_VERSION = \"1.85.0\"\nNODE_VERSION = \"22\"\nTZ = \"America/Los_Angeles\"\n\n[build]\npublish = \"public\"\ncommand = \"\"\"\n  curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz && \\\n  tar -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz && \\\n  rm dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz && \\\n  export PATH=/opt/build/repo/dart-sass:$PATH && \\\n  hugo --gc --minify \\\n  \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Configured File Mounts via CLI\nDESCRIPTION: Shows the `hugo config mounts` command, used to display the configured virtual file system mounts for the Hugo project, including those from the project, themes, and modules.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nhugo config mounts\n```\n\n----------------------------------------\n\nTITLE: Setting AsciiDoc Syntax Highlighter in Hugo (TOML)\nDESCRIPTION: Configures the AsciiDoc renderer in Hugo to use 'rouge' as the source code highlighter. This is achieved by setting the `source-highlighter` attribute within the `[markup.asciidocExt.attributes]` table in the Hugo configuration file. This requires the Rouge library to be available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/markup.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[markup.asciidocExt.attributes]\nsource-highlighter = 'rouge'\n```\n\n----------------------------------------\n\nTITLE: Defining a Center-Cropped Image Filter in Hugo go-html-template\nDESCRIPTION: Creates an image filter that crops the image to 200x200 pixels with the anchor set to center. Suitable for situations where specific focal points are desired during cropping. The arguments \\\"crop 200x200 center\\\" instruct the filter to perform a crop action with a centered anchor.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"crop 200x200 center\" }}\n```\n\n----------------------------------------\n\nTITLE: Repeating a String with strings.Repeat in Hugo Template\nDESCRIPTION: Demonstrates the usage of the `strings.Repeat` function within a Go HTML template. It takes an integer count (3) and a string (\"yo\") as input, returning the string repeated the specified number of times (\"yoyoyo\"). This function is part of Hugo's built-in template functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Repeat.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.Repeat 3 \"yo\" }} → yoyoyo\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Options, Matchers, and Targets in Hugo - TOML\nDESCRIPTION: This TOML configuration snippet provides a concrete, multi-section example for Hugo deployment configuration. It defines deployment settings such as upload order, various file matchers for custom caching and compression behavior, and multiple deployment targets with their associated URLs and filter rules. The dependencies are TOML syntax adherence and Hugo's configuration system. Parameters include patterns for ordering and matchers (e.g., regexes for matching file types), and target block URLs and filters. Input is a TOML config; output is that Hugo will deploy files accordingly. Limitations include the need to write correct patterns and specify valid cloud provider URLs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/deployment.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[deployment]\n  order = ['.jpg$', '.gif$']\n  [[deployment.matchers]]\n    cacheControl = 'max-age=31536000, no-transform, public'\n    gzip = true\n    pattern = '^.+\\.(js|css|svg|ttf)$'\n  [[deployment.matchers]]\n    cacheControl = 'max-age=31536000, no-transform, public'\n    gzip = false\n    pattern = '^.+\\.(png|jpg)$'\n  [[deployment.matchers]]\n    contentType = 'application/xml'\n    gzip = true\n    pattern = '^sitemap\\.xml$'\n  [[deployment.matchers]]\n    gzip = true\n    pattern = '^.+\\.(html|xml|json)$'\n  [[deployment.targets]]\n    url = 's3://my_production_bucket?region=us-west-1'\n    cloudFrontDistributionID = 'E1234567890ABCDEF0'\n    exclude = '**.{heic,psd}'\n    name = 'production'\n  [[deployment.targets]]\n    url = 's3://my_staging_bucket?region=us-west-1'\n    exclude = '**.{heic,psd}'\n    name = 'staging'\n```\n\n----------------------------------------\n\nTITLE: Creating Gamma Filter with Hugo Images - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to create an image gamma correction filter using the images.Gamma function in Hugo templates. It requires Hugo's imaging features and expects the images module to be available in the template context. The sole parameter is a positive gamma float value; values above 1 will lighten the image, those below 1 will darken it. The created filter object can later be applied to images using the images module's filtering methods.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Gamma.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Gamma 1.667 }}\n```\n\n----------------------------------------\n\nTITLE: Including Content with Error Handling in Hugo Shortcodes (Go HTML Template)\nDESCRIPTION: This Go HTML Template snippet demonstrates how to use the .Get and .GetPage methods within a Hugo shortcode template to include external content files by logical path, then render their contents (including shortcodes) using the RenderShortcodes method. It includes robust error handling, returning informative error messages if parameters are missing or the file cannot be found. The snippet assumes access to the Hugo template context, with key parameters being the logical path to include, and outputs fully rendered HTML with preserved markup and processed shortcodes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RenderShortcodes.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Get 0 }}\n  {{ with $.Page.GetPage . }}\n    {{- .RenderShortcodes }}\n  {{ else }}\n    {{ errorf \"The %q shortcode was unable to find %q. See %s\" $.Name . $.Position }}\n  {{ end }}\n{{ else }}\n  {{ errorf \"The %q shortcode requires a positional parameter indicating the logical path of the file to include. See %s\" .Name .Position }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Adding Durations to Timestamps in Hugo Templates\nDESCRIPTION: Shows how to parse a timestamp and duration strings, then add or subtract the duration from the timestamp. Uses time.AsTime for timestamp parsing and time.ParseDuration for duration strings, demonstrating both positive and negative duration additions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Add.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n\n{{ $d1 = time.ParseDuration \"3h20m10s\" }}\n{{ $d2 = time.ParseDuration \"-3h20m10s\" }}\n\n{{ $t.Add $d1 }} → 2023-01-28 03:05:08 -0800 PST\n{{ $t.Add $d2 }} → 2023-01-27 20:24:48 -0800 PST\n```\n\n----------------------------------------\n\nTITLE: Customizing robots.txt with a Hugo Template Example\nDESCRIPTION: This example demonstrates a custom Hugo template for `robots.txt`, intended to be placed at `/layouts/robots.txt`. It uses Go template syntax to iterate through all pages (`.Pages`) of the site and generates a `Disallow` directive for each page's relative permalink (`.RelPermalink`). This effectively instructs compliant search engine crawlers not to index any page on the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/robots.md#2025-04-23_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\nUser-agent: *\n{{ range .Pages }}\nDisallow: {{ .RelPermalink }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through All Site Regular Pages in Go HTML Template\nDESCRIPTION: This Go HTML template snippet shows how to access and loop through *all* regular pages across the entire site using the `.Site.RegularPages` method. Similar to the previous example, it sorts the pages by title and generates linked H2 headings for each page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RegularPages.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.RegularPages.ByTitle }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Safely Linking to Parent Page in Hugo Template (Go)\nDESCRIPTION: Demonstrates how to use the `.Parent` page variable in a Hugo template (Go HTML Template) to link to the parent section. It uses the `with` action to check if `.Parent` exists (is not nil) before attempting to access its `.RelPermalink` and `.LinkTitle` properties. This prevents errors when the template is rendered for a page without a parent, such as the home page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Parent.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Parent }}\n  <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Dart Sass Implementation in Hugo Template\nDESCRIPTION: Example showing how to use Dart Sass as the transpiler in Hugo, with conditional output styling and source mapping based on the environment, demonstrating the complete workflow with fingerprinting for production.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/Sass.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"sass/main.scss\" }}\n  {{ $opts := dict\n    \"enableSourceMap\" (not hugo.IsProduction)\n    \"outputStyle\" (cond hugo.IsProduction \"compressed\" \"expanded\")\n    \"targetPath\" \"css/main.css\"\n    \"transpiler\" \"dartsass\"\n  }}\n  {{ with . | toCSS $opts }}\n    {{ if hugo.IsProduction }}\n      {{ with . | fingerprint }}\n        <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\">\n      {{ end }}\n    {{ else }}\n      <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\">\n    {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Processing Inner Content in Shortcode Template (Go HTML Template)\nDESCRIPTION: Defines a Hugo shortcode template (`layouts/shortcodes/contrived.html`) that utilizes inner content. It retrieves the named parameter `title` using `.Get`. The content passed between the shortcode tags is accessed via the `.Inner` variable. Because the shortcode was called using standard notation (not Markdown notation), `.Page.RenderString` is called on `.Inner` to process any Markdown within the inner content into HTML before rendering it inside a `div` element along with the title in an `h2` tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_15\n\nLANGUAGE: go-html-template\nCODE:\n```\n<div class=\"contrived\">\n  <h2>{{ .Get \"title\" }}</h2>\n  {{ .Inner | .Page.RenderString }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring EXIF Extraction Options in Hugo using TOML\nDESCRIPTION: This snippet sets default options for extracting EXIF metadata from images in Hugo via a TOML configuration block. It enables the user to include or exclude specific fields using regular expressions, and to disable extraction of date/time or GPS coordinates as needed. The configuration helps optimize performance and cache usage by limiting metadata fields processed. Dependencies: Hugo. Key parameters: 'includeFields', 'excludeFields' (regex strings); 'disableDate', 'disableLatLong' (booleans). Inputs: regex expressions and boolean flags. Outputs: determines which EXIF metadata fields are available in processed image resources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/imaging.md#2025-04-23_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[imaging.exif]\nincludeFields = \"\"\nexcludeFields = \"\"\ndisableDate = false\ndisableLatLong = false\n\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output after Template Execution\nDESCRIPTION: This CSS snippet shows the final content of the `public/css/main.css` file after the Go template (`assets/css/template.css`) has been processed by `resources.ExecuteAsTemplate` using the defined site configuration values. The template variables have been replaced with their corresponding parameter values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/ExecuteAsTemplate.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background-color: #fefefe;\n  color: #222;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Related Content Configuration in Hugo (TOML)\nDESCRIPTION: Provides an example of custom related content settings in the Hugo site configuration file (e.g., `hugo.toml`). It sets `includeNewer` to true, adjusts the similarity `threshold`, enables lowercasing with `toLower`, and defines 'authors' and 'genres' indices with different weights (2 and 1 respectively) to prioritize author matches.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/related-content.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[related]\nincludeNewer = true\nthreshold = 80\ntoLower = true\n[[related.indices]]\nname = 'authors'\nweight = 2\n[[related.indices]]\nname = 'genres'\nweight = 1\n```\n\n----------------------------------------\n\nTITLE: Embedding Inline JavaScript in Hugo Template\nDESCRIPTION: Illustrates how to include JavaScript code directly within an HTML page. It fetches a JavaScript resource (`js/script.js`) using `resources.Get`, accesses its `.Content`, ensures it's safe for embedding using `safeJS`, and places it inside `<script>` tags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Content.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"js/script.js\" }}\n  <script>{{ .Content | safeJS }}</script>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Cropping/Resizing with .Fill in Go HTML Template\nDESCRIPTION: This snippet demonstrates the basic usage of the `.Fill` method. It first retrieves an image resource using `resources.Get`. Then, within a nested `with` block, it applies `.Fill` with the dimensions \"200x200\" to crop and resize the image. Finally, it generates an `<img>` tag using the processed image's relative permalink, width, and height.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Fill.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Fill \"200x200\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Page Resource Using Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet retrieves a page resource using .Resources.Get with the resource path, then outputs its Name property, which resolves to the value given by the 'name' parameter in front matter. Requires that the resource be defined in the page's front matter with a 'name' attribute. Input: resource path string. Output: custom resource name.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Name.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.Get \\\"images/a.jpg\\\" }}\\n  {{ .Name }} → Sunrise in Bryce Canyon\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic QR Codes for Current Page Permalink - Go HTML Template\nDESCRIPTION: This example shows how to create a QR code that links dynamically to the current page's Permalink using images.QR in a Hugo layout. images.QR receives .Permalink as the input. The resulting image is rendered with class='qr-code', includes lazy loading for performance, and its alt tag references the page's Permalink. It is typically placed in a template file such as layouts/_default/single.html and is meant to be shown only when printing the page, along with custom CSS for toggling display.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/QR.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with images.QR .Permalink }}\\n  <img\\n    src=\"{{ .RelPermalink }}\"\\n    width=\"{{ .Width }}\"\\n    height=\"{{ .Height }}\"\\n    alt=\"QR code linking to {{ $.Permalink }}\"\\n    class=\"qr-code\"\\n    loading=\"lazy\"\\n  >\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Validation with `.Position` in a Hugo Shortcode (Go HTML Template)\nDESCRIPTION: This Go HTML Template code defines a Hugo shortcode (`layouts/shortcodes/myshortcode.html`) that validates the presence of a required 'greeting' parameter. It uses `.Get` to retrieve the parameter and `with`/`else` for conditional logic. If the parameter is missing, it calls `errorf` to generate a build error message, incorporating the shortcode's name (`.Name`) and its invocation location (`.Position`) for easier debugging. This method is useful for robust error reporting but should be used sparingly due to potential performance costs associated with calculating the position.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Position.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $greeting := \"\" }}\n{{ with .Get \"greeting\" }}\n  {{ $greeting = . }}\n{{ else }}\n  {{ errorf \"The %q shortcode requires a 'greeting' argument. See %s\" .Name .Position }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Taxonomies in Config File - TOML\nDESCRIPTION: This snippet configures the taxonomy mapping of 'category' to 'categories' in your Hugo config file using TOML syntax. This impacts template lookup for taxonomy and term pages, allowing template customization for different classifications in the site. Input is TOML configuration; output is Hugo's taxonomy template behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/lookup-order.md#2025-04-23_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[taxonomies]\\ncategory = 'categories'\n```\n\n----------------------------------------\n\nTITLE: Setting Output Format to WebP in an Image Filter in Hugo go-html-template\nDESCRIPTION: Creates an image filter to convert output images to the WebP format using images.Process. Useful when optimization or modern format compliance is desired. Only the format transformation is applied in this case.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"webp\" }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Render Hook with Figure Support\nDESCRIPTION: Render hook template that renders standalone images within figure elements and handles inline images differently.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/images.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- if .IsBlock -}}\n  <figure>\n    <img src=\"{{ .Destination | safeURL }}\"\n      {{- with .PlainText }} alt=\"{{ . }}\"{{ end -}}\n    >\n    {{- with .Title }}<figcaption>{{ . }}</figcaption>{{ end -}}\n  </figure>\n{{- else -}}\n  <img src=\"{{ .Destination | safeURL }}\"\n    {{- with .PlainText }} alt=\"{{ . }}\"{{ end -}}\n    {{- with .Title }} title=\"{{ . }}\"{{ end -}}\n  >\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Using MD5 Hash with Gravatar in Hugo\nDESCRIPTION: Shows how to implement a Gravatar image in HTML using the md5 function to hash an email address. This practical application generates a unique avatar based on the MD5 hash of an email address.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/crypto/MD5.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://www.gravatar.com/avatar/{{ md5 \"your@email.com\" }}?s=100&d=identicon\">\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO8601 Timestamp in Hugo\nDESCRIPTION: This snippet demonstrates how to parse an ISO8601 timestamp string into a time.Time object using Hugo's time.AsTime function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ $t := \"2017-01-02T15:04:05-07:00\" | time.AsTime }}\n```\n\n----------------------------------------\n\nTITLE: Listing Taxonomy Terms Template\nDESCRIPTION: Template code to list all pages associated with a specific taxonomy term (suspense genre).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Taxonomies.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Taxonomies.genres.suspense }}\n    <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Rendering With Display Option Using RenderString in Hugo Templates - go-html-template\nDESCRIPTION: Demonstrates how to use the display option in the RenderString function to switch between inline and block rendering. The snippet defines a markup string and a dictionary of options specifying the 'block' display, resulting in HTML wrapped in <p> tags. Requires Hugo's dictionary function and template pipeline, with the input as a markup string and an options map. Outputs HTML formatted according to the display parameter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RenderString.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := \"An *emphasized* word\" }}\\n{{ $s | .RenderString }} → An <em>emphasized</em> word\\n\\n{{ $opts := dict \"display\" \"block\" }}\\n{{ $s | .RenderString $opts }} → <p>An <em>emphasized</em> word</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Section Page List (Go HTML Template)\nDESCRIPTION: Defines the 'main' block for section templates, rendering the section's title, content, and a listing of all pages in that section. Depends on the page's '.Title', '.Content', and '.Pages' variables, and is used in the context of a Hugo section page. Outputs a heading, optional intro, and links to each page in the section. Assumes pages are properly organized by Hugo in sections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\\n  <h1>{{ .Title }}</h1>\\n  {{ .Content }}\\n  {{ range .Pages }}\\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Home Page Content List (Go HTML Template)\nDESCRIPTION: Defines a 'main' block for the home page, displaying the content of the homepage and then iterating over all regular pages to show their links. It depends on the page context (dot), Hugo's 'site.RegularPages' variable, and the standard Go templating logic. Inputs are the current site's page list and their metadata. Output is a series of links to pages. The template must be used within a base template that includes a 'main' block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\\n  {{ .Content }}\\n  {{ range site.RegularPages }}\\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling a Page Resource JSON File in Hugo\nDESCRIPTION: Demonstrates how to unmarshal a JSON file from a page bundle and process its contents.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Unmarshal.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $path := \"books.json\" }}\n{{ with .Resources.Get $path }}\n  {{ with . | transform.Unmarshal }}\n    {{ $data = . }}\n  {{ end }}\n{{ else }}\n  {{ errorf \"Unable to get page resource %q\" $path }}\n{{ end }}\n\n{{ range where $data \"author\" \"Victor Hugo\" }}\n  {{ .title }} → Les Misérables\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Headers in Hugo Development Server (TOML)\nDESCRIPTION: Example TOML configuration for adding custom HTTP headers to all responses (`/**`) from the Hugo development server. This is useful for testing features like Content Security Policies. It includes security-related headers like `X-Frame-Options`, `X-XSS-Protection`, `X-Content-Type-Options`, `Referrer-Policy`, and a basic `Content-Security-Policy`. This configuration resides in `config/development/server.toml`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/server.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[headers]]\nfor = \"/**\"\n\n[headers.values]\nX-Frame-Options = \"DENY\"\nX-XSS-Protection = \"1; mode=block\"\nX-Content-Type-Options = \"nosniff\"\nReferrer-Policy = \"strict-origin-when-cross-origin\"\nContent-Security-Policy = \"script-src localhost:1313\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Front Matter in TOML Format\nDESCRIPTION: This snippet shows how to create front matter for a Hugo page using TOML format (indicated by +++ delimiters). It sets the page title to 'Home', defines a publication date with timezone, and marks the content as not a draft.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/create/skeletons/theme/content/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = 'Home'\ndate = 2023-01-01T08:00:00-07:00\ndraft = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Using Break Statement in Hugo Templates with Range Iteration\nDESCRIPTION: This example demonstrates how to use the break statement within a range loop to exit early. When the current item equals 'bar', the break statement stops the iteration, preventing remaining items from being processed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/break.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"foo\" \"bar\" \"baz\" }}\n{{ range $s }}\n  {{ if eq . \"bar\" }}\n    {{ break }}\n  {{ end }}\n  <p>{{ . }}</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating a Table of Dominant Image Colors and Luminance in Hugo Templates\nDESCRIPTION: This Go HTML template retrieves an image resource (\"images/a.jpg\") and iterates through its dominant colors using the `.Colors` method. For each color, it displays the hexadecimal value (`.ColorHex`) and its relative luminance (`.Luminance`), formatted to 4 decimal places, within an HTML table. Requires the `resources.Get` and `lang.FormatNumber` functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Colors.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ with resources.Get \"images/a.jpg\" }}\n  <table>\n    <thead>\n      <tr>\n        <th>Color</th>\n        <th>Relative luminance</th>\n      </tr>\n    </thead>\n    <tbody>\n      {{ range .Colors }}\n        <tr>\n          <td>{{ .ColorHex }}</td>\n          <td>{{ .Luminance | lang.FormatNumber 4 }}</td>\n        </tr>\n      {{ end }}\n    </tbody>\n  </table>\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Function Documentation Archetype Template - Markdown/YAML\nDESCRIPTION: Provides a full archetype template in markdown with YAML front matter for documentation of functions. Pre-populates structure for authors with placeholders: description, signature, examples, and notes. Uses Go templates to insert date and dynamic title. Requires Hugo's template parser and supports extension with further sections. Input: new content path, date, file name. Outputs: Markdown content with structured placeholders.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndate: '{{ .Date }}'\ndraft: true\ntitle: '{{ replace .File.ContentBaseName `-` ` ` | title }}'\n---\n\nA brief description of what the function does, using simple present tense in the third person singular form. For example:\n\n`someFunction` returns the string `s` repeated `n` times.\n\n## Signature\n\n```text\nfunc someFunction(s string, n int) string\n```\n\n## Examples\n\nOne or more practical examples, each within a fenced code block.\n\n## Notes\n\nAdditional information to clarify as needed.\n\n```\n\n----------------------------------------\n\nTITLE: Displaying directory structure with page kinds and node status in Hugo\nDESCRIPTION: This code snippet illustrates a typical Hugo content directory structure and indicates the page kind and node status of different files. It shows which files are considered nodes (true) and which are not (nodes).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsNode.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── books/\n│   ├── book-1/\n│   │   └── index.md    <-- kind = page, node = false\n│   ├── book-2.md       <-- kind = page, node = false\n│   └── _index.md       <-- kind = section, node = true\n├── tags/\n│   ├── fiction/\n│   │   └── _index.md   <-- kind = term, node = true\n│   └── _index.md       <-- kind = taxonomy, node = true\n└── _index.md           <-- kind = home, node = true\n```\n\n----------------------------------------\n\nTITLE: Calculating Duration Between Two Dates in Hugo\nDESCRIPTION: This snippet illustrates how to calculate the duration between two dates using Hugo's time.AsTime and time.Until functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{ $t1 := \"2017-01-02T15:04:05-07:00\" | time.AsTime }}\n{{ $t2 := \"2017-07-04T15:04:05-07:00\" | time.AsTime }}\n{{ $duration := $t1.Until $t2 }}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Book Page in Hugo Layouts (Go HTML Template)\nDESCRIPTION: Presents a Hugo single page layout template for rendering book pages created by a content adapter. Displays the title, cover image, author, ISBN, rating, review date, tags, and main content. Uses partials for resource and parameter rendering and is placed in layouts/books/single.html.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\\n  <h1>{{ .Title }}</h1>\\n\\n  {{ with .Resources.GetMatch \"cover.*\" }}\\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"{{ .Params.alt }}\">\\n  {{ end }}\\n\\n  <p>Author: {{ .Params.author }}</p>\\n\\n  <p>\\n    ISBN: {{ .Params.isbn }}<br>\\n    Rating: {{ .Params.rating }}<br>\\n    Review date: {{ .Date | time.Format \":date_long\" }}\\n  </p>\\n\\n  {{ with .GetTerms \"tags\" }}\\n    <p>Tags:</p>\\n    <ul>\\n      {{ range . }}\\n        <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\\n      {{ end }}\\n    </ul>\\n  {{ end }}\\n\\n  {{ .Content }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Summary in Hugo Go HTML Template\nDESCRIPTION: Demonstrates how to render page summaries within a Hugo layout using Go HTML templates. It iterates through `site.RegularPages`, displays each page's title as a link, and renders its summary using the `.Summary` page variable. It also shows how to check the `.Truncated` boolean variable to add a 'More...' link if the summary was indeed truncated (applicable to manual and automatic summaries).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/summaries.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ range site.RegularPages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  <div class=\"summary\">\n    {{ .Summary }}\n    {{ if .Truncated }}\n      <a href=\"{{ .RelPermalink }}\">More ...</a>\n    {{ end }}\n  </div>\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Compound Image Filter: Resize, Rotate, Quality, Format, Background, and Resampling in Hugo go-html-template\nDESCRIPTION: Creates a filter that resizes to 300px wide, rotates, applies quality adjustment, converts to JPEG, applies a black background, and selects the lanczos resampling filter. Demonstrates how a rich transformation string enables complex image workflows managed entirely within Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_14\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"resize 300x r90 q50 jpeg #000 lanczos\" }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Resizing with Format, Quality, and Filter in Hugo Template\nDESCRIPTION: This Go HTML template snippet fetches an image resource 'original.jpg'. It uses the `.Resize` method with a processing specification string: `\"300x webp q85 lanczos\"`. This resizes the image to 300px width, converts it to the WebP format (`webp`), sets the quality to 85 (`q85`), and applies the Lanczos resampling filter (`lanczos`). An `<img>` tag is then generated for the processed image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Resize.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Resize \"300x webp q85 lanczos\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Section and Page Permalinks - Hugo Configuration - TOML\nDESCRIPTION: This TOML snippet demonstrates how to set custom permalink patterns for 'posts' and 'tutorials' sections in a Hugo site. The '[permalinks.page]' block assigns a date-based hierarchy for posts and a flat hierarchy for tutorials, while the '[permalinks.section]' block sets root URL segments for each. Dependencies: Hugo static site generator; no external libraries required. The main parameters are the section names (e.g., 'posts', 'tutorials') and their associated URL patterns using tokens like ':year', ':month', and ':slug'. Input is the configuration file, and output is a customized site URL structure upon build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/permalinks.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[permalinks.page]\nposts = '/articles/:year/:month/:slug/'\ntutorials = '/training/:slug/'\n[permalinks.section]\nposts = '/articles/'\ntutorials = '/training/'\n```\n\n----------------------------------------\n\nTITLE: Creating a Sepia Image Filter in Hugo Go Templates\nDESCRIPTION: This snippet demonstrates how to use the `images.Sepia` function within a Hugo Go template to create an image filter. The function requires a percentage value (0-100) as an argument, determining the intensity of the sepia effect. Here, a filter with 75% intensity is created and stored in the `$filter` variable, which can then be applied to an image resource using appropriate methods.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Sepia.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Sepia 75 }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Matching Page Resources by Pattern in Hugo Go Template\nDESCRIPTION: Iterates through all page resources whose paths match the given glob pattern (e.g., \"images/*.jpg\") using the `.Resources.Match` method. For each matching resource within the loop, it generates an HTML `<img>` tag using the resource's relative permalink, width, and height. This requires the `.Resources` collection available in the page context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Resources.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Resources.Match \"images/*.jpg\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Calling the Include Shortcode in Hugo Markdown (Text)\nDESCRIPTION: This snippet illustrates how to invoke the 'include' shortcode multiple times within a Hugo Markdown content file. The Hugo syntax {{%/* ... */%}} is used, instructing Hugo to further process the rendered content (e.g., handle additional Markdown or shortcodes). Each call includes a different logical path, allowing the page to be composed from several content snippets that may themselves contain other shortcode calls. The output is a single, fully processed page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RenderShortcodes.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{%/* include \"/snippets/services\" */%}}\n{{%/* include \"/snippets/values\" */%}}\n{{%/* include \"/snippets/leadership\" */%}}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Image Filters (Resize, Convert, Pad) in Go HTML Template\nDESCRIPTION: Demonstrates applying a sequence of image filters. First, it gets an image resource. Then, it defines a slice (`$filters`) containing two filters: `images.Process` to resize the image to 300px width and convert it to WebP format, and `images.Padding` to add 20px vertical and 50px horizontal padding with a semi-transparent dark green color (`#0705`). Finally, it applies both filters sequentially to the image resource using its `.Filter` method. Note that transparency requires an image format like WebP or PNG.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Padding.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $img := resources.Get \"images/a.jpg\" }}\n{{ $filters := slice\n  (images.Process \"resize 300x webp\")\n  (images.Padding 20 50 \"#0705\")\n}}\n{{ $img = $img.Filter $filters }}\n```\n\n----------------------------------------\n\nTITLE: Paginating and Rendering a Post List - Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates building a paginated collection of posts, sorted by title, and displaying each page's title and link. It uses the Hugo templating system and requires both Hugo's \"where\" and \"Paginate\" functions. The paginator is initially set up with 7 items per page. The embedded pagination template, \"_internal/pagination.html\", provides page navigation controls. Outputs are HTML blocks for each post and navigation links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages.ByTitle 7 }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ template \"_internal/pagination.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Hugo Configuration File via CLI\nDESCRIPTION: Demonstrates using the `hugo` command-line tool with the `--config` flag to specify an alternative configuration file (e.g., `other.toml`) instead of the default `hugo.toml`, `hugo.yaml`, or `hugo.json`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhugo --config other.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Hugo Extended Release using Go Install\nDESCRIPTION: Command to download, compile, and install a specific tagged release (v0.144.2) of the Hugo extended edition from GitHub using `go install`. Requires Go (1.23.0+), a C compiler, and `CGO_ENABLED=1`. The '@v0.144.2' suffix specifies the exact version.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@v0.144.2\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Languages List - HTML\nDESCRIPTION: This HTML snippet shows the rendered output from the Hugo template that lists the languages. Each list item contains the language title and its display name, reflecting the order specified by language weight in configuration. Demonstrates the expected result from running the site with the previously defined configuration and template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Languages.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Projekt Dokumentation (Deutsch)</li>\n  <li>Project Documentation (English)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Chomp for String Cleanup in Hugo Templates - Go HTML Template\nDESCRIPTION: These snippets demonstrate how to use the `chomp` helper in Hugo templates to remove all trailing newline and carriage return characters from input strings. The function adapts its return type to preserve HTML safety (returning `template.HTML` when input is HTML), otherwise it processes regular strings. Example inputs and the corresponding cleaned outputs are included. No external dependencies are required, but the snippet must be run within a Hugo Go HTML templating context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Chomp.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ chomp \"foo\\n\" }} \\u2192 foo\n{{ chomp \"foo\\n\\n\" }} \\u2192 foo\n\n{{ chomp \"foo\\r\\n\" }} \\u2192 foo\n{{ chomp \"foo\\r\\n\\r\\n\" }} \\u2192 foo\n```\n\n----------------------------------------\n\nTITLE: Reversing a Slice with Collections.Reverse in Hugo Templates\nDESCRIPTION: This example demonstrates how to use the collections.Reverse function in Hugo templates to reverse the order of elements in a slice. The function takes a collection as input and returns a new collection with the elements in reverse order.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Reverse.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ slice 2 1 3 | collections.Reverse }} → [3 1 2]\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Navigation in Hugo Go HTML Template\nDESCRIPTION: This Go HTML template demonstrates how to paginate a collection of regular pages filtered by type 'posts'. It first iterates through the pages belonging to the current pager view and displays their titles as links. Then, it renders pagination controls, showing the current page number out of the total pages (`.TotalPages`), and provides conditional links for navigating to the First, Previous, Next, and Last pages of the paginated collection using the pager object's properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/TotalPages.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <p>Pager {{ .PageNumber }} of {{ .TotalPages }}</p>\n  <ul>\n    {{ with .First }}\n      <li><a href=\"{{ .URL }}\">First</a></li>\n    {{ end }}\n    {{ with .Prev }}\n      <li><a href=\"{{ .URL }}\">Previous</a></li>\n    {{ end }}\n    {{ with .Next }}\n      <li><a href=\"{{ .URL }}\">Next</a></li>\n    {{ end }}\n    {{ with .Last }}\n      <li><a href=\"{{ .URL }}\">Last</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Anchor Elements with Regex - Go HTML Template\nDESCRIPTION: This snippet demonstrates capturing link destinations and text using a regular expression within a Hugo Go HTML Template. The pattern extracts the href and the text from anchor tags in .Content. The findRESubmatch function is used, and both the regex and matches variables are defined in the template. This pattern relies on Hugo templates and requires the findRESubmatch function to be available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FindRESubmatch.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $regex := `<a\\s*href=\\\"(.+?)\\\">(.+?)<\\/a>` }}\n{{ $matches := findRESubmatch $regex .Content }}\n```\n\n----------------------------------------\n\nTITLE: Paginating and Rendering Pagers in Hugo - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the Paginate method in a Hugo Go HTML template to create a paginator object for regular post pages. It then iterates over the posts on the current page and generates heading links for each. The snippet also renders a navigation list of pager links using the Pagers method, outputting each page number as a link. It relies on Hugo's templating functions including where, Paginate, and Pagers, and expects the site to be configured with regular pages of type 'posts'. Expected input includes a valid Hugo .Site object with posts; output is structured HTML comprising post links and pager navigation. Limitations are that it assumes paginatable content and should be placed within appropriate list or section templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/Pagers.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <ul>\n    {{ range .Pagers }}\n      <li><a href=\"{{ .URL }}\">{{ .PageNumber }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Pages with Truncated Check in Hugo - Go HTML Template\nDESCRIPTION: This snippet demonstrates iterating through a page list in Hugo using Go HTML templates. It displays a page title and summary and conditionally renders a 'Read more...' link if the content is longer than its summary, as determined by the .Truncated property. Prerequisites include a Hugo site with page collections; inputs are the page objects, and outputs are HTML blocks for each page. The template leverages Hugo data variables and should be included within a template file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Truncated.md#2025-04-23_snippet_0\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ range .Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  {{ .Summary }}\n  {{ if .Truncated }}\n    <a href=\"{{ .RelPermalink }}\">Read more...</a>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Conditionals in Hugo Go Templates (Go HTML Template)\nDESCRIPTION: This snippet showcases a basic conditional using the 'if' statement in Hugo's Go templates. It assigns a string variable and prints it if the value is truthy. No external dependencies are required aside from Hugo's templating engine syntax. Inputs are variables and their values; output is the string rendered when the condition is met.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/if.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"foo\" }}\\n{{ if $var }}\\n  {{ $var }} \\u2192 foo\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Trimming Strings Using Hugo Template in Go\nDESCRIPTION: This snippet demonstrates how to use the trim function within Hugo's Go HTML templates to remove leading and trailing characters (specified in the CUTSET parameter) from a provided string. It relies on Hugo's internal templating functions with the alias 'trim', requiring Hugo to be installed and the function to be imported in the template context. The snippet takes an input string and a cutset (both strings), removes any occurrences of characters in the cutset from both ends of the string, and outputs the trimmed result; e.g., '++foo--' trimmed by '+-' yields 'foo'. This operation cannot remove characters from the middle and works only on the ends of the string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Trim.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ trim \"++foo--\" \"+-\" }} → foo\n```\n\n----------------------------------------\n\nTITLE: Rendering Main Menu in Hugo Template\nDESCRIPTION: This Go HTML template snippet shows how to render the main menu in Hugo. It iterates through menu items, highlighting the current page and setting appropriate attributes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Menus.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with site.Menus.main }}\n  <nav class=\"menu\">\n    {{ range . }}\n      {{ if $.IsMenuCurrent .Menu . }}\n        <a class=\"active\" aria-current=\"page\" href=\"{{ .URL }}\">{{ .Name }}</a>\n      {{ else }}\n        <a href=\"{{ .URL }}\">{{ .Name }}</a>\n      {{ end }}\n    {{ end }}\n  </nav>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Integer [1, N] with math.Rand (Go HTML Template)\nDESCRIPTION: This snippet demonstrates generating a pseudo-random integer within the closed interval [1, N] (in this case, [1, 6]). It multiplies the result of `math.Rand` (a float in [0.0, 1.0)) by N (6 in the example) using `mul` and then applies `math.Ceil` to round up to the nearest integer. This effectively maps the interval (0.0, N.0] to the integers [1, N].\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Rand.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Rand | mul 6 | math.Ceil }}\n```\n\n----------------------------------------\n\nTITLE: Defining a 90-Degree Rotation Filter in Hugo go-html-template\nDESCRIPTION: Defines a filter that applies a 90-degree rotation (clockwise) to images using the images.Process function. Passes 'r90' as the transformation step. Typically used to rotate image resources directly in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"r90\" }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Capitalization of List Titles - Hugo Configuration\nDESCRIPTION: This Hugo configuration setting disables the automatic capitalization of list titles derived from taxonomy terms. It should be set in your config.toml, config.yaml, or equivalent Hugo site configuration file. Dependency: Hugo static site generator. Input: A boolean setting. Output: List titles are rendered as specified, without unwanted capitalization.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/term.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\ncapitalizeListTitles = false\n```\n\n----------------------------------------\n\nTITLE: Defining a Segment in Hugo Configuration (TOML)\nDESCRIPTION: This TOML configuration snippet defines a segment named 'segment1'. It includes rules to exclude pages with languages starting with 'n' or English pages with the 'rss' output format. It includes pages of kind 'home', 'term', or 'taxonomy', as well as pages within the '/docs' path and its subdirectories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/segments.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[segments.segment1]\n  [[segments.segment1.excludes]]\n    lang = \"n*\"\n  [[segments.segment1.excludes]]\n    lang   = \"en\"\n    output = \"rss\"\n  [[segments.segment1.includes]]\n    kind = \"{home,term,taxonomy}\"\n  [[segments.segment1.includes]]\n    path = \"{/docs,/docs/**}\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Nested Hugo Shortcodes in Content File\nDESCRIPTION: This snippet shows how to use nested shortcodes in a Hugo content file (Markdown). The outer `greeting` shortcode is called with a `dateFormat` parameter, and the inner `now` shortcode is called within the `greeting` shortcode's content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Parent.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```text {file=\"content/welcome.md\"}\n{{</* greeting dateFormat=\"Jan 2, 2006\" */>}}\nWelcome. Today is {{</* now */>}}.\n{{</* /greeting */>}}\n```\n```\n\n----------------------------------------\n\nTITLE: Member comparison with 'not in' operator in collections.Where\nDESCRIPTION: Example showing how to filter pages where a parameter value is not contained within a slice using the 'not in' operator.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $fruit := where site.RegularPages \"Section\" \"eq\" \"fruit\" }}\n\n{{ $colors := slice \"red\" \"yellow\" }}\n{{ $pages := where $fruit \"Params.color\" \"not in\" $colors }}\n```\n\n----------------------------------------\n\nTITLE: Using Hugo Variables in Sass Files\nDESCRIPTION: Example of how to use Hugo variables in Sass files, showing the syntax difference between LibSass and Dart Sass for importing variables from the Hugo context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/Sass.md#2025-04-23_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n// LibSass\n@import \"hugo:vars\";\n\n// Dart Sass\n@use \"hugo:vars\" as v;\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on Debian-based Distributions\nDESCRIPTION: Command to install the extended edition of Hugo on Debian-based Linux distributions (Ubuntu, Linux Mint, Pop!_OS, etc.) using the apt package manager.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install hugo\n```\n\n----------------------------------------\n\nTITLE: Defining a Headless Page Build Configuration - TOML\nDESCRIPTION: This TOML snippet defines front matter for a headless page in Hugo. The 'build' object disables listing and rendering, and disables resource publishing except when resources are explicitly referenced in templates. Requires placement in a page's front matter. Key parameters are 'list', 'publishResources', and 'render', each set to 'never' or 'false' for full control. Inputs are key-value pairs for the build options; output is a page that isn't listed or rendered but whose resources can be accessed if referenced.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/build-options.md#2025-04-23_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'Headless page'\\n[build]\\n  list = 'never'\\n  publishResources = false\\n  render = 'never'\n```\n\n----------------------------------------\n\nTITLE: Rendering Menu Entries Using ByWeight Method in Hugo Templates\nDESCRIPTION: Go HTML template code that demonstrates how to render menu entries sorted by the ByWeight method, which orders items by weight, then name, then identifier.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/ByWeight.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main.ByWeight }}\n    <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Example AsciiDoc Configuration in Hugo (TOML)\nDESCRIPTION: Demonstrates configuring the AsciiDoc renderer in Hugo (`hugo.toml`). It enables the `asciidoctor-html5s` and `asciidoctor-diagram` extensions, sets `workingFolderCurrent` to `true` (often needed for includes and diagrams), and defines custom Asciidoctor attributes (`my-base-url`, `my-attribute-name`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/markup.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[markup.asciidocExt]\n    extensions = [\"asciidoctor-html5s\", \"asciidoctor-diagram\"]\n    workingFolderCurrent = true\n    [markup.asciidocExt.attributes]\n        my-base-url = \"https://example.com/\"\n        my-attribute-name = \"my value\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Related Method Options Map in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet sets up an options map for the Related method, demonstrating advanced control over how related content is matched. It specifies indices to search (e.g., tags, keywords), provides the page context, defines named keyword slices using the keyVals function, and lists fragment identifiers. This template is useful for customizing related content matching and requires that Hugo's keyVals function and Page context are available. The map must be passed to a Related invocation in a full query.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/related-content.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $page := . }}\\n{{ $opts := dict\\n  \"indices\" (slice \"tags\" \"keywords\")\\n  \"document\" $page\\n  \"namedSlices\" (slice (keyVals \"tags\" \"hugo\" \"rocks\") (keyVals \"date\" $page.Date))\\n  \"fragments\" (slice \"heading-1\" \"heading-2\")\\n}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Title to HTML in Hugo Template\nDESCRIPTION: This snippet demonstrates how to use the markdownify function to convert a Markdown-formatted title to HTML within a Hugo template. The function is applied to the .Title variable and the result is placed inside an h2 tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Markdownify.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<h2>{{ .Title | markdownify }}</h2>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data Structure\nDESCRIPTION: Example of the JSON data structure that would be returned by the getJSON function, representing a list of books with author, rating, and title properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"author\": \"Victor Hugo\",\n    \"rating\": 5,\n    \"title\": \"Les Misérables\"\n  },\n  {\n    \"author\": \"Victor Hugo\",\n    \"rating\": 4,\n    \"title\": \"The Hunchback of Notre Dame\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Truncated Summary with strings.Truncate in Go HTML Template\nDESCRIPTION: Presents an alternative method for generating a summary within a Hugo template. Instead of relying on Hugo's built-in summary generation methods (`.Summary`), this snippet uses the `strings.Truncate` function to truncate the full page content (`.Content`) to a specified number of characters (42 in this case). This offers more granular control over the summary length directly in the template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/summaries.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ range site.RegularPages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  <div class=\"summary\">\n    {{ .Content | strings.Truncate 42 }}\n  </div>\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Parameters in Hugo Templates\nDESCRIPTION: Demonstrates equivalent ways to access page parameters at the top level of a template when a Page object is in context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/global/page.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Params.foo }}\n{{ .Page.Params.foo }}\n{{ page.Params.foo }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Last Modification Date and Sorting Within Groups by Title in Hugo Go HTML Templates\nDESCRIPTION: This snippet shows how to group Hugo pages by last modification date, and then sort the pages within each group by their title using the ByTitle method. Requires the '.Pages' collection, the GroupByLastmod method, and ByTitle as a sorting option within each group. Inputs include the layout string for date formatting. Outputs a list of groups by lastmod date, with pages inside each group sorted alphabetically by title; group sorting order defaults to lastmod descending.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByLastmod.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByLastmod \\\"January 2006\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages.ByTitle }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .Title }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating Template Comments in Hugo\nDESCRIPTION: Demonstrates how to create inline and block comments in Hugo templates. Comments are not parsed, executed, or displayed when the page is rendered.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n{{/* This is an inline comment. */}}\n{{- /* This is an inline comment with adjacent whitespace removed. */ -}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Highlight Shortcode in Hugo\nDESCRIPTION: Implementation of a custom shortcode for more concise inline code highlighting. This shortcode creates a simpler syntax with preset options and a default language.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/highlight.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $code := .Inner | strings.TrimSpace }}\n{{ $lang := or (.Get 0) \"go\" }}\n{{ $opts := dict \"hl_inline\" true \"noClasses\" true }}\n{{ transform.Highlight $code $lang $opts }}\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for os.FileExists\nDESCRIPTION: Illustrates a sample directory structure within a Hugo project's 'content' directory. This structure serves as the context for demonstrating the behavior of the os.FileExists function in the subsequent examples.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/FileExists.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── about.md\n├── contact.md\n└── news/\n    ├── article-1.md\n    └── article-2.md\n```\n\n----------------------------------------\n\nTITLE: Checking Membership in String Slice - Hugo templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the 'in' function to check if a specific string (\\\"b\\\") exists within a slice of strings created using the 'slice' function in Hugo templates. Dependencies include Hugo and its Go HTML Template functions. Inputs are a slice of strings and a single string to check for membership; the output is a boolean indicating membership (true). No external packages are required, and the usage is limited to Hugo's templating context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/In.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"a\" \"b\" \"c\" }}\n{{ in $s \"b\" }} → true\n```\n\n----------------------------------------\n\nTITLE: Basic Image Render Hook Implementation\nDESCRIPTION: Basic render hook template that renders Markdown images according to the CommonMark specification.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/images.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<img src=\"{{ .Destination | safeURL }}\"\n  {{- with .PlainText }} alt=\"{{ . }}\"{{ end -}}\n  {{- with .Title }} title=\"{{ . }}\"{{ end -}}\n>\n{{- /* chomp trailing newline */ -}}\n```\n\n----------------------------------------\n\nTITLE: Context Binding Error Example in Hugo Templates\nDESCRIPTION: Shows an incorrect approach that causes errors when trying to access page methods on a bound integer context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/with.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with 42 }}\n  {{ .Title }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Calling Methods on Page and Site Objects in Hugo Templates (go-html-template)\nDESCRIPTION: Displays how to chain methods on 'Page' and 'Site' objects to fetch titles, using dot notation for context properties. Assumes the template receives an appropriate context. '.Site.Title' and '.Page.Title' are both shown, confirming equivalence when template context is set to a 'Page' object.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_15\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Title }} → My Site Title\\n{{ .Page.Title }} → My Page Title\n```\n\n----------------------------------------\n\nTITLE: Building Hugo Site and Deploying to Firebase\nDESCRIPTION: This command builds the Hugo site and then deploys it to Firebase hosting in a single step.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhugo && firebase deploy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Element Count from Hugo Paginator with Go Template\nDESCRIPTION: This Go HTML template snippet first filters site pages to select those of type 'posts'. It then creates a paginator for these pages using `.Paginate`. After iterating through the pages for the current view (displaying their titles and links), it uses `{{ with $paginator }}` to access the paginator object and displays the total number of elements (pages of type 'post' in this case) across all pages via `{{ .NumberOfElements }}`. This relies on the Hugo template context providing `site.RegularPages` and the `.Paginate` method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/NumberOfElements.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  {{ .NumberOfElements }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Parsable String Date Values Using time.Format - Hugo Go HTML Template\nDESCRIPTION: This snippet shows how to use the time.Format function in a Hugo template to format a date value provided as a parsable string. The string is interpreted directly by time.Format without prior parsing. The layout string specifies the output format, returning the formatted date. This assumes the input string can be parsed by Hugo into a date/time value; otherwise, the function may return an error or unexpected result.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/Format.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := \"15 Oct 2023\" }}\n{{ time.Format \"January 2, 2006\" $t }} → October 15, 2023\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Cascade Rules with Arrays in Hugo Config\nDESCRIPTION: Illustrates using an array of cascade blocks (`[[cascade]]`) in the site configuration (`hugo.toml`). This allows defining multiple, independent cascade rules. The first rule targets English and German pages under `/books/` with `color = 'red'`, while the second targets pages under `/films/` in the 'production' environment with `color = 'blue'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/cascade.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[cascade]]\n[cascade.params]\ncolor = 'red'\n[cascade.target]\npath = '{/books/**}'\nkind = 'page'\nlang = '{en,de}'\n[[cascade]]\n[cascade.params]\ncolor = 'blue'\n[cascade.target]\npath = '{/films/**}'\nkind = 'page'\nenvironment = 'production'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Support in Hugo - TOML\nDESCRIPTION: This configuration snippet sets up a multilingual site in Hugo by specifying German and English language sections with associated metadata. Parameters such as languageCode, languageDirection, languageName, title, and weight are set per language. Requires Hugo's configuration file (config.toml or similar); this setup determines available languages and their order when queried in templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Languages.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'de'\ndefaultContentLanguageInSubdir = false\n\n[languages.de]\nlanguageCode = 'de-DE'\nlanguageDirection = 'ltr'\nlanguageName = 'Deutsch'\ntitle = 'Projekt Dokumentation'\nweight = 1\n\n[languages.en]\nlanguageCode = 'en-US'\nlanguageDirection = 'ltr'\nlanguageName = 'English'\ntitle = 'Project Documentation'\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Rendering Menu Items with the Name Method in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to iterate through the main menu items and display each item's name using the .Name method. The code creates an unordered list where each list item contains a link with the URL and name of the menu entry.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Name.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over OpenAPI Paths and Operations in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to iterate over the paths defined in the unmarshalled OpenAPI document (`$api.Paths`). For each path, it displays the path string. It then checks for the existence of GET and POST operations (`$details.Get`, `$details.Post`) and displays their summaries if present, structuring the output using `<p>`, `<dl>`, `<dt>`, and `<dd>` HTML tags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/openapi3/Unmarshal.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range $path, $details := $api.Paths }}\n  <p>{{ $path }}</p>\n  <dl>\n    {{ with $details.Get }}\n      <dt>GET</dt>\n      <dd>{{ .Summary }}</dd>\n    {{ end }}\n    {{ with $details.Post }}\n      <dt>POST</dt>\n      <dd>{{ .Summary }}</dd>\n    {{ end }}\n  </dl>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shims for Dependency Injection with js.Build in Hugo Go HTML Template\nDESCRIPTION: Shows how to map external React/ReactDOM libraries to shim files for build-time dependency injection in Hugo's js.Build. The Go template creates a 'shims' map and applies it during the build. Dependencies: Hugo resources pipeline, local shim JS files. Use to swap dependencies between environments (CDN vs full bundle). Inputs: component-library keys, relative shim file paths. Outputs: bundled JS using specified shims.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/js/options.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $shims := dict \"react\" \"js/shims/react.js\"  \"react-dom\" \"js/shims/react-dom.js\" }}\n{{ $js = $js | js.Build dict \"shims\" $shims }}\n```\n\n----------------------------------------\n\nTITLE: Querying Substring Presence with Case Sensitivity using strings.Contains in Go HTML Template\nDESCRIPTION: This snippet demonstrates that strings.Contains performs a case-sensitive substring search in Go HTML Templates. When searching for \\\"Go\\\" within \\\"Hugo\\\" (note the capital G), the function returns false since the cases do not match. Dependencies and context are the same as previously described. Use this function with caution when handling user input or variable case scenarios.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Contains.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.Contains \"Hugo\" \"Go\" }} → false\n```\n\n----------------------------------------\n\nTITLE: Automated Deployment Setup for Hugo Site on Codeberg\nDESCRIPTION: This snippet outlines the steps for setting up automated deployment of a Hugo site to Codeberg Pages. It includes initializing a Git repository, adding the public directory to .gitignore, and pushing the project to a Codeberg repository for CI/CD.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-codeberg-pages.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# initialize new git repository\ngit init\n\n# add /public directory to our .gitignore file\necho \"/public\" >> .gitignore\n\n# commit and push code to main branch\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin https://codeberg.org/<YourUsername>/<YourWebsite>.git\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Sorting Menu Entries Alphabetically Using ByName Method\nDESCRIPTION: A Go HTML template snippet showing how to sort menu entries alphabetically by name using the ByName method. The code iterates through the sorted menu entries and renders them as list items with links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/ByName.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main.ByName }}\n    <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Title in Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates how to access the global `Site` object within a Hugo template and retrieve its `Title` property. The `.Site` variable provides access to site-wide information, and `.Title` specifically fetches the title defined in the site's configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Site.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Title }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weighted Pages Using Get Method in Hugo\nDESCRIPTION: Demonstrates how to use the Get method on a Taxonomy object to retrieve weighted pages for a specific term. It also shows equivalent syntax using chaining and the index function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Get.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $weightedPages := $taxonomyObject.Get \"suspense\" }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $weightedPages := $taxonomyObject.suspense }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $weightedPages := $taxonomyObject.my-genre }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $weightedPages := index $taxonomyObject \"my-genre\" }}\n```\n\n----------------------------------------\n\nTITLE: Assigning Taxonomy Terms in Hugo Front Matter (TOML)\nDESCRIPTION: Demonstrates how to assign terms ('Tag A', 'Tag B', 'Category A', 'Category B') to specific taxonomies ('tags', 'categories') within a content file's TOML front matter. The plural name of the taxonomy is used as the front matter key, holding an array of term strings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/taxonomies.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n{{< code-toggle file=content/example.md fm=true >}}\ntitle = 'Example'\ntags = ['Tag A','Tag B']\ncategories = ['Category A','Category B']\n{{< /code-toggle >}}\n```\n\n----------------------------------------\n\nTITLE: Grouping and Sorting by Expiry Date Ascending in Hugo Go HTML Template\nDESCRIPTION: Shows how to group pages by expiration date and sort the resulting groups in ascending order using the optional 'asc' parameter in GroupByExpiryDate. The code outputs group headers (formatted dates), each followed by a list of page links belonging to that group. Assumes the .Pages context is available and items have expiryDate metadata. Hugo must be configured appropriately to support this operation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByExpiryDate.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByExpiryDate \\\"January 2006\\\" \\\"asc\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Pages Sorted by Parameter in Descending Order Using Hugo Templates (Go HTML Template)\nDESCRIPTION: This code demonstrates iterating over pages sorted in descending order by the 'author' parameter using the ByParam method followed by Reverse in Hugo templates. Requires page collections with the 'author' parameter. Outputs links to each page in descending order according to the parameter value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByParam.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range (.Pages.ByParam \"author\").Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Taxonomy Listing Template Sorted Alphabetically - Go HTML Template\nDESCRIPTION: Defines a Hugo taxonomy template (main block) that lists taxonomy terms sorted alphabetically using the Alphabetical method. Each term displays as a link including its associated page count. Requires Hugo and the ordered taxonomy methods. Inputs are taxonomy terms; outputs are sorted HTML term lists.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n  {{ range .Data.Terms.Alphabetical }}\n    <h2><a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a> ({{ .Count }})</h2>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Removing HTML Tags with transform.Plainify in Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates the use of the plainify function (an alias for transform.Plainify) to remove HTML tags from a string. It takes a string with HTML content as input and returns the plain text version.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Plainify.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"<b>BatMan</b>\" | plainify }} → BatMan\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates by Locale in Hugo Go HTML Template\nDESCRIPTION: Go HTML template code demonstrating date localization. It takes the page's `.Date` variable (defined in front matter) and formats it using Hugo's `time.Format` function with the predefined layout string `:date_full`. The output format automatically adjusts based on the locale settings of the current language.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Date | time.Format \":date_full\" }}\n```\n\n----------------------------------------\n\nTITLE: Using lang.FormatNumber for Locale-Specific Number Formatting (Go HTML Template)\nDESCRIPTION: This Go HTML Template snippet demonstrates the usage of Hugo's `lang.FormatNumber` function. It takes the number 512.5032 and formats it to 2 decimal places using the pipe syntax (`|`). The function respects the current language and regional settings defined in the Hugo site configuration. The expected output is the string '512.50'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/FormatNumber.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ 512.5032 | lang.FormatNumber 2 }} → 512.50\n```\n\n----------------------------------------\n\nTITLE: Setting the 'url' Front Matter Field in Hugo With File Extension (TOML)\nDESCRIPTION: Illustrates how to assign a static URL with a specific file extension (e.g., .html) using the 'url' property in TOML front matter. Useful for pages that should end in an extension, often for compatibility with legacy paths or custom server requirements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'My First Article'\\nurl = 'articles/my-first-article.html'\n```\n\n----------------------------------------\n\nTITLE: Hugo Menu Template with PageRef Fallback\nDESCRIPTION: An improved menu template that falls back to the PageRef method when URL is empty, ensuring non-matching pages still have a value in their href attributes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/PageRef.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li><a href=\"{{ or .URL .PageRef }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Table of Contents in Hugo\nDESCRIPTION: Creates a custom table of contents using Fragments.ToHTML method with specified start level, end level, and list type parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Fragments.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $startLevel := 2 }}\n{{ $endLevel := 3 }}\n{{ $ordered := true }}\n{{ .Fragments.ToHTML $startLevel $endLevel $ordered }}\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Content Directory Structure\nDESCRIPTION: This text block shows an example file and directory structure for a Hugo project's content. It illustrates nested sections (`lessons`, `lesson-1`, `lesson-2`), regular pages (`part-1.md`, `contact.md`), and a subdirectory (`resources`) that is not a section because it lacks an `_index.md` file. This structure is used to exemplify the output of the `RegularPages` method in different contexts.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RegularPages.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── lessons/\n│   ├── lesson-1/\n│   │   ├── _index.md\n│   │   ├── part-1.md\n│   │   └── part-2.md\n│   ├── lesson-2/\n│   │   ├── resources/\n│   │   │   ├── task-list.md\n│   │   │   └── worksheet.md\n│   │   ├── _index.md\n│   │   ├── part-1.md\n│   │   └── part-2.md\n│   ├── _index.md\n│   ├── grading-policy.md\n│   └── lesson-plan.md\n├── _index.md\n├── contact.md\n└── legal.md\n```\n\n----------------------------------------\n\nTITLE: Checking Membership in Float Slice - Hugo templates - Go HTML Template\nDESCRIPTION: This code sample shows how to check for the presence of a floating-point number (2.22) in a slice of floats using the 'in' function in Hugo templates. Initialization is achieved via the 'slice' function. Inputs are a slice of floats and a target float value; output is a boolean indicating presence (true). Designed for use within Hugo's Go HTML Template system.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/In.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice 1.11 2.22 3.33 }}\n{{ in $s 2.22 }} → true\n```\n\n----------------------------------------\n\nTITLE: Building Hugo with extended SCSS support\nDESCRIPTION: This command builds Hugo with the extended tag enabled to include SCSS support, which requires a C compiler.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nHUGO_BUILD_TAGS=extended mage install\n```\n\n----------------------------------------\n\nTITLE: Creating a Hugo Partial to Retrieve an Image Path in Go HTML Template\nDESCRIPTION: Example of a partial (`layouts/partials/GetImage.html`) designed to return an image path. It checks for an image in the page's `gallery` parameter first, then falls back to the `image` parameter, returning the found path or `false` using the `return` statement.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{/* layouts/partials/GetImage.html */}}\n{{ $image := false }}\n{{ with .Params.gallery }}\n  {{ $image = index . 0 }}\n{{ end }}\n{{ with .Params.image }}\n  {{ $image = . }}\n{{ end }}\n{{ return $image }}\n```\n\n----------------------------------------\n\nTITLE: Grouping by Expiry Date and Sorting Pages by Title in Hugo Go HTML Template\nDESCRIPTION: Illustrates grouping pages by their expiration date and then sorting the pages within each group by the page title using the .Pages.ByTitle method. Useful for presenting grouped content with an additional layer of intra-group ordering. Requires that pages include titles and expiryDate fields in their front matter, and that the template context provides access to .Pages and GroupByExpiryDate.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByExpiryDate.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByExpiryDate \\\"January 2006\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages.ByTitle }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .Title }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Using debug.Timer to Measure Template Execution Time in Hugo\nDESCRIPTION: Creates a timer to measure how long it takes to calculate the square root of numbers in a sequence. The timer starts at instantiation and stops when the Stop method is called.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/debug/Timer.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := debug.Timer \"TestSqrt\" }}\n{{ range seq 2000 }}\n  {{ $f := math.Sqrt . }}\n{{ end }}\n{{ $t.Stop }}\n```\n\n----------------------------------------\n\nTITLE: Creating Mask and Conversion Filters for Images with Hugo (Go HTML Template)\nDESCRIPTION: This snippet creates two Hugo image filters: one for WebP conversion and one for applying an image mask. The resources.Get function loads the mask image from the project. Both filters are combined into a slice for sequential application. This approach requires that the referenced mask image exists in the resources path and is accessible to Hugo's build process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Mask.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter1 := images.Process \"webp\" }}\n{{ $filter2 := images.Mask (resources.Get \"images/mask.png\") }}\n{{ $filters := slice $filter1 $filter2 }}\n```\n\n----------------------------------------\n\nTITLE: Using Menu Entry URL Method in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to create a navigation menu by iterating through site menu entries and accessing their URL values. The URL method returns the RelPermalink of associated pages or the entry's url property if no page is associated.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/URL.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Appending a Slice to Another Slice in Hugo Templates (Go HTML Template)\nDESCRIPTION: Illustrates combining two slices by appending an entire slice to another existing slice using the append function. The example verifies that appending a slice of elements results in a flattened output in Hugo. This is useful for merging separate lists. Inputs are two slices; output is a concatenated slice.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Append.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \\\"a\\\" \\\"b\\\" }}\\n{{ $s }} → [a b]\\n\\n{{ $s = $s | append (slice \\\"c\\\" \\\"d\\\") }}\\n{{ $s }} → [a b c d]\n```\n\n----------------------------------------\n\nTITLE: Reporting Multilingual Status - Hugo Template - go-html-template\nDESCRIPTION: This template snippet calls the hugo.IsMultilingual function to check if more than one language is configured in the site. It returns a boolean value—true if the site has at least two languages, false otherwise. Required dependencies include a properly configured multilingual setup in the site's configuration file. No parameters are required; the output is directly used for conditional rendering in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/IsMultilingual.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.IsMultilingual }} → true\n```\n\n----------------------------------------\n\nTITLE: Starting Hugo Server with Disabled Live Reload in Bash\nDESCRIPTION: This bash script starts a Hugo server with live reload disabled, waits for the server to be ready, checks for the absence of livereload in the index.html, and then stops the server.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_disablelivereload.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo server --disableLiveReload &\n\nwaitServer\n\n! grep 'livereload' public/index.html\n\nstopServer\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Truncating HTML-Aware Strings in Go Templates - go-html-template\nDESCRIPTION: Demonstrates how to truncate an HTML string to a specified character limit within a Go HTML template, preserving valid HTML tags and avoiding word breaks. This example utilizes the safeHTML filter to prevent unwanted escaping of HTML and applies the truncate function. The dependencies include Hugo template functions such as safeHTML and truncate, and inputs are HTML strings with the expected output being truncated, well-formed HTML. Proper use of safeHTML is required for raw HTML strings to ensure correct rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Truncate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"<em>Keep my HTML</em>\" | safeHTML | truncate 10 }} → <em>Keep my …</em>\n```\n\n----------------------------------------\n\nTITLE: Filesystem Structure for Authors Branch Bundle Content - Text\nDESCRIPTION: Shows directory structure for a branch bundle in Hugo's content folder, organizing 'authors' with individual subfolders, each containing a term's content and media. This structure enables adding metadata (e.g., affiliation, image) to term pages. Intended to be followed exactly for authors taxonomy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n└── authors/\n    ├── jsmith/\n    │   ├── _index.md\n    │   └── portrait.jpg\n    └── rjones/\n        ├── _index.md\n        └── portrait.jpg\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output from Hugo GetTerms Function\nDESCRIPTION: This snippet shows the HTML output generated after Hugo processes the GetTerms template code. It displays the list of tags as links, with each tag's permalink and title properly rendered.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GetTerms.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>Tags</p>\n<ul>\n  <li><a href=\"/tags/historical/\">historical</a></li>\n  <li><a href=\"/tags/classic/\">classic</a></li>\n  <li><a href=\"/tags/fiction/\">fiction</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Alternative Methods for Accessing Site Parameters in Hugo Templates\nDESCRIPTION: Shows two equivalent ways to access the 'display_toc' parameter without using the Site.Param method: direct access and using the index function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Param.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Params.display_toc }}\n{{ index .Site.Params \"display_toc\" }}\n```\n\n----------------------------------------\n\nTITLE: Logging Resource Retrieval Errors as Warnings with Hugo resources.GetRemote (Go HTML Template)\nDESCRIPTION: This snippet is similar to error-based error handling but uses warnf instead of errorf in error cases to log warnings rather than failing the Hugo build. Ideal for non-critical resources where the site should continue to build even if the remote resource is missing or fails to load.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://broken-example.org/images/a.jpg\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ warnf \"%s\" . }}\n  {{ else with .Value }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ else }}\n    {{ warnf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Hugo Documentation Server\nDESCRIPTION: Commands to install dependencies and start the Hugo documentation server locally. Note that the need for 'npm i' may be removed in future updates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\nhugo server\n```\n\n----------------------------------------\n\nTITLE: Adding Values to Hugo Scratch Pad\nDESCRIPTION: Shows how to use the Add method to append values to existing keys in the scratch pad. It works with strings, numbers, and slices.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/NewScratch.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := newScratch }}\n{{ $s.Set \"greeting\" \"Hello\" }}\n{{ $s.Add \"greeting\" \"Welcome\" }}\n{{ $s.Get \"greeting\" }} → HelloWelcome\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := newScratch }}\n{{ $s.Set \"total\" 3 }}\n{{ $s.Add \"total\" 7 }}\n{{ $s.Get \"total\" }} → 10\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := newScratch }}\n{{ $s.Set \"greetings\" (slice \"Hello\") }}\n{{ $s.Add \"greetings\" (slice \"Welcome\" \"Cheers\") }}\n{{ $s.Get \"greetings\" }} → [Hello Welcome Cheers]\n```\n\n----------------------------------------\n\nTITLE: Example Data Directory Structure in Hugo\nDESCRIPTION: Illustrates a sample directory layout for Hugo's `data` directory. It shows how data files in various formats (YAML, JSON, XML, TOML) can be organized, including nested subdirectories like `books/`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Data.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndata/\n├── books/\n│   ├── fiction.yaml\n│   └── nonfiction.yaml\n├── films.json\n├── paintings.xml\n└── sculptures.toml\n```\n\n----------------------------------------\n\nTITLE: Adding an Image Border Using the Most Dominant Color in Hugo\nDESCRIPTION: This Go HTML template retrieves an image, gets its dominant colors (`.Colors`), selects the most dominant one using `index` (index 0), creates an `images.Padding` filter using this color, applies the filter to the image using `.Filter`, and then renders the resulting image in an `<img>` tag. Requires `resources.Get`, `index`, `images.Padding`, and the `.Filter` method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Colors.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ $mostDominant := index .Colors 0 }}\n  {{ $filter := images.Padding 5 $mostDominant }}\n  {{ with .Filter $filter }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying a Section with GetPage in Hugo - Go HTML Template\nDESCRIPTION: Uses Hugo's Go HTML template language to retrieve a section page ('/works/paintings') using the GetPage method on the Site object, then lists child pages with their titles and corresponding artist from Params. No external dependencies aside from Hugo templating. Inputs: path to section. Outputs: an HTML unordered list. Works only if the specified path is valid; returns nothing if the path cannot be resolved.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GetPage.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/works/paintings\" }}\\n  <ul>\\n    {{ range .Pages }}\\n      <li>{{ .Title }} by {{ .Params.artist }}</li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping and Paginating Pages with Hugo Templates in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use Hugo's Go HTML Template syntax to group site pages of type 'posts' by month and year, paginate the grouped results, and render an HTML structure with headings for each group and links to each page. It requires Hugo's templating engine, familiarity with the Paginate and GroupByDate methods, and access to the site context (site and .). The input is all regular pages of a specified type; the output is paginated HTML with sections per time period and navigation. Limitations include reliance on proper page front matter and that this pattern is best suited for blog-like collections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/PageGroups.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\\n{{ $paginator := .Paginate ($pages.GroupByDate \"Jan 2006\") }}\\n\\n{{ range $paginator.PageGroups }}\\n  <h2>{{ .Key }}</h2>\\n  {{ range .Pages }}\\n    <h3><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h3>\\n  {{ end }}\\n{{ end }}\\n\\n{{ template \"_internal/pagination.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content from a Page Resource in Hugo Templates (go-html-template)\nDESCRIPTION: Retrieves a markdown page resource from the bundle and renders its compiled content directly in the output. This example expects 'snippets/text.md' to exist; uses .Resources.Get to fetch and .Content to render. Inputs: page resource path string; outputs: HTML-rendered markdown contents. No special limitations beyond resource existence.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.Get \"snippets/text.md\" }}\\n  {{ .Content }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating New Content – Hugo CLI – Shell\nDESCRIPTION: Demonstrates the syntax for invoking the 'hugo new content' command with optional path and flags. This snippet is a command-line interface (CLI) invocation, used within a Hugo site's root directory to generate new content files. Parameters include file path and various flags for specifying options like content kind, theme, and target directory. Expected input is a valid file path and optional flags; output is a new content file generated in the Hugo directory structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new_content.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo new content [path] [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating Alternative Output Format Links in Go HTML Template\nDESCRIPTION: This Go HTML Template snippet iterates over a page's alternative output formats using the `.AlternativeOutputFormats` method. For each format, it generates an HTML `<link>` element with appropriate `rel`, `type`, and `href` attributes, commonly used in the `<head>` section for discovery.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .AlternativeOutputFormats }}\n  <link rel=\"{{ .Rel }}\" type=\"{{ .MediaType.Type }}\" href=\"{{ .Permalink | safeURL }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Image Filters Including Dithering in Go HTML Template\nDESCRIPTION: This example demonstrates a complete image processing pipeline within a Go HTML template. It retrieves an image resource, defines dithering options using the image's dominant colors and a specific method, creates a slice of filters (resize, dither, convert to PNG), applies these filters sequentially using `images.Filter`, and finally generates an `<img>` tag with the processed image's details. This illustrates the recommended practice of scaling before dithering and outputting to a lossless format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Dither.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"original.jpg\" }}\n  {{ $opts := dict\n    \"method\" \"ClusteredDotSpiral5x5\"\n    \"colors\" (first 3 .Colors)\n  }}\n  {{ $filters := slice\n    (images.Process \"resize 800x\")\n    (images.Dither $opts)\n    (images.Process \"png\")\n  }}\n  {{ with . | images.Filter $filters }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Index Page Layout (HTML/Go Template)\nDESCRIPTION: This is the layout template (`index.html`) for the site's homepage, located in the custom source directory (`mysource`). It uses Hugo template variables to display the page's permalink (`.Permalink`), the fixed build time (`now` influenced by `--clock`), the build environment (`hugo.Environment`), and merged site parameters (`.Site.Params.foo`, `.Site.Params.bar`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n-- mysource/layouts/index.html --\n<body>\nHome: {{ .Permalink }}, Time: {{ now }}\n</body>\nEnvironment: {{ hugo.Environment }}, foo: {{ .Site.Params.foo }}, bar: {{ .Site.Params.bar }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo File Structure with Page Kinds\nDESCRIPTION: A text representation of Hugo's content directory structure showing the mapping between file locations and their corresponding page kinds, including home, page, section, taxonomy, and term kinds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Kind.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── books/\n│   ├── book-1/\n│   │   └── index.md    <-- kind = page\n│   ├── book-2.md       <-- kind = page\n│   └── _index.md       <-- kind = section\n├── tags/\n│   ├── fiction/\n│   │   └── _index.md   <-- kind = term\n│   └── _index.md       <-- kind = taxonomy\n└── _index.md           <-- kind = home\n```\n\n----------------------------------------\n\nTITLE: Rendering Subtitle and Content in Hugo Home Template (Go HTML Template)\nDESCRIPTION: This Go HTML template snippet extends the base home template to render a subtitle (from .Params.Subtitle) before the standard content and list of regular pages. It illustrates how to access custom parameters defined in front matter and is dependent on the existence of subtitle in the index page front matter. Expected output includes a subtitle header, the page content, and a list of links to regular pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/home.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h3>{{ .Params.Subtitle }}</h3>\n  {{ .Content }}\n  {{ range site.RegularPages }}\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Remote Resource in Hugo Go Templates\nDESCRIPTION: Fetches an image from a remote URL using the `resources.GetRemote` function. The image is downloaded, cached, and assigned to the `$image` variable. Network access is required during the build process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := resources.GetRemote \"https://gohugo.io/img/hugo-logo.png\" }}\n```\n\n----------------------------------------\n\nTITLE: Converting Image Format Without Scaling in Hugo\nDESCRIPTION: Shows how to convert an image to WebP format without changing its dimensions by using the original image's width and height properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_24\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.GetMatch \"sunset.jpg\" }}\n  {{ with .Resize (printf \"%dx%d webp\" .Width .Height) }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Casting Decimal Values to Integer with Hugo int - Go HTML Template\nDESCRIPTION: This snippet showcases the usage of the Hugo int function to convert decimal (base 10) numbers and their string representations, as well as floating-point values, to integer values within Go HTML templates. Dependencies include Hugo and Go template syntax. Parameters include numeric literals or strings. The output is a base-10 integer, truncating any fractional part for floats. Inputs can be integers, strings, or floats, and leading zeros are significant for non-string values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToInt.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ int 11 }} → 11 (int)\n{{ int \"11\" }} → 11 (int)\n\n{{ int 11.1 }} → 11 (int)\n{{ int 11.9 }} → 11 (int)\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Parameters via `.Params` Map (Go HTML Template)\nDESCRIPTION: Demonstrates how to access shortcode parameters using the `.Params` method when the shortcode is called with named arguments. In this case, `.Params` behaves like a map, allowing access to parameter values using dot notation (e.g., `.Params.path`, `.Params.width`, `.Params.alt`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_12\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Params.path }} → a.jpg\n{{ .Params.width }} → 300\n{{ .Params.alt }} → A white kitten\n```\n\n----------------------------------------\n\nTITLE: Adding an Image Border Using the Darkest Dominant Color in Hugo\nDESCRIPTION: This Go HTML template retrieves an image, gets its dominant colors, sorts them by luminance (darkest first) using `sort`, selects the darkest one using `index` (index 0), creates an `images.Padding` filter with this color, applies the filter, and renders the resulting image. Requires `resources.Get`, `sort`, `index`, `images.Padding`, and the `.Filter` method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Colors.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ $darkest := index (sort .Colors \"Luminance\") 0 }}\n  {{ $filter := images.Padding 5 $darkest }}\n  {{ with .Filter $filter }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended with Chocolatey on Windows\nDESCRIPTION: Command to install the extended edition of Hugo using the Chocolatey package manager for Windows.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/windows.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nchoco install hugo-extended\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Headers to getJSON Requests\nDESCRIPTION: Demonstrates how to add authorization headers to getJSON requests using an options map in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"Authorization\" \"Bearer abcd\" }}\n{{ $data := getJSON \"https://example.org/books.json\" $opts }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Previous and Next Navigation in Hugo Single Page Template\nDESCRIPTION: Hugo template for single pages that adds previous and next navigation links using the .Prev and .Next methods, which follow Hugo's built-in sorting hierarchy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/page/next-and-prev.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Prev }}\n  <a href=\"{{ .RelPermalink }}\">Previous</a>\n{{ end }}\n\n{{ with .Next }}\n  <a href=\"{{ .RelPermalink }}\">Next</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Overriding the 'main' Block in a Hugo List Template (Go HTML Template)\nDESCRIPTION: Implements the \"main\" block in a child template (layouts/_default/list.html), replacing the \"main\" area defined in baseof.html. Iterates over .Pages to output a list of posts with their title and content. Prerequisites: Extends baseof.html via templating; requires .Pages data available. Inputs: .Pages (pages to list), output: HTML fragment injected into main area. Limitation: Only 'main' is overridden; all other blocks use the parent (base) implementations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/base.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \\\"main\\\" }}\\n  <h1>Posts</h1>\\n  {{ range .Pages }}\\n    <article>\\n      <h2>{{ .Title }}</h2>\\n      {{ .Content }}\\n    </article>\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter in Emacs Org Mode (Multi-line)\nDESCRIPTION: This snippet shows how to specify front matter in an Emacs Org Mode content file (`content/example.org`) using Org Mode keywords prefixed with `#+`. Standard fields like `TITLE`, `DATE`, `DRAFT`, `AUTHOR`, and `WEIGHT` are set. Array fields like `GENRES` and `TAGS` are populated by repeating the keyword for each value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/front-matter.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n#+TITLE: Example\n#+DATE: 2024-02-02T04:14:54-08:00\n#+DRAFT: false\n#+AUTHOR: John Smith\n#+GENRES: mystery\n#+GENRES: romance\n#+TAGS: red\n#+TAGS: blue\n#+WEIGHT: 10\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote JSON Using resources.GetRemote in Hugo\nDESCRIPTION: Modern alternative to getJSON for remote resources using resources.GetRemote and transform.Unmarshal with enhanced error handling and cache control.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $url := \"https://example.org/books.json\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    {{ $data = . | transform.Unmarshal }}\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Keywords with the Delimit Function in Hugo\nDESCRIPTION: Example of using Hugo's delimit function to join keywords into a comma-separated list with 'and' before the last item. This creates a human-readable list of keywords.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Keywords.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ delimit .Keywords \", \" \", and \" }} → tuna, sriracha, nori, and rice\n```\n\n----------------------------------------\n\nTITLE: Converting Month to String in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to convert a time.Month value to its string representation in Hugo. It uses the time.AsTime function to create a time.Time value and then extracts and formats the month as a string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Month.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Month.String }} → January\n```\n\n----------------------------------------\n\nTITLE: Generating Link Elements for Alternative Output Formats in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the AlternativeOutputFormats method to create link elements in the HTML head for each alternative output format of a page, with customized titles based on whether it's the home page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/AlternativeOutputFormats.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<head>\n  ...\n  {{ $title := printf \"%s | %s\" .Title site.Title }}\n  {{ if .IsHome }}\n    {{ $title = site.Title }}\n  {{ end }}\n  {{ range .AlternativeOutputFormats }}\n    {{ printf `<link rel=%q type=%q href=%q title=%q>` .Rel .MediaType.Type .Permalink $title | safeHTML }}\n  {{ end }}\n  ...\n</head>\n```\n\n----------------------------------------\n\nTITLE: Listing Page Translations using .Translations (Go HTML Template)\nDESCRIPTION: Demonstrates how to use the `.Translations` page method within a Go HTML template to generate a list of links to translated versions of the current page. It iterates through the collection returned by `.Translations` (which excludes the current page), creating list items (`<li>`) with links (`<a>`) pointing to the translation's relative permalink (`.RelPermalink`), annotated with the `hreflang` attribute (`.Language.LanguageCode`), and displaying the link title (`.LinkTitle`) and language name (`.Language.LanguageName` or fallback `.Language.Lang`). The `with` action ensures the list is only rendered if translations exist.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Translations.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Translations }}\n  <ul>\n    {{ range . }}\n      <li>\n        <a href=\"{{ .RelPermalink }}\" hreflang=\"{{ .Language.LanguageCode }}\">{{ .LinkTitle }} ({{ or .Language.LanguageName .Language.Lang }})</a>\n      </li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using math.Min Function in Hugo Template\nDESCRIPTION: This Go HTML template snippet demonstrates the usage of Hugo's `math.Min` function. It passes the scalar values 1 and 4, along with a slice created using `slice 2 3`, to the function. The function identifies 1 as the minimum value among all provided numbers (1, 2, 3, 4) and returns it as a float64. The example shows the function call and its expected output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Min.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Min 1 (slice 2 3) 4 }} → 1\n```\n\n----------------------------------------\n\nTITLE: Truncating Time Durations in Hugo Templates\nDESCRIPTION: Shows how to parse and truncate time durations using Hugo's time package. The example parses a complex duration string and demonstrates truncating it to different intervals using hours, minutes, and seconds as the truncation unit.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/duration/Truncate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }}\n\n{{ $d.Truncate (time.ParseDuration \"2h\") }} → 2h0m0s\n{{ $d.Truncate (time.ParseDuration \"3m\") }} → 3h30m0s\n{{ $d.Truncate (time.ParseDuration \"4s\") }} → 3h32m28s\n```\n\n----------------------------------------\n\nTITLE: Retrieving the First Matching Page Resource by Pattern in Hugo Go Template\nDESCRIPTION: Uses the `.Resources.GetMatch` method to find the first page resource whose path matches the provided glob pattern (e.g., \"images/*.jpg\"). The `with` action executes the inner block only if a matching resource is found. If a match exists, it renders an HTML `<img>` tag using the resource's details. This depends on the `.Resources` collection of the current page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Resources.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.GetMatch \"images/*.jpg\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Building and Fingerprinting JavaScript with Hugo js.Build (Go HTML Template)\nDESCRIPTION: This Go HTML Template snippet retrieves a JavaScript file as a resource with resources.Get, sets up js.Build options for minification, source maps, and target output, then processes the file with js.Build. It conditionally fingerprints the output for production and generates script HTML tags with appropriate attributes. Dependencies: Hugo Pipes, js.Build functionality, and optionally fingerprint. Parameters: input JavaScript resource, js.Build options dict. Outputs a permalink to the processed script, with or without SRI integrity, depending on environment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Build.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"js/main.js\" }}\n  {{ $opts := dict\n    \"minify\" hugo.IsProduction\n    \"sourceMap\" (cond hugo.IsProduction \"\" \"external\")\n    \"targetPath\" \"js/main.js\"\n  }}\n  {{ with . | js.Build $opts }}\n    {{ if hugo.IsProduction }}\n      {{ with . | fingerprint }}\n        <script src=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"></script>\n      {{ end }}\n    {{ else }}\n      <script src=\"{{ .RelPermalink }}\"></script>\n    {{ end }}\n  {{ end }}\n{{ end }}\n\n```\n\n----------------------------------------\n\nTITLE: Basic String Interpolation with fmt.Printf\nDESCRIPTION: Demonstrates basic string variable interpolation using fmt.Printf in Hugo templates. Shows how to format a string variable into a greeting message.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Printf.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"world\" }}\n{{ printf \"Hello %s.\" $var }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Parameters Using Context-Dependent Methods\nDESCRIPTION: Shows different ways to access site parameters when the Site object is in context, using both current context and template context syntax.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/global/site.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<!-- current context -->\n{{ .Site.Params.foo }}\n<!-- template context -->\n{{ $.Site.Params.foo }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pager Size in Hugo Pagination - Go HTML Template\nDESCRIPTION: This template code demonstrates how to use Hugo's Paginate method to paginate a list of posts and display pagination details, including retrieving the number of pages per pager using the PagerSize property. Dependencies include Hugo templating engine with access to .Paginate, site configuration for pagerSize, and a list of content pages. The code accepts a collection of pages, paginates them, iterates through each page to display titles, and displays the PagerSize value within the paginator context. Output includes a list of links and the pager size; constraints are Hugo-specific template variables and functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/PagerSize.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  {{ .PagerSize }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Variant Arguments in partialCached - Go HTML Template\nDESCRIPTION: This snippet extends cache key differentiation by including additional context parameters such as .Params.country and .Params.province. This ensures the partial is only rendered once per unique country-province combination. Useful for regionally customized content. Requires the parameters to exist in the page context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/IncludeCached.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partialCached \\\"footer.html\\\" . .Params.country .Params.province }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Matter for Hugo Showcase Submission in YAML\nDESCRIPTION: YAML front matter configuration for a Hugo showcase submission. It includes metadata fields for title, date, draft status, description, site URL, optional source code link, and author byline information.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/showcase/_template/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Myshowcase\ndate: \ndraft: true\ndescription: A short description of this page.\n# The URL to the site on the internet.\nsiteURL: https://gohugo.io/\n# Link to the site's Hugo source code if public and you can/want to share.\n# Remove or leave blank if not needed/wanted.\nsiteSource: https://github.com/gohugoio/hugoDocs\n# Add credit to the article author. Leave blank or remove if not needed/wanted.\nbyline: '[bep](https://github.com/bep), Hugo Lead'\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commit Body with GitInfo\nDESCRIPTION: Using the Body method on GitInfo to get the full commit message body.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GitInfo }}\n  {{ .Body }} → - Two new pages added.\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Weight - Hugo Template - Go HTML Template\nDESCRIPTION: Obtains the numeric ordering weight of the current language as defined in the Hugo config. This helps determine the language's position when iterating over site languages, important for multilingual navigations. Requires 'weight' property in language config.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Language.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Language.Weight }} \\u2192 1\n```\n\n----------------------------------------\n\nTITLE: Basic Heading Render Hook in Hugo\nDESCRIPTION: A basic implementation of a heading render hook that mimics Hugo's default heading rendering with CommonMark specification plus automatic ID attributes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/headings.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<h{{ .Level }} id=\"{{ .Anchor }}\" {{- with .Attributes.class }} class=\"{{ . }}\" {{- end }}>\n  {{- .Text -}}\n</h{{ .Level }}>\n```\n\n----------------------------------------\n\nTITLE: Adding Days, Months, and Years to Dates in Hugo Templates\nDESCRIPTION: Demonstrates how to use the AddDate function to add various time intervals to a date. It shows adding days, months, years, and negative values for each. The result is formatted using time.Format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/AddDate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d := \"2022-01-01\" | time.AsTime }}\n\n{{ $d.AddDate 0 0 1 | time.Format \"2006-01-02\" }} → 2022-01-02\n{{ $d.AddDate 0 1 1 | time.Format \"2006-01-02\" }} → 2022-02-02\n{{ $d.AddDate 1 1 1 | time.Format \"2006-01-02\" }} → 2023-02-02\n\n{{ $d.AddDate -1 -1 -1 | time.Format \"2006-01-02\" }} → 2020-11-30\n```\n\n----------------------------------------\n\nTITLE: Alternative Hugo Site Directory Structure\nDESCRIPTION: This shows an alternative directory structure with site configuration organized into subdirectories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/directory-structure.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nmy-site/\n├── archetypes/\n│   └── default.md\n├── assets/\n├── config/           <-- site configuration\n│   └── _default/\n│       └── hugo.toml\n├── content/\n├── data/\n├── i18n/\n├── layouts/\n├── static/\n└── themes/\n```\n\n----------------------------------------\n\nTITLE: Sample HTML Output of Hugo TableOfContents - HTML\nDESCRIPTION: This snippet shows an example of the HTML structure generated by the TableOfContents method in Hugo. The output consists of a <nav> element with nested <ul> and <li> elements, where each heading in the page is represented as a list item with an anchor link. No external dependencies are required; this example is for demonstration purposes only and illustrates the shape of the HTML that will be rendered in the browser. This HTML is output when .TableOfContents is rendered within a template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/TableOfContents.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nav id=\"TableOfContents\">\n  <ul>\n    <li><a href=\"#section-1\">Section 1</a>\n      <ul>\n        <li><a href=\"#section-11\">Section 1.1</a></li>\n        <li><a href=\"#section-12\">Section 1.2</a></li>\n      </ul>\n    </li>\n    <li><a href=\"#section-2\">Section 2</a></li>\n  </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Implementing if-else Branching in Hugo Go Templates (Go HTML Template)\nDESCRIPTION: This snippet demonstrates the use of 'if' with an 'else' clause in Hugo's templating system. It outputs the variable value if it is truthy, otherwise prints an alternative message. This approach helps manage template output for both conditions depending on variable state. No external dependencies are required; inputs are the variable and, optionally, alternate print statements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/if.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"foo\" }}\\n{{ if $var }}\\n  {{ $var }} \\u2192 foo\\n{{ else }}\\n  {{ print \"var is falsy\" }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Structure for Hugo Partials\nDESCRIPTION: Illustrates the recommended directory structure for organizing Hugo partial templates within the `layouts/partials` directory. It shows how subdirectories can be used for better organization of partials like headers, footers, and head elements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nlayouts/\n└── partials/\n    ├── footer/\n    │   ├── scripts.html\n    │   └── site-footer.html\n    ├── head/\n    │   ├── favicons.html\n    │   ├── metadata.html\n    │   └── prerender.html\n    └── header/\n        ├── site-header.html\n        └── site-nav.html\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter Template with Dynamic Title Generation\nDESCRIPTION: This YAML front matter template for Hugo uses the filename as the basis for the page title. It applies two transformations: replacing hyphens with spaces and capitalizing the first letter using Hugo's string functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/archetypes/default.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: {{ replace .File.ContentBaseName \"-\" \" \" | strings.FirstUpper }}\ndescription:\ncategories: []\nkeywords: []\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Content and Resources of All Pages in a Section - Go HTML Template\nDESCRIPTION: This Go HTML Template snippet renders all descendant pages under a section by iterating over .Pages, and for each, outputs content and image resources. Requires .Site.GetPage and access to the section path (e.g., '/headless'). The loop expects each descendant page to have image resources. Outputs HTML content and <img> elements for each image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/build-options.md#2025-04-23_snippet_4\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ with .Site.GetPage \"/headless\" }}\\n  {{ range .Pages }}\\n    {{ .Content }}\\n    {{ range .Resources.ByType \"image\" }}\\n      <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\\n    {{ end }}\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Built-in Disqus Template in Hugo\nDESCRIPTION: This Go HTML template snippet demonstrates how to include Hugo's internal Disqus partial template within a site's layout or content template file. It utilizes the `template` function to render `_internal/disqus.html`, passing the current page context (`.`). This context typically contains the site configuration (including the Disqus shortname) and potentially page-specific Disqus overrides from front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/comments.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/disqus.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Embedded Pagination in Terse Mode - Hugo Go HTML Template\nDESCRIPTION: This snippet illustrates invoking Hugo's internal pagination navigation using a 'terse' display mode. It's functionally similar to previous pagination calls, but produces a more compact navigation layout. Requires the current page context and Hugo's dict function. Outputs concise navigation controls as HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/pagination.html\" (dict \"page\" . \"format\" \"terse\") }}\n```\n\n----------------------------------------\n\nTITLE: Creating New Content Using Hugo CLI - Shell\nDESCRIPTION: Demonstrates creation of a new content file within Hugo using the 'hugo new content' command in a shell environment. Assumes Hugo CLI is installed and executed inside a Hugo project. The main parameter is the intended file path (here: posts/my-first-post.md), and the outcome is a newly created markdown file using archetype templates. Limitation: file path must match archetypes for optimal template seeding.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhugo new content posts/my-first-post.md\n\n```\n\n----------------------------------------\n\nTITLE: Linking Translations with translationKey in Hugo Front Matter\nDESCRIPTION: Shows how to use the `translationKey` parameter within the front matter of content files. Setting the same key (e.g., \"about\") in different language versions of a page explicitly links them as translations, overriding the default linking behavior based on file names or directory paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\ntranslationKey: \"about\"\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Warning Messages with math.Counter in Hugo\nDESCRIPTION: Shows how to prevent suppression of duplicate warning messages during debugging by making each message unique with the math.Counter function. This snippet iterates through regular pages and logs each section with a unique counter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Warnf.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range site.RegularPages }}\n  {{ .Section | warnf \"%#[2]v [%[1]d]\" math.Counter }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hugo Render Hook for Mermaid Diagrams\nDESCRIPTION: Provides the Go HTML template code for a custom Hugo code block render hook (`layouts/_default/_markup/render-codeblock-mermaid.html`). This hook wraps Mermaid code block content in a `<pre class=\"mermaid\">` tag and sets a flag (`hasMermaid`) in the page store to indicate a Mermaid diagram is present on the page. The `.Inner` variable holds the diagram code, which is HTML-escaped and then marked as safe HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre class=\"mermaid\">\n  {{ .Inner | htmlEscape | safeHTML }}\n</pre>\n{{ .Page.Store.Set \"hasMermaid\" true }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Translations for Reserved Keys (Go Template)\nDESCRIPTION: Demonstrates how to use the `T` function in a Go HTML template to retrieve translations for reserved keys. The underscore-prefixed key used in the TOML file must also be used when calling the `T` function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_15\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ T \"_description\" }} → descripción\n{{ T \"_few\" }} → pocos\n{{ T \"_many\" }} → muchos\n{{ T \"_one\" }} → uno\n{{ T \"_two\" }} → dos\n{{ T \"_zero\" }} → cero\n{{ T \"_other\" }} → otro\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Menus with Parent Property in Go HTML Templates\nDESCRIPTION: Template example demonstrating how to render a nested menu structure while displaying the parent property for each child menu entry. It iterates through main menu items and checks for children to create a hierarchical list.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Parent.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li>\n      <a href=\"{{ .URL }}\">{{ .Name }}</a>\n      {{ if .HasChildren }}\n        <ul>\n          {{ range .Children }}\n            <li><a href=\"{{ .URL }}\">{{ .Name }}</a> ({{ .Parent }})</li>\n          {{ end }}\n        </ul>\n      {{ end }}\n    </li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Content Directory Structure\nDESCRIPTION: This snippet shows a sample directory structure within a Hugo project's `content/posts` folder, demonstrating the ability to use various content formats (Markdown, AsciiDoc, Org Mode, Pandoc, reStructuredText, HTML) for different posts.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/formats.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n└── posts/\n    ├── post-1.md\n    ├── post-2.adoc\n    ├── post-3.org\n    ├── post-4.pandoc\n    ├── post-5.rst\n    └── post-6.html\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Page Resources by Type in Hugo Layout (Go Hugo Template)\nDESCRIPTION: This snippet, intended for a Hugo single page layout (e.g., 'layouts/lessons/single.html'), demonstrates how to iterate through a page's associated resources using `.Resources.ByType \\\"page\\\"`. This allows processing only the resources identified as type 'page' (like associated Markdown files defined in the page bundle) and rendering their content using `.Content`. It depends on the page having associated resources of type 'page'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/ResourceType.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Resources.ByType \"page\" }}\n  {{ .Content }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Hierarchy Permalink - Hugo Configuration - TOML\nDESCRIPTION: This TOML example shows how to set a date-based permalink structure for all regular pages in the content root of a Hugo site. By mapping \"/\" to a path with year, month, and slug tokens, all root-level pages will generate URLs in this hierarchy. Dependencies: Hugo. The key parameter is the root '/' key, and the output is URLs with a structure like '/2023/06/post-title/'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/permalinks.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[permalinks.page]\n\"/\" = \"/:year/:month/:slug/\"\n```\n\n----------------------------------------\n\nTITLE: Deferring TailwindCSS Processing with templates.Defer in Hugo (Go HTML Template)\nDESCRIPTION: This snippet demonstrates the use of templates.Defer within a Hugo layout to defer the generation and processing of TailwindCSS assets until all sites have rendered. Dependencies include Hugo (v0.128.0+), the TailwindCSS pipeline, and resource pipeline features. The implementation carefully handles CSS in production versus development environments, leveraging minification and fingerprinting for security and caching. Parameters such as 'key' enable caching and reuse, while the structure ensures CSS files are only included after analysis. Output is a <link> tag with appropriate attributes. Use only in page layouts, not shortcodes or partials.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/templates/Defer.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with (templates.Defer (dict \"key\" \"global\")) }}\n  {{ $t := debug.Timer \"tailwindcss\" }}\n  {{ with resources.Get \"css/styles.css\" }}\n    {{ $opts := dict\n      \"inlineImports\" true\n      \"optimize\" hugo.IsProduction\n    }}\n    {{ with . | css.TailwindCSS $opts }}\n      {{ if hugo.IsDevelopment }}\n        <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" />\n      {{ else }}\n        {{ with . | minify | fingerprint }}\n          <link\n            rel=\"stylesheet\"\n            href=\"{{ .RelPermalink }}\"\n            integrity=\"{{ .Data.Integrity }}\"\n            crossorigin=\"anonymous\" />\n        {{ end }}\n      {{ end }}\n    {{ end }}\n  {{ end }}\n  {{ $t.Stop }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using the Delimit Function in Hugo\nDESCRIPTION: The 'delimit' function takes a slice or map and returns a string of all the elements joined by a delimiter. This example demonstrates its usage with a slice of strings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n{{ delimit (slice \"A\" \"B\" \"C\") \", \" }} → A, B, C\n```\n\n----------------------------------------\n\nTITLE: With SafeCSS Declaration in Hugo Go HTML Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates declaring a CSS string variable and rendering it as a style attribute after marking it safe using the safeCSS pipe. This signals to Hugo that the content is trusted, allowing it to be included in the output verbatim. Requires only Hugo's Go HTML Template support. The '$style' variable is piped into safeCSS to prevent automatic escaping or substitution.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/CSS.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $style := \"color: red;\" }}\\n<p style=\"{{ $style | safeCSS }}\">foo</p>\n```\n\n----------------------------------------\n\nTITLE: Hugo Template for Rendering Sections\nDESCRIPTION: Template code that iterates through site sections and creates links with titles\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Sections.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.Sections }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Listing Pages with Summaries - Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates how to iterate through all pages in a Hugo site section, displaying each page's link title as a heading and its summary below. It leverages Hugo's Go HTML templating language and the built-in .Pages and .Summary properties. No external dependencies are required, but this template must be used within a Hugo template context where the .Pages collection is available. The input is the current page context, and the output is a list of headings and summaries.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Summary.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages }}\\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n  {{ .Summary }}\\n{{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Fragment Indexing in Hugo Related Content - TOML\nDESCRIPTION: This TOML snippet configures Hugo's related content feature to index content by headings (fragments) using a dedicated 'fragmentrefs' index. It sets options such as threshold, inclusion of newer matches, case handling, and the configuration of an index of type fragments. The fragmentrefs index allows Hugo to match and filter content by headings for more granular related content listings. Place this configuration in the Hugo config file (e.g., config.toml) under [related].\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/related-content.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[related]\\nthreshold    = 20\\nincludeNewer = true\\ntoLower      = false\\n[[related.indices]]\\nname        = \"fragmentrefs\"\\ntype        = \"fragments\"\\napplyFilter = true\\nweight      = 80\n```\n\n----------------------------------------\n\nTITLE: Sorting Image Colors by Luminance (Lightest First) in Hugo Templates\nDESCRIPTION: These Go HTML template snippets demonstrate two methods to sort the `.Colors` slice by the `Luminance` property in descending order (lightest to darkest). The first method sorts ascendingly and then reverses the result using `collections.Reverse`. The second method uses the `desc` flag directly within the `sort` function. Requires the `sort` and optionally `collections.Reverse` functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Colors.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ range sort .Colors \"Luminance\" | collections.Reverse }}\n{{ range sort .Colors \"Luminance\" \"desc\" }}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Maps for Merge Examples in Hugo\nDESCRIPTION: Creates three dictionary maps with different key-value pairs that will be used in the merge examples. The maps have overlapping keys to demonstrate merge behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Merge.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m1 := dict \"x\" \"foo\" }}\n{{ $m2 := dict \"x\" \"bar\" \"y\" \"wibble\" }}\n{{ $m3 := dict \"x\" \"baz\" \"y\" \"wobble\" \"z\" (dict \"a\" \"huey\") }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering an Image Resource (Skip on Not Found) in Hugo Go Templates\nDESCRIPTION: Retrieves an image 'sunset.jpg' using `GetMatch`. The `with` block checks if the `$image` variable is non-nil (i.e., the image was found) before attempting to render the `<img>` tag. This prevents errors if the image is missing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := .Resources.GetMatch \"sunset.jpg\" }}\n{{ with $image }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Combining 'where' and 'last' Functions in Hugo Template\nDESCRIPTION: This example demonstrates how to use 'last' in combination with the 'where' function to render summaries of the last 5 pages from the 'articles' section.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Last.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range where .Pages \"Section\" \"articles\" | last 5 }}\n  {{ .Render \"summary\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Pagination with GroupByDate - Hugo Go HTML Template\nDESCRIPTION: This example groups posts by month and year, paginates the grouped collection, and renders section headings per date group with inner lists for each post. It uses Hugo's where, GroupByDate, and Paginate template functions. The paginator's .PageGroups provides access to groups, and inner ranges allow rendering grouped and paginated results. The code expects Hugo version compatible with grouping and pagination features, and outputs hierarchical HTML for grouped listings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate ($pages.GroupByDate \"Jan 2006\") }}\n\n{{ range $paginator.PageGroups }}\n  <h2>{{ .Key }}</h2>\n  {{ range .Pages }}\n    <h3><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h3>\n  {{ end }}\n{{ end }}\n\n{{ template \"_internal/pagination.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Defining Site-Level Configuration for Hugo in TOML\nDESCRIPTION: This TOML snippet sets up core site parameters for a Hugo project, including the title, baseURL, output kinds to disable, and the theme to use. It is placed in the main hugo.toml, which Hugo reads on startup. Key parameters include 'disableKinds' to turn off specific output types and 'theme' to reference the relevant theme folder. Inputs are static, outputs are adjusted site behavior during server run. Limitation: Assumes referenced theme exists.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__watch_moduleconfig.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Hugo Server Test\"\nbaseURL = \"https://example.org/\"\ndisableKinds = [\"section\", \"page\", \"taxonomy\", \"term\", \"RSS\", \"sitemap\", \"robotsTXT\", \"404\"]\ntheme = \"mytheme\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating slicestr Function Usage in Go HTML Template\nDESCRIPTION: Provides examples of using the `slicestr` function within a Go HTML template. It shows how to extract substrings from \"BatMan\" by specifying no bounds (returns the original string), only a start position (returns from start to end), and both start and end positions (returns the characters between start and end-1). The indices are zero-based.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/SliceString.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ slicestr \"BatMan\" }} → BatMan\n{{ slicestr \"BatMan\" 3 }} → Man\n{{ slicestr \"BatMan\" 0 3 }} → Bat\n```\n\n----------------------------------------\n\nTITLE: Querying Hugo Version using hugo.Version in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to display the current Hugo binary version in a site template using Hugo's built-in hugo.Version function. It requires a Hugo project environment, as well as support for Go HTML templates. The template tag {{ hugo.Version }} outputs the version string (e.g., 0.144.2). Inputs are the environment and the template itself; the output is the rendered string. No special parameters are needed, and it is limited to use within Hugo site generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Version.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ hugo.Version }} → 0.144.2\n```\n```\n\n----------------------------------------\n\nTITLE: Using compare.Ne Function for Inequality Comparisons in Hugo Templates\nDESCRIPTION: Demonstrates the usage of the compare.Ne function to compare two or three values for inequality. The function returns true if all arguments are not equal to each other, and false otherwise. It can be used with various data types including numbers, strings, booleans, dates, slices, maps, and pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Ne.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ ne 1 1 }} → false\n{{ ne 1 2 }} → true\n\n{{ ne 1 1 1 }} → false\n{{ ne 1 1 2 }} → false\n{{ ne 1 2 1 }} → false\n{{ ne 1 2 2 }} → true\n```\n\n----------------------------------------\n\nTITLE: Generating Relative URLs without Leading Slash (baseURL: /docs/) using Go HTML Template\nDESCRIPTION: Illustrates `relURL` behavior with inputs not starting with a slash when the `baseURL` includes a subpath (`https://example.org/docs/`). The resulting URLs are relative to `/docs/`. Absolute input URLs are handled similarly, returned directly unless they match parts of the `baseURL`, potentially leading to simplification.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelURL.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ relURL \"\" }}                           → /docs/\n{{ relURL \"articles\" }}                   → /docs/articles\n{{ relURL \"style.css\" }}                  → /docs/style.css\n{{ relURL \"https://example.org\" }}        → https://example.org\n{{ relURL \"https://example.org/\" }}       → https://example.org/\n{{ relURL \"https://example.org/docs\" }}   → https://example.org/docs\n{{ relURL \"https://example.org/docs/\" }}  → /docs\n{{ relURL \"https://www.example.org\" }}    → https://www.example.org\n{{ relURL \"https://www.example.org/\" }}   → https://www.example.org/\n```\n\n----------------------------------------\n\nTITLE: Querying BuildDrafts Status in Template - Go Template\nDESCRIPTION: This Go HTML template snippet accesses the BuildDrafts property of the .Site object to check if draft pages are currently being built. It requires execution within the Hugo templating system. The output is a boolean (true or false) indicating the configuration status. This is useful for conditional logic in templates or for informing users of the build settings; no external dependencies are required beyond the standard Hugo context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/BuildDrafts.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.BuildDrafts }} \\u2192 true\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Hours in Go Hugo Templates\nDESCRIPTION: Demonstrates how to parse a duration string and convert it to hours using the Hours method. The example parses a duration of '3.5h2.5m1.5s' and returns the total duration as hours (3.5420833333333333).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/duration/Hours.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }}\n{{ $d.Hours }} → 3.5420833333333333\n```\n\n----------------------------------------\n\nTITLE: Template for Author Term with Metadata and Portrait - Hugo Go HTML Template\nDESCRIPTION: This Go HTML Template defines the 'main' block for an author term template at layouts/authors/term.html. It displays the term title, affiliation, an author portrait (scaled to 100x100 pixels, if available), content, and a list of associated pages. Dependencies: Hugo site, access to .Params.affiliation, and resource file portrait.jpg. Expects a properly organized content directory with images. Inputs: Page context, front matter metadata, image resources. Outputs: Complete author term page with metadata and related content links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/term.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  <p>Affiliation: {{ .Params.affiliation }}</p>\n  {{ with .Resources.Get \"portrait.jpg\" }}\n    {{ with .Fill \"100x100\" }}\n      <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"portrait\">\n    {{ end }}\n  {{ end }}\n  {{ .Content }}\n  {{ range .Pages }}\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Adding Integers Using Hugo add Function - Go HTML Template\nDESCRIPTION: Demonstrates the use of the add function to sum multiple integer values within a Hugo template. This example shows how to pass several numbers to the 'add' template function, which returns their arithmetic sum. Dependencies: Hugo framework; no external packages required. The function takes two or more numeric arguments, returning their total as an integer or float if any operand is float. It outputs the result to the rendered HTML template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Add.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ add 12 3 2 }} \\u2192 17\n```\n\n----------------------------------------\n\nTITLE: Checking String Prefix with hasPrefix in Hugo Template\nDESCRIPTION: This snippet demonstrates the usage of the `hasPrefix` function (an alias for `strings.HasPrefix`) within a Hugo template. It takes two string arguments: the main string ('Hugo') and the prefix to check for ('Hu'). It returns `true` because the main string starts with the specified prefix.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/HasPrefix.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hasPrefix \"Hugo\" \"Hu\" }} → true\n```\n\n----------------------------------------\n\nTITLE: Defining Main Block for Term Template - Hugo Go HTML Template\nDESCRIPTION: This Go HTML Template snippet defines the \"main\" block in a Hugo term template located at layouts/_default/term.html. It displays the current term's title and content and iterates over the .Pages collection, outputting each page's LinkTitle inside a heading and link. Requires Hugo and the Go HTML templating engine; relies on .Title, .Content, .Pages, .RelPermalink, and .LinkTitle context variables provided by Hugo. Inputs: Hugo term page context. Outputs: Structured HTML for term listing. This template expects to be used within the site's larger template hierarchy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/term.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n  {{ range .Pages }}\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Querying Regular Pages Recursively with Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to iterate through all regular pages (including those in descendant sections) using Hugo's RegularPagesRecursive method in a Go HTML template. It uses the ByTitle method to sort pages by their title and formats each result as a header with a link to the page. This technique requires Hugo (v0.81.0+) and should be used within templates for supported page kinds (home, section, taxonomy, term). The main parameter is the RegularPagesRecursive method called on the current Page context (denoted by \".\"). Input is the Hugo Page context; output is rendered HTML containing sorted page links. The method is unavailable on Site objects.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RegularPagesRecursive.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .RegularPagesRecursive.ByTitle }}\\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Subtracting Numbers using sub in Go Hugo Template\nDESCRIPTION: This snippet demonstrates the usage of the `sub` function (alias for `math.Sub`) within a Go Hugo template. It subtracts the numbers 3 and 2 sequentially from the initial number 12, outputting the final result, 7. The function requires at least two numeric arguments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Sub.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ sub 12 3 2 }} → 7\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Reading Time in Hugo Go Template\nDESCRIPTION: This snippet demonstrates how to display the estimated reading time for a page using Hugo's built-in `.ReadingTime` variable within a Go HTML template. It uses the `printf` function to format the output as \"Estimated reading time: [number] minutes\". The default reading speed (212 WPM for most languages, 500 WPM for CJK) is automatically used by Hugo for this calculation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/ReadingTime.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ printf \"Estimated reading time: %d minutes\" .ReadingTime }}\n```\n\n----------------------------------------\n\nTITLE: Sorting Map Values in Hugo Scratch Pad\nDESCRIPTION: Shows how to use the GetSortedMapValues method to retrieve sorted values from a map in the scratch pad.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/NewScratch.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := newScratch }}\n{{ $s.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ $s.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ $s.GetSortedMapValues \"greetings\" }} → [Hello Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Key in Front Matter - TOML (German Buch 1)\nDESCRIPTION: This TOML front matter provides metadata for the German variant of Buch 1, explicitly matching the translation key 'foo' used in the English version. This allows Hugo to pair these as translations. Dependencies: included in the markdown file for each translation. Main parameters: 'title' for the localized title and 'translationKey' for cross-language linkage. Improves multilingual relationships.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/TranslationKey.md#2025-04-23_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'Buch 1'\ntranslationKey = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Listing Pages Sorted by Nested Parameter Using Hugo Templates (Go HTML Template)\nDESCRIPTION: This code shows how to iterate over pages sorted by a nested front matter parameter (e.g., 'author.last_name') using Hugo's ByParam in Go HTML Template syntax. Assumes pages define the 'author.last_name' field in their front matter. The output is an HTML list linking to each sorted page by last name.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByParam.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByParam \"author.last_name\" }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using `.RelPermalink` to Get a Resource's Relative URL in Go HTML Template\nDESCRIPTION: This example uses the `resources.Get` function to retrieve a specific image resource (\"images/a.jpg\"). Inside a `with` block, which sets the context to the fetched resource, `.RelPermalink` is called. This publishes the image to the site's output directory and returns its relative path (e.g., `/images/a.jpg`), suitable for use in HTML `src` attributes or links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/RelPermalink.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .RelPermalink }} → /images/a.jpg\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Alias in Hugo Front Matter (TOML)\nDESCRIPTION: Sets an alias for a page in TOML front matter, creating a permanent redirect from a previous path. The alias array supports one or more paths (relative or absolute). Useful for handling renamed or moved content without breaking old URLs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_7\n\nLANGUAGE: TOML\nCODE:\n```\naliases = ['/posts/previous-file-name']\n```\n\n----------------------------------------\n\nTITLE: Available Command-Line Options for `hugo build`\nDESCRIPTION: This section lists the command-line flags available for customizing the `hugo build` command. Options include setting the base URL (`--baseURL`), including draft/expired/future content (`--buildDrafts`, `--buildExpired`, `--buildFuture`), specifying source and destination directories (`--source`, `--destination`), enabling minification (`--minify`), watching for file changes (`--watch`), and many others to control the site generation process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_build.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -b, --baseURL string             hostname (and path) to the root, e.g. https://spf13.com/\n  -D, --buildDrafts                include content marked as draft\n  -E, --buildExpired               include expired content\n  -F, --buildFuture                include content with publishdate in the future\n      --cacheDir string            filesystem path to cache directory\n      --cleanDestinationDir        remove files from destination not found in static directories\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -c, --contentDir string          filesystem path to content directory\n  -d, --destination string         filesystem path to write files to\n      --disableKinds strings       disable different kind of pages (home, RSS etc.)\n      --enableGitInfo              add Git revision, date, author, and CODEOWNERS info to the pages\n  -e, --environment string         build environment\n      --forceSyncStatic            copy all files when static is changed.\n      --gc                         enable to run some cleanup tasks (remove unused cache files) after the build\n  -h, --help                       help for build\n      --ignoreCache                ignores the cache directory\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n  -l, --layoutDir string           filesystem path to layout directory\n      --logLevel string            log level (debug|info|warn|error)\n      --minify                     minify any supported output format (HTML, XML etc.)\n      --noBuildLock                don't create .hugo_build.lock file\n      --noChmod                    don't sync permission mode of files\n      --noTimes                    don't sync modification time of files\n      --panicOnWarning             panic on first WARNING log\n      --poll string                set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes\n      --printI18nWarnings          print missing translations\n      --printMemoryUsage           print memory usage to screen at intervals\n      --printPathWarnings          print warnings on duplicate target paths etc.\n      --printUnusedTemplates       print warnings on unused templates.\n      --quiet                      build in quiet mode\n      --renderSegments strings     named segments to render (configured in the segments config)\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --templateMetrics            display metrics about template executions\n      --templateMetricsHints       calculate some improvement hints when combined with --templateMetrics\n  -t, --theme strings              themes to use (located in /themes/THEMENAME/)\n      --themesDir string           filesystem path to themes directory\n      --trace file                 write trace to file (not useful in general)\n  -w, --watch                      watch filesystem for changes and recreate as needed\n```\n\n----------------------------------------\n\nTITLE: Accessing Root Template Context Using Dollar in Hugo (go-html-template)\nDESCRIPTION: Demonstrates how to access the root template context from within a 'with' block using the Dollar syntax ('$.Title'). Requires a Page object in the context providing a 'Title' method. Displays the page title alongside the current inner value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with \\\"foo\\\" }}\\n  <p>{{ $.Title }} - {{ . }}</p>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping by Publish Date with Inner Sorting by Title in Hugo Go-HTML Templates\nDESCRIPTION: This Go-HTML template snippet showcases grouping pages by publish date as before, but introduces an inner sorting step by title within each group using '.Pages.ByTitle'. Dependencies include Hugo's templating features. Key parameters are the .Pages data source and the date layout string. The output is grouped sections with page lists sorted alphabetically by title within each grouped time period.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByPublishDate.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByPublishDate \\\"January 2006\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages.ByTitle }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .Title }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Sorting Slices in Descending Order with Hugo\nDESCRIPTION: Shows how to sort slice elements in descending order using the collections.Sort function in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Sort.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ sort site.Params.grades \"value\" \"desc\" }} → [c b a]\n```\n\n----------------------------------------\n\nTITLE: Nil comparison in collections.Where\nDESCRIPTION: Examples showing how to filter pages based on whether a parameter exists (is not nil) or does not exist (is nil) in front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_12\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where .Site.RegularPages \"Params.color\" \"ne\" nil }}\n\n{{ $pages := where .Site.RegularPages \"Params.color\" \"eq\" nil }}\n```\n\n----------------------------------------\n\nTITLE: Joining URL Paths with urls.JoinPath in Hugo Templates\nDESCRIPTION: Demonstrates various uses of the urls.JoinPath function to join URL path elements. It shows how the function handles empty inputs, single elements, multiple elements, and absolute paths. The function retains consecutive leading slashes and cleans the result of any ./ or ../ elements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/JoinPath.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ urls.JoinPath }} → \"\" (empty string)\n{{ urls.JoinPath \"\" }} → /\n{{ urls.JoinPath \"a\" }} → a\n{{ urls.JoinPath \"a\" \"b\" }} → a/b\n{{ urls.JoinPath \"/a\" \"b\" }} → /a/b\n{{ urls.JoinPath \"https://example.org\" \"b\" }} → https://example.org/b\n\n{{ urls.JoinPath (slice \"a\" \"b\") }} → a/b\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Current Section's Regular Pages in Go HTML Template\nDESCRIPTION: This Go HTML template snippet demonstrates how to loop through the collection of regular pages returned by the `.RegularPages` method for the current page context (applicable to home, section, taxonomy, or term pages). It sorts the pages by title using `.ByTitle` and generates an H2 heading with a link for each page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RegularPages.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .RegularPages.ByTitle }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Namespacing Custom Parameters for Modules/Themes in Hugo (TOML)\nDESCRIPTION: This TOML snippet shows how to namespace custom parameters, typically used by module or theme developers to avoid naming conflicts. Parameters are nested under a specific key (e.g., `[params.modules.myModule]`) within the main `[params]` block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/params.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[params.modules.myModule.colors]\nbackground = '#efefef'\nfont = '#222222'\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Showcases Front Matter with Cascade Settings in YAML\nDESCRIPTION: This YAML front matter configuration sets up the Showcases section in Hugo. It defines the page title and uses the cascade parameter to apply build settings to all child pages, specifying that they should never be rendered individually or included in list pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/showcase/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Showcases\ncascade:\n  build:\n    render: never\n    list: never\n---\n```\n\n----------------------------------------\n\nTITLE: Lowercasing Strings in Hugo Templates using Go HTML Template\nDESCRIPTION: This snippet demonstrates the use of the \\\"lower\\\" function (alias for strings.ToLower) within a Hugo template to convert a mixed-case string to all lowercase characters. No explicit dependencies are needed beyond Hugo itself. The \\\"lower\\\" function expects a single string input and returns the lowercase version; for example, passing \\\"BatMan\\\" results in \\\"batman\\\". The snippet is intended to be used within Go HTML template files (.html or .tmpl) in Hugo projects and directly outputs the transformed string to the generated site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/ToLower.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ lower \\\"BatMan\\\" }} \\u2192 batman\n```\n\n----------------------------------------\n\nTITLE: Getting a Value from hugo.Store - Go HTML Template\nDESCRIPTION: Shows how to retrieve a previously stored value using hugo.Store.Get after it has been set with hugo.Store.Set. Requires the key to already exist. Key parameter: the name set previously. Input: key string. Output: the stored value or nil if absent. Demonstrates standard retrieval, assuming hugo.Store context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Store.Set \"greeting\" \"Hello\" }}\n{{ hugo.Store.Get \"greeting\" }} → Hello\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Date in Ascending Order using Hugo GroupByDate - go-html-template\nDESCRIPTION: This example shows grouping Hugo pages by date with the 'asc' parameter to sort the groups in ascending order. The logic and layout are similar to the previous snippet, but group order is reversed. Requires Hugo's template variables and methods; parameters are a layout string and 'asc'. Output groups are displayed in ascending date order.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByDate.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByDate \\\"January 2006\\\" \\\"asc\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Limiting Regex Match Count with Hugo findRE - Go HTML Template\nDESCRIPTION: Shows how to invoke findRE in Hugo (Go HTML Template) with a LIMIT argument to restrict the number of regex matches returned. The example searches for the first <h2> HTML element in the .Content string, using pattern flags to allow for matches across newlines. Requires Hugo templating context and expects PATTERN, INPUT, and LIMIT (integer) as arguments. Returns a slice of up to LIMIT matches; useful when only a subset of results is needed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FindRe.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ findRE `(?s)<h2.*?>.*?</h2>` .Content 1 }}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Markdown Handler in Hugo (TOML)\nDESCRIPTION: Configures Hugo to use Goldmark as the default Markdown renderer. This setting is placed within the `[markup]` table in the Hugo configuration file (e.g., `hugo.toml`). Goldmark is the default if this setting is omitted.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/markup.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[markup]\ndefaultMarkdownHandler = 'goldmark'\n```\n\n----------------------------------------\n\nTITLE: Calculating WCAG Contrast Ratio from Image Colors in Hugo Templates\nDESCRIPTION: This Go HTML template retrieves an image, finds its lightest and darkest dominant colors using `sort` and `index`, calculates their contrast ratio according to the WCAG formula `(L1 + 0.05) / (L2 + 0.05)` using `add` and `div`, and then uses conditional logic (`if`/`else if`/`else`) with `ge` (greater than or equal) and `printf` to output whether the contrast ratio meets WCAG Level AA (>= 4.5) or AAA (>= 7.5) guidelines. Requires `resources.Get`, `sort`, `index`, `add`, `div`, `ge`, and `printf`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Colors.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ $lightest := index (sort .Colors \"Luminance\" \"desc\") 0 }}\n  {{ $darkest := index (sort .Colors \"Luminance\") 0 }}\n  {{ $cr := div\n    (add $lightest.Luminance 0.05)\n    (add $darkest.Luminance 0.05)\n  }}\n  {{ if ge $cr 7.5 }}\n    {{ printf \"The %.2f contrast ratio conforms to WCAG Level AAA.\" $cr }}\n  {{ else if ge $cr 4.5 }}\n    {{ printf \"The %.2f contrast ratio conforms to WCAG Level AA.\" $cr }}\n  {{ else }}\n    {{ printf \"The %.2f contrast ratio does not conform to WCAG guidelines.\" $cr }}\n  {{ end }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Author Taxonomy Content - Text\nDESCRIPTION: This directory tree visualizes the recommended structure for organizing author taxonomy content in Hugo. Each term (e.g., jsmith, rjones) gets a folder containing an _index.md file and resource files such as portrait.jpg. No dependencies. Inputs: N/A. Outputs: Visual organizational guidance for author-related content branch bundles.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/term.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n└── authors/\n    ├── jsmith/\n    │   ├── _index.md\n    │   └── portrait.jpg\n    └── rjones/\n        ├── _index.md\n        └── portrait.jpg\n```\n\n----------------------------------------\n\nTITLE: Calling the Image Shortcode with Positional Parameters\nDESCRIPTION: Demonstrates calling the `image` shortcode using positional arguments instead of named ones. The values `a.jpg`, `300`, and `\"A white kitten\"` are passed in order, corresponding to the `path`, `width`, and `alt` parameters respectively within the shortcode template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n{{</* image a.jpg 300 \"A white kitten\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Minifying Resources with Hugo resources.Minify (Go HTML Template)\nDESCRIPTION: The snippet illustrates how to retrieve a CSS resource using the resources.Get function and then minify it with the minify function. This approach requires Hugo's asset pipeline and assumes that the target resource (e.g., \"css/main.css\") is available in the assets directory. The input is a resource object (e.g., CSS file), and the output is a minified version of that resource. This method works similarly for JS, JSON, HTML, SVG, or XML asset types in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/Minify.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $css := resources.Get \\\"css/main.css\\\" }}\\n{{ $style := $css | minify }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Identifier Data Keys with 'index' in Go HTML Template\nDESCRIPTION: Shows how to access data using the `index` function when the key is not a valid Go identifier (e.g., it contains a hyphen). Instead of `.Site.Data.books.historical-fiction`, you use `index .Site.Data.books \"historical-fiction\"`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Data.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ index .Site.Data.books \"historical-fiction\" }}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Menu Partial in a Hugo Layout (Go Template)\nDESCRIPTION: This Go HTML Template snippet, typically placed in a layout file like `layouts/_default/single.html`, demonstrates how to render menus using the `menu.html` partial. It calls the partial twice, passing different menu IDs ('main' and 'footer') along with the current page context using the `dict` function. This allows rendering multiple distinct menus within a single page template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/menu.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"menu.html\" (dict \"menuID\" \"main\" \"page\" .) }}\n{{ partial \"menu.html\" (dict \"menuID\" \"footer\" \"page\" .) }}\n```\n\n----------------------------------------\n\nTITLE: Using Slice of Keys with collections.Index\nDESCRIPTION: Illustrates how to use a slice of keys with collections.Index to access nested values in a map.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/IndexFunction.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m := dict \"a\" 100 \"b\" 200 \"c\" (dict \"d\" 10 \"e\" 20) }}\n{{ $s := slice \"c\" \"e\" }}\n{{ index $m $s }} → 20\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output for Sliced Array Rendering (HTML)\nDESCRIPTION: This snippet shows the resulting HTML that is produced when rendering an unordered list using Hugo's 'after' function on an array of strings. There are no dependencies outside of static HTML rendering, and the output lists the array elements from 'three' onward. The snippet demonstrates the final outcome for end users rather than template implementation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/After.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ul>\n  <li>three</li>\n  <li>four</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Detecting Named Parameters with IsNamedParams in Hugo Shortcode - Go HTML Template\nDESCRIPTION: This code demonstrates how to use the IsNamedParams method inside a Hugo shortcode template to distinguish between named and positional arguments. It prints a formatted greeting using either named keys (\\\"greeting\\\", \\\"firstName\\\") or positional indexes (0, 1) depending on how the shortcode is called. The template requires Hugo's templating engine and expects inputs matching the argument styles; outputs are dynamically rendered based on parameter type. The .Get method is used to extract relevant values accordingly.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/IsNamedParams.md#2025-04-23_snippet_0\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n```go-html-template {file=\\\"layouts/shortcodes/myshortcode.html\\\"}\n{{ if .IsNamedParams }}\n  {{ printf \\\"%s %s.\\\" (.Get \\\"greeting\\\") (.Get \\\"firstName\\\") }}\n{{ else }}\n  {{ printf \\\"%s %s.\\\" (.Get 0) (.Get 1) }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Adapter for Sanity in Hugo\nDESCRIPTION: This Go HTML template demonstrates how to create a Content Adapter in Hugo to fetch and process Portable Text data from Sanity CMS. It uses the transform.PortableText function to convert the body content to Markdown.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/PortableText.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $projectID := \"mysanityprojectid\" }}\n{{ $useCached := true }}\n{{ $api := \"api\" }}\n{{ if $useCached }}\n  {{/* See https://www.sanity.io/docs/api-cdn */}}\n  {{ $api = \"apicdn\" }}\n{{ end }}\n{{ $url := printf \"https://%s.%s.sanity.io/v2021-06-07/data/query/production\"  $projectID $api }}\n\n{{/* prettier-ignore-start */ -}}\n{{ $q :=  `*[_type == 'post']{\n  title, publishedAt, summary, slug, body[]{    ...,    _type == \"image\" => {      ...,      asset->{\n        _id,\n        path,\n        url,\n        altText,\n        title,\n        description,\n        metadata {\n          dimensions {\n            aspectRatio,\n            width,\n            height\n          }\n        }\n      }    }  },  }`\n}}\n{{/* prettier-ignore-end */ -}}\n{{ $body := dict \"query\" $q | jsonify }}\n{{ $opts := dict \"method\" \"post\" \"body\" $body }}\n{{ $r := resources.GetRemote $url $opts }}\n{{ $m := $r | transform.Unmarshal }}\n{{ $result := $m.result }}\n{{ range $result }}\n  {{ if not .slug }}\n    {{ continue }}\n  {{ end }}\n  {{ $markdown := transform.PortableText .body }}\n  {{ $content := dict\n    \"mediaType\" \"text/markdown\"\n    \"value\" $markdown\n  }}\n  {{ $params := dict\n    \"portabletext\" (.body | jsonify (dict \"indent\" \" \"))\n  }}\n  {{ $page := dict\n    \"content\" $content\n    \"kind\" \"page\"\n    \"path\" .slug.current\n    \"title\" .title\n    \"date\" (.publishedAt | time )\n    \"summary\" .summary\n    \"params\" $params\n  }}\n  {{ $.AddPage $page }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using GetPage Method with Different Path Formats in Hugo Templates\nDESCRIPTION: Examples of using the GetPage method in a Hugo template, showing different ways to reference pages using relative and absolute paths. The examples demonstrate how to retrieve pages within the same section and from other sections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GetPage.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GetPage \"starry-night\" }}\n  {{ .Title }} → Starry Night\n{{ end }}\n\n{{ with .GetPage \"./starry-night\" }}\n  {{ .Title }} → Starry Night\n{{ end }}\n\n{{ with .GetPage \"../paintings/starry-night\" }}\n  {{ .Title }} → Starry Night\n{{ end }}\n\n{{ with .GetPage \"/works/paintings/starry-night\" }}\n  {{ .Title }} → Starry Night\n{{ end }}\n\n{{ with .GetPage \"../sculptures/david\" }}\n  {{ .Title }} → David\n{{ end }}\n\n{{ with .GetPage \"/works/sculptures/david\" }}\n  {{ .Title }} → David\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Shortcode Inner Content with Deindent - Hugo Shortcode Template - Go HTML Template\nDESCRIPTION: Template snippet for the Hugo 'gallery' shortcode using the InnerDeindent method. This method strips leading indentation from the inner content before it is piped to strings.TrimSpace and .Page.RenderString for whitespace trimming and Markdown rendering, respectively. The result is that indented inner image Markdown is rendered as proper HTML images rather than as a code block. Dependencies: Hugo templating system; expects shortcode content as input. Outputs a HTML div with direct <img> tags (if the input is Markdown image syntax).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/InnerDeindent.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<div class=\\\"gallery\\\">\\n  {{ .InnerDeindent | strings.TrimSpace | .Page.RenderString }}\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Taxonomy Listing Template Sorted by Term Count - Go HTML Template\nDESCRIPTION: Defines a Hugo taxonomy template (main block) which lists taxonomy terms sorted by the number of associated pages, using the ByCount method. Each entry shows the term as a link with its page count. Requires Hugo and its extended taxonomy methods.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n  {{ range .Data.Terms.ByCount }}\n    <h2><a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a> ({{ .Count }})</h2>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using define with the partial function in Hugo templates\nDESCRIPTION: This example demonstrates how to define an inline partial template that can be included using the partial function. The template receives a dictionary with an 'answer' value and prints a formatted string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/define.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"inline/foo.html\" (dict \"answer\" 42) }}\n\n{{ define \"partials/inline/foo.html\" }}\n  {{ printf \"The answer is %v.\" .answer }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Code - Hugo Template - Go HTML Template\nDESCRIPTION: Extracts the 'languageCode' property (as set in config) for the current site, falling back to 'Lang' if undefined. Intended for Hugo Go HTML Template usage, this returns locale strings such as 'de-DE'. Requires a correctly configured languages section. Input: Site context. Output: Language code string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Language.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Language.LanguageCode }} \\u2192 de-DE\n```\n\n----------------------------------------\n\nTITLE: Referencing Resource Path in Hugo Go HTML Template\nDESCRIPTION: Demonstrates how to display the Title for a global resource in Hugo using Go HTML template syntax. The resource is fetched with resources.Get, and Title yields the resource path relative to the assets directory. No additional dependencies beyond Hugo and a standard Hugo template context are required. The input is the resource path, and the output is the computed resource title (the relative path).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Title.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \\\"images/Sunrise in Bryce Canyon.jpg\\\" }}\n  {{ .Title }} → /images/Sunrise in Bryce Canyon.jpg\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Overriding Sitemap Settings in Page Front Matter\nDESCRIPTION: Example of overriding the site-wide 'changeFreq' setting for a specific page (`content/news.md`) using TOML front matter. This page will have 'hourly' frequency, while others might use the site default.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sitemap.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'News'\n[sitemap]\nchangeFreq = 'hourly'\n```\n\n----------------------------------------\n\nTITLE: Cropping an Image with a Specific Anchor Point in Hugo Go Templates\nDESCRIPTION: Demonstrates using the `.Crop` method with an anchor point option. It crops the image resource (`$image`) to '200x100' dimensions, using 'TopLeft' as the anchor, ensuring the top-left quadrant of the original image is preserved in the cropped result.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_22\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image.Crop \"200x100 TopLeft\" }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages Sorted by Date (Ascending) in Go Hugo Template\nDESCRIPTION: This snippet demonstrates how to loop through a collection of Hugo pages (`.Pages`), sorted by their date field in ascending order using `.ByDate`. Inside the loop, it generates an `<h2>` heading containing a link (`<a>`) to the page's relative permalink (`.RelPermalink`) with the page's link title (`.LinkTitle`) as the anchor text. The sorting depends on the site's date configuration, typically the 'date' front matter field.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByDate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByDate }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Fitting with Options using Hugo Fit Method\nDESCRIPTION: This Go HTML Template snippet shows advanced usage of the `Fit` method. It fetches an image resource and resizes it to fit within 300x175 pixels. Additionally, it specifies image processing options: converting the image to the WebP format (`webp`), setting the quality to 85 (`q85`), and using the Lanczos resampling filter (`lanczos`). The resulting processed image's attributes are then used in an `<img>` tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Fit.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Fit \"300x175 webp q85 lanczos\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Custom Parameters in Hugo Configuration (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to define custom site parameters under the `[params]` key in a Hugo configuration file (`hugo.toml`). It includes a top-level `subtitle` and nested parameters under `[params.contact]` for email and phone.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/params.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = 'https://example.org/'\ntitle = 'Project Documentation'\nlanguageCode = 'en-US'\n[params]\nsubtitle = 'Reference, Tutorials, and Explanations'\n[params.contact]\nemail = 'info@example.org'\nphone = '+1 206-555-1212'\n```\n\n----------------------------------------\n\nTITLE: Using a Hugo Partial to Conditionally Display an Image in Go HTML Template\nDESCRIPTION: Shows how to use the value returned by the `GetImage.html` partial within a single page template (`layouts/_default/single.html`). The `with` action checks if the partial returned a non-false value (an image path) and executes the inner block only if an image path was found.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{/* layouts/_default/single.html */}}\n{{ with partial \"GetImage.html\" . }}\n  [...]\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Permalink in Hugo Go HTML Template\nDESCRIPTION: This Go HTML template snippet demonstrates fetching a specific page object using `.Site.GetPage` with the path \"/about\". It then accesses the `.Permalink` property of the retrieved page object to output its absolute URL. The resulting URL depends on the `baseURL` set in the site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Permalink.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $page := .Site.GetPage \"/about\" }}\n{{ $page.Permalink }} → https://example.org/docs/about/\n```\n\n----------------------------------------\n\nTITLE: Accessing Google Analytics ID in Hugo Template (go-html-template)\nDESCRIPTION: Retrieves the Google Analytics ID from the site configuration within a Go HTML Template file. This requires the Google Analytics 'services' configuration to be present in the site's config file. The output is the ID string associated with the configured analytics property. Remember that property names must be capitalized to access nested values in the template context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Config.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Config.Services.GoogleAnalytics.ID }} → G-XXXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Checking Membership in Integer Slice - Hugo templates - Go HTML Template\nDESCRIPTION: This snippet illustrates the use of the 'in' function to determine if a specific integer (2) exists within a slice of integers within Hugo templates. It utilizes the 'slice' function to initialize the collection. The user provides a slice of integers and the target integer; the function returns a boolean (true if the integer is present). Requires Hugo with Go HTML Template support and works only within the templating environment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/In.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice 1 2 3 }}\n{{ in $s 2 }} → true\n```\n\n----------------------------------------\n\nTITLE: Checking If Current Page Is Home - Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates using the .IsHome property within a Go HTML Template in Hugo to determine if the page being rendered is the site home page. It is intended for use within Hugo template files, with the dot (.) referring to the current Page context. The output is a boolean ('true' if the page is home, 'false' otherwise), allowing conditional rendering in site templates. The snippet assumes a valid Hugo site setup and template context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsHome.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .IsHome }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Structure Example in Hugo\nDESCRIPTION: Shows the directory structure for a Hugo project with content organized in hierarchical folders, including auctions with nested date-based sections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsDescendant.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── auctions/\n│   ├── 2023-11/\n│   │   ├── _index.md\n│   │   ├── auction-1.md\n│   │   └── auction-2.md\n│   ├── 2023-12/\n│   │   ├── _index.md\n│   │   ├── auction-3.md\n│   │   └── auction-4.md\n│   ├── _index.md\n│   ├── bidding.md\n│   └── payment.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Using the Figure Shortcode in Hugo\nDESCRIPTION: Example of how to use the 'figure' shortcode in Hugo to insert an HTML figure element with an image, caption, link, and styling classes. This demonstrates the basic syntax and parameters of the shortcode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/figure.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{</* figure\n  src=\"/images/examples/zion-national-park.jpg\"\n  alt=\"A photograph of Zion National Park\"\n  link=\"https://www.nps.gov/zion/index.htm\"\n  caption=\"Zion National Park\"\n  class=\"ma0 w-75\"\n*/>}}\n```\n\n----------------------------------------\n\nTITLE: Using HasMenuCurrent and IsMenuCurrent in Hugo Navigation Template\nDESCRIPTION: A template snippet demonstrating how to create a navigation menu in Hugo, applying different styling based on whether the current page is exactly the menu item (IsMenuCurrent) or a descendant of the section represented by the menu item (HasMenuCurrent).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/HasMenuCurrent.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $currentPage := . }}\n{{ range site.Menus.main }}\n  {{ if $currentPage.IsMenuCurrent .Menu . }}\n    <a class=\"active\" aria-current=\"page\" href=\"{{ .URL }}\">{{ .Name }}</a>\n  {{ else if $currentPage.HasMenuCurrent .Menu . }}\n    <a class=\"ancestor\" aria-current=\"true\" href=\"{{ .URL }}\">{{ .Name }}</a>\n  {{ else }}\n    <a href=\"{{ .URL }}\">{{ .Name }}</a>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating Pager Navigation Links with Hugo Templates (Go HTML Template)\nDESCRIPTION: This code snippet shows how to use Hugo's Go HTML templates to create pagination navigation for a list of regular pages. It utilizes the paginator object's URL method to generate links for first, previous, next, and last pages. Dependencies include a Hugo site context and the availability of the .Paginate function. The key parameters are the collection of pages (filtered by type 'posts') and the paginator. Inputs are the set of site pages, and outputs are the HTML navigation links rendered in your site. Note: Requires Hugo template context with paginator and valid page types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/URL.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\\n{{ $paginator := .Paginate $pages }}\\n\\n{{ range $paginator.Pages }}\\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n{{ end }}\\n\\n{{ with $paginator }}\\n  <ul>\\n    {{ with .First }}\\n      <li><a href=\"{{ .URL }}\">First</a></li>\\n    {{ end }}\\n    {{ with .Prev }}\\n      <li><a href=\"{{ .URL }}\">Previous</a></li>\\n    {{ end }}\\n    {{ with .Next }}\\n      <li><a href=\"{{ .URL }}\">Next</a></li>\\n    {{ end }}\\n    {{ with .Last }}\\n      <li><a href=\"{{ .URL }}\">Last</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Hashes with Different Encodings in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the crypto.HMAC function in Hugo templates to generate cryptographic hashes. It shows examples with SHA256 hash type and different encoding options (hex and binary).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/crypto/HMAC.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hmac \"sha256\" \"Secret key\" \"Secret message\" }}\n5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84\n\n{{ hmac \"sha256\" \"Secret key\" \"Secret message\" \"hex\" }}\n5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84\n\n{{ hmac \"sha256\" \"Secret key\" \"Secret message\" \"binary\" | base64Encode }}\nXM60kfRfixVOIPOwow7Tpv8wJ9Nz+Fx4/+iYMYCwPIQ=\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Menus in Hugo Configuration\nDESCRIPTION: Shows how to configure nested menus in Hugo by setting up a parent-child relationship between menu items using the 'parent' attribute.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Children.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[[menus.main]]\nname = 'Products'\npageRef = '/product'\nweight = 10\n\n[[menus.main]]\nname = 'Product 1'\npageRef = '/products/product-1'\nparent = 'Products'\nweight = 1\n\n[[menus.main]]\nname = 'Product 2'\npageRef = '/products/product-2'\nparent = 'Products'\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Invoking Hugo Module Cache Clean Command (Shell)\nDESCRIPTION: This snippet demonstrates how to execute the 'hugo mod clean' command from a shell environment to remove the Hugo Module cache for the current project. Requires the Hugo static site generator to be installed and initialized in the current directory. Accepts optional flags and arguments to control the scope and behavior of the cache cleaning operation. The command takes no arguments by default, but optional flags (such as --all or --pattern) can be specified to customize the cleaning behavior. The output is the cleaned cache; there is no return value unless an error occurs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_clean.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod clean [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Iterating with Key-Value Variables in range Function\nDESCRIPTION: Demonstrates using range with both key and value variables, displaying the index and value of each element in a slice.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"foo\" \"bar\" \"baz\" }}\n{{ range $k, $v := $s }}\n  <p>{{ $k }}: {{ $v }}</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Calculating Square Roots using math.Sqrt in Hugo - Go HTML Template\nDESCRIPTION: This snippet demonstrates invoking the math.Sqrt function in a Hugo template to calculate and display the square root of the given value (in this case, 81). Dependencies include the math template functions provided by Hugo, and the environment should support Go templating. The parameter to math.Sqrt is the numeric value for which the square root is desired, and the output is the computed result rendered into the template. The function expects a non-negative numerical input; negative numbers or invalid types will result in an error.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Sqrt.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ math.Sqrt 81 }} → 9\n```\n```\n\n----------------------------------------\n\nTITLE: Published Output Directory Structure with Aliases Disabled - Text\nDESCRIPTION: This textual snippet displays the directory structure of Hugo’s generated 'public/' folder after setting disableAliases=true for pagination. Used as illustrative output for the configuration example and shows how paginated pages are organized in the absence of index aliases.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\npublic/\n├── posts/\n│   ├── page/\n│   │   └── 2/\n│   │       └── index.html\n│   ├── post-1/\n│   │   └── index.html\n│   ├── post-2/\n│   │   └── index.html\n│   ├── post-3/\n│   │   └── index.html\n│   ├── post-4/\n│   │   └── index.html\n│   └── index.html\n└── index.html\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with a Partial Template - Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates invoking a partial template ('average.html') from a Hugo template, passing in a slice of numbers as context. It uses the 'partial' function to compute and assign the returned average to a variable. Dependencies include 'average.html' partial and Go template functions such as 'slice'. Returns the average as a number or string, depending on the partial's implementation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/Include.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $numbers := slice 1 6 7 42 }}\\n{{ $average := partial \\\"average.html\\\" $numbers }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Image Shortcode in Hugo\nDESCRIPTION: Defines an img shortcode that can be used independently or within a parent shortcode, inheriting the parent's class if available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_17\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $src := .Get \"src\" }}\n{{ with .Parent }}\n  <img src=\"{{ $src }}\" class=\"{{ .Get \"class\" }}-image\">\n{{ else }}\n  <img src=\"{{ $src }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Reversing Next/Previous Page Sort Order in Hugo Config (TOML)\nDESCRIPTION: This TOML configuration snippet overrides the default sort order used by Hugo to determine the next and previous pages within a section and across the entire site. By setting `nextPrevInSectionSortOrder` and `nextPrevSortOrder` to 'asc' within the `[page]` table, the typical default descending order (based on date/weight) is reversed. This modification affects the results of calling `.Next`, `.Prev`, `.NextInSection`, and `.PrevInSection` methods on a Page object. This configuration should be added to the Hugo site configuration file (e.g., `hugo.toml` or `config.toml`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/page.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[page]\n  nextPrevInSectionSortOrder = 'asc'\n  nextPrevSortOrder = 'asc'\n```\n\n----------------------------------------\n\nTITLE: Basic Time Formatting in Hugo Templates\nDESCRIPTION: Demonstrates basic time formatting using Format method with a time.Time value. Shows conversion from string to time.Time and applying a date format pattern.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Format.md#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{ $t := \"2023-01-27T23:44:58-08:00\" }}\n{{ $t = time.AsTime $t }}\n{{ $format := \"2 Jan 2006\" }}\n\n{{ $t.Format $format }} → 27 Jan 2023\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with `math.Max` in Hugo (Go HTML Template)\nDESCRIPTION: This Go HTML Template snippet demonstrates the `math.Max` function. It takes a mix of scalar numbers (1, 4) and a slice created using the `slice` function (containing 2, 3) as input. The `math.Max` function processes all numbers, whether provided individually or within slices, and returns the largest value found (4 in this case).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Max.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Max 1 (slice 2 3) 4 }} → 4\n```\n\n----------------------------------------\n\nTITLE: Negating Values with the not Operator - Go HTML Template\nDESCRIPTION: Demonstrates the use of the 'not' operator to obtain boolean negations of values in Go HTML templates. Dependencies include Go templating engine support for the 'not' operator. Accepts single arguments of various types (bool, numeric, string) and returns a boolean: 'not true' returns false; 'not 0' or 'not \"\"' returns true. Useful for conditional rendering in templates and for preventing false positives in control flows.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/not.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ not true }} \\u2192 false\n{{ not false }} \\u2192 true\n\n{{ not 1 }} \\u2192 false\n{{ not 0 }} \\u2192 true\n\n{{ not \\\"x\\\" }} \\u2192 false\n{{ not \\\"\\\" }} \\u2192 true\n```\n\n----------------------------------------\n\nTITLE: Warning Message for Misusing RenderShortcodes in HTML Blocks (Text)\nDESCRIPTION: This snippet displays a warning message generated by Hugo when the RenderShortcodes method is used inside an HTML block within Markdown. This informs users of potential unexpected behavior, as this usage may not align with standard Markdown or Hugo expectations. The warning clarifies usability constraints and can be suppressed if the user deliberately chooses this approach.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RenderShortcodes.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWARN .RenderShortcodes detected inside HTML block in \"/content/mypost.md\"; this may not be what you intended ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Site Parameters in Go HTML Templates\nDESCRIPTION: This Go HTML template snippet shows how to access custom site parameters defined in the Hugo configuration. It uses the `.Site.Params` method to retrieve the `subtitle` and the nested `email` value from the `contact` parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/params.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Params.subtitle }} → Reference, Tutorials, and Explanations\n{{ .Site.Params.contact.email }} → info@example.org\n```\n\n----------------------------------------\n\nTITLE: Using Ref to Generate Absolute Page URLs in Hugo Templates\nDESCRIPTION: This Hugo Go Template snippet demonstrates the use of the `.Ref` method to generate absolute URLs. It shows how to pass an options map (`$opts`) containing `path`, `lang`, and `outputFormat` keys to retrieve the corresponding absolute URL for a page, considering different languages and output formats. The comments indicate the expected output for each call on an English site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Ref.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"path\" \"/books/book-1\" }}\n{{ .Ref $opts }} → https://example.org/en/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }}\n{{ .Ref $opts }} → https://example.org/de/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }}\n{{ .Ref $opts }} → https://example.org/de/books/book-1/index.json\n```\n\n----------------------------------------\n\nTITLE: Querying Global Resources by Media Type - Hugo - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the resources.ByType function in Hugo's go-html-template to iterate through all global resources of type \"image\" found in the assets directory. The template renders an HTML img tag for each resource, displaying its relative permalink and dimensions. resources.ByType requires the media type (e.g., \"image\") as a parameter and returns a collection of resources or nil if none are found. This function operates on global resources only and requires the source files to be located under or mounted to the assets directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/ByType.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range resources.ByType \"image\" }}\\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping and Sorting Pages in Ascending Order in Hugo Go-HTML Templates\nDESCRIPTION: This Go-HTML template snippet extends grouping by publish date by additionally specifying the sort order ('asc'), so that groups are presented in chronological order. Like the previous snippet, it iterates through groups, displaying group keys and a list of page titles as links. It requires the .Pages collection, a layout string, and an explicit sort direction. Outputs organized HTML by date group, ascending.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByPublishDate.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByPublishDate \\\"January 2006\\\" \\\"asc\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Capturing the Current Taxonomy Object in a Taxonomy Template (Hugo)\nDESCRIPTION: Shows how to capture the current taxonomy object being rendered within its specific template file (like `layouts/_default/taxonomy.html`) using the `.Data.Terms` method available on the page's `.Data` object. This is specific to taxonomy list pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/taxonomy/get-a-taxonomy-object.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomyObject := .Data.Terms }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Immediate Descendant Sections Using Hugo Go HTML Templates - go-html-template\nDESCRIPTION: Illustrates how to use Hugo's Go HTML template language to iterate through the immediate descendant sections of the current page using the .Sections method and ByWeight ordering. The range block outputs an <h2> element with a link for each section, displaying its LinkTitle and RelPermalink. Requires Hugo\\'s template context supporting .Sections (e.g., in home, section, or taxonomy layouts). Output and order depend on front matter weights in the section directories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sections.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Sections.ByWeight }}\\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Reporting Multihost Status in Hugo Templates - Go HTML Template\nDESCRIPTION: Uses the hugo.IsMultihost function in a Go HTML Template to output whether each configured language has a unique base URL. This is mainly utilized in conditionally rendering content or providing diagnostics in a Hugo site template, based on multihost settings. Dependencies: Hugo site context; outputs a boolean value (true/false) indicating multihost status. No parameters required; output is contextual to the site's multilingual configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/IsMultihost.md#2025-04-23_snippet_1\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ hugo.IsMultihost }} → true\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages Sorted by Length (Descending) in Go HTML Template\nDESCRIPTION: This Go HTML Template snippet shows how to iterate through a collection of pages (`.Pages`) sorted by their content length in descending order. It achieves this by chaining the `Reverse` method after calling `ByLength` (`.Pages.ByLength.Reverse`). Similar to the ascending example, it generates an H2 heading with a link for each page in the reversed sorted collection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByLength.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByLength.Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Last Modification Date in Ascending Order with Hugo Go HTML Templates\nDESCRIPTION: This snippet groups Hugo pages by their last modification date using the GroupByLastmod function, specifying \\\"January 2006\\\" as the layout string and \\\"asc\\\" as the sorting order. Requires a Hugo '.Pages' collection and correct site configuration for date fields. Each group key represents a formatted date, and each group contains pages ordered accordingly. Outputs a nested HTML list grouped and sorted in ascending order by last modification date.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByLastmod.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByLastmod \\\"January 2006\\\" \\\"asc\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Custom Hugo Shortcode\nDESCRIPTION: This snippet shows the syntax for calling a custom Hugo shortcode named `book-details` from within a content file (e.g., Markdown). This invocation tells Hugo to render the associated shortcode template (`layouts/shortcodes/book-details.html`) at this specific location within the final rendered page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Page.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{</* book-details */>}}\n```\n\n----------------------------------------\n\nTITLE: Querying Pages by Type with Hugo Go HTML Template\nDESCRIPTION: This Go HTML Template code snippet demonstrates how to filter and list Hugo pages where the Type method returns 'books'. It relies on Hugo's Page and Site objects and requires access to .Site.RegularPages.ByTitle. The template outputs H2-wrapped links to each filtered page using their relative permalink and title, and is intended for listing categorized content in a theme or layout. The 'where' and 'range' templating functions are key elements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Type.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range where .Site.RegularPages.ByTitle \"Type\" \"books\" }}\\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using Continue in Hugo Templates with Range Loops\nDESCRIPTION: Demonstrates how to use the 'continue' statement within a range loop to skip processing specific items in a collection. In this example, the template iterates through a slice of strings but skips rendering the item 'bar'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/continue.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"foo\" \"bar\" \"baz\" }}\n{{ range $s }}\n  {{ if eq . \"bar\" }}\n    {{ continue }}\n  {{ end }}\n  <p>{{ . }}</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring buildDrafts in Site Configuration - Hugo\nDESCRIPTION: This snippet shows how to enable the building of draft pages by setting buildDrafts = true in the Hugo configuration file. This requires access to the Hugo config file (config.toml or similar). Setting this option persists the behavior across builds until modified. The buildDrafts parameter determines if draft pages are included; the expected effect is draft pages appearing in the output when true.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/BuildDrafts.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\nbuildDrafts = true\n```\n\n----------------------------------------\n\nTITLE: Defining Language-Specific Menus in a Single Hugo TOML File\nDESCRIPTION: Example Hugo configuration (TOML) showing how to define main menu entries separately for German (`de`) and English (`en`) within a single configuration file. Menu items are defined as arrays of tables under language-specific keys like `[[languages.de.menus.main]]` and `[[languages.en.menus.main]]`, specifying `name`, `pageRef`, and `weight` for each.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_11\n\nLANGUAGE: hugo\nCODE:\n```\n[languages.de]\nlanguageCode = 'de-DE'\nlanguageName = 'Deutsch'\nweight = 1\n\n[[languages.de.menus.main]]\nname = 'Produkte'\npageRef = '/products'\nweight = 10\n\n[[languages.de.menus.main]]\nname = 'Leistungen'\npageRef = '/services'\nweight = 20\n\n[languages.en]\nlanguageCode = 'en-US'\nlanguageName = 'English'\nweight = 2\n\n[[languages.en.menus.main]]\nname = 'Products'\npageRef = '/products'\nweight = 10\n\n[[languages.en.menus.main]]\nname = 'Services'\npageRef = '/services'\nweight = 20\n```\n\n----------------------------------------\n\nTITLE: Compound Image Filter: Crop, Center, Rotate, Quality, Format, and Background in Hugo go-html-template\nDESCRIPTION: Defines an advanced filter that combines cropping, centering, rotating, setting quality, converting to JPEG, and applying a black background color. The argument string details each step, especially relevant for templates converting transparent PNG/WebP images to JPEG with predictable results.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_12\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"crop 200x200 center r90 q50 jpeg #000\" }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Artificial Language Keys in Hugo (Hugo Syntax)\nDESCRIPTION: Illustrates how to add non-standard or artificial language keys using Hugo\\'s configuration syntax, supporting private-use tags as outlined by RFC 5646 (without the 'art-x-' prefix). Example includes standard and custom keys alongside their weights for language sorting. Key parameters: 'defaultContentLanguage', and arbitrary language keys like 'hugolang' under the '[languages]' table. Particularly useful when supporting constructed or non-standard languages for internal documentation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/languages.md#2025-04-23_snippet_3\n\nLANGUAGE: hugo\nCODE:\n```\ndefaultContentLanguage = 'en'\\n[languages.en]\\nweight = 1\\n[languages.hugolang]\\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Key for Hugo resources.GetRemote (Go HTML Template)\nDESCRIPTION: Shows how to override the default cache key when fetching a remote resource with resources.GetRemote by explicitly setting a custom key in the options map. This allows for fine control over cache invalidation, such as forcing a refresh on a daily schedule based on date. Requires usage of print and now.Format for dynamic key creation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://example.org/images/a.jpg\" }}\n{{ $opts := dict \n  \"key\" (print $url (now.Format \"2006-01-02\"))\n}}\n{{ $resource := resources.GetRemote $url $opts }}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Language-Specific Hugo Menu Configs\nDESCRIPTION: Illustrates the file system layout when using Hugo's configuration directory feature for managing language-specific menus. Menu definitions for each language are placed in separate files (e.g., `menus.de.toml`, `menus.en.toml`) within the `config/_default/` directory, alongside the main `hugo.toml` (or `config.toml`) file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nconfig/\n└── _default/\n    ├── menus.de.toml\n    ├── menus.en.toml\n    └── hugo.toml\n```\n\n----------------------------------------\n\nTITLE: Defining Comprehensive Related Options Map - Go HTML Template\nDESCRIPTION: This snippet provides an advanced example of building an options map for Hugo's Related function, specifying indices, the document, namedSlices, and fragments. It illustrates the use of the keyVals function to create value slices and demonstrates matching with both tags, special keywords, and content fragments. Intended for use in a Hugo template, prerequisites include knowledge of the template context and that the necessary functions (\"dict\", \"slice\", \"keyVals\") are available. Inputs include page data and desired search fields; output is an options map for the Related method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/Related.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $page := . }}\n{{ $opts := dict\n  \"indices\" (slice \"tags\" \"keywords\")\n  \"document\" $page\n  \"namedSlices\" (slice (keyVals \"tags\" \"hugo\" \"rocks\") (keyVals \"date\" $page.Date))\n  \"fragments\" (slice \"heading-1\" \"heading-2\")\n}}\n```\n\n----------------------------------------\n\nTITLE: Enabling 'relativeURLs' in Hugo Configuration (Hugo Config)\nDESCRIPTION: Enables 'relativeURLs' in Hugo configuration to rewrite site-relative URLs as relative URLs after rendering. Intended for serverless, filesystem-based sites; ensures that URLs are computed relative to each page's location.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_6\n\nLANGUAGE: Hugo Config\nCODE:\n```\nrelativeURLs = true\n```\n\n----------------------------------------\n\nTITLE: HTML Attribute Formatting with fmt.Printf\nDESCRIPTION: Illustrates how to combine fmt.Printf with safeHTMLAttr function to safely format HTML meta tag attributes in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Printf.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $desc := \"Eat at Joe's\" }}\n<meta name=\"description\" {{ printf \"content=%q\" $desc | safeHTMLAttr }}>\n```\n\n----------------------------------------\n\nTITLE: Triggering Content Rendering with .Content in Go Hugo Templates\nDESCRIPTION: Demonstrates forcing Hugo page content rendering by accessing the `.Content` method and assigning its result to a variable (`$noop`). This pattern is necessary when a value is set in the page's `.Store` during content rendering (e.g., within a shortcode or render hook) and needs to be accessed later in the template *before* content rendering would naturally occur. Triggering rendering ensures the `.Store` value is determinate and available for retrieval using `.Store.Get`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Store.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $noop := .Content }}\n{{ .Store.Get \"mykey\" }}\n```\n\n----------------------------------------\n\nTITLE: Setting Batch-wide Build Configuration with js.Batch in Go Templates\nDESCRIPTION: This Go template snippet demonstrates setting global build options for an entire `js.Batch` using the `Config` method and `SetOptions`. It configures ESBuild options like `target`, `format` (must be `esm` for code splitting), `jsx` handling, `loaders` for specific file types, minification (`minify`), and provides global `params` accessible in scripts via `@params/config`. These settings are applied once, typically the first definition encountered.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with js.Batch \"js/mybatch\" }}\n  {{ with .Config }}\n       {{ .SetOptions (dict\n        \"target\" \"es2023\"\n        \"format\" \"esm\"\n        \"jsx\" \"automatic\"\n        \"loaders\" (dict \".png\" \"dataurl\")\n        \"minify\" true\n        \"params\" (dict \"param1\" \"value1\")\n        )\n      }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inner Markdown Content with RenderString (Go HTML Template)\nDESCRIPTION: Modifies the `card.html` shortcode template to render Markdown within the inner content. It pipes the `.Inner` variable first through `strings.TrimSpace` and then through the `.Page.RenderString` method, which processes the Markdown string and outputs HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Inner.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<div class=\"card\">\n  {{ with .Get \"title\" }}\n    <div class=\"card-title\">{{ . }}</div>\n  {{ end }}\n  <div class=\"card-content\">\n    {{ .Inner | strings.TrimSpace | .Page.RenderString }}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Variable Syntax Example in Hugo Templates\nDESCRIPTION: Demonstrates the syntax for declaring variables in Hugo templates. Variables are user-defined identifiers that start with a dollar sign ($) and can represent values of any data type.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/variable.md#2025-04-23_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n$foo\n```\n\nLANGUAGE: gotemplate\nCODE:\n```\n$bar\n```\n\n----------------------------------------\n\nTITLE: Defining Base URL in Hugo Site Configuration - Hugo\nDESCRIPTION: This Hugo configuration snippet shows how to set the baseURL parameter in the site\\'s config file. Setting baseURL defines the root URL for the site, which is referenced by various built-in template parameters and functions. Requires a Hugo project with the relevant config file (`config.toml`, `config.yaml`, or `config.json`), and the value should be a valid URL string. Inputs depend on user deployment; output is the configured site base URL.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/BaseURL.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\nbaseURL = 'https://example.org/docs/'\n```\n\n----------------------------------------\n\nTITLE: Type Coercion with strings.TrimRight in Go HTML Template\nDESCRIPTION: These examples illustrate that the `strings.TrimRight` function attempts to convert its arguments (CUTSET and STRING) to strings if they are not already strings before performing the trim operation. The first example converts the integer arguments `54` and `12345` to strings and then trims trailing '5' and '4' characters from '12345', resulting in the string '123'. The second example converts the boolean `true` to the string 'true' and trims trailing 'e' and 'u' characters based on the cutset 'eu', resulting in 'tr'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/TrimRight.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.TrimRight 54 12345 }} → 123 (string)\n{{ strings.TrimRight \"eu\" true }} → tr\n```\n\n----------------------------------------\n\nTITLE: Adding Numeric Values in Hugo Store\nDESCRIPTION: Shows how to add numeric values using the Add method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Store.Set \"total\" 3 }}\n{{ site.Store.Add \"total\" 7 }}\n{{ site.Store.Get \"total\" }} → 10\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Image Filter with Hugo Images in Go HTML Template\nDESCRIPTION: This snippet demonstrates creating a Hugo image filter that overlays one image onto another at specific coordinates using images.Overlay. It requires the overlay image resource and desired x, y coordinates. The result is stored in $filter and can be applied to further image processing steps. Prerequisites are a valid overlay image resource and numeric coordinates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Overlay.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Overlay $overlay 20 20 }}\n```\n\n----------------------------------------\n\nTITLE: Parsing Duration and Calculating Seconds in Hugo Template\nDESCRIPTION: This snippet demonstrates how to use time.ParseDuration to parse a 24-hour duration string and then calculate the number of seconds in that duration using the Seconds method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/ParseDuration.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $duration := time.ParseDuration \"24h\" }}\n{{ printf \"There are %.0f seconds in one day.\" $duration.Seconds }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Parameters in Go HTML Template\nDESCRIPTION: Shows how to retrieve a page resource using `.Resources.Get` and then access its custom parameters (e.g., `.Params.alt`, `.Params.temperament`) within a Go HTML template to populate HTML attributes and content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Params.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.Get \"images/a.jpg\" }}\n  <figure>\n    <img alt=\"{{ .Params.alt }}\" src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\">\n    <figcaption>{{ .Title }} is {{ .Params.temperament }}</figcaption>\n  </figure>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Module Replacements - TOML\nDESCRIPTION: Overrides the location of specific Hugo modules by assigning custom file-system paths, typically for local development. Requires valid module paths and corresponding directories, which can be absolute or relative to 'themesDir'. Place this under '[module]' in the TOML configuration to redirect specific module dependencies to local folders. Inputs are mapping strings, outputs affect Hugo's dependency resolution. No external dependencies besides Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/module.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[module]\nreplacements = 'github.com/bep/my-theme -> ../..,github.com/bep/shortcodes -> /some/path'\n```\n\n----------------------------------------\n\nTITLE: Using Simple Translations in Polish Context (Go Template)\nDESCRIPTION: Demonstrates how to use the `T` function (alias for `lang.Translate`) in a Go HTML template. When the site context is Polish, it fetches values from `i18n/pl.toml`, returning the Polish translations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ T \"privacy\" }} → prywatność\n{{ T \"security\" }} → bezpieczeństwo\n```\n\n----------------------------------------\n\nTITLE: Defining Ordered Menu Entries in Hugo Configuration\nDESCRIPTION: Example TOML configuration defining menu entries with weight values for ordering the main menu in Hugo. Each entry includes identifier, name, pageRef, and weight properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/ByWeight.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[menus.main]]\nidentifier = 'about'\nname = 'About'\npageRef = '/about'\nweight = 20\n\n[[menus.main]]\nidentifier = 'services'\nname = 'Services'\npageRef = '/services'\nweight = 10\n\n[[menus.main]]\nidentifier = 'contact'\nname = 'Contact'\npageRef = '/contact'\nweight = 30\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Markdown Input for Render Hooks\nDESCRIPTION: An example of basic Markdown syntax for links and images that can be modified with render hooks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Hugo](https://gohugo.io)\n\n![kitten](kitten.jpg)\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions with 'else with' in Hugo Templates\nDESCRIPTION: Demonstrates checking multiple conditions using 'else with' chaining to create an if-else-if flow in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/with.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $v1 := 0 }}\n{{ $v2 := 42 }}\n{{ with $v1 }}\n  {{ . }}\n{{ else with $v2 }}\n  {{ . }} → 42\n{{ else }}\n  {{ print \"v1 and v2 are falsy\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Link to Default Language Home Page in Hugo\nDESCRIPTION: This Go HTML template demonstrates how to create a link specifically to the home page of the default language site using the Sites.Default method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Sites.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.Sites.Default }}\n  <a href=\"{{ .Home.Permalink }}\">{{ .Title }}</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Building Hugo Extended/Deploy Edition with Deploy Support - Shell\nDESCRIPTION: This shell command builds the Hugo extended edition with deploy capabilities, enabling SASS/SCSS processing and deployment features. The CGO_ENABLED=1 environment variable must be set for CGO support, and the build tags 'extended' and 'withdeploy' must be specified. Dependencies include Go 1.23.0+, a C compiler, and the correct PATH configuration. Output is directed as per GOBIN or GOPATH.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/installation/04-build-from-source.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended,withdeploy github.com/gohugoio/hugo@latest\n```\n\n----------------------------------------\n\nTITLE: Merging Maps in Order $m1, $m3, $m2\nDESCRIPTION: Shows a final permutation of merging the three maps, demonstrating how the rightmost maps' values take precedence for shared keys.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Merge.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $merged := merge $m1 $m3 $m2 }}\n\n{{ $merged.x }}   → bar\n{{ $merged.y }}   → wibble\n{{ $merged.z.a }} → huey\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Seconds in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to parse a duration string and convert it to seconds using the Seconds method. The example parses a complex duration (3.5 hours, 2.5 minutes, and 1.5 seconds) and returns the total time in seconds as a floating-point value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/duration/Seconds.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }}\n{{ $d.Seconds }} → 12751.5\n```\n\n----------------------------------------\n\nTITLE: Using strings.TrimLeft with Automatic Type Conversion in Hugo\nDESCRIPTION: These examples show that `strings.TrimLeft` in Hugo templates automatically converts non-string arguments to strings before performing the trim operation. The first example trims leading '1' and '2' from the number 12345 (converted to string \"12345\"), resulting in \"345\". The second example trims leading 'r' and 't' from the boolean `true` (converted to string \"true\"), resulting in \"ue\".\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/TrimLeft.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.TrimLeft 21 12345 }} → 345 (string)\n{{ strings.TrimLeft \"rt\" true }} → ue\n```\n\n----------------------------------------\n\nTITLE: Parsing and Accessing URL Components with urls.Parse in Hugo\nDESCRIPTION: Demonstrates how to parse a URL string into a structured URL object and access its various components including scheme, host, path, query parameters, and fragment. Shows common URL parsing operations and query parameter handling.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/Parse.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://example.org:123/foo?a=6&b=7#bar\" }}\n{{ $u := urls.Parse $url }}\n\n{{ $u.String }} → https://example.org:123/foo?a=6&b=7#bar\n{{ $u.IsAbs }} → true\n{{ $u.Scheme }} → https\n{{ $u.Host }} → example.org:123\n{{ $u.Hostname }} → example.org\n{{ $u.RequestURI }} → /foo?a=6&b=7\n{{ $u.Path }} → /foo\n{{ $u.RawQuery }} → a=6&b=7\n{{ $u.Query }} → map[a:[6] b:[7]]\n{{ $u.Query.a }} → [6]\n{{ $u.Query.Get \"a\" }} → 6\n{{ $u.Query.Has \"b\" }} → true\n{{ $u.Fragment }} → bar\n```\n\n----------------------------------------\n\nTITLE: Converting Time to UTC in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the UTC function to convert a time value to Coordinated Universal Time (UTC) in Hugo templates. It first creates a time object and then applies the UTC function to it.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/UTC.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.UTC }} → 2023-01-28 07:44:58 +0000 UTC\n```\n\n----------------------------------------\n\nTITLE: Creating a Populated Slice with collections.Slice in Hugo Templates\nDESCRIPTION: Creates a slice containing the string values \"a\", \"b\", and \"c\", then displays the resulting slice. This demonstrates the basic usage of the collections.Slice function to create and initialize a slice in one operation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Slice.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"a\" \"b\" \"c\" }}\n{{ $s }} → [a b c]\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Parameters in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to access custom parameters in Hugo templates using the .Site.Params method. It shows how to retrieve simple and nested parameters, as well as how to use retrieved values in template functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Params.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Params.subtitle }} → The Best Widgets on Earth\n{{ .Site.Params.author.name }} → John Smith\n\n{{ $layout := .Site.Params.layouts.rfc_1123 }}\n{{ .Site.Lastmod.Format $layout }} → Tue, 17 Oct 2023 13:21:02 PDT\n```\n\n----------------------------------------\n\nTITLE: Converting Map to YAML using transform.Remarshal in Hugo\nDESCRIPTION: This snippet demonstrates how to use the transform.Remarshal function to convert a map (dictionary) into YAML format. It creates a nested map structure and converts it to YAML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Remarshal.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m := dict\n  \"a\" \"Hugo rocks!\"\n  \"b\" (dict \"question\" \"What is 6x7?\" \"answer\" 42)\n  \"c\" (slice \"foo\" \"bar\")\n}}\n<pre>{{ transform.Remarshal \"yaml\" $m }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Template to Render HTML in Hugo\nDESCRIPTION: A partial template that renders HTML describing whether a number is odd or even. It uses math.ModBool to check if the number is divisible by 2.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/return.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if math.ModBool . 2 }}\n  <p>{{ . }} is even</p>\n{{ else }}\n  <p>{{ . }} is odd</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Compound Image Filter: Crop, Center, Rotate, and Convert to WebP in Hugo go-html-template\nDESCRIPTION: Defines a filter for cropping an image to 200x200 pixels, centering the crop, rotating 90 degrees, and converting to WebP format. Illustrates composability of the images.Process syntax, which executes the sequence left-to-right upon application in a Hugo template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"crop 200x200 center r90 webp\" }}\n```\n\n----------------------------------------\n\nTITLE: Extracting Minute from Time Object in Hugo Template\nDESCRIPTION: This snippet demonstrates how to use the Minute method on a Time object in Hugo templates. It first creates a Time object from a string representation and then extracts the minute component.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Minute.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Minute }} → 44\n```\n\n----------------------------------------\n\nTITLE: Checking for Remote Resource Errors and Failing Build in Go HTML Template\nDESCRIPTION: This Go HTML template snippet demonstrates fetching a remote resource using `resources.GetRemote`. It uses a nested `with` block to check the `.Err` property of the returned resource. If `.Err` is not nil (indicating an HTTP request error), it calls `errorf` to print the error message and fail the Hugo build. Otherwise, it renders an `<img>` tag with the resource's details.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Err.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://broken-example.org/images/a.jpg\" }}\n{{ with resources.GetRemote $url }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ else }}\n  {{ errorf \"Unable to get remote resource %q\" $url }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using the 'or' Function in Hugo Templates\nDESCRIPTION: Examples demonstrating how the 'or' function evaluates arguments and returns the first truthy value. If all values are falsy, it returns the last argument. This shows various combinations of numeric, string, and boolean arguments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/or.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ or 0 1 2 }} → 1\n{{ or false \"a\" 1 }} → a\n{{ or 0 true \"a\" }} → true\n\n{{ or false \"\" 0 }} → 0\n{{ or 0 \"\" false }} → false\n```\n\n----------------------------------------\n\nTITLE: Sorting Slices in Ascending Order with Hugo\nDESCRIPTION: Demonstrates how to sort slice elements in ascending order using the collections.Sort function in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Sort.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ sort site.Params.grades }} → [a b c]\n{{ sort site.Params.grades \"value\" \"asc\" }} → [a b c]\n```\n\n----------------------------------------\n\nTITLE: Accessing Home Page Permalink in Hugo Template (Go HTML Template)\nDESCRIPTION: Utilizes Hugo's templating engine to access and display the home page's absolute (Permalink) and relative (RelPermalink) URLs. The '.Site.Home' object is used to fetch the root page, and its 'Permalink' and 'RelPermalink' fields are printed. These expressions are used to generate navigation links in Hugo templates. The output reflects the baseURL set in the configuration file. No external dependencies are required beyond a basic Hugo install.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Home.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Home.Permalink }} → https://example.org/docs/ \n{{ .Site.Home.RelPermalink }} → /docs/\n```\n\n----------------------------------------\n\nTITLE: Singularizing a Word in Hugo Templates (Go HTML Template)\nDESCRIPTION: This snippet demonstrates the usage of the `singularize` template function (an alias for `inflect.Singularize`) in Hugo using the pipe syntax. It takes the plural string \"cats\" as input and outputs its singular form \"cat\" based on common English singularization rules.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/inflect/Singularize.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"cats\" | singularize }} → cat\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Translation Key in Hugo Templates - Go HTML Template\nDESCRIPTION: This Go HTML template snippet retrieves and displays the translation key of the current page using the .TranslationKey property. Output will be 'page/foo' if 'translationKey' is set in the front matter or 'page/books/book-2' if omitted, demonstrating Hugo's fallback logic. Dependency: Hugo’s Go HTML templating engine. Input: a Hugo page context. Output: translation key string for the current page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/TranslationKey.md#2025-04-23_snippet_4\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ .TranslationKey }} → page/foo\n```\n\n----------------------------------------\n\nTITLE: Using seq Function for Numeric Loops in Hugo\nDESCRIPTION: Demonstrates how to use the seq function to loop a specified number of times in Hugo templates. The example shows how to add up a sequence of numbers using a loop.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_26\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $total := 0 }}\n{{ range seq 4 }}\n  {{ $total = add $total . }}\n{{ end }}\n{{ $total }} → 10\n```\n\n----------------------------------------\n\nTITLE: Rendering Table of Contents with Hugo Page Object - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to render the TableOfContents property of a Hugo Page object within a Go HTML Template. It accesses the automatically generated HTML for the table of contents of the current page using the double curly braces syntax. No external dependencies are required aside from Hugo's templating engine; the input context must supply a .TableOfContents field (such as in a Hugo Page). Outputs HTML markup for the table of contents directly into the rendered page. Note: This will insert raw HTML where used.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/TableOfContents.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .TableOfContents }}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Block for Taxonomy Listing Template - Go HTML Template\nDESCRIPTION: Defines the main section of a Hugo taxonomy template that inherits from the base layout. It displays the taxonomy's title and content, and iterates over taxonomy pages rendering each term with a link using its relative permalink and title. Requires Hugo and Go HTML Templates. Inputs are taxonomies created by the user; outputs are HTML lists of terms. No custom sorting or counts are included.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n  {{ range .Pages }}\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Single Page Layout with Go Template\nDESCRIPTION: This Go Template file ('layouts/_default/single.html') specifies the default layout for individual content pages (like Markdown files). It renders the text 'Title: ' followed by the page's title, accessed through the '{{ .Title }}' variable. This template is used by the 'p1.md' content file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_build.txt#2025-04-23_snippet_3\n\nLANGUAGE: go-template\nCODE:\n```\n-- layouts/_default/single.html --\nTitle: {{ .Title }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Deployment in TOML\nDESCRIPTION: This TOML configuration for Hugo disables certain features and sets up deployment targets. It includes two deployment targets: one for Google Cloud Storage and another for a local file system, with CloudFront CDN configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/withdeploy/deploy.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\nbaseURL = \"https://example.org/\"\n[deployment]\n[[deployment.targets]]\nname = \"myfirst\"\nurl=\"gs://asdfasdf\"\n[[deployment.targets]]\nname = \"mydeployment\"\nurl=\"file://./mybucket\"\ncloudFrontDistributionID = \"foobar\"\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Summary with <!--more--> Divider in Markdown\nDESCRIPTION: Demonstrates how to manually define a content summary in a Markdown file (`content/example.md`) using the `<!--more-->` comment as a divider. Hugo treats all content preceding this divider as the page's summary. This method takes precedence over front matter and automatic summaries.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/summaries.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```text {file=\"content/example.md\"}\n+++\ntitle: 'Example'\ndate: 2024-05-26T09:10:33-07:00\n+++\n\nThis is the first paragraph.\n\n<!--more-->\n\nThis is the second paragraph.\n```\n```\n\n----------------------------------------\n\nTITLE: Golden Archetype Template - TOML\nDESCRIPTION: Represents the archetype template in TOML format as expected by tests. Contains placeholders for date, draft status, and title, utilizing Hugo templating. This file is used to compare actual archetype output for TOML-formatted sites and ensures fidelity to expected formatting. All fields must be correctly rendered by Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new.txt#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n+++\ndate = '{{ .Date }}'\ndraft = true\ntitle = '{{ replace .File.ContentBaseName \"-\" \" \" | title }}'\n+++\n```\n\n----------------------------------------\n\nTITLE: Front Matter Example for Author Term Page - TOML\nDESCRIPTION: Sample TOML front matter for an author term's _index.md page. Specifies metadata such as the author's title and affiliation. Used by Hugo to personalize author listings and can be accessed in templates using .Page.Params.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"John Smith\"\naffiliation = \"University of Chicago\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Term Name in Term Template - Hugo Go HTML Template\nDESCRIPTION: This Go HTML Template snippet outputs the current taxonomy term's name (e.g., 'fiction'), accessed via the Data.Term property in a Hugo term template. Dependencies: Hugo term page. Input: Term page context. Output: The term's name as a string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/term.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Data.Term }} → fiction\n```\n\n----------------------------------------\n\nTITLE: Combining Crop, Center, and Rotation in an Image Filter in Hugo go-html-template\nDESCRIPTION: Demonstrates a compound filter applying cropping, centering, and 90-degree rotation using images.Process in a single operation string. The parameter string combines \\\"crop 200x200 center r90\\\" to dictate sequence and type of transformations, usable as a reusable filter inside Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"crop 200x200 center r90\" }}\n```\n\n----------------------------------------\n\nTITLE: Assigning Grayscale Image Filter - Hugo images API - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the images.Grayscale function in a Hugo template to create a grayscale filter. The filter is assigned to a template variable ($filter) for later use when applying transformations to images. No external dependencies are required other than Hugo's templating system; the resulting filter object can be passed to image processing functions or output filters in your site's templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Grayscale.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Grayscale }}\n```\n\n----------------------------------------\n\nTITLE: Calculating Day of Year Using YearDay Function in Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the YearDay function on a time.Time value in Hugo. It first creates a time.Time object using the AsTime function, then calls YearDay on it to get the day of the year.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/YearDay.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.YearDay }} → 27\n```\n\n----------------------------------------\n\nTITLE: Accessing a Page Resource in Hugo Go Templates\nDESCRIPTION: Retrieves an image named 'sunset.jpg' located within the current page bundle's resources. The image is assigned to the `$image` variable for further processing or rendering. This requires the image file to be part of a page bundle.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := .Resources.Get \"sunset.jpg\" }}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Resource Metadata in Hugo Front Matter (yaml)\nDESCRIPTION: Demonstrates configuring resource metadata in a Hugo page's front matter, assigning custom names, titles, and params to specific resource files using YAML (or TOML-like) syntax. The use of wildcards and :counter placeholder facilitates batch assignment. Inputs: list of resource definitions; outputs: resources with customized metadata visible to Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Application\\ndate : 2018-01-25\\nresources :\\n- src : \"images/sunset.jpg\"\\n  name : \"header\"\\n- src : \"documents/photo_specs.pdf\"\\n  title : \"Photo Specifications\"\\n  params:\\n    icon : \"photo\"\\n- src : \"documents/guide.pdf\"\\n  title : \"Instruction Guide\"\\n- src : \"documents/checklist.pdf\"\\n  title : \"Document Checklist\"\\n- src : \"documents/payment.docx\"\\n  title : \"Proof of Payment\"\\n- src : \"**.pdf\"\\n  name : \"pdf-file-:counter\"\\n  params :\\n    icon : \"pdf\"\\n- src : \"**.docx\"\\n  params :\\n    icon : \"word\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings in Hugo - hugo\nDESCRIPTION: This configuration snippet sets up a Hugo site with two languages (German and English), specifies language codes, display names, and weight, and demonstrates the use of defaultContentLanguageInSubdir for controlling whether the default language appears in a subdirectory. The settings affect how Hugo generates URLs and organizes content folders. Parameters like languageCode and defaultContentLanguage determine the language shown by default and its URL prefix.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/LanguagePrefix.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\ndefaultContentLanguage = 'de'\ndefaultContentLanguageInSubdir = false\n\n[languages.de]\nlanguageCode = 'de-DE'\nlanguageDirection = 'ltr'\nlanguageName = 'Deutsch'\ntitle = 'Projekt Dokumentation'\nweight = 1\n\n[languages.en]\nlanguageCode = 'en-US'\nlanguageDirection = 'ltr'\nlanguageName = 'English'\ntitle = 'Project Documentation'\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Pages in Hugo with range\nDESCRIPTION: Example showing how to iterate over a filtered list of pages, creating links to each page using their properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range where site.RegularPages \"Type\" \"articles\" }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using the param shortcode with front matter in Hugo\nDESCRIPTION: Example of defining parameters in front matter and using the param shortcode to access them in content. Shows how to set up parameters in frontmatter and reference them within the page content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/param.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n---\ntitle: Example\ndate: 2025-01-15T23:29:46-08:00\nparams:\n  color: red\n  size: medium\n---\n\nWe found a {{%/* param \"color\" */%}} shirt.\n```\n\n----------------------------------------\n\nTITLE: Referencing math.Pi in Hugo Templates - Go HTML Template\nDESCRIPTION: Demonstrates how to render the mathematical constant pi (π) inside Hugo templates using the math.Pi variable. Requires Hugo version 0.130.0 or later, as noted in the documentation. This template code outputs the value of pi (float64; approximately 3.141592653589793) directly in generated content, allowing precise mathematical computations or displays in static sites. Inputs: none. Output: numerical value of pi. Limitations: only available in templates executed by Hugo v0.130.0+.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Pi.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Pi }} → 3.141592653589793\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual 404 Redirects (Default Language at Root) in Hugo (TOML)\nDESCRIPTION: Example TOML configuration in `config/development/server.toml` for handling 404 errors on a multilingual Hugo site where the default language (`en`) is *not* in a subdirectory (`defaultContentLanguageInSubdir = false`). It sets up a specific redirect for the French language (`/fr/**` to `/fr/404.html`) and a general fallback redirect for the default language (`/**` to `/404.html`). The default language redirect must be listed last.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/server.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'en'\ndefaultContentLanguageInSubdir = false\n[[redirects]]\nfrom = '/fr/**'\nto = '/fr/404.html'\nstatus = 404\n\n[[redirects]] # Default language must be last.\nfrom = '/**'\nto = '/404.html'\nstatus = 404\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Regular Pages in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the RegularPages method to iterate over all regular pages in a Hugo site, displaying each page's link title and permalink.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/RegularPages.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.RegularPages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Tag with Dynamic Width and Height in Hugo - Go HTML Template\nDESCRIPTION: Renders an HTML <img> element using the RelPermalink, Width, and Height properties from an image resource in a Go HTML template. The snippet fetches the image, extracts its dimensions using Hugo's .Width and .Height methods, and sets the src, width, and height attributes accordingly. Requires a valid image at the specified path and Hugo resource methods enabled. Outputs a fully formed <img> element with dynamically set dimensions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Height.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Percentages by Locale in Hugo Go HTML Template\nDESCRIPTION: Go HTML template code demonstrating percentage localization. It utilizes Hugo's `lang.FormatPercent` function to format a numeric value (512.5032) as a percentage. The function takes the number of decimal places (2) as an argument and renders the output, including the percentage sign placement, according to the current language's locale conventions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ 512.5032 | lang.FormatPercent 2 }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Ugly URLs Globally in Hugo Configuration (TOML)\nDESCRIPTION: Hugo configuration snippet, shown within a `code-toggle` shortcode, to enable ugly URLs for the entire website. Set the `uglyURLs` key to `true` in your Hugo configuration file (e.g., `hugo.toml`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/ugly-urls.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n{{< code-toggle file=hugo >}}\nuglyURLs = true\n{{< /code-toggle >}}\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Map with Hugo's dict Function\nDESCRIPTION: This snippet shows how to initialize an empty map using the `dict` function in a Hugo template. Calling `dict` without any arguments results in an empty map assigned to the variable `$m`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Dictionary.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m := dict }}\n```\n\n----------------------------------------\n\nTITLE: Using IsSection Method in Hugo Templates\nDESCRIPTION: A simple Go HTML template example demonstrating how to call the IsSection method on a Page object. This method returns true if the page kind is 'section'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsSection.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .IsSection }}\n```\n\n----------------------------------------\n\nTITLE: Creating Image Saturation Filter - Hugo images Module - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to instantiate a saturation filter using the images.Saturation function in a Go HTML template for Hugo. The function accepts a percentage value in the range of -100 to 500 to adjust the image saturation; 0 leaves the image unchanged. This filter is meant to be applied to images within Hugo templates and requires the Hugo images module. The snippet initializes the filter, which can then be passed as an argument to functions that apply image filters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Saturation.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Saturation 65 }}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering AllTranslations in Hugo Templates - Go HTML Template\nDESCRIPTION: Uses Hugo's Go HTML template syntax to render an unordered list of all available translations for the current page. The template iterates over the .AllTranslations method, which returns all Page objects for each language. For each translation, it creates a list item with a language-specific link and name, using .RelPermalink and .Language fields. This template requires that multilingual configuration and content structure are properly set up.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/AllTranslations.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .AllTranslations }}\n  <ul>\n    {{ range . }}\n      <li>\n        <a href=\"{{ .RelPermalink }}\" hreflang=\"{{ .Language.LanguageCode }}\">{{ .LinkTitle }} ({{ or .Language.LanguageName .Language.Lang }})</a>\n      </li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Passing Params to JavaScript via Hugo js.Build (Go HTML Template and JavaScript)\nDESCRIPTION: This pair of snippets demonstrates how to pass template-controlled parameters to JavaScript using Hugo's js.Build and ES imports. In the Go HTML template, a JS resource is built with custom options, including a 'params' dictionary. In the JS module, these params are imported via '@params', making template data accessible in code. Dependencies: Hugo Pipes, js.Build, assets pipeline, template parameters. The JS file expects an ES module import for '@params'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Build.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $js := resources.Get \"js/main.js\" | js.Build (dict \"params\" (dict \"api\" \"https://example.org/api\")) }}\n\n```\n\nLANGUAGE: js\nCODE:\n```\nimport * as params from '@params';\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Content Type Publishing Behavior - YAML Config Example - yaml\nDESCRIPTION: Presents an example modification of the Hugo configuration file's `contentTypes` section. By adjusting this YAML config, resource types can be reassigned, which changes how Hugo publishes certain file types. In the example, the entry for `text/html` is removed, allowing those files to be treated as plain text and published. Understanding this configuration is essential for customizing which page resources Hugo outputs during site builds. Dependencies include a valid Hugo project and knowledge of YAML syntax.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/content-types.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontentTypes:\\n  text/asciidoc: {}\\n  text/markdown: {}\\n  text/org: {}\\n  text/pandoc: {}\\n  text/rst: {}\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages Sorted by Lastmod (Descending) in Go HTML Template\nDESCRIPTION: This Go HTML Template snippet shows how to iterate through a page collection (`.Pages`) sorted by last modification date (`ByLastmod`) in descending order by chaining the `.Reverse` method. It generates an H2 heading with a link (using `.RelPermalink` and `.LinkTitle`) for each page. Assumes `.Pages` is available in the current context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByLastmod.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByLastmod.Reverse }}\\n  <h2><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></h2>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Linking to Default Site Home (Go HTML Template)\nDESCRIPTION: Illustrates how to access and render the homepage link for the default language site in Hugo templates using the .Sites.Default property. Requires a Hugo site configured with multiple languages. Outputs an anchor to the default home, displaying the corresponding title. Use within a template block with .Sites available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sites.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Sites.Default }}\n  <a href=\"{{ .Home.Permalink }}\">{{ .Title }}</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using Ref Shortcode with Markdown Links in Hugo\nDESCRIPTION: Examples of how to use the ref shortcode within Markdown links to create permalinks to other pages with various options including path, language, and output format specifications.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/ref.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Link A]({{%/* ref \"/books/book-1\" */%}})\n\n[Link B]({{%/* ref path=\"/books/book-1\" */%}})\n\n[Link C]({{%/* ref path=\"/books/book-1\" lang=\"de\" */%}})\n\n[Link D]({{%/* ref path=\"/books/book-1\" lang=\"de\" outputFormat=\"json\" */%}})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Hash with GitInfo\nDESCRIPTION: Using the Hash method on GitInfo to get the full commit hash for a page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GitInfo }}\n  {{ .Hash }} → aab9ec0b31ebac916a1468c4c9c305f2bebf78d4\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Custom Shortcode in Hugo Markdown\nDESCRIPTION: Demonstrates how to call a custom Hugo shortcode (`csv-to-table`) from within a Markdown content file (`content/example.md`). It passes the filename `pets.csv` as a positional argument to the shortcode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/data-sources.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{</* csv-to-table \"pets.csv\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating path.Clean Usage in Hugo Templates\nDESCRIPTION: This snippet showcases various examples of the `path.Clean` function within a Hugo template. It demonstrates how the function processes different path strings, removing trailing slashes, collapsing multiple slashes, resolving current directory references (.), and parent directory references (..), ultimately returning the shortest equivalent path. The function takes a single string argument representing the path.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/path/Clean.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ path.Clean \"foo/bar\" }} → foo/bar\n{{ path.Clean \"/foo/bar\" }} → /foo/bar\n{{ path.Clean \"/foo/bar/\" }} → /foo/bar\n{{ path.Clean \"/foo//bar/\" }} → /foo/bar\n{{ path.Clean \"/foo/./bar/\" }} → /foo/bar\n{{ path.Clean \"/foo/../bar/\" }} → /bar\n{{ path.Clean \"/../foo/../bar/\" }} → /bar\n{{ path.Clean \"\" }} → .\n```\n\n----------------------------------------\n\nTITLE: Checking Character Membership in String - Hugo templates - Go HTML Template\nDESCRIPTION: This example demonstrates using the 'in' function to determine if a character (\\\"b\\\") is present within a string (\\\"abc\\\") in a Hugo template. The only required dependency is Hugo with Go HTML Template support. Inputs include a string and the character to search for; the output is a boolean reflecting membership (true). This is limited to use within Hugo sites and supports only string input types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/In.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := \"abc\" }}\n{{ in $s \"b\" }} → true\n```\n\n----------------------------------------\n\nTITLE: Querying Image Height Using Hugo Resource - Go HTML Template\nDESCRIPTION: Retrieves the Height property of an image resource fetched with resources.Get. The snippet uses a Go HTML template to access the .Height method, which returns the image's pixel height as an integer. Hugo must have processed the image as a resource; valid only for supported image types. Output example shown as a comment. No external dependencies beyond Hugo and an available image resource.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Height.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .Height }} → 400\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Dependencies in an HTML Table with Go Templates\nDESCRIPTION: This snippet demonstrates how to create an HTML table that lists all project dependencies using the hugo.Deps function. It iterates through each dependency to display its owner, path, version, time, and vendor status, while properly handling optional fields with conditional statements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Deps.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<h2>Dependencies</h2>\n<table class=\"table table-dark\">\n  <thead>\n    <tr>\n      <th scope=\"col\">#</th>\n      <th scope=\"col\">Owner</th>\n      <th scope=\"col\">Path</th>\n      <th scope=\"col\">Version</th>\n      <th scope=\"col\">Time</th>\n      <th scope=\"col\">Vendor</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{ range $index, $element := hugo.Deps }}\n    <tr>\n      <th scope=\"row\">{{ add $index 1 }}</th>\n      <td>{{ with $element.Owner }}{{ .Path }}{{ end }}</td>\n      <td>\n        {{ $element.Path }}\n        {{ with $element.Replace }}\n        => {{ .Path }}\n        {{ end }}\n      </td>\n      <td>{{ $element.Version }}</td>\n      <td>{{ with $element.Time }}{{ . }}{{ end }}</td>\n      <td>{{ $element.Vendor }}</td>\n    </tr>\n    {{ end }}\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Taxonomy Hierarchy (Content View)\nDESCRIPTION: Provides a textual representation of how taxonomies (Actors, Director) and their terms are associated with a specific piece of content (Unbreakable, Moonrise Kingdom). This demonstrates the relationship from the content's point of view, showing terms associated with each value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/taxonomies.md#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n```txt\nUnbreakable                 <- Value\n    Actors                  <- Taxonomy\n        Bruce Willis        <- Term\n        Samuel L. Jackson   <- Term\n    Director                <- Taxonomy\n        M. Night Shyamalan  <- Term\n    ...\nMoonrise Kingdom            <- Value\n    Actors                  <- Taxonomy\n        Bruce Willis        <- Term\n        Bill Murray         <- Term\n    Director                <- Taxonomy\n        Wes Anderson        <- Term\n    ...\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Kind Outputs in Hugo (TOML)\nDESCRIPTION: This TOML configuration snippet specifies which output formats should be generated for different kinds of pages (home, section, taxonomy, term). It adds the newly created `atom` format alongside the default `html` and `rss` formats for these page kinds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[outputs]\nhome = ['html', 'rss', 'atom']\nsection = ['html', 'rss', 'atom']\ntaxonomy = ['html', 'rss', 'atom']\nterm = ['html', 'rss', 'atom']\n```\n\n----------------------------------------\n\nTITLE: Defining a Child Hugo Shortcode Accessing Parent Parameters (now.html)\nDESCRIPTION: This Go HTML template defines the `now` shortcode. It determines the date format by checking for a `dateFormat` parameter first within its own `.Params`, then within its parent's parameters using `.Parent.Params`, and finally falling back to a hardcoded default. It then formats the current time (`now`) using the determined format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Parent.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template {file=\"layouts/shortcodes/now.html\"}\n{{- $dateFormat := \"January 2, 2006 15:04:05\" }}\n\n{{- with .Params }}\n  {{- with .dateFormat }}\n    {{- $dateFormat = . }}\n  {{- end }}\n{{- else }}\n  {{- with .Parent.Params }}\n    {{- with .dateFormat }}\n      {{- $dateFormat = . }}\n    {{- end }}\n  {{- end }}\n{{- end }}\n\n{{- now | time.Format $dateFormat -}}\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plain Words Slice with Hugo Template\nDESCRIPTION: This Hugo template snippet accesses the `PlainWords` method on the current page context (`.`). It calls the `Plain` method internally, splits the plain text content by whitespace using Go's `strings.Fields`, and returns the resulting slice of strings (words). Note that words might contain leading/trailing punctuation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/PlainWords.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .PlainWords }}\n```\n\n----------------------------------------\n\nTITLE: Example Content Directory Structure for Book Reviews (Text)\nDESCRIPTION: Illustrates a sample directory structure within the `content` folder for organizing book review markdown files in a Hugo project. This structure serves as the basis for the related content configuration example presented later in the document.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/related-content.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n└── book-reviews/\n    ├── book-review-1.md\n    ├── book-review-2.md\n    ├── book-review-3.md\n    ├── book-review-4.md\n    └── book-review-5.md\n```\n\n----------------------------------------\n\nTITLE: Using hugo.Environment Function in Go HTML Templates\nDESCRIPTION: Demonstrates how to use the hugo.Environment function to retrieve the current running environment. The function returns a string representing the environment name (e.g., 'production', 'development', 'staging').\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Environment.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Environment }} → production\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with lang.FormatNumberCustom in Hugo Go HTML Template\nDESCRIPTION: Demonstrates how to use the lang.FormatNumberCustom function within a Hugo Go HTML Template to format numbers with varying precisions and delimiter configurations. Requires Hugo site with template support and access to the lang.FormatNumberCustom function. Accepts parameters: PRECISION (integer), NUMBER (numeric value), and optional OPTIONS (for negative sign, decimal, grouping), showing effects on formatted output including rounding behavior. Outputs a locale-specific string as per the template invocation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/FormatNumberCustom.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ lang.FormatNumberCustom 2 12345.6789 }} → 12,345.68\n{{ lang.FormatNumberCustom 2 12345.6789 \"- , .\" }} → 12.345,68\n{{ lang.FormatNumberCustom 6 -12345.6789 \"- .\" }} → -12345.678900\n{{ lang.FormatNumberCustom 0 -12345.6789 \"- . ,\" }} → -12,346\n{{ lang.FormatNumberCustom 0 -12345.6789 \"-|.| \" \"|\" }} → -12 346\n```\n\n----------------------------------------\n\nTITLE: Accessing Term Name in a Term Template\nDESCRIPTION: Shows how to access the name of the current term using the Term property of the Data method within a term template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Data.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Data.Term }} → suspense\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by Section Using the where Function in Hugo Go HTML Templates\nDESCRIPTION: This code snippet showcases filtering and iterating over all regular pages belonging to the 'lessons' section using the where function and the .Section property in Hugo. The snippet produces link titles for each filtered page. Dependencies include the where template function; expected input is the site context and desired section name; output is an HTML list of linked page titles. Ensures that only pages under the specified section are listed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Section.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range where .Site.RegularPages \"Section\" \"lessons\" }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote CSV Data in Hugo Templates\nDESCRIPTION: Shows how to fetch and parse remote CSV files using the getCSV function with URLs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := getCSV \",\" \"https://example.org/pets.csv\" }}\n{{ $data := getCSV \",\" \"https://example.org/\" \"pets.csv\" }}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating path.Dir Usage in Hugo Templates\nDESCRIPTION: This snippet showcases the `path.Dir` function within Hugo's Go HTML templates. It takes a path string as an argument (`PATH`) and returns the directory part of the path, consistently using forward slashes (`/`). Examples cover relative paths, absolute paths, paths with trailing slashes, and empty paths, returning `.` for paths without a directory component or empty paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/path/Dir.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ path.Dir \"a/news.html\" }} → a\n{{ path.Dir \"news.html\" }} → .\n{{ path.Dir \"a/b/c\" }} → a/b\n{{ path.Dir \"/a/b/c\" }} → /a/b\n{{ path.Dir \"/a/b/c/\" }} → /a/b/c\n{{ path.Dir \"\" }} → .\n```\n\n----------------------------------------\n\nTITLE: Generating and Highlighting String Differences in Hugo (Go HTML Template)\nDESCRIPTION: This Go HTML Template snippet demonstrates how to use the `strings.Diff` function to compare two multiline strings (`$want` and `$got`) and generate a diff. It assigns the desired and actual strings to variables, computes the difference using `strings.Diff` specifying 'want' and 'got' as identifiers (OLDNAME, NEWNAME) for the old (OLD) and new (NEW) versions respectively. The result is stored in `$diff` and then passed to `transform.Highlight` with the 'diff' language specifier to syntax-highlight the resulting diff output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Diff/index.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $want := `\n<p>The product of 6 and 7 is 42.</p>\n<p>The product of 7 and 6 is 42.</p>\n`}}\n\n{{ $got := `\n<p>The product of 6 and 7 is 42.</p>\n<p>The product of 7 and 6 is 13.</p>\n`}}\n\n{{ $diff := strings.Diff \"want\" $want \"got\" $got }}\n{{ transform.Highlight $diff \"diff\" }}\n```\n\n----------------------------------------\n\nTITLE: Generating Relative URLs with RelRef in Hugo Templates\nDESCRIPTION: Demonstrates the usage of the `RelRef` page method in a Go HTML template. It shows how to create an options map with `path`, `lang`, and `outputFormat` keys to generate relative URLs for different page versions. The examples assume the context of an English page and show the resulting relative URLs for the specified target page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RelRef.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"path\" \"/books/book-1\" }}\n{{ .RelRef $opts }} → /en/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }}\n{{ .RelRef $opts }} → /de/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }}\n{{ .RelRef $opts }} → /de/books/book-1/index.json\n```\n\n----------------------------------------\n\nTITLE: HTML Output with safe.JS Applied to JavaScript String\nDESCRIPTION: Shows the resulting HTML generated by Hugo when the `safeJS` filter is applied to the string variable. The JavaScript variable 'a' is assigned the unescaped expression x + y, as the string was marked safe.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/JS.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>const a = x + y</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using YAML Front Matter in Hugo\nDESCRIPTION: This YAML front matter block defines essential metadata for a content page within a Hugo project, specifically for a page related to Godot Tutorials. It includes the page's title, publication date, a short description, the main site URL, and an author byline formatted potentially using Markdown. Hugo processes this information to generate the final HTML page and associated site elements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/showcase/godot-tutorials/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Godot Tutorials\ndate: 2021-01-07\ndescription: \"Teaching game development skills with love.\"\nsiteURL: https://godottutorials.com\nbyline: \"[Godot Tutorials](https://godottutorials.com), Web Developer & Game Programmer\"\n---\n```\n\n----------------------------------------\n\nTITLE: Using reflect.IsSlice to Check Slice Type in Go HTML Templates\nDESCRIPTION: This Go HTML Template snippet demonstrates the usage of the `reflect.IsSlice` function. It takes an input value (e.g., the output of the `slice` function or a string literal) and returns a boolean value: `true` if the input is a slice, and `false` otherwise. This is useful for conditional logic within Hugo templates based on data types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/reflect/IsSlice.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ reflect.IsSlice (slice 1 2 3) }} → true\n{{ reflect.IsSlice \"yo\" }} → false\n```\n\n----------------------------------------\n\nTITLE: Grayscale Conversion Before Dithering in Go HTML Template\nDESCRIPTION: This snippet demonstrates the recommended practice of converting an image to grayscale before applying dithering when using a grayscale palette. It defines dithering options with a grayscale palette, creates a filter sequence including resizing, grayscale conversion (`images.Grayscale`), dithering, and PNG conversion, applies the filters, and generates the final `<img>` tag. The processing happens within the context of an existing image resource (represented by `.`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Dither.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"colors\" (slice \"222\" \"808080\" \"ddd\") }}\n{{ $filters := slice\n  (images.Process \"resize 800x\")\n  (images.Grayscale)\n  (images.Dither $opts)\n  (images.Process \"png\")\n}}\n{{ with images.Filter $filters . }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Navigation Implementation with Ancestors\nDESCRIPTION: A more complete Hugo template that creates an accessible breadcrumb navigation using the Ancestors function with Reverse to display ancestors from furthest to closest, plus the current page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Ancestors.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<nav aria-label=\"breadcrumb\" class=\"breadcrumb\">\n  <ol>\n    {{ range .Ancestors.Reverse }}\n      <li>\n        <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n      </li>\n    {{ end }}\n    <li class=\"active\">\n      <a aria-current=\"page\" href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n    </li>\n  </ol>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Behavior in robots.txt\nDESCRIPTION: This snippet defines the default behavior for all web crawlers accessing the Hugo project. It uses the wildcard User-agent to apply the rules to all bots.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Hugo Pages Using Intersect Operation\nDESCRIPTION: Demonstrates how to combine multiple page filtering conditions using intersect as an AND operation. The example filters regular pages by type, pinned status, and presence of images parameter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Intersect.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where .Site.RegularPages \"Type\" \"not in\" (slice \"page\" \"about\") }}\n{{ $pages := $pages | union (where .Site.RegularPages \"Params.pinned\" true) }}\n{{ $pages := $pages | intersect (where .Site.RegularPages \"Params.images\" \"!=\" nil) }}\n```\n\n----------------------------------------\n\nTITLE: Basic MD5 Hashing with Hugo Templates\nDESCRIPTION: Demonstrates how to use the md5 function in Hugo to generate an MD5 hash of a string. The function takes a string input and returns a hexadecimal representation of its MD5 hash.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/crypto/MD5.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ md5 \"Hello world\" }} → 3e25960a79dbc69b674cd4ec67a72c62\n```\n\n----------------------------------------\n\nTITLE: Using hugo.IsServer in Hugo Templates\nDESCRIPTION: This snippet demonstrates using the `hugo.IsServer` variable within a Hugo template. It evaluates to `true` when the site is served by `hugo server` and `false` otherwise (e.g., during a production build), enabling environment-specific template rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/IsServer.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.IsServer }} → true/false\n```\n\n----------------------------------------\n\nTITLE: Breakdown of Output URL for Section List Page (_index.md) in Hugo (Text)\nDESCRIPTION: This snippet explains, with a visual breakdown, how Hugo maps a section list page's source (_index.md) to its output URL, baseURL, section, and permalink. The diagram is intended to help users understand URL composition for section list pages when Hugo builds the site. It is illustrative for documentation and requires no code execution.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/organization/index.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\\n                     url (\"/posts/\")\\n                    ⊢-^-⊣\\n       baseurl      section (\"posts\")\\n⊢--------^---------⊣⊢-^-⊣\\n        permalink\\n⊢----------^-------------⊣\\nhttps://example.org/posts/index.html\n```\n\n----------------------------------------\n\nTITLE: Styling Text with Lightest/Darkest Image Colors in Hugo Templates\nDESCRIPTION: This Go HTML template retrieves an image, finds its lightest and darkest dominant colors by sorting `.Colors` by luminance (using `sort` and `index`), and then uses these colors directly as inline CSS styles for background and text color within `div` elements to create light text on a dark background derived from the image. Requires `resources.Get`, `sort`, and `index`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Colors.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ $darkest := index (sort .Colors \"Luminance\") 0 }}\n  {{ $lightest := index (sort .Colors \"Luminance\" \"desc\") 0 }}\n  <div style=\"background: {{ $darkest }};\">\n    <div style=\"color: {{ $lightest }};\">\n      <p>This is light text on a dark background.</p>\n    </div>\n  </div>\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Reversing ByCount Sort Order\nDESCRIPTION: Shows how to reverse the sort order of taxonomy terms counted by ByCount.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/ByCount.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomyObject.ByCount.Reverse }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Environment Variables in Hugo Templates (Go HTML Template)\nDESCRIPTION: This snippet shows how to use the getenv function in a Hugo template to access custom environment variables that have been set in the shell. The values of MY_VAR1 and MY_VAR2 are retrieved at build time and displayed in the generated site. These variables need to be configured as accessible in the Hugo configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/Getenv.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ getenv \"MY_VAR1\" }} → foo\n{{ getenv \"MY_VAR2\" }} → bar\n```\n\n----------------------------------------\n\nTITLE: Handling Division by Zero Error with Try Function in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to catch a division by zero error using the 'try' function and emit a warning instead of failing the build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/try.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $x := 1 }}\n{{ $y := 0 }}\n{{ with try (div $x $y) }}\n  {{ with .Err }}\n    {{ warnf \"%s\" . }}\n  {{ else }}\n    {{ printf \"%v divided by %v equals %v\" $x $y .Value }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AuthorDate with GitInfo\nDESCRIPTION: Using the AuthorDate method on GitInfo to get the formatted date when the author made the commit.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GitInfo }}\n  {{ .AuthorDate.Format \"2006-01-02\" }} → 2023-10-09\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defensive Coding Example for File Access in Hugo\nDESCRIPTION: Demonstrates a defensive coding pattern to safely access file information on pages that may not be backed by a file, such as top-level section pages, taxonomy pages, and term pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_13\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .ContentBaseName }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Structuring Hugo Layouts Directory for Multiple Templates - text\nDESCRIPTION: This snippet illustrates how to organize multiple templates ('contact.html' and 'single.html') under the layouts/page/ directory, allowing different content files to be rendered with distinct templates according to their front matter. Inputs are directory and file names; output is template matching for different pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/lookup-order.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\\n└── page/\\n    └── contact.html  <-- renders contact.md\\n    └── single.html   <-- renders about.md\n```\n\n----------------------------------------\n\nTITLE: Retrieving Positional Shortcode Arguments using .Get (Go HTML Template)\nDESCRIPTION: Demonstrates using the `.Get` method with numeric indices (0 and 1) inside a Hugo shortcode template (`layouts/shortcodes/myshortcode.html`) to retrieve positional arguments passed from Markdown. The retrieved arguments ('Hello' and 'world' from the corresponding call) are then formatted using `printf`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Get.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ printf \"%s %s.\" (.Get 0) (.Get 1) }} → Hello world.\n```\n\n----------------------------------------\n\nTITLE: Raw String Literal Example in Go\nDESCRIPTION: Example showing a raw string literal (`bar`) enclosed between backticks. In Go, raw string literals allow any characters except backticks, and backslashes have no special meaning. These strings can contain newlines, though carriage return characters are discarded.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/raw-string-literal.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n`bar`\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to Taxonomy Terms via Front Matter (TOML)\nDESCRIPTION: Illustrates how to add custom metadata (e.g., a 'wikipedia' link) to a specific taxonomy term ('Bruce Willis' under 'actors') by creating an `_index.md` file at `/content/<TAXONOMY>/<TERM>/_index.md` and defining the metadata in its TOML front matter. The term's page title is also set here.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/taxonomies.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n{{< code-toggle file=content/actors/bruce-willis/_index.md fm=true >}}\ntitle: \"Bruce Willis\"\nwikipedia: \"https://en.wikipedia.org/wiki/Bruce_Willis\"\n{{< /code-toggle >}}\n```\n\n----------------------------------------\n\nTITLE: Applying math.Ceil in Hugo Template - Go HTML Template\nDESCRIPTION: Illustrates how to apply the math.Ceil function directly within a Hugo Go HTML template context. No external dependencies are required beyond Hugo itself; the built-in math module provides the function. The example takes a floating-point value (2.1) and outputs its ceiling (3), showing expected input and output. Key constraints are that the input must be a numeric value, and the output will always be a float rounded up to the nearest integer.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Ceil.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Ceil 2.1 }} → 3\n```\n\n----------------------------------------\n\nTITLE: Example of Highlight Shortcode with Go Code\nDESCRIPTION: Example showing how to use the highlight shortcode with Go code, including line numbers, highlighted lines, and a specific style.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/highlight.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{</* highlight go \"linenos=inline, hl_lines=3 6-8, style=emacs\" */>}}\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    for i := 0; i < 3; i++ {\n        fmt.Println(\"Value of i:\", i)\n    }\n}\n{{</* /highlight */>}}\n```\n\n----------------------------------------\n\nTITLE: Inserting QR Codes with Hugo Shortcode Syntax - Self-closing - Text\nDESCRIPTION: This snippet demonstrates embedding a QR code using Hugo's self-closing qr shortcode with text as a parameter. It is Hugo-specific and intended for use in Markdown or HTML content files, not executable code. This approach eliminates the need for template logic and provides a concise way to insert QR codes, with options optionally specified as arguments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/QR.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{{</* qr text=\"https://gohugo.io\" /*/>}}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Global Resource Alternative\nDESCRIPTION: Shows the project directory structure for accessing CSV files as global resources using resources.Get and transform.Unmarshal.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── assets/\n    └── data/\n        └── pets.csv\n```\n\n----------------------------------------\n\nTITLE: Embedding Google Analytics Template - Hugo Go Template\nDESCRIPTION: Illustrates how to include the embedded Google Analytics 4 template in your site with Go template syntax. This template relies on configuration for the GA measurement ID. Output is a block of tracking code rendered within the page, suitable for analytics integration. Requires Google Analytics account setup with measurement ID.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/google_analytics.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Logging Suppressible Error in Hugo Template\nDESCRIPTION: Demonstrates how to use fmt.Erroridf to log an error message with ID 'error-42' that can be suppressed through configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Erroridf.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ erroridf \"error-42\" \"You should consider fixing this.\" }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Map in Hugo Scratch Pad\nDESCRIPTION: Shows how to retrieve the raw backing map using the Values method. Note: Not recommended for use with Store methods on a Page object due to concurrency issues.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/NewScratch.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := newScratch }}\n{{ $s.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ $s.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n\n{{ $map := $s.Values }}\n```\n\n----------------------------------------\n\nTITLE: Accessing LinkTitle in Hugo Templates\nDESCRIPTION: Shows how to access the LinkTitle value in a Hugo template. This will output 'Dessert recipes' based on the front matter example.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/LinkTitle.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .LinkTitle }} → Dessert recipes\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Multilingual Content Adapters by File Name (Text)\nDESCRIPTION: Illustrates the directory structure when supporting multilingual content adapters by file name in Hugo. Language codes are appended to the adapter and index markdown files, allowing separate templates per language.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n└── books/\\n    ├── _content.de.gotmpl\\n    ├── _content.en.gotmpl\\n    ├── _index.de.md\\n    └── _index.en.md\n```\n\n----------------------------------------\n\nTITLE: HTML Output Example of Markdown Processing - HTML\nDESCRIPTION: This HTML snippet shows the output generated after processing the provided Markdown with Hugo's Markdown renderer. It includes an unordered list with links, corresponding to the Markdown anchors. No additional dependencies are needed to interpret the markup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FindRESubmatch.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"https://example.org\">Example</a></li>\n  <li><a href=\"https://gohugo.io\">Hugo</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Terminating if statements in Hugo templates\nDESCRIPTION: Demonstrates how to use the end statement to close an if conditional block. The example checks if a variable exists and outputs its value within the conditional block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/end.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"foo\" }}\n{{ if $var }}\n  {{ $var }} → foo\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using urlquery Function with safeURL in Hugo Templates\nDESCRIPTION: This example demonstrates how to use the urlquery function to escape a URL and then mark it as safe using safeURL. The escaped URL is then embedded in an href attribute.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/urlquery.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $u := urlquery \"https://\" \"example.com\" | safeURL }}\n<a href=\"https://example.org?url={{ $u }}\">Link</a>\n```\n\n----------------------------------------\n\nTITLE: Using compare.Lt with numeric values in Hugo templates\nDESCRIPTION: Examples of using the compare.Lt function with numeric values in Hugo templates. The function returns true only when all values are in strictly ascending order, otherwise it returns false.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Lt.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ lt 1 1 }} → false\n{{ lt 1 2 }} → true\n{{ lt 2 1 }} → false\n\n{{ lt 1 1 1 }} → false\n{{ lt 1 1 2 }} → false\n{{ lt 1 2 1 }} → false\n{{ lt 1 2 2 }} → true\n\n{{ lt 2 1 1 }} → false\n{{ lt 2 1 2 }} → false\n{{ lt 2 2 1 }} → false\n```\n\n----------------------------------------\n\nTITLE: Calling a Hugo Shortcode with Markdown Notation (Markdown)\nDESCRIPTION: Illustrates the alternative `{{% %}}` notation for calling the paired `card` shortcode in Markdown. This notation instructs Hugo to treat the *entire* output of the shortcode (including its surrounding HTML) as Markdown content, requiring adjustments to the shortcode template and potentially Hugo configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Inner.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n{{%/* card title=\"Product Design\" */%}}\nWe design the **best** widgets in the world.\n{{%/* /card */%}}\n```\n\n----------------------------------------\n\nTITLE: Structuring Hugo Configuration for Development Server Settings\nDESCRIPTION: Illustrates the recommended project structure for Hugo, placing development server configurations (`server.toml`) within a dedicated `development` configuration directory alongside the `_default` configuration. This separation helps manage environment-specific settings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/server.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproject/\n└── config/\n    ├── _default/\n    │   └── hugo.toml\n    └── development/\n        └── server.toml\n```\n\n----------------------------------------\n\nTITLE: Converting Weekday to String in Hugo Templates\nDESCRIPTION: Demonstrates how to convert a time.Time value's weekday to its string representation in Hugo templates. Uses time.AsTime to parse a timestamp and returns 'Friday' for the given date.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Weekday.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Weekday.String }} → Friday\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Theme Components in Hugo\nDESCRIPTION: Demonstrates how to define multiple theme components in hugo.toml configuration file. The themes are applied with precedence from left to right, where Hugo looks first in the project directory and then through each theme component in order.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-modules/theme-components.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntheme = [\"my-shortcodes\", \"base-theme\", \"hyde\"]\n```\n\n----------------------------------------\n\nTITLE: GitHub Pages Workflow Step for Dart Sass Installation\nDESCRIPTION: YAML configuration snippet showing how to install Dart Sass in a GitHub Pages workflow to ensure Hugo can use Dart Sass during the build process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/Sass.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install Dart Sass\n  run: sudo snap install dart-sass\n```\n\n----------------------------------------\n\nTITLE: Creating a Hugo Shortcode to Render CSV as HTML Table\nDESCRIPTION: Defines a Hugo shortcode (`layouts/shortcodes/csv-to-table.html`) that takes a CSV filename as input. It uses `resources.Get` to fetch the CSV file from the `assets` directory and `transform.Unmarshal` to parse it. The shortcode then iterates over the parsed data to generate an HTML `<table>`, using the first row as headers and subsequent rows as table data. Error handling is included for missing arguments or file access issues.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/data-sources.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with $file := .Get 0 }}\n  {{ with resources.Get $file }}\n    {{ with . | transform.Unmarshal }}\n      <table>\n        <thead>\n          <tr>\n            {{ range index . 0 }}\n              <th>{{ . }}</th>\n            {{ end }}\n          </tr>\n        </thead>\n        <tbody>\n          {{ range after 1 . }}\n            <tr>\n              {{ range . }}\n                <td>{{ . }}</td>\n              {{ end }}\n            </tr>\n          {{ end }}\n        </tbody>\n      </table>\n    {{ end }}\n  {{ else }}\n    {{ errorf \"The %q shortcode was unable to find %s. See %s\" $.Name $file $.Position }}\n  {{ end }}\n{{ else }}\n  {{ errorf \"The %q shortcode requires one positional argument, the path to the CSV file relative to the assets directory. See %s\" .Name .Position }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Content Directory Structure - text\nDESCRIPTION: Displays the directory and file structure for a Hugo site's 'content' directory. Used as an example context for the front matter filtering demonstrations. Shows how different posts define or omit the 'exclude' parameter in their front matter. No dependencies; for illustration only.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── posts/\\n│   ├── _index.md\\n│   ├── post-1.md  <-- front matter: exclude = false\\n│   ├── post-2.md  <-- front matter: exclude = true\\n│   └── post-3.md  <-- front matter: exclude not defined\\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Retrieving AuthorName with GitInfo\nDESCRIPTION: Using the AuthorName method on GitInfo to get the name of the commit author, respecting gitmailmap.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GitInfo }}\n  {{ .AuthorName }} → John Smith\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Navigation Menu Structure in Hugo Configuration\nDESCRIPTION: A TOML code snippet showing how to define a main navigation menu with entries for Services, About, and Contact pages in Hugo configuration. Each entry includes a name, pageRef for the target URL, and weight for default ordering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/ByName.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[menus.main]]\nname = 'Services'\npageRef = '/services'\nweight = 10\n\n[[menus.main]]\nname = 'About'\npageRef = '/about'\nweight = 20\n\n[[menus.main]]\nname = 'Contact'\npageRef = '/contact'\nweight = 30\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Direction in Hugo Templates\nDESCRIPTION: Retrieves the language direction from the site configuration, which can be either 'ltr' (left to right) or 'rtl' (right to left).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Language.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Language.LanguageDirection }} → ltr\n```\n\n----------------------------------------\n\nTITLE: Displaying Menu Entries with Title Attributes in Hugo Templates\nDESCRIPTION: Creates an unordered list of main menu entries, using the Title property as the link title attribute. When the title property is not defined and the menu entry resolves to a page, it falls back to using the page's Title value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Title.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li><a href=\"{{ .URL }}\" title=\"{{ .Title }}>{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Resource Content in Hugo Template\nDESCRIPTION: Demonstrates fetching a text resource using `resources.Get` and displaying its content directly using the `.Content` method within a Hugo template. Requires a resource named `quotations/kipling.txt` in the assets directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Content.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"quotations/kipling.txt\" }}\n  {{ .Content }} → He travels the fastest who travels alone.\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Ranging and Rendering Summaries with Hugo Go HTML Templates\nDESCRIPTION: This snippet demonstrates iterating over the RegularPages collection in Hugo and, for each page, rendering the \\\"summary\\\" template with the current page as context. It uses Go HTML Templates syntax and relies on Hugo's internal templating engine. The .Render method is called for each page, and no additional parameters except the template name are provided. The snippet presumes that a \\\"summary\\\" template exists in the layouts structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Render.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range site.RegularPages }}\\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\\n  {{ .Render \\\"summary\\\" }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics Service ID in Hugo (TOML)\nDESCRIPTION: Shows the TOML configuration snippet required to set the Google Analytics ID within the Hugo configuration file. This is placed under the `[services.googleAnalytics]` section.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[services.googleAnalytics]\nID = 'G-XXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Using math.Atan in Hugo Templates\nDESCRIPTION: This snippet demonstrates the usage of the `math.Atan` function within a Go HTML template in Hugo. It calls the function with the input value `1` and returns its arctangent, which is approximately 0.785 radians (π/4). This function requires a single numeric argument and returns a `float64`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Atan.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Atan 1 }} → 0.7853981633974483\n```\n\n----------------------------------------\n\nTITLE: Custom Date Formatting in Archetype - TOML\nDESCRIPTION: Demonstrates use of the 'time.Now.Format' template function for custom date formatting in Hugo archetype front matter, shown here as YYYY-MM-DD (RFC3339-like pattern). Requires Hugo templating with time functions available. Inputs: invocation time. Output: formatted date string in front matter. Limitation: formatting is static at content creation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\ntitle = '{{ replace .File.ContentBaseName `-` ` ` | title }}'\ndate = '{{ time.Now.Format \"2006-01-02\" }}'\ndraft = true\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Hugo Site Configuration - TOML\nDESCRIPTION: This TOML snippet defines a basic Hugo configuration file with a specified base URL. It is required for Hugo to correctly resolve site-relative paths and generate output. The file is referenced during conversion operations and is essential for Hugo CLI to function in this context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/convert.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = \"http://example.org/\"\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for Transparent Image Conversion in Hugo\nDESCRIPTION: Demonstrates setting a background color when converting from formats that support transparency to those that don't, using a hexadecimal color code.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_27\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image.Resize \"600x jpg #b31280\" }}\n```\n\n----------------------------------------\n\nTITLE: Reversing Navigation Direction in Hugo Templates\nDESCRIPTION: Modified Hugo template that reverses the meaning of previous and next by using the Reverse method on the page collection, changing the navigation direction.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/pages/next-and-prev.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := .CurrentSection.Pages.ByWeight.Reverse }}\n\n{{ with $pages.Prev . }}\n  <a href=\"{{ .RelPermalink }}\">Previous</a>\n{{ end }}\n\n{{ with $pages.Next . }}\n  <a href=\"{{ .RelPermalink }}\">Next</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Template with Partials and Blocks (Go HTML Template)\nDESCRIPTION: Serves as a base layout for all Hugo pages, using partials for repeated sections ('head', 'header', 'footer') and a block for dynamic main content. Dependencies are Hugo's Go HTML Templates and built-in template functions like 'partial' and 'block'. It expects that the referenced partial files exist. The output is a complete HTML document shell for content pages. Limitation: all child templates must define the 'main' block to inject their content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<!DOCTYPE html>\\n<html lang=\"{{ or site.Language.LanguageCode }}\" dir=\"{{ or site.Language.LanguageDirection `ltr` }}\">\\n<head>\\n  {{ partial \"head.html\" . }}\\n</head>\\n<body>\\n  <header>\\n    {{ partial \"header.html\" . }}\\n  </header>\\n  <main>\\n    {{ block \"main\" . }}{{ end }}\\n  </main>\\n  <footer>\\n    {{ partial \"footer.html\" . }}\\n  </footer>\\n</body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using 'with' with 'else' Statement in Hugo Templates\nDESCRIPTION: Shows how to combine 'with' with an 'else' statement to execute different blocks based on whether a variable is truthy or falsy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/with.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"foo\" }}\n{{ with $var }}\n  {{ . }} → foo\n{{ else }}\n  {{ print \"var is falsy\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Sequence in Hugo Templates\nDESCRIPTION: Example of iterating over a sequence of integers using the seq function in Hugo templates. This shows how to use range with seq to perform calculations on sequential values, in this case calculating the product of numbers 1 through 4.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Seq.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $product := 1 }}\n{{ range seq 4 }}\n  {{ $product = mul $product . }}\n{{ end }}\n{{ $product }} → 24\n```\n\n----------------------------------------\n\nTITLE: Organizing Content and Resource Directories in Hugo (text)\nDESCRIPTION: Illustrates the directory structure of Hugo page bundles, including nested resources and root indicators. This ASCII tree diagram is useful for understanding which files qualify as page resources and their relationship to respective bundles. Inputs are directory names and file names under 'content', showing a typical setup for post bundles and their associated files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent\\n└── post\\n    ├── first-post\\n    │   ├── images\\n    │   │   ├── a.jpg\\n    │   │   ├── b.jpg\\n    │   │   └── c.jpg\\n    │   ├── index.md (root of page bundle)\\n    │   ├── latest.html\\n    │   ├── manual.json\\n    │   ├── notice.md\\n    │   ├── office.mp3\\n    │   ├── pocket.mp4\\n    │   ├── rating.pdf\\n    │   └── safety.txt\\n    └── second-post\\n        └── index.md (root of page bundle)\n```\n\n----------------------------------------\n\nTITLE: AbsLangURL Usage Without Leading Slash - Base URL Example 2\nDESCRIPTION: Demonstrates usage of absLangURL function with non-slash-prefixed paths when baseURL is set to https://example.org/docs/\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/AbsLangURL.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ absLangURL \"\" }}           → https://example.org/docs/en/\n{{ absLangURL \"articles\" }}   → https://example.org/docs/en/articles\n{{ absLangURL \"style.css\" }}  → https://example.org/docs/en/style.css\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Tag - Hugo Template - Go HTML Template\nDESCRIPTION: Retrieves the RFC 5646 language tag (e.g. \\\"de\\\") for the active site via the Language object. Meant for use within a Hugo Go HTML Template. No additional dependencies required beyond Hugo's built-in templating context. Input: Site context. Output: String language tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Language.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Language.Lang }} \\u2192 de\n```\n\n----------------------------------------\n\nTITLE: Applying math.Floor in Hugo Go Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates calling the math.Floor function within a Hugo Go HTML template to round down the input value 1.9 to 1. It relies on Hugo's support for Go template functions, specifically the math.Floor function from Go’s math package, and requires Hugo v0.55.0 or newer for such functions to be available. The expected input is a number (float), and the output is its floor value as an integer in the rendered template; non-numeric input will result in a template error.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Floor.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Floor 1.9 }} → 1\n```\n\n----------------------------------------\n\nTITLE: Caching a Hugo Partial Using partialCached - Go HTML Template\nDESCRIPTION: This snippet shows the simplest way to invoke the partialCached function in a Hugo template. It includes the 'footer.html' partial and caches the rendered result based on the context. Requires Hugo installed and the 'footer.html' partial present. The dot (.) passes the current context to the partial, and the output is HTML. No variant keys are used, so caching is context-specific, and further customization requires additional variant arguments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/IncludeCached.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partialCached \\\"footer.html\\\" . }}\n```\n\n----------------------------------------\n\nTITLE: Running Hugo Deploy Command\nDESCRIPTION: Basic command syntax for deploying a Hugo site to a configured target. The command syncs the local public directory with the destination bucket. An optional target parameter can specify which target to deploy to.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-hugo-deploy.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhugo deploy [--target=<target name>]\n```\n\n----------------------------------------\n\nTITLE: Generated Sequential Image HTML - HTML\nDESCRIPTION: This HTML snippet represents the rendered result of invoking the img shortcode twice from content, as shown in previous snippets. Each image tag includes a unique id assigned by the Ordinal method and displays image dimensions, serving as an example of correct and expected output. There are no external dependencies for this HTML output, except for required image resources being available at the specified paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Ordinal.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"img-000\" src=\"/images/a.jpg\" width=\"600\" height=\"400\" alt=\"\">\n<img id=\"img-001\" src=\"/images/b.jpg\" width=\"600\" height=\"400\" alt=\"\">\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output Using URL Method\nDESCRIPTION: The HTML output generated by Hugo when using the URL method in the menu template, showing how pages without matches have empty href attributes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/PageRef.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/products/\">Products</a></li>\n  <li><a href=\"\">Services</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Checking Character Presence with strings.ContainsAny in Go HTML Template\nDESCRIPTION: This snippet demonstrates the `strings.ContainsAny` function in a Hugo template. It checks if the string \"Hugo\" contains any of the characters 'g' or 'm'. The function returns `true` because 'g' is present in \"Hugo\". The `strings.ContainsAny` function requires two string arguments: the string to search within and the set of characters to search for.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/ContainsAny.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.ContainsAny \"Hugo\" \"gm\" }} → true\n```\n\n----------------------------------------\n\nTITLE: Formatting time.Time Values Using time.Format - Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates how to format a time.Time value in a Hugo template using the time.Format function. The time.AsTime function parses an ISO 8601 date/time string, which is then formatted to a human-readable date using a Go date layout string. Dependencies include the Hugo templating engine and its built-in functions. The input is a date/time string, and the output is a localized formatted date string. This approach requires the Hugo site to use Go HTML Template syntax and access to the time.Format and time.AsTime template functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/Format.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-10-15T13:18:50-07:00\" }}\n{{ time.Format \"2 Jan 2006\" $t }} → 15 Oct 2023\n```\n\n----------------------------------------\n\nTITLE: Describing Hugo Content Directory Structure - Text\nDESCRIPTION: This snippet uses the plain text format to illustrate an example content directory structure for a Hugo site. It shows how directories and files are organized, including the use of the type field in front matter to override directory-based type inference. There are no dependencies, and this snippet visually informs users how content is arranged for further usage in templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Type.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── auction/\\n│   ├── _index.md\\n│   ├── item-1.md\\n│   └── item-2.md  <-- front matter: type = books\\n├── books/\\n│   ├── _index.md\\n│   ├── book-1.md\\n│   └── book-2.md\\n├── films/\\n│   ├── _index.md\\n│   ├── film-1.md \\n│   └── film-2.md\\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Default HTML Output Without Render Hooks\nDESCRIPTION: The standard HTML output generated when converting Markdown to HTML without any custom render hooks applied.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"https://gohugo.io\">Hugo</a></p>\n<p><img alt=\"kitten\" src=\"kitten.jpg\"></p>\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Taxonomy Terms in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the GetTerms function to retrieve tags from a page's front matter and display them as a list of links. The function returns a collection of term pages ordered as they appear in the front matter, which can then be iterated through to access properties like RelPermalink and LinkTitle.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GetTerms.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GetTerms \"tags\" }}\n  <p>Tags</p>\n  <ul>\n    {{ range . }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Casting Octal Values to Integer with Hugo int - Go HTML Template\nDESCRIPTION: This snippet displays how octal (base 8) literals, both legacy and modern (with '0o' prefix), and their string representations are converted to integers using Hugo's int function within a Go HTML template. The function parses leading zero notation or '0o' as octal. Inputs include octal literals or strings. Output is the base-10 integer value. Leading zeros indicate octal for strings and numbers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToInt.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ int 011 }} → 9 (int)\n{{ int \"011\" }} → 9 (int)\n\n{{ int 0o11 }} → 9 (int)\n{{ int \"0o11\" }} → 9 (int)\n```\n\n----------------------------------------\n\nTITLE: Basic Ancestors Loop Template in Hugo\nDESCRIPTION: A simple Hugo template that loops through ancestor pages and creates links to each one. It demonstrates the basic usage of the .Ancestors function to access parent sections of a page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Ancestors.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Ancestors }}\n  <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Positional Params in a Shortcode - Hugo Go HTML Template\nDESCRIPTION: This snippet shows how to retrieve positional arguments from the .Params slice in a Hugo shortcode template using Go HTML template syntax. 'index .Params 0' and 'index .Params 1' access the first and second argument, respectively. This template assumes the shortcode was called with positional arguments, and indexing beyond the passed values will result in an error.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Params.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ index .Params 0 }} → Hello\n{{ index .Params 1 }} → world\n```\n\n----------------------------------------\n\nTITLE: Adding Error Handling to InSection Checks in Hugo Templates\nDESCRIPTION: Shows how to add defensive coding with error reporting when using InSection by implementing an else clause with the with statement to handle cases where a page doesn't exist.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/InSection.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $path := \"/auctions/2023-11\" }}\n{{ with .Site.GetPage $path }}\n  {{ $.InSection . }} → true\n{{ else }}\n  {{ errorf \"Unable to find the section with path %s\" $path }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URLs without Leading Slash (Hugo)\nDESCRIPTION: Demonstrates how urls.AbsURL function generates absolute URLs when the input does not begin with a slash. The resulting URL is relative to the baseURL in the site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/AbsURL.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ absURL \"\" }}          → https://example.org/\n{{ absURL \"articles\" }}  → https://example.org/articles\n{{ absURL \"style.css\" }} → https://example.org/style.css\n```\n\n----------------------------------------\n\nTITLE: Setting Hugo Log Level to Debug via Command Line (Shell)\nDESCRIPTION: Demonstrates using the `--logLevel` flag with the `debug` value for the Hugo command. This is the most verbose level, displaying debug information, informational messages, warnings, and errors for detailed troubleshooting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/logging.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhugo --logLevel debug\n```\n\n----------------------------------------\n\nTITLE: Adding Entries in a Map with hugo.Store.SetInMap - Go HTML Template\nDESCRIPTION: Demonstrates using hugo.Store.SetInMap to put key-value pairs into a map stored at a named key. Shows storing multiple map keys (e.g., 'english', 'french'). Inputs: top-level key ('greetings'), map keys, and respective values. Output is a map structure ready for retrieval.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Store.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ hugo.Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ hugo.Store.Get \"greetings\" }} → map[english:Hello french:Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Regular expression comparison in collections.Where\nDESCRIPTION: Example showing how to filter pages where a parameter matches a regular expression using the 'like' operator (introduced in Hugo 0.116.0).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where .Site.RegularPages \"Params.author\" \"like\" `(?i)^victor` }}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Post Frontmatter in TOML\nDESCRIPTION: TOML frontmatter for a Hugo post that defines metadata including title, publication date, draft status, and tags. The frontmatter is enclosed by '+++' delimiters and precedes the content of the post.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/create/skeletons/theme/content/posts/post-1.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = 'Post 1'\ndate = 2023-01-15T09:00:00-07:00\ndraft = false\ntags = ['red']\n+++\n```\n\n----------------------------------------\n\nTITLE: Advanced Cropping and Image Processing with Hugo - Go HTML Template\nDESCRIPTION: This example extends Hugo's .Crop method to include additional processing options such as anchor point, output format, quality, and resampling method (e.g., '200x200 topright webp q85 lanczos'). The snippet is used within a Go HTML Template, leveraging Hugo's resource pipeline for advanced image customization. Prerequisites are Hugo image resources and knowledge of processing spec syntax. The input string includes crop dimensions and optional modifiers; output is an HTML img tag referencing the processed image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Crop.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Crop \"200x200 topright webp q85 lanczos\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Compound Image Filter: Crop, Center, Rotate, WebP, and Quality in Hugo go-html-template\nDESCRIPTION: Creates an advanced image filter that combines cropping, centering, rotating, converting to WebP, and setting quality to 50. Highlights how multiple transformations are composable using the images.Process syntax, enabling powerful chained effects on images processed in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"crop 200x200 center r90 webp q50\" }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Menu Items Using the Page Method in Hugo Templates\nDESCRIPTION: Hugo template code that demonstrates how to conditionally render menu items based on whether they are associated with a page. For page-associated entries, it uses the page's RelPermalink and Title; otherwise, it uses the entry's URL and Name properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Page.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    {{ with .Page }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></li>\n    {{ else }}\n      <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n    {{ end }}\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Content Structure\nDESCRIPTION: Demonstrates a typical Hugo content directory structure with books and films sections\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Sections.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── books/\n│   ├── book-1.md\n│   └── book-2.md\n├── films/\n│   ├── film-1.md\n│   └── film-2.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote JSON Data with getJSON in Hugo Templates\nDESCRIPTION: Shows how to retrieve JSON data from remote URLs using the getJSON function in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := getJSON \"https://example.org/books.json\" }}\n{{ $data := getJSON \"https://example.org/\" \"books.json\" }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Hugo Summary Content View Template\nDESCRIPTION: Provides the Go HTML template code for a `summary.html` content view (`layouts/_default/summary.html`). This template receives a Hugo `Page` object as context and renders an article snippet including the page title as a link, metadata (date, word count), the page summary (`.Summary`), and a 'Read more' link.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/content-view.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<article class=\"post\">\n  <header>\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\n    <div class=\"post-meta\">{{ .Date.Format \"Mon, Jan 2, 2006\" }} - {{ .FuzzyWordCount }} Words </div>\n  </header>\n  {{ .Summary }}\n  <footer>\n  <a href='{{ .RelPermalink }}'>Read&nbsp;more&nbsp;&raquo;</a>\n  </footer>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Invoking Shortcode with Named and Positional Arguments - Markdown\nDESCRIPTION: This snippet provides two example invocations of the same Hugo shortcode in Markdown: one using named arguments and the other using positional arguments. The first line calls \\\"myshortcode\\\" with named keys (greeting=\\\"Hello\\\", firstName=\\\"world\\\"), while the second uses positional values (\\\"Hello\\\", \\\"world\\\"). Both methods are supported by the underlying template and produce identical output, illustrating the flexibility of Hugo shortcodes with IsNamedParams.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/IsNamedParams.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n```text {file=\\\"content/about.md\\\"}\n{{</* myshortcode greeting=\\\"Hello\\\" firstName=\\\"world\\\" */>}}\n{{</* myshortcode \\\"Hello\\\" \\\"world\\\" */>}}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo with Live Reload Disabled in TOML\nDESCRIPTION: This TOML configuration for Hugo sets the base URL, disables various output kinds, and importantly, disables live reload functionality. This configuration is likely used in conjunction with the server command to test the disabled live reload feature.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_disablelivereload__config.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\ndisableLiveReload = true\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages Sorted by Title Descending (Go HTML Template)\nDESCRIPTION: This Go HTML template snippet demonstrates sorting a page collection (`.Pages`) by title in descending order. It uses `.Pages.ByTitle.Reverse` to achieve the reverse alphabetical sort. The code then iterates through the sorted pages, rendering each page's title as an H2 heading linked to its relative permalink (`.RelPermalink`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByTitle.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByTitle.Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using InSection Method with Different Page Paths in Hugo Templates\nDESCRIPTION: Demonstrates how to check if the current page is in various sections using the InSection method with GetPage to retrieve different sections of the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/InSection.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/\" }}\n  {{ $.InSection . }} → false\n{{ end }}\n\n{{ with .Site.GetPage \"/auctions\" }}\n  {{ $.InSection . }} → false\n{{ end }}\n\n{{ with .Site.GetPage \"/auctions/2023-11\" }}\n  {{ $.InSection . }} → true\n{{ end }}\n\n{{ with .Site.GetPage \"/auctions/2023-11/auction-2\" }}\n  {{ $.InSection . }} → true\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: UTC and Local Time Formatting in Hugo\nDESCRIPTION: Demonstrates converting and formatting time values to both UTC and local time zones using the UTC and Local methods.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Format.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := \"2023-01-27T23:44:58-08:00\" }}\n{{ $t = time.AsTime $t }}\n{{ $format := \"2 Jan 2006 3:04:05 PM MST\" }}\n\n{{ $t.UTC.Format $format }} → 28 Jan 2023 7:44:58 AM UTC\n{{ $t.Local.Format $format }} → 27 Jan 2023 11:44:58 PM PST\n```\n\n----------------------------------------\n\nTITLE: Accessing Local JSON Data with getJSON in Hugo Templates\nDESCRIPTION: Demonstrates how to access local JSON data in Hugo using the getJSON function. The file path is relative to the working directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := getJSON \"other-files/books.json\" }}\n{{ $data := getJSON \"other-files/\" \"books.json\" }}\n```\n\n----------------------------------------\n\nTITLE: Visual GoAT Diagram Example\nDESCRIPTION: A GoAT diagram example showing how the rendered diagram would appear in the browser. It demonstrates the syntax for connecting nodes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/diagrams/Goat.md#2025-04-23_snippet_2\n\nLANGUAGE: goat\nCODE:\n```\n.---.     .-.       .-.       .-.     .---.\n| A +--->| 1 |<--->| 2 |<--->| 3 |<---+ B |\n'---'     '-'       '+'       '+'     '---'\n```\n\n----------------------------------------\n\nTITLE: Appending String with hugo.Store.Add - Go HTML Template\nDESCRIPTION: Demonstrates using hugo.Store.Add to concatenate or increment values of a given key. This example starts with a string and appends another string, leveraging Go's + operator behavior. Input: existing key and new value. Output: mutated value. Requires the key to be string-compatible.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Store.Set \"greeting\" \"Hello\" }}\n{{ hugo.Store.Add \"greeting\" \"Welcome\" }}\n{{ hugo.Store.Get \"greeting\" }} → HelloWelcome\n```\n\n----------------------------------------\n\nTITLE: Executing hugo convert toTOML Command Syntax in Shell\nDESCRIPTION: Shows the basic syntax for running the `hugo convert toTOML` command. This command converts front matter in the content directory to TOML format. Optional flags and arguments can be appended.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert_toTOML.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo convert toTOML [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Taxonomies\nDESCRIPTION: Shows how to configure taxonomy types in Hugo's configuration file by defining genre and author taxonomies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Taxonomies.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[taxonomies]\ngenre = 'genres'\nauthor = 'authors'\n```\n\n----------------------------------------\n\nTITLE: Assigning Taxonomy Terms in TOML Front Matter\nDESCRIPTION: This TOML front matter example for a content file (`content/example.md`) demonstrates how to assign terms to the taxonomies defined in the site configuration. It sets basic metadata like title and date, and assigns `red` and `blue` to the `tags` taxonomy, and `mystery` and `romance` to the `genres` taxonomy. A custom parameter `author` is also defined under `[params]`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/front-matter.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Example'\ndate = 2024-02-02T04:14:54-08:00\ndraft = false\nweight = 10\ntags = ['red','blue']\ngenres = ['mystery','romance']\n[params]\nauthor = 'John Smith'\n```\n\n----------------------------------------\n\nTITLE: Rendering Shortcodes Programmatically in a Hugo Template (Go HTML Template)\nDESCRIPTION: This Hugo Go HTML Template snippet retrieves a page object for \"/about\" using site.GetPage, then calls RenderShortcodes on the resulting page. This sequence programmatically processes the page content, resolving and rendering all shortcodes within it while leaving surrounding Markdown or markup intact according to Hugo's handling. The snippet assumes it's executed in a context with access to site and that the page exists. It outputs the HTML result of all rendered shortcodes and their contained Markdown.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RenderShortcodes.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $p := site.GetPage \"/about\" }}\n{{ $p.RenderShortcodes }}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Page and Accessing Its Title in Hugo Template (go-html-template)\nDESCRIPTION: Shows fetching a page by path using '.Page.GetPage', assigning it to a variable, and accessing its Title method. Requires an existing page at the specified path. Highlights method chaining and argument passing in Hugo's object-method system.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_17\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $page := .Page.GetPage \\\"/books/les-miserables\\\" }}\\n{{ $page.Title }} → Les Misérables\n```\n\n----------------------------------------\n\nTITLE: Resize and Set Resampling Filter in Hugo go-html-template\nDESCRIPTION: Illustrates resizing an image to 300 pixels width while using the \\\"lanczos\\\" resampling algorithm for improved scaling quality. Applies both a transformation and a filter type in a single images.Process call. This increase in control is helpful for obtaining desired sharpness or smoothness.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_13\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"resize 300x lanczos\" }}\n```\n\n----------------------------------------\n\nTITLE: Double Integral Representation of Basel Sum in LaTeX\nDESCRIPTION: This LaTeX snippet presents a double integral that is used to evaluate the Basel sum in one of the proofs attributed to Tom Apostol.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_6\n\nLANGUAGE: latex\nCODE:\n```\n\\int_{0}^{1} \\int_{0}^{1} \\frac{1}{1 - xy} dy dx = \\sum_{n \\geq 1} \\frac{1}{n^2}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output from ByWeight Sorted Menu\nDESCRIPTION: The rendered HTML output after Hugo processes the menu template, showing menu items sorted by weight (Services has weight 10, About has weight 20, Contact has weight 30).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/ByWeight.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/services/\">Services</a></li>\n  <li><a href=\"/about/\">About</a></li>\n  <li><a href=\"/contact\">Contact</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Extracting Image Width and Height Using Hugo's Images.Config - Go HTML Template\nDESCRIPTION: This snippet obtains an image's configuration (metadata) by invoking the images.Config function with the image path as an argument from within a Hugo Go HTML template. It then outputs the width and height properties available in the resulting image.Config structure. Supported formats include GIF, JPEG, PNG, TIFF, and WebP. This function is legacy; for newer projects, consider using Width and Height methods on image resources instead. The snippet requires Hugo project context with a valid image at the provided path.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Config.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $ic := images.Config \"/static/images/a.jpg\" }}\n\n{{ $ic.Width }} → 600 (int)\n{{ $ic.Height }} → 400 (int)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Site Parameter Using Site.Param Method in Hugo Templates\nDESCRIPTION: Demonstrates how to use the Site.Param method to retrieve the value of the 'display_toc' parameter in a Hugo template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Param.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Param \"display_toc\" }} → true\n```\n\n----------------------------------------\n\nTITLE: Example Structure of Regex Submatches Result - JSON\nDESCRIPTION: This code snippet displays a JSON representation of the data structure returned by findRESubmatch in the earlier example. Each subarray represents a regex match: element 0 is the entire match, element 1 is the captured href, and element 2 is the anchor text. The output format is compatible with Hugo's template iteration and supports further processing in templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FindRESubmatch.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\n    \"<a href=\\\"https://example.org\\\"></a>Example</a>\",\n    \"https://example.org\",\n    \"Example\"\n  ],\n  [\n    \"<a href=\\\"https://gohugo.io\\\">Hugo</a>\",\n    \"https://gohugo.io\",\n    \"Hugo\"\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Page URLs Using Ref Method in Hugo (Go HTML Template)\nDESCRIPTION: Demonstrates how to use the Hugo Ref method in Go HTML templates to obtain the absolute URL for a page given a dictionary of options such as path, language, and output format. Dependencies include a Hugo site and access to the page context \".\". Key parameters are the dictionary keys: \"path\" (content path), \"lang\" (language code, optional), and \"outputFormat\" (format such as 'json', optional). The output is a full absolute URL to the specified content variant; if the page or language does not exist, standard Hugo error handling applies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Ref.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"path\" \"/books/book-1\" }}\n{{ .Ref $opts }} → https://example.org/en/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }}\n{{ .Ref $opts }} → https://example.org/de/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }}\n{{ .Ref $opts }} → https://example.org/de/books/book-1/index.json\n```\n\n----------------------------------------\n\nTITLE: Building Pager Navigation with Hugo Templates - go-html-template\nDESCRIPTION: This snippet demonstrates how to use Hugo's Paginate function in go-html-template to iterate over a filtered page collection (type 'posts'), and build navigation links (First, Previous, Next, Last) for multi-page output using the paginator object and its methods. The snippet relies on Hugo\\'s site.RegularPages, Paginate, and page.Pager methods, and must run in a Hugo site using Go HTML templates. The key parameters are the filtered pages, the paginator object, and each navigation method. Expected input is the .Paginate context and RegularPages; outputs are HTML anchor lists for navigation. The technique is limited to content types present in the site and relies on the built-in paginator methods and Hugo's template execution context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/Last.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <ul>\n    {{ with .First }}\n      <li><a href=\"{{ .URL }}\">First</a></li>\n    {{ end }}\n    {{ with .Prev }}\n      <li><a href=\"{{ .URL }}\">Previous</a></li>\n    {{ end }}\n    {{ with .Next }}\n      <li><a href=\"{{ .URL }}\">Next</a></li>\n    {{ end }}\n    {{ with .Last }}\n      <li><a href=\"{{ .URL }}\">Last</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling and Processing XML RSS Feed in Hugo\nDESCRIPTION: Shows how to unmarshal an XML RSS feed and access its nested data structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Unmarshal.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $url := \"https://example.org/books/index.xml\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    {{ $data = . | transform.Unmarshal }}\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n\n{{ with $data.channel.item }}\n  <ul>\n    {{ range . }}\n      <li>{{ .title }}</li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hugo Binary Commit Hash in Go HTML Templates\nDESCRIPTION: This snippet demonstrates how to use the hugo.CommitHash function to retrieve the Git commit hash of the current Hugo binary. The function returns a string containing the full commit hash which can be used for versioning information or debugging.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/CommitHash.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.CommitHash }} → a4892a07b41b7b3f1f143140ee4ec0a9a5cf3970\n```\n\n----------------------------------------\n\nTITLE: Sorting Image Colors by Luminance (Darkest First) in Hugo Templates\nDESCRIPTION: This Go HTML template snippet uses the `sort` function to reorder the `.Colors` slice based on the `Luminance` property in ascending order (darkest to lightest). Requires the `sort` function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Colors.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ range sort .Colors \"Luminance\" }}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Entry File for Tailwind CSS\nDESCRIPTION: CSS entry file that imports Tailwind CSS and sources the Hugo stats file for utility class scanning.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/TailwindCSS.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@source \"hugo_stats.json\";\n```\n\n----------------------------------------\n\nTITLE: Expected Minified HTML Output for Whitespace Suppression (html)\nDESCRIPTION: Shows the minified HTML output corresponding to a whitespace-suppressed Hugo template, rendering a single lowercase heading tag. All whitespace and newlines between elements are stripped.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<h2>my page title</h2>\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output from Limited Menu\nDESCRIPTION: The HTML output rendered by Hugo after applying the Limit method to the menu. This shows the first two menu entries when sorted by name.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/Limit.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/about/\">About</a></li>\n  <li><a href=\"/contact\">Contact</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Listing Related Content and Filtered Headings in Hugo Templates - Go HTML Template\nDESCRIPTION: This Hugo template snippet queries up to five related pages, and for each related page, lists filtered headings using HeadingsFiltered when fragment-based filtering is enabled in configuration. For each related content block, an outer list is built with each page's link. If headings are present, it generates a nested list of links directly to those headings within the related document ('#fragment-id'). Requires Hugo's site context, RegularPages, Related method, and that the 'applyFilter' flag is enabled in related configuration indices. Outputs a double-nested HTML unordered list with links to both pages and their indexed section headings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/related-content.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $related := .Site.RegularPages.Related . | first 5 }}\\n{{ with $related }}\\n  <h2>See Also</h2>\\n  <ul>\\n    {{ range $i, $p := . }}\\n      <li>\\n        <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\\n        {{ with .HeadingsFiltered }}\\n          <ul>\\n            {{ range . }}\\n              {{ $link := printf \"%s#%s\" $p.RelPermalink .ID | safeURL }}\\n              <li>\\n                <a href=\"{{ $link }}\">{{ .Title }}</a>\\n              </li>\\n            {{ end }}\\n          </ul>\\n        {{ end }}\\n      </li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered Multi-language Home Page Links (HTML)\nDESCRIPTION: Displays the HTML output produced by the previous Hugo template code, listing links to each site's homepage according to the configured languages. Shows two links: one for Deutsch and one for English, with their respective permalinks and titles. Helps validate the expected result for the template logic.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sites.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"https://example.org/de/\">Projekt Dokumentation</a></li>\n  <li><a href=\"https://example.org/en/\">Project Documentation</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Aliases in Hugo Front Matter (TOML)\nDESCRIPTION: Assigns multiple alternative URLs for a single page using the 'aliases' array in TOML front matter. Hugo generates redirect files for each alias, ensuring all previous or legacy paths redirect to the new content location.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_8\n\nLANGUAGE: TOML\nCODE:\n```\naliases = ['previous-file-name','original-file-name']\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output from OpenAPI Iteration\nDESCRIPTION: This snippet shows the resulting HTML generated by the preceding Go HTML template example. It displays the paths (`/pets`, `/pets/{petId}`) and lists the summaries for their respective GET and POST operations within a definition list structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/openapi3/Unmarshal.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>/pets</p>\n<dl>\n  <dt>GET</dt>\n  <dd>List all pets</dd>\n  <dt>POST</dt>\n  <dd>Create a pet</dd>\n</dl>\n<p>/pets/{petId}</p>\n<dl>\n  <dt>GET</dt>\n  <dd>Info for a specific pet</dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Checking for Hugo Extended Edition in Go HTML Template\nDESCRIPTION: This snippet demonstrates the usage of the `hugo.IsExtended` function within a Go HTML template. It calls the function and indicates that it returns either `true` or `false`. This function is used to conditionally render content or apply logic based on whether the extended version of Hugo (required for features like Sass/SCSS processing) is being used.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/IsExtended.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.IsExtended }} → true/false\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Reversed Page Collection in Go HTML Template\nDESCRIPTION: This Go HTML template snippet demonstrates iterating through a collection of Hugo pages, first sorted by date using `.ByDate`, and then reversed using `.Reverse`. Inside the loop, it accesses each page's relative permalink (`.RelPermalink`) and link title (`.LinkTitle`) to display a linked heading.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/Reverse.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByDate.Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by Inequality (Not False) - go-html-template\nDESCRIPTION: Uses the 'ne' (not equal) operator to filter all site pages where 'exclude' is not set to false, which matches both true and undefined values. Useful for broad filtering where undefined fields are included. Outputs the results as an HTML unordered list.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_17\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\\n  {{ range where .Site.RegularPages \"Params.exclude\" \"ne\" false }}\\n    <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\\n  {{ end }}\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Rewrites for SPAs in Hugo Development Server (TOML)\nDESCRIPTION: Example TOML configuration within `config/development/server.toml` demonstrating a redirect rule using `[[redirects]]`. It redirects all requests matching `/myspa/**` to `/myspa/` with an HTTP status code of `200`, effectively acting as a URL rewrite suitable for single-page applications (SPAs). The `force = false` setting means it won't overwrite existing content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/server.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[redirects]]\nfrom = \"/myspa/**\"\nto = \"/myspa/\"\nstatus = 200\nforce = false\n```\n\n----------------------------------------\n\nTITLE: Available Options for the Hugo Build Command (Shell)\nDESCRIPTION: Lists the command-line options (flags) available for the `hugo` command. These flags allow customization of the site build process, including setting the base URL, handling draft/expired/future content, specifying directories (content, layout, destination, themes, cache), managing build environment, enabling features like Git info or minification, controlling logging levels, and watching for file changes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -b, --baseURL string             hostname (and path) to the root, e.g. https://spf13.com/\n  -D, --buildDrafts                include content marked as draft\n  -E, --buildExpired               include expired content\n  -F, --buildFuture                include content with publishdate in the future\n      --cacheDir string            filesystem path to cache directory\n      --cleanDestinationDir        remove files from destination not found in static directories\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -c, --contentDir string          filesystem path to content directory\n  -d, --destination string         filesystem path to write files to\n      --disableKinds strings       disable different kind of pages (home, RSS etc.)\n      --enableGitInfo              add Git revision, date, author, and CODEOWNERS info to the pages\n  -e, --environment string         build environment\n      --forceSyncStatic            copy all files when static is changed.\n      --gc                         enable to run some cleanup tasks (remove unused cache files) after the build\n  -h, --help                       help for hugo\n      --ignoreCache                ignores the cache directory\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n  -l, --layoutDir string           filesystem path to layout directory\n      --logLevel string            log level (debug|info|warn|error)\n      --minify                     minify any supported output format (HTML, XML etc.)\n      --noBuildLock                don't create .hugo_build.lock file\n      --noChmod                    don't sync permission mode of files\n      --noTimes                    don't sync modification time of files\n      --panicOnWarning             panic on first WARNING log\n      --poll string                set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes\n      --printI18nWarnings          print missing translations\n      --printMemoryUsage           print memory usage to screen at intervals\n      --printPathWarnings          print warnings on duplicate target paths etc.\n      --printUnusedTemplates       print warnings on unused templates.\n      --quiet                      build in quiet mode\n      --renderSegments strings     named segments to render (configured in the segments config)\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --templateMetrics            display metrics about template executions\n      --templateMetricsHints       calculate some improvement hints when combined with --templateMetrics\n  -t, --theme strings              themes to use (located in /themes/THEMENAME/)\n      --themesDir string           filesystem path to themes directory\n      --trace file                 write trace to file (not useful in general)\n  -w, --watch                      watch filesystem for changes and recreate as needed\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords in Hugo Front Matter\nDESCRIPTION: Example of defining keywords in a Hugo content file's front matter. The keywords are defined as an array and can be used for related content and taxonomies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Keywords.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'How to make spicy tuna hand rolls'\nkeywords = ['tuna','sriracha','nori','rice']\n```\n\n----------------------------------------\n\nTITLE: Expressing Bernoulli Numbers in Terms of Zeta Function (LaTeX)\nDESCRIPTION: This snippet shows the relationship between even-indexed Bernoulli numbers and the zeta function for even arguments. It demonstrates how to calculate ζ(2) using B₂.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_8\n\nLANGUAGE: latex\nCODE:\n```\nB_{2n} = (-1)^{n+1} \\frac{2 \\zeta(2n)}{(2\\pi)^{2n}}\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\zeta(2n) = (-1)^{n+1} \\frac{B_{2n} (2\\pi)^{2n}}{2}\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Sitemap Configuration in Hugo\nDESCRIPTION: This Hugo shortcode (`code-toggle`) is used within the Hugo documentation to render the default configuration settings for the `sitemap` section. The surrounding text explains the individual configuration keys (`changefreq`, `disable`, `filename`, `priority`) and their default values or behaviors within this sitemap configuration block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/sitemap.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< code-toggle config=sitemap />}}\n```\n\n----------------------------------------\n\nTITLE: Defining Summary in Front Matter in Markdown\nDESCRIPTION: Illustrates defining a content summary directly within the front matter of a Markdown file (`content/example.md`) using the `summary` key. This summary is independent of the page content and takes precedence over automatic summaries but not manual ones.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/summaries.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```text {file=\"content/example.md\"}\n+++\ntitle: 'Example'\ndate: 2024-05-26T09:10:33-07:00\nsummary: 'This summary is independent of the content.'\n+++\n\nThis is the first paragraph.\n\nThis is the second paragraph.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Draft Future Content Page in Hugo Markdown\nDESCRIPTION: This snippet combines 'draft: true' and a future 'date' to define a content file that is both a draft and scheduled for the future. Used in listings for drafts and future content. File location: 'content/draftfuture.md'. Outputs: appears in both draft and future lists based on command flags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/list.txt#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/draftfuture.md --\n---\ndate: 2030-01-01\ndraft: true\n---\n\n```\n\n----------------------------------------\n\nTITLE: Linking to RSS Feed Using OutputFormats in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to create a link to the RSS feed for the current page using the OutputFormats.Get method. It first checks if the RSS output format is available, then creates an anchor tag with the relative permalink to the RSS feed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/OutputFormats.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .OutputFormats.Get \"rss\" }}\n  <a href=\"{{ .RelPermalink }}\">RSS Feed</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Styling Breadcrumb Navigation Elements with CSS\nDESCRIPTION: This CSS code provides basic styling for the breadcrumb navigation generated by the accompanying Hugo template. It removes default list padding, displays list items inline, and adds a '»' separator between breadcrumb items using the `::after` pseudo-element.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/sections.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.breadcrumb ol {\n  padding-left: 0;\n}\n\n.breadcrumb li {\n  display: inline;\n}\n\n.breadcrumb li:not(:last-child)::after {\n  content: \"»\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using IsMenuCurrent to Highlight Active Menu Items in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the IsMenuCurrent function to create navigation menus with active state highlighting. It iterates through the main menu items and applies different styling based on whether the current page matches the menu entry or is a descendant of the menu entry.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsMenuCurrent.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $currentPage := . }}\n{{ range site.Menus.main }}\n  {{ if $currentPage.IsMenuCurrent .Menu . }}\n    <a class=\"active\" aria-current=\"page\" href=\"{{ .URL }}\">{{ .Name }}</a>\n  {{ else if $currentPage.HasMenuCurrent .Menu . }}\n    <a class=\"ancestor\" aria-current=\"true\" href=\"{{ .URL }}\">{{ .Name }}</a>\n  {{ else }}\n    <a href=\"{{ .URL }}\">{{ .Name }}</a>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Markdown Input Example for Regex Extraction - Text\nDESCRIPTION: This snippet provides an example Markdown input, demonstrating the format of data prior to template processing. It serves as the input for regular expression matching and showcases link definitions with anchor text and URLs. The content can be processed by Hugo's templating system or external tools.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FindRESubmatch.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- [Example](https://example.org)\n- [Hugo](https://gohugo.io)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Hugo Homepage Layout (HTML)\nDESCRIPTION: This HTML file, located at `layouts/home.html`, serves as the template for the site's homepage. Hugo uses this layout file to generate the `index.html` in the `public` directory. In this simple case, it just renders the static text 'Home.'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__static_composite.txt#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nHome.\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit 404 Redirect in Hugo Development Server (TOML)\nDESCRIPTION: Example TOML configuration for explicitly defining the 404 error redirect rule in `config/development/server.toml`. This is necessary when other `[[redirects]]` rules are defined, as they override the default 404 behavior. It redirects any unmatched path (`/**`) to `/404.html` with an HTTP status code of `404`. `force = false` prevents overwriting existing files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/server.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[redirects]]\nforce = false\nfrom   = \"/**\"\nto     = \"/404.html\"\nstatus = 404\n```\n\n----------------------------------------\n\nTITLE: Converting Hexadecimal Values to float64 in Hugo Templates (Go HTML Template)\nDESCRIPTION: This snippet demonstrates converting a hexadecimal value (prefixed with '0x') to a float64 by using the 'float' function in Hugo templates. The input value is interpreted as base 16 and output as a decimal floating-point number. Only integer hexadecimal values are valid.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToFloat.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ float 0x11 }} → 17 (float64)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error with Division by Zero in Hugo Templates\nDESCRIPTION: An example showing how division by zero normally throws an error and fails the build in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/try.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $x := 1 }}\n{{ $y := 0 }}\n{{ $result := div $x $y }}\n{{ printf \"%v divided by %v equals %v\" $x $y .Value }}\n```\n\n----------------------------------------\n\nTITLE: Casting Hexadecimal Values to Integer with Hugo int - Go HTML Template\nDESCRIPTION: This snippet illustrates converting hexadecimal literals and string representations (with '0x' prefix) to integer values using the Hugo int function in Go HTML templates. The function recognizes and correctly parses hexadecimal notation. Dependencies are Hugo and Go HTML template support. Inputs can be hex literals or strings. Output is the corresponding base-10 integer. Only accepts properly formatted hex numbers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToInt.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ int 0x11 }} → 17 (int)\n{{ int \"0x11\" }} → 17 (int)\n```\n\n----------------------------------------\n\nTITLE: Adding Numbers with hugo.Store.Add - Go HTML Template\nDESCRIPTION: Illustrates how hugo.Store.Add performs arithmetic by summing a number to a stored numeric value. Input: numeric key and increment. Output: updated numeric value. Requires initial value to be number-compatible.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Store.Set \"total\" 3 }}\n{{ hugo.Store.Add \"total\" 7 }}\n{{ hugo.Store.Get \"total\" }} → 10\n```\n\n----------------------------------------\n\nTITLE: Retrieving Relative Permalink for a Page - Hugo Go HTML Template\nDESCRIPTION: This Go HTML Template snippet demonstrates how to retrieve the relative permalink for a specific page (e.g., \"/about\") within a Hugo site. It uses the .Site.GetPage method to load the page object and then accesses its RelPermalink property to output the relative URL. Dependencies include a correctly configured Hugo site and an existing page at the specified path; if the page does not exist, GetPage will return nil. The output, such as \"/docs/about/\", depends on the site configuration and is used for creating internal links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RelPermalink.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $page := .Site.GetPage \"/about\" }}\\n{{ $page.RelPermalink }} → /docs/about/\n```\n\n----------------------------------------\n\nTITLE: Defining a Parent Hugo Shortcode Template (greeting.html)\nDESCRIPTION: This Go HTML template defines the `greeting` shortcode. It wraps its inner content (`.Inner`) in a `div` element. The `.Inner` content, which includes the call to the `now` shortcode, is processed using `.Page.RenderString` after trimming whitespace.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Parent.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template {file=\"layouts/shortcodes/greeting.html\"}\n<div class=\"greeting\">\n  {{ .Inner | strings.TrimSpace | .Page.RenderString }}\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Rendered by Built-in RSS in Hugo (TOML/YAML/Hugo Config)\nDESCRIPTION: This code block adds site-level metadata for the RSS feed, including 'copyright' and author details under '[params.author]'. Place in the site configuration to provide values rendered in the default RSS template. These values are output in the RSS feed if present, enhancing feed metadata and attribution.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/rss.md#2025-04-23_snippet_3\n\nLANGUAGE: hugo\nCODE:\n```\ncopyright = '© 2023 ABC Widgets, Inc.'\n[params.author]\nname = 'John Doe'\nemail = 'jdoe@example.org'\n```\n\n----------------------------------------\n\nTITLE: Getting Sorted Map Values with hugo.Store.GetSortedMapValues - Go HTML Template\nDESCRIPTION: Demonstrates retrieval of a map's values in sorted order using hugo.Store.GetSortedMapValues. This is useful when order of values is needed. Input: a key whose value is a map. Output: slice of values sorted by map keys.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Store.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ hugo.Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ hugo.Store.GetSortedMapValues \"greetings\" }} → [Hello Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Initializing Hugo Data Functions Documentation\nDESCRIPTION: Front matter configuration for Hugo documentation page about data functions. Defines the page title, link title, and description for the data functions documentation section.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Data functions\nlinkTitle: data\ndescription: Use these functions to read local or remote data files.\ncategories: []\nkeywords: []\n---\n```\n\n----------------------------------------\n\nTITLE: Formatting Last Modification Date in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the Site.Lastmod method to retrieve the last modification date of the site content and format it using Hugo's time.Format function. It outputs the date in a long format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Lastmod.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Lastmod | time.Format \":date_long\" }} → January 31, 2024\n```\n\n----------------------------------------\n\nTITLE: Checking Hugo Environment in Templates\nDESCRIPTION: Function used in Hugo templates to determine the current environment setting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/environment.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhugo.Environment\n```\n\n----------------------------------------\n\nTITLE: Counting Non-Whitespace Runes in Hugo Template (Go HTML Template)\nDESCRIPTION: This snippet demonstrates the usage of the `strings.CountRunes` function within a Hugo Go HTML template. It takes the string \"Hello, 世界\" as input and pipes it to the function, which returns the count of runes excluding the space character (8). It contrasts with `strings.RuneCount` which would include whitespace.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/CountRunes.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"Hello, 世界\" | strings.CountRunes }} → 8\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URLs with Leading Slash and Subdirectory BaseURL (Hugo)\nDESCRIPTION: Demonstrates how urls.AbsURL function generates absolute URLs when the input begins with a slash and the baseURL includes a subdirectory. The subdirectory is ignored in this case.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/AbsURL.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ absURL \"/\" }}          → https://example.org/\n{{ absURL \"/articles\" }}  → https://example.org/articles\n{{ absURL \"/style.css\" }} → https://example.org/style.css\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Parameters in Hugo Template - Go HTML Template\nDESCRIPTION: This Hugo template snippet outputs the value of the 'foo' parameter from .Site.Params, which is provided via merged config from the site and theme-level TOML files. It should be placed in layouts/index.html. Dependencies are correct parameter configuration in hugo.toml and themes/mytheme/hugo.toml, and proper placement in Hugo's layouts directory. Input is the merged config, and output is the literal value rendered in the template. Limitation: Only as dynamic as parameters allow; requires site build context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__watch_moduleconfig.txt#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\nfoo: {{ .Site.Params.foo }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Title in Single Content Template – Go HTML Template\nDESCRIPTION: This Go template for Hugo renders the current page's title, utilizing the '.Title' variable in Hugo's content context. Intended for 'layouts/_default/single.html'. Requires: Hugo site context, content files with valid front-matter. Outputs: HTML with the content title. Limitations: expects .Title to be defined for each content page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_env.txt#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n-- layouts/_default/single.html --\nTitle: {{ .Title }}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Unmarshalling Remote OpenAPI 3 JSON in Go HTML Template\nDESCRIPTION: This snippet demonstrates fetching a remote OpenAPI 3 JSON file using `resources.GetRemote`. It includes error handling using `try` and `with .Err`. If successful, the fetched resource's content (`.Value`) is piped to the `openapi3.Unmarshal` function to parse the JSON into an OpenAPI document structure, which is stored in the `$api` variable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/openapi3/Unmarshal.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/petstore.json\" }}\n{{ $api := \"\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    {{ $api = . | openapi3.Unmarshal }}\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Code in Hugo Templates\nDESCRIPTION: Retrieves the language code from the site configuration using the LanguageCode method. Falls back to Lang if not defined.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Language.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Language.LanguageCode }} → de-DE\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Parameter in Hugo Index Template – Go HTML Template\nDESCRIPTION: This Go template snippet for Hugo's layouts renders a parameter named 'myparam' taken from the Hugo site parameters and appends a section sign. It relies on the context provided by Hugo, specifically the site's parameter map, and is meant for use in 'layouts/index.html'. Inputs: Hugo build context. Outputs: HTML with injected parameter value. Limitation: assumes 'myparam' is set elsewhere.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_env.txt#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n-- layouts/index.html --\nmyparam: {{ site.Params.myparam }}§\n```\n\n----------------------------------------\n\nTITLE: Using the IsPage Method in Hugo Templates (Go HTML Template)\nDESCRIPTION: This Go HTML Template snippet demonstrates how to use the `IsPage` method within a Hugo template. It accesses the method on the current page context (`.`) to check if the page's `kind` is `page`. It returns a boolean value (`true` or `false`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsPage.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .IsPage }}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Directory Structure for Global Resource - Text\nDESCRIPTION: This snippet provides a directory tree layout showing how global resources are organized in the Hugo assets directory. It sets context for subsequent template operations on such resources and is illustrative only. No dependencies, parameters, or outputs; purely for visual reference.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Name.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nassets/\\n└── images/\\n    └── Sunrise in Bryce Canyon.jpg\n```\n\n----------------------------------------\n\nTITLE: Generating Relative URLs with urls.RelRef in Hugo Templates\nDESCRIPTION: These examples demonstrate various uses of the urls.RelRef function in Hugo templates. They show how to generate relative URLs for different pages, languages, and output formats using both direct path input and options maps.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelRef.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ relref . \"/books/book-1\" }} → /en/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" }}\n{{ relref . $opts }} → /en/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }}\n{{ relref . $opts }} → /de/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }}\n{{ relref . $opts }} → /de/books/book-1/index.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Parameters with Variable Keys\nDESCRIPTION: Demonstrates how to use collections.Index to access site parameters when the key is a variable, compared to direct access.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/IndexFunction.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Params.foo }}\n\n{{ $k := \"foo\" }}\n{{ index .Site.Params $k }}\n```\n\n----------------------------------------\n\nTITLE: Boolean comparison in collections.Where\nDESCRIPTION: Examples of filtering pages based on boolean parameter values using equality and inequality operators.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $books := where site.RegularPages \"Section\" \"eq\" \"books\" }}\n\n{{ $pages := where $books \"Params.fiction\" \"eq\" true }}\n{{ $pages := where $books \"Params.fiction\" \"eq\" false }}\n{{ $pages := where $books \"Params.fiction\" \"ne\" true }}\n{{ $pages := where $books \"Params.fiction\" \"ne\" false }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Unsafe HTML Rendering in Hugo Configuration (TOML)\nDESCRIPTION: Provides the necessary Hugo configuration setting (`hugo.toml` or equivalent) to allow raw HTML within Markdown files processed by the Goldmark renderer. Setting `unsafe = true` is required for the `{{% %}}` shortcode notation to work correctly when the shortcode outputs HTML elements, as Hugo needs permission to embed this HTML during the Markdown rendering phase.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Inner.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.renderer]\nunsafe = true\n```\n\n----------------------------------------\n\nTITLE: Triggering Data Rendering with .WordCount and hugo.Store - Go HTML Template\nDESCRIPTION: Uses .WordCount as a trigger to force rendering so that subsequent hugo.Store.Get returns the correct value. Inputs: .WordCount property. Output: ensures dependent data is available in the template by rendering content first.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $noop := .WordCount }}\n{{ hugo.Store.Get \"mykey\" }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CommitDate with GitInfo\nDESCRIPTION: Using the CommitDate method on GitInfo to get the formatted date of the commit.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GitInfo }}\n  {{ .CommitDate.Format \"2006-01-02\" }} → 2023-10-09\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Google Analytics ID in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates retrieving the configured Google Analytics ID for Google Analytics 4 from the Hugo configuration in a Go HTML template. The ID should be set under Services.GoogleAnalytics in the site's configuration. The output is the Analytics ID as a string, useful for integrating Google Analytics into page templates. Requires no special dependencies beyond Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/services.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Config.Services.GoogleAnalytics.ID }}\n```\n\n----------------------------------------\n\nTITLE: Using safeHTML with transform.HTMLUnescape in Go HTML Template\nDESCRIPTION: Shows how to bypass Go's html/template package's automatic escaping by combining transform.HTMLUnescape with the safeHTML function. This is useful when you want to render unescaped HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/HTMLUnescape.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ htmlUnescape \"Lilo &amp; Stitch\" | safeHTML }}\n```\n\n----------------------------------------\n\nTITLE: Using Command-Line Flags with Hugo Gen Chromastyles - Shell Example\nDESCRIPTION: This snippet lists flags that modify the behavior of the 'hugo gen chromastyles' command, supporting customization of highlight styles, line number styles, and general output options. These flags allow precise overrides of colors and styles in the generated CSS. Input is via command-line flags, and usage assumes knowledge of available style names and requires Hugo installed on the system.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen_chromastyles.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help                            help for chromastyles\n      --highlightStyle string           foreground and background colors for highlighted lines, e.g. --highlightStyle \"#fff000 bg:#000fff\"\n      --lineNumbersInlineStyle string   foreground and background colors for inline line numbers, e.g. --lineNumbersInlineStyle \"#fff000 bg:#000fff\"\n      --lineNumbersTableStyle string    foreground and background colors for table line numbers, e.g. --lineNumbersTableStyle \"#fff000 bg:#000fff\"\n      --style string                    highlighter style (see https://xyproto.github.io/splash/docs/) (default \"friendly\")\n```\n\n----------------------------------------\n\nTITLE: Using Persistent Store for Data in Content Adapter (Go HTML Template)\nDESCRIPTION: Illustrates usage of the Store object to persist values across executions in Hugo content adapters, particularly when EnableAllLanguages is active. Demonstrates setting and retrieving a key-value pair for transferring data between language builds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.Set \"key\" \"value\" }}\\n{{ .Store.Get \"key\" }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Page Date in Hugo Templates\nDESCRIPTION: Demonstrates how to access and format a page's date value using Hugo's time.Format function to display the date in medium format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Date.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Date | time.Format \":date_medium\" }} → Oct 19, 2023\n```\n\n----------------------------------------\n\nTITLE: Showing Page Resource Bundle Structure - Text\nDESCRIPTION: This directory tree layout shows how page resources are organized within the content directory, including resource placement in the page bundle. It supports understanding of resource referencing in the related Hugo template code snippets. No dependencies or output; illustrative only.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Name.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── example/\\n│   ├── images/\\n│   │   └── a.jpg\\n│   └── index.md\\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Including RSS Feed Reference Link in Hugo HTML Templates (Go HTML Template)\nDESCRIPTION: This Go HTML template snippet generates a <link> element referencing the site's RSS feed, suitable for use in the <head> section of a Hugo template. It checks if the 'rss' output format exists and inserts an alternate link with the proper type and feed URL. Requires access to '.OutputFormats', '.Rel', '.MediaType.Type', '.Permalink', and 'site.Title'. Output is marked safe HTML for proper rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/rss.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .OutputFormats.Get \"rss\" }}\n  {{ printf `<link rel=%q type=%q href=%q title=%q>` .Rel .MediaType.Type .Permalink site.Title | safeHTML }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Content Example for Automatic Summary Generation in Markdown\nDESCRIPTION: Provides an example Markdown file (`content/example.md`) without a manual (`<!--more-->`) or front matter (`summary`) summary definition. In this case, Hugo will automatically generate a summary based on the `summaryLength` setting in the site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/summaries.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```text {file=\"content/example.md\"}\n+++\ntitle: 'Example'\ndate: 2024-05-26T09:10:33-07:00\n+++\n\nThis is the first paragraph.\n\nThis is the second paragraph.\n\nThis is the third paragraph.\n```\n```\n\n----------------------------------------\n\nTITLE: Computing Tangent with math.Tan in Hugo Templates - Go HTML Template\nDESCRIPTION: This code snippet demonstrates calling the math.Tan function within a Hugo Go HTML Template to compute the tangent of 1 radian. No external dependencies are required as math.Tan is part of Hugo's available template functions starting in version 0.130.0. The input is a single radian value, and the output is the tangent of that value rendered in the template. The snippet is useful for performing trigonometric operations directly within content templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Tan.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Tan 1 }} → 1.557407724654902\n```\n\n----------------------------------------\n\nTITLE: Creating Pixelation Image Filter Using Hugo Images Module (Go HTML Template)\nDESCRIPTION: This code snippet demonstrates how to initialize a pixelation filter within a Hugo template using the images.Pixelate function. The filter takes a single parameter (SIZE), which determines the size of the pixel blocks in the pixelation effect. Ensure that Hugo's images module is available in your project, and that you use this filter with image resources via the 'images' namespace. The resulting filter can be applied to image resources to produce a pixelated output, with higher SIZE values resulting in larger pixel blocks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Pixelate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Pixelate 4 }}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time with time.Now in Hugo\nDESCRIPTION: This snippet demonstrates the basic usage of time.Now function in Hugo templates. It returns a time.Time value representing the current local time.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/Now.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ time.Now }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Content Page (Go HTML Template)\nDESCRIPTION: Defines the 'main' block for a single content page, rendering its title and content fields. It requires the page to define 'Title' and 'Content' fields and is intended for use with Hugo's single content pages. Output is HTML showing the page title and full content. Must be used with a base template that calls a 'main' block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\\n  <h1>{{ .Title }}</h1>\\n  {{ .Content }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Convert Commands - Shell\nDESCRIPTION: This shell script tests Hugo's CLI 'convert' commands, verifying front matter conversions between TOML, JSON, and YAML. It runs different 'hugo convert' variants, checks help output, performs conversions to each format with directory output, and validates the resulting files. The test asserts success messages in stdout and uses 'grep' to confirm JSON-formatted front matter, relying on a source directory structure with example content files. Outputs must be checked for correctness and completeness.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/convert.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test the convert commands.\n\nhugo convert -h\nstdout 'Convert front matter to another format'\nhugo convert toJSON -h\nstdout 'to use JSON for the front matter'\nhugo convert toTOML -h\nstdout 'to use TOML for the front matter'\nhugo convert toYAML -h\nstdout 'to use YAML for the front matter'\n\nhugo convert toJSON -o myjsoncontent\nstdout 'processing 3 content files'\ngrep '^{' myjsoncontent/content/mytoml.md\ngrep '^{' myjsoncontent/content/myjson.md\ngrep '^{' myjsoncontent/content/myyaml.md\nhugo convert toYAML -o myyamlcontent\nstdout 'processing 3 content files'\nhugo convert toTOML -o mytomlcontent\nstdout 'processing 3 content files'\n\n```\n\n----------------------------------------\n\nTITLE: Passing Data into Deferred Templates in Hugo (Go HTML Template)\nDESCRIPTION: This go-html-template snippet shows how to use the data option of templates.Defer to pass contextual data (e.g., page information) into the deferred template. It highlights that variable scopes inside and outside the defer-initiated with block are isolated, requiring data to be passed explicitly. Inputs include a dictionary containing 'page' (the current context), allowing the deferred template to access relevant site and page properties. Demonstrates access to localization, relative permalinks, and site language on both sides of the deferred block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/templates/Defer.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\nLanguage Outside: {{ site.Language.Lang }}\nPage Outside: {{ .RelPermalink }}\nI18n Outside: {{ i18n \"hello\" }}\n{{ $data := (dict \"page\" . )}}\n{{ with (templates.Defer (dict \"data\" $data )) }}\n     Language Inside: {{ site.Language.Lang }}\n     Page Inside: {{ .page.RelPermalink }}\n     I18n Inside: {{ i18n \"hello\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Expected Standard Error Output Pattern (Text)\nDESCRIPTION: This line specifies an expected pattern to be found in the standard error (stderr) output when the `hugo mod get` command is executed in this test context. It asserts that information related to the 'withhugotoml' module at version 'v1.1.0' (or similar, due to the wildcard) is printed to stderr.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_get.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nstderr 'withhugotoml.*v1.1.0'\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Content Directory Structure Showing Resource Types\nDESCRIPTION: This text block shows an example Hugo content directory structure. It illustrates that Markdown files (`.md`) within a page bundle are treated as resources of type 'page', while image files (`.jpg`) are type 'image'. This structure provides context for examples involving filtering resources by type.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/ResourceType.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── lessons/\n│   ├── lesson-1/\n│   │   ├── _objectives.md  <-- resource type = page\n│   │   ├── _topics.md      <-- resource type = page\n│   │   ├── _example.jpg    <-- resource type = image\n│   │   └── index.md\n│   └── _index.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Invalid Key Naming for Accessing Parameters in Go HTML Templates\nDESCRIPTION: This Go HTML template snippet shows an invalid way to access parameters using kebab-case key names. Kebab-case is not a valid Go identifier and cannot be used directly when chaining identifiers with dot notation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/params.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.params.kebab-case.foo }}\n```\n\n----------------------------------------\n\nTITLE: Listing Sites in Hugo Templates (Go HTML Template)\nDESCRIPTION: Shows how to iterate over the .Sites collection in a Hugo template to render HTML links for each site's home page. Requires a multi-language Hugo configuration and outputs an unordered HTML list, with each item linking to the homepage of a language variant. .Sites must be accessible in the context; each site object exposes .Home.Permalink and .Title.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sites.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Sites }}\n    <li><a href=\"{{ .Home.Permalink }}\">{{ .Title }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code Images with Hugo images.QR - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to generate a QR code for a specified URL using Hugo's images.QR function with default options. It defines a variable holding the text for encoding, invokes images.QR, and within the returned resource renders an <img> tag using the resource's properties. images.QR depends on Hugo's image processing and templating capabilities, with text input determining the QR code's contents and .RelPermalink, .Width, and .Height dictating the resulting image's reference and dimensions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/QR.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $text := \"https://gohugo.io\" }}\\n{{ with images.QR $text }}\\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters with transform.HTMLEscape in Hugo Templates\nDESCRIPTION: Demonstrates the usage of the htmlEscape function (alias for transform.HTMLEscape) to escape special characters in strings. The function replaces characters like '&', '<', '>', single quotes, and double quotes with their corresponding HTML entities.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/HTMLEscape.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ htmlEscape \"Lilo & Stitch\" }} → Lilo &amp; Stitch\n{{ htmlEscape \"7 > 6\" }} → 7 &gt; 6\n```\n\n----------------------------------------\n\nTITLE: HTML Output using InnerDeindent with Indented Content - HTML\nDESCRIPTION: Presents the HTML output after processing a Hugo shortcode with InnerDeindent, demonstrating how removing the indentation prevents the Markdown from being treated as a code block. The resulting HTML contains direct <img> elements within the 'gallery' divs. Inputs are indented Markdown image syntax; output is semantically correct HTML as desired for a gallery. Showcases the preferred result when embedding rich elements within indented blocks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/InnerDeindent.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\n  <li>\\n    <p>Gallery one</p>\\n    <div class=\\\"gallery\\\">\\n      <img src=\\\"images/a.jpg\\\" alt=\\\"kitten a\\\">\\n      <img src=\\\"images/b.jpg\\\" alt=\\\"kitten b\\\">\\n    </div>\\n  </li>\\n  <li>\\n    <p>Gallery two</p>\\n    <div class=\\\"gallery\\\">\\n      <img src=\\\"images/c.jpg\\\" alt=\\\"kitten c\\\">\\n      <img src=\\\"images/d.jpg\\\" alt=\\\"kitten d\\\">\\n    </div>\\n  </li>\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Redefining Output Format Media Type in Hugo (TOML)\nDESCRIPTION: This snippet shows how to explicitly set the media type for the built-in 'html' output format in Hugo after changing its associated suffixes. This ensures the output format continues to use the updated media type configuration. The section header specifies the output format key; inside, 'mediaType' must match a defined or customized media type. Inputs: Updated media type. Output: Output format uses the specified media type for file generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/media-types.md#2025-04-23_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[outputFormats.html]\nmediaType = 'text/html'\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Language Keys with Weights in Hugo (Hugo Syntax)\nDESCRIPTION: Shows how to set the default content language and define several language entries with explicit weights, which control sorting and primary language selection. Each language section is created under '[languages.X]', where 'X' is the language key and includes at least the 'weight' field for ordering. These entries are crucial for multilingual sites as they instruct Hugo on language priority. Requires no external libraries or runtime dependencies aside from the Hugo builder.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/languages.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\ndefaultContentLanguage = 'de'\\n[languages.de]\\n  weight = 1\\n[languages.en-US]\\n  weight = 2\\n[languages.pt-BR]\\n  weight = 3\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output After ByName Sorting\nDESCRIPTION: The resulting HTML output after applying the ByName sorting method to the menu entries. Shows the alphabetically sorted menu items (About, Contact, Services) as list items with their respective links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/ByName.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/about/\">About</a></li>\n  <li><a href=\"/contact\">Contact</a></li>\n  <li><a href=\"/services/\">Services</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Markdown with Custom GoAT Diagram Attributes\nDESCRIPTION: Example Markdown showing how to use the custom GoAT render hook with additional attributes like class and caption to customize the diagram's appearance.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/diagrams/Goat.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n```goat {class=\"foo\" caption=\"Diagram 1: Example\"}\n.---.     .-.       .-.       .-.     .---.\n| A +--->| 1 |<--->| 2 |<--->| 3 |<---+ B |\n'---'     '-'       '+'       '+'     '---'\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Permalink Behavior in Go HTML Template\nDESCRIPTION: This Go HTML Template snippet illustrates the default behavior of the `.RelPermalink` page method. Even when called within a specific output format's template (e.g., `single.json.json`), it returns the permalink of the primary output format (usually HTML). Accessing the format-specific permalink requires using `.OutputFormats.Get`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .RelPermalink }} → /that-page/\n{{ with .OutputFormats.Get \"json\" }}\n  {{ .RelPermalink }} → /that-page/index.json\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Ancestors Function\nDESCRIPTION: Shows the rendered HTML output of the Ancestors function when used on a page within the November 2023 auctions section. The links are ordered from closest ancestor to furthest.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Ancestors.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/auctions/2023-11/\">Auctions in November 2023</a>\n<a href=\"/auctions/\">Auctions</a>\n<a href=\"/\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Triggering Content Rendering to Access Scratch/Store in Hugo\nDESCRIPTION: This Go HTML Template snippet shows how to ensure page content is rendered before accessing values stored using the `.Scratch` or `.Store` methods. Assigning `.Content` to a no-operation variable (`$noop`) forces content rendering, making the Scratch/Store values available in the parent template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ $noop := .Content }}\n{{ .Store.Get \"mykey\" }}\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Taxonomy Hierarchy Template\nDESCRIPTION: Comprehensive template for displaying all taxonomies, their terms, and associated content in a nested structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Taxonomies.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.Taxonomies }}\n  {{ $numberOfTerms := 0 }}\n  {{ range $taxonomy, $terms := . }}\n    {{ $numberOfTerms = len . | add $numberOfTerms }}\n  {{ end }}\n\n  {{ if gt $numberOfTerms 0 }}\n    <ul>\n      {{ range $taxonomy, $terms := . }}\n        {{ with $terms }}\n          <li>\n            <a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a>\n            <ul>\n              {{ range $term, $weightedPages := . }}\n                <li>\n                  <a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a>\n                  <ul>\n                    {{ range $weightedPages }}\n                      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n                    {{ end }}\n                  </ul>\n                </li>\n              {{ end }}\n            </ul>\n          </li>\n        {{ end }}\n      {{ end }}\n    </ul>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings with substr in Hugo Go HTML Templates\nDESCRIPTION: This snippet demonstrates the usage of the 'substr' function in Hugo Go HTML templates to extract substrings from a given string. Dependencies include Hugo's built-in string template functions and Go template syntax. Key parameters include the source STRING, an optional START position (zero-based or negative for counting from the end), and an optional LENGTH parameter (omitting trailing characters if negative). Inputs are template expressions; outputs are the resulting substrings. Expected behavior is illustrated for positive and negative parameter combinations, with outputs provided as inline comments. This showcases both basic and edge case substring manipulations within Hugos's templating context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Substr.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ substr \\\"abcdef\\\" 0 }} → abcdef\n{{ substr \\\"abcdef\\\" 1 }} → bcdef\n\n{{ substr \\\"abcdef\\\" 0 1 }} → a\n{{ substr \\\"abcdef\\\" 1 1 }} → b\n\n{{ substr \\\"abcdef\\\" 0 -1 }} → abcde\n{{ substr \\\"abcdef\\\" 1 -1 }} → bcde\n\n{{ substr \\\"abcdef\\\" -1 }} → f\n{{ substr \\\"abcdef\\\" -2 }} → ef\n\n{{ substr \\\"abcdef\\\" -1 1 }} → f\n{{ substr \\\"abcdef\\\" -2 1 }} → e\n\n{{ substr \\\"abcdef\\\" -3 -1 }} → de\n{{ substr \\\"abcdef\\\" -3 -2 }} → d\n```\n\n----------------------------------------\n\nTITLE: Sorting Pages by Link Title (Ascending) in Hugo (Go HTML Template)\nDESCRIPTION: This snippet demonstrates how to iterate through a collection of Hugo pages (`.Pages`) sorted in ascending order by their `LinkTitle` using the `ByLinkTitle` method. If `LinkTitle` is not defined for a page, its `Title` is used for sorting. It generates an `<h2>` tag containing a link (`<a>`) for each page, using the page's relative permalink (`.RelPermalink`) for the URL and displaying its `LinkTitle`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByLinkTitle.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByLinkTitle }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Passthrough Render Hook for Mathematical Expressions\nDESCRIPTION: Go HTML template that implements a passthrough render hook to convert LaTeX mathematical markup to HTML using the transform.ToMath function, with error handling and page state tracking.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/passthrough.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- $opts := dict \"output\" \"htmlAndMathml\" \"displayMode\" (eq .Type \"block\") }}\n{{- with try (transform.ToMath .Inner $opts) }}\n  {{- with .Err }}\n    {{- errorf \"Unable to render mathematical markup to HTML using the transform.ToMath function. The KaTeX display engine threw the following error: %s: see %s.\" . $.Position }}\n  {{- else }}\n    {{- .Value }}\n    {{- $.Page.Store.Set \"hasMath\" true }}\n  {{- end }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Formats per Page Kind in Hugo with TOML\nDESCRIPTION: This TOML configuration snippet for Hugo sets which output formats to generate for the 'home' page kind. Specifying 'html', 'rss', and 'json' ensures these formats are rendered when building the site's home. Requires this block to be placed in hugo.toml or config.toml. The array order is significant; the first format will be the primary output and influences permalinks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/outputs.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[outputs]\nhome = ['html','rss','json']\n```\n\n----------------------------------------\n\nTITLE: Enabling Page Resource Duplication in Hugo Goldmark Markup Settings (toml)\nDESCRIPTION: Presents a TOML configuration snippet to re-enable the duplication of shared page resources for multilingual Hugo sites, using Goldmark settings. Input: TOML [markup.goldmark] config; output: duplicated resources for each language if set to true.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark]\\nduplicateResourceFiles = true\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Slice with range in Hugo Templates\nDESCRIPTION: Basic example of using the range function to iterate over a slice of strings, binding each element to the context (dot).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"foo\" \"bar\" \"baz\" }}\n{{ range $s }}\n  {{ . }} → foo bar baz\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring MainSections in Hugo\nDESCRIPTION: Demonstrates how to configure the mainSections parameter in the Hugo configuration file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/MainSections.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nmainSections = ['books','films']\n```\n\n----------------------------------------\n\nTITLE: Using Pluralization in Polish Context (Go Template)\nDESCRIPTION: Demonstrates calling the `T` function with a count (integer context) in a Polish site context to trigger pluralization rules from `i18n/pl.toml`. Shows outputs based on Polish CLDR rules ('one', 'few', 'many', 'other') for counts 0, 1, 2, and 5.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_11\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ T \"day\" 0 }} → miesięcy\n{{ T \"day\" 1 }} → miesiąc\n{{ T \"day\" 2 }} → miesiące\n{{ T \"day\" 5 }} → miesięcy\n\n{{ T \"day_with_count\" 0 }} → 0 miesięcy\n{{ T \"day_with_count\" 1 }} → 1 miesiąc\n{{ T \"day_with_count\" 2 }} → 2 miesiące\n{{ T \"day_with_count\" 5 }} → 5 miesięcy\n```\n\n----------------------------------------\n\nTITLE: Deleting a Key from hugo.Store - Go HTML Template\nDESCRIPTION: Uses hugo.Store.Delete to remove a key and its value from the global scratch pad. Inputs: the key to delete. Output: the key-value pair is removed and cannot be retrieved anymore.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Store.Set \"greeting\" \"Hello\" }}\n{{ hugo.Store.Delete \"greeting\" }}\n```\n\n----------------------------------------\n\nTITLE: Overriding Options with transform.HighlightCodeBlock in Hugo Template\nDESCRIPTION: This example demonstrates how to customize the behavior of `transform.HighlightCodeBlock` by providing options. It uses the `merge` and `dict` functions to combine the default options available in the context (`.Options`) with a custom option (`linenos: true`). This merged options map (`$opts`) is then passed as the second argument to `transform.HighlightCodeBlock`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/HighlightCodeBlock.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := merge .Options (dict \"linenos\" true) }}\n{{ $result := transform.HighlightCodeBlock . $opts }}\n{{ $result.Wrapped }}\n```\n\n----------------------------------------\n\nTITLE: Using Shortcodes in Hugo Content - Markdown\nDESCRIPTION: This snippet shows how to call the img shortcode twice in a Hugo Markdown file. Each shortcode instance receives a different source image, and the order in which these are called influences the Ordinal assigned within the template. The input uses Hugo shortcode syntax and represents typical Markdown content for a Hugo project. No dependencies are needed beyond a standard Hugo site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Ordinal.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{</* img src=\"images/a.jpg\" */>}}\n\n{{</* img src=\"images/b.jpg\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Creating and Appending Nested Slices in Hugo Templates (Go HTML Template)\nDESCRIPTION: Illustrates building a slice of slices starting from an empty slice and appending nested slices incrementally. Each append operation adds a new grouped sub-slice, maintaining the nested structure. No dependencies required; this enables more advanced collection building in Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Append.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice }}\\n{{ $s }} → []\\n\\n{{ $s = $s | append (slice (slice \\\"a\\\" \\\"b\\\")) }}\\n{{ $s }} → [[a b]]\\n\\n{{ $s = $s | append (slice \\\"c\\\" \\\"d\\\") }}\\n{{ $s }} → [[a b] [c d]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Year Shortcode Template (Go HTML Template)\nDESCRIPTION: Defines a basic Hugo shortcode template (`layouts/shortcodes/year.html`) that outputs the current year. It uses the built-in `now` function and its `Format` method with the Go layout string \"2006\" to get the four-digit year. The `{{- ... -}}` delimiters are used to trim surrounding whitespace, making it suitable for inline use.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- now.Format \"2006\" -}}\n```\n\n----------------------------------------\n\nTITLE: Example Output of readDir Function\nDESCRIPTION: Shows the expected output generated by the example Go HTML template code when executed with `readDir \"content\"` against the sample directory structure. It lists the files (`about.md`, `contact.md`) and the subdirectory (`news`) found directly within the `content/` directory, indicating whether each is a directory (`true`/`false`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/ReadDir.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nabout.md → false\ncontact.md → false\nnews → true\n```\n\n----------------------------------------\n\nTITLE: Embedding Disqus Template - Hugo Go Template\nDESCRIPTION: Shows how to include Hugo's embedded Disqus comment system template using Go template syntax. This requires adding your Disqus 'shortname' to Hugo's configuration as a prerequisite. Input is the rendering context (typically \".\"), output is the Disqus embed code injected into the page where the template is included. Limitations: You must set up a Disqus account and shortname prior to using this.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/disqus.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Page Resource Alternative\nDESCRIPTION: Shows the directory structure for accessing JSON files as page resources in Hugo projects.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── content/\n    └── posts/\n        └── reading-list/\n            ├── books.json\n            └── index.md\n```\n\n----------------------------------------\n\nTITLE: Accessing X Inline CSS Disable Setting in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet retrieves the current configuration for disabling inline CSS in the X embedded shortcode. The boolean value is set under Services.X.DisableInlineCSS and defaults to false. Used in Go HTML templates to conditionally include or omit inline styles for the 'x' shortcode for privacy considerations. No dependencies are required other than Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/services.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Config.Services.X.DisableInlineCSS }}\n```\n\n----------------------------------------\n\nTITLE: Dynamic HTML Attributes via Language Object - Hugo Template - Go HTML Template\nDESCRIPTION: Shows a practical application of previous snippets by setting the HTML element's 'lang' and 'dir' attributes dynamically in a Hugo base template using Language object properties. The 'or' function ensures a default 'ltr' direction if unset. This snippet requires a Site context and is used typically at the page root. Inputs: Site.Language properties. Outputs: HTML element with dynamic language attributes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Language.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n<html\\n  lang=\"{{ .Site.Language.LanguageCode }}\" \\n  dir=\"{{ or .Site.Language.LanguageDirection `ltr` }}\\n>\n```\n\n----------------------------------------\n\nTITLE: Querying Substring Presence with strings.Contains in Go HTML Template\nDESCRIPTION: This code snippet shows how to use the built-in strings.Contains function in a Go HTML Template to check if the substring \\\"go\\\" exists within the string \\\"Hugo\\\". Requires Hugo framework and that templates are rendered in the context of a Hugo site. The function takes two string parameters: the string to search in, and the substring to look for. Returns true if the substring is found, false otherwise. The result can be used for conditional logic within templates. The check is case sensitive.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Contains.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.Contains \"Hugo\" \"go\" }} → true\n```\n\n----------------------------------------\n\nTITLE: Rendering Breadcrumb Navigation with Page Context - Hugo Go HTML Template\nDESCRIPTION: This example shows passing the current page context to a 'breadcrumbs.html' partial using the 'partial' function. The partial renders breadcrumb navigation relevant to the page. Requires the 'breadcrumbs.html' partial and expects the dot ('.') to represent a Hugo page object. Returns markup rendered by the partial template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/Include.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \\\"breadcrumbs.html\\\" . }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic CSS Template using Go HTML Template\nDESCRIPTION: This snippet shows a CSS file (`assets/css/template.css`) written as a Go template. It uses Hugo's templating syntax `{{ site.Params... }}` to dynamically insert background and text colors defined in the site's configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/ExecuteAsTemplate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\nbody {\n  background-color: {{ site.Params.style.bg_color }};\n  color: {{ site.Params.style.text_color }};\n}\n```\n\n----------------------------------------\n\nTITLE: Generating xxHash Hash Values in Hugo Templates\nDESCRIPTION: Demonstrates how to use the hash.XxHash function to generate a 64-bit xxHash non-cryptographic hash of a string. The function takes a string input and returns the hash value as a hexadecimal string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hash/XxHash.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hash.XxHash \"Hello world\" }} → c500b0c912b376d8\n```\n\n----------------------------------------\n\nTITLE: Creating Links to Top-Level Sections in Hugo Templates\nDESCRIPTION: Demonstrates how to use the FirstSection method to generate a link to the top-level section of the current page, displaying the section's link title.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/FirstSection.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<a href=\"{{ .FirstSection.RelPermalink }}\">{{ .FirstSection.LinkTitle }}</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Content Front Matter using TOML in Hugo\nDESCRIPTION: This TOML snippet demonstrates defining front matter variables for a Hugo content file (`content/books/les-miserables.md`). These variables (`title`, `author`, `publication_year`, `isbn`) store metadata for the page and can be accessed within Hugo templates, including shortcodes invoked from this page, using the `.Page.Params` map or specific page variables like `.Page.Title`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Page.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Les Misérables'\nauthor = 'Victor Hugo'\npublication_year = 1862\nisbn = '978-0451419439'\n```\n\n----------------------------------------\n\nTITLE: Iterating Site Menus in Go HTML Templates - Hugo - Go HTML Template\nDESCRIPTION: Shows how to iterate over a defined menu (such as 'main' or 'footer') in Hugo site templates using the Go HTML templating language. Expects previously defined menus via configuration. Outputs rendered HTML for menu items by looping through .Site.Menus.<menu> in the template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/menus.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.Menus.main }}\\n  ...\\n{{ end }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.Menus.footer }}\\n  ...\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using 'else' with 'with' statements in Hugo templates\nDESCRIPTION: Example demonstrating the 'else' statement with 'with' in Hugo templates. The 'else' block executes when the variable is falsy or empty.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/else.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"foo\" }}\n{{ with $var }}\n  {{ . }} → foo\n{{ else }}\n  {{ print \"var is falsy\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Year and Month using GroupByParamDate (Ascending Order)\nDESCRIPTION: This snippet shows how to group pages by the 'eventDate' parameter, formatted as 'Month Year', but sorts the groups themselves in ascending chronological order by specifying 'asc' as the third argument to `GroupByParamDate`. It then iterates through the groups and their pages, creating links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByParamDate.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByParamDate \"eventDate\" \"January 2006\" \"asc\" }}\n  <p>{{ .Key }}</p>\n  <ul>\n    {{ range .Pages }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Resource Using the Hugo Resource API - Go HTML Templates\nDESCRIPTION: This snippet demonstrates how to use the with pipeline in a Hugo Go HTML Template to retrieve an image resource with resources.Get, then call its Publish method to write the file to the public directory. There are no required dependencies outside of Hugo's built-in templating features. The expected input is a valid resource path, such as images/a.jpg. The output of this operation is the file being published; it does not yield a return value nor does it alter template variable state. This method is a convenient way to force publishing of a resource in the build process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Publish.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .Publish }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Setting a Key-Value in hugo.Store - Go HTML Template\nDESCRIPTION: Demonstrates using the hugo.Store.Set method to store a value under a specific key in the global scratch pad. Requires Hugo templates and access to hugo.Store; no external dependencies. Key parameter is the name under which the value is stored. Input: any string key and corresponding value. Output: side effect of storing the value for later retrieval.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Store.Set \"greeting\" \"Hello\" }}\n```\n\n----------------------------------------\n\nTITLE: Member comparison with 'in' operator in collections.Where\nDESCRIPTION: Example showing how to filter pages where a parameter value is contained within a slice using the 'in' operator.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $fruit := where site.RegularPages \"Section\" \"eq\" \"fruit\" }}\n\n{{ $colors := slice \"red\" \"yellow\" }}\n{{ $pages := where $fruit \"Params.color\" \"in\" $colors }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including KaTeX CSS in Hugo Base Template\nDESCRIPTION: Shows how to conditionally include the KaTeX CSS in the base template when mathematical content is present on the page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/ToMath.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n<head>\n  {{ $noop := .WordCount }}\n  {{ if .Page.Store.Get \"hasMath\" }}\n    <link href=\"https://cdn.jsdelivr.net/npm/katex@0.16.21/dist/katex.min.css\" rel=\"stylesheet\">\n  {{ end }}\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Key in Front Matter - TOML (English Book 1)\nDESCRIPTION: This TOML front matter defines metadata for the English variant of Book 1, explicitly setting the translation key to 'foo'. This ensures that Hugo recognizes corresponding pages in different languages as related by this key. Dependencies: embedded in content markdown file. Main parameters: 'title' (displayed title), 'translationKey' (associates translations). Required in multilingual setups where explicit linking is needed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/TranslationKey.md#2025-04-23_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'Book 1'\ntranslationKey = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Unix Milliseconds in Hugo Templates\nDESCRIPTION: Demonstrates converting a time string to Unix milliseconds using Hugo's time.AsTime function and UnixMilli method. Returns the number of milliseconds elapsed since January 1, 1970 UTC.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/UnixMilli.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.UnixMilli }} → 1674891898000\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Emoji Usage in Hugo Content\nDESCRIPTION: This snippet shows how to use emoji shortcodes in Hugo content files when the enableEmoji configuration option is set to true. It demonstrates the syntax for including an emoji in plain text.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Emojify.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nI :heart: Hugo!\n```\n\n----------------------------------------\n\nTITLE: Incorrect Pattern with Multiple Return Statements\nDESCRIPTION: An incorrect example showing what not to do in Hugo templates: using multiple return statements in different logic paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/return.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if math.ModBool . 2 }}\n  {{ return \"even\" }}\n{{ else }}\n  {{ return \"odd\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using 'else' with 'range' statements in Hugo templates\nDESCRIPTION: Example showing how to use 'else' with 'range' loops in Hugo templates. The 'else' block executes when the collection is empty or nil.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/else.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := slice 1 2 3 }}\n{{ range $var }}\n  {{ . }} → 1 2 3 \n{{ else }}\n  {{ print \"var is falsy\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Embedding Inline CSS in Hugo Template\nDESCRIPTION: Demonstrates embedding CSS rules directly into an HTML document. It fetches a CSS resource (`css/style.css`) using `resources.Get`, retrieves its `.Content`, ensures it's safe for inclusion using `safeCSS`, and wraps it within `<style>` tags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Content.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"css/style.css\" }}\n  <style>{{ .Content | safeCSS }}</style>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Converting Decimal Values to float64 in Hugo Templates (Go HTML Template)\nDESCRIPTION: These snippets demonstrate how the Hugo template function 'float' converts decimal values (numbers and strings) into a float64. Both integer and fractional inputs are supported, and the conversion preserves the numeric value in floating point. Inputs can be native numbers or string representations, and the output is a float64 value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToFloat.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ float 11 }} → 11 (float64)\n{{ float \"11\" }} → 11 (float64)\n\n{{ float 11.1 }} → 11.1 (float64)\n{{ float \"11.1\" }} → 11.1 (float64)\n\n{{ float 11.9 }} → 11.9 (float64)\n{{ float \"11.9\" }} → 11.9 (float64)\n```\n\n----------------------------------------\n\nTITLE: Extracting All Regex Matches from Content with Hugo findRE - Go HTML Template\nDESCRIPTION: Demonstrates using the findRE function in Hugo (Go HTML Template) to return a slice of all matches in the .Content string based on the specified regular expression. The example searches for all <h2> HTML elements, including those with newlines, using the (?s) flag. Requires Hugo templating environment and expects PATTERN and INPUT arguments; returns a []string containing all full matches. Constraints: matches all occurrences unless limited by extra argument.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FindRe.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ findRE `(?s)<h2.*?>.*?</h2>` .Content }}\n```\n\n----------------------------------------\n\nTITLE: Accessing First MediaType Suffix from a Hugo Resource\nDESCRIPTION: This snippet shows how to obtain the first (primary) file suffix (extension) for a resource’s media type using Hugo’s Go template engine. It calls .MediaType.FirstSuffix.Suffix after retrieving the resource. Typically, this returns the most standardized extension, and is useful for generating filenames or links dynamically.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/MediaType.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .MediaType.FirstSuffix.Suffix }} → jpg\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Calculating Custom Reading Time in Hugo Go Template\nDESCRIPTION: This Go HTML template snippet demonstrates calculating a custom estimated reading time based on language-specific speeds. It retrieves the page's word count (`.WordCount`), converts it to a float, and divides it by the `reading_speed` parameter fetched from the site's language-specific configuration (`.Site.Params.reading_speed`). The result is then rounded up to the nearest whole number using the `math.Ceil` function to provide an integer value for minutes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/ReadingTime.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $readingTime := div (float .WordCount) .Site.Params.reading_speed }}\n{{ $readingTime = math.Ceil $readingTime }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Sorted Pages by Language (Ascending) in Go Template\nDESCRIPTION: This Go HTML template snippet demonstrates how to loop through all site pages (`.Site.AllPages`) sorted alphabetically by their language using the `.ByLanguage` method. For each page, it generates an H2 heading containing a link to the page's relative permalink (`.RelPermalink`) with the page's link title (`.LinkTitle`) as the text. This sorts the pages in ascending order based on their language.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByLanguage.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.AllPages.ByLanguage }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Hugo's Figure Shortcode\nDESCRIPTION: The HTML that Hugo renders when using the figure shortcode. This shows how the shortcode parameters are transformed into HTML elements including the figure tag, anchor link, image, and caption.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/figure.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<figure class=\"ma0 w-75\">\n  <a href=\"https://www.nps.gov/zion/index.htm\">\n    <img \n      src=\"/images/examples/zion-national-park.jpg\" \n      alt=\"A photograph of Zion National Park\"\n    >\n  </a>\n  <figcaption>\n    <p>Zion National Park</p>\n  </figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Syntax Example\nDESCRIPTION: Shows the three components of a Markdown image: description, destination, and title.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/images.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n![white kitten](/images/kitten.jpg \"A kitten!\")\n  ------------  ------------------  ---------\n  description      destination        title\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Dictionary Function in Hugo\nDESCRIPTION: The 'dict' function creates a dictionary from a list of key and value pairs. This example shows how to create a dictionary with string keys and mixed value types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n{{ $m := dict \"a\" 1 \"b\" 2 }}\n{{ $m.b }} → 2\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Themes in Hugo Project Configuration (TOML)\nDESCRIPTION: Shows how to specify multiple themes (`theme-a`, `theme-b`) in the project's main `hugo.toml` file using the `theme` key with an array of theme names. Hugo applies themes and merges configurations in the order specified.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = 'https://example.org/'\nlanguageCode = 'en-us'\ntitle = 'My New Hugo Site'\ntheme = ['theme-a','theme-b']\n```\n\n----------------------------------------\n\nTITLE: Comparing Time Objects with Equal Method in Hugo Templates\nDESCRIPTION: This example demonstrates how to use the Equal method to compare two time objects that represent the same point in time but in different time zones. The method returns true when the times are semantically equal, regardless of their timezone representation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Equal.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t1 := time.AsTime \"2023-01-01T17:00:00-08:00\" }}\n{{ $t2 := time.AsTime \"2023-01-01T20:00:00-05:00\" }}\n\n{{ $t1.Equal $t2 }} → true\n```\n\n----------------------------------------\n\nTITLE: Logging Suppressible Warning in Hugo Template\nDESCRIPTION: Demonstrates how to use the warnidf function to log a warning message with a specific ID that can be suppressed in the site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Warnidf.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ warnidf \"warning-42\" \"You should consider fixing this.\" }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Page Content - Hugo Go HTML Template\nDESCRIPTION: Demonstrates how to access the raw content of a Hugo page in a Go HTML template using the .RawContent property. This snippet relies on a Hugo Page object being present in the template context and shows direct template binding. It will output the page content as a string, not including front matter or rendered shortcodes. Dependencies include a Hugo environment and a valid Page context; use cases include plain text exports and debugging.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RawContent.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .RawContent }}\n```\n\n----------------------------------------\n\nTITLE: Expected Standard Error Output Indicating Duplicate Paths (Text)\nDESCRIPTION: This snippet shows the expected standard error output (`stderr`) when running the `hugo --printPathWarnings` command on the specified project. The term 'Duplicate' signals that Hugo has detected multiple content items attempting to render to the same output path (`/p1/`), as defined in the front matter of `p1.md`, `p2.md`, and `p3.md`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nstderr 'Duplicate'\n```\n\n----------------------------------------\n\nTITLE: Using Identifier Method with Translation Tables in Hugo Templates\nDESCRIPTION: A Go HTML template example that iterates through the main menu entries and uses the Identifier method for localization. It attempts to translate the identifier via the T function, falling back to the Name property if no translation exists.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Identifier.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li><a href=\"{{ .URL }}\">{{ or (T .Identifier) .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by Inequality (Not True) - go-html-template\nDESCRIPTION: Filters pages where 'Params.exclude' is not true, including those where the parameter is false or undefined. The 'ne' operator allows the inclusion of undefined fields alongside explicit boolean checks. Returns an HTML list of these filtered pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_18\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\\n  {{ range where .Site.RegularPages \"Params.exclude\" \"ne\" true }}\\n    <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\\n  {{ end }}\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: HTML Output With Safe Declaration - HTML\nDESCRIPTION: This snippet shows the final HTML output after using safeHTMLAttr to mark the attribute as trusted. Unlike the previous output, the datetime attribute contains the \"+\" character unescaped, reflecting accurate rendering as intended. There are no inputs, dependencies, or parameters, as this is the direct rendered outcome from the preceding Go HTML template. The output is a correctly rendered time element in HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/HTMLAttr.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<time datetime=\"2024-05-26T07:19:55+02:00\">26 May 2024</time>\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Nanoseconds in Hugo Templates\nDESCRIPTION: This example demonstrates how to parse a duration string and convert it to nanoseconds using the Nanoseconds method. The time.ParseDuration function creates a duration from a string format, and the Nanoseconds method returns the total number of nanoseconds in that duration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/duration/Nanoseconds.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }}\n{{ $d.Nanoseconds }} → 12751500000000\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with Hugo's replace Function in Go HTML Template\nDESCRIPTION: This snippet demonstrates the usage of the 'replace' function in Hugo's Go HTML Template syntax to substitute occurrences of a specified substring within a template variable. It first defines the string \\\"Batman and Robin\\\", and then replaces the substring \\\"Robin\\\" with \\\"Catwoman\\\". No external dependencies are required beyond Hugo's built-in templating functions. The key parameters are the input string, the substring to replace, and the replacement value; it performs a global replacement unless otherwise specified. The output yields the modified string with all instances of the target replaced.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Replace.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := \"Batman and Robin\" }}\n{{ replace $s \"Robin\" \"Catwoman\" }} → Batman and Catwoman\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code with Opening/Closing Tags in Hugo\nDESCRIPTION: Creates a QR code using opening and closing shortcode tags with the content between them. This approach is useful for longer text or when formatting needs to be preserved.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/qr.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{</* qr */>}}\nhttps://gohugo.io\n{{</* /qr */>}}\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers with compare.Le in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the compare.Le function to compare numbers in Hugo templates. It shows examples of comparing two and three arguments, illustrating various scenarios of less than or equal to comparisons.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Le.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ le 1 1 }} → true\n{{ le 1 2 }} → true\n{{ le 2 1 }} → false\n\n{{ le 1 1 1 }} → true\n{{ le 1 1 2 }} → true\n{{ le 1 2 1 }} → true\n{{ le 1 2 2 }} → true\n\n{{ le 2 1 1 }} → false\n{{ le 2 1 2 }} → false\n{{ le 2 2 1 }} → false\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Direction - Hugo Template - Go HTML Template\nDESCRIPTION: Returns the text direction ('ltr' or 'rtl') from the site's configuration for use in templates, e.g., for setting HTML 'dir' attribute. This snippet reads from the LanguageDirection field, benefiting multilingual sites with both left-to-right and right-to-left languages. Requires languageDirection property in the config.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Language.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Language.LanguageDirection }} \\u2192 ltr\n```\n\n----------------------------------------\n\nTITLE: Configuring Hierarchical Menus in Hugo\nDESCRIPTION: Configuration example showing how to create parent-child relationships in Hugo menus. It defines a 'Products' parent menu with two child entries, each referring to their parent using the 'parent' property.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Parent.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n[[menus.main]]\nname = 'Products'\npageRef = '/product'\nweight = 10\n\n[[menus.main]]\nname = 'Product 1'\npageRef = '/products/product-1'\nparent = 'Products'\nweight = 1\n\n[[menus.main]]\nname = 'Product 2'\npageRef = '/products/product-2'\nparent = 'Products'\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Entries in Hugo Configuration\nDESCRIPTION: Example of defining menu entries in Hugo's configuration file with name, pageRef, and weight properties. This configuration creates three entries for the 'main' menu.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/Reverse.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[menus.main]]\nname = 'Services'\npageRef = '/services'\nweight = 10\n\n[[menus.main]]\nname = 'About'\npageRef = '/about'\nweight = 20\n\n[[menus.main]]\nname = 'Contact'\npageRef = '/contact'\nweight = 30\n```\n\n----------------------------------------\n\nTITLE: Formatting and Localizing .Date Field Using time.Format Tokens - Hugo Go HTML Template\nDESCRIPTION: This snippet illustrates how to format and localize a .Date field in a Hugo template using the time.Format function with localization tokens (e.g., :date_medium). The pipe operator is used to pass .Date to time.Format, applying the given token to produce a locale-aware output. The result depends on the current site language/region settings and pre-defined date/time tokens supported by Hugo. Required dependencies are Hugo's multilingual configuration and the time.Format function within Go HTML Templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/Format.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Date | time.Format \":date_medium\" }} → Jan 27, 2023\n```\n\n----------------------------------------\n\nTITLE: Using Abs Method with time.Duration in Hugo Templates\nDESCRIPTION: This example demonstrates how to parse a negative duration string with time.ParseDuration and then apply the Abs method to obtain its absolute value. The code first creates a negative duration of -3 hours, then converts it to a positive 3-hour duration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/duration/Abs.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d = time.ParseDuration \"-3h\" }}\n{{ $d.Abs }} → 3h0m0s\n```\n\n----------------------------------------\n\nTITLE: Default Archetype for Posts - Markdown Template\nDESCRIPTION: Defines the post archetype template in the Hugo theme, placed in 'archetypes/post.md'. Uses Go template syntax to inject new post data including a title, date, draft state, and dummy content. Input parameters are available via the Go template context (e.g., .Name, .Date), outputs a filled markdown file for each new post. Requires Hugo for template evaluation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n\nDummy content.\n\n```\n\n----------------------------------------\n\nTITLE: Appending to a Slice of Slices in Hugo Templates (Go HTML Template)\nDESCRIPTION: Shows how to create and append to a slice of slices using Hugo's append function. The initial slice is itself a slice, and when another slice is appended, the result is a two-dimensional array. This is useful for grouping data structures and creating more complex nested outputs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Append.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice (slice \\\"a\\\" \\\"b\\\") }}\\n{{ $s }} → [[a b]]\\n\\n{{ $s = $s | append (slice \\\"c\\\" \\\"d\\\") }}\\n{{ $s }} → [[a b] [c d]]\n```\n\n----------------------------------------\n\nTITLE: Getting MediaType SubType from a Hugo Resource\nDESCRIPTION: This code illustrates the retrieval of the subtype (second part of the MIME type, like 'jpeg') from a resource’s media type using Hugo’s templating syntax. Using resources.Get and referencing .MediaType.SubType, this code is designed for Hugo templates and outputs the subtype string of the specified resource.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/MediaType.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .MediaType.SubType }} → jpeg\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Illustrating i18n Directory Structure (Text)\nDESCRIPTION: Shows a simple directory structure within the `i18n` folder, containing translation files for English (`en.toml`) and Polish (`pl.toml`). This structure is used for subsequent simple translation examples.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ni18n/\n├── en.toml\n└── pl.toml\n```\n\n----------------------------------------\n\nTITLE: Setting Map Values in Hugo Store (Go HTML Template)\nDESCRIPTION: Illustrates the use of SetInMap method to add key-value pairs to a map stored under a specific key in the Hugo Store.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/store-methods.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ .Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ .Store.Get \"greetings\" }} → map[english:Hello french:Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Calling math.Pow in Hugo Go HTML Templates - go-html-template\nDESCRIPTION: This snippet demonstrates using the math.Pow function in a Hugo template to raise one number (VALUE1) to the power of another (VALUE2), returning a float64 result. Dependencies include the math module being available within Hugo templates. The input parameters are two numbers (e.g., 2 and 3), and the output is the computed power (here, 8). This can be used in any context that supports Hugo Go HTML templates, with the limitation that template functions must be properly registered and accessible.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Pow.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Pow 2 3 }} → 8\n```\n\n----------------------------------------\n\nTITLE: Declaring Potentially Unsafe URL in Hugo Template\nDESCRIPTION: This snippet demonstrates assigning a URL string with an `irc:` scheme to a variable (`$href`) within a Hugo template. It then attempts to use this variable directly within the `href` attribute of an anchor tag. This illustrates the default behavior without explicit safety declaration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/URL.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $href := \"irc://irc.freenode.net/#golang\" }}\n<a href=\"{{ $href }}\">IRC</a>\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Standard Edition from Source\nDESCRIPTION: Command to build and install the standard edition of Hugo from source code using Go.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngo install github.com/gohugoio/hugo@latest\n```\n\n----------------------------------------\n\nTITLE: Triggering Errors for Unused List Templates in Hugo - Go HTML Template\nDESCRIPTION: This Go HTML template for layouts/_default/list.html uses the errorf template function to forcibly error with a message indicating the kind, making any invocation of the template clearly visible as an error. It is intended as a debugging or assertion tool to help developers ensure the list template is not mistakenly used. Requires Hugo’s templating system, and the context object must have a Kind property.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_printunusedtemplates.txt#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ errorf \"unused template: %s\" .Kind }}\n```\n\n----------------------------------------\n\nTITLE: Calculating Arctangent Using Hugo math.Atan2 Function - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the math.Atan2 function within a Hugo Go HTML Template to compute the arctangent in radians, determining the correct quadrant from the provided input values. Requires Hugo 0.130.0 or later. The function takes two numeric parameters (Y and X), returning the floating-point result. The example shows its output when given 1 and 2 as arguments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Atan2.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Atan2 1 2 }} \\u2192 0.4636476090008061\n```\n\n----------------------------------------\n\nTITLE: Example Content Structure for Hugo Site\nDESCRIPTION: Illustrates a sample content directory structure for a Hugo site with nested sections, regular pages, and resources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Pages.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── lessons/\n│   ├── lesson-1/\n│   │   ├── _index.md\n│   │   ├── part-1.md\n│   │   └── part-2.md\n│   ├── lesson-2/\n│   │   ├── resources/\n│   │   │   ├── task-list.md\n│   │   │   └── worksheet.md\n│   │   ├── _index.md\n│   │   ├── part-1.md\n│   │   └── part-2.md\n│   ├── _index.md\n│   ├── grading-policy.md\n│   └── lesson-plan.md\n├── _index.md\n├── contact.md\n└── legal.md\n```\n\n----------------------------------------\n\nTITLE: Logging Remote Resource Errors as Warnings in Go HTML Template\nDESCRIPTION: This Go HTML template snippet is similar to the first example but demonstrates an alternative error handling approach. Instead of failing the build with `errorf` when `.Err` is not nil, it uses `warnf` to log the error message as a warning, allowing the build process to potentially continue.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Err.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://broken-example.org/images/a.jpg\" }}\n{{ with resources.GetRemote $url }}\n  {{ with .Err }}\n    {{ warnf \"%s\" . }}\n  {{ else }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ else }}\n  {{ errorf \"Unable to get remote resource %q\" $url }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output for Book 2 Translations - HTML\nDESCRIPTION: Shows the rendered HTML list for the Book 2 page on English and German sites, which only have translations in those two languages. Anchors reflect the available translations, and this demonstrates Hugo's dynamic filtering based on available content for each language. Users can use this output as a visual check for multilingual navigation functionality.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/AllTranslations.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/books/book-1/\" hreflang=\"en-US\">Book 1 (English)</a></li>\n  <li><a href=\"/de/books/book-1/\" hreflang=\"de-DE\">Book 1 (Deutsch)</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Querying Page Weight in Hugo Templates - Go HTML Template\nDESCRIPTION: This code snippet accesses and outputs a content page's weight within a Hugo Go HTML Template. Requires a Hugo environment where a page is defined with a 'weight' parameter in its front matter. The '.Weight' variable represents the integer weight, which can be used to influence display order. The output displays the page's weight (e.g., 42). This approach assumes the page context is available when rendering the template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Weight.md#2025-04-23_snippet_1\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ .Weight }} \\u2192 42\n```\n\n----------------------------------------\n\nTITLE: Applying transform.XMLEscape in RSS XML Template\nDESCRIPTION: Shows how to use transform.XMLEscape in an RSS XML template, with the additional step of declaring the result as safe HTML to prevent double escaping when used with Go's html/template package.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/XMLEscape.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<description>{{ .Summary | transform.XMLEscape | safeHTML }}</description>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Map Entry with hugo.Store.DeleteInMap - Go HTML Template\nDESCRIPTION: Shows how to remove a specific entry from a map in hugo.Store using hugo.Store.DeleteInMap. After setting multiple map keys, one is removed. Inputs: map key to delete, parent key. Output: map with the specified entry removed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Store.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Store.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ hugo.Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ hugo.Store.DeleteInMap \"greetings\" \"english\" }}\n{{ hugo.Store.Get \"greetings\" }} → map[french:Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Managing Maps in Hugo Scratch Pad\nDESCRIPTION: Demonstrates the use of SetInMap and DeleteInMap methods to manage key-value pairs within a map in the scratch pad.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/NewScratch.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := newScratch }}\n{{ $s.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ $s.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ $s.Get \"greetings\" }} → map[english:Hello french:Bonjour]\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := newScratch }}\n{{ $s.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ $s.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ $s.DeleteInMap \"greetings\" \"english\" }}\n{{ $s.Get \"greetings\" }} → map[french:Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Defining a Script Resource with js.Batch in Go Templates\nDESCRIPTION: This Go template snippet shows initializing a `js.Batch` instance for a specific batch ID ('js/mybatch'), accessing a group within it ('mygroup'), defining a script ('myscript'), and setting its source JavaScript file using `resources.Get` and `SetOptions`. The `with` blocks manage the scope and access to the nested API methods.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with js.Batch \"js/mybatch\" }}\n  {{ with .Group \"mygroup\" }}\n      {{ with .Script \"myscript\" }}\n          {{ .SetOptions (dict \"resource\" (resources.Get \"myscript.js\")) }}\n      {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Plain Words with Hugo Template\nDESCRIPTION: This Hugo template snippet demonstrates how to determine the approximate number of unique words on a page. It first retrieves the slice of words using `.PlainWords` and then pipes (`|`) this slice to the `uniq` template function. The `uniq` function filters out duplicate entries from the slice. The example output `→ 42` indicates the result of the operation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/PlainWords.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .PlainWords | uniq }} → 42\n```\n\n----------------------------------------\n\nTITLE: Generating Multilingual Content in Same Directory\nDESCRIPTION: Shell commands to create new multilingual content files in Hugo using language extensions in the same directory structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nhugo new content post/test.en.md\nhugo new content post/test.de.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Environment Variables in Hugo Security Settings (Hugo, TOML/YAML)\nDESCRIPTION: This snippet shows how to configure which environment variables are accessible to the os.Getenv (getenv) function in Hugo templates by modifying the [security.funcs] section of the Hugo configuration file. Patterns (regular expressions) can be used to match allowed variable names, such as those prefixed with HUGO_ or named USER and HOME. This step is required if you want templates to access environment variables beyond the safe defaults (like CI and HUGO_ variables).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/Getenv.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n[security.funcs]\ngetenv = ['^HUGO_', '^CI$', '^USER$', '^HOME$']\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of a Simple Map\nDESCRIPTION: This snippet shows the JSON representation of the map created in the previous Go HTML template example using `dict \"a\" 1 \"b\" 2`. It illustrates the resulting key-value structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Dictionary.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a\": 1,\n  \"b\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Persistently Installing Hugo Fish Completions (Shell)\nDESCRIPTION: This command generates the Hugo autocompletion script for the Fish shell and saves it to the standard Fish completions directory (`~/.config/fish/completions/hugo.fish`). This makes Hugo autocompletion available in all future Fish shell sessions after restarting the shell.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_fish.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhugo completion fish > ~/.config/fish/completions/hugo.fish\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Live Reload and Page Output - Bash\nDESCRIPTION: This Bash script automates starting the Hugo server in watch mode, simulates content editing, and verifies HTML output changes. It includes sleep commands for timing, greps for specific content in the output files, and checks absence of the livereload script. Designed for shell environments with Hugo installed, it depends on the Hugo binary and the test site's directory structure. Inputs are file modifications; outputs are verified via grep. Limitations: intended for local testing, skips on Windows.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__watch.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test the hugo command.\n\n# See https://github.com/rogpeppe/go-internal/issues/228\n[windows] skip\n\nhugo -w &\n\nsleep 3\ngrep 'P1start' public/p1/index.html\n\nreplace content/p1.md 'P1start' 'P1end'\nsleep 2\ngrep 'P1end' public/p1/index.html\n! grep 'livereload' public/p1/index.html\n\nstop\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Image Resources with Hugo resources.Get (Go HTML Template)\nDESCRIPTION: This snippet demonstrates how to use Hugo's resources.Get function in a Go HTML template to fetch an image from the assets directory. It conditionally displays the image in an <img> tag, outputting resource properties like RelPermalink, Width, and Height. The resources.Get function returns a resource object if the file exists, or nil otherwise, and operates globally on the assets directory or any directories mounted to it. No imports are needed; the Hugo templating system provides the necessary context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/Get.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Example of a Pretty URL (Hugo Default)\nDESCRIPTION: Illustrates the format of a default 'pretty URL' generated by Hugo. This format typically uses a directory structure for content, ending with a trailing slash.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/ugly-urls.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.org/section/article/\n```\n\n----------------------------------------\n\nTITLE: Layout Structure for Hugo Content-Type-Specific Templates - Text\nDESCRIPTION: This code block visually represents the directory structure for Hugo layouts, indicating template overrides based on content type. It is written in plain text and used for illustration purposes. The tree demonstrates how templates under content-type-named folders (e.g., books) are prioritized over those in _default. No dependencies are required, and the snippet is for reference only, not executable code.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Render.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\\n├── _default/\\n│   ├── baseof.html\\n│   ├── home.html\\n│   ├── li.html      <-- used for other content types\\n│   ├── list.html\\n│   ├── single.html\\n│   └── summary.html\\n└── books/\\n    ├── li.html      <-- used when content type is \\\"books\\\"\\n    └── summary.html\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Type and Layout in Front Matter - TOML\nDESCRIPTION: This snippet combines the specification of content type 'miscellaneous' and layout 'contact' in the front matter for contact.md. This forces Hugo to use templates/layouts/miscellaneous/contact.html for contact.md. Input parameters are TOML keys for title, type, and layout; result is targeting a specific template for a given content file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/lookup-order.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Contact'\\ntype = 'miscellaneous'\\nlayout = 'contact'\n```\n\n----------------------------------------\n\nTITLE: Extracting Seconds from Time in Hugo Templates\nDESCRIPTION: Shows how to get the seconds component from a time.Time object using the Second method. The example creates a time object and extracts the seconds value which will be in the range [0, 59].\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Second.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Second }} → 58\n```\n\n----------------------------------------\n\nTITLE: Adding New Content to Hugo Site\nDESCRIPTION: Command to create a new content file in the posts directory of the Hugo site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/quick-start.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhugo new content content/posts/my-first-post.md\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Last Modification Date with Hugo Go HTML Templates\nDESCRIPTION: This snippet demonstrates how to group Hugo pages by their last modification date using the GroupByLastmod method with a layout string of \\\"January 2006\\\". Required dependencies include a Hugo '.Pages' page collection context and the proper site configuration for 'lastmod'. The '.Key' variable yields the group key (e.g., month/year), and '.Pages' contains the pages in each group. The 'range' block is used for iterating over groups and their respective pages. Outputs a nested list grouped by formatted lastmod date. No custom sorting is applied within groups.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByLastmod.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByLastmod \\\"January 2006\\\" }}\\n  <p>{{ .Key }}</p>\\n  <ul>\\n    {{ range .Pages }}\\n      <li><a href=\\\"{{ .RelPermalink }}\\\">{{ .LinkTitle }}</a></li>\\n    {{ end }}\\n  </ul>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Customized HTML Output With Render Hooks\nDESCRIPTION: Example of HTML output with custom attributes added through render hooks, showing enhanced links and images.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"https://gohugo.io\" rel=\"external\">Hugo</a></p>\n<p><img alt=\"kitten\" src=\"kitten.jpg\" width=\"600\" height=\"400\"></p>\n```\n\n----------------------------------------\n\nTITLE: Hugo Module Documentation Frontmatter\nDESCRIPTION: YAML frontmatter configuration for a Hugo documentation page about modules. Defines metadata like title, description, weight for ordering, and URL aliases.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-modules/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Hugo Modules\ndescription: Use Hugo Modules to manage the content, presentation, and behavior of your site.\ncategories: []\nkeywords: []\nweight: 10\naliases: [/themes/overview/,/themes/]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings - Hugo Site - TOML\nDESCRIPTION: Demonstrates how to define a new language (German) in the Hugo site configuration using TOML format. The snippet sets the language code, direction, display name, and weight, which determines language ordering. Parameters set here are later accessed in Hugo templates via the Language object. This requires Hugo's multilingual feature and correct path to the config file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Language.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[languages.de]\\nlanguageCode = 'de-DE'\\nlanguageDirection = 'ltr'\\nlanguageName = 'Deutsch'\\nweight = 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Gaussian Blur Image Filter in Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates how to create a Gaussian blur filter using images.GaussianBlur in Hugo's Go HTML templates. The filter takes a single parameter, sigma, which determines the blur intensity; sigma must be a positive number, and the blur radius will be roughly 3×sigma. The output is an image filter object that can subsequently be applied to images in Hugo content. No external dependencies are required beyond standard Hugo template functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/GaussianBlur.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.GaussianBlur 5 }}\n```\n\n----------------------------------------\n\nTITLE: Variable Scoping with 'with' in Hugo Templates\nDESCRIPTION: Illustrates how variables defined inside a 'with' block are scoped to that block and are not accessible outside it.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/with.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with $var := 42 }}\n  {{ . }} → 42\n  {{ $var }} → 42\n{{ end }}\n{{ $var }} → undefined\n```\n\n----------------------------------------\n\nTITLE: Generating External CSS for Hugo Chroma Syntax Highlighting\nDESCRIPTION: Command to generate an external CSS file for syntax highlighting when setting noClasses to false. This generates styles based on the monokai theme and outputs to syntax.css.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/syntax-highlighting-options.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhugo gen chromastyles --style=monokai > syntax.css\n```\n\n----------------------------------------\n\nTITLE: Hugo Function Reference Template Shortcode\nDESCRIPTION: Template shortcode for displaying the quick reference section for Hugo functions. Uses the 'functions' section parameter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/functions.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{% quick-reference section=\"functions\" %}}\n```\n\n----------------------------------------\n\nTITLE: Hugo Configuration Example for Multilingual Setup\nDESCRIPTION: Example configuration showing how to set up Hugo for multilingual support with English as default language and Spanish as secondary language.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/AbsLangURL.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'en'\ndefaultContentLanguageInSubdir = true\n[languages.en]\nweight = 1\n[languages.es]\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Page Slug in Hugo Front Matter (TOML)\nDESCRIPTION: This snippet shows how to set a custom URL slug ('sushi') for a content page ('content/recipes/spicy-tuna-hand-rolls.md') using the `slug` variable within the TOML front matter. This value overrides the default URL path derived from the filename, resulting in the page being served from '/recipes/sushi'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Slug.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'How to make spicy tuna hand rolls'\nslug = 'sushi'\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters in a Dedicated File in Hugo Config Directory (TOML)\nDESCRIPTION: Demonstrates defining site parameters directly within a dedicated file named after the root key (e.g., `params.toml`) inside the `config/_default/` directory. In this case, the root key (`params`) is omitted from the file content itself. This achieves the same result as defining `[params]` within `hugo.toml`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\nfoo = 'bar'\n```\n\n----------------------------------------\n\nTITLE: Defining a Runner Script Resource with js.Batch in Go Templates\nDESCRIPTION: This snippet exemplifies how to define a runner script ('myrunner') within a group ('mygroup') using `js.Batch`. It uses `SetOptions` along with `resources.Get` to specify the source JavaScript file for the runner. Runner scripts execute logic based on the defined script instances and their parameters within the group.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with js.Batch \"js/mybatch\" }}\n  {{ with .Group \"mygroup\" }}\n      {{ with .Runner \"myrunner\" }}\n          {{ .SetOptions (dict \"resource\" (resources.Get \"myrunner.js\")) }}\n      {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Weight in Hugo Front Matter - TOML\nDESCRIPTION: This snippet demonstrates how to define the weight of a Hugo content page using TOML front matter. The 'weight' parameter determines the position of the page when sorted, with lower weights appearing first. Dependencies include a valid Hugo site and TOML syntax for front matter; 'title' and 'weight' are key parameters. The expected input is integer weight and a string title; no output is expected in code, but the effect is seen in list sorting. Constraints: 'weight' should be a non-zero integer for desired ordering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Weight.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'How to make spicy tuna hand rolls'\\nweight = 42\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespaced Custom Parameters in Go HTML Templates\nDESCRIPTION: This Go HTML template snippet demonstrates how to access namespaced custom parameters defined in the Hugo configuration. It first assigns the namespaced parameters to a variable (`$cfg`) for easier access and then retrieves the nested color values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/params.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $cfg := .Site.Params.module.mymodule }}\n\n{{ $cfg.colors.background }} → #efefef\n{{ $cfg.colors.font }} → #222222\n```\n\n----------------------------------------\n\nTITLE: Accessing ContentBaseName in Hugo Templates\nDESCRIPTION: Shows how to access the ContentBaseName which returns the containing directory name for bundles or the TranslationBaseName for regular pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .ContentBaseName }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of transform.HighlightCodeBlock in Hugo Template\nDESCRIPTION: This snippet shows the fundamental use of `transform.HighlightCodeBlock` within a Hugo code block render hook. It takes the current context (`.`) and calls the function, storing the result in `$result`. The `.Wrapped` method is then used to output the highlighted code enclosed in standard HTML tags (`div`, `pre`, `code`), which is identical to the output of `transform.Highlight`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/HighlightCodeBlock.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $result := transform.HighlightCodeBlock . }}\n{{ $result.Wrapped }}\n```\n\n----------------------------------------\n\nTITLE: Adding Slice Values in Hugo Store\nDESCRIPTION: Demonstrates appending slice values using the Add method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Store.Set \"greetings\" (slice \"Hello\") }}\n{{ site.Store.Add \"greetings\" (slice \"Welcome\" \"Cheers\") }}\n{{ site.Store.Get \"greetings\" }} → [Hello Welcome Cheers]\n```\n\n----------------------------------------\n\nTITLE: Appending a Single Element to a Slice in Hugo Templates (Go HTML Template)\nDESCRIPTION: This snippet initializes a slice with two elements and demonstrates appending a single string to it using the append function in Hugo templates. No external dependencies are required. The key parameter is the element to be appended. The output shows the original and updated slice after appending.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Append.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \\\"a\\\" \\\"b\\\" }}\\n{{ $s }} → [a b]\\n\\n{{ $s = $s | append \\\"c\\\" }}\\n{{ $s }} → [a b c]\n```\n\n----------------------------------------\n\nTITLE: Multilingual Alert Blockquote Render Hook\nDESCRIPTION: Template that renders blockquotes as alerts with emoji support when an alert designator is present, with i18n label support.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/blockquotes.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $emojis := dict\n  \"caution\" \":exclamation:\"\n  \"important\" \":information_source:\"\n  \"note\" \":information_source:\"\n  \"tip\" \":bulb:\"\n  \"warning\" \":information_source:\"\n}}\n\n{{ if eq .Type \"alert\" }}\n  <blockquote class=\"alert alert-{{ .AlertType }}\">\n    <p class=\"alert-heading\">\n      {{ transform.Emojify (index $emojis .AlertType) }}\n      {{ with .AlertTitle }}\n        {{ . }}\n      {{ else }}\n        {{ or (i18n .AlertType) (title .AlertType) }}\n      {{ end }}\n    </p>\n    {{ .Text }}\n  </blockquote>\n{{ else }}\n  <blockquote>\n    {{ .Text }}\n  </blockquote>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Applying Opacity and Process Filters to an Image in Hugo (Go HTML Template)\nDESCRIPTION: This example demonstrates retrieving an image resource (`images/original.jpg`), defining a slice of image filters including `images.Opacity` (to set transparency to 65%) and `images.Process` (to ensure the output format is PNG, which supports transparency), applying these filters using `images.Filter`, and finally rendering an HTML `<img>` tag with the resulting image's relative permalink, width, and height attributes. The `with` blocks ensure the code only executes if the resource is found and the filtering is successful.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Opacity.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ $filters := slice\n    (images.Opacity 0.65)\n    (images.Process \"png\")\n  }}\n  {{ with . | images.Filter $filters }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters with Hyphens in Keys in Hugo\nDESCRIPTION: Shows how to access parameters with keys containing hyphens that are not valid identifiers in Hugo templates. The example demonstrates using the index function to access such parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_31\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ index .Params \"key-with-hyphens\" }} → must use index function\n```\n\n----------------------------------------\n\nTITLE: Example GoAT Diagram: File Tree Structure with Attributes\nDESCRIPTION: Shows a file system tree structure rendered using GoAT diagram syntax. This example also demonstrates Hugo-specific attributes (`width`, `color`) applied to the fenced code block to control rendering properties like width and color. The source mentions inspiration from Diagon.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_8\n\nLANGUAGE: goat\nCODE:\n```\n───Linux─┬─Android\n         ├─Debian─┬─Ubuntu─┬─Lubuntu\n         │        │        ├─Kubuntu\n         │        │        ├─Xubuntu\n         │        │        └─Xubuntu\n         │        └─Mint\n         ├─Centos\n         └─Fedora\n```\n\n----------------------------------------\n\nTITLE: Using Inline Partial Templates as an Alternative to the template Function\nDESCRIPTION: Demonstrates how to achieve the same functionality as the template function using inline partial templates. This approach uses the partial function with a defined inline template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/template.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"inline/foo.html\" (dict \"answer\" 42) }}\n\n{{ define \"partials/inline/foo.html\" }}\n  {{ printf \"The answer is %v.\" .answer }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Project Content Directory Structure - Text\nDESCRIPTION: This text-formatted snippet visualizes a typical Hugo content directory arrangement for blog posts. It provides context for how source Markdown files should be organized within folders for Hugo sites, but is not executable code. Used as an example in the documentation of site structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── posts/\n│   ├── _index.md\n│   ├── post-1.md\n│   ├── post-2.md\n│   ├── post-3.md\n│   └── post-4.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Defining Simple English Translations (TOML)\nDESCRIPTION: Example content for an English translation file (`i18n/en.toml`). It defines simple key-value pairs for 'privacy' and 'security' strings. This file provides the source translations for the English version of the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nprivacy = 'privacy'\nsecurity = 'security'\n```\n\n----------------------------------------\n\nTITLE: Getting Values from Hugo Store (Go HTML Template)\nDESCRIPTION: Shows how to retrieve a value for a given key from the Hugo Store. This example sets a value and then retrieves it.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/store-methods.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.Set \"greeting\" \"Hello\" }}\n{{ .Store.Get \"greeting\" }} → Hello\n```\n\n----------------------------------------\n\nTITLE: Rendering Links to All Language Home Pages in Hugo\nDESCRIPTION: This Go HTML template iterates through all site languages and generates links to their respective home pages, using the Sites collection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Sites.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Sites }}\n    <li><a href=\"{{ .Home.Permalink }}\">{{ .Title }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Example Output: site.json Generated Content - JSON\nDESCRIPTION: This JSON snippet illustrates the expected content of the generated site.json file created by the Hugo template examples. It includes keys for build_date, hugo_version, and last_modified, demonstrating the final published format. No dependencies required; serves as a reference output for verification.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/FromString.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build_date\": \"2025-01-16T19:14:41-08:00\",\n  \"hugo_version\": \"0.141.0\",\n  \"last_modified\": \"2025-01-16T19:14:46-08:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Decimal Values to Strings in Hugo Templates\nDESCRIPTION: Demonstrates using the `string` function with decimal integer and float literals, and their string equivalents. Numeric inputs are converted to their standard string representation, while string inputs are returned as is. The function takes one argument (INPUT) and returns its string representation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToString.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ string 11 }} → 11 (string)\n{{ string \"11\" }} → 11 (string)\n\n{{ string 11.1 }} → 11.1 (string)\n{{ string \"11.1\" }} → 11.1 (string)\n\n{{ string 11.9 }} → 11.9 (string)\n{{ string \"11.9\" }} → 11.9 (string)\n```\n\n----------------------------------------\n\nTITLE: Formatting Lastmod Date with Hugo Templates\nDESCRIPTION: Formats the last modification date using Hugo's time.Format function. This example formats the date in medium date format, producing output like 'Oct 19, 2023'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Lastmod.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Lastmod | time.Format \":date_medium\" }} → Oct 19, 2023\n```\n\n----------------------------------------\n\nTITLE: Adding Error Handling to IsDescendant in Hugo Templates\nDESCRIPTION: Shows how to implement error reporting with IsDescendant by using an 'else' clause when a page is not found, demonstrating defensive coding practices.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsDescendant.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $path := \"/auctions/2023-11\" }}\n{{ with .Site.GetPage $path }}\n  {{ $.IsDescendant . }} → true\n{{ else }}\n  {{ errorf \"Unable to find the section with path %s\" $path }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using PostCSS without Configuration File in Hugo\nDESCRIPTION: This example demonstrates how to use PostCSS in Hugo without a configuration file. It specifies plugins directly in the template options.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/PostCSS.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"use\" \"autoprefixer postcss-color-alpha\" }}\n{{ with resources.Get \"css/main.css\" | postCSS $opts }}\n  <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site Base URL (TOML)\nDESCRIPTION: Defines the basic configuration for the Hugo site within the 'hugo.toml' file. It sets the 'baseURL' parameter to 'https://example.com/', which is essential for generating correct absolute URLs within the built site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats2.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\nbaseURL = \"https://example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Overview of Inherited Hugo Command Flags - Plaintext\nDESCRIPTION: Lists command-line options inherited from parent Hugo commands that are available for use with 'hugo mod npm'. These parameters configure aspects such as clock, config file, directories, log level, vendor behavior, and output destinations. Each option takes a specific format (e.g., --clock string), and values should be set appropriately based on project requirements. Using these flags allows for flexible customization of the module handling environment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_npm.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Sorting Pages by Expiry Date Descending Hugo Go HTML Templates\nDESCRIPTION: This example shows how to render a list of pages sorted by expiry date in descending order using Hugo templates, achieved via the .Pages.ByExpiryDate.Reverse chain. Site configuration must support the expiryDate field in front matter for sorting. The snippet accepts .Pages as input and outputs an HTML listing with the most recently expiring pages first. It is useful for scenarios where displaying newest or unexpired content first is required.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByExpiryDate.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByExpiryDate.Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Capitalize and Pluralize List Titles - TOML\nDESCRIPTION: Configures Hugo's site-level settings to disable automatic capitalization and pluralization of list page titles by setting both 'capitalizeListTitles' and 'pluralizeListTitles' to 'false'. These settings must be placed in the Hugo configuration file (e.g., config.toml) and do not require additional dependencies. Set as boolean values and affect only list/section/taxonomy pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Title.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ncapitalizeListTitles = false\npluralizeListTitles = false\n```\n\n----------------------------------------\n\nTITLE: Querying Number of Pages with Len in Hugo - Go HTML Template\nDESCRIPTION: This code snippet shows how to use the Len function on the .Pages collection in a Hugo template to return the number of pages. It requires a page collection to be present in the template context, and the Len method is called directly on .Pages. The output is an integer representing the count of pages in the collection; in the provided example, this is 42.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/Len.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Pages.Len }} \\u2192 42\n```\n\n----------------------------------------\n\nTITLE: Chaining Complement Operation in Pipelines (Hugo, Go HTML Template)\nDESCRIPTION: This snippet shows how to chain the 'complement' function as part of a template pipeline, making the code more concise and readable. By piping $c3 into 'complement' along with $c1 and $c2 as arguments, it returns elements unique to $c3. This approach emphasizes Hugo template pipelines for clarity and composability. Requires no additional dependencies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Complement.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $c3 | complement $c1 $c2 }} → [1 2]\n```\n\n----------------------------------------\n\nTITLE: Emoji Shortcodes for Fruits (Plaintext)\nDESCRIPTION: A list of plaintext shortcodes used to represent fruit emojis. These shortcodes are typically used in Markdown or systems supporting emoji rendering via text codes, such as Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n:grapes:\n:melon:\n:watermelon:\n:mandarin:\n:orange:\n:tangerine:\n:lemon:\n:banana:\n:pineapple:\n:mango:\n:apple:\n:green_apple:\n:pear:\n:peach:\n:cherries:\n:strawberry:\n:blueberries:\n:kiwi_fruit:\n:tomato:\n:olive:\n:coconut:\n```\n\n----------------------------------------\n\nTITLE: Defining URL Aliases in Hugo Front Matter\nDESCRIPTION: Example of how to define URL aliases in a Hugo content file's front matter. This creates redirect paths that point to the current page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Aliases.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'About'\naliases = ['/old-url','/really-old-url']\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Time in Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the Hour method on a time.Time value in Hugo templates. It creates a time.Time object from a string timestamp and then extracts the hour component, which is in the range [0, 23].\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Hour.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Hour }} → 23\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Map to YAML Conversion using transform.Remarshal\nDESCRIPTION: This snippet shows the resulting HTML output after using transform.Remarshal to convert a map to YAML. The YAML is wrapped in a <pre> tag for proper formatting in HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Remarshal.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<pre>a: Hugo rocks!\nb:\n  answer: 42\n  question: What is 6x7?\nc:\n- foo\n- bar\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Dependencies via NPM - Shell Script\nDESCRIPTION: This shell script installs '@babel/core' and '@babel/cli' as development dependencies using npm. Required before enabling Babel compilation in Hugo, it should be run at the root of the Hugo project where JavaScript will be processed. Inputs are none; outputs are populated 'node_modules' and updated 'package.json'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Babel.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/core @babel/cli\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Values for a Single HTTP Header in Hugo resources.GetRemote (Go HTML Template)\nDESCRIPTION: This snippet instructs how to specify multiple values for a single HTTP header using a slice, as required by HTTP multi-value header conventions. The header X-List is set to an array of strings, illustrating proper map and slice handling in Go HTML template context. Useful for endpoints requiring repeated headers for a key.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://example.org/api\" }}\n{{ $opts := dict\n  \"headers\" (dict \"X-List\" (slice \"a\" \"b\" \"c\"))\n}}\n{{ $resource := resources.GetRemote $url $opts }}\n```\n\n----------------------------------------\n\nTITLE: Getting Page Word Count in Hugo (Go HTML Template)\nDESCRIPTION: This snippet demonstrates the usage of the `.WordCount` method on a Hugo page variable (`.`) within a Go HTML template. It outputs the exact number of words found in the page's content, returning an integer. The example shows it returning `103`. For rounding to the nearest multiple of 100, the `FuzzyWordCount` method should be used instead.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/WordCount.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .WordCount }} → 103\n```\n\n----------------------------------------\n\nTITLE: Creating a Link to a Term Page Using urls.URLize in Hugo Templates\nDESCRIPTION: This Go HTML template demonstrates how to use the urls.URLize function to create a link to a taxonomy term page. It uses the .Site.Taxonomies index to find the term and generate the appropriate link.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/URLize.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomy := \"authors\" }}\n{{ $term := \"Victor Hugo\" }}\n{{ with index .Site.Taxonomies $taxonomy (urlize $term) }}\n  <a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Querying Image Width with Hugo Template - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to access the width of an image resource using the .Width property in Hugo templating. It utilizes the resources.Get function to retrieve a local image and the with statement to safely operate on the resource. The method returns the width as an integer. No external dependencies are required aside from standard Hugo template functions. This usage is constrained to contexts where the specified image exists in the resources folder.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Width.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .Width }} → 600\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Reading Speeds in Hugo TOML\nDESCRIPTION: This TOML configuration snippet shows how to set custom reading speeds for different languages in a multilingual Hugo site. It defines parameters (`reading_speed`) within the `[languages.<lang_code>.params]` sections of the site configuration (e.g., `hugo.toml` or `config.toml`). This allows for more accurate reading time calculations tailored to each language, which can then be used in templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/ReadingTime.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[languages]\n  [languages.de]\n    contentDir = 'content/de'\n    languageCode = 'de-DE'\n    languageName = 'Deutsch'\n    weight = 2\n    [languages.de.params]\n    reading_speed = 179\n  [languages.en]\n    contentDir = 'content/en'\n    languageCode = 'en-US'\n    languageName = 'English'\n    weight = 1\n    [languages.en.params]\n      reading_speed = 228\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML for Books Page Menu\nDESCRIPTION: This HTML snippet demonstrates the result of rendering the main menu when viewing the 'books' page. The 'Books' link is marked as active.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Menus.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<nav class=\"menu\">\n  <a href=\"/\">Home</a>\n  <a class=\"active\" aria-current=\"page\" href=\"/books/\">Books</a>\n  <a href=\"/films/\">Films</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Taxonomies in Hugo Site Configuration - YAML/TOML\nDESCRIPTION: This snippet shows how to set up the default taxonomies in the Hugo configuration file, mapping keys like 'category' to their plural forms such as 'categories'. Requires a working Hugo project and placement in the root configuration file (config.toml, config.yaml, or config.json). The purpose is to define which taxonomies the website will recognize; key-value pairs associate singular and plural forms for consistent usage throughout the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/taxonomies.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntaxonomies:\n  category: categories\n  tag: tags\n```\n\n----------------------------------------\n\nTITLE: HTML Output of GoAT Diagram Rendering\nDESCRIPTION: The HTML output generated when a GoAT diagram is rendered in Hugo. The SVG is wrapped in a div with appropriate classes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/diagrams/Goat.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"goat svg-container\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" font-family=\"Menlo,Lucida Console,monospace\" viewBox=\"0 0 352 57\">\n    ...\n  </svg>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing LogicalName in Hugo Templates\nDESCRIPTION: Shows how to get the file name using the LogicalName method in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .LogicalName }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Hugo Environment via Environment Variable\nDESCRIPTION: Environment variable that can be used to set Hugo's environment setting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/environment.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHUGO_ENVIRONMENT\n```\n\n----------------------------------------\n\nTITLE: Assigning Taxonomic Weights in Hugo Front Matter (TOML)\nDESCRIPTION: Shows how to assign weights to specific taxonomies ('tags', 'categories') within a content file's TOML front matter using the `taxonomyname_weight` convention (e.g., `tags_weight`, `categories_weight`). This weight controls the sorting order of this content piece within the respective taxonomy listing pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/taxonomies.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n{{< code-toggle file=hugo >}}\ntitle = \"foo\"\ntags = [ \"a\", \"b\", \"c\" ]\ntags_weight = 22\ncategories = [\"d\"]\ncategories_weight = 44\n{{</ code-toggle >}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Previous and Next Links with Existence Check in Hugo Template - Go HTML Template\nDESCRIPTION: This snippet demonstrates a best practice by checking for the existence of the previous and next pages with 'with' clauses before rendering navigation links. It is functionally identical to the earlier single page template snippet and protects against errors or empty anchor tags when pages do not exist. Requires Hugo templating environment and .Page context. Output is conditional anchor tags for previous and next navigation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/page/nextinsection-and-previnsection.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .PrevInSection }}\n  <a href=\"{{ .RelPermalink }}\">Previous</a>\n{{ end }}\n\n{{ with .NextInSection }}\n  <a href=\"{{ .RelPermalink }}\">Next</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using safeURL to Declare Safe URL in Hugo Template\nDESCRIPTION: This snippet demonstrates how to use the `safeURL` function (an alias for `safe.URL`) in a Hugo template. It pipes the variable `$href` (containing an `irc:` URL) through `safeURL` before outputting it in the `href` attribute. This explicitly marks the URL string as safe, bypassing Hugo's default sanitization for this specific instance.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/URL.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $href := \"irc://irc.freenode.net/#golang\" }}\n<a href=\"{{ $href | safeURL }}\">IRC</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics ID - Hugo Configuration (TOML)\nDESCRIPTION: Defines the Google Analytics 4 measurement ID in Hugo’s config file. The [services.googleAnalytics] block specifies the tracking code as the 'id' property. Essential prerequisite for enabling analytics tracking with Hugo's GA template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_4\n\nLANGUAGE: hugo\nCODE:\n```\n[services.googleAnalytics]\nid = \"G-MEASUREMENT_ID\"\n```\n\n----------------------------------------\n\nTITLE: Date comparison with predefined dates in collections.Where\nDESCRIPTION: Example showing how to filter pages based on their creation date compared to a specific point in time.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $startOfYear := time.AsTime (printf \"%d-01-01\" now.Year) }}\n{{ $pages := where .Site.RegularPages \"Date\" \"lt\" $startOfYear }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hugo Module from Command Line - Shell\nDESCRIPTION: This snippet illustrates the usage of the 'hugo mod init' command in the shell to initialize a Hugo Module. It demonstrates both the command structure and how arguments (e.g., GitHub module path) can be provided. No dependencies are required except Hugo itself. Inputs include optional flags and arguments; the output is a scaffolded Hugo Module ready for use, written to the invoked directory. The command can be further customized via the listed flags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_init.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod init [flags] [args]\n```\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod init github.com/gohugoio/testshortcodes\n```\n\n----------------------------------------\n\nTITLE: Running hugo deploy with Arguments and Flags - CLI\nDESCRIPTION: This snippet demonstrates the syntax for running the 'hugo deploy' command with optional flags and arguments. It is intended for use in a CLI environment where users execute the Hugo deployment process through the terminal. The primary input parameters are command-line flags, which can control behavior such as confirmation prompts, dry runs, forced uploads, CDN invalidation, deletion limits, target specification, and worker concurrency. Outputs and errors are shown in the CLI; there are no direct code dependencies except for the presence of the 'hugo' executable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_deploy.md#2025-04-23_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nhugo deploy [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hugo Front Matter Field Example\nDESCRIPTION: Shows example usage of front matter fields in Hugo, specifically the basic syntax for title and date fields.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/field.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: field\n---\n```\n\n----------------------------------------\n\nTITLE: Emoji Shortcodes for Other Plants (Plaintext)\nDESCRIPTION: A list of plaintext shortcodes used to represent various plant-related emojis (excluding flowers). These shortcodes are typically used in Markdown or systems supporting emoji rendering via text codes, such as Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n:seedling:\n:potted_plant:\n:evergreen_tree:\n:deciduous_tree:\n:palm_tree:\n:cactus:\n:ear_of_rice:\n:herb:\n:shamrock:\n:four_leaf_clover:\n:maple_leaf:\n:fallen_leaf:\n:leaves:\n:empty_nest:\n:nest_with_eggs:\n:mushroom:\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Title in Hugo Templates\nDESCRIPTION: Shows how to retrieve and display the configured site title within Hugo templates using the .Site.Title variable\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Title.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Title }} → My Documentation Site\n```\n\n----------------------------------------\n\nTITLE: Creating a Link to Current Section Page in Hugo Templates\nDESCRIPTION: A template code example showing how to create a hyperlink to the current section using the CurrentSection.RelPermalink for the URL and CurrentSection.LinkTitle for the link text.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/CurrentSection.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<a href=\"{{ .CurrentSection.RelPermalink }}\">{{ .CurrentSection.LinkTitle }}</a>\n```\n\n----------------------------------------\n\nTITLE: Detecting Shortcode Usage in Hugo Base Template\nDESCRIPTION: Demonstrates how to use the HasShortcode method to conditionally load CSS based on shortcode presence on a page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_21\n\nLANGUAGE: go-html-template\nCODE:\n```\n<head>\n  ...\n  {{ if .HasShortcode \"audio\" }}\n    <link rel=\"stylesheet\" src=\"/css/audio.css\">\n  {{ end }}\n  ...\n</head>\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Minutes in Hugo Go Templates\nDESCRIPTION: This snippet demonstrates how to parse a duration string and convert it to a floating point number of minutes. The example parses a string of '3.5h2.5m1.5s' which equals 212.525 minutes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/duration/Minutes.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }}\n{{ $d.Minutes }} → 212.525\n```\n\n----------------------------------------\n\nTITLE: Linking to First Site by Index (Go HTML Template)\nDESCRIPTION: Demonstrates the equivalent of accessing the default site using the index function on the .Sites collection in Hugo templates. Requires multiple sites configured and uses 0-based indexing to retrieve the default site. Outputs an anchor tag linking to the first site's homepage with its title, used inside a template block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sites.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with index .Sites 0 }}\n  <a href=\"{{ .Home.Permalink }}\">{{ .Title }}</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Balance Filter - Hugo Images - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to create an image color balance filter in a Hugo template by calling the images.ColorBalance function with specific red, green, and blue percentages. It requires Hugo's images module and is written in Go HTML templating. The key parameters are percentage changes for the red, green, and blue channels, each constrained to the range [-100, 500]. The output is an image filter object that can be applied to images using Hugo's image processing pipeline.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/ColorBalance.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.ColorBalance -10 10 50 }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site with TOML\nDESCRIPTION: This TOML configuration file ('hugo.toml') provides basic settings for the Hugo site being built. It sets the 'baseURL' to 'http://example.org/' and uses 'disableKinds' to prevent Hugo from generating specific types of pages like RSS feeds, sitemaps, etc., likely to simplify the test case and focus on core content generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_build.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\n```\n\n----------------------------------------\n\nTITLE: Dumping Data Structures with debug.Dump in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the `debug.Dump` template function in Hugo to inspect a data structure, specifically the `.Params` context variable (representing page front matter). The output is wrapped in `<pre>` tags for formatted display in HTML. This is useful for understanding the contents and structure of complex variables during template development.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/inspection.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump .Params }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Using os.ReadFile in a Hugo Template\nDESCRIPTION: Demonstrates calling the `readFile` function (an alias for `os.ReadFile`) within a Go HTML template to read the content of \"README.md\". The function attempts to find the file relative to the project root or content directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/ReadFile.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ readFile \"README.md\" }}\n```\n\n----------------------------------------\n\nTITLE: Defining Site Parameters in Hugo Configuration\nDESCRIPTION: Shows how to define a custom parameter 'display_toc' in the Hugo configuration file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Param.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[params]\ndisplay_toc = true\n```\n\n----------------------------------------\n\nTITLE: Accessing Ext in Hugo Templates\nDESCRIPTION: Demonstrates how to retrieve the file extension using the Ext method in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .Ext }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using MainSections in Hugo Templates\nDESCRIPTION: Shows how to use the .Site.MainSections function in a Hugo template to retrieve the configured main sections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/MainSections.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.MainSections }} → [books films]\n```\n\n----------------------------------------\n\nTITLE: Integrating Syntax Highlighting CSS in Hugo Base Template\nDESCRIPTION: Code snippet for adding syntax highlighting CSS to a Hugo base template. It uses the resources.Get function to fetch the CSS file and adds integrity and crossorigin attributes for security.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/markup.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n<head>\n  ...\n  {{ with resources.Get \"css/syntax.css\" }}\n    <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\">\n  {{ end }}\n  ...\n</head>\n```\n\n----------------------------------------\n\nTITLE: Declaring HTML Attribute as Safe with safeHTMLAttr - Go HTML Template\nDESCRIPTION: This snippet demonstrates the use of the safeHTMLAttr function to mark a date attribute as trusted within a template expression in Hugo. By piping the printf result to safeHTMLAttr, the rendered output will contain the specified attribute verbatim, avoiding unwanted escaping. Dependencies include Hugo templating and access to the safeHTMLAttr function. The input is the .Date variable, and the output is a time element with a verbatim datetime attribute. Use of this function should be restricted to trusted data sources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/HTMLAttr.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Date }}\n  {{ $humanDate := time.Format \"2 Jan 2006\" . }}\n  {{ $machineDate := time.Format \"2006-01-02T15:04:05-07:00\" . }}\n  <time {{ printf \"datetime=%q\" $machineDate | safeHTMLAttr }}>{{ $humanDate }}</time>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating Syntax Highlighting CSS with Rougify (Text)\nDESCRIPTION: Provides an example shell command using `rougify` (the command-line tool for Rouge) to generate CSS rules for syntax highlighting. It uses the 'monokai.sublime' theme and saves the output to `assets/css/syntax.css`, which can then be included in the Hugo site's assets. This step is necessary after configuring AsciiDoc to use Rouge for highlighting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/markup.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nrougify style monokai.sublime > assets/css/syntax.css\n```\n\n----------------------------------------\n\nTITLE: Executing the 'hugo convert toYAML' Command (Shell)\nDESCRIPTION: Shows the basic syntax for running the `hugo convert toYAML` command. This command processes the content directory and converts all front matter to YAML format. Optional flags and arguments can be appended.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert_toYAML.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo convert toYAML [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Using define with the template function in Hugo templates\nDESCRIPTION: This example shows how to define a named template that can be rendered using the template function. The template is called with a dictionary containing an 'answer' value and formats a string output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/define.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"foo\" (dict \"answer\" 42) }}\n\n{{ define \"foo\" }}\n  {{ printf \"The answer is %v.\" .answer }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Time Values in Hugo\nDESCRIPTION: Demonstrates how to format time.Time values using Hugo's time.Format method. It shows examples of different date and time formats.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ .Date.Format \"Monday, Jan 2, 2006\" }}\n```\n\nLANGUAGE: go\nCODE:\n```\n{{ .Date.Format \"2006-01-02\" }}\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code for Phone Number in Hugo\nDESCRIPTION: Creates a QR code containing a telephone number in the tel: URI format. When scanned, this QR code would typically prompt a mobile device to dial the number.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/qr.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{</* qr text=\"tel:+12065550101\" /*/>}}\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Rendering Default Language Home Page Link\nDESCRIPTION: This Go HTML template shows an alternative approach to link to the default language home page by using the index function to access the first site in the Sites collection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Sites.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with index .Site.Sites 0 }}\n  <a href=\"{{ .Home.Permalink }}\">{{ .Title }}</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Limiting Replacements with Hugo's replace Function in Go HTML Template\nDESCRIPTION: This snippet shows how to use the optional LIMIT argument with Hugo's 'replace' function to restrict the number of substring substitutions performed. The example replaces up to two occurrences of the letter \\\"a\\\" with \\\"z\\\" in the input string \\\"aabbaabb\\\". The LIMIT parameter defines the maximum replacements to apply. No external dependencies are needed. The output string reflects only the first LIMIT replacements, with the rest of the string unchanged.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Replace.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ replace \"aabbaabb\" \"a\" \"z\" 2 }} → zzbbaabb\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Hugo Template Functions in Go\nDESCRIPTION: This code snippet illustrates how to use conditional statements in Hugo templates. It demonstrates the use of 'if' and 'else' statements to render content based on certain conditions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/unfinished/noop.txt#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{ if .IsHome }}\n  <h1>Welcome to the homepage</h1>\n{{ else }}\n  <h1>{{ .Title }}</h1>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Name for Remote Resource Using Hugo Templates - Go HTML Template\nDESCRIPTION: Fetches a remote image resource via resources.GetRemote and outputs its .Name value, which Hugo generates as a hash-derived file name for caching and uniqueness. Requires Hugo's remote resource functionality. Input: URL string. Output: deterministic hashed file name with extension, suitable for referencing in builds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Name.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.GetRemote \\\"https://example.org/images/a.jpg\\\" }}\\n  {{ .Name }} → /a_18432433023265451104.jpg\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Passthrough Extension in Hugo\nDESCRIPTION: Hugo configuration to enable the Goldmark Passthrough extension and define custom delimiters for both block and inline passthrough elements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/passthrough.md#2025-04-23_snippet_1\n\nLANGUAGE: toml/yaml\nCODE:\n```\n[markup.goldmark.extensions.passthrough]\nenable = true\n[markup.goldmark.extensions.passthrough.delimiters]\nblock = [['\\[', '\\]'], ['$$', '$$']]\ninline = [['\\(', '\\)']]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Slice of Maps with range\nDESCRIPTION: Shows how to iterate over a slice of dictionary objects, accessing properties of each map during iteration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m := slice\n  (dict \"name\" \"John\" \"age\" 30)\n  (dict \"name\" \"Will\" \"age\" 28)\n  (dict \"name\" \"Joey\" \"age\" 24)\n}}\n{{ range $m }}\n  <p>{{ .name }} is {{ .age }}</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered Output When CSS is Not Declared Safe - HTML\nDESCRIPTION: This snippet shows the output HTML generated by Hugo when a CSS value is not explicitly marked as safe. Rather than outputting potentially unsafe code, Hugo inserts 'ZgotmplZ' as a placeholder. This output illustrates Hugo's security enforcement. No dependencies are needed, and the output shows how untrusted CSS appears in the generated HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/CSS.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"ZgotmplZ\">foo</p>\n```\n\n----------------------------------------\n\nTITLE: Embedding Specific File from GitHub Gist in Hugo\nDESCRIPTION: Shows how to embed a specific file from a GitHub Gist by adding the filename parameter to the gist shortcode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/gist.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{</* gist user 23932424365401ffa5e9d9810102a477 list.html */>}}\n```\n\n----------------------------------------\n\nTITLE: Terminating block statements in Hugo templates\nDESCRIPTION: Demonstrates how to use the end statement to close a block definition. The block statement defines a template section that can be overridden in child templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/end.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ block \"main\" . }}{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Hugo Module Mount and Cachebuster Configuration for hugo_stats.json (TOML)\nDESCRIPTION: This TOML configuration snippet provides Hugo module settings needed to ensure proper handling of hugo_stats.json during defer-based processing, such as with TailwindCSS. It demonstrates disabling file watching on hugo_stats.json, enabling build statistics, and setting up cachebusters to invalidate CSS resources when configuration or stats change. Prerequisites: a Hugo project using modules, with build stats enabled. Inputs include file paths and glob patterns, controlling cache invalidation. Designed for development environments using server mode or hugo -w.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/templates/Defer.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[module]\n[[module.mounts]]\nsource       = \"hugo_stats.json\"\ntarget       = \"assets/notwatching/hugo_stats.json\"\ndisableWatch = true\n[build.buildStats]\nenable = true\n[[build.cachebusters]]\nsource = \"assets/notwatching/hugo_stats\\\\.json\"\ntarget = \"styles\\\\.css\"\n[[build.cachebusters]]\nsource = \"(postcss|tailwind)\\\\.config\\\\.js\"\ntarget = \"css\"\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS and Autoprefixer with npm\nDESCRIPTION: This command installs the necessary Node.js packages for using PostCSS with Autoprefixer in a Hugo project. It installs postcss, postcss-cli, and autoprefixer as dev dependencies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/PostCSS.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D postcss postcss-cli autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Iterating Sorted Pages by Language (Descending) in Go Template\nDESCRIPTION: This Go HTML template snippet shows how to iterate through all site pages (`.Site.AllPages`) sorted by language in reverse alphabetical order. It achieves this by chaining the `.Reverse` method after `.ByLanguage`. Similar to the ascending example, it generates an H2 heading with a link (`.RelPermalink`) and link text (`.LinkTitle`) for each page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByLanguage.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.AllPages.ByLanguage.Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Nested Menu Structure in Hugo\nDESCRIPTION: The final HTML output produced by Hugo when rendering the nested menu template, showing the hierarchical structure with appropriate nesting of list elements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Children.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>\n    <a href=\"/products/\">Products</a>\n    <ul>\n      <li><a href=\"/products/product-1/\">Product 1</a></li>\n      <li><a href=\"/products/product-2/\">Product 2</a></li>\n    </ul>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output\nDESCRIPTION: The resulting HTML output showing section links after template processing\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Sections.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2><a href=\"/books/\">Books</a></h2>\n<h2><a href=\"/films/\">Films</a></h2>\n```\n\n----------------------------------------\n\nTITLE: Using upper Function in Hugo Go Templates\nDESCRIPTION: This snippet demonstrates the usage of the `upper` function, an alias for `strings.ToUpper`, within a Hugo Go template. It takes a string input (\"BatMan\") and returns the same string with all characters converted to uppercase (\"BATMAN\").\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/ToUpper.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ upper \"BatMan\" }} → BATMAN\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Build with Path Warnings Enabled (Shell)\nDESCRIPTION: This shell command executes the Hugo static site generator with the `--printPathWarnings` flag enabled. This flag instructs Hugo to report any potential issues related to duplicate output paths during the build process, useful for identifying content files with conflicting URLs. Requires Hugo installation and execution within a project directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo --printPathWarnings\n```\n\n----------------------------------------\n\nTITLE: Inline Code Highlighting Example in Hugo\nDESCRIPTION: Example of using the highlight shortcode for inline code snippets rather than code blocks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/highlight.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThis is some {{</* highlight go \"hl_inline=true\" */>}}fmt.Println(\"inline\"){{</* /highlight */>}} code.\n```\n\n----------------------------------------\n\nTITLE: Setting Development Environment Parameters in TOML\nDESCRIPTION: This configuration file (`config/development/params.toml`) defines parameters specific to the 'development' environment. It sets a custom parameter `myenv` to \"thedevelopment\". Since `hugo server` runs in the development environment by default, this value overrides any default or production setting for `myenv` during the test.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server.txt#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n-- config/development/params.toml --\nmyenv = \"thedevelopment\"\n```\n\n----------------------------------------\n\nTITLE: Enumerating Inherited Hugo CLI Options - Shell\nDESCRIPTION: Displays the full set of options inherited from parent Hugo CLI commands that can be used in conjunction with 'hugo list expired'. These options cover configuration, logging, source/destination paths, theming, environment settings, and build locking. Users must ensure that paths (e.g., for source or configDir) exist and that option values such as log level or clock are correctly formatted.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_expired.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Language Settings in Hugo (Hugo Syntax)\nDESCRIPTION: Defines the fundamental language settings for a Hugo project, specifying the default language, content directory structure, and options for redirect behavior. These settings should be placed in the site\\'s root configuration file (often config.toml). Key parameters are 'defaultContentLanguage' (the language code), 'defaultContentLanguageInSubdir' (output organization), 'disableDefaultLanguageRedirect' (alias redirect options), and 'disableLanguages' (list of language keys to disable). No external dependencies are required beyond Hugo itself; all settings are native configuration flags. Inputs/outputs: No runtime inputs, but settings affect build output; booleans and string arrays must be valid as per Hugo config syntax.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/languages.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\ndefaultContentLanguage = 'en'\\ndefaultContentLanguageInSubdir = false\\ndisableDefaultLanguageRedirect = false\\ndisableLanguages = []\n```\n\n----------------------------------------\n\nTITLE: Shortcode Call Syntax for Hugo - Text\nDESCRIPTION: This code shows two forms of Hugo shortcode call syntax for including content snippets or custom template logic. The {{</*/* foo */*/>}} and {{%/*/* foo */*/%}} syntax calls shortcodes in angle and percent forms, respectively. Requirements include Hugo's support for the named 'foo' shortcode, with parameters passed as needed for rendering content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n{{</*/* foo */*/>}}\n{{%/*/* foo */*/%}}\n```\n\n----------------------------------------\n\nTITLE: Example of proper Git commit message format\nDESCRIPTION: This example shows the proper format for Git commit messages in the Hugo project, including prefix, capitalized title, detailed description, and issue reference.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ntpl: Add custom index function\n\nAdd a custom index template function that deviates from the stdlib simply by not\nreturning an \"index out of range\" error if an array, slice or string index is\nout of range.  Instead, we just return nil values.  This should help make the\nnew default function more useful for Hugo users.\n\nFixes #1949\n```\n\n----------------------------------------\n\nTITLE: Executing the Hugo Build Command (Shell)\nDESCRIPTION: This snippet shows the basic syntax for running the `hugo build` command from a terminal. It indicates that the command can optionally be followed by various flags to control the build process. Requires the Hugo executable to be installed and accessible.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_build.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo build [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Bug Fix Branch in Shell\nDESCRIPTION: Shows how to create and switch to a new Git branch specifically for fixing a bug, adhering to Hugo's naming convention which includes the type ('fix'), a descriptive name, and the associated issue number. Requires Git to be installed and executed within a Git repository.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b fix/fix-some-bug-99999\n```\n\n----------------------------------------\n\nTITLE: Unescaping HTML Entities with transform.HTMLUnescape in Go HTML Template\nDESCRIPTION: Demonstrates the usage of transform.HTMLUnescape function to convert HTML entities into their corresponding characters. It shows examples of unescaping ampersand and greater-than symbols.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/HTMLUnescape.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ htmlUnescape \"Lilo &amp; Stitch\" }} → Lilo & Stitch\n{{ htmlUnescape \"7 &gt; 6\" }} → 7 > 6\n```\n\n----------------------------------------\n\nTITLE: Specifying hugo deploy Command Options - CLI\nDESCRIPTION: This snippet lists the supported options that can be used with the 'hugo deploy' command. Each flag configures a specific aspect of the deployment, such as confirmation dialogs, dry-run mode, file deletion limits, CDN cache invalidation, and target/output definitions. All options are provided as standard command-line flags suitable for a Unix-like shell. Users must ensure that the Hugo tool is installed and available on their system.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_deploy.md#2025-04-23_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\n      --confirm          ask for confirmation before making changes to the target\n      --dryRun           dry run\n      --force            force upload of all files\n  -h, --help             help for deploy\n      --invalidateCDN    invalidate the CDN cache listed in the deployment target (default true)\n      --maxDeletes int   maximum # of files to delete, or -1 to disable (default 256)\n      --target string    target deployment from deployments section in config file; defaults to the first one\n      --workers int      number of workers to transfer files. defaults to 10 (default 10)\n```\n\n----------------------------------------\n\nTITLE: Comparing Time Values in Hugo\nDESCRIPTION: Shows how to compare time.Time values using methods like Equal, Before, and After in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ if .ExpiryDate.Before now }}\n  This content has expired\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using HasChildren Method in Hugo Templates\nDESCRIPTION: Template code that demonstrates how to use the HasChildren method to conditionally render child menu items. The template iterates through the main menu, checking if each entry has children, and renders a nested list structure accordingly.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/HasChildren.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li>\n      <a href=\"{{ .URL }}\">{{ .Name }}</a>\n      {{ if .HasChildren }}\n        <ul>\n          {{ range .Children }}\n            <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n          {{ end }}\n        </ul>\n      {{ end }}\n    </li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Single Page Layout (HTML/Go Template)\nDESCRIPTION: This HTML file defines the default layout for single content pages (`layouts/_default/single.html`) in the Hugo site. Similar to the index layout, it uses Go template syntax (`{{ .Title }}`, `{{ site.BaseURL }}`) to render the specific page's title and the site's base URL. This layout is used for pages like `/p1/` and `/p2/`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_content.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/_default/single.html --\nTitle: {{ .Title }}|BaseURL: {{ site.BaseURL }}|\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Nanoseconds Since Unix Epoch in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the UnixNano function in Hugo to convert a time.Time value to nanoseconds since the Unix epoch. It first creates a time.Time object using the AsTime function, then applies UnixNano to get the nanosecond representation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/UnixNano.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.UnixNano }} → 1674891898000000000\n```\n\n----------------------------------------\n\nTITLE: Accessing a Global Resource in Hugo Go Templates\nDESCRIPTION: Retrieves an image named 'sunset.jpg' from the global `assets/images/` directory using the `resources.Get` function. The image is assigned to the `$image` variable. Global resources are accessible from any template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := resources.Get \"images/sunset.jpg\" }}\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Params with js.Build in Hugo Go HTML Template\nDESCRIPTION: This snippet shows how to use Hugo's resources pipeline to obtain a JavaScript asset and run js.Build, injecting configuration parameters as a JSON object. The code uses Go HTML templating (Go templates) with chaining pipes and the dict function. Requires Hugo static site generator with js.Build resource pipeline. Parameters such as API URLs are injected for JS code to consume. The output is a processed JS file with embedded build-time params.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/js/options.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $js := resources.Get \"js/main.js\" | js.Build (dict \"params\" (dict \"api\" \"https://example.org/api\")) }}\n```\n\n----------------------------------------\n\nTITLE: Rendered Escaped Shortcode Example (Text)\nDESCRIPTION: Demonstrates the resulting output of an escaped shortcode example after Hugo renders the content. Input is a Markdown code block containing shortcodes with escape sequences; output is shown as unescaped shortcode-like tags to the viewer. This helps users understand how Hugo will display documentation on shortcodes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/syntax-highlighting.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{{</* shortcode-1 */>}}\n\n{{%/* shortcode-2 */%}}\n```\n\n----------------------------------------\n\nTITLE: Using collections.Union with Slices in Hugo Templates\nDESCRIPTION: Demonstrates basic usage of the collections.Union function to merge arrays/slices. The function removes duplicate elements and can handle nil values gracefully.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Union.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ union (slice 1 2 3) (slice 3 4 5) }} → [1 2 3 4 5]\n\n{{ union (slice 1 2 3) nil }} → [1 2 3]\n\n{{ union nil (slice 1 2 3) }} → [1 2 3]\n\n{{ union nil nil }} → []\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Server Startup and Response - Bash\nDESCRIPTION: This Bash snippet initiates the Hugo server (`hugo server --renderToMemory &`), waits until it is available via `waitServer`, and then issues HTTP GET requests to test English and French home pages, verifying their titles match expected values. Finally, it stops the server and asserts no standard error output occurred. Dependencies include the existence of the Hugo binary, utility functions like `waitServer`, `httpget`, and `stopServer`, and the correct setup of environment variables such as `$HUGOTEST_BASEURL_0` and `$HUGOTEST_BASEURL_1`. Inputs are the configured base URLs and expected output titles; outputs are pass/fail indications of the validation and any error logs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__multihost.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test the hugo server command.\n\n# We run these tests in parallel so let Hugo decide which port to use.\nhugo server --renderToMemory &\n\nwaitServer\n\nhttpget $HUGOTEST_BASEURL_0 'Title: Hugo Server Test' $HUGOTEST_BASEURL_0\nhttpget $HUGOTEST_BASEURL_1 'Title: Hugo Serveur Test' $HUGOTEST_BASEURL_1\n\nstopServer\n! stderr .\n\n```\n\n----------------------------------------\n\nTITLE: Verifying `hugo env` Output in Shell\nDESCRIPTION: This shell script executes the `hugo env` command. It then asserts that the standard output includes the 'GOARCH' environment variable string and that no errors are produced on standard error (`! stderr .`). This test validates the basic functionality of the `hugo env` command and requires the `hugo` executable to be available in the system's PATH.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/env.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test the hugo env command.\n\nhugo env\nstdout 'GOARCH'\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Accessing Inner Content in a Hugo Shortcode Template (Go HTML Template)\nDESCRIPTION: Defines the Hugo shortcode template (`layouts/shortcodes/card.html`). It retrieves a 'title' parameter using `.Get` and accesses the content between the shortcode tags using `.Inner`. The `strings.TrimSpace` function is used to remove potential leading/trailing whitespace from the inner content before outputting it within a `div`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Inner.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<div class=\"card\">\n  {{ with .Get \"title\" }}\n    <div class=\"card-title\">{{ . }}</div>\n  {{ end }}\n  <div class=\"card-content\">\n    {{ .Inner | strings.TrimSpace }}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Border Using Image Padding in Go HTML Template\nDESCRIPTION: Shows a concise method to add a uniform border to an image. It applies the `images.Padding` filter to an existing image resource (`$img`), specifying a single padding value of 2 (which applies 2px padding to all four sides) and the color gray (`#777`). This effectively creates a 2px gray border around the image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Padding.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $img = $img.Filter (images.Padding 2 \"#777\") }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Code Owners in Hugo Template\nDESCRIPTION: Go HTML template example demonstrating how to iterate through and render the code owners for a content page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/CodeOwners.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .CodeOwners }}\n  {{ . }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Example Error Output from Failing resources.GetRemote\nDESCRIPTION: This text snippet shows the console output generated when the preceding Go HTML template example fails the Hugo build. The error message indicates that the `resources.GetRemote` function call failed because the DNS lookup for the specified domain ('broken-example.org') was unsuccessful.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Err.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nERROR error calling resources.GetRemote: Get \"https://broken-example.org/images/a.jpg\": dial tcp: lookup broken-example.org on 127.0.0.53:53: no such host\n```\n\n----------------------------------------\n\nTITLE: Accessing Taxonomy Plural Name in Go HTML Template\nDESCRIPTION: Shows how to access the plural name of a taxonomy using the Data method within a taxonomy template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Data.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Data.Plural }} → genres\n```\n\n----------------------------------------\n\nTITLE: Logging Formatted Errors in Hugo Templates\nDESCRIPTION: Demonstrates using fmt.Errorf to log a formatted error message with variable interpolation. The function prints to the ERROR log and fails the build. Takes a format string and input variables as arguments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Errorf.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ errorf \"The %q shortcode requires a src argument. See %s\" .Name .Position }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hugo Pagination Navigation using `with .Next`\nDESCRIPTION: This Hugo template snippet presents an alternative method for building pagination navigation without using the `.HasNext` method directly. It sets up a paginator similarly to the previous example. However, instead of checking `.HasNext`, it uses a `{{ with .Next }}` block. This block only executes and renders the \"Next\" link if the `.Next` page object exists, achieving the same conditional rendering outcome. It relies on the Paginator object and its associated page objects (`.First`, `.Prev`, `.Next`, `.Last`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/HasNext.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <ul>\n    {{ with .First }}\n      <li><a href=\"{{ .URL }}\">First</a></li>\n    {{ end }}\n    {{ with .Prev }}\n      <li><a href=\"{{ .URL }}\">Previous</a></li>\n    {{ end }}\n    {{ with .Next }}\n      <li><a href=\"{{ .URL }}\">Next</a></li>\n    {{ end }}\n    {{ with .Last }}\n      <li><a href=\"{{ .URL }}\">Last</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Cropping an Image without Resizing in Hugo Go Templates\nDESCRIPTION: Uses the `.Crop` method to crop an image resource (`$image`) to the specified dimensions ('600x400') without any resizing. Both width and height are required. The crop anchor point determines which part of the image is kept.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_12\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := $image.Crop \"600x400\" }}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Table Lookup in Hugo Menus\nDESCRIPTION: A Go HTML template snippet that looks up a translation for a menu entry using the entry's identifier. If no translation is found, it falls back to the menu entry's name.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_15\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ or (T .Identifier) .Name | safeHTML }}\n```\n\n----------------------------------------\n\nTITLE: Running Hugo Project Tests using Go\nDESCRIPTION: Executes the test suite for the Hugo project using the Go toolchain's built-in testing capabilities. The './...' pattern signifies running tests in the current directory and all subdirectories recursively. Requires Go to be installed and should be run from the Hugo project's root directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Resource Title in Hugo Page Resource (Go HTML Template)\nDESCRIPTION: Illustrates how to look up and render the custom title of a page resource defined in front matter using Hugo's Go HTML template syntax. The snippet retrieves a resource by its path from the page bundle and outputs the title property, which comes from front matter. No special dependencies are needed beyond the Hugo templating system. The input is the resource's relative path, and the output is the defined resource 'title' (e.g., 'A beautiful sunrise in Bryce Canyon').\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Title.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.Get \\\"images/a.jpg\\\" }}\n  {{ .Title }} → A beautiful sunrise in Bryce Canyon\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Loading Plotly JavaScript with HasShortcode\nDESCRIPTION: Example of using the HasShortcode function in a Hugo base template to conditionally load the Plotly JavaScript library only when a page contains the plotly shortcode, optimizing page load times.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/HasShortcode.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<head>\n  ...\n  {{ if .HasShortcode \"plotly\" }}\n    <script src=\"https://cdn.plot.ly/plotly-2.28.0.min.js\"></script>\n  {{ end }}\n  ...\n</head>\n```\n\n----------------------------------------\n\nTITLE: Default JavaScript String Embedding in Hugo Templates\nDESCRIPTION: This Go HTML Template snippet demonstrates assigning a string containing an ampersand to a variable `$title` and then embedding it directly within a JavaScript `const` declaration inside a `<script>` tag. Without explicit safety declarations, Hugo will escape special characters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/JSStr.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ $title := \"Lilo & Stitch\" }}\n<script>\n  const a = \"Title: \" + {{ $title }};\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Transpiling Sass to CSS with Default Options in Hugo\nDESCRIPTION: This snippet demonstrates how to use the toCSS function to transpile Sass to CSS with conditional handling for production environments, including sourcemap management, output style selection, and optional fingerprinting for integrity checks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/Sass.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"sass/main.scss\" }}\n  {{ $opts := dict\n    \"enableSourceMap\" (not hugo.IsProduction)\n    \"outputStyle\" (cond hugo.IsProduction \"compressed\" \"expanded\")\n    \"targetPath\" \"css/main.css\"\n    \"transpiler\" \"libsass\"\n  }}\n  {{ with . | toCSS $opts }}\n    {{ if hugo.IsProduction }}\n      {{ with . | fingerprint }}\n        <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\">\n      {{ end }}\n    {{ else }}\n      <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\">\n    {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended with Winget on Windows\nDESCRIPTION: Command to install the extended edition of Hugo using Microsoft's Winget package manager for Windows.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/windows.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwinget install Hugo.Hugo.Extended\n```\n\n----------------------------------------\n\nTITLE: Using len with Maps in Hugo Templates\nDESCRIPTION: Demonstrates how to count the number of key-value pairs in a map using the len function in Hugo templates. Returns the number of entries in the map.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/len.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ dict \"a\" 1 \"b\" 2  | len }} → 2\n{{ dict | len }} → 0\n```\n\n----------------------------------------\n\nTITLE: Template Lookup Order Naming Convention\nDESCRIPTION: This text snippet illustrates the recommended naming convention for Hugo templates to achieve the highest specificity according to the template lookup order. The format `[page kind].[output format].[suffix]` ensures the template is correctly selected for a given page kind and output format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n[page kind].[output format].[suffix]\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Defined Templates with the template Function\nDESCRIPTION: Shows how to define a template named \"foo\" and then execute it using the template function. The example passes a dictionary with an \"answer\" value to the template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/template.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"foo\" (dict \"answer\" 42) }}\n\n{{ define \"foo\" }}\n  {{ printf \"The answer is %v.\" .answer }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sitemap Change Frequency in Go Template\nDESCRIPTION: Retrieves the 'ChangeFreq' setting for the current page using the `.Sitemap` method. This value indicates how frequently the page content is likely to change (e.g., 'always', 'hourly', 'daily'). If not set in front matter, it falls back to the site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sitemap.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Sitemap.ChangeFreq }}\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Images with Data URIs in Hugo Template\nDESCRIPTION: Shows how to embed an image directly into HTML using a data URI. It fetches an image resource (`images/a.jpg`), gets its media type, accesses its `.Content`, encodes it using `base64Encode`, and constructs the `src` attribute for an `<img>` tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Content.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  <img src=\"data:{{ .MediaType.Type }};base64,{{ .Content | base64Encode }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from debug.Dump\nDESCRIPTION: Shows a sample JSON output when using debug.Dump on a books data structure, displaying an array of book objects with author, rating, and title properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/debug/Dump.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"author\": \"Victor Hugo\",\n    \"rating\": 4,\n    \"title\": \"The Hunchback of Notre Dame\"\n  },\n  {\n    \"author\": \"Victor Hugo\",\n    \"rating\": 5,\n    \"title\": \"Les Misérables\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Data Iteration Example\nDESCRIPTION: Shows the expected HTML output generated by the Go HTML template example that iterates over the sample book data. It displays categorized lists of fiction and non-fiction books.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Data.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Fiction</p>\n<ul>\n  <li>The Hunchback of Notre Dame (978-0140443530)</li>\n  <li>Les Misérables (978-0451419439)</li>\n</ul>\n<p>Nonfiction</p>\n<ul>\n  <li>The Ancien Régime and the Revolution (978-0141441641)</li>\n  <li>Interpreting the French Revolution (978-0521280495)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Including CSS Partial in Base Template\nDESCRIPTION: Example of how to call the Tailwind CSS partial template from the base template using partialCached for performance.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/TailwindCSS.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<head>\n  ...\n  {{ partialCached \"css.html\" . }}\n  ...\n<head>\n```\n\n----------------------------------------\n\nTITLE: Using BundleType Method in Hugo Templates\nDESCRIPTION: Shows how to access the BundleType method on a Page object within a Hugo template to determine if a page is a branch bundle, leaf bundle, or not a bundle at all.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/BundleType.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .BundleType }}\n```\n\n----------------------------------------\n\nTITLE: Asciidoc Code Block with Syntax Highlighting\nDESCRIPTION: Example of an Asciidoc code block with syntax highlighting. The example shows a Ruby Sinatra application with the #hello identifier and ruby language specification.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/markup.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n[#hello,ruby]\n----\nrequire 'sinatra'\n\nget '/hi' do\n  \"Hello World!\"\nend\n----\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Weighted Pages in Hugo\nDESCRIPTION: Shows the resulting HTML output after Hugo processes the template for rendering weighted pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Get.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h2><a href=\"/books/jamaica-inn/\">Jamaica inn</a></h2>\n<h2><a href=\"/books/death-on-the-nile/\">Death on the nile</a></h2>\n<h2><a href=\"/books/and-then-there-were-none/\">And then there were none</a></h2>\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Content with Passthrough Elements\nDESCRIPTION: Example of Markdown content with block and inline passthrough elements using specified delimiters for preservation through rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/passthrough.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis is a\n\n\\[block\\]\n\npassthrough element with opening and closing block delimiters.\n\nThis is an \\(inline\\) passthrough element with opening and closing inline delimiters.\n```\n\n----------------------------------------\n\nTITLE: Returning Permalinks in Hugo Templates using Go HTML Template\nDESCRIPTION: This example demonstrates how to retrieve and render a published URL for a resource using Hugo's Permalink method within a Go HTML template. It depends on the Hugo static site generator, specifically the resources module, and requires a valid resource to be fetched (e.g., an image or other content file). The 'resources.Get' function obtains the resource, and the '.Permalink' property outputs its public URL. The main input is the resource path, and the output is the full permalink; this should be used within a Hugo template context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Permalink.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .Permalink }} → https://example.org/images/a.jpg\n{{ end }}\n\n```\n\n----------------------------------------\n\nTITLE: Capturing Groups in Regular Expression Replacements - Go HTML Template\nDESCRIPTION: Illustrates the use of capturing groups within replaceRE, inserting matched sub-expressions into the replacement string using $1, $2, etc. In this example, a domain is extracted from a URL. Assumes a Hugo templating environment and highlights how match groups are referenced in the replacement output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/ReplaceRE.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := \"http://gohugo.io/docs\" }}\\n{{ replaceRE \"^https?://([^/]+).*\" \"$1\" $s }} → gohugo.io\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Regex Replacements with replaceRE - Go HTML Template\nDESCRIPTION: Demonstrates limiting the number of replacements performed by replaceRE by specifying the optional LIMIT parameter. In this example, only the first occurrence of consecutive dashes is replaced, leaving the remaining dashes intact. The snippet requires Hugo templates and accepts the replacement limit as an additional argument.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/ReplaceRE.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := \"a-b--c---d\" }}\\n{{ replaceRE `(-{2,})` \"-\" $s 1 }} → a-b-c---d\n```\n\n----------------------------------------\n\nTITLE: Applying a Sequence of Filters to an Image Using Resource Method Filter in Hugo (Go HTML Template)\nDESCRIPTION: This snippet uses the Filter method of a Hugo resource object to apply a pre-defined sequence of image filters to an image. The resources.Get function loads the original image, then the Filter method is invoked on it with the $filters slice passed as argument. The resulting processed image is output in an HTML img tag, leveraging the resource's RelPermalink, Width, and Height properties. Requires $filters slice, image resources, and valid Hugo configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Mask.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Filter $filters }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Draft Expired Content Page in Hugo Markdown\nDESCRIPTION: This snippet marks content as both 'expired' and 'draft', allowing testing of listings for draft and expired statuses concurrently. Main fields: 'date', 'expiryDate', 'draft'. Location: 'content/draftexpired.md'. Outputs: included in both draft and expired content results, but not future. Limitations: checks how Hugo reconciles overlapping states.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/list.txt#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/draftexpired.md --\n---\ndate: 2018-01-01\nexpiryDate: 2019-01-01\ndraft: true\n---\n\n```\n\n----------------------------------------\n\nTITLE: Example Content File Path for Ancestor/Descendant Analysis\nDESCRIPTION: This snippet shows the specific path to a content file (`benefit-1.md`) within the previously defined example structure. It's used to illustrate the concept of ancestors and descendants in Hugo's content hierarchy, setting the stage for the breadcrumb navigation example.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/sections.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/products/product-1/benefits/benefit-1.md\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Logical Path in Hugo Template (Go HTML Template)\nDESCRIPTION: Demonstrates how to use the `.Path` method within a Go HTML template to retrieve and display the logical path of the current page object. The example shows the output `/posts/post-1` for a hypothetical page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Path.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Path }} → /posts/post-1\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Comments in Hugo Templates\nDESCRIPTION: Demonstrates how to render HTML comments in Hugo templates using the safeHTML function. This allows for rendering actual HTML comments in the output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_20\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"<!-- I am an HTML comment. -->\" | safeHTML }}\n{{ printf \"<!-- This is the %s site. -->\" .Site.Title | safeHTML }}\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Items in Generated RSS Feeds in Hugo Configuration (TOML/YAML/Hugo Config)\nDESCRIPTION: This snippet limits the number of items included in each generated RSS feed by setting the 'limit' value under '[services.rss]' in Hugo's configuration. Place this block in your config file to restrict feeds to the specified maximum ('42' in this example). Set 'limit' to '-1' for unlimited items; useful for managing feed size and performance.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/rss.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n[services.rss]\nlimit = 42\n```\n\n----------------------------------------\n\nTITLE: Calling Shortcodes with Positional Arguments - Markdown\nDESCRIPTION: This snippet demonstrates how to invoke a Hugo shortcode using positional arguments within a markdown content file. The shortcode receives an ordered slice that can be accessed by index in the shortcode template. Replace 'myshortcode' with your actual shortcode identifier. The parameters passed appear in the order specified, and are accessed positionally.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Params.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{</* myshortcode \"Hello\" \"world\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Media Type for Atom Feeds in Hugo (TOML)\nDESCRIPTION: This snippet defines a new media type in Hugo's configuration for Atom feeds, using the standard Atom MIME type. It associates the 'atom' file suffix with 'application/atom+xml'. This change requires access to the main Hugo config file and is compatible with custom output formats. Input: MIME type and suffix list. Output: Hugo recognizes files with the 'atom' extension as Atom feeds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/media-types.md#2025-04-23_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[mediaTypes.'application/atom+xml']\nsuffixes = ['atom']\n```\n\n----------------------------------------\n\nTITLE: Retrieving Translation Key Derived from File Path - Go HTML Template\nDESCRIPTION: This Go HTML template usage shows .TranslationKey in the case where no explicit 'translationKey' is set in front matter. Hugo derives the translation key from the file path (e.g., 'page/books/book-2'), allowing implicit linking between pages in different languages. Dependency: Hugo’s templating engine. Key input: page context without 'translationKey' in front matter. Returns derived string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/TranslationKey.md#2025-04-23_snippet_5\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ .TranslationKey }} → page/books/book-2\n```\n\n----------------------------------------\n\nTITLE: Calling a Hugo Shortcode from a Subdirectory\nDESCRIPTION: Demonstrates the syntax for calling a Hugo shortcode located within a subdirectory (`media/`) of the main `layouts/shortcodes` directory. The path relative to `shortcodes` (`media/audio`) is used, excluding the file extension. A named parameter `path` is passed to the shortcode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{</* media/audio path=/audio/podcast/episode-42.mp3 */>}}\n```\n\n----------------------------------------\n\nTITLE: Logging a WARNING with Template Variables in Hugo\nDESCRIPTION: Demonstrates using the warnf function to log a WARNING message with formatted arguments, including template variables, file references, and position information.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Warnf.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ warnf \"The %q shortcode was unable to find %s. See %s\" .Name $file .Position }}\n```\n\n----------------------------------------\n\nTITLE: List Page Template Block Override\nDESCRIPTION: Implements the 'main' block for list pages, showing title, content, and iterating through child pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/block.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n  {{ range .Pages }}\n    <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Alternative Format Links in Hugo\nDESCRIPTION: This snippet shows the rendered HTML result of using the AlternativeOutputFormats method on a site's home page, displaying a link element for an RSS feed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/AlternativeOutputFormats.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"alternate\" type=\"application/rss+xml\" href=\"https://example.org/index.xml\" title=\"ABC Widgets, Inc.\">\n```\n\n----------------------------------------\n\nTITLE: Defining Project NPM Package in JSON\nDESCRIPTION: Provides the initial package.json for the Hugo test project. It lists devDependencies (tailwindcss), metadata (name, version), and a comments section for custom data. Requires npm and Hugo. Input is static metadata; output is the pre-operation package.json, which will be compared against golden for validation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_npm_withexisting.txt#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n-- package.json --\\n{\\n  \\\"comments\\\": {\\n    \\\"foo\\\": {\\n      \\\"a\\\": \\\"b\\\"\\n    }\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"tailwindcss\\\": \\\"2.2.0\\\"\\n  },\\n  \\\"name\\\": \\\"mypackage\\\",\\n  \\\"version\\\": \\\"1.1.0\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hugo with Deprecation Logging (Shell Script)\nDESCRIPTION: These shell commands run Hugo with different environment variables and logging levels to verify that deprecation warnings are logged at the correct level. Each command is followed by an assertion on the expected log output. Dependencies include a working shell, Hugo installed, and the presence of the relevant config and template files. The commands test 'info', 'warn', and 'error' log levels, highlighting how deprecations propagate under each setting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/deprecate.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo -e info --logLevel info\nstderr 'INFO  deprecated: item was deprecated in Hugo'\n\nhugo -e warn --logLevel warn\nstderr 'WARN  deprecated: item was deprecated in Hugo'\n\n! hugo -e error --logLevel warn\nstderr 'ERROR deprecated: item was deprecated in Hugo'\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URLs with urls.Ref in Hugo Templates\nDESCRIPTION: Demonstrates various uses of the urls.Ref function to generate absolute URLs for pages. Examples include basic usage, using options maps for language and output format specification.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/Ref.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ ref . \"/books/book-1\" }} → https://example.org/en/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" }}\n{{ ref . $opts }} → https://example.org/en/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }}\n{{ ref . $opts }} → https://example.org/de/books/book-1/\n\n{{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }}\n{{ ref . $opts }} → https://example.org/de/books/book-1/index.json\n```\n\n----------------------------------------\n\nTITLE: Checking Map Type with reflect.IsMap in Hugo Templates - Go HTML Template\nDESCRIPTION: Demonstrates how to use Hugo's reflect.IsMap function within a Go HTML template to check if a variable is a map. No additional dependencies are required since reflect.IsMap is a built-in Hugo template function. The first example passes a map (created with dict) and returns true, while the second passes a string and returns false. Inputs can be any variable; output is a boolean indicating whether the input is a map. This is useful for type-checking logic in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/reflect/IsMap.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ reflect.IsMap (dict \"key\" \"value\") }} \\u2192 true\n{{ reflect.IsMap \"yo\" }} \\u2192 false\n```\n\n----------------------------------------\n\nTITLE: Processing Emoji Shortcodes in Hugo Templates\nDESCRIPTION: This Go HTML template snippet demonstrates how to process an emoji shortcode within a Hugo template using the RenderString method on a Page object.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"Hello! :wave:\" | .RenderString }}\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Structured Git Message in Shell\nDESCRIPTION: Example Git command for committing changes with a multi-line message adhering to Hugo's contribution guidelines. The message includes a concise summary line prefixed with a category (e.g., 'tpl/strings'), a detailed description, and 'Fixes'/'Closes' keywords referencing related issue numbers. Requires Git.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m \"tpl/strings: Create wrap function\n\nThe strings.Wrap function wraps a string into one or more lines,\nsplitting the string after the given number of characters, but not\nsplitting in the middle of a word.\n\nFixes #99998\nCloses #99999\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Site Layout in HTML\nDESCRIPTION: This HTML template defines the layout for the index page of the Hugo site, displaying the title and base URL.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_render_to_memory.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nTitle: {{ .Title }}|BaseURL: {{ site.BaseURL }}|\n```\n\n----------------------------------------\n\nTITLE: Basic Hugo Configuration (`hugo.toml`)\nDESCRIPTION: Defines the base configuration for the Hugo site using TOML format. It sets the `baseURL` and disables several kinds of pages (RSS, sitemap, etc.) to simplify the build output for testing purposes. This file is placed at the root of the Hugo project.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_environment.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Map with Key-Value Variables\nDESCRIPTION: Demonstrates how to iterate over a dictionary object with key-value pairs, displaying both keys and values. Note that Hugo sorts by key when ranging over maps.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m :=  dict \"name\" \"John\" \"age\" 30 }}\n{{ range $k, $v := $m }}\n  <p>key = {{ $k }} value = {{ $v }}</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Single Page Template Block Override\nDESCRIPTION: Defines a 'main' block implementation for single page templates, displaying the page title and content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/block.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Glossary Term Definition using Hugo Shortcode - Text\nDESCRIPTION: This snippet demonstrates how to insert a glossary term definition in Hugo content using a shortcode call. The shortcode 'glossary-term' is provided with the term name as a parameter. Requires Hugo with the named shortcode defined; accepts the term as a string parameter and outputs the corresponding glossary definition at this position.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{%/* glossary-term \"global resource\" */%}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Math Equation with transform.ToMath in Hugo\nDESCRIPTION: Demonstrates the basic usage of the transform.ToMath function to render a simple mathematical equation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/ToMath.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ transform.ToMath \"c = \\\\pm\\\\sqrt{a^2 + b^2}\" }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Project with Module Imports (TOML)\nDESCRIPTION: This `hugo.toml` file configures a Hugo project. It sets the project title and defines module dependencies using the `[module.imports]` table. It imports the `github.com/bep/empty-hugo-module` and uses a mount to map the module's `README.md` file to the site's `content/_index.md`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Modules Test\"\n[module]\n[[module.imports]]\npath=\"github.com/bep/empty-hugo-module\"\n[[module.imports.mounts]]\nsource=\"README.md\"\ntarget=\"content/_index.md\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Safe HTML using safeHTML in Go Hugo Template\nDESCRIPTION: This snippet demonstrates using the `safeHTML` function (an alias for `safe.HTML`) in a Hugo template. It pipes the variable containing an HTML string through `safeHTML`, marking it as trusted HTML content that should not be escaped.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/HTML.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $html := \"<em>emphasized</em>\" }}\n{{ $html | safeHTML }}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Award Medal Emojis\nDESCRIPTION: A markdown table showing emojis related to awards and medals, including their visual representations and shortcodes. The table covers military medals, sports medals, and place medals.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#activities) | :medal_military: | `:medal_military:` | :trophy: | `:trophy:` | [top](#table-of-contents) |\n| [top](#activities) | :medal_sports: | `:medal_sports:` | :1st_place_medal: | `:1st_place_medal:` | [top](#table-of-contents) |\n| [top](#activities) | :2nd_place_medal: | `:2nd_place_medal:` | :3rd_place_medal: | `:3rd_place_medal:` | [top](#table-of-contents) |\n```\n\n----------------------------------------\n\nTITLE: Custom Menu Sorting with Hugo's Sort Function\nDESCRIPTION: Alternative approach to menu sorting using Hugo's sort function, demonstrating how to sort menu entries by weight in descending order.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/ByWeight.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range sort .Site.Menus.main \"Weight\" \"desc\" }}\n    <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Advanced YouTube Shortcode with Parameters in Hugo\nDESCRIPTION: Example showing how to use the youtube shortcode with multiple named parameters including video ID, start/end times, and loading behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/youtube.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{</* youtube id=0RKpf3rK57I start=30 end=60 loading=lazy */>}}\n```\n\n----------------------------------------\n\nTITLE: Specifying Options for 'hugo config mounts' Command - Shell\nDESCRIPTION: Lists all available command-line options for customizing the behavior of 'hugo config mounts'. Dependencies include the Hugo CLI. Options such as --baseURL, --cacheDir, --contentDir, --help, --renderSegments, and --theme allow users to tailor output and functionality. These are intended to be supplied as flags to the command, with each parameter controlling aspects of configuration or output. No direct output is produced by this snippet; it documents parameter usage.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_config_mounts.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n  -c, --contentDir string        filesystem path to content directory\n  -h, --help                     help for mounts\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: Rendering Math Equation with HTML and MathML Output in Hugo\nDESCRIPTION: Shows how to use the transform.ToMath function with options to render an equation as both HTML and MathML for improved rendering and accessibility.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/ToMath.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"output\" \"htmlAndMathml\" }}\n{{ transform.ToMath \"c = \\\\pm\\\\sqrt{a^2 + b^2}\" $opts }}\n```\n\n----------------------------------------\n\nTITLE: Chaining Time Methods with time.Now in Hugo\nDESCRIPTION: These snippets show how to chain various time methods to the time.Time value returned by time.Now to extract specific components of the current time.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/Now.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ time.Now.Year }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ time.Now.Weekday.String }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ time.Now.Month.String }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ time.Now.Unix }}\n```\n\n----------------------------------------\n\nTITLE: Defining Polish Pluralization Rules (TOML)\nDESCRIPTION: Example content for a Polish translation file (`i18n/pl.toml`) defining pluralization rules. Polish uses 'one', 'few', 'many', and 'other' forms according to CLDR rules. Includes rules for 'day' and 'day_with_count'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[day]\none = 'miesiąc'\nfew = 'miesiące'\nmany = 'miesięcy'\nother = 'miesiąca'\n\n[day_with_count]\none = '{{ . }} miesiąc'\nfew = '{{ . }} miesiące'\nmany = '{{ . }} miesięcy'\nother = '{{ . }} miesiąca'\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output from TAXONOMY.Page Method\nDESCRIPTION: The resulting HTML generated from the template example. This shows how the taxonomy page information is rendered into an HTML link.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Page.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/tags/\">Tags</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube Privacy Setting in Hugo Template (go-html-template)\nDESCRIPTION: Retrieves the YouTube privacy 'Disable' value from the site configuration in a Go HTML Template. It expects the relevant section to be present in the site's config file, with the disable flag set under the 'privacy.youtube' section. Input comes from Hugo's config, and the output renders the boolean state. Identifier capitalization is required in the template context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Config.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Config.Privacy.YouTube.Disable }} → true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Resource by Name Using Hugo Templates - Go HTML Template\nDESCRIPTION: Accesses a resource by its defined 'name' rather than its file path in the page resources array. This snippet uses .Resources.Get with the name value, returning the resource whose front matter 'name' matches. Requires the resource to be defined with a unique 'name' value. Outputs the custom resource name; inputs a string name key. Dependency: Hugo template resources API.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Name.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.Get \\\"Sunrise in Bryce Canyon\\\" }}\\n  {{ .Name }} → Sunrise in Bryce Canyon\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML for Unsafe URL in Hugo\nDESCRIPTION: This snippet shows the resulting HTML output when the Hugo template engine processes a URL with a scheme considered unsafe (like `irc:`) without the `safe.URL` function. Hugo replaces the URL with `#ZgotmplZ` to prevent potential security vulnerabilities.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/URL.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#ZgotmplZ\">IRC</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Hugo Template Block\nDESCRIPTION: Shows the basic syntax for defining a named template block in Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/block.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"name\" }} T1 {{ end }}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Local CSV Files in Hugo\nDESCRIPTION: Shows the example project directory structure for accessing local CSV files using data.GetCSV.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── other-files/\n    └── pets.csv\n```\n\n----------------------------------------\n\nTITLE: Using the Len Method on Page Collections in Hugo Templates\nDESCRIPTION: Shows the alternative method syntax for determining the number of pages in a collection. This method approach achieves the same result as using the len function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/len.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.RegularPages.Len }} → 42\n```\n\n----------------------------------------\n\nTITLE: Debugging Site Languages with Hugo Template - Go Template\nDESCRIPTION: This snippet demonstrates using Hugo's template system to inspect the .Site.Languages data structure. It employs the debug.Dump function within a Go template to output detailed information on the languages collection as pre-formatted text. Requires Hugo's templating environment and access to the .Site context; outputs a verbose debug representation for inspection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Languages.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump .Site.Languages }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Slice Using Context Binding in Hugo\nDESCRIPTION: Basic example of iterating over a slice of strings, rendering each element within a paragraph tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"foo\" \"bar\" \"baz\" }}\n{{ range $s }}\n  <p>{{ . }}</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters with Non-Standard Identifiers in Hugo\nDESCRIPTION: This snippet shows how to access custom parameters with non-standard identifiers (e.g., containing hyphens) in Hugo templates using the index function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Params.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ index .Site.Params \"copyright-year\" }} → 2023\n```\n\n----------------------------------------\n\nTITLE: Defining a Date in Hugo Front Matter for Localization\nDESCRIPTION: Shows how to define a `date` parameter with a specific ISO 8601 timestamp value in a content file's front matter (TOML format shown). This date value can subsequently be accessed in templates (as `.Date`) and formatted according to the current language's locale conventions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_6\n\nLANGUAGE: hugo\nCODE:\n```\ndate = 2021-11-03T12:34:56+01:00\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Module Imports - TOML\nDESCRIPTION: Demonstrates how to specify imported modules in Hugo configuration using TOML, supporting multiple imports with custom options. Each entry under '[[module.imports]]' defines a module's source path and optional toggles for disabling, ignoring config, or ignoring further imports. Dependencies are typical Hugo modules, with configuration recognized by the core Hugo system. Inputs include directory names or Go module paths; outputs are module availability within Hugo builds. Place in '.toml' config file, repeating section for each import; at least one 'path' is required per import.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/module.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[module.imports]]\ndisable = false\nignoreConfig = false\nignoreImports = false\npath = \"github.com/gohugoio/hugoTestModules1_linux/modh1_2_1v\"\n[[module.imports]]\npath = \"my-shortcodes\"\n```\n\n----------------------------------------\n\nTITLE: Golden Archetype Template - YAML\nDESCRIPTION: Offers a YAML-formatted archetype template used as a gold standard for test comparisons. Contains Go template placeholders for inserting dynamic values. Hugo processes this template for YAML-based sites. Inputs are the file's content base name and date, output is a completed YAML front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new.txt#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: '{{ .Date }}'\ndraft: true\ntitle: '{{ replace .File.ContentBaseName \"-\" \" \" | title }}'\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Hugo Modules using Shell Command\nDESCRIPTION: This shell command executes `hugo mod get -u` to update all direct and indirect module dependencies defined in the project's configuration (`hugo.toml`, `go.mod`) to their latest compatible versions. The `-u` flag specifically triggers the update process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_get_u.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod get -u\n```\n\n----------------------------------------\n\nTITLE: Correct Pattern for Multiple Logic Paths with Single Return\nDESCRIPTION: A correct example of a partial template with multiple logic paths but only one return statement at the end, following Hugo's recommended pattern.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/return.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $result := false }}\n{{ if math.ModBool . 2 }}\n  {{ $result = \"even\" }}\n{{ else }}\n  {{ $result = \"odd\" }}\n{{ end }}\n{{ return $result }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Structure in Hugo\nDESCRIPTION: Shows the directory structure of a Hugo project with nested content folders and files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsAncestor.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── auctions/\n│   ├── 2023-11/\n│   │   ├── _index.md\n│   │   ├── auction-1.md\n│   │   └── auction-2.md\n│   ├── 2023-12/\n│   │   ├── _index.md\n│   │   ├── auction-3.md\n│   │   └── auction-4.md\n│   ├── _index.md\n│   ├── bidding.md\n│   └── payment.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Accessing Dir in Hugo Templates\nDESCRIPTION: Shows how to get the file path (excluding filename) relative to the content directory using the Dir method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .Dir }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Structure for Image Shortcode Example\nDESCRIPTION: Outlines the example project content structure assumed for the image shortcode demonstrations. It features a page bundle (`content/example/`) containing a Markdown file (`index.md`) and an associated image resource (`a.jpg`). This setup is necessary for shortcodes interacting with page resources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── example/\n│   ├── a.jpg\n│   └── index.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Feature Branch in Shell\nDESCRIPTION: Demonstrates creating and checking out a new Git branch for developing a new feature, following Hugo's naming convention which includes the type ('feat'), a descriptive name, and the corresponding issue number. Requires Git to be installed and run within a Git repository.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b feat/implement-some-feature-99999\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling CSV with Custom Delimiter in Hugo\nDESCRIPTION: Demonstrates how to unmarshal a CSV string with a custom delimiter using transform.Unmarshal.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Unmarshal.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $csv := \"a;b;c\" | transform.Unmarshal (dict \"delimiter\" \";\") }}\n```\n\n----------------------------------------\n\nTITLE: Generating a Basic Random Float with math.Rand (Go HTML Template)\nDESCRIPTION: This snippet demonstrates the basic usage of the `math.Rand` function in a Hugo template. It returns a pseudo-random floating-point number in the half-open interval [0.0, 1.0). No parameters are required.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Rand.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Rand }} → 0.6312770459590062\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Error Output Using `.Position`\nDESCRIPTION: This text output shows an example error message generated by Hugo when the `myshortcode` shortcode (defined in the Go HTML Template example) is called without the mandatory 'greeting' argument. The message clearly indicates the missing argument and includes the precise file path, line number, and column (`/home/user/project/content/about.md:11:1`) where the shortcode was invoked, demonstrating the utility of the `.Position` method for debugging.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Position.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nERROR The \"myshortcode\" shortcode requires a 'greeting' argument. See \"/home/user/project/content/about.md:11:1\"\n```\n\n----------------------------------------\n\nTITLE: Checking Draft Status in Hugo Templates\nDESCRIPTION: Demonstrates how to check if a page is marked as a draft in a Hugo template. The .Draft property returns a boolean value (true/false) based on the draft status defined in the page's front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Draft.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Draft }} → true\n```\n\n----------------------------------------\n\nTITLE: Displaying the Section of a Page in Hugo Go HTML Templates\nDESCRIPTION: This snippet demonstrates how to output the top-level section name for a given page using the .Section property in a Hugo Go HTML Template. This requires the page context (e.g., while rendering lesson-1.md), and outputs the section as a string. No additional dependencies are needed beyond Hugo itself. Input is the page context; output is the section string (e.g., 'lessons').\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Section.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Section }} → lessons\n```\n\n----------------------------------------\n\nTITLE: Comparing Shortcode Templates for Different Notations (Diff)\nDESCRIPTION: Provides a diff view highlighting the changes between the shortcode template using `RenderString` (suitable for `{{< >}}` notation) and the template adapted for the `{{% %}}` notation. It shows the adjustments in indentation, the addition of a blank line, and the removal of the `RenderString` call.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Inner.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n--- layouts/shortcodes/a.html\n+++ layouts/shortcodes/b.html\n@@ -1,8 +1,9 @@\n <div class=\"card\">\n   {{ with .Get \"title\" }}\n-    <div class=\"card-title\">{{ . }}</div>\n+  <div class=\"card-title\">{{ . }}</div>\n   {{ end }}\n   <div class=\"card-content\">\n-    {{ .Inner | strings.TrimSpace | .Page.RenderString }}\n+\n+  {{ .Inner | strings.TrimSpace }}\n   </div>\n </div>\n```\n\n----------------------------------------\n\nTITLE: Generating Relative URLs with Leading Slash (baseURL: /) using Go HTML Template\nDESCRIPTION: Shows the effect of using a leading slash (`/`) in the input to `relURL` when `baseURL` is `https://example.org/`. The function generates URLs relative to the host (`https://example.org`), effectively ignoring the `baseURL` path component and treating the input as an absolute path from the root.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelURL.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ relURL \"/\" }}          → /\n{{ relURL \"/articles\" }}  → /articles\n{{ relURL \"/style.css\" }} → /style.css\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Single Content Layout - Hugo Template - HTML\nDESCRIPTION: This HTML template snippet provides a layout for single content pages in Hugo, using Go template syntax to inject the page title and content. Intended for use with the '_default/single.html' layout slot, it is processed by Hugo to render content pages. Inputs are metadata ('.Title') and body ('.Content'); output is combined in 'Title: ...| ...' format. Limitation: suitable for simple content, not styled.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__watch.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nTitle: {{ .Title }}| {{ .Content }}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Hugo Extended with Winget on Windows\nDESCRIPTION: Command to uninstall the extended edition of Hugo using Microsoft's Winget package manager for Windows.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/windows.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nwinget uninstall --name \"Hugo (Extended)\"\n```\n\n----------------------------------------\n\nTITLE: Using fmt.Print Function in Hugo Templates\nDESCRIPTION: Demonstrates the usage of the fmt.Print function in Hugo templates. This function prints the default representation of the given arguments using the standard fmt.Print function from Go. It can handle strings and more complex data types like slices.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Print.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ print \"foo\" }} → foo\n{{ print \"foo\" \"bar\" }} → foobar\n{{ print (slice 1 2 3) }} → [1 2 3]\n```\n\n----------------------------------------\n\nTITLE: Setting JPEG/WebP Quality in Image Filters in Hugo go-html-template\nDESCRIPTION: Demonstrates setting JPEG or WebP output quality to 50 using 'q50' in images.Process. Controls output compression quality for supported formats. Used as part of a filter within a Hugo template to influence final image quality.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"q50\" }}\n```\n\n----------------------------------------\n\nTITLE: Leaf Bundle Archetype Directory Structure - Text\nDESCRIPTION: Visualizes the nested archetypes directory structure required for leaf bundle sections, such as galleries in a Hugo site. Demonstrates inclusion of a .gitkeep file to force creation of empty directories by Git and Hugo. Assists users with scaffolding leaf bundles with content and assets.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\narchetypes/\n├── galleries/\n│   ├── images/\n│   │   └── .gitkeep\n│   └── index.md      <-- same format as default.md\n└── default.md\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing Hugo Content Structure with Section and Page Types\nDESCRIPTION: A text representation of a typical Hugo content directory structure showing the different page kinds, including which pages are sections and which are regular pages. This helps illustrate when IsSection would return true or false.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsSection.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── books/\n│   ├── book-1/\n│   │   └── index.md  <-- kind = page\n│   ├── book-2.md     <-- kind = page\n│   └── _index.md     <-- kind = section\n└── _index.md         <-- kind = home\n```\n\n----------------------------------------\n\nTITLE: Using Chained Identifiers in Hugo Templates\nDESCRIPTION: Demonstrates how to chain multiple identifiers with dot notation to access nested properties and methods in Hugo templates. Examples show accessing site parameters and date fields.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/chain.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n.Site.Params.author.name\n```\n\nLANGUAGE: hugo\nCODE:\n```\n.Date.UTC.Hour\n```\n\n----------------------------------------\n\nTITLE: Converting Binary Values to float64 in Hugo Templates (Go HTML Template)\nDESCRIPTION: This snippet shows how binary literals (using the Go-style '0b' prefix) are converted to float64 using the 'float' function in Hugo templates. The input is interpreted in base 2 and returned as a decimal floating-point value. Only integer binary values are valid inputs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToFloat.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ float 0b11 }} → 3 (float64)\n```\n\n----------------------------------------\n\nTITLE: Referencing index.md in a Hugo Leaf Bundle\nDESCRIPTION: Shows the file structure of a leaf bundle in Hugo, which must contain an index.md file. This is a fundamental part of Hugo's content organization system.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/leaf-bundle.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nindex.md\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on Exherbo Linux\nDESCRIPTION: Commands to install the extended edition of Hugo on Exherbo Linux using the Paludis package manager after setting the required options.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncave resolve -x repository/heirecka\ncave resolve -x hugo\n```\n\n----------------------------------------\n\nTITLE: Using Pluralization with Map Context (Go Template)\nDESCRIPTION: Demonstrates calling the `T` function with a map context created using the `dict` function. The map must contain a `count` key for pluralization selection and can include other keys (`name`) used as variables within the translation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_13\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ T \"age\" (dict \"name\" \"Will\" \"count\" 1) }} → Will is 1 year old.\n{{ T \"age\" (dict \"name\" \"John\" \"count\" 3) }} → John is 3 years old.\n```\n\n----------------------------------------\n\nTITLE: Defining Page Bundle Content File (Markdown)\nDESCRIPTION: Specifies the location and name ('content/posts/post-1/index.md') of the primary content file for a Hugo page bundle. In this test setup, the file itself is empty and serves as the anchor for the bundle containing the image files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats2.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/posts/post-1/index.md --\n```\n\n----------------------------------------\n\nTITLE: Configuring Minification in Hugo Configuration - YAML/TOML\nDESCRIPTION: This code snippet demonstrates the default configuration settings for minification within the Hugo static site generator. It is inserted via a Hugo shortcode and meant to be included in your site's main configuration file (either config.yaml or config.toml). Users can customize minification behaviors for different asset types here. No additional dependencies beyond a working Hugo installation are required. Input is the minify configuration block, and the output is optimized static assets during site build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/minify.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{< code-toggle config=minify />}}\n```\n\n----------------------------------------\n\nTITLE: Using len with Page Collections in Hugo Templates\nDESCRIPTION: Demonstrates how to count the number of pages in a collection using the len function in Hugo templates. Returns the total count of pages in the specified collection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/len.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.RegularPages | len }} → 42\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Import Context for js.Batch using Page Bundles in Go Templates\nDESCRIPTION: This Go template code shows how to configure a custom import resolution context for `js.Batch` using the `importContext` script option. It first finds resources using `resources.Match` (e.g., common JS libraries in `/js/headlessui/`) and then uses `Resources.Mount` to create a virtual mount point relative to the current page (`$.Page`). This allows scripts within the batch to directly import files located within the page bundle or the mounted directory, providing higher precedence than default asset/node_modules resolution.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $common := resources.Match \"/js/headlessui/*.*\" }}\n{{ $importContext := (slice $.Page ($common.Mount \"/js/headlessui\" \".\")) }}\n```\n\n----------------------------------------\n\nTITLE: Applying a Sequence of Filters to an Image Using images.Filter in Hugo (Go HTML Template)\nDESCRIPTION: This snippet applies a previously defined slice of filters to an image resource using the functional images.Filter approach. The code first retrieves the original image with resources.Get, then applies the $filters slice using the pipe operator and images.Filter. The output is an image resource object with the mask and conversion applied, rendered with dynamic attributes in the resulting HTML. Both input and output are resource objects, requiring a pre-defined $filters variable and accessible image files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Mask.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with . | images.Filter $filters }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Title Case Style in Hugo - TOML\nDESCRIPTION: Sets the capitalization style for Hugo-generated list/page titles via the 'titleCaseStyle' parameter in the Hugo site configuration. Accepts values such as 'ap', 'chicago', 'go', 'firstupper', or 'none', which control how titles are capitalized. Must be placed in the config.toml file; expects a string value and directly influences the output of list page titles.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Title.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\ntitleCaseStyle = \"firstupper\"\n```\n\n----------------------------------------\n\nTITLE: Basic Blockquote Render Hook Implementation\nDESCRIPTION: Simple render hook template that renders blockquotes according to the CommonMark specification.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/blockquotes.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<blockquote>\n  {{ .Text }}\n</blockquote>\n```\n\n----------------------------------------\n\nTITLE: Home Page Front Matter Example (YAML)\nDESCRIPTION: This YAML snippet provides example front matter for a Hugo homepage at content/_index.md. It specifies the page title, date, draft status, and custom parameters (such as a subtitle) which can be accessed in templates. The front matter uses Hugo's archetype format and is required to enable proper context rendering in homepage templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/home.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: The Home Page\ndate: 2025-01-30T03:36:57-08:00\ndraft: false\nparams:\n  subtitle: The Subtitle\n---\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Font Resource with Error Handling in Hugo Template\nDESCRIPTION: Attempts to fetch the font file specified by `$fontPath` using `resources.GetRemote`. It uses `try` for robust error handling. If the fetch is successful, the font resource is assigned to `$font`. If any error occurs during fetching or processing the resource, an appropriate error message is logged using `errorf`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Text.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $font := \"\" }}\n{{ with try (resources.GetRemote $fontPath) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    {{ $font = . }}\n  {{ else }}\n    {{ errorf \"Unable to get resource %s\" $fontPath }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Section Title Dynamically with .Site.GetPage in Hugo Go HTML Templates\nDESCRIPTION: This snippet demonstrates how to render a section's title dynamically using Hugo's .Site.GetPage function within a Go HTML Template. It checks for the existence of a section index (_index.md) at a given path (e.g., '/blog'); if found, it displays its title, otherwise nothing is shown. The dependency is Hugo's templating functions with the '.Site' context. The key parameter is the section path passed to .Site.GetPage; the output is an <h1> tag with the section title, or left empty if not found.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/section.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<h1>{{ with .Site.GetPage \"/blog\" }}{{ .Title }}{{ end }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Minimum Required Front Matter Fields Example - Text\nDESCRIPTION: This example displays the minimum set of front matter fields necessary for Hugo documentation pages. Fields include 'title', 'description', 'categories', and 'keywords', with empty arrays for the taxonomy fields. No dependencies are required, and the fields should appear at the top of each content file; example values are shown as placeholders.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntitle: The title\ndescription: The description\ncategories: []\nkeywords: []\n```\n\n----------------------------------------\n\nTITLE: Using .Name for Error Reporting in Hugo Shortcode (Go HTML Template)\nDESCRIPTION: This Go HTML Template snippet demonstrates how to use the `.Name` method within a Hugo shortcode (`myshortcode.html`). It checks if a required 'greeting' parameter is provided using `.Get`. If the parameter is missing, it calls `errorf` to halt the build and display an error message including the shortcode's name retrieved via `.Name` and its invocation location via `.Position`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Name.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $greeting := \"\" }}\n{{ with .Get \"greeting\" }}\n  {{ $greeting = . }}\n{{ else }}\n  {{ errorf \"The %q shortcode requires a 'greeting' argument. See %s\" .Name .Position }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Looping Through MainSections in Hugo Home Template\nDESCRIPTION: Shows how to use MainSections in a home template to list the most relevant pages from main sections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/MainSections.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range where .Site.RegularPages \"Section\" \"in\" .Site.MainSections }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Logging Unique Template Warnings Using math.Counter - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the math.Counter function within a Hugo template to generate and log unique warning messages each time the template is processed. The warnf function accepts a format string and the current counter value returned by math.Counter. Prerequisites include a Hugo site setup with access to the math.Counter and warnf functions. Inputs are not required; the function is invoked per template render context, incrementing globally across the project build. Output consists of uniquely numbered warnings, preventing message duplication.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Counter.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ warnf \"single.html called %d times\" math.Counter }}\n\n```\n\n----------------------------------------\n\nTITLE: Processing CSS with PostCSS Options in Hugo\nDESCRIPTION: This snippet shows how to use the postCSS function with custom options in a Hugo template. It specifies a custom configuration directory and disables source maps.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/PostCSS.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"config\" \"config-directory\" \"noMap\" true }}\n{{ with resources.Get \"css/main.css\" | postCSS $opts }}\n  <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering JavaScript String without safe.JS in Go HTML Template\nDESCRIPTION: Demonstrates the default behavior of Hugo templates when rendering a string variable intended as JavaScript code within a <script> tag. The string 'x + y' assigned to $js is automatically escaped by Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/JS.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $js := \"x + y\" }}\n<script>const a = {{ $js }}</script>\n```\n\n----------------------------------------\n\nTITLE: Merging Maps in Order $m2, $m3, $m1\nDESCRIPTION: Demonstrates another permutation of merging the three maps, showing how the order affects which values appear in the final merged result.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Merge.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $merged := merge $m2 $m3 $m1 }}\n\n{{ $merged.x }}   → foo\n{{ $merged.y }}   → wobble\n{{ $merged.z.a }} → huey\n```\n\n----------------------------------------\n\nTITLE: Creating New Hugo Content using Shell\nDESCRIPTION: This command uses the Hugo CLI (`hugo`) to generate a new content file located at `content/post/first-post.md`. The `--kind post` flag specifies that the content should be created using the template defined in `archetypes/post.md`. Requires Hugo and assumes execution within the Hugo site's root directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhugo new content --kind post post/first-post.md\n```\n\n----------------------------------------\n\nTITLE: Using the and Function in Hugo Templates\nDESCRIPTION: The 'and' function takes multiple arguments and returns the first falsy argument. If all arguments are truthy, it returns the last argument. This allows for conditional logic in templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/and.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ and 1 0 \"\" }} → 0 (int)\n{{ and 1 false 0 }} → false (bool)\n\n{{ and 1 2 3 }} → 3 (int)\n{{ and \"a\" \"b\" \"c\" }} → c (string)\n{{ and \"a\" 1 true }} → true (bool)\n```\n\n----------------------------------------\n\nTITLE: Debugging Hugo Fragments Headings Structure\nDESCRIPTION: Outputs the data structure of all headings on the page using the debug.Dump function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Fragments.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump .Fragments.Headings }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Using 'else if' for multiple conditions in Hugo templates\nDESCRIPTION: Example demonstrating how to chain multiple conditions using 'else if' in Hugo templates to create more complex conditional logic flows.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/else.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := 12 }}\n{{ if eq $var 6 }}\n  {{ print \"var is 6\" }}\n{{ else if eq $var 7 }}\n  {{ print \"var is 7\" }}\n{{ else if eq $var 42 }}\n  {{ print \"var is 42\" }}\n{{ else }}\n  {{ print \"var is something else\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Template Lookup for Content-Type 'books' in Hugo - Text\nDESCRIPTION: This simple text snippet shows the full path for the li.html layout used when rendering content of type \\\"books\\\" in Hugo. It is used in explanatory documentation to clarify template lookup order. The snippet is not executable and is intended only for illustration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Render.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlayouts/books/li.html\n```\n\n----------------------------------------\n\nTITLE: Sorting Page Collections in Hugo\nDESCRIPTION: Shows how to sort a page collection (site's regular pages) by Type in descending order using the collections.Sort function in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Sort.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range sort site.RegularPages \"Type\" \"desc\" }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Inversion Filter Using Hugo in Go HTML Template\nDESCRIPTION: Demonstrates how to create an image filter using Hugo's images.Invert function in Go HTML templates. This snippet assigns the color inversion filter to the $filter variable, which can then be used to process images. Dependencies: Hugo (with images module enabled). Parameter: none required. Expected input is the filter assignment, and output is a filter object for image manipulation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Invert.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Invert }}\n\n```\n\n----------------------------------------\n\nTITLE: Using `:default` Fallback for Hugo Page Date in TOML\nDESCRIPTION: Configures the `[frontmatter]` section in Hugo's TOML configuration. It sets the `Date` method to prioritize the `myDate` front matter field and then fall back to Hugo's default date resolution sequence (checking `date`, `publishdate`, `pubdate`, `published`, `lastmod`, and `modified` in order) if `myDate` is absent. This demonstrates using the `:default` token for flexible fallback.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/front-matter.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[frontmatter]\ndate = [\"myDate\", \":default\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Homepage Layout (HTML/Go Template)\nDESCRIPTION: This HTML file serves as the layout for the Hugo site's homepage (`layouts/index.html`). It uses Go template syntax (`{{ .Title }}`, `{{ site.BaseURL }}`) to display the current page's title and the site's base URL, separated by a pipe character. This layout is rendered for the root URL.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_content.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/index.html --\nTitle: {{ .Title }}|BaseURL: {{ site.BaseURL }}|\n```\n\n----------------------------------------\n\nTITLE: Configuring Keywords as a Taxonomy in Hugo\nDESCRIPTION: Example of configuring Hugo to use keywords as a taxonomy in the site configuration. This allows organizing and listing content by keywords similar to tags or categories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Keywords.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[taxonomies]\ntag = 'tags'\nkeyword = 'keywords'\ncategory = 'categories'\n```\n\n----------------------------------------\n\nTITLE: Using define with block statements in Hugo templates\nDESCRIPTION: This example shows how to define a 'main' template block that can be used with the block statement. It includes a default fallback value and a template definition that renders a title and content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/define.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ block \"main\" . }}\n  {{ print \"default value if 'main' template is empty\" }}\n{{ end }}\n\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Last 10 Pages in Hugo Template\nDESCRIPTION: This snippet demonstrates how to use the 'last' function to render summaries of the last 10 pages in a collection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Last.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range last 10 .Pages }}\n  {{ .Render \"summary\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Default Asciidoctor CLI Flags in Hugo\nDESCRIPTION: This snippet displays the default command-line flag (`--no-header-footer`) that Hugo passes to the external Asciidoctor executable when rendering AsciiDoc content. This prevents Asciidoctor from adding its own HTML header and footer. Requires Asciidoctor and Ruby to be installed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/formats.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n--no-header-footer\n```\n\n----------------------------------------\n\nTITLE: SourceHut Build Configuration for Automated Hugo Deployment\nDESCRIPTION: YAML configuration file (.build.yml) that defines the automated build and deployment process for a Hugo site on SourceHut. Specifies required packages, OAuth permissions, and build tasks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-sourcehut-pages.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: alpine/edge\npackages:\n  - hugo\n  - hut\noauth: pages.sr.ht/PAGES:RW\nenvironment:\n  site: <YourUsername>.srht.site\ntasks:\n- package: |\n    cd $site\n    hugo\n    tar -C public -cvz . > ../site.tar.gz\n- upload: |\n    hut pages publish -d $site site.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Applying AutoOrient and Resize Filters to an Image in Hugo Go Templates\nDESCRIPTION: This example shows how to apply multiple image filters, including `images.AutoOrient`, to an image resource within a Hugo template. It defines a slice of filters, ensuring `images.AutoOrient` is listed first as recommended, followed by a resize operation using `images.Process`. The `images.Filter` function applies these filters sequentially to the fetched image resource, and the resulting processed image is used to generate an `<img>` tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/AutoOrient.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filters := slice\n  images.AutoOrient\n  (images.Process \"resize 200x\")\n}}\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with images.Filter $filters . }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates in Hugo Go HTML Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to format a date using Hugo's templating functions and output a <time> element with both human-readable and machine-readable date strings. It utilizes the with construct to access the .Date variable, assigns formatted strings to $humanDate and $machineDate, and prints them within a template. No special security considerations or attribute escaping are made in this version. The inputs are the .Date context variable, and the outputs are a rendered HTML time element.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/HTMLAttr.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Date }}\n  {{ $humanDate := time.Format \"2 Jan 2006\" . }}\n  {{ $machineDate := time.Format \"2006-01-02T15:04:05-07:00\" . }}\n  <time datetime=\"{{ $machineDate }}\">{{ $humanDate }}</time>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Browser-Rendered Output of Map to YAML Conversion\nDESCRIPTION: This snippet displays how the converted YAML would appear when rendered in a browser after using transform.Remarshal. It shows the formatted YAML output with proper indentation and structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Remarshal.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\na: Hugo rocks!\nb:\n  answer: 42\n  question: What is 6x7?\nc:\n- foo\n- bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Cards in Content Front Matter - Hugo Page Front Matter (TOML)\nDESCRIPTION: Per-post front matter illustrating how to supply custom images and description for Twitter Card generation. When present, these values and the post title override the site-wide params in the Twitter Cards template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_11\n\nLANGUAGE: hugo\nCODE:\n```\ntitle = \"Post title\"\ndescription = \"Text about this post\"\nimages = [\"post-cover.png\"]\n```\n\n----------------------------------------\n\nTITLE: Creating an Opacity Filter Variable in Hugo (Go HTML Template)\nDESCRIPTION: This snippet demonstrates how to define an image opacity filter using Hugo's `images.Opacity` function. It takes a float value between 0.0 (fully transparent) and 1.0 (fully opaque) - here 0.65 - and assigns the resulting filter object to a template variable (`$filter`) for later use with `images.Filter`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Opacity.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Opacity 0.65 }}\n```\n\n----------------------------------------\n\nTITLE: Example GoAT Diagram: Process Flowchart\nDESCRIPTION: Illustrates a process flowchart using GoAT diagram syntax. It includes standard flowchart elements like START, END, PROCESS, INPUT, and CHOICE represented with ASCII art. This utilizes Hugo's built-in GoAT rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_7\n\nLANGUAGE: goat\nCODE:\n```\n                                      .\n   .---------.                       / \\\n  |   START   |                     /   \\        .-+-------+-.      ___________\n   '----+----'    .-------.    A   /     \\   B   | |COMPLEX| |     /           \\      .-.\n        |        |   END   |<-----+CHOICE +----->| |       | +--->+ PREPARATION +--->| X |\n        v         '-------'        \\     /       | |PROCESS| |     \\___________/      '-'\n    .---------.                     \\   /        '-+---+---+-' \n   /  INPUT  /                       \\ /          \n  '-----+---'                         '\n        |                             ^\n        v                             |\n  .-----------.                 .-----+-----.        .-.\n  |  PROCESS  +---------------->|  PROCESS  |<------+ X |\n  '-----------'                 '-----------'        '-'\n```\n\n----------------------------------------\n\nTITLE: Setting USE Flags for Hugo on Exherbo Linux\nDESCRIPTION: Configuration for enabling the extended edition of Hugo on Exherbo Linux by setting options in the Paludis package manager configuration file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nwww-apps/hugo extended\n```\n\n----------------------------------------\n\nTITLE: Creating a Deeply Nested Map with Hugo's dict Function\nDESCRIPTION: This snippet demonstrates creating a deeply nested map structure using the `dict` function. It uses a slice of strings, created with `(slice \"a\" \"b\" \"c\")`, as the key argument. This results in a nested map where 'a' contains 'b', which contains 'c' with the final value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Dictionary.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m := dict (slice \"a\" \"b\" \"c\") \"value\" }}\n```\n\n----------------------------------------\n\nTITLE: Finding and Displaying a Matching Global Resource using Hugo resources.GetMatch\nDESCRIPTION: This Go HTML template snippet demonstrates fetching the first global resource matching the pattern \"images/*.jpg\" using `resources.GetMatch`. If a match is found (checked using `with`), it accesses the resource's relative permalink, width, and height properties to generate an HTML `<img>` tag. This function searches within the global `assets` directory or mounted asset directories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetMatch.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.GetMatch \"images/*.jpg\" }}\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Parameters in TOML Front Matter\nDESCRIPTION: Demonstrates how to define custom parameters (`alt`, `temperament`) for a specific page resource (`images/a.jpg`) within the `[[resources]]` array in the TOML front matter of `content/posts/cats.md`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Params.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Cats'\n[[resources]]\n  src = 'images/a.jpg'\n  title = 'Felix the cat'\n  [resources.params]\n    alt = 'Photograph of black cat'\n    temperament = 'vicious'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-language Site in Hugo\nDESCRIPTION: This snippet shows how to configure a Hugo site for multiple languages, specifying default language, language codes, directions, names, titles, and weights.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Sites.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'de'\ndefaultContentLanguageInSubdir = false\n\n[languages.de]\nlanguageCode = 'de-DE'\nlanguageDirection = 'ltr'\nlanguageName = 'Deutsch'\ntitle = 'Projekt Dokumentation'\nweight = 1\n\n[languages.en]\nlanguageCode = 'en-US'\nlanguageDirection = 'ltr'\nlanguageName = 'English'\ntitle = 'Project Documentation'\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Configuration File\nDESCRIPTION: Sample content of the Hugo configuration file (hugo.toml) with basic site settings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/quick-start.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nbaseURL = 'https://example.org/'\nlanguageCode = 'en-us'\ntitle = 'My New Hugo Site'\ntheme = 'ananke'\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Keywords in Hugo Templates\nDESCRIPTION: Example of using range to iterate through and display each keyword in a Hugo template. This code loops through all keywords defined in the page's front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Keywords.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Keywords }}\n  {{ . }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Header Partial (`header.html`) in Go HTML Template\nDESCRIPTION: Provides an example of a `header.html` partial template used on spf13.com. It includes the HTML head section with doctype, charset, meta tags (via another partial `meta.html`), base URL, title, canonical link, RSS link, and includes from `head_includes.html`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/partial.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n<!DOCTYPE html>\n<html class=\"no-js\" lang=\"en-US\" prefix=\"og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#\">\n<head>\n    <meta charset=\"utf-8\">\n\n    {{ partial \"meta.html\" . }}\n\n    <base href=\"{{ .Site.BaseURL }}\">\n    <title> {{ .Title }} : spf13.com </title>\n    <link rel=\"canonical\" href=\"{{ .Permalink }}\">\n    {{ if .RSSLink }}<link href=\"{{ .RSSLink }}\" rel=\"alternate\" type=\"application/rss+xml\" title=\"{{ .Title }}\" />{{ end }}\n\n    {{ partial \"head_includes.html\" . }}\n</head>\n```\n\n----------------------------------------\n\nTITLE: Trimming Specific Leading Characters using strings.TrimLeft in Hugo\nDESCRIPTION: This snippet demonstrates the basic usage of the `strings.TrimLeft` function in a Hugo template. It removes all leading characters found in the cutset (\"a\") from the input string (\"abba\"), resulting in \"bba\".\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/TrimLeft.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.TrimLeft \"a\" \"abba\" }} → bba\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Project Settings and Module Imports (TOML)\nDESCRIPTION: This TOML snippet represents the content intended for a `hugo.toml` configuration file. It sets the `title` of the Hugo site to 'Hugo Modules Test' and defines a module import under the `[module]` section. Specifically, it imports the module located at the path 'github.com/bep/empty-hugo-module'. The `-- hugo.toml --` line indicates the file context within the test setup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_init.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Modules Test\"\n[module]\n[[module.imports]]\npath=\"github.com/bep/empty-hugo-module\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Section Title Output Example in HTML\nDESCRIPTION: This HTML snippet shows the rendered result of a Hugo Go HTML Template for a section that has a defined _index.md with title front matter. The input is template logic that outputs a section's title; the output is semantic HTML with the section name shown in an <h1> tag. This illustrates the effect of proper content organization for Hugo templating.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/section.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h1>My Hugo Blog</h1>\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Connection\nDESCRIPTION: Example of connecting to the remote server using SSH, which should now prompt for the key passphrase rather than a password if key setup was successful.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n~$ ssh user@host\nEnter passphrase for key '/home/mylogin/.ssh/rsa_id':\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific HTTP Response Headers with Hugo resources.GetRemote (Go HTML Template)\nDESCRIPTION: This example requests only the headers 'X-Frame-Options' and 'Server' from a remote server using the responseHeaders option with resources.GetRemote. The method is set to HEAD, which is efficient for checking metadata without retrieving the entire content. The responseHeaders key accepts a slice of header names and header matching is case-insensitive.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/GetRemote.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $url := \"https://example.org/images/a.jpg\" }}\n{{ $opts := dict\n  \"method\" \"HEAD\"\n  \"responseHeaders\" (slice \"X-Frame-Options\" \"Server\")\n}}\n{{ $resource := resources.GetRemote $url $opts }}\n```\n\n----------------------------------------\n\nTITLE: Listing Specific Options for hugo convert toTOML Command in Shell\nDESCRIPTION: Displays the command-line options specifically available for the `hugo convert toTOML` subcommand. The primary option shown is `-h` or `--help` which provides help information for this specific command.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert_toTOML.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for toTOML\n```\n\n----------------------------------------\n\nTITLE: Summing Numbers Using Hugo Add Function (go-html-template)\nDESCRIPTION: Shows a succinct method for summing numeric literals using the 'add' function within a Hugo template, storing the total in variable $total. Outputs the sum, useful for inline arithmetic. No dependencies beyond Hugo template's standard function set.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_14\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $total := add 1 2 3 4 }}\n```\n\n----------------------------------------\n\nTITLE: Creating the AutoOrient Image Filter in Hugo Go Templates\nDESCRIPTION: This snippet demonstrates how to assign the `images.AutoOrient` function to a variable (`$filter`) within a Hugo template. This filter object can then be used with the `images.Filter` function to apply the automatic orientation correction to an image resource based on its EXIF metadata.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/AutoOrient.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.AutoOrient }}\n```\n\n----------------------------------------\n\nTITLE: Running the Deployment Script\nDESCRIPTION: Command to execute the deployment script, which will build the Hugo site and deploy it to the remote server in one step.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\n~/websites/topologix.fr$ ./deploy\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Vendored Module (Text)\nDESCRIPTION: This is a golden file (`vendor.txt`) used for test comparison. It specifies the expected content of the `_vendor/modules.txt` file generated after running the `hugo mod vendor` command, indicating which modules and versions should be vendored.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-- golden/vendor.txt --\n# github.com/bep/empty-hugo-module v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Imaging Processing Options in Hugo using TOML\nDESCRIPTION: This snippet provides the default values for Hugo's image processing settings within a TOML configuration file. It configures options such as anchor positioning for cropping, background color (as a hex RGB value), encoding hint for WebP images, output quality (valid 1-100), and the resampling filter used during resizing. These options affect how images are resized, cropped, and saved, especially when converting between formats that handle transparency differently. Dependencies: Hugo static site generator. Inputs: configuration keys and values. Outputs: changes in image processing behavior for content images during the Hugo site build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/imaging.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[imaging]\nanchor = 'Smart'\nbgColor = '#ffffff'\nhint = 'photo'\nquality = 75\nresampleFilter = 'box'\n\n```\n\n----------------------------------------\n\nTITLE: Using Default Function with Unset Values\nDESCRIPTION: Examples showing how the default function returns the first argument when the second argument is not set (falsy). Demonstrates behavior with zero values, empty strings, and nil values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Default.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ default 42 0 }} → 42\n{{ default 42 \"\" }} → 42\n{{ default 42 dict }} → 42\n{{ default 42 slice }} → 42\n{{ default 42 <nil> }} → 42\n```\n\n----------------------------------------\n\nTITLE: Removing Stop Words from a Sentence using Complement (Hugo, Go HTML Template)\nDESCRIPTION: This snippet shows how to use the 'complement' function to filter out stop words from a sentence split into words. It uses 'split' to tokenize $text and passes the list through 'complement' against a stopWords list, with the result formatted by 'delimit'. Inputs are a string and a slice of stop words, output is a cleaned-up sentence missing common stop words. Only Hugo built-in functions are used.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Complement.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $text := \"The quick brown fox jumps over the lazy dog\" }}\\n{{ $stopWords := slice \"a\" \"an\" \"in\" \"over\" \"the\" \"under\" }}\\n{{ $filtered := split $text \" \" | complement $stopWords }}\\n\\n{{ delimit $filtered \" \" }} → The quick brown fox jumps lazy dog\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Unix Timestamp in Hugo Templates\nDESCRIPTION: Demonstrates converting an ISO 8601 timestamp string to a Unix timestamp using Hugo's time.AsTime and Unix functions. Returns the number of seconds elapsed since January 1, 1970 UTC.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Unix.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Unix }} → 1674891898\n```\n\n----------------------------------------\n\nTITLE: Overriding Sitemap Defaults in Hugo Front Matter (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to configure sitemap properties (`changefreq`, `disable`, `priority`) for an individual page (e.g., `news.md`) within its front matter in a Hugo project. Setting `disable = true` prevents this specific page from appearing in the generated sitemap.xml.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/sitemap.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'News'\n[sitemap]\n  changefreq = 'weekly'\n  disable = true\n  priority = 0.8\n```\n\n----------------------------------------\n\nTITLE: Enabling GitInfo via Command Line Flag\nDESCRIPTION: Alternative method to enable GitInfo using a command line flag when building a Hugo site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhugo --enableGitInfo\n```\n\n----------------------------------------\n\nTITLE: Accessing nested parameters with param shortcode in Hugo\nDESCRIPTION: Example of accessing nested parameter values by chaining identifiers in the param shortcode. Demonstrates the syntax for retrieving values from multi-level parameter structures.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/param.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{%/* param my.nested.param */%}}\n```\n\n----------------------------------------\n\nTITLE: Sample YAML Data for Non-Fiction Books (data/books/nonfiction.yaml)\nDESCRIPTION: Provides sample content for the `data/books/nonfiction.yaml` file. This YAML file contains an array of objects, each representing a non-fiction book with `title`, `author`, and `isbn` properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Data.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- title: The Ancien Régime and the Revolution\n  author: Alexis de Tocqueville\n  isbn: 978-0141441641\n- title: Interpreting the French Revolution\n  author: François Furet\n  isbn: 978-0521280495\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration for Existing Hugo Site - TOML\nDESCRIPTION: Defines the Hugo theme to use in an existing site. This configuration file specifies the chosen theme ('mytheme') and should be placed at the root of the Hugo site. Used by test scripts to verify theme selection functionality. Input is a string value for the theme parameter; output is the configuration used when running Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntheme = \"mytheme\"\n```\n\n----------------------------------------\n\nTITLE: Checking String Suffix in Hugo Template - Go HTML Template\nDESCRIPTION: This snippet demonstrates the usage of the hasSuffix function in Hugo's Go HTML templates to determine whether the string \"Hugo\" ends with the substring \"go\". It evaluates the function and returns a boolean value as the output. The template requires Hugo and the Go HTML templates environment, with no additional dependencies. Inputs include a target string and a suffix, yielding true if the target string ends with the specified suffix, otherwise false.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/HasSuffix.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hasSuffix \\\"Hugo\\\" \\\"go\\\" }} \\u2192 true\n```\n\n----------------------------------------\n\nTITLE: Accessing Filename in Hugo Templates\nDESCRIPTION: Shows how to retrieve the absolute file path using the Filename method in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .Filename }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Sport Emojis\nDESCRIPTION: A markdown table presenting emojis related to various sports, including their visual representations and shortcodes. The table covers a wide range of sports and sporting equipment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#activities) | :soccer: | `:soccer:` | :baseball: | `:baseball:` | [top](#table-of-contents) |\n| [top](#activities) | :softball: | `:softball:` | :basketball: | `:basketball:` | [top](#table-of-contents) |\n| [top](#activities) | :volleyball: | `:volleyball:` | :football: | `:football:` | [top](#table-of-contents) |\n| [top](#activities) | :rugby_football: | `:rugby_football:` | :tennis: | `:tennis:` | [top](#table-of-contents) |\n| [top](#activities) | :flying_disc: | `:flying_disc:` | :bowling: | `:bowling:` | [top](#table-of-contents) |\n| [top](#activities) | :cricket_game: | `:cricket_game:` | :field_hockey: | `:field_hockey:` | [top](#table-of-contents) |\n| [top](#activities) | :ice_hockey: | `:ice_hockey:` | :lacrosse: | `:lacrosse:` | [top](#table-of-contents) |\n| [top](#activities) | :ping_pong: | `:ping_pong:` | :badminton: | `:badminton:` | [top](#table-of-contents) |\n| [top](#activities) | :boxing_glove: | `:boxing_glove:` | :martial_arts_uniform: | `:martial_arts_uniform:` | [top](#table-of-contents) |\n| [top](#activities) | :goal_net: | `:goal_net:` | :golf: | `:golf:` | [top](#table-of-contents) |\n| [top](#activities) | :ice_skate: | `:ice_skate:` | :fishing_pole_and_fish: | `:fishing_pole_and_fish:` | [top](#table-of-contents) |\n| [top](#activities) | :diving_mask: | `:diving_mask:` | :running_shirt_with_sash: | `:running_shirt_with_sash:` | [top](#table-of-contents) |\n| [top](#activities) | :ski: | `:ski:` | :sled: | `:sled:` | [top](#table-of-contents) |\n| [top](#activities) | :curling_stone: | `:curling_stone:` | | | [top](#table-of-contents) |\n```\n\n----------------------------------------\n\nTITLE: Defining Options for images.Dither in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to create a dictionary (map) named `$opts` in a Go HTML template to hold configuration options for the `images.Dither` function. It sets a custom color palette, specifies the 'ClusteredDot4x4' dithering method, and adjusts the dithering strength.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Dither.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict\n  \"colors\" (slice \"222222\" \"808080\" \"dddddd\")\n  \"method\" \"ClusteredDot4x4\"\n  \"strength\" 0.85\n}}\n```\n\n----------------------------------------\n\nTITLE: Module Dependency Graph Output\nDESCRIPTION: Example output of hugo mod graph command showing module dependencies\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-modules/use-modules.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhugo mod graph\n\ngithub.com/bep/my-modular-site github.com/bep/hugotestmods/mymounts@v1.2.0\ngithub.com/bep/my-modular-site github.com/bep/hugotestmods/mypartials@v1.0.7\ngithub.com/bep/hugotestmods/mypartials@v1.0.7 github.com/bep/hugotestmods/myassets@v1.0.4\ngithub.com/bep/hugotestmods/mypartials@v1.0.7 github.com/bep/hugotestmods/myv2@v1.0.0\nDISABLED github.com/bep/my-modular-site github.com/spf13/hyde@v0.0.0-20190427180251-e36f5799b396\ngithub.com/bep/my-modular-site github.com/bep/hugo-fresh@v1.0.1\ngithub.com/bep/my-modular-site in-themesdir\n```\n\n----------------------------------------\n\nTITLE: Invoking Embedded Pagination Template - Hugo Go HTML Template\nDESCRIPTION: This snippet demonstrates direct invocation of Hugo's built-in pagination navigation component, intended for use wherever pagination controls are needed. It requires the current page context, and outputs navigation markup according to the current paginator. No prerequisites beyond standard Hugo project setup. Result is a navigation UI section in HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/pagination.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Hugo Content Directory Structure - Plain Text\nDESCRIPTION: This snippet displays a sample content directory tree for a Hugo site, detailing nested sections, page bundles, and markdown files. It visually aids in understanding how RegularPagesRecursive traverses sections for page collection, and its layout helps relate the returned page lists to the structure. The text should be interpreted as site content structure, not executed code. No dependencies required; input and output are for explanatory use.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RegularPagesRecursive.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── lessons/\\n│   ├── lesson-1/\\n│   │   ├── _index.md\\n│   │   ├── part-1.md\\n│   │   └── part-2.md\\n│   ├── lesson-2/\\n│   │   ├── resources/\\n│   │   │   ├── task-list.md\\n│   │   │   └── worksheet.md\\n│   │   ├── _index.md\\n│   │   ├── part-1.md\\n│   │   └── part-2.md\\n│   ├── _index.md\\n│   ├── grading-policy.md\\n│   └── lesson-plan.md\\n├── _index.md\\n├── contact.md\\n└── legal.md\n```\n\n----------------------------------------\n\nTITLE: Rendering Weighted Pages in Hugo Templates\nDESCRIPTION: Demonstrates how to iterate over weighted pages and render their titles and links in a Hugo template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Get.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $weightedPages := $taxonomyObject.Get \"suspense\" }}\n{{ range $weightedPages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Illustrating .Path for File-Backed and Generated Pages (Text)\nDESCRIPTION: Shows an example content structure with a single post tagged 'hugo' and the resulting generated site structure. It highlights the `.Page.Path` value for different types of generated pages, including the post itself, section list pages (`/posts`), tag list pages (`/tags/hugo`), taxonomy list pages (`/tags`), and the home page (`/`), demonstrating that `.Path` applies even to pages not directly corresponding to a source file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Path.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n└── posts/\n    └── post-1.md  <-- front matter: tags = ['hugo']\n```\n\nLANGUAGE: text\nCODE:\n```\npublic/\n├── posts/\n│   ├── post-1/\n│   │   └── index.html    .Page.Path = /posts/post-1\n│   └── index.html        .Page.Path = /posts\n├── tags/\n│   ├── hugo/\n│   │   └── index.html    .Page.Path = /tags/hugo\n│   └── index.html        .Page.Path = /tags\n└── index.html            .Page.Path = /\n```\n\n----------------------------------------\n\nTITLE: Using relLangURL with Slash Inputs (baseURL: https://example.org/docs/)\nDESCRIPTION: Shows how relLangURL function handles inputs that begin with a slash, when the baseURL is set to https://example.org/docs/.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelLangURL.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ relLangURL \"/\" }}          → /en/\n{{ relLangURL \"/articles\" }}  → /en/articles\n{{ relLangURL \"/style.css\" }} → /en/style.css\n```\n\n----------------------------------------\n\nTITLE: Hugo Deprecation Shortcode Usage\nDESCRIPTION: Illustrates the use of the `deprecated-in` shortcode within Hugo's content files to mark features as deprecated, specifying the version number.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GoogleAnalytics.md#2025-04-23_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\n{{< deprecated-in 0.120.0 >}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Content and Page Resources in a Hugo Template - Go HTML Template\nDESCRIPTION: This Go HTML Template code renders the content and images of a headless page in Hugo by accessing the page and iterating over its image resources. It requires Hugo's template engine and expects the headless content at '/headless'. Inputs are Hugo page objects; outputs include page content and <img> tags for each image resource. Limitations: Only works if resources exist at the specified page path.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/build-options.md#2025-04-23_snippet_2\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ with .Site.GetPage \"/headless\" }}\\n  {{ .Content }}\\n  {{ range .Resources.ByType \"image\" }}\\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\\n  {{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Project with Module Import\nDESCRIPTION: This TOML configuration file (`hugo.toml`) sets the base URL for the Hugo site and defines module settings. It specifically imports the `github.com/gohugoio/hugoTestModule2` module, which contains npm dependencies intended to be merged by the `hugo mod npm pack` command.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_npm.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\nbaseURL = \"https://example.org/\"\n[module]\n[[module.imports]]\npath=\"github.com/gohugoio/hugoTestModule2\"\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of a GoAT Diagram in Hugo\nDESCRIPTION: Shows the visual output rendered by Hugo when processing a fenced code block containing GoAT diagram syntax, like the one in the previous example. This is the resulting ASCII art displayed on the web page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_1\n\nLANGUAGE: goat\nCODE:\n```\n          .               .                .               .--- 1          .-- 1     / 1\n         / \\              |                |           .---+            .-+         +\n        /   \\         .---+---.         .--+--.        |   '--- 2      |   '-- 2   / \\ 2\n       +     +        |       |        |       |    ---+            ---+          +\n      / \\   / \\     .-+-.   .-+-.     .+.     .+.      |   .--- 3      |   .-- 3   \\ / 3\n     /   \\ /   \\    |   |   |   |    |   |   |   |     '---+            '-+         +\n     1   2 3   4    1   2   3   4    1   2   3   4         '--- 4          '-- 4     \\ 4\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair\nDESCRIPTION: Command to generate a new RSA SSH key pair. The -t flag specifies the key type, -q runs in quiet mode, -C adds a comment, and -f specifies the output filename.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n~/.ssh/$ ssh-keygen -t rsa -q -C \"For SSH\" -f rsa_id\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency Values Using lang.FormatAccounting in Hugo - Go HTML Template\nDESCRIPTION: This snippet illustrates the use of Hugo's lang.FormatAccounting function to convert a floating-point number into a currency-formatted string using accounting notation. It requires Hugo's templating environment with localization features, where the first argument is the number, followed by the desired precision (number of fractional digits), and a 3-letter currency code (e.g., \"NOK\"). The output is a string representing the localized currency value according to the active language and region in accounting format. Inputs: a number, integer precision, currency code. Output: localized accounting-format currency string. The function is limited to currencies and locale settings supported by Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/FormatAccounting.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ 512.5032 | lang.FormatAccounting 2 \"NOK\" }} → NOK512.50\n```\n\n----------------------------------------\n\nTITLE: Defining Section-Oriented Content Folders in Hugo Configuration - text\nDESCRIPTION: Details an example content directory structure for a Hugo site, organizing content into multiple section folders (such as auctions, books, films), each with an _index.md file for front matter metadata (e.g., weight) and regular content files. This structure is required by Hugo for section queries using .Sections, enabling templates to access and display immediate descendant sections properly. The example clarifies how directory setup and front matter influence template rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sections.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── auctions/\\n│   ├── 2023-11/\\n│   │   ├── _index.md     <-- front matter: weight = 202311\\n│   │   ├── auction-1.md\\n│   │   └── auction-2.md\\n│   ├── 2023-12/\\n│   │   ├── _index.md     <-- front matter: weight = 202312\\n│   │   ├── auction-3.md\\n│   │   └── auction-4.md\\n│   ├── _index.md         <-- front matter: weight = 30\\n│   ├── bidding.md\\n│   └── payment.md\\n├── books/\\n│   ├── _index.md         <-- front matter: weight = 20\\n│   ├── book-1.md\\n│   └── book-2.md\\n├── films/\\n│   ├── _index.md         <-- front matter: weight = 10\\n│   ├── film-1.md\\n│   └── film-2.md\\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Executing the Jekyll Import Command in Hugo CLI\nDESCRIPTION: Shows the basic command structure for importing a Jekyll site using the Hugo CLI. It requires the source Jekyll root path and the target Hugo path as arguments (represented by `[args]`), along with optional flags (`[flags]`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_import_jekyll.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo import jekyll [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Integer [0, N] with math.Rand (Go HTML Template)\nDESCRIPTION: This snippet shows how to generate a pseudo-random integer within the closed interval [0, N] (in this case, [0, 5]). It uses `math.Rand` to get a float [0.0, 1.0), multiplies it by (N+1) (6 in the example) using `mul`, and then applies `math.Floor` to truncate the decimal part, resulting in an integer from 0 to 5.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Rand.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Rand | mul 6 | math.Floor }}\n```\n\n----------------------------------------\n\nTITLE: Localizing Page URLs with slug in Hugo Front Matter\nDESCRIPTION: Example of setting a localized `slug` in the front matter of a French content file (`content/about.fr.md`). This allows creating a language-specific URL (e.g., `/fr/a-propos/`) for the translated page while maintaining the translation link with other language versions based on filename, directory, or `translationKey`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\ntitle: A Propos\nslug: \"a-propos\"\n```\n\n----------------------------------------\n\nTITLE: Calling a Hugo Shortcode with Inner Content (Markdown)\nDESCRIPTION: Demonstrates calling a paired Hugo shortcode named `card` within a Markdown file (`content/services.md`). The text 'We design the **best** widgets in the world.' is passed as inner content, accessible via the `.Inner` variable in the shortcode template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Inner.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{</* card title=\"Product Design\" */>}}\nWe design the **best** widgets in the world.\n{{</* /card */>}}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Data with .Site.Data and 'sort' in Go HTML Template\nDESCRIPTION: Illustrates how to access a specific subset of data (`.Site.Data.books.fiction`) and use the `sort` template function to order the items by the `title` field before rendering them in an unordered list.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Data.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range sort .Site.Data.books.fiction \"title\" }}\n    <li>{{ .title }} ({{ .author }})</li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Home Page Layout with Go Template\nDESCRIPTION: This Go Template file ('layouts/index.html') defines the HTML structure for the site's home page. It outputs the static text 'Home|' followed by the boolean values of Hugo's built-in variables 'hugo.IsServer' and 'hugo.IsProduction', separated by a semicolon. These variables indicate whether the site is being built by the development server and whether it's a production build, respectively. This template is used to test if these variables have the correct values during a 'hugo build' command.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_build.txt#2025-04-23_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\n-- layouts/index.html --\nHome|IsServer: {{ hugo.IsServer }};IsProduction: {{ hugo.IsProduction }}|\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters with Fallback Using `or` in Hugo Templates (Go HTML)\nDESCRIPTION: Presents an alternative method using the `or` template function in Go HTML templates to retrieve a parameter value with a fallback mechanism. It first attempts to access the `foo` parameter directly from the page's `.Params` map (`.Params.foo`). If that value is falsy (e.g., `false`, `0`, `\"\"`, `nil`) or does not exist, it falls back to the site's `foo` parameter (`site.Params.foo`). This construct specifically ignores falsy values found at the page level, unlike `.Param`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Param.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ or .Params.foo site.Params.foo }}\n```\n\n----------------------------------------\n\nTITLE: Emoji Shortcodes for Flowers (Plaintext)\nDESCRIPTION: A list of plaintext shortcodes used to represent flower emojis. These shortcodes are typically used in Markdown or systems supporting emoji rendering via text codes, such as Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n:bouquet:\n:cherry_blossom:\n:white_flower:\n:lotus:\n:rosette:\n:rose:\n:wilted_flower:\n:hibiscus:\n:sunflower:\n:blossom:\n:tulip:\n:hyacinth:\n```\n\n----------------------------------------\n\nTITLE: YouTube Privacy Configuration in Hugo\nDESCRIPTION: A code-toggle shortcode that displays the configuration options for YouTube privacy settings in Hugo's site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/youtube.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{{< code-toggle config=privacy.youTube />}}\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for `hugo mod verify` Command (Shell)\nDESCRIPTION: Demonstrates the basic command structure for `hugo mod verify`. It shows that the command can be followed by optional flags and arguments to initiate the dependency verification process for the current Hugo module.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_verify.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod verify [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Slice with collections.Slice in Hugo Templates\nDESCRIPTION: Creates an empty slice with no initial values using the collections.Slice function. This is useful when you need to initialize an empty collection that will be populated later.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Slice.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice }}\n```\n\n----------------------------------------\n\nTITLE: Fenced Code Block with Filename and Copy Button for Go-HTML-Template - Text\nDESCRIPTION: This example shows a fenced code block in Markdown, specifying 'go-html-template' language and including a filename header and copy-to-clipboard metadata. It is intended for documentation to display code from 'layouts/partials/foo.html' with a one-click copy feature. No code execution occurs; renderer must support the custom attributes for UI enhancements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n```go-html-template {file=\"layouts/partials/foo.html\" copy=true}\n{{ if eq $foo \"bar\" }}\n  {{ print \"foo is bar\" }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Persisting Hugo Zsh Completion for macOS - shell\nDESCRIPTION: This command saves the Hugo Zsh completion script in the Zsh functions path used by Homebrew on macOS. It requires the 'brew' package manager and assumes Hugo is installed via Homebrew or available in the user's PATH. The snippet ensures that Zsh completions for Hugo are available in every new terminal session on macOS.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_zsh.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhugo completion zsh > $(brew --prefix)/share/zsh/site-functions/_hugo\n```\n\n----------------------------------------\n\nTITLE: Cascading a Parameter to All Descendants in Hugo Config\nDESCRIPTION: Demonstrates setting a `color` parameter within the `cascade.params` table in the site configuration (`hugo.toml`). This parameter will be applied to the home page and all its descendant pages unless overridden by a more specific cascade rule or the page's own front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/cascade.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Home'\n[cascade.params]\ncolor = 'red'\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in Hugo using YAML Front Matter\nDESCRIPTION: This YAML block defines front matter for a Hugo content file. It sets essential metadata like the page `title`, `linkTitle` for menus/listings, a brief `description`, organizational `categories` and `keywords` (both empty in this case), and a `weight` for ordering pages within a section. This metadata is used by Hugo during site generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Command line interface\nlinkTitle: CLI\ndescription: Use the command line interface (CLI) to manage your site.\ncategories: []\nkeywords: []\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Remote URL Access via Environment Variable (Shell/Text)\nDESCRIPTION: Demonstrates how to override the site configuration to block the `resources.GetRemote` function from accessing any URL by setting the `HUGO_SECURITY_HTTP_URLS` environment variable to `none`. This command is typically executed in a shell environment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/security.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nexport HUGO_SECURITY_HTTP_URLS=none\n```\n\n----------------------------------------\n\nTITLE: Creating an images.Hue Filter in Hugo Go Template\nDESCRIPTION: This Go HTML template snippet demonstrates how to create an image filter using `images.Hue`. It assigns a filter, configured to shift the image hue by -15 degrees, to the variable `$filter`. The `SHIFT` argument (-15 in this case) specifies the hue angle shift, which is typically expected to be within the range [-180, 180].\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Hue.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Hue -15 }}\n```\n\n----------------------------------------\n\nTITLE: Using Audio Shortcode in Hugo Content\nDESCRIPTION: Example of using a custom audio shortcode in Hugo content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n{{</* audio src=/audio/test.mp3 */>}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taxonomies for Book Reviews in Hugo (TOML)\nDESCRIPTION: Defines 'author' and 'genre' as taxonomies in the Hugo site configuration file (e.g., `hugo.toml`). This setup allows content files to be tagged with authors and genres, which can then be used by the related content feature.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/related-content.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[taxonomies]\nauthor = 'authors'\ngenre = 'genres'\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Taxonomy Listing\nDESCRIPTION: The resulting HTML output from the taxonomy listing template showing linked book titles.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Taxonomies.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/books/and-then-there-were-none/\">And Then There Were None</a></li>\n  <li><a href=\"/books/death-on-the-nile/\">Death on the Nile</a></li>\n  <li><a href=\"/books/jamaica-inn/\">Jamaica Inn</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Listing MediaType Suffixes of a Hugo Resource\nDESCRIPTION: This snippet demonstrates how to fetch all possible file suffixes (extensions) associated with a resource’s media type in Hugo templates. It uses resources.Get to find the resource and accesses the .MediaType.Suffixes slice property. The output is a list or array of valid suffixes, useful for template logic or display purposes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/MediaType.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .MediaType.Suffixes }} → [jpg jpeg jpe jif jfif]\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Limitation of Manipulating PostProcessed Resource Properties (Go HTML Template)\nDESCRIPTION: An example demonstrating a limitation of `resources.PostProcess`. Attempting to manipulate properties (like `.RelPermalink`) of the resource *after* `resources.PostProcess` has been applied within the template might not yield the expected result, as the final processing happens later. In this specific case, `strings.ToUpper` would likely operate on the placeholder value, not the final fingerprinted path.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/PostProcess.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $css := resources.Get \"css/main.css\" }}\n{{ $css = $css | css.PostCSS | minify | fingerprint | resources.PostProcess }}\n{{ $css.RelPermalink | strings.ToUpper }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Data in Hugo Templates using Go HTML Templates\nDESCRIPTION: Demonstrates how to access the Title property of the Site object within a Hugo template using Go's HTML templating language. This requires Hugo as the static site generator, and the code must be placed within a template file processed by Hugo. The '.Site.Title' expression outputs the configured site title, expecting relevant site configuration. The output is a string representing the site's title, and no additional parameters are required. The template assumes that the Site object is available in the rendering context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Site.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Title }}\n```\n\n----------------------------------------\n\nTITLE: Calculating Duration and Formatting in Hugo Go Templates\nDESCRIPTION: Demonstrates how to use the time.Duration function in Hugo's Go template to calculate the duration for a given unit and number, and then format the output using printf. Requires Hugo template rendering engine, with the time module enabled. The input parameters are a string time unit and a number, returning a time.Duration object; the example computes the number of seconds in 24 hours. The code expects valid time units as listed, and output is a formatted sentence.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/Duration.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $duration := time.Duration \"hour\" 24 }}\\n{{ printf \"There are %.0f seconds in one day.\" $duration.Seconds }}\n```\n\n----------------------------------------\n\nTITLE: Counting Weighted Pages for Taxonomy Term in Hugo\nDESCRIPTION: Demonstrates how to use the Count method on a Taxonomy object to get the number of weighted pages assigned to the 'suspense' term. The method returns an integer representing the count of pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Count.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomyObject.Count \"suspense\" }} → 3\n```\n\n----------------------------------------\n\nTITLE: Organizing Example Content Structure for Hugo Page Resources (text)\nDESCRIPTION: Displays another example directory layout for a Hugo page bundle, highlighting which files are recognized as page resources. This is important for demonstrating how Hugo links resources like images, JSON data, and markdown files to the bundle. It serves as a reference for subsequent template access examples.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n└── example/\\n    ├── data/\\n    │  └── books.json   <-- page resource\\n    ├── images/\\n    │  ├── a.jpg        <-- page resource\\n    │  └── b.jpg        <-- page resource\\n    ├── snippets/\\n    │  └── text.md      <-- page resource\\n    └── index.md\n```\n\n----------------------------------------\n\nTITLE: Using the title Template Function in Go HTML Template\nDESCRIPTION: This Go HTML template snippet demonstrates the usage of the `title` function, which is an alias for `strings.Title`. It takes the string \"table of contents (TOC)\" as input and converts it to title case according to the configured style (defaulting to Associated Press Stylebook), outputting \"Table of Contents (TOC)\". The specific output depends on the Hugo site configuration for `titleCaseStyle`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Title.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ title \"table of contents (TOC)\" }} → Table of Contents (TOC)\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Parameters in Hugo\nDESCRIPTION: Example of setting a boolean parameter in Hugo configuration file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/IsSet.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[params]\nshowHeroImage = false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Go Version with hugo.GoVersion in Hugo Templates\nDESCRIPTION: Demonstrates how to use the hugo.GoVersion function to get the Go version that was used to compile the Hugo binary. This returns a string with the Go version number, which can be useful for debugging or displaying version information.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/GoVersion.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.GoVersion }} → go1.21.1\n```\n\n----------------------------------------\n\nTITLE: Using path.Base to Extract the Last Path Element in Hugo Templates\nDESCRIPTION: Demonstrates the `path.Base` function in Hugo templates. It takes a path string as input, replaces platform-specific separators with forward slashes (`/`), and returns the last element (filename or directory name). Examples cover various path structures including relative paths with extensions, simple filenames, nested directories, absolute paths with trailing slashes, and empty paths (which returns '.').\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/path/Base.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ path.Base \"a/news.html\" }} → news.html\n{{ path.Base \"news.html\" }} → news.html\n{{ path.Base \"a/b/c\" }} → c\n{{ path.Base \"/x/y/z/\" }} → z\n{{ path.Base \"\" }} → .\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Parameters in Hugo Menu Configuration\nDESCRIPTION: Example configuration showing how to define menu entries with custom parameters in Hugo. It demonstrates setting up main menu items with names, page references, weights, and a custom 'rel' parameter for external links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Params.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[[menus.main]]\nname = 'About'\npageRef = '/about'\nweight = 10\n\n[[menus.main]]\nname = 'Contact'\npageRef = '/contact'\nweight = 20\n\n[[menus.main]]\nname = 'Hugo'\nurl = 'https://gohugo.io'\nweight = 30\n[menus.main.params]\n  rel = 'external'\n```\n\n----------------------------------------\n\nTITLE: Error Handling with IsAncestor Function in Hugo\nDESCRIPTION: Shows how to implement error reporting when a page is not found by using the else clause with the with statement while checking ancestry.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsAncestor.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $path := \"/auctions/2023-11\" }}\n{{ with .Site.GetPage $path }}\n  {{ $.IsAncestor . }} → true\n{{ else }}\n  {{ errorf \"Unable to find the section with path %s\" $path }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Adding a Page with AddPage in Hugo Content Adapter (Go HTML Template)\nDESCRIPTION: Shows how to use the AddPage method within a Hugo content adapter template to programmatically add a page during site generation. It constructs content and page dictionaries, specifying parameters such as mediaType, value, kind, path, and title. Requires Hugo installed and placement of the file as _content.gotmpl in a content section directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $content := dict\\n  \"mediaType\" \"text/markdown\"\\n  \"value\" \"The _Hunchback of Notre Dame_ was written by Victor Hugo.\"\\n}}\\n{{ $page := dict\\n  \"content\" $content\\n  \"kind\" \"page\"\\n  \"path\" \"the-hunchback-of-notre-dame\"\\n  \"title\" \"The Hunchback of Notre Dame\"\\n}}\\n{{ .AddPage $page }}\n```\n\n----------------------------------------\n\nTITLE: Printing Configured File Mounts in Hugo - Shell\nDESCRIPTION: Displays the syntax for invoking the 'hugo config mounts' command, which prints the configured file mounts for a Hugo site. No additional dependencies are required beyond having Hugo installed. The 'flags' and 'args' parameters allow for customization and passing various command-line options, with the command emitting output to the console.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_config_mounts.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo config mounts [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 404 Page in Hugo (HTML)\nDESCRIPTION: This Hugo template (`layouts/404.html`) provides the content for the 404 \"Not Found\" page. When the `hugo server` cannot find a requested page (like `/doesnotexist` in the test script), it serves the content defined in this file, which is simply the text \"custom 404\". The test script verifies that this custom 404 page is correctly served.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server.txt#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/404.html --\ncustom 404\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Configuration in hugo.toml (TOML)\nDESCRIPTION: Shows a minimal configuration file (`hugo.toml`) for a Hugo theme named 'mytheme', located within the `themes/mytheme/` directory. This file sets the theme's specific title using the `title` key, distinguishing it from the main project configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod__themesdir.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n-- themes/mytheme/hugo.toml --\ntitle = \"My Theme\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Day from Timestamp in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to get the day of the month from a timestamp using Hugo's time.AsTime function and the Day method. It first converts a string timestamp to a time.Time object, then extracts the day component which returns 27.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Day.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Day }} → 27\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual 404 Redirects (Default Language in Subdir) in Hugo (TOML)\nDESCRIPTION: Example TOML configuration in `config/development/server.toml` for handling 404 errors on a multilingual Hugo site where the default language (`en`) *is* served from a subdirectory (`defaultContentLanguageInSubdir = true`). It defines a specific redirect for French (`/fr/**` to `/fr/404.html`) and a fallback redirect for any other path (`/**`) to the default language's 404 page (`/en/404.html`). The default language rule must be last.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/server.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'en'\ndefaultContentLanguageInSubdir = true\n[[redirects]]\nfrom = '/fr/**'\nto = '/fr/404.html'\nstatus = 404\n\n[[redirects]] # Default language must be last.\nfrom = '/**'\nto = '/en/404.html'\nstatus = 404\n```\n\n----------------------------------------\n\nTITLE: HTML Output of TOML to JSON Conversion using transform.Remarshal\nDESCRIPTION: This snippet shows the resulting HTML output after using transform.Remarshal to convert TOML to JSON. The JSON is wrapped in a <pre> tag and special characters are escaped for proper HTML rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Remarshal.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre>{\n   &#34;baseURL&#34;: &#34;https://example.org/&#34;,\n   &#34;languageCode&#34;: &#34;en-US&#34;,\n   &#34;title&#34;: &#34;ABC Widgets&#34;\n}\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Getting Values from Hugo Store\nDESCRIPTION: Shows how to retrieve a previously set value from the site's store.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Store.Set \"greeting\" \"Hello\" }}\n{{ site.Store.Get \"greeting\" }} → Hello\n```\n\n----------------------------------------\n\nTITLE: Accessing Base URL in Hugo Template - Go HTML Template\nDESCRIPTION: This Go HTML Template snippet demonstrates retrieving the BaseURL value from Hugo\\'s site configuration within a template. Using `{{ .Site.BaseURL }}` outputs the configured base URL, assisting in constructing absolute links. Prerequisite is setting the baseURL in the site config. Input: site context; Output: baseURL as a string. Usage is discouraged in favor of more robust built-in functions like absURL.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/BaseURL.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.BaseURL }} \\u2192 https://example.org/docs/\n```\n\n----------------------------------------\n\nTITLE: Applying Image Filters using Pipe Syntax in Hugo Go Templates\nDESCRIPTION: Applies multiple image filters (Gaussian Blur and Pixelate) to an image resource (`$image`) using Hugo's pipe syntax (`|`). The `images.Filter` function takes the filter functions (`images.GaussianBlur`, `images.Pixelate`) as arguments. Filters are applied sequentially.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_14\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := $image | images.Filter (images.GaussianBlur 6) (images.Pixelate 8) }}\n```\n\n----------------------------------------\n\nTITLE: Using safe.JS to Render Unescaped JavaScript in Go HTML Template\nDESCRIPTION: Illustrates how to use the `safeJS` filter (an alias for `safe.JS`) in a Hugo template to prevent escaping of a string variable. The string 'x + y' is declared safe, intended to be rendered verbatim as a JavaScript expression.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/JS.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $js := \"x + y\" }}\n<script>const a = {{ $js | safeJS }}</script>\n```\n\n----------------------------------------\n\nTITLE: Describing Hugo Branch Bundle Structure with Tree Output (text)\nDESCRIPTION: Represents the arrangement of branch bundles, leaf bundles, and resources using an ASCII directory tree for Hugo content folders. This is designed to visually explain how branch bundles relate to descendants and resources, clarifying conceptual organization for users. Intended audience is Hugo users setting up nested content and resource associations. Only intended as reference text, all items must be interpreted manually.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-bundles.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── branch-bundle-1/\\n│   ├── _index.md\\n│   ├── content-1.md\\n│   ├── content-2.md\\n│   ├── image-1.jpg\\n│   └── image-2.png\\n├── branch-bundle-2/\\n│   ├── a-leaf-bundle/\\n│   │   └── index.md\\n│   └── _index.md\\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Go Module Dependencies and Metadata in Go\nDESCRIPTION: Specifies the Go module version and dependencies for the Hugo test project. This snippet relies on Go 1.19 tooling and requires network access for dependency resolution. It lists the core module path and an explicit dependency, and is used as input to 'hugo mod tidy'. Outputs the initial dependency graph and module metadata.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_tidy.txt#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n[[-- go.mod --\\ngo 1.19\\n\\nrequire github.com/bep/empty-hugo-module v1.0.0\\n\\nmodule github.com/gohugoio/testmod]]\n```\n\n----------------------------------------\n\nTITLE: Executing `hugo mod tidy` Command\nDESCRIPTION: Shows the basic command-line syntax for executing the `hugo mod tidy` command. This command is used to remove unused entries in the `go.mod` and `go.sum` files, effectively cleaning up module dependencies. Optional flags and arguments can be provided as indicated.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_tidy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo mod tidy [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Hugo Page Resources\nDESCRIPTION: Illustrates a typical Hugo content directory structure containing a page (`index.md`) and an associated image resource (`a.jpg`) within an `images` subdirectory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Params.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── posts/\n│   ├── cats/\n│   │   ├── images/\n│   │   │   └── a.jpg\n│   │   └── index.md\n│   └── _index.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Escaping Shortcode Tags inside Markdown Code Fences (Text/Markdown)\nDESCRIPTION: Illustrates how to write code examples within Markdown in Hugo when documenting usage of Hugo shortcodes. Special escaping (/* and */) is used to prevent the shortcode from being processed by the Hugo engine during site build. This ensures the code is displayed as intended in documentation rather than executed as a shortcode. Inputs are MyHugo shortcodes inside a text code block; output is escaped shortcode code shown to users.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/syntax-highlighting.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```text {linenos=inline}\n{{</*/* shortcode-1 */*/>}}\n\n{{%/*/* shortcode-2 */*/%}}\n```\n```\n\n----------------------------------------\n\nTITLE: Appending Two Elements to a Slice in Hugo Templates (Go HTML Template)\nDESCRIPTION: This example creates an initial slice with two elements and then demonstrates how to append two more elements in a single call. The append function accepts multiple arguments, and the output illustrates the effect of adding several elements at once. No prerequisites beyond Hugo template usage.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Append.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \\\"a\\\" \\\"b\\\" }}\\n{{ $s }} → [a b]\\n\\n{{ $s = $s | append \\\"c\\\" \\\"d\\\" }}\\n{{ $s }} → [a b c d]\n```\n\n----------------------------------------\n\nTITLE: Merging Specific Language Site Pages with Hugo `lang.Merge` (Go Template)\nDESCRIPTION: This snippet demonstrates merging page collections from the current site, a French site (`$frSite`), and an English site (`$enSite`) using Hugo's `lang.Merge` function. It pipes the initial `.Site.RegularPages` collection first into `lang.Merge` with `$frSite.RegularPages` and then the result into `lang.Merge` with `$enSite.RegularPages`, effectively filling missing pages sequentially from French and then English sources. Requires `$frSite` and `$enSite` variables representing the respective language sites to be defined.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Merge.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{{ $pages := .Site.RegularPages | lang.Merge $frSite.RegularPages | lang.Merge $enSite.RegularPages }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Markdown Attribute Support for Block Elements in Hugo Configuration (TOML)\nDESCRIPTION: Shows a TOML configuration snippet for Hugo enabling attribute support for title and block-level Markdown elements using Goldmark. Place this under the appropriate config file (typically config.toml). Set 'title' and 'block' to true to enable corresponding attribute behaviors.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/markdown-attributes.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.parser.attribute]\\ntitle = true # default is true\\nblock = true # default is false\n```\n\n----------------------------------------\n\nTITLE: Using strings.TrimSuffix in Go HTML Templates\nDESCRIPTION: This snippet demonstrates the `strings.TrimSuffix` function in Go HTML Templates for Hugo. It shows how to remove a specified suffix from the end of a string. The examples illustrate removing 'a' and 'aa' from 'aabbaa', and how the string remains unchanged if the suffix 'aaa' does not match the end.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/TrimSuffix.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.TrimSuffix \"a\" \"aabbaa\" }} → aabba\n{{ strings.TrimSuffix \"aa\" \"aabbaa\" }} → aabb\n{{ strings.TrimSuffix \"aaa\" \"aabbaa\" }} → aabbaa\n```\n\n----------------------------------------\n\nTITLE: Creating images.Text Filter with Options in Hugo Template\nDESCRIPTION: Retrieves the image resource specified by `$imagePath` using `resources.Get`. If successful, it defines a dictionary (`$opts`) containing configuration options for the text filter: horizontal alignment (`alignx`), text color (`color`), the previously fetched font resource (`$font`), line spacing, font size, and calculated coordinates (`x`, `y`) to center the text. Finally, it creates the image filter using `images.Text` with the specified `$text` and `$opts`, assigning the result to `$filter`. Includes error handling if the image resource cannot be found.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Text.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $r := \"\" }}\n{{ $filter := \"\" }}\n{{ with $r = resources.Get $imagePath }}\n  {{ $opts := dict\n    \"alignx\" \"center\"\n    \"color\" \"#fbfaf5\"\n    \"font\" $font\n    \"linespacing\" 8\n    \"size\" 60\n    \"x\" (mul .Width 0.5 | int)\n    \"y\" (mul .Height 0.5 | int)\n  }}\n  {{ $filter = images.Text $text $opts }}\n{{ else }}\n  {{ errorf \"Unable to get resource %s\" $imagePath }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Link Render Hook in Hugo\nDESCRIPTION: A basic link render hook template that renders Markdown links according to the CommonMark specification, showing how to use the context variables.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/links.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<a href=\"{{ .Destination | safeURL }}\"\n  {{- with .Title }} title=\"{{ . }}\"{{ end -}}\n>\n  {{- with .Text }}{{ . }}{{ end -}}\n</a>\n{{- /* chomp trailing newline */ -}}\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended with Scoop on Windows\nDESCRIPTION: Command to install the extended edition of Hugo using the Scoop package manager for Windows.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/windows.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nscoop install hugo-extended\n```\n\n----------------------------------------\n\nTITLE: Setting Map Values in Hugo Store\nDESCRIPTION: Shows how to set key-value pairs in a map using SetInMap.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Store.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ site.Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ site.Store.Get \"greetings\" }} → map[english:Hello french:Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Mounting Resources for Context in Hugo Go Template\nDESCRIPTION: Demonstrates mounting a collection of global resources (`$common`, obtained via `resources.Match`) from a base path (`/js/headlessui/*.*`) to a target path (`.`) relative to the current page context. The `.Mount` method facilitates this. The mounted resources, along with the current page (`$.Page`), are combined into a slice (`$importContext`). This context is primarily intended for use with functions like `js.Batch` to manage JavaScript import paths. Requires access to global resources via `resources.Match` and the `$.Page` variable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Resources.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $common := resources.Match \"/js/headlessui/*.*\" }}\n{{ $importContext := (slice $.Page ($common.Mount \"/js/headlessui\" \".\")) }}\n```\n\n----------------------------------------\n\nTITLE: Calling the resources.ToCSS Function (Signature)\nDESCRIPTION: Defines the signature for invoking the `resources.ToCSS` function within Hugo templates. It accepts an optional `OPTIONS` map and a mandatory `RESOURCE` object (typically the Sass file) and yields a transpiled CSS `resource.Resource`. Note this function is deprecated as of Hugo v0.128.0.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/ToCSS.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nresources.ToCSS [OPTIONS] RESOURCE\n```\n\n----------------------------------------\n\nTITLE: Sourcing Hugo Zsh Completion in Current Session - shell\nDESCRIPTION: This snippet sources the Hugo-generated Zsh completion script into the current shell session by executing the output of the 'hugo completion zsh' command. It depends on the Hugo CLI being installed and available in the system path. This command temporarily enables completion without persisting changes to future sessions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_zsh.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsource <(hugo completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Basic Netlify Configuration for Hugo Sites\nDESCRIPTION: A simple Netlify configuration file (netlify.toml) for deploying Hugo sites. It specifies the Hugo version, Node.js version, timezone, and build commands.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-netlify/index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build.environment]\nHUGO_VERSION = \"0.144.2\"\nNODE_VERSION = \"22\"\nTZ = \"America/Los_Angeles\"\n\n[build]\npublish = \"public\"\ncommand = \"hugo --gc --minify\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Metadata in go.mod (Go Module)\nDESCRIPTION: This 'go.mod' file defines the Go module metadata for the project. It declares the module path as 'foo' and specifies the required Go language version as '1.19'. While Hugo manages its own module system, the presence of 'go.mod' signifies that this project is also a Go module, which is a prerequisite for using Hugo Modules.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod__disable.txt#2025-04-23_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule foo\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Module Vendoring and Verification Steps (Shell)\nDESCRIPTION: This shell script executes the `hugo mod vendor` command to populate the `_vendor` directory based on module definitions. It then compares the generated `_vendor/modules.txt` file with a golden file (`golden/vendor.txt`) and lists the contents of specific vendored module directories to ensure the correct files (config.toml, hugo.toml) are present. The `dostounix` command likely ensures consistent line endings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_vendor.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndostounix golden/vendor.txt\n\nhugo mod vendor\ncmp _vendor/modules.txt golden/vendor.txt\nls _vendor/github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml\nstdout 'config.toml'\nls _vendor/github.com/gohugoio/hugo-mod-integrationtests/withhugotoml\nstdout 'hugo.toml'\n```\n\n----------------------------------------\n\nTITLE: Git Branch Creation Command\nDESCRIPTION: Command to create a new Git branch with a descriptive name including issue number for documentation changes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b restructure-foo-page-99999\n```\n\n----------------------------------------\n\nTITLE: Using transform.XMLEscape in Hugo Templates\nDESCRIPTION: Demonstrates how to use the transform.XMLEscape function to escape XML-sensitive characters in a Hugo template. The function converts special characters to their XML entity equivalents.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/XMLEscape.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ transform.XMLEscape \"<p>abc</p>\" }} → &lt;p&gt;abc&lt;/p&gt;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Build using Environment Variables (Shell)\nDESCRIPTION: Demonstrates how to set Hugo configuration options (`baseURL`, `enableGitInfo`, `environment`) using environment variables prefixed with `HUGO_`. These variables override settings found in configuration files when the `hugo` build command is run.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nexport HUGO_BASEURL=https://example.org/\nexport HUGO_ENABLEGITINFO=true\nexport HUGO_ENVIRONMENT=staging\nhugo\n```\n\n----------------------------------------\n\nTITLE: Enabling robots.txt Generation in Hugo Configuration (TOML)\nDESCRIPTION: This configuration snippet, typically placed in `hugo.toml` or `config.toml`, sets the `enableRobotsTXT` flag to `true`. This instructs Hugo to automatically generate a `robots.txt` file in the site's root during the build process, using either the embedded template or a custom one if provided.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/robots.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nenableRobotsTXT = true\n```\n\n----------------------------------------\n\nTITLE: Conditionally Loading KaTeX CSS in Base Template\nDESCRIPTION: Base template code that conditionally includes KaTeX CSS stylesheet when mathematical content has been rendered on the page, using the page store to track state.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/passthrough.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<head>\n  {{ $noop := .WordCount }}\n  {{ if .Page.Store.Get \"hasMath\" }}\n    <link href=\"https://cdn.jsdelivr.net/npm/katex@0.16.21/dist/katex.min.css\" rel=\"stylesheet\">\n  {{ end }}\n</head>\n```\n\n----------------------------------------\n\nTITLE: Cropping an Image using .Process in Hugo Template\nDESCRIPTION: This snippet demonstrates how to retrieve an image resource using `resources.Get` and then apply a crop operation using the `.Process` method. It specifies the action 'crop' and the dimensions '200x200'. The resulting processed image's `RelPermalink`, `Width`, and `Height` are used to generate an HTML `<img>` tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Process.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Process \"crop 200x200\" }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Attribute Notation for Paragraphs in Hugo Markdown (Plain Text)\nDESCRIPTION: Shows alternate, concise syntax for specifying class and id HTML attributes underneath a paragraph in Hugo Markdown using '.' and '#' shorthand. Requires Hugo with attribute-aware Goldmark parser. Useful for quickly adding multiple classes or ids to paragraph elements without long-form attribute notation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/markdown-attributes.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis is a paragraph.\\n{.foo .bar #baz}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for URL with Query String in Hugo\nDESCRIPTION: Displays the HTML output after Hugo processes the template, showing the properly encoded query string in the href attribute.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Querify.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://example.org?a=1&amp;b=2\">Link</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Title in Hugo Config\nDESCRIPTION: Demonstrates how to set the site title in Hugo's configuration file using TOML syntax\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Title.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'My Documentation Site'\n```\n\n----------------------------------------\n\nTITLE: Debugging ByCount Data Structure\nDESCRIPTION: Demonstrates how to inspect the data structure of ByCount results using debug.Dump.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/ByCount.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump $taxonomyObject.ByCount }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output for Book 2 Translations (HTML)\nDESCRIPTION: Shows the expected HTML output generated by the Go HTML template when rendering the \"Book 2\" page on the English site. Since only a German translation exists for \"Book 2\" (as per the example directory structure), the list contains only one link (`<a>`) pointing to the German version (`/de/books/book-1/`) with the appropriate `hreflang` attribute (`de-DE`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Translations.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/de/books/book-1/\" hreflang=\"de-DE\">Book 1 (Deutsch)</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Comparing Various Data Types with compare.Le in Hugo Templates\nDESCRIPTION: This snippet shows how to use the compare.Le function with different data types in Hugo templates. It includes examples of comparing strings, dates, and boolean values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Le.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ le \"ab\" \"a\" }} → false\n{{ le time.Now (time.AsTime \"1964-12-30\") }} → false\n{{ le true false }} → false\n```\n\n----------------------------------------\n\nTITLE: Comparing Numeric Values with compare.Ge in Hugo Templates\nDESCRIPTION: Examples of using compare.Ge function to compare numeric values in Hugo templates. Shows various combinations of number comparisons returning boolean results.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Ge.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ ge 1 1 }} → true\n{{ ge 1 2 }} → false\n{{ ge 2 1 }} → true\n\n{{ ge 1 1 1 }} → true\n{{ ge 1 1 2 }} → false\n{{ ge 1 2 1 }} → false\n{{ ge 1 2 2 }} → false\n\n{{ ge 2 1 1 }} → true\n{{ ge 2 1 2 }} → true\n{{ ge 2 2 1 }} → true\n```\n\n----------------------------------------\n\nTITLE: Generating Multilingual Content in Different Directories\nDESCRIPTION: Shell commands to create new multilingual content files in Hugo using separate language directories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nhugo new content content/en/post/test.md\nhugo new content content/de/post/test.md\n```\n\n----------------------------------------\n\nTITLE: Checking Production Environment with hugo.IsProduction (Go HTML Template)\nDESCRIPTION: This Go HTML template snippet demonstrates how to use the built-in `hugo.IsProduction` variable. It evaluates to `true` if the Hugo environment variable (`HUGO_ENV` or `--environment` flag) is set to \"production\", and `false` otherwise. This allows for conditional logic within templates based on the build environment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/IsProduction.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.IsProduction }} → true/false\n```\n\n----------------------------------------\n\nTITLE: Applying images.Colorize Filter via Shortcode Arguments\nDESCRIPTION: This example demonstrates applying the `images.Colorize` filter directly within a custom Hugo shortcode (`img`). The `filter` parameter specifies the filter name ('Colorize'), and `filterArgs` provides the necessary arguments (hue=180, saturation=50, percentage=20) as a comma-separated string. This allows applying the filter declaratively when including the image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Colorize.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{< img\n  src=\"images/examples/zion-national-park.jpg\"\n  alt=\"Zion National Park\"\n  filter=\"Colorize\"\n  filterArgs=\"180,50,20\"\n  example=true\n>}}\n```\n\n----------------------------------------\n\nTITLE: Debugging Hugo Fragments Identifiers\nDESCRIPTION: Outputs the slice containing the id attribute of each heading on the page using debug.Dump.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Fragments.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump .Fragments.Identifiers }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Debugging Weighted Pages in Hugo Templates\nDESCRIPTION: Shows how to inspect the data structure of weighted pages using the debug.Dump function in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Get.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump $weightedPages }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Setting Build Drafts Flag via Shell - Shell\nDESCRIPTION: This snippet demonstrates the use of a shell command to enable the building of draft pages in Hugo. By appending the --buildDrafts flag to the hugo command, the build process includes pages marked as drafts. It requires Hugo to be installed and run from a shell/command line environment. No input parameters are needed beyond the flag, and the output is the inclusion of draft pages in the build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/BuildDrafts.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo --buildDrafts\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter Title - TOML\nDESCRIPTION: Defines the 'title' field in a page's front matter using TOML syntax. This field is accessed by the Title method in Hugo to display or use the page title. No external dependencies are required. The key 'title' expects a string value representing the page title, which is typically displayed in templates or metadata.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Title.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'About us'\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Front Matter (YAML)\nDESCRIPTION: This YAML block sets the front matter metadata for a Hugo content file. It specifies the `title` ('Configuration') and `description` ('Configure your site.') for the page, initializes empty lists for `categories` and `keywords`, and assigns a `weight` (10), often used for ordering pages within a section.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Configuration\ndescription: Configure your site.\ncategories: []\nkeywords: []\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Adding a forked remote repository\nDESCRIPTION: This command adds your GitHub fork as a remote repository to push changes to for creating pull requests.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add fork git@github.com:USERNAME/hugo.git\n```\n\n----------------------------------------\n\nTITLE: Hugo Output URL Construction for Single Content Pages (Text)\nDESCRIPTION: This snippet visually details how Hugo builds the output URL and permalink for a single content page using baseurl, section, and slug parts, illustrating the result for users. The diagram is designed to help users understand Hugo's output location for single content files, and is not intended for execution.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/organization/index.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\\n                               url (\"/posts/my-first-hugo-post/\")\\n                   ⊢------------^----------⊣\\n       baseurl     section     slug\\n⊢--------^--------⊣⊢-^--⊣⊢-------^---------⊣\\n                 permalink\\n⊢--------------------^---------------------⊣\\nhttps://example.org/posts/my-first-hugo-post/index.html\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hugo Configuration File (TOML)\nDESCRIPTION: This configuration file (`myconfig.toml`) is intended to be loaded via the `--config` flag. It overrides the default `baseURL`, disables several kinds of pages (like RSS, sitemap, etc.), and defines a site parameter `foo` with the value \"bar\".\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n-- myconfig.toml --\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\n[params]\nfoo = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Page Frontmatter in TOML\nDESCRIPTION: This snippet shows how to define basic page metadata in Hugo using TOML frontmatter. It sets the page title to 'Posts', specifies the creation date with timezone information, and marks the content as not being a draft.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/create/skeletons/theme/content/posts/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = 'Posts'\ndate = 2023-01-01T08:30:00-07:00\ndraft = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Formatting Percentage Values in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the lang.FormatPercent function in a Go HTML template within the Hugo framework to display a numeric value as a percentage string with a specified precision. It requires Hugo's built-in lang.FormatPercent function and is locale-aware, adapting the format to the current language and region. The NUMBER (e.g., 512.5032) is converted into a string representing a percentage with PRECISION (e.g., 2) decimal places; expected output example is '512.50%'. Limitations: relies on Hugo and the correct configuration of site localization settings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/FormatPercent.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ 512.5032 | lang.FormatPercent 2 }} → 512.50%\n```\n\n----------------------------------------\n\nTITLE: Adding a Page Resource with AddResource in Hugo Content Adapter (Go HTML Template)\nDESCRIPTION: Illustrates the use of the AddResource method to add resources (e.g., images) to Hugo pages within a content adapter. It retrieves a resource, creates a resource dictionary with content and path, then registers it with AddResource. Assumes resource files exist and are accessible, and template placement in a .gotmpl file under content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\\n  {{ $content := dict\\n    \"mediaType\" .MediaType.Type\\n    \"value\" .\\n  }}\\n  {{ $resource := dict\\n    \"content\" $content\\n    \"path\" \"the-hunchback-of-notre-dame/cover.jpg\"\\n  }}\\n  {{ $.AddResource $resource }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Singular Taxonomy Name in Term Template - Hugo Go HTML Template\nDESCRIPTION: This Go HTML Template snippet outputs the singular form of a taxonomy (e.g., 'tag'), accessed via the Data.Singular property in a Hugo term template. No dependencies beyond Hugo and its templating context. Input: Term page context. Output: The singular taxonomy name as a string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/term.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Data.Singular }} → tag\n```\n\n----------------------------------------\n\nTITLE: Inspecting Unmarshalled OpenAPI Data Structure in Go HTML Template\nDESCRIPTION: This snippet shows how to inspect the data structure of the variable (`$api`) containing the unmarshalled OpenAPI document. It uses the `debug.Dump` function within `<pre>` tags to output a formatted representation of the Go object, aiding in understanding the available fields and data.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/openapi3/Unmarshal.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump $api }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Using KeyName Method for Internationalization in Hugo Templates\nDESCRIPTION: This template iterates through main menu items and uses the KeyName method to retrieve translation keys, falling back to the name property if a matching key doesn't exist in the translation table. The returned key is converted to lowercase.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/KeyName.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li><a href=\"{{ .URL }}\">{{ or (T (.KeyName | lower)) .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecation Notice with Hugo Shortcode\nDESCRIPTION: Employs the Hugo `deprecated-in` shortcode to render a notice signifying that the associated feature (`resources.ToCSS`) became deprecated starting from version 0.128.0. This alerts users to the change and points towards the recommended alternative, `css.Sass`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/ToCSS.md#2025-04-23_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{< deprecated-in 0.128.0 >}}\nUse [`css.Sass`] instead.\n\n[`css.Sass`]: /functions/css/sass/\n{{< /deprecated-in >}}\n```\n\n----------------------------------------\n\nTITLE: Creating Expected Golden NPM Package JSON\nDESCRIPTION: Represents the expected (golden) package.json after running hugo mod npm pack. Adds dependencies and expands devDependencies, testing module injection and output normalization. Requires Hugo module support and npm. Input is the processed module structure; output is a fully merged package.json validating correct operation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_npm_withexisting.txt#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n-- golden/package.json --\\n{\\n  \\\"comments\\\": {\\n    \\\"dependencies\\\": {\\n      \\\"react-dom\\\": \\\"github.com/gohugoio/hugoTestModule2\\\"\\n    },\\n    \\\"devDependencies\\\": {\\n      \\\"@babel/cli\\\": \\\"github.com/gohugoio/hugoTestModule2\\\",\\n      \\\"@babel/core\\\": \\\"github.com/gohugoio/hugoTestModule2\\\",\\n      \\\"@babel/preset-env\\\": \\\"github.com/gohugoio/hugoTestModule2\\\",\\n      \\\"postcss-cli\\\": \\\"github.com/gohugoio/hugoTestModule2\\\",\\n      \\\"tailwindcss\\\": \\\"project\\\"\\n    },\\n    \\\"foo\\\": {\\n      \\\"a\\\": \\\"b\\\"\\n    }\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"react-dom\\\": \\\"^16.13.1\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@babel/cli\\\": \\\"7.8.4\\\",\\n    \\\"@babel/core\\\": \\\"7.9.0\\\",\\n    \\\"@babel/preset-env\\\": \\\"7.9.5\\\",\\n    \\\"postcss-cli\\\": \\\"7.1.0\\\",\\n    \\\"tailwindcss\\\": \\\"2.2.0\\\"\\n  },\\n  \\\"name\\\": \\\"mypackage\\\",\\n  \\\"version\\\": \\\"1.1.0\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Values with Multiple Keys\nDESCRIPTION: Shows how to use multiple keys with collections.Index to access nested values in complex data structures.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/IndexFunction.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $m := dict \"a\" 100 \"b\" 200 \"c\" (slice 10 20 30) }}\n{{ index $m \"c\" 1 }} → 20\n\n{{ $m := dict \"a\" 100 \"b\" 200 \"c\" (dict \"d\" 10 \"e\" 20) }}\n{{ index $m \"c\" \"e\" }} → 20\n```\n\n----------------------------------------\n\nTITLE: Setting Lastmod in Front Matter with TOML\nDESCRIPTION: Sets the last modification date for a page using TOML front matter. The lastmod parameter accepts a datetime in ISO 8601 format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Lastmod.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Article 1'\nlastmod = 2023-10-19T00:40:04-07:00\n```\n\n----------------------------------------\n\nTITLE: Listing Hugo Powershell Completion Command and Option Flags (Bash)\nDESCRIPTION: This code block illustrates how to invoke the Hugo CLI to display help syntax for the PowerShell completion feature and enumerates both feature-specific and inherited command-line flags. No prerequisites, aside from having Hugo installed, are necessary. Users can refer to this usage synopsis to compose complete commands with custom flags for generating their own completion scripts.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_powershell.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhugo completion powershell [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Build Command (Shell)\nDESCRIPTION: This snippet demonstrates running the `hugo` command in a shell environment. The `! stderr .` notation suggests that this command is expected to produce some output on the standard error stream, potentially indicating a build issue or warning, possibly related to the minimal configuration or lack of content files. It requires the Hugo executable to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__configdir.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Configuring Open Graph Metadata - Hugo Configuration (TOML)\nDESCRIPTION: Sets global Open Graph parameters, including description, images, title, and Facebook admin, using Hugo's TOML-style config file. The [params] section supports nested 'social' configuration. These properties are used by the Open Graph template for metadata generation. Includes an example taxonomy definition to relate content by series.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_6\n\nLANGUAGE: hugo\nCODE:\n```\n[params]\n  description = 'Text about my cool site'\n  images = ['site-feature-image.jpg']\n  title = 'My cool site'\n  [params.social]\n  facebook_admin = 'jsmith'\n[taxonomies]\n  series = 'series'\n```\n\n----------------------------------------\n\nTITLE: Example Content Directory Structure\nDESCRIPTION: This snippet provides a sample directory structure in plain text for organizing Hugo content into nested sections. It illustrates how lessons and math subsections are arranged in the content folder. No dependencies are required. The structure serves as input for demonstrating subsequent template code.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Section.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── lessons/\n│   ├── math/\n│   │   ├── _index.md\n│   │   ├── lesson-1.md\n│   │   └── lesson-2.md\n│   └── _index.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Using the template Function with Built-in Templates in Hugo\nDESCRIPTION: Demonstrates how to use the template function to display pagination after a range of pages. This executes the built-in internal pagination template with the current context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/template.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range (.Paginate .Pages).Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n{{ template \"_internal/pagination.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Creating an Unsharp Mask Filter in Go HTML Template\nDESCRIPTION: This snippet demonstrates how to create an unsharp mask image filter using Hugo's `images.UnsharpMask` function within a Go HTML Template. It assigns the filter to a variable named `$filter`, specifying sigma (10), amount (0.4), and threshold (0.03) parameters. This filter can subsequently be applied to an image resource using Hugo's image processing methods.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/UnsharpMask.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.UnsharpMask 10 0.4 0.03 }}\n```\n\n----------------------------------------\n\nTITLE: Slicing Arrays After Nth Item Using Hugo 'after' (Go HTML Template)\nDESCRIPTION: This snippet demonstrates the use of Hugo's 'after' function to slice an array and select all items after a specified index within a template. The 'slice' function initializes an array, and 'after 2' retrieves all elements after the second index. Dependencies include the use of Hugo templating language and the 'slice' and 'after' functions. Key parameters are the start index (2) and the input array named $data. The expected output is an unordered HTML list containing the remaining array items.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/After.md#2025-04-23_snippet_0\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ $data := slice \"one\" \"two\" \"three\" \"four\" }}\n<ul>\n  {{ range after 2 $data }}\n    <li>{{ . }}</li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Successful Try Function Usage with Division in Hugo Templates\nDESCRIPTION: An example showing the 'try' function with valid division parameters, resulting in successful execution and value display.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/try.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $x := 42 }}\n{{ $y := 6 }}\n{{ with try (div $x $y) }}\n  {{ with .Err }}\n    {{ warnf \"%s\" . }}\n  {{ else }}\n    {{ printf \"%v divided by %v equals %v\" $x $y .Value }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using .Plain and htmlUnescape in Hugo Template (Go HTML Template)\nDESCRIPTION: This snippet demonstrates how to use the `.Plain` method on the current page object (`.`) within a Hugo template. The output of `.Plain` (rendered content with HTML tags stripped) is then passed through the `htmlUnescape` function to decode any remaining HTML entities, resulting in pure plain text.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Plain.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Plain | htmlUnescape }}\n```\n\n----------------------------------------\n\nTITLE: Example Content Structure for Hugo Multilingual Projects\nDESCRIPTION: Shows a complex content structure for a multilingual Hugo project with various content types including regular content, leaf bundles, and branch bundles.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── news/\n│   ├── b/\n│   │   ├── index.de.md   <-- leaf bundle\n│   │   └── index.en.md   <-- leaf bundle\n│   ├── a.de.md           <-- regular content\n│   ├── a.en.md           <-- regular content\n│   ├── _index.de.md      <-- branch bundle\n│   └── _index.en.md      <-- branch bundle\n├── _index.de.md\n└── _index.en.md\n```\n\n----------------------------------------\n\nTITLE: Retrieving Menu Identifier in Hugo Templates\nDESCRIPTION: Demonstrates how to access the menu identifier of menu entries using the Menu method. When iterating through site menus, this method returns the name of the menu containing the current entry.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Menu.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.Menus.main }}\n  {{ .Menu }} → main\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Title and BaseURL in Hugo\nDESCRIPTION: This configuration snippet, typically found in `hugo.toml`, sets the `title` and `baseURL` for a Hugo project. The `baseURL` is crucial for generating absolute URLs, including the page permalinks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Permalink.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Documentation'\nbaseURL = 'https://example.org/docs/'\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Sections Based on Environment with Cascading Build Options - TOML\nDESCRIPTION: This TOML snippet configures a section to be hidden from production builds via cascading 'build' options and a targeted environment override. By setting 'render' and 'list' to 'never' under 'cascade.build' and specifying 'production' for 'cascade.target.environment', descendant pages are omitted in production. Requires use in a section's front matter. Inputs are intended for environment-aware publishing strategies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/build-options.md#2025-04-23_snippet_8\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'Internal'\\n[[cascade]]\\n[cascade.build]\\nrender = 'never'\\nlist = 'never'\\n[cascade.target]\\nenvironment = 'production'\n```\n\n----------------------------------------\n\nTITLE: Rendering List Items by Date with Hugo Go HTML Templates\nDESCRIPTION: This snippet showcases the rendering of list items in Hugo by iterating over the site.RegularPages collection sorted by date and rendering the \\\"li\\\" template for each. It uses the Go HTML Template language as supported by Hugo. The {{ .Render \\\"li\\\" }} call automatically passes the current page as context to the template. The snippet depends on the presence of an \\\"li.html\\\" partial in the correct location in the layouts directory. The input is a collection of pages, outputting an HTML unordered list with each item rendered per the template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Render.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\\n  {{ range site.RegularPages.ByDate }}\\n    {{ .Render \\\"li\\\" }}\\n  {{ end }}\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages Sorted by Length (Ascending) in Go HTML Template\nDESCRIPTION: This Go HTML Template snippet demonstrates how to iterate through a collection of pages (`.Pages`) sorted by their content length in ascending order using the `ByLength` function. For each page in the sorted collection, it generates an H2 heading containing a link (`<a>`) with the page's relative permalink (`{{ .RelPermalink }}`) and link title (`{{ .LinkTitle }}`). This is the default sorting order for `ByLength`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByLength.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByLength }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating Chroma Stylesheets via Hugo CLI - Shell Example\nDESCRIPTION: This snippet shows the basic usage of the 'hugo gen chromastyles' command to generate a CSS stylesheet for Chroma code highlighting in a Hugo site. No external dependencies are needed beyond a Hugo installation. The command accepts various flags (such as style selection and color overrides) to customize output. It takes flags and optional arguments, outputting the corresponding stylesheet; this command must be run from a shell with Hugo installed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen_chromastyles.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo gen chromastyles [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Complex-Analytic Proof Using Logarithm Branches\nDESCRIPTION: A proof by Andrey Rekalo that uses complex analysis to establish the identity by defining a function as the sum of reciprocals of squared logarithms across all branches, showing it equals z/(z-1)², and deriving the identity by substitution.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_14\n\nLANGUAGE: latex\nCODE:\n```\nR(z)=\\sum\\frac{1}{\\log^2 z}\n```\n\n----------------------------------------\n\nTITLE: Comparing Different Data Types with compare.Ge in Hugo Templates\nDESCRIPTION: Demonstrates how compare.Ge can be used with different data types including strings, dates, and booleans in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Ge.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ ge \"ab\" \"a\" }} → true\n{{ ge time.Now (time.AsTime \"1964-12-30\") }} → true\n{{ ge true false }} → true\n```\n\n----------------------------------------\n\nTITLE: Excluding Pages with Undefined Boolean (Reverse Not-False) - go-html-template\nDESCRIPTION: Filters out pages with undefined 'exclude' fields from those where 'Params.exclude' is not false by using complement on two filtered collections. Ensures only explicit non-false values are included while ignoring undefined. Useful in complex boolean filter scenarios. Requires 'collections.Complement' in Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_20\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $p1 := where .Site.RegularPages \"Params.exclude\" \"ne\" false }}\\n{{ $p2 := where .Site.RegularPages \"Params.exclude\" \"eq\" nil }}\\n<ul>\\n  {{ range $p1 | complement $p2 }}\\n    <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\\n  {{ end }}\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Module Graph with a Theme (Shell)\nDESCRIPTION: Executes the Hugo CLI command `mod graph` to display the dependency graph for the current project, specifically including the module dependencies introduced by the theme named 'mytheme'. The expected standard output 'project mytheme' confirms the project's direct dependency on the specified theme module.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod__themesdir.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo --theme mytheme mod graph\nstdout 'project mytheme'\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML String Directly in Go Hugo Template\nDESCRIPTION: This snippet demonstrates the default behavior in Hugo templates where an HTML string assigned to a variable is HTML-escaped when rendered directly. The `<em>` tags are treated as literal text.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/HTML.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $html := \"<em>emphasized</em>\" }}\n{{ $html }}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Single Page Layout (HTML/Go Template)\nDESCRIPTION: This is the layout template (`single.html`) for single content pages within the `mysource` directory. It displays the title of the content page using the Hugo template variable `.Title`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n-- mysource/layouts/_default/single.html --\nTitle: {{ .Title }}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Context Usage with IsDescendant in Hugo Templates\nDESCRIPTION: Demonstrates incorrect usage of IsDescendant where the function is called on the page context itself rather than using the global context, resulting in comparing a page to itself.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsDescendant.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/auctions\" }}\n  {{ .IsDescendant . }} → true\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Comparing Timestamps Using After Method in Hugo\nDESCRIPTION: Example demonstrates how to compare two timestamps using the After method in Hugo templates. The code creates two time objects and checks if the first time ($t1) occurs after the second time ($t2), returning a boolean result.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/After.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t1 := time.AsTime \"2023-01-01T17:00:00-08:00\" }}\n{{ $t2 := time.AsTime \"2010-01-01T17:00:00-08:00\" }}\n\n{{ $t1.After $t2 }} → true\n```\n\n----------------------------------------\n\nTITLE: Setting Output Format and Background Color in Image Filters in Hugo go-html-template\nDESCRIPTION: Creates a filter to convert images to JPEG format and force a black background (hex #000) for formats not supporting transparency. Executed using images.Process, this ensures consistent appearance for images with transparency when converted in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_11\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"jpeg #000\" }}\n```\n\n----------------------------------------\n\nTITLE: Building Hugo Extended Edition with CGO - Shell\nDESCRIPTION: This shell command builds and installs the extended edition of Hugo, which supports additional features such as SASS/SCSS processing. It sets CGO_ENABLED=1 to allow the use of CGO, and specifies the 'extended' build tag. Both a C compiler (GCC or Clang) and Go 1.23.0 or later are required. The final binary is placed based on GOBIN or GOPATH settings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/installation/04-build-from-source.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Params as JSON in JavaScript Bundle\nDESCRIPTION: This JavaScript snippet demonstrates importing build-time parameters in JS code using an ES module import from '@params'. This requires Hugo's js.Build to export parameters as a JSON module during the build process. Dependencies: js.Build-configured bundle and relevant Hugo setup. The key parameter here is '@params', representing the imported JSON object defined in Hugo templates. Input: JS module import. Output: params object with configuration values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/js/options.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as params from '@params';\n```\n\n----------------------------------------\n\nTITLE: Accessing BaseFileName in Hugo Templates\nDESCRIPTION: Shows how to defensively access the BaseFileName property which returns the file name without extension.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .BaseFileName }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Counting Words in a String Using Hugo countwords Filter (Go-HTML-Template)\nDESCRIPTION: This snippet demonstrates the usage of the countwords filter in Hugo templates to return the number of words in a given string. It requires a working Hugo template setup with access to the countwords filter. The input is a string literal, and the output is an integer representing the word count. This example is intended to be used within a Go-HTML-Template file in a Hugo project, and the filter is limited to detecting words based on whitespace separation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/CountWords.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"Hugo is a static site generator.\" | countwords }} → 6\n```\n\n----------------------------------------\n\nTITLE: Deleting Values in Hugo Store\nDESCRIPTION: Demonstrates how to remove a key and its value from the store.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Store.Set \"greeting\" \"Hello\" }}\n{{ site.Store.Delete \"greeting\" }}\n```\n\n----------------------------------------\n\nTITLE: Using a Partial to Render HTML in Hugo\nDESCRIPTION: Example showing how to call the odd-or-even partial template to render HTML directly.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/return.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"odd-or-even.html\" 42 }} → <p>42 is even</p>\n```\n\n----------------------------------------\n\nTITLE: Using collections.Querify with Front Matter Data in Hugo\nDESCRIPTION: Demonstrates how to use collections.Querify with a map from the page's front matter or site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Querify.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ collections.Querify .Params.query }}\n```\n\n----------------------------------------\n\nTITLE: Sample Content Directory Structure for Hugo Project\nDESCRIPTION: This snippet, in plain text, illustrates a sample content directory tree for a Hugo project. It depicts sections, posts, and index files to clarify how Hugo recognizes section indexes and individual content entries, which is central to understanding .Site.GetPage and section templating logic. The example delineates required files such as _index.md for proper front matter retrieval.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/section.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n.\n└── content\n    ├── blog\n    │   ├── _index.md   <-- title: My Hugo Blog\n    │   ├── post-1.md\n    │   ├── post-2.md\n    │   └── post-3.md\n    └── events\n        ├── event-1.md\n        └── event-2.md\n```\n\n----------------------------------------\n\nTITLE: Calling a Hugo Shortcode with Positional Arguments (Markdown)\nDESCRIPTION: Example of invoking a Hugo shortcode named 'myshortcode' within a Markdown file (e.g., `content/about.md`), passing two positional arguments: 'Hello' and 'world'. This is the call structure corresponding to retrieving arguments by index.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Get.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{</* myshortcode \"Hello\" \"world\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multilingual Bundle Directory Layout for Hugo (text)\nDESCRIPTION: This diagram presents a typical multilingual page bundle, highlighting shared and language-specific resources under 'content/'. It serves as a visual aid for understanding Hugo multilingual behavior regarding resource copying and specialization.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n└── my-bundle/\\n    ├── a.jpg     <-- shared page resource\\n    ├── b.jpg     <-- shared page resource\\n    ├── c.de.jpg\\n    ├── c.en.jpg\\n    ├── index.de.md\\n    └── index.en.md\n```\n\n----------------------------------------\n\nTITLE: Setting USE Flags for Hugo on Gentoo Linux\nDESCRIPTION: Configuration for enabling the extended edition of Hugo on Gentoo Linux and derivatives by setting the USE flag in the package-specific configuration file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nwww-apps/hugo extended\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Link Components in Plain Text\nDESCRIPTION: Example showing the three components of a Markdown link: the link text, the link destination, and the link title.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/links.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Post 1](/posts/post-1 \"My first post\")\n ------  -------------  -------------\n  text    destination       title\n```\n\n----------------------------------------\n\nTITLE: Defining German Menu Entries in Hugo TOML (menus.de.toml)\nDESCRIPTION: Example content for a language-specific menu configuration file (`config/_default/menus.de.toml`). It defines entries for the `main` menu intended for the German language version of the site, using TOML array of tables syntax (`[[main]]`) to specify `name`, `pageRef`, and `weight` for each menu item.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_13\n\nLANGUAGE: hugo\nCODE:\n```\n[[main]]\nname = 'Produkte'\npageRef = '/products'\nweight = 10\n[[main]]\nname = 'Leistungen'\npageRef = '/services'\nweight = 20\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling a YAML String in Hugo Templates\nDESCRIPTION: Demonstrates how to use the unmarshal function to parse a YAML string into a map and access its properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Unmarshal.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $string := `\ntitle: Les Misérables\nauthor: Victor Hugo\n`}}\n\n{{ $book := unmarshal $string }}\n{{ $book.title }} → Les Misérables\n{{ $book.author }} → Victor Hugo\n```\n\n----------------------------------------\n\nTITLE: Using ContentWithoutSummary Method in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the ContentWithoutSummary method on a Page object to render Markdown and shortcodes to HTML, excluding the content summary from the result. This is particularly useful when working with manual or automatic content summaries.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/ContentWithoutSummary.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .ContentWithoutSummary }}\n```\n\n----------------------------------------\n\nTITLE: Basic Base64 Decoding in Hugo\nDESCRIPTION: Simple example showing how to decode a base64-encoded string 'Hugo' using the base64Decode function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/encoding/Base64Decode.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"SHVnbw==\" | base64Decode }} → Hugo\n```\n\n----------------------------------------\n\nTITLE: Accessing Menu Parameters in Hugo Templates\nDESCRIPTION: Template code showing how to access and use custom parameters from menu entries. It demonstrates iterating through the main menu and conditionally adding a 'rel' attribute to links that have this parameter defined.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Params.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li>\n      <a href=\"{{ .URL }}\" {{ with .Params.rel }}rel=\"{{ . }}\"{{ end }}>\n        {{ .Name }}\n      </a>\n    </li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Checking if a Heading ID Exists in Hugo\nDESCRIPTION: Uses the Fragments.Identifiers.Contains method to check if a specific heading ID exists on the page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Fragments.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Fragments.Identifiers.Contains \"section-2\" }} → true\n```\n\n----------------------------------------\n\nTITLE: Using Pluralization in English Context (Go Template)\nDESCRIPTION: Demonstrates calling the `T` function with a count (integer context) to trigger pluralization rules defined in `i18n/en.toml`. Shows outputs for counts 0, 1, 2, and 5 for both simple and context-aware plural keys.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ T \"day\" 0 }} → days\n{{ T \"day\" 1 }} → day\n{{ T \"day\" 2 }} → days\n{{ T \"day\" 5 }} → days\n\n{{ T \"day_with_count\" 0 }} → 0 days\n{{ T \"day_with_count\" 1 }} → 1 day\n{{ T \"day_with_count\" 2 }} → 2 days\n{{ T \"day_with_count\" 5 }} → 5 days\n```\n\n----------------------------------------\n\nTITLE: Basic Numeric Comparisons with compare.Gt in Hugo Templates\nDESCRIPTION: Examples of using the compare.Gt (gt) function to compare numeric values in Hugo templates. The function returns true only if the first argument is greater than all other arguments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Gt.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ gt 1 1 }} → false\n{{ gt 1 2 }} → false\n{{ gt 2 1 }} → true\n\n{{ gt 1 1 1 }} → false\n{{ gt 1 1 2 }} → false\n{{ gt 1 2 1 }} → false\n{{ gt 1 2 2 }} → false\n\n{{ gt 2 1 1 }} → true\n{{ gt 2 1 2 }} → false\n{{ gt 2 2 1 }} → false\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Headers to getJSON Requests\nDESCRIPTION: Shows how to add multiple headers as a slice to getJSON requests using an options map in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"X-List\" (slice \"a\" \"b\" \"c\") }}\n{{ $data := getJSON \"https://example.org/books.json\" $opts }}\n```\n\n----------------------------------------\n\nTITLE: Listing Example of Multiple Hugo Leaf Bundles (text)\nDESCRIPTION: Shows a more complex tree output representing multiple leaf bundles and non-leaf directories inside Hugo's 'content' folder. This snippet visually distinguishes several leaf bundles and nested resources by file type. No dependencies are needed. It's intended for users setting up advanced or nested content structures, and serves solely as a static illustrative guide without processing capability.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-bundles.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── about\\n│   └── index.md\\n├── posts\\n│   ├── my-post\\n│   │   ├── content-1.md\\n│   │   ├── content-2.md\\n│   │   ├── image-1.jpg\\n│   │   ├── image-2.png\\n│   │   └── index.md\\n│   └── my-other-post\\n│       └── index.md\\n└── another-section\\n    ├── foo.md\\n    └── not-a-leaf-bundle\\n        ├── bar.md\\n        └── another-leaf-bundle\\n            └── index.md\n```\n\n----------------------------------------\n\nTITLE: Logarithmic Integral Method\nDESCRIPTION: Evaluates the Basel sum through analysis of the integral of ln(2cos x) and its complex representation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_25\n\nLANGUAGE: latex\nCODE:\n```\nI = \\int_0^{\\pi/2}\\ln(2\\cos x)dx\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering and String Conversion in Hugo Template (go-html-template)\nDESCRIPTION: Shows a conditionally rendered HTML template where the title is converted to lowercase if a variable is true. Uses the 'strings.ToLower' function and a boolean variable for flow control. Requires the 'strings' namespace and a Page object with a 'Title' property. Outputs a heading in lowercase.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $convertToLower := true }}\\n{{ if $convertToLower }}\\n  <h2>{{ strings.ToLower .Title }}</h2>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Hugo Commands (Text)\nDESCRIPTION: Details command-line options inherited from parent Hugo commands that can also be used with `hugo new site`. These options provide broader configuration capabilities, such as setting a specific clock time (`--clock`), defining configuration files (`--config`) or directories (`--configDir`), specifying the output destination (`-d`, `--destination`), setting the build environment (`-e`, `--environment`), controlling logging (`--logLevel`), managing build locks (`--noBuildLock`), enabling quiet mode (`--quiet`), rendering to memory (`-M`, `--renderToMemory`), defining the source directory (`-s`, `--source`), and specifying the themes directory (`--themesDir`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new_site.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Defining a Future Content Page in Hugo Markdown\nDESCRIPTION: This snippet represents content whose 'date' is in the future, used for testing 'hugo list future' command. No additional parameters beyond the future date are needed. Expected output: this page appears only in the future content list. Prerequisite: must be located at 'content/future.md'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/list.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/future.md --\n---\ndate: 2030-01-01\n---\n\n```\n\n----------------------------------------\n\nTITLE: Emoji Shortcodes for Asian Food (Plaintext)\nDESCRIPTION: A list of plaintext shortcodes used to represent Asian food emojis (e.g., sushi, ramen, bento). These shortcodes are typically used in Markdown or systems supporting emoji rendering via text codes, such as Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n:bento:\n:rice_cracker:\n:rice_ball:\n:rice:\n:curry:\n:ramen:\n:spaghetti:\n:sweet_potato:\n:oden:\n:sushi:\n:fried_shrimp:\n:fish_cake:\n:moon_cake:\n:dango:\n:dumpling:\n:fortune_cookie:\n:takeout_box:\n```\n\n----------------------------------------\n\nTITLE: Creating a New Theme Skeleton with Hugo CLI - Shell\nDESCRIPTION: Demonstrates the syntax for invoking the Hugo CLI to scaffold a new theme skeleton. No external dependencies are required beyond the Hugo executable. The '[name]' parameter is mandatory and specifies the desired name of the theme; '[flags]' represents optional command-line switches. The command generates a directory with base theme files inside the ./themes folder, requiring further manual edits to license and configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new_theme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo new theme [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Iteratively Merging All Language Translations with Hugo `lang.Merge` (Go Template)\nDESCRIPTION: This snippet demonstrates a common pattern for filling missing translations by iterating through all available language translations (`.Site.Home.Translations`). It starts with the current site's pages (`.Site.RegularPages`) and successively merges in the `RegularPages` from each translation using `lang.Merge` within a `range` loop. This ensures the `$pages` variable contains a comprehensive collection, prioritized by the current language but supplemented by available pages from other languages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Merge.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n{{ $pages := .Site.RegularPages }}\n{{ range .Site.Home.Translations }}\n{{ $pages = $pages | lang.Merge .Site.RegularPages }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using IsTranslated with a Non-Translated Page\nDESCRIPTION: Example showing the IsTranslated method returning false when used with a page (book-2.md) that does not have translations in other languages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsTranslated.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .IsTranslated }} → false\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Hugo Template Functions in Go\nDESCRIPTION: This code snippet shows how to format dates using Hugo template functions. It demonstrates the use of the 'dateFormat' function to convert a date to a specific format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/unfinished/noop.txt#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ $date := .Date }}\n{{ $formatted := dateFormat \"2006-01-02\" $date }}\n```\n\n----------------------------------------\n\nTITLE: Appending Query String to URL using collections.Querify in Hugo\nDESCRIPTION: Shows how to generate a query string using collections.Querify and append it to a URL, then use the result in an HTML anchor tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Querify.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $qs := collections.Querify (dict \"a\" 1 \"b\" 2) }}\n{{ $href := printf \"https://example.org?%s\" $qs }}\n\n<a href=\"{{ $href }}\">Link</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-language Support in Hugo (hugo)\nDESCRIPTION: Demonstrates how to configure multi-language support in Hugo by defining language sections in the configuration file. Each language block specifies code, direction, name, documentation title, and weight, which controls the ordering/priority of languages. Requires a Hugo project and will influence the available .Sites collection in templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sites.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\ndefaultContentLanguage = 'de'\ndefaultContentLanguageInSubdir = false\n\n[languages.de]\nlanguageCode = 'de-DE'\nlanguageDirection = 'ltr'\nlanguageName = 'Deutsch'\ntitle = 'Projekt Dokumentation'\nweight = 1\n\n[languages.en]\nlanguageCode = 'en-US'\nlanguageDirection = 'ltr'\nlanguageName = 'English'\ntitle = 'Project Documentation'\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Setting Page Description in Front Matter (TOML)\nDESCRIPTION: Example of how to define a page description in TOML front matter for a Hugo content file. The description is set as a string value and can be later accessed via the .Description page variable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Description.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'How to make spicy tuna hand rolls'\ndescription = 'Instructions for making spicy tuna hand rolls.'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Complement Function in Hugo\nDESCRIPTION: The 'complement' function returns the elements in the first sequence that are not in the second sequence. This example shows its usage with two slices of integers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{ complement (slice 1 2 3) (slice 2) }} → [1 3]\n```\n\n----------------------------------------\n\nTITLE: Resulting Cleaned Go Module File After Tidying in Go\nDESCRIPTION: Represents the expected cleaned state of the Go module descriptor after running 'hugo mod tidy'. This file omits unnecessary dependency declarations if not required. The snippet assumes proper cleanup and reconciliation of module metadata, ensuring only necessary information is retained.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_tidy.txt#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n[[-- golden/go.mod.cleaned --\\ngo 1.19\\n\\n\\nmodule github.com/gohugoio/testmod]]\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output\nDESCRIPTION: Shows the final HTML output after Hugo processes the template with fmt.Printf and safeHTMLAttr functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Printf.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"Eat at Joe's\">\n```\n\n----------------------------------------\n\nTITLE: Ranging Through Site-Wide Pages in Hugo Templates\nDESCRIPTION: Shows how to iterate through all pages in a Hugo site using the Site.Pages method, which recursively returns all pages within the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Pages.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.Pages.ByTitle }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Deleting Map Values in Hugo Store\nDESCRIPTION: Demonstrates removing key-value pairs from a map using DeleteInMap.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Store.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ site.Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ site.Store.DeleteInMap \"greetings\" \"english\" }}\n{{ site.Store.Get \"greetings\" }} → map[french:Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Case Sensitivity of strings.ContainsAny in Go HTML Template\nDESCRIPTION: This example illustrates the case-sensitive nature of the `strings.ContainsAny` function in Hugo templates. It checks if the string \"Hugo\" contains any of the characters 'G' or 'm'. The function returns `false` because neither 'G' (uppercase) nor 'm' is present in \"Hugo\". This highlights that the comparison performed by the function distinguishes between uppercase and lowercase letters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/ContainsAny.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.ContainsAny \"Hugo\" \"Gm\" }} → false\n```\n\n----------------------------------------\n\nTITLE: Disabling Sitemap Generation in Hugo Site Configuration\nDESCRIPTION: This configuration snippet shows how to disable the generation of all sitemap files (sitemap.xml and sitemapindex.xml) for a Hugo site. This is done by adding 'sitemap' to the `disableKinds` array within the site's main configuration file (e.g., `hugo.toml`, `config.toml`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/sitemap.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\ndisableKinds = ['sitemap']\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Paragraphs in Hugo Markdown (Plain Text)\nDESCRIPTION: Demonstrates the syntax for attaching class and id HTML attributes to a paragraph using attribute lists in Hugo Markdown. No dependencies beyond standard Hugo setup. Add the attribute list below the paragraph for effect; classes and ids can be specified using key-value notation or shorthand. The snippet expects a Markdown parser (such as Hugo's Goldmark) configured with attribute support enabled.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/markdown-attributes.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis is a paragraph.\\n{class=\\\"foo bar\\\" id=\\\"baz\\\"}\n```\n\n----------------------------------------\n\nTITLE: Rendering Related Content List in Hugo Template (Go HTML Template)\nDESCRIPTION: Demonstrates how to fetch and display a list of related pages within a Hugo template (specified as `layouts/partials/related.html`). It uses the `site.RegularPages.Related` function with the current page context (`.`) to find related content based on site configuration, limits the results to the first 5 using `first 5`, and then iterates through them using `range` to create an unordered list of links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/related-content.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with site.RegularPages.Related . | first 5 }}\n  <p>Related content:</p>\n  <ul>\n    {{ range . }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Asciidoctor Flags with Hugo CLI\nDESCRIPTION: This command demonstrates how to run the Hugo build process with increased log verbosity (`--logLevel info`) to inspect the specific command-line flags being passed to the external Asciidoctor executable. This is useful for debugging or understanding configuration effects.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/formats.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhugo --logLevel info\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Language Settings in Hugo (Hugo Syntax)\nDESCRIPTION: Demonstrates defining localized language settings inside the 'languages' key of Hugo's configuration. It includes customizing language code, display name, sort weight, per-language title, timezone, and nested tables for pagination and custom parameters. Place these entries under the root configuration using TOML-style tables. Key-value pairs such as 'languageCode', 'languageName', 'weight', and nested objects must match Hugo\\'s expectations. Inputs include language keys (e.g., 'en'), and nested tables for advanced per-language customization; only active for listed languages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/languages.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n[languages.en]\\nlanguageCode = 'en-US'\\nlanguageName = 'English'\\nweight = 1\\ntitle = 'Project Documentation'\\ntimeZone = 'America/New_York'\\n[languages.en.pagination]\\npath = 'page'\\n[languages.en.params]\\nsubtitle = 'Reference, Tutorials, and Explanations'\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo on FreeBSD using package manager\nDESCRIPTION: Command to install the extended edition of Hugo on FreeBSD using the pkg package manager.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/bsd.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo pkg install gohugo\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Mounts for Static Assets in Hugo\nDESCRIPTION: Configuration required to mount the static directory to the assets directory in Hugo, allowing the figure shortcode to access resources in the static directory. This is needed when resources can't be moved from static to assets.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/figure.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[[module.mounts]]\nsource = 'assets'\ntarget = 'assets'\n\n[[module.mounts]]\nsource = 'static'\ntarget = 'assets'\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Frontmatter Template in YAML\nDESCRIPTION: This YAML snippet defines the frontmatter structure for new Hugo content files. It includes fields for title (automatically generated from the file name), description, categories, keywords, and parameters for functions and methods.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/archetypes/methods.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: {{ replace .File.ContentBaseName \"-\" \" \" | title }}\ndescription:\ncategories: []\nkeywords: []\nparams:\n  functions_and_methods:\n    returnType:\n    signatures: []\n---\n```\n\n----------------------------------------\n\nTITLE: Applying Image Filter using images.Filter Function in Hugo Template\nDESCRIPTION: Applies the previously created text filter (`$filter`) to the target image resource (`$r`) using the `images.Filter` template function. If the filtering process is successful, it generates an HTML `<img>` tag. The `src` attribute points to the relative permalink of the processed image, and the `width` and `height` attributes are set accordingly.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Text.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with $r }}\n  {{ with . | images.Filter $filter }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Taxonomy Data Object Singular Name - Go HTML Template\nDESCRIPTION: Snippet to access the singular name of the current taxonomy within a Hugo taxonomy template. Requires Hugo's .Data object context. Outputs a string (e.g., \"tag\"). Demonstrates use of the 'Singular' property.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Data.Singular }} → tag\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Context Inside range Block\nDESCRIPTION: Demonstrates how to access the original template context (represented by $) inside a range block when the context is bound to other elements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range seq 3 }}\n  {{ $.Title }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Taylor Series for Sine Function in LaTeX\nDESCRIPTION: This LaTeX snippet shows the Taylor series expansion of the sine function around x=0, which is compared with the infinite product representation in one of the proofs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\n\\sin x = x - \\frac{x^3}{3!}+\\frac{x^5}{5!}-\\frac{x^7}{7!}+\\cdots\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Page Publishing and Listing - TOML\nDESCRIPTION: This TOML snippet shows how to define Hugo's build options in front matter to control page publishing, resource visibility, and rendering. Supported keys include 'list', 'publishResources', and 'render', each specifying inclusion/exclusion behavior for the page or its resources. No external dependencies are required, and these options should be included in a page's front matter. Inputs are key-value configuration pairs, and outputs are Hugo's build behavior for the specified page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/build-options.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[build]\\nlist = 'always'\\npublishResources = true\\nrender = 'always'\n```\n\n----------------------------------------\n\nTITLE: Lipschitz Function and Fourier Analysis Proof\nDESCRIPTION: Tomás's proof using the Fourier series of the Lipschitz function f(θ)=|θ| on [-π,π], calculating its coefficients, and applying the inversion formula to derive the sum of reciprocals of squares.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_18\n\nLANGUAGE: latex\nCODE:\n```\n\\hat{f}(k)=\\frac{1}{2\\pi}\\int \\hat{f}(\\theta)e^{-ik\\theta}d\\theta.\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Context within 'with' Block in Hugo Templates\nDESCRIPTION: Demonstrates how to properly access the original page context (using $) inside a 'with' block where the context has been rebound.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/with.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with 42 }}\n  {{ $.Title }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Hugo Project Structure with Multiple Themes for Configuration Merging\nDESCRIPTION: Illustrates a Hugo project structure containing multiple themes (`theme-a`, `theme-b`), each potentially having its own `hugo.toml` configuration file. This structure is used to explain Hugo's configuration merge order.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nproject/\n├── themes/\n│   ├── theme-a/\n│   │   └── hugo.toml\n│   └── theme-b/\n│       └── hugo.toml\n└── hugo.toml\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Structure Example in Hugo\nDESCRIPTION: Example file structure showing a Hugo content directory with weighted pages that will be used to demonstrate next/previous behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/page/next-and-prev.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── pages/\n│   ├── _index.md\n│   ├── page-1.md   <-- front matter: weight = 10\n│   ├── page-2.md   <-- front matter: weight = 20\n│   └── page-3.md   <-- front matter: weight = 30\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Creating Content Page with Markdown and Front Matter\nDESCRIPTION: This Markdown file ('content/p1.md') defines a single piece of content for the Hugo site. It uses TOML front matter (delimited by '---') to specify metadata, setting the 'title' of the page to 'P1'. The body of the Markdown file is empty in this test case, as the focus is on the build process and metadata handling.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_build.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/p1.md --\n---\ntitle: \"P1\"\n---\n```\n\n----------------------------------------\n\nTITLE: Splitting Path Strings with path.Split in Hugo Templates\nDESCRIPTION: This Go HTML template snippet demonstrates the usage of the `path.Split` function. It takes a path string as input (e.g., \"a/news.html\", \"news.html\", \"a/b/c\") and assigns the resulting directory/file object to the `$dirFile` variable. It then accesses the `.Dir` and `.File` properties of this object to show the separated components. The examples illustrate how paths are split at the final slash, returning the directory part (including the trailing slash) and the filename part. If no slash is present, the `.Dir` property returns an empty string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/path/Split.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $dirFile := path.Split \"a/news.html\" }}\n{{ $dirFile.Dir }} → a/\n{{ $dirFile.File }} → news.html\n\n{{ $dirFile := path.Split \"news.html\" }}\n{{ $dirFile.Dir }} → \"\" (empty string)\n{{ $dirFile.File }} → news.html\n\n{{ $dirFile := path.Split \"a/b/c\" }}\n{{ $dirFile.Dir }} → a/b/\n{{ $dirFile.File }} → c\n```\n\n----------------------------------------\n\nTITLE: Outputting Copied Resource Relative URL - Plain Text\nDESCRIPTION: Displays the relative URL of a newly published resource. Serves as a reference output after copying a resource using Hugo. No dependencies are required. It simply verifies the output path where the copied image will reside post-processing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/Copy.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/img/new-image-name.jpg\n```\n\n----------------------------------------\n\nTITLE: Enabling 'canonifyURLs' in Hugo Configuration (Hugo Config)\nDESCRIPTION: Enables the legacy 'canonifyURLs' setting in Hugo configuration. When set to true, this post-processing option converts site-relative URLs in rendered HTML to absolute URLs using the 'baseURL'. Applies globally; not recommended for new projects.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_5\n\nLANGUAGE: Hugo Config\nCODE:\n```\ncanonifyURLs = true\n```\n\n----------------------------------------\n\nTITLE: Defining English Pluralization Rules (TOML)\nDESCRIPTION: Example content for an English translation file (`i18n/en.toml`) defining pluralization rules based on Unicode CLDR. It includes rules for 'day' (simple plural) and 'day_with_count' (plural with context variable). English uses 'one' and 'other' forms.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[day]\none = 'day'\nother = 'days'\n\n[day_with_count]\none = '{{ . }} day'\nother = '{{ . }} days'\n```\n\n----------------------------------------\n\nTITLE: Using the Details Shortcode in Hugo\nDESCRIPTION: Example of how to use the details shortcode in Hugo to create a collapsible section with a custom summary.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/details.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{</* details summary=\"See the details\" */>}}\nThis is a **bold** word.\n{{</* /details */>}}\n```\n\n----------------------------------------\n\nTITLE: Humanizing Slugs and Camel Case Variables in Hugo Templates (Go HTML Template)\nDESCRIPTION: Demonstrates how to use the 'humanize' function in Hugo templates to convert string slugs and camel case inputs into human-readable titles with the first letter capitalized. Requires Hugo with the inflect.Humanize function available. Input is a string, such as a hyphenated or camelCase expression, and output is a humanized string with proper capitalization and spaces.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/inflect/Humanize.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ humanize \\\"my-first-post\\\" }} → My first post\n{{ humanize \\\"myCamelPost\\\" }} → My camel post\n```\n\n----------------------------------------\n\nTITLE: Reversing Dominant Color Order in Hugo Templates\nDESCRIPTION: This Go HTML template snippet demonstrates how to reverse the order of the dominant colors returned by `.Colors` using the `collections.Reverse` function. This allows iteration from the least dominant color to the most dominant. Requires the `collections.Reverse` function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Colors.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{ range .Colors | collections.Reverse }}\n```\n```\n\n----------------------------------------\n\nTITLE: Running a Hugo Site Audit Command in Bash\nDESCRIPTION: This command first builds the Hugo site with specific environment variables set (`HUGO_MINIFY_TDEWOLFF_HTML_KEEPCOMMENTS=true` to retain HTML comments during minification and `HUGO_ENABLEMISSINGTRANSLATIONPLACEHOLDERS=true` to show placeholders for missing translations), overriding site configuration settings. It then uses `grep` recursively (`-r`), ignoring case (`-i`), showing line numbers (`-n`), extracting only matches (`-o`), and using extended regex (`-E`) to search the generated `public/` directory for common Hugo error indicators like `<!-- raw HTML omitted -->`, `ZgotmplZ`, `[i18n]`, `(<nil>)`, `(&lt;nil&gt;)`, or `hahahugo`. This helps identify potential rendering issues before final deployment. Requires Hugo, GNU Bash, and GNU grep.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/audit/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHUGO_MINIFY_TDEWOLFF_HTML_KEEPCOMMENTS=true HUGO_ENABLEMISSINGTRANSLATIONPLACEHOLDERS=true hugo && grep -inorE \"<\\!-- raw HTML omitted -->|ZgotmplZ|\\[i18n\\]|\\(<nil>\\)|(&lt;nil&gt;)|hahahugo\" public/\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository and Pushing to GitLab\nDESCRIPTION: This shell script initializes a new Git repository, adds the /public directory to .gitignore, commits the initial code, and pushes it to the GitLab remote repository.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-gitlab-pages.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# initialize new git repository\ngit init\n\n# add /public directory to our .gitignore file\necho \"/public\" >> .gitignore\n\n# commit and push code to master branch\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin https://gitlab.com/YourUsername/your-hugo-site.git\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fallback Resource Title (File Path) in Hugo Go HTML Template\nDESCRIPTION: Shows how to fetch a resource from a page bundle and display its file path as its title using Hugo's Go HTML template syntax. If the resource does not have a custom title defined in front matter, Title returns the resource's path relative to the bundle. Inputs are relative resource paths, outputs are fallback titles generated from the file system structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Title.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.Get \\\"Sunrise in Bryce Canyon.jpg\\\" }}\n  {{ .Title }} → images/Sunrise in Bryce Canyon.jpg\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Microseconds in Hugo Templates\nDESCRIPTION: Demonstrates parsing a duration string with hours, minutes, and seconds using time.ParseDuration, then converting it to microseconds with the Microseconds method. The example shows how 3.5 hours, 2.5 minutes, and 1.5 seconds are converted to 12,751,500,000 microseconds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/duration/Microseconds.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }}\n{{ $d.Microseconds }} → 12751500000\n```\n\n----------------------------------------\n\nTITLE: Listing Parent Command CLI Options in Hugo - Shell\nDESCRIPTION: This shell code block documents the CLI options that can be inherited from parent commands by 'hugo convert'. It lists advanced options for controlling configuration files, output paths, logging, build environments, and themes. These options help further customize how the 'hugo convert' command behaves and are available when invoking the command in a shell environment where Hugo is installed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\\n      --config string              config file (default is hugo.yaml|json|toml)\\n      --configDir string           config dir (default \\\"config\\\")\\n  -d, --destination string         filesystem path to write files to\\n  -e, --environment string         build environment\\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\\n      --logLevel string            log level (debug|info|warn|error)\\n      --noBuildLock                don't create .hugo_build.lock file\\n      --quiet                      build in quiet mode\\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\\n  -s, --source string              filesystem path to read files relative from\\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML URL Replacement Examples (HTML)\nDESCRIPTION: Demonstrates HTML transformations when the 'canonifyURLs' or 'relativeURLs' configuration options are enabled in Hugo. Shows before and after examples for how site-relative URLs are replaced with absolute or relative URLs during post-processing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\\\"/about\\\"> \\u2192 <a href=\\\"https://example.org/about/\\\">\\n<img src=\\\"/a.gif\\\"> \\u2192 <img src=\\\"https://example.org/a.gif\\\">\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\\\"/about\\\"> \\u2192 <a href=\\\"../../about\\\">\\n<img src=\\\"/a.gif\\\"> \\u2192 <img src=\\\"../../a.gif\\\">\n```\n\n----------------------------------------\n\nTITLE: Retrieving AbbreviatedHash with GitInfo\nDESCRIPTION: Using the AbbreviatedHash method on GitInfo to get the abbreviated commit hash for a page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GitInfo }}\n  {{ .AbbreviatedHash }} → aab9ec0b3\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters within a Root Key File in Hugo Config Directory (TOML)\nDESCRIPTION: Shows how site parameters (`params`) are defined within a file named after a root key (e.g., `hugo.toml`) inside the `config/_default/` directory. The root key (`params` in this case) must be included.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[params]\nfoo = 'bar'\n```\n\n----------------------------------------\n\nTITLE: Triggering Content Rendering with .WordCount in Go Hugo Templates\nDESCRIPTION: Shows an alternative method to trigger Hugo page content rendering using the `.WordCount` page method before retrieving a value from the page's `.Store`. Similar to accessing `.Content`, calling methods like `WordCount`, `ContentWithoutSummary`, `FuzzyWordCount`, `Len`, `Plain`, `PlainWords`, `ReadingTime`, `Summary`, or `Truncated` forces content processing, making values set in the `.Store` during that phase accessible via `.Store.Get`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Store.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $noop := .WordCount }}\n{{ .Store.Get \"mykey\" }}\n```\n\n----------------------------------------\n\nTITLE: Converting Octal Values to float64 in Hugo Templates (Go HTML Template)\nDESCRIPTION: These examples show the conversion of octal inputs to float64 using the 'float' function in Hugo. Both legacy (leading zero) and Go-style ('0o' prefix) notations are supported. String and numeric octal values are accepted, but strings are interpreted as decimals unless the prefix ('0o') is provided. The output is always float64.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToFloat.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ float 011 }} → 9 (float64)\n{{ float \"011\" }} → 11 (float64)\n\n{{ float 0o11 }} → 9 (float64)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site with TOML Configuration\nDESCRIPTION: This TOML snippet defines the core configuration for the Hugo site under test, setting the base URL and disabling certain content kinds ('taxonomy', 'term'). It acts as an input dependency for the tests and must reside in 'hugo.toml' in the project root. Inputs are key-value pairs, used by Hugo at runtime. Outputs affect site URL generation and filtering of content types. Prerequisite: Hugo expects this configuration file for accurate test context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/list.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\nbaseURL = \"https://example.org/\"\ndisableKinds = [\"taxonomy\", \"term\"]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Goldmark Extras and Strikethrough in Hugo (TOML)\nDESCRIPTION: Disables the default Goldmark `strikethrough` extension and enables the `delete` (for strikethrough via `~~foo~~`) and `subscript` features within the `extras` extension. This configuration avoids conflicts and allows concurrent use of subscript (`~H~2~O`) and the extras-based strikethrough in Hugo's Goldmark rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/markup.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.extensions]\nstrikethrough = false\n\n[markup.goldmark.extensions.extras.delete]\nenable = true\n\n[markup.goldmark.extensions.extras.subscript]\nenable = true\n```\n\n----------------------------------------\n\nTITLE: Copying SSH Public Key to Remote Server\nDESCRIPTION: Command to copy the generated SSH public key to the remote server, which enables password-less authentication for future connections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n~/.ssh/$ ssh-copy-id -i rsa_id.pub USER@HOST.com\n```\n\n----------------------------------------\n\nTITLE: Defining a Headless Section with Cascading Build Options - TOML\nDESCRIPTION: This TOML snippet configures front matter for a headless section, using Hugo's 'cascade' to apply 'build' options to all descendants. Parameters include setting 'list' to 'local', and disabling both resource publication and rendering. Requires placement in a section's front matter; output is a section with child pages included only in local collections, not rendered or published unless explicitly referenced.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/build-options.md#2025-04-23_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'Headless section'\\n[[cascade]]\\n[cascade.build]\\n  list = 'local'\\n  publishResources = false\\n  render = 'never'\n```\n\n----------------------------------------\n\nTITLE: Capitalizing String with Hugo strings.FirstUpper in Go HTML Template\nDESCRIPTION: This code example demonstrates how to use the strings.FirstUpper function within a Hugo Go HTML template to capitalize the first character of the string \\\"foo\\\". The function accepts a single string input and returns the string with the first character in uppercase, leaving the rest unchanged. Requires Hugo's built-in template function support and can be used wherever templating logic is supported. The output of this snippet is \\\"Foo\\\".\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FirstUpper.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.FirstUpper \"foo\" }} → Foo\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Hugo Taxonomy Object Structure\nDESCRIPTION: Provides a code snippet using Hugo's `debug.Dump` function to print the internal structure of a captured taxonomy object variable (`$taxonomyObject`). This is helpful for debugging and understanding the available data.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/taxonomy/get-a-taxonomy-object.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump $taxonomyObject }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Markdown Code Block Example with Attributes\nDESCRIPTION: An example of a Markdown fenced code block with language specification (bash) and additional attributes like class, id, line numbers, and tab width settings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/code-blocks.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```bash {class=\"my-class\" id=\"my-codeblock\" lineNos=inline tabWidth=2}\ndeclare a=1\necho \"$a\"\nexit\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Print in Hugo Go HTML Templates - Go-HTML-Template\nDESCRIPTION: This snippet demonstrates using the 'if eq' conditional and 'print' function within a Hugo Go HTML Template. If the variable $foo equals the string 'bar', a message is printed. Requires Hugo's templating engine; $foo must be a defined variable, and output is conditionally rendered in the template during site generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if eq $foo $bar }}\n  {{ fmt.Printf \"%s is %s\" $foo $bar }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of OptionsSetter with 'with' in Go Templates\nDESCRIPTION: This Go template snippet illustrates the mandatory use of a `with` block when calling methods like `.Script` or `.Runner` that return an `OptionsSetter` object. The `OptionsSetter` is designed to be used once to call `.SetOptions`. The `with` statement ensures the context is correctly established for the `.SetOptions` call.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Script \"myscript\" }}\n    {{ .SetOptions (dict \"resource\" (resources.Get \"myscript.js\"))}}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource MediaType Type with Hugo Go Templates\nDESCRIPTION: This snippet demonstrates how to obtain the full media type (MIME type) string for a given resource—such as an image—using Hugo’s Go template syntax. The resources.Get function retrieves the resource (here, an image), and the .MediaType.Type property accesses its MIME type. No additional dependencies are required, but this must be used within a Hugo template. The primary input is the path to the resource; expected output is its media type string (e.g., 'image/jpeg').\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/MediaType.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .MediaType.Type }} → image/jpeg\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Parent Command Options Inherited by hugo deploy - CLI\nDESCRIPTION: This snippet details the flags inherited from parent Hugo commands that can be used with 'hugo deploy'. These options impact configuration directory resolution, build environment, logging, memory rendering, and source/destination paths. Each parameter is specified using a command-line flag, and users must provide appropriate string or integer values as needed. No additional dependencies are required, but the correct invocation context is essential.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_deploy.md#2025-04-23_snippet_2\n\nLANGUAGE: CLI\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding in Hugo Templates\nDESCRIPTION: Demonstrates how to use the base64Encode function to convert a string to its base64-encoded representation. The example shows encoding the string 'Hugo' which results in 'SHVnbw=='.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/encoding/Base64Encode.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"Hugo\" | base64Encode }} → SHVnbw==\n```\n\n----------------------------------------\n\nTITLE: Creating Links Using LinkTitle in Hugo Templates\nDESCRIPTION: Demonstrates how to create an HTML anchor element using the LinkTitle method for the link text and RelPermalink for the URL. This is useful for creating more readable navigation links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/LinkTitle.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Author Taxonomies - Hugo Configuration\nDESCRIPTION: This Hugo configuration snippet defines a new taxonomy named 'author' with the plural form 'authors'. It is to be added to your site's config file under the [taxonomies] section. Prerequisite: Hugo static site generator. Input: Taxonomy name mapping. Output: Enables organizing content by author and generates corresponding taxonomy pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/term.md#2025-04-23_snippet_5\n\nLANGUAGE: hugo\nCODE:\n```\n[taxonomies]\nauthor = 'authors'\n```\n\n----------------------------------------\n\nTITLE: Assigning Categories and Tags in Page Front Matter - YAML\nDESCRIPTION: This snippet demonstrates how to assign multiple taxonomy terms (such as categories and tags) to a content page using YAML front matter. Put this at the start of your Markdown content in Hugo. 'categories' and 'tags' are defined as arrays, supporting multiple terms per post. The 'title' field sets the page title, while 'categories' and 'tags' list the relevant taxonomies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/taxonomies.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Example\ncategories:\n  - vegetarian\n  - gluten-free\ntags:\n  - appetizer\n  - main course\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Output Formats (Netlify Files) in Hugo (TOML)\nDESCRIPTION: This multi-section TOML snippet creates two custom output formats in Hugo, 'redir' and 'headers', both designed for Netlify. Each specifies a plain-text output file with a precise basename (\"_redirects\" and \"_headers\"), assigns the previous custom media type (\"text/netlify\"), and sets flags like 'isPlainText' and 'notAlternative'. Required: the custom 'text/netlify' media type. Outputs: Hugo generates '_redirects' and '_headers' files as plain text for Netlify deployments. Limitation: Users must ensure media type and format names match their custom configurations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/media-types.md#2025-04-23_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[outputFormats.redir]\nbaseName    = \"_redirects\"\nisPlainText = true\nmediatype   = \"text/netlify\"\n[outputFormats.headers]\nbaseName       = \"_headers\"\nisPlainText    = true\nmediatype      = \"text/netlify\"\nnotAlternative = true\n```\n\n----------------------------------------\n\nTITLE: Defining an Unused Single Page Layout (Go Template)\nDESCRIPTION: This file (`layouts/unused/single.html`) defines a minimal Hugo single page layout that simply outputs the page title (`.Title`). Its location in an `unused` subdirectory suggests it might not be actively used in this specific test case focused on resource path warnings generated by `index.html`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings_issue13164.txt#2025-04-23_snippet_4\n\nLANGUAGE: gohtml\nCODE:\n```\n-- layouts/unused/single.html --\n{{ .Title }}\n```\n\n----------------------------------------\n\nTITLE: Basic Hugo Single Page Layout (Go Template)\nDESCRIPTION: A default layout (`layouts/_default/single.html`) for single content pages in Hugo. It renders the page title using the `{{ .Title }}` variable. This layout isn't directly tested by the `grep` commands but is part of a minimal Hugo setup needed for rendering content pages like `p1.md`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_environment.txt#2025-04-23_snippet_3\n\nLANGUAGE: gohtml\nCODE:\n```\n-- layouts/_default/single.html --\nTitle: {{ .Title }}\n```\n\n----------------------------------------\n\nTITLE: React Shim Export for Window-Based React Global in JavaScript\nDESCRIPTION: This snippet exports the global React instance on the window object as a CommonJS module. Used as a shim so code that imports 'react' gets window.React instead. Prerequisites: run in a browser global with React loaded. Inputs: window.React global. Outputs: module.exports pointing to React instance. Limitation: only works in environments with React preloaded on window.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/js/options.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// js/shims/react.js\nmodule.exports = window.React;\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Duration using Sub Method in Hugo Templates\nDESCRIPTION: Shows how to compute the time duration between two timestamps using Hugo's time functions. Creates two time objects using time.AsTime and calculates their difference using the Sub method. Returns duration in hours, minutes, and seconds format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Sub.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t1 := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t2 := time.AsTime \"2023-01-26T22:34:38-08:00\" }}\n\n{{ $t1.Sub $t2 }} → 25h10m20s\n```\n\n----------------------------------------\n\nTITLE: Setting the 'url' Front Matter Field in Hugo (YAML)\nDESCRIPTION: Shows how to override the entire URL for a page in Hugo using the 'url' property in YAML front matter. Includes escaping a colon with double backslashes when using double quotes. Useful for generating URLs with reserved or special characters; note OS limitations for certain characters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: Example\\nurl: \\\"my\\\\:example\\\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Sass Transpilation Configuration in Hugo\nDESCRIPTION: Advanced example showing Sass transpilation with multiple options including external dependency paths, variable passing from site parameters, and production optimizations with minification and fingerprinting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/Sass.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict\n  \"transpiler\" \"dartsass\"\n  \"targetPath\" \"css/style.css\"\n  \"vars\" site.Params.styles\n  \"enableSourceMap\" (not hugo.IsProduction)\n  \"includePaths\" (slice \"node_modules/bootstrap/scss\")\n}}\n{{ with resources.Get \"sass/main.scss\" | toCSS $opts | minify | fingerprint }}\n  <link rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\">\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended with Snap on Linux\nDESCRIPTION: Command to install the extended edition of Hugo using the Snap package manager on Linux. Snap packages are automatically updated and available for most Linux distributions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo snap install hugo\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Module Mounts - TOML\nDESCRIPTION: Configures the location and inclusion/exclusion policies for mounting directories within Hugo's virtual filesystem. Each '[[module.mounts]]' entry specifies 'source' and 'target' directories and may set 'excludeFiles' for fine-grained control. No external dependencies required; all paths must conform to Hugo's directory conventions. Key parameters are directory names and optional glob patterns. Input is TOML under '[module]'; output is changed mounting behavior for project assets and content. Limitation: You cannot mix legacy directory settings with mount definitions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/module.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[module]\n[[module.mounts]]\n    source=\"content\"\n    target=\"content\"\n    excludeFiles=\"docs/*\"\n[[module.mounts]]\n    source=\"node_modules\"\n    target=\"assets\"\n[[module.mounts]]\n    source=\"assets\"\n    target=\"assets\"\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Build Error Output (Text)\nDESCRIPTION: This text block shows the resulting error message generated by the Hugo build process when the example shortcode (using `.Name` for error reporting) is invoked without the mandatory 'greeting' argument. It clearly displays the shortcode name (\"myshortcode\") and the exact location (file and line number) where the shortcode was called, demonstrating the utility of `.Name` and `.Position` in error messages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Name.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nERROR The \"myshortcode\" shortcode requires a 'greeting' argument. See \"/home/user/project/content/about.md:11:1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables When Running Hugo (Shell)\nDESCRIPTION: This snippet provides shell commands for setting environment variables either inline with the hugo command or using export, allowing these values to be accessed within Hugo templates using the getenv function. It demonstrates two common methods for defining environment variables prior to site generation. These variables must also be permitted by Hugo's configuration to be accessible in templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/Getenv.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nMY_VAR1=foo MY_VAR2=bar hugo\n\nOR\n\nexport MY_VAR1=foo\nexport MY_VAR2=bar\nhugo\n```\n\n----------------------------------------\n\nTITLE: Defining the Hugo Homepage Layout - HTML\nDESCRIPTION: This HTML snippet represents a simple Hugo layout file for the site's homepage, containing only the word 'Home.'. Save this as 'layouts/index.html' in the Hugo project to customize the generated homepage. No dynamic functionality is included; it serves as a static demonstration or test fixture.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__publishdir_in_config.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nHome.\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Security for Executable Allowlist - Hugo TOML\nDESCRIPTION: This configuration snippet shows how to update Hugo's 'security.exec.allow' list to permit Babel execution. It's required for Hugo's asset pipeline to invoke Babel as an external process. Dependencies: Hugo site configuration file (TOML or YAML). The input is an allowlist; the output is permission for 'babel', 'sass', 'npx', etc. Limited by Hugo's security model and matching regex patterns.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Babel.md#2025-04-23_snippet_3\n\nLANGUAGE: hugo\nCODE:\n```\n[security.exec]\\n  allow = ['^(dart-)?sass(-embedded)?$', '^go$', '^npx$', '^postcss$', '^babel$']\n```\n\n----------------------------------------\n\nTITLE: Emoji Shortcodes for Marine Food (Plaintext)\nDESCRIPTION: A list of plaintext shortcodes used to represent marine food emojis (e.g., crab, lobster, shrimp). These shortcodes are typically used in Markdown or systems supporting emoji rendering via text codes, such as Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n:crab:\n:lobster:\n:shrimp:\n:squid:\n:oyster:\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Metadata in TOML Front Matter with Counter Placeholders (toml)\nDESCRIPTION: Shows how to configure multiple resource entries in TOML front matter, using wildcards and the :counter placeholder for automatic sequential naming and titling. Each [[resources]] item targets files matching specific patterns, such as '*specs.pdf' and all PDFs, and assigns a title or name with an incrementing counter. Inputs: TOML array of tables for resources; outputs: resource metadata available for use in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Engine inspections'\\n[[resources]]\\n  src = \"*specs.pdf\"\\n  title = \"Specification #:counter\"\\n[[resources]]\\n  src = \"**.pdf\"\\n  name = \"pdf-file-:counter\"\n```\n\n----------------------------------------\n\nTITLE: Fenced Code Block in Details Element with Summary for Go-HTML-Template - Text\nDESCRIPTION: This snippet illustrates wrapping a code block listing Go-HTML-Template code within an HTML <details> element, initially opened and displaying a summary. Additional metadata enables displaying the filename and copy button. Markdown processors must support these attributes to render the interactive UI as intended.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n```go-html-template {details=true open=true summary=\"layouts/partials/foo.html\" copy=true}\n{{ if eq $foo \"bar\" }}\n  {{ print \"foo is bar\" }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Homepage Layout with Hugo Environment Variables (Go Template)\nDESCRIPTION: This Go template (`layouts/index.html`) defines the structure for the site's homepage. It outputs the static text \"Home|\" followed by the boolean values of the `hugo.IsServer` and `hugo.IsProduction` variables, which indicate whether the site is being built by the development server and for production, respectively. These values are used in the shell script's `grep` check.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo.txt#2025-04-23_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\n-- layouts/index.html --\nHome|IsServer: {{ hugo.IsServer }};IsProduction: {{ hugo.IsProduction }}|\n```\n\n----------------------------------------\n\nTITLE: Creating KeyVals Struct in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the keyVals function to create a KeyValues struct in Hugo templates. It creates a key-value pair with 'foo' as the key and a slice of values 'a', 'b', and 'c'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/KeyVals.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $kv := keyVals \"foo\" \"a\" \"b\" \"c\" }}\n```\n\n----------------------------------------\n\nTITLE: Disabling All RSS Feed Generation in Hugo Configuration (TOML/YAML/Hugo Config)\nDESCRIPTION: This snippet disables the generation of all RSS feeds by specifying 'rss' in the 'disableKinds' array in the config file. Place this in your site's configuration to turn off RSS feeds for all page types globally. No additional parameters are needed, and you can still selectively re-enable outputs for specific page types by removing 'rss' from this list.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/rss.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\ndisableKinds = ['rss']\n```\n\n----------------------------------------\n\nTITLE: Creating Block Comments in Hugo Templates\nDESCRIPTION: Shows how to create block comments in Hugo templates. Block comments can span multiple lines and are not parsed, executed, or displayed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n{{/*\nThis is a block comment.\n*/}}\n\n{{- /*\nThis is a block comment with\nadjacent whitespace removed.\n*/ -}}\n```\n\n----------------------------------------\n\nTITLE: Finding Complement of Numeric Collections with Hugo 'complement' (Go HTML Template)\nDESCRIPTION: This snippet demonstrates computing the difference between collections of numbers using Hugo's 'complement' function in Go HTML Templates. Here, the 'complement' function returns elements of $c3 that are not present in $c1 or $c2, leveraging 'slice' to create collections. Inputs are numeric slices, output is a slice containing unique elements from $c3. No external dependencies are needed beyond Hugo's built-in template functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Complement.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $c1 := slice 3 }}\\n{{ $c2 := slice 4 5 }}\\n{{ $c3 := slice 1 2 3 4 5 }}\\n\\n{{ complement $c1 $c2 $c3 }} → [1 2]\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on openSUSE\nDESCRIPTION: Command to install the extended edition of Hugo on openSUSE and its derivatives (GeckoLinux, Linux Karmada) using the zypper package manager.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsudo zypper install hugo\n```\n\n----------------------------------------\n\nTITLE: Setting Staging Google Analytics ID in Hugo Config Directory (TOML)\nDESCRIPTION: Example configuration for `config/staging/hugo.toml`, specifying the Google Analytics ID (`G-SSSSSSSSS`) to be used only when building the site with the `--environment staging` flag. This overrides any default setting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[services.googleAnalytics]\nID = 'G-SSSSSSSSS'\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Params in a Shortcode - Hugo Go HTML Template\nDESCRIPTION: This snippet illustrates how to access named arguments from the .Params map within a Hugo shortcode template using Go HTML template syntax. '.Params.greeting' and '.Params.name' fetch the respective parameter values by key. This usage assumes the shortcode was invoked with named parameters; otherwise, the keys will not exist.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Params.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Params.greeting }} → Hello\n{{ .Params.name }} → world\n```\n\n----------------------------------------\n\nTITLE: Accessing Taxonomy Data Object Plural Name - Go HTML Template\nDESCRIPTION: Snippet to access the plural name of the current taxonomy within a Hugo taxonomy template. Requires Hugo's .Data object context. Outputs a string (e.g., \"tags\"). Shows use of the 'Plural' property.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Data.Plural }} → tags\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML for Section List Rendering on the Home Page - html\nDESCRIPTION: Shows the HTML output obtained when rendering the section listing template on the site's home page. Each section is represented by an <h2> header with a link to the section. The order reflects the weights from content structure. Produced by iterating over .Sections.ByWeight in Hugo’s template language.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sections.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2><a href=\"/films/\">Films</a></h2>\\n<h2><a href=\"/books/\">Books</a></h2>\\n<h2><a href=\"/auctions/\">Auctions</a></h2>\n```\n\n----------------------------------------\n\nTITLE: Using relLangURL with Non-Slash Inputs (baseURL: https://example.org/docs/)\nDESCRIPTION: Shows how relLangURL function behaves with various inputs that do not begin with a slash, when the baseURL is set to https://example.org/docs/.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelLangURL.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ relLangURL \"\" }}                           → /docs/en/\n{{ relLangURL \"articles\" }}                   → /docs/en/articles\n{{ relLangURL \"style.css\" }}                  → /docs/en/style.css\n{{ relLangURL \"https://example.org\" }}        → https://example.org\n{{ relLangURL \"https://example.org/\" }}       → https://example.org/\n{{ relLangURL \"https://example.org/docs\" }}   → https://example.org/docs\n{{ relLangURL \"https://example.org/docs/\" }}  → /docs/en\n{{ relLangURL \"https://www.example.org\" }}    → https://www.example.org\n{{ relLangURL \"https://www.example.org/\" }}   → https://www.example.org/\n```\n\n----------------------------------------\n\nTITLE: Applying math.Abs in Go HTML Template\nDESCRIPTION: This code snippet demonstrates how to call the math.Abs function directly within a Hugo Go HTML template to compute the absolute value of a numerical expression. No additional dependencies beyond Hugo's templating engine and the Go standard library are required. The key parameter is a numeric value (here, -2.1), and the output will be its absolute value (2.1) rendered in the template; limitations include requiring math to be in the template context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Abs.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Abs -2.1 }} → 2.1\n```\n\n----------------------------------------\n\nTITLE: Defining a Draft Content Page in Hugo Markdown\nDESCRIPTION: This Markdown snippet provides the front matter and body for a draft content page in Hugo, setting 'title', 'slug', 'draft', 'date', 'expiryDate', and 'publishDate' fields. It is depended upon by tests validating draft listings. Input fields determine content visibility by Hugo commands. Output: page is filtered as draft and shown under 'hugo list drafts' until expiry is reached. Constraint: must be placed at 'content/draft.md'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/list.txt#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/draft.md --\n---\ntitle: \"The Draft\"\nslug: \"draft\"\ndraft: true\ndate: 2019-01-01\nexpiryDate: 2032-01-01\npublishDate: 2018-01-01\n---\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ugly URLs Per Section in Hugo Configuration (TOML)\nDESCRIPTION: Hugo configuration snippet, shown within a `code-toggle` shortcode, demonstrating how to enable or disable ugly URLs for specific content sections (e.g., 'books', 'films'). This uses a table under the `[uglyURLs]` key in the site configuration (e.g., `hugo.toml`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/ugly-urls.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n{{< code-toggle file=hugo >}}\n[uglyURLs]\nbooks = true\nfilms = false\n{{< /code-toggle >}}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Hugo Page Bundles\nDESCRIPTION: Demonstrates the typical directory structure for Hugo page bundles, showing examples of both leaf bundles (with index.md files in subdirectories) and branch bundles (with _index.md files).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/BundleType.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── films/\n│   ├── film-1/\n│   │   ├── a.jpg\n│   │   └── index.md  <-- leaf bundle\n│   ├── _index.md     <-- branch bundle\n│   ├── b.jpg\n│   ├── film-2.md\n│   └── film-3.md\n└── _index.md         <-- branch bundle\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Date/Time without Time Zone in Hugo\nDESCRIPTION: Demonstrates Hugo parsing an ISO 8601 formatted date and time string ('2023-10-15T13:18:50') that lacks an explicit time zone offset. Hugo defaults to using the 'Etc/UTC' time zone in this case.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/parsable-date-time-strings.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n2023-10-15T13:18:50\n```\n\n----------------------------------------\n\nTITLE: Using IsSet to Check Parameter Existence\nDESCRIPTION: Shows how to use the isset function to check for parameter existence regardless of its boolean value. Note that the key must be referenced in lowercase.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/IsSet.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if isset site.Params \"showheroimage\" }}\n  <p>The showHeroImage parameter is set to {{ site.Params.showHeroImage }}.<p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Hugo Menu with Emoji Shortcodes\nDESCRIPTION: This Go HTML template snippet demonstrates how to render a Hugo menu that includes emoji shortcodes. It iterates through the main menu items and renders each with its pre and post emoji shortcodes, processed through the markdownify function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/menu-entries/pre-and-post.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li>\n      {{ .Pre | markdownify }}\n      <a href=\"{{ .URL }}\">{{ .Name }}</a>\n      {{ .Post | markdownify }}\n    </li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Sorting Regular Pages by Title in Hugo Templates\nDESCRIPTION: This snippet shows how to use the ByTitle sorting method in combination with RegularPages to display a list of pages sorted alphabetically by title.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/RegularPages.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Site.RegularPages.ByTitle }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Extracting File Extension with path.Ext in Hugo Templates - go-html-template\nDESCRIPTION: Demonstrates how to use the path.Ext function within a Hugo (Go HTML) template to retrieve the file extension of a given path string. No external dependencies are required beyond Hugo's built-in template functions. The function takes a single string parameter representing the file path and returns a string with the file extension (including the leading dot) if present, or an empty string otherwise. Example output shown for a path ending with \".html\".\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/path/Ext.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ path.Ext \"a/b/c/news.html\" }} → .html\n```\n\n----------------------------------------\n\nTITLE: Iterating with Value Variable in range Function\nDESCRIPTION: Shows how to use the range function with a variable to hold each element value during iteration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"foo\" \"bar\" \"baz\" }}\n{{ range $v := $s }}\n  <p>{{ $v }}</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Cards Metadata - Hugo Configuration (TOML)\nDESCRIPTION: Site-wide configuration for Twitter Cards via the [params] section, setting default images and description. These parameters feed into the generated meta tags for Twitter previews using Hugo’s embedded template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_10\n\nLANGUAGE: hugo\nCODE:\n```\n[params]\n  images = [\"site-feature-image.jpg\"]\n  description = \"Text about my cool site\"\n```\n\n----------------------------------------\n\nTITLE: Inequality for Trigonometric Functions in LaTeX\nDESCRIPTION: This LaTeX snippet shows an inequality involving trigonometric functions, which is a key step in one of the proofs for the Basel problem.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\frac{1}{\\tan^2 x} < \\frac{1}{x^2} < \\frac{1}{\\sin^2 x}\n```\n\n----------------------------------------\n\nTITLE: Using the Instagram Shortcode in Hugo Markdown\nDESCRIPTION: Demonstrates the syntax for using the Instagram shortcode in Hugo markdown files to embed an Instagram post using its ID.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/instagram.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{</* instagram CxOWiQNP2MO */>}}\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URLs without Leading Slash and Subdirectory BaseURL (Hugo)\nDESCRIPTION: Shows how urls.AbsURL function generates absolute URLs when the input does not begin with a slash and the baseURL includes a subdirectory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/AbsURL.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ absURL \"\" }}          → https://example.org/docs/\n{{ absURL \"articles\" }}  → https://example.org/docs/articles\n{{ absURL \"style.css\" }} → https://example.org/docs/style.css\n```\n\n----------------------------------------\n\nTITLE: Inherited CLI Flags for Hugo Commands - Shell\nDESCRIPTION: This snippet details flags inherited from parent commands that can be used with 'hugo config', influencing aspects such as the build environment, log level, source/destination directories, theme directory, and configuration files. They are supplied via the command line and alter either operational context or output. These parameters do not require additional dependencies; they are relevant across various Hugo subcommands for consistent configuration management.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_config.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo on DragonFly BSD using package manager\nDESCRIPTION: Command to install the extended edition of Hugo on DragonFly BSD using the pkg package manager.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/bsd.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo pkg install gohugo\n```\n\n----------------------------------------\n\nTITLE: Example CSV Data File for Hugo Global Resource\nDESCRIPTION: An example CSV file (`assets/pets.csv`) containing pet data with headers. This file is intended to be accessed as a Hugo global resource using `resources.Get` and then unmarshalled for use in templates or shortcodes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/data-sources.md#2025-04-23_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n\"name\",\"type\",\"breed\",\"age\"\n\"Spot\",\"dog\",\"Collie\",\"3\"\n\"Felix\",\"cat\",\"Malicious\",\"7\"\n```\n\n----------------------------------------\n\nTITLE: Checking Boolean Values with If/With Statements\nDESCRIPTION: Demonstrates using if and with statements to check for true values in Hugo templates. These methods work for true values but not for false values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/IsSet.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if site.Params.showHeroImage }}\n  {{ site.Params.showHeroImage }} → true\n{{ end }}\n\n{{ with site.Params.showHeroImage }}\n  {{ . }} → true\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using relref Shortcode in Markdown\nDESCRIPTION: Examples of using the relref shortcode in Markdown to create links to different pages, demonstrating various parameter combinations including path, language, and output format specifications.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/relref.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Link A]({{%/* ref \"/books/book-1\" */%}})\n\n[Link B]({{%/* ref path=\"/books/book-1\" */%}})\n\n[Link C]({{%/* ref path=\"/books/book-1\" lang=\"de\" */%}})\n\n[Link D]({{%/* ref path=\"/books/book-1\" lang=\"de\" outputFormat=\"json\" */%}})\n```\n\n----------------------------------------\n\nTITLE: Using compare.Eq function in Hugo templates\nDESCRIPTION: Examples of using the compare.Eq (eq) function in Hugo templates to compare values. The function returns true if the first argument equals any of the subsequent arguments, otherwise it returns false.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Eq.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ eq 1 1 }} → true\n{{ eq 1 2 }} → false\n\n{{ eq 1 1 1 }} → true\n{{ eq 1 1 2 }} → true\n{{ eq 1 2 1 }} → true\n{{ eq 1 2 2 }} → false\n```\n\n----------------------------------------\n\nTITLE: Optimized Output Directory Structure for Multilingual Hugo Site v0.123.0+ (text)\nDESCRIPTION: Shows the improved output directory organization from Hugo v0.123.0, where shared resources are stored only under the default content language. Reduces duplication, storage, and bandwidth compared to earlier versions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/page-resources.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\npublic/\\n├── de/\\n│   ├── my-bundle/\\n│   │   ├── a.jpg     <-- shared page resource\\n│   │   ├── b.jpg     <-- shared page resource\\n│   │   ├── c.de.jpg\\n│   │   └── index.html\\n│   └── index.html\\n├── en/\\n│   ├── my-bundle/\\n│   │   ├── c.en.jpg\\n│   │   └── index.html\\n│   └── index.html\\n└── index.html\n```\n\n----------------------------------------\n\nTITLE: Enabling Hugo's Default Image Render Hook\nDESCRIPTION: Configuration to enable Hugo's embedded image render hook for resolving Markdown image destinations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/images.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.renderHooks.image]\nenableDefault = true\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Multi-language Site Links\nDESCRIPTION: This HTML snippet shows the result of rendering links to home pages for all language versions of the site, as produced by the previous Go HTML template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Sites.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"https://example.org/de/\">Projekt Dokumentation</a></li>\n  <li><a href=\"https://example.org/en/\">Project Documentation</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Merge Strategies for Hugo Configuration Keys (JSON)\nDESCRIPTION: Illustrates the default merge strategies (`deep`, `shallow`, `none`) applied to different top-level Hugo configuration keys (like `deployment`, `mediaTypes`, etc.). This controls how settings from themes, modules, and project configuration are combined. Note that this specific example uses JSON format, likely representing Hugo's internal default structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_merge\": \"deep\",\n    \"deployment\": {\n        \"_merge\": \"shallow\"\n    },\n    \"mediaTypes\": {\n        \"_merge\": \"shallow\"\n    },\n    \"outputFormats\": {\n        \"_merge\": \"shallow\"\n    },\n    \"outputs\": {\n        \"_merge\": \"none\"\n    },\n    \"related\": {\n        \"_merge\": \"none\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Binary Values to Strings in Hugo Templates\nDESCRIPTION: Shows the `string` function applied to a binary numeric literal (`0b11`) and its string representation (`\"0b11\"`). The numeric binary value (equivalent to decimal 3) is converted to its decimal string equivalent ('3'), while the string input containing the binary notation remains unchanged.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToString.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ string 0b11 }} → 3 (string)\n{{ string \"0b11\" }} → 0b11 (string)\n```\n\n----------------------------------------\n\nTITLE: Calling Shortcodes with Named Arguments - Markdown\nDESCRIPTION: This snippet demonstrates invoking a Hugo shortcode with named parameters in a markdown content file. Each argument is specified as a key-value pair, enabling direct access by name within the shortcode template. The 'greeting' and 'name' parameters can be referenced specifically in the template using their identifiers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Params.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{</* myshortcode greeting=\"Hello\" name=\"world\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Querying a Regular Page with GetPage in Hugo - Go HTML Template\nDESCRIPTION: Retrieves a regular (non-section) content page using Hugo's GetPage method and displays its Title and corresponding artist parameter. Requires valid path (e.g., '/works/paintings/starry-night'); otherwise, outputs nothing. No external dependencies except Hugo. Used to access and display specific metadata for a single page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GetPage.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/works/paintings/starry-night\" }}\\n  {{ .Title }} → Starry Night\\n  {{ .Params.artist }} → Vincent van Gogh\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Finding Regex Submatches in Hugo Templates - Go HTML Template\nDESCRIPTION: These demonstrative code snippets show how to use the findRESubmatch function in Go HTML Templates for extracting submatches from strings using a regular expression. Each example provides a pattern, an input string, and optionally a LIMIT parameter. The output in each case is a slice of string slices with the matched text and any subexpressions, returning nil if there are no matches. This requires Hugo and assumes the template has access to this function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FindRESubmatch.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ findRESubmatch `a(x*)b` \"-ab-\" }} → [[\"ab\" \"\"]]\n{{ findRESubmatch `a(x*)b` \"-axxb-\" }} → [[\"axxb\" \"xx\"]]\n{{ findRESubmatch `a(x*)b` \"-ab-axb-\" }} → [[\"ab\" \"\"] [\"axb\" \"x\"]]\n{{ findRESubmatch `a(x*)b` \"-axxb-ab-\" }} → [[\"axxb\" \"xx\"] [\"ab\" \"\"]]\n{{ findRESubmatch `a(x*)b` \"-axxb-ab-\" 1 }} → [[\"axxb\" \"xx\"]]\n```\n\n----------------------------------------\n\nTITLE: Executing the Hugo `mod npm pack` Command (Bash)\nDESCRIPTION: Demonstrates the basic syntax for running the `hugo mod npm pack` command. This command prepares and writes a composite `package.json` file for the Hugo project. It accepts optional flags and arguments to customize its behavior. It is marked as experimental, meaning its functionality might change in future Hugo versions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_npm_pack.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo mod npm pack [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output\nDESCRIPTION: The final HTML output showing how Hugo renders the ByCount template with example data.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/ByCount.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h2><a href=\"/genres/suspense/\">suspense</a> (3)</h2>\n<ul>\n  <li><a href=\"/books/and-then-there-were-none/\">And then there were none</a></li>\n  <li><a href=\"/books/death-on-the-nile/\">Death on the nile</a></li>\n  <li><a href=\"/books/jamaica-inn/\">Jamaica inn</a></li>\n</ul>\n<h2><a href=\"/genres/romance/\">romance</a> (2)</h2>\n<ul>\n  <li><a href=\"/books/jamaica-inn/\">Jamaica inn</a></li>\n  <li><a href=\"/books/pride-and-prejudice/\">Pride and prejudice</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Callout in Hugo Docs\nDESCRIPTION: Example of using the note callout type to highlight important information that users should know while skimming content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n> [!note]\\n> Useful information that users should know, even when skimming content.\n```\n\n----------------------------------------\n\nTITLE: Representing Content Structure as a File Tree (Text)\nDESCRIPTION: Depicts a sample Hugo content directory structure using standard file system paths, including directories and markdown files. This serves as a basis for comparison with the logical tree representation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Path.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n└── s1/\n    ├── p1/\n    │   └── index.md \n    └── p2.md\n```\n\n----------------------------------------\n\nTITLE: Accessing TranslationBaseName in Hugo Templates\nDESCRIPTION: Demonstrates how to get the file name without extension and language identifier using the TranslationBaseName method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .TranslationBaseName }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Hugo 'gen man' Command Options (Plaintext)\nDESCRIPTION: Lists the command-line options specific to the `hugo gen man` command. The primary option is `--dir`, which specifies the directory where the man pages should be written (defaulting to \"man/\"). The `-h` or `--help` flag displays help information for this specific subcommand.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen_man.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      --dir string   the directory to write the man pages. (default \"man/\")\n  -h, --help         help for man\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling a Global Resource JSON File in Hugo\nDESCRIPTION: Shows how to unmarshal a JSON file from the assets directory and process its contents.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Unmarshal.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $path := \"data/books.json\" }}\n{{ with resources.Get $path }}\n  {{ with . | transform.Unmarshal }}\n    {{ $data = . }}\n  {{ end }}\n{{ else }}\n  {{ errorf \"Unable to get global resource %q\" $path }}\n{{ end }}\n\n{{ range where $data \"author\" \"Victor Hugo\" }}\n  {{ .title }} → Les Misérables\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Support - Hugo Site Configuration - hugo\nDESCRIPTION: This snippet shows the necessary configuration to enable multilingual support in a Hugo site. It defines the default content language, enables subdirectories for language variations, and specifies settings for both German and English languages. All key language parameters—such as code, names, titles, and weights—are set under the [languages] table, which is required for hugo.IsMultilingual to function accurately.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/IsMultilingual.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\ndefaultContentLanguage = 'de'\ndefaultContentLanguageInSubdir = true\n[languages]\n  [languages.de]\n    languageCode = 'de-DE'\n    languageName = 'Deutsch'\n    title = 'Projekt Dokumentation'\n    weight = 1\n  [languages.en]\n    languageCode = 'en-US'\n    languageName = 'English'\n    title = 'Project Documentation'\n    weight = 2\n```\n\n----------------------------------------\n\nTITLE: Hugo Debug Log for Asciidoctor Execution\nDESCRIPTION: Debug log output showing how Hugo calls the Asciidoctor executable. This is useful for troubleshooting Asciidoctor integration issues by revealing the command-line arguments passed to the processor.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/markup.md#2025-04-23_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\nINFO 2019/12/22 09:08:48 Rendering book-as-pdf.adoc with C:\\Ruby26-x64\\bin\\asciidoctor.bat using asciidoc args [--no-header-footer -r asciidoctor-html5s -b html5s -r asciidoctor-diagram --base-dir D:\\prototypes\\hugo_asciidoc_ddd\\docs -a outdir=D:\\prototypes\\hugo_asciidoc_ddd\\build -] ...\n```\n\n----------------------------------------\n\nTITLE: Setting Text, Font Path, and Image Path Variables in Hugo Template\nDESCRIPTION: Initializes Hugo template variables `$text`, `$fontPath`, and `$imagePath` with the desired text content, the remote URL for the font file, and the path to the original image, respectively. These variables are used in subsequent steps for image processing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Text.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $text := \"Zion National Park\" }}\n{{ $fontPath := \"https://github.com/google/fonts/raw/main/ofl/lato/Lato-Regular.ttf\" }}\n{{ $imagePath := \"images/original.jpg\" }}\n```\n\n----------------------------------------\n\nTITLE: Passing a Dictionary as Context to a Partial - Hugo Go HTML Template\nDESCRIPTION: This snippet constructs a context dictionary containing the current page and scalar values for use in a partial template ('render-student-info.html'). It uses the 'dict' function to assemble multiple parameters and passes it to the 'partial' function. Designed for cases where the partial needs several pieces of related information.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/Include.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $ctx := dict \\n  \\\"page\\\" .\\n  \\\"name\\\" \\\"John Doe\\\" \\n  \\\"major\\\" \\\"Finance\\\"\\n  \\\"gpa\\\" 4.0\\n}}\\n{{ partial \\\"render-student-info.html\\\" $ctx }}\n```\n\n----------------------------------------\n\nTITLE: Creating Hugo Markdown Content - Markdown\nDESCRIPTION: This Markdown snippet defines a sample content file used for testing Hugo's content processing. It includes front matter specifying the title, and a body containing the text 'P1start' for live reload verification. Dependencies: Requires correct Hugo content directory. Parameters: 'title' for metadata. Input/output: used by Hugo to generate rendered HTML pages. Limitation: simple test content only.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__watch.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"P1\"\n---\nP1start\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Media Type in Hugo (TOML)\nDESCRIPTION: This TOML configuration snippet shows how to define a custom media type in Hugo. It defines the `application/atom+xml` media type and associates it with the file suffix `.atom`. This is a prerequisite for creating a custom Atom feed output format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[mediaTypes.'application/atom+xml']\nsuffixes = ['atom']\n```\n\n----------------------------------------\n\nTITLE: Applying Transformations using Process Method in Hugo Go Templates\nDESCRIPTION: Demonstrates various uses of the `.Process` method for image transformations. It shows rotating ('r90'), resizing ('resize 600x'), cropping ('crop 600x400'), fitting ('fit 600x400'), and filling ('fill 600x400') an image resource (`$image`). The specification string combines the action and parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{/* Rotate the image 90 degrees counter-clockwise. */}}\n{{ $image := $image.Process \"r90\" }}\n\n{{/* Scaling actions. */}}\n{{ $image := $image.Process \"resize 600x\" }}\n{{ $image := $image.Process \"crop 600x400\" }}\n{{ $image := $image.Process \"fit 600x400\" }}\n{{ $image := $image.Process \"fill 600x400\" }}\n```\n\n----------------------------------------\n\nTITLE: Installing Standard Hugo Edition - Shell\nDESCRIPTION: This shell command installs the latest standard edition of Hugo using Go's install command. It requires Go 1.23.0 or later and Git to fetch the source repository. The resulting binary will be placed in the directory determined by the GOPATH or GOBIN environment variables. No additional build tags are set, so this is the standard, non-extended build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/installation/04-build-from-source.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/gohugoio/hugo@latest\n```\n\n----------------------------------------\n\nTITLE: Converting Octal Values to Strings in Hugo Templates\nDESCRIPTION: Illustrates using the `string` function with octal numeric literals (using both `0...` and `0o...` notations) and their string representations. Numeric octal values (equivalent to decimal 9) are converted to their decimal string equivalent ('9'), whereas string inputs containing octal notation are returned unmodified.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToString.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ string 011 }} → 9 (string)\n{{ string \"011\" }} → 011 (string)\n\n{{ string 0o11 }} → 9 (string)\n{{ string \"0o11\" }} → 0o11 (string)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Content Structure Hierarchy in Hugo\nDESCRIPTION: Shows the directory structure that demonstrates how FirstSection identifies the top-level section for each page in the site hierarchy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/FirstSection.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── auctions/\n│   ├── 2023-11/\n│   │   ├── _index.md     <-- first section: auctions\n│   │   ├── auction-1.md\n│   │   └── auction-2.md  <-- first section: auctions\n│   ├── 2023-12/\n│   │   ├── _index.md     \n│   │   ├── auction-3.md\n│   │   └── auction-4.md\n│   ├── _index.md         <-- first section: auctions\n│   ├── bidding.md\n│   └── payment.md        <-- first section: auctions\n├── books/\n│   ├── _index.md         <-- first section: books\n│   ├── book-1.md\n│   └── book-2.md         <-- first section: books\n├── films/\n│   ├── _index.md         <-- first section: films\n│   ├── film-1.md\n│   └── film-2.md         <-- first section: films\n└── _index.md             <-- first section: home\n```\n\n----------------------------------------\n\nTITLE: Defining Site Copyright in Hugo Configuration (TOML)\nDESCRIPTION: This snippet shows how to set the `copyright` variable within the Hugo site configuration file (e.g., `hugo.toml` or `config.toml`). This string value will be made available globally within templates via the `.Site.Copyright` variable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Copyright.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ncopyright = '© 2023 ABC Widgets, Inc.'\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Ref Shortcode in Hugo\nDESCRIPTION: The rendered HTML output showing how Hugo's ref shortcode generates different permalinks based on various parameters like path, language, and output format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/ref.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://example.org/en/books/book-1/\">Link A</a>\n\n<a href=\"https://example.org/en/books/book-1/\">Link B</a>\n\n<a href=\"https://example.org/de/books/book-1/\">Link C</a>\n\n<a href=\"https://example.org/de/books/book-1/index.json\">Link D</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Support in Hugo - TOML\nDESCRIPTION: Defines the default content language and sets up English, German, and French as supported languages in the Hugo config. Each language configuration specifies its content directory, language code, display name, and weight for ordering. This TOML file is essential for Hugo to map and serve localized content for each specified language.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/AllTranslations.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'en'\n\n[languages.en]\ncontentDir = 'content/en'\nlanguageCode = 'en-US'\nlanguageName = 'English'\nweight = 1\n\n[languages.de]\ncontentDir = 'content/de'\nlanguageCode = 'de-DE'\nlanguageName = 'Deutsch'\nweight = 2\n\n[languages.fr]\ncontentDir = 'content/fr'\nlanguageCode = 'fr-FR'\nlanguageName = 'Français'\nweight = 3\n```\n\n----------------------------------------\n\nTITLE: Starting Hugo Embedded Web Server - Shell\nDESCRIPTION: This shell snippet demonstrates the general command-line invocation for starting the Hugo embedded web server. The usage pattern 'hugo server [command] [flags]' shows that additional commands and a variety of flags can be appended for different behaviors, such as live reload, memory rendering, and port specification. No external dependencies are necessary other than the Hugo CLI itself—parameters allow runtime configuration for source directory, destination, port, and more. The expected output is a running development web server that watches for file changes and automatically rebuilds and reloads the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_server.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo server [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Specifying Multilingual 404 Template Filenames in Hugo (Text)\nDESCRIPTION: This snippet illustrates the directory and file naming convention for adding localized 404 error page templates in a Hugo project. Each language-specific 404 page is created by appending the appropriate language key to the file name (e.g., `404.de.html`, `404.en.html`, `404.fr.html`), all within the `layouts` directory. This approach allows Hugo's multilingual feature to serve the correct error page based on the user's language context. No programming logic is present—this is a structural/organizational pattern for static files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/404.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\\n├── 404.de.html\\n├── 404.en.html\\n└── 404.fr.html\\n\n```\n\n----------------------------------------\n\nTITLE: Applying Attributes to Headings, Code Blocks, and Paragraphs in Hugo Markdown (Multiple Text/Bash)\nDESCRIPTION: Demonstrates using attribute lists in right position for section headings and fenced code blocks, as well as the bottom for paragraphs. The code block shows using additional options (e.g., class, line numbering) for syntax highlighting in bash code. Requires Hugo's Goldmark with attribute parsing enabled and syntax highlighter configurations supported.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/markdown-attributes.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n## Section 1 {class=foo}\\n\\n```bash {class=foo linenos=inline}\\ndeclare a=1\\necho \\\"${a}\\\"\\n```\\n\\nThis is a paragraph.\\n{class=foo}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Project and Module Imports (hugo.toml)\nDESCRIPTION: This TOML configuration file (`hugo.toml`) sets the project title and defines Hugo module imports. It explicitly imports two modules: 'github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml' (which is disabled) and 'github.com/gohugoio/hugo-mod-integrationtests/withhugotoml'. This configuration is used to test how `hugo mod get` handles enabled and disabled module imports.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_get.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Modules Test\"\n[module]\n[[module.imports]]\npath=\"github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml\"\ndisable = true\n[[module.imports]]\npath=\"github.com/gohugoio/hugo-mod-integrationtests/withhugotoml\"\n```\n\n----------------------------------------\n\nTITLE: Adding Values to Existing Keys in Hugo Store (Go HTML Template)\nDESCRIPTION: Demonstrates the Add method which appends values to existing keys. It works with strings, numbers, and slices, combining or appending values as appropriate.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/store-methods.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.Set \"greeting\" \"Hello\" }}\n{{ .Store.Add \"greeting\" \"Welcome\" }}\n{{ .Store.Get \"greeting\" }} → HelloWelcome\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.Set \"total\" 3 }}\n{{ .Store.Add \"total\" 7 }}\n{{ .Store.Get \"total\" }} → 10\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.Set \"greetings\" (slice \"Hello\") }}\n{{ .Store.Add \"greetings\" (slice \"Welcome\" \"Cheers\") }}\n{{ .Store.Get \"greetings\" }} → [Hello Welcome Cheers]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Support in Hugo (TOML)\nDESCRIPTION: Defines the multilingual setup for a Hugo site using TOML format, typically in `hugo.toml` or `config.toml`. It specifies the default language ('en') and configurations for English ('en'), German ('de'), and French ('fr'), including their respective content directories, language codes, names, and weights, which influence sorting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Translations.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'en'\n\n[languages.en]\ncontentDir = 'content/en'\nlanguageCode = 'en-US'\nlanguageName = 'English'\nweight = 1\n\n[languages.de]\ncontentDir = 'content/de'\nlanguageCode = 'de-DE'\nlanguageName = 'Deutsch'\nweight = 2\n\n[languages.fr]\ncontentDir = 'content/fr'\nlanguageCode = 'fr-FR'\nlanguageName = 'Français'\nweight = 3\n```\n\n----------------------------------------\n\nTITLE: Using 'else' with 'if' statements in Hugo templates\nDESCRIPTION: Example showing how to use the 'else' statement with 'if' conditional in Hugo templates. The block after 'else' executes when the condition is falsy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/else.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"foo\" }}\n{{ if $var }}\n  {{ $var }} → foo\n{{ else }}\n  {{ print \"var is falsy\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Removing Whitespace Control in Hugo Template Actions (go-html-template)\nDESCRIPTION: Illustrates the use of hyphenated template delimiters ({{- and -}}) to suppress whitespace in the output HTML. The block conditionally renders the title in lowercase. Requires Hugo's Go template parser and a Page object. Resulting HTML is minified without extra blank lines.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- $convertToLower := true -}}\\n{{- if $convertToLower -}}\\n  <h2>{{ strings.ToLower .Title }}</h2>\\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of Duration Calculation\nDESCRIPTION: This snippet shows the rendered output of the previous Hugo template, displaying the calculated number of seconds in a day.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/ParseDuration.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThere are 86400 seconds in one day.\n```\n\n----------------------------------------\n\nTITLE: Create Content with a Specified Archetype Kind - Shell\nDESCRIPTION: Shows setting an explicit archetype with the --kind flag in the Hugo CLI. Allows for overriding the default lookup behavior and specifying which archetype template to use. Requires that the referenced archetype (here, tutorials) exists.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhugo new content --kind tutorials articles/something.md\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Taxonomies with disableKinds in Hugo Configuration - TOML\nDESCRIPTION: This code disables the 'categories' and 'tags' taxonomies (along with their term pages) by using the 'disableKinds' array in the root Hugo configuration file. This is useful for users who do not need the taxonomy system in their site. Add this to your config.toml to prevent Hugo from generating taxonomy and term pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/taxonomies.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\ndisableKinds = ['categories','tags']\n```\n\n----------------------------------------\n\nTITLE: Computing Natural Logarithm with math.Log in Go Templates (Go)\nDESCRIPTION: This code snippet demonstrates how to compute the natural logarithm of the number 42 using the math.Log function in a Hugo Go template. The snippet relies on the presence of the math template functions in Hugo, with '42' passed as the VALUE parameter. It returns a float64 result and is suitable for use in content generation where mathematical expressions are needed. The output of this particular expression is 3.737.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Log.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Log 42 }} → 3.737\n```\n\n----------------------------------------\n\nTITLE: Running Hugo Builds for Different Environments (Shell)\nDESCRIPTION: Executes Hugo builds using both the `HUGO_ENVIRONMENT` environment variable and the `-e` flag to specify 'development' and 'production' environments respectively. It then uses `grep` to verify that the correct value for `site.Params.myparam` is rendered in the `public/index.html` file for each environment. Assumes Hugo is installed and the project structure (config, layouts, content) exists.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_environment.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test the hugo command.\nenv HUGO_ENVIRONMENT=development\n\nhugo\ngrep 'myparam: dev§'  public/index.html\n\nhugo -e production\ngrep 'myparam: §'  public/index.html\n```\n\n----------------------------------------\n\nTITLE: Example GoAT Diagram: Complex Shapes and Connections\nDESCRIPTION: A complex GoAT diagram showcasing various ASCII art elements like boxes with different corner styles, diagonal lines, curved lines, arrows, and text labels. This utilizes Hugo's built-in GoAT rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_6\n\nLANGUAGE: goat\nCODE:\n```\n+-------------------+                           ^                      .---.\n|    A Box          |__.--.__    __.-->         |      .-.             |   |\n|                   |        '--'               v     | * |<---        |   |\n+-------------------+                                  '-'             |   |\n                       Round                                       *---(-. |\n  .-----------------.  .-------.    .----------.         .-------.     | | |\n |   Mixed Rounded  | |         |  / Diagonals  \\        |   |   |     | | |\n | & Square Corners |  '--. .--'  /              \\       |---+---|     '-)-'       .--------.\n '--+------------+-'  .--. |     '-------+--------'      |   |   |       |        / Search /\n    |            |   |    | '---.        |               '-------'       |       '-+------'\n    |<---------->|   |    |      |       v                Interior                 |     ^\n    '           <---'      '----'   .-----------.              ---.     .---       v     |\n .------------------.  Diag line    | .-------. +---.              \\   /           .     |\n |   if (a > b)     +---.      .--->| |       | |    | Curved line  \\ /           / \\    |\n |   obj->fcn()     |    \\    /     | '-------' |<--'                +           /   \\   |\n '------------------'     '--'      '--+--------'      .--. .--.     |  .-.     +Done?+-' \n    .---+-----.                        |   ^           |\\ | | /|  .--+ |   |     \\   / \n    |   |     | Join        \\|/        |   | Curved    | \\| |/ | |    \\    |      \\ /  \n    |   |     +---->  o    --o--        '-'  Vertical  '--' '--'  '--  '--'        +  .---.\n <--+---+-----'       |     /|\\                                                    |  | 3 |\n                      v                             not:line    'quotes'        .-'   '---'\n  .-.             .---+--------.            /            A || B   *bold*       |        ^\n |   |           |   Not a dot  |      <---+---<--    A dash--is not a line    v        |\n  '-'             '---------+--'          /           Nor/is this.            ---\n```\n\n----------------------------------------\n\nTITLE: Deploying to Firebase with CI Token\nDESCRIPTION: This command demonstrates how to deploy to Firebase using a CI token, typically used in continuous integration environments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-firebase.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nfirebase deploy --token $FIREBASE_DEPLOY_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Example Archetype Directory Structure - Text\nDESCRIPTION: Provides a tree representation of an archetypes directory for supporting multiple content types in Hugo. Illustrates how to organize archetype templates for posts and the default fallback. This text schematic guides users in establishing the physical layout before Hugo CLI commands.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\narchetypes/\n├── default.md\n└── posts.md\n\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Hugo Store\nDESCRIPTION: Demonstrates how to set a value for a given key in the site's store.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Store.Set \"greeting\" \"Hello\" }}\n```\n\n----------------------------------------\n\nTITLE: Page Title Access in Hugo Range Loop\nDESCRIPTION: Demonstrates accessing page titles within a range loop, showing potential context issues with the global page function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/global/page.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range site.Sections }}\n  {{ range .Pages }}\n    {{ page.Title }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Passthrough Render Hook for Math Rendering in Hugo\nDESCRIPTION: Provides a template for a passthrough render hook that uses transform.ToMath to render LaTeX markup and handle errors.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/ToMath.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{- $opts := dict \"output\" \"htmlAndMathml\" \"displayMode\" (eq .Type \"block\") }}\n{{- with try (transform.ToMath .Inner $opts) }}\n  {{- with .Err }}\n    {{- errorf \"Unable to render mathematical markup to HTML using the transform.ToMath function. The KaTeX display engine threw the following error: %s: see %s.\" . $.Position }}\n  {{- else }}\n    {{- .Value }}\n    {{- $.Page.Store.Set \"hasMath\" true }}\n  {{- end }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Single-Term Taxonomy in Hugo - YAML/TOML\nDESCRIPTION: This snippet configures a new 'author' taxonomy in Hugo using singular forms for both key and value in the configuration file. Place under the 'taxonomies:' section in your site's configuration. No dependencies other than a valid Hugo setup are required. This approach is used when only one value of the taxonomy is expected per page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/taxonomies.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntaxonomies:\n  author: author\n```\n\n----------------------------------------\n\nTITLE: Rendering Preact Components Using JSX Syntax in JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to render a Preact component written in JSX using the render function and fragment syntax. Requires Preact and appropriate build config (e.g., Hugo js.Build with JSX automatic transformation and JSXImportSource). Inputs: root DOM container and component definition. Outputs: the App component is rendered into the #app element. Limitation: only applicable in compatible build contexts.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/js/options.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\n\nconst App = () => <>Hello world!</>;\n\nconst container = document.getElementById('app');\nif (container) render(<App />, container);\n```\n\n----------------------------------------\n\nTITLE: Listing Published Content Command Flags - Hugo CLI - Bash\nDESCRIPTION: Lists the available options for the hugo list published command and inherited options from parent commands. These options allow users to customize behavior, such as setting the config file, environment, source directory, log level, and more. No actual processing is shown; these are documentation for the flags to be passed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_published.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for published\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of Hugo Template - HTML\nDESCRIPTION: This HTML snippet displays the output that would be rendered by Hugo after running the provided Go HTML Template code. It presents links (with titles) to each page of type 'books', showing the actual structure and content users can expect on the front end. The snippet is static and has no dependencies; it serves as a result preview for developers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Type.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2><a href=\"/books/book-1/\">Book 1</a></h2>\\n<h2><a href=\"/books/book-2/\">Book 2</a></h2>\\n<h2><a href=\"/auction/item-2/\">Item 2</a></h2>\n```\n\n----------------------------------------\n\nTITLE: Accessing UniqueID in Hugo Templates\nDESCRIPTION: Shows how to get the MD5 hash of the file path using the UniqueID method in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_11\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .UniqueID }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of strings.TrimRight in Go HTML Template\nDESCRIPTION: This snippet demonstrates the basic usage of the `strings.TrimRight` function in a Hugo template. It removes all trailing characters present in the cutset ('a') from the end of the input string ('abba'), resulting in 'abb'. The function signature is `strings.TrimRight CUTSET STRING`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/TrimRight.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.TrimRight \"a\" \"abba\" }} → abb\n```\n\n----------------------------------------\n\nTITLE: Displaying Total Number of Elements with Hugo's Paginator - Go HTML Template\nDESCRIPTION: This snippet filters regular site pages by type \"posts\", paginates the result, iterates through the pages to render their titles and permalinks, and finally displays the total number of elements using the paginator's `TotalNumberOfElements` property. Dependencies include Hugo with site content organized into types, and Hugo's built-in paginator. Inputs: the current site context; outputs: a rendered sequence of links plus a total count. The paginator only operates on regular pages and within the Hugo templating context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/TotalNumberOfElements.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  {{ .TotalNumberOfElements }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Build and Verifying Output (Shell)\nDESCRIPTION: This shell script executes the default Hugo build command. It then uses `stdout` checks to verify specific lines appear in the command's output, `checkfile` to ensure expected HTML files are generated in the `public` directory, and `grep` to confirm the `IsServer` and `IsProduction` Hugo variables are correctly evaluated to `false` and `true` respectively in the generated homepage. Requires `hugo` and `grep` commands to be available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test the hugo command.\n\nhugo\nstdout 'Pages.*|1'\nstdout 'Total in'\ncheckfile public/index.html\ncheckfile public/p1/index.html\ngrep 'IsServer: false;IsProduction: true'  public/index.html\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Paths for Cascade in Hugo Config\nDESCRIPTION: Shows how to use the `target` key within a `cascade` block in the site configuration (`hugo.toml`). It specifies a `path` glob pattern (`{/articles,/articles/**}`) to apply the `color = 'red'` parameter only to the 'articles' section page and its descendants.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/cascade.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[cascade.params]\ncolor = 'red'\n[cascade.target]\npath = '{/articles,/articles/**}'\n```\n\n----------------------------------------\n\nTITLE: Accessing KeyVals Struct Properties in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to access the Key and Values properties of the KeyValues struct in Hugo templates. It shows how to extract the key and the array of values separately.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/KeyVals.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $kv.Key }} → foo\n{{ $kv.Values }} → [a b c]\n```\n\n----------------------------------------\n\nTITLE: Merging Maps in Order $m3, $m2, $m1\nDESCRIPTION: Shows merging the same three maps but in reverse order from the first example. This affects which values appear in the final merged map for duplicate keys.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Merge.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $merged := merge $m3 $m2 $m1 }}\n\n{{ $merged.x }}   → foo\n{{ $merged.y }}   → wibble\n{{ $merged.z.a }} → huey\n```\n\n----------------------------------------\n\nTITLE: Generating Relative URLs with Leading Slash (baseURL: /docs/) using Go HTML Template\nDESCRIPTION: Demonstrates `relURL` with inputs starting with a slash when `baseURL` is `https://example.org/docs/`. Similar to the previous example, the leading slash makes the resulting URL relative to the host (`https://example.org`), ignoring the `/docs/` subpath specified in the `baseURL`. This behavior highlights why leading slashes are often discouraged.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelURL.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ relURL \"/\" }}          → /\n{{ relURL \"/articles\" }}  → /articles\n{{ relURL \"/style.css\" }} → /style.css\n```\n\n----------------------------------------\n\nTITLE: Implementing Import Order Workaround in JavaScript\nDESCRIPTION: Demonstrates a workaround for ESBuild's import ordering issue by explicitly defining import order in a separate script. The script should be placed early in the build process to ensure proper execution order.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport './lib2.js';\nimport './lib1.js';\n\nconsole.log('entrypoints-workaround.js');\n```\n\n----------------------------------------\n\nTITLE: Resulting Public Directory Output After Build - Directory Layout - text\nDESCRIPTION: Displays the resulting structure of the `public/` directory after Hugo builds the site with the example bundle provided. This outcome demonstrates which files are published, focusing on the behavior where only certain resource types (like images and the main content) are output, while others are omitted based on their content type configuration. This is key for verifying and customizing your site's published asset structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/content-types.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npublic/\\n├── example/\\n│   ├── g.jpg\\n│   ├── h.png\\n│   └── index.html\\n└── index.html\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Hugo Commands\nDESCRIPTION: Shows a list of available Hugo commands and flags, and demonstrates how to get help for specific subcommands.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/usage.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhugo help\n```\n\nLANGUAGE: sh\nCODE:\n```\nhugo server --help\n```\n\n----------------------------------------\n\nTITLE: Deprecating SITE.IsDevelopment in Hugo Templates - Markdown\nDESCRIPTION: This snippet uses Hugo's markdown shortcodes and formatting to document the deprecation of the SITE.IsDevelopment template function. It instructs users to use the hugo.IsDevelopment function instead and provides a link to the replacement's documentation. There are no external dependencies required beyond Hugo's markdown rendering and the custom shortcodes. No direct code execution is present; the snippet is purely documentation aimed at Hugo site maintainers and theme authors.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/IsDevelopment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\\ntitle: IsDevelopment\\ndescription: Reports whether the current running environment is “development”.\\ncategories: []\\nkeywords: []\\nparams:\\n  functions_and_methods:\\n    returnType: bool\\n    signatures: [SITE.IsDevelopment]\\nexpiryDate: 2025-10-30 # deprecated 2023-10-30 in v0.120.0\\n---\\n\\n{{< deprecated-in 0.120.0 >}}\\nUse [`hugo.IsDevelopment`] instead.\\n\\n[`hugo.IsDevelopment`]: /functions/hugo/isdevelopment/\\n{{< /deprecated-in >}}\n```\n\n----------------------------------------\n\nTITLE: Illustrating i18n Directory Structure for Pluralization (Text)\nDESCRIPTION: Shows the `i18n` directory structure containing translation files for English (`en.toml`) and Polish (`pl.toml`), setting the stage for pluralization examples. This structure is identical to the simple translation example but used for context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ni18n/\n├── en.toml\n└── pl.toml\n```\n\n----------------------------------------\n\nTITLE: Default Pandoc CLI Flags in Hugo\nDESCRIPTION: This snippet shows the default command-line flag (`--mathjax`) that Hugo passes to the external Pandoc executable. This flag enables MathJax support for rendering mathematical notation within Pandoc content. Requires Pandoc to be installed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/formats.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--mathjax\n```\n\n----------------------------------------\n\nTITLE: Demonstrating anchorize and urlize Functions in Hugo Templates - Go HTML Template\nDESCRIPTION: This code provides multiple examples of applying the anchorize and urlize template functions to different input strings in a Hugo Go HTML Template context. The anchorize function outputs a string suitable for HTML id attributes by replacing spaces and special characters, while urlize produces a URL-safe string, optionally encoding non-ASCII characters. No additional dependencies are required; these functions are built into Hugo templates. Each input example demonstrates the transformation result and highlights distinctions in sanitization, such as handling of spaces, special characters, and non-ASCII input.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/urls/anchorize-vs-urlize.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := \"A B C\" }}\n{{ $s | anchorize }} → a-b-c\n{{ $s | urlize }} → a-b-c\n\n{{ $s := \"a b   c\" }}\n{{ $s | anchorize }} → a-b---c\n{{ $s | urlize }} → a-b-c\n\n{{ $s := \"< a, b, & c >\" }}\n{{ $s | anchorize }} → -a-b--c-\n{{ $s | urlize }} → a-b-c\n\n{{ $s := \"main.go\" }}\n{{ $s | anchorize }} → maingo\n{{ $s | urlize }} → main.go\n\n{{ $s := \"Hugö\" }}\n{{ $s | anchorize }} → hugö\n{{ $s | urlize }} → hug%C3%B6\n```\n\n----------------------------------------\n\nTITLE: Removing Prefixes with strings.TrimPrefix in Hugo Go Templates\nDESCRIPTION: Demonstrates the use of Hugo's `strings.TrimPrefix` function. This function takes two string arguments: the prefix to remove (`PREFIX`) and the input string (`STRING`). It returns the input string with the specified prefix removed from the beginning. If the string does not start with the prefix, the original string is returned.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/TrimPrefix.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.TrimPrefix \"a\" \"aabbaa\" }} → abbaa\n{{ strings.TrimPrefix \"aa\" \"aabbaa\" }} → bbaa\n{{ strings.TrimPrefix \"aaa\" \"aabbaa\" }} → aabbaa\n```\n\n----------------------------------------\n\nTITLE: Inherited Flags for Hugo CLI Commands - Shell Example\nDESCRIPTION: This code snippet documents inherited command-line flags available to the 'hugo gen chromastyles' command, covering configuration, environment, output paths, and build options. These options provide broad control over Hugo's behavior when generating stylesheets and are inherited from parent commands in the Hugo CLI. Input is via the shell; output behavior depends on flag values and system configuration; Hugo must be installed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen_chromastyles.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Structure in Hugo Project\nDESCRIPTION: Shows the directory structure for a sample Hugo project with weighted pages that will be used to demonstrate the navigation behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/pages/next-and-prev.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── pages/\n│   ├── _index.md\n│   ├── page-1.md   <-- front matter: weight = 10\n│   ├── page-2.md   <-- front matter: weight = 20\n│   └── page-3.md   <-- front matter: weight = 30\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Rounding Durations to Various Intervals in Hugo Templates\nDESCRIPTION: Demonstrates how to round a duration to the nearest multiple of another duration using the Round method. The example parses a duration of 3.5 hours, 2.5 minutes, and 1.5 seconds, then rounds it to the nearest 2 hours, 3 minutes, and 4 seconds respectively.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/duration/Round.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }}\n\n{{ $d.Round (time.ParseDuration \"2h\") }} → 4h0m0s\n{{ $d.Round (time.ParseDuration \"3m\") }} → 3h33m0s\n{{ $d.Round (time.ParseDuration \"4s\") }} → 3h32m32s\n```\n\n----------------------------------------\n\nTITLE: Building and Rendering js.Batch Assets using templates.Defer in Go Templates\nDESCRIPTION: This Go template demonstrates the final step of processing a `js.Batch`. It uses `templates.Defer` to ensure all potentially concurrent script/instance definitions are collected before building. Inside the deferred block, it calls `.Build()` on the batch, retrieves the resources for a specific group (`index .Groups $`), iterates through the resulting resources (JavaScript or CSS files generated by ESBuild), and renders the appropriate HTML `<script type=\"module\">` or `<link rel=\"stylesheet\">` tags with the correct paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $group := .group }}\n{{ with (templates.Defer (dict \"key\" $group \"data\" $group )) }}\n  {{ with (js.Batch \"js/mybatch\") }}\n    {{ with .Build }}\n      {{ with index .Groups $ }}\n        {{ range . }}\n          {{ $s := . }}\n          {{ if eq $s.MediaType.SubType \"css\" }}\n            <link href=\"{{ $s.RelPermalink }}\" rel=\"stylesheet\" />\n          {{ else }}\n            <script src=\"{{ $s.RelPermalink }}\" type=\"module\"></script>\n          {{ end }}\n        {{ end }}\n      {{ end }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Listing all available Mage commands\nDESCRIPTION: This command shows all available Mage commands that can be used for Hugo development.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmage -l\n```\n\n----------------------------------------\n\nTITLE: Executing the Hugo New Site Command (Shell)\nDESCRIPTION: Demonstrates the basic command-line syntax for creating a new Hugo site skeleton using the `hugo new site` command. The `[path]` argument specifies the directory where the new site structure will be created, and `[flags]` represent optional parameters that modify the command's behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new_site.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo new site [path] [flags]\n```\n\n----------------------------------------\n\nTITLE: Deleting Keys from Hugo Store (Go HTML Template)\nDESCRIPTION: Shows how to use the Delete method to remove a key and its associated value from the Hugo Store.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/store-methods.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.Set \"greeting\" \"Hello\" }}\n{{ .Store.Delete \"greeting\" }}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Meta Generator Tag in Hugo Templates\nDESCRIPTION: Demonstrates how to use the hugo.Generator function to insert a meta element that identifies the Hugo version used to generate the site. The function returns template.HTML content that can be directly injected into HTML templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/Generator.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.Generator }} → <meta name=\"generator\" content=\"Hugo 0.144.2\">\n```\n\n----------------------------------------\n\nTITLE: Example Template File Path for Custom Atom Feed\nDESCRIPTION: This text snippet shows an example file path for a Hugo template that would render the custom 'atom' output format for list pages (like the homepage or section pages). It follows the standard Hugo template lookup order: `layouts/[type]/[layout].[outputFormat].[suffix]`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nlayouts/_default/list.atom.atom\n```\n\n----------------------------------------\n\nTITLE: Section Template with Summary Example\nDESCRIPTION: Shows a section template that displays page titles and summaries, demonstrating potential caching issues with shortcodes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/global/page.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n  {{ .Summary }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Converting Degrees to Radians using math.ToRadians in Hugo\nDESCRIPTION: This Hugo template snippet demonstrates the usage of the `math.ToRadians` function. It takes a numerical value representing degrees (90 in this case) as input and returns its equivalent in radians (approximately 1.5708). This function is part of Hugo's built-in math utilities, available since version 0.130.0, and returns a float64 value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/ToRadians.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.ToRadians 90 }} → 1.5707963267948966\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Options in hugo mod get - Shell\nDESCRIPTION: This snippet enumerates a list of command-line flags inherited from parent commands when using 'hugo mod get'. These allow customization of aspects such as clock settings, configuration files/dirs, destination/source paths, log levels, and more advanced control features. The dependencies are environment variables or configuration files recognized by Hugo, and these parameters enable refined customization of module-related operations. Inputs are flag-value pairs tailored to user requirements; output is contextually adjusted behavior of 'hugo mod get'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_get.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Configuration using Hugo CLI - Shell\nDESCRIPTION: This snippet demonstrates how to use the 'hugo config' command-line tool to display the current site configuration, supporting both default and user-customized settings. It shows the general usage for invoking the command, where '[command]' and '[flags]' represent optional subcommands and configuration flags, respectively. No external dependencies are required beyond Hugo installation; inputs are command-line options and the output is the printed configuration in the terminal.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_config.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo config [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Hugo Content View Template Directory Structure\nDESCRIPTION: Shows an example directory structure within the `layouts` folder for organizing Hugo content view templates. It demonstrates placing view-specific templates like `li.html` and `summary.html` alongside the standard `single.html` template within directories named after content types (`posts`, `project`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/content-view.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nlayouts/\n├── posts/\n│   ├── li.html\n│   ├── single.html\n│   └── summary.html\n├── project/\n│   ├── li.html\n│   └── single.html\n└── summary.html\n```\n\n----------------------------------------\n\nTITLE: Pluralizing with Hugo Inflect in Go HTML Template\nDESCRIPTION: This snippet shows how to use the Hugo template function 'pluralize' to convert a singular English word (in this case, 'cat') to its plural form ('cats') inside a Go HTML Template. Requires Hugo static site generator, with inflect functions available in the template context. The string before the pipe is the word to pluralize, and the output is the correctly pluralized form. The input must be a string, and the function applies common English pluralization rules.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/inflect/Pluralize.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"cat\" | pluralize }} → cats\n```\n\n----------------------------------------\n\nTITLE: Options for the Hugo New Site Command (Text)\nDESCRIPTION: Lists the command-line options specifically available for the `hugo new site` command. The `-f` or `--force` flag allows initialization even if the target directory is not empty. The `--format` flag specifies the preferred configuration file format (toml, yaml, or json, defaulting to toml). The `-h` or `--help` flag displays help information for the command.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new_site.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -f, --force           init inside non-empty directory\n      --format string   preferred file format (toml, yaml or json) (default \"toml\")\n  -h, --help            help for site\n```\n\n----------------------------------------\n\nTITLE: Formatting Front Matter Dates in Hugo\nDESCRIPTION: Shows how to format the four predefined front matter dates (Date, PublishDate, ExpiryDate, Lastmod) using the Format method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Format.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $format := \"2 Jan 2006\" }}\n\n{{ .Date.Format $format }}\n{{ .PublishDate.Format $format }}\n{{ .ExpiryDate.Format $format }}\n{{ .Lastmod.Format $format }}\n```\n\n----------------------------------------\n\nTITLE: Sample Babel Configuration Export with Preset - JavaScript\nDESCRIPTION: This Babel configuration defines the module exports for Babel, specifying use of the '@babel/preset-env' preset with custom options for polyfill inclusion and core-js version. Dependencies include the Babel core package and relevant presets installed in the project. The input is a Babel configuration context; the output is a customized Babel setup for ES compatibility. Limitations include the need for the module to exist in scope and be referenced correctly.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Babel.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\\n  presets: [\\n    [\\n      require(\"@babel/preset-env\"),\\n      {\\n        useBuiltIns: \"entry\",\\n        corejs: 3,\\n      },\\n    ],\\n  ],\\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Name for Unnamed Page Resource Using Hugo Templates - Go HTML Template\nDESCRIPTION: Demonstrates getting the .Name property for a page resource where no custom 'name' is set in front matter. The fallback is the file path, relative to the page bundle. Requires Hugo's template resources API, input is the resource file path string. Outputs the relative file path string as the resource name.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Name.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.Get \\\"images/Sunrise in Bryce Canyon.jpg\\\" }}\\n  {{ .Name }} → images/Sunrise in Bryce Canyon.jpg\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Ugly URL Configuration Setting\nDESCRIPTION: Hugo shortcode used to display the default configuration setting for `uglyURLs` within the documentation. By default, Hugo uses pretty URLs, corresponding to `uglyURLs = false`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/ugly-urls.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{< code-toggle config=uglyURLs />}}\n```\n\n----------------------------------------\n\nTITLE: Basic Hugo Build and rsync Deployment Command\nDESCRIPTION: A single command that builds the Hugo site and deploys it to a remote server using rsync. The --delete flag ensures the remote directory exactly matches the local public directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nhugo && rsync -avz --delete public/ www-data@ftp.topologix.fr:~/www/\n```\n\n----------------------------------------\n\nTITLE: Calculating FNV32a Hash in Hugo Templates\nDESCRIPTION: Demonstrates how to use the hash.FNV32a function in Hugo templates to generate a 32-bit FNV non-cryptographic hash from a string. The function takes a string input and returns an integer value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hash/FNV32a.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hash.FNV32a \"Hello world\" }} → 1498229191\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Module Graph Command and Checking Output (Shell)\nDESCRIPTION: This snippet executes the 'hugo mod graph' command to display the module dependency graph for the Hugo project defined in the current directory. The subsequent 'stdout' line specifies a regular expression ('withhugotoml.*commonmod') which the standard output must match, likely within a test assertion framework, verifying that the enabled 'withhugotoml' module and its transitive dependencies (like 'commonmod') are present in the graph.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod__disable.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod graph\nstdout 'withhugotoml.*commonmod'\n```\n\n----------------------------------------\n\nTITLE: Sorting Maps in Descending Order with Hugo\nDESCRIPTION: Demonstrates sorting map objects in descending order by a specific key using the collections.Sort function in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Sort.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range sort site.Params.authors \"firstname\" \"desc\" }}\n  {{ .firstName }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Reversed Menu Items\nDESCRIPTION: The resulting HTML generated by Hugo when using the Reverse method with ByName sorter. Items are sorted alphabetically in descending order: Services, Contact, About.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/Reverse.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/services/\">Services</a></li>\n  <li><a href=\"/contact\">Contact</a></li>\n  <li><a href=\"/about/\">About</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Rendered Go Code Block with Highlight Options (Go)\nDESCRIPTION: Shows the expected visual output after Hugo processes a Markdown code block with syntax highlighting options. The example is Go code and includes annotations for line numbers, specific highlighted lines, and style. There are no explicit code dependencies, as the snippet is illustrative of the rendered result within Hugo's output. This is used to demonstrate how code appears after being processed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/syntax-highlighting.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    for i := 0; i < 3; i++ {\n        fmt.Println(\"Value of i:\", i)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Store Values with Content Rendering\nDESCRIPTION: Shows how to ensure content is rendered before accessing store values using noop variables.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $noop := .Content }}\n{{ site.Store.Get \"mykey\" }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $noop := .WordCount }}\n{{ site.Store.Get \"mykey\" }}\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Data Items Using 'where' in Go HTML Template\nDESCRIPTION: Demonstrates using the `where` template function to filter data. This example filters the `fiction` books data (`.Site.Data.books.fiction`) to find the book with the specific `isbn` value \"978-0140443530\" and then renders its details.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Data.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range where .Site.Data.books.fiction \"isbn\" \"978-0140443530\" }}\n  <li>{{ .title }} ({{ .author }})</li>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of Continue Example\nDESCRIPTION: Shows the resulting HTML output after the Hugo template with the 'continue' statement is rendered. The item 'bar' is skipped in the output as expected.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/continue.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>foo</p>\n<p>baz</p>\n```\n\n----------------------------------------\n\nTITLE: Specifying Google Cloud Storage Subdirectory Target - Text\nDESCRIPTION: This snippet demonstrates how to specify a Google Cloud Storage bucket as a deployment target, including targeting a subdirectory within the bucket using the 'prefix' query parameter. No additional dependencies are needed; the format must be respected by Hugo's deployment system. The input is a string URL, and Hugo will deploy content to the indicated subdirectory. The limitation is that only Google Cloud Storage supports this 'prefix' approach directly.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngs://my-bucket?prefix=a/subdirectory\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Date Only without Time Zone in Hugo\nDESCRIPTION: Shows Hugo parsing an ISO 8601 formatted date string ('2023-10-15') containing only the date part and no time zone information. Hugo defaults to using the 'Etc/UTC' time zone.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/parsable-date-time-strings.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n2023-10-15\n```\n\n----------------------------------------\n\nTITLE: Recommended Method for Accessing Google Analytics ID in Hugo Templates\nDESCRIPTION: Shows the recommended method for retrieving the Google Analytics tracking ID using `Site.Config.Services.GoogleAnalytics.ID`. This replaces the deprecated `SITE.GoogleAnalytics` variable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GoogleAnalytics.md#2025-04-23_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\nSite.Config.Services.GoogleAnalytics.ID\n```\n\n----------------------------------------\n\nTITLE: Using hugo.BuildDate to Get Hugo Binary Compilation Date\nDESCRIPTION: Example of using the hugo.BuildDate function to retrieve the compile date of the Hugo binary. The date is formatted according to RFC 3339 standard.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/BuildDate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.BuildDate }} → 2023-11-01T17:57:00Z\n```\n\n----------------------------------------\n\nTITLE: Using Partial Template from Page Template in Hugo\nDESCRIPTION: Example of calling a partial template from a Hugo page template. In this context, the dot (.) is already the Page object itself.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Page.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"my-partial.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Defining Headless Bundle Front Matter\nDESCRIPTION: YAML front matter defining a headless bundle reference page in Hugo documentation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/headless-bundle.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: headless bundle\nreference: /content-management/build-options/\n---\n```\n\n----------------------------------------\n\nTITLE: Invoking Hugo Environment Command - Command Line - Bash\nDESCRIPTION: This snippet demonstrates how to invoke the 'hugo env' command from the terminal to display the current Hugo version and environment information. No programming dependencies are required, but Hugo must be installed and accessible in the system's PATH. The snippet accepts optional flags and arguments, and outputs details useful for debugging or reporting issues with Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_env.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo env [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Parameters in Hugo Theme Config - TOML\nDESCRIPTION: This theme-specific TOML sets a single parameter 'foo' with the value 'bar' under the [params] table, to be merged into the site parameters for use in templates. It should be located at themes/mytheme/hugo.toml. Hugo will merge these parameters with site-level config. Requires Hugo's theme config merging behavior. The 'foo' value will be available in templates under .Site.Params.foo. Limitation: Only supports additive parameter definitions per Hugo theme conventions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__watch_moduleconfig.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[params]\n    foo = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Hugo Site with Rclone (Configured)\nDESCRIPTION: This snippet shows how to deploy a Hugo site using a pre-configured Rclone setup. It builds the Hugo site with garbage collection and minification, then uses Rclone to sync the public directory to a configured remote named 'hugo-www'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rclone.md#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nhugo --gc --minify\nrclone sync --interactive public/ hugo-www:www/\n```\n\n----------------------------------------\n\nTITLE: Preserving Default and Adding Custom Taxonomies in Hugo Configuration - YAML/TOML\nDESCRIPTION: This snippet demonstrates how to extend the default Hugo taxonomies with a new custom taxonomy ('author') without losing the existing ones. All three taxonomies ('author', 'category', and 'tag') are included in the 'taxonomies' section. Place in your Hugo site configuration file. Ensures no default taxonomy is inadvertently removed when customizing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/taxonomies.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntaxonomies:\n  author: author\n  category: categories\n  tag: tags\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements in Slices and Maps with collections.Index\nDESCRIPTION: Demonstrates basic usage of collections.Index to access elements in slices and maps using single keys.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/IndexFunction.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"a\" \"b\" \"c\" }}\n{{ index $s 0 }} → a\n{{ index $s 1 }} → b\n\n{{ $m := dict \"a\" 100 \"b\" 200 }}\n{{ index $m \"b\" }} → 200\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Hugo Site via Command-Line - Shell\nDESCRIPTION: This shell snippet demonstrates creating a new directory for a Hugo static site, changing into that directory, and running the Hugo CLI to initialize the site. The commands 'mkdir mysite' and 'cd mysite' are prerequisites for site generation, while '! hugo' attempts to run the Hugo initialization, triggering an error if no config is found. This setup requires the Hugo CLI tool to be installed and accessible in the system's PATH. It expects an empty output directory with no prior Hugo configuration, and highlights the error when a config file is absent.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__noconfig.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir mysite\ncd mysite\n! hugo\n```\n\n----------------------------------------\n\nTITLE: Using Partial Template from Shortcode in Hugo\nDESCRIPTION: Example of calling a partial template from within a Hugo shortcode. When called from a shortcode, the context (.) includes identifiers like Page, Params, Inner, and Name.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Page.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ partial \"my-partial.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Settings in Hugo - TOML\nDESCRIPTION: This TOML snippet sets up Hugo's multilingual configuration, defining English and German languages with their respective content directories, language codes, names, and display order (weight). This enables content organization for multiple locales. Dependencies: Hugo static site generator. Key parameters include 'defaultContentLanguage', '[languages.<lang>].contentDir', '[languages.<lang>].languageCode', and 'weight'. Inputs are not required at runtime; configuration is read statically.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/TranslationKey.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\ndefaultContentLanguage = 'en'\n\n[languages.en]\ncontentDir = 'content/en'\nlanguageCode = 'en-US'\nlanguageName = 'English'\nweight = 1\n\n[languages.de]\ncontentDir = 'content/de'\nlanguageCode = 'de-DE'\nlanguageName = 'Deutsch'\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Content Structure Example in Hugo\nDESCRIPTION: Shows the hierarchical content structure example with annotations indicating which section each file belongs to. This helps visualize how CurrentSection works in different parts of the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/CurrentSection.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── auctions/\n│   ├── 2023-11/\n│   │   ├── _index.md     <-- current section: 2023-11\n│   │   ├── auction-1.md\n│   │   └── auction-2.md  <-- current section: 2023-11\n│   ├── 2023-12/\n│   │   ├── _index.md     \n│   │   ├── auction-3.md\n│   │   └── auction-4.md\n│   ├── _index.md         <-- current section: auctions\n│   ├── bidding.md\n│   └── payment.md        <-- current section: auctions\n├── books/\n│   ├── _index.md         <-- current section: books\n│   ├── book-1.md\n│   └── book-2.md         <-- current section: books\n├── films/\n│   ├── _index.md         <-- current section: films \n│   ├── film-1.md\n│   └── film-2.md         <-- current section: films\n└── _index.md             <-- current section: home\n```\n\n----------------------------------------\n\nTITLE: Formatting Time with Hugo Templates\nDESCRIPTION: An example of parsing a timestamp string, converting it to a time.Time object, and formatting it according to a custom format string. Shows how to use Hugo's time functions in templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/time-layout-string.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := \"2023-01-27T23:44:58-08:00\" }}\n{{ $t = time.AsTime $t }}\n{{ $t = $t.Format \"Jan 02, 2006 3:04 PM Z07:00\" }}\n\n{{ $t }} → Jan 27, 2023 11:44 PM -08:00 \n```\n\n----------------------------------------\n\nTITLE: Adding HTML and Boolean Attributes to Blockquotes in Hugo Markdown (Plain Text)\nDESCRIPTION: Demonstrates applying both a class and a boolean attribute to a blockquote using Hugo Markdown attribute lists. Class and boolean attributes are assigned under the blockquote, and both key and value must be present for booleans as per Hugo's requirements. When processed by Hugo, the attributes are attached to the blockquote HTML tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/markdown-attributes.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n> This is a blockquote.\\n{class=\\\"foo bar\\\" hidden=hidden}\n```\n\n----------------------------------------\n\nTITLE: Displaying Main Page Title and BaseURL - Go HTML Template\nDESCRIPTION: This Go HTML template snippet defines the main index layout for a Hugo site, rendering the current page's Title and site BaseURL. The template uses Hugo's templating language (Go templates) with the .Title and site.BaseURL variables. It is placed in layouts/index.html to control the homepage output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__error_recovery_edit_content.txt#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\nTitle: {{ .Title }}|BaseURL: {{ site.BaseURL }}|\n```\n\n----------------------------------------\n\nTITLE: Rounding a Float using math.Round in Hugo Template\nDESCRIPTION: This snippet demonstrates the usage of the `math.Round` function within a Hugo template. It takes a floating-point number (1.5) as input and returns the nearest integer (2), rounding halves away from zero as per the function's definition.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Round.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Round 1.5 }} → 2\n```\n\n----------------------------------------\n\nTITLE: Terminating define statements in Hugo templates\nDESCRIPTION: Shows how to use the end statement to close a define block. The define statement creates a named template that can be called elsewhere in the templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/end.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  {{ print \"this is the main section\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Hugo Build Statistics (TOML)\nDESCRIPTION: Configures Hugo to generate the `hugo_stats.json` file during the build process by setting `build.buildStats.enable` to `true` in the Hugo configuration file (e.g., `hugo.toml` or `config/_default/hugo.toml`). This file is used by tools like PurgeCSS to identify used selectors.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/PostProcess.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[build.buildStats]\nenable = true\n```\n\n----------------------------------------\n\nTITLE: Configuring `hugo mod npm pack` Specific Options (Bash)\nDESCRIPTION: Lists the command-line options specific to the `hugo mod npm pack` command. These flags allow customization of parameters like the base URL (`--baseURL`), cache directory (`--cacheDir`), content directory (`--contentDir`), specifying themes (`--theme`), and rendering specific named segments (`--renderSegments`). The `--help` flag provides usage assistance.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_npm_pack.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n  -c, --contentDir string        filesystem path to content directory\n  -h, --help                     help for pack\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: Listing Hugo Server-Specific CLI Options - Shell\nDESCRIPTION: This shell-formatted code block enumerates all available server-specific flags for the 'hugo server' command, providing a reference for configuration. Each option is detailed with its flag, accepted value type, and description (including defaults where specified). Developers can use this as a guide to adjust server behavior such as enabling drafts, minification, hot reload, Git integration, directory paths, and HTTP settings. No parameters are directly supplied for execution—these are option references only; users pass them as command-line arguments to customize server runs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_server.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --appendPort               append port to baseURL (default true)\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --bind string              interface to which the server will bind (default \"127.0.0.1\")\n  -D, --buildDrafts              include content marked as draft\n  -E, --buildExpired             include expired content\n  -F, --buildFuture              include content with publishdate in the future\n      --cacheDir string          filesystem path to cache directory\n      --cleanDestinationDir      remove files from destination not found in static directories\n  -c, --contentDir string        filesystem path to content directory\n      --disableBrowserError      do not show build errors in the browser\n      --disableFastRender        enables full re-renders on changes\n      --disableKinds strings     disable different kind of pages (home, RSS etc.)\n      --disableLiveReload        watch without enabling live browser reload on rebuild\n      --enableGitInfo            add Git revision, date, author, and CODEOWNERS info to the pages\n      --forceSyncStatic          copy all files when static is changed.\n      --gc                       enable to run some cleanup tasks (remove unused cache files) after the build\n  -h, --help                     help for server\n      --ignoreCache              ignores the cache directory\n  -l, --layoutDir string         filesystem path to layout directory\n      --liveReloadPort int       port for live reloading (i.e. 443 in HTTPS proxy situations) (default -1)\n      --minify                   minify any supported output format (HTML, XML etc.)\n  -N, --navigateToChanged        navigate to changed content file on live browser reload\n      --noChmod                  don't sync permission mode of files\n      --noHTTPCache              prevent HTTP caching\n      --noTimes                  don't sync modification time of files\n  -O, --openBrowser              open the site in a browser after server startup\n      --panicOnWarning           panic on first WARNING log\n      --poll string              set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes\n  -p, --port int                 port on which the server will listen (default 1313)\n      --pprof                    enable the pprof server (port 8080)\n      --printI18nWarnings        print missing translations\n      --printMemoryUsage         print memory usage to screen at intervals\n      --printPathWarnings        print warnings on duplicate target paths etc.\n      --printUnusedTemplates     print warnings on unused templates.\n      --renderSegments strings   named segments to render (configured in the segments config)\n      --renderStaticToDisk       serve static files from disk and dynamic files from memory\n      --templateMetrics          display metrics about template executions\n      --templateMetricsHints     calculate some improvement hints when combined with --templateMetrics\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n      --tlsAuto                  generate and use locally-trusted certificates.\n      --tlsCertFile string       path to TLS certificate file\n      --tlsKeyFile string        path to TLS key file\n      --trace file               write trace to file (not useful in general)\n  -w, --watch                    watch filesystem for changes and recreate as needed (default true)\n```\n\n----------------------------------------\n\nTITLE: HTML Output of relref Shortcode Examples\nDESCRIPTION: The rendered HTML output of the relref shortcode examples, showing how Hugo generates different href attributes based on the provided parameters including language prefixes and output formats.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/relref.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/en/books/book-1/\">Link A</a>\n\n<a href=\"/en/books/book-1/\">Link B</a>\n\n<a href=\"/de/books/book-1/\">Link C</a>\n\n<a href=\"/de/books/book-1/index.json\">Link D</a>\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Image Paragraph Wrapping in Hugo Configuration (TOML)\nDESCRIPTION: Disables the default behavior in Hugo's Goldmark parser where standalone images are wrapped within <p> tags. This TOML snippet should be added to the site config file. Setting 'wrapStandAloneImageWithinParagraph' to false is necessary to apply attributes directly to images instead of their container paragraph.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/markdown-attributes.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.parser]\\nwrapStandAloneImageWithinParagraph = false # default is true\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Entries in Hugo Configuration\nDESCRIPTION: Example of defining menu entries in Hugo's configuration file. This defines three menu items for the 'main' menu with names, page references, and weights for ordering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/Limit.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[[menus.main]]\nname = 'Services'\npageRef = '/services'\nweight = 10\n\n[[menus.main]]\nname = 'About'\npageRef = '/about'\nweight = 20\n\n[[menus.main]]\nname = 'Contact'\npageRef = '/contact'\nweight = 30\n```\n\n----------------------------------------\n\nTITLE: Overriding Per-Page Output Formats in Hugo with TOML Front Matter\nDESCRIPTION: This TOML front matter snippet in a Markdown content file adds 'json' as an output format for that specific page. The 'outputs' field appends 'json' to the page's rendered output formats without removing the defaults (such as 'html'). Place this at the top of your Markdown file (e.g., content/example.md).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/outputs.md#2025-04-23_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'Example'\noutputs = ['json']\n```\n\n----------------------------------------\n\nTITLE: Using os.FileExists in Hugo Go Templates\nDESCRIPTION: Demonstrates the usage of the os.FileExists (or its alias fileExists) function within Hugo Go HTML templates. The examples show how to call the function with various paths (e.g., \"content\", \"content/news/article-1.md\", \"news/article-1.md\") corresponding to the provided directory structure and indicate the boolean return value (`true` if the file/directory exists, `false` otherwise). The function checks relative to the project root first, then the content directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/FileExists.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ fileExists \"content\" }} → true\n{{ fileExists \"content/news\" }} → true\n{{ fileExists \"content/news/article-1\" }} → false\n{{ fileExists \"content/news/article-1.md\" }} → true\n{{ fileExists \"news\" }} → true\n{{ fileExists \"news/article-1\" }} → false\n{{ fileExists \"news/article-1.md\" }} → true\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `hugo mod verify` (Text)\nDESCRIPTION: Lists and describes command-line flags inherited from parent Hugo commands, applicable to `hugo mod verify`. These global options allow configuration of aspects such as the build clock (`--clock`), configuration file/directory (`--config`, `--configDir`), output destination (`--destination`), build environment (`--environment`), logging level (`--logLevel`), source/themes directories (`--source`, `--themesDir`), and other general build behaviors like ignoring vendor paths (`--ignoreVendorPaths`) or rendering to memory (`--renderToMemory`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_verify.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Warning Output Format\nDESCRIPTION: Shows the console output format of a warnidf warning message, including instructions for suppressing the warning.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Warnidf.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWARN You should consider fixing this.\nYou can suppress this warning by adding the following to your site configuration:\nignoreLogs = ['warning-42']\n```\n\n----------------------------------------\n\nTITLE: Using Limit Method with Hugo Menus\nDESCRIPTION: Go HTML template code that demonstrates sorting menu entries by name and limiting to the first 2 entries. It iterates through the limited menu collection and renders list items with links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/Limit.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main.ByName.Limit 2 }}\n    <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Name in Hugo Templates\nDESCRIPTION: Retrieves the human-readable language name as defined in the site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Language.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Language.LanguageName }} → Deutsch\n```\n\n----------------------------------------\n\nTITLE: Creating a Dither Filter with Custom Options in Go HTML Template\nDESCRIPTION: This snippet shows how to create an image filter variable (`$filter`) by calling the `images.Dither` function and passing the previously defined options map (`$opts`). This filter can then be applied to an image resource.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Dither.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Dither $opts }}\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace in Hugo Templates - Go HTML Template\nDESCRIPTION: Shows how to use the strings.TrimSpace function within Hugo's Go HTML template syntax to remove leading and trailing Unicode whitespace characters (such as tabs, newlines, and spaces) from a string. This function requires the Hugo templating environment that supports Go's string functions. The input is a string with potential leading/trailing whitespace, and the output is the cleaned string. This example is intended for demonstration within Hugo pages and assumes the site is running Hugo version 0.136.3 or later, where this feature is available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/TrimSpace.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.TrimSpace \"\\n\\r\\t   foo   \\n\\r\\t\" }} \\u2192 foo\n```\n\n----------------------------------------\n\nTITLE: Creating Content Page with Front Matter Title (Markdown)\nDESCRIPTION: This Markdown file (`content/p1.md`) defines a single content page. It uses YAML front matter (indicated by `---`) to set the `title` variable to \"P1\". This title will be used by the `single.html` layout template when rendering the page. The actual content body of the page is empty.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/p1.md --\n---\ntitle: \"P1\"\n---\n```\n\n----------------------------------------\n\nTITLE: Running Hugo with Translation Warning Flag\nDESCRIPTION: Shell command that runs Hugo with the printI18nWarnings flag and filters output to show only missing translation warnings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nhugo --printI18nWarnings | grep i18n\ni18n|MISSING_TRANSLATION|en|wordCount\n```\n\n----------------------------------------\n\nTITLE: Creating a List Template with Page Sorting in Hugo\nDESCRIPTION: Hugo template for list pages that displays sorted page links using the ByWeight method, demonstrating how pages are ordered in listings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/page/next-and-prev.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByWeight }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Applying Image Filter Using images.Filter Function in Hugo\nDESCRIPTION: This snippet demonstrates how to apply an image filter using the `images.Filter` function. It retrieves an image resource, applies a filter (stored in the $filter variable), and renders an image tag with the filtered image's permalink and dimensions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/images/apply-image-filter.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with . | images.Filter $filter }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Applying Image Filter Using Resource.Filter Method in Hugo\nDESCRIPTION: This snippet shows how to apply an image filter using the `Filter` method directly on a Resource object. It retrieves an image resource, applies a filter (stored in the $filter variable), and renders an image tag with the filtered image's permalink and dimensions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/images/apply-image-filter.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Filter $filter }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of the Details Shortcode\nDESCRIPTION: The rendered HTML output that Hugo generates from the details shortcode, showing the details and summary elements with Markdown converted to HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/details.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<details>\n  <summary>See the details</summary>\n  <p>This is a <strong>bold</strong> word.</p>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Listing Command-Line Flags for hugo mod - Shell\nDESCRIPTION: Shows the available options and flags for the main 'hugo mod' command. No dependencies are needed to view this help output, although using the command itself requires a suitable Go version and possibly additional VCS clients like Git. Outputs descriptive flag information directly to the console. Limitations: The list reflects only the direct flags for 'hugo mod', not subcommands.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for mod\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI Tools\nDESCRIPTION: This command installs the Firebase command-line tools globally using npm.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Accessing RSS Feed Item Limit in Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet shows how to access the RSS feed item limit as set in the Hugo site configuration. The limit is an integer set under Services.RSS.Limit; -1 represents no limit. Use this in Go HTML templates to configure the maximum number of RSS items presented. No external dependencies are necessary except the Hugo templating engine.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/services.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Config.Services.RSS.Limit }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Calculated Duration in Plain Text\nDESCRIPTION: Shows the output rendered by the Hugo template after computing the duration for 24 hours in seconds. No programming framework or runtime dependencies needed as this is the result of template rendering. The output input is from the previous snippet, and the snippet illustrates the expected plain text output. There are no parameters or further customization.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/Duration.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThere are 86400 seconds in one day.\n```\n\n----------------------------------------\n\nTITLE: Example Rendered Breadcrumb Navigation Output\nDESCRIPTION: This text snippet displays the expected output generated by the Hugo breadcrumb template and styled by the provided CSS, based on the example file path `content/products/product-1/benefits/benefit-1.md`. It shows the hierarchical navigation path from the home page to the current page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/sections.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nHome » Products » Product 1 » Benefits » Benefit 1\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Hugo Options with `mod npm pack` (Bash)\nDESCRIPTION: Shows command-line options inherited from parent Hugo commands that can be used with `hugo mod npm pack`. These options control general Hugo behavior, such as setting the clock (`--clock`), specifying config files/directories (`--config`, `--configDir`), setting the output destination (`--destination`), defining the build environment (`--environment`), ignoring vendor paths (`--ignoreVendorPaths`), controlling log levels (`--logLevel`), managing build locks (`--noBuildLock`), enabling quiet mode (`--quiet`), rendering to memory (`--renderToMemory`), and specifying source/themes directories (`--source`, `--themesDir`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_npm_pack.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Calling a Hugo Shortcode with Named Arguments (Markdown)\nDESCRIPTION: Example of invoking a Hugo shortcode named 'myshortcode' within a Markdown file (e.g., `content/about.md`), passing two named arguments: `greeting` set to 'Hello' and `firstName` set to 'world'. This is the call structure corresponding to retrieving arguments by name.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Get.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{</* myshortcode greeting=\"Hello\" firstName=\"world\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Fenced Go HTML Template Code Block for Comparison - Go-HTML-Template in Text\nDESCRIPTION: This snippet displays how to format a fenced code block containing Go HTML Template code inside Markdown, specifying the language for proper syntax highlighting. The logic prints 'foo is bar' if $foo has the value 'bar'. Intended for inclusion as documentation examples, with language set to 'go-html-template' for code highlighting in markdown renderers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n```go-html-template\n{{ if eq $foo \"bar\" }}\n  {{ print \"foo is bar\" }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Headless Branch Bundle with Cascade Parameters in YAML\nDESCRIPTION: YAML front matter that sets cascade properties for a headless branch bundle in Hugo. It prevents the bundle's contents from being built, rendered, or published directly, but allows them to be included elsewhere via shortcodes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncascade:\n  build:\n    list: never\n    publishResources: false\n    render: never\n---\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Build in Quiet Mode (Shell)\nDESCRIPTION: This command runs the Hugo build process using the `--quiet` flag. This flag suppresses all log output except for critical errors, making the build process silent on standard output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhugo --quiet\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode: Displaying Default Output Format Configuration\nDESCRIPTION: This Hugo shortcode is used within the documentation content to dynamically display the default configuration settings for all built-in output formats. It likely renders a table or code block showing the default values for properties like `mediaType`, `baseName`, `isHTML`, etc.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{< code-toggle config=outputFormats />}}\n```\n\n----------------------------------------\n\nTITLE: Using IsAncestor with Site.GetPage in Hugo Templates\nDESCRIPTION: Demonstrates how to check if various pages are ancestors of the current page using the IsAncestor function with defensive coding through the with statement.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsAncestor.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/\" }}\n  {{ $.IsAncestor . }} → false\n{{ end }}\n\n{{ with .Site.GetPage \"/auctions\" }}\n  {{ $.IsAncestor . }} → false\n{{ end }}\n\n{{ with .Site.GetPage \"/auctions/2023-11\" }}\n  {{ $.IsAncestor . }} → true\n{{ end }}\n\n{{ with .Site.GetPage \"/auctions/2023-11/auction-2\" }}\n  {{ $.IsAncestor . }} → true\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using the Highlight Shortcode Syntax in Hugo\nDESCRIPTION: The basic syntax for using the highlight shortcode in Hugo. It requires the language identifier and optional styling parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/highlight.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{</* highlight LANG OPTIONS */>}}\nCODE\n{{</* /highlight */>}}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI/CD for Hugo Deployment\nDESCRIPTION: This YAML configuration sets up a GitLab CI/CD pipeline for building and deploying a Hugo site. It installs necessary dependencies, builds the Hugo site, and compresses the output for efficient serving.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-gitlab-pages.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  DART_SASS_VERSION: 1.85.0\n  GIT_DEPTH: 0\n  GIT_STRATEGY: clone\n  GIT_SUBMODULE_STRATEGY: recursive\n  HUGO_VERSION: 0.144.2\n  NODE_VERSION: 23.x\n  TZ: America/Los_Angeles\nimage:\n  name: golang:1.23.4-bookworm\n\npages:\n  script:\n    # Install brotli\n    - apt-get update\n    - apt-get install -y brotli\n    # Install Dart Sass\n    - curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\n    - tar -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\n    - cp -r dart-sass/ /usr/local/bin\n    - rm -rf dart-sass*\n    - export PATH=/usr/local/bin/dart-sass:$PATH\n    # Install Hugo\n    - curl -LJO https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb\n    - apt-get install -y ./hugo_extended_${HUGO_VERSION}_linux-amd64.deb\n    - rm hugo_extended_${HUGO_VERSION}_linux-amd64.deb\n    # Install Node.js\n    - curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | bash -\n    - apt-get install -y nodejs\n    # Install Node.js dependencies\n    - \"[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true\"\n    # Build\n    - hugo --gc --minify --baseURL ${CI_PAGES_URL}\n    # Compress\n    - find public -type f -regex '.*\\.(css|html|js|txt|xml)$' -exec gzip -f -k {} \\;\n    - find public -type f -regex '.*\\.(css|html|js|txt|xml)$' -exec brotli -f -k {} \\;\n  artifacts:\n    paths:\n      - public\n  rules:\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Hugo Content (Markdown)\nDESCRIPTION: This Markdown file (`p1.md`) represents a single piece of content within the `mysource` directory. It uses YAML front matter (`---`) to define metadata, specifically setting the `title` of the page to \"P1\". This content will be rendered using the `single.html` layout.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n-- mysource/content/p1.md --\n---\ntitle: \"P1\"\n---\n```\n\n----------------------------------------\n\nTITLE: Setting WebP Hint for Image Processing in Hugo\nDESCRIPTION: Shows how to set the WebP hint to 'picture' which optimizes the encoding parameters for indoor photographs like portraits.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_26\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image.Resize \"600x webp picture\" }}\n```\n\n----------------------------------------\n\nTITLE: Resizing an Image with Rotation in Hugo Go Templates\nDESCRIPTION: Demonstrates resizing an image resource (`$image`) while simultaneously rotating it 90 degrees counter-clockwise ('r90'). The dimensions ('200x') specified in the `.Resize` method refer to the desired dimensions *after* rotation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_20\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image = $image.Resize \"200x r90\" }}\n```\n\n----------------------------------------\n\nTITLE: Using the IsNode method in a Hugo template\nDESCRIPTION: This code snippet demonstrates how to use the IsNode method in a Go HTML template within Hugo. It returns a boolean value indicating whether the current page is a node.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsNode.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .IsNode }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Structure in Hugo\nDESCRIPTION: Illustrates a sample content structure where the 'films' section has the most pages, used to demonstrate the fallback behavior of MainSections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/MainSections.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── books/\n│   ├── book-1.md\n│   └── book-2.md\n├── films/\n│   ├── film-1.md\n│   ├── film-2.md\n│   └── film-3.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Assigning an Author Using Custom Taxonomy in Front Matter - YAML\nDESCRIPTION: This snippet shows how to assign an 'author' using Hugo front matter, matching the custom taxonomy defined earlier. Insert this YAML block into the front matter of your Markdown file. 'author' is still defined as an array, even for a single value, which follows Hugo's conventions and maintains compatibility with future expansions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/taxonomies.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Example\nauthor:\n  - Robert Smith\n---\n```\n\n----------------------------------------\n\nTITLE: Modifying Media Type Suffixes in Hugo Configuration (TOML)\nDESCRIPTION: This snippet demonstrates how to override the default file extensions associated with an existing media type in Hugo by modifying the \"suffixes\" array for the 'text/html' type. Requires access to the Hugo configuration file in TOML syntax. The section header specifies the media type to customize, and the list defines the order of suffixes, with the first being primary. Inputs: The new array of suffixes. Output: Updates how Hugo matches files to media types. Care must be taken to redefine any output formats utilizing this media type.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/media-types.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[mediaTypes.'text/html']\nsuffixes = ['htm','html']\n```\n\n----------------------------------------\n\nTITLE: Cascading Front Matter Parameters in Hugo\nDESCRIPTION: This TOML front matter snippet for a home page (`content/_index.md`) illustrates the basic cascade functionality in Hugo. It defines a `color` parameter with the value `red` under the `[cascade.params]` table, which will be inherited by all descendant pages unless overridden.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/front-matter.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Home'\n[cascade.params]\ncolor = 'red'\n```\n\n----------------------------------------\n\nTITLE: Humanizing Integers to Ordinals with Hugo Templates (Go HTML Template)\nDESCRIPTION: Illustrates how the 'humanize' function in Hugo templates converts integer inputs (or their string equivalents) to human-readable ordinals with appropriate English suffixes. Requires Hugo template support and the inflect.Humanize function. The function accepts an integer or numeric string and outputs the number with the corresponding ordinal (e.g., '52nd', '103rd').\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/inflect/Humanize.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ humanize \\\"52\\\" }} → 52nd\n{{ humanize 103 }} → 103rd\n```\n\n----------------------------------------\n\nTITLE: Defining Development-Specific Parameters (`params.toml`)\nDESCRIPTION: A TOML configuration file located in `config/development/` specifically for the 'development' environment. It defines the `myparam` parameter with the value \"dev\", which merges with or overrides any base configuration value when Hugo runs in development mode (e.g., via `hugo` or `hugo server` by default, or when `HUGO_ENVIRONMENT=development` is set).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_environment.txt#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n-- config/development/params.toml --\nmyparam = \"dev\"\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Module Initialization and Verification (Shell)\nDESCRIPTION: This shell script snippet first ensures the golden file `golden/go.mod.testsubmod` has Unix line endings using `dostounix`. It then initializes a new Hugo module named 'testsubmod' using `hugo mod init`. Finally, it compares the generated `go.mod` file with the golden file located at `$WORK/golden/go.mod.testsubmod` using `cmpenv` for verification.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_init.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndostounix golden/go.mod.testsubmod\n\nhugo mod init testsubmod\ncmpenv go.mod $WORK/golden/go.mod.testsubmod\n```\n\n----------------------------------------\n\nTITLE: Module Local Development Replace Directive\nDESCRIPTION: Replace directive for local module development in go.mod file\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-modules/use-modules.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nreplace github.com/bep/hugotestmods/mypartials => /Users/bep/hugotestmods/mypartials\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Metadata in YAML Front Matter\nDESCRIPTION: This YAML block configures metadata for a Hugo content page. It sets the page's title, description, categories (empty), keywords (empty), navigation weight (for ordering), and alternative URLs (aliases). This metadata is used by Hugo to render the page and build site navigation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Content management\ndescription: Hugo makes managing large static sites easy with support for archetypes, content types, menus, cross references, summaries, and more.\ncategories: []\nkeywords: []\nweight: 10\naliases: [/content/,/content/organization]\n---\n```\n\n----------------------------------------\n\nTITLE: Merging Maps in Order $m1, $m2, $m3\nDESCRIPTION: Demonstrates merging three maps in a specific order, with the rightmost map's values taking precedence for duplicate keys. Shows accessing the merged map's properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Merge.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $merged := merge $m1 $m2 $m3 }}\n\n{{ $merged.x }}   → baz\n{{ $merged.y }}   → wobble\n{{ $merged.z.a }} → huey\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Tag with Lang Method in Hugo Templates\nDESCRIPTION: Retrieves the language tag as defined by RFC 5646 using the Lang method on a Language object.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Language.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Language.Lang }} → de\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Attributes in Hugo\nDESCRIPTION: Configuration to enable Markdown attributes in Hugo's Goldmark parser. This allows heading elements to use custom attributes specified in Markdown.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/headings.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.parser.attribute]\ntitle = true\n```\n\n----------------------------------------\n\nTITLE: Defining Layout in Front Matter with Hugo\nDESCRIPTION: Example of setting the 'layout' field in Hugo front matter to specify which template should be used to render the page. In this case, the 'contact' layout is specified for a Contact page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Layout.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntitle = 'Contact'\nlayout = 'contact'\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Segments via CLI (Bash)\nDESCRIPTION: This command shows how to render multiple specific segments ('segment1' and 'segment2') simultaneously by providing a comma-separated list to the `--renderSegments` command-line flag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/segments.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhugo --renderSegments segment1,segment2\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Hugo Page Title from Filename using Hugo Template\nDESCRIPTION: This Hugo template expression generates a page title by taking the content file's base name (e.g., \\\"my-first-post\\\"), replacing hyphens with spaces (\\\"my first post\\\"), and then applying title case (\\\"My First Post\\\"). It utilizes the `.File.ContentBaseName` variable provided by Hugo and the built-in `replace` and `title` template functions. This is typically used within the `title` field of Hugo front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/archetypes/functions.md#2025-04-23_snippet_0\n\nLANGUAGE: Hugo Template\nCODE:\n```\n{{ replace .File.ContentBaseName \"-\" \" \" | title }}\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Command-Line Options for hugo mod init - Shell\nDESCRIPTION: This snippet shows the options inherited from parent Hugo commands that may affect the behavior of 'hugo mod init'. These flags allow deeper customization of the module initialization process, such as setting the environment, logging level, config file paths, and more. Input is via command-line flags; output is a module initialized per the specified configuration. Requires Hugo installed and correct permissions to read and write in the working directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_init.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Polling for All Resources in Hugo (Hugo Config Format)\nDESCRIPTION: This Hugo configuration snippet disables polling for all resources by creating a 'polls' section with 'disable = true' and setting extremely low polling intervals ('0s'). The 'includes' parameter uses '**' to ensure all resources are matched, and 'excludes' remains empty for inclusivity. This config is intended for Hugo's site config file, and lets the user precisely control which resources are polled for changes when running in watch/server mode. Key fields: 'disable' (boolean), 'high'/'low' (duration strings), 'includes'/'excludes' (glob patterns). No additional dependencies are required.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/http-cache.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n[[HTTPCache.polls]]\\ndisable = true\\nhigh = '0s'\\nlow = '0s'\\n[HTTPCache.polls.for]\\nincludes = ['**']\\nexcludes = []\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Body Background Style (CSS)\nDESCRIPTION: This CSS snippet, located at `assets/css/styles.css`, defines a basic style rule setting the background color of the HTML body element to black (`#000`). It demonstrates the inclusion and processing of asset files within the Hugo project structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings.txt#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n-- assets/css/styles.css --\nbody {\n  background-color: #000;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Date with Colon Offset in Hugo\nDESCRIPTION: Demonstrates Hugo parsing an ISO 8601 formatted date string ('2023-10-15T13:18:50-07:00') with an explicit time zone offset including a colon. Hugo correctly identifies the time zone as 'America/Los_Angeles' based on the '-07:00' offset.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/parsable-date-time-strings.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2023-10-15T13:18:50-07:00\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings Using Hugo add Function - Go HTML Template\nDESCRIPTION: Shows how the add function in Hugo can concatenate string values within a template. By supplying string arguments to the 'add' function, it concatenates them into a single string. Dependencies: Hugo framework; works with any number of string parameters. The function operates on string inputs, returning their concatenation. It outputs the result directly in the template context, with no explicit constraints beyond matching value types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Add.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ add \\\"hu\\\" \\\"go\\\" }} \\u2192 hugo\n```\n\n----------------------------------------\n\nTITLE: Defining OutputFormat Parameter for Hugo Page Resolution\nDESCRIPTION: Specifies the outputFormat parameter which determines the output format of the target page. It defaults to the current output format if not explicitly set.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/ref-and-relref-options.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\noutputFormat\n: (`string`) The output format of the target page. Default is the current output format. Optional.\n```\n\n----------------------------------------\n\nTITLE: Listing Expired Content via Hugo CLI - Shell\nDESCRIPTION: Demonstrates the usage of the 'hugo list expired' CLI command to display content items that have expired, i.e., whose expiration date is in the past. This snippet assumes Hugo is installed and available in the system's PATH. The optional [flags] and [args] allow for customization, such as specifying a configuration file or output path. The command outputs the list of expired content to the standard output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_expired.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo list expired [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Menus in Hugo\nDESCRIPTION: Example of how to configure nested menus in Hugo's configuration file. It sets up a main menu with a parent 'Products' item and two child items 'Product 1' and 'Product 2'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/HasChildren.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[menus.main]]\nname = 'Products'\npageRef = '/product'\nweight = 10\n\n[[menus.main]]\nname = 'Product 1'\npageRef = '/products/product-1'\nparent = 'Products'\nweight = 1\n\n[[menus.main]]\nname = 'Product 2'\npageRef = '/products/product-2'\nparent = 'Products'\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Help Option for 'hugo import' Command\nDESCRIPTION: Details the `-h` or `--help` flag which can be used with the `hugo import` command to display help information and available options for this specific subcommand.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_import.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for import\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Page Collection in Hugo Template\nDESCRIPTION: This snippet shows how to create an empty page collection by setting N to zero in the 'last' function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Last.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $emptyPageCollection := last 0 .Pages }}\n```\n\n----------------------------------------\n\nTITLE: Basic ByCount Usage in Hugo Templates\nDESCRIPTION: Demonstrates the basic usage of ByCount method to sort taxonomy terms by count.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/ByCount.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomyObject.ByCount }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Entry Identifiers in Hugo\nDESCRIPTION: A YAML configuration example showing how to define menu entries with explicit identifier properties. This defines two menu entries (About and Contact) with specific identifiers, names, page references, and weights.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Identifier.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[[menus.main]]\nidentifier = 'about'\nname = 'About'\npageRef = '/about'\nweight = 10\n\n[[menus.main]]\nidentifier = 'contact'\nname = 'Contact'\npageRef = '/contact'\nweight = 20\n```\n\n----------------------------------------\n\nTITLE: Accessing Layout Value in Hugo Templates\nDESCRIPTION: Shows how to access the layout value within a Hugo template using the .Layout method. This returns the value of the 'layout' field from the front matter, or an empty string if not defined.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Layout.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Layout }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Page Metadata with YAML Front Matter\nDESCRIPTION: This YAML snippet defines standard front matter variables for a Hugo content file. It sets the main `title` ('Pages methods'), the `linkTitle` ('Pages') used in menus, a brief `description`, empty arrays for `categories` and `keywords` (placeholders for taxonomy), and an `aliases` list for handling redirects from old URLs (e.g., from '/variables/pages'). These key-value pairs provide metadata used by Hugo during site generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Pages methods\nlinkTitle: Pages\ndescription: Use these methods with a collection of Page objects.\ncategories: []\nkeywords: []\naliases: [/variables/pages]\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Title in Hugo Default Single Layout (HTML/Go Template)\nDESCRIPTION: This HTML file (`layouts/_default/single.html`) provides the default template for rendering single content pages (like Markdown files). It uses the Hugo variable `{{ .Title }}` to display the title defined in the front matter of the respective content file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configprod.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/_default/single.html --\nTitle: {{ .Title }}\n```\n\n----------------------------------------\n\nTITLE: Deleting Keys in Hugo Scratch Pad\nDESCRIPTION: Demonstrates how to remove a key from the scratch pad using the Delete method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/NewScratch.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := newScratch }}\n{{ $s.Set \"greeting\" \"Hello\" }}\n{{ $s.Delete \"greeting\" }}\n```\n\n----------------------------------------\n\nTITLE: Parsing a Date String with an Explicit Time Zone using time.AsTime (Go Templates)\nDESCRIPTION: Shows how to parse a date string with the Hugo 'time.AsTime' function and specify the time zone directly as a second argument within a Go HTML template. This approach allows overriding the default or configured time zone and ensures the returned time.Time corresponds to the specified time zone (e.g., 'America/Los_Angeles'). The function expects a parsable date string and a valid IANA time zone name; unrecognized time zones may result in errors.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/AsTime.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ time.AsTime \"15 Oct 2023\" \"America/Los_Angeles\" }}\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Parent Command Options for hugo convert toTOML in Shell\nDESCRIPTION: Lists the command-line options inherited from the parent `hugo` command that are applicable to the `hugo convert toTOML` subcommand. These options control aspects like configuration file paths, output directories, logging levels, build environment, and theme locations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert_toTOML.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n  -o, --output string              filesystem path to write files to\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n      --unsafe                     enable less safe operations, please backup first\n```\n\n----------------------------------------\n\nTITLE: Defining Array Front Matter in Emacs Org Mode (Single-line)\nDESCRIPTION: This snippet illustrates an alternative syntax for defining array front matter elements in an Emacs Org Mode file (`content/example.org`). Instead of repeating the keyword, multiple values (`red`, `blue`) for the `TAGS` array are listed on a single line following the keyword suffixed with `[]` (`#+TAGS[]`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/front-matter.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n#+TAGS[]: red blue\n```\n\n----------------------------------------\n\nTITLE: Listing Flags for Hugo Mod Clean Command (Shell)\nDESCRIPTION: This snippet lists all available flags for the 'hugo mod clean' command, specifying user-configurable options. No dependencies are required beyond a functional Hugo installation. Most flags adjust paths, match patterns for modules, or control the scope of cleaning. Users should provide appropriate flag values according to their project structure. Each option has a specific role, such as targeting all cache or filtering by patterns. Output depends on the flag used; refer to Hugo documentation for details.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_clean.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --all                      clean entire module cache\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n  -c, --contentDir string        filesystem path to content directory\n  -h, --help                     help for clean\n      --pattern string           pattern matching module paths to clean (all if not set), e.g. \"**hugo*\"\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: Hugo Site Directory Structure After Build\nDESCRIPTION: This shows the directory structure after building the site, including the generated 'public' and 'resources' directories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/directory-structure.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nmy-site/\n├── archetypes/\n│   └── default.md\n├── assets/\n├── config/       \n│   └── _default/\n│       └── hugo.toml\n├── content/\n├── data/\n├── i18n/\n├── layouts/\n├── public/       <-- created when you build your site\n├── resources/    <-- created when you build your site\n├── static/\n└── themes/\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Project Modules and Theme in hugo.toml\nDESCRIPTION: This TOML configuration file (`hugo.toml`) sets the Hugo project title, specifies `my-theme` as the active theme, and defines module imports under the `[module.imports]` array. It imports `github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml` (but disables it) and `github.com/gohugoio/hugo-mod-integrationtests/withhugotoml`. Hugo uses this file to manage project settings and dependencies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_get_u.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Modules Update Test\"\ntheme = [\"my-theme\"]\n[module]\n[[module.imports]]\npath=\"github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml\"\ndisable = true\n[[module.imports]]\npath=\"github.com/gohugoio/hugo-mod-integrationtests/withhugotoml\"\n```\n\n----------------------------------------\n\nTITLE: Site Configuration Example with Hugo Code-Toggle Shortcode - Text\nDESCRIPTION: This snippet presents a Hugo site configuration example using the code-toggle shortcode for styled documentation display. The content block defines 'baseURL', 'languageCode', and 'title' in TOML format. Dependencies include the defined 'code-toggle' shortcode within Hugo documentation; fields are used in config.toml for site setup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n{{</* code-toggle file=hugo */>}}\nbaseURL = 'https://example.org/'\nlanguageCode = 'en-US'\ntitle = 'My Site'\n{{</* /code-toggle */>}}\n```\n\n----------------------------------------\n\nTITLE: Loading Mermaid JavaScript Library in Hugo Base Template\nDESCRIPTION: Shows the Go HTML template snippet to conditionally include the Mermaid JavaScript library in the site's base layout (`layouts/_default/baseof.html`). It checks the `hasMermaid` flag set by the render hook in the page store (`.Store.Get`). If true, it injects a script tag to load and initialize the Mermaid library from a CDN.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if .Store.Get \"hasMermaid\" }}\n  <script type=\"module\">\n    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';\n    mermaid.initialize({ startOnLoad: true });\n  </script>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Site baseURL in Hugo (TOML)\nDESCRIPTION: Sets the baseURL for the Hugo site in the TOML configuration file. The baseURL determines the root address for constructing absolute URLs in generated site pages. This parameter is required to ensure correct linking throughout the site and must be set to the site's public-facing URL. By editing this, users can change where all absolute URLs in the rendered site point.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Home.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = 'https://example.org/docs/'\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Archetype Front Matter in YAML\nDESCRIPTION: YAML front matter block that defines metadata for a Hugo documentation page about archetypes. Includes title and details path references.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/archetype.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: archetype\ndetails: /content-management/archetypes\n---\n```\n\n----------------------------------------\n\nTITLE: Inserting QR Codes with Hugo Shortcode Syntax - Inline Content - Text\nDESCRIPTION: This example shows the qr shortcode with inline content, allowing the QR code to encode larger or dynamically generated text. Text to encode is placed between the opening and closing tags of the shortcode. This supports multiline and more complex content, facilitating custom QR generation within content files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/QR.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n{{</* qr */>}}\\nhttps://gohugo.io\\n{{</* /qr */>}}\n```\n\n----------------------------------------\n\nTITLE: Filtering Hugo Menu Entries by Weight in Go Template\nDESCRIPTION: This Go HTML template snippet demonstrates how to filter menu entries based on their assigned weight. It iterates through the 'main' menu defined in the site's configuration or content files (`.Site.Menus.main`). For each menu entry, it checks if its `.Weight` property is less than or equal to 42 (`le .Weight 42`). If the condition is true, it renders a list item (`<li>`) containing a link (`<a>`) with the menu entry's URL (`.URL`) and Name (`.Name`). This requires a Hugo project context with a 'main' menu defined.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Weight.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    {{ if le .Weight 42 }}\n      <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n    {{ end }}\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to forked repository\nDESCRIPTION: This command pushes local branch changes to your forked repository and sets up tracking between local and remote branches.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push --set-upstream fork iss1234\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Build and Verifying Output (Shell)\nDESCRIPTION: Copies two GIF image files from a source directory ($SOURCE) into a Hugo page bundle directory ('content/posts/post-1/'), runs the 'hugo' build command, and then uses 'stdout' assertions (likely within a test framework) to verify that Hugo correctly identifies 10 pages and 2 non-page files during the build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats2.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp $SOURCE/resources/testdata/pix.gif content/posts/post-1/p1.gif\ncp $SOURCE/resources/testdata/pix.gif content/posts/post-1/p2.gif\n\nhugo\n\nstdout 'Pages.*/| 10\\s'\nstdout 'Non-page files.*/| 2\\s'\n```\n\n----------------------------------------\n\nTITLE: Accessing the Page Slug in Hugo Templates (Go HTML Template)\nDESCRIPTION: This snippet demonstrates how to access the defined slug value within a Hugo Go HTML template. Using the `.Slug` variable within the page context retrieves the value assigned in the front matter ('sushi' in this case).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Slug.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Slug }} → sushi\n```\n\n----------------------------------------\n\nTITLE: Using range with else Statement in Hugo Templates\nDESCRIPTION: Demonstrates how to use the range function with an else statement that executes when the collection is empty.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"foo\" \"bar\" \"baz\" }}\n{{ range $s }}\n  <p>{{ . }}</p>\n{{ else }}\n  <p>The collection is empty</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring `hugo mod tidy` Specific Options\nDESCRIPTION: Lists command-line flags specific to the `hugo mod tidy` command. These options allow customization of its behavior, such as setting the base URL (`-b`, `--baseURL`), specifying cache (`--cacheDir`) and content (`-c`, `--contentDir`) directories, choosing themes (`-t`, `--theme`), rendering specific segments (`--renderSegments`), or displaying help information (`-h`, `--help`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_tidy.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n  -c, --contentDir string        filesystem path to content directory\n  -h, --help                     help for tidy\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Reference Link Error Handling in TOML Configuration\nDESCRIPTION: This snippet shows how to modify Hugo's behavior when it encounters unresolvable reference links. It changes errors to warnings and specifies a fallback URL to use when a reference path cannot be resolved.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/ref-and-relref-error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nrefLinksErrorLevel = 'warning'\nrefLinksNotFoundURL = '/some/other/url'\n```\n\n----------------------------------------\n\nTITLE: Defining English Menu Entries in Hugo TOML (menus.en.toml)\nDESCRIPTION: Example content for a language-specific menu configuration file (`config/_default/menus.en.toml`). It defines entries for the `main` menu intended for the English language version of the site, using TOML array of tables syntax (`[[main]]`) to specify `name`, `pageRef`, and `weight` for each menu item.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/multilingual.md#2025-04-23_snippet_14\n\nLANGUAGE: hugo\nCODE:\n```\n[[main]]\nname = 'Products'\npageRef = '/products'\nweight = 10\n[[main]]\nname = 'Services'\npageRef = '/services'\nweight = 20\n```\n\n----------------------------------------\n\nTITLE: HTML Output Without Safe Declaration - HTML\nDESCRIPTION: This snippet shows the rendered HTML output when an attribute is not declared as safe in Hugo. The HTML entity for \"+\" (&#43;) is visible in the datetime attribute, which can occur if the attribute string isn't properly marked as trusted. There are no dependencies or parameters, as this is the static output after template rendering. The output is the HTML visualization of the previous Go HTML template snippet.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/HTMLAttr.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<time datetime=\"2024-05-26T07:19:55&#43;02:00\">26 May 2024</time>\n```\n\n----------------------------------------\n\nTITLE: Defining Homepage Layout Template (HTML/Go Template)\nDESCRIPTION: This snippet, representing `layouts/index.html`, defines a minimal HTML template for the site's homepage. It simply outputs the text \"Home.\" and relies on Hugo's templating engine.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings.txt#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/index.html --\nHome.\n```\n\n----------------------------------------\n\nTITLE: Setting Expiry Date in Hugo Front Matter\nDESCRIPTION: Example of how to set the expiryDate parameter in a Hugo content file's front matter. This date determines when the page should be considered expired.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/ExpiryDate.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Article 1'\nexpiryDate = 2024-10-19T00:32:13-07:00\n```\n\n----------------------------------------\n\nTITLE: Example CODEOWNERS File Content\nDESCRIPTION: Sample content of a CODEOWNERS file showing how to specify owners for different parts of the project.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/CodeOwners.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* @jdoe\n/content/books/ @tjones\n/content/films/ @mrichards @rsmith\n```\n\n----------------------------------------\n\nTITLE: Go's Reference Time Format String\nDESCRIPTION: The standard reference time used in Go for formatting time values. This is the base value used to create custom time formats.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/time-layout-string.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMon Jan 2 15:04:05 MST 2006\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Server Command in Shell\nDESCRIPTION: This shell script tests the `hugo server` command. It starts the server in the background rendering to memory (`--renderToMemory`) and allowing Hugo to pick a port. It then waits for the server to be ready (`waitServer`), performs several HTTP GET requests (`httpget`) to check the rendered content (title, server port, environment parameter, environment name, server status flag), verifies the custom 404 page, checks for the LiveReload script, confirms that no files are written to the `public` directory by default, and finally stops the server (`stopServer`). It also asserts that no errors are printed to stderr.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server.txt#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Test the hugo server command.\n\n# We run these tests in parallel so let Hugo decide which port to use.\nhugo server --renderToMemory --gc &\n\nwaitServer\n\nhttpget $HUGOTEST_BASEURL_0 'Title: Hugo Server Test' $HUGOTEST_BASEURL_0 'ServerPort: \\d{4,5}' 'myenv: thedevelopment' 'livereload\\.js' 'Env: development' 'IsServer: true'\nhttpget ${HUGOTEST_BASEURL_0}doesnotexist 'custom 404'\nhttpget ${HUGOTEST_BASEURL_0}livereload.js 'function'\n\n# By default, the server renders to memory.\n! exists public/index.html\n\nstopServer\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Defining Menus in Hugo Configuration\nDESCRIPTION: This snippet demonstrates how to define multiple menus (main and footer) in Hugo's configuration file. It shows how to set menu items with names, page references, and weights.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Menus.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[menus.main]]\nname = 'Home'\npageRef = '/'\nweight = 10\n\n[[menus.main]]\nname = 'Books'\npageRef = '/books'\nweight = 20\n\n[[menus.main]]\nname = 'Films'\npageRef = '/films'\nweight = 30\n\n[[menus.footer]]\nname = 'Legal'\npageRef = '/legal'\nweight = 10\n\n[[menus.footer]]\nname = 'Privacy'\npageRef = '/privacy'\nweight = 20\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing amplify.yml to GitHub\nDESCRIPTION: Git commands to add, commit, and push the newly created amplify.yml configuration file to your GitHub repository for AWS Amplify deployment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-aws-amplify/index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit add -A\ngit commit -m \"Create amplify.yml\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Basic Hugo HTML Layout Template\nDESCRIPTION: This HTML snippet represents a minimal layout template for Hugo. It includes the basic structure of an HTML document with a simple body content. This template would be used to generate the site's index page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_disablelivereload__config.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n</head>\n<body>\nHome.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Specifying Expected Vendored Modules (Text)\nDESCRIPTION: This `golden/vendor.txt` file serves as the expected output or 'golden file' for the `_vendor/modules.txt` generated by `hugo mod vendor`. It lists the exact module paths and versions (formatted as comments) that are expected to be vendored according to the `hugo.toml` and `go.mod` configurations. The test script uses `cmp` to compare the actual `_vendor/modules.txt` against this file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_vendor.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-- golden/vendor.txt --\n# github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml v1.0.0\n# github.com/gohugoio/hugo-mod-integrationtests/withhugotoml v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Plotly Shortcode Content in Markdown\nDESCRIPTION: Example of using a plotly shortcode in a Markdown content file to render a bar chart with data for three animals. The shortcode contains JSON configuration data for the Plotly chart.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/HasShortcode.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{</* plotly */>}}\n{\n  \"data\": [\n    {\n      \"x\": [\"giraffes\", \"orangutans\", \"monkeys\"],\n      \"y\": [20, 14, 23],\n      \"type\": \"bar\"\n    }\n  ],\n}\n{{</* /plotly */>}}\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Module Commands (Shell)\nDESCRIPTION: This shell script executes a series of `hugo mod` commands to test Hugo's module system functionality. It uses commands like `dostounix` for line ending normalization, `hugo mod` subcommands (`graph`, `verify`, `get`, `vendor`, `clean`, `init`), `cd` to change directories, and assertions (`stdout`, `stderr`, `cmp`, `cmpenv`) likely part of a testing framework to validate command output and file states against expected results defined in golden files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test the hugo mod commands.\n\ndostounix golden/vendor.txt\ndostounix golden/go.mod.testsubmod\n\nhugo mod graph\nstdout 'empty-hugo'\nhugo mod verify\n! stderr .\nhugo mod get -u\n! stderr .\nhugo mod get -u ./...\n! stderr .\nhugo mod vendor\n! stderr .\ncmp _vendor/modules.txt golden/vendor.txt\nhugo mod clean\n! stderr .\nstdout 'hugo: removed 1 dirs in module cache for \"github.com/bep/empty-hugo-module\"'\nhugo mod clean --all\n# Currently this is 299 on MacOS and 301 on Linux.\nstdout 'Deleted (2|3)\\d{2} files from module cache\\.'\ncd submod\nhugo mod init testsubmod\ncmpenv go.mod $WORK/golden/go.mod.testsubmod\nhugo mod get -h\nstdout 'hugo mod get \\[flags\\] \\[args\\]'\nhugo mod get --help\nstdout 'hugo mod get \\[flags\\] \\[args\\]'\n```\n\n----------------------------------------\n\nTITLE: Setting Hugo Log Level to Error via Command Line (Shell)\nDESCRIPTION: Demonstrates how to run the Hugo command with the `--logLevel` flag set to `error`. This configuration restricts console output to only display error messages encountered during the site build process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/logging.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo --logLevel error\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Site Configuration - TOML\nDESCRIPTION: These TOML snippets define different states of the Hugo site configuration file (hugo.toml), used dynamically by the test. The first specifies the initial site title and baseURL. The second updates the title. The third adds a [languages] section for multi-language support (English and Nynorsk). These configurations are swapped in by the Bash script to trigger Hugo server reloads and test configuration update handling.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_config.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Hugo Server Test\"\nbaseURL = \"https://example.org/\"\n```\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Hugo New Server Test\"\nbaseURL = \"https://example.org/\"\n```\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Hugo New Server Test\"\nbaseURL = \"https://example.org/\"\n[languages]\n[languages.en]\nlanguageName = \"English\"\nweight = 1\n[languages.nn]\nlanguageName = \"Nynorsk\"\ntitle = \"Hugo Nynorsk Server Test\"\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Using MainSections Fallback in Hugo Templates\nDESCRIPTION: Demonstrates how MainSections returns the top-level section with the most pages when not explicitly configured.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/MainSections.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.MainSections }} → [films]\n```\n\n----------------------------------------\n\nTITLE: Implementing Warning Callout in Hugo Docs\nDESCRIPTION: Example of using the warning callout type to highlight urgent information requiring immediate user attention.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n> [!warning]\\n> Urgent info that needs immediate user attention to avoid problems.\n```\n\n----------------------------------------\n\nTITLE: Formatting Expiry Date in Hugo Templates\nDESCRIPTION: Example of how to access and format a page's expiry date in a Hugo template using the ExpiryDate method with time.Format function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/ExpiryDate.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .ExpiryDate | time.Format \":date_medium\" }} → Oct 19, 2024\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Headers to CSV Requests in Hugo\nDESCRIPTION: Demonstrates how to add authorization headers to remote CSV requests using an options map.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"Authorization\" \"Bearer abcd\" }}\n{{ $data := getCSV \",\" \"https://example.org/pets.csv\" $opts }}\n```\n\n----------------------------------------\n\nTITLE: Console Output for Erroridf Function\nDESCRIPTION: Shows the console output produced by the erroridf function, including the error message and instructions for suppressing it.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Erroridf.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nERROR You should consider fixing this.\nYou can suppress this error by adding the following to your site configuration:\nignoreLogs = ['error-42']\n```\n\n----------------------------------------\n\nTITLE: Querying Hugo Cache Directory Setting using Shell\nDESCRIPTION: This shell command uses the `hugo config` command to output the current Hugo configuration and pipes it to `grep` to filter and display the line containing the `cachedir` setting. It helps identify the active cache directory path Hugo is using. Requires Hugo to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/all.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo config | grep cachedir\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Based on Hugo Environment\nDESCRIPTION: This JavaScript configuration for PostCSS demonstrates how to conditionally apply plugins based on the current Hugo environment. It uses Autoprefixer only when not in development mode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/PostCSS.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst autoprefixer = require('autoprefixer');\nmodule.exports = {\n  plugins: [\n    process.env.HUGO_ENVIRONMENT !== 'development' ? autoprefixer : null\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Taxonomy Listing Template Showing Related Content and Term Count - Go HTML Template\nDESCRIPTION: Defines a Hugo taxonomy template (main block) that, for each term (sorted by page count), lists the term as a link, its page count, and all content pages associated with that term. Each related page is rendered as a list item with a permalink. Requires Hugo's .Data.Terms.ByCount and .WeightedPages fields.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ define \"main\" }}\n  <h1>{{ .Title }}</h1>\n  {{ .Content }}\n  {{ range .Data.Terms.ByCount }}\n    <h2><a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a> ({{ .Count }})</h2>\n    <ul>\n      {{ range .WeightedPages }}\n        <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n      {{ end }}\n    </ul>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Starting and Monitoring Hugo Server - Shell\nDESCRIPTION: This snippet shows how to start the Hugo server in memory mode, wait for it to initialize, stop the server, verify standard error, and check that the 'hugo_stats.json' file exists. Requires Hugo CLI installed and 'hugo_stats.json' present or to be generated as a build artifact. Used for test automation and server health validation during static site builds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__watch_hugo_stats.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo server  --renderToMemory &\n\nwaitServer\nstopServer\n! stderr .\n\nexists hugo_stats.json\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Documentation Page Frontmatter in YAML\nDESCRIPTION: YAML frontmatter that configures the metadata for a Hugo documentation page about Hugo itself. It sets the page title, description, navigation properties, and aliases for URL redirection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/about/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: About Hugo\nlinkTitle: About\ndescription: Learn about Hugo and its features, privacy protections, and security model.\ncategories: []\nkeywords: []\nweight: 10\naliases: [/about-hugo/,/docs/]\n---\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output with PageRef Fallback\nDESCRIPTION: The HTML output generated when using the PageRef fallback approach, showing how non-matching pages now use their pageRef property in the href attribute.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/PageRef.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/products/\">Products</a></li>\n  <li><a href=\"/services\">Services</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site Settings in TOML\nDESCRIPTION: This TOML configuration sets up basic Hugo site settings, including the base URL and disabled content types. It's used to define the structure and behavior of the Hugo site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/warnf_stderr.txt#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"page\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\n```\n\n----------------------------------------\n\nTITLE: First Level Key Removal in Map Sorting with Hugo\nDESCRIPTION: Explains how Hugo removes first-level keys when sorting a map, showing the original map structure and the result after sorting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Sort.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"felix\": {\n    \"breed\": \"malicious\",\n    \"type\": \"cat\"\n  },\n  \"spot\": {\n    \"breed\": \"boxer\",\n    \"type\": \"dog\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"breed\": \"malicious\",\n    \"type\": \"cat\"\n  },\n  {\n    \"breed\": \"boxer\",\n    \"type\": \"dog\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Green's Function Spectral Proof\nDESCRIPTION: Uses spectral theory of the Dirichlet Laplacian and its Green's function to derive the Basel sum through operator traces.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_23\n\nLANGUAGE: latex\nCODE:\n```\nG(x,y) = \\min(x,y) - xy = \\frac{1}{2}\\left( -|x-y| + x(1-y) + y(1-x) \\right)\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Render Hook Implementation\nDESCRIPTION: A language-specific render hook for Mermaid diagrams that renders the code block as a Mermaid diagram and sets a page-level flag to include the Mermaid JavaScript library.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/code-blocks.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre class=\"mermaid\">\n  {{ .Inner | htmlEscape | safeHTML }}\n</pre>\n{{ .Page.Store.Set \"hasMermaid\" true }}\n```\n\n----------------------------------------\n\nTITLE: Example Text File Content\nDESCRIPTION: Shows the content of a sample text file (`assets/quotations/kipling.txt`) used to demonstrate retrieving resource content in Hugo. This file is referenced in subsequent Hugo template examples.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Content.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHe travels the fastest who travels alone.\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Directly Rendered String\nDESCRIPTION: This snippet shows the resulting HTML output when the previous Go Hugo Template snippet is rendered. The HTML characters `<` and `>` are escaped into `&lt;` and `&gt;` respectively, preventing the browser from interpreting the `<em>` tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/HTML.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n&lt;em&gt;emphasized&lt;/em&gt;\n```\n\n----------------------------------------\n\nTITLE: Creating Sigmoid Image Filter in Hugo Go HTML Template\nDESCRIPTION: This Go HTML Template snippet demonstrates how to create an image filter using the images.Sigmoid function in Hugo. It accepts two parameters: MIDPOINT (representing the midpoint of contrast, e.g., 0.6 in the range [0, 1]) and FACTOR (controlling the degree of contrast, e.g., -4 in the typical range [-10, 10]). The resulting filter can be applied to images for non-linear contrast adjustment. No external dependencies are required beyond a Hugo site with image processing enabled. The output is a filter object usable with Hugo image functions; inputs must be valid numeric values within the specified ranges.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Sigmoid.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Sigmoid 0.6 -4 }}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Command-Line Options for hugo mod init - Shell\nDESCRIPTION: This snippet enumerates the available options that can be passed to the 'hugo mod init' command. Options allow customization of module initialization, such as specifying base URLs, cache directories, themes, and more. Inputs are supplied as flags; outputs are conditional behaviors during module setup, affecting directories, output, themes, and verbosity. Dependencies include a valid Hugo installation and, optionally, writable filesystem paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_init.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n  -c, --contentDir string        filesystem path to content directory\n  -h, --help                     help for init\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Section Menu Creation in Hugo Config (TOML)\nDESCRIPTION: This TOML configuration enables the `sectionPagesMenu` feature in Hugo, automatically creating a menu named 'main' populated with entries for each top-level content section. Place this line in your site's configuration file (e.g., `hugo.toml`) to activate the automatic menu generation based on your site structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/menus.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsectionPagesMenu = \"main\"\n```\n\n----------------------------------------\n\nTITLE: Applying Image Filters using Filter Method in Hugo Go Templates\nDESCRIPTION: Applies multiple image filters (Gaussian Blur and Pixelate) to an image resource (`$image`) using the `.Filter` method. The filter functions (`images.GaussianBlur`, `images.Pixelate`) are passed as arguments.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_13\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image := $image.Filter (images.GaussianBlur 6) (images.Pixelate 8) }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Hugo Mod Get Command in Shell\nDESCRIPTION: This snippet executes the `hugo mod get` command with the `-h` flag to display its help text. It then asserts that the standard output contains the specific phrase 'Resolves dependencies in your current Hugo project', confirming the help message is correctly displayed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__errors.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Testing error output.\n\n# The hugo mod get command handles flags a little special, but the -h flag should print the help.\nhugo mod get -h\nstdout 'Resolves dependencies in your current Hugo project'\n```\n\n----------------------------------------\n\nTITLE: Defining Single Page Layout Displaying Page Title (Go Template)\nDESCRIPTION: This Go template (`layouts/_default/single.html`) provides the default layout for single content pages. It simply outputs the text \"Title: \" followed by the value of the page's `.Title` variable, which is typically fetched from the content file's front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo.txt#2025-04-23_snippet_3\n\nLANGUAGE: go-template\nCODE:\n```\n-- layouts/_default/single.html --\nTitle: {{ .Title }}\n```\n\n----------------------------------------\n\nTITLE: Defining Content for a Standard Static File (f2.txt)\nDESCRIPTION: This file, located at `static/files/f2.txt`, contains the plain text content 'f2'. As it resides within the standard `static` directory (which is also explicitly mounted in `hugo.toml`), Hugo will copy it directly to the corresponding path in the `public` directory during the build (i.e., `public/files/f2.txt`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__static_composite.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nf2\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings in Hugo Templates using strings.Split\nDESCRIPTION: This Go HTML Template snippet showcases the usage of the `strings.Split` function. The first example splits the string \"tag1,tag2,tag3\" using \",\" as the delimiter, resulting in a slice `[\"tag1\", \"tag2\", \"tag3\"]`. The second example splits \"abc\" using an empty string \"\" as the delimiter, resulting in a slice of individual characters `[\"a\", \"b\", \"c\"]`. This function requires the string to be split and the delimiter string as input.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/Split.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ split \"tag1,tag2,tag3\" \",\" }} → [\"tag1\", \"tag2\", \"tag3\"]\n{{ split \"abc\" \"\" }} → [\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Verifying Hugo Build Output (Shell)\nDESCRIPTION: These commands verify the output of the preceding Hugo build. The `stdout` checks likely assert the number of pages built and the presence of timing information in the build log. The `grep` commands check the generated `index.html` file for the correct base URL and build time, the correct environment and merged parameters ('foo' from `--config`, 'bar' from `--configDir`), and evidence of minification (lack of whitespace after `<body>`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstdout 'Pages.*|1'\nstdout 'Total in'\ngrep 'Home: http://example.com/, Time: 2021-11-06' newpublic/index.html\ngrep 'Environment: staging, foo: bar, bar: baz' newpublic/index.html\n# Verify that it's minified.\ngrep '<body>Home' newpublic/index.html\n```\n\n----------------------------------------\n\nTITLE: Using strings.ContainsNonSpace in Hugo Go Templates\nDESCRIPTION: This snippet demonstrates the `strings.ContainsNonSpace` function within a Hugo Go template. It shows how the function evaluates strings containing only whitespace ('\\n', ' ') as `false`, and a string containing a non-whitespace character ('\\n abc') as `true`. The function relies on the Unicode definition of space characters, including `\\t`, `\\n`, `\\v`, `\\f`, `\\r`, and characters in the Unicode Space Separator category.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/ContainsNonSpace.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.ContainsNonSpace \"\\n\" }} → false\n{{ strings.ContainsNonSpace \" \" }} → false\n{{ strings.ContainsNonSpace \"\\n abc\" }} → true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Plotly Shortcode in Hugo\nDESCRIPTION: A shortcode implementation for rendering Plotly charts in Hugo. It creates a unique ID for the chart container and uses JavaScript to initialize the Plotly chart with the data provided in the shortcode content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/HasShortcode.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $id := printf \"plotly-%02d\" .Ordinal }}\n<div id=\"{{ $id }}\"></div>\n<script>\n  Plotly.newPlot(document.getElementById({{ $id }}), {{ .Inner | safeJS }});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Output and Behavior - TOML\nDESCRIPTION: This snippet provides a hugo.toml configuration file that sets the baseURL to 'http://example.org/', disables certain output kinds (RSS, sitemap, robotsTXT, 404, taxonomy, term), and specifies the publish directory as 'newpublic'. It should be placed in the root of the Hugo project as 'hugo.toml'. The parameters control what types of output are generated and where they are stored, impacting what files hugo produces.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__publishdir_in_config.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\npublishDir = \"newpublic\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Shortcode Inner Content Without Deindent - Hugo Shortcode Template - Go HTML Template\nDESCRIPTION: Template snippet for a Hugo 'gallery' shortcode using the Inner method, which returns the raw inner content (potentially with leading indentation). The template pipes the content through strings.TrimSpace and .Page.RenderString, which together trim whitespace and render the Markdown content. When the input is indented, it is interpreted as a code block during rendering. Dependencies: Hugo's template functions; expected input is the shortcode inner content. Outputs an HTML div with rendered content, possibly wrapped in a <pre><code> block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/InnerDeindent.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<div class=\\\"gallery\\\">\\n  {{ .Inner | strings.TrimSpace | .Page.RenderString }}\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building Hugo Extended Edition from Source\nDESCRIPTION: Command to build and install the extended edition of Hugo from source with CGO enabled to support additional features like Sass processing and WebP encoding.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest\n```\n\n----------------------------------------\n\nTITLE: Using Dict for Options in Hugo's transform.Highlight Function\nDESCRIPTION: This snippet illustrates how to use a dict (dictionary) to pass options to the transform.Highlight function when highlighting Bash code. It sets line numbers and a custom style.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Highlight.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $input := `echo \"Hello World!\"` }}\n{{ $lang := \"bash\" }}\n{{ $opts := dict \"lineNos\" \"table\" \"style\" \"dracula\" }}\n{{ transform.Highlight $input $lang $opts }}\n```\n\n----------------------------------------\n\nTITLE: Valid Key Naming for Accessing Parameters in Go HTML Templates\nDESCRIPTION: These Go HTML template snippets illustrate valid ways to access parameters using camelCase or snake_case key names. These naming conventions are compatible with Go's identifier rules.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/params.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.params.camelCase.foo }}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.params.snake_case.foo }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Project\nDESCRIPTION: This command initializes a Firebase project in the root of your Hugo project, prompting for various configuration options.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfirebase init\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Server Reloads with Dynamic Config - Bash\nDESCRIPTION: This Bash script automates the process of running the Hugo development server, editing its configuration file (hugo.toml), and validating the updates via HTTP requests. It utilizes 'httpget' to check content, moves configuration files into place to simulate edits, and calls 'waitServer' and 'stopServer' for server management. Dependencies include 'hugo' installed and accessible, proper test environment variables, and HTTP utilities.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_config.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test the hugo server command when editing the config file.\n\n# We run these tests in parallel so let Hugo decide which port to use.\nhugo server --renderToMemory &\n\nwaitServer\n\nhttpget $HUGOTEST_BASEURL_0 'Title: Hugo Server Test' $HUGOTEST_BASEURL_0\n\nmv edits/title.toml hugo.toml\n\nhttpget $HUGOTEST_BASEURL_0 'Title: Hugo New Server Test' $HUGOTEST_BASEURL_0\n\nmv edits/addlanguage.toml hugo.toml\n\nhttpget $HUGOTEST_BASEURL_0 'Title: Hugo New Server Test' $HUGOTEST_BASEURL_0\nhttpget ${HUGOTEST_BASEURL_0}nn/ 'Hugo Nynorsk Server Test' ${HUGOTEST_BASEURL_0}nn/\n\nstopServer\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Converting UTC Time to Local Time in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to convert a UTC timestamp to local time using Hugo's templating functions. It first creates a time.Time object from a UTC string, then applies the Local method to convert it to the local time zone.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Local.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-28T07:44:58+00:00\" }}\n{{ $t.Local }} → 2023-01-27 23:44:58 -0800 PST\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Page Resource Alternative\nDESCRIPTION: Shows the project directory structure for accessing CSV files as page resources in a content bundle.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── content/\n    └── posts/\n        └── my-pets/\n            ├── index.md\n            └── pets.csv\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended from Master Branch using Go Install\nDESCRIPTION: Command to download, compile, and install the Hugo extended edition based on the latest commit on the 'master' branch of the official GitHub repository using `go install`. Requires Go (1.23.0+), a C compiler, and `CGO_ENABLED=1`. The '@master' suffix targets the head of the master branch.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@master\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Languages and Output Types - Hugo TOML Configuration\nDESCRIPTION: Defines Hugo site settings including disabled output kinds, default language, URL structure, and localized content directories and titles for English and French. This configuration controls site structure, localization, and disables superfluous generators (e.g., taxonomy, RSS). Expected input is a valid TOML file (hugo.toml). The site must be organized with directories matching contentDir entries.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ndisableKinds = [\"taxonomy\", \"term\", \"RSS\", \"sitemap\", \"robotsTXT\", \"404\"]\ndefaultLanguage = \"en\"\ndefaultLanguageInSubdir = true\nbaseURL = \"https://example.com/\"\n[languages]\n    [languages.en]\n        languageName = \"English\"\n        weight = 1\n        title = \"English Title\"\n        contentDir = \"content/en\"\n    [languages.fr]\n        languageName = \"French\"\n        weight = 2\n        title = \"French Title\"\n        contentDir = \"content/fr\"\n```\n\n----------------------------------------\n\nTITLE: Options for Hugo Bash Completion Command\nDESCRIPTION: Command-line options specific to the `hugo completion bash` command. The `-h` or `--help` option displays help information for this specific subcommand, and `--no-descriptions` disables the inclusion of completion descriptions in the generated script.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_bash.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Module Get Command (Shell)\nDESCRIPTION: This shell command runs Hugo's module management tool to download and update module dependencies defined in the project's configuration (`hugo.toml` or `config.toml`). It fetches modules listed under `[module.imports]` unless they are disabled.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_get.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod get\n```\n\n----------------------------------------\n\nTITLE: Generating Relative URLs without Leading Slash (baseURL: /) using Go HTML Template\nDESCRIPTION: Demonstrates the `relURL` function in Hugo templates with various inputs that do not start with a slash. When the `baseURL` is set to `https://example.org/`, the function generates URLs relative to this base. Absolute input URLs are returned unchanged unless they exactly match the `baseURL` (protocol+host+path) or only the protocol+host part, in which case they might be simplified to a relative path.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelURL.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ relURL \"\" }}                         → /\n{{ relURL \"articles\" }}                 → /articles\n{{ relURL \"style.css\" }}                → /style.css\n{{ relURL \"https://example.org\" }}      → https://example.org\n{{ relURL \"https://example.org/\" }}     → /\n{{ relURL \"https://www.example.org\" }}  → https://www.example.org\n{{ relURL \"https://www.example.org/\" }} → https://www.example.org/\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Sitemap Settings in Hugo Config\nDESCRIPTION: Example of setting a default 'changeFreq' value for all pages in the Hugo site configuration file (e.g., `hugo.toml`). Page-specific front matter can override this setting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sitemap.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[sitemap]\nchangeFreq = 'monthly'\n```\n\n----------------------------------------\n\nTITLE: Representing Content Structure as a Logical Tree (Text)\nDESCRIPTION: Illustrates the same content organization shown in the file tree example, but represented using Hugo's logical paths. This highlights the difference in structure (e.g., `p1` instead of `p1/index.md`) and how relative paths are calculated differently within the logical tree.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Path.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n└── s1/\n    ├── p1\n    └── p2 \n```\n\n----------------------------------------\n\nTITLE: Incorrect Context Usage Inside range Block\nDESCRIPTION: Example showing an incorrect attempt to access a Page property within a range block where the context is bound to integers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/range.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range seq 3 }}\n  {{ .Title }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Calculating Modulus in Hugo Templates - Go HTML Template\nDESCRIPTION: Demonstrates the use of the 'mod' function (an alias for math.Mod) in Hugo Go HTML templates to compute the modulus of two integers, 15 and 3. No additional dependencies are required, but usage is within Hugo templating context and expects numeric parameters. The template function returns an integer representing the remainder (here, 0), and the arrow notation shows expected output. Not suitable for non-integer input values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Mod.md#2025-04-23_snippet_0\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ mod 15 3 }} \\u2192 0\n```\n\n----------------------------------------\n\nTITLE: Conditional Mermaid JavaScript Inclusion\nDESCRIPTION: A snippet to be included at the bottom of a base template that conditionally loads the Mermaid JavaScript library only when a page contains Mermaid diagrams, as indicated by the page store flag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/code-blocks.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ if .Store.Get \"hasMermaid\" }}\n  <script type=\"module\">\n    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';\n    mermaid.initialize({ startOnLoad: true });\n  </script>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Hugo Glossary Term Pages in YAML\nDESCRIPTION: This YAML frontmatter defines the structure for a glossary term page in Hugo. It includes a dynamic title that replaces hyphens with spaces in the content base name and a params section with a reference field for linking to detailed documentation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/archetypes/glossary.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: {{ replace .File.ContentBaseName \"-\" \" \" }}\nparams:\n  reference: \n---\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Hugo Configuration Settings via CLI\nDESCRIPTION: Demonstrates using `hugo config` piped to `grep` to display the value of a specific configuration setting by filtering the output for the desired `[key]`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nhugo config | grep [key]\n```\n\n----------------------------------------\n\nTITLE: Checking Draft Status in Hugo Content File using Shell\nDESCRIPTION: This command uses the standard `grep` utility to search for the exact string `draft = true` within the specified content file (`content/post/first-post.md`). It verifies that the newly created post is marked as a draft, which is often the default behavior defined in archetypes. Requires `grep` and assumes execution within the Hugo site's root directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngrep 'draft = true' content/post/first-post.md\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Hugo Options with Module Vendor (CLI)\nDESCRIPTION: Details the command-line options inherited from parent Hugo commands that can be used with `hugo mod vendor`. These flags control global settings like configuration files (`--config`, `--configDir`), output destination (`--destination`), environment (`--environment`), logging (`--logLevel`), source directory (`--source`), theme location (`--themesDir`), build behavior (`--noBuildLock`, `--quiet`), rendering destination (`--renderToMemory`), ignoring vendor paths (`--ignoreVendorPaths`), and setting a custom clock (`--clock`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_vendor.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Disqus Shortname - Hugo Configuration (TOML)\nDESCRIPTION: Example configuration block to set the Disqus 'shortname' under the [services.disqus] key, enabling the embedded Disqus template to function. This snippet is used in the Hugo config file (often config.toml or config.yaml). The 'shortname' is required for Disqus integration; other optional properties can be set in the content front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n[services.disqus]\nshortname = 'your-disqus-shortname'\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Option for Hugo Env - Command Line - Bash\nDESCRIPTION: This snippet shows the format for accessing the command-specific help for 'hugo env'. Using '-h' or '--help' prints available options and usage information to the terminal. There are no dependencies beyond Hugo. No input or output files are involved; the help text is displayed in the command line interface.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_env.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for env\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Example in Hugo\nDESCRIPTION: A simple example showing how a string is represented in Hugo. The example shows a string literal enclosed in double quotes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/string.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"What is 6 times 7?\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Books Example (Text)\nDESCRIPTION: Provides the minimal directory structure for a Hugo books section implementing content adapters. The key file is _content.gotmpl, which facilitates dynamic content creation for the section.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n└── books/\\n    ├── _content.gotmpl  <-- content adapter\\n    └── _index.md\n```\n\n----------------------------------------\n\nTITLE: HTML Output using Inner with Indented Content - HTML\nDESCRIPTION: Shows the HTML output when rendering a Hugo shortcode with Inner (not deindented), resulting in the indented inner Markdown being treated as a code block. The resulting HTML includes <pre><code> elements inside the 'gallery' divs. Inputs are indented Markdown image tags; output is HTML structure matching CommonMark's indented code block rules. This demonstrates the effect of not removing indentation on the produced HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/InnerDeindent.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\n  <li>\\n    <p>Gallery one</p>\\n    <div class=\\\"gallery\\\">\\n      <pre><code>![kitten a](images/a.jpg)\\n      ![kitten b](images/b.jpg)\\n      </code></pre>\\n    </div>\\n  </li>\\n  <li>\\n    <p>Gallery two</p>\\n    <div class=\\\"gallery\\\">\\n      <pre><code>![kitten c](images/c.jpg)\\n      ![kitten d](images/d.jpg)\\n      </code></pre>\\n    </div>\\n  </li>\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL and Disabling Page Kinds in Hugo (TOML)\nDESCRIPTION: This main Hugo configuration file (`hugo.toml`) sets the fundamental `baseURL` for the site. It also explicitly disables the generation of several standard page kinds (RSS, sitemap, etc.) to minimize the build output, likely for focused testing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configprod.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\n```\n\n----------------------------------------\n\nTITLE: Starting and Managing Hugo Server in Bash\nDESCRIPTION: This snippet shows how to start a Hugo server in the background, wait for it to be ready, check for the absence of 'livereload' in the generated index.html, and stop the server. It uses shell commands and grep for verification.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_disablelivereload__config.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo server &\n\nwaitServer\n\n! grep 'livereload' public/index.html\n\nstopServer\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Configuring Section and Descendant Page Publishing with Cascade - TOML\nDESCRIPTION: This TOML configuration demonstrates how to publish only the section list page and not its descendants by using a mix of direct 'build' options and cascading options. The primary section page is set to always render, while cascade applies settings to descendants to prevent their rendering or resource publishing. Inputs are defined in a section's front matter using 'build' and 'cascade'. Resulting outputs are a single published list page with unpublished children.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/build-options.md#2025-04-23_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'Glossary'\\n[build]\\nrender = 'always'\\n[[cascade]]\\n[cascade.build]\\n  list = 'local'\\n  publishResources = false\\n  render = 'never'\n```\n\n----------------------------------------\n\nTITLE: Converting Month to Integer in Hugo Templates\nDESCRIPTION: This snippet shows how to convert a time.Month value to an integer in Hugo. It creates a time.Time value using time.AsTime, extracts the month, and then uses the int function to convert it to an integer representation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Month.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Month | int }} → 1\n```\n\n----------------------------------------\n\nTITLE: Setting Image Quality in Hugo Image Processing\nDESCRIPTION: Demonstrates how to set the quality parameter (q50) when converting an image to WebP format. Quality affects file size and visual appearance.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_25\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image.Resize \"600x webp q50\" }}\n```\n\n----------------------------------------\n\nTITLE: String comparison in collections.Where\nDESCRIPTION: Examples demonstrating string comparisons using equality and inequality operators to filter page collections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where .Site.RegularPages \"Section\" \"eq\" \"books\" }}\n{{ $pages := where .Site.RegularPages \"Section\" \"ne\" \"books\" }}\n```\n\n----------------------------------------\n\nTITLE: HTML Output using safeHTML\nDESCRIPTION: This snippet shows the resulting HTML output when the previous Go Hugo Template snippet using `safeHTML` is rendered. The HTML tags are preserved verbatim, allowing the browser to correctly interpret and render the emphasized text.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/HTML.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<em>emphasized</em>\n```\n\n----------------------------------------\n\nTITLE: Copying and Organizing Image Assets - Shell\nDESCRIPTION: Copies test images to language-specific content bundles and the static directory, then creates required directories for static images. This facilitates both page bundle resource processing and standard static asset publishing in Hugo. Inputs are image files from the test data directory, and outputs are images in content and static directories. Requires standard Unix tools (cp, mkdir) and assumes correct environment variable setup (`$SOURCE`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp $SOURCE/resources/testdata/pix.gif content/en/bundle1/pix.gif\ncp $SOURCE/resources/testdata/pix.gif content/en/bundle2/pix.gif\ncp $SOURCE/resources/testdata/pix.gif content/fr/bundle1/pix.gif\nmkdir static/images\ncp $SOURCE/resources/testdata/pix.gif static/images/p1.gif\ncp $SOURCE/resources/testdata/pix.gif static/images/p2.gif\ncp $SOURCE/resources/testdata/pix.gif static/images/p3.gif\ncp $SOURCE/resources/testdata/pix.gif static/images/p4.gif\n```\n\n----------------------------------------\n\nTITLE: Executing and Verifying Hugo Build in Shell\nDESCRIPTION: This shell script executes the 'hugo build' command, which is an alias for the main Hugo command to build the site. It then uses custom assertion commands ('stdout', 'checkfile', 'grep') common in test frameworks like 'cmdtest' to verify the build process. Specifically, it checks standard output for expected lines, ensures specific HTML files are created in the 'public' directory, and confirms that the generated 'index.html' contains the string 'IsServer: false;IsProduction: true', indicating a successful production build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_build.txt#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Test the hugo build command (alias for hugo)\n\nhugo build\nstdout 'Pages.*|1'\nstdout 'Total in'\ncheckfile public/index.html\ncheckfile public/p1/index.html\ngrep 'IsServer: false;IsProduction: true'  public/index.html\n```\n\n----------------------------------------\n\nTITLE: Simple Hugo Content File with Front Matter (Markdown)\nDESCRIPTION: A basic Markdown content file (`content/p1.md`) for the Hugo site. It includes YAML front matter (delimited by `---`) to define the page `title` as \"P1\". This content file ensures there's a page to render using the single page layout.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_environment.txt#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/p1.md --\n---\ntitle: \"P1\"\n---\n```\n\n----------------------------------------\n\nTITLE: Illustrating Artificial Language File Naming (Text)\nDESCRIPTION: Shows examples of file naming for artificial languages with private use subtags as defined in RFC 5646 § 2.2.7. The `art-x-` prefix is optional for brevity. Private use subtags must not exceed 8 alphanumeric characters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ni18n/art-x-hugolang.toml\ni18n/hugolang.toml\n```\n\n----------------------------------------\n\nTITLE: Example of an Ugly URL\nDESCRIPTION: Illustrates the format of an 'ugly URL' as generated by Hugo when the feature is enabled. This format typically includes the full filename with its extension (e.g., '.html').\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/ugly-urls.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.org/section/article.html\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Server Command in Bash\nDESCRIPTION: This Bash script tests the Hugo server command by starting the server, waiting for it to be ready, making HTTP requests to verify content, checking file existence, and then stopping the server.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_render_static_to_disk.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test the hugo server command.\n\n# We run these tests in parallel so let Hugo decide which port to use.\nhugo server --renderToMemory --renderStaticToDisk &\n\nwaitServer\n\nhttpget $HUGOTEST_BASEURL_0 'Title: Hugo Server Test' $HUGOTEST_BASEURL_0\nhttpget ${HUGOTEST_BASEURL_0}mystatic.txt 'This is a static file.'\n\n! exists public/index.html\nexists public/mystatic.txt\n\nstopServer\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Creating an images.Colorize Filter in Hugo Go Templates\nDESCRIPTION: This snippet demonstrates how to invoke the `images.Colorize` function within a Hugo template to create an image filter. It assigns the resulting filter, configured with a hue of 180, saturation of 50, and percentage strength of 20, to the variable `$filter`. This filter can then be applied to an image resource using Hugo's image processing methods.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Colorize.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Colorize 180 50 20 }}\n```\n\n----------------------------------------\n\nTITLE: Example GoAT Diagram: Graphics Concepts\nDESCRIPTION: Provides an example of a GoAT diagram representing various 3D graphics concepts like coordinates, vectors, reflection, and refraction using ASCII art. This utilizes Hugo's built-in GoAT rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_5\n\nLANGUAGE: goat\nCODE:\n```\n                                                                             .\n    0       3                          P *              Eye /         ^     /\n     *-------*      +y                    \\                +)          \\   /  Reflection\n  1 /|    2 /|       ^                     \\                \\           \\ v\n   *-------* |       |                v0    \\       v3           --------*--------\n   | |4    | |7      |                  *----\\-----*\n   | *-----|-*       +-----> +x        /      v X   \\          .-.<--------        o\n   |/      |/       /                 /        o     \\        | / | Refraction    / \\\n   *-------*       v                 /                \\        +-'               /   \\\n  5       6      +z              v1 *------------------* v2    |                o-----o\n                                                               v\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML front matter block defines metadata for a Hugo content file. It sets the page title to 'Overmind Studios', provides a description, specifies the site URL, and attributes the content to '[tobkum](https://github.com/tobkum), Co-Founder Overmind Studios' using the 'byline' field. Hugo uses this information to render the page and potentially site-wide elements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/showcase/overmindstudios/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Overmind Studios\ndescription: \"A fresh start to make things easier in the future.\"\nsiteURL: https://www.overmind-studios.de/\nbyline: \"[tobkum](https://github.com/tobkum), Co-Founder Overmind Studios\"\n---\n```\n\n----------------------------------------\n\nTITLE: Example Twitter Site Meta Tag - HTML\nDESCRIPTION: An example HTML meta tag generated by Hugo's Twitter Cards template, setting the twitter:site value. Content attribute includes the '@' prefix. Used for social preview customization and proper branding when content is shared on Twitter/X.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"twitter:site\" content=\"@GoHugoIO\"/>\n```\n\n----------------------------------------\n\nTITLE: Using compare.Conditional (cond) Function in Hugo Templates\nDESCRIPTION: Demonstrates basic usage of the cond function that returns one of two values based on a conditional expression. In this example, it returns 'many' when the quantity is greater than 3.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Conditional.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $qty := 42 }}\n{{ cond (le $qty 3) \"few\" \"many\" }} → many\n```\n\n----------------------------------------\n\nTITLE: Example Content Front Matter - Markdown\nDESCRIPTION: Front matter for an example content file in a Hugo site. Specifies a 'title' parameter for the markdown page 'p1.md'. Used by test scenarios to validate content rendering and front matter handling. Accepts YAML-style parameters as input, outputs rendered content on site build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new.txt#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"P1\"\n---\n```\n\n----------------------------------------\n\nTITLE: Using fmt.Println in Hugo Templates\nDESCRIPTION: Demonstrates using the fmt.Println function in Hugo templates to print a string value followed by a line break. The function prints the default representation of the given argument and automatically adds a newline character.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Println.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ println \"foo\" }} → foo\\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Music Emojis\nDESCRIPTION: A markdown table showing emojis related to music and musical instruments, including their visual representations and shortcodes. The table covers various musical symbols and audio equipment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#objects) | :musical_score: | `:musical_score:` | :musical_note: | `:musical_note:` | [top](#table-of-contents) |\n| [top](#objects) | :notes: | `:notes:` | :studio_microphone: | `:studio_microphone:` | [top](#table-of-contents) |\n| [top](#objects) | :level_slider: | `:level_slider:` | :control_knobs: | `:control_knobs:` | [top](#table-of-contents) |\n| [top](#objects) | :microphone: | `:microphone:` | :headphones: | `:headphones:` | [top](#table-of-contents) |\n| [top](#objects) | :radio: | `:radio:` | | | [top](#table-of-contents) |\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options for hugo list future - Markdown\nDESCRIPTION: This snippet enumerates CLI options inherited by the \"hugo list future\" command from parent Hugo CLI commands. It covers configuration settings, paths, environment, logging, themes, memory rendering, and other customizations. These flags allow advanced control of the environment and output. The list is presented in Markdown and is formatted for use in documentation or as a terminal reference.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_future.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \\\"config\\\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Site Layout in HTML\nDESCRIPTION: This HTML template defines the layout for the index page of the Hugo site, displaying the page title and base URL using Hugo templating syntax.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_render_static_to_disk.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nTitle: {{ .Title }}|BaseURL: {{ site.BaseURL }}|\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Content Directory Structure - Text\nDESCRIPTION: This snippet provides a hierarchical view of a content directory in a Hugo project. It indicates the content organization and tags each type (e.g., 'kind = page', 'kind = section', 'kind = home') with comments for clarification. The structure helps users understand how Hugo classifies content files, which is essential context for the use of the IsHome method. No dependencies are required; input and output are purely representational for documentation purposes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsHome.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── books/\\n│   ├── book-1/\\n│   │   └── index.md  <-- kind = page\\n│   ├── book-2.md     <-- kind = page\\n│   └── _index.md     <-- kind = section\\n└── _index.md         <-- kind = home\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA1 Checksum in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the sha1 function in Hugo templates to generate a SHA1 checksum from a string input. The function takes a string argument and returns the hexadecimal representation of its SHA1 hash.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/crypto/SHA1.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ sha1 \"Hello world\" }} → 7b502c3a1f48c8609ae212cdfb639dee39673f5e\n```\n\n----------------------------------------\n\nTITLE: Embedding a Mermaid Diagram using Markdown Fenced Code Block\nDESCRIPTION: Illustrates how to embed a Mermaid diagram in Hugo Markdown content using a fenced code block with the `mermaid` language identifier. This relies on the custom render hook and JavaScript loader defined in the previous snippets.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n````text {copy=true}\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring GitInfo in Hugo Configuration\nDESCRIPTION: Enabling GitInfo functionality in Hugo site configuration file to allow Hugo to access Git repository information.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\nenableGitInfo = true\n```\n\n----------------------------------------\n\nTITLE: Checking for Zero Time with IsZero in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the IsZero function to check if a time.Time value represents the zero time instant (January 1, year 1, 00:00:00 UTC) in Hugo templates. It creates two time values and checks if they are zero time.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/IsZero.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t1 := time.AsTime \"2023-01-01T00:00:00-08:00\" }}\n{{ $t2 := time.AsTime \"0001-01-01T00:00:00-00:00\" }}\n\n{{ $t1.IsZero }} → false\n{{ $t2.IsZero }} → true\n```\n\n----------------------------------------\n\nTITLE: Generating Hugo Bash Autocompletion Script\nDESCRIPTION: Basic command to generate the Bash autocompletion script for the Hugo CLI. The output of this command needs to be sourced or saved to a file for the completions to take effect. This command depends on the 'bash-completion' package being installed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_bash.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo completion bash\n```\n\n----------------------------------------\n\nTITLE: Executing the Hugo Documentation Generation Command\nDESCRIPTION: Shows the basic syntax for running the `hugo gen doc` command. This command generates Markdown documentation for the Hugo CLI itself, suitable for rendering on the Hugo website. It can accept optional flags and arguments to customize its behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen_doc.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo gen doc [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Configuring Disqus Shortname in Hugo TOML\nDESCRIPTION: This snippet shows how to configure the required Disqus `shortname` in the Hugo site's configuration file (e.g., `hugo.toml` or `config.toml`). This setting is essential for linking the Hugo site to the specific Disqus forum instance. Replace 'your-disqus-shortname' with the actual shortname provided by Disqus.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/comments.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[services.disqus]\nshortname = 'your-disqus-shortname'\n```\n\n----------------------------------------\n\nTITLE: Building and Verifying Hugo Site Output - Shell\nDESCRIPTION: Invokes the Hugo static site generator to process content and assets, followed by a series of command outputs to assert page count, processed images, static asset publication, and correct listing of image files. This ensures the site build includes all intended assets and structure. Assumes Hugo is installed and available in PATH; outputs and assertions rely on build state.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhugo\n\nstdout 'Pages.*3.*2'\nstdout 'Processed images.*2.*1'\nstdout 'Static files.*4 |'\n\nls public/images\nstdout 'p1.gif'\nstdout 'p2.gif'\nstdout 'p3.gif'\nstdout 'p4.gif'\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Sub-Module Project (TOML)\nDESCRIPTION: This `hugo.toml` file provides basic configuration for a sub-module within the test setup. It sets the title for the sub-module project, used when testing the `hugo mod init` command within the `submod` directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod.txt#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n-- submod/hugo.toml --\ntitle = \"Hugo Sub Module\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Base URL and Disabled Content Kinds (Hugo TOML)\nDESCRIPTION: This configuration code block sets the base URL for the Hugo site and disables the 'taxonomy' and 'term' content kinds. Dependencies are minimal with only Hugo required. The parameters 'baseURL' and 'disableKinds' determine the website's root URL and which automatic content generation features are disabled. Inputs are the string URL and an array of content kind strings; output is their effect on Hugo's site build process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/deprecate.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = \"https://example.com/\"\ndisableKinds = [\"taxonomy\", \"term\"]\n```\n\n----------------------------------------\n\nTITLE: Delimiting Slices in Hugo Template - go-html-template\nDESCRIPTION: Demonstrates using the delimit function to join elements of a slice into a string with supplied delimiters in Hugo templates. Dependencies include Hugo's templating functions and a slice input. Parameters: the slice to join, a standard delimiter, and optionally a final delimiter for the last item. Returns the joined string with the defined separators. Handles any slice and allows for custom joining output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Delimit.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := slice \"b\" \"a\" \"c\" }}\n{{ delimit $s \", \" }} → b, a, c\n{{ delimit $s \", \" \" and \"}} → b, a and c\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents Rendering - Hugo Configuration TOML\nDESCRIPTION: This snippet provides a configuration example for customizing how Hugo generates the table of contents, using TOML syntax. The configuration sets which heading levels to include (startLevel and endLevel), and whether the generated TOC uses an ordered or unordered list. This must be placed in your Hugo config file (e.g., config.toml) under [markup.tableOfContents]. No dependencies are required beyond Hugo itself. The parameters 'endLevel', 'ordered', and 'startLevel' control the range and formatting of the generated TOC.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/TableOfContents.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[markup.tableOfContents]\nendLevel = 3\nordered = false\nstartLevel = 2\n```\n\n----------------------------------------\n\nTITLE: Help Option for `hugo list all` (Shell)\nDESCRIPTION: Shows the specific option available for the `hugo list all` subcommand. The `-h` or `--help` flag displays help information and usage details pertinent to the `hugo list all` command itself.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_all.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for all\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Content Directory Structure\nDESCRIPTION: Illustrates a sample content structure for a Hugo site, showing how pages and sections are organized. This structure is used to explain how the `.Parent` method identifies the parent section for different content files (e.g., `auction-2.md`'s parent is `2023-11`, `_index.md` in `auctions/2023-11`'s parent is `auctions`, `payment.md`'s parent is `auctions`, and the root `_index.md`'s parent is `nil`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Parent.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── auctions/\n│   ├── 2023-11/\n│   │   ├── _index.md     <-- parent: auctions\n│   │   ├── auction-1.md\n│   │   └── auction-2.md  <-- parent: 2023-11\n│   ├── 2023-12/\n│   │   ├── _index.md     \n│   │   ├── auction-3.md\n│   │   └── auction-4.md\n│   ├── _index.md         <-- parent: home\n│   ├── bidding.md\n│   └── payment.md        <-- parent: auctions\n├── books/\n│   ├── _index.md         <-- parent: home\n│   ├── book-1.md\n│   └── book-2.md         <-- parent: books\n├── films/\n│   ├── _index.md         <-- parent: home \n│   ├── film-1.md\n│   └── film-2.md         <-- parent: films\n└── _index.md             <-- parent: nil\n```\n\n----------------------------------------\n\nTITLE: Utilizing Inherited Hugo Command Options\nDESCRIPTION: Displays command-line options inherited from parent Hugo commands that can be used with `hugo mod tidy`. These provide broader configuration possibilities, including setting a specific build clock (`--clock`), defining config files/directories (`--config`, `--configDir`), specifying source and destination paths (`-s`, `--source`, `-d`, `--destination`), controlling build environment (`-e`, `--environment`), managing logging and output verbosity (`--logLevel`, `--quiet`), handling vendor paths (`--ignoreVendorPaths`), controlling build locks (`--noBuildLock`), rendering to memory (`-M`, `--renderToMemory`), and setting the themes directory (`--themesDir`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_tidy.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Hugo Site Settings (TOML)\nDESCRIPTION: This TOML snippet defines the primary configuration for a Hugo project, typically located in `config/_default/hugo.toml`. It sets the essential `baseURL` to `https://example.com/` and uses the `disableKinds` array to prevent Hugo from generating several default page types, including RSS feeds, regular pages, sitemaps, and the homepage. This results in a very minimal site structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__configdir.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- config/_default/hugo.toml --\nbaseURL = \"https://example.com/\"\ndisableKinds = [\"RSS\", \"page\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\", \"home\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing an Empty Collection with First in Hugo - Go HTML Template\nDESCRIPTION: This snippet shows how to use the first function in Hugo to create an empty collection by setting the count to zero. No dependencies are needed beyond Hugo's templating context, and the main parameter is 0. The output is an empty slice assigned to $emptyPageCollection, which can be used elsewhere if further logic requires an empty starting set.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/First.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $emptyPageCollection := first 0 .Pages }}\n```\n\n----------------------------------------\n\nTITLE: Intersection comparison in collections.Where\nDESCRIPTION: Example demonstrating how to filter pages where a parameter slice contains one or more elements in common with another slice using the 'intersect' operator.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $books := where site.RegularPages \"Section\" \"eq\" \"books\" }}\n\n{{ $genres := slice \"suspense\" \"romance\" }}\n{{ $pages := where $books \"Params.genres\" \"intersect\" $genres }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Content Directory Structure\nDESCRIPTION: Illustrates a sample content directory structure used to demonstrate the Ancestors function, showing a hierarchical organization of content folders and files with section pages (_index.md) and regular content pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Ancestors.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── auctions/\n│   ├── 2023-11/\n│   │   ├── _index.md     <-- front matter: weight = 202311\n│   │   ├── auction-1.md\n│   │   └── auction-2.md\n│   ├── 2023-12/\n│   │   ├── _index.md     <-- front matter: weight = 202312\n│   │   ├── auction-3.md\n│   │   └── auction-4.md\n│   ├── _index.md         <-- front matter: weight = 30\n│   ├── bidding.md\n│   └── payment.md\n├── books/\n│   ├── _index.md         <-- front matter: weight = 10\n│   ├── book-1.md\n│   └── book-2.md\n├── films/\n│   ├── _index.md         <-- front matter: weight = 20\n│   ├── film-1.md\n│   └── film-2.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Listing Version Options - Hugo CLI - Shell\nDESCRIPTION: Lists the available flags for the \"hugo version\" command. These options can be supplied to modify the version command's behavior, such as displaying help. No additional dependencies are required beyond Hugo itself.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_version.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for version\n```\n\n----------------------------------------\n\nTITLE: Using Simple Translations in English Context (Go Template)\nDESCRIPTION: Demonstrates how to use the `T` function (alias for `lang.Translate`) in a Go HTML template to retrieve simple translations. When the site context is English, it fetches values from `i18n/en.toml`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ T \"privacy\" }} → privacy\n{{ T \"security\" }} → security\n```\n\n----------------------------------------\n\nTITLE: Using collections.SymDiff in Hugo Templates\nDESCRIPTION: This example demonstrates how to use the symdiff function (alias for collections.SymDiff) to find the symmetric difference between two collections. It takes two collections as input and returns elements that are in either collection but not in both.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/SymDiff.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ slice 1 2 3 | symdiff (slice 3 4) }} → [1 2 4]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Post Metadata using TOML\nDESCRIPTION: This TOML snippet defines the front matter for a Hugo post. It specifies the post's title, publication date, draft status, and associated tags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/create/skeletons/theme/content/posts/post-2.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = 'Post 2'\ndate = 2023-02-15T10:00:00-07:00\ndraft = false\ntags = ['red','green']\n+++\n```\n\n----------------------------------------\n\nTITLE: Rendering Site Parameter in Hugo Index Layout (Go Template)\nDESCRIPTION: An HTML layout file (`layouts/index.html`) for the Hugo homepage. It uses Go templating syntax (`{{ site.Params.myparam }}`) to access and render the value of the `myparam` site parameter defined in the configuration. The `§` character is used as a delimiter for the `grep` command in the test script.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_environment.txt#2025-04-23_snippet_2\n\nLANGUAGE: gohtml\nCODE:\n```\n-- layouts/index.html --\nmyparam: {{ site.Params.myparam }}§\n```\n\n----------------------------------------\n\nTITLE: Configuring Permalinks in Hugo with Time Layout Components\nDESCRIPTION: Example of using time layout components from Go's time package in Hugo's configuration file to customize permalinks. This snippet shows how to format post URLs with a specific date format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/permalink-tokens.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npermalinks:\n  posts: /:06/:1/:2/:title/\n```\n\n----------------------------------------\n\nTITLE: Example YAML Front Matter Delimiter\nDESCRIPTION: Shows the basic structure of YAML front matter in Hugo, including the triple-dash delimiters and basic metadata fields like title and reference.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/front-matter.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: front matter\nreference: /content-management/front-matter\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Content Page p1 with Specific URL (YAML Front Matter)\nDESCRIPTION: This snippet shows the YAML front matter within `content/p1.md`. It uses the `url` key to explicitly set the output path for this page to `/p1/`. This configuration, along with identical settings in `p2.md` and `p3.md`, causes the duplicate path conflict.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings.txt#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n-- content/p1.md --\n---\nurl: /p1/\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Hugo Inherited CLI Options - Shell\nDESCRIPTION: This CLI options block enumerates additional flags inherited from parent commands that can be used with 'hugo server' as well. Parameters alter configuration file selection, output destinations, environment modes, vendor path handling, logging, and memory rendering. This documentation snippet clarifies available global arguments for advanced configuration but does not represent an executable script. The listing assists power users in fine-tuning Hugo server startup to align with their project structures or environment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_server.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Retrieving Name for Global Resource using Hugo Templates - Go HTML Template\nDESCRIPTION: This snippet shows how to access a global resource using the resources.Get method in Hugo templates and retrieve its name property. It requires access to the resources template function. The resource path is specified relative to the assets directory, and the output is the resource name (usually its path). Outputs the resource name for a global resource; returns a string. No special dependencies beyond standard Hugo templating functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Name.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \\\"images/Sunrise in Bryce Canyon.jpg\\\" }}\\n  {{ .Name }} → /images/Sunrise in Bryce Canyon.jpg\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS Dependencies using npm (Shell)\nDESCRIPTION: Installs required Node.js packages (postcss, postcss-cli, autoprefixer, @fullhuman/postcss-purgecss) as development dependencies using npm. This is a prerequisite for using PostCSS transformations within Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/PostProcess.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D postcss postcss-cli autoprefixer @fullhuman/postcss-purgecss\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown attributes in Hugo configuration\nDESCRIPTION: Configuration settings for enabling Markdown attributes in tables using Hugo's configuration file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/tables.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.parser.attribute]\nblock = true\n```\n\n----------------------------------------\n\nTITLE: Comparing Page Objects with Eq Function in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the .Eq method to compare Hugo Page objects. It iterates through all pages in the current section and excludes the current page from the listing, creating links to all other pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Eq.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $currentPage := . }}\n{{ range .CurrentSection.Pages }}\n  {{ if not (.Eq $currentPage) }}\n    <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Example Content Front Matter - TOML\nDESCRIPTION: This TOML-formatted document serves as an example Hugo content file with TOML front matter. The 'title' parameter is set to 'TOML', and the body contains sample content. It is used as input for conversion tests and must exist at the expected path for tests to pass.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/convert.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"TOML\"\n+++\nTOML content\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended from Specific Commit using Go Install\nDESCRIPTION: Command to download, compile, and install the Hugo extended edition based on a specific commit hash (0851c17) from the official GitHub repository using `go install`. Requires Go (1.23.0+), a C compiler, and `CGO_ENABLED=1`. The '@0851c17' suffix specifies the exact commit.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@0851c17\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site with TOML\nDESCRIPTION: This TOML configuration file sets up the basic parameters for the Hugo site, including the title, base URL, and disabled content types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_render_to_memory.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Hugo Server Test\"\nbaseURL = \"https://example.org/\"\ndisableKinds = [\"taxonomy\", \"term\", \"sitemap\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Content Page with Image Processing - Hugo HTML Template\nDESCRIPTION: Provides a default content page template for Hugo, outputting 'Single.' and iterating over page resources to resize images using Hugo's image processing ('Resize \"3x\"'). It then displays the relative permalink of each resized image. Depends on image resource files in the page bundle and Hugo's templating/image API. Output includes resized image links; limited to image resources included alongside the page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats.txt#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nSingle.\n{{ range .Resources }}\n{{ $img := .Resize \"3x\" }}\nResized: {{ $img.RelPermalink }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Without SafeCSS Declaration in Hugo Go HTML Templates - Go HTML Template\nDESCRIPTION: This snippet demonstrates assigning a potentially unsafe CSS string variable and using it directly in a style attribute within a Hugo template. Hugo's templating engine replaces unsafe CSS with the special placeholder 'ZgotmplZ' to protect against security vulnerabilities. No dependencies are required beyond Hugo with Go HTML Template support. The '$style' variable holds the CSS declaration; direct output without safeCSS results in Hugo applying its automatic escaping.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/CSS.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $style := \"color: red;\" }}\\n<p style=\"{{ $style }}\">foo</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Development Parameters for Hugo – TOML\nDESCRIPTION: This TOML file specifies the 'myparam' key set to 'dev', used as an environment-specific parameter in the Hugo build. The file is intended for 'config/development/params.toml', allowing environment-based overrides. Dependencies: Hugo environment config logic. Input: none. Output: value resolution for templates. Limitation: only applies if this params file is selected by Hugo at build time.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_env.txt#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n-- config/development/params.toml --\nmyparam = \"dev\"\n```\n\n----------------------------------------\n\nTITLE: Instagram URL Example for Hugo Shortcode\nDESCRIPTION: Shows an example Instagram post URL that can be embedded using Hugo's instagram shortcode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/instagram.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.instagram.com/p/CxOWiQNP2MO/\n```\n\n----------------------------------------\n\nTITLE: Multiple Archetypes for Content Types - Text\nDESCRIPTION: Illustrates a file tree for managing multiple archetype files for different content types such as articles and tutorials. Guides users on how to create modular and extendable archetype templates within the Hugo structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\narchetypes/\n├── articles.md\n├── default.md\n└── tutorials.md\n\n```\n\n----------------------------------------\n\nTITLE: Featured Content Taxonomy Menu\nDESCRIPTION: Template for creating a sidebar menu showing featured content organized by taxonomy terms.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Taxonomies.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n<section id=\"menu\">\n  <ul>\n    {{ range $term, $taxonomy := .Site.Taxonomies.featured }}\n      <li>{{ $term }}</li>\n      <ul>\n        {{ range $taxonomy.Pages }}\n          <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n        {{ end }}\n      </ul>\n    {{ end }}\n  </ul>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Defining Multilingual Configuration for Hugo (TOML)\nDESCRIPTION: This TOML snippet configures the site base URL and language options for a Hugo site. It specifies English and Norwegian as supported languages, each with a designated language name and weight for ordering. To use this configuration, save it as 'hugo.toml' in the project root. The '[languages]' table and nested language definitions enable Hugo to generate language-specific content sections according to the defined weights.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content_archetypedir.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = \"http://example.org/\"\n[languages]\n[languages.en]\nlanguageName = \"English\"\nweight = 1\n[languages.no]\nlanguageName = \"Norsk\"\nweight = 2\n\n```\n\n----------------------------------------\n\nTITLE: Creating Hugo HTML Template with Warning Function\nDESCRIPTION: This HTML template represents the home page of the Hugo site. It includes the text 'Home' and uses the warnf function to generate a warning message. This demonstrates how to incorporate warnings in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/warnf_stderr.txt#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHome\n{{ warnf \"This is a warning\" }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Module Core Settings - TOML\nDESCRIPTION: Defines the main module behavior in Hugo's configuration file using TOML. This includes initial values for proxy, private modules, vendor handling, workspace mode, and glob patterns. No external dependencies are required, as Hugo parses this configuration natively. Key parameters are string or boolean values controlling networking, authentication, and module resolution. Input is placed in the '[module]' section; output is direct configuration of Hugo's module system. Users can override these defaults for project-specific needs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/module.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[module]\nnoProxy = 'none'\nnoVendor = ''\nprivate = '*.*'\nproxy = 'direct'\nvendorClosest = false\nworkspace = 'off'\n```\n\n----------------------------------------\n\nTITLE: Visualizing Directory Layouts in Hugo Content Bundles (Text)\nDESCRIPTION: This snippet is a visual representation of a typical Hugo site content directory, showing the nesting of page bundles, images, and markdown content. It is used within documentation to illustrate how content and page-relative resources are structured for page bundles in Hugo. The tree layout helps readers understand relationships between source files and rendered site sections, but is not executable code and requires no dependencies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/organization/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── blog/\\n│   ├── hugo-is-cool/\\n│   │   ├── images/\\n│   │   │   ├── funnier-cat.jpg\\n│   │   │   └── funny-cat.jpg\\n│   │   ├── cats-info.md\\n│   │   └── index.md\\n│   ├── posts/\\n│   │   ├── post1.md\\n│   │   └── post2.md\\n│   ├── 1-landscape.jpg\\n│   ├── 2-sunset.jpg\\n│   ├── _index.md\\n│   ├── content-1.md\\n│   └── content-2.md\\n├── 1-logo.png\\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by Type Using the where Function in Hugo Go HTML Templates\nDESCRIPTION: This snippet demonstrates the use of the where function with the .Type property to filter regular pages in a Hugo site. It is similar to filtering by Section, but the result depends on the 'type' field in front matter. The snippet outputs an HTML list of linked page titles for pages with type set to 'lessons'. Requires correct front matter configuration for accurate results.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Section.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range where .Site.RegularPages \"Type\" \"lessons\" }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using compare.Lt with different data types in Hugo templates\nDESCRIPTION: Examples showing how to use the compare.Lt function with various data types including strings, dates, and booleans in Hugo templates. The function compares values based on their respective type ordering rules.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Lt.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ lt \"ab\" \"a\" }} → false\n{{ lt time.Now (time.AsTime \"1964-12-30\") }} → false\n{{ lt true false }} → false\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for Hugo New Command (sh)\nDESCRIPTION: This snippet lists command-line flags that the `hugo new` command inherits from the main `hugo` command. These options control various aspects of Hugo's execution, such as configuration file paths (`--config`), output destination (`-d`, `--destination`), build environment (`-e`), logging verbosity (`--logLevel`), and source directory (`-s`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS CLI with npm\nDESCRIPTION: Command to install Tailwind CSS CLI v4.0 or later along with its dependencies using npm package manager.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/TailwindCSS.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev tailwindcss @tailwindcss/cli\n```\n\n----------------------------------------\n\nTITLE: Hugo Configuration for Markdown Attributes\nDESCRIPTION: Configuration needed to enable Markdown attributes for image render hooks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/images.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.parser]\nwrapStandAloneImageWithinParagraph = false\n[markup.goldmark.parser.attribute]\nblock = true\n```\n\n----------------------------------------\n\nTITLE: Defining Content for a Root-Mounted Static File (f3.txt)\nDESCRIPTION: This file, located at the project root (`f3.txt`), contains the plain text content 'f3'. It's included in the final build due to a module mount in `hugo.toml` that maps this root-level file (`f3.txt`) to the target path `static/f3.txt`, resulting in `public/f3.txt`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__static_composite.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nf3\n```\n\n----------------------------------------\n\nTITLE: Defining Falsy Values in Hugo\nDESCRIPTION: Lists the specific values that are considered falsy in Hugo's template evaluation. These include boolean false, numeric zero, nil values, empty collections, and zero time values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/truthy-falsy.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfalse, 0, any nil pointer or interface value, any array, slice, map, or string of length zero, and zero time.Time values\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo on NetBSD using package manager\nDESCRIPTION: Command to install the extended edition of Hugo on NetBSD using the pkgin package manager.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/bsd.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo pkgin install go-hugo\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo CLI Configuration Commands in Shell\nDESCRIPTION: This shell script tests the Hugo CLI's \\'config\\' command by running it with various flags and formats, then verifying expected output in each scenario. The script asserts help messages, configuration output in default and JSON modes, and examines mount configuration functionality. It is intended to ensure that Hugo's configuration reporting behaves correctly, with a prerequisite that the Hugo CLI and a test configuration file are available; inputs are CLI commands and expected outputs, with limitations on the environments where Hugo is installed and set up properly.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/config.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test the config command.\n\nhugo config -h\nstdout 'Display site configuration'\n\n\nhugo config\nstdout 'baseurl = .https://example.com/'\nhugo config --format json\nstdout '\\\"baseurl\\\": \\\"https://example.com/\\\",'\n\nhugo config mounts -h\nstdout 'Print the configured file mounts'\n\nhugo config mounts\nstdout '\\\"source\\\": \\\"content\\\",'\n```\n\n----------------------------------------\n\nTITLE: Configuring Taxonomy Term Permalinks - Hugo Configuration - TOML\nDESCRIPTION: This TOML snippet configures taxonomies, specifically the 'tags' term, to use a short URL pattern omitting the taxonomy name segment. This customization is applied using the [permalinks.term] section, mapping 'tags' to '/:slug/'. No external dependencies; Hugo only. The input is the configuration file, changing tag term URLs from the default '/tags/tag-name/' to simply '/tag-name/'. Limitation: Affects only taxonomy term pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/permalinks.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[permalinks.term]\n'tags' = '/:slug/'\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Parameters in Config Directory (TOML)\nDESCRIPTION: This TOML file (`_default/params.toml`) is located within a configuration directory (`myconfigdir`) specified via the `--configDir` flag. It defines an additional site parameter `bar` with the value \"baz\". Hugo merges parameters from different configuration sources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n-- myconfigdir/_default/params.toml --\nbar = \"baz\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Section Name Fallback with .Site.GetPage in Hugo Go HTML Templates\nDESCRIPTION: This snippet shows fallback behavior when .Site.GetPage fails to find a section index page (_index.md) by rendering only the section name, using Hugo Go HTML Templates. The code attempts to fetch the section titled 'events'; if the _index.md is missing, Hugo automatically defaults to the section directory name as the title. Dependencies are Hugo's templating and content organization conventions. The input is the section path (e.g., '/events'), and the output is an <h1> with either the full title from front matter or the fallback section name.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/section.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<h1>{{ with .Site.GetPage \"/events\" }}{{ .Title }}{{ end }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Metadata in Hugo - TOML\nDESCRIPTION: This snippet sets essential site configuration values for a Hugo project using TOML. It establishes the documentation title and the base URL where the site will be hosted. These parameters influence how page URLs are generated and are required for the correct functioning of permalink-related template functions like RelPermalink.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RelPermalink.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'Documentation'\\nbaseURL = 'https://example.org/docs/'\n```\n\n----------------------------------------\n\nTITLE: X Post URL Example in Hugo\nDESCRIPTION: Example of an X (formerly Twitter) post URL that can be embedded using the Hugo x shortcode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/x.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nhttps://x.com/SanDiegoZoo/status/1453110110599868418\n```\n\n----------------------------------------\n\nTITLE: Defining a Crop Image Filter in Hugo go-html-template\nDESCRIPTION: Creates an image filter that crops the image to 200x200 pixels using the images.Process method. Intended usage is within a Hugo template where the filter is later applied to an image resource. The \\\"crop 200x200\\\" argument specifies the crop operation, with both width and height as required parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"crop 200x200\" }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages by Year and Month using GroupByParamDate (Default Descending)\nDESCRIPTION: This snippet demonstrates how to group a collection of pages (`.Pages`) based on the 'eventDate' front matter parameter, formatted as 'Month Year' (e.g., 'January 2006'). The groups are sorted in descending order by default. It iterates through the resulting groups (`.Key` holds the formatted date string) and then iterates through the pages within each group, linking to each page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/GroupByParamDate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.GroupByParamDate \"eventDate\" \"January 2006\" }}\n  <p>{{ .Key }}</p>\n  <ul>\n    {{ range .Pages }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Hugo Break Template Function\nDESCRIPTION: The rendered HTML output from the break example, showing that only 'foo' was rendered as a paragraph because the loop exited when it encountered 'bar'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/break.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>foo</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Module Settings in TOML\nDESCRIPTION: Defines basic project metadata for a Hugo modules test, using TOML format. This snippet requires no dependencies beyond the Hugo framework and sets the module's title parameter. Input is a title key and value; output is the loaded configuration in Hugo builds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_tidy.txt#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[[-- hugo.toml --\\ntitle = \\\"Hugo Modules Test\\\"]]\n```\n\n----------------------------------------\n\nTITLE: Listing Hugo Convert Command-Line Options - Shell\nDESCRIPTION: This code block lists the available command-line options for the 'hugo convert' command. It is used to inform users about flags such as help, output location, and safety settings. No dependencies are required beyond Hugo itself, and these flags can be combined as needed when running 'hugo convert' from the shell.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help            help for convert\\n  -o, --output string   filesystem path to write files to\\n      --unsafe          enable less safe operations, please backup first\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Module Vendor Command (Shell)\nDESCRIPTION: Demonstrates the basic syntax for running the `hugo mod vendor` command in a shell environment. It vendors all module dependencies into the project's `_vendor` directory. Flags and arguments can be provided to modify its behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_vendor.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod vendor [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Creating Tailwind Config for IDE Integration\nDESCRIPTION: Minimal Tailwind CSS configuration file to satisfy the requirement of the Tailwind CSS IntelliSense extension for Visual Studio Code.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/TailwindCSS.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/*\nThis file is present to satisfy a requirement of the Tailwind CSS IntelliSense\nextension for Visual Studio Code.\n\nhttps://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\n\nThe rest of this file is intentionally empty.\n*/\n```\n\n----------------------------------------\n\nTITLE: Number Formatting with fmt.Printf\nDESCRIPTION: Shows how to format decimal numbers with specific precision using fmt.Printf in Hugo templates. Demonstrates formatting a pi value to 2 decimal places.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/fmt/Printf.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pi := 3.14159265 }}\n{{ printf \"Pi is approximately %.2f.\" $pi }}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Polish Translations (TOML)\nDESCRIPTION: Example content for a Polish translation file (`i18n/pl.toml`). It defines corresponding key-value pairs for 'privacy' and 'security' in Polish. This file provides the source translations for the Polish version of the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nprivacy = 'prywatność'\nsecurity = 'bezpieczeństwo'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Content Length with Len Function in Hugo\nDESCRIPTION: Demonstrates how to use the Len method on a Page object to retrieve the length in bytes of the rendered content. The function returns an integer value representing the content size.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Len.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Len }} → 42\n```\n\n----------------------------------------\n\nTITLE: Checking IsContentAdapter in Hugo Templates\nDESCRIPTION: Demonstrates how to check if a file is a content adapter using the IsContentAdapter method introduced in Hugo 0.126.0.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .IsContentAdapter }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Gen Documentation Output - Bash\nDESCRIPTION: This snippet tests the 'hugo gen' documentation command by invoking the help message and generating documentation files into specified directories. It asserts that stdout includes key help text for the documentation generator and invokes doc creation with parameters. Requires Hugo CLI installed. Inputs include command-line arguments for documentation generation; expected outputs are stdout help messages and created doc files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/gen.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test the gen commands.\nhugo gen -h\nstdout 'Generate documentation for your project using Hugo\\'s documentation engine, including syntax highlighting for various programming languages\\.'\nhugo gen doc --dir clidocs\n```\n\n----------------------------------------\n\nTITLE: Building Hugo with Mage\nDESCRIPTION: This command uses Mage to build the Hugo binary with your local changes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmage hugo\n```\n\n----------------------------------------\n\nTITLE: Generated Post Front Matter Example - TOML\nDESCRIPTION: Shows the generated TOML front matter for a new post, using the default archetype configuration. This snippet is the resultant file after invoking 'hugo new', demonstrating field population for title, date, and draft status. Inputs: a new content file path and current date. Outputs: TOML front matter in the resultant Markdown file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'My First Post'\ndate = '2023-08-24T11:49:46-07:00'\ndraft = true\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Map Values in Hugo Store (Go HTML Template)\nDESCRIPTION: Shows how to use the DeleteInMap method to remove a specific key-value pair from a map stored in the Hugo Store.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/store-methods.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ .Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ .Store.DeleteInMap \"greetings\" \"english\" }}\n{{ .Store.Get \"greetings\" }} → map[french:Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Deploy Command in Bash\nDESCRIPTION: This snippet tests various aspects of the Hugo deploy command, including help output, dry run, and file changes. It creates a test bucket, deploys content, and verifies the deployment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/withdeploy/deploy.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo deploy -h\nstdout 'Deploy your site to a cloud provider'\nmkdir mybucket\nhugo deploy --target mydeployment --invalidateCDN=false\ngrep 'hello' mybucket/index.html\nreplace  public/index.html 'hello' 'changed'\nhugo deploy --target mydeployment --dryRun\nstdout 'Would upload: index.html'\nstdout 'Would invalidate CloudFront CDN with ID foobar'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Block Usage Demonstrating Rendering Issues in Hugo (Go HTML Template)\nDESCRIPTION: Shows a template misuse example where HTML is placed outside of any 'define' block, violating Hugo's block template requirements. This code (layouts/_default/do-not-do-this.html) causes rendering errors and possibly blank pages. Intended as a warning rather than for production use. Highlights the constraint that all non-template-comment content must be inside a block definition.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/base.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<div>This div element broke your template.</div>\\n{{ define \\\"main\\\" }}\\n  <h2>{{ .Title }}</h2>\\n  {{ .Content }}\\n{{ end }}\\n<!-- An HTML comment will break your template too. -->\n```\n\n----------------------------------------\n\nTITLE: Multiplying Values Using Hugo mul Template Function - Go HTML Template\nDESCRIPTION: This snippet demonstrates how to use the `mul` function in a Hugo Go HTML template to multiply several numbers. The function accepts two or more operands and returns the result of their multiplication; if any operand is a float, the result is a float. No external dependencies are required; this utilizes Hugo\\'s built-in template functions. The sample multiplies 12, 3, and 2, returning 72 as output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Mul.md#2025-04-23_snippet_0\n\nLANGUAGE: Go HTML Template\nCODE:\n```\n{{ mul 12 3 2 }} → 72\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Blockquote Syntax Examples\nDESCRIPTION: Examples of Markdown alert blockquotes (callouts) with different alert types compatible with GitHub, Obsidian, and Typora.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/blockquotes.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n> [!NOTE]\n> Useful information that users should know, even when skimming content.\n\n> [!TIP]\n> Helpful advice for doing things better or more easily.\n\n> [!IMPORTANT]\n> Key information users need to know to achieve their goal.\n\n> [!WARNING]\n> Urgent info that needs immediate user attention to avoid problems.\n\n> [!CAUTION]\n> Advises about risks or negative outcomes of certain actions.\n```\n\n----------------------------------------\n\nTITLE: Defining Content Page p2 with Duplicate URL (YAML Front Matter)\nDESCRIPTION: This snippet shows the YAML front matter within `content/p2.md`. Similar to `p1.md`, it uses the `url` key to set its output path to `/p1/`. This deliberate duplication is part of the test for the `--printPathWarnings` flag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings.txt#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n-- content/p2.md --\n---\nurl: /p1/\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Pagination by Checking .Prev Existence in Hugo Go Templates\nDESCRIPTION: This Go HTML template snippet provides an alternative method for constructing pagination navigation in Hugo without using the `.HasPrev` method. After filtering pages (`where site.RegularPages \"Type\" \"posts\"`) and creating a paginator (`.Paginate $pages`), it conditionally renders the \"Previous\" link by checking if the `.Prev` object itself exists using `{{ with .Prev }}`. This achieves the same outcome as using `.HasPrev`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/HasPrev.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := where site.RegularPages \"Type\" \"posts\" }}\n{{ $paginator := .Paginate $pages }}\n\n{{ range $paginator.Pages }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n\n{{ with $paginator }}\n  <ul>\n    {{ with .First }}\n      <li><a href=\"{{ .URL }}\">First</a></li>\n    {{ end }}\n    {{ with .Prev }}\n      <li><a href=\"{{ .URL }}\">Previous</a></li>\n    {{ end }}\n    {{ with .Next }}\n      <li><a href=\"{{ .URL }}\">Next</a></li>\n    {{ end }}\n    {{ with .Last }}\n      <li><a href=\"{{ .URL }}\">Last</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Style Parameters in Hugo (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to define custom parameters within the Hugo site configuration file (`hugo.toml` or `config.toml`). These parameters (`bg_color` and `text_color` under `[params.style]`) provide the values used by the CSS template in the previous example.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/ExecuteAsTemplate.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[params.style]\nbg_color = '#fefefe'\ntext_color = '#222'\n```\n\n----------------------------------------\n\nTITLE: Accessing Hugo-Provided Configuration File Paths via Environment Variables (JavaScript)\nDESCRIPTION: Shows how Hugo makes project configuration files (like `tailwind.config.js`) accessible to the PostCSS process via environment variables (e.g., `HUGO_FILE_TAILWIND_CONFIG_JS`). This allows JavaScript build tools to locate configuration files reliably.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/PostProcess.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet tailwindConfig = process.env.HUGO_FILE_TAILWIND_CONFIG_JS || './tailwind.config.js';\n```\n\n----------------------------------------\n\nTITLE: Example GoAT Diagram: Sequence Diagram with Attributes\nDESCRIPTION: Presents a simple sequence diagram using GoAT syntax. This example showcases applying a CSS class (`w-40`) to the diagram via Hugo's fenced code block attributes for potential styling. The source mentions inspiration from Diagon.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_9\n\nLANGUAGE: goat\nCODE:\n```\n┌─────┐       ┌───┐\n│Alice│       │Bob│\n└──┬──┘       └─┬─┘\n   │            │  \n   │ Hello Bob! │  \n   │───────────>│  \n   │            │  \n   │Hello Alice!│  \n   │<───────────│  \n┌──┴──┐       ┌─┴─┐\n│Alice│       │Bob│\n└─────┘       └───┘\n```\n\n----------------------------------------\n\nTITLE: Rendering Alphabetical Taxonomy List in Hugo\nDESCRIPTION: Template code that renders a hierarchical list of taxonomy terms with their associated pages and counts.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Alphabetical.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range $taxonomyObject.Alphabetical }}\n  <h2><a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a> ({{ .Count }})</h2>\n  <ul>\n    {{ range .Pages.ByTitle }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taxonomies in Hugo\nDESCRIPTION: This snippet shows how to configure taxonomies in Hugo's configuration file. It sets up an 'author' taxonomy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/URLize.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[taxonomies]\nauthor = 'authors'\n```\n\n----------------------------------------\n\nTITLE: Building a Hugo Site\nDESCRIPTION: Builds the Hugo site, publishing files to the public directory. Includes flags for handling draft, expired, and future content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/usage.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhugo\n```\n\nLANGUAGE: sh\nCODE:\n```\nhugo --buildDrafts    # or -D\nhugo --buildExpired   # or -E\nhugo --buildFuture    # or -F\n```\n\n----------------------------------------\n\nTITLE: Running Hugo with Deprecation Log Level - Command Line - Text\nDESCRIPTION: This snippet demonstrates how to invoke the Hugo static site generator with the log level set to 'info' in order to view deprecation notices. There are no external dependencies beyond having hugo installed in the user's environment. The key parameter is '--logLevel', which controls the verbosity of logging output. Expected output will include all info-level log entries, including those about deprecations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/deprecation.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhugo --logLevel info\n```\n\n----------------------------------------\n\nTITLE: Using the Apply Function in Hugo\nDESCRIPTION: The 'apply' function applies a function to a sequence of elements. This example demonstrates applying the 'add' function to a slice of integers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ apply (slice 1 2 3) \"add\" 1 }} → [2 3 4]\n```\n\n----------------------------------------\n\nTITLE: Direct Publishing of a Resource Variable - Hugo Resource API - Go HTML Templates\nDESCRIPTION: This snippet showcases the direct invocation of the Publish method on a resource variable within a Hugo template. It assumes $resource is already set to a valid Resource object. This method forces the resource to be written to the public directory, with no return value or assignment. No additional prerequisites are needed beyond proper variable initialization. The purpose is to efficiently trigger the publishing step for a specific resource.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Publish.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $resource.Publish }}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Layout for Hugo in HTML\nDESCRIPTION: This HTML file serves as the basic layout template for the Hugo site's index page, containing a simple structure with a 'Home' text in the body.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_disablelivereload.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n</head>\n<body>\nHome.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Text Asset (Plain Text)\nDESCRIPTION: This is a plain text asset file named `foo.txt` located in the `assets` directory. It contains the simple text \"foo\". This file serves as the target resource accessed by various Hugo template functions in the `index.html` layout to test resource path generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings_issue13164.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-- assets/foo.txt --\nfoo\n```\n\n----------------------------------------\n\nTITLE: Defining Example Content Front Matter - JSON\nDESCRIPTION: This JSON-formatted snippet represents a Hugo content file with front matter written in JSON. The 'title' key has the value 'JSON', followed by body content. It is processed by the conversion commands to verify JSON parsing and generation. Placement and formatting must conform to Hugo's requirements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/convert.txt#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"JSON\"\n}\nJSON content\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single Segment via CLI (Bash)\nDESCRIPTION: This command demonstrates how to render only a specific segment ('segment1') of a Hugo site using the `--renderSegments` command-line flag. This is useful for faster builds during development or for targeted updates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/segments.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhugo --renderSegments segment1\n```\n\n----------------------------------------\n\nTITLE: Rendering Unique Image Element with Ordinal - Hugo Go HTML Template\nDESCRIPTION: This Go HTML Template defines the img shortcode logic in Hugo. It retrieves the src parameter, fetches the resource, and assigns a zero-based sequential id using the Ordinal method. The template outputs an img HTML tag with unique id, source, dimensions, and error handling for missing parameters or resources. It relies on Hugo's .Get, resources.Get, errorf, and the Ordinal method; input parameters include 'src', and outputs are HTML elements or error messages as needed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Ordinal.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $src := \"\" }}\n{{ with .Get \"src\" }}\n  {{ $src = . }}\n  {{ with resources.Get $src }}\n    {{ $id := printf \"img-%03d\" $.Ordinal }}\n    <img id=\"{{ $id }}\" src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ else }}\n    {{ errorf \"The %q shortcode was unable to find %s. See %s\" $.Name $src $.Position }}\n  {{ end }}\n{{ else }}\n  {{ errorf \"The %q shortcode requires a 'src' argument. See %s\" .Name .Position }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site for Development – TOML\nDESCRIPTION: Establishes global settings for the Hugo site, specifically targeting development by specifying the base URL and disabling several output kinds (such as RSS, sitemap, robotsTXT, 404, taxonomy, and term pages). Requires Hugo to resolve configuration files and employs TOML syntax. Expected use: restricts build output and sets base URL. No inputs; outputs: config values for build. Limitation: applies only to Hugo builds reading this config.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_env.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Global Options with Hugo Jekyll Import\nDESCRIPTION: Details the global command-line options inherited from parent Hugo commands that can be used with `hugo import jekyll`. These options allow fine-grained control over the Hugo environment during import, such as specifying configuration files (`--config`), the output directory (`--destination`), the source directory (`--source`), logging verbosity (`--logLevel`), and build behavior (`--quiet`, `--renderToMemory`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_import_jekyll.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Triggering Deprecation Notices in Templates (Hugo HTML)\nDESCRIPTION: This HTML template snippet uses Hugo's template logic to conditionally invoke deprecation test helpers based on the current environment ('info', 'warn', or 'error'). Each conditional triggers a different level of deprecation notice using debug helpers. Dependencies include Hugo's templating engine and the debug functions 'TestDeprecationInfo', 'TestDeprecationWarn', and 'TestDeprecationErr'. Inputs are the environment variable and item identifiers; output is the generation of deprecation messages at the appropriate log level in Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/deprecate.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nDeprecate:\n{{ if eq hugo.Environment \"info\" }}\n    {{ debug.TestDeprecationInfo \"item\" \"alternative\" }}\n{{ end }}\n{{ if eq hugo.Environment \"warn\" }}\n    {{ debug.TestDeprecationWarn \"item\" \"alternative\" }}\n{{ end }}\n{{ if eq hugo.Environment \"error\" }}\n    {{ debug.TestDeprecationErr \"item\" \"alternative\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Google Analytics ID (Deprecated) in Hugo Templates\nDESCRIPTION: Demonstrates accessing the deprecated `SITE.GoogleAnalytics` variable within a Hugo template. This variable returns the Google Analytics tracking ID defined in the site's configuration. This variable was deprecated in Hugo v0.120.0 and it is recommended to use `Site.Config.Services.GoogleAnalytics.ID` instead.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/GoogleAnalytics.md#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\nSITE.GoogleAnalytics\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML front matter block defines essential metadata for a Hugo documentation page. It sets the main `title` ('Template functions'), the `linkTitle` ('templates') often used in menus, and a `description` explaining the page's focus on template system query functions. The `categories` and `keywords` fields are present but empty.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/templates/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Template functions\nlinkTitle: templates\ndescription: Use these functions to query the template system.\ncategories: []\nkeywords: []\n---\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML for Nested Section Rendering on the Auctions Page - html\nDESCRIPTION: Presents the HTML output generated by the same section listing template when used on the \\/auctions\\/ section page. It displays only the immediate subsections (e.g., months), each as a linked <h2> header. Highlights the context sensitivity of .Sections in Hugo templates and shows how subsection metadata produces different outputs compared to home page rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sections.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h2><a href=\"/auctions/2023-11/\">Auctions in November 2023</a></h2>\\n<h2><a href=\"/auctions/2023-12/\">Auctions in December 2023</a></h2>\n```\n\n----------------------------------------\n\nTITLE: Creating Hugo Archetype for Norwegian Bundle Content (Markdown with Go Template)\nDESCRIPTION: This template is designed for generating new Norwegian-language content bundles with Hugo. It mirrors the English archetype structure but is intended to be used as 'archetypes/mybundle/index.no.md' to scaffold new Norwegian content. The frontmatter fields are populated dynamically via Go template expressions, and the file includes an indicator for the active language. The dependencies and parameters are consistent with the English archetype, leveraging Hugo's internationalization support.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content_archetypedir.txt#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n\nSite Lang: {{ site.Language.Lang  }}.\t\n```\n\n----------------------------------------\n\nTITLE: Accessing Section in Hugo Templates\nDESCRIPTION: Shows how to get the name of the top-level section in which the file resides using the Section method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .Section }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using FuzzyWordCount Method in Hugo Templates\nDESCRIPTION: Returns the number of words in the content of the given page, rounded up to the nearest multiple of 100. For exact word counts, the WordCount method is recommended instead.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/FuzzyWordCount.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .FuzzyWordCount }} → 200\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo List Commands in go-test\nDESCRIPTION: This snippet tests various 'hugo list' commands using a pseudo test framework, asserting command outputs and checking for expected presence or absence of specific lines in stdout/stderr. It requires Hugo to be installed and a test framework interpreting constructs like '! stdout' and 'stdout'. It uses fixture content and configuration files, and checks filtered inclusion of drafts, future, expired, and all content. Input and output are based on mocked content states; outputs are validated as string matches. Limitations: This is not standard Go testing code but rather follows Hugo's internal test harness format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/list.txt#2025-04-23_snippet_0\n\nLANGUAGE: go-test\nCODE:\n```\n# Test the hugo list commands.\n\nhugo list drafts\n! stderr .\nstdout 'path,slug,title,date,expiryDate,publishDate,draft,permalink'\nstdout 'content/draft.md,draft,The Draft,2019-01-01T00:00:00Z,2032-01-01T00:00:00Z,2018-01-01T00:00:00Z,true,https://example.org/draft/'\nstdout 'draftexpired.md'\nstdout 'draftfuture.md'\n! stdout '/expired.md'\n\nhugo list future\nstdout 'path,slug,title,date,expiryDate,publishDate,draft,permalink'\nstdout 'future.md'\nstdout 'draftfuture.md'\n! stdout 'expired.md'\n\nhugo list expired\nstdout 'path,slug,title,date,expiryDate,publishDate,draft,permalink'\nstdout 'expired.md'\nstdout 'draftexpired.md'\n! stdout 'future.md'\n\nhugo list all\nstdout 'path,slug,title,date,expiryDate,publishDate,draft,permalink'\nstdout 'future.md'\nstdout 'draft.md'\nstdout 'expired.md'\nstdout 'draftexpired.md'\nstdout 'draftfuture.md'\n\nhugo list expired --clock 2000-01-01T00:00:00Z\n! stdout 'expired.md'\n\n```\n\n----------------------------------------\n\nTITLE: Issue 13475: Testing ChromaStyles Output Formatting - Bash\nDESCRIPTION: This snippet specifically tests for a previously reported issue (13475) with the output of 'hugo gen chromastyles' concerning empty object formatting. It runs the generator with and without the '--omitEmpty' flag and verifies precise stdout output content. Prerequisites include Hugo's latest CLI to reproduce or confirm resolution of edge cases. Inputs involve chromastyles flags and expected outputs are specific string patterns for empty CSS objects.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/gen.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhugo gen chromastyles --style monokai\nstdout '{  }'\nhugo gen chromastyles --omitEmpty --style monokai\n! stdout '\\{  \\}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Hugo Completion Command (Plaintext)\nDESCRIPTION: Shows the help option available specifically for the `hugo completion` command. Using `-h` or `--help` displays usage information, details about the command itself, and its subcommands for different shells.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for completion\n```\n\n----------------------------------------\n\nTITLE: Defining Interpreted String Literal in Go\nDESCRIPTION: A string literal enclosed in double quotes where backslash escapes are processed. Cannot contain unescaped newlines or double quotes without proper escaping. The text between quotes becomes the string value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/interpreted-string-literal.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Attributes in Hugo\nDESCRIPTION: Configuration to enable Markdown attributes for blockquotes in Hugo configuration file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/blockquotes.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.parser.attribute]\nblock = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Module Imports in TOML\nDESCRIPTION: Defines the base URL and imports a test module in a Hugo site configuration. Prerequisites include having Hugo and the referenced module available. The module import ensures test scenarios can access additional package dependencies as defined in hugoTestModule2, impacting the downstream package.json. Inputs are configuration values; output is the effective build configuration for Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_npm_withexisting.txt#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n-- hugo.toml --\\nbaseURL = \\\"https://example.org/\\\"\\n[module]\\n[[module.imports]]\\npath=\\\"github.com/gohugoio/hugoTestModule2\\\"\n```\n\n----------------------------------------\n\nTITLE: Building Hugo Extended/Deploy Edition from Source\nDESCRIPTION: Command to build and install the extended/deploy edition of Hugo from source with CGO enabled and deploy capabilities for cloud storage services.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCGO_ENABLED=1 go install -tags extended,withdeploy github.com/gohugoio/hugo@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Output Format and WebP Hint in Image Filter in Hugo go-html-template\nDESCRIPTION: Shows how to set the WebP format for output and apply the 'icon' hint, optimizing images for icon usage. The images.Process function receives two arguments: \\\"webp\\\" (output format) and \\\"icon\\\" (encoding hint), specifically for the WebP scenario within Hugo image pipelines.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Process.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"webp\" \"icon\" }}\n```\n\n----------------------------------------\n\nTITLE: Organizing Multilingual Content Directories - Text\nDESCRIPTION: This hierarchical structure outlines the arrangement of multilingual content for Hugo. Each language has its own directory under 'content/', such as 'en' for English and 'de' for German, including subfolders for specific sections and markdown files for individual content entries. This layout enables Hugo to associate language variants of pages for translation key mapping. No external dependencies; for documentation and planning purposes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/TranslationKey.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── de/\n│   ├── books/\n│   │   ├── buch-1.md\n│   │   └── book-2.md\n│   └── _index.md\n├── en/\n│   ├── books/\n│   │   ├── book-1.md\n│   │   └── book-2.md\n│   └── _index.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Front Matter and Shortcode Use in Hugo Content File (Text)\nDESCRIPTION: This Markdown-oriented text snippet shows a typical Hugo content file structure including TOML front matter metadata (title, date) and a call to a ref shortcode. The use of {{</* ... */>}} format indicates the content is pre-rendered HTML and does not require further processing after shortcode evaluation. The snippet demonstrates how front matter and shortcodes can coexist, producing a mixture of dynamic and static content for inclusion in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RenderShortcodes.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n+++\ntitle = 'About'\ndate = 2023-10-07T12:28:33-07:00\n+++\n\n{{</* ref \"privacy\" */>}}\n\nAn *emphasized* word.\n```\n\n----------------------------------------\n\nTITLE: Structuring Hugo Layouts Directory for Content Type - text\nDESCRIPTION: This snippet shows how to arrange layout templates for a specific content type ('page') inside the layouts/ directory. It demonstrates where to place single.html to render all 'page' type content, supporting Hugo's automatic template lookup process. Inputs are directory and file names; output is an organized layouts/ directory for matching content types to templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/lookup-order.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\\n└── page/\\n    └── single.html\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Module Dependency Graph using Shell Command\nDESCRIPTION: This shell command runs `hugo mod graph` to output the project's module dependency graph to standard output. It visually represents how different modules depend on each other, based on the project's configuration. The expected output indicates a specific dependency structure involving `commonmod` and `commonmod2`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_get_u.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod graph\nstdout 'commonmod@v1.0.1.*commonmod2@v1.0.2'\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Hugo Subcommands in Bash Scripts\nDESCRIPTION: This snippet illustrates how to test the Hugo CLI's handling of invalid or misspelled subcommands using inline bash scripts. Each test invokes Hugo with a specific invalid or mistyped command and verifies the expected standard error output messages. There are no direct external dependencies other than the Hugo executable itself; the tests expect certain error messages and suggestions returned on invalid input. Input parameters include the specific subcommand to test. Outputs are the messages printed to stderr. Limitations include dependency on the actual Hugo version and its error message formats.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/commands_errors.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Testing various error situations.\n\n! hugo mods\nstderr 'unknown command \"mods\" for \"hugo\"'\nstderr 'Did you mean this\\?'\n\n! hugo mod clea\nstderr 'Did you mean this\\?'\nstderr 'clean'\n\n! hugo mod foo\nstderr 'unknown command \"foo\" for \"hugo mod\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Goldmark Parser for Anchorize Behavior in Hugo\nDESCRIPTION: This TOML configuration snippet sets the autoHeadingIDType for the Goldmark Markdown parser in Hugo. It controls the sanitization logic used by the anchorize function and for generating heading IDs when rendering Markdown to HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/Anchorize.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.parser]\nautoHeadingIDType = 'github'\n```\n\n----------------------------------------\n\nTITLE: Empty Theme Configuration Template - TOML\nDESCRIPTION: Represents an empty configuration file for a Hugo theme. Typically used as a placeholder to verify that a 'hugo.toml' file exists in the theme directory. Has no parameters and can be extended as needed for theme-specific configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new.txt#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Setting Hugo Log Level to Warn via Command Line (Shell)\nDESCRIPTION: Shows the Hugo command using the `--logLevel` flag with the value `warn`. This setting ensures that both warning and error messages are displayed in the console during the build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/logging.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhugo --logLevel warn\n```\n\n----------------------------------------\n\nTITLE: Listing Future Content Using Hugo CLI - Bash\nDESCRIPTION: This snippet demonstrates the usage pattern for the \"hugo list future\" command, which outputs a list of site content scheduled for future publication based on their front-matter dates. The command can be customized with flags and arguments, and is typically run in a terminal where Hugo is installed. Input parameters include arbitrary flags and arguments, while output is a list of future-dated content items. Requires Hugo installed and a valid Hugo project directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_future.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo list future [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Generating Hugo Front Matter with Go Template\nDESCRIPTION: This snippet demonstrates how to use Go templating to generate front matter for a Hugo content file. It automatically sets the title based on the file name and includes placeholders for description, categories, keywords, and publish date.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/archetypes/news.md#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n---\ntitle: {{ replace .File.ContentBaseName \"-\" \" \" | strings.FirstUpper }}\ndescription:\ncategories: []\nkeywords: []\npublishDate: {{ .Date }}\n---\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Help Command in Bash\nDESCRIPTION: This command runs the Hugo CLI with the -h flag to display the help information. It verifies that the output contains a specific description of Hugo's main functionality.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/version.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo -h\nstdout 'hugo is the main command, used to build your Hugo site'\n```\n\n----------------------------------------\n\nTITLE: Verifying Non-Existence of 'resources' Directory using Shell Assertion\nDESCRIPTION: This command (or assertion, likely from a test script) checks if a directory named `resources` does not exist in the current working directory. In the context of Hugo, this directory is typically created during the build process for processed assets, so this likely verifies its absence before the first build. The exact syntax `! exists` might depend on the specific shell or testing tool used.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n! exists resources\n```\n\n----------------------------------------\n\nTITLE: Floating Point Number Example in Hugo\nDESCRIPTION: Example showing a floating point number with decimal places\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/floating-point.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n3.14159\n```\n\n----------------------------------------\n\nTITLE: Inherited Hugo Command Options\nDESCRIPTION: Lists the command-line options inherited from parent Hugo commands that can be used with `hugo list drafts`. These options control various aspects like configuration file paths, output directory, build environment, logging verbosity, and source directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_drafts.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Retrieving Main MediaType for a Resource in Hugo\nDESCRIPTION: This snippet shows how to extract the main type segment (e.g., 'image') of a resource's media type using Hugo Go templates. It calls .MediaType.MainType after fetching a resource. This code should be placed within a Hugo template and requires the resource to exist at the specified path. Output will be the main type string, with 'image' expected for typical image files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/MediaType.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/a.jpg\" }}\n  {{ .MediaType.MainType }} → image\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML for Home Page Menu\nDESCRIPTION: This HTML snippet shows the result of rendering the main menu when viewing the home page. The 'Home' link is marked as active.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Menus.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nav class=\"menu\">\n  <a class=\"active\" aria-current=\"page\" href=\"/\">Home</a>\n  <a href=\"/books/\">Books</a>\n  <a href=\"/films/\">Films</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for GoAT Diagrams\nDESCRIPTION: CSS example showing how to style GoAT diagrams by targeting the SVG element class. This customizes the font family used in the diagram.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/diagrams/Goat.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nsvg.foo {\n  font-family: \"Segoe UI\",\"Noto Sans\",Helvetica,Arial,sans-serif\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing Menu Entry Order with Hugo Templates\nDESCRIPTION: Template code that sorts menu entries by name in descending order using the ByName sorter with the Reverse method. It creates an unordered list with menu items linked to their respective URLs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu/Reverse.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main.ByName.Reverse }}\n    <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Capturing a Specific Taxonomy Object in Hugo Templates\nDESCRIPTION: Demonstrates how to access and store a specific taxonomy object (e.g., 'genres') in a variable within any Hugo template using the `.Site.Taxonomies` method. This requires the taxonomy to be defined in the site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/taxonomy/get-a-taxonomy-object.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomyObject := .Site.Taxonomies.genres }}\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Build Failure on Invalid Config using Shell\nDESCRIPTION: This snippet tests Hugo's behavior when encountering an invalid configuration file (`hugo.toml`). It expects the `hugo` command to fail (indicated by `!`), asserts that a 'failed to load config' error appears on standard error (stderr), and crucially asserts that the main help text *is not* printed to standard output (`! stdout`). This relies on the presence of the invalid `hugo.toml` defined later.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__errors.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# This should fail the build, print an error message to stderr, but no help output.\n! hugo\n! stdout 'hugo is the main command'\nstderr 'failed to load config'\n```\n\n----------------------------------------\n\nTITLE: Calling Audio Shortcode from Markdown Content (Text)\nDESCRIPTION: Shows how to invoke the custom 'audio' shortcode from within a Markdown content file. The parameter 'src' must be specified and points to the audio file to render. Outputs an <audio> tag at the location where the shortcode is used. Should be called within Markdown content rendered by Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n{{</* audio src=/audio/test.mp3 */>}}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for hugo mod graph (Plain Text)\nDESCRIPTION: Lists the command-line options inherited from parent Hugo commands that can also be used with 'hugo mod graph'. These flags provide general control over Hugo's execution, including configuration files, output destination, build environment, logging level, and theme directory path.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_graph.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Defining Expected package.json Content\nDESCRIPTION: This JSON file (`golden/package.json`) represents the expected state of the project's `package.json` after running `hugo mod npm pack` with the specified module imports. It includes both project-specific dependencies/devDependencies and those merged from the `hugoTestModule2` module (indicated in the comments section).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_npm.txt#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n-- golden/package.json --\n{\n  \"comments\": {\n    \"dependencies\": {\n      \"react-dom\": \"github.com/gohugoio/hugoTestModule2\"\n    },\n    \"devDependencies\": {\n      \"@babel/cli\": \"github.com/gohugoio/hugoTestModule2\",\n      \"@babel/core\": \"github.com/gohugoio/hugoTestModule2\",\n      \"@babel/preset-env\": \"github.com/gohugoio/hugoTestModule2\",\n      \"postcss-cli\": \"github.com/gohugoio/hugoTestModule2\",\n      \"tailwindcss\": \"github.com/gohugoio/hugoTestModule2\"\n    }\n  },\n  \"dependencies\": {\n    \"react-dom\": \"^16.13.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"7.8.4\",\n    \"@babel/core\": \"7.9.0\",\n    \"@babel/preset-env\": \"7.9.5\",\n    \"postcss-cli\": \"7.1.0\",\n    \"tailwindcss\": \"1.2.0\"\n  },\n  \"name\": \"script-mod_npm\",\n  \"version\": \"0.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Body Background Style (CSS)\nDESCRIPTION: This CSS snippet defines a simple rule within the `assets/css/styles.css` file. It sets the background color of the HTML body element to black (#000). This file serves as the input asset for the Hugo Pipes processing demonstrated in the layout template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings-postprocess.txt#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background-color: #000;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a branch for Hugo code changes\nDESCRIPTION: This command creates a new Git branch for implementing changes or fixes, using a branch name that references an issue number.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b iss1234\n```\n\n----------------------------------------\n\nTITLE: Adding String Values in Hugo Store\nDESCRIPTION: Demonstrates concatenating string values using the Add method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Store.Set \"greeting\" \"Hello\" }}\n{{ site.Store.Add \"greeting\" \"Welcome\" }}\n{{ site.Store.Get \"greeting\" }} → HelloWelcome\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Hugo Testing in go.mod\nDESCRIPTION: Specifies the Go module path and minimum version for use in Hugo module tests. Requires Go 1.20 or later and a compatible Go toolchain. Inputs are the module path and Go version; output is a valid go.mod file for dependency resolution. This file enables importing code and dependencies in Go-based Hugo modules.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_npm_withexisting.txt#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\\nmodule github.com/gohugoio/hugoTestModule\\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Organizing Multilingual Content in Hugo Project - Text Directory Tree\nDESCRIPTION: Shows the directory tree structure for organizing language-specific content in a Hugo project. Each language has its own subdirectory with translated books and section index files. This layout enables Hugo to resolve and associate corresponding translations based on directory hierarchy and filenames.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/AllTranslations.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── de/\n│   ├── books/\n│   │   ├── book-1.md\n│   │   └── book-2.md\n│   └── _index.md\n├── en/\n│   ├── books/\n│   │   ├── book-1.md\n│   │   └── book-2.md\n│   └── _index.md\n├── fr/\n│   ├── books/\n│   │   └── book-1.md\n│   └── _index.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code with Argument Syntax in Hugo\nDESCRIPTION: Creates a QR code using the self-closing shortcode syntax, passing the text to encode as an argument. This example generates a QR code for the Hugo website URL.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/qr.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{</* qr text=\"https://gohugo.io\" /*/>}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Previous/Next Navigation in Hugo Single Page Template\nDESCRIPTION: Hugo template for single pages that implements previous and next navigation links based on the current section's pages sorted by weight.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/pages/next-and-prev.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $pages := .CurrentSection.Pages.ByWeight }}\n\n{{ with $pages.Prev . }}\n  <a href=\"{{ .RelPermalink }}\">Previous</a>\n{{ end }}\n\n{{ with $pages.Next . }}\n  <a href=\"{{ .RelPermalink }}\">Next</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on NixOS\nDESCRIPTION: Command to install the extended edition of Hugo on NixOS using the nix-env package manager. NixOS includes Hugo in its standard package repository.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnix-env -iA nixos.hugo\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Padding Filter in Go HTML Template\nDESCRIPTION: Defines an image filter using `images.Padding` to add 20px vertical (top/bottom) and 40px horizontal (left/right) padding with the specific hexadecimal color `#976941`. The resulting `$filter` variable stores the filter definition, ready to be applied to an image resource using the `.Filter` method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Padding.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Padding 20 40 \"#976941\" }}\n```\n\n----------------------------------------\n\nTITLE: Example Timer Output in Hugo Console\nDESCRIPTION: Sample output from a debug.Timer showing the name, count, total duration, average time, and median time for the timed operation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/debug/Timer.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nINFO  timer:  name TestSqrt count 1002 duration 2.496017496s average 2.491035ms median 2.282291ms\n```\n\n----------------------------------------\n\nTITLE: Example Content Structure with Taxonomy Terms\nDESCRIPTION: Displays an example directory structure for content files (.md) within a Hugo project. It indicates how taxonomy terms (e.g., 'suspense', 'romance' for the 'genres' taxonomy) are assigned to individual content pages via front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/taxonomy/get-a-taxonomy-object.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── books/\n│   ├── and-then-there-were-none.md --> genres: suspense\n│   ├── death-on-the-nile.md        --> genres: suspense\n│   └── jamaica-inn.md              --> genres: suspense, romance\n│   └── pride-and-prejudice.md      --> genres: romance\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Hugo Privacy Configuration for Instagram Embeds\nDESCRIPTION: Shows how to configure Instagram-related privacy settings in Hugo, including options to disable the shortcode or enable simple mode for static card generation without JavaScript.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/instagram.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{< code-toggle config=privacy.instagram />}}\n```\n\n----------------------------------------\n\nTITLE: Dividing Numbers Using math.Div in Hugo (Go HTML Template)\nDESCRIPTION: This snippet shows how to use the 'div' function in a Hugo template to divide multiple numbers. The first parameter (12) is divided by the subsequent parameters (3, 2) sequentially, producing the result 2. Dependencies: Hugo templating environment. Parameters: the numbers to be divided; at least two inputs are required. Returns either an integer or a float based on input types. Suitable for outputting computed values within templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Div.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ div 12 3 2 }} → 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL and Disabling Output Kinds in Hugo (TOML)\nDESCRIPTION: This `hugo.toml` configuration file sets the base URL for the Hugo site to `http://example.org/`. It also uses the `disableKinds` directive to prevent Hugo from generating RSS feeds, sitemaps, robots.txt, 404 pages, and taxonomy/term pages, likely to streamline the test case and focus on core page generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Partials with templates.Exists in Hugo Go Templates\nDESCRIPTION: This Go HTML Template snippet demonstrates how to use the `templates.Exists` function to check if a dynamically constructed partial template path exists before attempting to render it. It first uses `printf` to create a path based on the current content's `.Type`. Then, `templates.Exists` checks if a file exists within the `partials` directory matching this path. If true, the specific partial is rendered using the `partial` function; otherwise, a fallback default partial (`headers/default.html`) is rendered. This allows for flexible template structures with type-specific overrides.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/templates/Exists.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $partialPath := printf \"headers/%s.html\" .Type }}\n{{ if templates.Exists ( printf \"partials/%s\" $partialPath ) }}\n  {{ partial $partialPath . }}\n{{ else }}\n  {{ partial \"headers/default.html\" . }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Front Matter in YAML\nDESCRIPTION: This YAML block constitutes the front matter for a Hugo content file. It defines key metadata properties: 'title' sets the page title, 'description' provides a brief summary, 'categories' and 'keywords' aid in content organization and SEO, 'weight' influences the page's order in lists, and 'aliases' specifies alternative URLs that redirect to this page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Troubleshooting\ndescription: Use these techniques when troubleshooting your site.\ncategories: []\nkeywords: []\nweight: 10\naliases: [/templates/template-debugging/]\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Positional Parameters via `.Params` Slice (Go HTML Template)\nDESCRIPTION: Demonstrates how to access shortcode parameters using the `.Params` method when the shortcode is called with positional arguments. In this case, `.Params` behaves like a slice (an ordered list). The `index` function is used with zero-based indices to retrieve the values from the slice (e.g., `index .Params 0`, `index .Params 1`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_13\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ index .Params 0 }} → a.jpg\n{{ index .Params 1 }} → 300\n{{ index .Params 1 }} → A white kitten\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Test Project\nDESCRIPTION: This `go.mod` file defines the Go module for the test project itself, named `github.com/gohugoio/hugoTestModule`. It specifies the Go language version (1.20) required for the project.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_npm.txt#2025-04-23_snippet_3\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule github.com/gohugoio/hugoTestModule\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Title in a Partial Template using Page.Page\nDESCRIPTION: Example of a partial template that accesses the page title using .Page.Page syntax, which works regardless of whether the partial is called from a shortcode or a page template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Page.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\nThe page title is: {{ .Page.Title }}\n```\n\n----------------------------------------\n\nTITLE: Embedding a GoAT Diagram using Markdown Fenced Code Block\nDESCRIPTION: Demonstrates the Markdown syntax for embedding a GoAT (ASCII) diagram within Hugo content. Hugo natively supports rendering these diagrams using an embedded code block render hook when the language identifier `goat` is used (shown here as `txt` in the example source, but intended to be `goat`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n````txt\n```goat\n      .               .                .               .--- 1          .-- 1     / 1\n     / \\              |                |           .---+            .-+         +\n    /   \\         .---+---.         .--+--.        |   '--- 2      |   '-- 2   / \\ 2\n   +     +        |       |        |       |    ---+            ---+          +\n  / \\   / \\     .-+-.   .-+-.     .+.     .+.      |   .--- 3      |   .-- 3   \\ / 3\n /   \\ /   \\    |   |   |   |    |   |   |   |     '---+            '-+         +\n 1   2 3   4    1   2   3   4    1   2   3   4         '--- 4          '-- 4     \\ 4\n\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Basic Alphabetical Taxonomy Sorting in Hugo\nDESCRIPTION: Gets an ordered taxonomy sorted alphabetically by term using the Alphabetical method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Alphabetical.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomyObject.Alphabetical }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Title in Hugo Front Matter TOML\nDESCRIPTION: Provides an example front matter configuration in TOML for defining a page resource's title in Hugo. The front matter includes both the page title and a resource in the 'resources' array, specifying a custom title for the resource. Hugo reads these properties to expose them as metadata within templates. Inputs are TOML key-value pairs, outputs are metadata fields available in the template execution context for the page and its resources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Title.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntitle = 'Example'\n[[resources]]\nsrc = 'images/a.jpg'\ntitle = 'A beautiful sunrise in Bryce Canyon'\n```\n\n----------------------------------------\n\nTITLE: Using the X Shortcode in Hugo Markdown\nDESCRIPTION: Example of how to include the x shortcode in your Hugo Markdown files to embed an X post with specified user and post ID parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/x.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{</* x user=\"SanDiegoZoo\" id=\"1453110110599868418\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Options for hugo mod graph (Plain Text)\nDESCRIPTION: Lists the command-line flags specifically available for the 'hugo mod graph' command. These options control aspects like the base URL, cache directory, content directory, theme selection, and cleaning the module cache.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_graph.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n      --clean                    delete module cache for dependencies that fail verification\n  -c, --contentDir string        filesystem path to content directory\n  -h, --help                     help for graph\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output Using Resource Parameters\nDESCRIPTION: Displays the final HTML generated by Hugo, showing how the resource parameters defined in the front matter and accessed in the template were successfully rendered in the `img` tag's `alt` attribute and the `figcaption` text.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Params.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<figure>\n  <img alt=\"Photograph of black cat\" src=\"/posts/post-1/images/a.jpg\" width=\"600\" height=\"400\">\n  <figcaption>Felix the cat is vicious</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Cache for All Resources in Hugo (Hugo Config Format)\nDESCRIPTION: This configuration snippet disables HTTP caching for all remote resources by setting the 'excludes' pattern to '**' and leaving 'includes' empty. It is intended for use in Hugo's configuration files, and it controls which resources the HTTP cache applies to, using glob-style matching patterns. No external dependencies are required; simply copy the example into the relevant Hugo site config file as a TOML, YAML, or HCL block depending on project needs. Key parameters: 'excludes' (list of glob patterns to skip caching), 'includes' (list to specify resources to cache).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/http-cache.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n[HTTPCache.cache.for]\\nexcludes = ['**']\\nincludes = []\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Deployment Target in TOML\nDESCRIPTION: Example configuration for setting up a deployment target in Hugo's configuration file. The minimal required parameters are 'name' and 'url', specifying the target name and destination bucket URL.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-hugo-deploy.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[deployment]\n  [[deployment.targets]]\n    name = 'production'\n    url = 's3://my_bucket?region=us-west-1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Hugo Site Settings (TOML)\nDESCRIPTION: This TOML file defines basic configuration for the Hugo test site. It sets the site title to \"Hugo Server Test\", the base URL to \"https://example.org/\", and disables the generation of taxonomy, term, and sitemap pages using the `disableKinds` directive. This configuration is used by the `hugo server` command in the test script.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_content.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Server Test\"\nbaseURL = \"https://example.org/\"\ndisableKinds = [\"taxonomy\", \"term\", \"sitemap\"]\n```\n\n----------------------------------------\n\nTITLE: Illustrative JSON Data Structure for js.Batch Runner Input\nDESCRIPTION: This JSON object represents the data structure passed as an argument to a js.Batch runner script's main function. It includes the group ID, an array of scripts (each with its ID, a placeholder for the JavaScript binding, and an array of instances), and instance details (ID and parameters). The `JAVASCRIPT_BINDING` indicates where the live import of the script's specified export would be injected.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"leaflet\",\n    \"scripts\": [\n        {\n            \"id\": \"mapjsx\",\n            \"binding\": JAVASCRIPT_BINDING,\n            \"instances\": [\n                {\n                    \"id\": \"0\",\n                    \"params\": {\n                        \"c\": \"h-64\",\n                        \"lat\": 48.8533173846729,\n                        \"lon\": 2.3497416090232535,\n                        \"r\": \"map.jsx\",\n                        \"title\": \"Cathédrale Notre-Dame de Paris\",\n                        \"zoom\": 23\n                    }\n                },\n                {\n                    \"id\": \"1\",\n                    \"params\": {\n                        \"c\": \"h-64\",\n                        \"lat\": 59.96300872062237,\n                        \"lon\": 10.663529183196863,\n                        \"r\": \"map.jsx\",\n                        \"title\": \"Holmenkollen\",\n                        \"zoom\": 3\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site Settings - TOML Configuration\nDESCRIPTION: This TOML configuration file sets core parameters for a Hugo site, including the site title, base URL, and disables generation of taxonomy, term, and sitemap pages. It is required by Hugo to define site-wide settings and will be read automatically when starting the server. No explicit dependencies other than Hugo itself. The configuration is minimal and tailored for testing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__error_recovery_edit_content.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Hugo Server Test\"\nbaseURL = \"https://example.org/\"\ndisableKinds = [\"taxonomy\", \"term\", \"sitemap\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site in TOML\nDESCRIPTION: This TOML configuration file sets up basic settings for a Hugo site, including the title, base URL, and disabled content types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_render_static_to_disk.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Hugo Server Test\"\nbaseURL = \"https://example.org/\"\ndisableKinds = [\"taxonomy\", \"term\", \"sitemap\"]\n```\n\n----------------------------------------\n\nTITLE: Listing Command-Specific Flags for hugo mod npm - Plaintext\nDESCRIPTION: Shows the specific flag available for the 'hugo mod npm' command, namely '-h, --help', which displays command help information. No dependencies are required other than having Hugo installed. This snippet is typically used interactively to display usage guidance in the console.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_npm.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for npm\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Base URLs in Hugo - TOML\nDESCRIPTION: Defines a Hugo configuration with two languages ('de' and 'en'), each having its own unique base URL, language code, and additional metadata. The config uses TOML format and enables defaultContentLanguageInSubdir, organizing language content under their respective subdirectories. Required for Hugo projects with multilingual content where languages are accessed at separate domain or path roots. Parameters include baseURL for each language and weights to determine display order.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/IsMultihost.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\ndefaultContentLanguage = 'de'\ndefaultContentLanguageInSubdir = true\n[languages]\n  [languages.de]\n    baseURL = 'https://de.example.org/'\n    languageCode = 'de-DE'\n    languageName = 'Deutsch'\n    title = 'Projekt Dokumentation'\n    weight = 1\n  [languages.en]\n    baseURL = 'https://en.example.org/'\n    languageCode = 'en-US'\n    languageName = 'English'\n    title = 'Project Documentation'\n    weight = 2\n```\n\n----------------------------------------\n\nTITLE: Accessing Path in Hugo Templates\nDESCRIPTION: Demonstrates how to retrieve the file path relative to the content directory using the Path method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .File }}\n  {{ .Path }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Site-Relative Alias in a Multilingual Hugo Site (TOML)\nDESCRIPTION: Illustrates specifying a language-prefixed alias in TOML front matter for multilingual Hugo sites. Aliases include the language folder to ensure proper redirects for localized content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_9\n\nLANGUAGE: TOML\nCODE:\n```\naliases = ['/de/posts/previous-file-name']\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Date with Zulu (UTC) Time in Hugo\nDESCRIPTION: Illustrates Hugo parsing an ISO 8601 formatted date string ('2023-10-15T13:18:50Z') ending with 'Z', which signifies UTC. Hugo correctly identifies the time zone as 'Etc/UTC'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/parsable-date-time-strings.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n2023-10-15T13:18:50Z\n```\n\n----------------------------------------\n\nTITLE: Defining Content Page P1 with Title Front Matter - Markdown\nDESCRIPTION: This Markdown file represents the content for the P1 section of the site, specifying the page title as 'P1' through front matter. Hugo uses this file to generate the /p1/ route, and it is subject to simulated error/correction in the test script. Must be present in the content directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__error_recovery_edit_content.txt#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: P1\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Module Vendor with Specific Options (CLI)\nDESCRIPTION: Lists command-line options available specifically for the `hugo mod vendor` command. These flags allow customization of the vendoring process, including specifying paths (`--baseURL`, `--cacheDir`, `--contentDir`), selecting themes (`--theme`), choosing render segments (`--renderSegments`), or viewing help (`--help`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_vendor.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n  -c, --contentDir string        filesystem path to content directory\n  -h, --help                     help for vendor\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Gen ChromaStyles and Help Messages - Bash\nDESCRIPTION: This segment tests the 'hugo gen chromastyles' command, which generates CSS for the Chroma code highlighter, validating both help and output. It confirms the presence of help messages, the ability to specify themes (e.g., monokai), and correct success messages. It also tests the robustness of the command against invalid style values and verifies error output in stderr. Requires Hugo installed and access to CLI. Expects inputs for style names and outputs for CSS generation or error notification.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/gen.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhugo gen chromastyles -h\nstdout 'Generate CSS stylesheet for the Chroma code highlighter'\nhugo gen chromastyles --style monokai\nstdout 'Generated using: hugo gen chromastyles --style monokai'\n! hugo gen chromastyles --style __invalid_style__\nstderr 'invalid style: __invalid_style__'\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Details Elements\nDESCRIPTION: CSS selectors to target and style different parts of the details element, including the details element itself, the summary element, and the content inside.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/details.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* target the details element */\ndetails { }\n\n/* target the summary element */\ndetails > summary { }\n\n/* target the children of the summary element */\ndetails > summary > * { }\n\n/* target the content */\ndetails > :not(summary) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Entries with and without Identifiers in Hugo\nDESCRIPTION: Example of a Hugo menu configuration where one entry has an identifier property and another doesn't. This demonstrates when KeyName would return the identifier or fall back to the name property.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/KeyName.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[menus.main]]\nidentifier = 'about'\nname = 'About'\npageRef = '/about'\nweight = 10\n\n[[menus.main]]\nname = 'Contact'\npageRef = '/contact'\nweight = 20\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Structure in Hugo\nDESCRIPTION: Shows the directory structure for a simple Hugo site with products.md and _index.md files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/PageRef.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── products.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on Void Linux\nDESCRIPTION: Command to install the extended edition of Hugo on Void Linux using the xbps package manager. This installs the latest version available in the Void Linux repository.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsudo xbps-install -S hugo\n```\n\n----------------------------------------\n\nTITLE: Capturing Overlay Image Resource with Hugo in Go HTML Template\nDESCRIPTION: This snippet shows how to safely retrieve an overlay image resource in a Hugo template using resources.Get. It conditionally assigns the result to a variable or throws an error if the image is unavailable. This enables safe referencing of the image in subsequent filter operations. It depends on Hugo\\'s resources module; the main parameter is the path to the image resource; output is assigned to $overlay if found.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Overlay.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $overlay := \"\" }}\\n{{ $path := \"images/logo.png\" }}\\n{{ with resources.Get $path }}\\n  {{ $overlay = . }}\\n{{ else }}\\n  {{ errorf \"Unable to get resource %q\" $path }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Trimming Leading Zeros Before Integer Conversion with Hugo int - Go HTML Template\nDESCRIPTION: This one-liner demonstrates removing leading zeros from a string using the TrimLeft function before converting the result to an integer with Hugo's int function. This approach is necessary because leading zeros in a string input are interpreted as octal. Dependencies include Hugo template functions. Expects two string arguments: the character to trim and the value. The output is the integer value of the trimmed string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToInt.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ strings.TrimLeft \"0\" \"0011\" | int }} → 11\n```\n\n----------------------------------------\n\nTITLE: Creating a Flowchart using GoAT in Hugo\nDESCRIPTION: A humorous flowchart diagram that illustrates understanding of flowcharts. This uses GoAT syntax for ASCII art diagrams with boxes, connecting lines, and conditional paths. The flowchart follows a decision tree with 'yes' and 'no' paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_10\n\nLANGUAGE: goat\nCODE:\n```\n   _________________                                                              \n  ╱                 ╲                                                     ┌─────┐ \n ╱ DO YOU UNDERSTAND ╲____________________________________________________│GOOD!│ \n ╲ FLOW CHARTS?      ╱yes                                                 └──┬──┘ \n  ╲_________________╱                                                        │    \n           │no                                                               │    \n  _________▽_________                    ______________________              │    \n ╱                   ╲                  ╱                      ╲    ┌────┐   │    \n╱ OKAY, YOU SEE THE   ╲________________╱ ... AND YOU CAN SEE    ╲___│GOOD│   │    \n╲ LINE LABELED 'YES'? ╱yes             ╲ THE ONES LABELED 'NO'? ╱yes└──┬─┘   │    \n ╲___________________╱                  ╲______________________╱       │     │    \n           │no                                     │no                 │     │    \n   ________▽_________                     _________▽__________         │     │    \n  ╱                  ╲    ┌───────────┐  ╱                    ╲        │     │    \n ╱ BUT YOU SEE THE    ╲___│WAIT, WHAT?│ ╱ BUT YOU JUST         ╲___    │     │    \n ╲ ONES LABELED 'NO'? ╱yes└───────────┘ ╲ FOLLOWED THEM TWICE? ╱yes│   │     │    \n  ╲__________________╱                   ╲____________________╱    │   │     │    \n           │no                                     │no             │   │     │    \n       ┌───▽───┐                                   │               │   │     │    \n       │LISTEN.│                                   └───────┬───────┘   │     │    \n       └───┬───┘                                    ┌──────▽─────┐     │     │    \n     ┌─────▽────┐                                   │(THAT WASN'T│     │     │    \n     │I HATE YOU│                                   │A QUESTION) │     │     │    \n     └──────────┘                                   └──────┬─────┘     │     │    \n                                                      ┌────▽───┐       │     │    \n                                                      │SCREW IT│       │     │    \n                                                      └────┬───┘       │     │    \n                                                           └─────┬─────┘     │    \n                                                                 │           │    \n                                                                 └─────┬─────┘    \n                                                               ┌───────▽──────┐   \n                                                               │LET'S GO DRING│   \n                                                               └───────┬──────┘   \n                                                             ┌─────────▽─────────┐\n                                                             │HEY, I SHOULD TRY  │\n                                                             │INSTALLING FREEBSD!│\n                                                             └───────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Markdown Blockquote with Attributes\nDESCRIPTION: Example of a Markdown blockquote that includes cite and caption attributes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/blockquotes.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> Some text\n{cite=\"https://gohugo.io\" caption=\"Some caption\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents and Capturing Output - Shell\nDESCRIPTION: This shell snippet demonstrates listing the contents of the current directory using 'ls .' to verify directory state after attempting to initialize a Hugo site. It captures standard output and standard error: 'stderr' captures the specific error when Hugo cannot find a config file or directory, and 'stdout' shows the directory is empty. This pattern is useful for validating command results in system-level scripts and automated tests.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__noconfig.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nls .\n```\n\nLANGUAGE: shell\nCODE:\n```\nstderr 'Unable to locate config file or config directory'\n```\n\nLANGUAGE: shell\nCODE:\n```\nstdout 'Empty dir'\n```\n\n----------------------------------------\n\nTITLE: Contour Integration Proof Using Residue Calculus\nDESCRIPTION: David Speyer's proof using contour integration of z^(-2k)cot(πz) around a square, computing the residues at z=0 and z=m (m≠0), and showing that the sum equals π²/6.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_15\n\nLANGUAGE: latex\nCODE:\n```\n\\oint z^{-2k} \\cot (\\pi z) dz\n```\n\n----------------------------------------\n\nTITLE: Defining Content Page P2 with Title Front Matter - Markdown\nDESCRIPTION: This is a minimal Markdown file specifying front matter for the 'P2' page. The title is set as 'P2', utilized by Hugo to generate the /p2/ page during server testing. No dependencies except Hugo's standard file processing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__error_recovery_edit_content.txt#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: P2\n---\n```\n\n----------------------------------------\n\nTITLE: Custom GoAT Render Hook HTML Output\nDESCRIPTION: The HTML output produced by the custom GoAT render hook, showing how the SVG is wrapped in a figure element with the specified class and caption.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/diagrams/Goat.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<figure id=\"diagram-1\">\n  <svg class=\"foo\" width=\"272\" height=\"57\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    ...\n  </svg>\n  <figcaption>Diagram 1: Example</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Committing changes to Hugo codebase\nDESCRIPTION: This command commits changes to the local branch with verbose output to review the changes being committed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a -v\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Command-Line Flags for hugo mod - Shell\nDESCRIPTION: Details all command-line flags inherited from parent commands in Hugo, including configuration file selection, environment control, logging, and build options. This snippet describes the broader set of parameters available when running 'hugo mod' and its subcommands. No dependencies are needed to read the help output, but actual command execution requires the Hugo CLI installed. Expected input is direct invocation of the CLI; outputs are the flag descriptions to standard output. Limitation: Reflects inherited flags only and does not show command execution.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\\n      --config string              config file (default is hugo.yaml|json|toml)\\n      --configDir string           config dir (default \\\"config\\\")\\n  -d, --destination string         filesystem path to write files to\\n  -e, --environment string         build environment\\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\\n      --logLevel string            log level (debug|info|warn|error)\\n      --noBuildLock                don't create .hugo_build.lock file\\n      --quiet                      build in quiet mode\\n      -M, --renderToMemory             render to memory (mostly useful when running the server)\\n      -s, --source string              filesystem path to read files relative from\\n      --themesDir string           filesystem path to themes directory\\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Hugo Version in Command Line\nDESCRIPTION: Command to check the installed version of Hugo, ensuring it meets the minimum required version for this tutorial.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/quick-start.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhugo version\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Content and Resource File Structure - Directory Layout - text\nDESCRIPTION: Shows a representative directory tree of a page bundle in Hugo, highlighting the distinction between the main content file (`index.md`) and various resource files. Each resource's type is noted, clarifying which files are treated as content and which as resources for the page. This structure is foundational for understanding Hugo's content organization and processing logic.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/content-types.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n└── example/\\n    ├── index.md  <-- content\\n    ├── a.adoc    <-- resource (resource type: page)\\n    ├── b.html    <-- resource (resource type: page)\\n    ├── c.md      <-- resource (resource type: page)\\n    ├── d.org     <-- resource (resource type: page)\\n    ├── e.pdc     <-- resource (resource type: page)\\n    ├── f.rst     <-- resource (resource type: page)\\n    ├── g.jpg     <-- resource (resource type: image)\\n    └── h.png     <-- resource (resource type: image)\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output Example\nDESCRIPTION: The HTML output rendered from using the value-returning partial in a conditional statement.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/return.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>42 is even</p>\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Flags in Hugo CLI using Shell\nDESCRIPTION: This snippet tests Hugo's response to an unknown command-line flag (`--asdf`). It expects the command to fail (indicated by `!`) and asserts that an 'unknown flag' error message is printed to standard error (stderr) while the main Hugo help text is printed to standard output (stdout).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__errors.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Invalid flag. Should print an error message to stderr and the help to stdout.\n! hugo --asdf\nstderr 'unknown flag: --asdf'\nstdout 'hugo is the main command'\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Hugo Commands (Shell)\nDESCRIPTION: Lists common options inherited from parent Hugo commands that can be used with `hugo list all`. These flags control aspects like configuration file location (`--config`), output directory (`--destination`), source directory (`--source`), environment (`--environment`), logging (`--logLevel`), and rendering behavior (`--renderToMemory`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_all.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Calculating Sine with math.Sin in Hugo Templates\nDESCRIPTION: This snippet demonstrates the usage of the `math.Sin` function within a Hugo template. It calculates the sine of the number 1 (treated as radians) and outputs the result. The function requires one argument, the number whose sine is to be calculated, and returns a float64.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Sin.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Sin 1 }} → 0.8414709848078965\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by Boolean True - go-html-template\nDESCRIPTION: Selects site pages with the 'exclude' front matter parameter set to true by using the 'eq' operator. The filter excludes undefined 'exclude' fields. Requires Hugo templates and expects boolean values. Outputs a list of matched pages as HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Where.md#2025-04-23_snippet_16\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\\n  {{ range where .Site.RegularPages \"Params.exclude\" \"eq\" true }}\\n    <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\\n  {{ end }}\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameter for Hugo Page Resolution\nDESCRIPTION: Specifies the path parameter used to locate the target page. The path can be absolute (with leading slash) or relative, resolved first against the current page and then the entire site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/ref-and-relref-options.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npath\n: (`string`) The path to the target page. Paths without a leading slash (`/`) are resolved first relative to the current page, and then relative to the rest of the site.\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo CLI Flags and Options - Shell\nDESCRIPTION: This snippet lists possible command-line flags for the 'hugo config' command, allowing customization of aspects such as base URL, content directory, format (TOML/YAML/JSON), themes, and more. Each option represents a configurable parameter supplied as an argument when invoking the 'hugo config' command. The input consists of various command-line flags with optional values; output affects the scope or detail of the configuration display.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_config.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n  -c, --contentDir string        filesystem path to content directory\n      --format string            preferred file format (toml, yaml or json) (default \"toml\")\n  -h, --help                     help for config\n      --lang string              the language to display config for. Defaults to the first language defined.\n      --printZero                include config options with zero values (e.g. false, 0, \"\") in the output\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: I18n Translations for Alert Labels\nDESCRIPTION: TOML configuration for i18n translation of alert type labels in multiple languages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/blockquotes.md#2025-04-23_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\ncaution = 'Caution'\nimportant = 'Important'\nnote = 'Note'\ntip = 'Tip'\nwarning = 'Warning'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Language Prefix in Hugo Template - go-html-template\nDESCRIPTION: These go-html-template snippets demonstrate how to use the .Site.LanguagePrefix property in Hugo templates to output the URL path component associated with the current language, depending on which language version is being visited. The output varies based on both the content language and the defaultContentLanguageInSubdir setting in the configuration. These snippets require a properly configured multilingual Hugo site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/LanguagePrefix.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.LanguagePrefix }} → \"\"\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.LanguagePrefix }} → /en\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.LanguagePrefix }} → /de\n```\n\n----------------------------------------\n\nTITLE: Defining Default Single Page Layout (HTML/Hugo Template)\nDESCRIPTION: Provides the content for the default single page template located at 'layouts/_default/single.html'. This minimal template will be used by Hugo to render individual content pages (like the post defined by 'content/posts/post-1/index.md') and outputs only the static text 'Single.'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats2.txt#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/_default/single.html --\nSingle.\n```\n\n----------------------------------------\n\nTITLE: Defining Text Resource in Hugo Bundle (Plain Text)\nDESCRIPTION: This snippet provides an example of a plain text resource file that can be included within a Hugo content bundle. Named 'file.txt', it serves as a static asset that could be referenced by content pages or used directly for file downloads. No dependencies or special processing are required. This file demonstrates how non-Markdown resources are structured within Hugo bundles.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content_archetypedir.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nA text file.\n```\n\n----------------------------------------\n\nTITLE: Displaying Single Content Page with Title and BaseURL - Go HTML Template\nDESCRIPTION: This layout template is used for rendering individual content pages in Hugo, showing the page Title and site BaseURL with pipe delimiters. It relies on Hugo's Go template engine and is typically placed in layouts/_default/single.html. Useful for confirming content rendering and variable substitution during tests.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__error_recovery_edit_content.txt#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\nTitle: {{ .Title }}|BaseURL: {{ site.BaseURL }}|\n```\n\n----------------------------------------\n\nTITLE: Inherited Command-Line Options for hugo server trust - Shell\nDESCRIPTION: This block lists the inherited command-line options shared from Hugo's parent commands, enabling additional customization of the build environment, configuration files, file paths, and output behavior. Useful for advanced users scripting or automating Hugo workflows.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_server_trust.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Accessing Plural Taxonomy Name in Term Template - Hugo Go HTML Template\nDESCRIPTION: This Go HTML Template snippet outputs the plural form of a taxonomy (e.g., 'tags'), accessed via the Data.Plural property in a Hugo term template. Dependencies: Hugo term page; uses .Data.Plural from the page context. Input: Term page context. Output: The plural taxonomy name as a string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/term.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Data.Plural }} → tags\n```\n\n----------------------------------------\n\nTITLE: Defining Example Content Front Matter - YAML\nDESCRIPTION: This YAML snippet provides a Hugo content file with YAML front matter. The 'title' is set to 'YAML', and the content demonstrates correct YAML delimiters. It is part of the data set used to validate Hugos' ability to handle YAML front matter transformations during conversion tests.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/convert.txt#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: YAML\n---\nYAML content\n```\n\n----------------------------------------\n\nTITLE: Defining Taxonomies in Hugo Configuration (TOML)\nDESCRIPTION: Shows how to declare taxonomies like 'genre' and 'author' and their corresponding plural forms ('genres', 'authors') in the Hugo site configuration file (e.g., hugo.toml) using TOML syntax. This setup is a prerequisite for using taxonomies within the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/taxonomy/get-a-taxonomy-object.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n[taxonomies]\ngenre = 'genres'\nauthor = 'authors'\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Kind in Hugo Templates\nDESCRIPTION: A Go HTML template code snippet showing how to access and display the 'Kind' property of the current page in Hugo templates. This returns the page kind as one of 'home', 'page', 'section', 'taxonomy', or 'term'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Kind.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Kind }}\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on Fedora-based Distributions\nDESCRIPTION: Command to install the extended edition of Hugo on Fedora-based Linux distributions (including CentOS and Red Hat Enterprise Linux) using the dnf package manager.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install hugo\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Local JSON Example\nDESCRIPTION: Shows a basic directory structure for accessing local JSON files in Hugo projects.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── other-files/\n    └── books.json\n```\n\n----------------------------------------\n\nTITLE: Defining Translations for Reserved Keys (TOML)\nDESCRIPTION: Shows how to provide translations for keys normally reserved by the underlying go-i18n package (like 'one', 'few', 'description'). This is done by prepending the key with an underscore in the translation file (e.g., `i18n/es.toml`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n_description = 'descripción'\n_few = 'pocos'\n_many = 'muchos'\n_one = 'uno'\n_other = 'otro'\n_two = 'dos'\n_zero = 'cero'\n```\n\n----------------------------------------\n\nTITLE: Available Options for Content Creation – Hugo CLI – Shell\nDESCRIPTION: Lists the available command-line options (flags) for the 'hugo new content' command, as output by the CLI help system. These options control aspects such as the base URL, cache directory, content directory, file overwrite behavior, editor, kind, theme, and render segments. Intended for users customizing content creation; inputs are CLI flags, and outputs affect command execution. No explicit code execution here; primarily for user reference.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new_content.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n  -c, --contentDir string        filesystem path to content directory\n      --editor string            edit new content with this editor, if provided\n  -f, --force                    overwrite file if it already exists\n  -h, --help                     help for content\n  -k, --kind string              content type to create\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Country Flag Emojis\nDESCRIPTION: A markdown table containing country flag emojis, their shortcodes, and navigation links. The table is organized in columns, with each row representing two different country flags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#flags) | :ascension_island: | `:ascension_island:` | :andorra: | `:andorra:` | [top](#table-of-contents) |\n| [top](#flags) | :united_arab_emirates: | `:united_arab_emirates:` | :afghanistan: | `:afghanistan:` | [top](#table-of-contents) |\n| [top](#flags) | :antigua_barbuda: | `:antigua_barbuda:` | :anguilla: | `:anguilla:` | [top](#table-of-contents) |\n...\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Unix Microseconds in Hugo Template\nDESCRIPTION: Shows how to convert a time string to Unix microseconds using Hugo's time.AsTime and UnixMicro functions. The example converts a specific timestamp to microseconds elapsed since January 1, 1970 UTC.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/UnixMicro.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.UnixMicro }} → 1674891898000000\n```\n\n----------------------------------------\n\nTITLE: Golden Archetype Template - JSON\nDESCRIPTION: Provides the expected output for the default archetype in JSON format, used for file content comparison in tests. Uses Go-like template notation for dynamic fields. Requires that the Hugo templating system processes the placeholders, and is compared against generated files to ensure accuracy.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new.txt#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"date\": \"{{ .Date }}\",\n   \"draft\": true,\n   \"title\": \"{{ replace .File.ContentBaseName \\\"-\\\" \\\" \\\" | title }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Area Calculation for Zeta(2) Using Complex Curve Projection (LaTeX)\nDESCRIPTION: This code calculates the area under the curve x₂ = -log(1-e⁻ˣ¹), which is shown to equal ζ(2). It uses a complex curve and its projections onto real and imaginary parts.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_9\n\nLANGUAGE: latex\nCODE:\n```\n\\int_{0}^{\\infty} - \\log(1-e^{-x}) dx = \\int_{0}^{\\infty} \\sum \\frac{e^{-kx}}{k} dx = \\sum \\frac{1}{k^2}\n```\n\n----------------------------------------\n\nTITLE: Invoking Embedded Pagination Template with Format Dict - Hugo Go HTML Template\nDESCRIPTION: This example shows use of Hugo's template function to render the internal pagination control, but here a specific navigation format ('default') is chosen using a dict context. Requires Hugo's dict function and page context. Outputs navigation markup styled in the default pagination format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/pagination.html\" (dict \"page\" . \"format\" \"default\") }}\n```\n\n----------------------------------------\n\nTITLE: Illustrating i18n File Naming Convention (Text)\nDESCRIPTION: Demonstrates the recommended file naming convention for translation tables in the `i18n` directory, following RFC 5646 language codes. Files should be named according to the language key defined in the site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ni18n/en.toml\ni18n/en-US.toml\n```\n\n----------------------------------------\n\nTITLE: Checking Daylight Savings Time with IsDST in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the IsDST function in Hugo templates to determine if a given time.Time value is in Daylight Savings Time. It creates two time objects and checks their DST status.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/IsDST.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t1 := time.AsTime \"2023-01-01T00:00:00-08:00\" }}\n{{ $t2 := time.AsTime \"2023-07-01T00:00:00-07:00\" }}\n\n{{ $t1.IsDST }} → false\n{{ $t2.IsDST }} → true\n```\n\n----------------------------------------\n\nTITLE: Applying Sepia Filter via Hugo Shortcode Attributes\nDESCRIPTION: This example shows how to apply the sepia filter directly using attributes within a custom Hugo shortcode (presumably named `img`). The `filter` attribute specifies the \"Sepia\" filter type, and the `filterArgs` attribute provides the required percentage intensity (75 in this case). This method encapsulates the filter application within the shortcode call for a specific image.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Sepia.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{< img\n  src=\"images/examples/zion-national-park.jpg\"\n  alt=\"Zion National Park\"\n  filter=\"Sepia\"\n  filterArgs=\"75\"\n  example=true\n>}}\n```\n\n----------------------------------------\n\nTITLE: Calculating Arccosine using math.Acos in Go HTML Template\nDESCRIPTION: This example demonstrates the usage of the `math.Acos` function within a Hugo template. It calls the function with the input value `1` and shows the expected output, which is the arccosine of 1 in radians (0). This function requires Hugo version 0.130.0 or later and returns a `float64` value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Acos.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Acos 1 }} → 0\n```\n\n----------------------------------------\n\nTITLE: Using IsTranslated with a Translated Page\nDESCRIPTION: Example showing the IsTranslated method returning true when used with a page (book-1.md) that has translations in other languages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsTranslated.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .IsTranslated }} → true\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Variables in Hugo Index Template (HTML)\nDESCRIPTION: This Hugo template (`layouts/index.html`) defines the structure for the site's homepage. It uses Hugo template variables to display the site title (`.Title`), base URL (`site.BaseURL`), the port the server is running on (`site.ServerPort`), the environment-specific parameter `myenv` (`.Site.Params.myenv`), the current environment name (`hugo.Environment`), and a boolean indicating if the site is being served by `hugo server` (`hugo.IsServer`). The test script checks the output of this template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server.txt#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/index.html --\n<body>\nTitle: {{ .Title }}|BaseURL: {{ site.BaseURL }}|ServerPort: {{ site.ServerPort }}|myenv: {{ .Site.Params.myenv }}|Env: {{ hugo.Environment }}|IsServer: {{ hugo.IsServer }}|\n</body>\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Completion Help Output - Bash - Shell\nDESCRIPTION: This test snippet executes 'hugo completion -h' in the shell to confirm that running the Hugo CLI with the help option prints the expected description for generating shell completion scripts. Dependencies include the Hugo executable present in the PATH. The key parameter under test is '-h' (help), and the test matches its output against the expected string. Inputs: no arguments except '-h'. Output: documentation string for completion generation. Limitations: only tests help output, not the functionality of script generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/completion.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test the completion commands.\nhugo completion -h\nstdout 'Generate the autocompletion script for hugo for the specified shell.'\n```\n\n----------------------------------------\n\nTITLE: Example Project Directory Structure for os.ReadDir\nDESCRIPTION: Illustrates a sample directory structure under `content/` including Markdown files (`about.md`, `contact.md`) and a subdirectory (`news/`) containing more files. This structure serves as the input context for the `os.ReadDir` template example.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/ReadDir.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── about.md\n├── contact.md\n└── news/\n    ├── article-1.md\n    └── article-2.md\n```\n\n----------------------------------------\n\nTITLE: Managing SSH Key Access for Hugo Snap Package\nDESCRIPTION: Commands to enable or revoke access to SSH keys for the Hugo snap package. This allows Hugo to access SSH resources when needed for deployment or other operations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo snap connect hugo:ssh-keys\nsudo snap disconnect hugo:ssh-keys\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI/CD for Hugo and KeyCDN Deployment\nDESCRIPTION: This YAML configuration sets up a GitLab CI/CD pipeline to build a Hugo site and deploy it to KeyCDN. It includes steps for installing Hugo, building the site, and purging the KeyCDN cache.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-keycdn/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: alpine:latest\n\nvariables:\n    BASEURL: \"https://cipull-7bb7.kxcdn.com/\"\n    HUGO_VERSION: \"0.26\"\n    HUGO_CHECKSUM: \"67e4ba5ec2a02c8164b6846e30a17cc765b0165a5b183d5e480149baf54e1a50\"\n    KEYCDN_ZONE_ID: \"75544\"\n\nbefore_script:\n    - apk update\n    - apk add curl\n\npages:\n    stage: deploy\n    script:\n    - apk add git\n    - git submodule update --init\n    - curl -sSL https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.tar.gz -o /tmp/hugo.tar.gz\n    - echo \"${HUGO_CHECKSUM}  /tmp/hugo.tar.gz\" | sha256sum -c\n    - tar xf /tmp/hugo.tar.gz hugo -C /tmp/ && cp /tmp/hugo /usr/bin\n    - hugo --baseURL ${BASEURL}\n    - curl \"https://api.keycdn.com/zones/purge/${KEYCDN_ZONE_ID}.json\" -u \"${KEYCDN_API_KEY}:\"\n    artifacts:\n    paths:\n    - public\n    only:\n    - master\n```\n\n----------------------------------------\n\nTITLE: Illustrating Default Layout Lookup for Hugo - Text\nDESCRIPTION: This text block shows the path for the li.html layout used for content types other than \\\"books\\\" in Hugo. It supports the explanation of template selection logic in accompanying documentation. The code serves only as a reference path example and involves no logic.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Render.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nlayouts/_default/li.html\n```\n\n----------------------------------------\n\nTITLE: Creating Static Content for Hugo Site\nDESCRIPTION: This snippet creates a static text file to be included in the Hugo site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_render_to_memory.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is a static file.\n```\n\n----------------------------------------\n\nTITLE: Installing Mage build tool for Hugo development\nDESCRIPTION: This command installs Mage, the build tool used for various Hugo development tasks including testing and building.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/magefile/mage\n```\n\n----------------------------------------\n\nTITLE: Capturing the Taxonomy Object in Go HTML Template\nDESCRIPTION: Demonstrates how to capture the Taxonomy object using the Terms property of the Data method, which returns a map of terms and weighted pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Data.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomyObject := .Data.Terms }}\n```\n\n----------------------------------------\n\nTITLE: Cloning and installing Hugo from GitHub source\nDESCRIPTION: This bash snippet shows how to clone the Hugo repository outside of GOPATH, navigate to the project directory, and install it locally.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/src\ncd $HOME/src\ngit clone https://github.com/gohugoio/hugo.git\ncd hugo\ngo install\n```\n\n----------------------------------------\n\nTITLE: Hugo Content Directory Structure Example\nDESCRIPTION: Illustrates a typical Hugo content directory structure with posts and index file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/global/page.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── posts/\n│   ├── post-1.md\n│   ├── post-2.md\n│   └── post-3.md\n└── _index.md      <-- title is \"My Home Page\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for hugo list Command (sh)\nDESCRIPTION: Lists command-line options inherited by 'hugo list' from its parent Hugo commands. These options control aspects like configuration files, source/destination directories, environment settings, logging levels, rendering behavior, and theme paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Nested Menu\nDESCRIPTION: The resulting HTML output from the Hugo template showing the rendered nested menu structure. It displays the parent 'Products' item with a nested unordered list containing the two child product items.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/HasChildren.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>\n    <a href=\"/products/\">Products</a>\n    <ul>\n      <li><a href=\"/products/product-1/\">Product 1</a></li>\n      <li><a href=\"/products/product-2/\">Product 2</a></li>\n    </ul>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Hugo Quick Reference Shortcode for Methods Documentation\nDESCRIPTION: This snippet shows the use of Hugo's built-in shortcode for generating a quick reference section for methods. The shortcode parameter specifies that the 'methods' section should be displayed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/methods.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{% quick-reference section=\"methods\" %}}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Page p3 with Duplicate URL (YAML Front Matter)\nDESCRIPTION: This snippet presents the YAML front matter within `content/p3.md`, which also specifies `/p1/` as its output URL. It's the third file contributing to the duplicate path scenario designed to be detected by Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings.txt#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n-- content/p3.md --\n---\nurl: /p1/\n---\n```\n\n----------------------------------------\n\nTITLE: Site Content Directory Structure Example (Text)\nDESCRIPTION: This snippet provides a visual representation of a typical Hugo 'content/' directory structure, showing top-level folders for different content types. It serves as an example for the context where page collections are used with the 'complement' function. No dependencies or code execution are involved; this is for reference only.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Complement.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── blog/\\n├── books/\\n├── faqs/\\n├── films/\\n└── songs/\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Build with Path Warning Check (Shell)\nDESCRIPTION: This shell command runs the Hugo static site generator with the `--printPathWarnings` flag enabled. It's used in a testing context to verify that Hugo correctly identifies and warns about potential duplicate target paths generated for resources, specifically expecting the phrase 'Duplicate target paths' in the standard error output (! stderr).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings_issue13164.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo --printPathWarnings\n\n! stderr 'Duplicate target paths'\n```\n\n----------------------------------------\n\nTITLE: Setting Production Environment Parameters in TOML\nDESCRIPTION: This configuration file (`config/production/params.toml`) defines parameters specific to the 'production' environment. It sets a custom parameter `myenv` to \"theproduction\". This value would be used if the site were built using `hugo -e production`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n-- config/production/params.toml --\nmyenv = \"theproduction\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Feature Shortcode Usage\nDESCRIPTION: Example of using the deprecated-in shortcode to mark deprecated features with alternative solutions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n{{</* deprecated-in 0.144.0 */>}}\\n\\nUse [`hugo.IsServer`] instead.\\n\\n[`hugo.IsServer`]: /functions/hugo/isserver/\\n{{</* /deprecated-in */>}}\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on Alpine Linux\nDESCRIPTION: Command to install the extended edition of Hugo on Alpine Linux using the apk package manager, pulling from the edge/community repository.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndoas apk add --no-cache --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community hugo\n```\n\n----------------------------------------\n\nTITLE: Remote Resource Alternative with transform.Unmarshal\nDESCRIPTION: Demonstrates the recommended alternative to data.GetCSV using resources.GetRemote and transform.Unmarshal for remote resources with improved error handling.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $url := \"https://example.org/pets.csv\" }}\n{{ with try (resources.GetRemote $url) }}\n  {{ with .Err }}\n    {{ errorf \"%s\" . }}\n  {{ else with .Value }}\n    {{ $opts := dict \"delimiter\" \",\" }}\n    {{ $data = . | transform.Unmarshal $opts }}\n  {{ else }}\n    {{ errorf \"Unable to get remote resource %q\" $url }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Headers to CSV Requests in Hugo\nDESCRIPTION: Shows how to add multiple headers using a slice in the options map for remote CSV requests.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $opts := dict \"X-List\" (slice \"a\" \"b\" \"c\") }}\n{{ $data := getCSV \",\" \"https://example.org/pets.csv\" $opts }}\n```\n\n----------------------------------------\n\nTITLE: Creating an Include Shortcode with PageInner in Hugo\nDESCRIPTION: This shortcode allows composing a page from multiple content files while preserving global context for footnotes and table of contents. It uses GetPage to find and render content from another file, with error handling for missing parameters or pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/render-hooks/pageinner.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Get 0 }}\n  {{ with $.Page.GetPage . }}\n    {{- .RenderShortcodes }}\n  {{ else }}\n    {{ errorf \"The %q shortcode was unable to find %q. See %s\" $.Name . $.Position }}\n  {{ end }}\n{{ else }}\n  {{ errorf \"The %q shortcode requires a positional parameter indicating the logical path of the file to include. See %s\" .Name .Position }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Twitter Site Username for Cards - Hugo Configuration (TOML)\nDESCRIPTION: Defines the default Twitter handle for the site in the [params.social] subsection of the Hugo config file. This is used for the twitter:site meta tag, prepending the '@' automatically. Required for branding Twitter Cards originating from your site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_12\n\nLANGUAGE: hugo\nCODE:\n```\n[params.social]\ntwitter = \"GoHugoIO\"\n```\n\n----------------------------------------\n\nTITLE: Linking to Glossary Terms with Markdown Syntax - Text\nDESCRIPTION: This snippet shows various Markdown link syntaxes for referencing glossary terms with the (g) extension. It demonstrates that glossary term lookups are case-insensitive and support both singular and plural forms. No external dependencies are required; Markdown processing must recognize the (g) syntax for proper linking.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[global resource](g)\n[Global Resource](g)\n[Global Resources](g)\n[`Global Resources`](g)\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Front Matter in YAML\nDESCRIPTION: YAML front matter block that configures metadata for a Hugo content page, including title, description, categories, keywords, weight and URL aliases.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Getting started\ndescription: How to get started with Hugo.\ncategories: []\nkeywords: []\nweight: 10\naliases: [/overview/introduction/]\n---\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output of Automatic Summary\nDESCRIPTION: Displays the resulting HTML markup for an automatically generated summary. This example output corresponds to the previous Markdown content when the site's `summaryLength` configuration is set to 7 (words). Hugo renders the summary content wrapped in paragraph tags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/summaries.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n```html\n<p>This is the first paragraph.</p>\n<p>This is the second paragraph.</p>\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Server Live Reload with Content Edits (Shell)\nDESCRIPTION: This shell script tests the Hugo server's live reload functionality. It starts the server in the background (`hugo server &`), waits for it to be ready (`waitServer`), fetches a page (`httpget`) to check its initial title, lists directories in the output (`ls public/...`), modifies a content file (`replace`), fetches the page again to verify the title update, and compares directory listings (`cmp`) to ensure only expected changes occurred. Finally, it stops the server (`stopServer`) and checks for errors (`! stderr .`). It relies on helper functions/commands like `waitServer`, `httpget`, `replace`, and environment variables like `HUGOTEST_BASEURL_0` and `WORK`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_content.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test the hugo server command when editing content.\n\n# We run these tests in parallel so let Hugo decide which port to use.\n# Render to disk so we can check the /public dir.\nhugo server &\n\nwaitServer\n\nhttpget ${HUGOTEST_BASEURL_0}p1/ 'Title: P1' $HUGOTEST_BASEURL_0\n\nls public/p2\ncp stdout lsp2_1.txt\nls public/staticfiles\nstdout 'static\\.txt'\ncp stdout lsstaticfiles_1.txt\n\nreplace $WORK/content/p1/index.md 'P1' 'P1 New'\n\nhttpget ${HUGOTEST_BASEURL_0}p1/ 'Title: P1 New' $HUGOTEST_BASEURL_0\n\nls public/p2\ncp stdout lsp2_2.txt\ncmp lsp2_1.txt lsp2_2.txt\nls public/staticfiles\ncp stdout lsstaticfiles_2.txt\ncmp lsstaticfiles_1.txt lsstaticfiles_2.txt\n\nstopServer\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Sample Deployment Output\nDESCRIPTION: Example output from running the deployment script, showing the Hugo build process and rsync file transfer statistics.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_11\n\nLANGUAGE: txt\nCODE:\n```\nStarted building sites ...\nBuilt site for language en:\n0 draft content\n0 future content\n0 expired content\n5 pages created\n0 non-page files copied\n0 paginator pages created\n0 tags created\n0 categories created\ntotal in 56 ms\nsending incremental file list\n404.html\nindex.html\nindex.xml\nsitemap.xml\nposts/\nposts/index.html\n\nsent 9,550 bytes  received 1,708 bytes  7,505.33 bytes/sec\ntotal size is 966,557  speedup is 85.86\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Hugo Project (Go Module)\nDESCRIPTION: This `go.mod` file initializes a Go module for the Hugo test project. It declares the module path as `github.com/gohugoio/testmod` and specifies that the project requires Go version 1.19 or later. This file is essential for enabling Hugo Modules functionality.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod.txt#2025-04-23_snippet_2\n\nLANGUAGE: go.mod\nCODE:\n```\n-- go.mod --\ngo 1.19\n\nmodule github.com/gohugoio/testmod\n```\n\n----------------------------------------\n\nTITLE: Right-Open Interval Inequality Expression\nDESCRIPTION: Mathematical expression showing inequality for a right-open interval [0, 1)\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/interval.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0 <= x < 1\n```\n\n----------------------------------------\n\nTITLE: Defining Default Single Page Layout Template (HTML/Go Template)\nDESCRIPTION: This snippet, representing `layouts/_default/single.html`, provides the default template for rendering single content pages (like `p1.md`). It contains the minimal text \"Single.\" and is processed by Hugo's Go template engine.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings.txt#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/_default/single.html --\nSingle.\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Information in Hugo Configuration\nDESCRIPTION: Code toggle example showing how to enable Git information in Hugo configuration file, which is required to use the CodeOwners method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/CodeOwners.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenableGitInfo = true\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Sound Emojis\nDESCRIPTION: A markdown table displaying emojis related to sound and audio, including their visual representations and shortcodes. The table covers various sound-related symbols and devices.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#objects) | :mute: | `:mute:` | :speaker: | `:speaker:` | [top](#table-of-contents) |\n| [top](#objects) | :sound: | `:sound:` | :loud_sound: | `:loud_sound:` | [top](#table-of-contents) |\n| [top](#objects) | :loudspeaker: | `:loudspeaker:` | :mega: | `:mega:` | [top](#table-of-contents) |\n| [top](#objects) | :postal_horn: | `:postal_horn:` | :bell: | `:bell:` | [top](#table-of-contents) |\n| [top](#objects) | :no_bell: | `:no_bell:` | | | [top](#table-of-contents) |\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Float [0.0, N.d] with Precision (Go HTML Template)\nDESCRIPTION: This snippet generates a pseudo-random float with one digit after the decimal point in the closed interval [0.0, 4.9]. It first multiplies `math.Rand` by 50 (effectively scaling the range to [0.0, 50.0)), applies `math.Floor` to get an integer in [0, 49], and then divides by 10 using `div` to achieve the desired range [0.0, 4.9] with one decimal place precision.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Rand.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ div (math.Rand | mul 50 | math.Floor) 10 }}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Hugo Commands - Command Line - Bash\nDESCRIPTION: This snippet lists command-line options inherited from parent commands in Hugo. It describes configuration-related flags such as '--clock', '--config', '--configDir', and others, along with their expected input formats and effects. No programming dependencies are required, and inputs must match the required types (e.g., string paths or values). These options control various aspects of Hugo's build environment and file system interactions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_env.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: YouTube URL Example in Hugo\nDESCRIPTION: Example of a YouTube video URL that can be embedded using Hugo's shortcode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/youtube.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.youtube.com/watch?v=0RKpf3rK57I\n```\n\n----------------------------------------\n\nTITLE: Setting Hugo Module Environment Variables - Shell\nDESCRIPTION: Illustrates how to configure Hugo module proxy, replacements, and workspace settings via shell environment variables. Each 'export' command sets a variable that Hugo recognizes, allowing run-time overrides of configuration file values. Requires Bash or compatible shell. Key parameters are URLs, path mappings, and workspace paths as strings. The input consists of variable assignments; output is altered Hugo module behavior at runtime. Limitations include variable scope (current session or exported globally).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/module.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport HUGO_MODULE_PROXY=\"https://proxy.example.org\"\nexport HUGO_MODULE_REPLACEMENTS=\"github.com/bep/my-theme -> ../..\"\nexport HUGO_MODULE_WORKSPACE=\"/my/hugo.work\"\n```\n\n----------------------------------------\n\nTITLE: Converting Front Matter to JSON with Hugo CLI - Shell\nDESCRIPTION: This shell command demonstrates the usage of the 'hugo convert toJSON' command, which converts all front matter in the Hugo content directory from its current format to JSON. No additional dependencies are required beyond a working Hugo installation. The '[flags]' and '[args]' placeholders are used for optional parameters and arguments, letting users tailor the behavior as needed. The conversion is performed in-place unless destination/output flags are set.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert_toJSON.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo convert toJSON [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Left-Open Interval Inequality Expression\nDESCRIPTION: Mathematical expression showing inequality for a left-open interval (0, 1]\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/interval.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n0 < x <= 1\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Contrast Filter in Hugo Templates (Go HTML Template)\nDESCRIPTION: This snippet demonstrates how to create an image filter variable using the `images.Contrast` function within a Hugo template. The function accepts a percentage value (in this case, -20) which must be between -100 and 100. A negative value decreases contrast, 0 has no effect, and a positive value increases it. The resulting `$filter` variable holds the contrast filter configuration, ready to be applied to an image resource.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Contrast.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Contrast -20 }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Configuration Settings in Shell\nDESCRIPTION: Executes the `hugo config` command to display Hugo's effective configuration. Used here to check the determined cache directory path after `HUGO_CACHEDIR` is potentially unset. The test context indicates this command is skipped on Windows (`[windows] skip`) and expects specific `stdout` paths for Darwin (`home/Library/Caches/hugo_cache`) and Linux (`xdgcachehome/hugo_cache`). Requires the `hugo` executable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/config__cachedir.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhugo config\n```\n\n----------------------------------------\n\nTITLE: Making Deployment Script Executable\nDESCRIPTION: Command to make the deployment script executable, which allows it to be run directly without explicitly calling the shell interpreter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\n~/websites/topologix.fr$ chmod +x deploy\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme Command Options - Shell\nDESCRIPTION: Lists the specific, short options for the 'hugo new theme' command, focusing on displaying help information. The '-h' or '--help' flag outputs usage instructions and available switches for the theme command. No inputs except the flag itself; outputs a help message for the user. There are no dependencies beyond the Hugo CLI.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new_theme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for theme\n```\n\n----------------------------------------\n\nTITLE: Example Output of time.Now in Hugo\nDESCRIPTION: This snippet shows an example of the string representation of the time.Time value returned by time.Now function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/time/Now.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2023-10-15 12:59:28.337140706 -0700 PDT m=+0.041752605\n```\n\n----------------------------------------\n\nTITLE: Published Output Directory Structure Example - Text\nDESCRIPTION: This snippet visually displays the resultant 'public/' directory tree created after Hugo builds a paginated site. It shows where list, post, and pagination index files are placed. Not executable—serves as documentation of build output structure for users.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/pagination.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\npublic/\n├── posts/\n│   ├── page/\n│   │   ├── 1/\n│   │   │   └── index.html  <-- alias to public/posts/index.html\n│   │   └── 2/\n│   │       └── index.html\n│   ├── post-1/\n│   │   └── index.html\n│   ├── post-2/\n│   │   └── index.html\n│   ├── post-3/\n│   │   └── index.html\n│   ├── post-4/\n│   │   └── index.html\n│   └── index.html\n└── index.html\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output from urlquery Function\nDESCRIPTION: Shows the resulting HTML after the urlquery function has processed the URL. The URL characters have been properly escaped for use in a query parameter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/urlquery.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://example.org?url=https%3A%2F%2Fexample.com\">Link</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Settings for YouTube in Hugo (TOML)\nDESCRIPTION: Defines a privacy configuration for the YouTube shortcode, typically in Hugo's config file under the 'privacy' section. The 'disable' parameter set to true disables Hugo's built-in YouTube shortcode usage. This snippet operates in TOML and is referenced by templates and Hugo's shortcode logic during site generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Config.md#2025-04-23_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[privacy.youtube]\\ndisable = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site in TOML\nDESCRIPTION: This TOML configuration file sets up basic parameters for a Hugo site, including the base URL and disabled content types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_disablelivereload.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\n```\n\n----------------------------------------\n\nTITLE: Organizing Hugo Configuration Recursively within the Config Directory\nDESCRIPTION: Illustrates that Hugo parses the `config` directory recursively, allowing configuration files (like `menus.de.toml`, `menus.en.toml`) to be organized into further subdirectories (e.g., `navigation`) within the environment or `_default` folders.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── config/\n    └── _default/\n        ├── navigation/\n        │   ├── menus.de.toml\n        │   └── menus.en.toml\n        └── hugo.toml\n```\n\n----------------------------------------\n\nTITLE: Page Resource Alternative with transform.Unmarshal\nDESCRIPTION: Demonstrates the recommended alternative to data.GetCSV using .Resources.Get and transform.Unmarshal for page resources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_9\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $p := \"pets.csv\" }}\n{{ with .Resources.Get $p }}\n  {{ $opts := dict \"delimiter\" \",\" }}\n  {{ $data = . | transform.Unmarshal $opts }}\n{{ else }}\n  {{ errorf \"Unable to get resource %q\" $p }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Writing Example Markdown with Indented Shortcodes - Markdown - Text\nDESCRIPTION: Shows a sample Markdown document containing unordered lists, with each list item embedding a Hugo shortcode ('gallery') block. The shortcode content (image syntax lines) is indented, which typically causes it to be treated as an indented code block by Markdown parsers following CommonMark. Inputs are indented image links between shortcode tags; outputs depend on subsequent template processing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/InnerDeindent.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- Gallery one\\n\\n    {{</* gallery */>}}\\n    ![kitten a](thumbnails/a.jpg)\\n    ![kitten b](thumbnails/b.jpg)\\n    {{</* /gallery */>}}\\n\\n- Gallery two\\n\\n    {{</* gallery */>}}\\n    ![kitten c](thumbnails/c.jpg)\\n    ![kitten d](thumbnails/d.jpg)\\n    {{</* /gallery */>}}\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum with math.Sum in Hugo Templates (Go HTML Template)\nDESCRIPTION: This example demonstrates the usage of the `math.Sum` function within a Hugo template. It calculates the sum of several numbers, including individual scalars (1 and 4) and numbers contained within a slice created using the `slice` function (2 and 3). The expected output, 10, is shown after the arrow. The function requires numeric arguments and returns their sum as a float64.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Sum.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Sum 1 (slice 2 3) 4 }} → 10\n```\n\n----------------------------------------\n\nTITLE: Defining Default List Layout (HTML/Hugo Template)\nDESCRIPTION: Provides the content for the default list template located at 'layouts/_default/list.html'. This simple template will be used by Hugo to render list pages (like section index pages) and outputs only the static text 'List.'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats2.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/_default/list.html --\nList.\n```\n\n----------------------------------------\n\nTITLE: Defining Home Page Markdown with Title Front Matter - Markdown\nDESCRIPTION: This Markdown snippet defines the content and front matter for the site root page (_index.md), setting the title to 'Hugo Home'. Required by Hugo to generate the homepage and is targeted during server tests. No other dependencies beyond Hugo's parsing of Markdown and YAML/TOML front matter.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__error_recovery_edit_content.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hugo Home\n---\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Milliseconds in Hugo Templates\nDESCRIPTION: Demonstrates how to parse a duration string and convert it to milliseconds using the Milliseconds method. The example parses a duration of '3.5h2.5m1.5s' and returns its millisecond representation as 12751500.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/duration/Milliseconds.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }}\n{{ $d.Milliseconds }} → 12751500\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Default JavaScript String Rendering\nDESCRIPTION: Shows the resulting HTML generated by Hugo for the preceding Go HTML Template snippet where `safe.JS` was not used. The JavaScript variable 'a' is assigned the escaped string \\\"x + y\\\".\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/JS.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>const a = \"x + y\"</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Hugo Fish Completions into Current Session (Shell)\nDESCRIPTION: This command generates the Hugo autocompletion script for the Fish shell and immediately loads it into the current shell session using the `source` command via a pipe. This provides autocompletion for the current session only.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_fish.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo completion fish | source\n```\n\n----------------------------------------\n\nTITLE: Illustrating Taxonomy Hierarchy (Taxonomy View)\nDESCRIPTION: Provides a textual representation of how content (movies) is organized under terms (actors) within a taxonomy (Actor). This demonstrates the hierarchical relationship from the taxonomy's point of view, showing values associated with each term.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/taxonomies.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n```txt\nActor                    <- Taxonomy\n    Bruce Willis         <- Term\n        The Sixth Sense  <- Value\n        Unbreakable      <- Value\n        Moonrise Kingdom <- Value\n    Samuel L. Jackson    <- Term\n        Unbreakable      <- Value\n        The Avengers     <- Value\n        xXx              <- Value\n```\n```\n\n----------------------------------------\n\nTITLE: Comparing Timestamps Using Before Method in Hugo Templates\nDESCRIPTION: Shows how to compare two timestamps using the Before method. Creates two time objects using time.AsTime and compares them to determine if the first timestamp occurs before the second one. Returns true if TIME1 is before TIME2.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Before.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t1 := time.AsTime \"2023-01-01T17:00:00-08:00\" }}\n{{ $t2 := time.AsTime \"2030-01-01T17:00:00-08:00\" }}\n\n{{ $t1.Before $t2 }} → true\n```\n\n----------------------------------------\n\nTITLE: Correct Context Usage with IsAncestor in Hugo\nDESCRIPTION: Shows the proper way to reference the original context using the $ symbol inside a with block when checking ancestry relationships.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsAncestor.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/auctions\" }}\n  {{ $.IsAncestor . }} → true\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining the Homepage Layout - Hugo HTML Template\nDESCRIPTION: Sets the content for the site root (homepage) in a Hugo theme's layouts directory, simply rendering the text 'Home.'. This file is referenced during site generation for the homepage route. Inputs are any site requests to '/', output is a static HTML page with the word 'Home.'. No dependencies except Hugo's template engine.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__processingstats.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nHome.\n```\n\n----------------------------------------\n\nTITLE: Markdown Emoji Reference Table\nDESCRIPTION: A formatted markdown table displaying emoji shortcodes for country flags, subdivision flags, and GitHub custom emojis. Each row contains visual emoji, their corresponding shortcodes, and navigation links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#flags) | :england: | `:england:` | :scotland: | `:scotland:` | [top](#table-of-contents) |\n```\n\n----------------------------------------\n\nTITLE: Accessing XML Attributes and Namespaces in Hugo\nDESCRIPTION: Demonstrates how to access XML attributes and namespaced elements after unmarshaling an XML document.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Unmarshal.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with $data.channel.item }}\n  <ul>\n    {{ range . }}\n      {{ $title := index .title \"#text\" }}\n      {{ $lang := index .title \"-lang\" }}\n      {{ $ISBN := .number }}\n      <li>{{ $title }} ({{ $lang }}) {{ $ISBN }}</li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using len with Slices in Hugo Templates\nDESCRIPTION: Demonstrates how to count the number of elements in a slice using the len function in Hugo templates. Returns the number of items in the slice.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/len.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ slice \"a\" \"b\" | len }} → 2\n{{ slice | len }} → 0\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Import Help (Shell)\nDESCRIPTION: Executes the Hugo CLI command `hugo import -h` to display the general help message for the import subcommand. The subsequent `stdout` line indicates the expected output, confirming the command's purpose.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/import_jekyll.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo import -h \nstdout 'Import a site from another system'\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Site Structure\nDESCRIPTION: This snippet shows the expected file structure of a published Hugo site with taxonomies and content pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/URLize.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npublic/\n├── authors/\n│   ├── victor-hugo/\n│   │   └── index.html\n│   └── index.html\n├── books/\n│   ├── les-miserables/\n│   │   └── index.html\n│   └── index.html\n└── index.html\n```\n\n----------------------------------------\n\nTITLE: Example Output of href Extraction - Text\nDESCRIPTION: This text snippet shows the result produced by iterating over submatches and extracting the href attributes, listing the URLs captured from the processed HTML. The result matches the expected output from the iteration snippet above.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/FindRESubmatch.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.org\nhttps://gohugo.io\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML block defines front matter metadata for a Hugo content file. It sets essential properties like the page title ('Templates'), description, categories (empty), keywords (empty), navigation weight (10), and URL aliases. Hugo uses this metadata during the site build process to render the page correctly and manage its place within the site structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Templates\ndescription: Create templates to render your content, resources, and data.\ncategories: []\nkeywords: []\nweight: 10\naliases: [/templates/overview/,/templates/content]\n---\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of a Paragraph with HTML Attributes (HTML)\nDESCRIPTION: Illustrates the final HTML output generated by Hugo when a paragraph includes class and id attributes via Markdown attribute lists. No additional dependencies; interprets Markdown attributes to produce a <p> tag with the specified properties. Output is static HTML for browser rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/markdown-attributes.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p class=\\\"foo bar\\\" id=\\\"baz\\\">This is a paragraph.</p>\n```\n\n----------------------------------------\n\nTITLE: Computing Arcsine Using math.Asin - Hugo Template - Go HTML Template\nDESCRIPTION: This snippet demonstrates usage of the math.Asin function within a Hugo Go HTML template to calculate the arcsine (inverse sine) of a numeric input. No external dependencies are required as math.Asin is a built-in template function provided by Hugo (since version 0.130.0). The input parameter is a number (e.g., 1), which returns a float64 result representing the arcsine in radians. This can be used in logic or formatting within Hugo templates. The sample output is shown as the result of passing 1 to math.Asin.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Asin.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Asin 1 }} → 1.5707963267948966\n```\n\n----------------------------------------\n\nTITLE: Inherited Global Options for Hugo Commands\nDESCRIPTION: Lists various global command-line options inherited from the parent `hugo` command that can be used with the `hugo import` subcommand. These options control aspects like configuration files, output destination, logging level, source directory, build behavior, and clock settings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_import.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Clothing Emojis\nDESCRIPTION: A markdown table presenting emojis related to clothing and accessories, including their visual representations and shortcodes. The table covers a wide range of clothing items, footwear, and accessories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#objects) | :eyeglasses: | `:eyeglasses:` | :dark_sunglasses: | `:dark_sunglasses:` | [top](#table-of-contents) |\n| [top](#objects) | :goggles: | `:goggles:` | :lab_coat: | `:lab_coat:` | [top](#table-of-contents) |\n| [top](#objects) | :safety_vest: | `:safety_vest:` | :necktie: | `:necktie:` | [top](#table-of-contents) |\n| [top](#objects) | :shirt: | `:shirt:` `:tshirt:` | :jeans: | `:jeans:` | [top](#table-of-contents) |\n| [top](#objects) | :scarf: | `:scarf:` | :gloves: | `:gloves:` | [top](#table-of-contents) |\n| [top](#objects) | :coat: | `:coat:` | :socks: | `:socks:` | [top](#table-of-contents) |\n| [top](#objects) | :dress: | `:dress:` | :kimono: | `:kimono:` | [top](#table-of-contents) |\n| [top](#objects) | :sari: | `:sari:` | :one_piece_swimsuit: | `:one_piece_swimsuit:` | [top](#table-of-contents) |\n| [top](#objects) | :swim_brief: | `:swim_brief:` | :shorts: | `:shorts:` | [top](#table-of-contents) |\n| [top](#objects) | :bikini: | `:bikini:` | :womans_clothes: | `:womans_clothes:` | [top](#table-of-contents) |\n| [top](#objects) | :folding_hand_fan: | `:folding_hand_fan:` | :purse: | `:purse:` | [top](#table-of-contents) |\n| [top](#objects) | :handbag: | `:handbag:` | :pouch: | `:pouch:` | [top](#table-of-contents) |\n| [top](#objects) | :shopping: | `:shopping:` | :school_satchel: | `:school_satchel:` | [top](#table-of-contents) |\n| [top](#objects) | :thong_sandal: | `:thong_sandal:` | :mans_shoe: | `:mans_shoe:` `:shoe:` | [top](#table-of-contents) |\n| [top](#objects) | :athletic_shoe: | `:athletic_shoe:` | :hiking_boot: | `:hiking_boot:` | [top](#table-of-contents) |\n| [top](#objects) | :flat_shoe: | `:flat_shoe:` | :high_heel: | `:high_heel:` | [top](#table-of-contents) |\n| [top](#objects) | :sandal: | `:sandal:` | :ballet_shoes: | `:ballet_shoes:` | [top](#table-of-contents) |\n| [top](#objects) | :boot: | `:boot:` | :hair_pick: | `:hair_pick:` | [top](#table-of-contents) |\n| [top](#objects) | :crown: | `:crown:` | :womans_hat: | `:womans_hat:` | [top](#table-of-contents) |\n| [top](#objects) | :tophat: | `:tophat:` | :mortar_board: | `:mortar_board:` | [top](#table-of-contents) |\n| [top](#objects) | :billed_cap: | `:billed_cap:` | :military_helmet: | `:military_helmet:` | [top](#table-of-contents) |\n| [top](#objects) | :rescue_worker_helmet: | `:rescue_worker_helmet:` | :prayer_beads: | `:prayer_beads:` | [top](#table-of-contents) |\n| [top](#objects) | :lipstick: | `:lipstick:` | :ring: | `:ring:` | [top](#table-of-contents) |\n| [top](#objects) | :gem: | `:gem:` | | | [top](#table-of-contents) |\n```\n\n----------------------------------------\n\nTITLE: Example Project Structure with CODEOWNERS\nDESCRIPTION: Illustration of a sample project structure showing the relationship between content files and the CODEOWNERS file at the root level.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/CodeOwners.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n├── content/\n│   ├── books/\n│   │   └── les-miserables.md\n│   └── films/\n│       └── the-hunchback-of-notre-dame.md\n└── CODEOWNERS\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Kinds and Base URL in Hugo - TOML\nDESCRIPTION: This TOML configuration file (hugo.toml) disables several default page kinds (taxonomy, term, RSS, sitemap, robotsTXT, 404, section, page) in the Hugo site to limit content generation, and sets the baseURL to https://example.org/. Requires Hugo; must be placed in the project root. Key parameters: 'disableKinds' (array of strings) and 'baseURL' (string). Used to customize output and behavior of the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_printunusedtemplates.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ndisableKinds = [\"taxonomy\", \"term\", \"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"section\", \"page\"]\nbaseURL = \"https://example.org/\"\n```\n\n----------------------------------------\n\nTITLE: Displaying a Vimeo Video URL\nDESCRIPTION: Example of a Vimeo video URL that can be embedded using the shortcode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/vimeo.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://vimeo.com/channels/staffpicks/55073825\n```\n\n----------------------------------------\n\nTITLE: Sample Template Metrics Output (text)\nDESCRIPTION: Displays a sample output block as produced by the Hugo CLI when run with the '--templateMetrics' flag. Each line gives detailed timing and caching diagnostics for a single template, including fields for cumulative/average/maximum durations, cache potential, percent cached, cached count, total count, and template path. Useful for interpreting real results and understanding which templates are prime candidates for caching or optimization.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTemplate Metrics:\n\n     cumulative       average       maximum      cache  percent  cached  total  \n       duration      duration      duration  potential   cached   count  count  template\n     ----------      --------      --------  ---------  -------  ------  -----  --------\n  36.037476822s  135.990478ms  225.765245ms         11        0       0    265  partials/head.html\n  35.920040902s  164.018451ms  233.475072ms          0        0       0    219  articles/single.html\n  34.163268129s  128.917992ms  224.816751ms         23        0       0    265  partials/head/meta/opengraph.html\n   1.041227437s     3.92916ms  186.303376ms         47        0       0    265  partials/head/meta/schema.html\n   805.628827ms   27.780304ms  114.678523ms          0        0       0     29  _default/list.html\n    624.08354ms   15.221549ms  108.420729ms          8        0       0     41  partials/utilities/render-page-collection.html\n   545.968801ms     775.523µs  105.045775ms          0        0       0    704  _default/summary.html\n   334.680981ms    1.262947ms  127.412027ms        100        0       0    265  partials/head/js.html\n   272.763205ms    2.050851ms   24.371757ms          0        0       0    133  _default/_markup/render-codeblock.html\n   230.490038ms    8.865001ms    177.4615ms          0        0       0     26  shortcodes/template.html\n   176.921913ms  176.921913ms  176.921913ms          0        0       0      1  examples.tmpl\n   163.951469ms   14.904679ms   70.267953ms          0        0       0     11  articles/list.html\n    153.07021ms     577.623µs   73.593597ms        100        0       0    265  partials/head/init.html\n   150.910984ms  150.910984ms  150.910984ms          0        0       0      1  _default/single.html\n   146.785804ms  146.785804ms  146.785804ms          0        0       0      1  _default/contact.html\n   115.364617ms  115.364617ms  115.364617ms          0        0       0      1  authors/term.html\n    87.392071ms     329.781µs   10.687132ms        100        0       0    265  partials/head/css.html\n    86.803122ms   86.803122ms   86.803122ms          0        0       0      1  _default/home.html\n```\n\n----------------------------------------\n\nTITLE: Listing Options for Hugo Gen Command\nDESCRIPTION: Displays the command-line options specific to the `hugo gen` command. The primary option shown is `-h` or `--help` for accessing help information regarding the `gen` subcommand.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```\n  -h, --help   help for gen\n```\n```\n\n----------------------------------------\n\nTITLE: Managing Snap Permissions for Hugo on Linux\nDESCRIPTION: Commands to enable or revoke access to removable media for the Hugo snap package. This is necessary because snap packages run in strict confinement with limited access to system resources.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo snap connect hugo:removable-media\nsudo snap disconnect hugo:removable-media\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies in go.mod for Hugo Project\nDESCRIPTION: This `go.mod` file declares the Go module named `foo`, requires Go version `1.20`, and lists required Go package dependencies relevant to the Hugo modules. It includes specific versions of `hugo-mod-integrationtests/withhugotoml` and `hugo-mod-integrationtests/commonmod`, marked as indirect (`// indirect`), which are managed by Hugo's module system based on the `hugo.toml` configuration and `hugo mod` commands.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_get_u.txt#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule foo\ngo 1.20\nrequire (\n  github.com/gohugoio/hugo-mod-integrationtests/withhugotoml v1.1.0 // indirect\n  github.com/gohugoio/hugo-mod-integrationtests/commonmod v0.0.0-20230823103305-919cefe8a425 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Hugo Commands (Text)\nDESCRIPTION: Lists options inherited from parent Hugo commands that can potentially be used with `hugo completion fish`. These options control general Hugo behavior, such as setting the clock, specifying configuration files and directories, defining source and destination paths, setting the build environment, managing module vendor paths, configuring logging levels, controlling the build lock file, enabling quiet mode, rendering to memory, and specifying the themes directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_fish.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Logarithmic Series Expansion in LaTeX\nDESCRIPTION: This LaTeX snippet shows the series expansion of the natural logarithm, which is a starting point for one of the proofs of the Basel problem.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\log (1-t)=-\\sum_{n=1}^{\\infty}\\dfrac{t^n}{n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Image in Markdown Format\nDESCRIPTION: Markdown syntax for embedding an image with alternative text. This snippet shows how to reference an image file named 'bryce-canyon.jpg' with descriptive text for accessibility.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/create/skeletons/theme/content/posts/post-3/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Bryce Canyon National Park](bryce-canyon.jpg)\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Jekyll Import (Shell)\nDESCRIPTION: Runs the Hugo command to import content from a source Jekyll site directory (`myjekyllsite`) into a target Hugo site directory (`myhugosite`). This command initiates the conversion process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/import_jekyll.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhugo import jekyll myjekyllsite myhugosite\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Game Emojis\nDESCRIPTION: A markdown table displaying emojis related to games and recreational activities, including their visual representations and shortcodes. The table covers various games, toys, and gaming equipment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#activities) | :dart: | `:dart:` | :yo_yo: | `:yo_yo:` | [top](#table-of-contents) |\n| [top](#activities) | :kite: | `:kite:` | :gun: | `:gun:` | [top](#table-of-contents) |\n| [top](#activities) | :8ball: | `:8ball:` | :crystal_ball: | `:crystal_ball:` | [top](#table-of-contents) |\n| [top](#activities) | :magic_wand: | `:magic_wand:` | :video_game: | `:video_game:` | [top](#table-of-contents) |\n| [top](#activities) | :joystick: | `:joystick:` | :slot_machine: | `:slot_machine:` | [top](#table-of-contents) |\n| [top](#activities) | :game_die: | `:game_die:` | :jigsaw: | `:jigsaw:` | [top](#table-of-contents) |\n| [top](#activities) | :teddy_bear: | `:teddy_bear:` | :pinata: | `:pinata:` | [top](#table-of-contents) |\n| [top](#activities) | :mirror_ball: | `:mirror_ball:` | :nesting_dolls: | `:nesting_dolls:` | [top](#table-of-contents) |\n| [top](#activities) | :spades: | `:spades:` | :hearts: | `:hearts:` | [top](#table-of-contents) |\n| [top](#activities) | :diamonds: | `:diamonds:` | :clubs: | `:clubs:` | [top](#table-of-contents) |\n| [top](#activities) | :chess_pawn: | `:chess_pawn:` | :black_joker: | `:black_joker:` | [top](#table-of-contents) |\n| [top](#activities) | :mahjong: | `:mahjong:` | :flower_playing_cards: | `:flower_playing_cards:` | [top](#table-of-contents) |\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo via MacPorts on macOS\nDESCRIPTION: Command to install the extended edition of Hugo using MacPorts package manager on macOS. This requires MacPorts to be previously installed on the system.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/macos.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo port install hugo\n```\n\n----------------------------------------\n\nTITLE: Displaying URL Fragment Structure\nDESCRIPTION: Shows the structure of a URL fragment, which links to an id attribute of an HTML element on a page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Fragments.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/articles/article-1#section-2\n------------------- ---------\n       path         fragment\n```\n\n----------------------------------------\n\nTITLE: Namespacing Data Files in Hugo Data Directory\nDESCRIPTION: Demonstrates a recommended directory structure for namespacing data files within the `data` directory, especially useful for themes and modules to prevent naming collisions. This structure places theme-specific data (`foo.json`) under a unique sub-directory (`mytheme`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/data-sources.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproject/\n└── data/\n    └── mytheme/\n        └── foo.json\n```\n\n----------------------------------------\n\nTITLE: Base Template with Default Block\nDESCRIPTION: Shows a base template layout with a 'main' block that includes a default value if not overridden.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/block.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<body>\n  <main>\n    {{ block \"main\" . }}\n      {{ print \"default value if 'main' template is empty\" }}\n    {{ end }}\n  </main>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Executing the Hugo Build Command (Shell)\nDESCRIPTION: Provides the basic syntax for executing the main Hugo command. This command initiates the build process for a Hugo static site. Optional flags can be appended to modify the build behavior according to specific requirements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site Settings in TOML\nDESCRIPTION: This is the main Hugo configuration file (`hugo.toml`). It sets the global site title to \"Hugo Server Test\", defines the base URL, and disables the generation of pages for kinds 'taxonomy', 'term', and 'sitemap' to simplify the test setup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Server Test\"\nbaseURL = \"https://example.org/\"\ndisableKinds = [\"taxonomy\", \"term\", \"sitemap\"]\n```\n\n----------------------------------------\n\nTITLE: Multi-Type Comparisons with compare.Gt in Hugo Templates\nDESCRIPTION: Examples of using the compare.Gt (gt) function to compare different data types in Hugo templates, including strings, dates, and booleans.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Gt.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ gt \"ab\" \"a\" }} → true\n{{ gt time.Now (time.AsTime \"1964-12-30\") }} → true\n{{ gt true false }} → true\n```\n\n----------------------------------------\n\nTITLE: Calling a Shortcode with Inner Content\nDESCRIPTION: Shows how to invoke a Hugo shortcode (`contrived`) that processes content placed between its opening and closing tags. The example passes Markdown content (\"This is a **bold** word...\") as inner content and also includes a named parameter (`title`). Uses the standard `{{</* ... */>}}...{{</* /... */>}}` notation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n{{</* contrived title=\"A Contrived Example\" */>}}\nThis is a **bold** word, and this is an _emphasized_ word.\n{{</* /contrived  */>}}\n```\n\n----------------------------------------\n\nTITLE: Running and Managing Hugo Server Process in Bash\nDESCRIPTION: This snippet launches the Hugo server with flags to render output in memory and disable live reloading, then executes bash functions for server control and verifies output. It depends on Hugo being installed and available in the PATH as well as custom bash functions (waitServer, stopServer, wait). Main parameters are CLI flags and expected log messages. Outputs are validated via stdout and stderr checks. Limitations: Assumes environment setup and auxiliary scripts like waitServer are defined elsewhere.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__watch_moduleconfig.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo server --renderToMemory --disableLiveReload  &\n\nwaitServer\nstopServer\nwait\n! stderr .\nstdout 'Watching for config changes in.*mytheme'\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies in Markdown/Text - text\nDESCRIPTION: This snippet lists all external Go library dependencies required by Hugo, each with its specific version. There are no code dependencies or runtime requirements—the content is for reference or tooling. Inputs and outputs are direct: the file simply enumerates the dependencies, without accepting any parameters or generating output other than the raw list.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngithub.com/BurntSushi/locker=\"v0.0.0-20171006230638-a6e239ea1c69\"\ngithub.com/PuerkitoBio/goquery=\"v1.10.1\"\ngithub.com/alecthomas/chroma/v2=\"v2.15.0\"\ngithub.com/andybalholm/cascadia=\"v1.3.3\"\ngithub.com/armon/go-radix=\"v1.0.1-0.20221118154546-54df44f2176c\"\ngithub.com/bep/clocks=\"v0.5.0\"\ngithub.com/bep/debounce=\"v1.2.0\"\ngithub.com/bep/gitmap=\"v1.6.0\"\ngithub.com/bep/goat=\"v0.5.0\"\ngithub.com/bep/godartsass/v2=\"v2.3.2\"\ngithub.com/bep/golibsass=\"v1.2.0\"\ngithub.com/bep/gowebp=\"v0.3.0\"\ngithub.com/bep/imagemeta=\"v0.8.4\"\ngithub.com/bep/lazycache=\"v0.7.0\"\ngithub.com/bep/logg=\"v0.4.0\"\ngithub.com/bep/mclib=\"v1.20400.20402\"\ngithub.com/bep/overlayfs=\"v0.9.2\"\ngithub.com/bep/simplecobra=\"v0.5.0\"\ngithub.com/bep/tmc=\"v0.5.1\"\ngithub.com/cespare/xxhash/v2=\"v2.3.0\"\ngithub.com/clbanning/mxj/v2=\"v2.7.0\"\ngithub.com/cpuguy83/go-md2man/v2=\"v2.0.4\"\ngithub.com/disintegration/gift=\"v1.2.1\"\ngithub.com/dlclark/regexp2=\"v1.11.5\"\ngithub.com/dop251/goja=\"v0.0.0-20250125213203-5ef83b82af17\"\ngithub.com/evanw/esbuild=\"v0.24.2\"\ngithub.com/fatih/color=\"v1.18.0\"\ngithub.com/frankban/quicktest=\"v1.14.6\"\ngithub.com/fsnotify/fsnotify=\"v1.8.0\"\ngithub.com/getkin/kin-openapi=\"v0.129.0\"\ngithub.com/ghodss/yaml=\"v1.0.0\"\ngithub.com/go-openapi/jsonpointer=\"v0.21.0\"\ngithub.com/go-openapi/swag=\"v0.23.0\"\ngithub.com/go-sourcemap/sourcemap=\"v2.1.4+incompatible\"\ngithub.com/gobuffalo/flect=\"v1.0.3\"\ngithub.com/gobwas/glob=\"v0.2.3\"\ngithub.com/gohugoio/go-i18n/v2=\"v2.1.3-0.20230805085216-e63c13218d0e\"\ngithub.com/gohugoio/hashstructure=\"v0.5.0\"\ngithub.com/gohugoio/httpcache=\"v0.7.0\"\ngithub.com/gohugoio/hugo-goldmark-extensions/extras=\"v0.2.0\"\ngithub.com/gohugoio/hugo-goldmark-extensions/passthrough=\"v0.3.0\"\ngithub.com/gohugoio/locales=\"v0.14.0\"\ngithub.com/gohugoio/localescompressed=\"v1.0.1\"\ngithub.com/golang/freetype=\"v0.0.0-20170609003504-e2365dfdc4a0\"\ngithub.com/google/go-cmp=\"v0.6.0\"\ngithub.com/google/pprof=\"v0.0.0-20250208200701-d0013a598941\"\ngithub.com/gorilla/websocket=\"v1.5.3\"\ngithub.com/hairyhenderson/go-codeowners=\"v0.7.0\"\ngithub.com/hashicorp/golang-lru/v2=\"v2.0.7\"\ngithub.com/jdkato/prose=\"v1.2.1\"\ngithub.com/josharian/intern=\"v1.0.0\"\ngithub.com/kr/pretty=\"v0.3.1\"\ngithub.com/kr/text=\"v0.2.0\"\ngithub.com/kyokomi/emoji/v2=\"v2.2.13\"\ngithub.com/lucasb-eyer/go-colorful=\"v1.2.0\"\ngithub.com/mailru/easyjson=\"v0.7.7\"\ngithub.com/makeworld-the-better-one/dither/v2=\"v2.4.0\"\ngithub.com/marekm4/color-extractor=\"v1.2.1\"\ngithub.com/mattn/go-colorable=\"v0.1.13\"\ngithub.com/mattn/go-isatty=\"v0.0.20\"\ngithub.com/mattn/go-runewidth=\"v0.0.9\"\ngithub.com/mazznoer/csscolorparser=\"v0.1.5\"\ngithub.com/mitchellh/mapstructure=\"v1.5.1-0.20231216201459-8508981c8b6c\"\ngithub.com/mohae/deepcopy=\"v0.0.0-20170929034955-c48cc78d4826\"\ngithub.com/muesli/smartcrop=\"v0.3.0\"\ngithub.com/niklasfasching/go-org=\"v1.7.0\"\ngithub.com/oasdiff/yaml3=\"v0.0.0-20241210130736-a94c01f36349\"\ngithub.com/oasdiff/yaml=\"v0.0.0-20241210131133-6b86fb107d80\"\ngithub.com/olekukonko/tablewriter=\"v0.0.5\"\ngithub.com/pbnjay/memory=\"v0.0.0-20210728143218-7b4eea64cf58\"\ngithub.com/pelletier/go-toml/v2=\"v2.2.3\"\ngithub.com/perimeterx/marshmallow=\"v1.1.5\"\ngithub.com/pkg/browser=\"v0.0.0-20240102092130-5ac0b6a4141c\"\ngithub.com/pkg/errors=\"v0.9.1\"\ngithub.com/rivo/uniseg=\"v0.4.7\"\ngithub.com/rogpeppe/go-internal=\"v1.13.1\"\ngithub.com/russross/blackfriday/v2=\"v2.1.0\"\ngithub.com/sass/libsass=\"3.6.6\"\ngithub.com/spf13/afero=\"v1.11.0\"\ngithub.com/spf13/cast=\"v1.7.1\"\ngithub.com/spf13/cobra=\"v1.8.1\"\ngithub.com/spf13/fsync=\"v0.10.1\"\ngithub.com/spf13/pflag=\"v1.0.6\"\ngithub.com/tdewolff/minify/v2=\"v2.20.37\"\ngithub.com/tdewolff/parse/v2=\"v2.7.15\"\ngithub.com/tetratelabs/wazero=\"v1.8.2\"\ngithub.com/webmproject/libwebp=\"v1.3.2\"\ngithub.com/yuin/goldmark-emoji=\"v1.0.4\"\ngithub.com/yuin/goldmark=\"v1.7.8\"\ngo.uber.org/automaxprocs=\"v1.5.3\"\ngolang.org/x/crypto=\"v0.33.0\"\ngolang.org/x/exp=\"v0.0.0-20250210185358-939b2ce775ac\"\ngolang.org/x/image=\"v0.24.0\"\ngolang.org/x/mod=\"v0.23.0\"\ngolang.org/x/net=\"v0.35.0\"\ngolang.org/x/sync=\"v0.11.0\"\ngolang.org/x/sys=\"v0.30.0\"\ngolang.org/x/text=\"v0.22.0\"\ngolang.org/x/tools=\"v0.30.0\"\ngolang.org/x/xerrors=\"v0.0.0-20240903120638-7835f813f4da\"\ngonum.org/v1/plot=\"v0.15.0\"\ngoogle.golang.org/protobuf=\"v1.36.5\"\ngopkg.in/yaml.v2=\"v2.4.0\"\ngopkg.in/yaml.v3=\"v3.0.1\"\noss.terrastruct.com/d2=\"v0.6.9\"\noss.terrastruct.com/util-go=\"v0.0.0-20241005222610-44c011a04896\"\nrsc.io/qr=\"v0.2.0\"\nsoftware.sslmate.com/src/go-pkcs12=\"v0.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Invalid Hugo Configuration in TOML\nDESCRIPTION: This snippet defines the content of a `hugo.toml` file. The content `invalid: toml` is intentionally malformed TOML, designed to cause the Hugo build process (specifically the `hugo` command in the preceding snippet) to fail when it attempts to load the configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__errors.txt#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ninvalid: toml\n```\n\n----------------------------------------\n\nTITLE: Options for hugo list Command (sh)\nDESCRIPTION: Displays the command-line options specifically available for the 'hugo list' subcommand. The primary option shown is '-h' or '--help' for displaying help information.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n  -h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: Using Custom Macros with transform.ToMath in Hugo\nDESCRIPTION: Demonstrates how to define and use custom macros with the transform.ToMath function for more complex mathematical expressions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/ToMath.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $macros := dict\n  \"\\\\addBar\" \"\\\\bar{#1}\"\n  \"\\\\bold\" \"\\\\mathbf{#1}\"\n}}\n{{ $opts := dict \"macros\" $macros }}\n{{ transform.ToMath \"\\\\addBar{y} + \\\\bold{H}\" $opts }}\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for Hugo Gen Command\nDESCRIPTION: Lists command-line options inherited from the parent `hugo` command that can be used with `hugo gen`. These options control aspects like configuration files (`--config`, `--configDir`), output directories (`--destination`), build environment (`--environment`), logging (`--logLevel`), and source paths (`--source`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics Service in Hugo (TOML)\nDESCRIPTION: Defines the Google Analytics configuration within the 'services' section of Hugo's config file. This snippet requires Hugo project structure and is set in config.toml or similar. The key parameter 'id' should be the Google Analytics tag ID, which will be used by templates to identify the correct analytics property. The input is a TOML block, and it is consumed by Hugo during the site build process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Config.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[services.googleAnalytics]\\nid = 'G-XXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Generating SHA256 Hash in Hugo Template\nDESCRIPTION: Demonstrates using the sha256 template function to generate a SHA256 hash of a string input. The function takes a string input and returns a 64-character hexadecimal string representing the SHA256 checksum.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/crypto/SHA256.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ sha256 \"Hello world\" }} → 64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f3c\n```\n\n----------------------------------------\n\nTITLE: Writing Emoji Shortcodes in Markdown\nDESCRIPTION: This example demonstrates how to use emoji shortcodes in Markdown content, where the wave emoji code will be rendered as an HTML entity in the browser.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHello! :wave:\n```\n\n----------------------------------------\n\nTITLE: Casting Binary Values to Integer with Hugo int - Go HTML Template\nDESCRIPTION: This snippet demonstrates converting binary (base 2) literals and their string representations to integers using the Hugo int function in a Go HTML template. The function correctly interprets inputs prefixed with '0b' as binary. Requires Hugo and Go template support. Inputs can be binary literals or strings. Output is the integer value represented by the binary. Valid only for properly prefixed base-2 values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToInt.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ int 0b11 }} → 3 (int)\n{{ int \"0b11\" }} → 3 (int)\n```\n\n----------------------------------------\n\nTITLE: One-Line Real Analytic Proof for Zeta(2) (LaTeX)\nDESCRIPTION: This snippet presents a concise real analytic proof for ζ(2) = π²/6. It combines multiple integration techniques and transformations to arrive at the result in a single line of equations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_13\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\\zeta(2)&=&\\frac{4}{3}\\sum_{n=0}^{+\\infty}\\frac{1}{(2n+1)^2}=\\frac{4}{3}\\int_{0}^{1}\\frac{\\log y}{y^2-1}dy\\\\&=&\\frac{2}{3}\\int_{0}^{1}\\frac{1}{y^2-1}\\left[\\log\\left(\\frac{1+x^2 y^2}{1+x^2}\\right)\\right]_{x=0}^{+\\infty}dy\\\\&=&\\frac{4}{3}\\int_{0}^{1}\\int_{0}^{+\\infty}\\frac{x}{(1+x^2)(1+x^2 y^2)}dx\\,dy\\\\&=&\\frac{4}{3}\\int_{0}^{1}\\int_{0}^{+\\infty}\\frac{dx\\, dz}{(1+x^2)(1+z^2)}=\\frac{4}{3}\\cdot\\frac{\\pi}{4}\\cdot\\frac{\\pi}{2}=\\frac{\\pi^2}{6}.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Sample Output for math.Counter Usage - Shell\nDESCRIPTION: This shell code block displays the warning messages generated when the go-html-template snippet using math.Counter is repeatedly invoked. It serves as expected output rather than executable code, showing incrementing log entries upon each template rendering. No dependencies are required for this example; it visually verifies proper counter incrementation and output message uniqueness.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Counter.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nWARN  single.html called 1 times\nWARN  single.html called 2 times\nWARN  single.html called 3 times\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine with math.Cos in Hugo Template - Go HTML Template\nDESCRIPTION: Demonstrates computing the cosine of a float value (in radians) using {{ math.Cos }} in a Hugo (Go HTML template) expression. Requires Hugo version 0.130.0 or later with math.Cos available. The input parameter is a numeric radian value, and the output is a float64 representing the cosine. Useful for mathematical computations in dynamic templates; input must be numeric and in radians.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Cos.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Cos 1 }} → 0.5403023058681398\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Directory Structure for Hugo Section Pages\nDESCRIPTION: Shows a typical content directory structure demonstrating how to back a section page with an _index.md file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/File.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n└── books/\n    ├── _index.md  <-- the top-slevel section page\n    ├── book-1.md\n    └── book-2.md\n```\n\n----------------------------------------\n\nTITLE: Rounding Time to Nearest Hour in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the Round method to round a time object to the nearest hour in Hugo. It creates a time object, defines a duration of 1 hour, and then applies the Round method before formatting the result.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Round.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $d := time.ParseDuration \"1h\"}}\n\n{{ ($t.Round $d).Format \"2006-01-02T15:04:05-00:00\" }} → 2023-01-28T00:00:00-00:00\n```\n\n----------------------------------------\n\nTITLE: Using relLangURL with Slash Inputs (baseURL: https://example.org/)\nDESCRIPTION: Illustrates the behavior of relLangURL function with inputs that begin with a slash, when the baseURL is set to https://example.org/.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelLangURL.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ relLangURL \"/\" }}          → /en/\n{{ relLangURL \"/articles\" }}  → /en/articles\n{{ relLangURL \"/style.css\" }} → /en/style.css\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of InSection with Global Context in Hugo Templates\nDESCRIPTION: Shows the proper way to reference the global context using $ while inside a with block when using the InSection method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/InSection.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/auctions\" }}\n  {{ $.InSection . }} → true\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'hugo import jekyll' Command (Shell)\nDESCRIPTION: Demonstrates the basic syntax for importing a Jekyll site using the `hugo import jekyll` subcommand. Requires specifying the source Jekyll root path and the target path for the Hugo site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_import.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo import jekyll jekyll_root_path target_path\n```\n\n----------------------------------------\n\nTITLE: Configuring Taxonomies in Hugo Config File\nDESCRIPTION: Example configuration for defining taxonomies in the Hugo site configuration file. This example defines two taxonomies: 'genre' and 'author'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Data.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[taxonomies]\ngenre = 'genres'\nauthor = 'authors'\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Content Type in Front Matter - TOML\nDESCRIPTION: This snippet sets the front matter for about.md, specifying the content type as 'miscellaneous'. This guides Hugo's template lookup to search within layouts/miscellaneous/ for templates, enabling more precise control over template rendering. Inputs are TOML keys 'title' and 'type'; the output is changing the template target directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/lookup-order.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'About'\\ntype = 'miscellaneous'\n```\n\n----------------------------------------\n\nTITLE: Inherited Command-Line Options for Hugo Commands - Shell\nDESCRIPTION: This block lists command-line flags inherited from parent Hugo commands. These options provide advanced control over configuration, output directories, logging, environment selection, and vendor path ignoring. Most parameters are specified as '--flag value', and help customize where config files are found, how output is handled, and additional security or performance behaviors.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert_toJSON.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n--config string              config file (default is hugo.yaml|json|toml)\n--configDir string           config dir (default \"config\")\n-d, --destination string     filesystem path to write files to\n-e, --environment string     build environment\n--ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n--logLevel string            log level (debug|info|warn|error)\n--noBuildLock                don't create .hugo_build.lock file\n-o, --output string          filesystem path to write files to\n--quiet                      build in quiet mode\n-M, --renderToMemory         render to memory (mostly useful when running the server)\n-s, --source string          filesystem path to read files relative from\n--themesDir string           filesystem path to themes directory\n--unsafe                     enable less safe operations, please backup first\n```\n\n----------------------------------------\n\nTITLE: Defining Template Action Delimiters in Hugo\nDESCRIPTION: Template actions in Hugo are delimited by double curly braces ({{ and }}). These delimiters enclose data evaluation expressions or control structures within a template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/template-action.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{`{{`}}&nbsp;and&nbsp;`}}`\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Unused Template Printout - Shell\nDESCRIPTION: This shell command executes Hugo with the --printUnusedTemplates flag, which outputs a list of template files in the Hugo project that are not utilized. It is used for diagnosing and cleaning up unused templates. Input is via the command line and output is sent to standard error or standard output; there are no parameters besides command-line flags and it requires Hugo to be installed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_printunusedtemplates.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo  --printUnusedTemplates\n```\n\n----------------------------------------\n\nTITLE: Listing Published Content - Hugo CLI - Bash\nDESCRIPTION: Shows the basic command-line usage for listing published content using Hugo. Requires Hugo to be installed and accessible via the command line. Takes optional flags and arguments, listing only published content (excluding drafts, future, and expired content). Input is flags/args, output is list of published content. Usage may be limited to environments where hugo is properly configured.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_published.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo list published [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Project Configuration File (TOML)\nDESCRIPTION: Represents the Hugo project configuration file, `hugo.toml`. Although empty in this example, its presence is necessary for Hugo to recognize the directory as a project root. Project-wide settings are typically defined in this file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# -- hugo.toml --\n# This file is empty in the example.\n```\n\n----------------------------------------\n\nTITLE: Infinite Product Representation of Sine Function in LaTeX\nDESCRIPTION: This LaTeX snippet presents the infinite product factorization of the sine function, which is used in one of the proofs to derive the Basel sum.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n\\sin x = x\\left(1-\\frac{x^2}{\\pi^2}\\right)\\left(1-\\frac{x^2}{2^2\\pi^2}\\right)\\left(1-\\frac{x^2}{3^2\\pi^2}\\right)\\cdots\n```\n\n----------------------------------------\n\nTITLE: Rendering Audio Shortcode using Global Resource (Go HTML Template)\nDESCRIPTION: Provides the implementation for an 'audio' shortcode, using 'resources.Get' to fetch a global resource and rendering an HTML5 audio tag if the resource is found. The parameter 'src' must be passed in the shortcode call. Output is an <audio> element with the resource URL as its source. Limitation: The specified 'src' must correspond to a static or global resource. Requires Hugo Extended for resource pipelines.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_11\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get (.Get \"src\") }}\\n  <audio controls preload=\"auto\" src=\"{{ .RelPermalink }}\"></audio>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for js.Build via Hugo Go HTML Template\nDESCRIPTION: This code demonstrates creating a dictionary of define replacements, mapping environment variable keys to their string values for use with js.Build. Used in Hugo templates, it injects build-time constants (e.g., NODE_ENV) into bundled JS. Requirement: Use with js.Build's defines option. Input: key-value pairs of variables. Output: a dictionary map for the build process. Limitations: Values must be properly quoted as strings.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/js/options.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $defines := dict \"process.env.NODE_ENV\" `\"development\"` }}\n```\n\n----------------------------------------\n\nTITLE: Extracting Nanosecond from Time.Time in Hugo Templates\nDESCRIPTION: This snippet demonstrates how to use the Nanosecond method on a time.Time object in Hugo. It creates a time value and then extracts the nanosecond component, which in this case is 0.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Nanosecond.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Nanosecond }} → 0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies (Go Mod)\nDESCRIPTION: This `go.mod` file declares a Go module named `github.com/gohugoio/testmod` compatible with Go 1.19. It lists the required direct dependencies, including specific versions (v1.0.0) of the two Hugo integration test modules (`github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml` and `github.com/gohugoio/hugo-mod-integrationtests/withhugotoml`). These dependencies align with the imports in `hugo.toml` and are resolved by Go's module tooling, influencing Hugo's module operations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_vendor.txt#2025-04-23_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\ngo 1.19\n\nmodule github.com/gohugoio/testmod\n\nrequire (\n    github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml v1.0.0 \n    github.com/gohugoio/hugo-mod-integrationtests/withhugotoml v1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Gist URL Format\nDESCRIPTION: Shows the format of a GitHub Gist URL that can be embedded in Hugo content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/gist.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://gist.github.com/user/50a7482715eac222e230d1e64dd9a89b\n```\n\n----------------------------------------\n\nTITLE: Using Nested Shortcodes in Hugo Content\nDESCRIPTION: Demonstrates how to use the gallery and img shortcodes in content, showcasing nested shortcode usage.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n{{</* gallery class=\"content-gallery\" */>}}\n  {{</* img src=\"/images/one.jpg\" */>}}\n  {{</* img src=\"/images/two.jpg\" */>}}\n{{</* /gallery */>}}\n{{</* img src=\"/images/three.jpg\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Commands in Shell\nDESCRIPTION: This snippet demonstrates the use of shell commands to run the hugo static site generator, then verifies the successful creation of the site by grepping for the word 'Home' in the generated HTML file. It requires Hugo to be installed and available in the system path. The commands output generated site files to the 'newpublic' directory and check for correct content; adjust the file paths as needed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__publishdir_in_config.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo\n\ngrep 'Home' newpublic/index.html\n```\n\n----------------------------------------\n\nTITLE: Hugo Render Hooks Directory Structure\nDESCRIPTION: The directory structure for implementing render hooks in Hugo, showing template files for different element types.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\n└── _default/\n    └── _markup/\n        ├── render-blockquote.html\n        ├── render-codeblock.html\n        ├── render-heading.html\n        ├── render-image.html\n        ├── render-link.html\n        ├── render-passthrough.html\n        └── render-table.html\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Deploy Command with Force Flag\nDESCRIPTION: This snippet demonstrates an attempt to use the Hugo deploy command with the --force flag. The command is expected to fail, producing an error message that deploy is not supported in the current version of Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/withdeploy-off/deploy_off.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n! hugo deploy --force\n```\n\n----------------------------------------\n\nTITLE: Defining Content for Page 'p2' (Markdown)\nDESCRIPTION: This Markdown file (`content/p2/index.md`) defines the content for a page located at the path `/p2/`. It uses YAML front matter to set the title to \"P2\". This file and its corresponding output directory (`public/p2`) are checked by the script to ensure they are not unintentionally affected by changes made to page `p1` during the live reload test.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_content.txt#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/p2/index.md --\n---\ntitle: P2\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Module Mounts and Disabling Kinds (TOML)\nDESCRIPTION: This `hugo.toml` configuration file disables the generation of 'taxonomy' and 'term' pages. It defines several module mounts: `myfiles/f1.txt` is mounted to `static/files/f1.txt`, `f3.txt` from the project root is mounted to `static/f3.txt`, and the entire default `static` directory is explicitly mounted to `static`. These mounts dictate how files are copied into the final build output ('public') directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__static_composite.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ndisableKinds = [\"taxonomy\", \"term\"]\n[module]\n[[module.mounts]]\nsource = \"myfiles/f1.txt\"\ntarget = \"static/files/f1.txt\"\n[[module.mounts]]\nsource = \"f3.txt\"\ntarget = \"static/f3.txt\"\n[[module.mounts]]\nsource = \"static\"\ntarget = \"static\"\n```\n\n----------------------------------------\n\nTITLE: Using TAXONOMY.Page Method in Hugo Templates\nDESCRIPTION: Example of how to defensively use the TAXONOMY.Page method to get a taxonomy page. The method returns nil if the taxonomy has no terms, so a with statement is used to check for existence.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Page.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.Taxonomies.tags.Page }}\n  <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Gen Man Page Generation - Bash\nDESCRIPTION: This snippet checks the help output and execution of the 'hugo gen man' command, which generates man pages for Hugo. It verifies correct man page messages in stdout and tests file creation with directory parameters. Hugo CLI must be available. Inputs are help flags and directory options; outputs include textual confirmation in stdout and generated manpage files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/gen.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhugo gen man -h\nstdout 'up-to-date man pages'\nhugo gen man --dir manpages\n```\n\n----------------------------------------\n\nTITLE: Using math.Product with Scalars and Slices in Go HTML Template\nDESCRIPTION: This snippet demonstrates the `math.Product` function in a Hugo template. It takes a mix of scalar numbers (1, 4) and a slice created with `(slice 2 3)` as arguments and returns their product (1 * 2 * 3 * 4 = 24). The function accepts scalars, slices, or a mix of both and returns a `float64`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Product.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.Product 1 (slice 2 3) 4 }} → 24\n```\n\n----------------------------------------\n\nTITLE: Tags Taxonomy Listing\nDESCRIPTION: Template for displaying all terms in the tags taxonomy with their counts.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Taxonomies.md#2025-04-23_snippet_6\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Taxonomies.tags }}\n    <li><a href=\"{{ .Page.Permalink }}\">{{ .Page.Title }}</a> {{ .Count }}</li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Transformation for Preact with js.Build in Hugo Go HTML Template\nDESCRIPTION: Demonstrates setting up js.Build to handle automatic JSX transformation using the Preact library. The Go template configures both 'JSX' and 'JSXImportSource' for the build pipeline. Requirements: Preact must be installed as an npm dependency and the source file must use JSX. This enables automatic import of JSX pragma helpers, simplifying code using Preact. Input: JSX file path and build options. Output: JS bundle ready for Preact JSX syntax.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/js/options.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $js := resources.Get \"js/main.jsx\" | js.Build (dict \"JSX\" \"automatic\" \"JSXImportSource\" \"preact\") }}\n```\n\n----------------------------------------\n\nTITLE: Counting Occurrences of a Heading ID in Hugo\nDESCRIPTION: Uses the Fragments.Identifiers.Count method to count how many times a specific heading ID appears on the page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Fragments.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Fragments.Identifiers.Count \"section-2\" }} → 1\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time Values in Hugo\nDESCRIPTION: Illustrates how to manipulate time.Time values by adding or subtracting durations using Add and Sub methods in Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{ $futureDate := .Date.Add (duration \"24h\") }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Variables in Hugo Templates Using getenv (Go HTML Template)\nDESCRIPTION: This snippet demonstrates the use of the getenv template function in Hugo, which retrieves the value of a given environment variable name. The example shows how to display the HOME and USER environment variable values directly in site templates. Requires the corresponding environment variables to be allowed by the Hugo configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/Getenv.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ getenv \"HOME\" }} → /home/victor\n{{ getenv \"USER\" }} → victor\n```\n\n----------------------------------------\n\nTITLE: Extracting Year from Time Object in Hugo Templates\nDESCRIPTION: Demonstrates how to get the year value from a time.Time object using the Year method. First creates a time object using time.AsTime, then extracts just the year component.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Year.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Year }} → 2023\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter Resources with Name Parameter - TOML/YAML (Front Matter)\nDESCRIPTION: This pseudo-code snippet demonstrates front matter configuration in a Hugo page, defining a resource with a 'src' and a custom 'name'. Required dependency: Hugo's support for TOML/YAML front matter in content files. The 'resources' array ties a source file to a custom display name, which the .Name method uses.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Name.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Example'\\n[[resources]]\\nsrc = 'images/a.jpg'\\nname = 'Sunrise in Bryce Canyon'\n```\n\n----------------------------------------\n\nTITLE: Using Vimeo Shortcode with Named Parameters\nDESCRIPTION: Example showing how to use the vimeo shortcode with named parameters for id, class, and title attributes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/vimeo.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{</* vimeo id=55073825 class=\"foo bar\" title=\"My Video\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Overriding Site Parameters in Page Front Matter (TOML)\nDESCRIPTION: Demonstrates setting page-specific parameters in the front matter of a Markdown content file using TOML format. The `display_toc` parameter within the nested `[params]` table is set to `false`, specifically overriding the site-level default for this particular page. Standard front matter fields like `title`, `date`, and `draft` are also shown.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Param.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Example'\ndate = 2023-01-01\ndraft = false\n[params]\ndisplay_toc = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Modules and Imports in hugo.toml (TOML)\nDESCRIPTION: This 'hugo.toml' file configures a Hugo project. It sets the project title and defines module imports under the '[module]' section. It imports two modules: 'github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml' (which is explicitly disabled with 'disable = true') and 'github.com/gohugoio/hugo-mod-integrationtests/withhugotoml'. This configuration influences how Hugo resolves and uses module dependencies.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod__disable.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Modules Test\"\n[module]\n[[module.imports]]\npath=\"github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml\"\ndisable = true\n[[module.imports]]\npath=\"github.com/gohugoio/hugo-mod-integrationtests/withhugotoml\"\n```\n\n----------------------------------------\n\nTITLE: Example File Content (README.md)\nDESCRIPTION: This snippet shows the sample content of a `README.md` file located in the root of the Hugo project. This content will be read by the `os.ReadFile` function in the subsequent template example.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/ReadFile.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis is **bold** text.\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Server Error Recovery - Bash Script\nDESCRIPTION: This Bash script automates the testing of the Hugo server's behavior when a front matter error is introduced and then fixed in a content file. Key operations include starting the server, performing HTTP requests to check server responses, simulating a front matter syntax error using sed-like replacement, and ensuring the server recovers upon correction. Dependencies include Hugo CLI, Bash shell utilities, and a running environment that supports process management and HTTP requests.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__error_recovery_edit_content.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test the hugo server command when adding a front matter error to a content file\n# and then fixing it.\n\nhugo server &\n\nwaitServer\n\nhttpget ${HUGOTEST_BASEURL_0}p1/ 'Title: P1'\n\nreplace $WORK/content/p1/index.md 'title:' 'titlecolon'\nhttpget ${HUGOTEST_BASEURL_0}p1/ 'failed'\n\nreplace $WORK/content/p1/index.md 'titlecolon' 'title:'\nhttpget ${HUGOTEST_BASEURL_0}p1/ 'Title: P1'\n\nstopServer\n\n```\n\n----------------------------------------\n\nTITLE: Showing Command-Specific Options for 'hugo list expired' - Shell\nDESCRIPTION: Lists the flags specifically available for the 'hugo list expired' command, providing help and usage information. The '-h' or '--help' flag can be used to display this information in the command line. This helps users understand how to invoke the expired content listing feature with Hugo, as well as what help is available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_expired.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for expired\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Jekyll Import Help (Shell)\nDESCRIPTION: Executes the Hugo CLI command `hugo import jekyll -h` to display the specific help message for importing from Jekyll. The `stdout` line specifies the expected output pattern.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/import_jekyll.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhugo import jekyll -h\nstdout 'hugo import from Jekyll\\.'\n```\n\n----------------------------------------\n\nTITLE: Verifying Hugo Quiet Mode Output (Shell)\nDESCRIPTION: This command asserts that the preceding `hugo --quiet` command produced no output on standard output. The `! stdout .` syntax typically means 'assert that standard output does not match any character', effectively checking for empty output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Boolean Values\nDESCRIPTION: Examples of the two possible boolean values in code format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/boolean.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntrue\n```\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Initializing Hugo Content Structure (Bash)\nDESCRIPTION: This snippet demonstrates how to create a content directory, initialize a new Hugo bundle with a custom archetype, and search for specific content within the generated files using command-line utilities. It requires Hugo to be installed in the environment. The commands sequentially prepare the content, generate a new post in the 'mybundle' format, and use grep to verify the presence of expected content or language metadata in specific files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content_archetypedir.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir content\nhugo new content --kind mybundle post/first-post\ngrep 'First Post' content/post/first-post/index.md\ngrep 'Site Lang: en' content/post/first-post/index.md\ngrep 'Site Lang: no' content/post/first-post/index.no.md\ngrep 'A text file.' content/post/first-post/file.txt\n\n```\n\n----------------------------------------\n\nTITLE: Returning Project Working Directory with Hugo Template - Go HTML Template\nDESCRIPTION: This snippet uses the 'hugo.WorkingDir' function within a Go HTML template to return the full path of the Hugo project's working directory. It requires a running Hugo site and does not require external dependencies. The output is a string indicating the filesystem location of the project root, and this is helpful for debugging or generating content that contains absolute paths. No parameters are needed, and the output is only available at build or render time during Hugo processing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/hugo/WorkingDir.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ hugo.WorkingDir }} → /home/user/projects/my-hugo-site\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom RSS Templates File Layout for Hugo (Text)\nDESCRIPTION: This text example shows the recommended directory structure for custom RSS templates within a Hugo project. Place the RSS template files (e.g., home.rss.xml, section.rss.xml) inside 'layouts/_default/'. This approach allows custom RSS rendering for different page kinds—home, section, taxonomy, and term—overriding Hugo's embedded default. No code execution; intended as a structural guide.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/rss.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\n└── _default/\n    ├── home.rss.xml\n    ├── section.rss.xml\n    ├── taxonomy.rss.xml\n    └── term.rss.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Site in Hugo\nDESCRIPTION: Example configuration for a multilingual Hugo site with English and Spanish languages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelLangURL.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ndefaultContentLanguage = 'en'\ndefaultContentLanguageInSubdir = true\n[languages.en]\nweight = 1\n[languages.es]\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Hugo New Command (sh)\nDESCRIPTION: This snippet shows the command-line option available to display help information specifically for the `hugo new` subcommand within the Hugo CLI. Running `hugo new --help` will output usage details and available flags for creating new content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n  -h, --help   help for new\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Site with Emoji Shortcodes in Menus\nDESCRIPTION: This code snippet shows how to enable emoji support in Hugo and configure the main menu with emoji shortcodes as pre and post elements for each menu entry. It demonstrates setting up 'About' and 'Contact' menu items with different emoji indicators.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/menu-entries/pre-and-post.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nenableEmoji = true\n\n[[menus.main]]\nname = 'About'\npageRef = '/about'\npost = ':point_left:'\npre = ':point_right:'\nweight = 10\n\n[[menus.main]]\nname = 'Contact'\npageRef = '/contact'\npost = ':arrow_left:'\npre = ':arrow_right:'\nweight = 20\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Build with Path Warning Check (Shell)\nDESCRIPTION: This command executes the Hugo static site generator build process with the `--printPathWarnings` flag enabled. This flag instructs Hugo to output warnings specifically related to potential path issues or ambiguities during the site build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings-postprocess.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo --printPathWarnings\n```\n\n----------------------------------------\n\nTITLE: AbsLangURL Usage With Leading Slash - Base URL Example 2\nDESCRIPTION: Demonstrates usage of absLangURL function with slash-prefixed paths when baseURL is set to https://example.org/docs/\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/AbsLangURL.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ absLangURL \"/\" }}          → https://example.org/en/\n{{ absLangURL \"/articles\" }}  → https://example.org/en/articles\n{{ absLangURL \"/style.css\" }} → https://example.org/en/style.css\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Options - Hugo CLI - Shell\nDESCRIPTION: Enumerates additional options inherited from parent commands that can be used with \"hugo version\". These options customize configuration, environment, output paths, logging, and behavior. Prerequisite: a functional Hugo installation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_version.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Default Hugo Embedded robots.txt Content\nDESCRIPTION: This shows the default content generated by Hugo's internal `robots.txt` template when `enableRobotsTXT` is set to `true` and no custom template is found. The `User-agent: *` directive applies the rules (in this case, none, meaning allow all) to all web crawlers that respect the Robots Exclusion Protocol.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/robots.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Page Aliases in Hugo Templates\nDESCRIPTION: Example of how to access and iterate through the aliases defined in a page's front matter using the Page.Aliases method in a Hugo template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Aliases.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Aliases }}\n  {{ . }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Displaying File Structure in Hugo Content Directory\nDESCRIPTION: Shows a typical content directory structure in Hugo with nested sections and pages that will be used in the InSection examples.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/InSection.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── auctions/\n│   ├── 2023-11/\n│   │   ├── _index.md\n│   │   ├── auction-1.md\n│   │   └── auction-2.md\n│   ├── 2023-12/\n│   │   ├── _index.md\n│   │   ├── auction-3.md\n│   │   └── auction-4.md\n│   ├── _index.md\n│   ├── bidding.md\n│   └── payment.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Go Module for Sub-Module (Go Module)\nDESCRIPTION: This golden file (`go.mod.testsubmod`) defines the expected content of the `go.mod` file after running `hugo mod init testsubmod` within the `submod` directory. It specifies the module name (`testsubmod`) and the required Go version, using a variable `${GOVERSION}` likely substituted during the test.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod.txt#2025-04-23_snippet_5\n\nLANGUAGE: go.mod\nCODE:\n```\n-- golden/go.mod.testsubmod --\nmodule testsubmod\n\ngo ${GOVERSION}\n```\n\n----------------------------------------\n\nTITLE: Ordinal Date Formatting in Hugo\nDESCRIPTION: Shows how to format dates with ordinal day numbers using the humanize function combined with Format method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Format.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := \"2023-01-27T23:44:58-08:00\" }}\n{{ $t = time.AsTime $t }}\n\n{{ humanize $t.Day }} of {{ $t.Format \"January 2006\" }} → 27th of January 2023\n```\n\n----------------------------------------\n\nTITLE: Truncating Time Values in Hugo Templates\nDESCRIPTION: Demonstrates how to use the Truncate method to round down a timestamp to the nearest hour. The example shows formatting a specific timestamp and truncating it using a 1-hour duration interval.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Truncate.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $d := time.ParseDuration \"1h\"}}\n\n{{ ($t.Truncate $d).Format \"2006-01-02T15:04:05-00:00\" }} → 2023-01-27T23:00:00-00:00\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Page Resource Directory Structure Without Name Parameter - Text\nDESCRIPTION: Shows a directory layout for a page bundle where no custom 'name' is set in the resource front matter, so fallback naming by file path will occur. Illustrative only, for understanding Hugo's default behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Name.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── example/\\n│   ├── images/\\n│   │   └── Sunrise in Bryce Canyon.jpg\\n│   └── index.md\\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Terminating range statements in Hugo templates\nDESCRIPTION: Illustrates how to use the end statement to close a range loop. The example iterates through a slice of integers, outputting each value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/end.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := slice 1 2 3 }}\n{{ range $var }}\n  {{ . }} → 1 2 3 \n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Including Common Content using Hugo Shortcode\nDESCRIPTION: This snippet uses the Hugo `include` shortcode to embed content from the specified file (`/_common/menu-entries/pre-and-post.md`) into the current page. This pattern promotes content reuse, likely incorporating shared explanations about menu entry properties like `pre` and `post`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Pre.md#2025-04-23_snippet_0\n\nLANGUAGE: Hugo\nCODE:\n```\n{{% include \"/_common/menu-entries/pre-and-post.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Structure Leading to Page Collisions in Hugo\nDESCRIPTION: A directory structure example showing how a content adapter and a regular content file might collide by targeting the same publication path. This illustrates a situation where the 'books/the-hunchback-of-notre-dame' path would have content from either the adapter or the markdown file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n└── books/\n    ├── _content.gotmpl  <-- content adapter\n    ├── _index.md\n    └── the-hunchback-of-notre-dame.md\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format\nDESCRIPTION: Example of a properly formatted Git commit message with summary, detailed description, and issue references.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\ngit commit -m \"content: Restructure the taxonomy page\\n\\nThis restructures the taxonomy page by splitting topics into logical\\nsections, each with one or more examples.\\n\\nFixes #9999\\nCloses #9998\"\n```\n\n----------------------------------------\n\nTITLE: Updating Hugo Modules\nDESCRIPTION: Various commands for updating Hugo modules including updating all modules, specific modules, and getting specific versions\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-modules/use-modules.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhugo mod get -u\nhugo mod get -u ./...\nhugo mod get -u github.com/gohugoio/myShortcodes\nhugo mod get github.com/gohugoio/myShortcodes@v1.0.7\n```\n\n----------------------------------------\n\nTITLE: Parsing RFC Style Date without Time Zone in Hugo\nDESCRIPTION: Illustrates Hugo parsing a date string in a common format ('15 Oct 2023') without explicit time zone information. Hugo defaults to using the 'Etc/UTC' time zone.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/parsable-date-time-strings.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n15 Oct 2023\n```\n\n----------------------------------------\n\nTITLE: Unsetting Hugo Cache Directory Environment Variable in Shell\nDESCRIPTION: Unsets the `HUGO_CACHEDIR` environment variable for the subsequent command using the `env` utility. This is done to test Hugo's default cache directory detection when the variable isn't explicitly defined. Requires a shell environment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/config__cachedir.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv HUGO_CACHEDIR=\n```\n\n----------------------------------------\n\nTITLE: Fourier Series Expansion for x² in LaTeX\nDESCRIPTION: This LaTeX snippet represents the Fourier series expansion of the function f(x)=x² on the interval [-π, π], which is used in one of the proofs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\dfrac{a_{0}}{2}+\\sum_{n=1}^{\\infty }(a_{n}\\cos nx+b_{n}\\sin nx)\n```\n\n----------------------------------------\n\nTITLE: Deploying Hugo Site with Rclone (Unconfigured)\nDESCRIPTION: This snippet demonstrates how to deploy a Hugo site using Rclone without prior configuration. It first builds the Hugo site with garbage collection and minification, then uses Rclone to sync the public directory to a remote server via SFTP.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rclone.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nhugo --gc --minify\nrclone sync --interactive --sftp-host sftp.example.com --sftp-user www-data --sftp-ask-password public/ :sftp:www/\n```\n\n----------------------------------------\n\nTITLE: AbsLangURL Usage With Leading Slash - Base URL Example 1\nDESCRIPTION: Demonstrates usage of absLangURL function with slash-prefixed paths when baseURL is set to https://example.org/\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/AbsLangURL.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ absLangURL \"/\" }}          → https://example.org/en/\n{{ absLangURL \"/articles\" }}  → https://example.org/en/articles\n{{ absLangURL \"/style.css\" }} → https://example.org/en/style.css\n```\n\n----------------------------------------\n\nTITLE: Using the Vimeo Shortcode in Markdown\nDESCRIPTION: Shows how to use the vimeo shortcode in Hugo markdown content to embed a video by its ID.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/vimeo.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{</* vimeo 55073825 */>}}\n```\n\n----------------------------------------\n\nTITLE: Logging into Firebase CLI\nDESCRIPTION: This command initiates the Firebase login process, opening a browser for account selection.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Debugging Hugo Fragments HeadingsMap Structure\nDESCRIPTION: Outputs the nested map of all headings on the page using the debug.Dump function.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Fragments.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<pre>{{ debug.Dump .Fragments.HeadingsMap }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Privacy Configuration with code-toggle Shortcode (Go Template)\nDESCRIPTION: This code snippet invokes Hugo's code-toggle shortcode to display the default privacy configuration settings. The shortcode references the 'privacy' configuration section and is meant to visually render Hugo's privacy config block in the documentation. No parameters beyond the config key are required; the output is presentation-ready. It is designed to be used in Hugo documentation and requires that the 'code-toggle' shortcode is properly defined and available within your Hugo modules.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/privacy.md#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{< code-toggle config=privacy />}}\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template (Plaintext)\nDESCRIPTION: This template provides the standard Apache License 2.0 boilerplate notice text. It should be included in source files, typically within comments appropriate for the file format, after replacing the placeholders '[yyyy]' with the copyright year(s) and '[name of copyright owner]' with the owner's name. The notice asserts the work is licensed under Apache 2.0 and references the full license terms.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/LICENSE.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Series Content Listing Template\nDESCRIPTION: Template for listing pages associated with a specific series taxonomy term.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Taxonomies.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Taxonomies.series.golang }}\n    <li><a href=\"{{ .Page.RelPermalink }}\">{{ .Page.Title }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Converting TOML to JSON using transform.Remarshal in Hugo\nDESCRIPTION: This snippet demonstrates how to use the transform.Remarshal function to convert a string of TOML data into JSON format. It takes a TOML string as input and outputs the JSON representation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Remarshal.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := `\n  baseURL = 'https://example.org/'\n  languageCode = 'en-US'\n  title = 'ABC Widgets'\n`}}\n<pre>{{ transform.Remarshal \"json\" $s }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Applying Grayscale Image Filter via Hugo .Filter (Go HTML Template Example)\nDESCRIPTION: This example reiterates applying the Grayscale filter to an image in Hugo using the .Filter method. It showcases chaining resource acquisition and image filtering for concise template logic. Requires the images.Grayscale filter and a valid image. Produces an HTML img referencing the grayscale-processed version.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Filter.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"images/original.jpg\" }}\n  {{ with .Filter images.Grayscale }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Closed Interval Inequality Expression\nDESCRIPTION: Mathematical expression showing inequality for a closed interval [0, 1]\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/interval.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0 <= x <= 1\n```\n\n----------------------------------------\n\nTITLE: Structuring Hugo Layouts for Custom Content Type - text\nDESCRIPTION: This snippet shows the layouts directory structure for a custom content type ('miscellaneous'), organizing both contact.html and single.html under layouts/miscellaneous/. This arrangement ensures Hugo selects the correct template based on section and front matter. Input is directory and file structure; output is custom content type template lookup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/lookup-order.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\\n└── miscellaneous/\\n    └── contact.html  <-- renders contact.md\\n    └── single.html   <-- renders about.md\n```\n\n----------------------------------------\n\nTITLE: Using the EchoParam Function in Hugo\nDESCRIPTION: The 'echoParam' function returns the value of a parameter if it exists, otherwise it returns an empty string. This example demonstrates its usage with a dictionary.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n{{ $m := dict \"a\" 1 \"b\" 2 }}\n{{ echoParam $m \"a\" }} → 1\n{{ echoParam $m \"c\" }} → \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sanity Schema for Post Type\nDESCRIPTION: This TypeScript code defines the schema for a 'post' document type in Sanity, including fields for title, summary, slug, publish date, and body content with support for blocks, images, and code.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/PortableText.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineField, defineType} from 'sanity'\n\nexport const postType = defineType({\n  name: 'post',\n  title: 'Post',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'title',\n      type: 'string',\n      validation: (rule) => rule.required(),\n    }),\n    defineField({\n      name: 'summary',\n      type: 'string',\n      validation: (rule) => rule.required(),\n    }),\n    defineField({\n      name: 'slug',\n      type: 'slug',\n      options: {source: 'title'},\n      validation: (rule) => rule.required(),\n    }),\n    defineField({\n      name: 'publishedAt',\n      type: 'datetime',\n      initialValue: () => new Date().toISOString(),\n      validation: (rule) => rule.required(),\n    }),\n    defineField({\n      name: 'body',\n      type: 'array',\n      of: [\n        {\n          type: 'block',\n        },\n        {\n          type: 'image'\n        },\n        {\n          type: 'code',\n          options: {\n            language: 'css',\n            languageAlternatives: [\n              {title: 'HTML', value: 'html'},\n              {title: 'CSS', value: 'css'},\n            ],\n            withFilename: true,\n          },\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Global Page Function in Hugo Templates\nDESCRIPTION: Shows how to access page parameters using the global page function when a Page object is not in context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/global/page.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ page.Params.foo }}\n```\n\n----------------------------------------\n\nTITLE: Converting Weekday to Integer in Hugo Templates\nDESCRIPTION: Shows how to convert a time.Time value's weekday to its integer representation (0-6) in Hugo templates. Uses time.AsTime to parse a timestamp and returns 5 (Friday) for the given date.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/time/Weekday.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }}\n{{ $t.Weekday | int }} → 5\n```\n\n----------------------------------------\n\nTITLE: Content Directory Structure\nDESCRIPTION: Demonstrates the organization of content files with taxonomy assignments in Hugo project structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Taxonomies.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── books/\n│   ├── and-then-there-were-none.md --> genres: suspense\n│   ├── death-on-the-nile.md        --> genres: suspense\n│   └── jamaica-inn.md              --> genres: suspense, romance\n│   └── pride-and-prejudice.md      --> genres: romance\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo on OpenBSD using package manager\nDESCRIPTION: Command to install Hugo on OpenBSD using the pkg_add package manager. This command prompts for selection between editions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/bsd.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndoas pkg_add hugo\n```\n\n----------------------------------------\n\nTITLE: Reverse Alphabetical Taxonomy Sorting in Hugo\nDESCRIPTION: Reverses the alphabetically sorted taxonomy order using the Reverse method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Alphabetical.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomyObject.Alphabetical.Reverse }}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of InSection with Context in Hugo Templates\nDESCRIPTION: Demonstrates a common mistake when using InSection where the context is lost, comparing a section page to itself rather than to the current page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/InSection.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/auctions\" }}\n  {{ .InSection . }} → true\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Default rst2html CLI Flags in Hugo\nDESCRIPTION: This snippet displays the default command-line flags (`--leave-comments --initial-header-level=2`) that Hugo passes to the external `rst2html` executable (part of Docutils) when rendering reStructuredText content. These flags preserve comments and adjust the starting header level. Requires Docutils and Python to be installed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/formats.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n--leave-comments --initial-header-level=2\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Template Block\nDESCRIPTION: Demonstrates how to execute a previously defined template block with a pipeline context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/block.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"name\" pipeline }}\n```\n\n----------------------------------------\n\nTITLE: Pushing Hugo Site to GitLab Repository\nDESCRIPTION: These shell commands demonstrate how to push a newly created Hugo site repository to GitLab. It sets up the remote origin and pushes the master branch.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-keycdn/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add origin git@gitlab.com:youruser/ci-example.git\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Open Interval Inequality Expression\nDESCRIPTION: Mathematical expression showing inequality for an open interval (0, 1)\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/interval.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0 < x < 1\n```\n\n----------------------------------------\n\nTITLE: Specifying Options for Hugo Jekyll Import\nDESCRIPTION: Lists the command-line options specifically available for the `hugo import jekyll` command. The `--force` flag permits the import operation even if the target directory is not empty, useful for overwriting or merging. The `-h` or `--help` option displays detailed help information and usage instructions for this specific subcommand.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_import_jekyll.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      --force   allow import into non-empty target directory\n  -h, --help    help for jekyll\n```\n\n----------------------------------------\n\nTITLE: Casting Values to Boolean by Double-negating with not - Go HTML Template\nDESCRIPTION: Shows how to apply the 'not' operator twice in succession (double-negation) to coerce a value to a boolean in Go HTML templates. Requires the presence of the Go templating system and pipes. This pattern converts any type to a boolean value: non-empty values evaluate to true, empty values to false. Useful for ensuring reliable boolean logic in template conditionals.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/not.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ 42 | not | not }} \\u2192 true\n{{ \\\"\\\" | not | not }} \\u2192 false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the After Function in Hugo\nDESCRIPTION: The 'after' function returns all the items in a collection after the specified index. This example shows its usage with an array of integers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ after 1 (slice 1 2 3) }} → [2 3]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resource Type for a Specific Hugo Resource (Go Hugo Template)\nDESCRIPTION: This snippet demonstrates using `resources.Get` to fetch a specific resource ('image/a.jpg') and then accessing its `.ResourceType` property to get the main media type ('image'). It also shows that `.MediaType.MainType` returns the same value in this case. This requires the resource 'image/a.jpg' to exist within the Hugo project's assets or content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/ResourceType.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with resources.Get \"image/a.jpg\" }}\n  {{ .ResourceType }} → image\n  {{ .MediaType.MainType }} → image\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on Gentoo Linux\nDESCRIPTION: Command to install the extended edition of Hugo on Gentoo Linux and its derivatives using the Portage package manager after setting the required USE flags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo emerge www-apps/hugo\n```\n\n----------------------------------------\n\nTITLE: Rendered Output When CSS is Declared Safe - HTML\nDESCRIPTION: This snippet shows the HTML output when a CSS string is declared safe using the safeCSS function. Hugo renders the raw value of the style attribute without substitution, enabling the intended styling to be applied. No dependencies are needed besides Hugo, and it demonstrates the output difference when safeCSS is used properly.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/CSS.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"color: red;\">foo</p>\n```\n\n----------------------------------------\n\nTITLE: Getting File and Directory Info with os.Stat in Go HTML Template\nDESCRIPTION: This snippet demonstrates using Hugo's `os.Stat` function within a Go HTML template. It retrieves `os.FileInfo` for both a file ('README.md') and a directory ('content') and shows how to access properties like `IsDir`, `ModTime`, `Name`, and `Size`. The function first tries to resolve the path relative to the project root, then the content directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/Stat.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $f := os.Stat \"README.md\" }}\n{{ $f.IsDir }}    → false (bool)\n{{ $f.ModTime }}  → 2021-11-25 10:06:49.315429236 -0800 PST (time.Time)\n{{ $f.Name }}     → README.md (string)\n{{ $f.Size }}     → 241 (int64)\n\n{{ $d := os.Stat \"content\" }}\n{{ $d.IsDir }}    → true (bool)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanity Studio for Hugo Integration\nDESCRIPTION: This TypeScript code configures Sanity Studio with necessary plugins and settings for integration with Hugo. It includes the code input plugin for handling code blocks in Portable Text.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/PortableText.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'sanity'\nimport {structureTool} from 'sanity/structure'\nimport {visionTool} from '@sanity/vision'\nimport {schemaTypes} from './schemaTypes'\nimport {media} from 'sanity-plugin-media'\nimport {codeInput} from '@sanity/code-input'\n\nexport default defineConfig({\n  name: 'default',\n  title: 'my-sanity-project',\n\n  projectId: 'mysanityprojectid',\n  dataset: 'production',\n\n  plugins: [structureTool(), visionTool(), media(),codeInput()],\n\n  schema: {\n    types: schemaTypes,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Name - Hugo Template - Go HTML Template\nDESCRIPTION: Retrieves the human-readable name (e.g., 'Deutsch') of the current site language from config using the LanguageName property. Intended for dynamic display of language options in templates. Assumes languageName is set in the config and accessible via the Language object in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Language.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Language.LanguageName }} \\u2192 Deutsch\n```\n\n----------------------------------------\n\nTITLE: Importing React and ReactDOM Clients in JavaScript Modules\nDESCRIPTION: These ES module imports are used to reference React and ReactDOM internally, while relying on shims or actual dependencies. The snippet is dependent on configured shims in the build, which substitute module contents at build time. Useful for cross-environment code reuse. Input: ES imports for 'react' and 'react-dom/client'. Output: module scope React, ReactDOM references.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/js/options.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for `hugo mod verify` (Text)\nDESCRIPTION: Lists and describes the command-line flags specific to `hugo mod verify`. These options control aspects like the base URL (`--baseURL`), cache directory (`--cacheDir`), content directory (`--contentDir`), theme selection (`--theme`), rendering specific segments (`--renderSegments`), and whether to delete the module cache for dependencies that fail verification (`--clean`). The help flag (`--help`) is also included.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_verify.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/\n      --cacheDir string          filesystem path to cache directory\n      --clean                    delete module cache for dependencies that fail verification\n  -c, --contentDir string        filesystem path to content directory\n  -h, --help                     help for verify\n      --renderSegments strings   named segments to render (configured in the segments config)\n  -t, --theme strings            themes to use (located in /themes/THEMENAME/)\n```\n\n----------------------------------------\n\nTITLE: Proper Context Usage with IsDescendant in Hugo Templates\nDESCRIPTION: Shows the correct way to use IsDescendant by referring to the global context with $ to compare the original page to the one within the 'with' block.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsDescendant.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/auctions\" }}\n  {{ $.IsDescendant . }} → true\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: ReactDOM Shim Export for Window-Based ReactDOM Global in JavaScript\nDESCRIPTION: Exports the global ReactDOM instance from window as a CommonJS module for use as a shim. Allows code importing 'react-dom' to use the window.ReactDOM global. Dependencies: global ReactDOM must be loaded. Useful in production builds relying on CDN globals. Input: window.ReactDOM. Output: module.exports proxy to ReactDOM.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/functions/js/options.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// js/shims/react-dom.js\nmodule.exports = window.ReactDOM;\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO-Compatible S3 Deployment Target - Text\nDESCRIPTION: This snippet shows a sample URL format to configure Hugo for deploying to a storage server compatible with the Amazon S3 API (such as MinIO). The URL includes additional query parameters for endpoint, SDK version, and path style usage. No extra code dependencies are required, but the target server must implement the S3 API as expected. Input is a deployment target URL; expected output is successful connection to the compatible S3 endpoint during deployment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/deployment.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ns3://my-bucket?endpoint=https://my.minio.instance&awssdk=v2&use_path_style=true&disable_https=false\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Terms and Pages in a Hugo Taxonomy Object\nDESCRIPTION: Illustrates how to loop through a captured `Taxonomy` object directly. The outer loop iterates through terms (`$term`) and their associated `WeightedPages` (`$weightedPages`), while the inner loop iterates through the pages belonging to that term. It shows linking to both the term page and individual content pages.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/taxonomy/get-a-taxonomy-object.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range $term, $weightedPages := $taxonomyObject }}\n  <h2><a href=\"{{ .Page.RelPermalink }}\">{{ .Page.LinkTitle }}</a></h2>\n  <ul>\n    {{ range $weightedPages }}\n      <li><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></li>\n    {{ end }}\n  </ul>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining an Expired Content Page in Hugo Markdown\nDESCRIPTION: This snippet defines a content page with past 'expiryDate' in its front matter, making it an expired page for Hugo's content filter. Used by tests that verify expired content listing. Key parameters are 'date' and 'expiryDate'. Input: Markdown front matter. Output: page is returned only when filtering for expired content. Location: 'content/expired.md'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/list.txt#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/expired.md --\n---\ndate: 2018-01-01\nexpiryDate: 2019-01-01\n---\n\n```\n\n----------------------------------------\n\nTITLE: Importing Script and Config Parameters within js.Batch Scripts in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how scripts processed by `js.Batch` can access parameters. Parameters defined per-script or per-instance via `SetOptions` are imported from the special `@params` namespace. Batch-wide configuration parameters set using `.Config.SetOptions` are imported from the `@params/config` namespace. This relies on ESBuild's module resolution capabilities as configured by Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/js/Batch.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as params from \"@params\";\nimport * as config from \"@params/config\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Taxonomy Singular Name in Go HTML Template\nDESCRIPTION: Demonstrates how to access the singular name of a taxonomy using the Data method within a taxonomy template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Data.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Data.Singular }} → genre\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Build Benchmark Output - Plain Text\nDESCRIPTION: This snippet shows the plain text output generated by Hugo after building a site, providing detailed statistics including pages, static files, processed images, and total build time. There are no external dependencies required for viewing the output, but generating it requires running Hugo on a compatible project. Key parameters in the output include the count of pages, static assets, paginators, sitemaps, and elapsed time in milliseconds. Inputs are the source site files, and the output is the console build stats as shown. This output is intended for reporting performance metrics and does not execute any operations itself.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/showcase/forestry/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                   | EN   \n+------------------+-----+\n  Pages            | 141  \n  Paginator pages  |   4  \n  Non-page files   |   0  \n  Static files     | 537  \n  Processed images |   0  \n  Aliases          |  60  \n  Sitemaps         |   1  \n  Cleaned          |   0  \n\nTotal in 739 ms\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on Arch Linux and Derivatives\nDESCRIPTION: Command to install the extended edition of Hugo on Arch Linux and its derivatives (EndeavourOS, Garuda Linux, Manjaro, etc.) using the pacman package manager.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S hugo\n```\n\n----------------------------------------\n\nTITLE: Alternative Filtering using 'where' Function (Hugo, Go HTML Template)\nDESCRIPTION: This snippet illustrates an alternative to 'complement' for excluding multiple types from a collection by using the 'where' function with the 'not in' operator. It demonstrates filtering site pages to exclude 'blog' and 'faqs' types, outputting them as links. This solution is Hugo-specific and leverages only built-in template functions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Complement.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range where site.RegularPages \"Type\" \"not in\" (slice \"blog\" \"faqs\") }}\\n  <a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a>\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Hugo Quick Reference Page\nDESCRIPTION: This YAML front matter block defines metadata for a Hugo page about quick reference guides. It specifies the title, link title, description, and weight for the page in Hugo's content structure.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Quick reference guides\nlinkTitle: Quick reference\ndescription: Use these quick reference guides for quick access to key information.\ncategories: []\nkeywords: []\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Dither Filter with Default Options in Go HTML Template\nDESCRIPTION: This snippet demonstrates creating an image filter (`$filter`) using `images.Dither` without any arguments. This will apply the default dithering settings (FloydSteinberg method, black and white palette, serpentine enabled, full strength).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Dither.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Dither }}\n```\n\n----------------------------------------\n\nTITLE: Checking Modulus with modBool in Go HTML Template\nDESCRIPTION: This snippet demonstrates using the `modBool` function (an alias for `math.ModBool`) within a Hugo template. It checks if the first integer (15) is perfectly divisible by the second integer (3). The expected output `true` indicates that 15 modulo 3 equals 0. The function takes two integer arguments and returns a boolean value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/ModBool.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ modBool 15 3 }} → true\n\n```\n\n----------------------------------------\n\nTITLE: Creating .ssh Directory\nDESCRIPTION: Command to create the .ssh directory in the user's home directory if it doesn't exist. This directory stores SSH configuration and keys.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n~$ cd && mkdir .ssh & cd .ssh\n```\n\n----------------------------------------\n\nTITLE: Sample YAML Data for Fiction Books (data/books/fiction.yaml)\nDESCRIPTION: Provides sample content for the `data/books/fiction.yaml` file. This YAML file contains an array of objects, each representing a fiction book with `title`, `author`, and `isbn` properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Data.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- title: The Hunchback of Notre Dame\n  author: Victor Hugo\n  isbn: 978-0140443530\n- title: Les Misérables\n  author: Victor Hugo\n  isbn: 978-0451419439\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Hugo Commands\nDESCRIPTION: Command-line options inherited from parent Hugo commands that are applicable to `hugo completion bash`. These include options for setting the clock (`--clock`), specifying configuration files/directories (`--config`, `--configDir`), defining the output destination (`--destination`), setting the build environment (`--environment`), managing logging (`--logLevel`), controlling build behavior (`--noBuildLock`, `--quiet`, `--renderToMemory`), and specifying source/themes directories (`--source`, `--themesDir`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_bash.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Double Integral Proof via Period Representation\nDESCRIPTION: Uses period representation and double integral transformation to prove ζ(2) = π²/6 by showing they are accessible identities.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_21\n\nLANGUAGE: latex\nCODE:\n```\nI=\\int_{0}^{1}\\int_{0}^{1}\\frac{1}{1-xy}\\frac{dxdy}{\\sqrt{xy}}\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Using Global Resources in Hugo\nDESCRIPTION: Modern alternative to getJSON using resources.Get and transform.Unmarshal to access global JSON resources with improved error handling.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $data := dict }}\n{{ $p := \"data/books.json\" }}\n{{ with resources.Get $p }}\n  {{ $data = . | transform.Unmarshal }}\n{{ else }}\n  {{ errorf \"Unable to get resource %q\" $p }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Build Performance Metrics for Multilingual Ampio Knowledge Base\nDESCRIPTION: This snippet shows the output of a Hugo build process, displaying the number of pages, images, and other assets processed for both English and Polish languages. It demonstrates Hugo's performance with a total build time of 1096 milliseconds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/showcase/ampio-help/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                   | EN  | PL\n-------------------+-----+------\n  Pages            | 483 | 486\n  Paginator pages  |  56 |  55\n  Non-page files   | 745 | 749\n  Static files     | 917 | 917\n  Processed images | 487 | 490\n  Aliases          |  80 |  79\n  Sitemaps         |   2 |   1\n  Cleaned          |   0 |   0\n\nTotal in 1096 ms\n```\n\n----------------------------------------\n\nTITLE: Registering a Media Type Without Suffix or Delimiter in Hugo (TOML)\nDESCRIPTION: This configuration snippet creates a new media type without any filename suffix or delimiter, useful for files like Netlify '_redirects'. The section header defines the arbitrary MIME type ('text/netlify'), with an empty 'delimiter' value. Inputs: Custom MIME type and an empty delimiter. Output: Hugo will generate files with no extension for this type. Limitations: The output format must use this media type to produce extensionless files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/media-types.md#2025-04-23_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[mediaTypes.\"text/netlify\"]\ndelimiter = \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML block constitutes the front matter for a Hugo content file. It defines essential metadata: `title` sets the main page title, `linkTitle` provides a shorter title for links (like in menus), `description` offers a summary for SEO and listings, and `categories` and `keywords` are arrays for content organization and searching.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/strings/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: String functions\nlinkTitle: strings\ndescription: Use these functions to work with strings.\ncategories: []\nkeywords: []\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Resource in a Layout Template (Go HTML Template)\nDESCRIPTION: Demonstrates how to access and render a previously added page resource (such as an image) in a Hugo layout template. It uses the .Resources.Get method and prints the image's permalink with its width, height, and alt attributes. Intended for use within a single page template.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.Get \"cover.jpg\" }}\\n  <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\">\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Hugo Taxonomies Section Configuration - TOML\nDESCRIPTION: Defines a taxonomy named 'author' mapping to 'authors' in Hugo's configuration. Placed under the [taxonomies] section in config.toml. Prerequisite is a proper Hugo directory structure and taxonomy naming.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[taxonomies]\nauthor = 'authors'\n```\n\n----------------------------------------\n\nTITLE: Running Hugo Garbage Collection for Image Resources\nDESCRIPTION: Command to remove unused processed images from the resources directory, useful after changing image processing methods or removing images.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nhugo --gc\n```\n\n----------------------------------------\n\nTITLE: Periods-Based Proof for ζ(2) = π²/6\nDESCRIPTION: Markus Scheuer's proof based on periods (complex numbers whose real and imaginary parts are values of convergent integrals of rational functions), showing that both ζ(2) and π²/6 are periods forming an accessible identity.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_20\n\nLANGUAGE: latex\nCODE:\n```\n\\pi= \\iint \\limits_{x^2+y^2\\leq 1}dxdy=\\int_{-\\infty}^{\\infty}\\frac{dx}{1+x^2}\n```\n\n----------------------------------------\n\nTITLE: Basic Gist Shortcode Usage in Hugo\nDESCRIPTION: Demonstrates how to use the gist shortcode to embed a GitHub Gist in Hugo content by specifying the username and Gist ID.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/gist.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{</* gist user 23932424365401ffa5e9d9810102a477 */>}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Previous and Next Links in Hugo Single Page - Go HTML Template\nDESCRIPTION: This snippet conditionally renders links to the previous and next pages within the current section using Hugo's 'PrevInSection' and 'NextInSection' methods. Dependencies include Hugo and Go HTML templates. It checks if a neighboring page exists before rendering an anchor tag to its RelPermalink. Inputs are the current .Page object, and the output is HTML navigation links. Defensive coding is used to avoid rendering links when neighbors do not exist.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/page/nextinsection-and-previnsection.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .PrevInSection }}\n  <a href=\"{{ .RelPermalink }}\">Previous</a>\n{{ end }}\n\n{{ with .NextInSection }}\n  <a href=\"{{ .RelPermalink }}\">Next</a>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Basic Inner Content (HTML)\nDESCRIPTION: Shows the resulting HTML generated by Hugo when processing the Markdown call with the basic `card.html` shortcode template. Note that the Markdown (`**best**`) within the inner content is rendered as plain text in this case.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Inner.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\">\n  <div class=\"card-title\">Product Design</div>\n  <div class=\"card-content\">\n    We design the **best** widgets in the world.\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML block serves as the front matter for a Hugo content file. It sets the page's main title (`title`), the title used in links (`linkTitle`), and a brief `description` of the page's content, which focuses on functions used to call partial templates. The `categories` and `keywords` fields are included but empty.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Partial functions\nlinkTitle: partials\ndescription: Use these functions to call partial templates.\ncategories: []\nkeywords: []\n---\n```\n\n----------------------------------------\n\nTITLE: Rotating an Image without Scaling in Hugo Go Templates\nDESCRIPTION: Rotates an image resource 90 degrees counter-clockwise ('r90') without scaling it. It uses `printf` to dynamically construct the dimension string for `.Resize`, swapping the original image's Height and Width to match the dimensions *after* rotation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_21\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Resources.GetMatch \"sunset.jpg\" }}\n  {{ with .Resize (printf \"%dx%d r90\" .Height .Width) }}\n    <img src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\">\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Options with Hugo Commands (Shell)\nDESCRIPTION: Displays command-line options inherited from parent Hugo commands that can be used with `hugo convert toYAML`. These global options control aspects like configuration files (`--config`, `--configDir`), output paths (`-d`, `-o`), build environment (`-e`), logging (`--logLevel`), and other general Hugo behaviors.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert_toYAML.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n  -o, --output string              filesystem path to write files to\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n      --unsafe                     enable less safe operations, please backup first\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Table of Contents Structure\nDESCRIPTION: Shows the HTML structure that Hugo generates for a table of contents using the Fragments.ToHTML method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Fragments.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<nav id=\"TableOfContents\">\n  <ol>\n    <li><a href=\"#section-1\">Section 1</a>\n      <ol>\n        <li><a href=\"#section-11\">Section 1.1</a></li>\n        <li><a href=\"#section-12\">Section 1.2</a></li>\n      </ol>\n    </li>\n    <li><a href=\"#section-2\">Section 2</a></li>\n  </ol>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Specifying Options for 'hugo gen doc'\nDESCRIPTION: Lists the specific command-line options available for the `hugo gen doc` command. The `--dir` flag allows specifying the output directory for the generated Markdown files (defaults to `/tmp/hugodoc/`), and `-h` or `--help` displays help information for this specific command.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen_doc.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --dir string   the directory to write the doc. (default \"/tmp/hugodoc/\")\n  -h, --help         help for doc\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Flags for Hugo Mod Commands (Shell)\nDESCRIPTION: This snippet documents flags that are inherited by 'hugo mod clean' from its parent command, impacting configuration, logging, and runtime behavior. Requires understanding of the Hugo command-line tool and project setup. Users can customize environment, config file, source and destination directories, logging level, and more. Each parameter tunes a specific aspect of the Hugo build or module management workflow.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_clean.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for RSS Feed Link on Home Page\nDESCRIPTION: This snippet shows the rendered HTML result of the previous template code when used on the site's home page. It displays a simple anchor tag linking to the index.xml file, which is the standard RSS feed location.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/OutputFormats.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/index.xml\">RSS Feed</a>\n```\n\n----------------------------------------\n\nTITLE: Netlify Configuration for Hugo with Dart Sass\nDESCRIPTION: Netlify build configuration (netlify.toml) that sets up the environment for Hugo with Dart Sass, including version specifications and a custom build command that installs Dart Sass before building the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/css/Sass.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[build.environment]\nHUGO_VERSION = \"0.144.2\"\nDART_SASS_VERSION = \"1.85.0\"\nNODE_VERSION = \"22\"\nTZ = \"America/Los_Angeles\"\n\n[build]\npublish = \"public\"\ncommand = \"\"\"\n  curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz && \\\n  tar -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz && \\\n  rm dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz && \\\n  export PATH=/opt/build/repo/dart-sass:$PATH && \\\n  hugo --gc --minify \\\n  \"\"\"\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration Example: Disabling Title Capitalization for Taxonomy Lists - TOML\nDESCRIPTION: A sample Hugo configuration setting in TOML format to disable automatic capitalization of taxonomy and term titles in list views. Should be added to the Hugo configuration file (e.g., config.toml). No code execution; impacts presentation only.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ncapitalizeListTitles = false\n```\n\n----------------------------------------\n\nTITLE: Emoji Shortcodes for Marine Animals (Plaintext)\nDESCRIPTION: A list of plaintext shortcodes used to represent marine animal emojis. These shortcodes are typically used in Markdown or systems supporting emoji rendering via text codes, such as Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n:whale:\n:whale2:\n:dolphin:\n:flipper:\n:seal:\n:fish:\n:tropical_fish:\n:blowfish:\n:shark:\n:octopus:\n:shell:\n:coral:\n:jellyfish:\n```\n\n----------------------------------------\n\nTITLE: Defining a Static File Asset (Text)\nDESCRIPTION: This is a simple plain text file (`static/staticfiles/static.txt`) containing the word \"static\". Placed in the `static` directory, Hugo copies it directly to the corresponding path in the `public` directory (`public/staticfiles/static.txt`) during build or server execution. The script verifies the presence and content consistency of this static file directory (`public/staticfiles`) before and after content modifications.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_content.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n-- static/staticfiles/static.txt --\nstatic\n```\n\n----------------------------------------\n\nTITLE: Handling \"Feature Not Available\" Error in Hugo\nDESCRIPTION: This Go HTML Template snippet shows the error message displayed when a feature used in the Hugo project is not available in the installed edition. To resolve this, users need to install a different Hugo edition that supports the required feature, typically the 'extended' edition for Sass/SCSS processing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\nthis feature is not available in this edition of Hugo\n```\n```\n\n----------------------------------------\n\nTITLE: Mapping Single Content Files to Output URLs in Hugo (Text)\nDESCRIPTION: This snippet shows the mapping of a single content file's path within 'content/posts' to its section and slug, using diagrammatic notation. It explains the transformation of a markdown file's file path into its output URL in Hugo and is meant for conceptual understanding within documentation. No dependencies or executable code is involved.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/organization/index.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n                   path (\"posts/my-first-hugo-post.md\")\\n.       ⊢-----------^------------⊣\\n.      section        slug\\n.       ⊢-^-⊣⊢--------^----------⊣\\ncontent/posts/my-first-hugo-post.md\n```\n\n----------------------------------------\n\nTITLE: Emoji Shortcodes for Prepared Food (Plaintext)\nDESCRIPTION: A list of plaintext shortcodes used to represent prepared food emojis (e.g., bread, pizza, meals). These shortcodes are typically used in Markdown or systems supporting emoji rendering via text codes, such as Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n:bread:\n:croissant:\n:baguette_bread:\n:flatbread:\n:pretzel:\n:bagel:\n:pancakes:\n:waffle:\n:cheese:\n:meat_on_bone:\n:poultry_leg:\n:cut_of_meat:\n:bacon:\n:hamburger:\n:fries:\n:pizza:\n:hotdog:\n:sandwich:\n:taco:\n:burrito:\n:tamale:\n:stuffed_flatbread:\n:falafel:\n:egg:\n:fried_egg:\n:shallow_pan_of_food:\n:stew:\n:fondue:\n:bowl_with_spoon:\n:green_salad:\n:popcorn:\n:butter:\n:salt:\n:canned_food:\n```\n\n----------------------------------------\n\nTITLE: Rendering Footer Partial Template (Go HTML Template)\nDESCRIPTION: A simple partial template that outputs a copyright notice with the current year. It uses Hugo's 'now' function to compute the year. Designed to be included in the site's footer via the 'partial' function. Produces a single copyright line; expects Hugo’s time functions to be available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/types.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n<p>Copyright {{ now.Year }}. All rights reserved.</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Hugo Project (go.mod)\nDESCRIPTION: This `go.mod` file defines the Go module for the containing Hugo project, naming it 'foo'. It also specifies the required Go language version (1.20). This file is fundamental for Go's build and dependency management system, which Hugo leverages for its module features.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_get.txt#2025-04-23_snippet_3\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule foo\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Creating a Table using GoAT in Hugo with Custom Classes\nDESCRIPTION: A formal grammar syntax table created using GoAT with custom CSS classes for styling. The table describes syntax productions for a language grammar with rows for different grammatical constructs. The custom class 'w-80 dark-blue' is applied for styling.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/diagrams.md#2025-04-23_snippet_11\n\nLANGUAGE: goat\nCODE:\n```\n┌────────────────────────────────────────────────┐\n│                                                │\n├────────────────────────────────────────────────┤\n│SYNTAX     = { PRODUCTION } .                   │\n├────────────────────────────────────────────────┤\n│PRODUCTION = IDENTIFIER \"=\" EXPRESSION \".\" .    │\n├────────────────────────────────────────────────┤\n│EXPRESSION = TERM { \"|\" TERM } .                │\n├────────────────────────────────────────────────┤\n│TERM       = FACTOR { FACTOR } .                │\n├────────────────────────────────────────────────┤\n│FACTOR     = IDENTIFIER                         │\n├────────────────────────────────────────────────┤\n│          | LITERAL                             │\n├────────────────────────────────────────────────┤\n│          | \"[\" EXPRESSION \"]\"                  │\n├────────────────────────────────────────────────┤\n│          | \"(\" EXPRESSION \")\"                  │\n├────────────────────────────────────────────────┤\n│          | \"{\" EXPRESSION \"}\" .                │\n├────────────────────────────────────────────────┤\n│IDENTIFIER = letter { letter } .                │\n├────────────────────────────────────────────────┤\n│LITERAL    = \"\\\"\\\"\" character { character } \"\\\"\\\"\" .│\n└────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Client-side Redirect HTML Generated for a Hugo Alias (HTML)\nDESCRIPTION: Shows the structure of the redirect HTML page generated by Hugo for an alias. Includes canonical link, noindex meta tag, and a meta refresh to immediately redirect browsers from the old URL to the new one. The file will be generated under the alias path in 'public/'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\\n<html lang=\\\"en-us\\\">\\n  <head>\\n    <title>https://example.org/posts/new-file-name/</title>\\n    <link rel=\\\"canonical\\\" href=\\\"https://example.org/posts/new-file-name/\\\">\\n    <meta name=\\\"robots\\\" content=\\\"noindex\\\">\\n    <meta charset=\\\"utf-8\\\">\\n    <meta http-equiv=\\\"refresh\\\" content=\\\"0; url=https://example.org/posts/new-file-name/\\\">\\n  </head>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: HTML Rendering of Emoji Shortcodes\nDESCRIPTION: This shows how an emoji shortcode in Markdown is rendered to HTML, converting the wave emoji to its corresponding HTML entity code.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nHello! &#x1f44b;\n```\n\n----------------------------------------\n\nTITLE: Structuring Hugo Content Directory - text\nDESCRIPTION: This snippet demonstrates the file structure of the Hugo content directory, depicting how Markdown files for individual pages are placed directly under content/. This structure forms the basis for template selection, with root files inheriting the 'page' content type unless otherwise specified. Inputs are directory and file names; output is the corresponding organization needed for Hugo template lookup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/lookup-order.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── about.md\\n└── contact.md\n```\n\n----------------------------------------\n\nTITLE: Correctly Calling Partials with Context in Hugo\nDESCRIPTION: This Go HTML Template snippet demonstrates the correct way to call a partial template in Hugo. It highlights that the context (represented by '.') must be passed to the partial for it to access page variables and site configuration. The first example shows an incorrect call without context, while the second shows the correct call passing the current context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n```go-html-template\n{{/* incorrect */}}\n{{ partial \"_internal/pagination.html\" }}\n\n{{/* correct */}}\n{{ partial \"_internal/pagination.html\" . }}\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrect Context Usage with IsAncestor in Hugo\nDESCRIPTION: Demonstrates an incorrect implementation where the context inside the with block refers to the section Page object instead of the original context, leading to wrong results.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsAncestor.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/auctions\" }}\n  {{ .IsAncestor . }} → true\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of a Blockquote with Attributes in Hugo (HTML)\nDESCRIPTION: Displays the HTML output as generated by Hugo when rendering a Markdown blockquote with class and boolean attributes. No dependencies beyond Hugo's attribute parsing. Output wraps the blockquote content in a <blockquote> element, with the specified class and hidden attributes included.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/markdown-attributes.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<blockquote class=\\\"foo bar\\\" hidden=\\\"hidden\\\">\\n  <p>This is a blockquote.</p>\\n</blockquote>\n```\n\n----------------------------------------\n\nTITLE: Configuring Open Graph Metadata in Content Front Matter - Hugo Page Front Matter (TOML)\nDESCRIPTION: An example front matter block for a markdown content file, specifying per-page Open Graph variables such as title, description, images, and other arrays like audio, videos, series, and tags. These values override or supplement the site-wide params for granular Open Graph metadata control.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_7\n\nLANGUAGE: hugo\nCODE:\n```\ntitle = \"Post title\"\ndescription = \"Text about this post\"\ndate = 2024-03-08T08:18:11-08:00\nimages = [\"post-cover.png\"]\naudio = []\nvideos = []\nseries = []\ntags = []\n```\n\n----------------------------------------\n\nTITLE: Executing the hugo mod graph Command (Shell)\nDESCRIPTION: Shows the basic syntax for running the 'hugo mod graph' command from the command line. It indicates that the command can accept optional flags and arguments to modify its behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_graph.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod graph [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Basic Hugo Site Configuration in TOML\nDESCRIPTION: A minimal `hugo.toml` configuration file snippet setting the `baseURL` and `title` for a Hugo project. This file provides fundamental settings used by the `hugo` command during site generation or configuration checks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/config__cachedir.txt#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\nbaseURL=\"https://example.com/\"\ntitle=\"My New Hugo Site\"\n```\n\n----------------------------------------\n\nTITLE: Generating vCard QR Code with Advanced Options in Hugo\nDESCRIPTION: Creates a QR code containing contact information in vCard format. This example demonstrates using multiple parameters including error correction level, scale factor, and alt text for accessibility.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/qr.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{{</* qr level=\"low\" scale=2 alt=\"QR code of vCard for John Smith\" */>}}\nBEGIN:VCARD\nVERSION:2.1\nN;CHARSET=UTF-8:Smith;John;R.;Dr.;PhD\nFN;CHARSET=UTF-8:Dr. John R. Smith, PhD.\nORG;CHARSET=UTF-8:ABC Widgets\nTITLE;CHARSET=UTF-8:Vice President Engineering\nTEL;TYPE=WORK:+12065550101\nEMAIL;TYPE=WORK:jsmith@example.org\nEND:VCARD\n{{</* /qr */>}}\n```\n\n----------------------------------------\n\nTITLE: Available Flags for hugo list future - Markdown\nDESCRIPTION: This snippet lists the specific flags available to the \"hugo list future\" subcommand. The primary option is the help flag, which provides usage information for the command via the terminal. This section aids users in understanding available command-line options. The block is formatted as a Markdown usage table and is intended for CLI reference.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_future.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n  -h, --help   help for future\n```\n\n----------------------------------------\n\nTITLE: Accumulating Values in a Range with Hugo Variables (go-html-template)\nDESCRIPTION: Demonstrates initializing and mutating a variable to accumulate a sum while iterating over a slice using the 'range' block. Uses 'add' to increment a running total. The variable $total is output after the range for a final result, which in this example sums to 42. Requires Hugo and exposes how block-scoped variables behave.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_11\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $total := 3 }}\\n{{ range slice 7 11 21 }}\\n  {{ $total = add $total . }}\\n{{ end }}\\n{{ $total }} → 42\n```\n\n----------------------------------------\n\nTITLE: Rendering Home Page with Hugo Variables - HTML/Go Template\nDESCRIPTION: This HTML/Go template snippet outputs the page title and base URL for the home page using Hugo’s template variables (`{{ .Title }}` and `{{ site.BaseURL }}`). It is intended for the `layouts/index.html` file in a Hugo site, rendering the appropriate language and site configuration at generation time. Dependencies include the Hugo static site generator engine and the configuration file (`hugo.toml`). Key inputs are the title and baseURL from the active Hugo context, and the output is a textual header in the rendered index page. There are no major constraints except correct template syntax and accessible configuration properties.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__multihost.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nTitle: {{ .Title }}|BaseURL: {{ site.BaseURL }}|\n```\n\n----------------------------------------\n\nTITLE: Hugo List Drafts Command Options\nDESCRIPTION: Displays the specific command-line options available for the `hugo list drafts` command. The `-h` or `--help` flag shows usage information and available options for this specific command.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_drafts.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for drafts\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSH Client on Debian\nDESCRIPTION: Command to install the OpenSSH client on Debian-based Linux distributions, which is required for SSH key generation and secure connections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install openssh-client\n```\n\n----------------------------------------\n\nTITLE: KeyVals Struct JSON Representation\nDESCRIPTION: This snippet shows the JSON representation of the KeyValues struct created by the keyVals function. It illustrates the structure with a 'Key' field and a 'Values' array.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/KeyVals.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Key\": \"foo\",\n  \"Values\": [\n    \"a\",\n    \"b\",\n    \"c\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML for safeURL Declared URL in Hugo\nDESCRIPTION: This snippet shows the resulting HTML output after using the `safeURL` function on the `irc:` URL. Because the URL was declared safe, Hugo renders it verbatim in the `href` attribute without sanitization.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/URL.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"irc://irc.freenode.net/#golang\">IRC</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Weight in Hugo Templates\nDESCRIPTION: Retrieves the language weight value from the site configuration, which determines the order of languages in the slice returned by the Languages method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Language.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Language.Weight }} → 2\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing Standard Hugo Edition using Go\nDESCRIPTION: Command to compile the current Hugo source code and install the standard edition binary to the Go bin path. Requires Go (version 1.23.0 or later) to be installed and configured in the system's PATH. Should be run from the root of the Hugo project directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/development.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngo install\n```\n\n----------------------------------------\n\nTITLE: Setting the 'url' Front Matter Field in Hugo Without File Extension (TOML)\nDESCRIPTION: Specifies a new URL path for a Hugo page without a file extension, using the 'url' field in TOML front matter. Demonstrates assigning custom article paths that map to clean URLs ending in a slash; typically used to define human-friendly slugs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'My First Article'\\nurl = 'articles/my-first-article'\n```\n\n----------------------------------------\n\nTITLE: Terminating with statements in Hugo templates\nDESCRIPTION: Shows how to use the end statement to close a with block. The with statement creates a new context with the specified variable, making it accessible via the dot notation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/end.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $var := \"foo\" }}\n{{ with $var }}\n  {{ . }} → foo\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Output of os.ReadFile\nDESCRIPTION: Shows the raw output generated by the Hugo template after executing `readFile \"README.md\"`. Note that the content is returned exactly as it appears in the file, without any interpretation (e.g., Markdown processing).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/os/ReadFile.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nThis is **bold** text.\n```\n\n----------------------------------------\n\nTITLE: Visualizing Layered Caching System with Goat (Diagramming Language)\nDESCRIPTION: This snippet uses the 'goat' diagramming language to visually depict Hugo's multi-layered caching strategy, showing the relationships between dynacache, HTTP cache, and file cache. The diagram helps users understand the flow of cached resources and the tiered structure of cache eviction and storage policies. No dependencies are necessary; it's used exclusively for documentation and visualization purposes in technical docs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/http-cache.md#2025-04-23_snippet_0\n\nLANGUAGE: goat\nCODE:\n```\n.-----------.\\n|  dynacache  |\\n '-----+-----'\\n       |\\n       v\\n .----------.\\n| HTTP cache |\\n '-----+----'\\n       |\\n       v\\n .----------.\\n| file cache |\\n '-----+----'\n```\n\n----------------------------------------\n\nTITLE: Executing hugo mod get Command - Shell\nDESCRIPTION: This snippet shows the basic usage template for the 'hugo mod get' command as it would be entered in a shell. It accepts generic flags and arguments, with the purpose of managing and resolving Hugo module dependencies. No prerequisites are required beyond having Hugo installed, and the expected input is a combination of module identifiers and optional flags. The output is the resolution of dependencies within the project context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_get.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo mod get [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Toggling QR Code Visibility for Print Using CSS\nDESCRIPTION: This CSS code hides QR code images by default (class 'qr-code') and makes them visible only when printing, supporting use cases where QR codes are needed solely for printed material. It requires that the rendered <img> has the 'qr-code' class, as set in corresponding template snippets. There are no external dependencies beyond a standards-compliant browser and Hugo-generated HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/QR.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Hide QR code by default */\\n.qr-code {\\n  display: none;\\n}\\n\\n/* Show QR code when printing */\\n@media print {\\n  .qr-code {\\n    display: block; \\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of a Deeply Nested Map\nDESCRIPTION: This snippet displays the JSON structure resulting from the Go HTML template example where a slice was used as a key with the `dict` function (`dict (slice \"a\" \"b\" \"c\") \"value\"`). It shows the nested nature of the created map.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/collections/Dictionary.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a\": {\n    \"b\": {\n      \"c\": \"value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Hugo Jekyll Import Results (Shell)\nDESCRIPTION: Uses shell commands (`checkfilecount` and `grep`) to verify the outcome of the preceding `hugo import jekyll` command. It checks for the presence of exactly one file in the target content directory and searches for a specific string within the generated Hugo configuration file (`hugo.yaml`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/import_jekyll.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncheckfilecount 1 myhugosite/content/post\ngrep 'example\\.org' myhugosite/hugo.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Content for Page 'p1' (Markdown)\nDESCRIPTION: This Markdown file (`content/p1/index.md`) defines the content for a page located at the path `/p1/`. It uses YAML front matter to set the initial title to \"P1\". The shell script modifies the title in this file to \"P1 New\" to test the live reload functionality. This content is rendered using the `layouts/_default/single.html` layout.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_content.txt#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/p1/index.md --\n---\ntitle: P1\n---\n```\n\n----------------------------------------\n\nTITLE: HTML output of param shortcode in Hugo\nDESCRIPTION: The rendered HTML output after Hugo processes the param shortcode. Shows how the parameter value replaces the shortcode in the final HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/param.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>We found a red shirt.</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Host in config File\nDESCRIPTION: Command to append SSH host configuration to the config file using a here-document. This defines connection parameters including hostname, port, username, and identity file location.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n~/.ssh/$ cat >> config <<EOF\nHost HOST\n     Hostname HOST\n     Port 22\n     User USER\n     IdentityFile ~/.ssh/rsa_id\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Content Page with Front Matter in Hugo (Markdown)\nDESCRIPTION: This Markdown file (`content/p1.md`) defines a basic content page for the Hugo site. It includes YAML front matter (delimited by `---`) to set the page's `title` metadata to \"P1\". This title is accessible within Hugo templates via the `.Title` variable.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configprod.txt#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/p1.md --\n---\ntitle: \"P1\"\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Sitemap Priority in Go Template\nDESCRIPTION: Retrieves the 'Priority' setting (a float between 0.0 and 1.0) for the current page using the `.Sitemap` method. This value indicates the page's priority relative to other pages on the site. If not set in front matter, it falls back to the site configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Sitemap.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Sitemap.Priority }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Properties in a Hugo Content Adapter (Go HTML Template)\nDESCRIPTION: Shows how to access the main site object from within a Hugo content adapter. The snippet prints the site title, but notes that some site properties (like .Site.Pages) may not be available as the site build is incomplete at this stage.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Title }}\n```\n\n----------------------------------------\n\nTITLE: Processing CSS Asset with Hugo Pipes in Layout (Go Template)\nDESCRIPTION: This Hugo template snippet, intended for `layouts/_default/single.html`, demonstrates the use of Hugo Pipes for asset processing. It retrieves the `styles.css` file using `resources.Get`, then applies `minify`, `fingerprint`, and `resources.PostProcess` transformations. Finally, it outputs the relative permalink (`RelPermalink`) of the processed CSS file, making it ready for inclusion in the final HTML.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings-postprocess.txt#2025-04-23_snippet_2\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ $css := resources.Get \"css/styles.css\" }}\n{{ $css := $css | minify | fingerprint | resources.PostProcess  }}\nCSS: {{ $css.RelPermalink }}\n{{ .Title }}\n```\n\n----------------------------------------\n\nTITLE: Zeta(2) Calculation Using Probability and Cauchy Distribution (LaTeX)\nDESCRIPTION: This proof uses properties of the standard half-Cauchy distribution to derive ζ(2). It involves calculating the probability density function of the ratio of two independent half-Cauchy random variables.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_11\n\nLANGUAGE: latex\nCODE:\n```\np_Y(y) = \\int_0^{\\infty} x p_{X_1} (xy) p_{X_2}(x) dx = \\frac{4}{\\pi^2} \\int_0^\\infty \\frac{x}{(1+x^2 y^2)(1+x^2)}dx\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\frac{1}{2} = \\int_0^1 \\frac{4}{\\pi^2} \\frac{\\log(y)}{y^2-1} dy\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\frac{\\pi^2}{8} = \\int_0^1 \\frac{-\\log(y)}{1-y^2} dy = -\\int_0^1 \\log(y) (1+y^2+y^4 + \\cdots) dy = \\sum_{k=0}^\\infty \\frac{1}{(2k+1)^2}\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment Script File\nDESCRIPTION: Command to open a text editor to create a new deployment script file in the root of the Hugo project directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/deploy-with-rsync.md#2025-04-23_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n~/websites/topologix.fr$ editor deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Hugo Store (Go HTML Template)\nDESCRIPTION: Demonstrates how to set a value for a given key in the Hugo Store. This method is used to store simple key-value pairs.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/store-methods.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.Set \"greeting\" \"Hello\" }}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Permalink Behavior with 'permalinkable' in Go HTML Template\nDESCRIPTION: This Go HTML Template snippet shows how setting the `permalinkable` configuration option to `true` for an output format (like 'json') changes the behavior of `.RelPermalink`. When called within that format's template (`single.json.json`), `.RelPermalink` now returns the URL for that specific format (`/that-page/index.json`) instead of the primary format's URL.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .RelPermalink }} → /that-page/index.json\n{{ with .OutputFormats.Get \"html\" }}\n  {{ .RelPermalink }} → /that-page/\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Navigation Text Representation\nDESCRIPTION: Shows how the breadcrumb navigation would appear to users after applying CSS styling, demonstrating the hierarchical path from home to the current page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Ancestors.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nHome > Auctions > Auctions in November 2023 > Auction 1\n```\n\n----------------------------------------\n\nTITLE: URL and Path Rendering Examples (Text)\nDESCRIPTION: Examples of file paths and the URLs they generate in Hugo, included as plain text. Illustrates default and overridden behavior for URL construction based on content location and front matter values.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\ncontent/posts/post-1.md \\u2192 https://example.org/posts/post-1/\n```\n\nLANGUAGE: Text\nCODE:\n```\nhttps://example.org/posts/my-first-post/\n```\n\nLANGUAGE: Text\nCODE:\n```\nhttps://example.org/my:example/\n```\n\nLANGUAGE: Text\nCODE:\n```\nhttps://example.org/articles/my-first-article/\n```\n\nLANGUAGE: Text\nCODE:\n```\nhttps://example.org/articles/my-first-article.html\n```\n\n----------------------------------------\n\nTITLE: Markdown Fragment Definition Example\nDESCRIPTION: Shows the frontmatter and definition of a URL fragment in Hugo documentation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/fragment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: fragment\n---\n```\n\n----------------------------------------\n\nTITLE: Deploying a Hugo Site\nDESCRIPTION: Builds the site for deployment, generating files in the public directory. Shows the typical directory structure of a built Hugo site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/usage.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nhugo\n```\n\nLANGUAGE: text\nCODE:\n```\npublic/\n├── categories/\n│   ├── index.html\n│   └── index.xml  <-- RSS feed for this section\n├── posts/\n│   ├── my-first-post/\n│   │   └── index.html\n│   ├── index.html\n│   └── index.xml  <-- RSS feed for this section\n├── tags/\n│   ├── index.html\n│   └── index.xml  <-- RSS feed for this section\n├── index.html\n├── index.xml      <-- RSS feed for the site\n└── sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Rendering GoAT Diagram in Markdown\nDESCRIPTION: Example of how to include a GoAT diagram in Markdown using code blocks. This syntax allows you to embed diagrams directly in your content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/diagrams/Goat.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```goat\n.---.     .-.       .-.       .-.     .---.\n| A +--->| 1 |<--->| 2 |<--->| 3 |<---+ B |\n'---'     '-'       '+'       '+'     '---'\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Site Build Statistics - Text\nDESCRIPTION: This text code snippet represents summary statistics from running the Hugo static site generator, showing the number of generated content pages, paginated pages, static files, aliases, and build time. No dependencies are required as this is output from the Hugo CLI. Inputs are determined by the site configuration; outputs are quantitative measures aiding performance analysis and capacity planning for large static sites. Useful for troubleshooting and monitoring automated builds.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/showcase/digitalgov/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                   |  EN\\n-------------------+-------\\n  Pages            | 7973\\n  Paginator pages  |  600\\n  Non-page files   |  108\\n  Static files     |  851\\n  Processed images |    0\\n  Aliases          | 1381\\n  Sitemaps         |    1\\n  Cleaned          |    0\\n\\nBuilt in 32.427 seconds\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Options with 'hugo gen doc'\nDESCRIPTION: Details the global options inherited from parent Hugo commands that can also be used with `hugo gen doc`. These options control various aspects like configuration file paths (`--config`, `--configDir`), build environment (`--environment`), output destination (`--destination`), source directory (`--source`), logging verbosity (`--logLevel`), build behavior (`--quiet`, `--noBuildLock`), rendering mode (`--renderToMemory`), and theme location (`--themesDir`). The `--clock` option allows setting a specific time for the build.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen_doc.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Float [0.d, N.d] with Precision (Go HTML Template)\nDESCRIPTION: This snippet generates a pseudo-random float with one digit after the decimal point in the closed interval [0.1, 5.0]. It multiplies `math.Rand` by 50 (scaling to [0.0, 50.0)), applies `math.Ceil` to round up to an integer in [1, 50] (since `math.Rand` can be 0, but `Ceil(0)` is 0, this case needs careful consideration if 0.0 is possible; however, the effective output range seems intended as [0.1, 5.0]), and then divides by 10 using `div` to obtain a float in the range [0.1, 5.0] with one decimal place.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/Rand.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ div (math.Rand | mul 50 | math.Ceil) 10 }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Glossary Page Front Matter in YAML\nDESCRIPTION: YAML front matter configuration block that defines the settings for a Hugo documentation glossary page. It specifies build rendering rules, cascade settings, layout type, and custom parameters.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Glossary\ndescription: Terms commonly used throughout the documentation.\ncategories: []\nkeywords: []\nbuild:\n  render: always\n  list: always\ncascade:\n  build:\n    render: never\n    list: local\nlayout: single\nparams:\n  hide_in_this_section: true\naliases: [/getting-started/glossary/]\n```\n\n----------------------------------------\n\nTITLE: Providing a Static Text File for Hugo Testing - Plain Text\nDESCRIPTION: A plain static file placed under the static directory, used by Hugo to serve files directly. The file is named static.txt and contains the word 'static', validating world-accessible static asset handling during tests.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__error_recovery_edit_content.txt#2025-04-23_snippet_7\n\nLANGUAGE: plain text\nCODE:\n```\nstatic\n\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with Menu Parameters\nDESCRIPTION: The final HTML output after Hugo processes the menu template. It shows how the custom 'rel' parameter is only applied to the external link, while internal links remain without the attribute.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Params.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/about/\">About</a></li>\n  <li><a href=\"/contact/\">Contact</a></li>\n  <li><a href=\"https://gohugo.io\" rel=\"external\">Hugo</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating Static Content for Hugo Site\nDESCRIPTION: This snippet defines the content of a static file to be served by the Hugo server.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_render_static_to_disk.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is a static file.\n```\n\n----------------------------------------\n\nTITLE: Running Hugo tests with Mage\nDESCRIPTION: These commands run Hugo tests with race detection enabled and perform various code checks.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmage hugoRace\nmage -v check\n```\n\n----------------------------------------\n\nTITLE: Zeta(2) Proof Using Complex Analysis and Limits (LaTeX)\nDESCRIPTION: This proof uses a complex analytic function and its behavior near z=0 to derive ζ(2). It involves the expansion of π²/sin²(πz) as an infinite sum and taking limits.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_12\n\nLANGUAGE: latex\nCODE:\n```\n\\frac{\\pi^2}{\\sin^2\\pi z}=\\sum_{n=-\\infty}^{\\infty}\\frac{1}{(z-n)^2}\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\frac{\\pi^2}{\\sin^2\\pi z}-\\frac{1}{z^2}=\\sum_{n=1}^{\\infty}\\frac{1}{(z-n)^2}+\\sum_{n=1}^{\\infty}\\frac{1}{(z+n)^2}\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\lim_{z\\to 0}\\left(\\frac{\\pi^2}{\\sin^2\\pi z}-\\frac{1}{z^2}\\right)=2\\sum_{n=1}^{\\infty}\\frac{1}{n^2}\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\lim_{z\\to 0}\\left(\\frac{\\pi^2}{\\sin^2\\pi z}-\\frac{1}{z^2}\\right)=\\frac{\\pi^2}{3}\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\sum_{n=1}^{\\infty}\\frac{1}{n^2}=\\frac{\\pi^2}{6}\n```\n\n----------------------------------------\n\nTITLE: Using relLangURL with Non-Slash Inputs (baseURL: https://example.org/)\nDESCRIPTION: Demonstrates the usage of relLangURL function with various inputs that do not begin with a slash, when the baseURL is set to https://example.org/.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/RelLangURL.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ relLangURL \"\" }}                         → /en/\n{{ relLangURL \"articles\" }}                 → /en/articles\n{{ relLangURL \"style.css\" }}                → /en/style.css\n{{ relLangURL \"https://example.org\" }}      → https://example.org\n{{ relLangURL \"https://example.org/\" }}     → /en\n{{ relLangURL \"https://www.example.org\" }}  → https://www.example.org\n{{ relLangURL \"https://www.example.org/\" }} → https://www.example.org/\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to GitHub\nDESCRIPTION: Git commands to commit the new workflow file and push changes to the GitHub repository.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-github-pages/index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit add -A\ngit commit -m \"Create hugo.yaml\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Homepage Content (Markdown)\nDESCRIPTION: This Markdown file (`content/_index.md`) provides the content for the site's homepage. It uses YAML front matter (`---`) to define the page title as \"Hugo Home\". The main content area below the front matter is empty in this example. This content is rendered using the `layouts/index.html` layout.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_content.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/_index.md --\n---\ntitle: Hugo Home\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Site Title and Permalink - Hugo Go Template\nDESCRIPTION: This Go HTML template is used to verify rendered output from the Hugo server, outputting the site’s title and permalink. The context variables ({{ .Title }} and {{ .Permalink }}) are dynamically populated by Hugo based on the current configuration. This template is crucial for confirming that server reloads and configuration changes are reflected in the generated pages during testing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__edit_config.txt#2025-04-23_snippet_2\n\nLANGUAGE: gotemplate\nCODE:\n```\nTitle: {{ .Title }}|BaseURL: {{ .Permalink }}|\n```\n\n----------------------------------------\n\nTITLE: Setting Hugo Environment via Command Line\nDESCRIPTION: Commands showing how to run Hugo in different environments using either the default behavior or explicit environment flags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/environment.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo server\n```\n\nLANGUAGE: bash\nCODE:\n```\nhugo\n```\n\nLANGUAGE: bash\nCODE:\n```\n--environment\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual Support in Hugo\nDESCRIPTION: Site configuration example that sets up multilingual support with English as the default language and German as an additional language, each with its own content directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsTranslated.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultContentLanguage = 'en'\n\n[languages.en]\ncontentDir = 'content/en'\nlanguageCode = 'en-US'\nlanguageName = 'English'\nweight = 1\n\n[languages.de]\ncontentDir = 'content/de'\nlanguageCode = 'de-DE'\nlanguageName = 'Deutsch'\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Rendering Content with Hugo Template Functions in Go\nDESCRIPTION: This code snippet demonstrates how to use Hugo template functions to render content. It includes functions for trimming strings, converting to title case, and generating random numbers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/unfinished/noop.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ $trimmed := trim .Content \" \" }}\n{{ $title := title $trimmed }}\n{{ $random := rand 1 100 }}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for Timer Output in Hugo CLI\nDESCRIPTION: Command to build a Hugo site with the info log level, which is required to see the timer results in the console.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/debug/Timer.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhugo --logLevel info\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter in TOML Format\nDESCRIPTION: A TOML configuration block that defines metadata for a Hugo blog post including title, date, draft status, and tags. This front matter controls how the post will be processed by the Hugo static site generator.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/create/skeletons/theme/content/posts/post-3/index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = 'Post 3'\ndate = 2023-03-15T11:00:00-07:00\ndraft = false\ntags = ['red','green','blue']\n+++\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Highlight Shortcode in Hugo\nDESCRIPTION: Example of using a custom shortcode created for simpler inline code highlighting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/highlight.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nThis is some {{</* hl */>}}fmt.Println(\"inline\"){{</* /hl */>}} code.\n```\n\n----------------------------------------\n\nTITLE: Checking Hugo Version in Bash\nDESCRIPTION: This command executes the Hugo version command to display the current version and build date information. It uses a regular expression to match the version output format.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/version.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhugo version\nstdout 'hugo v.* BuildDate=unknown'\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Copyright in Hugo Template (Go Template)\nDESCRIPTION: This snippet demonstrates how to access and render the site's copyright string, previously defined in the configuration, within a Go HTML template file. It uses the `.Site.Copyright` variable to retrieve the configured value. The comment indicates the expected output based on the example configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Copyright.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Copyright }} → © 2023 ABC Widgets, Inc.\n```\n\n----------------------------------------\n\nTITLE: Proof Using Trigonometric Cotangent Identity\nDESCRIPTION: Derek Jennings' proof using a trigonometric identity for the sum of squared cotangents, establishing bounds, and deriving the value of the sum of reciprocals of odd squares, which leads to the full result.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_16\n\nLANGUAGE: latex\nCODE:\n```\n\\sum_{k=1}^n \\cot^2 \\left( \\frac {2k-1}{2n} \\frac{\\pi}{2} \\right) = 2n^2 - n. \\quad (1)\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose LiveReload Logging via URL Parameter (Text)\nDESCRIPTION: Specifies the query string parameter `debug=LR-verbose` required to enable detailed logging of Hugo's LiveReload requests within the browser's developer console. This is useful for debugging LiveReload issues.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/logging.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ndebug=LR-verbose\n```\n\n----------------------------------------\n\nTITLE: Sorting Pages by Link Title (Descending) in Hugo (Go HTML Template)\nDESCRIPTION: This snippet shows how to sort a collection of Hugo pages (`.Pages`) by their `LinkTitle` in descending order. It achieves this by chaining the `.Reverse` method after `ByLinkTitle`. Similar to the ascending example, it iterates through the reversed sorted collection and generates an `<h2>` tag with a link (`<a>`) displaying the `LinkTitle` for each page, linking to its `.RelPermalink`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByLinkTitle.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByLinkTitle.Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Image Cache Location\nDESCRIPTION: Sets the location of the image cache to the cacheDir in the Hugo configuration file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-github-pages/index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[caches.images]\ndir = \":cacheDir/images\"\n```\n\n----------------------------------------\n\nTITLE: Sample HTML Content for Deployment Testing\nDESCRIPTION: This is a minimal HTML file used as sample content for testing the Hugo deploy command. It contains a simple 'hello' message in the body.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/withdeploy/deploy.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html><body>hello</body></html>\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Entries in Hugo Configuration\nDESCRIPTION: Example of defining menu entries in Hugo configuration, showing both page-associated entries (using pageRef) and external links (using url and name).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/Page.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[[menus.main]]\npageRef = '/about'\nweight = 10\n\n[[menus.main]]\npageRef = '/contact'\nweight = 20\n\n[[menus.main]]\nname = 'Hugo'\nurl = 'https://gohugo.io'\nweight = 30\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for 'hugo convert toYAML' (Shell)\nDESCRIPTION: Lists the command-line options specific to the `hugo convert toYAML` subcommand. The `-h` or `--help` flag displays usage information and details about the command's specific options.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert_toYAML.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for toYAML\n```\n\n----------------------------------------\n\nTITLE: Defining Lang Parameter for Hugo Page Resolution\nDESCRIPTION: Defines the lang parameter which specifies the language of the target page. If not provided, it defaults to the current language.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/ref-and-relref-options.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nlang\n: (`string`) The language of the target page. Default is the current language. Optional.\n```\n\n----------------------------------------\n\nTITLE: Author Term Page Front Matter Example - Hugo Front Matter\nDESCRIPTION: This TOML front matter example is used in an author term's _index.md file to provide metadata such as the title and affiliation. Dependencies: Hugo's content system, placed inside content/authors/TERM/_index.md. Inputs: Author details as key-value pairs. Outputs: Structured metadata for use in term templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/term.md#2025-04-23_snippet_7\n\nLANGUAGE: hugo\nCODE:\n```\ntitle = \"John Smith\"\naffiliation = \"University of Chicago\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Shortcode Arguments using .Get (Go HTML Template)\nDESCRIPTION: Demonstrates using the `.Get` method with string keys ('greeting' and 'firstName') inside a Hugo shortcode template (`layouts/shortcodes/myshortcode.html`) to retrieve named arguments passed from Markdown. Note that argument names are case-sensitive. The retrieved arguments ('Hello' and 'world' from the corresponding call) are formatted using `printf`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Get.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ printf \"%s %s.\" (.Get \"greeting\") (.Get \"firstName\") }} → Hello world.\n```\n\n----------------------------------------\n\nTITLE: RSS Feed Reference Tag Example Output (HTML)\nDESCRIPTION: This HTML snippet is the rendered output of the previous Go HTML template code, producing a <link> tag that references the site's RSS feed for consumption by browsers and feed readers. The attributes set the relationship, MIME type, feed URL, and title. Insert this tag in your page's <head> for best SEO and discoverability.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/rss.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"alternate\" type=\"application/rss+xml\" href=\"https://example.org/index.xml\" title=\"ABC Widgets\">\n```\n\n----------------------------------------\n\nTITLE: Defining Content for a Mounted Static File (f1.txt)\nDESCRIPTION: This file, located at `myfiles/f1.txt`, contains the plain text content 'f1'. Its content is included in the final build because the `hugo.toml` configuration includes a module mount that maps this source file (`myfiles/f1.txt`) to the target path `static/files/f1.txt`, resulting in `public/files/f1.txt`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__static_composite.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nf1\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Hugo File Cache Configuration\nDESCRIPTION: This Hugo shortcode (`code-toggle`) is used to display the default configuration settings for file caches. The surrounding text explains the configurable keys (`dir`, `maxAge`) and special tokens (`:cacheDir`, `:project`, `:resourceDir`) that are part of this configuration. The actual configuration format (e.g., TOML, YAML, JSON) displayed depends on the site's setup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/caches.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< code-toggle config=caches />}}\n```\n\n----------------------------------------\n\nTITLE: Partial Fraction Decomposition of Generating Function in LaTeX\nDESCRIPTION: This LaTeX snippet shows the partial fraction decomposition of a generating function related to Bernoulli numbers, used in a proof that generalizes to ζ(2n) for all n.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_7\n\nLANGUAGE: latex\nCODE:\n```\n\\frac{x}{e^x - 1} = \\sum_{n \\in \\mathbb{Z}} \\frac{2\\pi i n}{x - 2 \\pi i n} = \\sum_{n \\in \\mathbb{Z}} - \\left( \\frac{1}{1 - \\frac{x}{2\\pi i n}} \\right)\n```\n\n----------------------------------------\n\nTITLE: Fourier Series Expansion Proof for x²\nDESCRIPTION: A proof by xpaul using the Fourier expansion of x² on the interval (-π,π) and evaluating at x=π to derive the sum, with an alternative approach using Parseval's Identity for the Fourier expansion of x.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_17\n\nLANGUAGE: latex\nCODE:\n```\nx^2=\\frac{\\pi^2}{3}+4\\sum_{n=1}^\\infty(-1)^n\\frac{\\cos nx}{n^2}, x\\in[-\\pi,\\pi].\n```\n\n----------------------------------------\n\nTITLE: Example URL for Verbose LiveReload Logging (Text)\nDESCRIPTION: Provides an example URL `http://localhost:1313/?debug=LR-verbose` demonstrating how to append the `debug=LR-verbose` query parameter to the local development server address to activate verbose LiveReload logging in the browser console.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/logging.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:1313/?debug=LR-verbose\n```\n\n----------------------------------------\n\nTITLE: Ritelli's Double Integral Evaluation\nDESCRIPTION: Proves the Basel problem using a double integral approach similar to Apostol's method, evaluating integrals through variable substitution and series expansion.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_22\n\nLANGUAGE: latex\nCODE:\n```\n\\int_0^\\infty\\int_0^\\infty\\frac{\\mathrm{d}x\\,\\mathrm{d}y}{(1+y)(1+x^2y)}\n```\n\n----------------------------------------\n\nTITLE: Using len with Strings in Hugo Templates\nDESCRIPTION: Demonstrates how to measure the length of strings using the len function in Hugo templates. Returns the number of characters in a string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/len.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ \"ab\" | len }} → 2\n{{ \"\" | len }} → 0\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Template that Returns a Value in Hugo\nDESCRIPTION: A partial template that returns a boolean value indicating whether a number is even. This uses the return statement with math.ModBool.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/go-template/return.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ return math.ModBool . 2 }}\n```\n\n----------------------------------------\n\nTITLE: Hugo Configuration for Standalone Images\nDESCRIPTION: Configuration needed to prevent wrapping standalone images within paragraph elements.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/images.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[markup.goldmark.parser]\nwrapStandAloneImageWithinParagraph = false\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of IsDescendant Function with Various Pages in Hugo Templates\nDESCRIPTION: Demonstrates checking if the current page is a descendant of various other pages in the site hierarchy using the IsDescendant function with defensive coding via the 'with' statement.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsDescendant.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .Site.GetPage \"/\" }}\n  {{ $.IsDescendant . }} → true\n{{ end }}\n\n{{ with .Site.GetPage \"/auctions\" }}\n  {{ $.IsDescendant . }} → false\n{{ end }}\n\n{{ with .Site.GetPage \"/auctions/2023-11\" }}\n  {{ $.IsDescendant . }} → false\n{{ end }}\n\n{{ with .Site.GetPage \"/auctions/2023-11/auction-2\" }}\n  {{ $.IsDescendant . }} → false\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Browser-Rendered Output of TOML to JSON Conversion\nDESCRIPTION: This snippet displays how the converted JSON would appear when rendered in a browser after using transform.Remarshal. It shows the unescaped, formatted JSON output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/Remarshal.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{\n   \"baseURL\": \"https://example.org/\",\n   \"languageCode\": \"en-US\",\n   \"title\": \"ABC Widgets\"\n}\n```\n\n----------------------------------------\n\nTITLE: hugo server trust Command-Specific Options - Shell\nDESCRIPTION: This snippet details the dedicated flags for the 'hugo server trust' command, such as '--help' for usage information and '--uninstall' for removing the local CA from the trust store without deletion. These flags refine the installation and removal process of certificates during local Hugo development.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_server_trust.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help        help for trust\n      --uninstall   Uninstall the local CA (but do not delete it).\n```\n\n----------------------------------------\n\nTITLE: Rendering a Script Tag with Subresource Integrity (HTML)\nDESCRIPTION: This snippet is the HTML output generated by applying the Hugo Fingerprint function in the template. It shows a script tag whose src includes the hash sum in the filename and uses the integrity attribute for SRI. Inputs and outputs are handled via Hugo's template logic; the resulting HTML is intended to be served to browsers for secure resource loading.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/resources/Fingerprint.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\\\"/js/main.62e...df1.js\\\" integrity=\\\"sha256-Yuh...rfE=\\\" crossorigin=\\\"anonymous\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with RenderString (HTML)\nDESCRIPTION: Displays the HTML output generated when using the modified `card.html` template that includes `.Page.RenderString`. The Markdown (`**best**`) from the inner content is now correctly rendered as an HTML `<strong>` tag.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/shortcode/Inner.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\">\n  <div class=\"card-title\">Product design</div>\n  <div class=\"card-content\">\n    We produce the <strong>best</strong> widgets in the world.\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Section Name Fallback Output Example in HTML\nDESCRIPTION: This HTML snippet displays the rendered output of a Hugo section listing which lacks an explicit _index.md. The template renders only the section name ('Events') in an <h1> tag. This shows Hugo's default fallback behavior when no title front matter is available.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/section.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>Events</h1>\n```\n\n----------------------------------------\n\nTITLE: AbsLangURL Usage Without Leading Slash - Base URL Example 1\nDESCRIPTION: Demonstrates usage of absLangURL function with non-slash-prefixed paths when baseURL is set to https://example.org/\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/AbsLangURL.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ absLangURL \"\" }}           → https://example.org/en/\n{{ absLangURL \"articles\" }}   → https://example.org/en/articles\n{{ absLangURL \"style.css\" }}  → https://example.org/en/style.css\n```\n\n----------------------------------------\n\nTITLE: Git Repository Setup for SourceHut Pages Deployment\nDESCRIPTION: Git commands for initializing a repository, configuring .gitignore, and pushing the Hugo project to SourceHut for automated deployment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-sourcehut-pages.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# initialize new git repository\ngit init\n\n# add /public directory to our .gitignore file\necho \"/public\" >> .gitignore\n\n# commit and push code to main branch\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin https://git.sr.ht/~<YourUsername>/<YourUsername>.srht.site\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Rendering With Pandoc Markup Using RenderString in Hugo Templates - go-html-template\nDESCRIPTION: Shows how to specify the Pandoc markup engine using the markup option in the RenderString function. The snippet provides examples of rendering subscript syntax through Pandoc and combining both display and markup options. Dependencies include Pandoc as a configured markup engine in Hugo and support for options maps. Inputs involve the markup string, options dictionary, and the template rendering context. Outputs HTML with elements such as <sub> and <p> based on the specified options.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/RenderString.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $s := \"H~2~O\" }}\\n\\n{{ $opts := dict \"markup\" \"pandoc\" }}\\n{{ $s | .RenderString $opts }} → H<sub>2</sub>O\\n\\n{{ $opts := dict \"display\" \"block\" \"markup\" \"pandoc\" }}\\n{{ .RenderString $opts $s }} → <p>H<sub>2</sub>O</p>\n```\n\n----------------------------------------\n\nTITLE: Heading Render Hook with Anchor Links in Hugo\nDESCRIPTION: An enhanced heading render hook implementation that adds anchor links to the right of each heading, allowing for easy linking to specific sections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/headings.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n<h{{ .Level }} id=\"{{ .Anchor }}\" {{- with .Attributes.class }} class=\"{{ . }}\" {{- end }}>\n  {{ .Text }}\n  <a href=\"#{{ .Anchor }}\">#</a>\n</h{{ .Level }}>\n```\n\n----------------------------------------\n\nTITLE: Setting Resampling Filter for Image Resizing in Hugo\nDESCRIPTION: Shows how to specify the Lanczos resampling filter when resizing an image to improve quality, especially for photographic images.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/image-processing/index.md#2025-04-23_snippet_28\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $image.Resize \"600x400 Lanczos\" }}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Taxonomy List\nDESCRIPTION: Example HTML output showing how Hugo renders the taxonomy template with actual content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/taxonomy/Alphabetical.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h2><a href=\"/genres/romance/\">romance</a> (2)</h2>\n<ul>\n  <li><a href=\"/books/jamaica-inn/\">Jamaica inn</a></li>\n  <li><a href=\"/books/pride-and-prejudice/\">Pride and prejudice</a></li>\n</ul>\n<h2><a href=\"/genres/suspense/\">suspense</a> (3)</h2>\n<ul>\n  <li><a href=\"/books/and-then-there-were-none/\">And then there were none</a></li>\n  <li><a href=\"/books/death-on-the-nile/\">Death on the nile</a></li>\n  <li><a href=\"/books/jamaica-inn/\">Jamaica inn</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: CSV Data Structure in Hugo\nDESCRIPTION: Illustrates the resulting data structure after parsing a CSV file, which is an array of arrays where the first row typically contains headers.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetCSV.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\"name\",\"type\",\"breed\",\"age\"],\n  [\"Spot\",\"dog\",\"Collie\",\"3\"],\n  [\"Felix\",\"cat\",\"Malicious\",\"7\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Hugo Archetype for English Bundle Content (Markdown with Go Template)\nDESCRIPTION: This archetype template provides a scaffold for new English-language content bundles in Hugo. It uses YAML frontmatter with Go template expressions to set the title (based on the new post's name), date, and draft status. The template also includes a dynamic line that indicates the current site's language code. Place this file as 'archetypes/mybundle/index.md' for Hugo to use when creating bundle content in English. The key parameters are '.Name', '.Date', and 'site.Language.Lang', all provided automatically by Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content_archetypedir.txt#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n\nSite Lang: {{ site.Language.Lang  }}.\t\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Homepage Layout - Hugo Template - HTML\nDESCRIPTION: This HTML snippet is a minimal homepage layout for a Hugo test site, serving as the default template for the site's index. It is required by Hugo during build to render the '/' route. Dependencies: Hugo templating engine. No parameters or dynamic inputs. Outputs: static page with text 'Home.'.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__watch.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nHome.\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Completion Initialization - shell\nDESCRIPTION: This snippet appends the command to initialize Zsh completion to the user's .zshrc file, allowing Zsh shell completion features to be available in new sessions. It requires write access to the home directory and is executed in the shell. The command writes 'autoload -U compinit; compinit' to .zshrc, enabling autocompletion on shell startup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_zsh.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Default Embedding\nDESCRIPTION: This HTML snippet shows the rendered output from Hugo for the preceding Go HTML Template example. Notice that the ampersand (`&`) in the original `$title` variable has been escaped to its Unicode representation (`\\u0026`) within the JavaScript string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/JSStr.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n```html\n<script>\n  const a = \"Title: \" + \"Lilo \\u0026 Stitch\";\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Test Site - Hugo Configuration - TOML\nDESCRIPTION: This TOML snippet configures basic Hugo test site settings, specifying the base URL and disabling unwanted output kinds (e.g., RSS, sitemap, taxonomy). Dependencies: Used by the Hugo CLI. Parameters include 'baseURL' and 'disableKinds'. Required for consistent test behavior. Limitations: only settings relevant for this specific test context are included.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__watch.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = \"http://example.org/\"\ndisableKinds = [\"RSS\", \"sitemap\", \"robotsTXT\", \"404\", \"taxonomy\", \"term\"]\n```\n\n----------------------------------------\n\nTITLE: Non-Short-Circuit Evaluation in Hugo's compare.Conditional Function\nDESCRIPTION: Demonstrates examples that throw errors because Hugo's cond function doesn't implement short-circuit evaluation. Both arguments are always evaluated regardless of the control value's truthiness.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/compare/Conditional.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ cond true \"true\" (div 1 0) }}\n{{ cond false (div 1 0) \"false\" }}\n```\n\n----------------------------------------\n\nTITLE: Defining LinkTitle in Front Matter (Hugo)\nDESCRIPTION: Example of how to define both title and linkTitle fields in Hugo front matter. The linkTitle provides a shorter alternative to use in navigation or links.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/LinkTitle.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle = 'Seventeen delightful recipes for healthy desserts'\nlinkTitle = 'Dessert recipes'\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Sanity Plugins\nDESCRIPTION: This bash command installs the necessary Sanity plugins for media handling and code input, which are required for the Sanity schema configuration.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/PortableText.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sanity-plugin-media @sanity/code-input\n```\n\n----------------------------------------\n\nTITLE: Mounting Static Directory as Assets for Image Render Hook\nDESCRIPTION: Configuration to mount both assets and static directories to the assets path for use with the embedded image render hook.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/images.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[module.mounts]]\nsource = 'assets'\ntarget = 'assets'\n\n[[module.mounts]]\nsource = 'static'\ntarget = 'assets'\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for `hugo completion fish` Command (Text)\nDESCRIPTION: Displays the basic usage syntax for the `hugo completion fish` command, indicating that it can be followed by optional flags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_fish.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhugo completion fish [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the `hugo list all` Command (Shell)\nDESCRIPTION: Demonstrates the basic syntax for running the `hugo list all` command. This command lists all content managed by Hugo, including items typically excluded like drafts, future-dated, and expired content. Optional flags and arguments can be appended.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_all.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo list all [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Example Hugo Content Directory Structure - Text\nDESCRIPTION: This example depicts a Hugo content directory tree with section and page markdown files, annotated with weights in comments, to explain page ordering. It is used to contextualize the subsequent Go HTML template snippets. No code execution required; serves as a reference for page structure and the impact of weights.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/page/nextinsection-and-previnsection.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── pages/\n│   ├── _index.md\n│   ├── page-1.md   <-- front matter: weight = 10\n│   ├── page-2.md   <-- front matter: weight = 20\n│   └── page-3.md   <-- front matter: weight = 30\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Server Command in Bash\nDESCRIPTION: This bash script starts the Hugo server, waits for it to be ready, checks the server's output, and verifies that no files are generated in the public directory. It uses the 'serve' alias for the server command.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server_render_to_memory.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo serve --renderToMemory &\n\nwaitServer\n\nhttpget $HUGOTEST_BASEURL_0 'Title: Hugo Server Test' $HUGOTEST_BASEURL_0\n\n! exists public/index.html\n! exists public/mystatic.txt\n\nstopServer\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Build with Multiple Options (Shell)\nDESCRIPTION: This command executes the Hugo build process with several specified options. It sets a custom base URL, enables minification, defines a specific output directory (`${WORK}/newpublic`), fixes the build time (`--clock`), sets the environment to 'staging', loads configurations from a specific file (`${WORK}/myconfig`) and directory (`${WORK}/myconfigdir`), and uses a custom source directory (`mysource`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo --baseURL http://example.com/ --minify --destination ${WORK}/newpublic --clock 2021-11-06T22:30:00.00+09:00 -e staging --config ${WORK}/myconfig --configDir ${WORK}/myconfigdir -s mysource\n```\n\n----------------------------------------\n\nTITLE: Displaying Hugo Version - Hugo CLI - Shell\nDESCRIPTION: Demonstrates the command syntax to display the Hugo version and environment info. No external dependencies required; assumes Hugo is installed and available in the system $PATH. The command accepts optional flags and arguments, and outputs the version string and environment details to stdout.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_version.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo version [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options – Hugo CLI – Shell\nDESCRIPTION: Provides a list of parent command flags that can be used with 'hugo new content'. These options handle extended configuration, such as clock, config files, destination paths, environment, logging, and build behaviors. This flag reference aids advanced users seeking to fine-tune Hugo CLI execution. Inputs are CLI flags; outputs control project build and content creation context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new_content.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Example Multilingual Content Directory Structure (Text)\nDESCRIPTION: Illustrates a typical directory structure for a multilingual Hugo project corresponding to the TOML configuration. It shows separate root content directories ('de', 'en', 'fr') for each language, each containing specific content files (like `book-1.md`, `book-2.md`) and index files (`_index.md`) organized within subdirectories or at the root of the language directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/Translations.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── de/\n│   ├── books/\n│   │   ├── book-1.md\n│   │   └── book-2.md\n│   └── _index.md\n├── en/\n│   ├── books/\n│   │   ├── book-1.md\n│   │   └── book-2.md\n│   └── _index.md\n├── fr/\n│   ├── books/\n│   │   └── book-1.md\n│   └── _index.md\n└── _index.md\n```\n\n----------------------------------------\n\nTITLE: Markdown Content for Hugo Page – Markdown\nDESCRIPTION: Defines a simple Markdown file with front matter, establishing a page titled 'P1' for the Hugo content tree. Depends on Hugo's content system; expected as a source file in 'content/p1.md'. Input: none. Output: page rendered with specified title and content. Limitations: minimal front matter; content beyond title is empty.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_env.txt#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n-- content/p1.md --\n---\ntitle: \"P1\"\n---\n```\n\n----------------------------------------\n\nTITLE: Viewing Help Option - Shell\nDESCRIPTION: This snippet displays the help flag usage for the 'hugo mod get' command, showing how to access help information specific to this command. The only parameter here is '-h' or '--help', which when supplied to the command, outputs usage and option details. There are no dependencies aside from a Hugo installation, and this is especially useful for quick reference from the command line.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_get.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for get\n```\n\n----------------------------------------\n\nTITLE: Exporting Sanity Schema Types\nDESCRIPTION: This TypeScript code exports the defined schema types for use in the Sanity configuration. It includes the postType schema.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/transform/PortableText.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {postType} from './postType'\n\nexport const schemaTypes = [postType]\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Global Resource Alternative\nDESCRIPTION: Shows the directory structure for accessing JSON files as global resources in Hugo projects using resources.Get.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/data/GetJSON.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n└── assets/\n    └── data/\n        └── books.json\n```\n\n----------------------------------------\n\nTITLE: Building Hugo Site and Verifying Static Files (Shell)\nDESCRIPTION: These shell commands first build the Hugo site using the `hugo` command. Subsequently, `ls` lists the contents of the generated `public/files` directory, and `checkfile` (assumed to be a utility for verifying file existence/content) confirms that `f1.txt`, `f2.txt`, and `f3.txt` are correctly placed in the `public` directory according to the module mount configurations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__static_composite.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo\nls public/files\ncheckfile public/files/f1.txt\ncheckfile public/files/f2.txt\ncheckfile public/f3.txt\n```\n\n----------------------------------------\n\nTITLE: Accessing Disqus Shortname with Hugo Site Context - Go Template\nDESCRIPTION: This snippet demonstrates how to access the Disqus shortname configured for a Hugo site using the SITE.DisqusShortname method, which is deprecated as of version 0.120.0. The code should be used in Hugo templates to conditionally load or render Disqus comments. It has no external code dependencies aside from relying on Hugo’s templating engine and the correct site configuration in config.toml. The key input is the site configuration, and the output is the Disqus shortname string. Note: Developers should migrate to Site.Config.Services.Disqus.Shortname as this approach is deprecated.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/DisqusShortname.md#2025-04-23_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{< deprecated-in 0.120.0 >}}\nUse [`Site.Config.Services.Disqus.Shortname`] instead.\n\n[`Site.Config.Services.Disqus.Shortname`]: /methods/site/config/\n{{< /deprecated-in >}}\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter for a Hugo Content Page\nDESCRIPTION: This code defines the front matter for a Hugo content page, setting the title and authors for a book entry.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/urls/URLize.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Les Misérables'\nauthors = ['Victor Hugo']\n```\n\n----------------------------------------\n\nTITLE: Using Permalink Tokens in Hugo Front Matter (TOML)\nDESCRIPTION: Demonstrates setting the 'url' field in TOML front matter with dynamic tokens, typically in 'cascade' for section listing pages. Tokens support dynamic path generation based on content structure (such as last section name or slug). Requires Hugo 0.131.0+.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/urls.md#2025-04-23_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\ntitle =\\\"Bar\\\"\\n[[cascade]]\\n  url = \\\"/:sections[last]/:slug\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Project to Disable Kinds (TOML)\nDESCRIPTION: This `hugo.toml` configuration file disables several default content kinds (`page`, `rss`, `section`, `sitemap`, `taxonomy`, `term`) for the Hugo project. This is likely done to simplify the test environment and focus specifically on the behavior of resource handling and path generation related to the `index.html` layout.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings_issue13164.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ndisableKinds = ['page','rss','section','sitemap','taxonomy','term']\n```\n\n----------------------------------------\n\nTITLE: Code-Toggle Shortcode Implementation\nDESCRIPTION: Example of using the code-toggle shortcode to display site configuration with copy functionality enabled.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n{{</* code-toggle file=hugo copy=true */>}}\\nbaseURL = 'https://example.org/'\\nlanguageCode = 'en-US'\\ntitle = 'My Site'\\n{{</* /code-toggle */>}}\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Build and Verifying Parameter Output (Shell)\nDESCRIPTION: Runs the `hugo` command to build the site using the associated configuration and layout files. It then uses `grep` to check the generated `public/index.html` file. The `grep` command specifically looks for the string 'myparam: §', verifying that the `myparam` variable from the layout was *not* replaced by a value from the development parameters, suggesting a default build environment was used.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configprod.txt#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo\ngrep 'myparam: §'  public/index.html\n```\n\n----------------------------------------\n\nTITLE: Converting Hexadecimal Values to Strings in Hugo Templates\nDESCRIPTION: Demonstrates the `string` function with a hexadecimal numeric literal (`0x11`) and its string counterpart (`\"0x11\"`). The numeric hexadecimal value (equivalent to decimal 17) is converted to its decimal string form ('17'), while the string input containing the hexadecimal notation is passed through unaltered.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/cast/ToString.md#2025-04-23_snippet_3\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ string 0x11 }} → 17 (string)\n{{ string \"0x11\" }} → 0x11 (string)\n```\n\n----------------------------------------\n\nTITLE: Automated Testing of Hugo 'new' Command Operations - Bash\nDESCRIPTION: Automates testing of the 'hugo new' commands to ensure proper creation of new Hugo sites and themes, as well as archetype generation in various formats (yaml, toml, json). Depends on Hugo CLI being installed. Script checks stdout for expected output, validates file existence, performs file content comparisons (with platform checks), and prepares example files for advanced theme/content testing. Inputs are Hugo CLI commands and fixture templates, outputs are verification results and file artifacts. Skips Windows comparison due to newline differences.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test the new command.\nhugo new site -h\nstdout 'Create a new site in the provided directory'\nhugo new site my-yaml-site --format yml\ncheckfile my-yaml-site/hugo.yml\nhugo new site mysite -f\nstdout 'Congratulations! Your new Hugo site was created in'\ncd mysite\ncheckfile archetypes/default.md\ncheckfile hugo.toml\nexists assets\nexists content\nexists data\nexists i18n\nexists layouts\nexists static\nexists themes\n! exists resources\n\nhugo new theme -h\nstdout 'Create a new theme \\(skeleton\\) called \\[name\\] in ./themes'\nhugo new theme mytheme --format yml\nstdout 'Creating new theme'\n! exists resources\ncd themes\ncd mytheme\ncheckfile archetypes/default.md\ncheckfile assets/css/main.css\ncheckfile assets/js/main.js\ncheckfile content/_index.md\ncheckfile content/posts/_index.md\ncheckfile content/posts/post-1.md\ncheckfile content/posts/post-2.md\ncheckfile content/posts/post-3/bryce-canyon.jpg\ncheckfile content/posts/post-3/index.md\ncheckfile layouts/baseof.html\ncheckfile layouts/home.html\ncheckfile layouts/list.html\ncheckfile layouts/single.html\ncheckfile layouts/taxonomy.html\ncheckfile layouts/term.html\ncheckfile layouts/_partials/footer.html\ncheckfile layouts/_partials/head.html\ncheckfile layouts/_partials/head/css.html\ncheckfile layouts/_partials/head/js.html\ncheckfile layouts/_partials/header.html\ncheckfile layouts/_partials/menu.html\ncheckfile layouts/_partials/terms.html\ncheckfile static/favicon.ico\ncheckfile hugo.yml\nexists data\nexists i18n\n\ncd $WORK/mysite\n\nhugo new -h\nstdout 'Create a new content file.'\nhugo new posts/my-first-post.md\ncheckfile content/posts/my-first-post.md\n\ncd ..\ncd myexistingsite\nhugo new post/foo.md -t mytheme\ngrep 'Dummy content' content/post/foo.md\n\ncd $WORK\n\n# In the three archetype format tests below, skip Windows testing to avoid\n# newline differences when comparing to golden.\n\nhugo new site json-site --format json\n[!windows] cmp json-site/archetypes/default.md archetype-golden-json.md\n\nhugo new site toml-site --format toml\n[!windows] cmp toml-site/archetypes/default.md archetype-golden-toml.md\n\nhugo new site yaml-site --format yaml\n[!windows] cmp yaml-site/archetypes/default.md archetype-golden-yaml.md\n```\n\n----------------------------------------\n\nTITLE: Deprecation Notice for Hugo PAGER.PageSize - Markdown\nDESCRIPTION: Shows a formatted deprecation warning for the PAGER.PageSize method in Hugo templates using the Hugo shortcode syntax. Informs users to prefer PAGER.PagerSize and provides a reference link to replacement documentation. No third-party dependencies are required; the snippet uses Hugo's built-in shortcode and Markdown link syntax. Does not accept any parameters but must be placed within a .md (Markdown) documentation file inside a Hugo project.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pager/PageSize.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n{{< deprecated-in 0.128.0 >}}\\nUse [`PAGER.PagerSize`] instead.\\n\\n[`PAGER.PagerSize`]: /methods/pager/pagersize/\\n{{< /deprecated-in >}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Parameters Using Global Site Function\nDESCRIPTION: Demonstrates how to access site parameters using the global site function, which works regardless of the current context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/global/site.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Params.foo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Hugo Site Generation in Development Environment – Bash\nDESCRIPTION: This shell command sets the environment variable HUGO_ENV to 'development', executes the Hugo build process, and then uses grep to verify the presence of a specific parameter value in the generated HTML output. Requires Hugo installed and accessible in the PATH. Input: modifies environment and runs command-line tools. Output: exit code and potential grep match indicating test pass or fail. Limitations: expects presence of configs and templates as specified elsewhere.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configdev_env.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test the hugo command.\nenv HUGO_ENV=development\n\nhugo\ngrep 'myparam: dev§'  public/index.html\n```\n\n----------------------------------------\n\nTITLE: Accessing Hugo Asset via Multiple Resource Functions (Go Template)\nDESCRIPTION: This Hugo layout file (`index.html`) uses four different `resources` functions (`Get`, `GetMatch`, `Match`, `ByType`) to retrieve and output the relative permalink (`RelPermalink`) of the same asset, `foo.txt`. Accessing the same resource multiple times in potentially different ways within the same page build context is intended to test Hugo's duplicate path detection mechanism.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__path-warnings_issue13164.txt#2025-04-23_snippet_3\n\nLANGUAGE: gohtml\nCODE:\n```\n-- layouts/index.html --\nA: {{ (resources.Get \"foo.txt\").RelPermalink }}\nB: {{ (resources.GetMatch \"foo.txt\").RelPermalink }}\nC: {{ (index (resources.Match \"foo.txt\") 0).RelPermalink }}\nD: {{ (index (resources.ByType \"text\") 0).RelPermalink }}\n```\n\n----------------------------------------\n\nTITLE: Defining Alternate Sidebar Titles in TOML Front Matter - TOML\nDESCRIPTION: This snippet shows how to define alternate titles in TOML-based front matter, specifically for the 'See also' sidebar in Hugo documentation. The 'linkTitle' field and the nested '[params]' table with 'altTitle' are used to provide custom display names. Dependencies include Hugo's TOML front matter parser; the fields accept strings for display on site-sidebars, with usage restricted to disambiguating related content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Long descriptive title\"\nlinkTitle = \"Short title\"\n[params]\naltTitle = \"Whatever you want\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Index Page Layout - Hugo HTML Template\nDESCRIPTION: This HTML template defines the layout for the site index, outputting a single 'Home' element in the body. Intended for use in Hugo's 'layouts/index.html' to serve the home page during development or testing. Requires Hugo project structure with appropriate layout lookup paths.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__watch_hugo_stats.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>Home</body>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commit Subject with GitInfo\nDESCRIPTION: Using the Subject method on GitInfo to get the commit message subject line.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GitInfo }}\n  {{ .Subject }} → Add tutorials\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Site Parameter in Hugo Index Layout (HTML/Go Template)\nDESCRIPTION: This HTML file (`layouts/index.html`) defines the template for the site's homepage. It uses Hugo's Go template syntax `{{ site.Params.myparam }}` to attempt to render the value of the `myparam` site parameter, followed by a static '§' character for verification purposes in the test.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configprod.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n-- layouts/index.html --\nmyparam: {{ site.Params.myparam }}§\n```\n\n----------------------------------------\n\nTITLE: Retrieving AuthorEmail with GitInfo\nDESCRIPTION: Using the AuthorEmail method on GitInfo to get the email address of the commit author, respecting gitmailmap.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/GitInfo.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ with .GitInfo }}\n  {{ .AuthorEmail }} → jsmith@example.org\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Sample Jekyll Markdown Post with Front Matter\nDESCRIPTION: Defines the content of a sample Jekyll post file (`2012-01-18-hello-world.markdown`) located within the source Jekyll site (`myjekyllsite/_posts`). This file includes YAML front matter specifying metadata (layout, title) and simple markdown content (\"Hello world!\"). This serves as input data for the import test.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/import_jekyll.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-- myjekyllsite/_posts/2012-01-18-hello-world.markdown --\n---\nlayout: post\ntitle: \"Hello World\"\n---\nHello world!\n```\n\n----------------------------------------\n\nTITLE: Running the Hugo Man Page Generator Command (Shell)\nDESCRIPTION: Basic syntax for executing the `hugo gen man` command. This command generates man pages for the Hugo CLI. Replace `[flags]` and `[args]` with appropriate options and arguments as needed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen_man.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo gen man [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Actions Workflow Directory\nDESCRIPTION: Shell commands to create the necessary directory structure for GitHub Actions workflow files.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-github-pages/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p .github/workflows\ntouch .github/workflows/hugo.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Firebase CI Token\nDESCRIPTION: This command generates a CI token for Firebase, which can be used in automated deployment processes.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nfirebase login:ci\n```\n\n----------------------------------------\n\nTITLE: Viewing Inherited Options for Hugo Commands (Plaintext)\nDESCRIPTION: Lists command-line options inherited by `hugo completion` from its parent `hugo` command. These global options control various aspects of Hugo's execution, such as configuration file paths (`--config`, `--configDir`), output destination (`-d`, `--destination`), build environment (`-e`), logging (`--logLevel`), source directory (`-s`), themes directory (`--themesDir`), and rendering behavior (`-M`).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Defining Development Environment Parameters in Hugo (TOML)\nDESCRIPTION: This TOML file (`config/development/params.toml`) defines parameters specifically for Hugo's `development` environment. It sets the `myparam` parameter to the string value \"dev\". This value would typically override default parameters or be used when the site is built using `hugo --environment development` or run via `hugo server`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo_configprod.txt#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n-- config/development/params.toml --\nmyparam = \"dev\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Deprecation Notices from Hugo Log Output - Command Line - Text\nDESCRIPTION: This snippet shows a shell command for running Hugo with info-level logging and piping output through grep to display only lines containing 'deprecate'. Dependencies include both hugo and grep installed on the user's system. The key parameters are '--logLevel info' (to enable info-level logging) and the pipe to 'grep deprecate' (to filter the output). The command outputs only those log lines related to deprecation notices, helping users monitor for deprecated features easily.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/deprecation.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhugo --logLevel info | grep deprecate\n```\n\n----------------------------------------\n\nTITLE: Starting Hugo Server with Draft Content\nDESCRIPTION: Commands to start Hugo's development server including draft content for preview.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/getting-started/quick-start.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhugo server --buildDrafts\nhugo server -D\n```\n\n----------------------------------------\n\nTITLE: Defining the Golden Go Module File Content (Go Mod)\nDESCRIPTION: This snippet shows the content of the golden file `golden/go.mod.testsubmod`, which serves as the expected output template for the `go.mod` file generated by `hugo mod init`. It declares the module name as 'testsubmod' and specifies the Go language version using the environment variable `${GOVERSION}`. The `-- golden/go.mod.testsubmod --` line indicates the file context within the test setup.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_init.txt#2025-04-23_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\n-- golden/go.mod.testsubmod --\nmodule testsubmod\n\ngo ${GOVERSION}\n```\n\n----------------------------------------\n\nTITLE: Setting Production Google Analytics ID in Hugo Config Directory (TOML)\nDESCRIPTION: Example configuration for `config/production/hugo.toml`, specifying the Google Analytics ID (`G-PPPPPPPPP`) to be used only when building the site for the production environment. This overrides any default setting.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/introduction.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[services.googleAnalytics]\nID = 'G-PPPPPPPPP'\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Project Configuration and Asset Mounts - TOML\nDESCRIPTION: This Hugo configuration file specifies the site title, base URL, disables taxonomy, term, and sitemap sections, and mounts the 'hugo_stats.json' file as an asset in a specific internal directory. Requires Hugo 0.56+ for module mounts. Key parameters include 'title', 'baseURL', and 'module.mounts'. Used to control site behavior and asset mapping during development and testing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/server__watch_hugo_stats.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Hugo Server Test\"\nbaseURL = \"https://example.org/\"\ndisableKinds = [\"taxonomy\", \"term\", \"sitemap\"]\n[module]\n[[module.mounts]]\nsource = \"hugo_stats.json\"\ntarget = \"assets/watching/hugo_stats.json\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Event Emojis\nDESCRIPTION: A markdown table displaying emojis related to events, including their visual representations and shortcodes. The table includes emojis for celebrations, holidays, and festive occasions.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#activities) | :jack_o_lantern: | `:jack_o_lantern:` | :christmas_tree: | `:christmas_tree:` | [top](#table-of-contents) |\n| [top](#activities) | :fireworks: | `:fireworks:` | :sparkler: | `:sparkler:` | [top](#table-of-contents) |\n| [top](#activities) | :firecracker: | `:firecracker:` | :sparkles: | `:sparkles:` | [top](#table-of-contents) |\n| [top](#activities) | :balloon: | `:balloon:` | :tada: | `:tada:` | [top](#table-of-contents) |\n| [top](#activities) | :confetti_ball: | `:confetti_ball:` | :tanabata_tree: | `:tanabata_tree:` | [top](#table-of-contents) |\n| [top](#activities) | :bamboo: | `:bamboo:` | :dolls: | `:dolls:` | [top](#table-of-contents) |\n| [top](#activities) | :flags: | `:flags:` | :wind_chime: | `:wind_chime:` | [top](#table-of-contents) |\n| [top](#activities) | :rice_scene: | `:rice_scene:` | :red_envelope: | `:red_envelope:` | [top](#table-of-contents) |\n| [top](#activities) | :ribbon: | `:ribbon:` | :gift: | `:gift:` | [top](#table-of-contents) |\n| [top](#activities) | :reminder_ribbon: | `:reminder_ribbon:` | :tickets: | `:tickets:` | [top](#table-of-contents) |\n| [top](#activities) | :ticket: | `:ticket:` | | | [top](#table-of-contents) |\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Syntax Highlighting Style in Hugo\nDESCRIPTION: Code example showing how to set the default syntax highlighting style in the Hugo configuration file. The example demonstrates setting 'monokai' as the highlighting style.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/syntax-highlighting-styles.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n[markup.highlight]\nstyle = 'monokai'\n```\n\n----------------------------------------\n\nTITLE: Specifying Front Matter for Custom Layout - TOML\nDESCRIPTION: This TOML snippet, intended as front matter for a content file like contact.md, defines a custom layout value 'contact'. Hugo will use this value to select the appropriate template (contact.html) within the layouts/page/ or equivalent directory. Inputs are TOML keys 'title' and 'layout'; expected output is the choice of a specific layout for the content page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/lookup-order.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ntitle = 'Contact'\\nlayout = 'contact'\n```\n\n----------------------------------------\n\nTITLE: Enabling Template Metrics via Hugo CLI (sh)\nDESCRIPTION: Runs the Hugo static site generator with additional flags to output template execution metrics and optimization hints. Requires a working Hugo installation and is intended to profile site builds for performance bottlenecks at the template level. Accepts the typical Hugo build parameters and outputs additional diagnostic statistics to the console.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo --templateMetrics --templateMetricsHints\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Date and Lastmod with Filename and FileModTime Tokens in TOML\nDESCRIPTION: Configures Hugo's `[frontmatter]` settings in TOML. For the page's primary date (`date`), it prioritizes extracting the date from the filename (if present and formatted like YYYY-MM-DD) using the `:filename` token, falling back to the `:default` sequence. For the last modification date (`lastmod`), it prioritizes the `lastmod` front matter field, falling back to the file's actual modification timestamp using `:fileModTime`. This utilizes special tokens for dynamic date sourcing.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/front-matter.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[frontmatter]\ndate = [':filename', ':default']\nlastmod = ['lastmod', ':fileModTime']\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for `hugo completion fish` (Text)\nDESCRIPTION: Lists the options specific to the `hugo completion fish` command. The `-h` or `--help` flag displays help information, and the `--no-descriptions` flag disables the inclusion of descriptions in the generated autocompletion script.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_fish.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Defining Project Configuration in hugo.toml (TOML)\nDESCRIPTION: Provides a minimal example of the main project's `hugo.toml` configuration file, typically located at the project root. It sets the project's title using the `title` key.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod__themesdir.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Module\"\n```\n\n----------------------------------------\n\nTITLE: Alternating Series and Convolution Proof\nDESCRIPTION: A proof by user91500 using a theorem about non-increasing sequences of positive numbers, applying it to a specific sequence 1/(2n+1) and manipulating the resulting sums to derive the identity.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_19\n\nLANGUAGE: latex\nCODE:\n```\ns:=\\sum_{n=0}^\\infty(-1)^na_n,\\,\\delta_k:=\\sum_{n=0}^\\infty a_na_{n+k},\\,k\\in\\mathbb N\n```\n\n----------------------------------------\n\nTITLE: Displaying Parent Command Options - Shell\nDESCRIPTION: Lists the inherited command-line options from parent Hugo commands that affect theme creation. These flags control configuration files, directories, build environments, logging, and other aspects of Hugo's operation. Inputs include optional string values for paths and settings. Outputs and effects depend on the chosen flag values, influencing where files are read or written and how Hugo behaves during theme generation.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_new_theme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Emoji Shortcodes for Bugs (Plaintext)\nDESCRIPTION: A list of plaintext shortcodes used to represent bug and insect emojis. These shortcodes are typically used in Markdown or systems supporting emoji rendering via text codes, such as Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n:snail:\n:butterfly:\n:bug:\n:ant:\n:bee:\n:honeybee:\n:beetle:\n:lady_beetle:\n:cricket:\n:cockroach:\n:spider:\n:spider_web:\n:scorpion:\n:mosquito:\n:fly:\n:worm:\n:microbe:\n```\n\n----------------------------------------\n\nTITLE: Persisting Hugo Zsh Completion for Linux - shell\nDESCRIPTION: This command writes the Hugo Zsh completion script to the appropriate directory for Zsh completions on Linux systems. It requires write access to the target directory specified by '${fpath[1]}', which is a Zsh array containing paths checked for completion functions. The snippet ensures Hugo completions are loaded in all new Zsh sessions on Linux.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_zsh.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhugo completion zsh > \"${fpath[1]}/_hugo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo News Page Front Matter in YAML\nDESCRIPTION: YAML front matter block that configures a Hugo news section page. Specifies the page title, description, output formats (HTML and RSS), weight for ordering, and URL aliases for redirects.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/news/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: News\ndescription: Stay up-to-date with the latest news and announcements.\noutputs:\n  - html\n  - rss\nweight: 10\naliases: [/release-notes/]\n```\n\n----------------------------------------\n\nTITLE: Starting Hugo Server with Workspace\nDESCRIPTION: Command to start Hugo server with workspace configuration\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-modules/use-modules.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nHUGO_MODULE_WORKSPACE=hugo.work hugo server --ignoreVendorPaths \"**\"\n```\n\n----------------------------------------\n\nTITLE: Hugo Workspace Configuration\nDESCRIPTION: Example workspace configuration in hugo.work file\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/hugo-modules/use-modules.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ngo 1.20\n\nuse .\nuse ../gohugoioTheme\n```\n\n----------------------------------------\n\nTITLE: Placeholder Theme File in Hugo Project Structure\nDESCRIPTION: This is a simple plain text file (`dummy.txt`) located within the `themes/my-theme` directory. It serves as minimal content for the theme specified in the `hugo.toml` file, ensuring the theme directory exists and is recognized by Hugo during site builds or module operations.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_get_u.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-- themes/my-theme/dummy.txt --\nMY THEME\n```\n\n----------------------------------------\n\nTITLE: Front Matter Example with Hugo Code-Toggle Shortcode - Text\nDESCRIPTION: This snippet demonstrates how to show front matter for a Hugo content file using the code-toggle shortcode for documentation examples. The block defines 'title', 'date', and 'draft' fields following Hugo's recommended content metadata. The syntax is solely for documentation display and must be parsed by Hugo if included in content.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/contribute/documentation.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n{{</* code-toggle file=content/posts/my-first-post.md fm=true */>}}\ntitle = 'My first post'\ndate = 2023-11-09T12:56:07-08:00\ndraft = false\n{{</* /code-toggle */>}}\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Date without Colon Offset in Hugo\nDESCRIPTION: Shows Hugo parsing an ISO 8601 formatted date string ('2023-10-15T13:18:50-0700') with an explicit time zone offset without a colon. Hugo correctly identifies the time zone as 'America/Los_Angeles' based on the '-0700' offset.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/parsable-date-time-strings.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2023-10-15T13:18:50-0700\n```\n\n----------------------------------------\n\nTITLE: Running hugo server trust CLI Command - Shell\nDESCRIPTION: This code snippet shows the basic usage of the 'hugo server trust' command in the shell, used to install the local CA into the system trust store. It accepts optional flags and arguments to customize command behavior. Requires Hugo CLI to be installed and available in the system PATH.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_server_trust.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhugo server trust [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Modifying Hugo Output Format Weights in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to modify the default properties of existing output formats in Hugo. It changes the `weight` property for the `json` and `html` output formats to control their rendering order, making `json` render before `html`.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/configuration/output-formats.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[outputFormats.json]\nweight = 1\n[outputFormats.html]\nweight = 2\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Arts & Crafts Emojis\nDESCRIPTION: A markdown table showing emojis related to arts and crafts, including their visual representations and shortcodes. The table covers various artistic and craft-related items.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| | ico | shortcode | ico | shortcode | |\n| - | :-: | - | :-: | - | - |\n| [top](#activities) | :performing_arts: | `:performing_arts:` | :framed_picture: | `:framed_picture:` | [top](#table-of-contents) |\n| [top](#activities) | :art: | `:art:` | :thread: | `:thread:` | [top](#table-of-contents) |\n| [top](#activities) | :sewing_needle: | `:sewing_needle:` | :yarn: | `:yarn:` | [top](#table-of-contents) |\n| [top](#activities) | :knot: | `:knot:` | | | [top](#table-of-contents) |\n```\n\n----------------------------------------\n\nTITLE: Generated Gallery Content Structure - Text\nDESCRIPTION: Displays the organized file structure of newly generated gallery content created using a leaf bundle archetype. Provides a post-execution visualization for users, showing nested content and images directories as Hugo expects for gallery sections.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/archetypes.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ncontent/\n├── galleries/\n│   └── bryce-canyon/\n│       ├── images/\n│       │   └── .gitkeep\n│       └── index.md\n└── _index.md\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Option for Hugo toJSON Conversion - Shell\nDESCRIPTION: This shell code snippet shows the syntax for displaying help information for the 'hugo convert toJSON' command. Using the '-h' or '--help' flags will output available flags and command details to assist the user. This is useful for obtaining information about usage or troubleshooting potential issues.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_convert_toJSON.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help   help for toJSON\n```\n\n----------------------------------------\n\nTITLE: Embedding Schema Microdata Template - Hugo Go Template\nDESCRIPTION: Displays how to insert Hugo's embedded Schema template, which outputs microdata meta elements in your HTML's head. Requires no extra configuration, but draws on site and page information for output. Primarily improves search engine parsing and rich snippets.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_8\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ template \"_internal/schema.html\" . }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Disqus Shortname from Site Config - Hugo Go Template\nDESCRIPTION: Demonstrates how to retrieve the Disqus shortname from Hugo's configuration within a Go template. This snippet is typically used in custom or overridden templates that need direct access to the configuration property. Returns the configured shortname string.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/embedded.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Site.Config.Services.Disqus.Shortname }}\n```\n\n----------------------------------------\n\nTITLE: Invoking NPM Helpers in Hugo Modules - CLI Usage Example - Plaintext\nDESCRIPTION: Demonstrates the base command-line syntax to access various npm helpers via the 'hugo mod npm' command. There are no prerequisites other than having Hugo installed and available on the command line. The included placeholder '[command] [flags]' is used to indicate optional subcommands and custom flags. This invocation is intended as the primary entry point for npm-related module operations; no arguments results in default helper behavior.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_mod_npm.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhugo mod npm [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Emoji Shortcodes for Vegetables (Plaintext)\nDESCRIPTION: A list of plaintext shortcodes used to represent vegetable emojis. These shortcodes are typically used in Markdown or systems supporting emoji rendering via text codes, such as Hugo.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n:avocado:\n:eggplant:\n:potato:\n:carrot:\n:corn:\n:hot_pepper:\n:bell_pepper:\n:cucumber:\n:leafy_green:\n:broccoli:\n:garlic:\n:onion:\n:peanuts:\n:beans:\n:chestnut:\n:ginger_root:\n:pea_pod:\n```\n\n----------------------------------------\n\nTITLE: Running the Hugo List Drafts Command\nDESCRIPTION: Provides the basic command-line syntax for executing the `hugo list drafts` command. This command is used to list all content marked as draft within the Hugo project. Optional flags and arguments can be appended.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_list_drafts.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo list drafts [flags] [args]\n```\n\n----------------------------------------\n\nTITLE: Suppressing Section Page Publication via Build Options - TOML\nDESCRIPTION: This TOML front matter disables rendering and listing for a section's index page, ensuring only descendant pages are rendered and listed. Requires placement in a section's front matter file (e.g., _index.md). 'render' and 'list' keys are set to 'never'. Inputs are the build options; output is the omission of the section's own HTML from the published site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/build-options.md#2025-04-23_snippet_7\n\nLANGUAGE: TOML\nCODE:\n```\ntitle = 'Books'\\n[build]\\nrender = 'never'\\nlist = 'never'\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo for Emoji Support in YAML/TOML\nDESCRIPTION: This configuration snippet shows how to enable emoji processing in Hugo by setting the enableEmoji parameter to true in the site configuration file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/emojis.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml/toml\nCODE:\n```\nenableEmoji = true\n```\n\n----------------------------------------\n\nTITLE: Inherited Command-Line Options for Hugo CLI - Shell\nDESCRIPTION: Documents the set of command-line options that are inherited from parent commands when using 'hugo config mounts'. These options provide advanced control over Hugo's runtime environment, paths, logging, memory rendering, and theme directories. Expected usage is as flags with the command, with each option affecting specific configuration areas. No external dependencies besides the Hugo CLI. This is strictly a parameter documentation listing, not executable code.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_config_mounts.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don\\'t create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Generated HTML from Nested Shortcodes in Hugo\nDESCRIPTION: Shows the resulting HTML output when using nested gallery and img shortcodes, demonstrating class inheritance.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/shortcode.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"content-gallery\">\n  <img src=\"/images/one.jpg\" class=\"content-gallery-image\">\n  <img src=\"/images/two.jpg\" class=\"content-gallery-image\">\n</div>\n<img src=\"/images/three.jpg\">\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Pages by Descending Publish Date in Hugo Go HTML Templates\nDESCRIPTION: This snippet shows how to iterate over a Hugo page collection sorted by publish date in descending order using ByPublishDate.Reverse in a Go HTML Template. It assumes .Pages is available in the template context, and outputs an h2 with a link for each page, with the newest publish dates listed first. The dependencies are identical to the ascending order example, but the output order is reversed. Best used when you want recent posts or pages displayed before older ones.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/pages/ByPublishDate.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByPublishDate.Reverse }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Basic Hugo Menu Template Using URL Method\nDESCRIPTION: A template for rendering a main menu in Hugo, using the URL method to generate href attributes for each menu item.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/menu-entry/PageRef.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n<ul>\n  {{ range .Site.Menus.main }}\n    <li><a href=\"{{ .URL }}\">{{ .Name }}</a></li>\n  {{ end }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using the Include Shortcode in Hugo Markdown Content\nDESCRIPTION: Example of how to call the include shortcode in a Markdown file. This demonstrates including content from another post while preserving the PageInner context for proper link resolution.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/render-hooks/pageinner.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{%/* include \"/posts/p2\" */%}}\n```\n\n----------------------------------------\n\nTITLE: GitHub API URL Example\nDESCRIPTION: Example URL for accessing GitHub's API to retrieve a base64-encoded README file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/encoding/Base64Decode.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.github.com/repos/gohugoio/hugo/readme\n```\n\n----------------------------------------\n\nTITLE: Setting Hugo Log Level to Info via Command Line (Shell)\nDESCRIPTION: Illustrates running the Hugo command with the `--logLevel` flag set to `info`. This level provides informational messages alongside warnings and errors, offering more context about the build process.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/logging.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhugo --logLevel info\n```\n\n----------------------------------------\n\nTITLE: Defining Base Site Configuration with Hugo TOML - TOML\nDESCRIPTION: This TOML snippet provides basic site configuration for a Hugo website, specifying the base URL and site title. The configuration file is required for the Hugo CLI tests to function properly, serving as input for reading and output validation. Key parameters are 'baseURL' for the site address and 'title' for site identification, with expected usage in development or test environments; outputs depend on Hugo commands parsing this file.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/config.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL=\"https://example.com/\"\ntitle=\"My New Hugo Site\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Hugo Site Configuration (TOML)\nDESCRIPTION: This is the default Hugo configuration file (`hugo.toml`). It sets the basic title for the website to \"Hugo Test\". This configuration might be overridden by other configuration files specified via command-line flags.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/hugo__flags.txt#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Test\"\n```\n\n----------------------------------------\n\nTITLE: Generating PowerShell Completion Script with Hugo CLI (Bash)\nDESCRIPTION: This command generates a PowerShell autocompletion script for Hugo by piping the output of the 'hugo completion powershell' command into PowerShell's Invoke-Expression. It assumes Hugo is installed and available in the user's PATH, and PowerShell is the active shell. The command can be used to enable autocompletions in the current session, with the option to append the output for future sessions. There are no additional required parameters; outputs are sent directly to the PowerShell environment.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_completion_powershell.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Getting Sorted Map Values from Hugo Store (Go HTML Template)\nDESCRIPTION: Demonstrates the use of GetSortedMapValues method to retrieve an array of values from a map stored in the Hugo Store, sorted by their keys.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/store-methods.md#2025-04-23_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ .Store.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ .Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ .Store.GetSortedMapValues \"greetings\" }} → [Hello Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Processing Images with a Custom Background Color Using Hugo (Go HTML Template)\nDESCRIPTION: This snippet demonstrates how to use the images.Process filter in Hugo's Go HTML Templates to override the background color for masked images that lack transparency support, such as JPEG. It requires the Hugo static site generator and the relevant image resource. The input is a color string (e.g., \\\"#00ff00\\\") and the output is an image filter object that can be later applied to images; note that the color parameter must be a valid CSS-compatible hex value.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/images/Mask.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $filter := images.Process \"#00ff00\" }}\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment of Hugo Site to Codeberg Pages\nDESCRIPTION: This snippet demonstrates the process of building a Hugo site and manually deploying it to a Codeberg Pages repository. It includes steps for initializing a Git repository, committing the built site, and pushing it to Codeberg.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-codeberg-pages.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# build the website\nhugo\n\n# access the output directory\ncd public\n\n# initialize new git repository\ngit init\n\n# commit and push code to main branch\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin https://codeberg.org/<YourUsername>/pages.git\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Converting Radians to Degrees with math.ToDegrees in Hugo (Go Template)\nDESCRIPTION: This snippet demonstrates the usage of the `math.ToDegrees` function within a Hugo template. It takes a floating-point number representing radians (approximately π/2) as input and outputs the equivalent value in degrees (90). This function requires Hugo version 0.130.0 or later.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/math/ToDegrees.md#2025-04-23_snippet_0\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ math.ToDegrees 1.5707963267948966 }} → 90\n```\n\n----------------------------------------\n\nTITLE: Calculating Zeta(2) Using Trigonometric Integrals (LaTeX)\nDESCRIPTION: This snippet shows a calculation of ζ(2) using the definite integral of arcsin(x) and its Taylor series expansion. It involves integrating odd powers of x divided by sqrt(1-x²).\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_10\n\nLANGUAGE: latex\nCODE:\n```\n\\int\\limits_0^{\\frac{\\pi }{2}} {sds} = \\frac{{\\pi ^2}}{8}\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\int\\limits_0^1 {\\frac{{{\\sin ^{ - 1}}x}}{{\\sqrt {1 - {x^2}} }}dx} = \\frac{{\\pi ^2}}{8}\n```\n\nLANGUAGE: latex\nCODE:\n```\n{\\sin ^{ - 1}}x = \\int {\\frac{{dx}}{{\\sqrt {1 - {x^2}} }}} = x + \\frac{1}{2}\\frac{{{x^3}}}{3} + \\frac{{1 \\cdot 3}}{{2 \\cdot 4}}\\frac{{{x^5}}}{5} + \\frac{{1 \\cdot 3 \\cdot 5}}{{2 \\cdot 4 \\cdot 6}}\\frac{{{x^7}}}{7} + \\cdots\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Extended on Solus Linux\nDESCRIPTION: Command to install the extended edition of Hugo on Solus Linux using the eopkg package manager. Solus includes Hugo in its standard package repository.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/installation/linux.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsudo eopkg install hugo\n```\n\n----------------------------------------\n\nTITLE: Extended Alert Blockquote Syntax Example\nDESCRIPTION: Example of an Obsidian-compatible extended alert blockquote with alert sign and title.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/render-hooks/blockquotes.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n> [!WARNING]+ Radiation hazard\n> Do not approach or handle without protective gear.\n```\n\n----------------------------------------\n\nTITLE: Changing Directory into Hugo Site using Shell\nDESCRIPTION: This standard shell command (`cd`) changes the current directory to `myblog`. It's typically executed after creating the site to perform further actions within the project directory. Assumes the `myblog` directory exists in the current working directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/new_content.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd myblog\n```\n\n----------------------------------------\n\nTITLE: Specifying a Partial Template Directory Layout - Text\nDESCRIPTION: This snippet shows the recommended directory structure for Hugo partial templates. Placing templates in 'layouts/partials/' enables their use via the partial or partials.Include functions, making them easily referenceable throughout the site.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/partials/Include.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlayouts/\\n└── partials/\\n    ├── average.html\\n    ├── breadcrumbs.html\\n    └── footer.html\n```\n\n----------------------------------------\n\nTITLE: Defining English Pluralization with Map Context (TOML)\nDESCRIPTION: Example TOML entry in `i18n/en.toml` for pluralization where the context is a map. The `count` key in the map determines the plural form ('one', 'other'), and other map keys (like `name`) can be used within the translation string via template variables.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/lang/Translate.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[age]\none = '{{ .name }} is {{ .count }} year old.'\nother = '{{ .name }} is {{ .count }} years old.'\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment Commands for Hugo Site to SourceHut Pages\nDESCRIPTION: Shell commands for building a Hugo site, packaging it, and publishing to SourceHut Pages using the hut CLI tool. Requires a SourceHut personal access token and the hut CLI tool to be installed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-sourcehut-pages.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo\ntar -C public -cvz . > site.tar.gz\nhut init\nhut pages publish -d <YourUsername>.srht.site site.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Executing Hugo Mod NPM Pack Test Commands\nDESCRIPTION: These shell commands first ensure the golden `package.json` file uses Unix line endings (`dostounix`), then run the Hugo command `hugo mod npm pack` to generate or update the project's `package.json` based on module imports. Finally, it compares the generated `package.json` with the `golden/package.json` file to verify the output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_npm.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndostounix golden/package.json\n\n\nhugo mod npm pack\ncmp package.json golden/package.json\n```\n\n----------------------------------------\n\nTITLE: Assigning Taxonomy Terms Object to a Variable - Go HTML Template\nDESCRIPTION: Assigns the entire Taxonomy terms object from the Hugo Data object to a template variable. Used for further property access or method calls. Relies on the .Data.Terms field—must be used within Hugo template context.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/taxonomy.md#2025-04-23_snippet_4\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $taxonomyObject := .Data.Terms }} \n```\n\n----------------------------------------\n\nTITLE: Defining the Basel Problem Sum in LaTeX\nDESCRIPTION: This LaTeX snippet defines the Basel problem sum, which is the core equation being proven throughout the document. It represents the sum of the reciprocals of squares from 1 to infinity.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\zeta(2)=\\sum_{k=1}^\\infty \\frac{1}{k^2}=\\frac{\\pi^2}{6}\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo locally with Mage\nDESCRIPTION: This command installs the locally built Hugo binary to your Go bin directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmage install\n```\n\n----------------------------------------\n\nTITLE: Getting Sorted Map Values in Hugo Store\nDESCRIPTION: Shows how to retrieve sorted values from a map using GetSortedMapValues.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/site/Store.md#2025-04-23_snippet_7\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ site.Store.SetInMap \"greetings\" \"english\" \"Hello\" }}\n{{ site.Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }}\n{{ site.Store.GetSortedMapValues \"greetings\" }} → [Hello Bonjour]\n```\n\n----------------------------------------\n\nTITLE: Creating amplify.yml Configuration File\nDESCRIPTION: Command to create the AWS Amplify configuration file in the project root directory.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/host-and-deploy/host-on-aws-amplify/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntouch amplify.yml\n```\n\n----------------------------------------\n\nTITLE: X Services Configuration in Hugo\nDESCRIPTION: Configuration for X services in Hugo, including the option to disable inline CSS when using simple mode for the X shortcode.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/x.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{{< code-toggle config=services.x />}}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Hugo Page Kinds with Directory Structure (Text)\nDESCRIPTION: This text snippet shows an example directory structure within a Hugo project's `content` directory. It highlights different file types (`index.md`, `book-2.md`, `_index.md`) and indicates their corresponding Hugo page `kind` (`page`, `section`, `home`) to provide context for the `IsPage` method.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/page/IsPage.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── books/\\n│   ├── book-1/\\n│   │   └── index.md  <-- kind = page\\n│   ├── book-2.md     <-- kind = page\\n│   └── _index.md     <-- kind = section\\n└── _index.md         <-- kind = home\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output using safe.JSStr\nDESCRIPTION: This HTML snippet displays the rendered output from Hugo when `safeJSStr` is used on the variable, as shown in the preceding example. The ampersand (`&`) from the original `$title` string is preserved verbatim in the final JavaScript code, without being escaped.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/functions/safe/JSStr.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n```html\n<script>\n  const a = \"Title: \" + \"Lilo & Stitch\";\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Example Output of debug.Dump for Page Parameters\nDESCRIPTION: This block shows an example of the output generated by the `debug.Dump` function when applied to a page's `.Params`. It presents the page's front matter parameters (like date, draft status, tags, title) in a human-readable, structured format (similar to JSON). This output helps visualize the data being inspected.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/troubleshooting/inspection.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{\n  \"date\": \"2023-11-10T15:10:42-08:00\",\n  \"draft\": false,\n  \"iscjklanguage\": false,\n  \"lastmod\": \"2023-11-10T15:10:42-08:00\",\n  \"publishdate\": \"2023-11-10T15:10:42-08:00\",\n  \"tags\": [\n    \"foo\",\n    \"bar\"\n  ],\n  \"title\": \"My first post\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Resource via Permalink Assignment - Hugo Resource API - Go HTML Templates\nDESCRIPTION: This snippet illustrates publishing a resource by assigning its Permalink to a noop variable, exploiting the side effect of Permalink which also triggers publishing. $resource must be a valid Resource object; the template assigns the output to $noop (unused). The result is the resource being published, but this method is less direct than Publish and returns the permalink value. Useful if both the publishing side effect and the permalink are required.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/methods/resource/Publish.md#2025-04-23_snippet_2\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $noop := $resource.Permalink }}\n```\n\n----------------------------------------\n\nTITLE: Splitting Actions and Raw String Literals Over Lines in Hugo (go-html-template)\nDESCRIPTION: Presents examples of splitting template variable assignments and string literals across multiple lines for readability. Highlights use of backticks for multi-line raw strings versus quoted line breaks. No runtime dependencies beyond Hugo template parsing, and there are no functional differences in output.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/templates/introduction.md#2025-04-23_snippet_10\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $v := or $arg1 $arg2 }}\\n\\n{{ $v := or \\n  $arg1\\n  $arg2\\n}}\n```\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ $msg := \\\"This is line one.\\nThis is line two.\\\" }}\\n\\n{{ $msg := `This is line one.\\nThis is line two.`\\n}}\n```\n\n----------------------------------------\n\nTITLE: Integer Example in Hugo\nDESCRIPTION: Demonstrates a basic integer value representation in Hugo templates.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/quick-reference/glossary/integer.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n42\n```\n\n----------------------------------------\n\nTITLE: Rendering Page List by Weight in Hugo Templates\nDESCRIPTION: Hugo template that lists pages ordered by their weight attribute, displaying each page's LinkTitle wrapped in an h2 tag with a link to the page.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/_common/methods/pages/next-and-prev.md#2025-04-23_snippet_1\n\nLANGUAGE: go-html-template\nCODE:\n```\n{{ range .Pages.ByWeight }}\n  <h2><a href=\"{{ .RelPermalink }}\">{{ .LinkTitle }}</a></h2>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: X Privacy Configuration in Hugo\nDESCRIPTION: Configuration options for the X shortcode's privacy settings in Hugo, including options to disable the shortcode, enable Do Not Track, and use simple mode for static rendering.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/shortcodes/x.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{< code-toggle config=privacy.x />}}\n```\n\n----------------------------------------\n\nTITLE: Complex Analysis Contour Integration\nDESCRIPTION: Proves the Basel sum using complex analysis and the residue theorem applied to π cot(πz)/z².\nSOURCE: https://github.com/gohugoio/hugo/blob/master/tpl/transform/testdata/large-katex.md#2025-04-23_snippet_24\n\nLANGUAGE: latex\nCODE:\n```\n\\int_{\\gamma_N} \\frac{\\pi\\cot(\\pi z)}{z^2} dz\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Multilingual Content Adapters by Directory (Text)\nDESCRIPTION: Provides directory structure for multilingual Hugo sites using per-language content directories. Each language has independent content and adapter files under separate subdirectories.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/content-management/content-adapters.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ncontent/\\n├── de/\\n│   └── books/\\n│       ├── _content.gotmpl\\n│       └── _index.md\\n└── en/\\n    └── books/\\n        ├── _content.gotmpl\\n        └── _index.md\n```\n\n----------------------------------------\n\nTITLE: Navigating to Hugo project directory\nDESCRIPTION: This command changes to the Hugo project directory where mage commands should be executed.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/go/src/github.com/gohugoio/hugo\n```\n\n----------------------------------------\n\nTITLE: Inherited Hugo Command Options (Plaintext)\nDESCRIPTION: Lists general command-line options inherited from parent Hugo commands that can be used with `hugo gen man`. These include options for setting the clock, specifying configuration files and directories, defining source and destination paths, controlling the build environment and logging level, managing vendor paths, and rendering options.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/docs/content/en/commands/hugo_gen_man.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\n      --config string              config file (default is hugo.yaml|json|toml)\n      --configDir string           config dir (default \"config\")\n  -d, --destination string         filesystem path to write files to\n  -e, --environment string         build environment\n      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern\n      --logLevel string            log level (debug|info|warn|error)\n      --noBuildLock                don't create .hugo_build.lock file\n      --quiet                      build in quiet mode\n  -M, --renderToMemory             render to memory (mostly useful when running the server)\n  -s, --source string              filesystem path to read files relative from\n      --themesDir string           filesystem path to themes directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Module Imports (TOML)\nDESCRIPTION: This `hugo.toml` file defines the basic configuration for a Hugo project, setting its title. Crucially, within the `[module.imports]` section, it specifies two external Hugo modules (`github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml` and `github.com/gohugoio/hugo-mod-integrationtests/withhugotoml`) that should be imported and managed by Hugo's module system. This configuration drives the `hugo mod vendor` command.\nSOURCE: https://github.com/gohugoio/hugo/blob/master/testscripts/commands/mod_vendor.txt#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n-- hugo.toml --\ntitle = \"Hugo Modules Test\"\n[module]\n[[module.imports]]\npath=\"github.com/gohugoio/hugo-mod-integrationtests/withconfigtoml\"\n[[module.imports]]\npath=\"github.com/gohugoio/hugo-mod-integrationtests/withhugotoml\"\n```"
  }
]