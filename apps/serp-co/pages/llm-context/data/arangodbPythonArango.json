[
  {
    "owner": "arangodb",
    "repo": "python-arango",
    "content": "TITLE: Managing Graphs with ArangoDB and Python\nDESCRIPTION: This code snippet demonstrates basic graph management operations in ArangoDB using the python-arango driver. It includes connecting to the database, listing graphs, creating a new graph, retrieving graph properties, and deleting a graph. Requires the `arango` package.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/graph.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# List existing graphs in the database.\ndb.graphs()\n\n# Create a new graph named \"school\" if it does not already exist.\n# This returns an API wrapper for \"school\" graph.\nif db.has_graph('school'):\n    school = db.graph('school')\nelse:\n    school = db.create_graph('school')\n\n# Retrieve various graph properties.\nschool.name\nschool.db_name\nschool.vertex_collections()\nschool.edge_definitions()\n\n# Delete the graph.\ndb.delete_graph('school')\n```\n\n----------------------------------------\n\nTITLE: Managing Standard Collections with python-arango\nDESCRIPTION: This code snippet demonstrates how to manage standard collections in ArangoDB using the python-arango driver. It includes initializing the client, connecting to a database, listing collections, creating a new collection, retrieving collection properties (name, db_name, properties, revision, statistics, checksum, count), performing operations (load, unload, truncate, configure), and deleting a collection. It assumes an ArangoDB server is running and accessible.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/collection.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# List all collections in the database.\ndb.collections()\n\n# Create a new collection named \"students\" if it does not exist.\n# This returns an API wrapper for \"students\" collection.\nif db.has_collection('students'):\n    students = db.collection('students')\nelse:\n    students = db.create_collection('students')\n\n# Retrieve collection properties.\nstudents.name\nstudents.db_name\nstudents.properties()\nstudents.revision()\nstudents.statistics()\nstudents.checksum()\nstudents.count()\n\n# Perform various operations.\nstudents.load()\nstudents.unload()\nstudents.truncate()\nstudents.configure()\n\n# Delete the collection.\ndb.delete_collection('students')\n```\n\n----------------------------------------\n\nTITLE: Executing AQL Queries in Python\nDESCRIPTION: This code snippet demonstrates how to execute AQL queries using the python-arango driver. It shows how to connect to the database, insert documents, execute AQL queries with bind variables, iterate through the result cursor, and manage running/slow queries. Dependencies: arango, ArangoClient, AQLQueryKillError.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/aql.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient, AQLQueryKillError\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Insert some test documents into \"students\" collection.\ndb.collection('students').insert_many([\n    {'_key': 'Abby', 'age': 22},\n    {'_key': 'John', 'age': 18},\n    {'_key': 'Mary', 'age': 21}\n])\n\n# Get the AQL API wrapper.\naql = db.aql\n\n# Retrieve the execution plan without running the query.\naql.explain('FOR doc IN students RETURN doc')\n\n# Validate the query without executing it.\naql.validate('FOR doc IN students RETURN doc')\n\n# Execute the query\ncursor = db.aql.execute(\n  'FOR doc IN students FILTER doc.age < @value RETURN doc',\n  bind_vars={'value': 19}\n)\n# Iterate through the result cursor\nstudent_keys = [doc['_key'] for doc in cursor]\n\n# List currently running queries.\naql.queries()\n\n# List any slow queries.\naql.slow_queries()\n\n# Clear slow AQL queries if any.\naql.clear_slow_queries()\n\n# Retrieve AQL query tracking properties.\naql.tracking()\n\n# Configure AQL query tracking properties.\naql.set_tracking(\n    max_slow_queries=10,\n    track_bind_vars=True,\n    track_slow_queries=True\n)\n\n# Kill a running query (this should fail due to invalid ID).\ntry:\n    aql.kill('some_query_id')\nexcept AQLQueryKillError as err:\n    assert err.http_code == 404\n    assert err.error_code == 1591\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Database Management\nDESCRIPTION: This snippet demonstrates how to interact with ArangoDB databases using the ArangoDB Python driver. It includes connecting to the '_system' database, listing databases, creating a new database, deleting a database, creating a database with users, connecting to the newly created database, updating user permissions, retrieving database/server information, and finally deleting the database. It requires the `arango` Python package.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/database.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"_system\" database as root user.\n# This returns an API wrapper for \"_system\" database.\nsys_db = client.db('_system', username='root', password='passwd')\n\n# List all databases.\nsys_db.databases()\n\n# Create a new database named \"test\" if it does not exist.\n# Only root user has access to it at time of its creation.\nif not sys_db.has_database('test'):\n    sys_db.create_database('test')\n\n# Delete the database.\nsys_db.delete_database('test')\n\n# Create a new database named \"test\" along with a new set of users.\n# Only \"jane\", \"john\", \"jake\" and root user have access to it.\nif not sys_db.has_database('test'):\n    sys_db.create_database(\n        name='test',\n        users=[\n            {'username': 'jane', 'password': 'foo', 'active': True},\n            {'username': 'john', 'password': 'bar', 'active': True},\n            {'username': 'jake', 'password': 'baz', 'active': True},\n        ],\n    )\n\n# Connect to the new \"test\" database as user \"jane\".\ndb = client.db('test', username='jane', password='foo')\n\n# Make sure that user \"jane\" has read and write permissions.\nsys_db.update_permission(username='jane', permission='rw', database='test')\n\n# Retrieve various database and server information.\ndb.name\ndb.username\ndb.version()\ndb.status()\ndb.details()\ndb.collections()\ndb.graphs()\ndb.engine()\n\n# Delete the database. Note that the new users will remain.\nsys_db.delete_database('test')\n```\n\n----------------------------------------\n\nTITLE: Using ArangoDB Cursors in Python\nDESCRIPTION: This example demonstrates basic cursor operations in python-arango, including initializing the client, connecting to a database, inserting data, executing an AQL query, and using cursor methods to retrieve data in batches. It covers accessing cursor ID, fetching batches, checking emptiness, getting total count, checking for more data, checking cache status, accessing statistics and profile, handling warnings, iterating using next, popping elements, manual fetching, and closing the cursor.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/cursor.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Set up some test data to query against.\ndb.collection('students').insert_many([\n    {'_key': 'Abby', 'age': 22},\n    {'_key': 'John', 'age': 18},\n    {'_key': 'Mary', 'age': 21},\n    {'_key': 'Suzy', 'age': 23},\n    {'_key': 'Dave', 'age': 20}\n])\n\n# Execute an AQL query which returns a cursor object.\ncursor = db.aql.execute(\n    'FOR doc IN students FILTER doc.age > @val RETURN doc',\n    bind_vars={'val': 17},\n    batch_size=2,\n    count=True\n)\n\n# Get the cursor ID.\ncursor.id\n\n# Get the items in the current batch.\ncursor.batch()\n\n# Check if the current batch is empty.\ncursor.empty()\n\n# Get the total count of the result set.\ncursor.count()\n\n# Flag indicating if there are more to be fetched from server.\ncursor.has_more()\n\n# Flag indicating if the results are cached.\ncursor.cached()\n\n# Get the cursor statistics.\ncursor.statistics()\n\n# Get the performance profile.\ncursor.profile()\n\n# Get any warnings produced from the query.\ncursor.warnings()\n\n# Return the next item from the cursor. If current batch is depleted, the\n# next batch is fetched from the server automatically.\ncursor.next()\n\n# Return the next item from the cursor. If current batch is depleted, an\n# exception is thrown. You need to fetch the next batch manually.\ncursor.pop()\n\n# Fetch the next batch and add them to the cursor object.\ncursor.fetch()\n\n# Delete the cursor from the server.\ncursor.close()\n```\n\n----------------------------------------\n\nTITLE: Managing Users and Permissions in ArangoDB using Python\nDESCRIPTION: This code snippet demonstrates how to manage users and permissions in ArangoDB using the python-arango driver. It covers operations like connecting to the `_system` database, listing users, creating users with attributes, checking user existence, retrieving user details, updating and replacing user information, fetching user permissions at different levels (all, database, collection), and updating/resetting those permissions. It requires the `ArangoClient` from the `arango` library.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/user.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"_system\" database as root user.\nsys_db = client.db('_system', username='root', password='passwd')\n\n# List all users.\nsys_db.users()\n\n# Create a new user.\nsys_db.create_user(\n    username='johndoe@gmail.com',\n    password='first_password',\n    active=True,\n    extra={'team': 'backend', 'title': 'engineer'}\n)\n\n# Check if a user exists.\nsys_db.has_user('johndoe@gmail.com')\n\n# Retrieve details of a user.\nsys_db.user('johndoe@gmail.com')\n\n# Update an existing user.\nsys_db.update_user(\n    username='johndoe@gmail.com',\n    password='second_password',\n    active=True,\n    extra={'team': 'frontend', 'title': 'engineer'}\n)\n\n# Replace an existing user.\nsys_db.replace_user(\n    username='johndoe@gmail.com',\n    password='third_password',\n    active=True,\n    extra={'team': 'frontend', 'title': 'architect'}\n)\n\n# Retrieve user permissions for all databases and collections.\nsys_db.permissions('johndoe@gmail.com')\n\n# Retrieve user permission for \"test\" database.\nsys_db.permission(\n    username='johndoe@gmail.com',\n    database='test'\n)\n\n# Retrieve user permission for \"students\" collection in \"test\" database.\nsys_db.permission(\n    username='johndoe@gmail.com',\n    database='test',\n    collection='students'\n)\n\n# Update user permission for \"test\" database.\nsys_db.update_permission(\n    username='johndoe@gmail.com',\n    permission='rw',\n    database='test'\n)\n\n# Update user permission for \"students\" collection in \"test\" database.\nsys_db.update_permission(\n    username='johndoe@gmail.com',\n    permission='ro',\n    database='test',\n    collection='students'\n)\n\n# Reset user permission for \"test\" database.\nsys_db.reset_permission(\n    username='johndoe@gmail.com',\n    database='test'\n)\n\n# Reset user permission for \"students\" collection in \"test\" database.\nsys_db.reset_permission(\n    username='johndoe@gmail.com',\n    database='test',\n    collection='students'\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Vertex Collections in ArangoDB (Python)\nDESCRIPTION: This code snippet demonstrates how to create, list, and manage vertex collections in an ArangoDB graph using the python-arango driver. It also includes examples of inserting, updating, replacing, getting, checking existence, and deleting vertices within a collection. Requires the `arango` package.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/graph.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for graph \"school\".\nschool = db.graph('school')\n\n# Create a new vertex collection named \"teachers\" if it does not exist.\n# This returns an API wrapper for \"teachers\" vertex collection.\nif school.has_vertex_collection('teachers'):\n    teachers = school.vertex_collection('teachers')\nelse:\n    teachers = school.create_vertex_collection('teachers')\n\n# List vertex collections in the graph.\nschool.vertex_collections()\n\n# Vertex collections have similar interface as standard collections.\nteachers.properties()\nteachers.insert({'_key': 'jon', 'name': 'Jon'})\nteachers.update({'_key': 'jon', 'age': 35})\nteachers.replace({'_key': 'jon', 'name': 'Jon', 'age': 36})\nteachers.get('jon')\nteachers.has('jon')\nteachers.delete('jon')\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Transaction using TransactionDatabase API (Python)\nDESCRIPTION: This snippet demonstrates how to perform transactions in ArangoDB using the python-arango driver's TransactionDatabase API. It initializes the ArangoDB client, connects to a database, begins a transaction specifying read and write collections, performs insert operations, checks the transaction status, and then either commits or aborts the transaction.  Note that the TransactionDatabase API was overhauled in version 5.0.0 and is not backward-compatible.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/transaction.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\ncol = db.collection('students')\n\n# Begin a transaction. Read and write collections must be declared ahead of\n# time. This returns an instance of TransactionDatabase, database-level\n# API wrapper tailored specifically for executing transactions.\ntxn_db = db.begin_transaction(read=col.name, write=col.name)\n\n# The API wrapper is specific to a single transaction with a unique ID.\ntxn_db.transaction_id\n\n# Child wrappers are also tailored only for the specific transaction.\ntxn_aql = txn_db.aql\ntxn_col = txn_db.collection('students')\n\n# API execution context is always set to \"transaction\".\nassert txn_db.context == 'transaction'\nassert txn_aql.context == 'transaction'\nassert txn_col.context == 'transaction'\n\n# From python-arango version 5+, results are returned immediately instead\n# of job objects on API execution.\nassert '_rev' in txn_col.insert({'_key': 'Abby'})\nassert '_rev' in txn_col.insert({'_key': 'John'})\nassert '_rev' in txn_col.insert({'_key': 'Mary'})\n\n# Check the transaction status.\ntxn_db.transaction_status()\n\n# Commit the transaction.\ntxn_db.commit_transaction()\nassert 'Abby' in col\nassert 'John' in col\nassert 'Mary' in col\nassert len(col) == 3\n\n# Begin another transaction. Note that the wrappers above are specific to\n# the last transaction and cannot be reused. New ones must be created.\ntxn_db = db.begin_transaction(read=col.name, write=col.name)\ntxn_col = txn_db.collection('students')\nassert '_rev' in txn_col.insert({'_key': 'Kate'})\nassert '_rev' in txn_col.insert({'_key': 'Mike'})\nassert '_rev' in txn_col.insert({'_key': 'Lily'})\nassert len(txn_col) == 6\n\n# Abort the transaction\ntxn_db.abort_transaction()\nassert 'Kate' not in col\nassert 'Mike' not in col\nassert 'Lily' not in col\nassert len(col) == 3  # transaction is aborted so txn_col cannot be used\n\n# Fetch an existing transaction. Useful if you have received a Transaction ID\n# from some other part of your system or an external system.\noriginal_txn = db.begin_transaction(write='students')\ntxn_col = original_txn.collection('students')\nassert '_rev' in txn_col.insert({'_key': 'Chip'})\ntxn_db = db.fetch_transaction(original_txn.transaction_id)\ntxn_col = txn_db.collection('students')\nassert '_rev' in txn_col.insert({'_key': 'Alya'})\ntxn_db.abort_transaction()\n```\n\n----------------------------------------\n\nTITLE: Performing Simple ArangoDB Queries in Python\nDESCRIPTION: This snippet demonstrates connecting to an ArangoDB database, accessing a collection, and executing simple queries such as retrieving IDs, keys, all documents, finding documents by filter, getting multiple documents by ID, retrieving a random document, updating documents by filter, replacing documents by filter, and deleting documents by filter.  It requires the arango Python driver. It connects to the 'test' database as the root user.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/simple.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for \"students\" collection.\nstudents = db.collection('students')\n\n# Get the IDs of all documents in the collection.\nstudents.ids()\n\n# Get the keys of all documents in the collection.\nstudents.keys()\n\n# Get all documents in the collection with skip and limit.\nstudents.all(skip=0, limit=100)\n\n# Find documents that match the given filters.\nstudents.find({'name': 'Mary'}, skip=0, limit=100)\n\n# Get documents from the collection by IDs or keys.\nstudents.get_many(['id1', 'id2', 'key1'])\n\n# Get a random document from the collection.\nstudents.random()\n\n# Update all documents that match the given filters.\nstudents.update_match({'name': 'Kim'}, {'age': 20})\n\n# Replace all documents that match the given filters.\nstudents.replace_match({'name': 'Ben'}, {'age': 20})\n\n# Delete all documents that match the given filters.\nstudents.delete_match({'name': 'John'})\n```\n\n----------------------------------------\n\nTITLE: Managing Documents with Collection API in ArangoDB\nDESCRIPTION: This code demonstrates how to perform CRUD operations on ArangoDB documents using the collection API wrapper in the python-arango driver. It covers inserting, checking existence, counting, retrieving, updating, replacing, and deleting documents within a specified collection.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/document.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for \"students\" collection.\nstudents = db.collection('students')\n\n# Create some test documents to play around with.\nlola = {'_key': 'lola', 'GPA': 3.5, 'first': 'Lola', 'last': 'Martin'}\nabby = {'_key': 'abby', 'GPA': 3.2, 'first': 'Abby', 'last': 'Page'}\njohn = {'_key': 'john', 'GPA': 3.6, 'first': 'John', 'last': 'Kim'}\nemma = {'_key': 'emma', 'GPA': 4.0, 'first': 'Emma', 'last': 'Park'}\n\n# Insert a new document. This returns the document metadata.\nmetadata = students.insert(lola)\nassert metadata['_id'] == 'students/lola'\nassert metadata['_key'] == 'lola'\n\n# Check if documents exist in the collection in multiple ways.\nassert students.has('lola') and 'john' not in students\n\n# Retrieve the total document count in multiple ways.\nassert students.count() == len(students) == 1\n\n# Insert multiple documents in bulk.\nstudents.import_bulk([abby, john, emma])\n\n# Retrieve one or more matching documents.\nfor student in students.find({'first': 'John'}):\n    assert student['_key'] == 'john'\n    assert student['GPA'] == 3.6\n    assert student['last'] == 'Kim'\n\n# Retrieve one or more matching documents, sorted by a field.\nfor student in students.find({'first': 'John'}, sort=[{'sort_by': 'GPA', 'sort_order': 'DESC'}]):\n    assert student['_key'] == 'john'\n    assert student['GPA'] == 3.6\n    assert student['last'] == 'Kim'\n\n# Retrieve a document by key.\nstudents.get('john')\n\n# Retrieve a document by ID.\nstudents.get('students/john')\n\n# Retrieve a document by body with \"_id\" field.\nstudents.get({'_id': 'students/john'})\n\n# Retrieve a document by body with \"_key\" field.\nstudents.get({'_key': 'john'})\n\n# Retrieve multiple documents by ID, key or body.\nstudents.get_many(['abby', 'students/lola', {'_key': 'john'}])\n\n# Update a single document.\nlola['GPA'] = 2.6\nstudents.update(lola)\n\n# Update one or more matching documents.\nstudents.update_match({'last': 'Park'}, {'GPA': 3.0})\n\n# Replace a single document.\nemma['GPA'] = 3.1\nstudents.replace(emma)\n\n# Replace one or more matching documents.\nbecky = {'first': 'Becky', 'last': 'Solis', 'GPA': '3.3'}\nstudents.replace_match({'first': 'Emma'}, becky)\n\n# Delete a document by key.\nstudents.delete('john')\n\n# Delete a document by ID.\nstudents.delete('students/lola')\n\n# Delete a document by body with \"_id\" or \"_key\" field.\nstudents.delete(emma)\n\n# Delete multiple documents. Missing ones are ignored.\nstudents.delete_many([abby, 'john', 'students/lola'])\n\n# Iterate through all documents and update individually.\nfor student in students:\n    student['GPA'] = 4.0\n    student['happy'] = True\n    students.update(student)\n```\n\n----------------------------------------\n\nTITLE: Creating and Traversing a Graph in ArangoDB using Python\nDESCRIPTION: This code demonstrates graph operations using the python-arango driver, including creating a graph, adding vertex and edge collections, inserting vertices and edges, and executing a graph traversal query. It initializes the ArangoDB client, connects to the \"test\" database, creates a graph named \"school\", creates vertex collections for students and lectures, defines an edge collection for registration, inserts vertex documents into the student and lecture collections, inserts edge documents into the register collection, and executes an AQL query to traverse the graph.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the client for ArangoDB.\nclient = ArangoClient(hosts=\"http://localhost:8529\")\n\n# Connect to \"test\" database as root user.\ndb = client.db(\"test\", username=\"root\", password=\"passwd\")\n\n# Create a new graph named \"school\".\ngraph = db.create_graph(\"school\")\n\n# Create a new EnterpriseGraph [Enterprise Edition]\neegraph = db.create_graph(\n    name=\"school\",\n    smart=True)\n\n# Create vertex collections for the graph.\nstudents = graph.create_vertex_collection(\"students\")\nlectures = graph.create_vertex_collection(\"lectures\")\n\n# Create an edge definition (relation) for the graph.\nedges = graph.create_edge_definition(\n    edge_collection=\"register\",\n    from_vertex_collections=[\"students\"],\n    to_vertex_collections=[\"lectures\"]\n)\n\n# Insert vertex documents into \"students\" (from) vertex collection.\nstudents.insert({\"_key\": \"01\", \"full_name\": \"Anna Smith\"})\nstudents.insert({\"_key\": \"02\", \"full_name\": \"Jake Clark\"})\nstudents.insert({\"_key\": \"03\", \"full_name\": \"Lisa Jones\"})\n\n# Insert vertex documents into \"lectures\" (to) vertex collection.\nlectures.insert({\"_key\": \"MAT101\", \"title\": \"Calculus\"})\nlectures.insert({\"_key\": \"STA101\", \"title\": \"Statistics\"})\nlectures.insert({\"_key\": \"CSC101\", \"title\": \"Algorithms\"})\n\n# Insert edge documents into \"register\" edge collection.\nedges.insert({\"_from\": \"students/01\", \"_to\": \"lectures/MAT101\"})\nedges.insert({\"_from\": \"students/01\", \"_to\": \"lectures/STA101\"})\nedges.insert({\"_from\": \"students/01\", \"_to\": \"lectures/CSC101\"})\nedges.insert({\"_from\": \"students/02\", \"_to\": \"lectures/MAT101\"})\nedges.insert({\"_from\": \"students/02\", \"_to\": \"lectures/STA101\"})\nedges.insert({\"_from\": \"students/03\", \"_to\": \"lectures/CSC101\"})\n\n# Traverse the graph in outbound direction, breath-first.\nquery = \"\"\"\n    FOR v, e, p IN 1..3 OUTBOUND 'students/01' GRAPH 'school'\n    OPTIONS { bfs: true, uniqueVertices: 'global' }\n    RETURN {vertex: v, edge: e, path: p}\n    \"\"\"\ncursor = db.aql.execute(query)\n```\n\n----------------------------------------\n\nTITLE: Connecting to ArangoDB using Basic Auth with python-arango\nDESCRIPTION: This snippet demonstrates connecting to an ArangoDB database using basic authentication. It initializes the ArangoDB client and connects to a specified database using a username and password. The authentication method is specified explicitly as 'basic' in one of the examples.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/auth.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user using basic auth.\ndb = client.db('test', username='root', password='passwd')\n\n# The authentication method can be given explicitly.\ndb = client.db(\n    'test',\n    username='root',\n    password='passwd',\n    auth_method='basic'\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to ArangoDB and Executing AQL Query in Python\nDESCRIPTION: This code demonstrates how to connect to an ArangoDB database using the python-arango driver, create a database and collection, insert documents, and execute an AQL query to retrieve data. It initializes the ArangoDB client, connects to the \"_system\" database, creates a new database named \"test\", connects to the newly created \"test\" database, creates a collection named \"students\", adds a persistent index, inserts documents into the collection, executes an AQL query to retrieve all documents from the students collection and extracts the student names from the cursor result.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the client for ArangoDB.\nclient = ArangoClient(hosts=\"http://localhost:8529\")\n\n# Connect to \"_system\" database as root user.\nsys_db = client.db(\"_system\", username=\"root\", password=\"passwd\")\n\n# Create a new database named \"test\".\nsys_db.create_database(\"test\")\n\n# Connect to \"test\" database as root user.\ndb = client.db(\"test\", username=\"root\", password=\"passwd\")\n\n# Create a new collection named \"students\".\nstudents = db.create_collection(\"students\")\n\n# Add a persistent index to the collection.\nstudents.add_index({'type': 'persistent', 'fields': ['name'], 'unique': True})\n\n# Insert new documents into the collection.\nstudents.insert({\"name\": \"jane\", \"age\": 39})\nstudents.insert({\"name\": \"josh\", \"age\": 18})\nstudents.insert({\"name\": \"judy\", \"age\": 21})\n\n# Execute an AQL query and iterate through the result cursor.\ncursor = db.aql.execute(\"FOR doc IN students RETURN doc\")\nstudent_names = [document[\"name\"] for document in cursor]\n```\n\n----------------------------------------\n\nTITLE: Manage Foxx Services using ArangoDB with Python\nDESCRIPTION: This snippet demonstrates how to manage Foxx services within ArangoDB using the python-arango driver.  It covers creating, updating, replacing, deleting, and managing configurations and dependencies of Foxx services using a server-side source.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/foxx.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"_system\" database as root user.\ndb = client.db('_system', username='root', password='passwd')\n\n# Get the Foxx API wrapper.\nfoxx = db.foxx\n\n# Define the test mount point.\nservice_mount = '/test_mount'\n\n# List services.\nfoxx.services()\n\n# Create a service using source on server.\nfoxx.create_service(\n    mount=service_mount,\n    source='/tests/static/service.zip',\n    config={},\n    dependencies={},\n    development=True,\n    setup=True,\n    legacy=True\n)\n\n# Update (upgrade) a service.\nservice = db.foxx.update_service(\n    mount=service_mount,\n    source='/tests/static/service.zip',\n    config={},\n    dependencies={},\n    teardown=True,\n    setup=True,\n    legacy=False\n)\n\n# Replace (overwrite) a service.\nservice = db.foxx.replace_service(\n    mount=service_mount,\n    source='/tests/static/service.zip',\n    config={},\n    dependencies={},\n    teardown=True,\n    setup=True,\n    legacy=True,\n    force=False\n)\n\n# Get service details.\nfoxx.service(service_mount)\n\n# Manage service configuration.\nfoxx.config(service_mount)\nfoxx.update_config(service_mount, config={})\nfoxx.replace_config(service_mount, config={})\n\n# Manage service dependencies.\nfoxx.dependencies(service_mount)\nfoxx.update_dependencies(service_mount, dependencies={})\nfoxx.replace_dependencies(service_mount, dependencies={})\n\n# Toggle development mode for a service.\nfoxx.enable_development(service_mount)\nfoxx.disable_development(service_mount)\n\n# Other miscellaneous functions.\nfoxx.readme(service_mount)\nfoxx.swagger(service_mount)\nfoxx.download(service_mount)\nfoxx.commit(service_mount)\nfoxx.scripts(service_mount)\nfoxx.run_script(service_mount, 'setup', [])\nfoxx.run_tests(service_mount, reporter='xunit', output_format='xml')\n\n# Delete a service.\nfoxx.delete_service(service_mount)\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Analyzer Management\nDESCRIPTION: This code demonstrates how to interact with ArangoDB analyzers using the python-arango driver. It initializes a connection to an ArangoDB database, retrieves the list of analyzers, creates a new analyzer named 'test_analyzer' with the 'identity' type and no properties, and then deletes the analyzer. The 'ignore_missing=True' flag ensures that no error occurs if the analyzer does not exist.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/analyzer.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Retrieve list of analyzers.\ndb.analyzers()\n\n# Create an analyzer.\ndb.create_analyzer(\n    name='test_analyzer',\n    analyzer_type='identity',\n    properties={},\n    features=[]\n)\n\n# Delete an analyzer.\ndb.delete_analyzer('test_analyzer', ignore_missing=True)\n```\n\n----------------------------------------\n\nTITLE: Handling ArangoDB Server Errors in Python\nDESCRIPTION: This code snippet demonstrates how to handle ArangoDB server errors using the python-arango library. It initializes an ArangoDB client, connects to a database, and attempts to insert a duplicate document, which triggers a DocumentInsertError. The code then catches the exception, asserts that it is an ArangoServerError, and inspects various attributes of the exception object to retrieve details about the error, the HTTP request, and the HTTP response.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/errors.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient, ArangoServerError, DocumentInsertError\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for \"students\" collection.\nstudents = db.collection('students')\n\ntry:\n    students.insert({'_key': 'John'})\n    students.insert({'_key': 'John'})  # duplicate key error\n\nexcept DocumentInsertError as exc:\n\n    assert isinstance(exc, ArangoServerError)\n    assert exc.source == 'server'\n\n    exc.message           # Exception message usually from ArangoDB\n    exc.error_message     # Raw error message from ArangoDB\n    exc.error_code        # Error code from ArangoDB\n    exc.url               # URL (API endpoint)\n    exc.http_method       # HTTP method (e.g. \"POST\")\n    exc.http_headers      # Response headers\n    exc.http_code         # Status code (e.g. 200)\n\n    # You can inspect the ArangoDB response directly.\n    response = exc.response\n    response.method       # HTTP method (e.g. \"POST\")\n    response.headers      # Response headers\n    response.url          # Full request URL\n    response.is_success   # Set to True if HTTP code is 2XX\n    response.body         # JSON-deserialized response body\n    response.raw_body     # Raw string response body\n    response.status_text  # Status text (e.g \"OK\")\n    response.status_code  # Status code (e.g. 200)\n    response.error_code   # Error code from ArangoDB\n\n    # You can also inspect the request sent to ArangoDB.\n    request = exc.request\n    request.method        # HTTP method (e.g. \"post\")\n    request.endpoint      # API endpoint starting with \"/_api\"\n    request.headers       # Request headers\n    request.params        # URL parameters\n    request.data          # Request payload\n```\n\n----------------------------------------\n\nTITLE: Managing Edge Collections in ArangoDB (Python)\nDESCRIPTION: This code snippet demonstrates how to manage edge collections in an ArangoDB graph using the python-arango driver. It covers inserting, replacing, updating, checking existence, getting, deleting edges, creating links, and listing edges going in/out of a vertex. Requires the `arango` package and prior creation of vertex collections and the edge definition.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/graph.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for graph \"school\".\nschool = db.graph('school')\n\n# Get the API wrapper for edge collection \"teach\".\nif school.has_edge_definition('teach'):\n    teach = school.edge_collection('teach')\nelse:\n    teach = school.create_edge_definition(\n        edge_collection='teach',\n        from_vertex_collections=['teachers'],\n        to_vertex_collections=['lectures']\n    )\n\n# Edge collections have a similar interface as standard collections.\nteach.insert({\n    '_key': 'jon-CSC101',\n    '_from': 'teachers/jon',\n    '_to': 'lectures/CSC101'\n})\nteach.replace({\n    '_key': 'jon-CSC101',\n    '_from': 'teachers/jon',\n    '_to': 'lectures/CSC101',\n    'online': False\n})\nteach.update({\n    '_key': 'jon-CSC101',\n    'online': True\n})\nteach.has('jon-CSC101')\nteach.get('jon-CSC101')\nteach.delete('jon-CSC101')\n\n# Create an edge between two vertices (essentially the same as insert).\nteach.link('teachers/jon', 'lectures/CSC101', data={'online': False})\n\n# List edges going in/out of a vertex.\nteach.edges('teachers/jon', direction='in')\nteach.edges('teachers/jon', direction='out')\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Index Creation and Management in Python\nDESCRIPTION: This code demonstrates how to interact with ArangoDB indexes using the python-arango driver. It covers connecting to the database, creating a collection, and then adding and deleting different index types. The code requires the python-arango driver to be installed and a running ArangoDB instance.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/indexes.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Create a new collection named \"cities\".\ncities = db.create_collection('cities')\n\n# List the indexes in the collection.\ncities.indexes()\n\n# Add a new persistent index on document fields \"continent\" and \"country\".\npersistent_index = {'type': 'persistent', 'fields': ['continent', 'country'], 'unique': True}\nindex = cities.add_index(persistent_index)\n\n# Add new fulltext indexes on fields \"continent\" and \"country\".\nindex = cities.add_index({'type': 'fulltext', 'fields': ['continent']})\nindex = cities.add_index({'type': 'fulltext', 'fields': ['country']})\n\n# Add a new persistent index on field 'population'.\npersistent_index = {'type': 'persistent', 'fields': ['population'], 'sparse': False}\nindex = cities.add_index(persistent_index)\n\n# Add a new geo-spatial index on field 'coordinates'.\ngeo_index = {'type': 'geo', 'fields': ['coordinates']}\nindex = cities.add_index(geo_index)\n\n# Add a new persistent index on field 'currency'.\npersistent_index = {'type': 'persistent', 'fields': ['currency'], 'sparse': True}\nindex = cities.add_index(persistent_index)\n\n# Add a new TTL (time-to-live) index on field 'currency'.\nttl_index = {'type': 'ttl', 'fields': ['currency'], 'expireAfter': 200}\nindex = cities.add_index(ttl_index)\n\n# Add MDI (multi-dimensional) index on field 'x' and 'y'.\nmdi_index = {'type': 'mdi', 'fields': ['x', 'y'], 'fieldValueTypes': 'double'}\nindex = cities.add_index(mdi_index)\n\n# Indexes may be added with a name that can be referred to in AQL queries.\npersistent_index = {'type': 'persistent', 'fields': ['country'], 'unique': True, 'name': 'my_hash_index'}\nindex = cities.add_index(persistent_index)\n\n# Delete the last index from the collection.\ncities.delete_index(index['id'])\n```\n\n----------------------------------------\n\nTITLE: Managing Views with ArangoDB using Python-Arango\nDESCRIPTION: This code demonstrates how to create, retrieve, rename, update, replace, and delete views in ArangoDB using the python-arango library. It initializes a client, connects to a database, and performs various operations on views. Dependencies include the python-arango library.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/view.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Retrieve list of views.\ndb.views()\n\n# Create a view.\ndb.create_view(\n    name='foo',\n    view_type='arangosearch',\n    properties={\n        'cleanupIntervalStep': 0,\n        'consolidationIntervalMsec': 0\n    }\n)\n\n# Rename a view.\ndb.rename_view('foo', 'bar')\n\n# Retrieve view properties.\ndb.view('bar')\n\n# Partially update view properties.\ndb.update_view(\n    name='bar',\n    properties={\n        'cleanupIntervalStep': 1000,\n        'consolidationIntervalMsec': 200\n    }\n)\n\n# Replace view properties. Unspecified ones are reset to default.\ndb.replace_view(\n    name='bar',\n    properties={'cleanupIntervalStep': 2000}\n)\n\n# Delete a view.\ndb.delete_view('bar')\n```\n\n----------------------------------------\n\nTITLE: Managing ArangoSearch Views with Python-Arango\nDESCRIPTION: This code snippet illustrates how to create, update, replace, retrieve, and delete ArangoSearch views using the python-arango library. It connects to an ArangoDB database and manipulates ArangoSearch views. Dependencies include the python-arango library.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/view.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Create an ArangoSearch view.\ndb.create_arangosearch_view(\n    name='arangosearch_view',\n    properties={'cleanupIntervalStep': 0}\n)\n\n# Partially update an ArangoSearch view.\ndb.update_arangosearch_view(\n    name='arangosearch_view',\n    properties={'cleanupIntervalStep': 1000}\n)\n\n# Replace an ArangoSearch view.\ndb.replace_arangosearch_view(\n    name='arangosearch_view',\n    properties={'cleanupIntervalStep': 2000}\n)\n\n# ArangoSearch views can be retrieved or deleted using regular view API\ndb.view('arangosearch_view')\ndb.delete_view('arangosearch_view')\n```\n\n----------------------------------------\n\nTITLE: Replication API Usage in Python\nDESCRIPTION: This code snippet showcases how to use the ArangoDB replication API to manage replication tasks such as creating dump batches, managing replication configuration and synchronizing data between instances. It requires the `python-arango` driver to be installed. It connects to an ArangoDB instance, gets the replication API wrapper, and then calls various replication methods.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/replication.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the Replication API wrapper.\nreplication = db.replication\n\n# Create a new dump batch.\nbatch = replication.create_dump_batch(ttl=1000)\n\n# Extend an existing dump batch.\nreplication.extend_dump_batch(batch['id'], ttl=1000)\n\n# Get an overview of collections and indexes.\nreplication.inventory(\n    batch_id=batch['id'],\n    include_system=True,\n    all_databases=True\n)\n\n# Get an overview of collections and indexes in a cluster.\nreplication.cluster_inventory(include_system=True)\n\n# Get the events data for given collection.\nreplication.dump(\n    collection='students',\n    batch_id=batch['id'],\n    lower=0,\n    upper=1000000,\n    chunk_size=0,\n    include_system=True,\n    ticks=0,\n    flush=True,\n)\n\n# Delete an existing dump batch.\nreplication.delete_dump_batch(batch['id'])\n\n# Get the logger state.\nreplication.logger_state()\n\n# Get the logger first tick value.\nreplication.logger_first_tick()\n\n# Get the replication applier configuration.\nreplication.applier_config()\n\n# Update the replication applier configuration.\nresult = replication.set_applier_config(\n    endpoint='http://127.0.0.1:8529',\n    database='test',\n    username='root',\n    password='passwd',\n    max_connect_retries=120,\n    connect_timeout=15,\n    request_timeout=615,\n    chunk_size=0,\n    auto_start=True,\n    adaptive_polling=False,\n    include_system=True,\n    auto_resync=True,\n    auto_resync_retries=3,\n    initial_sync_max_wait_time=405,\n    connection_retry_wait_time=25,\n    idle_min_wait_time=2,\n    idle_max_wait_time=3,\n    require_from_present=False,\n    verbose=True,\n    restrict_type='include',\n    restrict_collections=['students']\n)\n\n# Get the replication applier state.\nreplication.applier_state()\n\n# Start the replication applier.\nreplication.start_applier()\n\n# Stop the replication applier.\nreplication.stop_applier()\n\n# Get the server ID.\nreplication.server_id()\n\n# Synchronize data from a remote (master) endpoint\nreplication.synchronize(\n    endpoint='tcp://master:8500',\n    database='test',\n    username='root',\n    password='passwd',\n    include_system=False,\n    incremental=False,\n    restrict_type='include',\n    restrict_collections=['students']\n)\n\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Errors with ArangoDB Cursors in Python\nDESCRIPTION: This example demonstrates how to handle connection errors when fetching data from an ArangoDB cursor in python-arango using the `allow_retry` parameter. It retries fetching the current batch if a `ConnectionError` occurs. Note that cursor.close() is required for cleanup when allow_retry is used.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/cursor.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Set up some test data to query against.\ndb.collection('students').insert_many([\n    {'_key': 'Abby', 'age': 22},\n    {'_key': 'John', 'age': 18},\n    {'_key': 'Mary', 'age': 21},\n    {'_key': 'Suzy', 'age': 23},\n    {'_key': 'Dave', 'age': 20}\n])\n\n# Execute an AQL query which returns a cursor object.\ncursor = db.aql.execute(\n    'FOR doc IN students FILTER doc.age > @val RETURN doc',\n    bind_vars={'val': 17},\n    batch_size=2,\n    count=True,\n    allow_retry=True\n)\n\nwhile cursor.has_more():\n    try:\n        cursor.fetch()\n    except ConnectionError:\n        # Retry the request.\n        continue\n\nwhile not cursor.empty():\n    cursor.pop()\n\n# Delete the cursor from the server.\ncursor.close()\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Backup Operations in Python\nDESCRIPTION: This code snippet demonstrates how to interact with the ArangoDB backup API using the Python arango driver. It showcases creating, retrieving, uploading, downloading, restoring, and deleting backups. It requires the arango Python package and access to an ArangoDB instance with appropriate credentials.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/backup.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"_system\" database as root user.\nsys_db = client.db(\n    '_system',\n    username='root',\n    password='passwd',\n    auth_method='jwt'\n)\n\n# Get the backup API wrapper.\nbackup = sys_db.backup\n\n# Create a backup.\nresult = backup.create(\n    label='foo',\n    allow_inconsistent=True,\n    force=False,\n    timeout=1000\n)\nbackup_id = result['backup_id']\n\n# Retrieve details on all backups\nbackup.get()\n\n# Retrieve details on a specific backup.\nbackup.get(backup_id=backup_id)\n\n# Upload a backup to a remote repository.\nresult = backup.upload(\n    backup_id=backup_id,\n    repository='local://tmp/backups',\n    config={'local': {'type': 'local'}}\n)\nupload_id = result['upload_id']\n\n# Get status of an upload.\nbackup.upload(upload_id=upload_id)\n\n# Abort an upload.\nbackup.upload(upload_id=upload_id, abort=True)\n\n# Download a backup from a remote repository.\nresult = backup.download(\n    backup_id=backup_id,\n    repository='local://tmp/backups',\n    config={'local': {'type': 'local'}}\n)\ndownload_id = result['download_id']\n\n# Get status of an download.\nbackup.download(download_id=download_id)\n\n# Abort an download.\nbackup.download(download_id=download_id, abort=True)\n\n# Restore from a backup.\nbackup.restore(backup_id)\n\n# Delete a backup.\nbackup.delete(backup_id)\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Overload Control Example in Python\nDESCRIPTION: This example demonstrates how to use the `OverloadControlDatabase` feature in the ArangoDB Python driver to control request queueing time. It initializes a client, connects to a database, begins controlled execution, executes queries, handles exceptions, and adjusts the maximum allowed queue time.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/overload.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import errno\nfrom arango import ArangoClient\nfrom arango.exceptions import OverloadControlExecutorError\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Begin controlled execution.\ncontrolled_db = db.begin_controlled_execution(max_queue_time_seconds=7.5)\n\n# All requests surpassing the specified limit will be rejected.\ncontrolled_aql = controlled_db.aql\ncontrolled_col = controlled_db.collection('students')\n\n# On API execution, the last_queue_time property gets updated.\ncontrolled_col.insert({'_key': 'Neal'})\n\n# Retrieve the last recorded queue time.\nassert controlled_db.last_queue_time >= 0\n\ntry:\n    controlled_aql.execute('RETURN 100000')\nexcept OverloadControlExecutorError as err:\n    assert err.http_code == errno.HTTP_PRECONDITION_FAILED\n    assert err.error_code == errno.QUEUE_TIME_REQUIREMENT_VIOLATED\n\n# Retrieve the maximum allowed queue time.\nassert controlled_db.max_queue_time == 7.5\n\n# Adjust the maximum allowed queue time.\ncontrolled_db.adjust_max_queue_time(0.0001)\n\n# Disable the maximum allowed queue time.\ncontrolled_db.adjust_max_queue_time(None)\n```\n\n----------------------------------------\n\nTITLE: Providing a Custom CA Bundle with ArangoClient in Python\nDESCRIPTION: This snippet shows how to provide a custom CA bundle when creating an ArangoClient instance. This allows connections to servers using certificates signed by a custom CA. The `verify_override` parameter is set to the path of the certificate file.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/certificates.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = ArangoClient(hosts=\"https://localhost:8529\", verify_override=\"path/to/certfile\")\n```\n\n----------------------------------------\n\nTITLE: Managing AQL Query Cache in Python\nDESCRIPTION: This code demonstrates how to manage the AQL query cache in Python. It shows how to retrieve cache properties, configure the cache mode and maximum results, and clear the cache. Dependencies: arango, ArangoClient.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/aql.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the AQL API wrapper.\naql = db.aql\n\n# Retrieve AQL query cache properties.\naql.cache.properties()\n\n# Configure AQL query cache properties\naql.cache.configure(mode='demand', max_results=10000)\n\n# Clear results in AQL query cache.\naql.cache.clear()\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Batch API Example in Python\nDESCRIPTION: This code demonstrates how to use the ArangoDB Batch API in Python using a context manager. It initializes an ArangoDB client, connects to a database, gets a collection, begins a batch execution, inserts documents, executes an AQL query, and handles a syntax error. The batch is automatically committed upon exiting the context, and the results are retrieved from BatchJob objects.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/batch.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient, AQLQueryExecuteError\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for \"students\" collection.\nstudents = db.collection('students')\n\n# Begin batch execution via context manager. This returns an instance of\n# BatchDatabase, a database-level API wrapper tailored specifically for\n# batch execution. The batch is automatically committed when exiting the\n# context. The BatchDatabase wrapper cannot be reused after commit.\nwith db.begin_batch_execution(return_result=True) as batch_db:\n\n    # Child wrappers are also tailored for batch execution.\n    batch_aql = batch_db.aql\n    batch_col = batch_db.collection('students')\n\n    # API execution context is always set to \"batch\".\n    assert batch_db.context == 'batch'\n    assert batch_aql.context == 'batch'\n    assert batch_col.context == 'batch'\n\n    # BatchJob objects are returned instead of results.\n    job1 = batch_col.insert({'_key': 'Kris'})\n    job2 = batch_col.insert({'_key': 'Rita'})\n    job3 = batch_aql.execute('RETURN 100000')\n    job4 = batch_aql.execute('INVALID QUERY')  # Fails due to syntax error.\n\n# Upon exiting context, batch is automatically committed.\nassert 'Kris' in students\nassert 'Rita' in students\n\n# Retrieve the status of each batch job.\nfor job in batch_db.queued_jobs():\n    # Status is set to either \"pending\" (transaction is not committed yet\n    # and result is not available) or \"done\" (transaction is committed and\n    # result is available).\n    assert job.status() in {'pending', 'done'}\n\n# Retrieve the results of successful jobs.\nmetadata = job1.result()\nassert metadata['_id'] == 'students/Kris'\n\nmetadata = job2.result()\nassert metadata['_id'] == 'students/Rita'\n\ncursor = job3.result()\nassert cursor.next() == 100000\n\n# If a job fails, the exception is propagated up during result retrieval.\ntry:\n    result = job4.result()\nexcept AQLQueryExecuteError as err:\n    assert err.http_code == 400\n    assert err.error_code == 1501\n    assert 'syntax error' in err.message\n\n# Batch execution can be initiated without using a context manager.\n# If return_result parameter is set to False, no jobs are returned.\nbatch_db = db.begin_batch_execution(return_result=False)\nbatch_db.collection('students').insert({'_key': 'Jake'})\nbatch_db.collection('students').insert({'_key': 'Jill'})\n\n# The commit must be called explicitly.\nbatch_db.commit()\nassert 'Jake' in students\nassert 'Jill' in students\n```\n\n----------------------------------------\n\nTITLE: Connecting to ArangoDB using JWT with python-arango\nDESCRIPTION: This snippet demonstrates connecting to an ArangoDB database using JSON Web Tokens (JWT). It shows how to connect to a database using username, password, and specifying the authentication method as 'jwt'. It also includes examples of manually refreshing the token and overriding the token expiry leeway to compensate for clock differences between client and server.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/auth.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user using JWT.\ndb = client.db(\n    'test',\n    username='root',\n    password='passwd',\n    auth_method='jwt'\n)\n\n# Manually refresh the token.\ndb.conn.refresh_token()\n\n# Override the token expiry compare leeway in seconds (default: 0) to\n# compensate for out-of-sync clocks between the client and server.\ndb.conn.ext_leeway = 2\n```\n\n----------------------------------------\n\nTITLE: Initializing ArangoClient with Multiple Hosts\nDESCRIPTION: Demonstrates how to initialize the ArangoClient to connect to multiple ArangoDB coordinators using either a list of host strings or a comma-separated string.  This allows the client to connect to any of the available coordinators. Requires the `arango` library.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/cluster.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Single host\nclient = ArangoClient(hosts='http://localhost:8529')\n\n# Multiple hosts (option 1: list)\nclient = ArangoClient(hosts=['http://host1:8529', 'http://host2:8529'])\n\n# Multiple hosts (option 2: comma-separated string)\nclient = ArangoClient(hosts='http://host1:8529,http://host2:8529')\n```\n\n----------------------------------------\n\nTITLE: Listing ArangoDB Tasks in Python\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all active tasks within the connected ArangoDB database using the `tasks()` method. It provides a simple way to view all scheduled and running tasks.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/task.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# List all active tasks\ndb.tasks()\n```\n\n----------------------------------------\n\nTITLE: Managing AQL User Functions in Python\nDESCRIPTION: This snippet shows how to create, list, and delete AQL user functions in Python using the python-arango driver. AQL user functions allow extending AQL functionality with custom Javascript code. Dependencies: arango, ArangoClient.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/aql.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the AQL API wrapper.\naql = db.aql\n\n# Create a new AQL user function.\naql.create_function(\n    # Grouping by name prefix is supported.\n    name='functions::temperature::converter',\n    code='function (celsius) { return celsius * 1.8 + 32; }'\n)\n# List AQL user functions.\naql.functions()\n\n# Delete an existing AQL user function.\naql.delete_function('functions::temperature::converter')\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Asynchronous API Execution Example in Python\nDESCRIPTION: This code demonstrates how to perform asynchronous API execution with ArangoDB using the python-arango driver. It showcases initializing the ArangoDB client, connecting to a database, beginning async execution, creating child wrappers tailored for async execution, executing queries, retrieving job statuses and results, handling errors, canceling jobs, and clearing job results. Dependencies include the `arango` library and the `time` module.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/async.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom arango import (\n    ArangoClient,\n    AQLQueryExecuteError,\n    AsyncJobCancelError,\n    AsyncJobClearError\n)\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Begin async execution. This returns an instance of AsyncDatabase, a\n# database-level API wrapper tailored specifically for async execution.\nasync_db = db.begin_async_execution(return_result=True)\n\n# Child wrappers are also tailored for async execution.\nasync_aql = async_db.aql\nasync_col = async_db.collection('students')\n\n# API execution context is always set to \"async\".\nassert async_db.context == 'async'\nassert async_aql.context == 'async'\nassert async_col.context == 'async'\n\n# On API execution, AsyncJob objects are returned instead of results.\njob1 = async_col.insert({'_key': 'Neal'})\njob2 = async_col.insert({'_key': 'Lily'})\njob3 = async_aql.execute('RETURN 100000')\njob4 = async_aql.execute('INVALID QUERY')  # Fails due to syntax error.\n\n# Retrieve the status of each async job.\nfor job in [job1, job2, job3, job4]:\n    # Job status can be \"pending\" or \"done\".\n    assert job.status() in {'pending', 'done'}\n\n    # Let's wait until the jobs are finished.\n    while job.status() != 'done':\n        time.sleep(0.1)\n\n# Retrieve the results of successful jobs.\nmetadata = job1.result()\nassert metadata['_id'] == 'students/Neal'\n\nmetadata = job2.result()\nassert metadata['_id'] == 'students/Lily'\n\ncursor = job3.result()\nassert cursor.next() == 100000\n\n# If a job fails, the exception is propagated up during result retrieval.\ntry:\n    result = job4.result()\nexcept AQLQueryExecuteError as err:\n    assert err.http_code == 400\n    assert err.error_code == 1501\n    assert 'syntax error' in err.message\n\n# Cancel a job. Only pending jobs still in queue may be cancelled.\n# Since job3 is done, there is nothing to cancel and an exception is raised.\ntry:\n    job3.cancel()\nexcept AsyncJobCancelError as err:\n    assert err.message.endswith(f'job {job3.id} not found')\n\n# Clear the result of a job from ArangoDB server to free up resources.\n# Result of job4 was removed from the server automatically upon retrieval,\n# so attempt to clear it raises an exception.\ntry:\n    job4.clear()\nexcept AsyncJobClearError as err:\n    assert err.message.endswith(f'job {job4.id} not found')\n\n# List the IDs of the first 100 async jobs completed.\ndb.async_jobs(status='done', count=100)\n\n# List the IDs of the first 100 async jobs still pending.\ndb.async_jobs(status='pending', count=100)\n\n# Clear all async jobs still sitting on the server.\ndb.clear_async_jobs()\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Enterprise Features in Python\nDESCRIPTION: This snippet shows how to use the python-arango library to access enterprise-specific features like JWT secret management and encryption key rotation. It establishes a connection to the '_system' database using JWT authentication. It requires an ArangoDB Enterprise Edition instance.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/admin.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"_system\" database as root user using JWT authentication.\nsys_db = client.db(\n    '_system',\n    username='root',\n    password='passwd',\n    auth_method='jwt'\n)\n\n# Retrieve JWT secrets.\nsys_db.jwt_secrets()\n\n# Hot-reload JWT secrets.\nsys_db.reload_jwt_secrets()\n\n# Rotate the user-supplied keys for encryption.\nsys_db.encryption()\n```\n\n----------------------------------------\n\nTITLE: Graph Traversal Setup (Python)\nDESCRIPTION: This snippet initializes the ArangoDB client, connects to the 'test' database, and retrieves the API wrapper for the 'school' graph. It also obtains API wrappers for the 'teachers' and 'lectures' vertex collections, and the 'teach' edge collection. It then inserts vertices and edges into the graph.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/graph.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for graph \"school\".\nschool = db.graph('school')\n\n# Get API wrappers for \"from\" and \"to\" vertex collections.\nteachers = school.vertex_collection('teachers')\nlectures = school.vertex_collection('lectures')\n\n# Get the API wrapper for the edge collection.:\nteach = school.edge_collection('teach')\n\n# Insert vertices into the graph.\nteachers.insert({'_key': 'jon', 'name': 'Professor jon'})\nlectures.insert({'_key': 'CSC101', 'name': 'Introduction to CS'})\nlectures.insert({'_key': 'MAT223', 'name': 'Linear Algebra'})\nlectures.insert({'_key': 'STA201', 'name': 'Statistics'})\n\n# Insert edges into the graph.\nteach.insert({'_from': 'teachers/jon', '_to': 'lectures/CSC101'})\nteach.insert({'_from': 'teachers/jon', '_to': 'lectures/STA201'})\nteach.insert({'_from': 'teachers/jon', '_to': 'lectures/MAT223'})\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Server Administration Example in Python\nDESCRIPTION: This code snippet demonstrates various server administration tasks using the python-arango library. It connects to the '_system' database as root, retrieves server information (version, details, engine, time, role, mode, statistics, logs, metrics), sets log levels, echos requests, and reloads routing. It requires the python-arango library.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/admin.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"_system\" database as root user.\nsys_db = client.db('_system', username='root', password='passwd')\n\n# Retrieve the server version.\nsys_db.version()\n\n# Retrieve the server details.\nsys_db.details()\n\n# Retrieve the target DB version.\nsys_db.required_db_version()\n\n# Retrieve the database engine.\nsys_db.engine()\n\n# Retrieve the server time.\nsys_db.time()\n\n# Retrieve the server role.\nsys_db.role()\n\n# Retrieve the server role in a cluster.\nsys_db.cluster.server_role()\n\n# Retrieve the server mode.\nsys_db.mode()\n\n# Retrieve the server mode in a cluster.\nsys_db.cluster.server_mode()\n\n# Set the server mode.\nsys_db.set_mode('readonly')\nsys_db.set_mode('default')\n\n# Retrieve the server statistics.\nsys_db.statistics()\n\n# Read the server log.\nsys_db.read_log(level=\"debug\")\n\n# Retrieve the log levels.\nsys_db.log_levels()\n\n# Set the log .\nsys_db.set_log_levels(\n    agency='DEBUG',\n    deprecation='INFO',\n    threads='WARNING'\n)\n\n# Echo the last request.\nsys_db.echo()\n\n# Echo a request\nsys_db.echo('request goes here')\n\n# Reload the routing collection.\nsys_db.reload_routing()\n\n# Retrieve server metrics.\nsys_db.metrics()\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Client Implementation in Python\nDESCRIPTION: This code defines a custom HTTP client (`CustomHTTPClient`) that inherits from `arango.http.HTTPClient`. It implements `create_session` to configure a `requests.Session` with features like automatic retries and custom headers. The `send_request` method handles sending the HTTP request, logging the activity, disabling SSL verification, and constructing an `arango.response.Response` object.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/http.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\n\nfrom requests.adapters import HTTPAdapter\nfrom requests import Session\nfrom requests.packages.urllib3.util.retry import Retry\n\nfrom arango.response import Response\nfrom arango.http import HTTPClient\n\n\nclass CustomHTTPClient(HTTPClient):\n    \"\"\"My custom HTTP client with cool features.\"\"\"\n\n    def __init__(self):\n        # Initialize your logger.\n        self._logger = logging.getLogger('my_logger')\n\n    def create_session(self, host):\n        session = Session()\n\n        # Add request header.\n        session.headers.update({'x-my-header': 'true'})\n\n        # Enable retries.\n        retry_strategy = Retry(\n            total=3,\n            backoff_factor=1,\n            status_forcelist=[429, 500, 502, 503, 504],\n            method_whitelist=[\"HEAD\", \"GET\", \"OPTIONS\"],\n        )\n        http_adapter = HTTPAdapter(max_retries=retry_strategy)\n        session.mount('https://', http_adapter)\n        session.mount('http://', http_adapter)\n\n        return session\n\n    def send_request(self,\n                     session,\n                     method,\n                     url,\n                     params=None,\n                     data=None,\n                     headers=None,\n                     auth=None):\n        # Add your own debug statement.\n        self._logger.debug(f'Sending request to {url}')\n\n        # Send a request.\n        response = session.request(\n            method=method,\n            url=url,\n            params=params,\n            data=data,\n            headers=headers,\n            auth=auth,\n            verify=False,  # Disable SSL verification\n            timeout=5      # Use timeout of 5 seconds\n        )\n        self._logger.debug(f'Got {response.status_code}')\n\n        # Return an instance of arango.response.Response.\n        return Response(\n            method=response.request.method,\n            url=response.url,\n            headers=response.headers,\n            status_code=response.status_code,\n            status_text=response.reason,\n            raw_body=response.text,\n        )\n```\n\n----------------------------------------\n\nTITLE: Managing Documents with Database API in ArangoDB\nDESCRIPTION: This code demonstrates basic CRUD operations on ArangoDB documents using the database API wrapper in the python-arango driver. It covers inserting, checking existence, retrieving, updating, replacing, and deleting documents, but requires providing document IDs instead of keys.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/document.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Create some test documents to play around with.\n# The documents must have the \"_id\" field instead.\nlola = {'_id': 'students/lola', 'GPA': 3.5}\nabby = {'_id': 'students/abby', 'GPA': 3.2}\njohn = {'_id': 'students/john', 'GPA': 3.6}\nemma = {'_id': 'students/emma', 'GPA': 4.0}\n\n# Insert a new document.\nmetadata = db.insert_document('students', lola)\nassert metadata['_id'] == 'students/lola'\nassert metadata['_key'] == 'lola'\n\n# Check if a document exists.\nassert db.has_document(lola) is True\n\n# Get a document (by ID or body with \"_id\" field).\ndb.document('students/lola')\ndb.document(abby)\n\n# Update a document.\nlola['GPA'] = 3.6\ndb.update_document(lola)\n\n# Replace a document.\nlola['GPA'] = 3.4\ndb.replace_document(lola)\n\n# Delete a document (by ID or body with \"_id\" field).\ndb.delete_document('students/lola')\n```\n\n----------------------------------------\n\nTITLE: Managing Vertices via Graph API in ArangoDB (Python)\nDESCRIPTION: This code snippet shows how to manage vertices in an ArangoDB graph using the graph API wrappers in python-arango. It demonstrates creating, updating, replacing, checking for existence, getting, and deleting vertices. Note that `_id` is required for updates, replacements, etc., instead of `_key`. Requires the `arango` package.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/graph.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for graph \"school\".\nschool = db.graph('school')\n\n# Create a new vertex collection named \"lectures\" if it does not exist.\n# This returns an API wrapper for \"lectures\" vertex collection.\nif school.has_vertex_collection('lectures'):\n    school.vertex_collection('lectures')\nelse:\n    school.create_vertex_collection('lectures')\n\n# The \"_id\" field is required instead of \"_key\" field (except for insert).\nschool.insert_vertex('lectures', {'_key': 'CSC101'})\nschool.update_vertex({'_id': 'lectures/CSC101', 'difficulty': 'easy'})\nschool.replace_vertex({'_id': 'lectures/CSC101', 'difficulty': 'hard'})\nschool.has_vertex('lectures/CSC101')\nschool.vertex('lectures/CSC101')\nschool.delete_vertex('lectures/CSC101')\n```\n\n----------------------------------------\n\nTITLE: Managing ArangoDB Clusters\nDESCRIPTION: Shows how to manage ArangoDB clusters using the python-arango library.  It includes steps to connect to the `_system` database, get the Cluster API wrapper, and perform various cluster administration tasks such as retrieving server details and toggling maintenance mode. Requires the `arango` library.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/cluster.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"_system\" database as root user.\nsys_db = client.db('_system', username='root', password='passwd')\n\n# Get the Cluster API wrapper.\ncluster = sys_db.cluster\n\n# Get this server's ID.\ncluster.server_id()\n\n# Get this server's role.\ncluster.server_role()\n\n# Get the cluster health.\ncluster.health()\n\n# Get cluster server details.\ncluster.server_count()\nserver_id = cluster.server_id()\ncluster.server_engine(server_id)\ncluster.server_version(server_id)\ncluster.server_statistics(server_id)\ncluster.server_maintenance_mode(server_id)\n\n# Toggle Server maintenance mode (allowed values are \"normal\" and \"maintenance\").\ncluster.toggle_server_maintenance_mode(server_id, 'normal')\ncluster.toggle_server_maintenance_mode(server_id, 'maintenance', timeout=30)\n\n# Toggle Cluster maintenance mode (allowed values are \"on\" and \"off\").\ncluster.toggle_maintenance_mode('on')\ncluster.toggle_maintenance_mode('off')\n\n# Rebalance the distribution of shards. Available with ArangoDB 3.10+.\ncluster.rebalance()\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Client Basic Operations in Python\nDESCRIPTION: This snippet shows how to initialize the ArangoDB client, connect to the _system database, create a new database, connect to the new database, create a collection, add a persistent index, truncate the collection, insert documents, execute an AQL query, and iterate through the cursor to retrieve the documents. It requires the `arango` package to be installed.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/overview.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient(hosts='http://localhost:8529')\n\n# Connect to \"_system\" database as root user.\n# This returns an API wrapper for \"_system\" database.\nsys_db = client.db('_system', username='root', password='passwd')\n\n# Create a new database named \"test\" if it does not exist.\nif not sys_db.has_database('test'):\n    sys_db.create_database('test')\n\n# Connect to \"test\" database as root user.\n# This returns an API wrapper for \"test\" database.\ndb = client.db('test', username='root', password='passwd')\n\n# Create a new collection named \"students\" if it does not exist.\n# This returns an API wrapper for \"students\" collection.\nif db.has_collection('students'):\n    students = db.collection('students')\nelse:\n    students = db.create_collection('students')\n\n# Add a persistent index to the collection.\nstudents.add_index({'type': 'persistent', 'fields': ['name'], 'unique': False})\n\n# Truncate the collection.\nstudents.truncate()\n\n# Insert new documents into the collection.\nstudents.insert({'name': 'jane', 'age': 19})\nstudents.insert({'name': 'josh', 'age': 18})\nstudents.insert({'name': 'jake', 'age': 21})\n\n# Execute an AQL query. This returns a result cursor.\ncursor = db.aql.execute('FOR doc IN students RETURN doc')\n\n# Iterate through the cursor to retrieve the documents.\nstudent_names = [document['name'] for document in cursor]\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Transaction with Raw JavaScript Code (Python)\nDESCRIPTION: This snippet demonstrates how to execute a transaction in ArangoDB using raw JavaScript code with the python-arango driver. It initializes the ArangoDB client, connects to a database, and then uses the `execute_transaction` method to run JavaScript code that interacts with a collection. The transaction logic includes conditional insertion of documents based on the collection's document count. It defines the read and write collections as well.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/transaction.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for \"students\" collection.\nstudents = db.collection('students')\n\n# Execute transaction in raw Javascript.\nresult = db.execute_transaction(\n    command='''\n    function () {{\n        var db = require('internal').db;\n        db.students.save(params.student1);\n        if (db.students.count() > 1) {\n            db.students.save(params.student2);\n        } else {\n            db.students.save(params.student3);\n        }\n        return true;\n    }}\n    ''',\n    params={\n        'student1': {'_key': 'Lucy'},\n        'student2': {'_key': 'Greg'},\n        'student3': {'_key': 'Dona'}\n    },\n    read='students',  # Specify the collections read.\n    write='students'  # Specify the collections written.\n)\nassert result is True\nassert 'Lucy' in students\nassert 'Greg' in students\nassert 'Dona' not in students\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Collection Schema Creation & Management in Python\nDESCRIPTION: This code snippet demonstrates how to create an ArangoDB collection with a specified JSON schema, modify the schema, and remove the schema using the python-arango driver. It requires the `ArangoClient` class from the `arango` library and assumes a connection to a database named 'test' with root user credentials.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/schema.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\nif db.has_collection('employees'):\n    db.delete_collection('employees')\n\n# Create a new collection named \"employees\" with custom schema.\nmy_schema = {\n    'rule': {\n        'type': 'object',\n        'properties': {\n            'name': {'type': 'string'},\n            'email': {'type': 'string'}\n        },\n        'required': ['name', 'email']\n    },\n    'level': 'moderate',\n    'message': 'Schema Validation Failed.'\n}\nemployees = db.create_collection(name='employees', schema=my_schema)\n\n# Modify the schema.\nemployees.configure(schema=my_schema)\n\n# Remove the schema.\nemployees.configure(schema={})\n```\n\n----------------------------------------\n\nTITLE: Initializing ArangoDB Client with Custom JSON Serializers - Python\nDESCRIPTION: This code snippet demonstrates how to initialize the ArangoDB client with custom JSON serializers and deserializers. It utilizes the `json.dumps` and `json.loads` functions from the Python `json` library for serialization and deserialization, respectively. The `ArangoClient` is initialized with the `hosts`, `serializer`, and `deserializer` parameters.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/serializer.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client with custom serializer and deserializer.\nclient = ArangoClient(\n    hosts='http://localhost:8529',\n    serializer=json.dumps,\n    deserializer=json.loads\n)\n```\n\n----------------------------------------\n\nTITLE: Manage Foxx Services with Local Files in Python\nDESCRIPTION: This snippet demonstrates how to manage Foxx services within ArangoDB using the python-arango driver with local zip files.  It illustrates creating, updating, and replacing services using file paths, and also covers deleting services.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/foxx.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"_system\" database as root user.\ndb = client.db('_system', username='root', password='passwd')\n\n# Get the Foxx API wrapper.\nfoxx = db.foxx\n\n# Define the test mount point.\nservice_mount = '/test_mount'\n\n# Create a service by providing a file directly.\nfoxx.create_service_with_file(\n    mount=service_mount,\n    filename='/home/user/service.zip',\n    development=True,\n    setup=True,\n    legacy=True\n)\n\n# Update (upgrade) a service by providing a file directly.\nfoxx.update_service_with_file(\n    mount=service_mount,\n    filename='/home/user/service.zip',\n    teardown=False,\n    setup=True,\n    legacy=True,\n    force=False\n)\n\n# Replace a service by providing a file directly.\nfoxx.replace_service_with_file(\n    mount=service_mount,\n    filename='/home/user/service.zip',\n    teardown=False,\n    setup=True,\n    legacy=True,\n    force=False\n)\n\n# Delete a service.\nfoxx.delete_service(service_mount)\n```\n\n----------------------------------------\n\nTITLE: Initializing ArangoClient with Compression (Python)\nDESCRIPTION: This snippet demonstrates how to initialize the ArangoClient with deflate compression enabled for both requests and responses. It uses the DeflateRequestCompression class for requests and sets the response_compression parameter to \"deflate\". It requires the arango and arango.http modules.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/compression.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\nfrom arango.http import DeflateRequestCompression\n\nclient = ArangoClient(\n    hosts='http://localhost:8529',\n    request_compression=DeflateRequestCompression(),\n    response_compression=\"deflate\"\n)\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom HTTP Client in Python-Arango\nDESCRIPTION: This code snippet shows how to inject the `CustomHTTPClient` into the `ArangoClient` during initialization. This allows the client to use the custom HTTP handling logic for all requests to the ArangoDB server.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/http.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\nfrom my_module import CustomHTTPClient\n\nclient = ArangoClient(\n    hosts='http://localhost:8529',\n    http_client=CustomHTTPClient()\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Edges in ArangoDB Graph (Python)\nDESCRIPTION: This code snippet demonstrates how to create, list, replace, and delete edge definitions in an ArangoDB graph using the python-arango driver.  It also creates the graph if it doesn't already exist. Requires the `arango` package.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/graph.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for graph \"school\".\nif db.has_graph('school'):\n    school = db.graph('school')\nelse:\n    school = db.create_graph('school')\n\n# Create an edge definition named \"teach\". This creates any missing\n# collections and returns an API wrapper for \"teach\" edge collection.\nif not school.has_edge_definition('teach'):\n    teach = school.create_edge_definition(\n        edge_collection='teach',\n        from_vertex_collections=['teachers'],\n        to_vertex_collections=['teachers']\n    )\n\n# List edge definitions.\nschool.edge_definitions()\n\n# Replace the edge definition.\nschool.replace_edge_definition(\n    edge_collection='teach',\n    from_vertex_collections=['teachers'],\n    to_vertex_collections=['lectures']\n)\n\n# Delete the edge definition (and its collections).\nschool.delete_edge_definition('teach', purge=True)\n```\n\n----------------------------------------\n\nTITLE: Deleting an ArangoDB Task in Python\nDESCRIPTION: This snippet shows how to delete an existing ArangoDB task by its ID. The `delete_task()` method removes the specified task. The `ignore_missing=True` argument ensures that no error is raised if the task does not exist.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/task.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Delete an existing task by ID.\ndb.delete_task('001', ignore_missing=True)\n```\n\n----------------------------------------\n\nTITLE: Executing AQL Traversal (Python)\nDESCRIPTION: This snippet executes the AQL query defined previously using the ArangoDB database connection. It traverses the graph in the outbound direction using breadth-first search, returning a cursor object that can be used to iterate through the results.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/graph.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# AQL to perform a graph traversal\nquery = \"\"\"\n    FOR v, e, p IN 1..3 OUTBOUND 'teachers/jon' GRAPH 'school'\n    OPTIONS { bfs: true, uniqueVertices: 'global' }\n    RETURN {vertex: v, edge: e, path: p}\n    \"\"\"\n\n    # Traverse the graph in outbound direction, breath-first.\ncursor = db.aql.execute(query)\n```\n\n----------------------------------------\n\nTITLE: Managing Edges via Graph API in ArangoDB (Python)\nDESCRIPTION: This code snippet demonstrates how to manage edges using the graph API in python-arango. It shows how to insert, replace, update, check existence, get, delete edges, create links, and list edges, using document IDs instead of keys where applicable. Requires the `arango` package and a pre-existing graph, vertex collections and an edge definition.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/graph.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for graph \"school\".\nschool = db.graph('school')\n\n# The \"_id\" field is required instead of \"_key\" field.\nschool.insert_edge(\n    collection='teach',\n    edge={\n        '_id': 'teach/jon-CSC101',\n        '_from': 'teachers/jon',\n        '_to': 'lectures/CSC101'\n    }\n)\nschool.replace_edge({\n    '_id': 'teach/jon-CSC101',\n    '_from': 'teachers/jon',\n    '_to': 'lectures/CSC101',\n    'online': False,\n})\nschool.update_edge({\n    '_id': 'teach/jon-CSC101',\n    'online': True\n})\nschool.has_edge('teach/jon-CSC101')\nschool.edge('teach/jon-CSC101')\nschool.delete_edge('teach/jon-CSC101')\nschool.link('teach', 'teachers/jon', 'lectures/CSC101')\nschool.edges('teach', 'teachers/jon', direction='in')\n```\n\n----------------------------------------\n\nTITLE: Generating and Using JWT tokens with python-arango\nDESCRIPTION: This snippet demonstrates how to manually generate a JSON Web Token (JWT) and use it to connect to an ArangoDB database as a superuser or user.  It relies on the `jwt` library. The generated token is passed to the `superuser_token` or `user_token` argument of the `db` method.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/auth.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom calendar import timegm\nfrom datetime import datetime\n\nimport jwt\n\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Generate the JWT token manually.\nnow = timegm(datetime.utcnow().utctimetuple())\ntoken = jwt.encode(\n    payload={\n        'iat': now,\n        'exp': now + 3600,\n        'iss': 'arangodb',\n        'server_id': 'client'\n    },\n    key='secret',\n).decode('utf-8')\n\n# Connect to \"test\" database as superuser using the token.\ndb = client.db('test', superuser_token=token)\n\n# Connect to \"test\" database as user using the token.\ndb = client.db('test', user_token=token)\n```\n\n----------------------------------------\n\nTITLE: Initializing ArangoClient with TLS (default verification) Python\nDESCRIPTION: This snippet initializes the ArangoClient to connect to an ArangoDB server over HTTPS. By default, TLS certificate verification is enabled, which may cause issues with self-signed certificates.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/certificates.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = ArangoClient(hosts=\"https://localhost:8529\")\n```\n\n----------------------------------------\n\nTITLE: Creating an ArangoDB Task in Python\nDESCRIPTION: This snippet shows how to create a new ArangoDB task with a custom JavaScript command, parameters, and schedule. The task prints the provided parameters to the ArangoDB log. It includes options for setting an initial offset and a recurring period, as well as a custom task ID.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/task.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndb.create_task(\n name='test_task',\n command='''\n var task = function(params){\n var db = require('@arangodb');\n db.print(params);\n }\n task(params);\n ''',\n params={'foo': 'bar'},\n offset=300,\n period=10,\n task_id='001'\n)\n```\n\n----------------------------------------\n\nTITLE: Handling ArangoDB Client Errors in Python\nDESCRIPTION: This code snippet demonstrates handling client-side errors using the python-arango library. It initializes the client, connects to a database, attempts to retrieve a document using an invalid ID, and catches the resulting DocumentParseError. It then asserts that the exception is an ArangoClientError and verifies that only the error message is set, while other attributes related to HTTP requests and responses are None, as client errors do not involve direct server communication.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/errors.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient, ArangoClientError, DocumentParseError\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the API wrapper for \"students\" collection.\nstudents = db.collection('students')\n\ntry:\n    students.get({'_id': 'invalid_id'})  # malformed document\n\nexcept DocumentParseError as exc:\n\n    assert isinstance(exc, ArangoClientError)\n    assert exc.source == 'client'\n\n    # Only the error message is set.\n    error_message = exc.message\n    assert exc.error_code is None\n    assert exc.error_message is None\n    assert exc.url is None\n    assert exc.http_method is None\n    assert exc.http_code is None\n    assert exc.http_headers is None\n    assert exc.response is None\n    assert exc.request is None\n```\n\n----------------------------------------\n\nTITLE: Retrieving an ArangoDB Task by ID in Python\nDESCRIPTION: This snippet demonstrates how to retrieve details about a specific ArangoDB task using its unique ID.  The `task()` method fetches task information based on the provided identifier.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/task.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Retrieve details on a task by ID.\ndb.task('001')\n```\n\n----------------------------------------\n\nTITLE: Iterating ArangoDB Cursors Manually in Python\nDESCRIPTION: This example demonstrates manual cursor iteration using fetch and pop methods in python-arango to control when batches are fetched from the server. It shows how to iterate through the cursor until all data is retrieved. This provides more fine-grained control over data retrieval compared to implicit fetching during standard iteration or `next()` calls.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/cursor.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Set up some test data to query against.\ndb.collection('students').insert_many([\n    {'_key': 'Abby', 'age': 22},\n    {'_key': 'John', 'age': 18},\n    {'_key': 'Mary', 'age': 21}\n])\n\n# If you iterate over the cursor or call cursor.next(), batches are\n# fetched automatically from the server just-in-time style.\ncursor = db.aql.execute('FOR doc IN students RETURN doc', batch_size=1)\nresult = [doc for doc in cursor]\n\n# Alternatively, you can manually fetch and pop for finer control.\ncursor = db.aql.execute('FOR doc IN students RETURN doc', batch_size=1)\nwhile cursor.has_more(): # Fetch until nothing is left on the server.\n    cursor.fetch()\nwhile not cursor.empty(): # Pop until nothing is left on the cursor.\n    cursor.pop()\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Edge Document Example\nDESCRIPTION: This code shows an example of an ArangoDB edge document, which includes the required '_from' and '_to' fields that reference vertex documents. It represents a connection between two students in the 'friends' edge collection.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/document.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    '_id': 'friends/001',\n    '_key': '001',\n    '_rev': '_Wm3d4le--_',\n    '_from': 'students/john',\n    '_to': 'students/jane',\n    'closeness': 9.5\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Compression with ArangoClient (Python)\nDESCRIPTION: This snippet shows how to customize request compression settings when initializing the ArangoClient. It sets the minimum size of the request body to be compressed (threshold) to 2 KB (2048 bytes) and the compression level to 8 using the DeflateRequestCompression class. The arango and arango.http modules are required.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/compression.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = ArangoClient(\n    hosts='http://localhost:8529',\n    request_compression=DeflateRequestCompression(\n        threshold=2048,\n        level=8),\n)\n```\n\n----------------------------------------\n\nTITLE: Configure and Manage ArangoDB WAL in Python\nDESCRIPTION: This code snippet demonstrates how to configure, retrieve properties, list transactions, flush, get tick ranges, get the last tick, and tail the ArangoDB Write-Ahead Log (WAL) using the Python arango driver.  It connects to the `_system` database as the root user and uses the `wal` API wrapper to interact with the WAL. Requires the `arango` package.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/wal.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"_system\" database as root user.\nsys_db = client.db('_system', username='root', password='passwd')\n\n# Get the WAL API wrapper.\nwal = sys_db.wal\n\n# Configure WAL properties.\nwal.configure(\n    historic_logs=15,\n    oversized_ops=False,\n    log_size=30000000,\n    reserve_logs=5,\n    throttle_limit=0,\n    throttle_wait=16000\n)\n\n# Retrieve WAL properties.\nwal.properties()\n\n# List WAL transactions.\nwal.transactions()\n\n# Flush WAL with garbage collection.\nwal.flush(garbage_collect=True)\n\n# Get the available ranges of tick values.\nwal.tick_ranges()\n\n# Get the last available tick value.\nwal.last_tick()\n\n# Get recent WAL operations.\nwal.tail()\n```\n\n----------------------------------------\n\nTITLE: Using System's Default CA Bundle with ArangoClient in Python\nDESCRIPTION: This snippet shows how to use the system's default CA bundle when creating an ArangoClient instance. This allows connections to servers using certificates trusted by the system. The `verify_override` parameter is set to `True`.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/certificates.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = ArangoClient(hosts=\"https://localhost:8529\", verify_override=True)\n```\n\n----------------------------------------\n\nTITLE: Graph Traversal AQL Query (AQL)\nDESCRIPTION: This snippet defines an AQL query to perform a graph traversal starting from the 'teachers/jon' vertex within the 'school' graph. It searches outbound vertices up to a depth of 3, utilizing breadth-first search and ensuring unique vertices are globally considered. The query returns the vertex, edge, and path information.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/graph.rst#_snippet_7\n\nLANGUAGE: aql\nCODE:\n```\nFOR v, e, p IN 1..3 OUTBOUND 'teachers/jon' GRAPH 'school'\n    OPTIONS { bfs: true, uniqueVertices: 'global' }\n    RETURN {vertex: v, edge: e, path: p}\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Verification with ArangoClient in Python\nDESCRIPTION: This snippet shows how to disable TLS certificate verification when creating an ArangoClient instance. This allows connections to servers using self-signed certificates.  It sets the `verify_override` parameter to `False`.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/certificates.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = ArangoClient(hosts=\"https://localhost:8529\", verify_override=False)\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing Strategy in ArangoClient\nDESCRIPTION: Illustrates how to configure the load-balancing strategy (roundrobin or random) when initializing the ArangoClient. Requires the `arango` library and a list of hosts. The `host_resolver` parameter is used to specify the load balancing strategy.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/cluster.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\nhosts = ['http://host1:8529', 'http://host2:8529']\n\n# Round-robin\nclient = ArangoClient(hosts=hosts, host_resolver='roundrobin')\n\n# Random\nclient = ArangoClient(hosts=hosts, host_resolver='random')\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Client Initialization in Python\nDESCRIPTION: This snippet initializes the ArangoDB client and connects to a specified database with user credentials. It establishes a connection to the ArangoDB instance and selects the 'test' database for further operations.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/task.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n```\n\n----------------------------------------\n\nTITLE: Installing Python Arango via pip\nDESCRIPTION: This command installs the python-arango package using pip, the Python package installer. The --upgrade flag ensures that the latest version is installed.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install python-arango --upgrade\n```\n\n----------------------------------------\n\nTITLE: Managing Pregel Jobs in ArangoDB with Python\nDESCRIPTION: This code demonstrates how to interact with ArangoDB's Pregel API using the python-arango driver. It covers initializing the ArangoDB client, connecting to a specific database, creating a Pregel job, retrieving its details, and deleting the job. Note that Pregel API is deprecated from ArangoDB 3.12.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/pregel.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as root user.\ndb = client.db('test', username='root', password='passwd')\n\n# Get the Pregel API wrapper.\npregel = db.pregel\n\n# Start a new Pregel job in \"school\" graph.\njob_id = db.pregel.create_job(\n    graph='school',\n    algorithm='pagerank',\n    store=False,\n    max_gss=100,\n    thread_count=1,\n    async_mode=False,\n    result_field='result',\n    algorithm_params={'threshold': 0.000001}\n)\n\n# Retrieve details of a Pregel job by ID.\njob = pregel.job(job_id)\n\n# Delete a Pregel job by ID.\npregel.delete_job(job_id)\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Transaction Logic (JavaScript)\nDESCRIPTION: This is the raw JavaScript code that is executed within the transaction in the previous example. It uses the `require('internal').db` object to interact directly with the database. It saves documents to the 'students' collection based on conditional logic related to the document count within the collection. The javascript code uses parameters passed in from the python arango client.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/transaction.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction () {\n    var db = require('internal').db;\n    db.students.save(params.student1);\n    if (db.students.count() > 1) {\n        db.students.save(params.student2);\n    } else {\n        db.students.save(params.student3);\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Running the pytest Test Suite\nDESCRIPTION: These commands install pytest, clone the python-arango repository, navigate into the repository, and run the integration test suite.  The tests require a running ArangoDB instance and use provided host, port, and password parameters for connecting to it. The '--complete' flag likely indicates a full test run.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/contributing.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n~$ pip install pytest\n~$ git clone https://github.com/arangodb/python-arango.git\n~$ cd python-arango\n~$ py.test --complete --host=127.0.0.1 --port=8529 --passwd=passwd\n```\n\n----------------------------------------\n\nTITLE: Using ArangoDB Error Constants in Python\nDESCRIPTION: This snippet demonstrates how to import the `errno` module from the `arango` package and use its constants to check for specific ArangoDB error codes. It provides example assertions that verify the values of some common error codes such as `NOT_IMPLEMENTED`, `DOCUMENT_REV_BAD`, and `DOCUMENT_NOT_FOUND`.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/errno.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom arango import errno\n\n# Some examples\nassert errno.NOT_IMPLEMENTED == 9\nassert errno.DOCUMENT_REV_BAD == 1239\nassert errno.DOCUMENT_NOT_FOUND == 1202\n```\n\n----------------------------------------\n\nTITLE: Setting User and Superuser Tokens on the Connection Object with python-arango\nDESCRIPTION: This snippet demonstrates setting user and superuser tokens directly on the connection object of an ArangoDB database client. It uses the `set_token` method of the connection object to update the token used for authentication.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/auth.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient()\n\n# Connect to \"test\" database as superuser using the token.\ndb = client.db('test', user_token='token')\n\n# Set the user token on the connection object.\ndb.conn.set_token('new token')\n\n# Connect to \"test\" database as superuser using the token.\ndb = client.db('test', superuser_token='superuser token')\n\n# Set the user token on the connection object.\ndb.conn.set_token('new superuser token')\n```\n\n----------------------------------------\n\nTITLE: Running Flake8 for PEP8 Compliance\nDESCRIPTION: These commands install flake8, clone the python-arango repository, navigate into the repository, and then run flake8 to check the code for PEP8 compliance.  Flake8 will report any style issues it finds in the code.  This helps ensure the code adheres to the Python style guide.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/contributing.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n~$ pip install flake8\n~$ git clone https://github.com/arangodb/python-arango.git\n~$ cd python-arango\n~$ flake8\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Sphinx\nDESCRIPTION: These commands install sphinx and sphinx_rtd_theme, clone the python-arango repository, navigate into the repository, and then build the HTML documentation using Sphinx. The documentation is built from the files in the 'docs' directory, and the output is placed in the 'docs/_build/' directory.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/contributing.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n~$ pip install sphinx sphinx_rtd_theme\n~$ git clone https://github.com/arangodb/python-arango.git\n~$ cd python-arango\n~$ python -m sphinx -b html -W docs docs/_build/  # Open build/index.html in a browser\n```\n\n----------------------------------------\n\nTITLE: Build and Test Documentation Shell\nDESCRIPTION: Builds the documentation for the project using Sphinx. The built documentation can then be viewed in a browser.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython -m sphinx docs docs/_build  # Open docs/_build/index.html in your browser\n```\n\n----------------------------------------\n\nTITLE: Running the pytest Test Suite with Coverage Report\nDESCRIPTION: These commands install coverage, pytest, and pytest-cov, clone the python-arango repository, navigate into the repository, and then run the integration test suite with coverage reporting.  The tests require a running ArangoDB instance and use provided host, port, and password parameters. The `--cov=kq` flag specifies the module or package to measure coverage for.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/contributing.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n~$ pip install coverage pytest pytest-cov\n~$ git clone https://github.com/arangodb/python-arango.git\n~$ cd python-arango\n~$ py.test --complete --host=127.0.0.1 --port=8529 --passwd=passwd --cov=kq\n```\n\n----------------------------------------\n\nTITLE: Resetting to a Clean Slate in Git (dev branch)\nDESCRIPTION: These commands are used to reset your local 'dev' branch to the state of the remote 'origin/dev' branch. This is useful for discarding local changes and starting with a clean, up-to-date copy of the 'dev' branch. It's important to note that running these commands will permanently wipe out any uncommitted or committed changes you have in your local 'dev' branch.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/contributing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n~$ git checkout dev\n~$ git fetch origin\n~$ git reset --hard origin/dev  # THIS WILL WIPE ALL LOCAL CHANGES\n```\n\n----------------------------------------\n\nTITLE: Enable HTTP Request Logging with Requests in Python\nDESCRIPTION: This code snippet demonstrates how to enable detailed logging of HTTP requests and responses when using the `requests` library, which is utilized by `python-arango`. It configures the debug level for HTTP connections and sets the logging level for the `requests.packages.urllib3` logger to DEBUG.  It handles import differences between Python 2 and 3 for the HTTPConnection class.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/logging.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport logging\n\ntry:\n    # For Python 3\n    from http.client import HTTPConnection\nexcept ImportError:\n    # For Python 2\n    from httplib import HTTPConnection\nHTTPConnection.debuglevel = 1\n\nlogging.basicConfig()\nlogging.getLogger().setLevel(logging.DEBUG)\nrequests_log = logging.getLogger(\"requests.packages.urllib3\")\nrequests_log.setLevel(logging.DEBUG)\nrequests_log.propagate = True\n```\n\n----------------------------------------\n\nTITLE: Setup Dev Environment Shell\nDESCRIPTION: Sets up the development environment for contributing to the project. It installs development dependencies, and installs pre-commit hooks to ensure code quality and consistency.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/your/repository/fork  # Activate venv if you have one (recommended)\npip install -e .[dev]      # Install dev dependencies (e.g. black, mypy, pre-commit)\npre-commit install         # Install git pre-commit hooks\n```\n\n----------------------------------------\n\nTITLE: Installing Python-Arango\nDESCRIPTION: This command installs or upgrades the python-arango package using pip. It ensures that you have the latest version of the driver installed in your Python environment.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/index.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n~$ pip install python-arango --upgrade\n```\n\n----------------------------------------\n\nTITLE: Start ArangoDB Instance Locally Shell\nDESCRIPTION: Starts a local ArangoDB instance using the provided starter script. This requires Docker to be installed and configured.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./starter.sh  # Requires docker\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests with Coverage Shell\nDESCRIPTION: Runs the unit tests with coverage reporting. The coverage report is generated in HTML format for easy browsing.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npytest --cov=arango --cov-report=html  # Open htmlcov/index.html in your browser\n```\n\n----------------------------------------\n\nTITLE: Suppressing urllib3 Warnings for Insecure Connections in Python\nDESCRIPTION: This snippet demonstrates how to suppress warnings issued by the `urllib3` library when connecting to servers with self-signed certificates after disabling TLS verification. It imports the `requests` library and uses it to disable warnings from `urllib3`.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/certificates.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nrequests.packages.urllib3.disable_warnings()\n```\n\n----------------------------------------\n\nTITLE: JavaScript Command for ArangoDB Task\nDESCRIPTION: This Javascript snippet is used in the create_task method. It defines a simple task function that takes parameters and prints them to the ArangoDB log using the `@arangodb` module. This shows a basic example of a task command that interacts with ArangoDB.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/task.rst#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar task = function(params){\n var db = require('@arangodb');\n db.print(params);\n}\ntask(params);\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Document Example\nDESCRIPTION: This is an example of a valid ArangoDB document with fields like '_id', '_key', '_rev', and other custom fields. It showcases the structure of a document within a 'students' collection.\nSOURCE: https://github.com/arangodb/python-arango/blob/main/docs/document.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    '_id': 'students/bruce',\n    '_key': 'bruce',\n    '_rev': '_Wm3dzEi--_',\n    'first_name': 'Bruce',\n    'last_name': 'Wayne',\n    'address': {\n        'street' : '1007 Mountain Dr.',\n        'city': 'Gotham',\n        'state': 'NJ'\n    },\n    'is_rich': True,\n    'friends': ['robin', 'gordon']\n}\n```"
  }
]