[
  {
    "owner": "loonghao",
    "repo": "photoshop-python-api",
    "content": "TITLE: Creating a 'Hello, World!' document in Photoshop (Python)\nDESCRIPTION: This script creates a new Photoshop document, adds a text layer with the text 'Hello, World!', sets its properties (position, size, color), and saves the document as a JPEG file.  It depends on the `photoshop.api` module and uses COM to communicate with Photoshop. The script also includes an alert to show where the file was saved.\nSOURCE: https://github.com/loonghao/photoshop-python-api/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport photoshop.api as ps\napp = ps.Application()\ndoc = app.documents.add()\nnew_doc = doc.artLayers.add()\ntext_color = ps.SolidColor()\ntext_color.rgb.red = 0\ntext_color.rgb.green = 255\ntext_color.rgb.blue = 0\nnew_text_layer = new_doc\nnew_text_layer.kind = ps.LayerKind.TextLayer\nnew_text_layer.textItem.contents = 'Hello, World!'\nnew_text_layer.textItem.position = [160, 167]\nnew_text_layer.textItem.size = 40\nnew_text_layer.textItem.color = text_color\noptions = ps.JPEGSaveOptions(quality=5)\n# # save to jpg\njpg = 'd:/hello_world.jpg'\ndoc.saveAs(jpg, options, asCopy=True)\napp.doJavaScript(f'alert(\"save to jpg: {jpg}\")')\n```\n\n----------------------------------------\n\nTITLE: Creating a 'Hello, World!' document using Session (Python)\nDESCRIPTION: This script demonstrates using the `Session` context manager to interact with Photoshop. It creates a new document, adds a text layer, sets its properties, and saves it as a JPEG, similar to the previous example.  The `Session` context manager ensures proper cleanup and simplifies the code.  It depends on the `photoshop` module.\nSOURCE: https://github.com/loonghao/photoshop-python-api/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom photoshop import Session\n\n\nwith Session(action=\"new_document\") as ps:\n    doc = ps.active_document\n    text_color = ps.SolidColor()\n    text_color.rgb.green = 255\n    new_text_layer = doc.artLayers.add()\n    new_text_layer.kind = ps.LayerKind.TextLayer\n    new_text_layer.textItem.contents = 'Hello, World!'\n    new_text_layer.textItem.position = [160, 167]\n    new_text_layer.textItem.size = 40\n    new_text_layer.textItem.color = text_color\n    options = ps.JPEGSaveOptions(quality=5)\n    jpg = 'd:/hello_world.jpg'\n    doc.saveAs(jpg, options, asCopy=True)\n    ps.app.doJavaScript(f'alert(\"save to jpg: {jpg}\")')\n```\n\n----------------------------------------\n\nTITLE: Installing Photoshop Python API with pip\nDESCRIPTION: This command installs the `photoshop_python_api` package using pip, the Python package installer. This package allows you to control Adobe Photoshop from Python scripts using COM on Windows.\nSOURCE: https://github.com/loonghao/photoshop-python-api/blob/main/README.md#_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\npip install photoshop_python_api\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Photoshop Python API\nDESCRIPTION: This bash script outlines the steps to clone the Photoshop Python API repository, navigate into the project directory, install the necessary dependencies using Poetry, install pre-commit hooks, and run tests.\nSOURCE: https://github.com/loonghao/photoshop-python-api/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository\ngit clone https://github.com/loonghao/photoshop-python-api.git\ncd photoshop-python-api\n\n# Install dependencies with Poetry\npoetry install\n\n# Install pre-commit hooks\npre-commit install\n\n# Run tests\npytest\n```\n\n----------------------------------------\n\nTITLE: Get Photoshop Program ID using PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the Photoshop program ID from the Windows registry. It searches for registry keys matching \"Photoshop.Application\" under HKLM:\\SOFTWARE\\Classes and filters for those containing a CLSID subkey.  The PSChildName (the program ID) is then displayed.\nSOURCE: https://github.com/loonghao/photoshop-python-api/blob/main/README.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ChildItem \"HKLM:\\SOFTWARE\\Classes\" |\n  ?{ ($_.PSChildName -match \"^[a-z]+\\.[a-z]+(\\.\\d+)?$\") -and ($_.GetSubKeyNames() -contains \"CLSID\") } |\n  ?{ $_.PSChildName -match \"Photoshop.Application\" } | ft PSChildName\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Message Format\nDESCRIPTION: Illustrates the conventional commit message format used in the project. It consists of a type, scope, description, optional body, and optional footer(s). Common types include feat, fix, docs, style, refactor, test, and chore.\nSOURCE: https://github.com/loonghao/photoshop-python-api/blob/main/README.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n<type>(<scope>): <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\n----------------------------------------\n\nTITLE: Listing MkDocs Dependencies\nDESCRIPTION: This code snippet defines the dependencies used by the MkDocs project. Each line specifies a package name and its version constraint. These packages are crucial for the project to build documentation, handle markdown, and provide extra functionalities like autolinking and minification.\nSOURCE: https://github.com/loonghao/photoshop-python-api/blob/main/docs/requirements.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nstringcase\nmkdocs-material = \"^8.2.5\"\nmkdocstrings-python = \"^0.6.6\"\nmkdocs-pymdownx-material-extras = \"^1.6\"\nmkdocs-same-dir = \"^0.1.1\"\nmkdocs-include-markdown-plugin = \"^3.3.0\"\nmkdocs-gen-files = \"^0.3.4\"\nmkdocs-autolinks-plugin = \"^0.4.0\"\nmkdocs-minify-plugin = \"^0.5.0\"\nmkdocs-git-revision-date-localized-plugin = \"^1.0.0\"\nmkdocs-literate-nav\n```"
  }
]