[
  {
    "owner": "officedev",
    "repo": "office-js-docs-pr",
    "content": "TITLE: Creating a Table in Excel using Office.js - JavaScript\nDESCRIPTION: Creates a new table with headers in the \"Sample\" worksheet and populates it with data. Utilizes the Excel JavaScript API through Office.js, and auto-fits columns and rows if ExcelApi 1.2 is available. Requires the Office.js Excel API and expects the \"Sample\" sheet to exist. Inputs: none; Output: a populated and formatted Excel table named \"ExpensesTable\". Cannot specify the table name at creation; set it after adding the table.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n    let expensesTable = sheet.tables.add(\\\"A1:D1\\\", true /*hasHeaders*/);\\n    expensesTable.name = \\\"ExpensesTable\\\";\\n\\n    expensesTable.getHeaderRowRange().values = [[\\\"Date\\\", \\\"Merchant\\\", \\\"Category\\\", \\\"Amount\\\"]];\\n\\n    expensesTable.rows.add(null /*add rows to the end of the table*/, [\\n        [\\\"1/1/2017\\\", \\\"The Phone Company\\\", \\\"Communications\\\", \\\"$120\\\"],\\n        [\\\"1/2/2017\\\", \\\"Northwind Electric Cars\\\", \\\"Transportation\\\", \\\"$142\\\"],\\n        [\\\"1/5/2017\\\", \\\"Best For You Organics Company\\\", \\\"Groceries\\\", \\\"$27\\\"],\\n        [\\\"1/10/2017\\\", \\\"Coho Vineyard\\\", \\\"Restaurant\\\", \\\"$33\\\"],\\n        [\\\"1/11/2017\\\", \\\"Bellows College\\\", \\\"Education\\\", \\\"$350\\\"],\\n        [\\\"1/15/2017\\\", \\\"Trey Research\\\", \\\"Other\\\", \\\"$135\\\"],\\n        [\\\"1/15/2017\\\", \\\"Best For You Organics Company\\\", \\\"Groceries\\\", \\\"$97\\\"]\\n    ]);\\n\\n    if (Office.context.requirements.isSetSupported(\\\"ExcelApi\\\", \\\"1.2\\\")) {\\n        sheet.getUsedRange().format.autofitColumns();\\n        sheet.getUsedRange().format.autofitRows();\\n    }\\n\\n    sheet.activate();\\n\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to an Excel Table using Office JS\nDESCRIPTION: This snippet shows how to apply filters to specific columns ('Category' and 'Amount') within the 'ExpensesTable'. It uses `columns.getItem().filter.apply()` to set a value filter on the 'Category' column (showing only 'Restaurant' and 'Groceries') and a dynamic filter on the 'Amount' column (showing values below the average). The `context.sync()` executes both queued filter commands.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    // Queue a command to apply a filter on the Category column.\n    let categoryFilter = expensesTable.columns.getItem(\"Category\").filter;\n    categoryFilter.apply({\n      filterOn: Excel.FilterOn.values,\n      values: [\"Restaurant\", \"Groceries\"]\n    });\n\n    // Queue a command to apply a filter on the Amount column.\n    let amountFilter = expensesTable.columns.getItem(\"Amount\").filter;\n    amountFilter.apply({\n      filterOn: Excel.FilterOn.dynamic,\n      dynamicCriteria: Excel.DynamicFilterCriteria.belowAverage\n    });\n\n    // Sync to run the queued commands in Excel.\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring JSON Metadata for Multiple Excel Custom Functions\nDESCRIPTION: This JSON snippet demonstrates the overall structure for defining multiple custom functions within a single metadata file. It includes the `$schema` property pointing to the official Office JS custom functions schema and a `functions` array. Each element in the `functions` array is an object defining the metadata (like `id` and `name`) for a specific custom function, such as \"ADD\" and \"INCREMENT\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/office-js/custom-functions.schema.json\",\n  \"functions\": [\n    {\n      \"id\": \"ADD\",\n      \"name\": \"ADD\",\n      ...\n    },\n    {\n      \"id\": \"INCREMENT\",\n      \"name\": \"INCREMENT\",\n      ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PivotTable Using Range Objects - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet shows how to create a PivotTable using actual Range objects as both the data source and destination within specific worksheets. The data is selected from worksheet 'DataWorksheet' (A1:E21) and the PivotTable is created on 'PivotWorksheet' at cell A2. Requires that both worksheets and the targeted cell range exist; expects proper permissions and loaded Office.js. On success, a new PivotTable is created at the specified destination.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Create a PivotTable named \"Farm Sales\" on a worksheet called \"PivotWorksheet\" at cell A2\n    // the data comes from the worksheet \"DataWorksheet\" across the range A1:E21.\n    let rangeToAnalyze = context.workbook.worksheets.getItem(\"DataWorksheet\").getRange(\"A1:E21\");\n    let rangeToPlacePivot = context.workbook.worksheets.getItem(\"PivotWorksheet\").getRange(\"A2\");\n    context.workbook.worksheets.getItem(\"PivotWorksheet\").pivotTables.add(\n      \"Farm Sales\", rangeToAnalyze, rangeToPlacePivot);\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Worksheet Protection - Excel JavaScript API (JavaScript)\nDESCRIPTION: Loads the worksheet protection status and, if unprotected, applies protection using the protect() method. No options or password are specified (default full protection). Requires Excel JavaScript API context. Demonstrates safe checking of the protection state before applying protection. Inputs: active worksheet; Outputs: worksheet is protected.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.load(\"protection/protected\");\n    await context.sync();\n\n    if (!activeSheet.protection.protected) {\n        activeSheet.protection.protect();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appointment Start or End Time Asynchronously in Compose Forms with Office.js - JavaScript\nDESCRIPTION: This snippet shows how to asynchronously retrieve the start or end time of an appointment being composed in Outlook using the Office JavaScript API. It demonstrates the correct usage of 'getAsync' on the item object's 'start' and 'end' properties, passing a callback to receive the result. This pattern is required in compose forms to handle concurrent edits by the user and the add-in. The snippet assumes Office.js is loaded and the mailbox item is available.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-time-of-an-appointment.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nOffice.context.mailbox.item.start.getAsync(callback);\nOffice.context.mailbox.item.end.getAsync(callback);\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Summing Grand Totals from Excel PivotTable Layout using Office JS API\nDESCRIPTION: This snippet demonstrates how to get data, specifically the grand totals, from a PivotTable using its layout. It retrieves the \"Farm Sales\" PivotTable, gets its data body range via `pivotTable.layout.getDataBodyRange()`, finds the last row of that range (which contains the grand totals), loads its address, and then calculates the sum of these totals, placing the result in cell E30 using a SUM formula. Requires an existing PivotTable named \"Farm Sales\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // Get the totals for each data hierarchy from the layout.\n    let range = pivotTable.layout.getDataBodyRange();\n    let grandTotalRange = range.getLastRow();\n    grandTotalRange.load(\"address\");\n    await context.sync();\n\n    // Sum the totals from the PivotTable data hierarchies and place them in a new range, outside of the PivotTable.\n    let masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange(\"E30\");\n    masterTotalRange.formulas = [[\"=SUM(\" + grandTotalRange.address + \")\"]];\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Including Office JS Library from CDN in HTML Head\nDESCRIPTION: This HTML snippet shows how to reference the core Office JavaScript API library from the Microsoft CDN within the `<head>` section of an add-in's web page. Including this script tag is essential to enable the use of Office JavaScript APIs. The `src` attribute points to the standard production library. For preview APIs, the URL `https://appsforoffice.microsoft.com/lib/beta/hosted/office.js` should be used instead.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/office-js-access-library.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    ...\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Suboptimal and Optimized Range Access in Loops with Excel JavaScript API - JavaScript\nDESCRIPTION: These snippets compare two approaches for accessing worksheet ranges within a loop to highlight the performance benefits of minimizing repeated API object retrievals. The first (marked as poor strategy) retrieves the active worksheet on each iteration in a for loop, causing excessive API calls. The second (good strategy) retrieves the active worksheet outside the loop and only calls getRangeByIndexes inside. Both snippets require the Office.js Excel API and target situations involving high-volume row-level operations (e.g., with 7500 iterations). Inputs: assumed loop count and context; outputs: creation of range or row objects. Moving static retrievals outside loops significantly reduces payload size and improves performance.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/performance.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DO NOT USE THIS CODE SAMPLE. This sample shows a poor performance strategy. \\nasync function run() {\\n  await Excel.run(async (context) => {\\n    let ranges = [];\\n    \\n    // This sample retrieves the worksheet every time the loop runs, which is bad for performance.\\n    for (let i = 0; i < 7500; i++) {\\n      let rangeByIndex = context.workbook.worksheets.getActiveWorksheet().getRangeByIndexes(i, 1, 1, 1);\\n    }    \\n    await context.sync();\\n  });\\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This code sample shows a good performance strategy.\\nasync function run() {\\n  await Excel.run(async (context) => {\\n    let ranges = [];\\n    // Retrieve the worksheet outside the loop.\\n    let worksheet = context.workbook.worksheets.getActiveWorksheet(); \\n\\n    // Only process the necessary values inside the loop.\\n    for (let i = 0; i < 7500; i++) {\\n      let rangeByIndex = worksheet.getRangeByIndexes(i, 1, 1, 1);\\n    }    \\n    await context.sync();\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata for an Excel Comment using JavaScript\nDESCRIPTION: This snippet shows how to access metadata associated with a comment, such as the author's email, name, and the creation date. It retrieves a comment by cell address, loads the required properties (`authorEmail`, `authorName`, `creationDate`) using `comment.load()`, synchronizes the context, and then prints the loaded information.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Get the comment at cell A2 in the \"MyWorksheet\" worksheet.\n    let comment = context.workbook.comments.getItemByCell(\"MyWorksheet!A2\");\n\n    // Load and print the following values.\n    comment.load([\"authorEmail\", \"authorName\", \"creationDate\"]);\n    await context.sync();\n    \n    console.log(`${comment.creationDate.toDateString()}: ${comment.authorName} (${comment.authorEmail})`);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Requirement Set Version Support in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `Office.context.requirements.isSetSupported` method to check if the host Office application supports a specific minimum version of an API requirement set (e.g., 'WordApi' version '1.2'). It allows the add-in to conditionally execute code that relies on features within that set or provide an alternative experience if the set is not supported. The version must be passed as a string.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-api-requirements-runtime.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nif (Office.context.requirements.isSetSupported(\"WordApi\", \"1.2\")) {\n   // Code that uses API members from the WordApi 1.2 requirement set.\n} else {\n   // Provide diminished experience here.\n   // For example, run alternate code when the user's Word is\n   // volume-licensed perpetual Word 2016 (which doesn't support WordApi 1.2).\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates in a Range Using Excel JavaScript API (JavaScript)\nDESCRIPTION: This code sample demonstrates how to use the Excel JavaScript API to remove duplicate rows in a specified range within a worksheet. It utilizes the Range.removeDuplicates method, taking an array of zero-based column indices to check for duplicates as well as a boolean indicating if the first row is a header and should be ignored. Dependencies: Office.js library and a worksheet named 'Sample' with data in the 'B2:D11' range. Inputs: column indices array ([0]) and a boolean (true for header). Outputs: RemoveDuplicatesResult object with counts of removed and remaining unique rows. Console logs display the removal results. The code must be run in the context of an Excel Add-in with proper worksheet setup.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-remove-duplicates.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n    let range = sheet.getRange(\\\"B2:D11\\\");\\n\\n    let deleteResult = range.removeDuplicates([0],true);\\n    deleteResult.load();\\n\\n    await context.sync();\\n\\n    console.log(deleteResult.removed + \\\" entries with duplicate names removed.\\\");\\n    console.log(deleteResult.uniqueRemaining + \\\" entries with unique names remain in the range.\\\");\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getIDToken in Yo Office Add-in with ES6 Modules (JavaScript)\nDESCRIPTION: This JavaScript ES6 module is for Yo Office-generated Office Add-ins. It imports jwt-decode, attaches a click event to the 'Get ID Token' button upon Office host readiness, and implements async logic to request and decode an access token, presenting user claims in the UI. Error handling provides feedback for failed SSO attempts. Required dependencies include Office.js, OfficeRuntime, and the jwt-decode npm package.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/use-sso-to-get-office-signed-in-user-token.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport jwt_decode from \\\"jwt-decode\\\";\\n\\nOffice.onReady((info) => {\\n  if (info.host === Office.HostType.Excel) {\\n    document.getElementById(\\\"getIDToken\\\").onclick = getIDToken;\\n  }\\n});\\n\\nasync function getIDToken() {\\n  try {\\n    let userTokenEncoded = await OfficeRuntime.auth.getAccessToken({\\n      allowSignInPrompt: true,\\n    });\\n    let userToken = jwt_decode(userTokenEncoded);\\n    document.getElementById(\\\"userInfo\\\").innerHTML =\\n      \\\"name: \\\" +\\n      userToken.name +\\n      \\\"<br>email: \\\" +\\n      userToken.preferred_username +\\n      \\\"<br>id: \\\" +\\n      userToken.oid;\\n    console.log(userToken);\\n  } catch (error) {\\n    document.getElementById(\\\"userInfo\\\").innerHTML =\\n      \\\"An error occurred. <br>Name: \\\" +\\n      error.name +\\n      \\\"<br>Code: \\\" +\\n      error.code +\\n      \\\"<br>Message: \\\" +\\n      error.message;\\n    console.log(error);\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Executing batched operations with Excel.run in JavaScript\nDESCRIPTION: This snippet demonstrates using the Excel JavaScript API's run function to define a batch of operations, which are queued and sent to the workbook. It uses a context object passed into the callback to interact with Office objects, and illustrates asynchronous error handling and automatic resource management. Dependencies include Office.js library availability in the add-in, and the workspace must support the Excel application-specific APIs. No specific parameters are required, but context is passed by the run function; inputs and outputs depend on the API calls within the batch.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nExcel.run(function (context) {\n    // Add your Excel JS API calls here that will be batched and sent to the workbook.\n    console.log('Your code goes here.');\n}).catch(function (error) {\n    // Catch and log any errors that occur within `Excel.run`.\n    console.log('error: ' + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifest Resources for Custom Functions Metadata - Office Add-ins (XML)\nDESCRIPTION: This XML snippet demonstrates how to connect a manifest file to a JSON metadata and related resources, enabling Excel to recognize and register custom functions for an add-in. The <Resources> section declares URLs for the JSON metadata, JavaScript bundle, and HTML files as well as a string for the namespace. Ensure these resource files are accessible at the specified URLs when deploying the add-in. This configuration is required in any add-in not scaffolded with the Yeoman generator.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Resources>\\n    <bt:Urls>\\n        <bt:Url id=\\\"JSON-URL\\\" DefaultValue=\\\"https://subdomain.contoso.com/config/customfunctions.json\\\"/>\\n        <bt:Url id=\\\"JS-URL\\\" DefaultValue=\\\"https://subdomain.contoso.com/dist/win32/ship/index.win32.bundle\\\"/>\\n            <bt:Url id=\\\"HTML-URL\\\" DefaultValue=\\\"https://subdomain.contoso.com/index.html\\\"/>\\n    </bt:Urls>\\n    <bt:ShortStrings>\\n        <bt:String id=\\\"namespace\\\" DefaultValue=\\\"CONTOSO\\\"/>\\n    </bt:ShortStrings>\\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating an Excel Table from JSON Data using Office JS\nDESCRIPTION: This JavaScript snippet demonstrates how to create a table named 'ExpensesTable' in the 'Sample' worksheet of an Excel workbook using the Office JS API. It sets the table headers and populates the table with data processed from a JSON array (`transactions`). Finally, it auto-fits the columns and rows of the used range in the sheet and activates the sheet. The code runs within the `Excel.run` context, ensuring proper interaction with the Excel application.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let expensesTable = sheet.tables.add(\"A1:D1\", true /*hasHeaders*/);\n    expensesTable.name = \"ExpensesTable\";\n    expensesTable.getHeaderRowRange().values = [[\"Date\", \"Merchant\", \"Category\", \"Amount\"]];\n\n    let transactions = [\n      {\n        \"DATE\": \"1/1/2017\",\n        \"MERCHANT\": \"The Phone Company\",\n        \"CATEGORY\": \"Communications\",\n        \"AMOUNT\": \"$120\"\n      },\n      {\n        \"DATE\": \"1/1/2017\",\n        \"MERCHANT\": \"Southridge Video\",\n        \"CATEGORY\": \"Entertainment\",\n        \"AMOUNT\": \"$40\"\n      }\n    ];\n\n    let newData = transactions.map(item =>\n        [item.DATE, item.MERCHANT, item.CATEGORY, item.AMOUNT]);\n\n    expensesTable.rows.add(null, newData);\n\n    sheet.getUsedRange().format.autofitColumns();\n    sheet.getUsedRange().format.autofitRows();\n\n    sheet.activate();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Formatting Sales Data in an Excel Worksheet using JavaScript\nDESCRIPTION: This snippet demonstrates how to populate and format cells within an Excel worksheet using the Excel JavaScript API. It gets the active worksheet, defines header and data ranges, sets their values, applies background and font colors to headers, inserts formulas for calculations, and formats the results as currency. The `Excel.run` pattern and `context.sync()` are used for managing asynchronous operations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-core-concepts.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Create the headers and format them to stand out.\n    let headers = [\n      [\"Product\", \"Quantity\", \"Unit Price\", \"Totals\"]\n    ];\n    let headerRange = sheet.getRange(\"B2:E2\");\n    headerRange.values = headers;\n    headerRange.format.fill.color = \"#4472C4\";\n    headerRange.format.font.color = \"white\";\n\n    // Create the product data rows.\n    let productData = [\n      [\"Almonds\", 6, 7.5],\n      [\"Coffee\", 20, 34.5],\n      [\"Chocolate\", 10, 9.56],\n    ];\n    let dataRange = sheet.getRange(\"B3:D5\");\n    dataRange.values = productData;\n\n    // Create the formulas to total the amounts sold.\n    let totalFormulas = [\n      [\"=C3 * D3\"],\n      [\"=C4 * D4\"],\n      [\"=C5 * D5\"],\n      [\"=SUM(E3:E5)\"]\n    ];\n    let totalRange = sheet.getRange(\"E3:E6\");\n    totalRange.formulas = totalFormulas;\n    totalRange.format.font.bold = true;\n\n    // Display the totals as US dollar amounts.\n    totalRange.numberFormat = [[\"$0.00\"]];\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Additional Authentication Required for Microsoft Graph (JavaScript)\nDESCRIPTION: This JavaScript snippet handles cases where Microsoft Graph requires additional forms of authentication, such as two-factor authentication (2FA). It analyzes details in the server's JSON error response for a specific error code ('AADSTS50076'), extracts the required 'Claims', and invokes 'getUserFileNames' with an 'authChallenge' object to prompt the user for all necessary authentication. It expects an 'errorResponse' object with 'responseJSON', a 'getUserFileNames' function, and works as part of server-side error handling logic. Inputs are the error response; the code triggers another authentication attempt when additional claims are detected.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Check if Microsoft Graph requires an additional form of authentication. Have the Office host \n// get a new token using the Claims string, which tells Microsoft identity to prompt the user for all \n// required forms of authentication.\nconst errorDetails = JSON.parse(errorResponse.responseJSON.value.details);\nif (errorDetails) {\n    if (errorDetails.error.message.includes(\"AADSTS50076\")) {\n        const claims = errorDetails.message.Claims;\n        const claimsAsString = JSON.stringify(claims);\n        getUserFileNames({ authChallenge: claimsAsString });\n        return;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating Input and Throwing Custom Excel Errors - TypeScript\nDESCRIPTION: This snippet implements a custom function that validates a U.S. zip code using a regular expression. If the zip code is valid, it returns a city name by calling another function; otherwise, it constructs and throws a CustomFunctions.Error with the #VALUE! error and a custom message. Dependencies include access to the CustomFunctions global and the cityLookup function, and it expects a string parameter. A proper Excel error is returned to the spreadsheet if validation fails.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-errors.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Gets a city name for the given U.S. zip code.\n* @customfunction\n* @param {string} zipCode\n* @returns The city of the zip code.\n*/\nfunction getCity(zipCode: string): string {\n  let isValidZip = /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(zipCode);\n  if (isValidZip) return cityLookup(zipCode);\n  let error = new CustomFunctions.Error(CustomFunctions.ErrorCode.invalidValue, \"Please provide a valid U.S. zip code.\");\n  throw error;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Visio Diagram and Displaying Selected Shape Text - HTML/JavaScript\nDESCRIPTION: This snippet demonstrates how to embed a Visio diagram into a SharePoint Online page using the Visio Web Embedded JavaScript API, and how to extract and display the text of the currently selected shape. It requires the 'visio-web-embedded.js' script to be available via CDN and assumes the user will provide a valid Visio file embed URL. The key parameters include an input for the Visio file URL, buttons for initializing the embedded frame and retrieving selected shape text, and a textarea for displaying results. On initialization, the frame loads the diagram in embed view mode; the shape selection handler iterates over all shapes, retrieves the selected shape text, and properly handles initialization or runtime errors. The global 'session' is used for API communication. Inputs include the Visio diagram URL and user interaction; output is the selected shape's text. Limitations: Only works for embed view mode and with diagrams accessible from the provided URL.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/reference/overview/visio-javascript-reference-overview.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src='https://appsforoffice.microsoft.com/embedded/1.0/visio-web-embedded.js' type='text/javascript'></script>\\n\\nEnter Visio File Url:<br/>\\n<script language=\\\"javascript\\\">\\ndocument.write(\\\"<input type='text' id='fileUrl' size='120'/>\\\");\\ndocument.write(\\\"<input type='button' value='InitEmbeddedFrame' onclick='initEmbeddedFrame()' />\\\");\\ndocument.write(\\\"<br />\\\");\\ndocument.write(\\\"<input type='button' value='SelectedShapeText' onclick='getSelectedShapeText()' />\\\");\\ndocument.write(\\\"<textarea id='ResultOutput' style='width:350px;height:60px'> </textarea>\\\");\\ndocument.write(\\\"<div id='iframeHost' />\\\");\\n\\nlet session; // Global variable to store the session and pass it afterwards in Visio.run()\\nlet textArea;\\n// Loads the Visio application and Initializes communication between developer frame and Visio online frame\\nfunction initEmbeddedFrame() {\\n    textArea = document.getElementById('ResultOutput');\\n    let url = document.getElementById('fileUrl').value;\\n    if (!url) {\\n        window.alert(\\\"File URL should not be empty\\\");\\n    }\\n    // APIs are enabled for EmbedView action only.\\n    url = url.replace(\\\"action=view\\\",\\\"action=embedview\\\");\\n    url = url.replace(\\\"action=interactivepreview\\\",\\\"action=embedview\\\");\\n    url = url.replace(\\\"action=default\\\",\\\"action=embedview\\\");\\n    url = url.replace(\\\"action=edit\\\",\\\"action=embedview\\\");\\n  \\n    session = new OfficeExtension.EmbeddedSession(url, { id: \\\"embed-iframe\\\",container: document.getElementById(\\\"iframeHost\\\") });\\n    return session.init().then(function () {\\n        // Initialization is successful\\n        textArea.value  = \\\"Initialization is successful\\\";\\n    });\\n}\\n\\n// Code for getting selected Shape Text using the shapes collection object\\nfunction getSelectedShapeText() {\\n    Visio.run(session, function (context) {\\n        const page = context.document.getActivePage();\\n        const shapes = page.shapes;\\n        shapes.load();\\n        return context.sync().then(function () {\\n            textArea.value = \\\"Please select a Shape in the Diagram\\\";\\n            for(let i=0; i<shapes.items.length;i++) {\\n                let shape = shapes.items[i];\\n                if ( shape.select == true) {\\n                    textArea.value = shape.text;\\n                    return;\\n                }\\n            }\\n        });\\n    }).catch(function(error) {\\n        textArea.value = \\\"Error: \\\";\\n        if (error instanceof OfficeExtension.Error) {\\n            textArea.value += \\\"Debug info: \\\" + JSON.stringify(error.debugInfo);\\n        }\\n    });\\n}\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Complete insertTextIntoRange Function in JavaScript\nDESCRIPTION: This snippet shows the final 'insertTextIntoRange' function after all placeholders ('TODO1', 'TODO2', 'TODO3') have been replaced. It demonstrates the complete flow: getting the selection, inserting text, loading the range's text property, syncing, inserting a paragraph using the loaded text, and syncing again. It highlights the pattern of write operations, followed by load/sync for reading, then potentially more writes/syncs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertTextIntoRange() {\n    await Word.run(async (context) => {\n\n        const doc = context.document;\n        const originalRange = doc.getSelection();\n        originalRange.insertText(\" (M365)\", Word.InsertLocation.end);\n\n        originalRange.load(\"text\");\n        await context.sync();\n\n        doc.body.insertParagraph(\"Original range: \" + originalRange.text, Word.InsertLocation.end);\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Key Structure for Office Add-in Auto-Installation (Registry Format)\nDESCRIPTION: This snippet shows the generic structure of the Windows Registry key required to register an Office web add-in for automatic installation. Placeholders `{{OfficeApplication}}`, `{{add-inName}}`, and `{{assetId}}` must be replaced with the specific Office application (Word, Excel, or PowerPoint), the add-in's name, and its AppSource asset ID, respectively. This key signals to Office 16.0+ to install the specified add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_6\n\nLANGUAGE: reg\nCODE:\n```\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Wef\\AutoInstallAddins\\{{OfficeApplication}}\\{{add-inName}}] \n\"AssetIds\"=\"{{assetId}}\"\n```\n\n----------------------------------------\n\nTITLE: Finding All Matching Cells with Worksheet.findAll in JavaScript\nDESCRIPTION: Illustrates using the `Worksheet.findAll` method to locate all cells within the \"Sample\" worksheet containing the exact string \"Complete\". The search is configured to match the entire cell content (`completeMatch: true`) and ignore case (`matchCase: false`). Upon finding the ranges, their background color is set to green. Note that `findAll` will throw an error if the string is not found; `findAllOrNullObject` is suggested as an alternative for graceful handling.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let foundRanges = sheet.findAll(\"Complete\", {\n        completeMatch: true, /* Match the whole cell value, not any part of the text. */\n        matchCase: false /* Make the search case-insensitive. */\n    });\n\n    await context.sync();\n    foundRanges.format.fill.color = \"green\";\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Checkboxes to Table Column using Excel JavaScript API\nDESCRIPTION: This snippet demonstrates how to convert Boolean values within a specific table column into interactive checkboxes. It accesses the active worksheet, finds the table named 'FruitTable', retrieves the data body range of the 'Analysis' column, and then sets the `control` property of that range to `Excel.CellControlType.checkbox`. Requires an existing table named 'FruitTable' with an 'Analysis' column containing Boolean values.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-checkboxes.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // This code sample shows how to add checkboxes to a table.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Get the \"Analysis\" column in the table, without the header.\n    const range = sheet.tables.getItem(\"FruitTable\").columns.getItem(\"Analysis\").getDataBodyRange();\n\n    // Change the Boolean values in the range to checkboxes.\n    range.control = {\n      type: Excel.CellControlType.checkbox\n    };\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Recipients Asynchronously in Compose Forms - JavaScript\nDESCRIPTION: This snippet shows how to asynchronously get the Cc recipients using the getAsync method on a compose mail item in Office.js. It highlights the need to use asynchronous APIs in compose forms to safely retrieve recipient data and requires a callback function to process the results. Dependencies: Office.js API; only available in compose mode. Input: mail item in compose form; Output: callback receives resolved recipient data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-set-or-add-recipients.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.mailbox.item.cc.getAsync(callback);\n```\n\n----------------------------------------\n\nTITLE: Defining a Repeating Single Value Parameter in JavaScript\nDESCRIPTION: This JavaScript custom function `addSingleValue` uses a repeating single value parameter. The JSDoc `@param {number[]} singleValue` indicates that `singleValue` accepts a variable number of single numeric arguments (like `ADD(1, B2, 3)`). These arguments are passed as a one-dimensional array. The function calculates the sum of these values.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @customfunction\n * @param {number[]} singleValue An array of numbers that are repeating parameters.\n */\nfunction addSingleValue(singleValue) {\n  let total = 0;\n  singleValue.forEach(value => {\n    total += value;\n  })\n\n  return total;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Value for a Single Cell - Excel JavaScript API - JavaScript\nDESCRIPTION: Sets a numeric value (5) into cell C3 of the worksheet named 'Sample', then adjusts column widths to fit the new content. Requires the Office/Excel JavaScript API and an initialized context. Inputs: target worksheet and cell reference. Output: C3 is updated and columns autofit. Functionality is scoped to a single asynchronous context via Excel.run.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let range = sheet.getRange(\"C3\");\n    range.values = [[ 5 ]];\n    range.format.autofitColumns();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Highlighting Formula Dependents in Excel JavaScript API (JavaScript)\nDESCRIPTION: This code sample finds all dependent and direct dependent cells for the currently selected cell in Excel using the JavaScript API. It loads and highlights all dependent cells in orange and direct dependent cells in yellow by iterating over the fetched `WorkbookRangeAreas`. The snippet relies on the Excel JavaScript API within an Office Add-in context, and its primary input is the active cell; addresses are logged to the console and highlights are applied. If no dependents are found, an error is thrown; outputs include updated cell formatting and console logs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-precedents-dependents.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This code sample shows how to find and highlight the dependents \n// and direct dependents of the currently selected cell.\nawait Excel.run(async (context) => {\n    let range = context.workbook.getActiveCell();\n    // Dependents are all cells that contain formulas that refer to other cells.\n    let dependents = range.getDependents();  \n    // Direct dependents are the child cells, or the first succeeding group of cells in a sequence of cells that refer to other cells.\n    let directDependents = range.getDirectDependents();\n\n    range.load(\"address\");\n    dependents.areas.load(\"address\");    \n    directDependents.areas.load(\"address\");\n    \n    await context.sync();\n\n    console.log(`All dependent cells of ${range.address}:`);\n    \n    // Use the dependents API to loop through all dependents of the active cell.\n    for (let i = 0; i < dependents.areas.items.length; i++) {\n      // Highlight and print out the addresses of all dependent cells.\n      dependents.areas.items[i].format.fill.color = \"Orange\";\n      console.log(`  ${dependents.areas.items[i].address}`);\n    }\n\n    console.log(`Direct dependent cells of ${range.address}:`);\n\n    // Use the direct dependents API to loop through direct dependents of the active cell.\n    for (let i = 0; i < directDependents.areas.items.length; i++) {\n      // Highlight and print the address of each dependent cell.\n      directDependents.areas.items[i].format.fill.color = \"Yellow\";\n      console.log(`  ${directDependents.areas.items[i].address}`);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Data Hierarchies to Excel PivotTable using Office JS API\nDESCRIPTION: This snippet adds row and data hierarchies to an existing PivotTable named \"Farm Sales\" on the active worksheet. It retrieves the PivotTable object and then uses the `add` method on `rowHierarchies` and `dataHierarchies` collections to assign \"Farm\" and \"Type\" as rows, and \"Crates Sold at Farm\" and \"Crates Sold Wholesale\" as the data to be aggregated (summed by default). Requires an existing PivotTable named \"Farm Sales\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // \"Farm\" and \"Type\" are the hierarchies on which the aggregation is based.\n    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem(\"Farm\"));\n    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem(\"Type\"));\n\n    // \"Crates Sold at Farm\" and \"Crates Sold Wholesale\" are the hierarchies\n    // that will have their data aggregated (summed in this case).\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold at Farm\"));\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold Wholesale\"));\n\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Getting the Subject Using Office.js in Outlook Add-ins - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to asynchronously retrieve the subject of a message or appointment being composed in an Outlook add-in using the Office.js API. It waits for Office.js to be ready, accesses the relevant item via Office.context.mailbox.item, and uses the getAsync method to fetch the subject with a callback for error handling and result display. Dependencies include Office.js and running within an Outlook compose add-in context. Input is the current compose item; output is the subject string displayed in a page element with id 'message'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-subject.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet item;\\n\\n// Confirms that the Office.js library is loaded.\\nOffice.onReady((info) => {\\n    if (info.host === Office.HostType.Outlook) {\\n        item = Office.context.mailbox.item;\\n        getSubject();\\n    }\\n});\\n\\n// Gets the subject of the item that the user is composing.\\nfunction getSubject() {\\n    item.subject.getAsync((asyncResult) => {\\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\\n            write(asyncResult.error.message);\\n            return;\\n        }\\n\\n        // Display the subject on the page.\\n        write(`The subject is: ${asyncResult.value}`);\\n    });\\n}\\n\\n\\n// Writes to a div with id=\\\"message\\\" on the page.\\nfunction write(message) {\\n    document.getElementById(\\\"message\\\").innerText += message; \\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Web API Endpoint with ASP.NET Authorize Attribute – C#\nDESCRIPTION: This ASP.NET snippet illustrates how to secure a RESTful API endpoint so that only requests bearing a valid access token are processed. The [Authorize] attribute ensures that unauthorized requests are blocked and errors are returned when access tokens are missing or invalid. The sample defines an asynchronous Get method for the api/data route, which should acquire relevant data and construct an HTTP response. The method expects authentication context to be provided by middleware and is designed to interact with Office Add-in or other authenticated clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/overview-authn-authz.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    [Authorize]\n    // GET api/data\n    public async Task<HttpResponseMessage> Get()\n    {\n        //... obtain and return data to the client-side code...\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Async createTable and tryCatch Helper Functions in JavaScript\nDESCRIPTION: Defines two asynchronous JavaScript functions. `createTable` uses `Excel.run` to batch operations against the Excel workbook, including placeholders for table creation, population, and formatting, followed by `context.sync()` to execute them. `tryCatch` is a reusable helper function that executes a given callback function and catches/logs any potential errors, particularly useful for handling Office JavaScript API errors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createTable() {\n    await Excel.run(async (context) => {\n\n        // TODO1: Queue table creation logic here.\n\n        // TODO2: Queue commands to populate the table with data.\n\n        // TODO3: Queue commands to format the table.\n\n        await context.sync();\n    });\n}\n\n/** Default helper for invoking an action and handling errors. */\nasync function tryCatch(callback) {\n    try {\n        await callback();\n    } catch (error) {\n        // Note: In a production add-in, you'd want to notify the user through your add-in's UI.\n        console.error(error);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click Event - JavaScript\nDESCRIPTION: This JavaScript snippet, intended for `taskpane.js` within the `Office.onReady` function, assigns a click event handler to the 'freeze-header' button. When clicked, it calls the `freezeHeader` function, wrapped in a `tryCatch` block for error handling.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"freeze-header\").onclick = () => tryCatch(freezeHeader);\n```\n\n----------------------------------------\n\nTITLE: Applying Color Scale Conditional Formatting - Excel JavaScript API - JavaScript\nDESCRIPTION: This example snippet uses the Excel JavaScript API to apply a three-color scale conditional format to an Excel range. The background color of each cell is determined by its value within the range, using blue (lowest), yellow (midpoint at 50 percent), and red (highest) as endpoints. This requires the range, type of conditional format, and correctly formatted criteria object as inputs, with Office.js as a dependency. The asynchronous function must be executed within an Excel add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats.add(\n          Excel.ConditionalFormatType.colorScale\n    );\n    \n    // Color the backgrounds of the cells from blue to yellow to red based on value.\n    const criteria = {\n          minimum: {\n               formula: null,\n               type: Excel.ConditionalFormatColorCriterionType.lowestValue,\n               color: \"blue\"\n          },\n          midpoint: {\n               formula: \"50\",\n               type: Excel.ConditionalFormatColorCriterionType.percent,\n               color: \"yellow\"\n          },\n          maximum: {\n               formula: null,\n               type: Excel.ConditionalFormatColorCriterionType.highestValue,\n               color: \"red\"\n          }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing OData JSON Response for Project Data in JavaScript\nDESCRIPTION: Defines the `parseODataResult` function, which takes the JSON response string from the OData service and the current project's GUID as input. It deserializes the JSON string into a JavaScript object using `Sys.Serialization.JavaScriptSerializer.deserialize` (requires ASP.NET AJAX client library or similar). The function then iterates through the array of projects (`res.d.results`), calculates the sum of `ProjectCost` and `ProjectWork` across all projects, and identifies the index (`myProjectIndex`) of the currently active project by comparing GUIDs. This processed data is intended for calculating averages and displaying comparison values in the add-in's UI, though the display logic itself is not fully shown in this snippet.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Calculate the average values of actual cost, cost, work, and percent complete\n// for all projects, and compare with the values for the current project.\nfunction parseODataResult(oDataResult, currentProjectGuid) {\n    // Deserialize the JSON string into a JavaScript object.\n    let res = Sys.Serialization.JavaScriptSerializer.deserialize(oDataResult);\n    let len = res.d.results.length;\n    let projActualCost = 0;\n    let projCost = 0;\n    let projWork = 0;\n    let projPercentCompleted = 0;\n    let myProjectIndex = -1;\n    for (i = 0; i < len; i++) {\n        // If the current project GUID matches the GUID from the OData query,  \n        // store the project index.\n        if (currentProjectGuid.toLocaleLowerCase() == res.d.results[i].ProjectId) {\n            myProjectIndex = i;\n        }\n        projCost += Number(res.d.results[i].ProjectCost);\n        projWork += Number(res.d.results[i].ProjectWork);\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing All AutoFilters from Worksheet - Excel JavaScript API (JavaScript)\nDESCRIPTION: Removes all applied AutoFilters from the active worksheet by calling the remove method. Requires Office.js and an Excel JavaScript API context. No parameters needed; affects all filters present on the worksheet. Call context.sync() to apply the change within Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This method removes all AutoFilters from the active worksheet.\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.autoFilter.remove();\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing repeated proxy object creation and efficient property setting in Excel JavaScript API\nDESCRIPTION: This multi-part snippet contrasts two approaches to interacting with a worksheet range: (1) repeatedly calling getRange to create multiple proxy objects and set properties, which is less efficient, and (2) creating a single proxy object or using the set method for batching property assignments, which optimizes performance. Requires Excel's JavaScript API, with a worksheet object in context. The snippet demonstrates that batching assignments on a single proxy object yields better performance, especially with many operations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// BAD: Repeated calls to .getRange() to create the same proxy object.\nworksheet.getRange(\"A1\").format.fill.color = \"red\";\nworksheet.getRange(\"A1\").numberFormat = \"0.00%\";\nworksheet.getRange(\"A1\").values = [[1]];\n\n// GOOD: Create the range proxy object once and assign to a variable.\nconst range = worksheet.getRange(\"A1\");\nrange.format.fill.color = \"red\";\nrange.numberFormat = \"0.00%\";\nrange.values = [[1]];\n\n// ALSO GOOD: Use a \"set\" method to immediately set all the properties\n// without even needing to create a variable!\nworksheet.getRange(\"A1\").set({\n    numberFormat: [[\"0.00%\"]],\n    values: [[1]],\n    format: {\n        fill: {\n            color: \"red\"\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Functions Metadata for Excel Add-ins (JSON)\nDESCRIPTION: This JSON snippet provides a complete metadata definition for several custom Excel functions, specifying properties such as ID, name, description, result type, and parameters. It demonstrates configuration flags for special type handling at the root level and illustrates how to describe function options such as streaming and cancelation. Dependencies include correct referencing from the manifest and proper deployment of the JSON file at the configured endpoint. Each function must have a unique ID, name, result definition, and an array of parameter definitions, complying with Excel's requirements for add-in function metadata.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"allowCustomDataForDataTypeAny\\\": true,\\n  \\\"allowErrorForDataTypeAny\\\": true,\\n  \\\"functions\\\": [\\n    {\\n      \\\"id\\\": \\\"ADD\\\",\\n      \\\"name\\\": \\\"ADD\\\",\\n      \\\"description\\\": \\\"Add two numbers\\\",\\n      \\\"helpUrl\\\": \\\"http://www.contoso.com/help\\\",\\n      \\\"result\\\": {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"dimensionality\\\": \\\"scalar\\\"\\n      },\\n      \\\"parameters\\\": [\\n        {\\n          \\\"name\\\": \\\"first\\\",\\n          \\\"description\\\": \\\"first number to add\\\",\\n          \\\"type\\\": \\\"number\\\",\\n          \\\"dimensionality\\\": \\\"scalar\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"second\\\",\\n          \\\"description\\\": \\\"second number to add\\\",\\n          \\\"type\\\": \\\"number\\\",\\n          \\\"dimensionality\\\": \\\"scalar\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"id\\\": \\\"GETDAY\\\",\\n      \\\"name\\\": \\\"GETDAY\\\",\\n      \\\"description\\\": \\\"Get the day of the week\\\",\\n      \\\"helpUrl\\\": \\\"http://www.contoso.com/help\\\",\\n      \\\"result\\\": {\\n        \\\"dimensionality\\\": \\\"scalar\\\"\\n      },\\n      \\\"parameters\\\": []\\n    },\\n    {\\n      \\\"id\\\": \\\"INCREMENTVALUE\\\",\\n      \\\"name\\\": \\\"INCREMENTVALUE\\\",\\n      \\\"description\\\": \\\"Count up from zero\\\",\\n      \\\"helpUrl\\\": \\\"http://www.contoso.com/help\\\",\\n      \\\"result\\\": {\\n        \\\"dimensionality\\\": \\\"scalar\\\"\\n      },\\n      \\\"parameters\\\": [\\n        {\\n          \\\"name\\\": \\\"increment\\\",\\n          \\\"description\\\": \\\"the number to be added each time\\\",\\n          \\\"type\\\": \\\"number\\\",\\n          \\\"dimensionality\\\": \\\"scalar\\\"\\n        }\\n      ],\\n      \\\"options\\\": {\\n        \\\"stream\\\": true,\\n        \\\"cancelable\\\": true\\n      }\\n    },\\n    {\\n      \\\"id\\\": \\\"SECONDHIGHEST\\\",\\n      \\\"name\\\": \\\"SECONDHIGHEST\\\",\\n      \\\"description\\\": \\\"Get the second highest number from a range\\\",\\n      \\\"helpUrl\\\": \\\"http://www.contoso.com/help\\\",\\n      \\\"result\\\": {\\n        \\\"dimensionality\\\": \\\"scalar\\\"\\n      },\\n      \\\"parameters\\\": [\\n        {\\n          \\\"name\\\": \\\"range\\\",\\n          \\\"description\\\": \\\"the input range\\\",\\n          \\\"type\\\": \\\"number\\\",\\n          \\\"dimensionality\\\": \\\"matrix\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing an Invalid Number Error Using CustomFunctions.Error - TypeScript\nDESCRIPTION: This snippet shows how to throw a CustomFunctions.Error with the ErrorCode.invalidNumber, causing Excel to display the #NUM! error. No parameters are required and no additional dependencies other than CustomFunctions.Error are needed. This approach allows for granular error management within custom Excel functions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-errors.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet error = new CustomFunctions.Error(CustomFunctions.ErrorCode.invalidNumber);\nthrow error;\n\n```\n\n----------------------------------------\n\nTITLE: Editing the Content of an Excel Comment using JavaScript\nDESCRIPTION: This snippet demonstrates how to modify the content of the initial comment in a thread. It retrieves the first comment using `getItemAt(0)` and updates its `content` property with the new text. The changes are saved with `context.sync()`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Edit the first comment in the workbook.\n    let comment = context.workbook.comments.getItemAt(0);\n    comment.content = \"PLEASE add headers here.\";\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Highlighting Formula Precedents in Excel JavaScript API (JavaScript)\nDESCRIPTION: This code sample finds all precedent and direct precedent cells for the currently selected cell in Excel using the JavaScript API. It loads and highlights all precedent cells in orange and direct precedent cells in yellow by iterating over the fetched `WorkbookRangeAreas`. Dependencies include the Excel JavaScript API and the need for an active Excel workbook context; the snippet is to be run inside an Office Add-in. The main input is the active cell, and the output is the visual highlight of predecessor cells with console logging of addresses; errors are thrown if no precedents exist.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-precedents-dependents.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This code sample shows how to find and highlight the precedents \n// and direct precedents of the currently selected cell.\nawait Excel.run(async (context) => {\n  let range = context.workbook.getActiveCell();\n  // Precedents are all cells that provide data to the selected formula.\n  let precedents = range.getPrecedents();\n  // Direct precedents are the parent cells, or the first preceding group of cells that provide data to the selected formula.    \n  let directPrecedents = range.getDirectPrecedents();\n\n  range.load(\"address\");\n  precedents.areas.load(\"address\");\n  directPrecedents.areas.load(\"address\");\n  \n  await context.sync();\n\n  console.log(`All precedent cells of ${range.address}:`);\n  \n  // Use the precedents API to loop through all precedents of the active cell.\n  for (let i = 0; i < precedents.areas.items.length; i++) {\n    // Highlight and print out the address of all precedent cells.\n    precedents.areas.items[i].format.fill.color = \"Orange\";\n    console.log(`  ${precedents.areas.items[i].address}`);\n  }\n\n  console.log(`Direct precedent cells of ${range.address}:`);\n\n  // Use the direct precedents API to loop through direct precedents of the active cell.\n  for (let i = 0; i < directPrecedents.areas.items.length; i++) {\n    // Highlight and print out the address of each direct precedent cell.\n    directPrecedents.areas.items[i].format.fill.color = \"Yellow\";\n    console.log(`  ${directPrecedents.areas.items[i].address}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Between Operator for Decimal Data Validation in Excel using JavaScript\nDESCRIPTION: This code applies a decimal data validation rule to the range \"B2:C5\". It employs the `decimal` rule type and the `between` operator, requiring both `formula1` (set to 0) and `formula2` (set to 100) to define the bounds of the valid range. Consequently, only decimal numbers between 0 and 100 (inclusive) will be accepted in the target cells. This example requires the Excel JavaScript API library.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-data-validation.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let range = sheet.getRange(\"B2:C5\");\n\n    range.dataValidation.rule = {\n            decimal: {\n                formula1: 0,\n                formula2: 100,\n              operator: Excel.DataValidationOperator.between\n            }\n        };\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Converting a Range to an Excel Table using JavaScript\nDESCRIPTION: This code snippet shows how to create an Excel table from a specified range within the active worksheet using the Excel JavaScript API. It accesses the active sheet, uses the `tables.add` method with the range address (\"B2:E5\") and a boolean indicating headers are present, and then synchronizes the changes using `context.sync()`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-core-concepts.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.tables.add(\"B2:E5\", true);\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting SSO Access Token and Calling REST API (Office.js, JavaScript)\nDESCRIPTION: Implements the logic in the getUserFileNames function to retrieve an SSO access token via Office.js, then calls the application server's REST API and handles errors. Depends on Office.js and a backend endpoint (/api/files), with required parameters including options for token acquisition and the access token itself. Receives user file names as output, and gracefully processes both client-side and exception errors. Constraints include correct configuration of authentication and proper error handling logic.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n   let fileNameList = null;\\ntry {\\n    let accessToken = await Office.auth.getAccessToken(options);\\n    fileNameList = await callRESTApi(\"/api/files\", accessToken);\\n}\\ncatch (exception) {\\n    if (exception.code) {\\n        handleClientSideErrors(exception);\\n    }\\n    else {\\n        showMessage(\"EXCEPTION: \" + exception);\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Domain Message from Dialog to Parent with Specific Origin (JavaScript)\nDESCRIPTION: This snippet demonstrates sending a message from an Office Add-in dialog back to its parent host page when they might reside in different domains. It uses `Office.context.ui.messageParent` with the `DialogMessageOptions` parameter, explicitly setting the `targetOrigin` property to the expected domain of the parent runtime (`https://resource.contoso.com`). This is necessary for cross-domain communication and requires the Dialog Origin 1.1 requirement set.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.ui.messageParent(\"Some message\", { targetOrigin: \"https://resource.contoso.com\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph REST API Endpoint Pattern - HTTP\nDESCRIPTION: This code snippet provides the template for constructing a Microsoft Graph REST API endpoint URL used when making HTTP requests from an Outlook Add-in. The URL pattern allows customization by specifying the API version (such as v1.0 or beta), resource type (like user, group, or site), and query parameters to filter or modify the response. No additional dependencies are necessary, but a valid access token must be included in real requests, and the placeholder values must be replaced by actual endpoint and query details.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/microsoft-graph.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://graph.microsoft.com/[version]/[resource]?[query_parameters]\n```\n\n----------------------------------------\n\nTITLE: Getting the First Worksheet with Excel JavaScript API\nDESCRIPTION: Retrieves the first worksheet in the workbook's sequence using the `getFirst()` method. It loads the worksheet's 'name' property and logs it to the console.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let firstSheet = context.workbook.worksheets.getFirst();\n    firstSheet.load(\"name\");\n\n    await context.sync();\n    console.log(`The name of the first worksheet is \"${firstSheet.name}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Associating an Excel Custom Function in JavaScript\nDESCRIPTION: Shows the JavaScript implementation of a simple custom function `add` that sums two numbers. It uses JSDoc comments for metadata and `CustomFunctions.associate` to link the function implementation to its corresponding metadata ID (\"ADD\") defined in a separate JSON file. This association is crucial for Excel to recognize and execute the function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Add two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nfunction add(first, second) {\n  return first + second;\n}\n\nCustomFunctions.associate(\"ADD\", add);\n```\n\n----------------------------------------\n\nTITLE: Appending HTML Disclaimer on Send with Office JS (JavaScript)\nDESCRIPTION: Defines the `appendDisclaimerOnSend` JavaScript function for an Outlook add-in. This function retrieves the current body format using `getTypeAsync` and then uses `appendOnSendAsync` to add a predefined HTML disclaimer string to the end of the email body just before sending. It includes error handling for async operations and calls `event.completed()` upon successful scheduling of the append operation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/append-on-send.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction appendDisclaimerOnSend(event) { \n  // Calls the getTypeAsync method and passes its returned value to the options.coercionType parameter of the appendOnSendAsync call.\n  Office.context.mailbox.item.body.getTypeAsync(\n    {\n      asyncContext: event\n    }, \n    (asyncResult) => {\n      if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n        console.log(asyncResult.error.message);\n        return;\n    }\n    \n    // Sets the disclaimer to be appended to the body of the message on send.\n    const bodyFormat = asyncResult.value;\n    const disclaimer =\n      '<p style = \"color:blue\"> <i>This and subsequent emails on the same topic are for discussion and information purposes only. Only those matters set out in a fully executed agreement are legally binding. This email may contain confidential information and should not be shared with any third party without the prior written agreement of Contoso. If you are not the intended recipient, take no action and contact the sender immediately.<br><br>Contoso Limited (company number 01624297) is a company registered in England and Wales whose registered office is at Contoso Campus, Thames Valley Park, Reading RG6 1WG</i></p>';  \n    \n    Office.context.mailbox.item.body.appendOnSendAsync(\n      disclaimer,\n      {\n        asyncContext: asyncResult.asyncContext,\n        coercionType: bodyFormat\n      },\n      (asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n          console.log(asyncResult.error.message);\n          return;\n        }\n\n        console.log(\"The disclaimer will be appended when the mail item is sent.\");\n        asyncResult.asyncContext.completed();\n      }\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Excel Range using JavaScript API\nDESCRIPTION: This snippet shows how to retrieve a range that has been previously named (\"MyRange\") from the worksheet named \"Sample\". It uses the `sheet.getRange()` method, passing the defined name as the argument. The code then loads the `address` property of the named range and logs it. An Excel context and a pre-existing named range \"MyRange\" on the \"Sample\" sheet are prerequisites.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-get.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let range = sheet.getRange(\"MyRange\");\n    range.load(\"address\");\n    await context.sync();\n\n    console.log(`The address of the range \"MyRange\" is \"${range.address}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Efficient Table Data Import with Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet illustrates best practices for importing large datasets into an Excel table efficiently using the JavaScript API. It first writes data into a worksheet range (using range.values), then creates a table over the predefined range using worksheet.tables.add(). The sample demonstrates modifying the table by adding a new row via getRowsBelow and updating an existing row. Prerequisites: Office.js Excel API, worksheet with accessible sheet name. Input: preconstructed multi-dimensional arrays for cell data; output: updated range and table objects reflecting the data. Avoids performance pitfalls of TableRowCollection.add for initial bulk data import.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/performance.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sheet1\\\");\\n    // Write the data into the range first.\\n    let range = sheet.getRange(\\\"A1:B3\\\");\\n    range.values = [[\\\"Key\\\", \\\"Value\\\"], [\\\"A\\\", 1], [\\\"B\\\", 2]];\\n\\n    // Create the table over the range\\n    let table = sheet.tables.add('A1:B3', true);\\n    table.name = \\\"Example\\\";\\n    await context.sync();\\n\\n\\n    // Insert a new row to the table\\n    table.getDataBodyRange().getRowsBelow(1).values = [[\\\"C\\\", 3]];\\n    // Change a existing row value\\n    table.getDataBodyRange().getRow(1).values = [[\\\"D\\\", 4]];\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Workbook Settings with Excel JavaScript API - JavaScript\nDESCRIPTION: Demonstrates how to add and retrieve a custom setting in the context of an Excel workbook using Office.js. The snippet relies on the Excel JavaScript API and should be run within an Excel add-in environment. The key parameters include the setting name (\\\"NeedsReview\\\"), and the code logs the value after synchronizing the context. Input is the setting key and value; output is a console log of the setting's value. Requires Excel.js context and async/await support.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let settings = context.workbook.settings;\n    settings.add(\"NeedsReview\", true);\n    let needsReview = settings.getItem(\"NeedsReview\");\n    needsReview.load(\"value\");\n\n    await context.sync();\n    console.log(\"Workbook needs review : \" + needsReview.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Range Values with an Array using Excel JavaScript API in JavaScript\nDESCRIPTION: This code sample illustrates an optimal strategy for range updates by creating an array of values, filling it in a loop, and setting the full array to a range in one operation. It greatly improves performance and minimizes API calls using Office.js for Excel in JavaScript. Inputs are the size and values of the array (10000 rows), and the output is a batch update to the specified Excel range. This is the recommended pattern for efficient large range assignments.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/performance.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This code sample shows a good performance strategy.\\nasync function run() {\\n  await Excel.run(async (context) => {\\n    const worksheet = context.workbook.worksheets.getActiveWorksheet();    \\n    // Create an array.\\n    const array = new Array(10000);\\n\\n    // Set the values of the array inside the loop.\\n    for (let i = 0; i < 10000; i++) {\\n      array[i] = [1];\\n    }\\n\\n    // Pass the array values to a range outside the loop. \\n    let range = worksheet.getRange(\\\"A1:A10000\\\");\\n    range.values = array;\\n    await context.sync();\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Angular within Office.initialize\nDESCRIPTION: Demonstrates the correct way to bootstrap an Angular application within an Office Add-in. The Angular bootstrapping process using `platformBrowserDynamic().bootstrapModule(AppModule)` is placed inside the `Office.initialize` function handler. This ensures that the Office JavaScript libraries are fully initialized before the Angular application starts, which is mandatory for add-in functionality.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/add-ins-with-angular2.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\nOffice.initialize = function () {\n  const platform = platformBrowserDynamic();\n  platform.bootstrapModule(AppModule);\n};\n```\n\n----------------------------------------\n\nTITLE: Nesting VLOOKUP and SUM Functions in Excel JavaScript API\nDESCRIPTION: This snippet illustrates how to nest multiple Excel worksheet function calls using the JavaScript API. It performs two separate `VLOOKUP` calls to find the number of wrenches sold in November (column 2) and December (column 3) within the specified range (\"A1:D4\"). The results of these `VLOOKUP` calls are directly passed as arguments to the `SUM` function. Only the final result of the `SUM` function (`sumOfTwoLookups`) needs to have its 'value' property loaded before being accessed after context synchronization.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheet-functions.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let range = context.workbook.worksheets.getItem(\"Sheet1\").getRange(\"A1:D4\");\n    let sumOfTwoLookups = context.workbook.functions.sum(\n        context.workbook.functions.vlookup(\"Wrench\", range, 2, false),\n        context.workbook.functions.vlookup(\"Wrench\", range, 3, false)\n    );\n    sumOfTwoLookups.load('value');\n\n    await context.sync();\n    console.log(' Number of wrenches sold in November and December = ' + sumOfTwoLookups.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and accessing Excel Range address with async/await in JavaScript\nDESCRIPTION: This snippet demonstrates using async/await with Excel.run in the JavaScript API to create a proxy object for a selected range, explicitly load its address property, and synchronize queued commands using context.sync(). It prints the loaded address after synchronization, highlighting that properties must be loaded first. Dependencies include async/await support (ES2017+), Office.js, and workbook context. The main input is the context; output is the logged address property. Attempting to read unloaded properties before sync will fail.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const selectedRange = context.workbook.getSelectedRange();\n    selectedRange.load('address');\n    await context.sync();\n    console.log('The selected range is: ' + selectedRange.address);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking API Requirements with Office.onReady().then() (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the Promise returned by `Office.onReady()`. It chains a `.then()` method to execute code after Office.js is ready. The example checks if the host application (Excel) supports a specific requirement set ('ExcelApi', '1.7') before proceeding.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/initialize-add-in.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.onReady()\n    .then(function() {\n        if (!Office.context.requirements.isSetSupported('ExcelApi', '1.7')) {\n            console.log(\"Sorry, this add-in only works with newer versions of Excel.\");\n        }\n    });\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Email Body Content and Controlling Send Action (JavaScript)\nDESCRIPTION: This JavaScript function, `checkBodyOnlyOnSendCallBack`, is the callback executed after retrieving the email body. It uses a regular expression to check if the body contains any predefined blocked words. If blocked words are found, it displays an error notification using `mailboxItem.notificationMessages.addAsync` and prevents the email from being sent by calling `asyncResult.asyncContext.completed({ allowEvent: false })`. Otherwise, it allows the email to be sent by calling `asyncResult.asyncContext.completed({ allowEvent: true })`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n// Determine whether the body contains a specific set of blocked words. If it contains the blocked words, block email from being sent. Otherwise allow sending.\n// <param name=\"asyncResult\">ItemSend event passed from the calling function.</param>\nfunction checkBodyOnlyOnSendCallBack(asyncResult) {\n    const listOfBlockedWords = new Array(\"blockedword\", \"blockedword1\", \"blockedword2\");\n    const wordExpression = listOfBlockedWords.join('|');\n\n    // \\b to perform a \"whole words only\" search using a regular expression in the form of \\bword\\b.\n    // i to perform case-insensitive search.\n    const regexCheck = new RegExp('\\\\b(' + wordExpression + ')\\\\b', 'i');\n    const checkBody = regexCheck.test(asyncResult.value);\n\n    if (checkBody) {\n        mailboxItem.notificationMessages.addAsync('NoSend', { type: 'errorMessage', message: 'Blocked words have been found in the body of this email. Please remove them.' });\n        // Block send.\n        asyncResult.asyncContext.completed({ allowEvent: false });\n    }\n\n    // Allow send.\n    asyncResult.asyncContext.completed({ allowEvent: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Pane Notification Function in JavaScript\nDESCRIPTION: This JavaScript snippet, intended for `taskpane.js`, defines an exported function `showNotification`. It targets an HTML element with the ID `item-subject` within the task pane and updates its `innerHTML` content with the provided `message` string. This allows other parts of the add-in, like custom functions, to display status messages in the task pane.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-get-started.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport function showNotification(message){\n  const label = document.getElementById(\"item-subject\");\n  label.innerHTML = message;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Excel Table using Office JavaScript API\nDESCRIPTION: This JavaScript snippet, intended to replace `TODO1` inside the `createTable` function's `Excel.run` block, demonstrates how to create a table in Excel. It gets the active worksheet, then uses the `add` method on the worksheet's `tables` collection to create a new table spanning cells A1:D1, specifying that it has headers. Finally, it assigns a unique name 'ExpensesTable' to the newly created table.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\nconst expensesTable = currentWorksheet.tables.add(\"A1:D1\", true /*hasHeaders*/);\nexpensesTable.name = \"ExpensesTable\";\n```\n\n----------------------------------------\n\nTITLE: Setting the Selected Range in Excel using JavaScript API\nDESCRIPTION: This snippet demonstrates how to select a specific range (\"B2:E6\") in the currently active worksheet using the Excel JavaScript API. It retrieves the active worksheet, gets the specified range object, and then calls the `select()` method on that range.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let range = sheet.getRange(\"B2:E6\");\n\n    range.select();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Example Admin Consent URI for Microsoft Graph Scopes - HTML\nDESCRIPTION: This example shows a fully constructed admin consent URL with a sample 'client_id', a set of required scopes ('offline_access', 'openid', 'profile', 'user.read', 'files.read'), and a local redirect URI endpoint. The URL is used by tenant admins to grant required consent for an Office Add-in before deployment. The code must be updated with actual 'client_id' and production 'redirect_uri' as appropriate for real deployments.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-nested-app-auth-add-in.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nhttps://login.microsoftonline.com/organizations/v2.0/adminconsent?client_id=63e62b68-c5c7-48f9-82bf-8c41d5637b49&scope=offline_access openid profile user.read files.read&redirect_uri=https://localhost:3000/consentRedirect.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Application Information in Office Add-in Manifest (XML)\nDESCRIPTION: Defines the WebApplicationInfo section in the Office Add-in manifest XML, specifying the application client ID, resource URI, and required scopes for SSO integration. Required dependencies are a valid Application ID from Azure AD and properly set scopes for Graph API access. This configuration determines the add-in's authentication flow and triggers consent dialogs as necessary, with inputs being client IDs and outputs affecting the add-in's SSO capabilities. Limitations include ensuring correct values for all placeholders and matching these with Azure AD app registrations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<WebApplicationInfo>\\n\\t<Id>Enter_client_ID_here</Id>\\n\\t<Resource>api://localhost:44355/Enter_client_ID_here</Resource>\\n\\t<Scopes>\\n            <Scope>Files.Read</Scope>\\n\\t\t\t<Scope>profile</Scope>\\n            <Scope>openid</Scope>\\n\\t</Scopes>\\n</WebApplicationInfo>\\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining and Parsing Access Tokens Using OfficeRuntime API - JavaScript\nDESCRIPTION: This JavaScript function illustrates how to acquire an Azure AD access token using OfficeRuntime.auth.getAccessToken in an Office Add-in, then decode and extract user identity claims via the jwt-decode library. Dependencies include Office.js and the jwt-decode package from npmjs.com. The function expects OfficeRuntime context and handles token errors, specifically error code 13003 for unsupported account types. Inputs include no arguments, outputs are parsed token claims (name, preferred_username, oid) logged to the console. SSO support and error handling are noted limitations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/sso-in-office-add-ins.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getUserData() {\\n    try {\\n        let userTokenEncoded = await OfficeRuntime.auth.getAccessToken();\\n        let userToken = jwt_decode(userTokenEncoded); // Using the https://www.npmjs.com/package/jwt-decode library.\\n        console.log(userToken.name); // user name\\n        console.log(userToken.preferred_username); // email\\n        console.log(userToken.oid); // user id     \\n    }\\n    catch (exception) {\\n        if (exception.code === 13003) {\\n            // SSO is not supported for domain user accounts, only\\n            // Microsoft 365 Education or work account, or a Microsoft account.\\n        } else {\\n            // Handle error\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Removing Paragraph Changed Event Handlers in Office.js (TypeScript)\nDESCRIPTION: Implements registering and deregistering an onParagraphChanged event handler in a Word document using TypeScript with Office.js. The registerEventHandler function adds the handler, handleChange logs the event type, and deregisterEventHandler removes the handler using the original RequestContext. Requires Office.js, Word.run, TypeScript types, and appropriate permissions. Parameters include the eventContext, event, and context objects. This code demonstrates tracking event handler lifecycle and emphasizes the need to retain the creation context for deregistration; eventContext must be properly managed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/word-add-ins-events.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet eventContext;\n\nasync function registerEventHandler() {\n  await Word.run(async (context) => {\n    eventContext = context.document.onParagraphChanged.add(handleChange);\n\n    await context.sync();\n    console.log(\"Event handler successfully registered for onParagraphChanged event in the document.\");\n  });\n}\n\nasync function handleChange(event: Word.ParagraphChangedEventArgs) {\n  await Word.run(async (context) => {\n    await context.sync();\n    console.log(`${event.type} event was detected.`);\n  });\n}\n\nasync function deregisterEventHandler() {\n  // The `RequestContext` used to create the event handler is needed to remove it.\n  // In this example, `eventContext` is being used to keep track of that context.\n  await Word.run(eventContext.context, async (context) => {\n    eventContext.remove();\n    await context.sync();\n    \n    eventContext = null;\n    console.log(\"Removed event handler that was tracking content changes in paragraphs.\");\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Worksheet Data Changes with onChanged Event in JavaScript\nDESCRIPTION: Defines an event handler function `onWorksheetChanged` for the `Worksheet.onChanged` event. This function, when triggered by a change in a worksheet cell's value or format, uses the `WorksheetChangedEventArgs` object to access details about the change (address, value before/after, type before/after) and logs them to the console within an `Excel.run` context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// This function would be used as an event handler for the Worksheet.onChanged event.\nfunction onWorksheetChanged(eventArgs) {\n    Excel.run(function (context) {\n        let details = eventArgs.details;\n        let address = eventArgs.address;\n\n        // Print the before and after types and values to the console.\n        console.log(`Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),`\n            + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);\n        return context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Worksheet with Excel JavaScript API\nDESCRIPTION: Adds a new worksheet named \"Sample\" to the workbook using the `add()` method on the worksheets collection. The new worksheet is added after all existing worksheets by default. The code then loads the new sheet's 'name' and 'position' properties and logs them.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n\n    let sheet = sheets.add(\"Sample\");\n    sheet.load(\"name, position\");\n\n    await context.sync();\n    console.log(`Added worksheet named \"${sheet.name}\" in position ${sheet.position}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting the Current Item ID for REST APIs in JavaScript\nDESCRIPTION: Shows how to retrieve the current Outlook item's ID, ensuring it is properly formatted for the REST API. The function checks the Office.context.mailbox.diagnostics.hostName to determine if conversion is needed; in Outlook on iOS, the itemId is already REST-formatted, while in other clients, Office.context.mailbox.convertToRestId is used along with the required REST API version. Depends on Office.js and the availability of the item context. Returns a string identifier compatible with REST URLs and is required to avoid issues with non-URL safe characters from legacy ID formats.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/use-rest-api.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getItemRestId() {\\n  if (Office.context.mailbox.diagnostics.hostName === 'OutlookIOS') {\\n    // itemId is already REST-formatted.\\n    return Office.context.mailbox.item.itemId;\\n  } else {\\n    // Convert to an item ID for API v2.0.\\n    return Office.context.mailbox.convertToRestId(\\n      Office.context.mailbox.item.itemId,\\n      Office.MailboxEnums.RestVersion.v2_0\\n    );\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Content Control in Word with Office.js (JavaScript)\nDESCRIPTION: This code captures the current text selection and creates a content control around it, configuring properties like title, tag, appearance, and color using Office.js. Assumes the user has selected the phrase to be wrapped. The tag can later be used to reference this control programmatically. Word JavaScript API is required. Input is the active selection; output is a visible content control applied to that range.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nconst serviceNameRange = context.document.getSelection();\nconst serviceNameContentControl = serviceNameRange.insertContentControl();\nserviceNameContentControl.title = \\\"Service Name\\\";\nserviceNameContentControl.tag = \\\"serviceName\\\";\nserviceNameContentControl.appearance = \\\"Tags\\\";\nserviceNameContentControl.color = \\\"blue\\\";\n```\n\n----------------------------------------\n\nTITLE: Persisting In-memory Settings to Document - JavaScript\nDESCRIPTION: This example persists all in-memory changes made to the Office.js Settings property bag by calling saveAsync. The method accepts a callback function receiving an AsyncResult object, from which success or failure can be determined and reported to the user via the write helper. This process is required post-update to avoid lost changes. Office.js and a DOM element with id 'message' are required.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.document.settings.saveAsync(function (asyncResult) {\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n        write('Settings save failed. Error: ' + asyncResult.error.message);\n    } else {\n        write('Settings saved.');\n    }\n});\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unified Manifest for Teams & Outlook Add-in with JSON\nDESCRIPTION: This JSON snippet defines the structure of a unified manifest for a Teams and Outlook add-in. It specifies schema references, app IDs, versions, developer details, localization, authorization, extension capabilities, runtimes, ribbon customization, and action definitions. Dependencies include adherence to the Teams unified manifest schema and hosting referenced web resources for runtime code and images. Key parameters include required capabilities (e.g., Mailbox API versions), actions and controls for ribbons, and localization file references. Outputs a valid manifest JSON for registering Office add-ins; missing or incorrect properties may result in add-in registration errors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/unified-manifest-overview.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/teams/vDevPreview/MicrosoftTeams.schema.json\",\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"version\": \"1.0.0\",\n  \"manifestVersion\": \"devPreview\",\n  \"name\": {\n    \"short\": \"Name of your app (<=30 chars)\",\n    \"full\": \"Full name of app, if longer than 30 characters (<=100 chars)\"\n  },\n  \"description\": {\n    \"short\": \"Short description of your app (<= 80 chars)\",\n    \"full\": \"Full description of your app (<= 4000 chars)\"\n  },\n  \"icons\": {\n    \"outline\": \"outline.png\",\n    \"color\": \"color.png\"\n  },\n  \"accentColor\": \"#230201\",\n  \"developer\": {\n    \"name\": \"Contoso\",\n    \"websiteUrl\": \"https://www.contoso.com\",\n    \"privacyUrl\": \"https://www.contoso.com/privacy\",\n    \"termsOfUseUrl\": \"https://www.contoso.com/servicesagreement\"\n  },\n  \"localizationInfo\": {\n    \"defaultLanguageTag\": \"en-us\",\n    \"additionalLanguages\": [\n      {\n        \"languageTag\": \"es-es\",\n        \"file\": \"es-es.json\"\n      }\n    ]\n  },\n  \"webApplicationInfo\": {\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"resource\": \"api://www.contoso.com/prodapp\"\n  },\n  \"authorization\": {\n    \"permissions\": {\n      \"resourceSpecific\": [\n        {\n          \"name\": \"Mailbox.ReadWrite.User\",\n          \"type\": \"Delegated\"\n        }\n      ]\n    }\n  },\n  \"extensions\": [\n    {\n      \"requirements\": {\n        \"scopes\": [ \"mail\" ],\n        \"capabilities\": [\n          {\n            \"name\": \"Mailbox\", \"minVersion\": \"1.1\"\n          }\n        ]\n      },\n      \"runtimes\": [\n        {\n          \"requirements\": {\n            \"capabilities\": [\n              {\n                \"name\": \"MailBox\",\n                \"minVersion\": \"1.10\"\n              }\n            ]\n          },\n          \"id\": \"eventsRuntime\",\n          \"type\": \"general\",\n          \"code\": {\n            \"page\": \"https://contoso.com/events.html\",\n            \"script\": \"https://contoso.com/events.js\"\n          },\n          \"lifetime\": \"short\",\n          \"actions\": [\n            {\n              \"id\": \"onMessageSending\",\n              \"type\": \"executeFunction\"\n            },\n            {\n              \"id\": \"onNewMessageComposeCreated\",\n              \"type\": \"executeFunction\"\n            }\n          ]\n        },\n        {\n          \"requirements\": {\n            \"capabilities\": [\n              {\n                \"name\": \"MailBox\", \"minVersion\": \"1.1\"\n              }\n            ]\n          },\n          \"id\": \"commandsRuntime\",\n          \"type\": \"general\",\n          \"code\": {\n            \"page\": \"https://contoso.com/commands.html\",\n            \"script\": \"https://contoso.com/commands.js\"\n          },\n          \"lifetime\": \"short\",\n          \"actions\": [\n            {\n              \"id\": \"action1\",\n              \"type\": \"executeFunction\"\n            },\n            {\n              \"id\": \"action2\",\n              \"type\": \"executeFunction\"\n            },\n            {\n              \"id\": \"action3\",\n              \"type\": \"executeFunction\"\n            }\n          ]\n        }\n      ],\n      \"ribbons\": [\n        {\n          \"contexts\": [\n            \"mailCompose\"\n          ],\n          \"tabs\": [\n            {\n              \"builtInTabId\": \"TabDefault\",\n              \"groups\": [\n                {\n                  \"id\": \"dashboard\",\n                  \"label\": \"Controls\",\n                  \"controls\": [\n                    {\n                      \"id\": \"control1\",\n                      \"type\": \"button\",\n                      \"label\": \"Action 1\",\n                      \"icons\": [\n                        {\n                          \"size\": 16,\n                          \"url\": \"test_16.png\"\n                        },\n                        {\n                          \"size\": 32,\n                          \"url\": \"test_32.png\"\n                        },\n                        {\n                          \"size\": 80,\n                          \"url\": \"test_80.png\"\n                        }\n                      ],\n                      \"supertip\": {\n                        \"title\": \"Action 1 Title\",\n                        \"description\": \"Action 1 Description\"\n                      },\n                      \"actionId\": \"action1\"\n                    },\n                    {\n                      \"id\": \"menu1\",\n                      \"type\": \"menu\",\n                      \"label\": \"My Menu\",\n                      \"icons\": [\n                        {\n                          \"size\": 16,\n                          \"url\": \"test_16.png\"\n                        },\n                        {\n                          \"size\": 32,\n                          \"url\": \"test_32.png\"\n                        },\n                        {\n                          \"size\": 80,\n                          \"url\": \"test_80.png\"\n                        }\n                      ],\n                      \"supertip\": {\n                        \"title\": \"My Menu\",\n                        \"description\": \"Menu with 2 actions\"\n                      },\n                      \"items\": [\n                        {\n                          \"id\": \"menuItem1\",\n                          \"type\": \"menuItem\",\n                          \"label\": \"Action 2\",\n                          \"supertip\": {\n                            \"title\": \"Action 2 Title\",\n                            \"description\": \"Action 2 Description\"\n                          },\n                          \"actionId\": \"action2\"\n                        },\n                        {\n                          \"id\": \"menuItem2\",\n                          \"type\": \"menuItem\",\n                          \"label\": \"Action 3\",\n                          \"icons\": [\n                            {\n                              \"size\": 16,\n                              \"url\": \"test_16.png\"\n                            },\n                            {\n                              \"size\": 32,\n                              \"url\": \"test_32.png\"\n                            },\n                            {\n                              \"size\": 80,\n                              \"url\": \"test_80.png\"\n                            }\n                          ],\n                          \"supertip\": {\n                            \"title\": \"Action 3 Title\",\n                            \"description\": \"Action 3 Description\"\n                          },\n                          \"actionId\": \"action3\"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"contexts\": [ \"mailRead\" ],\n          \"tabs\": [\n            {\n              \"builtInTabId\": \"TabDefault\",\n              \"groups\": [\n                {\n                  \"id\": \"dashboard\",\n                  \"label\": \"Controls\",\n                  \"controls\": [\n                    {\n                      \"id\": \"control1\",\n                      \"type\": \"button\",\n                      \"label\": \"Action 1\",\n                      \"icons\": [\n                        {\n                          \"size\": 16,\n                          \"url\": \"test_16.png\"\n                        },\n                        {\n                          \"size\": 32,\n                          \"url\": \"test_32.png\"\n                        },\n                        {\n                          \"size\": 80,\n                          \"url\": \"test_80.png\"\n                        }\n                      ],\n                      \"supertip\": {\n                        \"title\": \"Action 1 Title\",\n                        \"description\": \"Action 1 Description\"\n                      },\n                      \"actionId\": \"action1\"\n                    }\n                  ]\n                }\n              ],\n              \"customMobileRibbonGroups\" [\n                {\n                  \"id\": \"myMobileGroup\",\n                  \"label\": \"Contoso Actions\",\n                  \"controls\": [\n                    {\n                      \"id\": \"msgReadFunctionButton\",\n                      \"type\": \"mobileButton\",\n                      \"label\": \"Action 1\",\n                      \"icons\": [\n                        {\n                          \"size\": 16,\n                          \"url\": \"test_16.png\"\n                        },\n                        {\n                          \"size\": 32,\n                          \"url\": \"test_32.png\"\n                        },\n                        {\n                          \"size\": 80,\n                          \"url\": \"test_80.png\"\n                        }\n                      ],\n                      \"supertip\": {\n                        \"title\": \"Action 1 Title\",\n                        \"description\": \"Action 1 Description\"\n                      },\n                      \"actionId\": \"action1\"\n                    }\n                  ]\n                }\n              ]\n              \"customMobileRibbonGroups\": [\n                {\n                  \"id\": \"mobileDashboard\",\n                  \"label\": \"Controls\",\n                  \"controls\": [\n                    {\n                      \"id\": \"control1\",\n                      \"type\": \"mobileButton\",\n                      \"label\": \"Action 1\",\n                      \"icons\": [\n                        {\n                          \"size\": 16,\n                          \"url\": \"test_16.png\"\n                        },\n                        {\n                          \"size\": 32,\n                          \"url\": \"test_32.png\"\n                        },\n                        {\n                          \"size\": 80,\n                          \"url\": \"test_80.png\"\n                        }\n                      ],\n                      \"supertip\": {\n                        \"title\": \"Action 1 Title\",\n                        \"description\": \"Action 1 Description\"\n                      },\n                      \"actionId\": \"action1\"\n                    }\n                  ]\n                }\n              ]\n\n```\n\n----------------------------------------\n\nTITLE: Insert Range and Shift Cells Down in Excel using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to insert a new range of cells ('B4:E4') into the 'Sample' worksheet using the Excel JavaScript API. It utilizes the `range.insert` method with the `Excel.InsertShiftDirection.down` option, which causes the existing cells below the insertion point to be shifted downwards to accommodate the new, empty range.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-insert.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = sheet.getRange(\"B4:E4\");\n\n    range.insert(Excel.InsertShiftDirection.down);\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Office JS TypeScript Definitions via npm\nDESCRIPTION: This command installs the TypeScript type definitions for the Office JavaScript API (`office-js`) as a development dependency using npm. This is necessary for TypeScript projects to provide type checking and IntelliSense for the Office JS APIs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/add-ins-with-angular2.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm install --save-dev @types/office-js\n```\n\n----------------------------------------\n\nTITLE: Adding a Moving Average Trendline to an Excel Chart Series using JavaScript\nDESCRIPTION: Adds a 'MovingAverage' trendline to the first data series of the first chart on the 'Sample' worksheet. The moving average period is set to 5.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let chart = sheet.charts.getItemAt(0);\n    let seriesCollection = chart.series;\n    seriesCollection.getItemAt(0).trendlines.add(\"MovingAverage\").movingAveragePeriod = 5;\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering onChanged Event Handler in Excel JavaScript\nDESCRIPTION: This snippet demonstrates how to register an event handler for the `onChanged` event on a specific worksheet named \"Sample\". It uses `Excel.run` to establish context, retrieves the worksheet object, and calls the `add` method on the `onChanged` event, passing the `handleChange` function as the handler. A success message is logged to the console after synchronization.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-events.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    const worksheet = context.workbook.worksheets.getItem(\"Sample\");\n    worksheet.onChanged.add(handleChange);\n\n    await context.sync();\n    console.log(\"Event handler successfully registered for onChanged event in the worksheet.\");\n}).catch(errorHandlerFunction);\n```\n\n----------------------------------------\n\nTITLE: Getting Data from an Excel Table using Office JS\nDESCRIPTION: This snippet demonstrates how to retrieve data from various parts of an Excel table named 'ExpensesTable' located in the 'Sample' worksheet. It loads values from the header row, the entire data body, a specific column ('Merchant'), and a specific row (index 1). After synchronizing with Excel, it writes the retrieved data to different ranges below the original table.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    // Get data from the header row.\n    let headerRange = expensesTable.getHeaderRowRange().load(\"values\");\n\n    // Get data from the table.\n    let bodyRange = expensesTable.getDataBodyRange().load(\"values\");\n\n    // Get data from a single column.\n    let columnRange = expensesTable.columns.getItem(\"Merchant\").getDataBodyRange().load(\"values\");\n\n    // Get data from a single row.\n    let rowRange = expensesTable.rows.getItemAt(1).load(\"values\");\n\n    // Sync to populate proxy objects with data from Excel.\n    await context.sync();\n\n    let headerValues = headerRange.values;\n    let bodyValues = bodyRange.values;\n    let merchantColumnValues = columnRange.values;\n    let secondRowValues = rowRange.values;\n\n    // Write data from table back to the sheet\n    sheet.getRange(\"A11:A11\").values = [[\"Results\"]];\n    sheet.getRange(\"A13:D13\").values = headerValues;\n    sheet.getRange(\"A14:D20\").values = bodyValues;\n    sheet.getRange(\"B23:B29\").values = merchantColumnValues;\n    sheet.getRange(\"A32:D32\").values = secondRowValues;\n\n    // Sync to update the sheet in Excel.\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting and Positioning Chart - Office.js JavaScript\nDESCRIPTION: Demonstrates detailed formatting and positioning for the created chart, placing it in the worksheet from cell A15 to F30, setting the title and legend styling, adjusting data label fonts, and naming the series. Assumes the chart object has just been created and context is synchronized. Relies on the chart API of Office.js and expects the first series index to be valid for labeling with a custom value ('Value in €').\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setPosition(\\\"A15\\\", \\\"F30\\\");\\nchart.title.text = \\\"Expenses\\\";\\nchart.legend.position = \\\"Right\\\";\\nchart.legend.format.fill.setSolidColor(\\\"white\\\");\\nchart.dataLabels.format.font.size = 15;\\nchart.dataLabels.format.font.color = \\\"black\\\";\\nchart.series.getItemAt(0).name = 'Value in \\u20AC';\n```\n\n----------------------------------------\n\nTITLE: Getting Visible Range from a Filtered Excel Table using Office JS\nDESCRIPTION: This snippet retrieves the range containing only the visible cells within the data body of a potentially filtered table ('ExpensesTable'). It uses the `getVisibleView()` method on the table's data body range, loads the 'values' property of this visible range, and then logs these values to the console after synchronizing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    let visibleRange = expensesTable.getDataBodyRange().getVisibleView();\n    visibleRange.load(\"values\");\n\n    await context.sync();\n    console.log(visibleRange.values);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Custom Functions in JavaScript\nDESCRIPTION: This JavaScript custom function `increment` demonstrates a streaming function. It uses `setInterval` to repeatedly increment a value by `incrementBy` every second. The `CustomFunctions.StreamingInvocation` parameter (`invocation`) is used to send updated results back to the Excel cell via `invocation.setResult()`. An `onCanceled` callback is defined to clear the interval timer when the function calculation is canceled by Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-web-reqs.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Increments a value once a second.\n * @customfunction INC increment\n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nfunction increment(incrementBy, invocation) {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Partitioned localStorage with Office.context.partitionKey in JavaScript\nDESCRIPTION: Demonstrates storing and retrieving data using HTML5 `localStorage`, incorporating the `Office.context.partitionKey` when available. This ensures data isolation within the add-in's context, particularly in environments supporting storage partitioning. Helper functions `setInLocalStorage` and `getFromLocalStorage` check for the partition key and prepend it if present. Dependencies: Office JavaScript API (`Office.context`), Browser `localStorage` API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\n// Store the value \"Hello\" in local storage with the key \"myKey1\".\nsetInLocalStorage(\"myKey1\", \"Hello\");\n\n// ... \n\n// Retrieve the value stored in local storage under the key \"myKey1\".\nconst message = getFromLocalStorage(\"myKey1\");\nconsole.log(message);\n\n// ...\n\nfunction setInLocalStorage(key: string, value: string) {\n  const myPartitionKey = Office.context.partitionKey;\n\n  // Check if local storage is partitioned. \n  // If so, use the partition to ensure the data is only accessible by your add-in.\n  if (myPartitionKey) {\n    localStorage.setItem(myPartitionKey + key, value);\n  } else {\n    localStorage.setItem(key, value);\n  }\n}\n\nfunction getFromLocalStorage(key: string) {\n  const myPartitionKey = Office.context.partitionKey;\n\n  // Check if local storage is partitioned.\n  if (myPartitionKey) {\n    return localStorage.getItem(myPartitionKey + key);\n  } else {\n    return localStorage.getItem(key);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Finding a String Within an Excel Range - Excel JavaScript API - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates use of the Excel JavaScript API to search within a worksheet table for the first cell whose value exactly matches a given string (in this example, 'Food'). It uses the 'find' method with options for complete (whole cell) matching, case insensitivity, and forward search direction. The example obtains the matching cell's address and logs it to the console. This code requires the Office.js library, Excel on the web, or supported desktop Excel with JavaScript add-ins enabled. Expected input is an existing worksheet named 'Sample' with a table named 'ExpensesTable.' Output is the address of the found cell; if no match, an 'ItemNotFound' error is thrown unless handled.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-string-match.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n    let table = sheet.tables.getItem(\\\"ExpensesTable\\\");\\n    let searchRange = table.getRange();\\n    let foundRange = searchRange.find(\\\"Food\\\", {\\n        completeMatch: true, // Match the whole cell value.\\n        matchCase: false, // Don't match case.\\n        searchDirection: Excel.SearchDirection.forward // Start search at the beginning of the range.\\n    });\\n\\n    foundRange.load(\\\"address\\\");\\n    await context.sync();\\n\\n    console.log(foundRange.address);\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Batched Division Custom Function in JavaScript\nDESCRIPTION: Implements a custom function named div2 that performs division by delegating the operation and its operands to a batching mechanism. Utilizes the _pushOperation helper to collect function calls and batch them for a remote service, returning a promise that resolves to the division result. Requires _pushOperation to be defined in the encompassing project, and is meant for use with Office Add-in custom functions; expects two number parameters, 'dividend' and 'divisor', and produces their quotient asynchronously.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-batching.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Divides two numbers using batching\n * @CustomFunction\n * @param dividend The number being divided\n * @param divisor The number the dividend is divided by\n * @returns The result of dividing the two numbers\n */\nfunction div2(dividend, divisor) {\n  return _pushOperation(\"div2\", [dividend, divisor]);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Dictionary Add-in Task Pane UI (CSS)\nDESCRIPTION: This CSS code provides styling rules for the HTML elements defined in the dictionary add-in's task pane UI (Home.html). It sets the default font family and size for the main container, specific styles for the headword element (making it semibold), and defines appearance attributes for definition lists and hyperlinks, including visited and hover states.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\n#mainContainer\n{\n    font-family: Segoe UI;\n    font-size: 11pt;\n}\n\n#headword\n{\n    font-family: Segoe UI Semibold;\n    color: #262626;\n}\n\n#definitions\n{\n    font-size: 8.5pt;\n}\na\n{\n    font-size: 8pt;\n    color: #336699;\n    text-decoration: none;\n}\na:visited\n{\n    color: #993366;\n}\na:hover, a:active\n{  \n    text-decoration: underline;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Event Handlers in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `autoRunEvents` array within the `extensions` object of the `manifest.json`. It links specific events (`messageFromChanged` for `OnMessageFromChanged` and `newMessageComposeCreated` for `OnNewMessageCompose`) to corresponding `actionId`s defined within the add-in's runtime configuration, enabling the functions to execute automatically when these events occur within supported scopes (mail) and requirement sets (Mailbox 1.13).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagefromchanged-onappointmentfromchanged-events.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"autoRunEvents\": [\n    {\n        \"requirements\": {\n            \"capabilities\": [\n                {\n                    \"name\": \"Mailbox\",\n                    \"minVersion\": \"1.13\"\n                }\n            ],\n            \"scopes\": [\n                \"mail\"\n            ]\n        },\n        \"events\": [\n            {\n                \"type\": \"messageFromChanged\",\n                \"actionId\": \"onMessageFromChangedHandler\"\n            },\n            {\n                \"type\": \"newMessageComposeCreated\",\n                \"actionId\": \"onNewMessageComposeHandler\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Item ID in Read Mode for Microsoft Graph using Office JS\nDESCRIPTION: Demonstrates retrieving the current mail item's ID in read mode using `Office.context.mailbox.item.itemId` and converting it to a REST-compatible format using `Office.context.mailbox.convertToRestId`. This is necessary for interacting with Microsoft Graph APIs, as `itemId` returns an EWS-formatted ID on non-mobile clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the item ID of the current mail item in read mode and convert it into a REST format.\nconst itemId = Office.context.mailbox.item.itemId;\nconst restId = Office.context.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\n```\n\n----------------------------------------\n\nTITLE: Specifying Requirements in VersionOverrides with Office Add-in Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates how to declare feature requirements in the <VersionOverrides> section of an Office Add-in manifest. Specifying <Requirements> with <Sets> and <Set> enables conditional feature registration based on platform support, preventing elements inside <Hosts> from loading if the required API is unavailable. Dependencies include the Office Add-in manifest schema and a correct Office JavaScript API version. Key parameters are the Name and MinVersion attributes in <Set>, defining which Office APIs and minimum versions are needed. The input is an XML manifest, and the output is conditional add-in feature activation based on Office version. Some elements within VersionOverrides may be ignored if the requirement is not met, so careful configuration is required.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-office-hosts-and-api-requirements.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<VersionOverrides ... >\\n   ...\\n   <Requirements>\\n      <Sets DefaultMinVersion=\\\"1.1\\\">\\n         <Set Name=\\\"WordApi\\\" MinVersion=\\\"1.2\\\"/>\\n      </Sets>\\n   </Requirements>\\n   <Hosts>\\n\\n      <!-- ALL MARKUP INSIDE THE HOSTS ELEMENT IS IGNORED WHEREVER WordApi 1.2 IS NOT SUPPORTED -->\\n\\n      <Host xsi:type=\\\"Workbook\\\">\\n         <!-- markup for custom add-in commands -->\\n      </Host>\\n   </Hosts>\\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Making a Worksheet Visible by Name with Excel JavaScript API\nDESCRIPTION: Sets the visibility of a specific worksheet named \"Sample\" to visible. It retrieves the worksheet using `getItem(\"Sample\")` and sets its `visibility` property to `Excel.SheetVisibility.visible`. The sheet's name is loaded and logged for confirmation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.visibility = Excel.SheetVisibility.visible;\n    sheet.load(\"name\");\n\n    await context.sync();\n    console.log(`Worksheet with name \"${sheet.name}\" is visible`);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Event-Based Runtime in Unified Manifest (JSON)\nDESCRIPTION: This JSON object defines a runtime configuration within the `extensions.runtimes` array of the `manifest.json` file. It specifies the Mailbox requirement set 1.13 (required for `OnMessageFromChanged`), sets up entry points (`page` and `script`) for different platforms, defines a `short` lifetime for the runtime, and links actions (`onMessageFromChangedHandler`, `onNewMessageComposeHandler`) to be executed by this runtime for specific events.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagefromchanged-onappointmentfromchanged-events.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requirements\": {\n        \"capabilities\": [\n            {\n                \"name\": \"Mailbox\",\n                \"minVersion\": \"1.13\"\n            }\n        ]\n    },\n    \"id\": \"autorun_runtime\",\n    \"type\": \"general\",\n    \"code\": {\n        \"page\": \"https://localhost:3000/commands.html\",\n        \"script\": \"https://localhost:3000/launchevent.js\"\n    },\n    \"lifetime\": \"short\",\n    \"actions\": [\n        {\n            \"id\": \"onMessageFromChangedHandler\",\n            \"type\": \"executeFunction\",\n            \"displayName\": \"onMessageFromChangedHandler\"\n        },\n        {\n            \"id\": \"onNewMessageComposeHandler\",\n            \"type\": \"executeFunction\",\n            \"displayName\": \"onNewMessageComposeHandler\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Properties on Multiple Ranges Using RangeAreas (JavaScript)\nDESCRIPTION: This snippet demonstrates using the Excel JavaScript API to select multiple, non-contiguous ranges (\"F3:F5\", \"H3:H5\") via `worksheet.getRanges()` and storing them in a `RangeAreas` object. It then sets the `format.fill.color` property for all ranges within the `RangeAreas` object simultaneously to \"pink\". The operation is performed within an `Excel.run` function and requires `context.sync()` to apply the changes to the workbook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-multiple-ranges.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let rangeAreas = sheet.getRanges(\"F3:F5, H3:H5\");\n    rangeAreas.format.fill.color = \"pink\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Worksheet Name with Excel JavaScript API\nDESCRIPTION: Obtains a reference to the currently active worksheet using `context.workbook.worksheets.getActiveWorksheet()`, loads its 'name' property, and logs the name to the console after synchronizing the context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.load(\"name\");\n\n    await context.sync();\n    console.log(`The active worksheet is \"${sheet.name}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying AutoFilter to Worksheet Used Range - Excel JavaScript API (JavaScript)\nDESCRIPTION: Applies a custom AutoFilter to the used range of the active worksheet, displaying only rows with values in the top 25% for column 3. Requires Office.js and Excel JavaScript API. Parameters: 'range' refers to the used range; 'columnIndex' is 3 (zero-based index); 'criteria' filters for the top 25% via Excel.FilterOn.topPercent. The output is a worksheet view showing only top 25% values in the chosen column. Must be run in an Excel Office Add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This method adds a custom AutoFilter to the active worksheet\n// and applies the filter to a column of the used range.\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let farmData = sheet.getUsedRange();\n\n    // This filter will only show the rows with the top 25% of values in column 3.\n    sheet.autoFilter.apply(farmData, 3, { criterion1: \"25\", filterOn: Excel.FilterOn.topPercent });\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Font and Fill Color for Excel Range in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the font color to white and the fill (background) color to blue ('#4472C4') for the cell range 'B2:E2' on a worksheet named 'Sample'. It uses the `Excel.run` function to execute the batch operation asynchronously, accessing the range's format properties (`format.fill.color`, `format.font.color`) and synchronizing the context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-format.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let range = sheet.getRange(\"B2:E2\");\n    range.format.fill.color = \"#4472C4\";\n    range.format.font.color = \"white\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining getSpecialCellsOrNullObject Method Signature with TypeScript\nDESCRIPTION: This TypeScript snippet describes the Range.getSpecialCellsOrNullObject method signature, allowing for optional narrowing of special cell selection. It returns a RangeAreas object, enabling developers to safely check for existence of specific cells. The JavaScript API for Excel, used with TypeScript for type safety, is required to utilize this method.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-special-cells.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;\n```\n\n----------------------------------------\n\nTITLE: Configuring Add-in to Load on Document Open in JavaScript\nDESCRIPTION: Sets the add-in's startup behavior to load automatically when the current document is opened. This requires the Office JavaScript API and a shared runtime environment. The `setStartupBehavior` method is asynchronous. Once set, the add-in will run its `Office.initialize` or `Office.onReady` code upon subsequent document opens.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/run-code-on-document-open.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```JavaScript\nOffice.addin.setStartupBehavior(Office.StartupBehavior.load);\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Data Series to an Existing Excel Chart using JavaScript\nDESCRIPTION: Adds a new data series named '2016' to the first chart found on the 'Sample' worksheet. The values for this new series are sourced from the data range D2:D5 on the same sheet.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let chart = sheet.charts.getItemAt(0);\n    let dataRange = sheet.getRange(\"D2:D5\");\n\n    let newSeries = chart.series.add(\"2016\");\n    newSeries.setValues(dataRange);\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Selection Change Event Handler with Office.js in JavaScript\nDESCRIPTION: This code removes a previously added event handler for the documentSelectionChanged event using removeHandlerAsync in Office.js. By passing a reference to the handler function (myHandler), only that specific handler is removed from monitoring selection changes. Requires Office.js and assumes myHandler has been previously defined and registered.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/read-and-write-data-to-the-active-selection-in-a-document-or-spreadsheet.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.document.removeHandlerAsync(\"documentSelectionChanged\", {handler:myHandler}, function(result){});\n```\n\n----------------------------------------\n\nTITLE: Initializing with Office.onReady Callback (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates using `Office.onReady()` with a callback function to execute initialization code. The callback receives an `info` object containing the host application (e.g., Excel) and platform (e.g., PC). This allows for conditional logic based on the environment where the add-in is running.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/initialize-add-in.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.onReady(function(info) {\n    if (info.host === Office.HostType.Excel) {\n        // Do Excel-specific initialization (for example, make add-in task pane's\n        // appearance compatible with Excel \"green\").\n    }\n    if (info.platform === Office.PlatformType.PC) {\n        // Make minor layout changes in the task pane.\n    }\n    console.log(`Office.js is now ready in ${info.host} on ${info.platform}`);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing applyCustomStyle Logic in JavaScript\nDESCRIPTION: This JavaScript snippet replaces the 'TODO1' placeholder within the 'applyCustomStyle' function. It queues a command to get the last paragraph of the document body and apply a style named 'MyCustomStyle' to it. This code runs within the 'Word.run' context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst lastParagraph = context.document.body.paragraphs.getLast();\nlastParagraph.style = \"MyCustomStyle\";\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Ribbon Button in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet replaces the 'extensions.ribbons' array in manifest.json to add a custom button to the Outlook ribbon. It specifies requirements (Mailbox 1.3, mail scope, desktop form factor), targets the 'meetingDetailsOrganizer' context, creates a custom group 'Contoso meeting' on the default tab, and adds a button 'Add meeting' that triggers the 'insertContosoMeeting' action defined previously. Icon URLs and a supertip are also configured.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"ribbons\": [\n  {\n    \"requirements\": {\n        \"capabilities\": [\n            {\n                \"name\": \"Mailbox\",\n                \"minVersion\": \"1.3\"\n            }\n        ],\n        \"scopes\": [\n            \"mail\"\n        ],\n        \"formFactors\": [\n            \"desktop\"\n        ]\n    },\n    \"contexts\": [\n        \"meetingDetailsOrganizer\"\n    ],\n    \"tabs\": [\n        {\n            \"builtInTabId\": \"TabDefault\",\n            \"groups\": [\n                {\n                    \"id\": \"apptComposeGroup\",\n                    \"label\": \"Contoso meeting\",\n                    \"controls\": [\n                        {\n                            \"id\": \"insertMeetingButton\",\n                            \"type\": \"button\",\n                            \"label\": \"Add meeting\",\n                            \"icons\": [\n                                {\n                                    \"size\": 16,\n                                    \"url\": \"icon-16.png\"\n                                },\n                                {\n                                    \"size\": 32,\n                                    \"url\": \"icon-32.png\"\n                                },\n                                {\n                                    \"size\": 64,\n                                    \"url\": \"icon-64_02.png\"\n                                },\n                                {\n                                    \"size\": 80,\n                                    \"url\": \"icon-80.png\"\n                                }\n                            ],\n                            \"supertip\": {\n                                \"title\": \"Add a Contoso meeting\",\n                                \"description\": \"Add a Contoso meeting to this appointment.\"\n                            },\n                            \"actionId\": \"insertContosoMeeting\",\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Hiding a Worksheet by Name with Excel JavaScript API\nDESCRIPTION: Sets the visibility of a specific worksheet named \"Sample\" to hidden. It retrieves the worksheet using `getItem(\"Sample\")` and sets its `visibility` property to `Excel.SheetVisibility.hidden`. The sheet's name is loaded and logged for confirmation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.visibility = Excel.SheetVisibility.hidden;\n    sheet.load(\"name\");\n\n    await context.sync();\n    console.log(`Worksheet with name \"${sheet.name}\" is hidden`);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Keyboard Shortcut Availability with Office.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to use Office.actions.areShortcutsInUse to check whether specific keyboard combinations are already in use in an Office Add-in's context. By passing an array of shortcut strings, it asynchronously obtains a report and segregates the available and used shortcuts, using filter on the result. Useful for avoiding conflicts between add-ins or with native Office shortcuts.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst shortcuts = [\"Ctrl+Shift+1\", \"Ctrl+Shift+2\"];\nOffice.actions.areShortcutsInUse(shortcuts)\n    .then((inUseArray) => {\n        const availableShortcuts = inUseArray.filter((shortcut) => {\n            return !shortcut.inUse;\n        });\n        console.log(availableShortcuts);\n        const usedShortcuts = inUseArray.filter((shortcut) => {\n            return shortcut.inUse;\n        });\n        console.log(usedShortcuts);\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting, Getting, and Removing Custom Internet Headers in Outlook Compose Mode (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to manage custom internet headers on the current message in Outlook Compose mode using the Office JavaScript API. It demonstrates setting multiple headers with `setAsync`, retrieving specific headers with `getAsync`, and removing selected headers with `removeAsync`. Callback functions handle the results of these asynchronous operations, logging success or errors. This requires Mailbox requirement set 1.8 or later.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/internet-headers.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Set custom internet headers.\nfunction setCustomHeaders() {\n  Office.context.mailbox.item.internetHeaders.setAsync(\n    { \"preferred-fruit\": \"orange\", \"preferred-vegetable\": \"broccoli\", \"best-vegetable\": \"spinach\" },\n    setCallback\n  );\n}\n\nfunction setCallback(asyncResult) {\n  if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Successfully set headers\");\n  } else {\n    console.log(\"Error setting headers: \" + JSON.stringify(asyncResult.error));\n  }\n}\n\n// Get custom internet headers.\nfunction getSelectedCustomHeaders() {\n  Office.context.mailbox.item.internetHeaders.getAsync(\n    [\"preferred-fruit\", \"preferred-vegetable\", \"best-vegetable\", \"nonexistent-header\"],\n    getCallback\n  );\n}\n\nfunction getCallback(asyncResult) {\n  if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Selected headers: \" + JSON.stringify(asyncResult.value));\n  } else {\n    console.log(\"Error getting selected headers: \" + JSON.stringify(asyncResult.error));\n  }\n}\n\n// Remove custom internet headers.\nfunction removeSelectedCustomHeaders() {\n  Office.context.mailbox.item.internetHeaders.removeAsync(\n    [\"best-vegetable\", \"nonexistent-header\"],\n    removeCallback);\n}\n\nfunction removeCallback(asyncResult) {\n  if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Successfully removed selected headers\");\n  } else {\n    console.log(\"Error removing selected headers: \" + JSON.stringify(asyncResult.error));\n  }\n}\n\nsetCustomHeaders();\ngetSelectedCustomHeaders();\nremoveSelectedCustomHeaders();\ngetSelectedCustomHeaders();\n\n/* Sample output:\nSuccessfully set headers\nSelected headers: {\"best-vegetable\":\"spinach\",\"preferred-fruit\":\"orange\",\"preferred-vegetable\":\"broccoli\"}\nSuccessfully removed selected headers\nSelected headers: {\"preferred-fruit\":\"orange\",\"preferred-vegetable\":\"broccoli\"}\n*/\n```\n\n----------------------------------------\n\nTITLE: Populating Excel Table Headers and Data Rows in JavaScript\nDESCRIPTION: This JavaScript code, designed to replace `TODO2` within the `createTable` function, populates the previously created 'ExpensesTable'. It first sets the header row values using `getHeaderRowRange().values`. Then, it adds multiple data rows to the table using the `rows.add()` method, passing `null` as the first argument to add rows at the end and an array of arrays containing the cell data for each new row.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpensesTable.getHeaderRowRange().values =\n    [[\"Date\", \"Merchant\", \"Category\", \"Amount\"]];\n\nexpensesTable.rows.add(null /*add at the end*/, [\n    [\"1/1/2017\", \"The Phone Company\", \"Communications\", \"120\"],\n    [\"1/2/2017\", \"Northwind Electric Cars\", \"Transportation\", \"142.33\"],\n    [\"1/5/2017\", \"Best For You Organics Company\", \"Groceries\", \"27.9\"],\n    [\"1/10/2017\", \"Coho Vineyard\", \"Restaurant\", \"33\"],\n    [\"1/11/2017\", \"Bellows College\", \"Education\", \"350.1\"],\n    [\"1/15/2017\", \"Trey Research\", \"Other\", \"135\"],\n    [\"1/15/2017\", \"Best For You Organics Company\", \"Groceries\", \"97.88\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Chart to Worksheet - Office.js JavaScript\nDESCRIPTION: Creates a clustered column chart based on the selected data range, associating it with the current worksheet in Excel. The add method specifies the chart type, target data range, and orientation ('Auto' lets Excel decide series-by-row or column). This snippet requires Office.js, a table named 'ExpensesTable', and a defined data range suitable for charting.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = currentWorksheet.charts.add('ColumnClustered', dataRange, 'Auto');\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Points for Ribbon and Context Menu in XML Manifest\nDESCRIPTION: This XML snippet illustrates defining two types of `<ExtensionPoint>`: `PrimaryCommandSurface` for adding commands to the Office ribbon (using `<CustomTab>` or `<OfficeTab>`, `<Group>`, and `<Control>`) and `ContextMenu` for adding commands to context menus (using `<OfficeMenu>` and `<Control>`). Unique IDs are crucial for these elements and their children.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ExtensionPoint xsi:type=\"PrimaryCommandSurface\">\n  <CustomTab id=\"Contoso Tab\">\n  <!-- If you want to use a default tab that comes with Office, remove the above CustomTab element, and then uncomment the following OfficeTab element. -->\n  <!-- <OfficeTab id=\"TabData\"> -->\n    <Label resid=\"residLabel4\" />\n    <Group id=\"Group1Id12\">\n      <Label resid=\"residLabel4\" />\n      <Icon>\n        <bt:Image size=\"16\" resid=\"icon1_32x32\" />\n        <bt:Image size=\"32\" resid=\"icon1_32x32\" />\n        <bt:Image size=\"80\" resid=\"icon1_32x32\" />\n      </Icon>\n      <Control xsi:type=\"Button\" id=\"Button1Id1\">\n\n        <!-- Information about the control. -->\n      </Control>\n      <!-- Other controls, as needed. -->\n    </Group>\n  </CustomTab>\n</ExtensionPoint>\n<ExtensionPoint xsi:type=\"ContextMenu\">\n  <OfficeMenu id=\"ContextMenuCell\">\n    <Control xsi:type=\"Menu\" id=\"ContextMenu2\">\n            <!-- Information about the control. -->\n    </Control>\n    <!-- Other controls, as needed. -->\n  </OfficeMenu>\n</ExtensionPoint>\n```\n\n----------------------------------------\n\nTITLE: Defining Task Pane UI Structure for Multi-Select (HTML)\nDESCRIPTION: This HTML snippet defines the main content area (`<main>`) for an Outlook add-in's task pane, tailored for the multi-select feature. It includes a heading, an empty unordered list (`<ul id=\"selected-items\">`) intended to display information derived from the selected messages, and a button (`<div id=\"run\">`) styled using Office UI Fabric (Fluent UI) classes to trigger an action like retrieving message details. This structure provides the basic UI elements needed for user interaction with multiple selected items.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/item-multi-select.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<main id=\"app-body\" class=\"ms-welcome__main\">\n    <h2 class=\"ms-font-l\">Get information about each selected message</h2>\n    <ul id=\"selected-items\"></ul>\n    <div role=\"button\" id=\"run\" class=\"ms-welcome__action ms-Button ms-Button--hero ms-font-xl\">\n        <span class=\"ms-Button-label\">Get information</span>\n    </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Creating Text Boxes with PowerPoint JavaScript API - JavaScript\nDESCRIPTION: This code shows how to add a text box to the first slide using 'addTextBox' from the ShapeCollection API. The initial text is provided as a parameter, and the text box's position, size, and name are set using properties. The sample must be executed within 'PowerPoint.run', with asynchronous context synchronization. Requires PowerPoint JavaScript API and a supported runtime environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/shapes.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This sample creates a text box with the text \"Hello!\" and sizes it appropriately.\nawait PowerPoint.run(async (context) => {\n    const shapes = context.presentation.slides.getItemAt(0).shapes;\n    const textbox = shapes.addTextBox(\"Hello!\");\n    textbox.left = 100;\n    textbox.top = 100;\n    textbox.height = 300;\n    textbox.width = 450;\n    textbox.name = \"Textbox\";\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Paragraph Changed Events in Office.js (JavaScript)\nDESCRIPTION: Defines the event handler function handleChange for the onParagraphChanged event. The function logs the type and source (local/remote) of the triggering event to the console. Requires Office.js, Word.run, a valid event object, and errorHandlerFunction. The expected input is an event object from a Word coauthoring event; output is console logging. This function does not perform additional processing and is general-purpose for logging event info.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/word-add-ins-events.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function handleChange(event) {\n    await Word.run(async (context) => {\n        await context.sync();        \n        console.log(\"Type of event: \" + event.type);\n        console.log(\"Source of event: \" + event.source);       \n    }).catch(errorHandlerFunction);\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Addin Field at Selection - Office.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to insert an Addin field before the current selection or cursor position in a Word document using the Office.js Word API. It retrieves the selection range, inserts an Addin type field at the 'before' location, and loads its 'result' and 'code' properties for inspection. The sample uses Word.run for transactional context and handles null field cases gracefully by logging appropriate messages.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/fields-guidance.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Inserts an Addin field before selection.\\nasync function rangeInsertAddinField() {\\n  await Word.run(async (context) => {\\n    let range = context.document.getSelection().getRange();\\n    const field = range.insertField(Word.InsertLocation.before, Word.FieldType.addin);\\n    field.load(\\\"result,code\\\");\\n    await context.sync();\\n\\n    if (field.isNullObject) {\\n      console.log(\\\"There are no fields in this document.\\\");\\n    } else {\\n      console.log(\\\"Code of the field: \\\" + field.code);\\n      console.log(\\\"Result of the field: \\\" + JSON.stringify(field.result));\\n    }\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Note from a Cell - Excel JavaScript API - JavaScript\nDESCRIPTION: This code deletes the note attached to cell A2 by invoking the Note.delete method within an Excel.run context. It fetches the note by cell address, calls delete, and then synchronizes state with context.sync(). The snippet requires that a note is present on A2 and Office.js is initialized.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-notes.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    // This function deletes the note from cell A2.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const note = sheet.notes.getItem(\"A2\");\n\n    note.delete();\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Word Task Pane Elements with CSS\nDESCRIPTION: This CSS code provides basic styling for the Word add-in's task pane defined in `Home.html`. It styles the header (`#content-header`) with a background color and fixed height, sets the main content area (`#content-main`) to fill the remaining space with scrolling, and defines padding (`.padding`) for content within these areas.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/word-quickstart-vs.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#content-header {\n    background: #2a8dd4;\n    color: #fff;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 80px;\n    overflow: hidden;\n}\n\n#content-main {\n    background: #fff;\n    position: fixed;\n    top: 80px;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    overflow: auto;\n}\n\n.padding {\n    padding: 15px;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Attachment in Outlook Compose using Office JavaScript API\nDESCRIPTION: This JavaScript function `removeAttachment` demonstrates how to remove a specific attachment from the message or appointment currently being composed. It uses the `Office.context.mailbox.item.removeAttachmentAsync` method, requiring the ID of the attachment to be removed. A callback function handles the asynchronous result, logging the ID of the removed attachment upon success or the error message upon failure. The attachment ID can be obtained from add attachment methods or `getAttachmentsAsync`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-and-remove-attachments-to-an-item-in-a-compose-form.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Removes the specified attachment from the composed item.\nfunction removeAttachment(attachmentId) {\n    // When the attachment is removed, the callback function is invoked.\n    // Here, the callback function uses an asyncResult parameter and\n    // gets the ID of the removed attachment if the removal succeeds.\n    // You can optionally pass any object you wish to access in the\n    // callback function as an argument to the asyncContext parameter.\n    Office.context.mailbox.item.removeAttachmentAsync(\n        attachmentId,\n        { asyncContext: null },\n        (asyncResult) => {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.error(asyncResult.error.message);\n                return;\n            }\n\n            console.log(`Removed attachment with the ID: ${asyncResult.value}`);\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results in Word Using Office.js JavaScript API\nDESCRIPTION: This JavaScript snippet demonstrates how to highlight each instance of the word \\'the\\' in a Word document using the Office.js Word API. It iterates through the results of a search operation, setting the highlight color for each found range. The example compares the impact of calling context.sync on each iteration (inside the loop) versus once after all modifications have been queued. Required dependencies are Office.js and must be run in an Office add-in context. The key parameter is the search string, and the output is the highlighting of matched words and a console log of runtime performance. Limitations include potential performance degradation with context.sync inside the loop and it assumes user familiarity with Office.js runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/correlated-objects-pattern.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait Word.run(async function (context) {\n  let startTime, endTime;\n  const docBody = context.document.body;\n\n  // search() returns an array of Ranges.\n  const searchResults = docBody.search('the', { matchWholeWord: true });\n  searchResults.load('font');\n  await context.sync();\n\n  // Record the system time.\n  startTime = performance.now();\n\n  for (let i = 0; i < searchResults.items.length; i++) {\n    searchResults.items[i].font.highlightColor = '#FFFF00';\n\n    await context.sync(); // SYNCHRONIZE IN EACH ITERATION\n  }\n  \n  // await context.sync(); // SYNCHRONIZE AFTER THE LOOP\n\n  // Record the system time again then calculate how long the operation took.\n  endTime = performance.now();\n  console.log(\"The operation took: \" + (endTime - startTime) + \" milliseconds.\");\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Paragraph Insertion Logic in JavaScript (TODO3)\nDESCRIPTION: This JavaScript snippet replaces the 'TODO3' placeholder in 'insertTextIntoRange'. It queues a command to insert a new paragraph at the end of the document body. The paragraph text includes the text content of the 'originalRange' proxy object. Note: This assumes 'originalRange.text' has been previously loaded from the document (handled by TODO2/Snippet 14). Requires 'doc', 'originalRange', and 'Word.InsertLocation'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndoc.body.insertParagraph(\"Original range: \" + originalRange.text, Word.InsertLocation.end);\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Formatting in Excel using JavaScript\nDESCRIPTION: Creates a new line chart on the 'Sample' worksheet using data from range A1:B13. It also sets the chart title, configures the legend's position and background color, and formats the data labels' font size and color.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let dataRange = sheet.getRange(\"A1:B13\");\n    let chart = sheet.charts.add(\n      Excel.ChartType.line, \n      dataRange, \n      Excel.ChartSeriesBy.auto);\n\n    chart.title.text = \"Sales Data\";\n    chart.legend.position = Excel.ChartLegendPosition.right;\n    chart.legend.format.fill.setSolidColor(\"white\");\n    chart.dataLabels.format.font.size = 15;\n    chart.dataLabels.format.font.color = \"black\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Difference From Calculation in Excel PivotTable using JavaScript\nDESCRIPTION: This snippet shows how to use a `ShowAsRule` to calculate the difference between PivotTable entries and a specific base item using the Office JS API. It configures the \"Sum of Crates Sold at Farm\" data hierarchy to display the difference relative to the \"A Farms\" item within the \"Farm\" row hierarchy (`Excel.ShowAsCalculation.differenceFrom`). Both `baseField` (\"Farm\") and `baseItem` (\"A Farms\") are specified. It also renames the hierarchy. Requires an active Excel PivotTable named \"Farm Sales\" with the specified hierarchies and items.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    let farmDataHierarchy = pivotTable.dataHierarchies.getItem(\"Sum of Crates Sold at Farm\");\n\n    farmDataHierarchy.load(\"showAs\");\n    await context.sync();\n        \n    // Show the difference between crate sales of the \"A Farms\" and the other farms.\n    // This difference is both aggregated and shown for individual fruit types (where applicable).\n    let farmShowAs = farmDataHierarchy.showAs;\n    farmShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;\n    farmShowAs.baseField = pivotTable.rowHierarchies.getItem(\"Farm\").fields.getItem(\"Farm\");\n    farmShowAs.baseItem = pivotTable.rowHierarchies.getItem(\"Farm\").fields.getItem(\"Farm\").items.getItem(\"A Farms\");\n    farmDataHierarchy.showAs = farmShowAs;\n    farmDataHierarchy.name = \"Difference from A Farms\";\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Objects for Function Commands - JSON - manifest\nDESCRIPTION: This JSON snippet configures the 'runtimes' array in an Office Add-in manifest to define a runtime for function commands. The configuration includes the runtime's unique id, type, associated HTML page, action lifetime, and an action with an id and type. Dependencies include having the unified manifest open and knowledge of required capability sets for Outlook or other Office hosts. The 'actions.id' must exactly match the function association in Office code, and the 'page' property must point to a valid, UI-less HTML file. Inputs and outputs are manifest schema properties; this section enforces structural and naming constraints for Office Add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"runtimes\": [\n    {\n        \"id\": \"CommandsRuntime\",\n        \"type\": \"general\",\n        \"code\": {\n            \"page\": \"https://localhost:3000/commands.html\"\n        },\n        \"lifetime\": \"short\",\n        \"actions\": [\n            {\n                \"id\": \"SetNotification\",\n                \"type\": \"executeFunction\",\n            }\n        ]\n    }       \n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Creation and Population in JavaScript\nDESCRIPTION: This JavaScript code replaces the `TODO2` placeholder in the `insertTable` function. It defines a 2D array `tableData` containing header and row information. Then, it calls the `insertTable` method on the previously obtained `secondParagraph` object. The method creates a 3x3 table (`3, 3`), inserts it after the paragraph (`Word.InsertLocation.after`), and populates it with the data from `tableData`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst tableData = [\n        [\"Name\", \"ID\", \"Birth City\"],\n        [\"Bob\", \"434\", \"Chicago\"],\n        [\"Sue\", \"719\", \"Havana\"],\n    ];\nsecondParagraph.insertTable(3, 3, Word.InsertLocation.after, tableData);\n```\n\n----------------------------------------\n\nTITLE: Suspending Calculation with Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet demonstrates how to temporarily suspend automatic recalculation in Excel using the Excel JavaScript API while updating large cell ranges. The add-in first inspects and logs the application calculation mode, sets cell values (including formulas), then suspends calculation with suspendApiCalculationUntilNextSync(). After further value updates, it shows how the recalculation resumes after context.sync(). Prerequisites: Office.js Excel API, add-in running in Excel context. Inputs: modifies cell values and formulas across ranges; outputs: logs reflecting calculation suspension and resumption. Calculation mode remains \"Automatic\" throughout, and only formula calculations are suspended.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/performance.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let app = context.workbook.application;\\n    let sheet = context.workbook.worksheets.getItem(\\\"sheet1\\\");\\n    let rangeToSet: Excel.Range;\\n    let rangeToGet: Excel.Range;\\n    app.load(\\\"calculationMode\\\");\\n    await context.sync();\\n    // Calculation mode should be \\\"Automatic\\\" by default\\n    console.log(app.calculationMode);\\n\\n    rangeToSet = sheet.getRange(\\\"A1:C1\\\");\\n    rangeToSet.values = [[1, 2, \\\"=SUM(A1:B1)\\\"]];\\n    rangeToGet = sheet.getRange(\\\"A1:C1\\\");\\n    rangeToGet.load(\\\"values\\\");\\n    await context.sync();\\n    // Range value should be [1, 2, 3] now\\n    console.log(rangeToGet.values);\\n\\n    // Suspending recalculation\\n    app.suspendApiCalculationUntilNextSync();\\n    rangeToSet = sheet.getRange(\\\"A1:B1\\\");\\n    rangeToSet.values = [[10, 20]];\\n    rangeToGet = sheet.getRange(\\\"A1:C1\\\");\\n    rangeToGet.load(\\\"values\\\");\\n    app.load(\\\"calculationMode\\\");\\n    await context.sync();\\n    // Range value should be [10, 20, 3] when we load the property, because calculation is suspended at that point\\n    console.log(rangeToGet.values);\\n    // Calculation mode should still be \\\"Automatic\\\" even with suspend recalculation\\n    console.log(app.calculationMode);\\n\\n    rangeToGet.load(\\\"values\\\");\\n    await context.sync();\\n    // Range value should be [10, 20, 30] when we load the property, because calculation is resumed after last sync\\n    console.log(rangeToGet.values);\\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color of Selected Range with Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet illustrates how to change the fill color of the currently selected range in an Excel workbook to yellow using the Excel JavaScript API. It uses getSelectedRange combined with the format.fill.color property and requires execution within an Office.js enabled add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let range = context.workbook.getSelectedRange();\\n    range.format.fill.color = \\\"yellow\\\";\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Workbook Settings in Excel using Office JavaScript API\nDESCRIPTION: Shows how to add a setting (`NeedsReview`) to the current Excel workbook using `context.workbook.settings.add()`, retrieve it using `getItem()`, load its value, and log it. This method persists data specific to the current workbook and add-in pairing. Dependencies: Excel JavaScript API (`Excel.run`, `context.workbook.settings`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    settings.add(\"NeedsReview\", true);\n    const needsReview = settings.getItem(\"NeedsReview\");\n    needsReview.load(\"value\");\n\n    await context.sync();\n    console.log(\"Workbook needs review : \" + needsReview.value);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Ribbon Control Availability (Typed) - TypeScript\nDESCRIPTION: Provides a TypeScript example for programmatically enabling a ribbon button at runtime, utilizing Office JS API types (`Control`, `Group`, `Tab`, `RibbonUpdaterData`) for better type safety and clarity. It defines the structure for the button, parent group, and parent tab before constructing the `RibbonUpdaterData` object and calling `Office.ribbon.requestUpdate()`. This requires a shared runtime and RibbonApi 1.1.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst enableButton = async () => {\n    const button: Control = { id: \"MyButton\", enabled: true };\n    const parentGroup: Group = { id: \"CustomGroup111\", controls: [button] };\n    const parentTab: Tab = { id: \"OfficeAddinTab1\", groups: [parentGroup] };\n    const ribbonUpdater: RibbonUpdaterData = { tabs: [parentTab] };\n    Office.ribbon.requestUpdate(ribbonUpdater);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking WordApiOnline Requirement Set Support in Office JavaScript API - JavaScript\nDESCRIPTION: This runtime check targets the \"WordApiOnline\" requirement set version 1.1, ensuring that APIs specific to the online version of Word are queried safely. This code should be used for conditionally enabling features only available to web-based Word clients. The example requires the Office JavaScript API, with the key parameters set name (\"WordApiOnline\") and version (\"1.1\").\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/platform-specific-requirement-sets.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (Office.context.requirements.isSetSupported(\"WordApiOnline\", \"1.1\")) {\n   // Any API exclusive to the WordApiOnline requirement set.\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Percent of Column Total Calculation in Excel PivotTable using JavaScript\nDESCRIPTION: This code illustrates how to apply a `ShowAsRule` to an Excel PivotTable data hierarchy using the Office JS API. It modifies the \"Sum of Crates Sold at Farm\" hierarchy to display values as a percentage of the column total (`Excel.ShowAsCalculation.percentOfColumnTotal`), using the \"Type\" row hierarchy's field as the `baseField`. It also renames the data hierarchy. Requires an active Excel PivotTable named \"Farm Sales\" with the specified data and row hierarchies.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    let farmDataHierarchy = pivotTable.dataHierarchies.getItem(\"Sum of Crates Sold at Farm\");\n\n    farmDataHierarchy.load(\"showAs\");\n    await context.sync();\n\n    // Show the crates of each fruit type sold at the farm as a percentage of the column's total.\n    let farmShowAs = farmDataHierarchy.showAs;\n    farmShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;\n    farmShowAs.baseField = pivotTable.rowHierarchies.getItem(\"Type\").fields.getItem(\"Type\");\n    farmDataHierarchy.showAs = farmShowAs;\n    farmDataHierarchy.name = \"Percentage of Total Farm Sales\";\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Spam Reporting Event Handler in Outlook Add-in (JavaScript)\nDESCRIPTION: This JavaScript code defines the `onSpamReport` function, which serves as the event handler for the `SpamReporting` event in an Outlook add-in. The function receives an `event` object as a parameter and includes placeholders for the logic to send a copy of the reported message, retrieve user responses from the preprocessing dialog, and signal completion of the event processing. Crucially, `Office.actions.associate` is called to map the function name 'onSpamReport' (defined in the manifest) to this JavaScript function, ensuring it gets executed when the user initiates a spam report.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Handles the SpamReporting event to process a reported message.\nfunction onSpamReport(event) {\n  // TODO - Send a copy of the reported message.\n\n  // TODO - Get the user's responses.\n\n  // TODO - Signal that the spam-reporting event has completed processing.\n}\n\n// IMPORTANT: To ensure your add-in is supported in Outlook, remember to map the event handler name specified in the manifest to its JavaScript counterpart.\nOffice.actions.associate(\"onSpamReport\", onSpamReport);\n```\n\n----------------------------------------\n\nTITLE: Setting Sensitivity Label by GUID in Office.js - JavaScript\nDESCRIPTION: This snippet checks if the sensitivity label catalog is enabled, fetches available labels, and sets a mail item's sensitivity label using the label's GUID. It showcases asynchronous calls to the Office.js API, layered status checks, and appropriate error logging. Key parameters include the callback structure for Office.context.sensitivityLabelsCatalog.getIsEnabledAsync, the label GUID, and handling of Office.AsyncResultStatus. Requires Office.js and a running Outlook add-in context. The input is inferred from catalog results, and output logs indicate success or errors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/sensitivity-label.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// It's recommended to check the status of the catalog of sensitivity labels before\n// calling other sensitivity label methods.\nOffice.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {\n        // Identify available sensitivity labels in the catalog.\n        Office.context.sensitivityLabelsCatalog.getAsync((asyncResult) => {\n            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n                const catalog = asyncResult.value;\n                if (catalog.length > 0) {\n                    // Get the GUID of the sensitivity label.\n                    var id = catalog[0].id;\n                    // Set the mail item's sensitivity label using the label's GUID.\n                    Office.context.mailbox.item.sensitivityLabel.setAsync(id, (asyncResult) => {\n                        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n                            console.log(asyncResult.status);\n                        } else {\n                            console.log(\"Action failed with error: \" + asyncResult.error.message);\n                        }\n                    });\n                } else {\n                    console.log(\"Catalog list is empty\");\n                }\n            } else {\n                console.log(\"Action failed with error: \" + asyncResult.error.message);\n            }\n        });\n    } else {\n        console.log(\"Action failed with error: \" + asyncResult.error.message);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Axis Major Gridlines in an Excel Chart using JavaScript\nDESCRIPTION: Accesses the value axis of the first chart on the 'Sample' worksheet and sets the visibility of its major gridlines to false, effectively hiding them. Setting it to true would show them.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let chart = sheet.charts.getItemAt(0);\n    chart.axes.valueAxis.majorGridlines.visible = false;\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Range Values in Excel via JavaScript API\nDESCRIPTION: This JavaScript snippet demonstrates setting the value of an Excel range using the Office JavaScript API. When executed within an Office Add-in in a coauthored workbook, this change to the range's value ('Contoso') is automatically synchronized across all coauthors. It assumes 'range' is a pre-defined Excel.Range object obtained through the API. This illustrates how add-in actions can directly modify shared workbook content.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/co-authoring-in-excel-add-ins.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nrange.values = [['Contoso']];\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server on Mac - Command Line - Shell\nDESCRIPTION: This command runs the \\\"dev-server\\\" script using npm to start the local development server on Mac. It is required before proceeding with add-in development and testing. Requires Node.js/npm to be installed, and the project to be initialized with the appropriate scripts defined in the package.json. The command has no input parameters and its output is the startup of a local web server hosting the Office Add-in files.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/fluent-react-quickstart.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Formula Conditional Formatting - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet applies custom formula-based conditional formatting to a range of cells in Excel via the JavaScript API. The format colors cell fonts green if a cell's value is higher than the one to its immediate left, using an R1C1-style formula. The implementation needs the specified worksheet and range, and runs in the Excel add-in context; it relies on Office.js and proper formula assignment. Output reflects dynamic formatting based on cell comparisons.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(\n         Excel.ConditionalFormatType.custom\n    );\n    \n    // If a cell has a higher value than the one to its left, set that cell's font to green.\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n    \n    await context.sync();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Opening Sequential Office Dialogs with Recursive Error Handling - Office.js - JavaScript\nDESCRIPTION: Demonstrates how to reliably open a second Office Dialog only after the first has fully closed. The code uses Office.js's displayDialogAsync to open dialogs and recursively retries opening the second dialog if the initial attempt fails with error 12007 ('active dialog already open'), due to the asynchronous close operation. The openSecondDialog function handles retry logic while the openFirstDialog function orchestrates dialog closure and next steps. Dependencies: Office.js API loaded and Office.context.ui accessible. Parameters include dialog URLs and options such as width and height. Input is the trigger to start the dialog sequence, and output is the launching of dialogs or error handling. Limitation: Works only in the context of Office Add-ins with proper permissions configured.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-best-practices.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction openFirstDialog() {\n  Office.context.ui.displayDialogAsync(\n    \"https://MyDomain/firstDialog.html\",\n    { width: 50, height: 50 },\n    (result) => {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        const dialog = result.value;\n        dialog.close();\n        openSecondDialog();\n      }\n      else {\n         // Handle errors.\n      }\n    }\n  );\n}\n \nfunction openSecondDialog() {\n  Office.context.ui.displayDialogAsync(\n    \"https://MyDomain/secondDialog.html\",\n    { width: 50, height: 50 },\n    (result) => {\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        if (result.error.code === 12007) {\n          openSecondDialog(); // Recursive call.\n        }\n        else {\n         // Handle other errors.\n        }\n      }\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Property for Logged Events in Function Command (JavaScript)\nDESCRIPTION: JavaScript function `updateCustomProperties` for a function command. It loads the custom properties of the current mailbox item, sets the 'EventLogged' property to `true`, and saves the changes asynchronously. It signals completion using `event.completed({ allowEvent: true })` upon successful save and resets the global `event` variable. Depends on `Office.context.mailbox.item.loadCustomPropertiesAsync` and `customProperties.saveAsync`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nfunction updateCustomProperties() {\n  Office.context.mailbox.item.loadCustomPropertiesAsync((customPropertiesResult) => {\n    if (customPropertiesResult.status === Office.AsyncResultStatus.Succeeded) {\n      const customProperties = customPropertiesResult.value;\n      customProperties.set(\"EventLogged\", true);\n      customProperties.saveAsync((setSaveAsyncResult) => {\n        if (setSaveAsyncResult.status === Office.AsyncResultStatus.Succeeded) {\n          console.log(\"EventLogged custom property saved successfully.\");\n          event.completed({ allowEvent: true });\n          event = undefined;\n        }\n      });\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Ranges for Outlines with Excel JavaScript API in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to group both rows and columns at various levels in a worksheet using the Excel JavaScript API. It utilizes the Range.group method with the context of an Office Add-in to create multi-level outlines, enabling users to collapse and expand data hierarchically. Dependencies include the Excel JavaScript API and execution within an Excel-enabled Office Add-in context. Parameters used are worksheet and range identifiers (e.g., '4:9', 'C:Q'), and all groupings are performed via the 'Excel.run' batch operation. The expected outcome is a worksheet with outlined, collapsible regions for both rows and columns; limitations include Excel's maximum support for eight outline levels.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-group.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    // Group the larger, main level. Note that the outline controls\n    // will be on row 10, meaning 4-9 will collapse and expand.\n    sheet.getRange(\"4:9\").group(Excel.GroupOption.byRows);\n\n    // Group the smaller, sublevels. Note that the outline controls\n    // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.\n    sheet.getRange(\"4:5\").group(Excel.GroupOption.byRows);\n    sheet.getRange(\"7:8\").group(Excel.GroupOption.byRows);\n\n    // Group the larger, main level. Note that the outline controls\n    // will be on column R, meaning C-Q will collapse and expand.\n    sheet.getRange(\"C:Q\").group(Excel.GroupOption.byColumns);\n\n    // Group the smaller, sublevels. Note that the outline controls\n    // will be on columns G, L, and R, meaning C-F, H-K, and M-P will collapse and expand.\n    sheet.getRange(\"C:F\").group(Excel.GroupOption.byColumns);\n    sheet.getRange(\"H:K\").group(Excel.GroupOption.byColumns);\n    sheet.getRange(\"M:P\").group(Excel.GroupOption.byColumns);\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Moving a Shape Group in Excel using JavaScript\nDESCRIPTION: This snippet retrieves a previously created shape group named \"Group\" from 'MyWorksheet' and moves it 50 pixels to the right by calling the `incrementLeft` method. This demonstrates manipulating a group as a single shape via the Excel JavaScript API. It assumes the shape group \"Group\" already exists on the specified worksheet.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// This sample moves the previously created shape group to the right by 50 pixels.\nawait Excel.run(async (context) => {\n    let shapes = context.workbook.worksheets.getItem(\"MyWorksheet\").shapes;\n    let shapeGroup = shapes.getItem(\"Group\");\n    shapeGroup.incrementLeft(50);\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler for 'Insert Table' Button in JavaScript\nDESCRIPTION: This JavaScript code retrieves the 'insert-table' button element by its ID and assigns a click event handler. Clicking the button executes the `insertTable` function, which is wrapped in a `tryCatch` function for error management. This links the button to the table insertion logic.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"insert-table\").onclick = () => tryCatch(insertTable);\n```\n\n----------------------------------------\n\nTITLE: Defining Ribbon Tabs and Groups - JSON - manifest\nDESCRIPTION: This snippet configures ribbon 'tabs' as an array of tab objects, each with a 'builtInTabID' and a 'groups' array. The 'builtInTabID' determines the built-in ribbon tab where the custom group will appear, and the 'groups' contain custom command UI controls. All tabs and groups must meet schema requirements; usage depends on associating group and control objects defined elsewhere in the manifest. Inputs are specific IDs and output is group placement within a ribbon tab.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"tabs\": [\n    {\n        \"builtInTabID\": \"TabDefault\",\n        \"groups\": [\n            {\n                // properties omitted\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Preparing Document for TOC Insertion - Office.js - JavaScript\nDESCRIPTION: This setup utility function prepares a Word document for TOC field demonstration by programmatically inserting a sequence of formatted paragraphs, including titles and headings, using Office.js. It ensures document contents are reset, and paragraphs are assigned the correct built-in style names so that TOC construction will identify appropriate entries. The snippet uses TypeScript-style type annotation for instructional purposes but can be adapted to plain JavaScript.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/fields-guidance.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Prep document so there'll be elements that could be included in a table of contents.\\nasync function setup() {\\n  await Word.run(async (context) => {\\n    const body: Word.Body = context.document.body;\\n    body.clear();\\n    body.insertParagraph(\\\"Document title\\\", \\\"End\\\").styleBuiltIn = Word.BuiltInStyleName.title;\\n    body.insertParagraph(\\\"[To place table of contents]\\\", \\\"End\\\").styleBuiltIn = Word.BuiltInStyleName.normal;\\n    body.insertParagraph(\\\"Introduction\\\", \\\"End\\\").styleBuiltIn = Word.BuiltInStyleName.heading1;\\n    body.insertParagraph(\\\"Paragraph 1\\\", \\\"End\\\").styleBuiltIn = Word.BuiltInStyleName.normal;\\n    body.insertParagraph(\\\"Topic 1\\\", \\\"End\\\").styleBuiltIn = Word.BuiltInStyleName.heading1;\\n    body.insertParagraph(\\\"Paragraph 2\\\", \\\"End\\\").styleBuiltIn = Word.BuiltInStyleName.normal;\\n    body.insertParagraph(\\\"Topic 2\\\", \\\"End\\\").styleBuiltIn = Word.BuiltInStyleName.heading1;\\n    body.insertParagraph(\\\"Paragraph 3\\\", \\\"End\\\").styleBuiltIn = Word.BuiltInStyleName.normal;\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling Comment Addition Events in Excel using JavaScript\nDESCRIPTION: This snippet registers an event handler (`commentAdded`) for the `onAdded` event on the active worksheet's comments collection using the Excel JavaScript API. The handler function retrieves the ID of the added comment from the `event.commentDetails` array, fetches the comment object, loads its content and author name, and logs this information. Note: This example assumes only a single comment is added simultaneously.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let comments = context.workbook.worksheets.getActiveWorksheet().comments;\n\n    // Register the onAdded comment event handler.\n    comments.onAdded.add(commentAdded);\n\n    await context.sync();\n});\n\nasync function commentAdded() {\n    await Excel.run(async (context) => {\n        // Retrieve the added comment using the comment ID.\n        // Note: This method assumes only a single comment is added at a time. \n        let addedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);\n\n        // Load the added comment's data.\n        addedComment.load([\"content\", \"authorName\"]);\n\n        await context.sync();\n\n        // Print out the added comment's data.\n        console.log(`A comment was added. ID: ${event.commentDetails[0].commentId}. Comment content:${addedComment.content}. Comment author:${addedComment.authorName}`);\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Conditional Formats with Explicit Priority in Excel JavaScript API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add two conditional formats to a data range in an Excel worksheet using the JavaScript API for Office Add-ins. It sets priorities to resolve conflicting formatting rules, ensuring that negative numbers are displayed in blue with high priority and low numbers are made bold and red otherwise. Dependencies include the Office.js library and an Excel workbook with a worksheet named 'Sample' and a table named 'TemperatureTable'. The main parameters involve configuring font and fill colors, as well as setting the priority for each format. The expected output is that only one format applies to each cell based on the defined priorities, with negative values showing in blue and other low numbers in bold dark red. Limitations: the Office.js API must be available and used within an Excel Add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n    \n    \n    // Set low numbers to bold, dark red font and assign priority 1.\n    const presetFormat = temperatureDataRange.conditionalFormats\n        .add(Excel.ConditionalFormatType.presetCriteria);\n    presetFormat.preset.format.font.color = \"red\";\n    presetFormat.preset.format.font.bold = true;\n    presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };\n    presetFormat.priority = 1;\n    \n    // Set negative numbers to blue font with green background and set priority 0.\n    const cellValueFormat = temperatureDataRange.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    cellValueFormat.cellValue.format.font.color = \"blue\";\n    cellValueFormat.cellValue.format.fill.color = \"lightgreen\";\n    cellValueFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n    cellValueFormat.priority = 0;\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Navigation Logic with Office.js in JavaScript\nDESCRIPTION: This JavaScript code defines the functions (`addSlides`, `goToFirstSlide`, `goToLastSlide`, `goToPreviousSlide`, `goToNextSlide`) referenced by the event handlers. The `addSlides` function uses `PowerPoint.run` to add two slides asynchronously. The navigation functions use `Office.context.document.goToByIdAsync` with specific `Office.Index` values (First, Last, Previous, Next) to change the active slide in PowerPoint. Basic error handling is included, calling a `showNotification` function on failure. This code replaces a placeholder `TODO9` in `Home.js` and requires the Office JavaScript API (Office.js).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addSlides() {\n    await PowerPoint.run(async function (context) {\n        context.presentation.slides.add();\n        context.presentation.slides.add();\n\n        await context.sync();\n\n        showNotification(\"Success\", \"Slides added.\");\n        goToLastSlide();\n    });\n}\n\nfunction goToFirstSlide() {\n    Office.context.document.goToByIdAsync(Office.Index.First, Office.GoToType.Index,\n        function (asyncResult) {\n            if (asyncResult.status == \"failed\") {\n                showNotification(\"Error\", asyncResult.error.message);\n            }\n        });\n}\n\nfunction goToLastSlide() {\n    Office.context.document.goToByIdAsync(Office.Index.Last, Office.GoToType.Index,\n        function (asyncResult) {\n            if (asyncResult.status == \"failed\") {\n                showNotification(\"Error\", asyncResult.error.message);\n            }\n        });\n}\n\nfunction goToPreviousSlide() {\n    Office.context.document.goToByIdAsync(Office.Index.Previous, Office.GoToType.Index,\n        function (asyncResult) {\n            if (asyncResult.status == \"failed\") {\n                showNotification(\"Error\", asyncResult.error.message);\n            }\n        });\n}\n\nfunction goToNextSlide() {\n    Office.context.document.goToByIdAsync(Office.Index.Next, Office.GoToType.Index,\n        function (asyncResult) {\n            if (asyncResult.status == \"failed\") {\n                showNotification(\"Error\", asyncResult.error.message);\n            }\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Filters from an Excel Slicer using Office JS API\nDESCRIPTION: This snippet shows how to remove all active filters applied by a specific slicer named 'Fruit Slicer'. It retrieves the slicer object and calls its `clearFilters` method. This makes all items in the slicer selectable again and removes the corresponding filter from the connected PivotTable or table. Requires an `Excel.run` context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    let slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    slicer.clearFilters();\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Excel EntityCellValue with Multiple Properties in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to construct an `Excel.EntityCellValue` object. It defines the `type` as entity, sets the display `text`, and includes a `properties` object containing various data types (String, WebImage, FormattedNumber, Boolean) representing product details like ID, Name, Image, Quantity, Price, and Discontinued status. The `layouts` property is present but empty, indicating layout settings will be defined elsewhere.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-data-types-entity-card.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n```TypeScript\nconst entity: Excel.EntityCellValue = {\n    type: Excel.CellValueType.entity,\n    text: productName,\n    properties: {\n        \"Product ID\": {\n            type: Excel.CellValueType.string,\n            basicValue: productID.toString() || \"\"\n        },\n        \"Product Name\": {\n            type: Excel.CellValueType.string,\n            basicValue: productName || \"\"\n        },\n        \"Image\": {\n            type: Excel.CellValueType.webImage,\n            address: product.productImage || \"\"\n        },\n        \"Quantity Per Unit\": {\n            type: Excel.CellValueType.string,\n            basicValue: product.quantityPerUnit || \"\"\n        },\n        \"Unit Price\": {\n            type: Excel.CellValueType.formattedNumber,\n            basicValue: product.unitPrice,\n            numberFormat: \"$* #,##0.00\"\n        },\n        Discontinued: {\n            type: Excel.CellValueType.boolean,\n            basicValue: product.discontinued || false\n        }\n    },\n    layouts: {\n        // Enter layout settings here.\n    }\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Mailbox Permissions in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet configures the authorization permissions for an Outlook add-in using the unified manifest format. It specifically grants the `Mailbox.ReadWrite.User` permission using the `resourceSpecific` array, allowing the add-in delegated access to read and write user mailbox data, which is necessary for interacting with multiple selected items.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/item-multi-select.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"authorization\": {\n    \"permissions\": {\n        \"resourceSpecific\": [\n            {\n                \"name\": \"Mailbox.ReadWrite.User\",\n                \"type\": \"Delegated\"\n            }\n        ]\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Adding a Formula Column to an Excel Table using Office.js - JavaScript\nDESCRIPTION: Appends a new column to the \"ExpensesTable\" containing a header and cell formulas that calculate whether each date falls on a weekend or weekday. Utilizes the Excel JavaScript API, requiring the add-in context, and assumes the specified table exists. Each cell formula uses the DATE column of the table to determine the result. The outcome is a table with a \"Type of the Day\" column filled by formulas.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n    let expensesTable = sheet.tables.getItem(\\\"ExpensesTable\\\");\\n\\n    expensesTable.columns.add(null /*add columns to the end of the table*/, [\\n        [\\\"Type of the Day\\\"],\\n        ['=IF(OR((TEXT([DATE], \\\"dddd\\\") = \\\"Saturday\\\"), (TEXT([DATE], \\\"dddd\\\") = \\\"Sunday\\\")), \\\"Weekend\\\", \\\"Weekday\\\")'],\\n        ['=IF(OR((TEXT([DATE], \\\"dddd\\\") = \\\"Saturday\\\"), (TEXT([DATE], \\\"dddd\\\") = \\\"Sunday\\\")), \\\"Weekend\\\", \\\"Weekday\\\")'],\\n        ['=IF(OR((TEXT([DATE], \\\"dddd\\\") = \\\"Saturday\\\"), (TEXT([DATE], \\\"dddd\\\") = \\\"Sunday\\\")), \\\"Weekend\\\", \\\"Weekday\\\")'],\\n        ['=IF(OR((TEXT([DATE], \\\"dddd\\\") = \\\"Saturday\\\"), (TEXT([DATE], \\\"dddd\\\") = \\\"Sunday\\\")), \\\"Weekend\\\", \\\"Weekday\\\")'],\\n        ['=IF(OR((TEXT([DATE], \\\"dddd\\\") = \\\"Saturday\\\"), (TEXT([DATE], \\\"dddd\\\") = \\\"Sunday\\\")), \\\"Weekend\\\", \\\"Weekday\\\")'],\\n        ['=IF(OR((TEXT([DATE], \\\"dddd\\\") = \\\"Saturday\\\"), (TEXT([DATE], \\\"dddd\\\") = \\\"Sunday\\\")), \\\"Weekend\\\", \\\"Weekday\\\")'],\\n        ['=IF(OR((TEXT([DATE], \\\"dddd\\\") = \\\"Saturday\\\"), (TEXT([DATE], \\\"dddd\\\") = \\\"Sunday\\\")), \\\"Weekend\\\", \\\"Weekday\\\")']\\n    ]);\\n\\n    sheet.getUsedRange().format.autofitColumns();\\n    sheet.getUsedRange().format.autofitRows();\\n\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc @param for Function Parameter IntelliSense in JavaScript\nDESCRIPTION: Illustrates using the JSDoc `@param` tag to define the type (`Word.ParagraphCollection`) and name (`paragraphs`) of a function parameter. This allows Visual Studio to provide accurate IntelliSense suggestions for the `paragraphs` parameter when accessed within the `myFunc` function body.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-javascript-intellisense-in-visual-studio.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @param {Word.ParagraphCollection} paragraphs */\nfunction myFunc(paragraphs){\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppSource Add-in Reference in Excel via Open XML SDK (C#)\nDESCRIPTION: This C# snippet, part of the `SpreadsheetBuilder.GenerateWebExtensionPart1Content` method, uses the Open XML SDK to define a reference to an Office Add-in hosted on Microsoft AppSource (specifically Script Lab in this example). It sets the `Id` (AppSource asset ID WA104380862), `Version`, `Store` (culture, e.g., \"en-US\"), and `StoreType` (\"OMEX\" for Microsoft AppSource) properties required to embed and potentially automatically open the add-in when the generated spreadsheet is opened. This code runs within an Azure Function responsible for creating the spreadsheet.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/pnp-open-in-excel.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nWe.WebExtensionStoreReference webExtensionStoreReference1 = new We.WebExtensionStoreReference() { Id = \"wa104380862\", Version = \"1.1.0.0\", Store = \"en-US\", StoreType = \"OMEX\" };\n```\n\n----------------------------------------\n\nTITLE: Detecting Selection Changes with Office.js Event Handler in JavaScript\nDESCRIPTION: This snippet shows how to detect when the document's current selection changes by adding an event handler with addHandlerAsync for the documentSelectionChanged event. When triggered, the handler function outputs a message to the page. It requires Office.js and a page element with id 'message'. You can register multiple handlers by calling addHandlerAsync with different function names.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/read-and-write-data-to-the-active-selection-in-a-document-or-spreadsheet.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.document.addHandlerAsync(\"documentSelectionChanged\", myHandler, function(result){}\n);\n\n// Event handler function.\nfunction myHandler(eventArgs){\n    write('Document Selection Changed');\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Event Handler from an Office Binding using JavaScript\nDESCRIPTION: This snippet illustrates how to remove a previously attached event handler (`dataChanged`) from the `DataChanged` event of a specific binding ('MyBinding') using the `removeHandlerAsync` method. It specifies the event type (`Office.EventType.BindingDataChanged`) and provides the handler function to be removed within an object.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction removeEventHandlerFromBinding() {\n    Office.select(\"bindings#MyBinding\").removeHandlerAsync(\n        Office.EventType.BindingDataChanged, {handler:dataChanged});\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Worksheet by Name with Excel JavaScript API\nDESCRIPTION: Activates a specific worksheet identified by its name (\"Sample\") using the `getItem()` and `activate()` methods. It then loads the activated sheet's 'name' property and logs it. This operation will throw an `ItemNotFound` error if a worksheet named \"Sample\" does not exist.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.activate();\n    sheet.load(\"name\");\n\n    await context.sync();\n    console.log(`The active worksheet is \"${sheet.name}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Repeating Parameters in a TypeScript Custom Function\nDESCRIPTION: This TypeScript custom function `ADD` demonstrates the use of repeating parameters. The parameter `operands` is typed as `number[][][]`, allowing the user to input a variable number of arguments, which can be single numbers, cell addresses, or cell ranges. Excel passes these arguments as a three-dimensional array. The function iterates through all provided values and returns their sum.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* The sum of all of the numbers.\n* @customfunction\n* @param operands A number (such as 1 or 3.1415), a cell address (such as A1 or $E$11), or a range of cell addresses (such as B3:F12)\n*/\n\nfunction ADD(operands: number[][][]): number {\n  let total: number = 0;\n\n  operands.forEach(range => {\n    range.forEach(row => {\n      row.forEach(num => {\n        total += num;\n      });\n    });\n  });\n\n  return total;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Sort Table Button Click Handler - Office.js JavaScript\nDESCRIPTION: Assigns an event listener to the 'sort-table' HTML button so that clicking it invokes the sortTable function wrapped in tryCatch. This ensures the sort operation is handled asynchronously with error handling and is properly registered once the Office environment and DOM are loaded.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\\\"sort-table\\\").onclick = () => tryCatch(sortTable);\n```\n\n----------------------------------------\n\nTITLE: Sample Output: Range Text as JSON - Excel JavaScript API - JSON\nDESCRIPTION: Outputs a 2D array containing the formatted text for cells in B2:E6, including stringified numbers and formula results. Demonstrates how Excel's display text can differ from raw values (e.g., numbers shown as strings). Useful for confirming expected user-visible values in automated add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n    [\n        \"Product\",\n        \"Qty\",\n        \"Unit Price\",\n        \"Total Price\"\n    ],\n    [\n        \"Almonds\",\n        \"2\",\n        \"7.5\",\n        \"15\"\n    ],\n    [\n        \"Coffee\",\n        \"1\",\n        \"34.5\",\n        \"34.5\"\n    ],\n    [\n        \"Chocolate\",\n        \"5\",\n        \"9.56\",\n        \"47.8\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\",\n        \"97.3\"\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Stopping the Local Web Server using npm\nDESCRIPTION: This command is used in the command prompt to stop the Node.js local web server that is hosting the Office Add-in for development purposes. This is often necessary before clearing the cache or updating the add-in manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_44\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Implementing On-Send Subject Validation and CC Addition in JavaScript\nDESCRIPTION: This JavaScript code defines functions for an Outlook add-in's on-send event handler. The `validateSubjectAndCC` function serves as the entry point, triggered by the `ItemSend` event. It calls `shouldChangeSubjectOnSend` which asynchronously retrieves the current email subject. This function checks if the subject is empty (blocking the send and showing an error if true) or if it already contains the text '[Checked]'. If the subject is valid but not yet marked, it calls `addCCOnSend` to add 'Contoso@contoso.onmicrosoft.com' to the CC line and then `subjectOnSendChange` to prepend '[Checked]: ' to the subject line. The `event.completed({ allowEvent: ... })` method, accessed via `asyncResult.asyncContext`, is crucial for controlling whether the email sending process is allowed to continue based on the validation checks and modifications. Dependencies include the Office JavaScript API (Office.js) and the Outlook add-in runtime environment which provides the `mailboxItem` object and the `event` parameter for the on-send handler.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n// Invoke by Contoso Subject and CC Checker add-in before send is allowed.\n// <param name=\"event\">ItemSend event is automatically passed by on-send code to the function specified in the manifest.</param>\nfunction validateSubjectAndCC(event) {\n    shouldChangeSubjectOnSend(event);\n}\n\n// Determine whether the subject should be changed. If it is already changed, allow send. Otherwise change it.\n// <param name=\"event\">ItemSend event passed from the calling function.</param>\nfunction shouldChangeSubjectOnSend(event) {\n    mailboxItem.subject.getAsync(\n        { asyncContext: event },\n        function (asyncResult) {\n            addCCOnSend(asyncResult.asyncContext);\n            //console.log(asyncResult.value);\n            // Match string.\n            const checkSubject = (new RegExp(/\\[Checked\\]/)).test(asyncResult.value)\n            // Add [Checked]: to subject line.\n            subject = '[Checked]: ' + asyncResult.value;\n\n            // Determine whether a string is blank, null, or undefined.\n            // If yes, block send and display information bar to notify sender to add a subject.\n            if (asyncResult.value === null || (/^\\s*$/).test(asyncResult.value)) {\n                mailboxItem.notificationMessages.addAsync('NoSend', { type: 'errorMessage', message: 'Please enter a subject for this email.' });\n                asyncResult.asyncContext.completed({ allowEvent: false });\n            }\n            else {\n                // If can't find a [Checked]: string match in subject, call subjectOnSendChange function.\n                if (!checkSubject) {\n                    subjectOnSendChange(subject, asyncResult.asyncContext);\n                    //console.log(checkSubject);\n                }\n                else {\n                    // Allow send.\n                    asyncResult.asyncContext.completed({ allowEvent: true });\n                }\n            }\n        });\n}\n\n// Add a CC to the email. In this example, CC contoso@contoso.onmicrosoft.com\n// <param name=\"event\">ItemSend event passed from calling function</param>\nfunction addCCOnSend(event) {\n    mailboxItem.cc.setAsync(['Contoso@contoso.onmicrosoft.com'], { asyncContext: event });\n}\n\n// Determine whether the subject should be changed. If it is already changed, allow send, otherwise change it.\n// <param name=\"subject\">Subject to set.</param>\n// <param name=\"event\">ItemSend event passed from the calling function.</param>\nfunction subjectOnSendChange(subject, event) {\n    mailboxItem.subject.setAsync(\n        subject,\n        { asyncContext: event },\n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                mailboxItem.notificationMessages.addAsync('NoSend', { type: 'errorMessage', message: 'Unable to set the subject.' });\n\n                // Block send.\n                asyncResult.asyncContext.completed({ allowEvent: false });\n            }\n            else {\n                // Allow send.\n                asyncResult.asyncContext.completed({ allowEvent: true });\n            }\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking WordApiDesktop Requirement Set Support in Office JavaScript API - JavaScript\nDESCRIPTION: This snippet checks at runtime whether the \"WordApiDesktop\" requirement set version 1.1 is supported, ensuring that platform-specific APIs are only invoked in environments where they are available (such as Word on Windows or Mac). The check guards the execution of any code block that uses APIs exclusive to this requirement set, preventing runtime errors on unsupported platforms. Dependencies include the Office JavaScript API, and the key input parameters are the requirement set name (\"WordApiDesktop\") and its version (\"1.1\").\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/platform-specific-requirement-sets.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (Office.context.requirements.isSetSupported(\"WordApiDesktop\", \"1.1\")) {\n   // Any API exclusive to this WordApiDesktop requirement set.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ribbon Requirements - JSON\nDESCRIPTION: Defines how to restrict custom ribbon UI elements and commands in a manifest, making them appear only on host versions that support sufficient features (Mailbox version 1.9 or higher). Intended to block unavailable features for older Office versions while keeping the add-in broadly installable. Inputs specify the targeted API and version, output is granular activation of ribbon customizations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requirements-property-unified-manifest.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\\n    ...\\n    {\\n        ...\\n        \"ribbons\": [\\n            ...\\n            {\\n                // Insert details of the ribbon configuration here.\\n\\n                \"requirements\": {\\n                    \"capabilities\": [\\n                        {\\n                            \"name\": \"Mailbox\",\\n                            \"minVersion\": \"1.9\"\\n                        }\\n                    ]\\n                }\\n            }\\n        ]\\n    }\\n]\n```\n\n----------------------------------------\n\nTITLE: Printing All Shape Texts on Active Page Using Visio.run and Batching (JavaScript)\nDESCRIPTION: Shows a full workflow for using Visio.run to batch retrieve and print the text property of all shape objects on the active page of a Visio diagram. The batch acquires page and shapes proxy objects, loads shape data with load(), and synchronizes to retrieve the actual state before printing. Includes error handling for both general and OfficeExtension-specific errors. Dependencies: Visio JavaScript API, active EmbeddedSession, and OfficeExtension.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/reference/overview/visio-javascript-reference-overview.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nVisio.run(session, function (context) {\\n    const page = context.document.getActivePage();\\n    const shapes = page.shapes;\\n    shapes.load();\\n    return context.sync().then(function () {\\n        for(let i=0; i<shapes.items.length;i++) {\\n            let shape = shapes.items[i];\\n            window.console.log(\\\"Shape Text: \\\" + shape.text );\\n        }\\n    });\\n}).catch(function(error) {\\n    window.console.log(\\\"Error: \\\" + error);\\n    if (error instanceof OfficeExtension.Error) {\\n        window.console.log (\\\"Debug info: \\\" + JSON.stringify(error.debugInfo));\\n    }\\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attachments and Content in Outlook Compose using Office JavaScript API\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve all attachments from the current Outlook compose item and then fetch the content for each attachment. It first calls `getAttachmentsAsync` (requires requirement set 1.8) to get the list of attachments. In the callback, it iterates through the attachments and calls `getAttachmentContentAsync` for each one. A separate callback function `handleAttachmentsCallback` processes the content based on its format (Base64, Eml, ICalendar, Url).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-and-remove-attachments-to-an-item-in-a-compose-form.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = Office.context.mailbox.item;\nconst options = { asyncContext: { currentItem: item } };\nitem.getAttachmentsAsync(options, callback);\n\nfunction callback(result) {\n  if (result.value.length > 0) {\n    for (let i = 0 ; i < result.value.length ; i++) {\n      result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);\n    }\n  }\n}\n\nfunction handleAttachmentsCallback(result) {\n  // Parse string to be a url, an .eml file, a Base64-encoded string, or an .icalendar file.\n  switch (result.value.format) {\n    case Office.MailboxEnums.AttachmentContentFormat.Base64:\n      // Handle file attachment.\n      break;\n    case Office.MailboxEnums.AttachmentContentFormat.Eml:\n      // Handle email item attachment.\n      break;\n    case Office.MailboxEnums.AttachmentContentFormat.ICalendar:\n      // Handle .icalender attachment.\n      break;\n    case Office.MailboxEnums.AttachmentContentFormat.Url:\n      // Handle cloud attachment.\n      break;\n    default:\n      // Handle attachment formats that are not supported.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Subject Using Office.js in Outlook Add-ins - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to set the subject of a message or appointment being composed in an Outlook add-in, using Office.js. After ensuring the Office.js environment is ready, it creates a subject string (inserting today’s date), and uses setAsync to overwrite the current subject, with optional context variables and an error-handling callback. The required context is an Outlook add-in compose form, with Office.js loaded. The parameter is a string up to 255 characters for the new subject, and the output is the updated subject field in the compose item. Extra logic can be added using the optional asyncContext parameter.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-subject.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet item;\\n\\n// Confirms that the Office.js library is loaded.\\nOffice.onReady((info) => {\\n    if (info.host === Office.HostType.Outlook) {\\n        item = Office.context.mailbox.item;\\n        setSubject();\\n    }\\n});\\n\\n// Sets the subject of the item that the user is composing.\\nfunction setSubject() {\\n    // Customize the subject with today's date.\\n    const today = new Date();\\n    const subject = `Summary for ${today.toLocaleDateString()}`;\\n\\n    item.subject.setAsync(\\n        subject,\\n        { asyncContext: { optionalVariable1: 1, optionalVariable2: 2 } },\\n        (asyncResult) => {\\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\\n                write(asyncResult.error.message);\\n                return;\\n            }\\n\\n            /*\\n              The subject was successfully set.\\n              Run additional operations appropriate to your scenario and\\n              use the optionalVariable1 and optionalVariable2 values as needed.\\n            */\\n        });\\n}\\n\\n// Writes to a div with id=\\\"message\\\" on the page.\\nfunction write(message) {\\n    document.getElementById(\\\"message\\\").innerText += message; \\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Selected Items and Retrieving Properties Using Office.js (JavaScript)\nDESCRIPTION: This code exports an async run function that clears the message list and then retrieves subject lines and sender email addresses for all selected messages in Outlook using getSelectedItemsAsync and loadItemByIdAsync (with a requirement set check). Helper functions handle DOM list manipulation and sequential loading/unloading of message items. Dependencies include Office.js (requirement set 1.15 if retrieving sender), relevant DOM elements, and permissions to read mailbox items. Inputs are user message selections, outputs are updates to the task pane list. The code ensures that loadItemByIdAsync is used one message at a time, as required by platform constraints.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/item-multi-select.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function run() {\n  // Clear the list of previously selected messages, if any.\n  clearList(list);\n\n  // Get the subject line and sender's email address of each selected message and log them to a list in the task pane.\n  Office.context.mailbox.getSelectedItemsAsync((asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      console.log(asyncResult.error.message);\n      return;\n    }\n\n    const selectedItems = asyncResult.value;\n    getItemInfo(selectedItems);\n  });\n}\n\n// Gets the subject line and sender's email address of each selected message.\nasync function getItemInfo(selectedItems) {\n  for (const item of selectedItems) {\n    addToList(item.subject);\n    if (Office.context.requirements.isSetSupported(\"Mailbox\", \"1.15\")) {\n      await getSenderEmailAddress(item);\n    }\n  }\n}\n\n// Gets the sender's email address of each selected message.\nasync function getSenderEmailAddress(item) {\n  const itemId = item.itemId;\n  await new Promise((resolve) => {\n    Office.context.mailbox.loadItemByIdAsync(itemId, (result) => {\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        console.log(result.error.message);\n        return;\n      }\n\n      const loadedItem = result.value;\n      const sender = loadedItem.from.emailAddress;\n      appendToListItem(sender);\n\n      // Unload the current message before processing another selected message.\n      loadedItem.unloadAsync((asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n          console.log(asyncResult.error.message);\n          return;\n        }\n\n        resolve();\n      });\n    });\n  });\n}\n\n// Clears the list in the task pane.\nfunction clearList(list) {\n  while (list.firstChild) {\n    list.removeChild(list.firstChild);\n  }\n}\n\n// Adds an item to a list in the task pane.\nfunction addToList(item) {\n  const listItem = document.createElement(\"li\");\n  listItem.textContent = item;\n  list.appendChild(listItem);\n}\n\n// Appends data to the last item of the list in the task pane.\nfunction appendToListItem(data) {\n  const listItem = list.lastChild;\n  listItem.textContent += ` (${data})`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Task Pane Command Button for the Ribbon (JSON)\nDESCRIPTION: This snippet provides a complete example of a button control for a custom group in an Office Add-in manifest. It specifies unique ID, button type, label, required icons, supertip (tooltip) details, and an action ID that links to implemented JavaScript. Dependencies: icon URLs must be present and actionId must match JavaScript-side implementation. Inputs: Property values for UI, outputs: a ribbon button.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"msgReadOpenPaneButton\",\n    \"type\": \"button\",\n    \"label\": \"Show Task Pane\",\n    \"icons\": [\n        {\n            \"size\": 16,\n            \"url\": \"https://localhost:3000/assets/icon-16.png\"\n        },\n        {\n            \"size\": 32,\n            \"url\": \"https://localhost:3000/assets/icon-32.png\"\n        },\n        {\n            \"size\": 80,\n            \"url\": \"https://localhost:3000/assets/icon-80.png\"\n        }\n    ],\n    \"supertip\": {\n        \"title\": \"Show Contoso Task Pane\",\n        \"description\": \"Opens the Contoso task pane.\"\n    },\n    \"actionId\": \"ShowTaskPane\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Image Binary Data in DrawingML (XML)\nDESCRIPTION: This XML snippet shows the `a:blip` element from the DrawingML namespace within a Word document's `document.xml`. It demonstrates how an image is referenced using a relationship ID (`r:embed=\"rId4\"`) which points to the corresponding binary image data part within the Office Open XML package. Including the related binary part is crucial for the image to render correctly.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<a:blip r:embed=\"rId4\" cstate=\"print\">\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Get Selected Slide Metadata using Office JS\nDESCRIPTION: This JavaScript function `getSlideMetadata`, intended to replace `TODO7` in `taskpane.js`, uses the Office JS API (`Office.context.document.getSelectedDataAsync`) with `Office.CoercionType.SlideRange` to retrieve metadata for the currently selected slide(s) in PowerPoint. The result, containing slide details like ID, title, and index in a JSON format, is displayed using the `setMessage` function. Error handling for the asynchronous call is included. Requires the Office JS library and assumes `setMessage` function is defined.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nfunction getSlideMetadata() {\n  Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, (asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      setMessage(\"Error: \" + asyncResult.error.message);\n    } else {\n      setMessage(\"Metadata for selected slides: \" + JSON.stringify(asyncResult.value));\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cell Value (Checkbox State) using Excel JavaScript API\nDESCRIPTION: This snippet shows how to change the value of a specific cell (B3) to TRUE. If cell B3 is formatted as a checkbox, this action will check the box. If it's not a checkbox, it simply sets the cell's value to the Boolean TRUE. It accesses the active worksheet, gets the range 'B3', and updates its `values` property.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-checkboxes.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // This code sample shows how to change the value of cell B3.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const range = sheet.getRange(\"B3\");\n\n    range.values = [[\"TRUE\"]];\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler for 'Insert HTML' Button in JavaScript\nDESCRIPTION: This JavaScript code retrieves the 'insert-html' button element by its ID and assigns a click event handler. When the button is clicked, it calls the `insertHTML` function, wrapped within a `tryCatch` helper function for error handling. This connects the UI button to the HTML insertion logic.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"insert-html\").onclick = () => tryCatch(insertHTML);\n```\n\n----------------------------------------\n\nTITLE: Accepting a Range Parameter in a JavaScript Custom Function\nDESCRIPTION: This JavaScript custom function `secondHighest` accepts a range of cells as input. The JSDoc comment `@param {number[][]} values` signifies that the `values` parameter expects a two-dimensional array (matrix) of numbers, corresponding to a cell range from Excel. The function then iterates through this 2D array to find the second highest value.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns the second highest value in a matrixed range of values.\n * @customfunction\n * @param {number[][]} values Multiple ranges of values.\n */\nfunction secondHighest(values) {\n  let highest = values[0][0],\n    secondHighest = values[0][0];\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < values[i].length; j++) {\n      if (values[i][j] >= highest) {\n        secondHighest = highest;\n        highest = values[i][j];\n      } else if (values[i][j] >= secondHighest) {\n        secondHighest = values[i][j];\n      }\n    }\n  }\n  return secondHighest;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Menu Item to Show Task Pane in Manifest\nDESCRIPTION: This JSON snippet configures an individual item within a menu's 'items' array. It has a unique 'id', 'type' set to 'menuItem', a 'label' displayed in the dropdown, an optional 'supertip', and an 'actionId'. The 'actionId' ('ShowTaskPane' in this example) must correspond to an action defined in the 'runtimes' section of the manifest, which is configured to display a task pane.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"msgReadOpenPaneMenuItem\",\n    \"type\": \"menuItem\",\n    \"label\": \"Show Task Pane\",\n    \"supertip\": {\n        \"title\": \"Show Contoso Task Pane\",\n        \"description\": \"Opens the Contoso task pane.\"\n    },\n    \"actionId\": \"ShowTaskPane\"\n},\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling UI-less Add-in Command Button Logic - Office.js JavaScript\nDESCRIPTION: This JavaScript manages configuration state and default gist insertion in response to a command button press, employing Office.js APIs. It checks RoamingSettings, inserts gist content into the mail item body if configured, or launches the settings dialog if not. It handles dialog interaction events, uses Office.onReady for initialization, and shows errors via Office notification APIs. Requires Office.js, supporting helpers, and assumes event-driven activation. Limitations include reliance on Office context and proper helper implementation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet config;\nlet btnEvent;\n\n// The onReady function must be run each time a new page is loaded.\nOffice.onReady();\n\nfunction showError(error) {\n  Office.context.mailbox.item.notificationMessages.replaceAsync('github-error', {\n    type: 'errorMessage',\n    message: error\n  });\n}\n\nlet settingsDialog;\n\nfunction insertDefaultGist(event) {\n  config = getConfig();\n\n  // Check if the add-in has been configured.\n  if (config && config.defaultGistId) {\n    // Get the default gist content and insert.\n    try {\n      getGist(config.defaultGistId, function(gist, error) {\n        if (gist) {\n          buildBodyContent(gist, function (content, error) {\n            if (content) {\n              Office.context.mailbox.item.body.setSelectedDataAsync(\n                content,\n                { coercionType: Office.CoercionType.Html },\n                function (result) {\n                  event.completed();\n                }\n              );\n            } else {\n              showError(error);\n              event.completed();\n            }\n          });\n        } else {\n          showError(error);\n          event.completed();\n        }\n      });\n    } catch (err) {\n      showError(err);\n      event.completed();\n    }\n\n  } else {\n    // Save the event object so we can finish up later.\n    btnEvent = event;\n    // Not configured yet, display settings dialog with\n    // warn=1 to display warning.\n    const url = new URI('dialog.html?warn=1').absoluteTo(window.location).toString();\n    const dialogOptions = { width: 20, height: 40, displayInIframe: true };\n\n    Office.context.ui.displayDialogAsync(url, dialogOptions, function(result) {\n      settingsDialog = result.value;\n      settingsDialog.addEventHandler(Office.EventType.DialogMessageReceived, receiveMessage);\n      settingsDialog.addEventHandler(Office.EventType.DialogEventReceived, dialogClosed);\n    });\n  }\n}\n\n// Register the function.\nOffice.actions.associate(\"insertDefaultGist\", insertDefaultGist);\n\nfunction receiveMessage(message) {\n  config = JSON.parse(message.message);\n  setConfig(config, function(result) {\n    settingsDialog.close();\n    settingsDialog = null;\n    btnEvent.completed();\n    btnEvent = null;\n  });\n}\n\nfunction dialogClosed(message) {\n  settingsDialog = null;\n  btnEvent.completed();\n  btnEvent = null;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering and Storing Deregister Function for Visibility Changes (Simple)\nDESCRIPTION: This snippet shows a basic example of registering a handler for `VisibilityModeChanged` and storing the returned deregister function in a variable (`removeVisibilityModeHandler`). This function can be called later to remove the event handler. Note that this simple example lacks robust asynchronous handling.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/show-hide-add-in.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst removeVisibilityModeHandler =\n    Office.addin.onVisibilityModeChanged(function(args) {\n        if (args.visibilityMode == \"Taskpane\") {\n            // Code that runs whenever the task pane is made visible.\n        }\n    });\n\n\n// In some later code path, deregister with:\nremoveVisibilityModeHandler();\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in callWebServerAPI using JavaScript\nDESCRIPTION: This snippet, part of the `callWebServerAPI` function, first attempts to get an access token using the `getAccessToken` function (which handles SSO and fallback). If a token is obtained, it uses the `fetch` API to make a request to the specified web server API path (`path`) using the provided HTTP method (`method`). The access token is included in the 'Authorization' header. If the fetch request is successful (HTTP status 2xx), it parses and returns the JSON response body.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst accessToken = await getAccessToken(authSSO);\nif (accessToken === null) {\n    return null;\n}\nconst response = await fetch(path, {\n    method: method,\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken,\n    },\n});\n\n// Check for success condition: HTTP status code 2xx.\nif (response.ok) {\n    return response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Styled Paragraph Content in WordprocessingML (XML)\nDESCRIPTION: This XML snippet shows the body content (`w:body`) of a Word document fragment using Office Open XML (WordprocessingML). It demonstrates how a paragraph (`w:p`) applies the 'Heading 1' paragraph style (`w:pStyle`) to its text run (`w:r`). This illustrates the simplified markup achieved by referencing a predefined style instead of applying direct formatting.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<w:body>\n  <w:p>\n    <w:pPr>\n      <w:pStyle w:val=\"Heading1\"/>\n    </w:pPr>\n    <w:r>\n      <w:t>This text is formatted using the Heading 1 paragraph style.</w:t>\n    </w:r>\n  </w:p>\n</w:body>\n```\n\n----------------------------------------\n\nTITLE: Localizing Add-in SourceLocation per Form Factor in Office Manifest XML\nDESCRIPTION: This XML snippet shows how to localize the source HTML file (`SourceLocation`) for an Outlook add-in based on both locale and form factor. Separate `<SourceLocation>` elements within `<DesktopSettings>`, `<TabletSettings>`, and `<PhoneSettings>` define default HTML files using `DefaultValue` and provide French (`fr-fr`) overrides using the `<Override>` child element, allowing for different localized UIs per device type.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<DesktopSettings>\n   <SourceLocation DefaultValue=\"https://contoso.com/Desktop.html\">\n      <Override Locale=\"fr-fr\" Value=\"https://contoso.com/fr/Desktop.html\" />\n   </SourceLocation>\n   <RequestedHeight>250</RequestedHeight>\n</DesktopSettings>\n<TabletSettings>\n   <SourceLocation DefaultValue=\"https://contoso.com/Tablet.html\">\n      <Override Locale=\"fr-fr\" Value=\"https://contoso.com/fr/Tablet.html\" />\n   </SourceLocation>\n   <RequestedHeight>200</RequestedHeight>\n</TabletSettings>\n<PhoneSettings>\n   <SourceLocation DefaultValue=\"https://contoso.com/Mobile.html\">\n      <Override Locale=\"fr-fr\" Value=\"https://contoso.com/fr/Mobile.html\" />\n   </SourceLocation>\n</PhoneSettings>\n```\n\n----------------------------------------\n\nTITLE: Getting the Selected Range Address in Excel using JavaScript API\nDESCRIPTION: This snippet shows how to retrieve the address of the currently selected range in Excel using the JavaScript API. It gets the selected range object, loads its `address` property, synchronizes the context, and then logs the address to the console.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let range = context.workbook.getSelectedRange();\n    range.load(\"address\");\n\n    await context.sync();\n    \n    console.log(`The address of the selected range is \"${range.address}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering GitHub Gists with jQuery and AJAX - JavaScript\nDESCRIPTION: This snippet defines functions to fetch user gists from GitHub using the Gists API via jQuery AJAX and dynamically build a selectable list in the DOM. It requires jQuery and expects a callback for handling the loaded data or errors. Key parameters include the GitHub username, parent DOM node, click handler, and gist data. Output is added to the UI as radio-button lists; files in each gist are enumerated with their language. Limitations include dependency on the jQuery library, GitHub API availability, and browser environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getUserGists(user, callback) {\n  const requestUrl = 'https://api.github.com/users/' + user + '/gists';\n\n  $.ajax({\n    url: requestUrl,\n    dataType: 'json'\n  }).done(function(gists) {\n    callback(gists);\n  }).fail(function(error) {\n    callback(null, error);\n  });\n}\n\nfunction buildGistList(parent, gists, clickFunc) {\n  gists.forEach(function(gist) {\n\n    const listItem = $('<div/>')\n      .appendTo(parent);\n\n    const radioItem = $('<input>')\n      .addClass('ms-ListItem')\n      .addClass('is-selectable')\n      .attr('type', 'radio')\n      .attr('name', 'gists')\n      .attr('tabindex', 0)\n      .val(gist.id)\n      .appendTo(listItem);\n\n    const descPrimary = $('<span/>')\n      .addClass('ms-ListItem-primaryText')\n      .text(gist.description)\n      .appendTo(listItem);\n\n    const descSecondary = $('<span/>')\n      .addClass('ms-ListItem-secondaryText')\n      .text(' - ' + buildFileList(gist.files))\n      .appendTo(listItem);\n\n    const updated = new Date(gist.updated_at);\n\n    const descTertiary = $('<span/>')\n      .addClass('ms-ListItem-tertiaryText')\n      .text(' - Last updated ' + updated.toLocaleString())\n      .appendTo(listItem);\n\n    listItem.on('click', clickFunc);\n  });  \n}\n\nfunction buildFileList(files) {\n\n  let fileList = '';\n\n  for (let file in files) {\n    if (files.hasOwnProperty(file)) {\n      if (fileList.length > 0) {\n        fileList = fileList + ', ';\n      }\n\n      fileList = fileList + files[file].filename + ' (' + files[file].language + ')';\n    }\n  }\n\n  return fileList;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Project Server OData REST Endpoint and Interpreting XML Response (XML)\nDESCRIPTION: This XML snippet represents a sample response from the ProjectData OData REST service, utilized by Project Professional add-ins to retrieve available collections (entities) such as Projects and ProjectBaselines. The XML is consumed by client code for validation, parsing, or diagnostics, confirming both service accessibility and listing exposed OData entity collections. It requires a Project Server instance with proper configuration and authentication; the main input is a service endpoint URL, and the displayed output is the well-formed service and workspace XML element hierarchy as retrieved from the Project Web App OData endpoint.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n    <service xml:base=\\\"http://myserver/pwa/_api/ProjectData/\\\"\\n    xmlns=\\\"https://www.w3.org/2007/app\\\"\\n    xmlns:atom=\\\"https://www.w3.org/2005/Atom\\\">\\n    <workspace>\\n        <atom:title>Default</atom:title>\\n        <collection href=\\\"Projects\\\">\\n            <atom:title>Projects</atom:title>\\n        </collection>\\n        <collection href=\\\"ProjectBaselines\\\">\\n            <atom:title>ProjectBaselines</atom:title>\\n        </collection>\\n        <!-- ... and 33 more collection elements -->\\n    </workspace>\\n    </service>\n```\n\n----------------------------------------\n\nTITLE: Getting the Previous Worksheet Relative to Active with Excel JavaScript API\nDESCRIPTION: Finds and references the worksheet immediately preceding the currently active worksheet using the `getPrevious()` method called on the active worksheet object. It loads the previous sheet's 'name' and logs it. This will throw an `ItemNotFound` error if the active worksheet is the first one in the workbook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let currentSheet = context.workbook.worksheets.getActiveWorksheet();\n    let previousSheet = currentSheet.getPrevious();\n    previousSheet.load(\"name\");\n\n    await context.sync();\n    console.log(`The name of the sheet that precedes the active worksheet is \"${previousSheet.name}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Paragraph with Original Range Text in JavaScript\nDESCRIPTION: This snippet, intended to replace `TODO3` in `insertTextBeforeRange`, queues a command to insert a new paragraph at the end of the document body using `doc.body.insertParagraph()`. The paragraph's content includes the text retrieved from the `originalRange.text` property (loaded in the previous step), demonstrating that the `insertText` operation with `Word.InsertLocation.before` did not modify the original range object. Uses `Word.InsertLocation.end` to place the paragraph.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndoc.body.insertParagraph(\"Current text of original range: \" + originalRange.text, Word.InsertLocation.end);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from OfficeRuntime.storage in a Task Pane (JavaScript)\nDESCRIPTION: This JavaScript function (`receiveTokenFromCustomFunction`), intended for use in an add-in's task pane, retrieves a value associated with the key \"token\" from `OfficeRuntime.storage` using `getItem`. It updates specific DOM elements (`tokenSendStatus`, `tokenTextBox2`) to display the result or any error encountered. This allows the task pane to access data (like an auth token) stored by a custom function in a non-shared runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-authentication.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Read a token from storage.\n * @customfunction GETTOKEN\n */\nfunction receiveTokenFromCustomFunction() {\n  const key = \"token\";\n  const tokenSendStatus = document.getElementById('tokenSendStatus');\n  OfficeRuntime.storage.getItem(key).then(function (result) {\n     tokenSendStatus.value = \"Success: Item with key '\" + key + \"' read from storage.\";\n     document.getElementById('tokenTextBox2').value = result;\n  }, function (error) {\n     tokenSendStatus.value = \"Error: Unable to read item with key '\" + key + \"' from storage. \" + error;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Select in Unified Manifest Runtimes (JSON)\nDESCRIPTION: This JSON snippet defines a runtime within the unified manifest for an Outlook add-in's task pane. It sets the minimum Mailbox capability requirement to 1.15 (although multi-select was introduced in 1.13, this example uses later enhancements), specifies the task pane's HTML page (`taskpane.html`), and configures the action to open the task pane. Crucially, it sets `supportsNoItemContext` and `multiselect` properties within the `actions` array to `true` to enable the add-in to work without a specific item selected initially and to activate on multiple selected messages.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/item-multi-select.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"runtimes\": [\n    {\n        \"requirements\": {\n            \"capabilities\": [\n                {\n                    \"name\": \"Mailbox\",\n                    \"minVersion\": \"1.15\"\n                }\n            ]\n        },\n        \"id\": \"TaskPaneRuntime\",\n        \"type\": \"general\",\n        \"code\": {\n            \"page\": \"https://localhost:3000/taskpane.html\"\n        },\n        \"lifetime\": \"short\",\n        \"actions\": [\n            {\n                \"id\": \"TaskPaneRuntimeShow\",\n                \"type\": \"openPage\",\n                \"pinnable\": false,\n                \"view\": \"dashboard\",\n                \"supportsNoItemContext\": true,\n                \"multiselect\": true\n            }\n        ]\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Get Started Message Requirements - JSON\nDESCRIPTION: Shows how to define multiple get started messages for an Excel add-in, conditionally displaying them based on host support for specific ExcelApi requirement set versions (using minVersion and maxVersion). This allows tailored introductory messaging for different levels of host support. Prerequisites: using the unified manifest and understanding requirement-based filtering. Inputs are the capability specifications (name, minVersion, maxVersion); outputs are self-filtered get started messages.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requirements-property-unified-manifest.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\\n    ...\\n    {\\n        ...\\n        \"getStartedMessages\": [\\n            {\\n                \"title\": \"Contoso Excel Formatting\",\\n                \"description\": \"Use conditional formatting with our add-in.\",\\n                \"learnMoreUrl\": \"https://contoso.com/simple-conditional-formatting-details.html\",\\n                \"requirements\": {\\n                    \"capabilities\": [\\n                        {\\n                            \"name\": \"ExcelApi\",\\n                            \"minVersion\": \"1.6\",\\n                            \"maxVersion\": \"1.16\"\\n                        }\\n                    ]\\n                }\\n            },\\n            {\\n                \"title\": \"Contoso Advanced Excel Formatting\",\\n                \"description\": \"Use conditional formatting and dynamic formatting changes with our add-in.\",\\n                \"learnMoreUrl\": \"https://contoso.com/advanced-conditional-formatting-details.html\",\\n                \"requirements\": {\\n                    \"capabilities\": [\\n                        {\\n                            \"name\": \"ExcelApi\",\\n                            \"minVersion\": \"1.17\"\\n                        }\\n                    ]\\n                }\\n            }\\n        ]\\n    }\\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Data from Worksheet in Excel - Markdown\nDESCRIPTION: This prompt generates instructions for obtaining data from the range A1:B3 on the first Excel worksheet via the Excel JavaScript API. It is applicable in data extraction scenarios using Office.js. No special parameters beyond range location; expects code that reads cell values and returns structured output.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nRetrieve the data in the range *A1:B3 on the first worksheet* \nusing the Excel JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Processing GitHub Gists via AJAX with Showdown in JavaScript\nDESCRIPTION: This JavaScript code defines two functions for Office Add-in integration: getGist fetches a gist using jQuery\\'s AJAX and returns the contents via callback, while buildBodyContent processes the gist to insert it into the Outlook message. HTML content is inserted as-is, Markdown is converted to HTML using the Showdown library (which is a required dependency), and other file types are wrapped in a <pre><code> block. Main dependencies are jQuery and Showdown, both of which must be loaded. The main inputs are the gist ID (for fetching) and gist object (for processing), and content or error is returned via callback.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getGist(gistId, callback) {\\n  const requestUrl = 'https://api.github.com/gists/' + gistId;\\n\\n  $.ajax({\\n    url: requestUrl,\\n    dataType: 'json'\\n  }).done(function(gist) {\\n    callback(gist);\\n  }).fail(function(error) {\\n    callback(null, error);\\n  });\\n}\\n\\nfunction buildBodyContent(gist, callback) {\\n  // Find the first non-truncated file in the gist\\n  // and use it.\\n  for (let filename in gist.files) {\\n    if (gist.files.hasOwnProperty(filename)) {\\n      const file = gist.files[filename];\\n      if (!file.truncated) {\\n        // We have a winner.\\n        switch (file.language) {\\n          case 'HTML':\\n            // Insert as is.\\n            callback(file.content);\\n            break;\\n          case 'Markdown':\\n            // Convert Markdown to HTML.\\n            const converter = new showdown.Converter();\\n            const html = converter.makeHtml(file.content);\\n            callback(html);\\n            break;\\n          default:\\n            // Insert contents as a <code> block.\\n            let codeBlock = '<pre><code>';\\n            codeBlock = codeBlock + file.content;\\n            codeBlock = codeBlock + '</code></pre>';\\n            callback(codeBlock);\\n        }\\n        return;\\n      }\\n    }\\n  }\\n  callback(null, 'No suitable file found in the gist');\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Invalid Attempt to Set Range Values to Null in JavaScript\nDESCRIPTION: Demonstrates an invalid operation where an attempt is made to set the entire `values` property of a range object directly to `null`. According to the documentation, `null` is not a valid input for single properties like `range.values`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-blank-null-values.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrange.values = null; // This is not a valid snippet. \n```\n\n----------------------------------------\n\nTITLE: Specifying Host Application and Form Factor in XML Manifest\nDESCRIPTION: This XML snippet demonstrates how to use the `<Hosts>` and `<Host>` elements to target a specific Office application (e.g., 'Workbook' for Excel) and the `<DesktopFormFactor>` element to define settings for desktop and web versions of Office within the `<VersionOverrides>` section of the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp>\n...\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/taskpaneappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n  ...\n    <Hosts>\n      <Host xsi:type=\"Workbook\">\n        <DesktopFormFactor>\n\n              <!-- Information about FunctionFile and ExtensionPoint. -->\n\n        </DesktopFormFactor>\n      </Host>\n    </Hosts>\n  ...\n  </VersionOverrides>\n...\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Localizing Numerical String Formatting via Application Culture Settings - JavaScript\nDESCRIPTION: Illustrates how to dynamically convert the decimal separator in a numerical string based on the user's local culture settings using the Excel JavaScript API. The sample loads a string cell from worksheet 'Sample', retrieves the current system decimal separator, replaces ',' with the system separator, and writes the localized value to another cell. Requires Office.js, Excel context, and a worksheet named 'Sample' with relevant data. Inputs include the target cell range; output is the localized string value in another cell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This will convert a number like \"14,37\" to \"14.37\"\n// (assuming the system decimal separator is \".\").\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let decimalSource = sheet.getRange(\"B2\");\n\n    decimalSource.load(\"values\");\n    context.application.cultureInfo.numberFormat.load(\"numberDecimalSeparator\");\n    await context.sync();\n\n    let systemDecimalSeparator =\n        context.application.cultureInfo.numberFormat.numberDecimalSeparator;\n    let oldDecimalString = decimalSource.values[0][0];\n\n    // This assumes the input column is standardized to use \",\" as the decimal separator.\n    let newDecimalString = oldDecimalString.replace(\",\", systemDecimalSeparator);\n\n    let resultRange = sheet.getRange(\"C2\");\n    resultRange.values = [[newDecimalString]];\n    resultRange.format.autofitColumns();\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting All Internet Headers and Extracting Values in Outlook Read Mode (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates how to retrieve all internet headers from the current message in Outlook Read mode using `getAllInternetHeadersAsync` from the Office JavaScript API. It then parses the returned header string using regular expressions (`match()`) to extract the values of specific custom headers previously set (like 'preferred-fruit' and 'preferred-vegetable'). The example includes a callback function to handle the asynchronous result and log the extracted values or any errors. This functionality is available starting from Mailbox requirement set 1.8.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/internet-headers.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nOffice.context.mailbox.item.getAllInternetHeadersAsync(getCallback);\n\nfunction getCallback(asyncResult) {\n  if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Sender's preferred fruit: \" + asyncResult.value.match(/preferred-fruit:.*/gim)[0].slice(17));\n    console.log(\"Sender's preferred vegetable: \" + asyncResult.value.match(/preferred-vegetable:.*/gim)[0].slice(21));\n  } else {\n    console.log(\"Error getting preferences from header: \" + JSON.stringify(asyncResult.error));\n  }\n}\n\n/* Sample output:\nSender's preferred fruit: orange\nSender's preferred vegetable: broccoli\n*/\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Cell with Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the currently active cell in an Excel workbook using the Excel JavaScript API. It utilizes the getActiveCell method and loads the cell address, outputting it to the console. Requires Office.js and Excel add-in context; await Excel.run is used for batching and synchronizing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let activeCell = context.workbook.getActiveCell();\\n    activeCell.load(\\\"address\\\");\\n    await context.sync();\\n\\n    console.log(\\\"The active cell is \\\" + activeCell.address);\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Addition Custom Function in JavaScript\nDESCRIPTION: This JavaScript code defines a basic Excel custom function called `add`. It is marked with the `@customfunction` JSDoc tag. The function accepts two parameters, `first` and `second`, and returns their sum. The accompanying JSDoc comments provide descriptions for the function, its parameters, and the return value, which are used to automatically generate metadata for Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-overview.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Adds two numbers.\n * @customfunction \n * @param first First number.\n * @param second Second number.\n * @returns The sum of the two numbers.\n */\n\nfunction add(first, second){\n  return first + second;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Ribbon Control at Launch (Unified Manifest) - JSON\nDESCRIPTION: Demonstrates how to disable a custom ribbon control (`Contoso.MyButton1`) by default when the Office application starts, using the Unified Manifest (manifest.json). This is achieved by adding an `\"enabled\": false` property to the control's definition within the `extensions.ribbons.tabs.groups.controls` array.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"ribbons\": [\n            ...\n            {\n                ...\n                \"tabs\": [\n                    {\n                        \"id\": \"MyTab\",\n                        \"groups\": [\n                            {\n                                ...\n                                \"controls\": [\n                                    {\n                                        \"id\": \"Contoso.MyButton1\",\n                                        ...\n                                        \"enabled\": false\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Getting the Used Range in an Excel Worksheet using JavaScript API\nDESCRIPTION: This snippet demonstrates obtaining the 'used range' from the \"Sample\" worksheet using the `sheet.getUsedRange()` method. The used range is the smallest rectangular range encompassing all cells that have ever contained a value or formatting. The address of this dynamic range is loaded and logged. It requires an active Excel context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-get.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let range = sheet.getUsedRange();\n    range.load(\"address\");\n    await context.sync();\n    \n    console.log(`The address of the used range in the worksheet is \"${range.address}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Office Add-in Project with Yo Office\nDESCRIPTION: Uses the Yeoman generator for Office Add-ins (`yo office`) to scaffold a new task pane project. It specifies the project type as 'taskpane', sets the project name to 'sso-display-user-info', targets Excel as the host application (`--host excel`), and configures the project to use JavaScript (`--js true`). Running this command requires Node.js and the Yeoman Office generator to be installed. It creates a new folder with the specified name containing the basic structure for an Excel task pane add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/use-sso-to-get-office-signed-in-user-token.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nyo office --projectType taskpane --name 'sso-display-user-info' --host excel --js true\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Criteria Conditional Formatting in Excel (JavaScript)\nDESCRIPTION: This snippet shows how to apply Preset Criteria conditional formatting in Excel via the Office JavaScript API to a specific range ('B2:M5' on 'Sample' sheet). It sets the font color to white for any cell within the range whose value is at least one standard deviation above the average of the entire range, using `Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats.add(\n         Excel.ConditionalFormatType.presetCriteria\n    );\n    \n    // Color every cell's font white that is one standard deviation above average relative to the range.\n    conditionalFormat.preset.format.font.color = \"white\";\n    conditionalFormat.preset.rule = {\n         criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage\n    };\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Values from a Range of Cells - Excel JavaScript API - JavaScript\nDESCRIPTION: Loads and prints the values (raw cell values) of range B2:E6 to the console. Utilizes range.load('values') and context.sync(). Inputs: worksheet and range reference. Outputs: structured array of cell values. Useful for extracting data regardless of cell formula presence.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let range = sheet.getRange(\"B2:E6\");\n    range.load(\"values\");\n    await context.sync();\n\n    console.log(JSON.stringify(range.values, null, 4));\n});\n```\n\n----------------------------------------\n\nTITLE: Retrying Token Acquisition and Handling Unexpected Server Errors (JavaScript)\nDESCRIPTION: This JavaScript code analyzes error responses for expired SSO tokens or other exceptions in Office Add-ins. If the error indicates an expired assertion ('AADSTS500133'), it retries access token acquisition once by recalling 'getUserFileNames'. For other exceptions, it reports details to the user, and if no specific error is matched, it displays a generic error. The snippet depends on 'errorResponse' (with 'responseText' and 'responseJSON'), a retry counter 'retryGetAccessToken', and the 'showMessage' function. The main input is the error response from the server; outputs include retrying authentication or displaying an error.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Results from other errors (other than AADSTS50076) will have an ExceptionMessage property.\nconst exceptionMessage = JSON.parse(errorResponse.responseText).ExceptionMessage;\nif (exceptionMessage) {\n    // On rare occasions the access token is unexpired when Office validates it,\n    // but expires by the time it is sent to Microsoft identity in the OBO flow. Microsoft identity will respond\n    // with \"The provided value for the 'assertion' is not valid. The assertion has expired.\"\n    // Retry the call of getAccessToken (no more than once). This time Office will return a \n    // new unexpired access token.\n    if ((exceptionMessage.includes(\"AADSTS500133\"))\n        && (retryGetAccessToken <= 0)) {\n        retryGetAccessToken++;\n        getUserFileNames();\n        return;\n    }\n    else {\n        showMessage(\"MSAL error from application server: \" + JSON.stringify(exceptionMessage));\n        return;\n    }\n}\n// Default error handling if previous checks didn't apply.\nshowMessage(errorResponse.responseJSON.value);\n\n```\n\n----------------------------------------\n\nTITLE: Reading Properties from Word Content Controls Using Split Loop Pattern in Office.js JavaScript API\nDESCRIPTION: This JavaScript snippet demonstrates the anti-pattern of reading the text property of each Word content control\\'s first paragraph, calling context.sync during each iteration, which leads to suboptimal performance. It loads and logs the text for each content control separately. Office.js is required and the code must execute within a Word add-in. Input is the set of content controls, and output is logging the corresponding paragraph text. Limitation is poor performance due to frequent context.sync calls.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/correlated-objects-pattern.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nWord.run(async (context) => {\n    const contentControls = context.document.contentControls.load('items');\n    await context.sync();\n\n    for (let i = 0; i < contentControls.items.length; i++) {\n      // The sync statement in this loop will degrade performance.\n      const paragraph = contentControls.items[i].getRange('Whole').paragraphs.getFirst(); \n      paragraph.load('text');\n      await context.sync();\n      console.log(paragraph.text);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Fill Color with Transparency to PowerPoint Table Cells (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the fill property within uniformCellProperties for all table cells, applying a color ('lightred') with a specified transparency value (50%). Useful for customizing table appearance with semi-transparent fills. Requires PowerPoint JavaScript API and proper table insertion context. Key parameters: color and transparency.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nuniformCellProperties: {\n    fill: {\n        color: \"lightred\",\n            transparency: 0.5\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token and Calling Web API via Office JS – JavaScript\nDESCRIPTION: This snippet demonstrates how to use Office.js to request an access token for the current user and call a protected web API endpoint using jQuery’s AJAX method. Office.auth.getAccessToken is called to obtain an access token from Office; the access token is then provided in the Authorization header of an HTTP GET request to the /api/data endpoint. Dependencies include Office.js and jQuery. The function expects no parameters, and if successful, processes the returned result; otherwise, errors are handled according to the AJAX promise. The returned data structure depends on the web API implementation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/overview-authn-authz.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getOneDriveFileNames() {\n\n    let accessToken = await Office.auth.getAccessToken();\n\n    $.ajax({\n        url: \"/api/data\",\n        headers: { \"Authorization\": \"Bearer \" + accessToken },\n        type: \"GET\"\n    })\n        .done(function (result) {\n            //... work with data from the result...\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PivotTable with Range Addresses - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new PivotTable named \"Farm Sales\" on the current worksheet at cell A22 using data from range A1:E21 with the Excel JavaScript API. It uses the Excel.run context for asynchronous execution and requires that Office.js is loaded and a worksheet with the specified data exists. The user must have permission to add PivotTables, and the expected output is a new PivotTable at the given location; invalid range references or permissions will cause errors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Create a PivotTable named \"Farm Sales\" on the current worksheet at cell\n    // A22 with data from the range A1:E21.\n    context.workbook.worksheets.getActiveWorksheet().pivotTables.add(\n      \"Farm Sales\", \"A1:E21\", \"A22\");\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Text Ignoring Punctuation in Word Add-in using JavaScript\nDESCRIPTION: This snippet demonstrates how to search for the text 'video you' within the main body of a Word document, ignoring any punctuation between the words. It uses the `Word.run` batch operation, calls the `search` method on `context.document.body` with the `ignorePunct` option set to true. After finding the results, it loads their font properties, logs the count, and then iterates through the results to change the font color to purple, highlight color to yellow, and make the text bold.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/search-option-guidance.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to search the document and ignore punctuation.\n    const searchResults = context.document.body.search('video you', {ignorePunct: true});\n\n    // Queue a command to load the font property values.\n    searchResults.load('font');\n\n    // Synchronize the document state.\n    await context.sync();\n    console.log('Found count: ' + searchResults.items.length);\n\n    // Queue a set of commands to change the font for each found item.\n    for (let i = 0; i < searchResults.items.length; i++) {\n        searchResults.items[i].font.color = 'purple';\n        searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow\n        searchResults.items[i].font.bold = true;\n    }\n\n    // Synchronize the document state.\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Selected Data with Office.js in JavaScript\nDESCRIPTION: This code illustrates how to overwrite the user's current selection in an Office document with the string 'Hello World!' using setSelectedDataAsync in the Office.js API. It executes asynchronously, calling a callback that checks the operation's status and, if failed, displays the error message in the page element with id 'message'. Requires Office.js and a DOM element named 'message'. The write function appends results to the specified HTML element.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/read-and-write-data-to-the-active-selection-in-a-document-or-spreadsheet.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.document.setSelectedDataAsync(\"Hello World!\", function (asyncResult) {\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n        write(asyncResult.error.message);\n    }\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message;\n}\n```\n\n----------------------------------------\n\nTITLE: Showing a Contextual Tab using Office.ribbon.requestUpdate in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `showDataTab` provides a type-safe way to request making a contextual tab visible. It utilizes the `Office.Tab` and `Office.RibbonUpdaterData` interfaces from the Office JavaScript library to construct the update request object before passing it to `Office.ribbon.requestUpdate`. The function targets the tab with ID `CtxTab1`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst showDataTab = async () => {\n    const myContextualTab: Office.Tab = {id: \"CtxTab1\", visible: true};\n    const ribbonUpdater: Office.RibbonUpdaterData = { tabs: [ myContextualTab ]};\n    await Office.ribbon.requestUpdate(ribbonUpdater);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Ribbon Button with HostRestartNeeded Error Handling (JavaScript)\nDESCRIPTION: Shows an enhanced `disableChartFormat` function that includes error handling for `Office.ribbon.requestUpdate`. It uses a `try...catch` block to capture potential errors. Specifically, it checks if the caught error has a code of `HostRestartNeeded` and, if so, uses a `reportError` function to inform the user that an application restart is required due to an add-in upgrade.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction disableChartFormat() {\n    try {\n        const button =\n        {\n            id: \"ChartFormatButton\",\n            enabled: false\n        };\n        const parentGroup =\n        {\n            id: \"MyGroup\",\n            controls: [button]\n        };\n        const parentTab =\n        {\n            id: \"CustomChartTab\",\n            groups: [parentGroup]\n        };\n        const ribbonUpdater = { tabs: [parentTab] };\n        Office.ribbon.requestUpdate(ribbonUpdater);\n\n        chartFormatButtonEnabled = false;\n    }\n    catch(error) {\n        if (error.code == \"HostRestartNeeded\"){\n            reportError(\"Contoso Awesome Add-in has been upgraded. Please save your work, close the Office application, and restart it.\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Ranges with Options Using Excel JavaScript API (JavaScript)\nDESCRIPTION: This JavaScript example illustrates two uses of Range.copyFrom: copying a range from A1:C1 to D1 while skipping blanks, and copying A2:C2 to D2 including blanks, showing how the skipBlanks parameter affects pasted results. The snippet also demonstrates use of copyType and transpose, enabling fine-tuned control of what is copied and how it's inserted. Dependencies: Office.js, Excel workbook with a worksheet named 'Sample'. Inputs: source ranges and destination addresses; optional parameters copyType, skipBlanks, transpose. Output: Data from the sources copied to destinations with conditional handling of blanks. Limitations: Must be run in an Office.js-enabled Excel context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-cut-copy-paste.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n    // Copy a range, omitting the blank cells so existing data is not overwritten in those cells.\\n    sheet.getRange(\\\"D1\\\").copyFrom(\\\"A1:C1\\\",\\n        Excel.RangeCopyType.all,\\n        true, // skipBlanks\\n        false); // transpose\\n    // Copy a range, including the blank cells which will overwrite existing data in the target cells.\\n    sheet.getRange(\\\"D2\\\").copyFrom(\\\"A2:C2\\\",\\n        Excel.RangeCopyType.all,\\n        false, // skipBlanks\\n        false); // transpose\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating Remote Service Batch Processing in JavaScript\nDESCRIPTION: This code snippet implements a mock function called _fetchFromRemoteService that simulates remote service operation handling for batched requests, typically used in Office Add-ins custom functions scenarios. It processes an array of batched operations, performing division or multiplication as specified in the operation field of each request object, and returns a batch of results or error messages. It also simulates network latency using a pause utility function and logs execution steps for debugging. This function requires no external dependencies, but when transitioning to production, developers should replace this logic according to their backend's capabilities, remove the pause simulation, and add authentication as needed. Expected input is an array of request objects ({ operation, args }), and output is a Promise resolving to an array of result/error objects.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-batching.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// This function simulates the work of a remote service. Because each service\n// differs, you will need to modify this function appropriately to work with the service you are using. \n// This function takes a batch of argument sets and returns a promise that may contain a batch of values.\n// NOTE: When implementing this function on a server, also apply an appropriate authentication mechanism\n//       to ensure only the correct callers can access it.\nasync function _fetchFromRemoteService(requestBatch) {\n  // Simulate a slow network request to the server.\n  console.log(\"_fetchFromRemoteService\");\n  await pause(1000);\n  console.log(\"postpause\");\n  return requestBatch.map((request) => {\n    console.log(\"requestBatch server side\");\n    const { operation, args } = request;\n\n    try {\n      if (operation === \"div2\") {\n        // Divide the first argument by the second argument.\n        return {\n          result: args[0] / args[1]\n        };\n      } else if (operation === \"mul2\") {\n        // Multiply the arguments for the given entry.\n        const myResult = args[0] * args[1];\n        console.log(myResult);\n        return {\n          result: myResult\n        };\n      } else {\n        return {\n          error: `Operation not supported: ${operation}`\n        };\n      }\n    } catch (error) {\n      return {\n        error: `Operation failed: ${operation}`\n      };\n    }\n  });\n}\n\nfunction pause(ms) {\n  console.log(\"pause\");\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VersionOverrides for Event-Based Activation - Office Add-in Manifest (XML)\nDESCRIPTION: This XML snippet replaces the entire <VersionOverrides> node in the add-in manifest to support event-based activation on Outlook mobile and desktop. It defines requirements, hosts, runtime references, form factors, extension points with buttons and actions, and resources including images, URLs, and strings. Dependencies include a web server hosting the referenced files; parameters such as resid and FunctionName link manifest elements to web assets and script handlers. Input is the manifest XML and referenced files; output is a configured manifest enabling event handler activation and appropriate UI elements on supported clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-event-based.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n    <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n        <Requirements>\n            <bt:Sets DefaultMinVersion=\"1.5\">\n                <bt:Set Name=\"Mailbox\"/>\n            </bt:Sets>\n        </Requirements>\n        <Hosts>\n            <Host xsi:type=\"MailHost\">\n                <!-- The HTML file that references or contains the JavaScript event handlers.\n                    This is used by Outlook on mobile devices. -->\n                <Runtimes>\n                    <Runtime resid=\"WebViewRuntime.Url\">\n                    </Runtime>\n                </Runtimes>\n                <!-- Defines the add-in for Outlook on Windows (new and classic), on Mac, and on the web. -->\n                <DesktopFormFactor>\n                    <FunctionFile resid=\"Commands.Url\"/>\n                    <ExtensionPoint xsi:type=\"MessageReadCommandSurface\">\n                        <OfficeTab id=\"TabDefault\">\n                            <Group id=\"msgReadGroup\">\n                                <Label resid=\"GroupLabel\"/>\n                                <Control xsi:type=\"Button\" id=\"msgReadOpenPaneButton\">\n                                    <Label resid=\"TaskpaneButton.Label\"/>\n                                    <Supertip>\n                                        <Title resid=\"TaskpaneButton.Label\"/>\n                                        <Description resid=\"TaskpaneButton.Tooltip\"/>\n                                    </Supertip>\n                                    <Icon>\n                                        <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                                        <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                                        <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                                    </Icon>\n                                    <Action xsi:type=\"ShowTaskpane\">\n                                        <SourceLocation resid=\"Taskpane.Url\"/>\n                                    </Action>\n                                </Control>\n                                <Control xsi:type=\"Button\" id=\"ActionButton\">\n                                    <Label resid=\"ActionButton.Label\"/>\n                                    <Supertip>\n                                        <Title resid=\"ActionButton.Label\"/>\n                                        <Description resid=\"ActionButton.Tooltip\"/>\n                                    </Supertip>\n                                    <Icon>\n                                        <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                                        <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                                        <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                                    </Icon>\n                                    <Action xsi:type=\"ExecuteFunction\">\n                                        <FunctionName>action</FunctionName>\n                                    </Action>\n                                </Control>\n                            </Group>\n                        </OfficeTab>\n                    </ExtensionPoint>\n                </DesktopFormFactor>\n                <!-- Defines the add-in for Outlook mobile. -->\n                <MobileFormFactor>\n                    <!-- Configures event-based activation. -->\n                    <ExtensionPoint xsi:type=\"LaunchEvent\">\n                        <LaunchEvents>\n                            <LaunchEvent Type=\"OnNewMessageCompose\" FunctionName=\"onNewMessageComposeHandler\"/>\n                        </LaunchEvents>\n                        <!-- Identifies the runtime to be used (also referenced by the Runtime element). -->\n                        <SourceLocation resid=\"WebViewRuntime.Url\"/>\n                    </ExtensionPoint>\n                </MobileFormFactor>\n            </Host>\n        </Hosts>\n        <!-- This manifest uses a fictitious web server, contoso.com, to host the add-in's files.\n             Replace these instances with the information of the web server that hosts your add-in's files. -->\n        <Resources>\n            <bt:Images>\n                <bt:Image id=\"Icon.16x16\" DefaultValue=\"https://contoso.com/assets/icon-16.png\"/>\n                <bt:Image id=\"Icon.32x32\" DefaultValue=\"https://contoso.com/assets/icon-32.png\"/>\n                <bt:Image id=\"Icon.80x80\" DefaultValue=\"https://contoso.com/assets/icon-80.png\"/>\n            </bt:Images>\n            <bt:Urls>\n                <bt:Url id=\"Commands.Url\" DefaultValue=\"https://contoso.com/commands.html\"/>\n                <bt:Url id=\"Taskpane.Url\" DefaultValue=\"https://contoso.com/taskpane.html\"/>\n                <bt:Url id=\"WebViewRuntime.Url\" DefaultValue=\"https://contoso.com/commands.html\"/>\n            </bt:Urls>\n            <bt:ShortStrings>\n                <bt:String id=\"GroupLabel\" DefaultValue=\"Event-based activation on mobile\"/>\n                <bt:String id=\"TaskpaneButton.Label\" DefaultValue=\"Show Taskpane\"/>\n                <bt:String id=\"ActionButton.Label\" DefaultValue=\"Perform an action\"/>\n            </bt:ShortStrings>\n            <bt:LongStrings>\n                <bt:String id=\"TaskpaneButton.Tooltip\" DefaultValue=\"Opens a pane displaying all available properties.\"/>\n                <bt:String id=\"ActionButton.Tooltip\" DefaultValue=\"Perform an action when clicked.\"/>\n            </bt:LongStrings>\n        </Resources>\n    </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Adding Change Font Button in HTML\nDESCRIPTION: This snippet adds a button element with the ID 'change-font' to the task pane's HTML structure. This button is intended to trigger the changing of font properties for specific text in the Word document.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"change-font\">Change Font</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Declaring Message Read Extension Point in Add-in Manifest (XML)\nDESCRIPTION: Declares the required extension point for Outlook mobile add-ins in Message Read mode using the add-in only (XML) manifest. `MobileMessageReadCommandSurface` is the only extension point needed for this mode.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nMobileMessageReadCommandSurface\n```\n\n----------------------------------------\n\nTITLE: Defining ItemChanged Event Handler Function (JavaScript)\nDESCRIPTION: Implements a JavaScript function named `itemChanged` designed to be an event handler for the `Office.EventType.ItemChanged` event. This function receives event arguments and calls `updateTaskPaneUI`, passing the currently selected Outlook item (`Office.context.mailbox.item`), allowing the task pane's UI to react to item selection changes when pinned.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/pinnable-taskpane.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction itemChanged(eventArgs) {\n  // Update UI based on the new current item.\n  updateTaskPaneUI(Office.context.mailbox.item);\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Auto-Run Event Features with Requirements (Unified Manifest JSON)\nDESCRIPTION: This code sample configures 'extensions.autoRunEvents.requirements' to enable auto-launch features, like logging when an email is sent, only on Office versions supporting Mailbox 1.13 or higher. Dependencies are Office clients implementing autoRunEvents with contextual minimum requirements for each event. Key parameters include 'events.type', 'events.actionId', and 'requirements.capabilities'. Expected input is a unified manifest section, output is blocked/enabled event triggers based on host capabilities. Incorrect versioning or property placement may prevent feature filtering as intended.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requirements-property-unified-manifest.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"autoRunEvents\": [\n            ...\n            {\n                ...\n                \"events\": {\n                    \"type\": \"OnMailSend\",\n                    \"actionId\": \"logOutgoingEmail\",\n                    \"options\": {\n                        \"sendMode\": \"promptUser\"\n                    }\n                },\n                \"requirements\": {\n                    \"capabilities\": [\n                        {\n                            \"name\": \"Mailbox\",\n                            \"minVersion\": \"1.13\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Formatting Bold Text in Smart Alerts Dialog - Office.js JavaScript\nDESCRIPTION: Demonstrates how to format dialog messages with bold emphasis in a Smart Alerts dialog using the errorMessageMarkdown property in the event.completed call. Requires Office.js API support for event.completed and Markdown formatting (requirement set 1.15 or greater). The key parameter, errorMessageMarkdown, contains the Markdown-formatted message; allowEvent controls send blocking. Input is a JavaScript object with event properties. Output is a customized dialog; only supported formatting is rendered.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagesend-onappointmentsend-events.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nevent.completed({\n  allowEvent: false,\n  ...\n  errorMessageMarkdown: \"**Important**: Apply the appropriate sensitivity label to your message before sending.\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Appointment Recurrence (Organizer) using Office JS\nDESCRIPTION: Shows how an appointment organizer, in compose mode, uses `Office.context.mailbox.item.recurrence.getAsync` to retrieve the `Recurrence` object for the current appointment. It checks if the returned object is null (indicating a non-recurring appointment) or logs the recurrence details if it exists. Requires API requirement set 1.7 or later.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-and-set-recurrence.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.mailbox.item.recurrence.getAsync((asyncResult) => {\n    const recurrence = asyncResult.value;\n\n    if (recurrence == null) {\n        console.log(\"Non-recurring meeting.\");\n    } else {\n        console.log(JSON.stringify(recurrence));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Lines with PowerPoint JavaScript API - JavaScript\nDESCRIPTION: This code demonstrates how to draw a straight line on the first slide using the 'addLine' method of the ShapeCollection API. It uses 'ConnectorType.straight' to create a straight line, with the start and end points specified via an options object for 'left', 'top', 'height', and 'width'. The line is assigned a custom name. The snippet must be run asynchronously with 'PowerPoint.run' and changes are committed with 'context.sync'. Dependent on Office.js PowerPoint API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/shapes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This sample creates a straight line on the first slide.\nawait PowerPoint.run(async (context) => {\n    const shapes = context.presentation.slides.getItemAt(0).shapes;\n    const line = shapes.addLine(PowerPoint.ConnectorType.straight, {left: 200, top: 50, height: 300, width: 150});\n    line.name = \"StraightLine\";\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Create Chart Button Click Handler - Office.js JavaScript\nDESCRIPTION: Registers an event handler for the 'create-chart' button, invoking the createChart function through the tryCatch wrapper to ensure asynchronous operation and error handling. Designed to be placed in the Office.onReady function for DOM and Office.js readiness, it sets up interactive charting in response to user actions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\\\"create-chart\\\").onclick = () => tryCatch(createChart);\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler to the OK Button in Dialog JavaScript\nDESCRIPTION: This JavaScript code snippet assigns an event handler to the 'OK' button (identified by 'ok-button') in the dialog's HTML. When clicked, it calls the `sendStringToParentPage` function, wrapped within a `tryCatch` block for error handling. This replaces `TODO1` in the previous snippet.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_48\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById(\"ok-button\").onclick = () => tryCatch(sendStringToParentPage);\n```\n\n----------------------------------------\n\nTITLE: Integrating Office.onReady with jQuery (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates how to integrate Office.js initialization with jQuery's document ready event. It places the `$(document).ready()` call inside the callback function of `Office.onReady()` to ensure that Office.js is loaded and ready before executing jQuery-dependent code that interacts with the DOM.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/initialize-add-in.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.onReady(function() {\n    // Office is ready.\n    $(document).ready(function () {\n        // The document is ready.\n    });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Spam Reporting Ribbon Object to Microsoft 365 Manifest (JSON)\nDESCRIPTION: Configures the ribbon customizations in manifest.json for a spam-reporting add-in, specifying navigation context, button placement, icon assets, and the preprocessing dialog's content and options. This object goes into the 'extensions.ribbons' array. Dependencies include icon assets available at configured URLs and string values for user dialogs. Key parameters control where the button appears, event handler linking (actionId), button state, and the customization of user experience during spam reporting. Limitations include the need to match 'actionId' with the runtime 'actions' id, and some dialog options are not supported with this manifest schema.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"contexts\": [\n        \"spamReportingOverride\"\n    ],\n    \"tabs\": [],\n    \"fixedControls\": [\n        {\n            \"id\": \"spamReportingButton\",\n            \"type\": \"button\",\n            \"label\": \"Report Spam Message\",\n            \"enabled\": false,\n            \"icons\": [\n                {\n                    \"size\": 16,\n                    \"url\": \"https://localhost:3000/assets/icon-16.png\"\n                },\n                {\n                    \"size\": 32,\n                    \"url\": \"https://localhost:3000/assets/icon-32.png\"\n                },\n                {\n                    \"size\": 80,\n                    \"url\": \"https://localhost:3000/assets/icon-80.png\"\n                }\n            ],\n            \"supertip\": {\n                \"title\": \"Report Spam Message\",\n                \"description\": \"Report an unsolicited message.\"\n            },\n            \"actionId\": \"onSpamReport\"\n        }\n    ],\n    \"spamPreProcessingDialog\": {\n        \"title\": \"Report Spam Message\",\n        \"description\": \"Thank you for reporting this message.\",\n        \"spamReportingOptions\": {\n            \"title\": \"Why are you reporting this email?\",\n            \"options\": [\n                \"Received spam email.\",\n                \"Received a phishing email.\",\n                \"I'm not sure this is a legitimate email.\"\n            ]\n        },\n        \"spamFreeTextSectionTitle\": \"Provide additional information, if any:\",\n        \"spamMoreInfo\": {\n            \"text\": \"Reporting unsolicited messages\",\n            \"url\": \"https://www.contoso.com/spamreporting\"\n        }\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Dialog Display Callback: Setting Up Event Handler (JavaScript)\nDESCRIPTION: This code is a callback for displayDialogAsync, invoked after the dialog opens. It captures the dialog object from result.value and attaches an event handler for Office.EventType.DialogMessageReceived, pointing to the processMessage function. Dependencies are Office.js and the prior definition of processMessage. The callback expects one parameter, result, containing the dialog context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (result) {\\n    dialog = result.value;\\n    dialog.addEventHandler(Office.EventType.DialogMessageReceived, processMessage);\\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Text by Suffix in Word Add-in using JavaScript\nDESCRIPTION: This snippet illustrates how to search for words ending with the suffix 'ly' within the Word document's body. It uses `Word.run` for batch processing and calls the `search` method with the `matchSuffix` option set to true. After retrieving the results, it loads their font properties, logs the count, and then loops through each match to apply specific formatting (orange color, black highlight, bold).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/search-option-guidance.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to search the document for any string of characters after 'ly'.\n    const searchResults = context.document.body.search('ly', {matchSuffix: true});\n\n    // Queue a command to load the font property values.\n    searchResults.load('font');\n\n    // Synchronize the document state.\n    await context.sync();\n    console.log('Found count: ' + searchResults.items.length);\n\n    // Queue a set of commands to change the font for each found item.\n    for (let i = 0; i < searchResults.items.length; i++) {\n        searchResults.items[i].font.color = 'orange';\n        searchResults.items[i].font.highlightColor = 'black';\n        searchResults.items[i].font.bold = true;\n    }\n\n    // Synchronize the document state.\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Resizing an Excel Table using Office.js - JavaScript\nDESCRIPTION: Changes the size of the table \"ExpensesTable\" in the \"Sample\" worksheet to the range A1:D20 using the Table.resize method. Leverages the Excel JavaScript API and requires the table to already exist. Inputs: none; Output: the table is resized and now spans 20 rows and 4 columns. The new range must overlap the old range and align headers with the original row.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    // Retrieve the worksheet and a table on that worksheet.\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n    let expensesTable = sheet.tables.getItem(\\\"ExpensesTable\\\");\\n\\n    // Resize the table.\\n    expensesTable.resize(\\\"A1:D20\\\");\\n\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Cell by Row/Column Index with Excel JavaScript API\nDESCRIPTION: Retrieves a specific cell located at row index 1 (second row) and column index 4 (fifth column) within the worksheet named \"Sample\". It uses the `getCell(row, column)` method with zero-based indices, loads the cell's `address` and `values` properties, and logs them to the console.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let cell = sheet.getCell(1, 4);\n    cell.load(\"address, values\");\n\n    await context.sync();\n    console.log(`The value of the cell in row 2, column 5 is \"${cell.values[0][0]}\" and the address of that cell is \"${cell.address}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Task Pane Opens with Office.js Shared Runtime in JavaScript\nDESCRIPTION: This JavaScript snippet replaces the contents of your taskpane.js file to increment a counter every time the Office Add-in task pane is opened, leveraging the shared runtime and the Office.onReady lifecycle along with the onVisibilityModeChanged event. It requires Office.js as a global dependency and assumes elements with IDs 'sideload-msg', 'app-body', and 'run' exist in the HTML. The input is user interaction with the task pane UI, and the output is rendering text indicating how many times the task pane has been opened, persisting across pane reopens due to shared runtime behavior.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*global document, Office*/\\n\\nlet _count = 0;\\n\\nOffice.onReady(() => {\\n  document.getElementById(\"sideload-msg\").style.display = \"none\";\\n  document.getElementById(\"app-body\").style.display = \"flex\";\\n\\n  updateCount(); // Update count on first open.\\n  Office.addin.onVisibilityModeChanged((args) => {\\n    if (args.visibilityMode === Office.VisibilityMode.taskpane) {\\n      updateCount(); // Update count on subsequent opens.\\n    }\\n  });\\n});\\n\\nfunction updateCount() {\\n  _count++;\\n  document.getElementById(\"run\").textContent = \"Task pane opened \" + _count + \" times.\";\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Updating OneNote Page Content using Office JavaScript API\nDESCRIPTION: This JavaScript code snippet demonstrates how to interact with the OneNote application within an Office Add-in's task pane. It uses the `OneNote.run` method to execute batch operations against the OneNote API. Specifically, it gets the currently active page, sets its title to \"Hello World\", and adds an HTML outline containing an ordered list to the page body. The `context.sync()` command executes these queued actions. Basic error handling is included using a try-catch block.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/onenote-quickstart.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ntry {\n    await OneNote.run(async (context) => {\n\n        // Get the current page.\n        const page = context.application.getActivePage();\n\n        // Queue a command to set the page title.\n        page.title = \"Hello World\";\n\n        // Queue a command to add an outline to the page.\n        const html = \"<p><ol><li>Item #1</li><li>Item #2</li></ol></p>\";\n        page.addOutline(40, 90, html);\n\n        // Run the queued commands.\n        await context.sync();\n    });\n} catch (error) {\n    console.log(\"Error: \" + error);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Array Spill Ranges with Excel JavaScript API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to assign a dynamic array formula to a cell, retrieve the resulting spill range using getSpillingToRange, load the address property, and output the range that receives the spilled values. Dependencies include Office.js (Excel API) and an active worksheet named \\\"Sample\\\". The key parameter is the target cell (\\\"G4\\\"), the dynamic array formula (\\\"=A4:D4\\\"), and context.sync is required for property loading. Input is implicit (sheet structure), and output is the logged address of the spill range. Constraints include API support for dynamic arrays and using await/async for Excel.run.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-dynamic-arrays.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    // Set G4 to a formula that returns a dynamic array.\n    let targetCell = sheet.getRange(\"G4\");\n    targetCell.formulas = [[\"=A4:D4\"]];\n\n    // Get the address of the cells that the dynamic array spilled into.\n    let spillRange = targetCell.getSpillingToRange();\n    spillRange.load(\"address\");\n\n    // Sync and log the spilled-to range.\n    await context.sync();\n\n    // This will log the range as \"G4:J4\".\n    console.log(`Copying the table headers spilled into ${spillRange.address}.`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack to Copy Event Handler JavaScript File\nDESCRIPTION: This JavaScript configuration snippet modifies a Webpack configuration file (`webpack.config.js`) to use the `CopyWebpackPlugin`. It specifies a pattern to copy the `launchevent.js` file from the source directory (`./src/launchevent/`) to the root of the build output directory, ensuring the event handler script is included in the final build artifacts and available for the Outlook add-in at runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagefromchanged-onappointmentfromchanged-events.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nnew CopyWebpackPlugin({\n  patterns: [\n    {\n      from: \"./src/launchevent/launchevent.js\",\n      to: \"launchevent.js\",\n    },\n  ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Defining the Root Manifest Element for Office Add-ins in XML\nDESCRIPTION: This XML snippet demonstrates the root <OfficeApp> element used in an Office Add-in manifest. It declares required XML namespaces and specifies the add-in type via the xsi:type attribute. All other manifest elements must be nested within these tags. Required schemas include Microsoft Office namespaces and a schema instance namespace for XML validation. This element is essential for manifest validity and must be structured precisely as shown, with all other configuration inside.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<OfficeApp\\n  xmlns=\\\"http://schemas.microsoft.com/office/appforoffice/1.1\\\"\\n  xmlns:xsi=\\\"https://www.w3.org/2001/XMLSchema-instance\\\"\\n  xmlns:bt=\\\"http://schemas.microsoft.com/office/officeappbasictypes/1.0\\\"\\n  xmlns:mailappor=\\\"http://schemas.microsoft.com/office/mailappversionoverrides/1.0\\\"\\n  xsi:type=\\\"MailApp\\\">\\n\\n  <!-- The rest of the manifest. -->\\n\\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for insertWorksheetsFromBase64 Method - TypeScript\nDESCRIPTION: Provides the TypeScript signature for the insertWorksheetsFromBase64 method. This method is used to insert worksheets from another workbook file (base64-encoded .xlsx) into the current workbook, with optional insertion parameters. Used as reference for developers implementing worksheet importing features.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ninsertWorksheetsFromBase64(base64File: string, options?: Excel.InsertWorksheetOptions): OfficeExtension.ClientResult<string[]>;\n```\n\n----------------------------------------\n\nTITLE: Stop Sideloading Session with office-addin-debugging\nDESCRIPTION: Stops the debugging session initiated by `office-addin-debugging start`. This command ensures the development server is stopped and the Office application properly unacquires the sideloaded add-in. The `<relative-path-to-unified-manifest>` placeholder must match the one used during the start command.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/sideload-add-in-with-unified-manifest.md#_snippet_1\n\nLANGUAGE: command-line\nCODE:\n```\nnpx office-addin-debugging stop <relative-path-to-unified-manifest>\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Keyboard Shortcuts to Actions in Manifest (JSON)\nDESCRIPTION: This snippet shows how to declare keyboard shortcuts for add-in actions in the manifest.json's \\\"keyboardShortcuts\\\" array. Each shortcut configuration includes target platforms (default, mac, web, windows) and references the corresponding actionId as defined earlier. The example highlights requirements declaration (SharedRuntime 1.1) and enforces unique shortcut-action mapping, with constraint that at least a default key combination is present. No code logic appears here; it is purely configuration-level routing and accessibility guidance.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"keyboardShortcuts\": [\n    {\n        \"requirements\": {\n            \"capabilities\": [\n                {\n                    \"name\": \"SharedRuntime\",\n                    \"minVersion\": \"1.1\"\n                }\n            ]\n        },\n        \"shortcuts\": [\n            {\n                \"key\": {\n                    \"default\": \"Ctrl+Alt+Up\",\n                    \"mac\": \"Command+Shift+Up\",\n                    \"web\": \"Ctrl+Alt+1\",\n                    \"windows\": \"Ctrl+Alt+Up\"\n                },\n                \"actionId\": \"ShowTaskpane\"\n            },\n            {\n                \"key\": {\n                    \"default\": \"Ctrl+Alt+Down\",\n                    \"mac\": \"Command+Shift+Down\",\n                    \"web\": \"Ctrl+Alt+2\",\n                    \"windows\": \"Ctrl+Alt+Up\"\n                },\n                \"actionId\": \"HideTaskpane\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling Comment Change Events in Excel using JavaScript\nDESCRIPTION: This code demonstrates registering an event handler (`commentChanged`) for the `onChanged` event on the active worksheet's comments collection via the Excel JavaScript API. The handler uses the `event.commentDetails` array to get the ID of the changed comment, retrieves the comment, loads its content and author name, and logs the updated details. Note: This implementation expects only one comment change event at a time.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let comments = context.workbook.worksheets.getActiveWorksheet().comments;\n\n    // Register the onChanged comment event handler.\n    comments.onChanged.add(commentChanged);\n\n    await context.sync();\n});\n\nasync function commentChanged() {\n    await Excel.run(async (context) => {\n        // Retrieve the changed comment using the comment ID.\n        // Note: This method assumes only a single comment is changed at a time. \n        let changedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);\n\n        // Load the changed comment's data.\n        changedComment.load([\"content\", \"authorName\"]);\n\n        await context.sync();\n\n        // Print out the changed comment's data.\n        console.log(`A comment was changed. ID: ${event.commentDetails[0].commentId}. Updated comment content: ${changedComment.content}. Comment author: ${changedComment.authorName}`);\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a New Ribbon Button in Office Add-in Manifest (XML)\nDESCRIPTION: Defines a new \\u003cControl\\u003e element in the manifest XML to add a button to the Home ribbon group. This button is configured with a label, tooltip, icon resources, and an action to execute a custom function. Requires XML namespaces consistent with Office Add-in schema and pre-defined icon resources. Inputs are button resource IDs and output is an actionable button in the ribbon UI that triggers a named method. Unique button IDs and correctly linked function name are critical.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<Control xsi:type=\\\"Button\\\" id=\\\"\\u003c!--TODO1: Unique (in manifest) name for button --\\u003e\\\"\\u003e\\n    <Label resid=\\\"\\u003c!--TODO2: Button label --\\u003e\\\" /\\u003e\\n    <Supertip\\u003e\\n        <Title resid=\\\"\\u003c!-- TODO3: Button tool tip title --\\u003e\\\" /\\u003e\\n        <Description resid=\\\"\\u003c!-- TODO4: Button tool tip description --\\u003e\\\" /\\u003e\\n    </Supertip\\u003e\\n    <Icon\\u003e\\n        <bt:Image size=\\\"16\\\" resid=\\\"Icon.16x16\\\"/\\u003e\\n        <bt:Image size=\\\"32\\\" resid=\\\"Icon.32x32\\\"/\\u003e\\n        <bt:Image size=\\\"80\\\" resid=\\\"Icon.80x80\\\"/\\u003e\\n    </Icon\\u003e\\n    <Action xsi:type=\\\"\\u003c!-- TODO5: Specify the type of action--\\u003e\\\"\\u003e\\n        \\u003c!-- TODO6: Identify the function.--\\u003e\\n    </Action\\u003e\\n</Control\\u003e\n```\n\n----------------------------------------\n\nTITLE: Styling Application Elements with CSS - HelloProjectOData App - CSS\nDESCRIPTION: This CSS snippet defines typography, layout, and specific classes for common UI elements in the HelloProjectOData app, such as headers, buttons, and tables. It sets font sizes for text and headings, styles for buttons (wide and narrow), and defines table and column classes for aligned data presentation. There are also theme styles for code labels and a defined size for the application logo. No special dependencies are required, but these classes expect corresponding HTML structure; applies only to UI presentation with no functional logic. Limitations include global impact within the scope of the HTML document and reliance on class naming conventions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n/*\n*  File: App.css for the HelloProjectOData app.\n*  Updated: 10/2/2012\n*/\n\nbody\n{\n    font-size: 11pt;\n}\nh1\n{\n    font-size: 22pt;\n}\nh2\n{\n    font-size: 16pt;\n}\n\n/******************************************************************\nCode label class\n******************************************************************/\n\n.rest \n{\n    font-family: 'Courier New';\n    font-size: 0.9em;\n}\n\n/******************************************************************\nButton classes\n******************************************************************/\n\n.button-wide {\n    width: 210px;\n    margin-top: 2px;\n}\n.button-narrow \n{\n    width: 80px;\n    margin-top: 2px;\n}\n\n/******************************************************************\nTable styles\n******************************************************************/\n\n.infoTable\n{\n    text-align: center; \n    vertical-align: middle\n}\n.heading_leftCol\n{\n    width: 20px;\n    height: 20px;\n}\n.heading_midCol\n{\n    width: 100px;\n    height: 20px;\n    font-size: medium; \n    font-weight: bold; \n}\n.heading_rightCol\n{\n    width: 101px;\n    height: 20px;\n    font-size: medium;\n    font-weight: bold;\n}\n.row_leftCol\n{\n    width: 20px;\n    font-size: small;\n    font-weight: bold;\n}\n.row_midCol\n{\n    width: 100px;\n}\n.row_rightCol\n{\n    width: 101px;\n}\n.logo\n{\n    width: 135px;\n    height: 53px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling On-Send Compliance for a Policy (Modern/New Outlook)\nDESCRIPTION: Retrieves an existing OWA mailbox policy and modifies it to enable the on-send add-in compliance feature by setting the `OnSendAddinsEnabled` flag to `$true`. This prevents users under this policy from editing items while on-send add-ins are processing in modern Outlook on the web or new Outlook on Windows. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-OWAMailboxPolicy OWAOnSendAddinAllUserPolicy | Set-OWAMailboxPolicy –OnSendAddinsEnabled:$true\n```\n\n----------------------------------------\n\nTITLE: Editing Note Content - Excel JavaScript API - JavaScript\nDESCRIPTION: This code shows how to update the content of the first note in the sheet's NoteCollection using the Note.content property. It retrieves the first note by index, assigns new text to its content, and synchronizes the change via the Excel.run context. Dependencies include Office.js and a worksheet containing at least one note.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-notes.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    // This function changes the content in the first note.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const note = sheet.notes.getItemAt(0);\n\n    note.content = \"Changing the content of the first note.\";\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Attachment Details via AJAX in JavaScript\nDESCRIPTION: This JavaScript function `makeServiceRequest` gathers attachment details from the current Outlook item (`mailbox.item.attachments`), performs a deep copy of each `AttachmentDetails` object, and populates the `serviceRequest.attachments` array. It then uses jQuery's `$.ajax` method to send the complete `serviceRequest` object (JSON stringified) as a POST request to a specified remote service URL (`../../api/Default`). The function includes callbacks to handle the success (`.done`) and failure (`.fail`) of the AJAX call, as well as logic (`.always`) to re-enable UI elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfunction makeServiceRequest() {\n  // Format the attachment details for sending.\n  for (let i = 0; i < mailbox.item.attachments.length; i++) {\n    serviceRequest.attachments[i] = JSON.parse(JSON.stringify(mailbox.item.attachments[i]));\n  }\n\n  $.ajax({\n    url: '../../api/Default',\n    type: 'POST',\n    data: JSON.stringify(serviceRequest),\n    contentType: 'application/json;charset=utf-8'\n  }).done(function (response) {\n    if (!response.isError) {\n      const names = \"<h2>Attachments processed using \" +\n                    serviceRequest.service +\n                    \": \" +\n                    response.attachmentsProcessed +\n                    \"</h2>\";\n      for (let i = 0; i < response.attachmentNames.length; i++) {\n        names += response.attachmentNames[i] + \"<br />\";\n      }\n      document.getElementById(\"names\").innerHTML = names;\n    } else {\n      app.showNotification(\"Runtime error\", response.message);\n    }\n  }).fail(function (status) {\n\n  }).always(function () {\n    $('.disable-while-sending').prop('disabled', false);\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Delaying Excel.run Execution During Cell Edit in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `delayForCellEdit` option within the `Excel.RunOptions` object passed to `Excel.run`. Setting `delayForCellEdit` to `true` instructs Excel to wait until the user exits cell edit mode before executing the batch operations defined within the asynchronous function. This prevents errors that would occur if the batch tried to run while a cell was being actively edited. The default behavior (`false`) would cause the batch request to fail immediately in such a scenario.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-delay-in-cell-edit.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run({ delayForCellEdit: true }, async (context) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Including Office.js via CDN in HTML - HTML\nDESCRIPTION: This snippet demonstrates how to add the Office JavaScript API library to your add-in by inserting a <script> tag in the <head> section of your HTML file. This ensures that the add-in uses the latest Office.js features and receives automatic updates. The 'src' parameter should reference the preferred API version from the CDN. The script must be inserted inside the head for correct initialization.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/referencing-the-javascript-api-for-office-library-from-its-cdn.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\\n    ...\\n    <script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\" type=\\\"text/javascript\\\"></script>\\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating FormattedNumberCellValue with Custom Function in JavaScript\nDESCRIPTION: This JavaScript custom function `createFormattedNumber` accepts a numeric value and a number format string (e.g., \"0.00%\"). It returns a `FormattedNumberCellValue` data type object, encapsulating the original value and its specified format. Requires the `allowCustomDataForDataTypeAny` property set to `true` in the custom function's JSON metadata.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-data-types-concepts.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Take a number as the input value and return a formatted number value as the output.\n * @customfunction\n * @param {number} value\n * @param {string} format (e.g. \"0.00%\")\n * @returns A formatted number value.\n */\nfunction createFormattedNumber(value, format) {\n    return {\n        type: \"FormattedNumber\",\n        basicValue: value,\n        numberFormat: format\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing a Contextual Tab using Office.ribbon.requestUpdate in JavaScript\nDESCRIPTION: This asynchronous JavaScript function `showDataTab` demonstrates how to request an update to the Office ribbon to make a specific contextual tab visible. It uses the `Office.ribbon.requestUpdate` method, passing a `RibbonUpdaterData` object that specifies the target tab's ID (`CtxTab1`) and sets its `visible` property to `true`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function showDataTab() {\n    await Office.ribbon.requestUpdate({\n        tabs: [\n            {\n                id: \"CtxTab1\",\n                visible: true\n            }\n        ]});\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying PivotTable Data Aggregation Function in Excel using JavaScript\nDESCRIPTION: This snippet demonstrates how to change the default aggregation function (Sum) for data hierarchies in an Excel PivotTable using the Office JS API. It accesses the active worksheet's PivotTable named \"Farm Sales\", loads its data hierarchies, and sets the `summarizeBy` property of the first two hierarchies to `Excel.AggregationFunction.average`. This requires the Office JS library and an active Excel workbook with a PivotTable named \"Farm Sales\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.dataHierarchies.load(\"no-properties-needed\");\n    await context.sync();\n\n    // Change the aggregation from the default sum to an average of all the values in the hierarchy.\n    pivotTable.dataHierarchies.items[0].summarizeBy = Excel.AggregationFunction.average;\n    pivotTable.dataHierarchies.items[1].summarizeBy = Excel.AggregationFunction.average;\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying an Add-in Host with the Hosts XML Element for Office Add-ins\nDESCRIPTION: This snippet shows how to use the <Hosts> element within an Office Add-in manifest XML to designate supported hosts for the add-in, here specifying 'Mailbox' as an example. The <Hosts> tag is a required child of <OfficeApp> and can include one or more <Host> subelements, each with a Name attribute. This mechanism allows Office to determine where the add-in will be available. The configuration is mandatory for all manifest types and must match Office platform requirements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<OfficeApp>\\n...\\n  <Hosts>\\n    <Host Name=\\\"Mailbox\\\" />\\n  </Hosts>\\n...\\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Function in Excel\nDESCRIPTION: This Excel formula demonstrates how to call a custom function named `GETSTARCOUNT` within the `CONTOSO` namespace. It takes two string arguments, representing a GitHub user/organization ('OfficeDev') and a repository name ('Excel-Custom-Functions'), and is expected to return the current star count for that repository into the cell where the formula is entered. This requires the corresponding custom functions add-in (defined in manifest.xml) to be registered and active in Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/excel-custom-functions-manually-register.md#_snippet_0\n\nLANGUAGE: excel-formula\nCODE:\n```\n=CONTOSO.GETSTARCOUNT(\"OfficeDev\", \"Excel-Custom-Functions\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Excel PivotTable Layout Formatting using Office JS API\nDESCRIPTION: This snippet customizes the appearance and formatting behavior of the \"Farm Sales\" PivotTable's layout. It sets the text displayed in empty data cells to \"--\" (`emptyCellText`), enables the filling of empty cells (`fillEmptyCells`), sets the horizontal alignment of the data body range to right-aligned, and ensures that these custom format settings persist (`preserveFormatting = true`) even after the PivotTable is refreshed. Requires an existing PivotTable named \"Farm Sales\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    let pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n    let pivotLayout = pivotTable.layout;\n\n    // Set a default value for an empty cell in the PivotTable. This doesn't include cells left blank by the layout.\n    pivotLayout.emptyCellText = \"--\";\n\n    // Set the text alignment to match the rest of the PivotTable.\n    pivotLayout.getDataBodyRange().format.horizontalAlignment = Excel.HorizontalAlignment.right;\n\n    // Ensure empty cells are filled with a default value.\n    pivotLayout.fillEmptyCells = true;\n\n    // Ensure that the format settings persist, even after the PivotTable is refreshed and recalculated.\n    pivotLayout.preserveFormatting = true;\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Representing an Element with Attribute and Text - XML\nDESCRIPTION: Demonstrates how an XML element can carry both a text value and attribute(s). In this example, the element <MyThing> has a 'color' attribute and embedded text. This structure is commonly used in Office Add-in XML manifests. Inputs are XML document elements, outputs are the hierarchical element and attribute representation. No external dependencies are required. Limitations: Only a single text value and set of attributes per element.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/json-manifest-overview.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MyThing color=\"blue\">Some text</MyThing>\n```\n\n----------------------------------------\n\nTITLE: Creating PivotTable at Workbook Level - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet illustrates how to add a PivotTable directly at the workbook level, specifying both the data source and the destination using worksheet and address notation. The PivotTable \"Farm Sales\" is added to 'PivotWorksheet' (A2), with data from 'DataWorksheet' (A1:E21). Office.js must be loaded, and the referenced worksheets and ranges must exist in the workbook. The created PivotTable is immediately available in 'PivotWorksheet' once executed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Create a PivotTable named \"Farm Sales\" on a worksheet called \"PivotWorksheet\" at cell A2\n    // the data is from the worksheet \"DataWorksheet\" across the range A1:E21.\n    context.workbook.pivotTables.add(\n        \"Farm Sales\", \"DataWorksheet!A1:E21\", \"PivotWorksheet!A2\");\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering an Office Add-in Command Function in TypeScript\nDESCRIPTION: This TypeScript code defines the `insertHelloWorld` function, which is triggered by an add-in command. It uses the Office JS API to insert the text \"Hello World\" into the body of the current Outlook item (message) at the cursor position using `setSelectedDataAsync`. The function signals its completion using `event.completed()` and is registered with the Office host using `Office.actions.associate` so it can be called by the ID \"insertHelloWorld\" specified in the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/outlook-quickstart-json-manifest-typescript.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction insertHelloWorld(event: Office.AddinCommands.Event) {\n    Office.context.mailbox.item.body.setSelectedDataAsync(\"Hello World\", {coercionType: Office.CoercionType.Text});\n\n    // Be sure to indicate when the add-in command function is complete\n    event.completed();\n}\n\n// Register the function with Office\nOffice.actions.associate(\"insertHelloWorld\", insertHelloWorld);\n```\n\n----------------------------------------\n\nTITLE: Catching and Returning Async Errors with try...catch - TypeScript\nDESCRIPTION: This snippet fetches data from a REST API using fetch inside a custom function, returning the comment body on success. It uses a .catch handler to throw a CustomFunctions.Error with ErrorCode.notAvailable (#N/A) if the web request fails. Dependencies: fetch API, CustomFunctions global. Input is a comment ID number, and output is either a JSON field or an Excel error in case of failure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-errors.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets a comment from the hypothetical contoso.com/comments API.\n * @customfunction\n * @param {number} commentID ID of a comment.\n */\nfunction getComment(commentID) {\n  let url = \"https://www.contoso.com/comments/\" + commentID;\n  return fetch(url)\n    .then(function (data) {\n      return data.json();\n    })\n    .then(function (json) {\n      return json.body;\n    })\n    .catch(function (error) {\n      throw new CustomFunctions.Error(CustomFunctions.ErrorCode.notAvailable);\n    })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Strings in a Resource File (JSON)\nDESCRIPTION: Shows the structure of a JSON resource file (e.g., `my-resources.json`) used for localizing Office Add-in shortcuts and actions when using an Add-in only manifest. It contains a top-level `resources` object with nested objects for each supported locale (`en-us`, `fr-fr`). Each locale object maps resource tokens (used in the extended overrides file) to their corresponding localized string values.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resources\":{ \n        \"en-us\": { \n            \"ShowTaskpane_default_shortcut\": { \n                \"value\": \"CTRL+SHIFT+A\", \n            }, \n            \"ShowTaskpane_action_name\": {\n                \"value\": \"Show task pane for add-in\",\n            }, \n        },\n        \"fr-fr\": { \n            \"ShowTaskpane_default_shortcut\": { \n                \"value\": \"CTRL+SHIFT+A\", \n            }, \n            \"ShowTaskpane_action_name\": {\n                \"value\": \"Afficher le volet de tâche pour add-in\",\n              } \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding the Task Pane using Office.addin.hide in JavaScript\nDESCRIPTION: This snippet shows how to programmatically hide the Office Add-in task pane using the `Office.addin.hide()` method. The example function `onCurrentQuarterDeactivated` suggests this might be used within an event handler, such as `Worksheet.onDeactivated`. Hiding the task pane only affects its visibility; state and event listeners are preserved. This method requires the shared runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/show-hide-add-in.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onCurrentQuarterDeactivated() {\n    Office.addin.hide();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Context Menu Item Availability - JavaScript\nDESCRIPTION: Demonstrates how to dynamically change the enabled status of custom context menu items using JavaScript. It creates a `ContextMenuUpdaterData` object containing an array of controls with their IDs (`Addin.CtxMenu.Button1`, `Addin.CtxMenu.Button2`) and desired `enabled` states (`true` or `false`). The `Office.contextMenu.requestUpdate()` method is then called asynchronously (`await`) to apply these changes. This requires a shared runtime and ContextMenuApi 1.1.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait Office.contextMenu.requestUpdate({\n    controls: [\n        {\n            id: Addin.CtxMenu.Button1,\n            enabled: true\n        },\n        {\n            id: Addin.CtxMenu.Button2,\n            enabled: false\n        },\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getIDToken in Office Add-in with Classic Script (JavaScript)\nDESCRIPTION: This JavaScript snippet is intended for use in Visual Studio-based Office Add-ins. It sets up UI event handlers, calls OfficeRuntime.auth.getAccessToken to retrieve an SSO token, decodes it using jwt-decode, and displays the user's name, email, and ID in the UI. Error handling is included to display authentication or API errors in the same interface. Dependencies include Office.js, OfficeRuntime (for auth), jQuery, and jwt-decode.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/use-sso-to-get-office-signed-in-user-token.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n(function () {\\n  \\\"use strict\\\";\\n\\n  // The initialize function must be run each time a new page is loaded.\\n  Office.initialize = function (reason) {\\n    $(document).ready(function () {\\n      $(\\\"#getIDToken\\\").on(\\\"click\\\", getIDToken);\\n    });\\n  };\\n\\n  async function getIDToken() {\\n    try {\\n      let userTokenEncoded = await OfficeRuntime.auth.getAccessToken({\\n        allowSignInPrompt: true,\\n      });\\n      let userToken = jwt_decode(userTokenEncoded);\\n      document.getElementById(\\\"userInfo\\\").innerHTML =\\n        \\\"name: \\\" +\\n        userToken.name +\\n        \\\"<br>email: \\\" +\\n        userToken.preferred_username +\\n        \\\"<br>id: \\\" +\\n        userToken.oid;\\n      console.log(userToken);\\n    } catch (error) {\\n      document.getElementById(\\\"userInfo\\\").innerHTML =\\n        \\\"An error occurred. <br>Name: \\\" +\\n        error.name +\\n        \\\"<br>Code: \\\" +\\n        error.code +\\n        \\\"<br>Message: \\\" +\\n        error.message;\\n      console.log(error);\\n    }\\n  }\\n})();\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Replacement for Selection in JavaScript\nDESCRIPTION: This snippet, intended to replace `TODO1` in the `replaceText` function, gets the current document context and the selected range (`doc.getSelection()`). It then queues a command using `originalRange.insertText(\"many\", Word.InsertLocation.replace)` to replace the entire content of the selected range with the string \"many\". Assumes the Word JavaScript API (`Word`) is available.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = context.document;\nconst originalRange = doc.getSelection();\noriginalRange.insertText(\"many\", Word.InsertLocation.replace);\n```\n\n----------------------------------------\n\nTITLE: Setting Formulas for a Range of Cells - Excel JavaScript API - JavaScript\nDESCRIPTION: Assigns a list of formulas to the range E3:E6, including a calculated sum. Highlights array usage for batch formula setting. Dependencies: Excel JavaScript API context. Each formula string is mapped to a respective cell within the range.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let data = [\n        [\"=C3 * D3\"],\n        [\"=C4 * D4\"],\n        [\"=C5 * D5\"],\n        [\"=SUM(E3:E5)\"]\n    ];\n\n    let range = sheet.getRange(\"E3:E6\");\n    range.formulas = data;\n    range.format.autofitColumns();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Comment Event Handlers on Document Body with Tracking in Office.js (TypeScript)\nDESCRIPTION: Registers multiple comment event handlers—added, changed, deleted, deselected, and selected—on the document body in Office.js using TypeScript, and calls track() on the body to support event tracking. This pattern is necessary for comment-related events. Requirements include Office.js, access to context.document.body, appropriate handler functions, and Word.run. Inputs are the body object and event handler functions; outputs are registered event handlers and console logging. The limitation is that missing track() will prevent events from firing on the body.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/word-add-ins-events.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet eventContexts = [];\n\n// Registers event handlers.\nawait Word.run(async (context) => {\n  const body: Word.Body = context.document.body;\n\n  // Track the body object since you're adding comment events to it.\n  body.track();\n  await context.sync();\n\n  eventContexts[0] = body.onCommentAdded.add(onEventHandler);\n  eventContexts[1] = body.onCommentChanged.add(onChangedHandler);\n  eventContexts[2] = body.onCommentDeleted.add(onEventHandler);\n  eventContexts[3] = body.onCommentDeselected.add(onEventHandler);\n  eventContexts[4] = body.onCommentSelected.add(onEventHandler);\n  await context.sync();\n\n  console.log(\"Event handlers registered.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CustomFunctionsMetadataPlugin in Webpack (Multiple Inputs) - JavaScript\nDESCRIPTION: This configuration demonstrates how to set up the `CustomFunctionsMetadataPlugin` in `webpack.config.js` when custom functions are defined across multiple source files. The `input` property is assigned an array of strings, each pointing to a source file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew CustomFunctionsMetadataPlugin({\n   output: \"functions.json\",\n   input: [\n            \"./src/functions/someFunctions.js\", \n            \"./src/functions/otherFunctions.js\"\n          ], \n}),\n```\n\n----------------------------------------\n\nTITLE: Getting Locations using enhancedLocation.getAsync in Office JS\nDESCRIPTION: This JavaScript code retrieves the locations of an Outlook appointment using `item.enhancedLocation.getAsync`. It defines a callback function (`callbackFunction`) that processes the `asyncResult`. Inside the callback, it iterates through the retrieved locations, logging the display name, type, and email address (if it's a Room). Requires the Office JavaScript API and jQuery. Note that personal contact groups added as locations aren't returned by this method.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-location-of-an-appointment.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nlet item;\n\nOffice.initialize = function () {\n    item = Office.context.mailbox.item;\n    // Checks for the DOM to load using the jQuery ready method.\n    $(document).ready(function () {\n        // After the DOM is loaded, app-specific code can run.\n        // Get the location of the item being composed.\n        item.enhancedLocation.getAsync(callbackFunction);\n    });\n}\n\nfunction callbackFunction(asyncResult) {\n    asyncResult.value.forEach(function (place) {\n        console.log(\"Display name: \" + place.displayName);\n        console.log(\"Type: \" + place.locationIdentifier.type);\n        if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {\n            console.log(\"Email address: \" + place.emailAddress);\n        }\n    });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Categories to an Outlook Item using Office JS\nDESCRIPTION: This snippet shows how to apply one or more existing categories (from the master list) to the currently selected Outlook message or appointment item. It uses the `Office.context.mailbox.item.categories.addAsync` method, passing an array of category display names (strings). Note: This operation requires the category to exist in the master list and has limitations in Compose mode for messages in Outlook on the web or new Outlook on Windows.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/categories.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js\nconst categoriesToAdd = [\"Urgent!\"];\n\nOffice.context.mailbox.item.categories.addAsync(categoriesToAdd, function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n        console.log(\"Successfully added categories\");\n    } else {\n        console.log(\"categories.addAsync call failed with error: \" + asyncResult.error.message);\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Office Initialization and Range Styling - Office JS JavaScript\nDESCRIPTION: This JavaScript snippet is the main logic for the add-in task pane, initializing Office.js, registering a click event handler for a button, and defining an async 'setColor' function. When the button is pressed, the function uses the Excel JavaScript API to change the fill color of the user's currently selected range to green. Dependencies include Office.js, JQuery (for DOM manipulation and event binding), and Excel JavaScript API. Inputs are the user's Excel selection and outputs are color changes in Excel. Errors (including OfficeExtension errors) are logged to the console.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/excel-quickstart-vs.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\n(function () {\\n\\n    Office.onReady(function() {\\n        // Office is ready.\\n        $(document).ready(function () {\\n            // The document is ready.\\n            $('#set-color').on(\"click\", setColor);\\n        });\\n    });\\n\\n    async function setColor() {\\n        await Excel.run(async (context) => {\\n            const range = context.workbook.getSelectedRange();\\n            range.format.fill.color = 'green';\\n\\n            await context.sync();\\n        }).catch(function (error) {\\n            console.log(\"Error: \" + error);\\n            if (error instanceof OfficeExtension.Error) {\\n                console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\\n            }\\n        });\\n    }\\n})();\n```\n\n----------------------------------------\n\nTITLE: Adding Dialog Button to Task Pane (HTML)\nDESCRIPTION: This snippet shows how to add a button to the task pane's HTML markup to allow users to open a custom dialog window. It requires the presence of the Microsoft Office JavaScript add-in framework and should be placed after the freeze-header button. The main functionality is to display the 'Open Dialog' button that users can click to trigger the dialog interaction workflow; it produces a button UI element as output.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_56\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"ms-Button\\\" id=\\\"open-dialog\\\">Open Dialog</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Handling Task Pane Visibility Changes in JavaScript\nDESCRIPTION: This snippet demonstrates how to register an event handler for the `VisibilityModeChanged` event using `Office.addin.onVisibilityModeChanged`. The handler function receives an argument containing the `visibilityMode` (e.g., 'Taskpane' when shown). This allows the add-in to react to visibility changes, for example, by updating UI elements when the task pane becomes visible. Requires the shared runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/show-hide-add-in.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.addin.onVisibilityModeChanged(function(args) {\n    if (args.visibilityMode == \"Taskpane\") {\n        // Code that runs whenever the task pane is made visible.\n        // For example, an Excel.run() that loads the names of\n        // all worksheets and passes them to the task pane UI.\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slide Details with Office JS API in JavaScript\nDESCRIPTION: This JavaScript function, intended for `Home.js`, replaces the default `getDataFromSelection` function. It uses the `Office.context.document.getSelectedDataAsync` method with `Office.CoercionType.SlideRange` to fetch details about the currently selected slide range (often defaulting to the current slide in a content add-in context). The retrieved details (or an error message) are then displayed using the `showNotification` helper function (assumed to be defined elsewhere).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/powerpoint-quickstart-content.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Gets some details about the current slide and displays them in a notification.\nfunction getDataFromSelection() {\n    if (Office.context.document.getSelectedDataAsync) {\n        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\n                    showNotification('Some slide details are:', '\"' + JSON.stringify(result.value) + '\"');\n                } else {\n                    showNotification('Error:', result.error.message);\n                }\n            }\n        );\n    } else {\n        app.showNotification('Error:', 'Reading selection data is not supported by this host application.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Selected Data with Anonymous Callback - Office.js - JavaScript\nDESCRIPTION: This snippet demonstrates calling the Office.context.document.getSelectedDataAsync method using an anonymous function callback. The coercion type is specified as text, ensuring that the selected content is returned as a string. The result is displayed by appending it to a page element with id 'message' via a custom write function. Required dependencies include Office.js and a div with id 'message' in the DOM.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.document.getSelectedDataAsync(Office.CoercionType.Text, \n    function (result) {\n        write('Selected data: ' + result.value);\n    }\n);\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Function ID and Name using @customfunction Tag - JavaScript\nDESCRIPTION: This example demonstrates defining both the `id` (`INC`) and the display `name` (`INCREMENT`) for a custom function using the `@customfunction` JSDoc tag. The `name` is what users see in the Excel UI, while the `id` is used internally.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Increments a value once a second.\n * @customfunction INC INCREMENT\n * ...\n */\n```\n\n----------------------------------------\n\nTITLE: Customizing Smart Alerts Dialog Button in Outlook Add-ins - JavaScript\nDESCRIPTION: This JavaScript snippet is an event callback for Outlook add-in Smart Alerts, customizing the dialog's action button. It checks message attachments and, if necessary, invokes event.completed with options to override the dialog button label and assign a commandId for launching a task pane. The implementation relies on the Office.js library and requires the add-in's manifest to declare the commandId. Key parameters include cancelLabel (the custom button text, max 20 chars), commandId (task pane/function reference), and error messages for both legacy and modern clients. The callback expects an asyncResult with attachments and the mailbox event context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getAttachmentsCallback(asyncResult) {\n  const event = asyncResult.asyncContext;\n  if (asyncResult.value.length > 0) {\n    for (let i = 0; i < asyncResult.value.length; i++) {\n      if (asyncResult.value[i].isInline == false) {\n        event.completed({ allowEvent: true });\n        return;\n      }\n    }\n\n    event.completed({\n      allowEvent: false,\n      errorMessage: \"Looks like the body of your message includes an image or an inline file. Attach a copy to the message before sending.\",\n      // TIP: In addition to the formatted message, it's recommended to also set a\n      // plain text message in the errorMessage property for compatibility on\n      // older versions of Outlook clients.\n      errorMessageMarkdown: \"Looks like the body of your message includes an image or an inline file. Attach a copy to the message before sending.\\n\\n**Tip**: For guidance on how to attach a file, see [Attach files in Outlook](https://www.contoso.com/help/attach-files-in-outlook).\",\n      cancelLabel: \"Add an attachment\",\n      commandId: \"msgComposeOpenPaneButton\"\n    });\n  } else {\n    event.completed({\n      allowEvent: false,\n      errorMessage: \"Looks like you're forgetting to include an attachment.\",\n      // TIP: In addition to the formatted message, it's recommended to also set a\n      // plain text message in the errorMessage property for compatibility on\n      // older versions of Outlook clients.\n      errorMessageMarkdown: \"Looks like you're forgetting to include an attachment.\\n\\n**Tip**: For guidance on how to attach a file, see [Attach files in Outlook](https://www.contoso.com/help/attach-files-in-outlook).\",\n      cancelLabel: \"Add an attachment\",\n      commandId: \"msgComposeOpenPaneButton\"\n    });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Event Handler for Create Table Button in JavaScript\nDESCRIPTION: This JavaScript code snippet, intended to be placed within the `Office.onReady` function block after the host check, assigns an `onclick` event handler to the HTML button with the ID 'create-table'. When clicked, it executes the `createTable` function, wrapped within the `tryCatch` helper function for error management.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Assign event handlers and other initialization logic.\ndocument.getElementById(\"create-table\").onclick = () => tryCatch(createTable);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata for the Latest Excel Comment Reply using JavaScript\nDESCRIPTION: This snippet demonstrates retrieving metadata (author email, name, creation date) for the most recent reply in a comment thread. It first gets the comment, syncs to get the reply count, retrieves the last reply using the count, loads the reply's metadata, syncs again, and then prints the information. Requires multiple `context.sync` calls.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Get the comment at cell A2 in the \"MyWorksheet\" worksheet.\n    let comment = context.workbook.comments.getItemByCell(\"MyWorksheet!A2\");\n    let replyCount = comment.replies.getCount();\n    // Sync to get the current number of comment replies.\n    await context.sync();\n\n    // Get the last comment reply in the comment thread.\n    let reply = comment.replies.getItemAt(replyCount.value - 1);\n    reply.load([\"authorEmail\", \"authorName\", \"creationDate\"]);\n\n    // Sync to load the reply metadata to print.\n    await context.sync();\n\n    console.log(`Latest reply: ${reply.creationDate.toDateString()}: ${reply.authorName} ${reply.authorEmail})`);\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying a Single Target Dialect (XML)\nDESCRIPTION: This XML snippet shows the `<TargetDialect>` element, used within `<TargetDialects>` in an Office Add-in manifest. It specifies a single regional language supported by the dictionary, 'EN-US' in this example, using the RFC1766 language tag format. This element is required for dictionary add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<TargetDialect>EN-US</TargetDialect>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Insertion Before Selection in JavaScript\nDESCRIPTION: This snippet, intended to replace `TODO1` in `insertTextBeforeRange`, gets the current document context and the selected range using `doc.getSelection()`. It then queues a command using `originalRange.insertText(\"Office 2019, \", Word.InsertLocation.before)` to insert the specified text immediately preceding the user's selection in the Word document. Requires the Word JavaScript API (`Word`) to be available.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = context.document;\nconst originalRange = doc.getSelection();\noriginalRange.insertText(\"Office 2019, \", Word.InsertLocation.before);\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog and Handling Messages from it in Host Page (JavaScript)\nDESCRIPTION: This code demonstrates how to open an Office dialog using `displayDialogAsync` from the host page. It stores the returned `Dialog` object in a global variable (`dialog`) and registers an event handler (`processMessage`) for the `DialogMessageReceived` event. This setup allows the host page to receive and process messages sent from the opened dialog via `messageParent`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet dialog; // Declare as global variable.\nOffice.context.ui.displayDialogAsync(\"https://www.contoso.com/myDialog.html\",\n    (asyncResult) => {\n        dialog = asyncResult.value;\n        dialog.addEventHandler(Office.EventType.DialogMessageReceived, processMessage);\n    }\n);\n\nfunction processMessage(arg) {\n    dialog.close();\n\n    // Add code to process the message here.\n\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Location using location.getAsync in Office JS\nDESCRIPTION: This JavaScript snippet demonstrates retrieving the location string of an Outlook appointment using the basic `item.location.getAsync` method. It includes a callback function to handle the asynchronous result, checking for errors (`asyncResult.status`) and displaying the location string (`asyncResult.value`) if successful using a helper `write` function. Requires the Office JavaScript API and jQuery.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-location-of-an-appointment.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js\nlet item;\n\nOffice.initialize = function () {\n    item = Office.context.mailbox.item;\n    // Checks for the DOM to load using the jQuery ready method.\n    $(document).ready(function () {\n        // After the DOM is loaded, app-specific code can run.\n        // Get the location of the item being composed.\n        getLocation();\n    });\n}\n\n// Get the location of the item that the user is composing.\nfunction getLocation() {\n    item.location.getAsync(\n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed){\n                write(asyncResult.error.message);\n            }\n            else {\n                // Successfully got the location, display it.\n                write ('The location is: ' + asyncResult.value);\n            }\n        });\n}\n\n// Write to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Document Read Permissions - Office Unified Manifest - JSON\nDESCRIPTION: This snippet demonstrates how to define the required read permission for a task pane add-in using the unified JSON manifest format for Office Add-ins. The 'authorization' property includes a 'resourceSpecific' permissions array where each object specifies a permission by name (e.g., 'Document.Read.User') and type (typically 'Delegated'). To use this, insert the object within the 'permissions' block of your manifest; ensure your manifest follows the unified schema and that permissions match your API and feature requirements. The snippet expects JSON syntax and can be extended with additional permissions as needed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/privacy-and-security.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"authorization\\\": {\\n    \\\"permissions\\\": {\\n      \\\"resourceSpecific\\\": [\\n        ...\\n        {\\n          \\\"name\\\": \\\"Document.Read.User\\\",\\n          \\\"type\\\": \\\"Delegated\\\"\\n        },\\n      ]\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Range Property and Syncing Context in JavaScript (TODO2)\nDESCRIPTION: This JavaScript snippet replaces the 'TODO2' placeholder in 'insertTextIntoRange'. It queues a command to load the 'text' property of the 'originalRange' proxy object from the Word document. It then calls 'context.sync()' to execute the load command and retrieve the value, making 'originalRange.text' readable in subsequent code within the function. This step is crucial before accessing properties of proxy objects.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\noriginalRange.load(\"text\");\nawait context.sync();\n```\n\n----------------------------------------\n\nTITLE: Registering Dialog Event Handler in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to register an event handler for the `DialogEventReceived` event immediately after successfully calling `displayDialogAsync`. The `result.value` (a `Dialog` object) is stored, and its `addEventHandler` method is used to attach the `processDialogEvent` function to handle events coming from the dialog.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-handle-errors-events.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nlet dialog;\nOffice.context.ui.displayDialogAsync('https://myDomain/myDialog.html',\n    function (result) {\n        dialog = result.value;\n        dialog.addEventHandler(Office.EventType.DialogEventReceived, processDialogEvent);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Slides After Currently Selected Slide in PowerPoint using Office JS\nDESCRIPTION: This asynchronous JavaScript function `insertAfterSelectedSlide` combines getting the selected slide ID and inserting slides. It first calls `getSelectedSlideID` (awaiting the promise) within a `PowerPoint.run` block. Then, it calls `insertSlidesFromBase64`, passing the retrieved ID (concatenated with '#') as the `targetSlideId` in the options object, effectively inserting the slides from the base64 source immediately after the currently selected slide.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/insert-slides-into-presentation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertAfterSelectedSlide() {\n    await PowerPoint.run(async function(context) {\n\n        const selectedSlideID = await getSelectedSlideID();\n\n        context.presentation.insertSlidesFromBase64(chosenFileBase64, {\n            formatting: \"UseDestinationTheme\",\n            targetSlideId: selectedSlideID + \"#\"\n        });\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Office Add-in and Defining ItemSend Event Handler Entry Point (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates the initialization process for an Office add-in using `Office.initialize`. It retrieves the current mailbox item (`Office.context.mailbox.item`). It also defines the `validateBody` function, which serves as the entry point triggered by the `ItemSend` event. This function initiates an asynchronous call (`body.getAsync`) to retrieve the email body content in HTML format, passing the event object to the callback.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nlet mailboxItem;\n\nOffice.initialize = function (reason) {\n    mailboxItem = Office.context.mailbox.item;\n}\n\n// Entry point for Contoso Message Body Checker add-in before send is allowed.\n// <param name=\"event\">ItemSend event is automatically passed by on-send code to the function specified in the manifest.</param>\nfunction validateBody(event) {\n    mailboxItem.body.getAsync(\"html\", { asyncContext: event }, checkBodyOnlyOnSendCallBack);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for Chart.getImage Method in Excel JavaScript API\nDESCRIPTION: Provides the TypeScript method signature for `Chart.getImage`, detailing the optional parameters: `width` (number), `height` (number), and `fittingMode` (Excel.ImageFittingMode). These parameters control the dimensions and scaling behavior of the exported image. This is a type declaration for informational purposes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetImage(width?: number, height?: number, fittingMode?: Excel.ImageFittingMode): OfficeExtension.ClientResult<string>;\n```\n\n----------------------------------------\n\nTITLE: Applying Borders and Advanced Formatting to a Specific PowerPoint Table Cell (JavaScript)\nDESCRIPTION: Shows how to assign border styles, font styles, and fill styles to a particular table cell using specificCellProperties in the TableAddOptions object. The cell at (row 1, column 1) is set to have red borders of weight 3 and advanced font properties. Prerequisites: PowerPoint JavaScript API, specifically formatted specificCellProperties 2D array. Inputs: cell position, border specifications, font details.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst columnCount = 3;\nconst rowCount = 3;\n// Compact syntax to create a 2D array filled with empty and distinct objects.\nconst specificCellProperties = Array(rowCount).fill(undefined).map(_ => Array(columnCount).fill(undefined).map(_ => ({}) ));\nconst options: PowerPoint.TableAddOptions = {\n    values: [\n        [\"1\", \"2\", \"3\"],\n        [\"4\", \"5\", \"6\"],\n        [\"7\", \"8\", \"9\"]\n    ],\n    uniformCellProperties: {\n        fill: {\n            color: \"lightcyan\",\n            transparency: 0.5\n        },\n    },\n    specificCellProperties\n};\noptions.specificCellProperties[1][1] = {\n    font: {\n        color: \"red\",\n        name: \"Arial\",\n        size: 50,\n        allCaps: true,\n        italic: true\n    },\n    borders: {\n        bottom: {\n            color: \"red\",\n            weight: 3\n        },\n        left: {\n            color: \"red\",\n            weight: 3\n        },\n        right: {\n            color: \"red\",\n            weight: 3\n        },\n        top: {\n            color: \"red\",\n            weight: 3\n        }\n    }\n};\nawait insertTableOnCurrentSlide(rowCount, columnCount, options);\n```\n\n----------------------------------------\n\nTITLE: Building Office Add-in Web Application for Production - Command Line\nDESCRIPTION: This code demonstrates running the npm build script from the command line to bundle application files for production. The 'npm run build' command requires Node.js and npm (Node Package Manager) as prerequisites, as well as a defined build script in the project's package.json. The command triggers the build process, preparing all source files and creating a production-ready 'dist' folder containing optimized assets for deployment. Input: none (run from project root). Output: 'dist' directory with files ready to be deployed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/publish-add-in.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Enumerating Available Sensitivity Labels via Office JavaScript API - JavaScript\nDESCRIPTION: This snippet demonstrates how to list all available sensitivity labels for the current mailbox item by first checking catalog status, then calling getAsync on Office.context.sensitivityLabelsCatalog. It requires mailbox permissions set in the add-in manifest and that the feature be enabled on the organization's tenant. The output iterates each label, printing details such as name, id, tooltip, color, and sublabels to the console.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/sensitivity-label.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// It's recommended to check the status of the catalog of sensitivity labels before\\n// calling other sensitivity label methods.\\nOffice.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {\\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {\\n        // Identify available sensitivity labels in the catalog.\\n        Office.context.sensitivityLabelsCatalog.getAsync((asyncResult) => {\\n            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\\n                const catalog = asyncResult.value;\\n                console.log(\\\"Sensitivity Labels Catalog:\\\");\\n                catalog.forEach((sensitivityLabel) => {\\n                    console.log(`Name: ${sensitivityLabel.name}`);\\n                    console.log(`ID: ${sensitivityLabel.id}`);\\n                    console.log(`Tooltip: ${sensitivityLabel.tooltip}`);\\n                    console.log(`Color: ${sensitivityLabel.color}`);\\n                    console.log(`Sublabels: ${JSON.stringify(sensitivityLabel.children)}`);\\n                });\\n            } else {\\n                console.log(\\\"Action failed with error: \\\" + asyncResult.error.message);\\n            }\\n        });\\n    } else {\\n        console.log(\\\"Action failed with error: \\\" + asyncResult.error.message);\\n    }\\n});\n```\n\n----------------------------------------\n\nTITLE: Declare toggleProtection Function to Handle Ribbon Button Action (JavaScript)\nDESCRIPTION: Implements the async toggleProtection handler for the ExecuteFunction Office command. Uses Excel.run to obtain the context and queue commands for toggling worksheet protection status. Calls args.completed() to signal completion to Office. Dependencies: Office.js API, Excel.js object model. Key input: args object for Office command, output: toggles the protection state of the current worksheet. Must be registered via Office.actions.associate.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_39\n\nLANGUAGE: js\nCODE:\n```\nasync function toggleProtection(args) {\\n    try {\\n        await Excel.run(async (context) => {\\n\\n            // TODO1: Queue commands to reverse the protection status of the current worksheet.\\n\\n            await context.sync();\\n        });\\n    } catch (error) {\\n        // Note: In a production add-in, you\\'d want to notify the user through your add-in\\'s UI.\\n        console.error(error);\\n    }\\n\\n    args.completed();\\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Error Messages with #VALUE! or #N/A - TypeScript\nDESCRIPTION: This snippet demonstrates returning a CustomFunctions.Error with the ErrorCode.invalidValue (#VALUE!) and a custom message. Only the #VALUE! and #N/A Excel errors support custom error messages that are visible in the error indicator UI. This approach is useful for communicating specific validation errors to the end user from within a custom function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-errors.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// You can only return a custom error message with the #VALUE! and #N/A errors.\nlet error = new CustomFunctions.Error(CustomFunctions.ErrorCode.invalidValue, \"The parameter can only contain lowercase characters.\");\nthrow error;\n\n```\n\n----------------------------------------\n\nTITLE: Associating Custom Functions with JSON Metadata in Office Add-ins - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the creation of an Excel custom function that adds two numbers, accompanied by JSDoc comments for documentation and Office integration. It then explicitly associates the function implementation with its JSON metadata identifier using CustomFunctions.associate, which is crucial for proper registration and execution in Excel custom functions add-ins. Dependencies include the Office JavaScript API and the correct setup of a JSON metadata file, with 'first' and 'second' as input parameters, and the sum returned as output. Failing to associate functions as shown will prevent them from working within Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-troubleshooting.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\\n * Add two numbers.\\n * @customfunction\\n * @param {number} first First number.\\n * @param {number} second Second number.\\n * @returns {number} The sum of the two numbers.\\n */\\nfunction add(first, second) {\\n  return first + second;\\n}\\n\\nCustomFunctions.associate(\\\"ADD\\\", add);\n```\n\n----------------------------------------\n\nTITLE: Deleting Excel Range and Shifting Cells Up using JavaScript API\nDESCRIPTION: This snippet shows how to delete a specific range of cells (\"B4:E4\") on the \"Sample\" worksheet and shift the cells below it upwards to fill the resulting gap. It uses the `range.delete()` method with the `Excel.DeleteShiftDirection.up` parameter to specify the shift direction. The operation is executed within the `Excel.run` batch context and depends on the Excel JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-clear-delete.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = sheet.getRange(\"B4:E4\");\n\n    range.delete(Excel.DeleteShiftDirection.up);\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Using VLOOKUP Function in Excel JavaScript API\nDESCRIPTION: This example shows how to use the `VLOOKUP` worksheet function via the Excel JavaScript API. It retrieves a specific worksheet range (\"A1:D4\" on \"Sheet1\"), then calls `context.workbook.functions.vlookup` with the lookup value (\"Wrench\"), the range, the column index (2), and the range lookup flag (false). The result (number of wrenches sold in November based on the sample data) is loaded and then logged to the console after context synchronization.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheet-functions.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let range = context.workbook.worksheets.getItem(\"Sheet1\").getRange(\"A1:D4\");\n    let unitSoldInNov = context.workbook.functions.vlookup(\"Wrench\", range, 2, false);\n    unitSoldInNov.load('value');\n\n    await context.sync();\n    console.log(' Number of wrenches sold in November = ' + unitSoldInNov.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking API Requirements with Office.onReady() Async/Await (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates using `async` and `await` with `Office.onReady()`. An immediately invoked async function expression (IIAFE) awaits the resolution of the `Office.onReady()` promise before checking if the host application supports the required 'ExcelApi 1.7' requirement set.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/initialize-add-in.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n(async () => {\n    await Office.onReady();\n    if (!Office.context.requirements.isSetSupported('ExcelApi', '1.7')) {\n        console.log(\"Sorry, this add-in only works with newer versions of Excel.\");\n    }\n})();\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers for Outlook Add-in Launch Events - Office.js JavaScript\nDESCRIPTION: This JavaScript code defines event handler functions for Outlook add-in launch events (new message and new appointment). It uses the Office.js API for associating handler names with functions, and for asynchronously setting the subject line on compose events. Required dependencies include the Office.js library and appropriate context as established by the manifest. Inputs include the event object from Office; outputs are the setting of the subject and signaling of completion. Errors are logged if subject setting fails. The snippet should be included in the launchevent.js file referenced in the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*\\n* Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\\n* See LICENSE in the project root for license information.\\n*/\\n\\nfunction onNewMessageComposeHandler(event) {\\n  setSubject(event);\\n}\\nfunction onNewAppointmentComposeHandler(event) {\\n  setSubject(event);\\n}\\nfunction setSubject(event) {\\n  Office.context.mailbox.item.subject.setAsync(\\n    \\\"Set by an event-based add-in!\\\",\\n    {\\n      \\\"asyncContext\\\": event\\n    },\\n    function (asyncResult) {\\n      // Handle success or error.\\n      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {\\n        console.error(\\\"Failed to set subject: \\\" + JSON.stringify(asyncResult.error));\\n      }\\n\\n      // Call event.completed() to signal to the Outlook client that the add-in has completed processing the event.\\n      asyncResult.asyncContext.completed();\\n    });\\n}\\n\\n// IMPORTANT: To ensure your add-in is supported in Outlook, remember to map the event handler name specified in the manifest to its JavaScript counterpart.\\nOffice.actions.associate(\\\"onNewMessageComposeHandler\\\", onNewMessageComposeHandler);\\nOffice.actions.associate(\\\"onNewAppointmentComposeHandler\\\", onNewAppointmentComposeHandler);\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Custom Function with Parameters in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates a simple Excel custom function named `add`. It uses JSDoc comments with `@customfunction` to mark it as a custom function, `@param` to document the `first` and `second` number parameters, and `@returns` to describe the summed result. TypeScript type annotations (`: number`) are used for parameters and the return value.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * Adds two numbers.\n * @customfunction \n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nfunction add(first: number, second: number): number {\n  return first + second;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Generic Excel Worksheet Function in JavaScript\nDESCRIPTION: This snippet demonstrates the basic structure for calling any built-in Excel worksheet function using the Excel JavaScript API within an `Excel.run` block. It shows accessing the function via `context.workbook.functions`, calling a placeholder function `sampleFunction()`, loading the 'value' property of the `FunctionResult`, syncing the context, and then accessing the result. The `sampleFunction` should be replaced with the actual function name and its required arguments.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheet-functions.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let functionResult = context.workbook.functions.sampleFunction();\n    functionResult.load('value');\n\n    await context.sync();\n    console.log('Result of the function: ' + functionResult.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Efficient Placeholder Replacement Using the Correlated Objects Pattern - Office.js - JavaScript\nDESCRIPTION: Showcases an improved approach to replacing placeholders with correlated objects and the split loop pattern, minimizing the number of \\\"context.sync\\\" calls. Initially, all relevant search queries are queued and loaded in a single loop, separated by a \\\"context.sync\\\". After all search results are available, the code iterates over them to perform the replacement, followed by a final \\\"context.sync\\\" for all mutations. This implementation depends on Word JavaScript API, the \\\"jobMapping\\\" array, and demonstrates a best practice for batch processing Office objects efficiently.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/correlated-objects-pattern.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nWord.run(async (context) => {\n\n    const allSearchResults = [];\n    for (let i = 0; i < jobMapping.length; i++) {\n      let options = Word.SearchOptions.newObject(context);\n      options.matchWildcards = false;\n      let searchResults = context.document.body.search(jobMapping[i].job, options);\n      searchResults.load('items');\n      let correlatedSearchResult = {\n        rangesMatchingJob: searchResults,\n        personAssignedToJob: jobMapping[i].person\n      }\n      allSearchResults.push(correlatedSearchResult);\n    }\n\n    await context.sync()\n\n    for (let i = 0; i < allSearchResults.length; i++) {\n      let correlatedObject = allSearchResults[i];\n\n      for (let j = 0; j < correlatedObject.rangesMatchingJob.items.length; j++) {\n        let targetRange = correlatedObject.rangesMatchingJob.items[j];\n        let name = correlatedObject.personAssignedToJob;\n        targetRange.insertText(name, Word.InsertLocation.replace);\n      }\n    }\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Worksheet Formula Changes with onFormulaChanged Event in JavaScript\nDESCRIPTION: Demonstrates registering and implementing an event handler for the `Worksheet.onFormulaChanged` event. The `run` function registers `formulaChangeHandler` on the \"Sample\" worksheet. The `formulaChangeHandler` function receives `WorksheetFormulaChangedEventArgs`, extracts details about the first formula change (cell address, previous formula, source), and logs them. Note: This implementation assumes only one formula is changed at a time.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nasync function run() {\n    await Excel.run(async (context) => {\n        // Retrieve the worksheet named \"Sample\".\n        let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    \n        // Register the formula changed event handler for this worksheet.\n        sheet.onFormulaChanged.add(formulaChangeHandler);\n    \n        await context.sync();\n    });\n}\n\nasync function formulaChangeHandler(event) {\n    await Excel.run(async (context) => {\n        // Retrieve details about the formula change event.\n        // Note: This method assumes only a single formula is changed at a time. \n        let cellAddress = event.formulaDetails[0].cellAddress;\n        let previousFormula = event.formulaDetails[0].previousFormula;\n        let source = event.source;\n    \n        // Print out the change event details.\n        console.log(\n          `The formula in cell ${cellAddress} changed. \n          The previous formula was: ${previousFormula}. \n          The source of the change was: ${source}.`\n        );         \n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Excel Slicer for a PivotTable using Office JS API\nDESCRIPTION: This snippet shows how to create a new slicer on a specific worksheet ('Pivot') using the Office JS API. The slicer is connected to the 'Farm Sales' PivotTable and filters based on the 'Type' field. The newly created slicer is then assigned the name 'Fruit Slicer' for later reference. The operation occurs within an `Excel.run` block.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Pivot\");\n    let slicer = sheet.slicers.add(\n        \"Farm Sales\" /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */,\n        \"Type\" /* The field in the data to filter by. For PivotTables, this can be a PivotField object reference or ID. */\n    );\n    slicer.name = \"Fruit Slicer\";\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Navigation Logic with Office JS API in JavaScript\nDESCRIPTION: This JavaScript code defines asynchronous and synchronous functions to handle slide operations. `addSlides` uses `PowerPoint.run` to add two new slides and then navigates to the last one. The `goToFirstSlide`, `goToLastSlide`, `goToPreviousSlide`, and `goToNextSlide` functions use the `Office.context.document.goToByIdAsync` method with specific `Office.Index` constants (First, Last, Previous, Next) to navigate between slides. Basic error handling is included to display messages if navigation fails.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addSlides() {\n  await PowerPoint.run(async function (context) {\n    context.presentation.slides.add();\n    context.presentation.slides.add();\n\n    await context.sync();\n\n    goToLastSlide();\n    setMessage(\"Success: Slides added.\");\n  });\n}\n\nfunction goToFirstSlide() {\n  Office.context.document.goToByIdAsync(Office.Index.First, Office.GoToType.Index, (asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      setMessage(\"Error: \" + asyncResult.error.message);\n    }\n  });\n}\n\nfunction goToLastSlide() {\n  Office.context.document.goToByIdAsync(Office.Index.Last, Office.GoToType.Index, (asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      setMessage(\"Error: \" + asyncResult.error.message);\n    }\n  });\n}\n\nfunction goToPreviousSlide() {\n  Office.context.document.goToByIdAsync(Office.Index.Previous, Office.GoToType.Index, (asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      setMessage(\"Error: \" + asyncResult.error.message);\n    }\n  });\n}\n\nfunction goToNextSlide() {\n  Office.context.document.goToByIdAsync(Office.Index.Next, Office.GoToType.Index, (asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      setMessage(\"Error: \" + asyncResult.error.message);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output: Range Formulas as JSON - Excel JavaScript API - JSON\nDESCRIPTION: Displays the array of formulas and static values present in the range B2:E6. Formula cells contain their formula strings, while non-formula cells hold their direct value. This output is crucial for distinguishing between stored values and calculated content.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n    [\n        \"Product\",\n        \"Qty\",\n        \"Unit Price\",\n        \"Total Price\"\n    ],\n    [\n        \"Almonds\",\n        2,\n        7.5,\n        \"=C3 * D3\"\n    ],\n    [\n        \"Coffee\",\n        1,\n        34.5,\n        \"=C4 * D4\"\n    ],\n    [\n        \"Chocolate\",\n        5,\n        9.56,\n        \"=C5 * D5\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\",\n        \"=SUM(E3:E5)\"\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Completing Spam Reporting with Message Move and Dialog in Outlook Add-in (JavaScript)\nDESCRIPTION: Extends the spam-reporting event handler 'onSpamReport' to call event.completed with options to move the message to the Junk folder and display a post-processing dialog using Office.js API. The function captures dialog responses, performs additional message processing, and customizes outcome behavior using Office.MailboxEnums and UI parameters. Inputs include the SpamReporting event object and asyncResult context; the output signals completion to Outlook with configured post-processing logic. Requires Office.js and is limited to Outlook platforms supporting these APIs and enum properties.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Handles the SpamReporting event to process a reported message.\\nfunction onSpamReport(event) {\\n  // Get the Base64-encoded EML format of a reported message.\\n  Office.context.mailbox.item.getAsFileAsync({ asyncContext: event }, (asyncResult) => {\\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\\n      console.log(`Error encountered during message processing: ${asyncResult.error.message}`);\\n      return;\\n    }\\n\\n    // Get the user's responses to the options and text box in the preprocessing dialog.\\n    const spamReportingEvent = asyncResult.asyncContext;\\n    const reportedOptions = spamReportingEvent.options;\\n    const additionalInfo = spamReportingEvent.freeText;\\n\\n    // Run additional processing operations here.\\n\\n    /**\\n     * Signals that the spam-reporting event has completed processing.\\n     * It then moves the reported message to the Junk Email folder of the mailbox, then\\n     * shows a post-processing dialog to the user. If an error occurs while the message\\n     * is being processed, the `onErrorDeleteItem` property determines whether the message\\n     * will be deleted.\\n     */\\n    const event = asyncResult.asyncContext;\\n    event.completed({\\n      onErrorDeleteItem: true,\\n      moveItemTo: Office.MailboxEnums.MoveSpamItemTo.JunkFolder,\\n      showPostProcessingDialog: {\\n        title: \\\"Contoso Spam Reporting\\\",\\n        description: \\\"Thank you for reporting this message.\\\",\\n      },\\n    });\\n  });\\n}\\n\\n// IMPORTANT: To ensure your add-in is supported in Outlook, remember to map the event handler name specified in the manifest to its JavaScript counterpart\\nOffice.actions.associate(\\\"onSpamReport\\\", onSpamReport);\n```\n\n----------------------------------------\n\nTITLE: Displaying and Handling a Dialog with Event Handler - JavaScript\nDESCRIPTION: Demonstrates how to display a dialog in an Office Add-in host and add a handler for the DialogMessageReceived event via displayDialogAsync. Requires Office.js and appropriate permissions to open dialogs. The callback receives an AsyncResult, from which the dialog object is accessed and configured. The dialog variable is global for further reference. Inputs include the dialog URL and size, and outputs include dialog event subscription.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet dialog; // Declare dialog as global for use in later functions.\nOffice.context.ui.displayDialogAsync(\"https://www.contoso.com/myDialog.html\", { height: 30, width: 20 },\n    (asyncResult) => {\n        dialog = asyncResult.value;\n        dialog.addEventHandler(Office.EventType.DialogMessageReceived, processMessage);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Appointment Start Time Asynchronously in Compose Forms with Office.js - JavaScript\nDESCRIPTION: This snippet illustrates how to set the start time of a composing appointment in Outlook via the Office.js 'setAsync' API. The setStartTime function creates a UTC Date object two days into the future and calls 'item.start.setAsync' with optional context and a callback for status reporting. It also contains usage notes for recurring appointments. Dependencies are Office.js, the active mailbox item, and optional variable support for async context. Output is logged via 'console.log'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-time-of-an-appointment.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nlet item;\n\n// Confirms that the Office.js library is loaded.\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Outlook) {\n        item = Office.context.mailbox.item;\n        setStartTime();\n    }\n});\n\n// Sets the start time of the appointment being composed.\nfunction setStartTime() {\n    // Get the current date and time, then add two days to the date.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() + 2);\n\n    item.start.setAsync(\n        startDate,\n        { asyncContext: { optionalVariable1: 1, optionalVariable2: 2 } },\n        (asyncResult) => {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(asyncResult.error.message);\n                return;\n            }\n\n            console.log(\"Successfully set the start time.\");\n            /*\n                Run additional operations appropriate to your scenario and\n                use the optionalVariable1 and optionalVariable2 values as needed.\n            */\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Row Freeze Logic - JavaScript\nDESCRIPTION: This JavaScript code replaces the `TODO1` placeholder within the `freezeHeader` function. It uses the Excel JavaScript API to get the active worksheet and then calls the `freezeRows(1)` method on its `freezePanes` collection to freeze the top row (header).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\ncurrentWorksheet.freezePanes.freezeRows(1);\n```\n\n----------------------------------------\n\nTITLE: Applying PivotLabelFilter to Excel PivotTable Field using Office JS API\nDESCRIPTION: This snippet, intended to be part of a larger `Excel.run` call, shows how to apply a `PivotLabelFilter` to the 'Type' PivotField. It uses the `LabelFilterCondition.beginsWith` condition with the substring 'L' and sets `exclusive` to true, effectively filtering out items whose labels start with 'L'. The filter is applied to the target field using `filterField.applyFilter()`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n    // Get the \"Type\" field.\n    let filterField = pivotTable.hierarchies.getItem(\"Type\").fields.getItem(\"Type\");\n\n    // Filter out any types that start with \"L\" (\"Lemons\" and \"Limes\" in this case).\n    let filter: Excel.PivotLabelFilter = {\n      condition: Excel.LabelFilterCondition.beginsWith,\n      substring: \"L\",\n      exclusive: true\n    };\n\n    // Apply the label filter to the field.\n    filterField.applyFilter({ labelFilter: filter });\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Function Call Syntax in MessageBanner.ts\nDESCRIPTION: Demonstrates a necessary code modification after converting `MessageBanner.js` to `MessageBanner.ts`. The call `_onResize(null);` is replaced with `_onResize();` to match the expected function signature or TypeScript requirements, resolving potential compilation errors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/convert-javascript-to-typescript.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n_onResize();\n```\n\n----------------------------------------\n\nTITLE: Clearing All Conditional Formatting Rules from a Worksheet in Excel JavaScript API (JavaScript)\nDESCRIPTION: This snippet highlights how to remove all conditional formatting rules from an entire worksheet in Excel using the JavaScript API. It calls the clearAll method on the ConditionalFormatCollection associated with the worksheet's range, effectively resetting any existing conditional styles. Dependencies include the Office.js library and a worksheet named 'Sample'. No complex parameters are involved; the method applies globally to the selected worksheet range. Expected output is a worksheet with all conditional formats removed. Only available in the context of Office Add-ins with Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange();\n    range.conditionalFormats.clearAll();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Placeholders to Names - Office.js - JavaScript\nDESCRIPTION: Defines an array mapping document placeholders such as \\\"{Coordinator}\\\", \\\"{Deputy}\\\", and \\\"{Manager}\\\" to specific replacement names. This mapping is used later to determine which names to substitute for which placeholders. The snippet has no dependencies, serves as static configuration, and expects that corresponding values (people) exist for each placeholder job.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/correlated-objects-pattern.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst jobMapping = [\n        { job: \"{Coordinator}\", person: \"Sally\" },\n        { job: \"{Deputy}\", person: \"Bob\" },\n        { job: \"{Manager}\", person: \"Kim\" }\n    ];\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Tags to a Slide Using Office.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to add two custom tags, each as a key-value string pair, to the first slide in a PowerPoint presentation using the Office JavaScript API. The \"add\" method accepts a key and value, and keys should be uppercase for consistency. The use of asynchronous patterns and context.sync ensures proper communication with the Office host. Requires \"PowerPoint\" namespace availability in Office.js and an activated Office context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/tagging-presentations-slides-shapes.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addMultipleSlideTags() {\n  await PowerPoint.run(async function(context) {\n    const slide = context.presentation.slides.getItemAt(0);\n    slide.tags.add(\"OCEAN\", \"Arctic\");\n    slide.tags.add(\"PLANET\", \"Jupiter\");\n\n    await context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Runtime in Unified Manifest (manifest.json)\nDESCRIPTION: This JSON snippet defines a runtime configuration within the 'extensions.runtimes' array of a `manifest.json` file. It specifies the 'SharedRuntime' capability (version 1.1) as a requirement, assigns an ID 'SharedRuntime', sets the type to 'general', defines the entry point HTML page, sets the 'lifetime' to 'long' for persistent execution, and prepares for associated actions. This configuration enables the add-in to run in a shared runtime environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"runtimes\": [\n    \"requirements\": {\n        \"capabilities\": [\n            {\n                \"name\": \"SharedRuntime\",\n                \"minVersion\": \"1.1\"\n            }\n        ]\n    },\n    \"id\": \"SharedRuntime\",\n    \"type\": \"general\",\n    \"code\": {\n        \"page\": \"https://localhost:3000/taskpane.html\"\n    },\n    \"lifetime\": \"long\",\n    \"actions\": [\n        ...\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Row Hierarchies to PivotTable - Excel JavaScript API - JavaScript\nDESCRIPTION: This code adds multiple row hierarchies ('Farm', 'Type', 'Classification') to the 'Farm Sales' PivotTable on the active worksheet. The example demonstrates organizing the PivotTable rows across several data fields, influencing how the aggregated data is grouped. The snippet requires that the respective hierarchies exist and are accessible, and may throw errors if names are mismatched or if the PivotTable setup is incomplete.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem(\"Farm\"));\n    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem(\"Type\"));\n    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem(\"Classification\"));\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON/P for Cross-Domain Requests in JavaScript\nDESCRIPTION: This JavaScript function demonstrates the JSON/P (JSON with Padding) technique to bypass the Same-Origin Policy. It dynamically creates an HTML <script> element, sets its 'src' attribute to a cross-domain API endpoint (YouTube Data API in this case), and includes a callback function name ('videoDetailsLoaded') in the URL parameters. Appending this script element to the document's <head> executes the script retrieved from the URL, allowing cross-domain data fetching.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/privacy-and-security.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Dynamically create an HTML SCRIPT element that obtains the details for the specified video.\nfunction loadVideoDetails(videoIndex) {\n    // Dynamically create a new HTML SCRIPT element in the webpage.\n    const script = document.createElement(\"script\");\n    // Specify the URL to retrieve the indicated video from a feed of a current list of videos,\n    // as the value of the src attribute of the SCRIPT element. \n    script.setAttribute(\"src\", \"https://gdata.youtube.com/feeds/api/videos/\" + \n        videos[videoIndex].Id + \"?alt=json-in-script&amp;callback=videoDetailsLoaded\");\n    // Insert the SCRIPT element at the end of the HEAD section.\n    document.getElementsByTagName('head')[0].appendChild(script);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Office JS Binding by ID via Office.select and Reading Data (JavaScript)\nDESCRIPTION: This snippet shows how to get a specific binding by its ID ('myBinding') using the `Office.select` function with a selector string ('bindings#myBinding'). It then chains the `getDataAsync` method to read the data associated with that binding. The callback for `getDataAsync` handles the result or potential errors. An optional `onError` callback for `select` itself can handle cases where the binding isn't found. Requires the Office JS API and an existing binding with ID 'myBinding'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nOffice.select(\"bindings#myBinding\", function onError(){}).getDataAsync(function (asyncResult) {\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n        write('Action failed. Error: ' + asyncResult.error.message);\n    } else {\n        write(asyncResult.value);\n    }\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling On-Send Feature for a Policy (Classic Outlook Web)\nDESCRIPTION: Retrieves an existing OWA mailbox policy and modifies it to enable the on-send add-in feature by setting the `OnSendAddinsEnabled` flag to `$true`. This allows on-send add-ins to run for users assigned this policy in classic Outlook on the web. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nGet-OWAMailboxPolicy OWAOnSendAddinAllUserPolicy | Set-OWAMailboxPolicy –OnSendAddinsEnabled:$true\n```\n\n----------------------------------------\n\nTITLE: Task Pane UI Controls for Storing and Getting Shared Data (HTML)\nDESCRIPTION: Provides HTML snippet for the task pane, adding a set of interactive controls: an ordered list with step-by-step instructions, inputs for data entry, and buttons to trigger storing or getting shared data. This code is to be added after the `</main>` element in `taskpane.html`. It is tightly coupled with the JavaScript functions defined elsewhere and depends on handler functions (`storeSharedValue()`, `getSharedValue()`) being available via the global scope. Inputs via text boxes; outputs visually in the same boxes. It is pure HTML with embedded event bindings.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/share-data-and-events-between-custom-functions-and-the-task-pane-tutorial.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ol>\n  <li>\n    Enter a value to send to the custom function and select\n    <strong>Store</strong>.\n  </li>\n  <li>\n    Enter <strong>=CONTOSO.GETVALUE()</strong> into a cell to retrieve it.\n  </li>\n  <li>\n    To send data to the task pane, in a cell, enter\n    <strong>=CONTOSO.STOREVALUE(\"new value\")</strong>\n  </li>\n  <li>Select <strong>Get</strong> to display the value in the task pane.</li>\n</ol>\n\n<p>Store new value to shared state</p>\n<div>\n  <input type=\"text\" id=\"storeBox\" />\n  <button onclick=\"storeSharedValue()\">Store</button>\n</div>\n\n<p>Get shared state value</p>\n<div>\n  <input type=\"text\" id=\"getBox\" />\n  <button onclick=\"getSharedValue()\">Get</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Appointment Recurrence (Organizer) using Office JS\nDESCRIPTION: Demonstrates how an appointment organizer, in compose mode, sets a weekly recurrence pattern for an appointment series using the Office JavaScript API. It initializes a `SeriesTime` object for the date/time range and duration, defines the recurrence pattern (weekly, interval 1, Tuesdays and Thursdays, Pacific Standard Time), and applies it using `Office.context.mailbox.item.recurrence.setAsync`. Requires API requirement set 1.7 or later.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-and-set-recurrence.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst seriesTimeObject = new Office.SeriesTime();\nseriesTimeObject.setStartDate(2019,10,2);\nseriesTimeObject.setEndDate(2019,11,2);\nseriesTimeObject.setStartTime(10,30);\nseriesTimeObject.setDuration(30);\n\nconst pattern = {\n    seriesTime: seriesTimeObject,\n    recurrenceType: Office.MailboxEnums.RecurrenceType.Weekly,\n    recurrenceProperties:\n    {\n        interval: 1,\n        days: [Office.MailboxEnums.Days.Tue, Office.MailboxEnums.Days.Thu]\n    },\n    recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }\n};\n\nOffice.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {\n    console.log(JSON.stringify(asyncResult));\n});\n```\n\n----------------------------------------\n\nTITLE: Tagging Selected Slide for Premium Customers Using Office.js - JavaScript\nDESCRIPTION: This code tags the currently selected slide with a \"CUSTOMER_TYPE\" key and \"Premium\" value to mark it for special processing. It relies on a helper function to retrieve the user's selected slide index (which is 1-based and must be decremented for API use). The structure follows the Office.js asynchronous execution pattern via PowerPoint.run. Dependencies: getSelectedSlideIndex function and the Office.js context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/tagging-presentations-slides-shapes.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addTagToSelectedSlide() {\n  await PowerPoint.run(async function(context) {\n    let selectedSlideIndex = await getSelectedSlideIndex();\n    selectedSlideIndex = selectedSlideIndex - 1;\n    const slide = context.presentation.slides.getItemAt(selectedSlideIndex);\n    slide.tags.add(\"CUSTOMER_TYPE\", \"Premium\");\n\n    await context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New OWA Mailbox Policy for a Specific Group (Modern/New Outlook)\nDESCRIPTION: Creates a new OWA mailbox policy intended for a specific group of users (e.g., 'Finance') in the context of modern Outlook on the web or new Outlook on Windows. This policy will later have the on-send compliance flag enabled. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-OWAMailboxPolicy FinanceOWAPolicy\n```\n\n----------------------------------------\n\nTITLE: Initializing EmbeddedSession for Visio JavaScript API (JavaScript)\nDESCRIPTION: Initializes an EmbeddedSession to establish communication between a developer frame and a Visio iframe in the browser. This session enables running subsequent API calls on the embedded Visio diagram. Required dependencies are the OfficeExtension library and a valid URL pointing to the Visio diagram. The function uses a promise to confirm when the session has started successfully. Requires that an HTML iframe is present in the DOM with id 'iframeHost'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/reference/overview/visio-javascript-reference-overview.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst session = new OfficeExtension.EmbeddedSession(url, { id: \\\"embed-iframe\\\",container: document.getElementById(\\\"iframeHost\\\") });\\nsession.init().then(function () {\\n    window.console.log(\\\"Session successfully initialized\\\");\\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Recipients in Outlook Compose Item using Office.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to overwrite recipients in an Outlook appointment or message compose window using the `Recipients.setAsync` method from the Office.js library. It first identifies the item type (appointment or message) and then sets the To/Required, Cc/Optional, and Bcc (for messages) recipients using provided arrays of objects containing display names and email addresses, handling the asynchronous results with callbacks. Requires the Office.js library.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-set-or-add-recipients.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js\nlet item;\n\n// Confirms that the Office.js library is loaded.\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Outlook) {\n        item = Office.context.mailbox.item;\n        setRecipients();\n    }\n});\n\n// Sets the recipients of the item being composed.\nfunction setRecipients() {\n    let toRecipients, ccRecipients, bccRecipients;\n\n    // Verify if the mail item is an appointment or message.\n    if (item.itemType === Office.MailboxEnums.ItemType.Appointment) {\n        toRecipients = item.requiredAttendees;\n        ccRecipients = item.optionalAttendees;\n    }\n    else {\n        toRecipients = item.to;\n        ccRecipients = item.cc;\n        bccRecipients = item.bcc;\n    }\n\n    // Set the recipients in the To or Required field of the item being composed.\n    toRecipients.setAsync(\n        [{\n            \"displayName\": \"Graham Durkin\", \n            \"emailAddress\": \"graham@contoso.com\"\n         },\n         {\n            \"displayName\": \"Donnie Weinberg\",\n            \"emailAddress\": \"donnie@contoso.com\"\n         }],\n        (asyncResult) => {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(asyncResult.error.message);\n                return;\n            }\n\n            console.log(\"Successfully set the recipients in the To or Required field.\");\n            // Run additional operations appropriate to your scenario.\n    });\n\n    // Set the recipients in the Cc or Optional field of the item being composed.\n    ccRecipients.setAsync(\n        [{\n            \"displayName\": \"Perry Horning\", \n            \"emailAddress\": \"perry@contoso.com\"\n         },\n         {\n            \"displayName\": \"Guy Montenegro\",\n            \"emailAddress\": \"guy@contoso.com\"\n         }],\n        (asyncResult) => {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(asyncResult.error.message);\n                return;\n            }\n\n            console.log(\"Successfully set the recipients in the Cc or Optional field.\");\n            // Run additional operations appropriate to your scenario.\n    });\n\n    // Set the recipients in the Bcc field of the message being composed.\n    if (bccRecipients) {\n        bccRecipients.setAsync(\n            [{\n                \"displayName\": \"Lewis Cate\", \n                \"emailAddress\": \"lewis@contoso.com\"\n            },\n            {\n                \"displayName\": \"Francisco Stitt\",\n                \"emailAddress\": \"francisco@contoso.com\"\n            }],\n            (asyncResult) => {\n                if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                    console.log(asyncResult.error.message);\n                    return;\n                }\n    \n                console.log(\"Successfully set the recipients in the Bcc field.\");\n                // Run additional operations appropriate to your scenario.\n        });\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing and Validating Exchange JWT with System.IdentityModel.Tokens.Jwt in C#\nDESCRIPTION: This code demonstrates how to load, parse, and validate a JWT token issued by Exchange in a C# application using the System.IdentityModel.Tokens.Jwt library. It extracts the 'appctx' claim from the token, deserializes it to get the authentication metadata URL, and configures token validation parameters including issuer, audience, and signing keys retrieved via GetSigningKeys(). Dependencies include System.IdentityModel.Tokens.Jwt, Newtonsoft.Json, and a custom ExchangeAppContext class; the encoded JWT token and a valid audience URL must be provided. Outputs include ClaimsPrincipal if successful or an exception if validation fails.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/validate-an-identity-token.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Load the encoded token\nstring encodedToken = \"...\";\nJwtSecurityToken jwt = new JwtSecurityToken(encodedToken);\n\n// Parse the appctx claim to get the auth metadata url\nstring authMetadataUrl = string.Empty;\nvar appctx = jwt.Claims.FirstOrDefault(claim => claim.Type == \"appctx\");\nif (appctx != null)\n{\n    var AppContext = JsonConvert.DeserializeObject<ExchangeAppContext>(appctx.Value);\n\n    // Token version check\n    if (string.Compare(AppContext.Version, \"ExIdTok.V1\", StringComparison.InvariantCulture) != 0) {\n        // Fail validation\n    }\n\n    authMetadataUrl = AppContext.MetadataUrl;\n}\n\n// Use System.IdentityModel.Tokens.Jwt library to validate standard parts\nJwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();\nTokenValidationParameters tvp = new TokenValidationParameters();\n\ntvp.ValidateIssuer = false;\ntvp.ValidateAudience = true;\ntvp.ValidAudience = \"{URL to add-in}\";\ntvp.ValidateIssuerSigningKey = true;\n// GetSigningKeys downloads the auth metadata doc and\n// returns a List<SecurityKey>\ntvp.IssuerSigningKeys = GetSigningKeys(authMetadataUrl);\ntvp.ValidateLifetime = true;\n\ntry\n{\n    var claimsPrincipal = tokenHandler.ValidateToken(encodedToken, tvp, out SecurityToken validatedToken);\n\n    // If no exception, all standard checks passed\n}\ncatch (SecurityTokenValidationException ex)\n{\n    // Validation failed\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing an Office Function Command Handler in JavaScript\nDESCRIPTION: This JavaScript defines and registers a handler for a function command in an Office Add-in. The function triggers a UI notification in the host (e.g., Outlook), using Office.js APIs, and calls event.completed() upon completion. Dependencies: office.js library must be loaded, and the script must be initialized; function mapped to an actionId in the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady(function() {\n// Add any initialization code here.\n});\n\nfunction setNotification(event) {\nconst message = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n};\n\n// Show a notification message.\nOffice.context.mailbox.item.notificationMessages.replaceAsync(\"ActionPerformanceNotification\", message);\n\n// Be sure to indicate when the add-in command function is complete.\nevent.completed();\n}\n\n// Map the function to the action ID in the manifest.\nOffice.actions.associate(\"SetNotification\", setNotification);\n```\n\n----------------------------------------\n\nTITLE: Configuring Outlook Add-in VersionOverrides in Manifest (XML)\nDESCRIPTION: This XML snippet defines the configuration for an Outlook add-in within the `<VersionOverrides>` element of the manifest file. It specifies the minimum Mailbox API requirement (1.15), defines runtimes for different Outlook clients (using HTML for web/new Mac/new Windows, and a JS override for classic Windows), configures UI elements like task pane and action buttons within the message compose window, enables the `OnMessageSend` event with `SoftBlock` mode using a specified function and source location, and lists resources (icons, URLs, strings) required by the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n    <Requirements>\n      <bt:Sets DefaultMinVersion=\"1.15\">\n        <bt:Set Name=\"Mailbox\" />\n      </bt:Sets>\n    </Requirements>\n    <Hosts>\n      <Host xsi:type=\"MailHost\">\n        <!-- Event-based activation happens in a lightweight runtime.-->\n        <Runtimes>\n          <!-- HTML file including reference to or inline JavaScript event handlers.\n               This is used by Outlook on the web and on the new Mac UI, and new Outlook on Windows. -->\n          <Runtime resid=\"WebViewRuntime.Url\">\n            <!-- JavaScript file containing event handlers. This is used by classic Outlook on Windows. -->\n            <Override type=\"javascript\" resid=\"JSRuntime.Url\"/>\n          </Runtime>\n        </Runtimes>\n        <DesktopFormFactor>\n          <!-- Configure other command surface extension points for add-in command support, if needed. -->\n          <FunctionFile resid=\"Commands.Url\" />\n          <ExtensionPoint xsi:type=\"MessageComposeCommandSurface\">\n            <OfficeTab id=\"TabDefault\">\n              <Group id=\"msgComposeGroup\">\n                <Label resid=\"GroupLabel\" />\n                <Control xsi:type=\"Button\" id=\"msgComposeOpenPaneButton\">\n                  <Label resid=\"TaskpaneButton.Label\" />\n                  <Supertip>\n                    <Title resid=\"TaskpaneButton.Label\" />\n                    <Description resid=\"TaskpaneButton.Tooltip\" />\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Icon.16x16\" />\n                    <bt:Image size=\"32\" resid=\"Icon.32x32\" />\n                    <bt:Image size=\"80\" resid=\"Icon.80x80\" />\n                  </Icon>\n                  <Action xsi:type=\"ShowTaskpane\">\n                    <SourceLocation resid=\"Taskpane.Url\" />\n                  </Action>\n                </Control>\n                <Control xsi:type=\"Button\" id=\"ActionButton\">\n                  <Label resid=\"ActionButton.Label\"/>\n                  <Supertip>\n                    <Title resid=\"ActionButton.Label\"/>\n                    <Description resid=\"ActionButton.Tooltip\"/>\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                    <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                    <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                  </Icon>\n                  <Action xsi:type=\"ExecuteFunction\">\n                    <FunctionName>action</FunctionName>\n                  </Action>\n                </Control>\n              </Group>\n            </OfficeTab>\n          </ExtensionPoint>\n          <!-- Enable launching the add-in on the included event. -->\n          <ExtensionPoint xsi:type=\"LaunchEvent\">\n            <LaunchEvents>\n              <LaunchEvent Type=\"OnMessageSend\" FunctionName=\"onMessageSendHandler\" SendMode=\"SoftBlock\" />\n            </LaunchEvents>\n            <!-- Identify the runtime to be used (also referenced by the Runtime element). -->\n            <SourceLocation resid=\"WebViewRuntime.Url\"/>\n          </ExtensionPoint>\n        </DesktopFormFactor>\n      </Host>\n    </Hosts>\n    <Resources>\n      <bt:Images>\n        <bt:Image id=\"Icon.16x16\" DefaultValue=\"https://localhost:3000/assets/icon-16.png\"/>\n        <bt:Image id=\"Icon.32x32\" DefaultValue=\"https://localhost:3000/assets/icon-32.png\"/>\n        <bt:Image id=\"Icon.80x80\" DefaultValue=\"https://localhost:3000/assets/icon-80.png\"/>\n      </bt:Images>\n      <bt:Urls>\n        <bt:Url id=\"Commands.Url\" DefaultValue=\"https://localhost:3000/commands.html\" />\n        <bt:Url id=\"Taskpane.Url\" DefaultValue=\"https://localhost:3000/taskpane.html\" />\n        <bt:Url id=\"WebViewRuntime.Url\" DefaultValue=\"https://localhost:3000/commands.html\" />\n        <!-- Entry needed for classic Outlook on Windows. -->\n        <bt:Url id=\"JSRuntime.Url\" DefaultValue=\"https://localhost:3000/launchevent.js\" />\n      </bt:Urls>\n      <bt:ShortStrings>\n        <bt:String id=\"GroupLabel\" DefaultValue=\"Contoso Add-in\"/>\n        <bt:String id=\"TaskpaneButton.Label\" DefaultValue=\"Show Taskpane\"/>\n        <bt:String id=\"ActionButton.Label\" DefaultValue=\"Perform an action\"/>\n      </bt:ShortStrings>\n      <bt:LongStrings>\n        <bt:String id=\"TaskpaneButton.Tooltip\" DefaultValue=\"Opens a pane to provide additional functionality or information.\"/>\n        <bt:String id=\"ActionButton.Tooltip\" DefaultValue=\"Perform an action when clicked.\"/>\n      </bt:LongStrings>\n    </Resources>\n  </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Releasing Office JS Binding by ID (JavaScript)\nDESCRIPTION: This code demonstrates how to release (remove) an existing binding from the document using its ID ('myBinding'). It calls the `Bindings.releaseByIdAsync` method, passing the ID and a callback function that executes upon completion, logging a confirmation message using the `write` helper function. Requires the Office JS API and an existing binding with the ID 'myBinding'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nOffice.context.document.bindings.releaseByIdAsync('myBinding', function (asyncResult) {\n    write('Released myBinding!');\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for an Excel Custom Function in JSON\nDESCRIPTION: This JSON object defines the metadata for a single custom function with the ID \"ADD\". It includes properties like `description`, `id`, `name`, an array of `parameters` (each with description, name, and type), and a `result` object specifying the return type. This metadata is used by Excel to understand and display the custom function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": [\n    {\n      \"description\": \"Add two numbers\",\n      \"id\": \"ADD\",\n      \"name\": \"ADD\",\n      \"parameters\": [\n        {\n          \"description\": \"First number\",\n          \"name\": \"first\",\n          \"type\": \"number\"\n        },\n        {\n          \"description\": \"Second number\",\n          \"name\": \"second\",\n          \"type\": \"number\"\n        }\n      ],\n      \"result\": {\n        \"type\": \"number\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Binding Events and Retrieving Original Binding in Excel JavaScript API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to handle the onDataChanged event for a Binding in an Excel add-in using the JavaScript API. The event handler leverages the temporary Binding object provided in the event to obtain the binding ID, then uses this ID to retrieve the original persistent Binding object via the bindings collection. Requires the Excel JavaScript library through Office.js, and assumes prior setup of workbook bindings. Inputs include the event argument object, whose binding property supplies the necessary ID; output is the reacquired original Binding object. Limitations: only works in the context of an Excel add-in with appropriate bindings configured.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-troubleshooting.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n    await Excel.run(async (context) => {\n        // Retrieve your binding.\n        let binding = context.workbook.bindings.getItemAt(0);\n    \n        await context.sync();\n    \n        // Register an event listener to detect changes to your binding\n        // and then trigger the `getBindingId` method when the data changes. \n        binding.onDataChanged.add(getBindingId);\n        await context.sync();\n    });\n}\n\nasync function getBindingId(eventArgs) {\n    await Excel.run(async (context) => {\n        // Get the temporary binding object and load its ID. \n        let tempBindingObject = eventArgs.binding;\n        tempBindingObject.load(\"id\");\n\n        // Use the temporary binding object's ID to retrieve the original binding object. \n        let originalBindingObject = context.workbook.bindings.getItem(tempBindingObject.id);\n\n        // You now have the binding object that raised the event: `originalBindingObject`. \n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Entire Range of an Excel Worksheet using JavaScript API\nDESCRIPTION: This snippet illustrates how to get a range object representing the entire worksheet named \"Sample\". This is achieved by calling `sheet.getRange()` without any arguments. The code then loads the `address` property of this full worksheet range and logs it to the console. An active Excel context is required.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-get.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let range = sheet.getRange();\n    range.load(\"address\");\n    await context.sync();\n    \n    console.log(`The address of the entire worksheet range is \"${range.address}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Saving and Getting Item ID in Compose Mode using Office JS\nDESCRIPTION: Illustrates how to save the current mail item being composed and retrieve its ID using `Office.context.mailbox.item.saveAsync`. This is necessary if the item hasn't been saved previously or if the Mailbox 1.8 `getItemIdAsync` method isn't supported (requires Mailbox 1.3). Includes basic error handling and notes potential sync delays in cached mode.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Save the current mail item being composed to get its ID.\nOffice.context.mailbox.item.saveAsync((result) => {\n    if (result.status === Office.AsyncResultStatus.Failed) {\n        console.error(result.error.message);\n        return;\n    }\n\n    const itemId = result.value;\n});\n```\n\n----------------------------------------\n\nTITLE: Removing All PivotFilters from an Excel PivotTable using Office JS API\nDESCRIPTION: This snippet demonstrates how to remove all applied filters from every PivotField within a specific PivotTable ('Farm Sales'). It retrieves the PivotTable, loads its hierarchies, and then iterates through each hierarchy, calling the `clearAllFilters` method on the corresponding PivotField. The operations are batched within `Excel.run`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    // Get the PivotTable.\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.hierarchies.load(\"name\");\n    await context.sync();\n\n    // Clear the filters on each PivotField.\n    pivotTable.hierarchies.items.forEach(function (hierarchy) {\n        hierarchy.fields.getItem(hierarchy.name).clearAllFilters();\n    });\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining UI Structure for Project OData Office Add-in in HTML\nDESCRIPTION: This HTML code defines the structure and elements for the user interface of an Office Add-in interacting with the ProjectData OData service. It includes references to necessary libraries (jQuery, Office.js), stylesheets, and custom scripts (`HelloProjectOData.js`, `SurfaceErrors.js`). The body contains buttons to trigger OData operations (`setOdataUrl`, `retrieveOData`), spans to display the OData endpoint, a table to show comparative project metrics, and a textarea for displaying results or logs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n        <title>Test ProjectData Service</title>\n\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"../Content/Office.css\" />\n\n        <!-- Add your CSS styles to the following file. -->\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"../Content/App.css\" />\n\n        <!-- Use the CDN reference to the mini-version of jQuery when deploying your add-in. -->\n        <!--<script src=\"http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js\"></script> -->\n        <script src=\"../Scripts/jquery-1.7.1.js\"></script>\n\n        <!-- Use the CDN reference to Office.js when deploying your add-in -->\n        <!--<script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\"></script>-->\n\n        <!-- Use the local script references for Office.js to enable offline debugging -->\n        <script src=\"../Scripts/Office/1.0/MicrosoftAjax.js\"></script>\n        <script src=\"../Scripts/Office/1.0/Office.js\"></script>\n\n        <!-- Add your JavaScript to the following files. -->\n        <script src=\"../Scripts/HelloProjectOData.js\"></script>\n        <script src=\"../Scripts/SurfaceErrors.js\"></script>\n    </head>\n    <body>\n        <div id=\"SectionContent\">\n        <div id=\"odataQueries\">\n            ODATA REST QUERY\n        </div>\n        <div id=\"odataInfo\">\n            <button class=\"button-wide\" onclick=\"setOdataUrl()\">Get ProjectData Endpoint</button>\n            <br />\n            <br />\n            <span class=\"rest\" id=\"projectDataEndPoint\">Endpoint of the \n            <strong>ProjectData</strong> service</span>\n            <br />\n        </div>\n        <div id=\"compareProjectData\">\n            <button class=\"button-wide\" disabled=\"disabled\" id=\"compareProjects\"\n            onclick=\"retrieveOData()\">\n            Compare All Projects</button>\n            <br />\n        </div>\n        </div>\n        <div id=\"corpInfo\">\n        <table class=\"infoTable\" aria-readonly=\"True\" style=\"width: 100%;\">\n            <tr>\n            <td class=\"heading_leftCol\"></td>\n            <td class=\"heading_midCol\"><strong>Average</strong></td>\n            <td class=\"heading_rightCol\"><strong>Current</strong></td>\n            </tr>\n            <tr>\n            <td class=\"row_leftCol\"><strong>Project Cost</strong></td>\n            <td class=\"row_midCol\" id=\"AverageProjectCost\">&amp;nbsp;</td>\n            <td class=\"row_rightCol\" id=\"CurrentProjectCost\">&amp;nbsp;</td>\n            </tr>\n            <tr>\n            <td class=\"row_leftCol\"><strong>Project Actual Cost</strong></td>\n            <td class=\"row_midCol\" id=\"AverageProjectActualCost\">&amp;nbsp;</td>\n            <td class=\"row_rightCol\" id=\"CurrentProjectActualCost\">&amp;nbsp;</td>\n            </tr>\n            <tr>\n            <td class=\"row_leftCol\"><strong>Project Work</strong></td>\n            <td class=\"row_midCol\" id=\"AverageProjectWork\">&amp;nbsp;</td>\n            <td class=\"row_rightCol\" id=\"CurrentProjectWork\">&amp;nbsp;</td>\n            </tr>\n            <tr>\n            <td class=\"row_leftCol\"><strong>Project % Complete</strong></td>\n            <td class=\"row_midCol\" id=\"AverageProjectPercentComplete\">&amp;nbsp;</td>\n            <td class=\"row_rightCol\" id=\"CurrentProjectPercentComplete\">&amp;nbsp;</td>\n            </tr>\n        </table>\n        </div>\n        <img alt=\"Corporation\" class=\"logo\" src=\"../../images/NewLogo.png\" />\n        <br />\n        <textarea id=\"odataText\" rows=\"12\" cols=\"40\"></textarea>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Structuring Content Add-in Manifest Elements in XML\nDESCRIPTION: Specifies the required sequence of child elements within the `<OfficeApp>` element for Content Add-ins (`xsi:type=\"ContentApp\"`) in their manifest file. This order must be strictly followed as defined in the Office Add-in schema (XSD) for the manifest to pass validation and allow the add-in to function. Details for the internal structure of the `VersionOverrides` element, marked with an asterisk, are provided separately.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/manifest-element-ordering.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp xsi:type=\"ContentApp\">\n    <Id>\n    <AlternateId>\n    <Version>\n    <ProviderName>\n    <DefaultLocale>\n    <DisplayName>\n        <Override>\n    <Description>\n        <Override>\n    <IconUrl >\n        <Override>\n    <HighResolutionIconUrl>\n        <Override>\n    <SupportUrl>\n    <AppDomains>\n        <AppDomain>\n    <Hosts>\n        <Host>\n    <Requirements>\n    <Sets>\n        <Set>\n    <Methods>\n        <Method>\n    <DefaultSettings>\n        <SourceLocation>\n            <Override>\n        <RequestedWidth>\n        <RequestedHeight>\n    <Permissions>\n    <AllowSnapshot>\n    <VersionOverrides>*\n```\n\n----------------------------------------\n\nTITLE: Defining Default Resources Inline in Extended Overrides (JSON)\nDESCRIPTION: Presents the corrected structure for an extended overrides JSON file incorporating localization for an Add-in only manifest. It includes an inline `resources.default` section to define the default strings for tokens like `${resource.ShowTaskpane_action_name}` and `${resource.ShowTaskpane_default_shortcut}`. This approach is required and ensures default strings are available without needing to download the separate resource file when the host application locale matches the add-in's default.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"actions\": [\n        {\n            \"id\": \"ShowTaskpane\",\n            \"type\": \"ExecuteFunction\",\n            \"name\": \"${resource.ShowTaskpane_action_name}\"\n        }\n    ],\n    \"shortcuts\": [\n        {\n            \"action\": \"ShowTaskpane\",\n            \"key\": {\n                \"default\": \"${resource.ShowTaskpane_default_shortcut}\"\n            }\n        }\n    ],\n    \"resources\": { \n        \"default\": { \n            \"ShowTaskpane_default_shortcut\": { \n                \"value\": \"CTRL+SHIFT+A\", \n            }, \n            \"ShowTaskpane_action_name\": {\n                \"value\": \"Show task pane for add-in\",\n            } \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Shared Runtime Requirement in XML Manifest\nDESCRIPTION: This XML snippet updates the `<Requirements>` section of a `manifest.xml` file. It adds a `<Set>` element specifying 'SharedRuntime' with a minimum version of '1.1', ensuring the add-in requests the shared runtime environment from compatible Office clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Hosts>\n  <Host ...>\n</Hosts>\n<Requirements>\n  <Sets DefaultMinVersion=\"1.1\">\n    <Set Name=\"SharedRuntime\" MinVersion=\"1.1\"/>\n  </Sets>\n</Requirements>\n```\n\n----------------------------------------\n\nTITLE: Defining Excel API Helper Function to Get Selected Range Address in JavaScript\nDESCRIPTION: Exports an object `myExcelAddinFeature` with an async helper function `getSelectedRangeAddress`. This function takes an Excel `RequestContext` object (`context`) as input, gets the selected range using `context.workbook.getSelectedRange()`, loads its `address` property, synchronizes the context via `context.sync()`, and returns the range address (e.g., \"C2:G3\"). It's designed to be executed within an `Excel.run` batch operation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst myExcelAddinFeature = {\n    \n    getSelectedRangeAddress: async (context) => {\n        const range = context.workbook.getSelectedRange();      \n        range.load(\"address\");\n\n        await context.sync();\n      \n        return range.address;\n    }\n}\n\nmodule.exports = myExcelAddinFeature;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometric Rectangle in Excel using JavaScript\nDESCRIPTION: This snippet demonstrates creating a rectangular geometric shape on a specific worksheet ('MyWorksheet') using the Excel JavaScript API. It accesses the worksheet's shape collection (`shapes`), adds a rectangle using `shapes.addGeometricShape(Excel.GeometricShapeType.rectangle)`, and then sets its position (left, top), dimensions (height, width), and assigns a name ('Square'). The changes are synchronized with the workbook using `context.sync()`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// This sample creates a rectangle positioned 100 pixels from the top and left sides\n// of the worksheet and is 150x150 pixels.\nawait Excel.run(async (context) => {\n    let shapes = context.workbook.worksheets.getItem(\"MyWorksheet\").shapes;\n\n    let rectangle = shapes.addGeometricShape(Excel.GeometricShapeType.rectangle);\n    rectangle.left = 100;\n    rectangle.top = 100;\n    rectangle.height = 150;\n    rectangle.width = 150;\n    rectangle.name = \"Square\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Saving Roaming Settings Asynchronously in Outlook Add-ins (JavaScript)\nDESCRIPTION: Illustrates how to set or create a roaming setting using `RoamingSettings.set()` and then persist all settings to the user's mailbox asynchronously using `RoamingSettings.saveAsync()`. A callback function (`saveMyAddInSettingsCallback`) is provided to handle the result of the asynchronous save operation. This function assumes the `_settings` variable is initialized (e.g., via the `Office.onReady` example). Requires the Office JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/metadata-for-an-outlook-add-in.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Set a roaming setting.\nfunction setAddInSetting() {\n  _settings.set(\"cookie\", Date());\n  // Save roaming settings to the mailbox, so that they'll be available in the next session.\n  _settings.saveAsync(saveMyAddInSettingsCallback);\n}\n\n// Callback function after saving custom roaming settings.\nfunction saveMyAddInSettingsCallback(asyncResult) {\n  if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n    // Handle the failure.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Office.context.document.getFilePropertiesAsync in a Promise in JavaScript\nDESCRIPTION: Provides a function `getDocumentFilePath` that wraps the callback-based `Office.context.document.getFilePropertiesAsync` method within a JavaScript `Promise`. This allows the asynchronous operation to be used with `async/await` syntax. The Promise resolves with the file URL on success or rejects using a specified error handler on failure. Requires `OfficeExtension.Promise` and assumes an error handling function (`WordMarkdownConversion.errorHandler`) exists.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getDocumentFilePath() {\n    return new OfficeExtension.Promise(function (resolve, reject) {\n        try {\n            Office.context.document.getFilePropertiesAsync(function (asyncResult) {\n                resolve(asyncResult.value.url);\n            });\n        }\n        catch (error) {\n            reject(WordMarkdownConversion.errorHandler(error));\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell Value Using Excel JavaScript API in a Custom Function (JavaScript)\nDESCRIPTION: This JavaScript snippet defines an asynchronous Excel custom function, which retrieves the value from a specified cell address using the Excel JavaScript API. It requires a shared runtime environment and the 'Excel' API. The function accepts a string parameter 'address' (the cell reference, e.g., \"A1\") and returns the value at that address after synchronizing the context. The snippet must run within the Office Add-in's custom function framework and should not attempt to modify other cells or workbook structure; it is limited to read operations through the API context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/call-excel-apis-from-custom-function.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @customfunction\n * @param {string} address The address of the cell from which to retrieve the value.\n * @returns The value of the cell at the input address.\n **/\nasync function getRangeValue(address) {\n // Retrieve the context object. \n const context = new Excel.RequestContext();\n \n // Use the context object to access the cell at the input address. \n const range = context.workbook.worksheets.getActiveWorksheet().getRange(address);\n range.load(\"values\");\n await context.sync();\n \n // Return the value of the cell at the input address.\n return range.values[0][0];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Stacked Column Chart in Excel using JavaScript\nDESCRIPTION: This snippet illustrates how to generate a chart within an Excel worksheet using the JavaScript API. It retrieves the active worksheet, adds a stacked column chart (`Excel.ChartType.columnStacked`) based on the data in range \"B3:C5\", sets the chart's vertical position (`top`) to 100 pixels from the top of the worksheet, and synchronizes the changes with the workbook via `context.sync()`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-core-concepts.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let chart = sheet.charts.add(Excel.ChartType.columnStacked, sheet.getRange(\"B3:C5\"));\n    chart.top = 100;\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Properties in Office Add-in using Office JS\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve a custom property value, previously stored in the document's settings, within an Office Add-in. It uses the `Office.context.document.settings.get()` method from the Office JavaScript API to fetch the value associated with the specified key ('userName' in this example). This allows the add-in to access data embedded in the document itself.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/pnp-open-in-excel.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet userName = Office.context.document.settings.get('userName'));\n```\n\n----------------------------------------\n\nTITLE: Detecting Legacy Webviews (Trident/EdgeHTML) in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to check the `window.navigator.userAgent` property at runtime to determine if the Office Add-in is running within the Trident (Internet Explorer 11) or EdgeHTML (Microsoft Edge Legacy) webview. Based on the detection, the add-in can either provide an alternative, compatible user experience or display a message guiding the user to upgrade their Office version. It relies on the browser's `navigator` object being available.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/support-ie-11.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (navigator.userAgent.indexOf(\"Trident\") !== -1) {\n    /*\n       Trident is the webview in use. Do one of the following:\n        1. Provide an alternate add-in experience that doesn't use any of the HTML5\n           features that aren't supported in Trident (Internet Explorer 11).\n        2. Enable the add-in to gracefully fail by adding a message to the UI that\n           says something similar to:\n           \"This add-in won't run in your version of Office. Please upgrade either to\n           perpetual Office 2021 (or later) or to a Microsoft 365 account.\"\n    */\n} else if (navigator.userAgent.indexOf(\"Edge\") !== -1) {\n    /*\n       EdgeHTML is the browser in use. Do one of the following:\n        1. Provide an alternate add-in experience that's supported in EdgeHTML (Microsoft Edge Legacy).\n        2. Enable the add-in to gracefully fail by adding a message to the UI that\n           says something similar to:\n           \"This add-in won't run in your version of Office. Please upgrade either to\n           perpetual Office 2021 (or later) or to a Microsoft 365 account.\"\n    */\n} else {\n    /* \n       A webview other than Trident or EdgeHTML is in use.\n       Provide a full-featured version of the add-in here.\n    */\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Modifying Table Cell Values in PowerPoint with Office.js in JavaScript\nDESCRIPTION: This snippet details how to access an existing PowerPoint table via the Office.js API, read its values, and update the content of a specific cell. The example walks through loading shapes, narrowing to table shapes, loading and modifying the values array, and applying changes asynchronously. Requires the PowerPoint JavaScript API and assumes a slide with a table shape is present.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait PowerPoint.run(async (context) => {\n    // Load shapes.\n    const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;\n    shapes.load(\"items\");\n    await context.sync();\n    // Find the first shape of type table.\n    const shape = shapes.items.find((shape) => shape.type === PowerPoint.ShapeType.table)\n    const table = shape.getTable();\n    table.load(\"values\");\n    await context.sync();\n    // Set the value of the specified table cell.\n    let values = table.values;\n    values[1][1] = \"A new value\";\n    table.values = values;\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server and Sideloading Add-in via npm\nDESCRIPTION: This command line instruction uses the Node Package Manager (npm) to execute the 'start' script from the project's `package.json`. This command typically initiates a local development web server to host the add-in's static files and triggers the sideloading process, which installs the add-in into the target Office application (Outlook) for development and testing purposes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagefromchanged-onappointmentfromchanged-events.md#_snippet_8\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Compiling/Serving Angular with AOT Compiler via ng command\nDESCRIPTION: These commands demonstrate how to build or serve an Angular application using the Ahead-of-Time (AOT) compiler. Using the `--aot` flag with `ng build` or `ng serve` pre-compiles Angular HTML templates and TypeScript into efficient JavaScript code during the build process, leading to faster rendering, quicker asynchronous requests, and smaller application bundles.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/add-ins-with-angular2.md#_snippet_5\n\nLANGUAGE: command line\nCODE:\n```\nng build --aot\n```\n\nLANGUAGE: command line\nCODE:\n```\nng serve --aot\n```\n\n----------------------------------------\n\nTITLE: Inserting Content Controls Using Office Open XML - XML\nDESCRIPTION: Demonstrates a minimal Office Open XML package for inserting a rich text content control into a Word document. This snippet showcases the essential structure, including /_rels/.rels and /word/document.xml parts, with the w:sdt tag representing the content control. The example is designed for scenarios where the control is bound from a Word add-in and includes necessary properties like alias, id, and appearance. Requires a basic understanding of the OOXML schema and assumes the document is being created or modified via direct OOXML manipulation. The XML can be used as input for Office.js APIs (such as setSelectedDataAsync with coercionType \"ooxml\") to inject content controls at precise locations; inputs/outputs should conform to the WordprocessingML specification.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<pkg:package xmlns:pkg=\\\"http://schemas.microsoft.com/office/2006/xmlPackage\\\">\\n  <pkg:part pkg:name=\\\"/_rels/.rels\\\" pkg:contentType=\\\"application/vnd.openxmlformats-package.relationships+xml\\\" pkg:padding=\\\"512\\\">\\n    <pkg:xmlData>\\n      <Relationships xmlns=\\\"http://schemas.openxmlformats.org/package/2006/relationships\\\">\\n        <Relationship Id=\\\"rId1\\\" Type=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\\\" Target=\\\"word/document.xml\\\"/>\\n      </Relationships>\\n    </pkg:xmlData>\\n  </pkg:part>\\n  <pkg:part pkg:name=\\\"/word/document.xml\\\" pkg:contentType=\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\\\">\\n    <pkg:xmlData>\\n      <w:document xmlns:w=\\\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\\\" xmlns:w15=\\\"http://schemas.microsoft.com/office/word/2012/wordml\\\" >\\n        <w:body>\\n          <w:p/>\\n          <w:sdt>\\n              <w:sdtPr>\\n                <w:alias w:val=\\\"MyContentControlTitle\\\"/>\\n                <w:id w:val=\\\"1382295294\\\"/>\\n                <w15:appearance w15:val=\\\"hidden\\\"/>\\n                <w:showingPlcHdr/>\\n              </w:sdtPr>\\n              <w:sdtContent>\\n                <w:p>\\n                  <w:r>\\n                  <w:t>[This text is inside a content control that has its container hidden. You can bind to a content control to add or interact with content at a specified location in the document.]</w:t>\\n                </w:r>\\n                </w:p>\\n              </w:sdtContent>\\n            </w:sdt>\\n          </w:body>\\n      </w:document>\\n    </pkg:xmlData>\\n  </pkg:part>\\n </pkg:package>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack to Copy Launch Event Script (JavaScript)\nDESCRIPTION: This JavaScript object is intended to be added to the plugins array in a webpack configuration file. It uses CopyWebpackPlugin to copy launchevent.js from the source directory to the root of the build output, making it available for referencing in HTML. Prerequisites are the installation of CopyWebpackPlugin and valid source file paths. This configuration ensures that event handler scripts are present at runtime as required by the add-in's HTML pages.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew CopyWebpackPlugin({\n  patterns: [\n    {\n      from: \"./src/launchevent/launchevent.js\",\n      to: \"launchevent.js\",\n    },\n  ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata Tag to Presentation Using Office.js - JavaScript\nDESCRIPTION: Demonstrates adding a presentation-level metadata tag via the tags property of a PowerPoint presentation object. The method adds a key-value string pair (\"SECURITY\", \"Internal-Audience-Only\") to the TagsCollection, then synchronizes the context. Requires Office.js PowerPoint context and proper API permissions; key must be a string and is best provided as uppercase.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/tagging-presentations-slides-shapes.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addPresentationTag() {\n  await PowerPoint.run(async function (context) {\n    let presentationTags = context.presentation.tags;\n    presentationTags.add(\"SECURITY\", \"Internal-Audience-Only\");\n\n    await context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Search for Escaped Special Characters with Office.js - JavaScript\nDESCRIPTION: This snippet shows how to locate and format all opening curly braces ('{') in a Word document using a wildcard search, with Office.js in JavaScript. It utilizes the search method with 'matchWildcards: true' and appropriately escapes the character using square brackets. Dependencies include the Office.js library and an Office Add-in host. Found items have their font, highlight, and bold properties updated as output.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/search-option-guidance.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Run a batch operation against the Word object model.\\nawait Word.run(async (context) => {\\n\\n    // Queue a command to search the document with a wildcard for an escaped opening curly brace.\\n    const searchResults = context.document.body.search('[{]', { matchWildcards: true });\\n\\n    // Queue a command to load the font property values.\\n    searchResults.load('font');\\n\\n    // Synchronize the document state.\\n    await context.sync();\\n    console.log('Found count: ' + searchResults.items.length);\\n\\n    // Queue a set of commands to change the font for each found item.\\n    for (let i = 0; i < searchResults.items.length; i++) {\\n        searchResults.items[i].font.color = 'purple';\\n        searchResults.items[i].font.highlightColor = 'pink';\\n        searchResults.items[i].font.bold = true;\\n    }\\n\\n    // Synchronize the document state.\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized Split Loop Pattern for Reading from Content Controls in Office.js JavaScript API\nDESCRIPTION: This JavaScript snippet illustrates the split loop pattern for efficiently reading the text property of paragraphs associated with Word content controls using Office.js. It separates the loading and reading phases: one loop loads and tracks proxy objects, a single context.sync fetches all requested data, and a second loop reads the populated properties. Dependencies are Office.js in a Word add-in. Input is the collection of content controls, and output is a log of the first paragraph text for each. This approach dramatically improves performance by minimizing context.sync calls, with the only constraint being added code complexity and memory use for storing proxy objects.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/correlated-objects-pattern.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nWord.run(async (context) => {\n    const contentControls = context.document.contentControls.load(\"items\");\n    await context.sync();\n\n    const firstParagraphsOfCCs = [];\n    for (let i = 0; i < contentControls.items.length; i++) {\n      const paragraph = contentControls.items[i].getRange('Whole').paragraphs.getFirst();\n      paragraph.load('text');\n      firstParagraphsOfCCs.push(paragraph);\n    }\n\n    await context.sync();\n\n    for (let i = 0; i < firstParagraphsOfCCs.length; i++) {\n      console.log(firstParagraphsOfCCs[i].text);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Property Update into Logging Logic (Function Command, JavaScript)\nDESCRIPTION: Modified `logCRMEvent` function for a function command. Instead of directly completing the event after successfully getting the body, it now calls `updateCustomProperties` to set the 'EventLogged' flag. The completion signal (`event.completed`) is subsequently handled within `updateCustomProperties` upon successful saving of the property.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nfunction logCRMEvent(appointmentEvent) {\n  event = appointmentEvent;\n  console.log(`Subject: ${Office.context.mailbox.item.subject}`);\n  Office.context.mailbox.item.body.getAsync(\n    \"html\",\n    { asyncContext: \"This is passed to the callback\" },\n    (result) => {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        // Replace `event.completed({ allowEvent: true });` with the following statement.\n        updateCustomProperties();\n      } else {\n        console.error(\"Failed to get body.\");\n        event.completed({ allowEvent: false });\n      }\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Binding Content Controls Using Office.js in JavaScript\nDESCRIPTION: This JavaScript snippet defines a function to bind to a named content control in a Word document using the Office.js API. If the binding fails because the specified content control does not exist, it loads the OOXML markup for the control and inserts it at the current selection, then retries the binding. Dependencies include Office.js and the ContentControl.xml file containing OOXML markup for the control. The key parameter is the content control's Title (used for the binding), and the binding has a unique ID. Input is the name of the content control; if successful, the function results in a bound content control ready for further manipulation. Limitations include a hardcoded filename and reliance on synchronous XMLHttpRequest, which is discouraged in web environments.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction addAndBindControl() {\n    Office.context.document.bindings.addFromNamedItemAsync(\"MyContentControlTitle\", \"text\", { id: 'myBinding' }, function (result) {\n        if (result.status == \"failed\") {\n            if (result.error.message == \"The named item does not exist.\")\n                const myOOXMLRequest = new XMLHttpRequest();\n                let myXML;\n                myOOXMLRequest.open('GET', '../../Snippets_BindAndPopulate/ContentControl.xml', false);\n                myOOXMLRequest.send();\n                if (myOOXMLRequest.status === 200) {\n                    myXML = myOOXMLRequest.responseText;\n                }\n                Office.context.document.setSelectedDataAsync(myXML, { coercionType: 'ooxml' }, function (result) {\n                    Office.context.document.bindings.addFromNamedItemAsync(\"MyContentControlTitle\", \"text\", { id: 'myBinding' });\n                });\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Define Long String Resource for Protection Button Tooltip (XML)\nDESCRIPTION: Defines a bt:String entry for the tooltip description of the ToggleProtection button with ID \\\"ProtectionButtonToolTip\\\" and an explanatory message. Placed under the bt:LongStrings element for use in tooltips and extended descriptions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<bt:String id=\\\"ProtectionButtonToolTip\\\" DefaultValue=\\\"Click to protect or unprotect the current worksheet.\\\" /\\u003e\n```\n\n----------------------------------------\n\nTITLE: Setting Delayed Email Delivery using Office JavaScript API\nDESCRIPTION: This JavaScript snippet shows how to schedule an email message for delayed delivery using the Office JavaScript API. It calculates a delivery time five minutes from the current time by creating a new JavaScript `Date` object. This `Date` object is then passed to the `item.delayDeliveryTime.setAsync` method. The callback function checks the status of the asynchronous operation and logs a confirmation message upon successful scheduling or logs an error message if it fails. This feature relies on server-side processing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/delay-delivery.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Delays the delivery time by five minutes from the current time.\nconst currentTime = new Date().getTime();\nconst milliseconds = 5 * 60 * 1000;\nconst timeDelay = new Date(currentTime + milliseconds);\nOffice.context.mailbox.item.delayDeliveryTime.setAsync(timeDelay, (asyncResult) => {\n  if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n    console.log(asyncResult.error.message);\n    return;\n  }\n\n  console.log(\"Message delivery has been scheduled.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Office Add-in - Command Line\nDESCRIPTION: This snippet starts the local web server required for sideloading and testing the Office Add-in, particularly on macOS. The command assumes the project contains a script named 'dev-server' in its package.json file, typically configured to run a local HTTP server for hosting Add-in resources. It requires Node.js and npm to be installed, and the user must run this in the project root. There are no parameters, and it boots long-running service accessible for sideloading.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/quickstart-yo-start-server-excel.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Placing Excel Add-in Startup Code in Office.initialize\nDESCRIPTION: Demonstrates placing startup logic within the `Office.initialize` handler for an Excel add-in. This specific code registers an event handler for the `onChanged` event on the active worksheet using the Excel JavaScript API. This code will execute automatically on document open if the add-in's startup behavior is configured to `load`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/run-code-on-document-open.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n```JavaScript\n// This is called as soon as the document opens.\n// Put your startup code here.\nOffice.initialize = () => {\n  // Add the event handler.\n  Excel.run(async context => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event.\");\n  });\n};\n\n/**\n * Handle the changed event from the worksheet.\n *\n * @param event The event information from Excel\n */\nasync function onChange(event) {\n    await Excel.run(async (context) => {    \n        await context.sync();\n        console.log(\"Change type of event: \" + event.changeType);\n        console.log(\"Address of event: \" + event.address);\n        console.log(\"Source of event: \" + event.source);\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Registering Visibility Change Handler in JavaScript\nDESCRIPTION: This snippet demonstrates the correct asynchronous way to register a `VisibilityModeChanged` event handler using `await` with `Office.addin.onVisibilityModeChanged`. This ensures the registration process completes before the returned deregister function is assigned to the `removeVisibilityModeHandler` variable. This code must be run within an `async` function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/show-hide-add-in.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// await the promise from onVisibilityModeChanged and assign\n// the returned deregister handler to removeVisibilityModeHandler.\nconst removeVisibilityModeHandler =\n    await Office.addin.onVisibilityModeChanged(function(args) {\n        if (args.visibilityMode == \"Taskpane\") {\n            // Code that runs whenever the task pane is made visible.\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation (Shell)\nDESCRIPTION: Executes the `node` command with the `-v` flag in a terminal to display the installed version of Node.js. This command is used to confirm that Node.js is installed and accessible in the system's PATH as part of the development environment prerequisites.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/dev-kit-prerequisites.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Making Batched Remote Requests for Excel Custom Functions in JavaScript\nDESCRIPTION: Defines the _makeRemoteRequest function to send the current batch of custom function invocations to a remote service and dispatch results using promises. This function transfers the batch queue into a request array, initiates a fetch via _fetchFromRemoteService, and resolves or rejects each invocation's promise based on the response or error from the service. Relies on global _batch, _isBatchedRequestScheduled, and assumes the presence of an async _fetchFromRemoteService implementation; must be called internally within the batching system, and is not intended for direct invocation from Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-batching.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// This is a private helper function, used only within your custom function add-in.\n// You wouldn't call _makeRemoteRequest in Excel, for example.\n// This function makes a request for remote processing of the whole batch,\n// and matches the response batch to the request batch.\nfunction _makeRemoteRequest() {\n  // Copy the shared batch and allow the building of a new batch while you are waiting for a response.\n  // Note the use of \"splice\" rather than \"slice\", which will modify the original _batch array\n  // to empty it out.\n  try{\n  console.log(\"makeRemoteRequest\");\n  const batchCopy = _batch.splice(0, _batch.length);\n  _isBatchedRequestScheduled = false;\n\n  // Build a simpler request batch that only contains the arguments for each invocation.\n  const requestBatch = batchCopy.map((item) => {\n    return { operation: item.operation, args: item.args };\n  });\n  console.log(\"makeRemoteRequest2\");\n  // Make the remote request.\n  _fetchFromRemoteService(requestBatch)\n    .then((responseBatch) => {\n      console.log(\"responseBatch in fetchFromRemoteService\");\n      // Match each value from the response batch to its corresponding invocation entry from the request batch,\n      // and resolve the invocation promise with its corresponding response value.\n      responseBatch.forEach((response, index) => {\n        if (response.error) {\n          batchCopy[index].reject(new Error(response.error));\n          console.log(\"rejecting promise\");\n        } else {\n          console.log(\"fulfilling promise\");\n          console.log(response);\n\n          batchCopy[index].resolve(response.result);\n        }\n      });\n    });\n    console.log(\"makeRemoteRequest3\");\n  } catch (error) {\n    console.log(\"error name:\" + error.name);\n    console.log(\"error message:\" + error.message);\n    console.log(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Add-in for YouTube URLs via Regular Expression Rule in Manifest XML\nDESCRIPTION: Demonstrates a RuleCollection in the manifest that activates the add-in for messages containing YouTube video URLs. The RuleCollection combines ItemIs to restrict to message types and uses ItemHasRegularExpressionMatch with a named rule (videoURL) and a regular expression matching YouTube watch links. Dependencies: valid Outlook manifest, proper XML structure, and valid regex. Key parameters: ItemType (Message), RegExName (videoURL), RegExValue (YouTube URL regex), and PropertyName (BodyAsPlaintext). Activation occurs when the pattern is detected in the item body.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/contextual-outlook-add-ins.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Rule xsi:type=\"RuleCollection\" Mode=\"And\">\n    <Rule xsi:type=\"ItemIs\" ItemType=\"Message\"/>\n    <Rule xsi:type=\"ItemHasRegularExpressionMatch\" RegExName=\"videoURL\" RegExValue=\"http://www\\.youtube\\.com/watch\\?v=[a-zA-Z0-9_-]{11}\" PropertyName=\"BodyAsPlaintext\"/>\n</Rule>\n```\n\n----------------------------------------\n\nTITLE: Applying Specific Cell Formatting to PowerPoint Table Cells (JavaScript)\nDESCRIPTION: This snippet demonstrates how to override uniform table formatting for individual cells in PowerPoint tables via the specificCellProperties property. It shows how to generate a 2D array for specificCellProperties, then assign a black fill color to the cell at (row 1, column 1). Requires a properly constructed TableAddOptions object, matching the 2D shape of the values array. Outputs: a table with custom-format cell at the specified location. Limitation: 2D array must exactly match the table's size.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst rowCount = 3;\nconst columnCount = 4;\n// Compact syntax to create a 2D array filled with empty and distinct objects.\nconst specificCellProperties = Array(rowCount).fill(\"\").map(_ => Array(columnCount).fill(\"\").map(_ => ({}) ));\nconst options: PowerPoint.TableAddOptions = {\n    values: [\n        [\"1\", \"2\", \"\", \"4\"],\n        [\"5\", \"6\", \"7\", \"8\"],\n        [\"9\", \"10\", \"11\", \"12\"]\n    ],\n    uniformCellProperties: {\n        fill: { color: \"darkslateblue\" },\n        font: { bold: true, color: \"white\" }\n    },\n    specificCellProperties // Array values are empty objects at this point.\n};\n// Set fill color for specific cell at row 1, column 1.\noptions.specificCellProperties[1][1] = {\n    fill: { color: \"black\" }\n};\nawait insertTableOnCurrentSlide(rowCount, columnCount, options);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dictionary XML Web Service in C# (ASP.NET ASMX)\nDESCRIPTION: Provides a C# implementation for an ASP.NET ASMX web service (`WebService.cs`). The `Define` method accepts a `word` parameter, simulates fetching definitions, and constructs an `XmlDocument` conforming to the `OfficeDefinitions` schema. It includes placeholder definitions and generates a `SeeMoreURL` based on the input word. This service acts as the backend for the dictionary Office Add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Services;\nusing System.Xml;\nusing System.Text;\nusing System.IO;\nusing System.Net;\nusing System.Web.Script.Services;\n\n/// <summary>\n/// Summary description for _Default.\n/// </summary>\n[WebService(Namespace = \"http://tempuri.org/\")]\n[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]\n// To allow this web service to be called from script, using ASP.NET AJAX, include the following line. \n[ScriptService]\npublic class WebService : System.Web.Services.WebService {\n\n    public WebService () {\n\n        // Uncomment the following line if using designed components.\n        // InitializeComponent(); \n    }\n\n    // You can replace this method entirely with your own method that gets definitions\n    // from your data source and then formats it into the example OfficeDefinitions XML format. \n    // If you need a reference for constructing the returned XML, you can use this example as a basis.\n    [WebMethod]\n    public XmlDocument Define(string word)\n    {\n\n        StringBuilder sb = new StringBuilder();\n        XmlWriter writer = XmlWriter.Create(sb);\n        {\n            writer.WriteStartDocument();\n            \n                writer.WriteStartElement(\"Result\", \"http://schemas.microsoft.com/contoso/OfficeDefinitions\");\n\n                    // See More URL should be changed to the dictionary publisher's page for that word on\n                    // their website.\n                    writer.WriteElementString(\"SeeMoreURL\", \"https://www.bing.com/search?q=\" + word);\n\n                    writer.WriteStartElement(\"Definitions\");\n            \n                        writer.WriteElementString(\"Definition\", \"Definition 1 of \" + word);\n                        writer.WriteElementString(\"Definition\", \"Definition 2 of \" + word);\n                        writer.WriteElementString(\"Definition\", \"Definition 3 of \" + word);\n                   \n                    writer.WriteEndElement(); // End of Definitions element.\n\n                writer.WriteEndElement(); // End of Result element.\n            \n            writer.WriteEndDocument();\n        }\n        writer.Close();\n\n        XmlDocument doc = new XmlDocument();\n        doc.LoadXml(sb.ToString());\n\n        return doc;\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating the ExchangeOnlineManagement Module in PowerShell\nDESCRIPTION: Updates the ExchangeOnlineManagement module to the latest available version. This ensures compatibility and access to the newest cmdlets and features.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/turn-exchange-tokens-on-off.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module -Name ExchangeOnlineManagement\n```\n\n----------------------------------------\n\nTITLE: Detecting Data Changes in an Excel Table using Office JS\nDESCRIPTION: This snippet defines an asynchronous event handler function `onTableChanged` designed to be registered for a table's `onChanged` event. When triggered, it receives `TableChangedEventArgs` and logs details about the change (address, value before/after, value type before/after) to the console using the `eventArgs.details` property. It requires the Office JS API and an Excel environment where events can be registered.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This function would be used as an event handler for the Table.onChanged event.\nasync function onTableChanged(eventArgs) {\n    await Excel.run(async (context) => {\n        let details = eventArgs.details;\n        let address = eventArgs.address;\n\n        // Print the before and after types and values to the console.\n        console.log(`Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),`\n            + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Setting Data for Addin Field - Office.js - JavaScript\nDESCRIPTION: This sample demonstrates how to retrieve the first Addin field in the active Word document and how to set its data property using Office.js. It filters for Addin types, loads the fields collection, accesses the first item, displays its original data, then sets the data property to a specified value and confirms the change. The pattern uses context.sync for async state management and provides robust handling for cases where no appropriate field exists.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/fields-guidance.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Gets the first Addin field in the document and sets its data.\\nasync function getFirstAddinFieldAndSetData() {\\n  await Word.run(async (context) => {\\n    let myFieldTypes = new Array();\\n    myFieldTypes[0] = Word.FieldType.addin;\\n    const addinFields = context.document.body.fields.getByTypes(myFieldTypes);\\n    let fields = addinFields.load(\\\"items\\\");\\n    await context.sync();\\n\\n    if (fields.items.length === 0) {\\n      console.log(\\\"No Addin fields in this document.\\\");\\n    } else {\\n      fields.load();\\n      await context.sync();\\n\\n      const firstAddinField = fields.items[0];\\n      firstAddinField.load(\\\"code,result,data\\\");\\n      await context.sync();\\n\\n      console.log(\\\"The data of the Addin field before being set:\\\", firstAddinField.data);\\n      const data = \\\"Insert your data here\\\";\\n      //const data = $(\\\"#input-reference\\\").val(); // Or get user data from your add-in's UI.\\n      firstAddinField.data = data;\\n      firstAddinField.load(\\\"data\\\");\\n      await context.sync();\\n\\n      console.log(\\\"The data of the Addin field after being set:\\\", firstAddinField.data);\\n    }\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Office JS and Sending Boolean Message - JavaScript\nDESCRIPTION: Initializes the Office JavaScript API in the dialog and sends a stringified boolean value to the host page using messageParent. Requires Office.js to be loaded in the dialog environment. The Office.onReady function signals readiness, and the userSignedIn function sends the message. The key parameter is the boolean value sent as a string, and the output is delivered to the host page's event handler.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.onReady(() => {\n   // Add any initialization code for your dialog here.\n});\n\n// Called when dialog signs in the user.\nfunction userSignedIn() {\n    Office.context.ui.messageParent(true.toString());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Outlook Add-in Manifest with Commands (XML)\nDESCRIPTION: This XML manifest (`OfficeApp`) configures an Outlook add-in. It includes basic metadata (ID, Version, Provider, DisplayName, Description, Icons), specifies Outlook (Mailbox) as the host, sets API requirements (Mailbox 1.13 via VersionOverrides), and uses `VersionOverrides` to define a command group with buttons to show a task pane (`ShowTaskpane`) and execute a function (`ExecuteFunction`) on the message read surface. Resource locations (URLs, Images, Strings) for icons, HTML files, and UI text are defined within the `Resources` element.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OfficeApp xmlns=\"http://schemas.microsoft.com/office/appforoffice/1.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bt=\"http://schemas.microsoft.com/office/officeappbasictypes/1.0\" xmlns:mailappor=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.0\" xsi:type=\"MailApp\">\n\n  <!-- Begin basic settings: Add-in metadata used for all versions of Outlook, unless override provided. -->\n\n  <!-- IMPORTANT: The ID must be unique to your add-in. If you reuse this manifest, ensure that you change this to a new GUID. -->\n  <Id>971E76EF-D73E-567F-ADAE-5A76B39052C8</Id>\n  <!-- Updates from the Office Store only get triggered if there is a version change. -->\n  <Version>1.0.0.0</Version>\n  <ProviderName>Contoso</ProviderName>\n  <DefaultLocale>en-US</DefaultLocale>\n  <!-- The display name of your add-in. Used in the in-app Office Store and various places of the Outlook UI, such as an add-in's dialog. -->\n  <DisplayName DefaultValue=\"Contoso Add-in\"/>\n  <Description DefaultValue=\"An Outlook add-in template to get started.\"/>\n  <!-- Change the following lines to specify the web server that hosts the icon files. -->\n  <IconUrl DefaultValue=\"https://contoso.com/assets/icon-64.png\"/>\n  <HighResolutionIconUrl DefaultValue=\"https://contoso.com/assets/hi-res-icon.png\"/>\n  <SupportUrl DefaultValue=\"[Insert the URL of a page that provides support information for the app]\"/>\n  <!-- Domains allowed for navigation. -->\n  <AppDomains>\n    <AppDomain>https://www.contoso.com</AppDomain>\n  </AppDomains>\n\n  <!--End basic settings. -->\n\n  <Hosts>\n    <Host Name=\"Mailbox\"/>\n  </Hosts>\n  <!-- The <Requirements> element is overridden by any <Requirements> element inside a <VersionOverrides> element. -->\n  <Requirements>\n    <Sets>\n      <Set Name=\"Mailbox\" MinVersion=\"1.1\"/>\n    </Sets>\n  </Requirements>\n  <!-- The <FormSettings> element is required for validation, but is ignored when there's a <VersionOverrides> element in your manifest. -->\n  <FormSettings>\n    <Form xsi:type=\"ItemRead\">\n      <DesktopSettings>\n        <!-- Change the following line to specify the web server that hosts the HTML file. -->\n        <SourceLocation DefaultValue=\"[Insert the URL where your HTML file is hosted.]\"/>\n        <RequestedHeight>250</RequestedHeight>\n      </DesktopSettings>\n    </Form>\n  </FormSettings>\n  <Permissions>ReadWriteItem</Permissions>\n  <!-- The <Rule> element is required for validation, but is ignored when there's a <VersionOverrides> element in your manifest. -->\n  <Rule xsi:type=\"RuleCollection\" Mode=\"Or\">\n    <Rule xsi:type=\"ItemIs\" ItemType=\"Message\" FormType=\"Read\"/>\n  </Rule>\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n    <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n      <Requirements>\n        <bt:Sets DefaultMinVersion=\"1.13\">\n          <bt:Set Name=\"Mailbox\"/>\n        </bt:Sets>\n      </Requirements>\n      <Hosts>\n        <Host xsi:type=\"MailHost\">\n          <DesktopFormFactor>\n            <!-- Location of the functions that will run when the add-in's function command is selected. -->\n            <FunctionFile resid=\"functionFile\"/>\n            <!-- Activates the add-in on the Message Read surface. -->\n            <ExtensionPoint xsi:type=\"MessageReadCommandSurface\">\n              <!-- Use the default tab of the ExtensionPoint or create your own with <CustomTab id=\"myTab\">. -->\n              <OfficeTab id=\"TabDefault\">\n                <!-- Add up to six groups per tab. -->\n                <Group id=\"msgReadGroup\">\n                  <Label resid=\"groupLabel\"/>\n                  <!-- Configures the button to launch the add-in's task pane. -->\n                  <Control xsi:type=\"Button\" id=\"msgReadOpenPaneButton\">\n                    <Label resid=\"taskPaneButtonLabel\"/>\n                    <Supertip>\n                      <Title resid=\"taskPaneButtonLabel\"/>\n                      <Description resid=\"taskPaneButtonDescription\"/>\n                    </Supertip>\n                    <Icon>\n                      <bt:Image size=\"16\" resid=\"icon16\"/>\n                      <bt:Image size=\"32\" resid=\"icon32\"/>\n                      <bt:Image size=\"80\" resid=\"icon80\"/>\n                    </Icon>\n                    <Action xsi:type=\"ShowTaskpane\">\n                      <SourceLocation resid=\"messageReadTaskPaneUrl\"/>\n                    </Action>\n                  </Control>\n                  <!-- Configures the function command of the add-in. -->\n                  <Control xsi:type=\"Button\" id=\"msgReadActionButton\">\n                    <Label resid=\"actionButtonLabel\"/>\n                    <Supertip>\n                      <Title resid=\"actionButtonLabel\"/>\n                      <Description resid=\"actionButtonDescription\"/>\n                    </Supertip>\n                    <Icon>\n                      <bt:Image size=\"16\" resid=\"icon16\"/>\n                      <bt:Image size=\"32\" resid=\"icon32\"/>\n                      <bt:Image size=\"80\" resid=\"icon80\"/>\n                    </Icon>\n                    <Action xsi:type=\"ExecuteFunction\">\n                      <FunctionName>run</FunctionName>\n                    </Action>\n                  </Control>\n                </Group>\n              </OfficeTab>\n            </ExtensionPoint>\n          </DesktopFormFactor>\n        </Host>\n      </Hosts>\n      <!-- You can use resources across hosts and form factors. -->\n      <Resources>\n        <bt:Images>\n          <bt:Image id=\"icon16\" DefaultValue=\"https://contoso.com/assets/icon16.png\"/>\n          <bt:Image id=\"icon32\" DefaultValue=\"https://contoso.com/assets/icon32.png\"/>\n          <bt:Image id=\"icon80\" DefaultValue=\"https://contoso.com/assets/icon80.png\"/>\n        </bt:Images>\n        <bt:Urls>\n          <bt:Url id=\"functionFile\" DefaultValue=\"https://contoso.com/FunctionFile.html\"/>\n          <bt:Url id=\"messageReadTaskPaneUrl\" DefaultValue=\"https://contoso.com/MessageRead.html\"/>\n        </bt:Urls>\n        <bt:ShortStrings>\n          <bt:String id=\"groupLabel\" DefaultValue=\"My Add-in Group\"/>\n          <bt:String id=\"taskPaneButtonLabel\" DefaultValue=\"Show Task Pane\"/>\n          <bt:String id=\"actionButtonLabel\" DefaultValue=\"Perform an Action\"/>\n        </bt:ShortStrings>\n        <bt:LongStrings>\n          <bt:String id=\"taskPaneButtonDescription\" DefaultValue=\"Opens a task pane.\"/>\n          <bt:String id=\"actionButtonDescription\" DefaultValue=\"Performs an action.\"/>\n        </bt:LongStrings>\n      </Resources>\n    </VersionOverrides>\n  </VersionOverrides>\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Structuring Task Pane Add-in Manifest Elements in XML\nDESCRIPTION: Defines the mandatory sequence for child elements within the `<OfficeApp>` tag when `xsi:type` is \"TaskPaneApp\" in an Office Add-in manifest. This specific ordering is enforced by the Office Add-in schema (XSD) and is crucial for successful manifest validation and add-in loading. The internal structure of the `VersionOverrides` element, marked with an asterisk, is detailed in a separate section.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/manifest-element-ordering.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp xsi:type=\"TaskPaneApp\">\n    <Id>\n    <AlternateID>\n    <Version>\n    <ProviderName>\n    <DefaultLocale>\n    <DisplayName>\n        <Override>\n    <Description>\n        <Override>\n    <IconUrl>\n        <Override>\n    <HighResolutionIconUrl>\n        <Override>\n    <SupportUrl>\n    <AppDomains>\n        <AppDomain>\n    <Hosts>\n        <Host>\n    <Requirements>\n        <Sets>\n            <Set>\n        <Methods>\n            <Method>\n    <DefaultSettings>\n        <SourceLocation>\n            <Override>\n    <Permissions>\n    <Dictionary>\n        <TargetDialects>\n        <QueryUri>\n        <CitationText>\n        <DictionaryName>\n        <DictionaryHomePage>\n    <VersionOverrides>*\n    <ExtendedOverrides>\n```\n\n----------------------------------------\n\nTITLE: Fetching Item Custom Properties using EWS makeEwsRequestAsync (TypeScript)\nDESCRIPTION: Shows how to construct and send an EWS `GetItem` request using TypeScript and the `Office.context.mailbox.makeEwsRequestAsync` method to retrieve custom properties associated with the current Outlook item in an Exchange on-premises environment. The SOAP XML request specifies the MAPI-based extended property (`cecp-<app-guid>`) to fetch, along with other item details. Requires the Office JavaScript API (`Office.context.mailbox`), the current item's ID (`Office.context.mailbox.item.itemId`), and the add-in's ID (`<app-guid>`). The code includes handling the asynchronous response.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/metadata-for-an-outlook-add-in.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet request_str =\n    '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n    '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' +\n                   'xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"' +\n                   'xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"' +\n                   'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">' +\n        '<soap:Header xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"' +\n                     'xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">' +\n            '<t:RequestServerVersion Version=\"Exchange2010_SP1\"/>' +\n        '</soap:Header>' +\n        '<soap:Body>' +\n            '<m:GetItem>' +\n                '<m:ItemShape>' +\n                    '<t:BaseShape>AllProperties</t:BaseShape>' +\n                    '<t:IncludeMimeContent>true</t:IncludeMimeContent>' +\n                    '<t:AdditionalProperties>' +\n                        '<t:ExtendedFieldURI ' +\n                          'DistinguishedPropertySetId=\"PublicStrings\" ' +\n                          'PropertyName=\"cecp-<app-guid>\"' +\n                          'PropertyType=\"String\" ' +\n                        '/>' +\n                    '</t:AdditionalProperties>' +\n                '</m:ItemShape>' +\n                '<m:ItemIds>' +\n                    '<t:ItemId Id=\"' +\n                      Office.context.mailbox.item.itemId +\n                    '\"/>' +\n                '</m:ItemIds>' +\n            '</m:GetItem>' +\n        '</soap:Body>' +\n    '</soap:Envelope>';\n\nOffice.context.mailbox.makeEwsRequestAsync(\n    request_str,\n    function(asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n            console.log(asyncResult.value);\n        }\n        else {\n            console.log(JSON.stringify(asyncResult));\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Contextual Tab Definition JSON\nDESCRIPTION: This is a complete JSON blob defining a simple custom contextual tab. It includes the `actions` array with one function execution, and the `tabs` array containing one tab definition ('Contoso Data'). This tab has one group ('Insertion') with specified icons, containing a single button ('Write Data') linked to the defined action, also with specified icons, label, supertip, and initial disabled state. The total number of controls across all groups on a tab cannot exceed 20.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n`{\\n  \"actions\": [\\n    {\\n      \"id\": \"executeWriteData\",\\n      \"type\": \"ExecuteFunction\",\\n      \"functionName\": \"writeData\"\\n    }\\n  ],\\n  \"tabs\": [\\n    {\\n      \"id\": \"CtxTab1\",\\n      \"label\": \"Contoso Data\",\\n      \"groups\": [\\n        {\\n          \"id\": \"CustomGroup111\",\\n          \"label\": \"Insertion\",\\n          \"icon\": [\\n            {\\n                \"size\": 16,\\n                \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/Group16x16.png\"\\n            },\\n            {\\n                \"size\": 32,\\n                \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/Group32x32.png\"\\n            },\\n            {\\n                \"size\": 80,\\n                \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/Group80x80.png\"\\n            }\\n          ],\\n          \"controls\": [\\n            {\\n                \"type\": \"Button\",\\n                \"id\": \"CtxBt112\",\\n                \"actionId\": \"executeWriteData\",\\n                \"enabled\": false,\\n                \"label\": \"Write Data\",\\n                \"superTip\": {\\n                    \"title\": \"Data Insertion\",\\n                    \"description\": \"Use this button to insert data into the document.\"\\n                },\\n                \"icon\": [\\n                    {\\n                        \"size\": 16,\\n                        \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton16x16.png\"\\n                    },\\n                    {\\n                        \"size\": 32,\n```\n\n----------------------------------------\n\nTITLE: Implementing Office Add-in Task Pane Logic with JavaScript\nDESCRIPTION: This JavaScript code, intended for `taskpane.js`, defines the client-side logic for an Outlook add-in task pane. It initializes using `Office.onReady`, checks for configuration (GitHub username), fetches and displays gists using helper functions, handles the insertion of selected gist content into the email body via `Office.context.mailbox.item.body.setSelectedDataAsync`, and manages a settings dialog using `Office.context.ui.displayDialogAsync`. It relies on Office.js, jQuery, potentially a URI library, and assumes corresponding HTML elements and helper functions exist.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n  'use strict';\n\n  let config;\n  let settingsDialog;\n\n  Office.onReady(function() {\n    $(document).ready(function() {\n      config = getConfig();\n\n      // Check if add-in is configured.\n      if (config && config.gitHubUserName) {\n        // If configured, load the gist list.\n        loadGists(config.gitHubUserName);\n      } else {\n        // Not configured yet.\n        $('#not-configured').show();\n      }\n\n      // When insert button is selected, build the content\n      // and insert into the body.\n      $('#insert-button').on('click', function() {\n        const gistId = $('.ms-ListItem.is-selected').val();\n        getGist(gistId, function(gist, error) {\n          if (gist) {\n            buildBodyContent(gist, function (content, error) {\n              if (content) {\n                Office.context.mailbox.item.body.setSelectedDataAsync(\n                  content,\n                  { coercionType: Office.CoercionType.Html },\n                  function (result) {\n                    if (result.status === Office.AsyncResultStatus.Failed) {\n                      showError(\"Could not insert gist: \" + result.error.message);\n                    }\n                  }\n                );\n              } else {\n                showError('Could not create insertable content: ' + error);\n              }\n            });\n          } else {\n            showError('Could not retrieve gist: ' + error);\n          }\n        });\n      });\n\n      // When the settings icon is selected, open the settings dialog.\n      $('#settings-icon').on('click', function() {\n        // Display settings dialog.\n        let url = new URI('dialog.html').absoluteTo(window.location).toString();\n        if (config) {\n          // If the add-in has already been configured, pass the existing values\n          // to the dialog.\n          url = url + '?gitHubUserName=' + config.gitHubUserName + '&defaultGistId=' + config.defaultGistId;\n        }\n\n        const dialogOptions = { width: 20, height: 40, displayInIframe: true };\n\n        Office.context.ui.displayDialogAsync(url, dialogOptions, function(result) {\n          settingsDialog = result.value;\n          settingsDialog.addEventHandler(Office.EventType.DialogMessageReceived, receiveMessage);\n          settingsDialog.addEventHandler(Office.EventType.DialogEventReceived, dialogClosed);\n        });\n      })\n    });\n  });\n\n  function loadGists(user) {\n    $('#error-display').hide();\n    $('#not-configured').hide();\n    $('#gist-list-container').show();\n\n    getUserGists(user, function(gists, error) {\n      if (error) {\n\n      } else {\n        $('#gist-list').empty();\n        buildGistList($('#gist-list'), gists, onGistSelected);\n      }\n    });\n  }\n\n  function onGistSelected() {\n    $('#insert-button').removeAttr('disabled');\n    $('.ms-ListItem').removeClass('is-selected').removeAttr('checked');\n    $(this).children('.ms-ListItem').addClass('is-selected').attr('checked', 'checked');\n  }\n\n  function showError(error) {\n    $('#not-configured').hide();\n    $('#gist-list-container').hide();\n    $('#error-display').text(error);\n    $('#error-display').show();\n  }\n\n  function receiveMessage(message) {\n    config = JSON.parse(message.message);\n    setConfig(config, function(result) {\n      settingsDialog.close();\n      settingsDialog = null;\n      loadGists(config.gitHubUserName);\n    });\n  }\n\n  function dialogClosed(message) {\n    settingsDialog = null;\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Adding a Straight Line Shape in Excel using JavaScript\nDESCRIPTION: This snippet illustrates how to add a straight line shape to an Excel worksheet ('MyWorksheet') via the JavaScript API. It uses `shapes.addLine()` specifying the starting coordinate (left=200, top=50) and ending coordinate (left=300, top=150), along with the `Excel.ConnectorType.straight` enum to define the line type. The newly created line shape is named 'StraightLine'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// This sample creates a straight line from [200,50] to [300,150] on the worksheet.\nawait Excel.run(async (context) => {\n    let shapes = context.workbook.worksheets.getItem(\"MyWorksheet\").shapes;\n    let line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);\n    line.name = \"StraightLine\";\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Event Handlers and Initialization with Office.js (JavaScript)\nDESCRIPTION: Associates UI button clicks in the task pane with their corresponding Office.js-driven JavaScript functions. Relies on the Office.js runtime and DOM element IDs to exist at the time of execution. The function uses a wrapper (tryCatch) to standardize error handling for all event callbacks. Input is a click event, and side effects include executing asynchronous add-in behavior. Parameters include element IDs (e.g., 'insert-paragraph', 'apply-style') and the referenced functions. Requires a Word add-in context and correct element IDs in the DOM.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Assign event handlers and other initialization logic.\\ndocument.getElementById(\\\"insert-paragraph\\\").onclick = () => tryCatch(insertParagraph);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\\\"apply-style\\\").onclick = () => tryCatch(applyStyle);\n```\n\n----------------------------------------\n\nTITLE: Editing the Content of an Excel Comment Reply using JavaScript\nDESCRIPTION: This snippet shows how to edit the text of a specific reply within a comment thread. It retrieves the first comment thread, then the first reply within that thread using `getItemAt(0)`, and updates the reply's `content` property.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Edit the first comment reply on the first comment in the workbook.\n    let comment = context.workbook.comments.getItemAt(0);\n    let reply = comment.replies.getItemAt(0);\n    reply.content = \"Never mind\";\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Selected Text using Office JavaScript API\nDESCRIPTION: This JavaScript snippet demonstrates reading the user's current selection in an Office application as text using the `Office.context.document.getSelectedDataAsync` method. It specifies `Office.CoercionType.Text` and provides a callback function to handle the asynchronous result, displaying either the selected text or an error message in an HTML element with the ID 'message'. It depends on the Office JavaScript API and assumes the presence of the target HTML element.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/support-for-task-pane-and-content-add-ins.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.context.document.getSelectedDataAsync(\n    Office.CoercionType.Text, function (asyncResult) {\n        if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n            write('Action failed. Error: ' + asyncResult.error.message);\n        }\n        else {\n            write('Selected data: ' + asyncResult.value);\n        }\n    });\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message;\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Constant for HasPrivacyLink Registry Value Name (C#)\nDESCRIPTION: This C# code snippet declares a constant string `hasPrivacyLinkStr` with the value \"HasPrivacyLink\". This constant is intended to be added to the `WriteRegisterKeys` method (shown in a previous snippet) to represent the name of the registry value indicating privacy consent.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nconst string hasPrivacyLinkStr = \"HasPrivacyLink\"; // Indicates that your installer has a privacy link.\n```\n\n----------------------------------------\n\nTITLE: Accessing EntityCellValue Properties with Custom Function in JavaScript\nDESCRIPTION: This JavaScript custom function `getEntityAttribute` takes an `EntityCellValue` object and an attribute name string as input. It retrieves either the display text (`value.text`) or the basic value of a specified property (`value.properties[attribute].basicValue`) from the entity. If the input is not an entity, it returns the JSON string representation of the input. Requires the `allowCustomDataForDataTypeAny` property set to `true`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-data-types-concepts.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Accept an entity value data type as a function input.\n * @customfunction\n * @param {any} value\n * @param {string} attribute\n * @returns {any} The text value of the entity.\n */\nfunction getEntityAttribute(value, attribute) {\n    if (value.type == \"Entity\") {\n        if (attribute == \"text\") {\n            return value.text;\n        } else {\n            return value.properties[attribute].basicValue;\n        }\n    } else {\n        return JSON.stringify(value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Mobile Ribbon Group in Unified Manifest (JSON)\nDESCRIPTION: Demonstrates how to define a mobile-specific ribbon group and button within the 'TabDefault' tab using the 'customMobileRibbonGroups' array in the unified manifest (JSON). It specifies the button's ID, label (recommended max 16 chars), type ('mobileButton'), linked action ('actionId'), and includes definitions for all nine required icon sizes and scales.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-mobile-support.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"tabs\": [\n    {\n        \"builtInTabId\": \"TabDefault\",\n        \"groups\": [\n            <-- Non-mobile group objects omitted. -->\n        ],\n        \"customMobileRibbonGroups\": [\n            {\n                \"id\": \"mobileApptComposeGroup\",\n                \"label\": \"Contoso Meeting\",\n                \"controls\": [\n                    { \n                        \"id\": \"mobileInsertMeetingButton\",\n                        \"label\": \"Add meeting\",\n                        \"type\": \"mobileButton\",\n                        \"actionId\": \"insertContosoMeeting\",\n                        \"icons\": [\n                            {\n                                \"scale\": 1,\n                                \"size\": 25,\n                                \"url\": \"https://contoso.com/assets/icon-25.png\"\n                            },\n                            {\n                                \"scale\": 1,\n                                \"size\": 32,\n                                \"url\": \"https://contoso.com/assets/icon-32.png\"\n                            },\n                            {\n                                \"scale\": 1,\n                                \"size\": 48,\n                                \"url\": \"https://contoso.com/assets/icon-48.png\"\n                            },                                \n                            {\n                                \"scale\": 2,\n                                \"size\": 25,\n                                \"url\": \"https://contoso.com/assets/icon-25.png\"\n                            },\n                            {\n                                \"scale\": 2,\n                                \"size\": 32,\n                                \"url\": \"https://contoso.com/assets/icon-32.png\"\n                            },\n                            {\n                                \"scale\": 2,\n                                \"size\": 48,\n                                \"url\": \"https://contoso.com/assets/icon-48.png\"\n                            },                                \n                            {\n                                \"scale\": 3,\n                                \"size\": 25,\n                                \"url\": \"https://contoso.com/assets/icon-25.png\"\n                            },\n                            {\n                                \"scale\": 3,\n                                \"size\": 32,\n                                \"url\": \"https://contoso.com/assets/icon-32.png\"\n                            },\n                            {\n                                \"scale\": 3,\n                                \"size\": 48,\n                                \"url\": \"https://contoso.com/assets/icon-48.png\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]    \n```\n\n----------------------------------------\n\nTITLE: Initializing with Office.initialize (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates assigning an event handler function to `Office.initialize`. This function executes when the Office.js library is loaded and ready. The example checks if the host application supports the required 'ExcelApi 1.7' requirement set.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/initialize-add-in.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.initialize = function () {\n    if (!Office.context.requirements.isSetSupported('ExcelApi', '1.7')) {\n        console.log(\"Sorry, this add-in only works with newer versions of Excel.\");\n    }\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Office.js and Function Command Script in HTML\nDESCRIPTION: This HTML snippet sets up the Office Add-in page environment by loading the Office.js library and the custom JavaScript implementation for a function command. The <body> is intentionally empty as no visual UI is needed. Dependencies: Accessible sources for referenced scripts, including office.js and the function command script. Outputs: loads and registers scripts for add-in operation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\\\"UTF-8\\\" />\n        <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\" />\n\n        <!-- Office JavaScript Library -->\n        <script type=\\\"text/javascript\\\" src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"></script>\n        <!-- Function command file -->\n        <script src=\\\"commands.js\\\" type=\\\"text/javascript\\\"></script>\n    </head>\n    <body>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Clearing Excel Range Contents and Formatting using JavaScript API\nDESCRIPTION: This snippet demonstrates how to clear both the values and formatting from a specified range (\"E2:E5\") on the \"Sample\" worksheet using the `range.clear()` method without any arguments. It operates within the `Excel.run` batch processing context and requires the Excel JavaScript API library.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-clear-delete.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = sheet.getRange(\"E2:E5\");\n\n    range.clear();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Appointment Recurrence (Attendee) using Office JS\nDESCRIPTION: Demonstrates how an appointment attendee, in read mode, accesses the recurrence information directly via the `item.recurrence` property. A helper function `outputRecurrence` checks if the recurrence object is null (non-recurring) or logs the details. Requires API requirement set 1.7 or later.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-and-set-recurrence.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\noutputRecurrence(Office.context.mailbox.item);\n\nfunction outputRecurrence(item) {\n    const recurrence = item.recurrence;\n\n    if (recurrence == null) {\n        console.log(\"Non-recurring meeting.\");\n    } else {\n        console.log(JSON.stringify(recurrence));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Batch State for Custom Functions in JavaScript\nDESCRIPTION: Declares two global variables, _batch and _isBatchedRequestScheduled, to manage and schedule batched operations for custom function invocations. _batch holds pending operation entries, while _isBatchedRequestScheduled helps regulate the timing of remote calls. These are required for correct batching and remote request behavior and must be defined in the global scope of the functions.js or functions.ts file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-batching.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet _batch = [];\nlet _isBatchedRequestScheduled = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Pane Logic with Office JS API in JavaScript\nDESCRIPTION: Replaces the content of `Home.js`. It initializes the add-in logic when Office is ready using `Office.onReady`, then sets up jQuery click event handlers for the '#insert-image' and '#insert-text' buttons once the DOM is ready. The `insertImage` function inserts a hardcoded base64 image using `setSelectedDataAsync` with image coercion and positioning options. The `insertText` function inserts the string 'Hello World!' using `setSelectedDataAsync`. Both functions include basic error handling for the asynchronous operation via the callback.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/powerpoint-quickstart-vs.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n'use strict';\n\n(function () {\n\n    Office.onReady(function() {\n        // Office is ready\n        $(document).ready(function () {\n            // The document is ready\n            $('#insert-image').on(\"click\", insertImage);\n            $('#insert-text').on(\"click\", insertText);\n        });\n    });\n\n    function insertImage() {\n        Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {\n            coercionType: Office.CoercionType.Image,\n            imageLeft: 50,\n            imageTop: 50,\n            imageWidth: 400\n        },\n            function (asyncResult) {\n                if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                    console.log(asyncResult.error.message);\n                }\n            });\n    }  \n\n    function insertText() {\n        Office.context.document.setSelectedDataAsync(\"Hello World!\",\n            function (asyncResult) {\n                if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                    console.log(asyncResult.error.message);\n                }\n            });\n    }\n\n    function getImageAsBase64String() {\n        return 'iVBORw0KGgoAAAANSUhEUgAAAZAAAAEFCAIAAABCdiZrAAAACXBIWXMAAAsSAAALEgHS3X78AAAbX0lEQVR42u2da2xb53nH/xIpmpRMkZQs2mZkkb7UV3lifFnmNYnorO3SLYUVpFjQYoloYA3SoZjVZRi2AVtptF+GNTUzbGiwDQu9deg2pCg9FE3aYQ3lDssw2zGNKc5lUUr6ItuULZKiJUoyJe2DFFsXXs6VOpf/D/kS6/Ac6T2Hv/M8z3nf5zTMz8+DEEL0QCOHgBBCYRFCCIVFCKGwCCGEwiKEEAqLEEJhEUIIhUUIIRQWIYTCIoQQCosQQigsQgiFRQghFBYhhFBYhBAKixBC1hArh2CBwtlYaTRV6ac2f7Cx2Q3AsTfEsSKEwlprYQ3Gpt4bFLixfU+vpdltCwTte0JNHQFrR4ADSEgdaGCL5AVGvhkSLqyV1t/gd+wN2feGHHtClBchFJbq3Hq5b+LCGfn7sfl7nI+HWw710VyEUFhqkf1BJPuDkwrusOXgsfW94ZZDfRxb8oBCEpn4yn90BmF1ozUIq5sjVCOb4RCoxMSFMxMXzlg3+D1fjDgfD3NAzE4ph6EwMlWjeKsLziDaQvCE0BbimDHCquyX8/Fb33lapZ3b9/RueD5q8wc5zuYl2VfDVqvx9MLbB28fHCwvUFjLmUknr/3xw6oewvPMNzzPRDjUZmQsgfNHpX/cewzePvgYp1NYS/j4yw1qH8K+p3fTS/GFKV3ERLw/gCuvyN2Jww9fGP4BM5e6ONP9ATZ/j9qHmHpvcOSbobnJHEfbXBSSCuykmMbwSZwNYDiCkkkvIQpryQ1sT6guueclOotIp5Rf1NZIjMIyNfZ6LbuZSV8a/W6YA05kaWvoOM6FlIndKCxdRlh1XCc4ceFM/o0ox9wsqDRHITuItx9G2kQXEoW1ZCya3S0Hj9XtcNkfRJgYmgVfGFaXWjv/4Os4FzJJVYvCWkbz4fpNTJ+bzDPIMk30HsDuqIrOyg7i7aAZ0kNOa1ghkVzqdzx1jOlcgb9jkGUaiimkow+0UkiilFdy/1YXdkeNPV2LwlrJ6KvhwtnT5f1iQYsbdifWNcPmkH2k/SK3X5j37B/gOTIaYwlMpTCeRDaBwiW5e+t+zcDOorBWUnbKu9UGjw/OdkWPtF/SpzY9C18YG57kmTImpRwycWTiotfxmMNZFFYZlvbGarTA44PLq8Jh9sv4rMOPfTGujzW4ua7HcCWKYprOorCqlhouJ2586ygAWzO8ASWyP8WFtUDXCexm2d7w988YhiNStGVEZ1FYFYOsufSgbycaLeocwA58Son9eHrxcJx9lIzPcATpqOgi/ZGLcBqqRwiFVZ7ZD37ccOY31bIVgBZgm0K7cvbgSJKnzASRfwpDYWTFNPK2uvB4ykj3M87DKsd0znL2d1W0FQAF08zCJQyFedKMjyOAwwnsOiXiI6U8zoWMNAYUVjnifRhPq3uIJmUz2NNlGu8SQ+IfwJGLIuagFi5hOEJhGZcLUVwbVP0oihfyh8KmbTliOpxBHEnCKbgb0vBJjCUoLGMmg3i7LrejFqV3WMqbahEs00McTohw1rsGKRpQWKvCq+m86kdpUWe3FJapsLpFOKuYNkZiSGGtCK9O1uNArerstpRnJcuMzhJYz0pHUUxRWMYKr+qDDGEVpiwXPnZe+NhZ/scUFp1V5X6m/yCL87CW8FfueuSDMqaMJi67I68H7k5ZAGx2z7z83PDOzZPLtuCcLHMyEsPQcUFbPvYLXb80jBHWJ7wbq4etAMjoXnPfVgBu5Gwv/eP2VQHYJZ5JM+ILwyus96TOgywK6xM+qlcyJVVYH95ovm+r+87ieSOLdMcEJYYjp3U9/YWvqgcATOfw0Zl6HMgDSJ1AvzL7A9bbZ8ts9/OAkIWyh/7kYJWfbt68+eWXX965cycvDf18ld3YHRWUGKaj2K7XOIsRFgDgaqJOB5LXpuapA3eW/u+XP50ps5GwZf3lZXc/drtx44UXXvjwww95aegsMfT0CgiyYkwJmQ8KC6/k5XAvPXX1qQN3DmwtHNha+MYXUy/82ojkXa2O11Zw9+7db3/727w0dIaQ0KmY1u/TZKaEdYywZHcBdNpnI19MKfK7HNp2951fOKtv88477/DS0BltIXh6a3d0yMTh7dPj38cICxhPqb7UGcAGueGVshzcWuCZNyZCuv7rNsKisICM+hOXLAqEVwoLa1uhehmL6BVvHxz+GtuU8jp9JxiFVRdhdUp/OKiqs3jyjYmQzsj6DLIoLPULWK2qLR6UR2gv29GYWFj6bDhDYQHjKRV33gR0avTv/sKBO8wKjYkjUDsrZEqoW2GpVnG3AAEtJoP3KT+TixiAjloPAUt5PTZvML2wVC1gbQbsmv7rv/TpWwyyjImQd1bqMMgyvbCmVavjdMpa51wfnPZZBlnGRMjbvSgsRlgPYiuPPgaAQZYxEdJD5p7+nrqYfqa7GhFWp25stRBkJf6MLbSMSM0p74ywiL5sRQiFpSsUnIRlAfy0FdEMQuruTAlNih3YovVngoToPSWksJRgA+DV9HwrQspQyuvuV6aw5NEEbFHtPYOEEApLGda54MpjIweC6BbhL47WDHxKKIl9/fhKirYimqbmNCurmxGW0aOqAwM4OIB1bg4G0ToFA06vo7CEseMY9oWxo48jQQiFpUk6erAlhC0heorokpqd3XU4Ucv0wvIuWSNqd6MjiHVueIPYEuIFX7unEtEsQlrHsIalP45GeW1XxENr6ze8StTeRkhHB43Bp4SkMkI67RJtIqQDciuFRYwTXvUacjEaI6wH+b4OU0IKi1RAyDuEiTYpJFGs1fhbh/kghUUq0HWC4ZWOuR4TEEHr8vxSWGQVvn7s5rMIPTMq4J2DfFU9MYitumMcBh2TiQvIB3sE9VDWHpw4Sj7B4ceuqE5vvOQBaQHRsW4nrFBYpsfqQlsI3j5OYjACY4naE9wB+AcoLCKD/1ViJ/uBz81zLE3NcKT2NrrNB8EallZgb2Uin5GYscMrCksz2DgERB6lHN4XYCKrS9e5P4WlDdhkmchkKCyoR7uewysKSzOs5xAQeclg5oyg8IrCIgpgB5o4CkQShSSGjgva0j+gx/WDFJYmcXEIiHiKKZwLCdrS4TfA+lBOa9AMHuC27J38tIEDWSccftgDcAbhCMAZXJull6Uckn1CXy+4ywjLrSgsLWWFdmCKA6GX0CaNYnrZNALvMXhC8PbVaZZTKYdzIRQuCdrYe8wYaxga5uc51VAz4UwWuCbj4/t5SjQSLPfiobC6swcKSZwLCY2trC48ntJ79WoB1rA0lhWy9G4AsoMYOo6fuTEcQSmn/P4zcRG2AtAdM4atKCzt4eMQGIVSHsMncTagsLbeH0DyaRG26jphpAXtTAm1lBIu8DEwwZTQWCjSCWMsgQ8GhBatFnD24IihXqfKCEt7dAIWjoKxKKaRfBrJPomhVjGFoTDOHxVtq8MJgw0kIyztRVgAxoG0+E8xwtI+VheCcRFzIIopjMSQjorIAe8f6HBCp43bKSy9CQvALSBDYRmUXadqL5HJxJGJY+S0RC0a0VbgPCztshG4B2Q5EEbkg6+jkCzTirqUw1gCmTiyidptjs1nKwpL23QCduAGB8KIjJzG9E1s/SOUcigkUUyhkBRXojKfrZgSajglvM84cA2YZUpIarFQZTfKlKuy8Cmh5mkFdgEeDgSpiq/f8LaisGSH3/XBAnRSW6Qyu04ZaTo7haVSBF7fSoEN6AT2Ap1AK+dqkU/SwCMX9d6WT0SQwDOuMyyA55NQaxaYAmaBIsfFlAG+f8AALa4orDpGWEJeUqKqvBaawbfyZJgMXz+2R/T7ti4Kay1ocnMMSL3x9GJ7ZG36BVJYuo+wCGFURWHpA3NfOqRe98Ue+MJ4KGyGh4AUFiMsok/q3HCZwjLL3U/+cgpCltL+6zj4JoehLJyHxSCLaIw7P1GlsTKFRSgsogrXYxwDCovCIjrhSpRjQGGpgFmnwxB1KaZRSHIYKCwV8PRyDIjyZOIcAwpLBQz0DiVCYVFYzAoJEU/hEp8VUlgq4AzC4ecwEOUZZxmLwlIDD4MsogLZBMeAwlIBlrGIKlkhIywKSyVh1a1dMjEP91jDorBUwhfmGBClU8JBjgGFpQ4PUViEUFh6wRmEs4fDQAiFpRNM8+YSQigs/cPSOyEUlm6wull6J4TCYlZICKGwFMcRgK+fw0AIhaUTTPYmXkIoLAZZhBAKi0EWIRQWWRlkdZ3gMBBCYemEHRHOySJEcfgiVcFM5/BRHFcTyCQxKuDlqRuAzRw1QiisOnM1gXei+OiMuE/dBjyAncNHCIVVHzJJvDWAa1K7fIwA2ziIhFBYdeC/Inj7pKw9TAC3gQ0cSkIoLPWYzuFfQoIKVbVjNMAFNHFMCVEAPiUslwYqZSsAs0CKY0oIIyw1GE/hX0OYziu5zykgA3g5uIQwwlI2E4z3KWyrBW4BExxfQigsBXkzrFgmuJo0MMshJoTCUoQL4mdaiWIW+JijTAiFpUgy+HZE9aNMAdc41oRQWDJ5a0CV0tVqssBtDjchFJZkxlN493T9DncDyHLQCaGwpDEUq/cRr/GhISFS4Dws4N3YGhw0DWzj0mgVmZvBzBhmZzAzVuFebcO6NljXw7qeo0Vh6YVMEuPpNTjuwkNDOktRpm6ieBMzYyjexNyMiA86NsHWBvsmODah0caBpLA0y0fxNTs0naUQE1cweQUTV8RJainFmyjeRP7yoryau9DSxchLi5i+hnU1sZZHX3AW61nSaN6J7tfwRLbpsxfh65dsq9XyuvM/uPI6bv0ME1c4ytqiYX5+3tQD8LeBtUkJV9AJeHg1CsayHr/0fXQ8tfTf5iZz+Tei+Teic5NKzlCxrocnCOeONfpLPzfPs01hLeHlBq38JpvZOUsYzh4cTsDqLvtDo2mLwmJKKCMO6lVx5zeAIoe4Fr5+HElWshWAxma355lI11+mnI8r+XbI0l2M/ieu/RumbvIcMMLSS4T10jwAZJIYTSKTRCYpvXtymTQH2MsLsirdr8EXFr558XJi9NVw6bbCKb9rLzzBej1MZIRFYckV1gqU8pcH6OQFWQGHH8E4nEGxn5ubzGVfj+TffEXZX8e6Ht5HYd9EYVFYuhOWUv7yA628IMvhPYbuWJU0sCYT5+Ojr4aVrWoB8AThCar8t1NYFJa6wpLsr72AhRfkikjGhd1RUWlgJUqjqZvf6ZtJK9zvrKULHY+qmR5SWBRWXYUl0F+tgJ9X44oAphfdMTgCSu1vbjI3+t3wxAWFu57Z2rDpCdVmmVJYFNZaCquSvyb+GbZbvBwfBFbdMXj71Nj36KvhwlmFm3M02uB7ErY2Ckt1OK1hTfEGsS+Mo1E0T3EwFuk6gcdTKtkKQMeLMWVnPACYm8HIm4Czh2ePwjIBhSRKeQ4DPL147BfYHZVTX19DZ+Fwgs6isEzA9RhVhUNv4XBCwYpV/Z0Fq5vOorBMwGjcvH/7fVW1hep8ZBWd5eADFArLwPlgMW3GP9zXjyMX10RV92l/PmrzKx0QWd0IxmF18dKmsIzIWEKZ/ez8C30kIw4/dp3CE1l0xyTMXFf46m92+/400distFycQQTjvLQpLCMyElNgJ95jCPwBjiRx5CK6TmgxJbG64OvHobfwWAr+AbXL6mKdpciuZtLJB//TFsL2bygTgBMKSysUUygoMfe6a+DBvX13FI+ltGIuhx++fgR/iCdy6I6tYfZXBZs/2P7cKfn7mZ3ILfv/7RF4j8nd6b0cvyXLbnwcgrUkE1dGCqtFsGCu3VEUU8jEkU1gLFGnyRNWF9pC8ITQFlrzpE8grs8PTF1OKD4JHt0xnA1wzgqFRWEtv5NX01kA/gH4BxYDumwC40kUkgpP/vL0whlEaxDOoF4ktYKOr8aKvxdQeIH0QgH+/FFe6RSW/inlkJXdTsvqEjEp3BGAIwzfkl9gPIlSbrFQcr/8X8qVSVQdftgDD8K3JjccAdgDaA1qpyAlqzjS7O54MXbrO08rvN+2ELpO4MorvN4pLIZXkFXAtroXc8kF5W03+wlpOdTXcvCY5MSwdDtV/gc7IhiNS5y8MpXiF2XZfYVDoG9hKdF6hSxNDCXPciiNpireGHZFJf5CRQqLwtKKsGSXeH39dVvLYpbvQ7Pb80xEYWEtxLAeSS8EoLAoLIZXpAquzw9YN0iZDnJvtKpcumMUFoVlYmF5erU5rckIieGLUuSybOLoahwBdJ0QvVNOHF2RXnMIRCDhJYb7+rFveRzkDWKdWwFhPcTwSi0ce0P2Pb1T74l7hjs3mZ+bzDU2V34GsiOCkZi42SSlPIopJv6MsOp2sw5iS2jZfwu2kjkHyuFnPqgq0ipZxcuJquGBe3FCHIMsCksi61ReVe8tN4tS/oJn2qouQZbCWSEWpqGIvOSUWh5PYRmBr6Rw4ISK+y8rLJkNsKwuKTdqon6QVSPCkhZkZSksCutBhOXG0Sieu4gOFXqzdPRgnbtMhC+zAZa3zxiTy40XZE29Nzg3WWu5stggq3CJzwoprFVx0LMJ7FO6/+TBcvfS6zG5u90e4RmrD5u2lnw74fHB2Q5bs3JBltiMPsPuWhTW6lDryRhCpxTbYat/5fNBRSJ8Ty+fGdXv67HtM3YnPJvREUDnHgSC2LgdznZYK785dfK8ALmIzQoVaZpGYRmQgwN48jVldnW03GoM+Q2wGF7V+XpY+m2xoMWNjgC69qNzL1xeNK56WffE+XjtrNARENcqi1khhVWRfWEF4qx9/djRp3xsX7b1FVEz7p7f9aWyP7E50L5lMeZqWVJRnJvMTwgJssRmhQyyKKxq91U59ayOnvLhlfzLjuFV3Wn45T+svkGLGxu3o2s/nO2LAVdhUMBZ9vaJ6webjvJcUFhVEzppzw07evBsoszDQfn5oKjWV0QpvMF5187aJ8e2mCp6fJj5cLD2hCyxQVYpzyCLwqqWC+BJ8dfHgRN4PlneVpBdbtfSuxvMFWQ9/FWhXycLPJuxaTvybwgIiMRmhcOMrymsqrdWEXNKO3vxW29VzAQXkFnA4uz2taJb3MjbnShdPF2q3rwBgCMgrudMMc3EkMKqyq9Gaqzd6ezFgRN47iKeTWBLqGpIn5PVAIutr9Y03J7f8llRn2jfgsyrAjQndgX7cAQlU79Hh90aaiWGX1Po+mB4peuscN+XcfXfhW9vc6ApNVi8nHDsrXob8/YBx0X8HqU8Popgt3njLEZY9ULOEla2vlpzdoh+3NG+BXf+5vkac7KsbtHvLrzyipmXQ1NY9UJOhMXWVzrMChst8DivZl+P1NhOwpPfd8OmTQwprHrZSnIDLLa+0k5WKJIWN+bOvVJjdaFHfOxcTGPIpJcEhaX58Iq20m1WuJAYZv/6C9WeGDoCcIqf8Zc5Y85ZDhSWtoXF1ldaygrnOg6K/oJZsMl/93b0N6oVs6TNBx4+acKppBSW+sh5KTxbX2nq27Lvt6V8yoI2x3s3v/VYRWdJXsAwdNxszqKw1Oe6jEuKiwc1RfWpdpWxObCheejOqc+Ud5YzKLpvslmdRWGpj+SGyGx9pTW8wXmLXbKz2psuZP/84fLOkjNtZei4eWrwFJb6+aDkhsgMr7TH/MZfkf5ls8A+lypfgJfwrHApI'\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Parameter in a TypeScript Custom Function\nDESCRIPTION: This TypeScript code defines an Excel custom function `add` with two required number parameters and one optional number parameter (`third?`). It checks if `third` is `null` (which Excel passes for omitted optional arguments) and assigns 0 if it is. The function then returns the sum. The `?` after the parameter name and type (`third?: number`) denotes it as optional.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Calculates the sum of the specified numbers\n * @customfunction\n * @param first First number.\n * @param second Second number.\n * @param [third] Third number to add. If omitted, third = 0.\n * @returns The sum of the numbers.\n */\nfunction add(first: number, second: number, third?: number): number {\n  if (third === null) {\n    third = 0;\n  }\n  return first + second + third;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Document Property in Excel using Office JavaScript API\nDESCRIPTION: Shows how to add a user-defined custom property (key-value pair, e.g., 'Introduction': 'Hello') to the Excel workbook's document properties using `context.workbook.properties.custom.add()`. This data persists with the document. Dependencies: Excel JavaScript API (`Excel.run`, `context.workbook.properties.custom`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    const customDocProperties = context.workbook.properties.custom;\n    customDocProperties.add(\"Introduction\", \"Hello\");\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Checking API Availability at Runtime in Outlook Add-in - JavaScript\nDESCRIPTION: Demonstrates how to check at runtime if an Outlook API property or function is available as part of a newer requirement set than specified in the manifest. This leverages JavaScript's feature detection to conditionally use APIs only when they exist, ensuring compatibility across different Outlook client versions. No external dependencies beyond Office.js; 'item' is assumed to be a relevant Office/Outlook API object. Input is an object (e.g., 'item'), and the code checks for the existence of a property or method before using it. Output is conditional execution of feature-specific logic. Must be used when supporting backward compatibility.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/apis.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (item.somePropertyOrFunction) {\\n   item.somePropertyOrFunction...  \\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Server REST API with Bearer Authorization (AJAX, JavaScript)\nDESCRIPTION: Replaces logic in the callRESTApi function to execute an authenticated AJAX GET request with a bearer token, requesting JSON and handling server-side errors. Requires jQuery for AJAX and a valid access token. Parameters include the relativeUrl for the REST API and accessToken for authentication; the function returns a deserialized result or processes errors using handleServerSideErrors. Limitations include reliance on correct endpoint URLs and proper error reporting to the user.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\\n    let result = await $.ajax({\\n        url: relativeUrl,\\n        headers: { \"Authorization\": \"Bearer \" + accessToken },\\n        type: \"GET\",\\n        dataType: \"json\",\\n        contentType: \"application/json; charset=utf-8\"\\n    });\\n    return result;\\n} catch (error) {\\n    handleServerSideErrors(error);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Star Count using XHR in TypeScript Custom Functions\nDESCRIPTION: This TypeScript asynchronous custom function `getStarCount` uses `XMLHttpRequest` (XHR) to fetch the star count for a specified GitHub repository. It takes `userName` and `repoName` as parameters, constructs the API URL, and returns a `Promise`. The promise resolves with the `watchers_count` from the parsed JSON response on success (HTTP status 200) or rejects with status information on failure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-web-reqs.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * Gets the star count for a given Github organization or user and repository.\n * @customfunction\n * @param userName string name of organization or user.\n * @param repoName string name of the repository.\n * @return number of stars.\n */\nasync function getStarCount(userName: string, repoName: string) {\n\n  const url = \"https://api.github.com/repos/\" + userName + \"/\" + repoName;\n\n  let xhttp = new XMLHttpRequest();\n\n  return new Promise(function(resolve, reject) {\n    xhttp.onreadystatechange = function() {\n      if (xhttp.readyState !== 4) return;\n\n      if (xhttp.status == 200) {\n        resolve(JSON.parse(xhttp.responseText).watchers_count);\n      } else {\n        reject({\n          status: xhttp.status,\n\n          statusText: xhttp.statusText\n        });\n      }\n    };\n\n    xhttp.open(\"GET\", url, true);\n\n    xhttp.send();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Number Format for Excel Range in JavaScript\nDESCRIPTION: This snippet shows how to apply specific number formats to cells within the range 'D3:E5' on a worksheet named 'Sample'. It defines a 2D array `formats` where each element corresponds to a cell in the target range and specifies the desired number format string (e.g., '0.00'). The `numberFormat` property of the range object is assigned this array. The changes are applied asynchronously using `Excel.run` and `context.sync`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-format.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let formats = [\n        [\"0.00\", \"0.00\"],\n        [\"0.00\", \"0.00\"],\n        [\"0.00\", \"0.00\"]\n    ];\n\n    let range = sheet.getRange(\"D3:E5\");\n    range.numberFormat = formats;\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Expired SSO Token in callWebServerAPI using JavaScript\nDESCRIPTION: This snippet, within the `callWebServerAPI` function, handles the scenario where the web server indicates the SSO access token has expired (identified by `jsonBody.type === 'TokenExpiredError'`). If SSO was used (`authSSO === true`) and it's the first attempt (`!retryRequest`), it recursively calls `callWebServerAPI` again with `retryRequest` set to true, triggering `Office.auth.getAccessToken` to refresh the token. If the retry also fails, it sets `authSSO` to false and retries the call using MSAL fallback authentication.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n // Check for fail condition: Is SSO token expired? If so, retry the call which will get a refreshed token.\nconst jsonBody = await response.json();\nif (\n    authSSO === true &&\n    jsonBody != null &&\n    jsonBody.type === 'TokenExpiredError'\n) {\n    if (!retryRequest) {\n        return callWebServerAPI(method, path, true); // Try the call again. The underlying call to Office JS getAccessToken will refresh the token.\n    } else {\n        // Indicates a second call to retry and refresh the token failed.\n        authSSO = false;\n        return callWebServerAPI(method, path, true); // Try the call again, but now using MSAL fallback auth.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching External Data using Fetch in JavaScript Custom Functions\nDESCRIPTION: This JavaScript custom function `webRequest` demonstrates fetching data asynchronously from an external URL using the `fetch` API. It returns a `Promise` that resolves with the JSON data retrieved from the API, specifically extracting and stringifying the 'names' property. This pattern allows Excel custom functions to display data fetched from web services.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-web-reqs.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Requests the names of the people currently on the International Space Station.\n * Note: This function requests data from a hypothetical URL. In practice, replace the URL with a data source for your scenario.\n * @customfunction\n */\nfunction webRequest() {\n  let url = \"https://www.contoso.com/NumberOfPeopleInSpace\"; // This is a hypothetical URL.\n  return new Promise(function (resolve, reject) {\n    fetch(url)\n      .then(function (response){\n        return response.json();\n        }\n      )\n      .then(function (json) {\n        resolve(JSON.stringify(json.names));\n      })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Custom Function Metadata in JSON (English)\nDESCRIPTION: This JSON snippet shows the corresponding English metadata definition for the 'MULTIPLY' custom function. It serves as the default language definition, typically stored in 'functions.json'. It includes the function's `id`, English `name`, `description`, and parameter details ('one', 'two').\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-naming.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"MULTIPLY\",\n    \"name\": \"Multiply\",\n    \"description\": \"Multiplies two numbers\",\n    \"helpUrl\": \"http://www.contoso.com\",\n    \"result\": {\n        \"type\": \"number\",\n        \"dimensionality\": \"scalar\"\n    },\n    \"parameters\": [\n        {\n            \"name\": \"one\",\n            \"description\": \"first number\",\n            \"dimensionality\": \"scalar\"\n        },\n        {\n            \"name\": \"two\",\n            \"description\": \"second number\",\n            \"dimensionality\": \"scalar\"\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Cell Value Conditional Formatting - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet applies a cell value conditional format to a specified Excel range using the Excel JavaScript API. Cells with values less than zero are formatted with red font color, using the 'LessThan' operator in the rule. Dependencies include the Office JavaScript runtime and Excel add-in context; the key parameters are the target worksheet, range address, and the format properties. The function is asynchronous and must be run within Excel context using Excel.run.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats.add(\n        Excel.ConditionalFormatType.cellValue\n    );\n    \n    // Set the font of negative numbers to red.\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Paragraph Change Event Handlers in Office.js (JavaScript)\nDESCRIPTION: Registers an event handler for the onParagraphChanged event in a Word document. Uses the Office.js Word API with JavaScript to bind the handleChange function, enabling the detection of paragraph content changes by any user. The code requires Office.js, and expects Word.run, context.sync, the onParagraphChanged event, and a defined errorHandlerFunction. Inputs include the event context and handler; output logs confirmation of handler registration. A limitation is that it assumes errorHandlerFunction and any necessary permissions are present.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/word-add-ins-events.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Word.run(async (context) => {\n    eventContext = context.document.onParagraphChanged.add(handleChange);\n\n    await context.sync();\n    console.log(\"Event handler successfully registered for onParagraphChanged event in the document.\");\n}).catch(errorHandlerFunction);\n```\n\n----------------------------------------\n\nTITLE: Inserting Slides with Formatting and Target Options in PowerPoint using Office JS\nDESCRIPTION: This asynchronous JavaScript function `insertSlidesDestinationFormatting` demonstrates inserting slides with specific options using the `InsertSlideOptions` parameter. It sets the `formatting` option to 'UseDestinationTheme' to apply the target presentation's theme and specifies a `targetSlideId` ('267#') to insert the slides immediately after the slide with that ID. The function operates within a `PowerPoint.run` context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/insert-slides-into-presentation.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertSlidesDestinationFormatting() {\n  await PowerPoint.run(async function(context) {\n    context.presentation\n    .insertSlidesFromBase64(chosenFileBase64,\n                            {\n                                formatting: \"UseDestinationTheme\",\n                                targetSlideId: \"267#\"\n                            }\n                          );\n    await context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Events with Custom Properties via Microsoft Graph (HTTP)\nDESCRIPTION: Demonstrates an HTTP GET request to the Microsoft Graph API to retrieve events that have specific custom properties set by an Outlook add-in. The request filters events based on the presence of a `singleValueExtendedProperties` matching the add-in's custom property identifier (`cecp-<app-guid>`) and expands the results to include the property's value. This method is suitable for Exchange Online environments and requires a valid Microsoft Graph access token and the add-in's ID (`<app-guid>`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/metadata-for-an-outlook-add-in.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/me/events?$filter=singleValueExtendedProperties/Any\n  (ep: ep/id eq 'String {00020329-0000-0000-C000-000000000046}\n  Name cecp-<app-guid>' and ep/value ne null)\n  &$expand=singleValueExtendedProperties($filter=id eq 'String\n  {00020329-0000-0000-C000-000000000046} Name cecp-<app-guid>')\n```\n\n----------------------------------------\n\nTITLE: Inserting Table with Sample Data in Word using JavaScript API - Markdown\nDESCRIPTION: A Copilot prompt for inserting a table named 'Sample table' with placeholder data into a Word document via the Word JavaScript API. Aimed at automating document data presentation. Copilot should generate table creation code, data population, and proper naming.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nInsert a table named \\\"Sample table\\\" with sample data in the \ndocument using the Word JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Finding Formula Cells and Coloring Them using Excel JavaScript API (JavaScript)\nDESCRIPTION: This JavaScript snippet uses the Excel JavaScript API to find all formula cells in a worksheet's used range and highlights them in pink. It demonstrates acquisition of the active worksheet, limits search scope via getUsedRange, and applies formatting using the getSpecialCells method. Requires Office JS library context and async execution via Excel.run; throws ItemNotFound if no formula cells are present.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-special-cells.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let usedRange = sheet.getUsedRange();\n    let formulaRanges = usedRange.getSpecialCells(Excel.SpecialCellType.formulas);\n    formulaRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Formula for a Single Cell - Excel JavaScript API - JavaScript\nDESCRIPTION: Inserts the formula '=C3 * D3' into cell E3 of worksheet 'Sample' and auto-fits its column. Requires Office/Excel JavaScript API. Demonstrates the use of the formulas property with single-cell assignment. Inputs: worksheet, cell, formula string. Output: calculated value appears in E3.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let range = sheet.getRange(\"E3\");\n    range.formulas = [[ \"=C3 * D3\" ]];\n    range.format.autofitColumns();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating PowerPoint Add-in to Insert Graphics - Markdown\nDESCRIPTION: This snippet is a prompt for Copilot to generate code and steps for developing an Office JavaScript Add-in targeting PowerPoint, capable of inserting graphics into presentation slides. Instructions are tailored for Visual Studio Code and expect code placement guidance. Uses Office.js APIs relevant to PowerPoint slide manipulation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nCreate an Office JavaScript Add-in for *PowerPoint* to *insert \ngraphics into a presentation slide*. List the steps to follow in \n*Visual Studio Code* to create the add-in and insert code snippets \nin the correct files.\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Primitive Value using ClientResult in Excel JavaScript API\nDESCRIPTION: Demonstrates how to retrieve a primitive value (the count of tables) using a method that returns a ClientResult object. The actual value is accessed via the '.value' property only after calling context.sync().\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n```js\nconst tableCount = context.workbook.tables.getCount();\n\n// This sync call implicitly loads tableCount.value.\n// Any other ClientResult values are loaded too.\nawait context.sync();\n\n// Trying to log the value before calling sync would throw an error.\nconsole.log (tableCount.value);\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Property Update into Logging Logic (Task Pane, JavaScript)\nDESCRIPTION: Modified `getEventData` function for a task pane. After successfully retrieving the appointment body and logging success, it calls `updateCustomProperties` to set the 'EventLogged' flag. Depends on the previously defined `updateCustomProperties` function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nfunction getEventData() {\n  console.log(`Subject: ${Office.context.mailbox.item.subject}`);\n  Office.context.mailbox.item.body.getAsync(\"html\", (result) =>  {\n    if (result.status === Office.AsyncResultStatus.Succeeded) {\n      console.log(\"Event logged successfully.\");\n      updateCustomProperties();\n    } else {\n      console.error(\"Failed to get body.\");\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Data Change Event Handler to a Binding using Office.select in JavaScript\nDESCRIPTION: Demonstrates using the `Office.select` method with the promises pattern to retrieve a specific binding ('cities') and then chain the `addHandlerAsync` method to attach an event handler for the `BindingDataChanged` event. It requires a pre-existing binding with the ID 'cities', an `onError` function for error handling (placeholder shown), and a `doSomethingWithBinding` function to process the event.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfunction addBindingDataChangedEventHandler() {\n    Office.select(\"bindings#cities\", function onError(){/* error handling code */}).addHandlerAsync(Office.EventType.BindingDataChanged,\n    function (eventArgs) {\n        doSomethingWithBinding(eventArgs.binding);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling New Message Compose Event in Outlook Mobile Add-ins using Office.js (JavaScript)\nDESCRIPTION: Identifies the `OnNewMessageCompose` event within the Office.js API. This event allows event-based Outlook add-ins to activate on mobile platforms specifically when a user initiates the composition of a new message. This represents an exception to the general limitation where add-ins typically don't activate in compose mode on mobile.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-mobile-support.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nOnNewMessageCompose\n```\n\n----------------------------------------\n\nTITLE: Defining Async createChart Function - Office.js JavaScript\nDESCRIPTION: Defines the main async function createChart, using Office.js context to orchestrate multiple Excel operations to generate and format a chart. The function specifies placeholders for data extraction, chart creation, and formatting, all synchronized at the end. This method is wired to UI interactions and is dependent on an existing table and valid Excel context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createChart() {\\n    await Excel.run(async (context) => {\\n\\n        // TODO1: Queue commands to get the range of data to be charted.\\n\\n        // TODO2: Queue command to create the chart and define its type.\\n\\n        // TODO3: Queue commands to position and format the chart.\\n\\n        await context.sync();\\n    });\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Custom Document Property in Excel using Office JavaScript API\nDESCRIPTION: Demonstrates how to retrieve a previously added custom document property using `context.workbook.properties.custom.getItem(\"Introduction\")`. It loads the key and value of the property and logs them to the console. Dependencies: Excel JavaScript API (`Excel.run`, `context.workbook.properties.custom`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n```js\n// ...\n\nawait Excel.run(async (context) => {\n    const customDocProperties = context.workbook.properties.custom;\n    const customProperty = customDocProperties.getItem(\"Introduction\");\n    customProperty.load([\"key\", \"value\"]);\n    await context.sync();\n\n    console.log(\"Custom key  : \" + customProperty.key); // \"Introduction\"\n    console.log(\"Custom value : \" + customProperty.value); // \"Hello\"\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Ribbon Context to Mail Compose in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet sets the context for the add-in's ribbon extensions to `mailCompose` within the `extensions.ribbons.contexts` array in `manifest.json`. This ensures that the defined ribbon tabs, groups, and controls only appear when the user is composing a new email or replying to one.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"contexts\": [\n    \"mailCompose\"\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Async Function Stub for Replacing Text in JavaScript\nDESCRIPTION: Defines an asynchronous function `replaceText` that uses `Word.run` to create a Word-specific execution context for batching API calls. It includes a placeholder comment (TODO1) for the text replacement logic and ends with `await context.sync()` to execute the queued commands. This function should be added to the `taskpane.js` file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nasync function replaceText() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to replace the text.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Office Add-in Requirements in Manifest (XML)\nDESCRIPTION: Specifies minimum API requirement sets (TableBindings 1.1, OOXML 1.1) and a specific method (Document.getSelectedDataAsync) using the <Requirements> element in an Office Add-in XML manifest. This ensures the add-in only installs on compatible Office versions and platforms. It utilizes <Sets> with DefaultMinVersion and <Methods> elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-office-hosts-and-api-requirements.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp ... >\n  ...\n  <Requirements>\n     <Sets DefaultMinVersion=\"1.1\">\n        <Set Name=\"TableBindings\" MinVersion=\"1.1\"/>\n        <Set Name=\"OOXML\" MinVersion=\"1.1\"/>\n     </Sets>\n     <Methods>\n        <Method Name=\"Document.getSelectedDataAsync\"/>\n     </Methods>\n  </Requirements>\n    ...\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Function Description using JSDoc - JavaScript\nDESCRIPTION: This snippet demonstrates how to add a description to an Excel custom function using JSDoc comments. The untagged text within the JSDoc block, \"Calculates the volume of a sphere.\", serves as the function's description, which is displayed as help text in Excel. The `@customfunction` tag is also present.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n/* Calculates the volume of a sphere.\n/* @customfunction VOLUME\n...\n */\n```\n\n----------------------------------------\n\nTITLE: Attaching Change Event Listener to File Input using jQuery\nDESCRIPTION: This JavaScript snippet uses jQuery to select the HTML file input element with the ID 'file'. It attaches an event listener that triggers the `storeFileAsBase64` function whenever the user selects a file (i.e., when the input's 'change' event fires).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/insert-slides-into-presentation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"#file\").on(\"change\", storeFileAsBase64);\n```\n\n----------------------------------------\n\nTITLE: Sending User Profile as JSON from Dialog to Host - JavaScript\nDESCRIPTION: Sends a user profile object as a stringified JSON message from the dialog to the host using messageParent, assuming Office.js has already been initialized. The function takes a profile object with name and email properties, stringifies it, and sends it to the host. Dependencies include the Office JS runtime and the expected presence of UI messaging context. The input is the profile object and the output is a JSON payload delivered to the host event handler.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction userProfileSignedIn(profile) {\n    const profileMessage = {\n        \"name\": profile.name,\n        \"email\": profile.email,\n    };\n    Office.context.ui.messageParent(JSON.stringify(profileMessage));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Pane Logic for Attachment Handling (JavaScript)\nDESCRIPTION: This JavaScript code provides the client-side logic for the Outlook add-in task pane defined in `taskpane.html`. It initializes event listeners on `Office.onReady`, binding button clicks (`add-attachment`, `add-inline-image`) to corresponding functions. The `addAttachment` function adds a file attachment to the current mail item using a URL from an input field. The `addInlineImage` function inserts a Base64-encoded image inline into the email body by first getting the existing body, adding the image attachment, and then updating the body HTML to include an `<img>` tag referencing the attached image's content ID (CID). It relies on the Office JavaScript API for interacting with the mailbox item.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Outlook) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    document.getElementById(\"add-attachment\").onclick = addAttachment;\n    document.getElementById(\"add-inline-image\").onclick = addInlineImage;\n  }\n});\n\n// Adds the specified URL as an attachment to the message.\nexport async function addAttachment() {\n  const attachmentUrl = document.querySelector(\"#attachment-url\").value;\n  Office.context.mailbox.item.addFileAttachmentAsync(attachmentUrl, getFileName(attachmentUrl), (asyncResult) => {\n    console.log(\"Added attachment.\");\n  });\n}\n\n// Gets the file name from a URL.\nfunction getFileName(url) {\n  const lastIndex = url.lastIndexOf(\"/\");\n  if (lastIndex >= 0) {\n    return url.substring(lastIndex + 1);\n  }\n\n  return url;\n}\n\n// Adds an inline image to the body of the message.\nexport async function addInlineImage() {\n  const mailItem = Office.context.mailbox.item;\n  const base64String =\n    \"iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAnUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN0S+bUAAAAMdFJOUwAQIDBAUI+fr7/P7yEupu8AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF8SURBVGhD7dfLdoMwDEVR6Cspzf9/b20QYOthS5Zn0Z2kVdY6O2WULrFYLBaLxd5ur4mDZD14b8ogWS/dtxV+dmx9ysA2QUj9TQRWv5D7HyKwuIW9n0vc8tkpHP0W4BOg3wQ8wtlvA+PC1e8Ao8Ld7wFjQtHvAiNC2e8DdqHqKwCrUPc1gE1AfRVgEXBfB+gF0lcCWoH2tYBOYPpqQCNwfT3QF9i+AegJfN8CtAWhbwJagtS3AbIg9o2AJMh9M5C+SVGBvx6zAfmT0r+Bv8JMwP4kyFPir+cswF5KL3WLv14zAFBCLf56Tw9cparFX4upgaJUtPhrOS1QlY5W+vWTXrGgBFB/b72ev3/0igUdQPppP/nfowfKUUEFcP207y/yxKmgAYQ+PywoAFOfCH3A2MdCFzD3kdADBvq10AGG+pXQBgb7pdAEhvuF0AIc/VtoAK7+JciAs38KIuDugyAC/v4hiMCE/i7IwLRBsh68N2WQjMVisVgs9i5bln8LGScNcCrONQAAAABJRU5ErkJggg==\";\n\n  // Get the current body of the message.\n  mailItem.body.getAsync(Office.CoercionType.Html, (bodyResult) => {\n    if (bodyResult.status === Office.AsyncResultStatus.Failed) {\n      console.log(bodyResult.error.message);\n      return;\n    }\n\n    // Insert the Base64-encoded image to the beginning of the body.\n    const options = { isInline: true, asyncContext: bodyResult.value };\n    mailItem.addFileAttachmentFromBase64Async(base64String, \"sample.png\", options, (attachResult) => {\n      if (attachResult.status === Office.AsyncResultStatus.Failed) {\n        console.log(attachResult.error.message);\n        return;\n      }\n\n      let body = attachResult.asyncContext;\n      body += '<img src=\"cid:sample.png\" />';\n      mailItem.body.setAsync(body, { coercionType: Office.CoercionType.Html }, (setResult) => {\n        if (setResult.status === Office.AsyncResultStatus.Failed) {\n          console.log(setResult.error.message);\n          return;\n        }\n\n        console.log(\"Inline image added to the body.\");\n      });\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Wiring 'Rename Service' Button to JavaScript Handler in Office.js Task Pane\nDESCRIPTION: Binds the 'replace-content-in-control' button to the replaceContentInControl JavaScript function via an onclick handler, wrapped by the tryCatch function for error handling. This line ensures that, upon clicking the button, the content of the targeted content control is replaced. Must be executed within Office.onReady to ensure DOM and Office.js are available.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\\\"replace-content-in-control\\\").onclick = () => tryCatch(replaceContentInControl);\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Dialog via Query Parameter (Office.context.ui.displayDialogAsync, JavaScript)\nDESCRIPTION: This example shows how to pass data to a dialog by embedding query parameters in the URL sent to displayDialogAsync. The URL includes a clientID attribute, which becomes available to the dialog through URL parsing. Prerequisite: Office.js runtime, proper dialog URL structure. Inputs: dialog URL with appended query string. Output: dialog receives parameter in its URL, which can be parsed in dialog-side JavaScript.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/parent-to-dialog.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.ui.displayDialogAsync('https://myAddinDomain/myDialog.html?clientID=15963ac5-314f-4d9b-b5a1-ccb2f1aea248');\n```\n\n----------------------------------------\n\nTITLE: Starting Server for Sideloading Office Add-in in Excel on the Web\nDESCRIPTION: This command-line instruction, represented by an include directive, is used to start the local development server for testing the add-in in Excel on the web. It typically involves running an npm script (like 'start:web') and passing the URL of a target Excel document hosted on OneDrive or SharePoint as an argument.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_8\n\nLANGUAGE: commandline\nCODE:\n```\n[!INCLUDE [npm start on web command syntax](../includes/start-web-sideload-instructions.md)]\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling Comment Deletion Events in Excel using JavaScript\nDESCRIPTION: This snippet shows how to register an event handler (`commentDeleted`) for the `onDeleted` event for comments in the active worksheet using the Excel JavaScript API. The handler function accesses the `event.commentDetails` array to retrieve the ID of the deleted comment and logs it to the console. Note: This example is designed for scenarios where only a single comment is deleted at once.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let comments = context.workbook.worksheets.getActiveWorksheet().comments;\n\n    // Register the onDeleted comment event handler.\n    comments.onDeleted.add(commentDeleted);\n\n    await context.sync();\n});\n\nasync function commentDeleted() {\n    await Excel.run(async (context) => {\n        // Print out the deleted comment's ID.\n        // Note: This method assumes only a single comment is deleted at a time. \n        console.log(`A comment was deleted. ID: ${event.commentDetails[0].commentId}`);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Active View and Handling ActiveViewChanged Event in PowerPoint Add-ins (JavaScript)\nDESCRIPTION: This snippet demonstrates how to detect the current view (edit or read) of the PowerPoint presentation and register an event handler for when the view changes. It uses `Office.context.document.getActiveViewAsync` to get the initial view and `Office.context.document.addHandlerAsync` with `Office.EventType.ActiveViewChanged` to listen for changes. The example assumes the presence of an `app.showNotification` function for displaying results and a `Globals` object for storing the event handler.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/powerpoint-add-ins.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// General Office.onReady function. Called after the add-in loads and Office JS is initialized.\nOffice.onReady(function() {\n    // Get whether the current view is edit or read.\n    const currentView = getActiveFileView();\n\n    // Register for the active view changed handler.\n    registerActiveViewChanged();\n\n    // Render the content based off of the currentView.\n    //....\n});\n\nfunction getActiveFileView()\n{\n    Office.context.document.getActiveViewAsync(function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            app.showNotification(\"Action failed with error: \" + asyncResult.error.message);\n        } else {\n            app.showNotification(asyncResult.value);\n        }\n    });\n\n}\n\nfunction registerActiveViewChanged() {\n    Globals.activeViewHandler = function (args) {\n        app.showNotification(JSON.stringify(args));\n    }\n\n    Office.context.document.addHandlerAsync(Office.EventType.ActiveViewChanged, Globals.activeViewHandler,\n        function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                app.showNotification(\"Action failed with error: \" + asyncResult.error.message);\n            } else {\n                app.showNotification(asyncResult.status);\n            }\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Bound Shape Image - PowerPoint Office JS - JavaScript\nDESCRIPTION: Provides a function to update a shape's fill image based on its binding ID using the Office JavaScript API within an add-in. This approach enables automated image refreshes for bound shapes, accepting 'bindingId' and 'image' (Base64) as parameters. Includes in-function error handling to manage API exceptions, with asynchronous execution and context synchronization for update reliability.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/bind-shapes-in-presentation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function updateBinding(bindingId, image) {\\n    await PowerPoint.run(async (context) => {\\n        try {\\n            // Get the shape based on binding ID. \\n            const myShape = context.presentation.bindings\\n                .getItem(bindingId)\\n                .getShape();\\n\\n            // Update the shape to latest image. \\n            myShape.fill.setImage(image);\\n            await context.sync();\\n\\n        } catch (err) {\\n            console.error(err);\\n        }\\n    });\\n} \n```\n\n----------------------------------------\n\nTITLE: Inserting WebApplicationInfo to Office Add-in Manifest for SSO (XML)\nDESCRIPTION: This XML snippet adds the <WebApplicationInfo> element to the Office Add-in manifest to enable SSO. It requires replacing [application-id] and [port] placeholders with actual values from your Azure AD app registration and development environment. The element outlines required OAuth scopes and links the add-in to the corresponding Azure AD application, which is necessary for token acquisition and SSO flows in Office Add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/use-sso-to-get-office-signed-in-user-token.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<WebApplicationInfo>\\n    <Id>[application-id]</Id>\\n    <Resource>api://localhost:[port]/[application-id]</Resource>\\n    <Scopes>\\n        <Scope>openid</Scope>\\n        <Scope>user.read</Scope>\\n        <Scope>profile</Scope>\\n    </Scopes>\\n</WebApplicationInfo>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Tabs and Groups for Office Add-in Ribbon (JSON)\nDESCRIPTION: This snippet shows how to specify a tab and its contained groups for a custom ribbon command in the manifest JSON. The \\\"builtInTabID\\\" property selects the target ribbon tab by ID, while the \\\"groups\\\" array holds UI definitions. Requirements: at least one group object must exist. Dependencies: valid tab and group IDs as per Office documentation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"tabs\": [\n    {\n        \"builtInTabID\": \"TabDefault\",\n        \"groups\": [\n            {\n                // properties omitted\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Waiting for Multiple Promises with Promise.all\nDESCRIPTION: Shows the standard JavaScript method `Promise.all()` to execute a callback function only after an array of Promises (`x`, `y`, `z`) have all resolved. This pattern is used for coordinating multiple asynchronous operations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/add-ins-with-angular2.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyPromise.all([x, y, z]).then(\n  // TODO: Callback logic goes here.\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Table by Category - Office.js JavaScript\nDESCRIPTION: Implements filtering of the 'ExpensesTable' in Excel to show only rows with Category 'Education' or 'Groceries'. Uses context.workbook.worksheets.getActiveWorksheet to get the current worksheet and retrieves the table and column by name, which is safer than using indices. The filter object's applyValuesFilter method is used to filter values. Requires Office.js context and assumes the table and column exist. The function ignores other categories, showing only specified ones in the UI after the filter is applied.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\\nconst expensesTable = currentWorksheet.tables.getItem('ExpensesTable');\\nconst categoryFilter = expensesTable.columns.getItem('Category').filter;\\ncategoryFilter.applyValuesFilter(['Education', 'Groceries']);\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Exchange Online Tokens using PowerShell\nDESCRIPTION: Uses the Set-AuthenticationPolicy cmdlet with the -AllowLegacyExchangeTokens switch to re-enable the issuance of legacy Exchange Online tokens for the entire tenant. This takes precedence over the planned Microsoft-driven disablement in Feb 2025 but will be overridden in June 2025. The change can take up to 24 hours, and the -Identity parameter applies tenant-wide.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/turn-exchange-tokens-on-off.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-AuthenticationPolicy –AllowLegacyExchangeTokens -Identity \"LegacyExchangeTokens\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Unicode Conversion Logic from VSTO Add-in - C#\nDESCRIPTION: This snippet demonstrates how to isolate the pure algorithm code responsible for converting characters in a string to their corresponding Unicode values within a VSTO Add-in. The logic iterates over each character in a provided string, computes its Unicode value, and formats the result as a displayable string. The algorithm should be moved to a shared class library for reuse; dependencies are limited to core .NET, with inputs as a text string and output as a formatted result. The code is free from UI and document-specific dependencies.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// *** ALGORITHM CODE ***\\n//convert string to Unicode listing\\nstring result = \"\";\\nforeach (char c in cellValue)\\n{\\n    int unicode = c;\\n\\n    result += $\"{c}: {unicode}\\r\\n\";\\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Appointment Recurrence Duration (Organizer) using Office JS\nDESCRIPTION: Illustrates how an appointment organizer, in compose mode, retrieves the existing recurrence pattern using `getAsync`, modifies the duration of the series using `seriesTime.setDuration()`, and then applies the updated pattern using `setAsync`. Includes basic error handling for the `setAsync` call. Requires API requirement set 1.7 or later.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-and-set-recurrence.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.mailbox.item.recurrence.getAsync((asyncResult) => {\n  const recurrencePattern = asyncResult.value;\n  recurrencePattern.seriesTime.setDuration(60);\n  Office.context.mailbox.item.recurrence.setAsync(recurrencePattern, (asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      console.log(\"Failed to set recurrence.\");\n      return;\n    }\n\n    console.log(\"Successfully set recurrence.\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Consolidating Chunks in Webpack for Shared Runtime Taskpane\nDESCRIPTION: This JavaScript snippet updates the `HtmlWebpackPlugin` configuration for 'taskpane.html' in `webpack.config.js`. It modifies the `chunks` array to include 'commands' and 'functions' (if they existed previously as separate chunks). This ensures that the JavaScript for the task pane, commands, and custom functions are all bundled together and loaded into the shared runtime via the single `taskpane.html` file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  new HtmlWebpackPlugin({\n    filename: \"taskpane.html\",\n    template: \"./src/taskpane/taskpane.html\",\n    chunks: [\"polyfill\", \"taskpane\", \"commands\", \"functions\"]\n  })\n```\n\n----------------------------------------\n\nTITLE: Handling HostRestartNeeded Error during Ribbon Update in JavaScript\nDESCRIPTION: This JavaScript function `showDataTab` demonstrates how to handle the `HostRestartNeeded` error when attempting to update the Office ribbon using `Office.ribbon.requestUpdate`. It uses a try-catch block to capture potential errors. If the caught error's code is 'HostRestartNeeded' (which can occur if the add-in was updated and requires an Office restart), it calls a `reportError` function to inform the user.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction showDataTab() {\n    try {\n        Office.ribbon.requestUpdate({\n            tabs: [\n                {\n                    id: \"CtxTab1\",\n                    visible: true\n                }\n            ]});\n    }\n    catch(error) {\n        if (error.code == \"HostRestartNeeded\"){\n            reportError(\"Contoso Awesome Add-in has been upgraded. Please save your work, then close and reopen the Office application.\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Insert Text Button to Task Pane using HTML\nDESCRIPTION: This HTML markup adds a button with the ID `insert-text` and the label \"Insert Text\" to the add-in's task pane UI. It uses the `ms-Button` class from Fabric Core for styling. This button replaces the `TODO3` placeholder in `taskpane.html` and is intended to trigger text insertion into the PowerPoint slide via a JavaScript handler.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"insert-text\">Insert Text</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Updating Task Pane UI Structure in HTML\nDESCRIPTION: Replaces the `<body>` element in `Home.html` to define the user interface for the Office Add-in task pane. It includes a header, main content area with instructions, and two buttons (`insert-image`, `insert-text`) styled using Office UI Fabric classes (`ms-font-m`, `ms-welcome`, `ms-Button`). This structure provides the visual elements users interact with.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/powerpoint-quickstart-vs.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"ms-font-m ms-welcome\">\n    <div id=\"content-header\">\n        <div class=\"padding\">\n            <h1>Welcome</h1>\n        </div>\n    </div>\n    <div id=\"content-main\">\n        <div class=\"padding\">\n            <p>Select a slide and then choose the buttons to below to add content to it.</p>\n            <br />\n            <h3>Try it out</h3>\n            <button class=\"ms-Button\" id=\"insert-image\">Insert Image</button>\n            <br/><br/>\n            <button class=\"ms-Button\" id=\"insert-text\">Insert Text</button>\n        </div>\n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Streaming Clock Custom Function in JavaScript\nDESCRIPTION: Defines two JavaScript functions for an Office Add-in. `currentTime` is a helper function that returns the current time as a locale-formatted string. The `@customfunction` `clock` function acts as a streaming function, requiring a `CustomFunctions.StreamingInvocation` parameter. It uses `setInterval` to call `currentTime` every second and updates the invoking Excel cell via `invocation.setResult`. Cancellation is handled using `invocation.onCanceled` to clear the interval timer.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial-create-custom-functions.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nfunction currentTime() {\n  return new Date().toLocaleTimeString();\n}\n    \n/**\n * Displays the current time once a second\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nfunction clock(invocation) {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n    \n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Values for a Range of Cells - Excel JavaScript API - JavaScript\nDESCRIPTION: Assigns a row of values (['Potato Chips', 10, 1.80]) to range B5:D5 and auto-fits the columns. Requires Excel JavaScript API. Data input must be two-dimensional, matching the assignment target range. Example demonstrates how to set multiple related values at once.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let data = [\n        [\"Potato Chips\", 10, 1.80],\n    ];\n\n    let range = sheet.getRange(\"B5:D5\");\n    range.values = data;\n    range.format.autofitColumns();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler for 'Insert Image' Button in JavaScript\nDESCRIPTION: This JavaScript code retrieves the 'insert-image' button element by its ID and assigns a click event handler. When the button is clicked, it calls the `insertImage` function, wrapped within a `tryCatch` helper function (presumably defined elsewhere) for error handling. This connects the UI button to the image insertion logic.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"insert-image\").onclick = () => tryCatch(insertImage);\n```\n\n----------------------------------------\n\nTITLE: Setting Sensitivity Label by SensitivityLabelDetails Object in Office.js - JavaScript\nDESCRIPTION: This snippet mirrors the GUID approach but sets a mail item's sensitivity label by passing the SensitivityLabelDetails object retrieved from the label catalog. It uses chained asynchronous Office.js API calls to verify the catalog's availability and access the label, and robust error handling. The key parameter is the SensitivityLabelDetails object from the catalog; success and error statuses are logged. Requires an Outlook add-in environment with Office.js loaded, and catalog listing at least one label.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/sensitivity-label.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// It's recommended to check the status of the catalog of sensitivity labels before\n// calling other sensitivity label methods.\nOffice.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {\n        // Identify available sensitivity labels in the catalog.\n        Office.context.sensitivityLabelsCatalog.getAsync((asyncResult) => {\n            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n                const catalog = asyncResult.value;\n                if (catalog.length > 0) {\n                    // Set the mail item's sensitivity label using the SensitivityLabelDetails object.\n                    Office.context.mailbox.item.sensitivityLabel.setAsync(catalog[0], (asyncResult) => {\n                        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n                            console.log(asyncResult.status);\n                        } else {\n                            console.log(\"Action failed with error: \" + asyncResult.error.message);\n                        }\n                    });\n                } else {\n                    console.log(\"Catalog list is empty\");\n                }\n            } else {\n                console.log(\"Action failed with error: \" + asyncResult.error.message);\n            }\n        });\n    } else {\n        console.log(\"Action failed with error: \" + asyncResult.error.message);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Dialog Message Handler in Dialog Box (JavaScript)\nDESCRIPTION: This code snippet shows how to register an event handler within the dialog box's JavaScript to receive messages sent from the parent host page. It uses `Office.context.ui.addHandlerAsync` inside the `Office.onReady` function to attach the `onMessageFromParent` function to the `Office.EventType.DialogParentMessageReceived` event. This allows the dialog to react to messages sent via `dialog.messageChild()` from the host.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady(() => {\n    Office.context.ui.addHandlerAsync(Office.EventType.DialogParentMessageReceived,onMessageFromParent);\n});\n```\n\n----------------------------------------\n\nTITLE: Attempting Silent Token Acquisition with MSAL.js in JavaScript\nDESCRIPTION: Implements the silent token acquisition step using `pca.acquireTokenSilent` with the previously defined `tokenRequest`. It uses a try-catch block to handle errors, such as the user needing to consent or re-authenticate. If successful, the access token is stored in the `accessToken` variable. Console logs indicate the progress. This code replaces `TODO 1` in the initial `run` function structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/enable-nested-app-authentication-in-your-add-in.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  console.log(\"Trying to acquire token silently...\");\n  const userAccount = await pca.acquireTokenSilent(tokenRequest);\n  console.log(\"Acquired token silently.\");\n  accessToken = userAccount.accessToken;\n} catch (error) {\n  console.log(`Unable to acquire token silently: ${error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Data for Office Objects in JavaScript\nDESCRIPTION: Defines a JavaScript object (`mockData`) that serves as a template for the mock Office objects. It specifies the properties and methods (like `getSelectedRange`) that need to be simulated for the test, including their expected return values or behavior. This object mimics parts of the Excel `Workbook` API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockData = {\n  workbook: {\n    range: {\n      address: \"C2:G3\",\n    },\n    getSelectedRange: function () {\n      return this.range;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Add-in Manifest Metadata in XML\nDESCRIPTION: This XML snippet shows the updated metadata within the add-in's manifest file. It replaces placeholder values for `ProviderName`, `DisplayName`, and `Description` with specific details for the add-in, such as the author's name and a user-friendly name and description.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/powerpoint-quickstart-content.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n...\n<ProviderName>John Doe</ProviderName>\n<DefaultLocale>en-US</DefaultLocale>\n<!-- The display name of your add-in. Used on the store and various places of the Office UI such as the add-ins dialog. -->\n<DisplayName DefaultValue=\"My Office Add-in\" />\n<Description DefaultValue=\"A content add-in for PowerPoint.\"/>\n...\n```\n\n----------------------------------------\n\nTITLE: Processing Received Dialog Message and Showing User Name - JavaScript\nDESCRIPTION: Handles a DialogMessageReceived event by parsing the JSON message from the dialog and using the deserialized user's name to show a welcome message. Expects arg.message as a stringified JSON object. Dependencies include showUserName implementation elsewhere and dialog event configuration. Input is the event argument, output is a UI update reflecting the user's name.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction processMessage(arg) {\n    const messageFromDialog = JSON.parse(arg.message);\n    showUserName(messageFromDialog.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yeoman Generator for Office Add-ins using npm - Command Line\nDESCRIPTION: Installs Yeoman (yo) and the Office Add-in generator globally using npm which is required for quickly scaffolding Office Add-in projects. Requires prior installation of Node.js and npm. This command should be run in a terminal; successful execution enables use of the 'yo office' generator for project setup.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/set-up-your-dev-environment.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm install -g yo generator-office\n```\n\n----------------------------------------\n\nTITLE: Defining Group Icons in Contextual Tab JSON\nDESCRIPTION: These JSON objects specify the icons for a control group, placed within the `icon` array of the group definition. Each object requires a `size` (pixel height/width) and the full `sourceLocation` URL for the image file. At minimum, 16x16, 32x32, and 80x80 pixel icons are required. These URLs must match those in the manifest's Resources section and may need updating for production.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"size\": 16,\\n    \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/Group16x16.png\"\\n},\\n{\\n    \"size\": 32,\\n    \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/Group32x32.png\"\\n},\\n{\\n    \"size\": 80,\\n    \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/Group80x80.png\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Office Add-in Web Cache on iOS - JavaScript\nDESCRIPTION: This JavaScript command, when executed within an Office Add-in, forcibly reloads the add-in and clears the associated web cache on iOS devices. It assumes a browser-like environment where window.location.reload(true) is supported. Inputs are internal function parameters, and the output is a complete reload with cache clearing side effect. Not all environments guarantee support for the boolean reload argument.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/clear-cache.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.location.reload(true)\n```\n\n----------------------------------------\n\nTITLE: Defining a Control Group within a Contextual Tab in JSON\nDESCRIPTION: This JSON object defines a single group to be placed within the `groups` array of a contextual tab. It requires a unique `id` (max 125 chars), a `label`, an `icon` array specifying icons for different ribbon sizes, and a `controls` array defining the buttons/menus within the group (at least one required).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"id\": \"CustomGroup111\",\\n    \"label\": \"Insertion\",\\n    \"icon\": [\\n\\n    ],\\n    \"controls\": [\\n\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Add-in Only Manifest (XML) for Office Add-ins\nDESCRIPTION: This XML code declares an Office Add-in manifest for Word or PowerPoint, specifying basic metadata, host support, add-in display names, permissions, and source location. It includes XML elements for developer and support URLs, icon resources, required permissions (ReadWriteDocument), and host targeting (Document and Presentation). Save the manifest as GetDoc_App.xml using UTF-8 encoding. Prerequisites include a registered Office add-in environment and understanding of XML structure for Office extensions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n<OfficeApp xmlns=\\\"http://schemas.microsoft.com/office/appforoffice/1.1\\\"\\nxmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\nxsi:type=\\\"TaskPaneApp\\\">\\n    <Id>[Replace_With_Your_GUID]</Id>\\n    <Version>1.0</Version>\\n    <ProviderName>[Provider Name]</ProviderName>\\n    <DefaultLocale>EN-US</DefaultLocale>\\n    <DisplayName DefaultValue=\\\"Get Doc add-in\\\" />\\n    <Description DefaultValue=\\\"My get PowerPoint or Word document add-in.\\\" />\\n    <IconUrl DefaultValue=\\\"http://officeimg.vo.msecnd.net/_layouts/images/general/office_logo.jpg\\\" />\\n    <HighResolutionIconUrl DefaultValue=\\\"http://officeimg.vo.msecnd.net/_layouts/images/general/office_logo.jpg\\\" />\\n    <SupportUrl DefaultValue=\\\"[Insert the URL of a page that provides support information for the app]\\\" />\\n    <Hosts>\\n        <Host Name=\\\"Document\\\" />\\n        <Host Name=\\\"Presentation\\\" />\\n    </Hosts>\\n    <DefaultSettings>\\n        <SourceLocation DefaultValue=\\\"[Network location of app]/GetDoc_App.html\\\" />\\n    </DefaultSettings>\\n    <Permissions>ReadWriteDocument</Permissions>\\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Closing the File Handle in an Office Add-in (JavaScript)\nDESCRIPTION: This function is called after all file slices have been successfully sent. It uses the `file.closeAsync` method on the file object stored in the `state` to release the file handle. It updates the status message based on the success or failure of the close operation. It requires the `state` object (containing the file object) as input and depends on `updateStatus`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction closeFile(state) {\n    // Close the file when you're done with it.\n    state.file.closeAsync(function (result) {\n\n        // If the result returns as a success, the\n        // file has been successfully closed.\n        if (result.status === Office.AsyncResultStatus.Succeeded) {\n            updateStatus(\"File closed.\");\n        } else {\n            updateStatus(\"File couldn't be closed.\");\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Slide Matching Selected Slide's Layout and Master - PowerPoint JavaScript\nDESCRIPTION: This async function adds a new slide to the presentation using the same slide master and layout as the currently selected slide. It combines retrieval of the selected slide's index (via a helper function), loads the master and layout IDs of that slide, and uses these in the slides.add operation. Requires the Office JS and PowerPoint APIs, as well as the `getSelectedSlideIndex` promise-based helper. Inputs include the user's slide selection, outputs a slide that visually matches the template of the selected slide. Handles index conversion from 1-based (user-facing) to 0-based (API-facing).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/add-slides.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addSlideWithMatchingLayout() {\n    await PowerPoint.run(async function(context) {\n\n        let selectedSlideIndex = await getSelectedSlideIndex();\n    \n        // Decrement the index because the value returned by getSelectedSlideIndex()\n        // is 1-based, but SlideCollection.getItemAt() is 0-based.\n        const realSlideIndex = selectedSlideIndex - 1;\n        const selectedSlide = context.presentation.slides.getItemAt(realSlideIndex).load(\"slideMaster/id, layout/id\");\n    \n        await context.sync();\n    \n        context.presentation.slides.add({\n            slideMasterId: selectedSlide.slideMaster.id,\n            layoutId: selectedSlide.layout.id\n        });\n    \n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Slides by Tag Value Using Office.js - JavaScript\nDESCRIPTION: This function searches all slides in the current presentation for those tagged \"CUSTOMER_TYPE\" with value \"Premium\" and deletes them, allowing selective content removal. Prior to reading tag data, the relevant properties (tags/key, tags/value) are loaded explicitly for batch efficiency. Requires the PowerPoint JavaScript API, and assumes slides and their tags are properly populated.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/tagging-presentations-slides-shapes.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function deleteSlidesByAudience() {\n  await PowerPoint.run(async function(context) {\n    const slides = context.presentation.slides;\n    slides.load(\"tags/key, tags/value\");\n\n    await context.sync();\n\n    for (let i = 0; i < slides.items.length; i++) {\n      let currentSlide = slides.items[i];\n      for (let j = 0; j < currentSlide.tags.items.length; j++) {\n        let currentTag = currentSlide.tags.items[j];\n        if (currentTag.key === \"CUSTOMER_TYPE\" && currentTag.value === \"Premium\") {\n          currentSlide.delete();\n        }\n      }\n    }\n\n    await context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying PivotManualFilter to Excel PivotTable Field using Office JS API\nDESCRIPTION: This snippet, intended as an excerpt within an `Excel.run` block, demonstrates applying a `PivotManualFilter` to the 'Classification' PivotField. It defines a manual filter that explicitly selects only the item 'Organic' using the `selectedItems` property and applies this filter to the field, effectively excluding all other classifications.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n    // Apply a manual filter to include only a specific PivotItem (the string \"Organic\").\n    let filterField = classHierarchy.fields.getItem(\"Classification\");\n    let manualFilter = { selectedItems: [\"Organic\"] };\n    filterField.applyFilter({ manualFilter: manualFilter });\n```\n```\n\n----------------------------------------\n\nTITLE: Returning a Vertical Dynamic Array in JavaScript Excel Custom Function\nDESCRIPTION: This JavaScript function, marked with `@customfunction`, demonstrates how to return a two-dimensional array `[['first'], ['second'], ['third']]` which will spill vertically into adjacent cells below the formula cell in Excel. It requires the Excel custom functions runtime environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-dynamic-arrays.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Get text values that spill down.\n * @customfunction\n * @returns {string[][]} A dynamic array with multiple results.\n */\nfunction spillDown() {\n  return [['first'], ['second'], ['third']];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring messageSending Event Handler in Unified Manifest (JSON)\nDESCRIPTION: This JSON object, intended for the `autoRunEvents` array in `manifest.json`, defines the handling for the `messageSending` event (corresponding to `OnMessageSend`). It specifies a minimum Mailbox API version (\"1.15\"), required scopes (\"mail\"), links the event to the previously defined action (`onMessageSendHandler`), and sets the Smart Alerts `sendMode` to \"softBlock\", which prompts the user if conditions aren't met but allows sending if the add-in fails.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"requirements\": {\n            \"capabilities\": [\n                {\n                    \"name\": \"Mailbox\",\n                    \"minVersion\": \"1.15\"\n                }\n            ],\n            \"scopes\": [\n                \"mail\"\n            ]\n        },\n        \"events\": [\n          {\n              \"type\": \"messageSending\",\n              \"actionId\": \"onMessageSendHandler\",\n              \"options\": {\n                  \"sendMode\": \"softBlock\"\n              }\n          }\n        ]\n    }\n  \n```\n\n----------------------------------------\n\nTITLE: Initializing the Public Client Application with MSAL - JavaScript\nDESCRIPTION: Initializes the MSAL public client application within Office.onReady, enabling SSO via nested app authentication in the Office Add-in. The sample assigns the client to variable pca after awaiting createNestablePublicClientApplication. Parameters include the Azure app clientId and the authority endpoint, both critical for proper authentication flow. Dependencies are the MSAL browser library and Office.js. Inputs are user interaction and configuration values; output is an MSAL client instance ready for SSO token acquisition. Replace 'Enter_the_Application_Id_Here' with your own registered Azure App ID.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/enable-nested-app-authentication-in-your-add-in.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet pca = undefined;\nOffice.onReady(async (info) => {\n  if (info.host) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    document.getElementById(\"run\").onclick = run;\n\n    // Initialize the public client application\n    pca = await createNestablePublicClientApplication({\n      auth: {\n        clientId: \"Enter_the_Application_Id_Here\",\n        authority: \"https://login.microsoftonline.com/common\"\n      },\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Unified Manifest for Office Add-in SSO (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `webApplicationInfo` property within the unified manifest (`manifest.json`) file for an Office Add-in to enable SSO. The `id` property must be set to the Application (client) ID obtained during registration with the Microsoft identity platform. The `resource` property must be set to the Application ID URI, also configured during registration, which typically starts with `api://` and ends with the client ID.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/sso-in-office-add-ins.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"webApplicationInfo\": {\n\t\"id\": \"a661fed9-f33d-4e95-b6cf-624a34a2f51d\",\n\t\"resource\": \"api://addin.contoso.com/a661fed9-f33d-4e95-b6cf-624a34a2f51d\"\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Row and Column Hierarchies to PivotTable - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet demonstrates how to add row and column hierarchies to an existing PivotTable called 'Farm Sales' on the active worksheet, using the Excel JavaScript API. The code programmatically adds the 'Type' and 'Classification' hierarchies to rows and the 'Farm' hierarchy to columns, restructuring the PivotTable's grouping and view. Dependencies include proper hierarchy names and the presence of a PivotTable with the expected configuration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem(\"Type\"));\n    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem(\"Classification\"));\n\n    pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem(\"Farm\"));\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Production Build Task via npm\nDESCRIPTION: Runs the 'build' script defined in package.json. This task performs a single build of the project optimized for a production environment, often including minification and other performance enhancements. Requires Node.js, npm, and a configured 'build' script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Loading Original Range Text and Syncing Context in JavaScript\nDESCRIPTION: This snippet, intended to replace `TODO2` in `insertTextBeforeRange`, queues a command to load the `text` property of the `originalRange` object using `originalRange.load(\"text\")`. The subsequent `await context.sync()` executes the previously queued `insertText` command and the `load` command, making the original selected text available via `originalRange.text` in the following code. Includes placeholders (TODO3, TODO4) for subsequent operations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\noriginalRange.load(\"text\");\nawait context.sync();\n\n// TODO3: Queue commands to insert the original range as a\n//        paragraph at the end of the document.\n\n// TODO4: Make a final call of context.sync here and ensure\n//        that it runs after the insertParagraph has been queued.\n```\n\n----------------------------------------\n\nTITLE: Inserting Worksheets from External Workbook Using FileReader and Excel.insertWorksheetsFromBase64 - JavaScript\nDESCRIPTION: Shows how to read an external workbook file via FileReader, extract the base64 string, and insert all its worksheets into the current workbook after a specified sheet ('Sheet1'). The code sets insertion options such as positionType and relativeTo, and invokes insertWorksheetsFromBase64, requiring Office.js and Excel context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Retrieve the external workbook file and set up a `FileReader` object. \\nlet myFile = document.getElementById(\\\"file\\\");\\nlet reader = new FileReader();\\n\\nreader.onload = (event) => {\\n    Excel.run((context) => {\\n        // Remove the metadata before the base64-encoded string.\\n        let startIndex = reader.result.toString().indexOf(\\\"base64,\\\");\\n        let externalWorkbook = reader.result.toString().substr(startIndex + 7);\\n            \\n        // Retrieve the current workbook.\\n        let workbook = context.workbook;\\n            \\n        // Set up the insert options. \\n        let options = { \\n            sheetNamesToInsert: [], // Insert all the worksheets from the source workbook.\\n            positionType: Excel.WorksheetPositionType.after, // Insert after the `relativeTo` sheet.\\n            relativeTo: \\\"Sheet1\\\" // The sheet relative to which the other worksheets will be inserted. Used with `positionType`.\\n        }; \\n            \\n         // Insert the new worksheets into the current workbook.\\n         workbook.insertWorksheetsFromBase64(externalWorkbook, options);\\n         return context.sync();\\n    });\\n};\\n\\n// Read the file as a data URL so we can parse the base64-encoded string.\\nreader.readAsDataURL(myFile.files[0]);\n```\n\n----------------------------------------\n\nTITLE: Declaring Task Pane Version Overrides in Manifest (XML)\nDESCRIPTION: This XML snippet shows the basic structure of the `<VersionOverrides>` element specifically for a task pane add-in. It defines the XML namespace (`xmlns`) required for task pane overrides (`http://schemas.microsoft.com/office/taskpaneappversionoverrides`) and specifies the schema version (`xsi:type=\"VersionOverridesV1_0\"`). This element is used within the main `<OfficeApp>` element to enable features like custom ribbon buttons or functions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/taskpaneappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n    <!-- Child elements are omitted. -->\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Parsing EWS Extended Properties Using XML DOM in JavaScript\nDESCRIPTION: Demonstrates how to use browser DOM methods to parse EWS SOAP responses for extended properties in JavaScript. The code highlights browser differences, requiring different tag name prefixes depending on browser engine (e.g., Chrome versus Trident/IE). This code depends on jQuery for XML parsing and runs in the add-in\\'s UI frame context; inputs include the EWS response XML, and outputs are collections of matching tag values.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/web-services.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<t:ExtendedProperty><t:ExtendedFieldURI PropertySetId=\"00000000-0000-0000-0000-000000000000\" \nPropertyName=\"MyProperty\" \nPropertyType=\"String\"/>\n<t:Value>{\n...\n}</t:Value></t:ExtendedProperty>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mailbox = Office.context.mailbox;\nmailbox.makeEwsRequestAsync(mailbox.item.itemId, (result) => {\n    const response = $.parseXML(result.value);\n    const extendedProps = response.getElementsByTagName(\"ExtendedProperty\")\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mailbox = Office.context.mailbox;\nmailbox.makeEwsRequestAsync(mailbox.item.itemId, (result) => {\n    const response = $.parseXML(result.value);\n    const extendedProps = response.getElementsByTagName(\"t:ExtendedProperty\")\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Unified Manifest (manifest.json) for No Item Context Activation in Outlook\nDESCRIPTION: This JSON snippet shows how to configure the 'runtimes' section within a 'manifest.json' file for an Outlook add-in using the Unified Manifest for Microsoft 365. It sets the minimum Mailbox requirement set to 1.13 and enables the task pane action ('TaskPaneRuntimeShow') to support activation without item context (`supportsNoItemContext`: true), multiselect (`multiselect`: true), and pinning (`pinnable`: true). The surrounding text instructs to delete the 'CommandsRuntime' object and the second ribbon control.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/contextless.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"runtimes\": [\n    {\n        \"requirements\": {\n            \"capabilities\": [\n                {\n                    \"name\": \"Mailbox\",\n                    \"minVersion\": \"1.13\"\n                }\n            ]\n        },\n        \"id\": \"TaskPaneRuntime\",\n        \"type\": \"general\",\n        \"code\": {\n            \"page\": \"https://localhost:3000/taskpane.html\"\n        },\n        \"lifetime\": \"short\",\n        \"actions\": [\n            {\n                \"id\": \"TaskPaneRuntimeShow\",\n                \"type\": \"openPage\",\n                \"view\": \"dashboard\",\n                \"pinnable\": true,\n                \"supportsNoItemContext\": true,\n                \"multiselect\": true\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Properties and Merged Areas with Office.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to read read-only properties such as rowCount, columnCount, and merged cell areas from a PowerPoint table using Office.js. The approach loads both table structural properties and calls getMergedAreas, synchronizes with context.sync, and logs the results. This is useful for analysis or inspection, and depends on the PowerPoint JavaScript API and the presence of a table shape.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait PowerPoint.run(async (context) => {\n    // Load shapes.\n    const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;\n    shapes.load(\"items\");\n    await context.sync();\n    // Find the first shape of type table.\n    const shape = shapes.items.find((shape) => shape.type === PowerPoint.ShapeType.table)\n    const table = shape.getTable();\n    // Load row and column counts.\n    table.load(\"rowCount, columnCount\");\n    // Load the merged areas.\n    const mergedAreas = table.getMergedAreas();\n    mergedAreas.load(\"items\");\n    await context.sync();\n    // Log the table properties.\n    console.log(mergedAreas);\n    console.log(table.rowCount);\n    console.log(table.columnCount);\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing OfficeThemes.css in Add-in HTML Page\nDESCRIPTION: This HTML snippet shows how to include the OfficeThemes.css stylesheet in an add-in's HTML page using a <link> tag within the <head> section. This makes the theme-related CSS classes available for styling elements on the page.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/use-document-themes-in-your-powerpoint-add-ins.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"<local_path_to_OfficeThemes.css>\" rel=\"stylesheet\" type=\"text/css\" />\n```\n\n----------------------------------------\n\nTITLE: Example Range Values Response with Blank Cells in JavaScript\nDESCRIPTION: Shows an example of the data structure returned when reading the `values` property of a range where some cells are empty. Empty cells are represented by blank strings (`''`) within the 2-D array.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-blank-null-values.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nrange.values = [['', 'some', 'data', 'in', 'other', 'cells', '']];\n```\n\n----------------------------------------\n\nTITLE: Installing Type Definitions for Office.js in TypeScript Project - Shell\nDESCRIPTION: This shell command installs the Office.js type definitions required for TypeScript IntelliSense, enabling type safety and code completion in supported editors. This command uses npm (Node.js package manager) and must be run from the project root where your TypeScript add-in source code resides. Node.js and npm should be pre-installed. The @types/office-js package is added as a dev dependency, not impacting runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/referencing-the-javascript-api-for-office-library-from-its-cdn.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @types/office-js\n```\n\n----------------------------------------\n\nTITLE: Deleting All Shapes from a Worksheet in Excel using JavaScript\nDESCRIPTION: This snippet demonstrates how to remove all shapes from 'MyWorksheet'. It loads the shape collection without individual properties (`items/$none` for efficiency), iterates through each shape in the `shapes.items` array, and calls the `delete()` method on each one using the Excel JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// This deletes all the shapes from \"MyWorksheet\".\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"MyWorksheet\");\n    let shapes = sheet.shapes;\n\n    // We'll load all the shapes in the collection without loading their properties.\n    shapes.load(\"items/$none\");\n    await context.sync();\n\n    shapes.items.forEach(function (shape) {\n        shape.delete();\n    });\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Including Task Pane Script in HTML\nDESCRIPTION: HTML snippet for `taskpane.html`. It adds a `<script>` tag to include the `taskpane.js` file, making its JavaScript functions available within the task pane's context. This tag must be placed after the Office JS library script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"taskpane.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Pane Visibility in JavaScript\nDESCRIPTION: Updates the `Office.onReady` function in `taskpane.js`. This code checks if the host application is Outlook (`info.host === Office.HostType.Outlook`) and, if so, hides the initial sideload message (`sideload-msg`) and displays the main application body (`app-body`), making the add-in UI visible upon initialization.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/contextless.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (info.host === Office.HostType.Outlook) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Enumerating All Shape Bindings - PowerPoint Office JS - JavaScript\nDESCRIPTION: Demonstrates loading all bindings from the PowerPoint bindings collection and logging their IDs to the console. The function uses the load method to prepare binding data, context.sync to fetch, and iterates over each binding to output its identifier. Optional error handling is included for API failures.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/bind-shapes-in-presentation.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function loadBindings() {\\n    await PowerPoint.run(async (context) => {\\n        try {\\n            let myBindings = context.presentation.bindings;\\n            myBindings.load(\"items\");\\n            await context.sync();\\n\\n            // Log all binding IDs to console.\\n            if (myBindings.items.length > 0) {\\n                myBindings.items.forEach(async (binding) => {\\n                    console.log(binding.id);\\n                });\\n            }\\n        } catch (err) {\\n            console.error(err);\\n        }\\n    });\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing JSONP for Cross-Domain Data Fetching in JavaScript\nDESCRIPTION: This JavaScript function, `loadVideoDetails`, demonstrates the JSONP (JSON with Padding) technique to bypass the same-origin policy. It dynamically creates a script element, sets its source URL to a cross-domain API endpoint (YouTube GData API in this example) including a callback function name (`videoDetailsLoaded`), and appends it to the document's head. This triggers the browser to request and execute the script from the specified URL, effectively fetching data from the external domain. It assumes a pre-existing `videos` array containing objects with an `Id` property and requires a globally accessible callback function named `videoDetailsLoaded` to handle the response.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/addressing-same-origin-policy-limitations.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Dynamically create an HTML SCRIPT element that obtains the details for the specified video.\nfunction loadVideoDetails(videoIndex) {\n    // Dynamically create a new HTML SCRIPT element in the webpage.\n    const script = document.createElement(\"script\");\n    // Specify the URL to retrieve the indicated video from a feed of a current list of videos,\n    // as the value of the src attribute of the SCRIPT element. \n    script.setAttribute(\"src\", \"https://gdata.youtube.com/feeds/api/videos/\" + \n        videos[videoIndex].Id + \"?alt=json-in-script&amp;callback=videoDetailsLoaded\");\n    // Insert the SCRIPT element at the end of the HEAD section.\n    document.getElementsByTagName('head')[0].appendChild(script);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Office Build Support for Web Add-ins - Windows Registry - C#\nDESCRIPTION: This C# snippet defines a utility function, IsBuildSupported, to check if the installed Microsoft Office application (Word, PowerPoint, or Excel) meets the minimum build requirement for supporting web add-ins. The function navigates the Windows Registry to enumerate installed Office versions and inspects the build number to validate compatibility. Dependencies include the Microsoft.Win32 and System namespaces. Inputs include the registry root, Office registry path, and application names, while outputs are boolean values indicating support status. The approach assumes sufficient permissions to read the registry and that the relevant registry keys follow Office's documented structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Win32;\nusing System;\n\nnamespace SampleProject\n{\n    internal class IsBuildSupportedSample\n    {\n        /// <summary>\n        /// This function checks if the build of the Office application supports web add-ins. \n        /// </summary>\n        /// <returns> Returns true if the supported build is installed, and false if an old, unsupported build is installed or if the app is not installed at all.</returns>\n        private bool IsBuildSupported()\n        {\n            RegistryKey hklm = Registry.CurrentUser;\n            string basePath = @\"Software\\Microsoft\\Office\";\n            RegistryKey baseKey = Registry.CurrentUser.OpenSubKey(basePath);\n            string wxpName = \"Word\"; // Can be one of \"Word\", \"Powerpoint\", or \"Excel\".\n\n\n            const string buildNumberStr = \"BuildNumber\"; \n            const int smallBuildNumber = 18227; // This is the minimum build that supports installation of a web add-in in the installation of a Windows app.\n            const int supportedBuildMajorNumber = 16; // 16 is the lowest major build of Office applications that supports web add-ins.\n\n            if (baseKey != null)\n            {\n                Version maxVersion = new Version(supportedBuildMajorNumber, 0); // Initial value for the max supported build version\n                foreach (string subKeyName in baseKey.GetSubKeyNames())\n                {\n                    if (Version.TryParse(subKeyName, out Version version))\n                    {\n                        if (version > maxVersion)\n                        {\n                            maxVersion = version;\n                        }\n                    }\n                }\n\n                string maxVersionString = maxVersion.ToString();\n                // The Office application's build number is under this path.\n                RegistryKey buildNumberKey = hklm.OpenSubKey(String.Format(@\"Software\\Microsoft\\\\Office\\{0}\\\\Common\\Experiment\\{1}\", maxVersionString, wxpName));\n\n                if (maxVersion.Major >= supportedBuildMajorNumber && buildNumberKey != null)\n                {\n                    object buildNumberValue = buildNumberKey.GetValue(buildNumberStr);\n                    if (buildNumberValue != null && Version.TryParse(buildNumberValue.ToString(), out Version version))\n                    {\n                        if (version.Major > supportedBuildMajorNumber || (version.Major == supportedBuildMajorNumber && version.Build >= smallBuildNumber))\n                        {\n                            // Build is supported\n                            return true;\n                        }\n                        else\n                        {\n                            // Office is installed, but the build is not supported.\n                            return false;\n                        }\n                    }\n                    else\n                    {\n                        // There is no build number, which is an abnormal case.\n                        return false;\n                    }\n                }\n                else\n                {\n                    // An old version is installed.\n                    return false;\n                }\n            }\n            else\n            {\n                // Office is not installed.\n                return false;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Text to Geometric Shapes in Excel using JavaScript\nDESCRIPTION: This snippet demonstrates creating a 'Wave' geometric shape on the 'MyWorksheet', setting its position, dimensions, and fill color. It then adds the text \"Shape text\" to the shape's `textFrame`, colors the text purple, and aligns it horizontally to the center using the Excel JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// This sample creates a light-blue wave shape and adds the purple text \"Shape text\" to the center.\nawait Excel.run(async (context) => {\n    let shapes = context.workbook.worksheets.getItem(\"MyWorksheet\").shapes;\n    let wave = shapes.addGeometricShape(Excel.GeometricShapeType.wave);\n    wave.left = 100;\n    wave.top = 400;\n    wave.height = 50;\n    wave.width = 150;\n\n    wave.name = \"Wave\";\n    wave.fill.setSolidColor(\"lightblue\");\n\n    wave.textFrame.textRange.text = \"Shape text\";\n    wave.textFrame.textRange.font.color = \"purple\";\n    wave.textFrame.horizontalAlignment = Excel.ShapeTextHorizontalAlignment.center;\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Installability Requirements for Office Add-ins via Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet defines an 'extensions' object with a 'requirements' property that sets minimum supported requirement sets and restricts the allowed form factors. It enforces that the add-in can only be installed on Office clients supporting both Mailbox 1.10 and DialogAPI 1.2 requirement sets and on desktop platforms exclusively. Required dependencies are Office clients supporting unified manifests and respective requirement sets. Key parameters: 'capabilities' (list of features+versions), 'formFactors' (platform types). Input is a manifest section, output is the compatibility enforcement during install. All code must comply to manifest schema constraints.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requirements-property-unified-manifest.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    \"requirements\": {\n        \"capabilities\": [\n            {\n                \"name\": \"Mailbox\",\n                \"minVersion\": \"1.10\"\n            },\n            {\n                \"name\": \"DialogAPI\",\n                \"minVersion\": \"1.2\"\n            }\n        ],\n        \"formFactors\": [\n            \"desktop\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Loading core-js Polyfill via HTML Script Tag\nDESCRIPTION: This HTML snippet demonstrates how to load the core-js polyfill library within an add-in's home page HTML file using a `<script>` tag. This method makes the polyfills available globally within the webview's JavaScript context, providing compatibility for newer JavaScript features in older environments.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/support-ie-11.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/js/core-js.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Describing Mail Add-in <VersionOverrides> Structure - Office Add-in Manifest (XML)\nDESCRIPTION: Demonstrates the hierarchical element ordering inside the <VersionOverrides> node for Mail Add-ins using Office Add-in Manifest v1.1. The structure includes all major blocks such as Description, Requirements, Sets, Resources, and WebApplicationInfo, with nested elements for UI layout, command surfaces, and resource localization. Intended as a reference template for manifest authors, the snippet does not represent a working manifest but sketches all the relevant sections developers should be aware of. No external dependencies, but should adhere to the official Office Add-ins manifest schema.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/manifest-element-ordering.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides>\\n    <Description>\\n    <Requirements>\\n    <Sets>\\n        <Set>\\n    <Hosts>\\n    <Host>\\n        <DesktopFormFactor>\\n            <ExtensionPoint>\\n                <OfficeTab>\\n                    <Group>\\n                        <Label>\\n                        <Tooltip>\\n                        <Control>\\n                            <Label>\\n                            <Supertip>\\n                                <Title>\\n                                <Description>\\n                            <Icon>\\n                                <Image>\\n                            <Action>\\n                                <SourceLocation>\\n                                <FunctionName>\\n                <CustomTab>\\n                    <Group>\\n                        <Label>\\n                        <Icon>\\n                            <Image>\\n                        <Control>\\n                            <Label>\\n                            <Supertip>\\n                                <Title>\\n                                <Description>\\n                            <Icon>\\n                                <Image>  \\n                            <Action>\\n                                <TaskpaneId>\\n                                <SourceLocation>\\n                                <Title>\\n                                <FunctionName>\\n                            <Items>\\n                                <Item>\\n                                    <Label>\\n                                    <Supertip>\\n                                        <Title>\\n                                        <Description>\\n                                    <Action>\\n                                        <TaskpaneId>\\n                                        <SourceLocation>\\n                                        <Title>\\n                                        <FunctionName>\\n                    <Label>\\n                <OfficeMenu>\\n                    <Control>\\n                        <Label>\\n                        <Supertip>\\n                            <Title>\\n                            <Description>\\n                        <Icon>\\n                            <Image>  \\n                        <Action>\\n                            <TaskpaneId>\\n                            <SourceLocation>\\n                            <Title>\\n                            <FunctionName>\\n                        <Items>\\n                            <Item>\\n                                <Label>\\n                                <Supertip>\\n                                    <Title>\\n                                    <Description>\\n                                <Action>\\n                                    <TaskpaneId>\\n                                    <SourceLocation>\\n                                    <Title>\\n                                    <FunctionName>\\n                <SourceLocation>\\n                <Label>\\n                <CommandSurface>\\n        <MobileFormFactor>\\n            <ExtensionPoint>\\n                <Group>\\n                    <Label>\\n                    <Control>\\n                        <Label>\\n                        <Icon>\\n                            <Image>\\n                        <Action>\\n                            <SourceLocation>\\n                            <FunctionName>\\n                <Control>\\n                    <Label>\\n                    <Icon>\\n                        <Image>\\n                    <Action>\\n                        <SourceLocation>\\n                        <FunctionName>\\n    <Resources>\\n        <Images>\\n            <Image>\\n                <Override>\\n        <Urls>\\n            <Url>\\n                <Override>\\n        <ShortStrings>\\n            <String>\\n                <Override>\\n        <LongStrings>\\n            <String>\\n                <Override>\\n    <WebApplicationInfo>\\n        <Id>\\n        <Resource>\\n        <Scopes>\\n            <Scope>\n```\n\n----------------------------------------\n\nTITLE: Configuring the Query URI for Office Dictionary Add-in (XML)\nDESCRIPTION: This XML snippet illustrates the `<QueryUri>` element within an Office Add-in manifest's `<Dictionary>` section. It defines the base endpoint URL (`DefaultValue`) for the dictionary's XML web service. The Office application will append the properly escaped query term to this URI when requesting definitions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<QueryUri DefaultValue=\"http://msranlc-lingo1/proof.aspx?q=\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Attendee Context in Unified Manifest (JSON)\nDESCRIPTION: Adds 'logEventMeetingDetailsAttendee' to the 'extensions.ribbons.contexts' array in the unified manifest (JSON). This is necessary for add-ins functioning in Appointment Attendee mode, such as CRM or note-taking integrations, on mobile.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-mobile-support.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"contexts\": [\n    \"meetingDetailsAttendee\",\n    \"logEventMeetingDetailsAttendee\"\n],\n```\n\n----------------------------------------\n\nTITLE: Updating Word Add-in Manifest Placeholders in XML\nDESCRIPTION: This XML snippet shows part of the add-in manifest file where placeholder values need to be updated. Specifically, it shows the `ProviderName`, `DisplayName`, and `Description` elements, indicating that their default or placeholder values should be replaced with the actual developer name, add-in title, and a concise description.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/word-quickstart-vs.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n...\n<ProviderName>John Doe</ProviderName>\n<DefaultLocale>en-US</DefaultLocale>\n<!-- The display name of your add-in. Used on the Store and various places of the Office UI such as the add-in's dialog. -->\n<DisplayName DefaultValue=\"My Office Add-in\" />\n<Description DefaultValue=\"A task pane add-in for Word.\"/>\n...\n```\n\n----------------------------------------\n\nTITLE: Registering Workbook Activation Event Handler with Excel JavaScript API - JavaScript\nDESCRIPTION: This code sample explains how to subscribe to the 'onActivated' event of an Excel workbook and specify a callback for when the workbook is activated. It includes registering the handler and a sample callback function that loads and logs the name of the activated workbook. Dependencies are Office.js and a runtime supporting async/await. Input is the event trigger; output is a console log with the workbook name. Registration and callback must happen within the context of an Excel add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function run() {\n    await Excel.run(async (context) => {\n        // Retrieve the workbook.\n        let workbook = context.workbook;\n    \n        // Register the workbook activated event handler.\n        workbook.onActivated.add(workbookActivated);\n        await context.sync();\n    });\n}\n\nasync function workbookActivated(event) {\n    await Excel.run(async (context) => {\n        // Retrieve the workbook and load the name.\n        let workbook = context.workbook;\n        workbook.load(\"name\");        \n        await context.sync();\n\n        // Callback function for when the workbook is activated.\n        console.log(`The workbook ${workbook.name} was activated.`);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Elements of an Excel Table using Office JS\nDESCRIPTION: This snippet applies specific formatting to different parts of the 'ExpensesTable'. It sets the background fill color for the header row, the entire data body range, the second row (index 1), and the data body range of the first column (index 0) using their respective `format.fill.color` properties. Changes are applied after the `context.sync()` call.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    expensesTable.getHeaderRowRange().format.fill.color = \"#C70039\";\n    expensesTable.getDataBodyRange().format.fill.color = \"#DAF7A6\";\n    expensesTable.rows.getItemAt(1).getRange().format.fill.color = \"#FFC300\";\n    expensesTable.columns.getItemAt(0).getDataBodyRange().format.fill.color = \"#FFA07A\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Yo Office Project Manifest using office-addin-project\nDESCRIPTION: This command uses the `office-addin-project` tool via npx to convert an Office Add-in project originally created with the Yeoman generator. It takes the relative path to the existing XML manifest as input (`-m <relative-path-to-XML-manifest>`). The command updates the `package.json` file, creates a new unified manifest (`.json`) in the project root, and backs up the old XML manifest in a `backup.zip` file. This prepares the project for environments supporting the unified manifest, like Microsoft Teams.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/convert-xml-to-json-manifest.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-project convert -m <relative-path-to-XML-manifest>\n```\n\n----------------------------------------\n\nTITLE: Copying Range Data with Excel JavaScript API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to copy a range of cells (A1:E1) to a new location (G1:K1) within the same worksheet using the Excel JavaScript API's Range.copyFrom method. The method replicates Excel's Copy and Paste actions and is executed within the Excel.run batch function. Dependencies: Office.js, Excel workbook with a worksheet named 'Sample'. Input: source range ('A1:E1'), destination ('G1'). Output: 'A1:E1' values and formatting copied to 'G1:K1'. Limitations: Requires Excel environment supporting Office.js.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-cut-copy-paste.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n    // Copy everything from \\\"A1:E1\\\" into \\\"G1\\\" and the cells afterwards (\\\"G1:K1\\\").\\n    sheet.getRange(\\\"G1\\\").copyFrom(\\\"A1:E1\\\");\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Document Content as a File Object using getFileAsync (JavaScript)\nDESCRIPTION: Defines the `sendFile` function which uses `Office.context.document.getFileAsync` to retrieve the current document content. It requests the file in 'compressed' format (`.pptx` or `.docx`) with a specified slice size. On success, it extracts the `File` object, prepares a state object containing the file reference and slice information, updates the status, and initiates the slice retrieval process by calling `getSlice`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Get all of the content from a PowerPoint or Word document in 100-KB chunks of text.\nfunction sendFile() {\n    Office.context.document.getFileAsync(\"compressed\",\n        { sliceSize: 100000 },\n        function (result) {\n\n            if (result.status === Office.AsyncResultStatus.Succeeded) {\n\n                // Get the File object from the result.\n                var myFile = result.value;\n                var state = {\n                    file: myFile,\n                    counter: 0,\n                    sliceCount: myFile.sliceCount\n                };\n\n                updateStatus(\"Getting file of \" + myFile.size + \" bytes\");\n                getSlice(state);\n            } else {\n                updateStatus(result.status);\n            }\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Formula Data Validation in Excel using JavaScript\nDESCRIPTION: This snippet applies a custom data validation rule to the data body range of the \"Comments\" column within a table named \"AthletesTable\". It uses the `custom` rule type, providing an Excel formula `\"=NOT(ISNUMBER(SEARCH(A2,B2)))\"` as the validation logic. This specific formula checks if the text from cell A2 (presumably the athlete's name) is *not* present within cell B2 (the comment). If the name is found, the validation fails. This relies on the Excel JavaScript API and assumes the existence and structure of \"AthletesTable\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-data-validation.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let commentsRange = sheet.tables.getItem(\"AthletesTable\").columns.getItem(\"Comments\").getDataBodyRange();\n\n    commentsRange.dataValidation.rule = {\n            custom: {\n                formula: \"=NOT(ISNUMBER(SEARCH(A2,B2)))\"\n            }\n        };\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Addresses in JavaScript Custom Function\nDESCRIPTION: This JavaScript snippet demonstrates the `getParameterAddresses` custom function, which returns the addresses of its input parameters. It uses the `@requiresParameterAddresses` JSDoc tag, requiring the last parameter to be `CustomFunctions.Invocation`. The `@returns {string[][]}` tag specifies a matrix return type. The function accesses `invocation.parameterAddresses` (an array of addresses) and formats it as a 2D array for output.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Return the addresses of three parameters. \n * @customfunction\n * @param {string} firstParameter First parameter.\n * @param {string} secondParameter Second parameter.\n * @param {string} thirdParameter Third parameter.\n * @param {CustomFunctions.Invocation} invocation Invocation object. \n * @returns {string[][]} The addresses of the parameters, as a 2-dimensional array.\n * @requiresParameterAddresses\n */\nfunction getParameterAddresses(firstParameter, secondParameter, thirdParameter, invocation) {\n  const addresses = [\n    [invocation.parameterAddresses[0]],\n    [invocation.parameterAddresses[1]],\n    [invocation.parameterAddresses[2]]\n  ];\n  return addresses;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Add-in Manifest for SSO (Unified Manifest) - JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the `webApplicationInfo` property within the Unified Manifest for Microsoft 365. This configuration is essential for enabling Single Sign-On (SSO). It requires setting the `id` property to the application ID obtained during Azure AD registration and the `resource` property to the Application ID URI (e.g., `api://<domain>/<app-id>`) specified during registration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/authenticate-a-user-with-an-sso-token.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"webApplicationInfo\": {\n     \"id\": \"a661fed9-f33d-4e95-b6cf-624a34a2f51d\",\n     \"resource\": \"api://addin.contoso.com/a661fed9-f33d-4e95-b6cf-624a34a2f51d\"\n },\n```\n\n----------------------------------------\n\nTITLE: Handling Worksheet Row Sorting Events with onRowSorted in JavaScript\nDESCRIPTION: Shows how to register an event handler for the `Worksheet.onRowSorted` event on the active worksheet. The asynchronous callback function logs the address of the rows moved during the sort operation (`event.address`) and then clears formatting in a predefined range (\"A1:E5\") before highlighting the newly sorted rows by setting their fill color to yellow. This uses nested `Excel.run` calls to handle the asynchronous nature of the event handler.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This will fire whenever a row has been moved as the result of a sort action.\n    sheet.onRowSorted.add(async (event) => {\n        await Excel.run(async (context) => {\n            console.log(\"Row sorted: \" + event.address);\n            let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n            // Clear formatting for section, then highlight the sorted area.\n            sheet.getRange(\"A1:E5\").format.fill.clear();\n            if (event.address !== \"\") {\n                sheet.getRanges(event.address).format.fill.color = \"yellow\";\n            }\n\n            await context.sync();\n        });\n    });\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Row Heights and Column Widths for PowerPoint Tables with Office.js in JavaScript\nDESCRIPTION: This snippet shows how to define custom row heights and column widths when creating a PowerPoint table using Office.js. The options.columns and options.rows arrays are initialized with objects for each column and row, then the columnWidth and rowHeight properties are set directly. It demonstrates enforcement of array lengths matching table dimensions and highlights that PowerPoint may override sizes to fit content. This requires the PowerPoint JavaScript API and helper function insertTableOnCurrentSlide.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst columnCount = 3;\nconst rowCount = 3;\nconst options: PowerPoint.TableAddOptions = {\n    values: [\n        [\"Width 72pt\", \"Width 244pt\", \"Width 100pt\"],\n        [\"\", \"\", \"\"],\n        [\"\", \"^\\n\\nHeight 200 pt\\n\\nv\", \"\"]\n    ],\n    // Initialize columns with an array of empty objects for each column.\n    columns: Array(columnCount).fill(\"\").map(_ => ({})),\n    rows: Array(columnCount).fill(\"\").map(_ => ({})),\n    uniformCellProperties: {\n        fill: { color: \"lightcyan\" },\n        horizontalAlignment: PowerPoint.ParagraphHorizontalAlignment.center,\n        verticalAlignment: 1, //PowerPoint.TextVerticalAlignment.middle\n        borders: {\n            bottom: {\n                color: \"black\",\n                weight: 3\n            },\n            left: {\n                color: \"black\",\n                weight: 3\n            },\n            right: {\n                color: \"black\",\n                weight: 3\n            },\n            top: {\n                color: \"black\",\n                weight: 3\n            }\n        }\n    }\n};\noptions.columns[0].columnWidth = 72;\noptions.columns[1].columnWidth = 244;\noptions.columns[2].columnWidth = 100;\noptions.rows[2].rowHeight = 200;\nawait insertTableOnCurrentSlide(rowCount, columnCount, options);\n```\n\n----------------------------------------\n\nTITLE: Adding Excel Binding from A1 Range and Writing Data (JavaScript)\nDESCRIPTION: This function demonstrates creating a 'matrix' type binding specifically in Excel using an A1 notation range (\"A1:A3\"). It assigns the ID 'MyCities', and upon successful binding creation, it uses `Office.select` to target the new binding and `setDataAsync` to write an array of city names into the bound cells. Error handling is included for both asynchronous operations. Requires the Office JS API and is intended for Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n function bindingFromA1Range() {\n    Office.context.document.bindings.addFromNamedItemAsync(\"A1:A3\", \"matrix\", {id: \"MyCities\" },\n        function (asyncResult) {\n            if (asyncResult.status == \"failed\") {\n                write('Error: ' + asyncResult.error.message);\n            }\n            else {\n                // Write data to the new binding.\n                Office.select(\"bindings#MyCities\").setDataAsync([['Berlin'], ['Munich'], ['Duisburg']], { coercionType: \"matrix\" },\n                    function (asyncResult) {\n                        if (asyncResult.status == \"failed\") {\n                            write('Error: ' + asyncResult.error.message);\n                        }\n                    });\n            }\n        });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Predefined Values using PowerPoint JavaScript API (TypeScript/JavaScript)\nDESCRIPTION: This code illustrates how to populate a new PowerPoint table with string values upon creation, specifying those values as a 2D array within a PowerPoint.TableAddOptions object. The insertTableOnCurrentSlide helper function is used to abstract table creation, improving reusability. Requires: PowerPoint JavaScript API and Office Add-in context. Key parameters: row count, column count, and a 'values' 2D array. Returns: a populated table. Limitation: Each cell must have an explicit string value (blank or value); missing/undefined triggers an error.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function run() {\n    const options: PowerPoint.TableAddOptions = {\n        values: [\n            [\"1\", \"2\", \"\", \"4\"], // Cell 3 is blank.\n            [\"5\", \"6\", \"7\", \"8\"],\n            [\"9\", \"10\", \"11\", \"12\"]\n        ],\n    };\n\n    await insertTableOnCurrentSlide(3, 4, options);\n}\n\nasync function insertTableOnCurrentSlide(rowCount: number, columnCount: number, options: PowerPoint.TableAddOptions) {\n    await PowerPoint.run(async (context) => {\n        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;\n\n        // Add a table (which is a type of Shape).\n        const shape = shapes.addTable(rowCount, columnCount, options);\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring contentRuntimes in Unified Office Add-in Manifest - JSON\nDESCRIPTION: This JSON code snippet demonstrates how to declare a content add-in within a unified Office Add-in manifest by defining a \\\"contentRuntimes\\\" array. The object includes an id, page URL, requested width and height in pixels, and an optional disableSnapshot setting. This configuration is required to embed a custom content surface in Excel or PowerPoint, and should be placed within the extensions array of the manifest. Inputs include the id (a descriptive string), code.page (URL to the hosted content), and sizing/protection options; the Office application expects this structure to identify and initialize the add-in. No external dependencies are required beyond a valid Office Add-in load context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/content-add-ins.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"contentRuntimes\\\": [\\n        {\\n            \\\"id\\\": \\\"ContentRuntime\\\",\\n            \\\"code\\\": {\\n                \\\"page\\\": \\\"https://localhost:3000/content.html\\\"\\n            },\\n            \\\"requestedWidth\\\": 100,\\n            \\\"requestedHeight\\\": 100,\\n            \\\"disableSnapshot\\\": true,\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Custom Function to Fetch GitHub Star Count - JavaScript\nDESCRIPTION: This JavaScript code defines an asynchronous Excel custom function, 'getStarCount', which retrieves the number of stars for a specified GitHub repository using the GitHub API. The function takes two string parameters (userName and repoName) and returns the repository's watchers_count or an error object if the request fails. Dependencies include fetch API support and that the code runs in an environment (like Office.js custom functions) where async functions are supported. Limitations include API rate limits and network connectivity requirements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial-create-custom-functions.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n  * Gets the star count for a given Github repository.\n  * @customfunction \n  * @param {string} userName string name of Github user or organization.\n  * @param {string} repoName string name of the Github repository.\n  * @return {number} number of stars given to a Github repository.\n  */\n  async function getStarCount(userName, repoName) {\n    try {\n      //You can change this URL to any web request you want to work with.\n      const url = \"https://api.github.com/repos/\" + userName + \"/\" + repoName;\n      const response = await fetch(url);\n      //Expect that status code is in 200-299 range\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n        const jsonResponse = await response.json();\n        return jsonResponse.watchers_count;\n    }\n    catch (error) {\n      return error;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing OnNewMessageCompose Event Handler with Office.js in JavaScript\nDESCRIPTION: This JavaScript code defines an event handler for Outlook's OnNewMessageCompose event using Office.js. It obtains sender details, attaches a Base64-encoded PNG as an inline signature image, sets the message signature (including the sender's name), and displays an informational notification. The handler ensures the Office.js library is ready, uses asynchronous Office.context.mailbox APIs, and must be registered correctly in the manifest and referenced in HTML to function. The snippet assumes dependencies on the Office.js library and is intended for use in Outlook add-ins where mailbox item context and event completion signaling are required.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-event-based.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n* Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n* See LICENSE in the project root for license information.\n*/\n\n// Add start-up logic code here, if any.\nOffice.onReady();\n\nfunction onNewMessageComposeHandler(event) {\n    const item = Office.context.mailbox.item;\n    const signatureIcon = \"iVBORw0KGgoAAAANSUhEUgAAACcAAAAnCAMAAAC7faEHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAzUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKMFRskAAAAQdFJOUwAQIDBAUGBwgI+fr7/P3+8jGoKKAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABT0lEQVQ4T7XT2ZalIAwF0DAJhMH+/6+tJOQqot6X6joPiouNBo3w9/Hd6+hrYnUt6vhLcjEAJevVW0zJxABSlcunhERpjY+UKoNN5+ZgDGu2onNz0OngjP2FM1VdyBW1LtvGeYrBLs7U5I1PTXZt+zifcS3Icw2GcS3vxRY3Vn/iqx31hUyTnV515kdTfbaNhZLI30AceqDiIo4tyKEmJpKdP5M4um+nUwfDWxAXdzqMNKQ14jLdL5ntXzxcRF440mhS6yu882Kxa30RZcUIjTCJg7lscsR4VsMjfX9Q0Vuv/Wd3YosD1J4LuSRtaL7bzXGN1wx2cytUdncDuhA3fu6HPTiCvpQUIjZ3sCcHVbvLtbNTHlysx2w9/s27m9gEb+7CTri6hR1wcTf2gVf3wBRe3CMbcHYvTODkXhnD0+178K/pZ9+n/C1ru/2HAPwAo7YM1X4+tLMAAAAASUVORK5CYII=\";\n\n    // Get the sender's account information.\n    item.from.getAsync((result) => {\n        if (result.status === Office.AsyncResultStatus.Failed) {\n            console.log(result.error.message);\n            event.completed();\n            return;\n        }\n\n        // Create a signature based on the sender's information.\n        const name = result.value.displayName;\n        const options = { asyncContext: name, isInline: true };\n        item.addFileAttachmentFromBase64Async(signatureIcon, \"signatureIcon.png\", options, (result) => {\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                console.log(result.error.message);\n                event.completed();\n                return;\n            }\n\n            // Add the created signature to the message.\n            const signature = \"<img src='cid:signatureIcon.png'>\" + result.asyncContext;\n            item.body.setSignatureAsync(signature, { coercionType: Office.CoercionType.Html }, (result) => {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    console.log(result.error.message);\n                    event.completed();\n                    return;\n                }\n\n                // Show a notification when the signature is added to the message.\n                const notification = {\n                    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n                    message: \"Company signature added.\",\n                    icon: \"none\",\n                    persistent: false                        \n                };\n                item.notificationMessages.addAsync(\"signature_notification\", notification, (result) => {\n                    if (result.status === Office.AsyncResultStatus.Failed) {\n                        console.log(result.error.message);\n                        event.completed();\n                        return;\n                    }\n\n                    event.completed();\n                });\n            });\n        });\n    });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server and Sideloading Add-in - Command Line\nDESCRIPTION: This command starts the local development web server using npm and sideloads the Office Add-in into Excel for testing. It requires Node.js and npm to be installed, and must be run from the root directory of the Office Add-in project. Running this will launch Excel with your add-in loaded, provided your project is properly configured with an npm start script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/tutorial-excel-start-server.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting the Office Add-in Project (npm Command Line)\nDESCRIPTION: Starts the local server or development environment for the Office Add-in using the command `npm run start`. Requires prior project build and setup. Launched from the command line in the project's root directory. Outputs serve the add-in to be attached to Excel for testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/share-data-and-events-between-custom-functions-and-the-task-pane-tutorial.md#_snippet_6\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting the Office Add-in Development Server using npm\nDESCRIPTION: This command line instruction uses npm (Node Package Manager) to execute the `start` script defined in the project's `package.json`. Running `npm start` typically launches a local development server, making the add-in's web files accessible (e.g., via `https://localhost:3000`) for testing and debugging within the Office application. It requires Node.js and npm to be installed and must be run from the project's root directory, often requiring administrator privileges.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/outlook-quickstart-json-manifest-typescript.md#_snippet_7\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Function Description and ID using JSDoc - JavaScript\nDESCRIPTION: This snippet shows how untagged text within the JSDoc comment (\"A function that adds two numbers.\") automatically becomes the function's description. It also includes the `@customfunction ADD` tag to specify the function's unique `id`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A function that adds two numbers.\n * @customfunction ADD\n * ...\n */\n```\n\n----------------------------------------\n\nTITLE: Converting Local Dictionary Dates for Appointment Creation - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to convert local date-time values in dictionary format into UTC-correct Date objects using Office.context.mailbox.convertToUtcClientTime. It is intended for use in Outlook add-ins where user-input dictionary dates are provided for new appointment forms. Dependencies include the Office.js library and Outlook add-in context. Inputs are dictionary-formatted start and end dates; outputs are UTC Date objects, suitable for the 'start' and 'end' parameters of Mailbox.displayNewAppointmentForm. Handles conversion nuances across classic, Mac, web, and mobile Outlook clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/tips-for-handling-date-values-in-outlook-add-ins.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myUTCCorrectStartDate = Office.context.mailbox.convertToUtcClientTime(myLocalDictionaryStartDate);\nconst myUTCCorrectEndDate = Office.context.mailbox.convertToUtcClientTime(myLocalDictionaryEndDate);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Resource File for Office Add-in (JSON)\nDESCRIPTION: This JSON resource file provides localized French strings and resources for an Office Add-in, referenced via the manifest's 'localizationInfo'. It includes keys for short and full names, descriptions, localized icons, resource URLs, and ribbon labels/tooltips, all in French. This structure enables Office to use localized UI strings and assets when the user's locale matches 'fr-fr'. Required dependency is the corresponding manifest entry; inputs are key-value locale pairs, and output is used for dynamic UI localization.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"$schema\\\": \\\"https://developer.microsoft.com/json-schemas/teams/v1.16/MicrosoftTeams.Localization.schema.json\\\",\\n  \\\"name.short\\\": \\\"Lecteur vid\\u00e9o\\\",\\n  \\\"name.full\\\": \\\"Lecteur vid\\u00e9o pour Outlook\\\",\\n  \\\"description.short\\\": \\\"Voir les vid\\u00e9os YouTube dans Outlook via les mails.\\\",\\n  \\\"description.full\\\": \\\"Visualisez les vid\\u00e9os YouTube r\\u00e9f\\u00e9renc\\u00e9es dans vos courriers \\u00e9lectronique directement depuis Outlook.\\\",\\n  \\\"icons.color\\\": \\\"https://localhost:3000/assets/fr-fr/icon-128.png\\\",\\n  \\\"extensions[0].audienceClaimUrl\\\": \\\"https://localhost:3000/fr-fr/taskpane.html\\\",\\n  \\\"extensions[0].ribbons[0].tabs[0].groups[0].label\\\": \\\"Outils de m\\u00e9dias\\\",\\n  \\\"extensions[0].ribbons[0].tabs[0].groups[0].controls[0].icons[0].url\\\": \\\"https://localhost:3000/assets/fr-fr/player-icon.png\\\",\\n  \\\"extensions[0].ribbons[0].tabs[0].groups[0].controls[0].label\\\": \\\"Ouvrir le lecteur vid\\u00e9o\\\",\\n  \\\"extensions[0].ribbons[0].tabs[0].groups[0].controls[0].supertip.description\\\": \\\"Cliquez pour ouvrir le lecteur vid\\u00e9o.\\\",\\n  \\\"extensions[0].ribbons[0].tabs[0].groups[0].controls[0].supertip.title\\\": \\\"Ouvrir le lecteur vid\\u00e9o\\\",\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Runtime - JSON Manifest\nDESCRIPTION: This JSON snippet defines a runtime environment within the 'extensions.runtimes' array of a unified manifest (`manifest.json`). It configures a runtime named 'CommandsRuntime' for handling ribbon button actions, specifying its code page (`commands.html`), lifetime, and associating it with an action ('executeFunction') identified by a placeholder `TODO1` (to be replaced with 'toggleProtection').\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"runtimes\": [\n    {\n        \"id\": \"CommandsRuntime\",\n        \"type\": \"general\",\n        \"code\": {\n            \"page\": \"https://localhost:3000/commands.html\"\n        },\n        \"lifetime\": \"short\",\n        \"actions\": [\n            {\n                \"id\": <!--TODO1: Set the action ID -->,\n                \"type\": \"executeFunction\",\n            }\n        ]\n    }       \n]\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Slides by Index in PowerPoint Add-ins (JavaScript)\nDESCRIPTION: This snippet illustrates how to navigate between slides using relative indices like First, Last, Previous, or Next. It calls `Office.context.document.goToByIdAsync` with one of the `Office.Index` enum values (e.g., `Office.Index.Next`) and `Office.GoToType.Index`. This example specifically shows navigating to the next slide. Assumes an `app.showNotification` function exists for displaying status messages.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/powerpoint-add-ins.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction goToSlideByIndex() {\n    const goToFirst = Office.Index.First;\n    const goToLast = Office.Index.Last;\n    const goToPrevious = Office.Index.Previous;\n    const goToNext = Office.Index.Next;\n\n    Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            app.showNotification(\"Action failed with error: \" + asyncResult.error.message);\n        } else {\n            app.showNotification(\"Navigation successful\");\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Specific Slide by ID in PowerPoint Add-ins (JavaScript)\nDESCRIPTION: This code snippet demonstrates navigating to a specific slide using its ID. It calls the `Office.context.document.goToByIdAsync` method, passing the slide ID (previously stored in `Globals.firstSlideId`) and `Office.GoToType.Slide`. This function is typically used in conjunction with a function like `getSelectedRange` to first obtain the target slide's ID. Assumes an `app.showNotification` function exists for displaying results.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/powerpoint-add-ins.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction goToFirstSlide() {\n    Office.context.document.goToByIdAsync(Globals.firstSlideId, Office.GoToType.Slide, function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            app.showNotification(\"Action failed with error: \" + asyncResult.error.message);\n        } else {\n            app.showNotification(\"Navigation successful\");\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the WebExtension Part in Open XML for Office Add-ins\nDESCRIPTION: This XML snippet shows the structure of the `webextension` part required in an Office document's Open XML markup to embed add-in information. It includes references (`we:reference`) to the add-in's store, version, and ID, along with properties (`we:properties`) like `Office.AutoShowTaskpaneWithDocument`, which must be set to `true` to enable the auto-open feature. Placeholder values like `[ADD-IN ID PER MANIFEST]` need to be replaced with actual add-in details.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/automatically-open-a-task-pane-with-a-document.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<we:webextension xmlns:we=\"http://schemas.microsoft.com/office/webextensions/webextension/2010/11\" id=\"[ADD-IN ID PER MANIFEST]\">\n  <we:reference id=\"[GUID or AppSource asset ID]\" version=\"[your add-in version]\" store=\"[Pointer to store or catalog]\" storeType=\"[Store or catalog type]\"/>\n  <we:alternateReferences/>\n  <we:properties>\n   <we:property name=\"Office.AutoShowTaskpaneWithDocument\" value=\"true\"/>\n  </we:properties>\n  <we:bindings/>\n  <we:snapshot xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"/>\n</we:webextension>\n```\n\n----------------------------------------\n\nTITLE: Defining/Importing Notification Function in functions.js (JavaScript)\nDESCRIPTION: This JavaScript snippet, intended for `function.js`, demonstrates how the `showNotification` function is made available. Although the surrounding text mentions importing the function, the code actually shows the *definition* of `showNotification` again, identical to the one in `taskpane.js`. The function targets an HTML element with ID `item-subject` and sets its `innerHTML` to the passed `message`. In a real implementation, this would typically be an import statement like `import { showNotification } from './taskpane.js';`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-get-started.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport function showNotification(message){\n  const label = document.getElementById(\"item-subject\");\n  label.innerHTML = message;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Office Dictionary Add-in Manifest (XML)\nDESCRIPTION: This XML snippet shows a complete example manifest file for a task pane Office Add-in configured as a dictionary. It defines essential properties like ID, Version, ProviderName, DisplayName, Description, IconUrl, SupportUrl, Hosts, DefaultSettings (SourceLocation), Permissions, and the dictionary-specific `<Dictionary>` section.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<OfficeApp xmlns=\"http://schemas.microsoft.com/office/appforoffice/1.0\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:type=\"TaskPaneApp\">\n  <Id>7164e750-dc86-49c0-b548-1bac57abdc7c</Id>\n  <Version>15.0</Version>\n  <ProviderName>Microsoft Office Demo Dictionary</ProviderName>\n  <DefaultLocale>en-us</DefaultLocale>\n  <!--DisplayName is the name that will appear in the user's list of applications.-->\n  <DisplayName DefaultValue=\"Microsoft Office Demo Dictionary\" />\n  <!--Description is a 2-3 sentence description of this dictionary. -->\n  <Description DefaultValue=\"The Microsoft Office Demo Dictionary is an example built to demonstrate how a\n    publisher can create a dictionary that integrates with Office. It doesn't return real definitions.\" />\n  <!--IconUrl is the URI for the icon that will appear in the user's list of applications.-->\n  <IconUrl DefaultValue=\"http://contoso/_layouts/images/general/office_logo.jpg\" />\n  <SupportUrl DefaultValue=\"[Insert the URL of a page that provides support information for the app]\" />\n  <!--Hosts specifies the kind of Office application your dictionary add-in will support.\n      You shouldn't have to modify this area.-->\n  <Hosts>\n    <Host Name=\"Document\"/>\n  </Hosts>\n  <DefaultSettings>\n    <!--SourceLocation is the URL for your dictionary.-->\n    <SourceLocation DefaultValue=\"http://contoso/ExampleDictionary/DictionaryHome.html\" />\n  </DefaultSettings>\n  <!--Permissions is the set of permissions a user will have to give your dictionary.\n      If you need write access, such as to allow a user to replace the highlighted word with a synonym,\n      use ReadWriteDocument. -->\n  <Permissions>ReadDocument</Permissions>\n  <Dictionary>\n    <!--TargetDialects is the set of regional languages your dictionary contains. For example, if your\n        dictionary applies to Spanish (Mexico) and Spanish (Peru), but not Spanish (Spain), you can specify\n        that here. Do not put more than one language (for example, Spanish and English) here. Publish\n        separate languages as separate dictionaries. -->\n    <TargetDialects>\n      <TargetDialect>EN-AU</TargetDialect>\n      <TargetDialect>EN-BZ</TargetDialect>\n      <TargetDialect>EN-CA</TargetDialect>\n      <TargetDialect>EN-029</TargetDialect>\n      <TargetDialect>EN-HK</TargetDialect>\n      <TargetDialect>EN-IN</TargetDialect>\n      <TargetDialect>EN-ID</TargetDialect>\n      <TargetDialect>EN-IE</TargetDialect>\n      <TargetDialect>EN-JM</TargetDialect>\n      <TargetDialect>EN-MY</TargetDialect>\n      <TargetDialect>EN-NZ</TargetDialect>\n      <TargetDialect>EN-PH</TargetDialect>\n      <TargetDialect>EN-SG</TargetDialect>\n      <TargetDialect>EN-ZA</TargetDialect>\n      <TargetDialect>EN-TT</TargetDialect>\n      <TargetDialect>EN-GB</TargetDialect>\n      <TargetDialect>EN-US</TargetDialect>\n      <TargetDialect>EN-ZW</TargetDialect>\n    </TargetDialects>\n    <!--QueryUri is the address of this dictionary's XML web service (which is used to put definitions in\n        additional contexts, such as the spelling checker.)-->\n    <QueryUri DefaultValue=\"http://contoso/ExampleDictionary/WebService.asmx/Define?word=\"/>\n    <!--Citation Text, Dictionary Name, and Dictionary Home Page will be combined to form the citation line\n        (for example, this would produce \"Examples by: Contoso\",\n        where \"Contoso\" is a hyperlink to http://www.contoso.com).-->\n    <CitationText DefaultValue=\"Examples by: \" />\n    <DictionaryName DefaultValue=\"Contoso\" />\n    <DictionaryHomePage DefaultValue=\"http://www.contoso.com\" />\n  </Dictionary>\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Styling and Formatting an Excel Slicer using Office JS API\nDESCRIPTION: This snippet demonstrates how to modify the visual appearance and properties of an existing slicer named 'Fruit Slicer'. It sets the slicer's caption, position (left, top), dimensions (height, width), and applies a predefined style ('SlicerStyleLight6'). These changes are applied within an `Excel.run` block.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    let slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    slicer.caption = \"Fruit Types\";\n    slicer.left = 395;\n    slicer.top = 15;\n    slicer.height = 135;\n    slicer.width = 150;\n    slicer.style = \"SlicerStyleLight6\";\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Removing a Setting from Office Settings - JavaScript\nDESCRIPTION: This snippet removes the 'themeColor' setting from the Office.js Settings property bag in memory. The remove method accepts a case-sensitive string key; if the key does not exist, no error is thrown. The removed setting is not persisted until saveAsync is called. Office.js must be referenced.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.document.settings.remove('themeColor');\n```\n\n----------------------------------------\n\nTITLE: Requesting Document Read Permission in Unified Manifest (JSON)\nDESCRIPTION: Illustrates how to request the 'Document.Read.User' permission within the 'authorization.permissions.resourceSpecific' section of a unified manifest file (JSON format) for a Microsoft 365 Add-in. This specific delegated permission allows the add-in to read the document content but not write to it, following the principle of least privilege.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/support-for-task-pane-and-content-add-ins.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"authorization\": {\n   \"permissions\": {\n     \"resourceSpecific\": [\n       ...\n       {\n         \"name\": \"Document.Read.User\",\n         \"type\": \"Delegated\"\n       },\n     ]\n   }\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Online Meeting Details in Office Add-in - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to append custom online meeting details to an Outlook meeting using the Office.js API within an add-in. It defines the HTML details, assigns the current mailbox item, and registers a function command expected by the add-in manifest. The solution fetches the appointment's current HTML body, appends new meeting information, and updates the appointment, ensuring to signal completion status for the event. Required dependencies: Office.js library, Office add-in context. Key parameters: the composed meeting body (as HTML) and Office event arguments. Expected inputs/outputs: modifies the meeting body and signals the result to the Office host. Constraints include only admin-installed add-ins being supported, honoring a one-minute completion timeout, and usage within the context of Outlook's Meeting compose experience.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 1. How to construct online meeting details.\\n// Not shown: How to get the meeting organizer's ID and other details from your service.\\nconst newBody = '<br>' +\\n    '<a href=\\\"https://contoso.com/meeting?id=123456789\\\" target=\\\"_blank\\\">Join Contoso meeting</a>' +\\n    '<br><br>' +\\n    'Phone Dial-in: +1(123)456-7890' +\\n    '<br><br>' +\\n    'Meeting ID: 123 456 789' +\\n    '<br><br>' +\\n    'Want to test your video connection?' +\\n    '<br><br>' +\\n    '<a href=\\\"https://contoso.com/testmeeting\\\" target=\\\"_blank\\\">Join test meeting</a>' +\\n    '<br><br>';\\n\\nlet mailboxItem;\\n\\n// Office is ready.\\nOffice.onReady(function () {\\n        mailboxItem = Office.context.mailbox.item;\\n    }\\n);\\n\\n// 2. How to define and register a function command named `insertContosoMeeting` (referenced in the manifest)\\n//    to update the meeting body with the online meeting details.\\nfunction insertContosoMeeting(event) {\\n    // Get HTML body from the client.\\n    mailboxItem.body.getAsync(\\\"html\\\",\\n        { asyncContext: event },\\n        function (getBodyResult) {\\n            if (getBodyResult.status === Office.AsyncResultStatus.Succeeded) {\\n                updateBody(getBodyResult.asyncContext, getBodyResult.value);\\n            } else {\\n                console.error(\\\"Failed to get HTML body.\\\");\\n                getBodyResult.asyncContext.completed({ allowEvent: false });\\n            }\\n        }\\n    );\\n}\\n// Register the function.\\nOffice.actions.associate(\\\"insertContosoMeeting\\\", insertContosoMeeting);\\n\\n// 3. How to implement a supporting function `updateBody`\\n//    that appends the online meeting details to the current body of the meeting.\\nfunction updateBody(event, existingBody) {\\n    // Append new body to the existing body.\\n    mailboxItem.body.setAsync(existingBody + newBody,\\n        { asyncContext: event, coercionType: \\\"html\\\" },\\n        function (setBodyResult) {\\n            if (setBodyResult.status === Office.AsyncResultStatus.Succeeded) {\\n                setBodyResult.asyncContext.completed({ allowEvent: true });\\n            } else {\\n                console.error(\\\"Failed to set HTML body.\\\");\\n                setBodyResult.asyncContext.completed({ allowEvent: false });\\n            }\\n        }\\n    );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Getting the Presentation File URL in PowerPoint Add-ins (JavaScript)\nDESCRIPTION: This code demonstrates retrieving the URL of the current presentation file. It uses the `Office.context.document.getFilePropertiesAsync` method. The callback function accesses the `fileUrl` from the `asyncResult.value.url` property. It includes a check to notify the user if the file hasn't been saved yet (indicated by an empty URL). Assumes an `app.showNotification` function is available for displaying the URL or the message.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/powerpoint-add-ins.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction getFileUrl() {\n    // Gets the URL of the current file.\n    Office.context.document.getFilePropertiesAsync(function (asyncResult) {\n        const fileUrl = asyncResult.value.url;\n        if (fileUrl === \"\") {\n            app.showNotification(\"The file hasn't been saved yet. Save the file and try again.\");\n        } else {\n            app.showNotification(fileUrl);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Taskpane Part in Open XML for Office Add-ins\nDESCRIPTION: This XML snippet illustrates the `taskpane` part used in Open XML to configure the appearance and behavior of an add-in's task pane. It references the corresponding `webextension` part using `wetp:webextensionref`. Key attributes include `dockstate`, `width`, and `visibility`. Setting `visibility` to \"0\" requires users to manually install the add-in initially, while \"1\" triggers an automatic opening and trust prompt on the first launch.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/automatically-open-a-task-pane-with-a-document.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<wetp:taskpane dockstate=\"right\" visibility=\"0\" width=\"350\" row=\"4\" xmlns:wetp=\"http://schemas.microsoft.com/office/webextensions/taskpanes/2010/11\">\n  <wetp:webextensionref xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" r:id=\"rId1\" />\n</wetp:taskpane>\n```\n\n----------------------------------------\n\nTITLE: Adding Office JS Binding from Named Item (JavaScript)\nDESCRIPTION: This function demonstrates how to create a 'matrix' type binding associated with a pre-existing named item called 'myRange' in the Office document. It uses the `addFromNamedItemAsync` method, assigns the ID 'myMatrix' to the new binding, and logs the result or error message using a helper `write` function. Requires the Office JS API and an existing named item 'myRange'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction bindNamedItem() {\n    Office.context.document.bindings.addFromNamedItemAsync(\"myRange\", \"matrix\", {id:'myMatrix'}, function (result) {\n        if (result.status == 'succeeded'){\n            write('Added new binding with type: ' + result.value.type + ' and id: ' + result.value.id);\n            }\n        else\n            write('Error: ' + result.error.message);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Updating the Webpack Entry Configuration for Dialog\nDESCRIPTION: This JavaScript code shows the complete `entry` object in `webpack.config.js` after adding the new 'popup' entry. It defines multiple entry points ('polyfill', 'taskpane', 'commands', 'popup') for webpack to create separate bundles.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_51\n\nLANGUAGE: js\nCODE:\n```\nentry: {\n  polyfill: \"@babel/polyfill\",\n  taskpane: \"./src/taskpane/taskpane.js\",\n  commands: \"./src/commands/commands.js\",\n  popup: \"./src/dialogs/popup.js\"\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Office Add-in Dialog UI Logic with jQuery and Office.js - JavaScript\nDESCRIPTION: This snippet initializes the dialog UI functionality for an Office Add-in using JavaScript and jQuery. It listens for UI events, loads and manages GitHub Gists via the GitHub API, passes configuration values back to the parent add-in using Office.context.ui.messageParent, and handles error or warning conditions. Dependencies include Office.js and jQuery. Key parameters fetched from the URL include 'warn', 'gitHubUserName', and 'defaultGistId'. Inputs are user selections and URL parameters; outputs are configuration messages sent to the Office host. This code should be placed in ./src/settings/dialog.js and requires jQuery and the Office.js runtime to function correctly.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function() {\n  'use strict';\n\n  // The onReady function must be run each time a new page is loaded.\n  Office.onReady(function() {\n    $(document).ready(function() {\n      if (window.location.search) {\n        // Check if warning should be displayed.\n        const warn = getParameterByName('warn');\n\n        if (warn) {\n          $('.not-configured-warning').show();\n        } else {\n          // See if the config values were passed.\n          // If so, pre-populate the values.\n          const user = getParameterByName('gitHubUserName');\n          const gistId = getParameterByName('defaultGistId');\n\n          $('#github-user').val(user);\n          loadGists(user, function(success) {\n            if (success) {\n              $('.ms-ListItem').removeClass('is-selected');\n              $('input').filter(function() {\n                return this.value === gistId;\n              }).addClass('is-selected').attr('checked', 'checked');\n              $('#settings-done').removeAttr('disabled');\n            }\n          });\n        }\n      }\n\n      // When the GitHub username changes,\n      // try to load gists.\n      $('#github-user').on('change', function() {\n        $('#gist-list').empty();\n        const ghUser = $('#github-user').val();\n\n        if (ghUser.length > 0) {\n          loadGists(ghUser);\n        }\n      });\n\n      // When the Done button is selected, send the\n      // values back to the caller as a serialized\n      // object.\n      $('#settings-done').on('click', function() {\n        const settings = {};\n        settings.gitHubUserName = $('#github-user').val();\n        const selectedGist = $('.ms-ListItem.is-selected');\n\n        if (selectedGist) {\n          settings.defaultGistId = selectedGist.val();\n          sendMessage(JSON.stringify(settings));\n        }\n      });\n    });\n  });\n\n  // Load gists for the user using the GitHub API\n  // and build the list.\n  function loadGists(user, callback) {\n    getUserGists(user, function(gists, error) {\n      if (error) {\n        $('.gist-list-container').hide();\n        $('#error-text').text(JSON.stringify(error, null, 2));\n        $('.error-display').show();\n\n        if (callback) callback(false);\n      } else {\n        $('.error-display').hide();\n        buildGistList($('#gist-list'), gists, onGistSelected);\n        $('.gist-list-container').show();\n\n        if (callback) callback(true);\n      }\n    });\n  }\n\n  function onGistSelected() {\n    $('.ms-ListItem').removeClass('is-selected').removeAttr('checked');\n    $(this).children('.ms-ListItem').addClass('is-selected').attr('checked', 'checked');\n    $('.not-configured-warning').hide();\n    $('#settings-done').removeAttr('disabled');\n  }\n\n  function sendMessage(message) {\n    Office.context.ui.messageParent(message);\n  }\n\n  function getParameterByName(name, url) {\n    if (!url) {\n      url = window.location.href;\n    }\n\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    const regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n      results = regex.exec(url);\n\n    if (!results) return null;\n\n    if (!results[2]) return '';\n\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sample Complete Webpack Plugins Array with All Add-in Assets - JavaScript\nDESCRIPTION: This snippet shows a finished webpack plugins array including HtmlWebpackPlugin for taskpane, commands, and dialog pages as well as a comprehensive CopyWebpackPlugin configuration. It manages HTML, CSS, assets, and manifest copying and transformation during build. To use, substitute the relevant variables (e.g., buildType, dev, urlDev, urlProd) and ensure all asset paths are accessible. The plugins array supports multi-page bundles and static asset integration for the Office Add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    filename: \"taskpane.html\",\n    template: \"./src/taskpane/taskpane.html\",\n    chunks: [\"polyfill\", \"taskpane\"],\n  }),\n  new CopyWebpackPlugin({\n    patterns: [\n      {\n        from: \"./src/taskpane/taskpane.css\",\n        to: \"taskpane.css\",\n      },\n      {\n        from: \"./src/settings/dialog.css\",\n        to: \"dialog.css\",\n      },\n      {\n        from: \"assets/*\",\n        to: \"assets/[name][ext][query]\",\n      },\n      {\n        from: \"manifest*.json\", // The file extension is \"xml\" if the add-in only manifest is being used.\n        to: \"[name].\" + buildType + \"[ext]\",\n        transform(content) {\n          if (dev) {\n            return content;\n          } else {\n            return content.toString().replace(new RegExp(urlDev, \"g\"), urlProd);\n          }\n        },\n      },\n    ],\n  }),\n  new HtmlWebpackPlugin({\n    filename: \"commands.html\",\n    template: \"./src/commands/commands.html\",\n    chunks: [\"polyfill\", \"commands\"],\n  }),\n  new HtmlWebpackPlugin({\n    filename: \"dialog.html\",\n    template: \"./src/settings/dialog.html\",\n    chunks: [\"polyfill\", \"dialog\"]\n  })\n],\n```\n\n----------------------------------------\n\nTITLE: Checking Commerce Allowance in Office Add-ins using JavaScript\nDESCRIPTION: This JavaScript snippet shows how to determine if commerce activities (like in-app purchases or upsell UI) are permitted within the add-in using the `Office.context.commerceAllowed` property. This is crucial for complying with platform policies, such as those for iPads where commerce is typically restricted (`commerceAllowed` returns `false`). It relies on the Office JavaScript API (`Office.context`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/develop-office-add-ins-for-the-ipad.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst allowCommerce = [Office.context.commerceAllowed](/javascript/api/office/office.context#office-office-context-commerceallowed-member)\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Inspector for Word Add-ins on Mac (Terminal)\nDESCRIPTION: Executes a terminal command using `defaults write` to set the `OfficeWebAddinDeveloperExtras` boolean preference to `true` for Microsoft Word on macOS. This enables the 'Inspect Element' context menu option, allowing developers to debug Word add-ins using Safari Web Inspector. This requires macOS High Sierra and Office version 16.9.1 (Build 18012504) or later, installed from Office.com, not the Mac App Store.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-office-add-ins-on-ipad-and-mac.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndefaults write com.microsoft.Word OfficeWebAddinDeveloperExtras -bool true\n```\n\n----------------------------------------\n\nTITLE: Task Pane Scripts for Handling Button Clicks (HTML/JavaScript)\nDESCRIPTION: Contains an embedded script at the end of `taskpane.html` which defines two functions: `storeSharedValue()` reads the value from the text input and writes it to `window.sharedState`; `getSharedValue()` reads from the same shared state and updates the second textbox. This code assumes it is executed in a browser or webview context with access to the DOM and a globally defined `window.sharedState`. No external dependencies required.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/share-data-and-events-between-custom-functions-and-the-task-pane-tutorial.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n  function storeSharedValue() {\n    let sharedValue = document.getElementById('storeBox').value;\n    window.sharedState = sharedValue;\n  }\n\n  function getSharedValue() {\n    document.getElementById('getBox').value = window.sharedState;\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Ensuring Task Pane Loads with Office.onReady() (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the minimal required call to `Office.onReady()` even when no specific initialization logic is needed. Simply calling `Office.onReady()` ensures that the add-in signals readiness, which is necessary for the task pane to load correctly in some Office application and platform combinations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/initialize-add-in.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.onReady();\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click with State Validation (JavaScript)\nDESCRIPTION: Implements the handler function (`chartFormatButtonHandler`) for the ribbon button click. It first checks a global state variable (`chartFormatButtonEnabled`). If the button is expected to be enabled, it performs its task; otherwise, it calls a `reportError` function and attempts to disable the button again using `disableChartFormat`, adhering to the best practice of validating control state.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction chartFormatButtonHandler() {\n    if (chartFormatButtonEnabled) {\n\n        // Do work here.\n\n    } else {\n        // Report the error and try to make the button unavailable again.\n        reportError(\"That action is not possible at this time.\");\n        disableChartFormat();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing autoRunEvents Array in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet adds an empty `autoRunEvents` array as a property within the \"extensions\" object of the `manifest.json` file. This array will contain definitions for events that the add-in should automatically handle, such as the `OnMessageSend` event.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"autoRunEvents\": [\n  \n  ]\n  \n```\n\n----------------------------------------\n\nTITLE: Setting properties on selected Excel Range proxy object in JavaScript\nDESCRIPTION: This snippet shows how to obtain a Range proxy object for the currently selected range in an Excel workbook and set properties such as fill color, font color, and autofit columns. The code does not execute the queued commands until context.sync() is called in the larger batch. Dependencies include Office.js loaded and a valid request context; requires workbook access. Inputs are via API, outputs are changes in the workbook; additional context.sync() is needed to commit changes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectedRange = context.workbook.getSelectedRange();\nselectedRange.format.fill.color = \"#4472C4\";\nselectedRange.format.font.color = \"white\";\nselectedRange.format.autofitColumns();\n```\n\n----------------------------------------\n\nTITLE: Adding Master Categories to Outlook Mailbox using Office JS\nDESCRIPTION: This snippet demonstrates how to add one or more categories to the master category list for the user's mailbox. It uses the `Office.context.mailbox.masterCategories.addAsync` method, passing an array of category objects, each containing a `displayName` and a `color` (from `Office.MailboxEnums.CategoryColor`). Requires the 'ReadWriteMailbox' permission in the add-in manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/categories.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\nconst masterCategoriesToAdd = [\n    {\n        \"displayName\": \"Urgent!\",\n        \"color\": Office.MailboxEnums.CategoryColor.Preset0\n    }\n];\n\nOffice.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd, function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n        console.log(\"Successfully added categories to master list\");\n    } else {\n        console.log(\"masterCategories.addAsync call failed with error: \" + asyncResult.error.message);\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Options Object for Optional Parameters in JavaScript (Method 1)\nDESCRIPTION: Shows how to define a JavaScript object (`options`) using object literal syntax to hold optional parameters (like `valueFormat` and `filterType`) for asynchronous Office API methods. This named object can then be passed as the `options` argument in the method call.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\n    parameter1: value1,\n    parameter2: value2,\n    ...\n    parameterN: valueN\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\n    valueFormat: \"unformatted\",\n    filterType: \"all\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom XML and Storing Part ID in Settings - JavaScript\nDESCRIPTION: This function creates a custom XML part (as in the previous example) and then stores the generated XML part's ID in the Settings property bag for future retrieval, using a memorable key. This approach enables later lookup by ID. The operation is asynchronous and persists the setting with saveAsync, and requires Office.js and a document surface that supports custom XML parts.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createCustomXmlPartAndStoreId() {\n    const xmlString = \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n    Office.context.document.customXmlParts.addAsync(xmlString,\n        (asyncResult) => {\n            Office.context.document.settings.set('ReviewersID', asyncResult.value.id);\n            Office.context.document.settings.saveAsync();\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Launch Script in Commands HTML (JavaScript in HTML)\nDESCRIPTION: This script element is added to the commands.html file in the Outlook add-in to include the event-handling JavaScript required for dialog button and send mode override features. It loads launchevent.js, which should be generated and present in the build. Dependencies are proper pathing and build output. This enables event-based activation via commands.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\" src=\"../launchevent/launchevent.js\"></script> \n```\n\n----------------------------------------\n\nTITLE: Assigning Event Handlers for Contextual Tab Visibility in Excel (JavaScript)\nDESCRIPTION: This JavaScript snippet, intended for an Excel add-in and typically run within `Office.onReady` after registering the tab, demonstrates how to assign event handlers (`showDataTab`, `hideDataTab`) to the `onActivated` and `onDeactivated` events of all charts on the active worksheet. These handlers are used to control the visibility of a contextual tab based on chart interaction.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady(async () => {\n    const contextualTabJSON = ` ... `; // Assign the JSON string.\n    const contextualTab = JSON.parse(contextualTabJSON);\n    await Office.ribbon.requestCreateControls(contextualTab);\n\n    await Excel.run(context => {\n        const charts = context.workbook.worksheets\n            .getActiveWorksheet()\n            .charts;\n        charts.onActivated.add(showDataTab);\n        charts.onDeactivated.add(hideDataTab);\n        return context.sync();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Control in Contextual Tab JSON\nDESCRIPTION: This JSON object defines a button control within a group's `controls` array. It specifies the control `type` ('Button'), a unique `id`, the `actionId` linking to a defined action, an optional `enabled` state (defaults to true), a `label`, a `superTip` object for the tooltip, and an `icon` array specifying button icons similar to group icons.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"type\": \"Button\",\\n    \"id\": \"CtxBt112\",\\n    \"actionId\": \"executeWriteData\",\\n    \"enabled\": false,\\n    \"label\": \"Write Data\",\\n    \"superTip\": {\\n        \"title\": \"Data Insertion\",\\n        \"description\": \"Use this button to insert data into the document.\"\\n    },\\n    \"icon\": [\\n        {\\n            \"size\": 16,\\n            \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton16x16.png\"\\n        },\\n        {\\n            \"size\": 32,\\n            \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton32x32.png\"\\n        },\\n        {\\n            \"size\": 80,\\n            \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton80x80.png\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Basic VersionOverrides Structure in XML Manifest\nDESCRIPTION: This XML snippet shows the root `<VersionOverrides>` element and its essential child elements (`Requirements`, `Hosts`, `Resources`) within an Office Add-in manifest. This structure is required to define add-in commands and override default behaviors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp>\n...\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/taskpaneappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n    <Requirements>\n      <!-- Add information about requirement sets. -->\n    </Requirements>\n    <Hosts>\n      <Host xsi:type=\"Workbook\">\n        <!-- Add information about form factors. -->\n      </Host>\n    </Hosts>\n    <Resources> \n      <!-- Add information about resources. -->\n    </Resources>\n  </VersionOverrides>\n...\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Rotating and Scaling a Shape in Excel using JavaScript\nDESCRIPTION: This snippet shows how to modify an existing shape named 'Octagon' on a worksheet ('MyWorksheet') using the Excel JavaScript API. It increments the shape's rotation clockwise by 30 degrees using `incrementRotation(30)`. It then ensures the aspect ratio is locked (`lockAspectRatio = true`) and scales the shape's width (and consequently height) by 1.25 times its current size using `scaleWidth()`, specifying the scaling is relative to `Excel.ShapeScaleType.currentSize` and originates from the top-left corner (`Excel.ShapeScaleFrom.scaleFromTopLeft`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// In this sample, the shape \"Octagon\" is rotated 30 degrees clockwise\n// and scaled 25% larger, with the upper-left corner remaining in place.\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"MyWorksheet\");\n\n    let shape = sheet.shapes.getItem(\"Octagon\");\n    shape.incrementRotation(30);\n    shape.lockAspectRatio = true;\n    shape.scaleWidth(\n        1.25,\n        Excel.ShapeScaleType.currentSize,\n        Excel.ShapeScaleFrom.scaleFromTopLeft);\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Writable Parent Property (PageLayout.zoom) in Excel JavaScript API\nDESCRIPTION: Shows the correct way to set a writable parent property ('PageLayout.zoom') that requires its subproperties to be set together. This is done by assigning a new object literal ('PageLayoutZoomOptions') to the parent property directly.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n```js\n// PageLayout.zoom.scale must be set by assigning PageLayout.zoom to a PageLayoutZoomOptions object.\nsheet.pageLayout.zoom = { scale: 200 };\n```\n```\n\n----------------------------------------\n\nTITLE: Writing a Unit Test with Jest and office-addin-mock\nDESCRIPTION: Demonstrates a unit test written using the Jest framework. It tests an asynchronous function `getSelectedRangeAddress`, passing the `contextMock` object as the context. The test expects the function to return the address 'C2:G3', which is provided by the mock setup.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest(\"getSelectedRangeAddress should return the address of the range\", async function () {\n  expect(await getSelectedRangeAddress(contextMock)).toBe(\"C2:G3\");\n});\n```\n\n----------------------------------------\n\nTITLE: Automating Wildcard Trusted Domains Configuration with .reg File for Office Add-ins (reg)\nDESCRIPTION: This snippet provides an example .reg file that includes settings for multiple wildcard trusted domains. It can be imported via the Registry Editor to automate the process for configuring trusted domains for Office Add-ins. The script targets the HKEY_CURRENT_USER path and injects two entries, one for europe.contoso.com and another for africa.contoso.com. Input is the .reg file content; output is modification of the local registry with trusted wildcard domains for all Office Add-ins in Windows.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/trusted-domains.md#_snippet_1\n\nLANGUAGE: reg\nCODE:\n```\nWindows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\WEF\\AllowedAppDomains]\n\"AppDomain1\"=\"https://*.europe.contoso.com\" \n\n[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\WEF\\AllowedAppDomains]\n\"AppDomain2\"=\"https://*.africa.contoso.com\" \n```\n\n----------------------------------------\n\nTITLE: Example Range Formula Response with Blank Formulas in JavaScript\nDESCRIPTION: Shows an example of the data structure returned when reading the `formula` property of a range where some cells do not contain formulas. Cells without formulas are represented by blank strings (`''`) in the 2-D array response.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-blank-null-values.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nrange.formula = [['', '', '=Rand()']];\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery and TypeScript Types with npm - Command Line\nDESCRIPTION: Installs the jQuery library and its TypeScript type definitions as dev dependencies for a Yo Office project. These commands must be run in the root of the add-in project, usually via the VS Code terminal, to make jQuery available for both runtime (JavaScript) and development (TypeScript type safety). Replace versions as needed if Script Lab specifies different libraries.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/create-an-office-add-in-from-script-lab.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm install --save-dev jquery@3.1.1\nnpm install --save-dev @types/jquery@3.3.1\n```\n\n----------------------------------------\n\nTITLE: Specifying Equivalent COM Add-ins in Add-in Only Manifest (Office Add-in, XML)\nDESCRIPTION: This snippet illustrates configuring an equivalent COM add-in within the XML-based manifest for a classic Office Add-in. The <EquivalentAddins> section is added before the closing <VersionOverrides> tag, and the <ProgId> element specifies the COM add-in. No external dependencies are required but correct placement of the element and correct ProgId (case-sensitive) are necessary. This setting ensures Office on Windows hides the Office Add-in UI when the COM add-in is present.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/make-office-add-in-compatible-with-existing-com-add-in.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides>\n  ...\n  <EquivalentAddins>\n    <EquivalentAddin>\n      <ProgId>ContosoCOMAddin</ProgId>\n      <Type>COM</Type>\n    </EquivalentAddin>\n  </EquivalentAddins>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Adding onlineMeetingDetailsOrganizer Context in manifest.json\nDESCRIPTION: This JSON snippet demonstrates adding the `onlineMeetingDetailsOrganizer` context to the `contexts` array within the `extensions.ribbons` section of a `manifest.json`. This ensures the add-in's ribbon customizations appear in the context of organizing online meetings, specifically relevant for mobile scenarios.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"contexts\": [\n    \"meetingDetailsOrganizer\",\n    \"onlineMeetingDetailsOrganizer\"\n],\n```\n\n----------------------------------------\n\nTITLE: Reading and Saving Add-in Configuration Using Office.js RoamingSettings - JavaScript\nDESCRIPTION: This snippet provides functions to read and persist configuration values (username, default gist id) using Office.js RoamingSettings. It abstracts getting and setting config as plain objects, with asynchronous save completion. Dependencies include the Office.js API and a compatible mailbox environment. Inputs are keyed on 'gitHubUserName' and 'defaultGistId', and outputs are plain config objects and async callbacks. Designed for use in Office add-ins and limited to environments where RoamingSettings is available.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getConfig() {\n  const config = {};\n\n  config.gitHubUserName = Office.context.roamingSettings.get('gitHubUserName');\n  config.defaultGistId = Office.context.roamingSettings.get('defaultGistId');\n\n  return config;\n}\n\nfunction setConfig(config, callback) {\n  Office.context.roamingSettings.set('gitHubUserName', config.gitHubUserName);\n  Office.context.roamingSettings.set('defaultGistId', config.defaultGistId);\n\n  Office.context.roamingSettings.saveAsync(callback);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Clearing Unified Manifest Outlook Add-in Cache on Windows - Batch\nDESCRIPTION: This snippet specifies the local path that stores cached resources for Outlook add-ins leveraging the Unified manifest for Microsoft 365. Manually deleting the contents of this directory removes cached files, which may be required when troubleshooting updated manifests. No external utilities are needed aside from file system access; successful execution removes add-in cache related to Outlook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/clear-cache.md#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n%userprofile%\\AppData\\Local\\Microsoft\\Outlook\\HubAppFileCache\n```\n\n----------------------------------------\n\nTITLE: Defining the 'insertImage' Function Stub in JavaScript\nDESCRIPTION: This JavaScript snippet defines an asynchronous function `insertImage` which serves as the core logic for inserting an image. It utilizes the `Word.run` pattern to execute Word JavaScript API commands in batch. A placeholder comment `// TODO1: Queue commands to insert an image.` indicates where the specific API calls for image insertion should be added.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertImage() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to insert an image.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Mailbox REST API URL Using Office.js in JavaScript\nDESCRIPTION: Illustrates how to retrieve the REST endpoint host used for Outlook REST APIs using Office.context.mailbox.restUrl. No additional dependencies are required beyond the Office.js runtime. The code stores the REST host URL in restHost, typically used as a prefix for subsequent REST API calls. This value should be concatenated with resource paths to correctly target the user's mailbox in REST requests.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/use-rest-api.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example: https://outlook.office.com\\nconst restHost = Office.context.mailbox.restUrl;\n```\n\n----------------------------------------\n\nTITLE: Processing Messages from the Dialog and Closing It (JavaScript)\nDESCRIPTION: This function handles messages received from the dialog by extracting the message property from the argument object, updating the innerHTML of the label with ID 'user-name', and closing the dialog via dialog.close(). Dependencies include Office.js and a valid dialog object. It takes one parameter, arg, containing the data sent from the dialog, and has the side effect of updating the DOM and closing the dialog window.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nfunction processMessage(arg) {\\n    document.getElementById(\\\"user-name\\\").innerHTML = arg.message;\\n    dialog.close();\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Resources for Controls in Contextual Tab JSON\nDESCRIPTION: This JSON snippet shows the structure for defining multiple image sizes (32x32 and 80x80) for a control within a contextual tab definition. It specifies the size and the URL (`sourceLocation`) for each image resource.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n`{\n  \"actions\": [\n    // ... other actions\n  ],\n  \"tabs\": [\n    {\n      // ... tab properties\n      \"groups\": [\n        {\n          // ... group properties\n          \"controls\": [\n            {\n                // ... control properties like type, id, label\n                \"icons\": [\n                    {\n                        \"size\": 32,\n                        \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton32x32.png\"\n                    },\n                    {\n                        \"size\": 80,\n                        \"sourceLocation\": \"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton80x80.png\"\n                    }\n                ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}`\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Slide ID in PowerPoint using Office JS Common API\nDESCRIPTION: This JavaScript function `getSelectedSlideID` retrieves the ID of the currently selected slide in PowerPoint. It uses the Office Common API method `Office.context.document.getSelectedDataAsync` with `Office.CoercionType.SlideRange`. The asynchronous call is wrapped in an `OfficeExtension.Promise` for better integration with async/await patterns. It resolves with the selected slide's ID (e.g., '267#') or rejects on error.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/insert-slides-into-presentation.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getSelectedSlideID() {\n  return new OfficeExtension.Promise<string>(function (resolve, reject) {\n    Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {\n      try {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n          reject(console.error(asyncResult.error.message));\n        } else {\n          resolve(asyncResult.value.slides[0].id);\n        }\n      }\n      catch (error) {\n        reject(console.log(error));\n      }\n    });\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Office.js and Placeholder Logic in Dialog JavaScript\nDESCRIPTION: This JavaScript snippet shows the initial structure for `popup.js`. It uses `Office.onReady()` to ensure the Office.js library is initialized before running any Office-specific code. Placeholders (`TODO1`, `TODO2`) indicate where event handler assignments and function definitions will be added.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_47\n\nLANGUAGE: js\nCODE:\n```\nOffice.onReady((info) => {\n    // TODO1: Assign handler to the OK button.\n});\n\n// TODO2: Create the OK button handler.\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Insertion Logic in JavaScript (TODO1)\nDESCRIPTION: This JavaScript snippet replaces the 'TODO1' placeholder in 'insertTextIntoRange'. It gets the currently selected range in the document and queues a command to insert the string ' (M365)' at the end of that range using 'Range.insertText' and 'Word.InsertLocation.end'. Requires the 'context' object and 'Word.InsertLocation'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = context.document;\nconst originalRange = doc.getSelection();\noriginalRange.insertText(\" (M365)\", Word.InsertLocation.end);\n```\n\n----------------------------------------\n\nTITLE: Defining Actions and Shortcuts with Localization Tokens in Extended Overrides (JSON)\nDESCRIPTION: Illustrates an initial structure for an extended overrides JSON file associated with an Add-in only manifest. It defines an action (`ShowTaskpane`) and a shortcut, using tokens like `${resource.ShowTaskpane_action_name}` and `${resource.ShowTaskpane_default_shortcut}` to reference localized strings defined in a separate resource file specified by `ResourceUrl` in the manifest. Note: This example is marked as incomplete in the source text, lacking the required inline default resource definitions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"actions\": [\n        {\n            \"id\": \"ShowTaskpane\",\n            \"type\": \"ExecuteFunction\",\n            \"name\": \"${resource.ShowTaskpane_action_name}\"\n        }\n    ],\n    \"shortcuts\": [\n        {\n            \"action\": \"ShowTaskpane\",\n            \"key\": {\n                \"default\": \"${resource.ShowTaskpane_default_shortcut}\"\n            }\n        }\n    ] \n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Dictionary Name for Citations (XML)\nDESCRIPTION: This XML snippet shows the `<DictionaryName>` element within an Office Add-in manifest's `<Dictionary>` section. The `DefaultValue` attribute specifies the name of the dictionary (e.g., 'Bing Dictionary') which will be used as the link text in the citation line, following the text specified by `<CitationText>`. Localization is supported.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<DictionaryName DefaultValue=\"Bing Dictionary\" />\n```\n\n----------------------------------------\n\nTITLE: Tagging a Document for Auto-Open via Office.js\nDESCRIPTION: Uses the Office.js API to set and save a document setting named 'Office.AutoShowTaskpaneWithDocument' to true. This client-side action tags the current document, enabling the configured task pane (specified in the add-in manifest) to open automatically on subsequent loads. Requires the Office.js library and the document context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/automatically-open-a-task-pane-with-a-document.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nOffice.context.document.settings.set(\"Office.AutoShowTaskpaneWithDocument\", true);\nOffice.context.document.settings.saveAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling OData AJAX Request Errors in JavaScript\nDESCRIPTION: Defines the `getProjectDataErrorHandler` function, which serves as the error callback for the jQuery AJAX request made in `retrieveOData`. It receives the response data, error code (textStatus), and error message. It displays the error code and message in the UI element with ID `odataText` and calls the `throwError` function (presumably another helper function not shown in this snippet) to potentially log or display the error further.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nfunction getProjectDataErrorHandler(data, errorCode, errorMessage) {\n    $(\"#odataText\").text(\"Error code: \" + errorCode + \"\\r\\nError message: \\r\\n\"\n        + errorMessage);\n    throwError(errorCode, errorMessage);\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler to Insert Text Button in JavaScript\nDESCRIPTION: This JavaScript code, intended to replace `TODO4` in `taskpane.js`, selects the HTML button element with the ID `insert-text` and assigns a click event handler. When clicked, it invokes the `clearMessage` function, passing the `insertText` function as a callback, effectively queueing the text insertion logic after clearing any status messages. Assumes `clearMessage` and `insertText` functions are defined elsewhere.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById(\"insert-text\").onclick = () => clearMessage(insertText);\n```\n\n----------------------------------------\n\nTITLE: Updating Tab Visibility and Contextual Tab Button State Simultaneously (JavaScript)\nDESCRIPTION: This JavaScript function `myContextChanges` shows how to use `Office.ribbon.requestUpdate` to update the state of the contextual tab itself along with its visibility. It makes the contextual tab (`CtxTab1`) visible and, in the same request, enables a button (`MyButton`) located within a group (`CustomGroup111`) on that *same* contextual tab.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myContextChanges() {\n    Office.ribbon.requestUpdate({\n        tabs: [\n            {\n                id: \"CtxTab1\",\n                visible: true,\n                groups: [\n                    {\n                        id: \"CustomGroup111\",\n                        controls: [\n                            {\n                                id: \"MyButton\",\n                                enabled: true\n                           }\n                       ]\n                   }\n               ]\n            }\n        ]\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared State Variable in Global Scope (JavaScript)\nDESCRIPTION: This snippet creates a global variable named `sharedState` on the `window` object and initializes it to \"empty\". It must be placed at the top of the main JavaScript file (functions.js) to ensure the custom functions and the task pane scripts share the same data context. No dependencies are required beyond a browser-like environment; only a global `window` object is assumed. No parameters are involved, and it establishes an initial value for shared state.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/share-data-and-events-between-custom-functions-and-the-task-pane-tutorial.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.sharedState = \"empty\";\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc @type for Variable IntelliSense in JavaScript\nDESCRIPTION: Demonstrates using the JSDoc `@type` tag within a comment block (`/** ... */`) to specify the data type (`Excel.Range`) of a JavaScript variable (`subsetRange`). This enables Visual Studio IntelliSense to infer and suggest members (properties and methods) available on that type for the variable.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-javascript-intellisense-in-visual-studio.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {Excel.Range} */\nlet subsetRange;\n```\n\n----------------------------------------\n\nTITLE: Storing Value in Shared State via Custom Function (JavaScript)\nDESCRIPTION: Defines a custom function `storeValue` that accepts a string and stores it in the `window.sharedState` variable for access by both custom functions and the task pane. The function uses the Office.js custom function JSDoc tags (`@customfunction`) for annotations and is meant to be included in the functions.js module of the add-in. It requires a global `window.sharedState` variable to be in scope. Inputs: `sharedValue` (string). Outputs: a confirmation string. Limitation: only string values are stored.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/share-data-and-events-between-custom-functions-and-the-task-pane-tutorial.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Saves a string value to shared state with the task pane\n * @customfunction STOREVALUE\n * @param {string} value String to write to shared state with task pane.\n * @return {string} A success value\n */\nfunction storeValue(sharedValue) {\n  window.sharedState = sharedValue;\n  return \"value stored\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PreProcessingDialog with NeverShowAgainOption in Outlook Manifest XML\nDESCRIPTION: This XML snippet demonstrates how to configure the <PreProcessingDialog> element in an Outlook Add-in manifest to include a 'Don't show me this message again' option for the spam-reporting dialog. The key element is <NeverShowAgainOption>true</NeverShowAgainOption>, which enables the suppression feature. This code must be placed inside the manifest XML for your add-in, and the appropriate resource IDs should be set for localization. No additional dependencies required beyond valid manifest schema compliance.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n...\n    <PreProcessingDialog>\n      <Title resid=\"PreProcessingDialog.Label\"/>\n      <Description resid=\"PreProcessingDialog.Text\"/>\n      <NeverShowAgainOption>true</NeverShowAgainOption>\n      <MoreInfo>\n        <MoreInfoText resid=\"MoreInfo.Label\"/>\n        <MoreInfoUrl resid=\"MoreInfo.Url\"/>\n      </MoreInfo>\n    </PreProcessingDialog>\n...\n```\n\n----------------------------------------\n\nTITLE: Adding an 'Insert Image' Button in HTML\nDESCRIPTION: This HTML snippet adds a button with the ID 'insert-image' and the class 'ms-Button' to the task pane's HTML structure. This button is intended to trigger the image insertion functionality when clicked. It's placed after the existing 'replace-text' button.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"insert-image\">Insert Image</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Errors with Excel JavaScript API (JavaScript)\nDESCRIPTION: Demonstrates the recommended pattern for handling errors when interacting with Office JavaScript APIs (specifically Excel) using async functions and try/catch statements. The snippet uses jQuery to attach a click handler that safely runs API logic and captures exceptions using a helper function, ensuring robust error handling in asynchronous scenarios. Requires an Office Add-in context, Office.js APIs (especially Excel), and jQuery; parameters include the callback for the action (run) and leverages context.sync() for batching API calls. Inputs are user or UI interactions, while outputs are console logs on completion or error details; developers should extend the error handling to notify end users in production environments.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/application-specific-api-error-handling.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\n$(\"#run\").on(\"click\", () => tryCatch(run));\n\nasync function run() {\n  await Excel.run(async (context) => {\n      // Add your Excel JavaScript API calls here.\n\n      // Await the completion of context.sync() before continuing.\n    await context.sync();\n    console.log(\"Finished!\");\n  });\n}\n\n/** Default helper for invoking an action and handling errors. */\nasync function tryCatch(callback) {\n  try {\n    await callback();\n  } catch (error) {\n    // Note: In a production add-in, you'd want to notify the user through your add-in's UI.\n    console.error(error);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Insertion Logic in JavaScript\nDESCRIPTION: This JavaScript code replaces the `TODO1` placeholder in the `insertHTML` function. First, it gets the last paragraph in the document body and inserts a new blank paragraph after it. Then, it calls the `insertHtml` method on the blank paragraph to insert the provided HTML string ('<p style=\"font-family: verdana;\">Inserted HTML.</p><p>Another paragraph</p>') at the end of that paragraph (`Word.InsertLocation.end`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst blankParagraph = context.document.body.paragraphs.getLast().insertParagraph(\"\", Word.InsertLocation.after);\nblankParagraph.insertHtml('<p style=\"font-family: verdana;\">Inserted HTML.</p><p>Another paragraph</p>', Word.InsertLocation.end);\n```\n\n----------------------------------------\n\nTITLE: Generating a Numbered List in Smart Alerts Dialog - Office.js JavaScript\nDESCRIPTION: Shows how to create an ordered/numbered list in a Smart Alerts dialog using the event.completed method with Markdown. This pattern relies on the Office.js event-based activation API (requirement set 1.15). Each list item starts with a number and period, ends with '\\r', and the errorMessageMarkdown property encapsulates the message. The object passed must include allowEvent and errorMessageMarkdown fields.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagesend-onappointmentsend-events.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nevent.completed({\n  allowEvent: false,\n  ...\n  errorMessageMarkdown: \"Help your recipients know your intentions when you send a mail item. To set the sensitivity level of an item:\\n\\n1. Select **File** > **Properties**.\\r2. From the **Sensitivity** dropdown, select **Normal**, **Personal**, **Private**, or **Confidential**.\\r3. Select **Close**.\\r\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a JWT Payload for Exchange Identity Token - JSON\nDESCRIPTION: This snippet illustrates a representative JWT payload for an Exchange identity token. The payload details authentication claims such as audience (\"aud\"), issuer (\"iss\"), validity intervals (\"nbf\", \"exp\"), the application context (\"appctx\"), and whether the add-in is browser-hosted. Developers can use this example to understand the claims available for parsing and validation on their back-end services.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/inside-the-identity-token.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{ \n  \"aud\": \"https://mailhost.contoso.com/IdentityTest.html\", \n  \"iss\": \"00000002-0000-0ff1-ce00-000000000000@mailhost.contoso.com\", \n  \"nbf\": \"1331579055\", \n  \"exp\": \"1331607855\", \n  \"appctxsender\": \"00000002-0000-0ff1-ce00-000000000000@mailhost.context.com\",\n  \"isbrowserhostedapp\": \"true\",\n  \"appctx\": { \n    \"msexchuid\": \"53e925fa-76ba-45e1-be0f-4ef08b59d389@mailhost.contoso.com\",\n    \"version\": \"ExIdTok.V1\",\n    \"amurl\": \"https://mailhost.contoso.com:443/autodiscover/metadata/json/1\"\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Setting Excel Range Value with OADate using Moment-MSDate in JavaScript\nDESCRIPTION: This snippet demonstrates how to set an Excel cell to the current moment's timestamp by converting a JavaScript Date through Moment.js to Excel's OADate format. It requires the Excel JavaScript API and the Moment-MSDate plug-in, as well as an existing worksheet named 'Sample'. The range 'B4' is updated with the OADate value and formatted for human-readable display. Input: none (uses current system time); Output: sets and formats a date in cell B4.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-dates.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let now = Date.now();\n    let nowMoment = moment(now);\n    let nowMS = nowMoment.toOADate();\n\n    let dateRange = sheet.getRange(\"B4\");\n    dateRange.values = [[nowMS]];\n\n    dateRange.numberFormat = [[\"[$-409]m/d/yy h:mm AM/PM;@\"]];\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Pages from a Section using OneNote JavaScript API (JavaScript)\nDESCRIPTION: This JavaScript function, intended for use within a OneNote Office Add-in, retrieves the pages in the current section by accessing the application-specific API through proxy objects and the batching/sync pattern. It demonstrates the use of the OneNote.run pattern for context management, loading specific properties ('id', 'title') of the 'pages' collection, using 'context.sync()' to execute queued commands, and iterating over the items with jQuery for display or processing. Dependencies: Office.js (OneNote API), jQuery for enumeration. Expected input: none—function retrieves from context. Output: logs page titles and IDs to the console. Limitations: Requires running within supported Office/OneNote context; batch operations must be explicitly synced before reading data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/onenote/onenote-add-ins-programming-overview.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function getPagesInSection() {\n    await OneNote.run(async (context) => {\n\n        // Get the pages in the current section.\n        const pages = context.application.getActiveSection().pages;\n\n        // Queue a command to load the id and title for each page.\n        pages.load('id,title');\n\n        // Run the queued commands, and return a promise to indicate task completion.\n        await context.sync();\n            \n        // Read the id and title of each page.\n        $.each(pages.items, function(index, page) {\n            let pageId = page.id;\n            let pageTitle = page.title;\n            console.log(pageTitle + ': ' + pageId);\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler for 'Change Quantity Term' Button in JavaScript\nDESCRIPTION: Selects the HTML button with the ID `replace-text` and assigns its `onclick` event handler to execute the `replaceText` function, wrapped within a `tryCatch` block for error handling. This connects the UI button to the logic for replacing selected text. This code snippet should be placed inside the `Office.onReady` function call in `taskpane.js`. Depends on the button existing in the DOM and the `tryCatch` and `replaceText` functions being defined.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"replace-text\").onclick = () => tryCatch(replaceText);\n```\n\n----------------------------------------\n\nTITLE: Setting Add-in Settings using Office JS API in JavaScript\nDESCRIPTION: Demonstrates how to set a custom add-in setting using the `Office.context.document.settings.set` method in JavaScript. This example sets the 'themeColor' setting to 'green'. Changes made with `set` are stored in memory and require a subsequent call to `Settings.saveAsync` to be persisted within the host document (Word, Excel, PowerPoint).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/support-for-task-pane-and-content-add-ins.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nOffice.context.document.settings.set('themeColor', 'green');\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Ribbon Controls using OverriddenByRibbonApi in XML Manifest\nDESCRIPTION: This XML snippet demonstrates how to use the `<OverriddenByRibbonApi>true</OverriddenByRibbonApi>` element within an Office Add-in manifest. When placed inside a `<Control>` (or `<Group>`, or menu `<Item>`) on a custom core tab, it ensures that the specific control ('Contoso.MyButton1' in this example) will only be visible on platforms that do not support custom contextual tabs (i.e., where `requestCreateControls` is unavailable). The parent group and tab remain visible, providing a fallback UI.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp ...>\n  ...\n  <VersionOverrides ...>\n    ...\n    <Hosts>\n      <Host ...>\n        ...\n        <DesktopFormFactor>\n          <ExtensionPoint ...>\n            <CustomTab ...>              \n              ...\n              <Group ...>\n                ...\n                <Control ... id=\"Contoso.MyButton1\">\n                  <OverriddenByRibbonApi>true</OverriddenByRibbonApi>\n                  ...\n                  <Action ...>\n...\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Overriding Send Mode in Outlook Add-in Event Handler (JavaScript)\nDESCRIPTION: This JavaScript function `getAttachmentsCallback` handles the result of retrieving attachments in an Outlook `OnMessageSend` event. It checks if any attachments are inline images. If an inline image is found, it completes the event prompting the user with a custom message, a button to open a task pane (`commandId`), and overrides the default send mode to `PromptUser` using `sendModeOverride`. If no attachments are present, it suggests adding one. If only non-inline attachments exist, it allows the event (`allowEvent: true`). Requires Office JavaScript API Requirement Set 1.14 or later for `sendModeOverride`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getAttachmentsCallback(asyncResult) {\n  const event = asyncResult.asyncContext;\n  if (asyncResult.value.length > 0) {\n    for (let i = 0; i < asyncResult.value.length; i++) {\n      if (asyncResult.value[i].isInline == false) {\n        event.completed({ allowEvent: true });\n        return;\n      }\n    }\n\n    event.completed({\n      allowEvent: false,\n      errorMessage: \"Looks like the body of your message includes an image or an inline file. Would you like to attach a copy of it to the message?\",\n      // TIP: In addition to the formatted message, it's recommended to also set a\n      // plain text message in the errorMessage property for compatibility on\n      // older versions of Outlook clients.\n      errorMessageMarkdown: \"Looks like the body of your message includes an image or an inline file. Would you like to attach a copy of it to the message?\\n\\n**Tip**: For guidance on how to attach a file, see [Attach files in Outlook](https://www.contoso.com/help/attach-files-in-outlook).\",\n      cancelLabel: \"Attach a copy\",\n      commandId: \"msgComposeOpenPaneButton\",\n      sendModeOverride: Office.MailboxEnums.SendModeOverride.PromptUser\n    });\n  } else {\n    event.completed({\n      allowEvent: false,\n      errorMessage: \"Looks like you're forgetting to include an attachment.\",\n      // TIP: In addition to the formatted message, it's recommended to also set a\n      // plain text message in the errorMessage property for compatibility on\n      // older versions of Outlook clients.\n      errorMessageMarkdown: \"Looks like you're forgetting to include an attachment.\\n\\n**Tip**: For guidance on how to attach a file, see [Attach files in Outlook](https://www.contoso.com/help/attach-files-in-outlook).\",\n      cancelLabel: \"Add an attachment\",\n      commandId: \"msgComposeOpenPaneButton\"\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying an Existing Worksheet with Excel JavaScript API\nDESCRIPTION: Duplicates the currently active worksheet using the `copy()` method. The copy is inserted immediately after the original sheet by specifying `Excel.WorksheetPositionType.after` and providing the active sheet as the `relativeTo` parameter. The new sheet name will be based on the original name (e.g., 'Sheet1 (2)').\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(Excel.WorksheetPositionType.after, sampleSheet);\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Installation Link for Office Add-ins (Microsoft AppSource, URL Template, Plaintext)\nDESCRIPTION: This snippet provides a URL template to generate a direct installation link for Office Add-ins targeting Excel, Word, or PowerPoint web applications. The template requires the developer to substitute placeholders for the appropriate AppSource data: 'linkId' (determines the Office web endpoint), 'addInId' (AppSource listing ID), and 'addInName' (URL-encoded add-in title). No external code dependencies are required beyond generating or retrieving these values. The output is a URL that can be shared with customers to facilitate direct add-in installation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_0\n\nLANGUAGE: URL Template\nCODE:\n```\nhttps://go.microsoft.com/fwlink/?linkid={{linkId}}&templateid={{addInId}}&templatetitle={{addInName}}\n```\n\n----------------------------------------\n\nTITLE: Defining an Outlook Module Extension in XML Manifest\nDESCRIPTION: This XML snippet shows the `<VersionOverrides>` section of an Outlook add-in manifest file, specifically configuring a module extension. It defines the `Module` extension point type, specifies the source location (`residExtensionPointUrl`), label (`residExtensionPointLabel`), and a custom command surface with a tab, group, and button. The button triggers the `changeToAssociateRate` JavaScript function defined in the file specified by `residFunctionFileUrl`. Resource definitions for icons, URLs, and strings are included in the `<Resources>` section. This configuration is specific to the `DesktopFormFactor` for classic Outlook on Windows.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/extension-module-outlook-add-ins.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\"\n                  xsi:type=\"VersionOverridesV1_0\">\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\"\n                    xsi:type=\"VersionOverridesV1_1\">\n    <Requirements>\n      <bt:Sets DefaultMinVersion=\"1.3\">\n        <bt:Set Name=\"Mailbox\"/>\n      </bt:Sets>\n    </Requirements>\n    <Hosts>\n      <Host xsi:type=\"MailHost\">\n        <DesktopFormFactor>\n          <!-- Sets the URL of the JavaScript file that contains the code to\n               run the operations of a module extension add-in. -->\n          <FunctionFile resid=\"residFunctionFileUrl\"/>\n          <!--Configures the add-in as a module extension. -->\n          <ExtensionPoint xsi:type=\"Module\">\n            <SourceLocation resid=\"residExtensionPointUrl\"/>\n            <Label resid=\"residExtensionPointLabel\"/>\n            <CommandSurface>\n              <CustomTab id=\"idTab\">\n                <Group id=\"idGroup\">\n                  <Label resid=\"residGroupLabel\"/>\n                  <Control xsi:type=\"Button\" id=\"group.changeToAssociate\">\n                    <Label resid=\"residChangeToAssociateLabel\"/>\n                    <Supertip>\n                      <Title resid=\"residChangeToAssociateLabel\"/>\n                      <Description resid=\"residChangeToAssociateDesc\"/>\n                    </Supertip>\n                    <Icon>\n                      <bt:Image size=\"16\" resid=\"residAssociateIcon16\"/>\n                      <bt:Image size=\"32\" resid=\"residAssociateIcon32\"/>\n                      <bt:Image size=\"80\" resid=\"residAssociateIcon80\"/>\n                    </Icon>\n                    <Action xsi:type=\"ExecuteFunction\">\n                      <FunctionName>changeToAssociateRate</FunctionName>\n                    </Action>\n                  </Control>\n                </Group>\n                <Label resid=\"residCustomTabLabel\"/>\n              </CustomTab>\n            </CommandSurface>\n          </ExtensionPoint>\n        </DesktopFormFactor>\n      </Host>\n    </Hosts>\n    <Resources>\n      <bt:Images>\n        <bt:Image id=\"residAssociateIcon16\"\n                  DefaultValue=\"https://localhost:3000/assets/associate-16.png\"/>\n        <bt:Image id=\"residAssociateIcon32\"\n                  DefaultValue=\"https://localhost:3000/assets/associate-32.png\"/>\n        <bt:Image id=\"residAssociateIcon80\"\n                  DefaultValue=\"https://localhost:3000/assets/associate-80.png\"/>\n      </bt:Images>\n      <bt:Urls>\n        <bt:Url id=\"residFunctionFileUrl\"\n                DefaultValue=\"https://localhost:3000/module.html\"/>\n        <bt:Url id=\"residExtensionPointUrl\"\n                DefaultValue=\"https://localhost:3000/module.html\"/>\n      </bt:Urls>\n      <bt:ShortStrings>\n        <bt:String id=\"residExtensionPointLabel\"\n                    DefaultValue=\"Billable Hours\"/>\n        <bt:String id=\"residGroupLabel\"\n                    DefaultValue=\"Change billing rate\"/>\n        <bt:String id=\"residCustomTabLabel\"\n                    DefaultValue=\"Billable hours\"/>\n        <bt:String id=\"residChangeToAssociateLabel\"\n                    DefaultValue=\"Associate Rate\"/>\n      </bt:ShortStrings>\n      <bt:LongStrings>\n        <bt:String id=\"residChangeToAssociateDesc\"\n                    DefaultValue=\"Change to the associate billing rate: $127/hr\"/>\n      </bt:LongStrings>\n    </Resources>\n  </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Queue and Sync Excel Worksheet Property for Reading (JavaScript)\nDESCRIPTION: Queues command to load the Excel worksheet's protection/protected property and awaits context sync to update proxy state. This step ensures that the property value can be reliably read in subsequent code. Prerequisites: must be called after obtaining the worksheet object and prior to accessing sheet.protection.protected. Part of the standard Office.js async read pattern.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_42\n\nLANGUAGE: js\nCODE:\n```\nsheet.load('protection/protected');\\nawait context.sync();\n```\n\n----------------------------------------\n\nTITLE: Referencing office.js from the CDN for Improved Performance - HTML Script Tag - HTML\nDESCRIPTION: This HTML snippet demonstrates including Microsoft's Office.js library from the official CDN, replacing a local script reference in the add-in for better performance and reliability. The CDN script source is suitable for production deployment and ensures users receive the latest available client-side Office API. The snippet requires an HTML context and must be placed within the <head> or <body> of the main application file. Inputs/outputs are governed by Office.js; no additional parameters. Limitation: Requires Internet access for the CDN to load.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Command Line for Project Navigation\nDESCRIPTION: This command changes the current working directory to the root folder of the newly created custom functions add-in project. It is necessary to execute subsequent build and start commands within the correct project context. The command requires the 'My custom functions add-in' folder to be present in the filesystem.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial-create-custom-functions.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My custom functions add-in\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Control Visibility in Unified Manifest using JSON\nDESCRIPTION: This JSON snippet shows how to configure a specific control (`Contoso.MyButton1`) within a custom core tab group in the Unified Manifest for Microsoft 365. By setting `\"overriddenByRibbonApi\": true`, this control will only be displayed on platforms or Office versions that do *not* support custom contextual tabs, providing a fallback UI. The sibling control `Contoso.MyButton2` will always be visible.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"ribbons\": [\n            ...\n            {\n                ...\n                \"tabs\": [\n                    {\n                        \"id\": \"MyTab\",\n                        \"groups\": [\n                            {\n                                ...\n                                \"controls\": [\n                                    {\n                                        \"id\": \"Contoso.MyButton1\",\n                                        ...\n                                        \"overriddenByRibbonApi\": true\n                                    },\n                                    {\n                                        \"id\": \"Contoso.MyButton2\",\n                                        ...\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Inserting Data at Cursor Position with Office.js - JavaScript\nDESCRIPTION: This code sample demonstrates how to detect the current item body format in an Outlook compose form and insert either HTML or plain text data at the user's cursor location using Office.js. The code depends on the Office JavaScript API and is intended for Outlook add-ins running in compose scenarios. It uses asynchronous callbacks for error handling and supports optional context variables. Inputs include the desired data to insert and optional parameters; the method inserts up to 1,000,000 characters at the current selection.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/insert-data-in-the-body.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet item;\n\n// Confirms that the Office.js library is loaded.\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Outlook) {\n        item = Office.context.mailbox.item;\n        setItemBody();\n    }\n});\n\n// Inserts data at the current cursor position.\nfunction setItemBody() {\n    // Identify the body type of the mail item.\n    item.body.getTypeAsync((asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(asyncResult.error.message);\n            return;\n        }\n\n        // Insert data of the appropriate type into the body.\n        if (asyncResult.value === Office.CoercionType.Html) {\n            // Insert HTML into the body.\n            item.body.setSelectedDataAsync(\n                \"<b> Kindly note we now open 7 days a week.</b>\",\n                { coercionType: Office.CoercionType.Html, asyncContext: { optionalVariable1: 1, optionalVariable2: 2 } },\n                (asyncResult) => {\n                    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                        console.log(asyncResult.error.message);\n                        return;\n                    }\n\n                    /*\n                      Run additional operations appropriate to your scenario and\n                      use the optionalVariable1 and optionalVariable2 values as needed.\n                    */\n            });\n        }\n        else {\n            // Insert plain text into the body.\n            item.body.setSelectedDataAsync(\n                \"Kindly note we now open 7 days a week.\",\n                { coercionType: Office.CoercionType.Text, asyncContext: { optionalVariable1: 1, optionalVariable2: 2 } },\n                (asyncResult) => {\n                    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                        console.log(asyncResult.error.message);\n                        return;\n                    }\n\n                    /*\n                      Run additional operations appropriate to your scenario and\n                      use the optionalVariable1 and optionalVariable2 values as needed.\n                    */\n            });\n        }\n    });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Excel Custom Functions Add-in After Code Changes - Command Line\nDESCRIPTION: This command triggers the build process again using npm after modifying the project's source code. It is a necessary step to apply and test new or updated custom functions before loading the add-in in Excel. The project must already be initialized and set up with the proper npm scripts.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial-create-custom-functions.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Locating PowerPoint Add-in Sideloading Folder on Mac\nDESCRIPTION: Specifies the user library path where PowerPoint Add-in manifest files should be placed for sideloading on macOS. The '<username>' placeholder must be replaced with the actual user's home folder name. This 'wef' folder might need to be created manually if it doesn't exist.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/sideload-an-office-add-in-on-mac.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/Users/<username>/Library/Containers/com.microsoft.Powerpoint/Data/Documents/wef\n```\n\n----------------------------------------\n\nTITLE: Styling Office Add-in UI Elements with CSS\nDESCRIPTION: This CSS snippet provides styling for the Office add-in's HTML UI elements, applying a Segoe-based font for modern appearance, coloring headings, and styling button elements for a professional and clean look. The style sheet must be saved as Program.css and loaded by the HTML. It targets the body, h1/h2, and input elements of type submit and button, ensuring consistency and usability across the add-in's interface.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nbody\\n{\\n    font-family: \\\"Segoe UI Light\\\",\\\"Segoe UI\\\",Tahoma,sans-serif;\\n}\\nh1,h2\\n{\\n    text-decoration-color:#4ec724;\\n}\\ninput [type=\\\"submit\\\"], input[type=\\\"button\\\"]\\n{\\n    height:24px;\\n    padding-left:1em;\\n    padding-right:1em;\\n    background-color:white;\\n    border:1px solid grey;\\n    border-color: #dedfe0 #b9b9b9 #b9b9b9 #dedfe0;\\n    cursor:pointer;\\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Formula Cells using getSpecialCellsOrNullObject in Excel JavaScript API (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to find formula-containing cells in the current selection using getSpecialCellsOrNullObject. It safely checks for the presence of matching cells by awaiting context.sync and inspecting the isNullObject property before operating on results. This prevents errors if no such cells exist; when found, the cells are colored pink. Dependencies: Office JS Excel library context, asynchronous execution.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-special-cells.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let range = context.workbook.getSelectedRange();\n    let formulaRanges = range.getSpecialCellsOrNullObject(Excel.SpecialCellType.formulas);\n    await context.sync();\n        \n    if (formulaRanges.isNullObject) {\n        console.log(\"No cells have formulas\");\n    }\n    else {\n        formulaRanges.format.fill.color = \"pink\";\n    }\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Cycling Through Excel PivotTable Layout Types using Office JS API\nDESCRIPTION: This snippet shows how to change the layout type of a PivotTable. It gets the \"Farm Sales\" PivotTable, loads its current `layoutType`, and then conditionally sets the `layoutType` property to cycle through the available styles: \"Compact\", \"Outline\", and \"Tabular\". Requires an existing PivotTable named \"Farm Sales\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    // Change the PivotLayout.type to a new type.\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.layout.load(\"layoutType\");\n    await context.sync();\n\n    // Cycle between the three layout types.\n    if (pivotTable.layout.layoutType === \"Compact\") {\n        pivotTable.layout.layoutType = \"Outline\";\n    } else if (pivotTable.layout.layoutType === \"Outline\") {\n        pivotTable.layout.layoutType = \"Tabular\";\n    } else {\n        pivotTable.layout.layoutType = \"Compact\";\n    }\n\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting an Excel Comment Thread using JavaScript\nDESCRIPTION: This snippet demonstrates how to delete an entire comment thread, including all its replies. It retrieves the comment associated with a specific cell ('MyWorksheet!A2') using `getItemByCell` and then calls the `delete()` method on the comment object.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Delete the comment thread at A2 on the \"MyWorksheet\" worksheet.\n    context.workbook.comments.getItemByCell(\"MyWorksheet!A2\").delete();\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Sideload Add-in Package with Teams Toolkit CLI\nDESCRIPTION: Sideloads an Office Add-in using the Teams Toolkit CLI. Requires a pre-packaged zip file containing the unified manifest and specified icon files. The `<relative-path-to-zip-file>` placeholder should be replaced with the path to this zip package. The command outputs information including a unique Title ID required for uninstallation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/sideload-add-in-with-unified-manifest.md#_snippet_3\n\nLANGUAGE: command-line\nCODE:\n```\nteamsapp install --file-path <relative-path-to-zip-file>\n```\n\n----------------------------------------\n\nTITLE: Applying Whole Number Data Validation in Excel using JavaScript\nDESCRIPTION: This snippet demonstrates how to apply a data validation rule to the range \"B2:C5\" on the active worksheet. It utilizes the `wholeNumber` type within the `DataValidationRule`, setting `formula1` to 0 and the `operator` to `Excel.DataValidationOperator.greaterThan`. This configuration ensures that only integers greater than 0 are considered valid input for the specified range. The operation is performed within an `Excel.run` block, which is standard practice for interacting with the Excel JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-data-validation.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let range = sheet.getRange(\"B2:C5\");\n\n    range.dataValidation.rule = {\n            wholeNumber: {\n                formula1: 0,\n                operator: Excel.DataValidationOperator.greaterThan\n            }\n        };\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Rows to an Existing Excel Table using Office.js - JavaScript\nDESCRIPTION: Appends new rows to the table named \"ExpensesTable\" in the \"Sample\" worksheet, specifying insertion into the table rather than after it. Uses the Excel JavaScript API and formats the table by auto-fitting columns and rows. Prerequisite: Table \"ExpensesTable\" must exist in the specified worksheet. Expects a predefined table and sheet; output is an expanded table with new data rows.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This code sample shows how to add rows to a table that already exists \\n// on a worksheet named Sample.\\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n    let expensesTable = sheet.tables.getItem(\\\"ExpensesTable\\\");\\n\\n    expensesTable.rows.add(\\n        null, // index, Adds rows to the end of the table.\\n        [\\n            [\\\"1/16/2017\\\", \\\"THE PHONE COMPANY\\\", \\\"Communications\\\", \\\"$120\\\"],\\n            [\\\"1/20/2017\\\", \\\"NORTHWIND ELECTRIC CARS\\\", \\\"Transportation\\\", \\\"$142\\\"],\\n            [\\\"1/20/2017\\\", \\\"BEST FOR YOU ORGANICS COMPANY\\\", \\\"Groceries\\\", \\\"$27\\\"],\\n            [\\\"1/21/2017\\\", \\\"COHO VINEYARD\\\", \\\"Restaurant\\\", \\\"$33\\\"],\\n            [\\\"1/25/2017\\\", \\\"BELLOWS COLLEGE\\\", \\\"Education\\\", \\\"$350\\\"],\\n            [\\\"1/28/2017\\\", \\\"TREY RESEARCH\\\", \\\"Other\\\", \\\"$135\\\"],\\n            [\\\"1/31/2017\\\", \\\"BEST FOR YOU ORGANICS COMPANY\\\", \\\"Groceries\\\", \\\"$97\\\"]\\n        ], \\n        true, // alwaysInsert, Specifies that the new rows be inserted into the table.\\n    );\\n\\n    sheet.getUsedRange().format.autofitColumns();\\n    sheet.getUsedRange().format.autofitRows();\\n\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Categories from an Outlook Item using Office JS\nDESCRIPTION: This snippet shows how to remove specific categories from the currently selected Outlook message or appointment item. It uses the `Office.context.mailbox.item.categories.removeAsync` method, providing an array of category display names (strings) to be removed from the item.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/categories.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n```js\nconst categoriesToRemove = [\"Urgent!\"];\n\nOffice.context.mailbox.item.categories.removeAsync(categoriesToRemove, function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n        console.log(\"Successfully removed categories\");\n    } else {\n        console.log(\"categories.removeAsync call failed with error: \" + asyncResult.error.message);\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting a Slide by Index - PowerPoint JavaScript\nDESCRIPTION: This JavaScript function demonstrates deleting a slide in a PowerPoint presentation using the Office JavaScript API. It retrieves the slide at index 3 (4th slide, zero-based indexing) from the SlideCollection and calls the `delete()` method. The operation is synchronized with the Office host using `context.sync()`. Prerequisites include the PowerPoint add-in context and that the presentation contains enough slides. Outputs are removal of the specified slide from the presentation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/add-slides.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function deleteSlide() {\n    await PowerPoint.run(async function(context) {\n\n        // The slide index is zero-based. \n        const slide = context.presentation.slides.getItemAt(3);\n        slide.delete();\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Range Format Properties using set() in Excel JavaScript API\nDESCRIPTION: Illustrates using the 'set()' method on an Excel Range object to update multiple nested format properties (fill color, font name, font color) simultaneously by passing a structured JavaScript object. Assumes data exists in the target range B2:E2.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:E2\");\n    range.set({\n        format: {\n            fill: {\n                color: '#4472C4'\n            },\n            font: {\n                name: 'Verdana',\n                color: 'white'\n            }\n        }\n    });\n    range.format.autofitColumns();\n\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Insertion Logic in JavaScript\nDESCRIPTION: This JavaScript code snippet replaces the `TODO1` placeholder within the `insertImage` function. It uses the `context.document.body.insertInlinePictureFromBase64` method to insert an inline picture into the Word document. The image data comes from the previously imported `base64Image` variable, and it's inserted at the end of the document body using `Word.InsertLocation.end`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.document.body.insertInlinePictureFromBase64(base64Image, Word.InsertLocation.end);\n```\n\n----------------------------------------\n\nTITLE: Displaying Local Item Creation Time via Office.js Helper - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates retrieving the UTC-correct item creation time from the Outlook mailbox item, converting it to the appropriate local client time dictionary using Office.context.mailbox.convertToLocalClientTime, and displaying specific components (hours and minutes) in the UI. Requires the Office.js library and an Outlook add-in context. Inputs include the item creation date property; output is a formatted time. Note that the conversion automatically adapts to Outlook on Windows, Mac, or web/mobile clients as detailed by the SDK.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/tips-for-handling-date-values-in-outlook-add-ins.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This date is UTC-correct.\nconst myDate = Office.context.mailbox.item.dateTimeCreated;\n\n// Call helper method to get date in dictionary format, \n// represented in the appropriate local time.\n// In Outlook on Windows (classic) and Outlook on Mac, this dictionary format \n// is in the client computer time zone.\n// In Outlook on the web, on mobile devices, or in new Outlook on Windows,\n// this dictionary format is in the EAC time zone.\nconst myLocalDictionaryDate = Office.context.mailbox.convertToLocalClientTime(myDate);\n\n// Display different parts of the dictionary date.\ndocument.write (\"The item was created at \" + myLocalDictionaryDate[\"hours\"] + \n    \":\" + myLocalDictionaryDate[\"minutes\"]);)\n```\n\n----------------------------------------\n\nTITLE: Enabling a Ribbon Button via Event Handler (JavaScript)\nDESCRIPTION: Defines the `enableChartFormat` function, which serves as an event handler. It constructs a JSON object specifying the target ribbon button (`ChartFormatButton`) and sets its `enabled` property to `true`. It then calls `Office.ribbon.requestUpdate` to apply this change to the Office ribbon UI. Assumes the corresponding ribbon elements are defined in the add-in manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction enableChartFormat() {\n    const button =\n        {\n            id: \"ChartFormatButton\",\n            enabled: true\n        };\n    const parentGroup =\n        {\n            id: \"MyGroup\",\n            controls: [button]\n        };\n    const parentTab =\n        {\n            id: \"CustomChartTab\",\n            groups: [parentGroup]\n        };\n    const ribbonUpdater = { tabs: [parentTab] };\n    Office.ribbon.requestUpdate(ribbonUpdater);\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Formula Cells with Logical or Numeric Results using Excel JavaScript API (JavaScript)\nDESCRIPTION: This JavaScript snippet identifies and colors all formula cells in the used worksheet range that evaluate to logical or numeric results, using the Excel JavaScript API. It applies the logicalNumbers combined value type filter for granular targeting, and the found cells' fill color is set to pink. Requires Office.js context and Excel.run pattern; useful for data where formulas' return types are important.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-special-cells.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let usedRange = sheet.getUsedRange();\n    let formulaLogicalNumberRanges = usedRange.getSpecialCells(\n        Excel.SpecialCellType.formulas,\n        Excel.SpecialCellValueType.logicalNumbers);\n    formulaLogicalNumberRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Register toggleProtection Function with Office.actions.associate (JavaScript)\nDESCRIPTION: Binds the toggleProtection function to the Office Add-in command action identified by \\\"toggleProtection\\\" in the manifest. Ensures that clicking the corresponding ribbon button will invoke this handler. Must be called after the function is declared; dependency: Office.js runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_40\n\nLANGUAGE: js\nCODE:\n```\nOffice.actions.associate(\"toggleProtection\", toggleProtection);\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Converting Excel Date Value using Moment-MSDate in JavaScript\nDESCRIPTION: This snippet shows how to retrieve a date value stored in an Excel cell (in OADate format) and convert it back into a Moment.js object and a Unix timestamp. Dependencies include the Excel JavaScript API and Moment-MSDate plug-in. The sample targets cell 'B4' on sheet 'Sample', loads its value, converts it using moment.fromOADate(), and prints both moment and timestamp forms to the console. Input: a previously set date value in cell B4; Output: logs moment and timestamp representations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-dates.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let dateRange = sheet.getRange(\"B4\");\n    dateRange.load(\"values\");\n\n    await context.sync();\n\n    let nowMS = dateRange.values[0][0];\n\n    // Log the date as a moment.\n    let nowMoment = moment.fromOADate(nowMS);\n    console.log(`get (moment): ${JSON.stringify(nowMoment)}`);\n\n    // Log the date as a UNIX-style timestamp.\n    let now = nowMoment.unix();\n    console.log(`get (timestamp): ${now}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog with Custom Size - Office.js - JavaScript\nDESCRIPTION: This code demonstrates how to open a dialog with custom height and width through a configuration object passed to displayDialogAsync. The values for height and width are expressed as percentages of the device screen (e.g., height: 30 results in 30% of screen height). The configuration object is optional but allows for a tailored dialog experience. Requirements are the same as for the basic dialog, and both required parameters (the URL and the config object) must be present. The feature requires Office.js support.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.ui.displayDialogAsync(\"https://www.contoso.com/myDialog.html\", { height: 30, width: 20 });\n```\n\n----------------------------------------\n\nTITLE: Checking Common API Requirement Set Support in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use `Office.context.requirements.isSetSupported` to check if a Common API requirement set (e.g., 'CustomXmlParts') is supported by the host Office application. When the version parameter is omitted, it defaults to checking for version '1.1'. This allows conditional execution based on the availability of the specified common API set.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-api-requirements-runtime.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nif (Office.context.requirements.isSetSupported('CustomXmlParts')) {\n    // Run code that uses API members from the CustomXmlParts requirement set.\n} else {\n    // Run alternate code when the user's Office application doesn't support the CustomXmlParts requirement set.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Office Add-in Debugging - JSON\nDESCRIPTION: This JSON snippet provides two NPM scripts for package.json to facilitate starting the Office Add-in debugging environment and the add-in's development web server. The 'start:desktop' script invokes office-addin-debugging with manifest and desktop target placeholders, while 'dev-server' is to be replaced with the actual command to launch your project's web server. Dependencies include Node.js, NPM, and office-addin-debugging. You must customize $MANIFEST_FILE$ and $SERVER_START$ for your project. The scripts streamline launching the add-in and its web assets when using VS Code debugging. Ensure office-addin-debugging is installed in your project.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-desktop-using-edge-chromium.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"start:desktop\": \"office-addin-debugging start $MANIFEST_FILE$ desktop\",\n\"dev-server\": \"$SERVER_START$\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Table by Merchant Column - Office.js JavaScript\nDESCRIPTION: Provides code to sort the 'ExpensesTable' in Excel by the second column (index 1), which is assumed to be the Merchant column. Builds a sortFields array specifying the sort key and order (descending), then applies it using the TableSort.apply method. Requires Office.js and a table named 'ExpensesTable' present. Ensures sorting is based on the actual column index, and affects the visible order of table rows as presented to the user.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\\nconst expensesTable = currentWorksheet.tables.getItem('ExpensesTable');\\nconst sortFields = [\\n    {\\n        key: 1,            // Merchant column\\n        ascending: false,\\n    }\\n];\\n\\nexpensesTable.sort.apply(sortFields);\n```\n\n----------------------------------------\n\nTITLE: Reading Consistent RangeAreas Properties - Excel JavaScript API (JavaScript)\nDESCRIPTION: This snippet shows how to read filled color and column status properties from a RangeAreas object when all member ranges have consistent values. It sets the fill color to pink for two columns, loads the 'format/fill/color' and 'isEntireColumn' properties, and outputs them, demonstrating that consistent properties return the expected value. Requires Office.js, Excel API, and worksheet context. Inputs include range addresses; outputs are the fill color (as RGB) and a boolean indicating if all areas are entire columns.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-multiple-ranges.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\\n\\n    // The ranges are the F column and the H column.\\n    let rangeAreas = sheet.getRanges(\\\"F:F, H:H\\\");  \\n    rangeAreas.format.fill.color = \\\"pink\\\";\\n\\n    rangeAreas.load(\\\"format/fill/color, isEntireColumn\\\");\\n    await context.sync();\\n\\n    console.log(rangeAreas.format.fill.color); // #FFC0CB\\n    console.log(rangeAreas.isEntireColumn); // true\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Resources in Office Add-in Manifest (XML)\nDESCRIPTION: This XML snippet defines the `<Resources>` section for an Office Add-in manifest (manifest.xml). It specifies IDs and default values for images (icons), URLs (for commands and taskpanes), short strings (labels, titles), and long strings (tooltips) used by the add-in's UI elements. These resources are referenced elsewhere in the manifest using their respective IDs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<Resources>\n  <bt:Images>\n    <bt:Image id=\"Icon.16x16\" DefaultValue=\"https://localhost:3000/assets/icon-16.png\"/>\n    <bt:Image id=\"Icon.32x32\" DefaultValue=\"https://localhost:3000/assets/icon-32.png\"/>\n    <bt:Image id=\"Icon.80x80\" DefaultValue=\"https://localhost:3000/assets/icon-80.png\"/>\n  </bt:Images>\n  <bt:Urls>\n    <bt:Url id=\"Commands.Url\" DefaultValue=\"https://localhost:3000/commands.html\"/>\n    <bt:Url id=\"Taskpane.Url\" DefaultValue=\"https://localhost:3000/taskpane.html\"/>\n  </bt:Urls>\n  <bt:ShortStrings>\n    <bt:String id=\"GroupLabel\" DefaultValue=\"Git the gist\"/>\n    <bt:String id=\"TaskpaneButton.Label\" DefaultValue=\"Insert gist\"/>\n    <bt:String id=\"TaskpaneButton.Title\" DefaultValue=\"Insert gist\"/>\n    <bt:String id=\"FunctionButton.Label\" DefaultValue=\"Insert default gist\"/>\n    <bt:String id=\"FunctionButton.Title\" DefaultValue=\"Insert default gist\"/>\n  </bt:ShortStrings>\n  <bt:LongStrings>\n    <bt:String id=\"TaskpaneButton.Tooltip\" DefaultValue=\"Displays a list of your gists and allows you to insert their contents into the current message.\"/>\n    <bt:String id=\"FunctionButton.Tooltip\" DefaultValue=\"Inserts the content of the gist you mark as default into the current message.\"/>\n  </bt:LongStrings>\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Specifying AddinCommands Capability - JSON Manifest\nDESCRIPTION: This JSON snippet shows the 'requirements.capabilities' array within a unified manifest (`manifest.json`). It ensures the add-in declares its requirement for the 'AddinCommands' capability set, specifying a minimum version of '1.1', which is necessary for defining custom ribbon buttons and actions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n\"requirements\": {\n    \"capabilities\": [\n        {\n            \"name\": \"AddinCommands\",\n            \"minVersion\": \"1.1\"\n        }\n    ]\n},\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Select in Add-in Manifest VersionOverrides (XML)\nDESCRIPTION: This XML snippet shows the `<VersionOverrides>` section of an Outlook add-in's manifest configured for multi-select support. It defines the minimum requirement set (Mailbox 1.15), specifies an extension point (`MessageReadCommandSurface`), and includes a button control that triggers a `ShowTaskpane` action. The key elements enabling multi-select are `<SupportsNoItemContext>true</SupportsNoItemContext>` and `<SupportsMultiSelect>true</SupportsMultiSelect>` added within the `<Action>` element. Resource definitions for icons, URLs, and strings are also included.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/item-multi-select.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n    <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n        <Requirements>\n            <bt:Sets DefaultMinVersion=\"1.15\">\n              <bt:Set Name=\"Mailbox\"/>\n            </bt:Sets>\n        </Requirements>\n        <Hosts>\n            <Host xsi:type=\"MailHost\">\n                <DesktopFormFactor>\n                    <!-- Message Read mode-->\n                    <ExtensionPoint xsi:type=\"MessageReadCommandSurface\">\n                        <OfficeTab id=\"TabDefault\">\n                            <Group id=\"msgReadGroup\">\n                                <Label resid=\"GroupLabel\"/>\n                                <Control xsi:type=\"Button\" id=\"msgReadOpenPaneButton\">\n                                    <Label resid=\"TaskpaneButton.Label\"/>\n                                    <Supertip>\n                                        <Title resid=\"TaskpaneButton.Label\"/>\n                                        <Description resid=\"TaskpaneButton.Tooltip\"/>\n                                    </Supertip>\n                                    <Icon>\n                                        <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                                        <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                                        <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                                    </Icon>\n                                    <Action xsi:type=\"ShowTaskpane\">\n                                        <SourceLocation resid=\"Taskpane.Url\"/>\n                                        <SupportsPinning>false</SupportsPinning>\n                                        <SupportsNoItemContext>true</SupportsNoItemContext>\n                                        <!-- Enables your add-in to activate on multiple selected messages. -->\n                                        <SupportsMultiSelect>true</SupportsMultiSelect>\n                                    </Action>\n                                </Control>\n                            </Group>\n                        </OfficeTab>\n                    </ExtensionPoint>\n                </DesktopFormFactor>\n            </Host>\n        </Hosts>\n        <Resources>\n            <bt:Images>\n              <bt:Image id=\"Icon.16x16\" DefaultValue=\"https://localhost:3000/assets/icon-16.png\"/>\n              <bt:Image id=\"Icon.32x32\" DefaultValue=\"https://localhost:3000/assets/icon-32.png\"/>\n              <bt:Image id=\"Icon.80x80\" DefaultValue=\"https://localhost:3000/assets/icon-80.png\"/>\n            </bt:Images>\n            <bt:Urls>\n              <bt:Url id=\"Taskpane.Url\" DefaultValue=\"https://localhost:3000/taskpane.html\"/>\n            </bt:Urls>\n            <bt:ShortStrings>\n              <bt:String id=\"GroupLabel\" DefaultValue=\"Item Multi-select\"/>\n              <bt:String id=\"TaskpaneButton.Label\" DefaultValue=\"Show Taskpane\"/>\n            </bt:ShortStrings>\n            <bt:LongStrings>\n              <bt:String id=\"TaskpaneButton.Tooltip\" DefaultValue=\"Opens a pane with an option to get information about the selected messages.\"/>\n            </bt:LongStrings>\n        </Resources>\n    </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Defining Mail Add-in Element Order in VersionOverrides v1.0 (XML)\nDESCRIPTION: This XML snippet shows the specific element ordering required within a `<VersionOverrides>` node (schema Version 1.0) for an Office Mail Add-in manifest. It focuses on the structure within `<DesktopFormFactor>`, defining extension points like `OfficeTab`, `CustomTab`, and `OfficeMenu` along with their respective controls and actions. It also includes the standard `Resources` section and notes that a `VersionOverridesV1_1` can be nested.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/manifest-element-ordering.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides>\n    <Description>\n    <Requirements>\n        <Sets>\n            <Set>\n    <Hosts>\n        <Host>\n            <DesktopFormFactor>\n                <ExtensionPoint>\n                    <OfficeTab>\n                        <Group>\n                            <Label>\n                            <Control>\n                                <Label>\n                                <Supertip>\n                                    <Title>\n                                    <Description>\n                                <Icon>\n                                    <Image>\n                                <Action>\n                                    <SourceLocation>\n                                    <FunctionName>\n                    <CustomTab>\n                        <Group>\n                            <Label>\n                            <Icon>\n                                <Image>\n                            <Control>\n                                <Label>\n                                <Supertip>\n                                    <Title>\n                                    <Description>\n                                <Icon>\n                                    <Image>  \n                                <Action>\n                                    <TaskpaneId>\n                                    <SourceLocation>\n                                    <Title>\n                                    <FunctionName>\n                                <Items>\n                                    <Item>\n                                        <Label>\n                                        <Supertip>\n                                            <Title>\n                                            <Description>\n                                        <Action>\n                                            <TaskpaneId>\n                                            <SourceLocation>\n                                            <Title>\n                                            <FunctionName>\n                        <Label>\n                    <OfficeMenu>\n                        <Control>\n                            <Label>\n                            <Supertip>\n                                <Title>\n                                <Description>\n                            <Icon>\n                                <Image>\n                            <Action>\n                                <TaskpaneId>\n                                <SourceLocation>\n                                <Title>\n                                <FunctionName>\n                            <Items>\n                                <Item>\n                                    <Label>\n                                    <Supertip>\n                                        <Title>\n                                        <Description>\n                                    <Action>\n                                        <TaskpaneId>\n                                        <SourceLocation>\n                                        <Title>\n                                        <FunctionName>\n    <Resources>\n        <Images>\n            <Image>\n                <Override>\n        <Urls>\n            <Url>\n                <Override>\n        <ShortStrings>\n            <String>\n                <Override>\n        <LongStrings>\n            <String>\n                <Override>\n    <VersionOverrides>*\n```\n\n----------------------------------------\n\nTITLE: Displaying Locale-Specific Greetings Using Office JavaScript API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to determine the display language of the Office application using the Office.js API and present a locale-specific greeting message. The function checks Office.context.displayLanguage and uses a switch-case to display different greetings for 'en-US' and 'fr-FR'. A helper function writes the resulting message to a DOM element with id 'message'. Dependencies include the Office.js API and an HTML element with id 'message'. Input is the user's Office UI language setting; output is a greeting appended to the DOM.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction sayHelloWithDisplayLanguage() {\\n    const myLanguage = Office.context.displayLanguage;\\n    switch (myLanguage) {\\n        case 'en-US':\\n            write('Hello!');\\n            break;\\n        case 'fr-FR':\\n            write('Bonjour!');\\n            break;\\n    }\\n}\\n\\n// Function that writes to a div with id='message' on the page.\\nfunction write(message) {\\n    document.getElementById('message').innerText += message;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Office Add-in Commands and Task Panes in Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates the `VersionOverrides` section within an Office Add-in manifest, used to define custom ribbon elements like tabs, groups, buttons, and dropdown menus (Add-in Commands). It specifies actions, such as showing task panes (`ShowTaskpane`) or executing functions, and links them to specific URLs and icons defined within the `Resources` section. The `Resources` section centralizes images, URLs, and localized strings (short and long) used by the add-in's UI elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n                        <TaskpaneId>MyTaskPaneID2</TaskpaneId>\n                        <SourceLocation resid=\"Contoso.Taskpane2.Url\" />\n                      </Action>\n                    </Item>\n\n                  </Items>\n                </Control>\n\n              </Group>\n\n              <!-- Label of your tab. -->\n              <!-- If validating with XSD, it needs to be at the end. -->\n              <Label resid=\"Contoso.Tab1.TabLabel\" />\n            </CustomTab>\n          </ExtensionPoint>\n        </DesktopFormFactor>\n      </Host>\n    </Hosts>\n\n    <!-- You can use resources across hosts and form factors. -->\n    <Resources>\n      <bt:Images>\n        <bt:Image id=\"Contoso.TaskpaneButton.Icon16\" DefaultValue=\"https://myCDN/Images/Button16x16.png\" />\n        <bt:Image id=\"Contoso.TaskpaneButton.Icon32\" DefaultValue=\"https://myCDN/Images/Button32x32.png\" />\n        <bt:Image id=\"Contoso.TaskpaneButton.Icon80\" DefaultValue=\"https://myCDN/Images/Button80x80.png\" />\n        <bt:Image id=\"Contoso.FunctionButton.Icon\" DefaultValue=\"https://myCDN/Images/ButtonFunction.png\" />\n      </bt:Images>\n      <bt:Urls>\n        <bt:Url id=\"Contoso.FunctionFile.Url\" DefaultValue=\"https://commandsimple.azurewebsites.net/FunctionFile.html\" />\n        <bt:Url id=\"Contoso.Taskpane1.Url\" DefaultValue=\"https://commandsimple.azurewebsites.net/Taskpane.html\" />\n        <bt:Url id=\"Contoso.Taskpane2.Url\" DefaultValue=\"https://commandsimple.azurewebsites.net/Taskpane2.html\" />\n      </bt:Urls>\n      <!-- ShortStrings max characters=125. -->\n      <bt:ShortStrings>\n        <bt:String id=\"Contoso.FunctionButton.Label\" DefaultValue=\"Execute Function\" />\n        <bt:String id=\"Contoso.TaskpaneButton.Label\" DefaultValue=\"Show Task Pane\" />\n        <bt:String id=\"Contoso.Dropdown.Label\" DefaultValue=\"Dropdown\" />\n        <bt:String id=\"Contoso.Item1.Label\" DefaultValue=\"Show Task Pane 1\" />\n        <bt:String id=\"Contoso.Item2.Label\" DefaultValue=\"Show Task Pane 2\" />\n        <bt:String id=\"Contoso.Tab1.GroupLabel\" DefaultValue=\"Test Group\" />\n         <bt:String id=\"Contoso.Tab1.TabLabel\" DefaultValue=\"Test Tab\" />\n      </bt:ShortStrings>\n      <!-- LongStrings max characters=250. -->\n      <bt:LongStrings>\n        <bt:String id=\"Contoso.FunctionButton.Tooltip\" DefaultValue=\"Click to execute function.\" />\n        <bt:String id=\"Contoso.TaskpaneButton.Tooltip\" DefaultValue=\"Click to show a task pane.\" />\n        <bt:String id=\"Contoso.Dropdown.Tooltip\" DefaultValue=\"Click to show options on this menu.\" />\n        <bt:String id=\"Contoso.Item1.Tooltip\" DefaultValue=\"Click to show Task Pane 1.\" />\n        <bt:String id=\"Contoso.Item2.Tooltip\" DefaultValue=\"Click to show Task Pane 2.\" />\n      </bt:LongStrings>\n    </Resources>\n  </VersionOverrides>\n  <!-- EndAddinCommandsMode integration. -->\n</OfficeApp>\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Shape Binding - PowerPoint Office JS - JavaScript\nDESCRIPTION: Demonstrates how to add a newly created shape to the bindings collection in a PowerPoint presentation with a unique binding ID using the Office JavaScript API. Dependencies include a 'myShape' object and a PowerPoint add-in context. The binding allows future targeted updates by referencing the assigned ID. The main parameters are the shape object, the binding type as shape, and a string identifier.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/bind-shapes-in-presentation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a binding ID to track the shape for later updates. \\nconst bindingId = \"productChart\"; \\n// Create binding by adding the new shape to the bindings collection. \\ncontext.presentation.bindings.add(myShape, PowerPoint.BindingType.shape, bindingId); \n```\n\n----------------------------------------\n\nTITLE: Adding and Formatting a Data Table to an Excel Chart using JavaScript\nDESCRIPTION: Adds a data table to the first chart on the 'Sample' worksheet. It then sets the table's visibility, configures border display properties, and applies custom formatting to the font (color, name) and border color.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// This code sample adds a data table to a chart that already exists on the worksheet, \n// and then adjusts the display and format of that data table.\nawait Excel.run(async (context) => {\n    // Retrieve the chart on the \"Sample\" worksheet.\n    let chart = context.workbook.worksheets.getItem(\"Sample\").charts.getItemAt(0);\n\n    // Get the chart data table object and load its properties.\n    let chartDataTable = chart.getDataTableOrNullObject();\n    chartDataTable.load();\n\n    // Set the display properties of the chart data table.\n    chartDataTable.visible = true;\n    chartDataTable.showLegendKey = true;\n    chartDataTable.showHorizontalBorder = false;\n    chartDataTable.showVerticalBorder = true;\n    chartDataTable.showOutlineBorder = true;\n\n    // Retrieve the chart data table format object and set font and border properties. \n    let chartDataTableFormat = chartDataTable.format;\n    chartDataTableFormat.font.color = \"#B76E79\";\n    chartDataTableFormat.font.name = \"Comic Sans\";\n    chartDataTableFormat.border.color = \"blue\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Excel Custom Function in Office Add-in - Markdown\nDESCRIPTION: This prompt directs Copilot to assist in building an Office JavaScript Add-in for Excel, focused on implementing a custom function. It guides the user to generate setup steps and code insertions within Visual Studio Code, and is relevant for scenarios requiring extensible calculation logic via Office.js. No dependencies outside standard Office Add-in scaffolding are needed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nCreate an Office JavaScript Add-in for *Excel* to *create a\ncustom function in Excel*. List the steps to follow in *Visual \nStudio Code* to create the add-in and insert code snippets in \nthe correct files.\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Variables and Office Add-in in JavaScript\nDESCRIPTION: Defines constants for Project Server OData query parameters (`PROJDATA`, `PROJQUERY`, etc.) and initializes global variables (`_pwa`, `_projectUid`, `_docUrl`, `_odataUrl`) to store context like PWA URL and project GUID. Includes the mandatory `Office.initialize` function, which is the entry point for Office Add-ins, ensuring the DOM is ready using jQuery's `$(document).ready()` before running app-specific code.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n/* File: HelloProjectOData.js\n* JavaScript functions for the HelloProjectOData example task pane app.\n* October 2, 2012\n*/\n\nlet PROJDATA = \"/_api/ProjectData\";\nlet PROJQUERY = \"/Projects?\";\nlet QUERY_FILTER = \"$filter=ProjectName ne 'Timesheet Administrative Work Items'\";\nlet QUERY_SELECT1 = \"&amp;$select=ProjectId, ProjectName\";\nlet QUERY_SELECT2 = \", ProjectCost, ProjectWork, ProjectPercentCompleted, ProjectActualCost\";\nlet _pwa;           // URL of Project Web App.\nlet _projectUid;    // GUID of the active project.\nlet _docUrl;        // Path of the project document.\nlet _odataUrl = \"\"; // URL of the OData service: http[s]://ServerName /ProjectServerName /_api/ProjectData\n\n// The initialize function is required for all add-ins.\nOffice.initialize = function (reason) {\n    // Checks for the DOM to load using the jQuery ready method.\n    $(document).ready(function () {\n        // After the DOM is loaded, app-specific code can run.\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking API Availability with Feature Detection in Office JavaScript API - JavaScript\nDESCRIPTION: This example demonstrates feature detection: it tests for the existence of the setSelectedDataAsync method on Office.context.document before invoking platform-dependent logic. This approach enables code to run safely on platforms that support the targeted API, regardless of exact requirement set, ensuring maximum compatibility. Dependencies include the Office JavaScript API, and the focus is on safely accessing the setSelectedDataAsync function on document objects.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/platform-specific-requirement-sets.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (Office.context.document.setSelectedDataAsync)\n{\n    // Run code that uses document.setSelectedDataAsync.\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Redirect URI in Fallback Authentication Helper (JavaScript/TypeScript)\nDESCRIPTION: This JavaScript/TypeScript code snippet shows how to modify the `redirectUri` variable within the fallback authentication helper file (`fallbackauthdialog.js` or `fallbackauthdialog.ts`). The value needs to be changed from a local URL to the URL of the `fallbackauthdialog.html` page hosted on the Azure App Service. This ensures that the authentication flow redirects correctly in the deployed environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/deploy-office-add-in-sso-to-azure.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nredirectUri: \"https://contoso-sso.azurewebsites.net/fallbackauthdialog.html\",\n```\n\n----------------------------------------\n\nTITLE: Identifying Shared Folder or Mailbox - Office.js API - JavaScript\nDESCRIPTION: Shows how to use Office.context.mailbox.item.getSharedPropertiesAsync in a JavaScript-based Outlook add-in to determine if the current item resides in a shared mailbox or folder. The function retrieves shared mailbox properties such as owner's email and delegate permissions, and handles both success and failure results. Requires Office.js and should be run inside an Office add-in context (either compose or read mode). Input is the callback function, output is the asynchronous result containing shared properties or failure info.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/delegate-access.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.mailbox.item.getSharedPropertiesAsync((result) => {\n  if (result.status === Office.AsyncResultStatus.Failed) {\n    console.error(\"The current folder or mailbox isn't shared.\");\n    return;\n  }\n  const sharedProperties = result.value;\n  console.log(`Owner: ${sharedProperties.owner}`);\n  console.log(`Permissions: ${sharedProperties.delegatePermissions} `);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install the `showdown`, `urijs`, and `jquery` libraries and saves them as dependencies in the project's `package.json` file. These libraries are required for Markdown conversion, URL manipulation, and DOM interaction within the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\n```command&nbsp;line\nnpm install showdown urijs jquery --save\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Pane Logic in JavaScript\nDESCRIPTION: This JavaScript code replaces the entire content of `taskpane.js`. It sets up the basic structure for the add-in's task pane logic, including importing necessary modules (placeholder TODO1), defining the `Office.onReady` handler to initialize the UI and attach event handlers (placeholder TODOs) once the Office application is ready, defining placeholders for core functions (TODOs), and providing helper functions (`clearMessage`, `setMessage`, `tryCatch`) for UI updates and error handling.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\n// TODO1: Import Base64-encoded string for image.\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.PowerPoint) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    // TODO2: Assign event handler for insert-image button.\n    // TODO4: Assign event handler for insert-text button.\n    // TODO6: Assign event handler for get-slide-metadata button.\n    // TODO8: Assign event handlers for add-slides and the four navigation buttons.\n  }\n});\n\n// TODO3: Define the insertImage function.\n\n// TODO5: Define the insertText function.\n\n// TODO7: Define the getSlideMetadata function.\n\n// TODO9: Define the addSlides and navigation functions.\n\nasync function clearMessage(callback) {\n  document.getElementById(\"message\").innerText = \"\";\n  await callback();\n}\n\nfunction setMessage(message) {\n  document.getElementById(\"message\").innerText = message;\n}\n\n// Default helper for invoking an action and handling errors.\nasync function tryCatch(callback) {\n  try {\n    document.getElementById(\"message\").innerText = \"\";\n    await callback();\n  } catch (error) {\n    setMessage(\"Error: \" + error.toString());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Reference to Preceding Paragraph for Table Insertion in JavaScript\nDESCRIPTION: This JavaScript code snippet replaces the `TODO1` placeholder in the `insertTable` function. It gets a reference to the first paragraph in the document body using `context.document.body.paragraphs.getFirst()` and then chains `.getNext()` to obtain a reference to the second paragraph, which will precede the table.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst secondParagraph = context.document.body.paragraphs.getFirst().getNext();\n```\n\n----------------------------------------\n\nTITLE: Localizing DisplayName and Description for Spanish in Office Manifest XML\nDESCRIPTION: This XML snippet, part of a Visual Studio example, demonstrates localizing the `DisplayName` and `Description` elements within an add-in manifest file (`WorldReadyAddIn.xml`). It sets default English values using `DefaultValue` and provides Spanish (`es-es`) translations using `<Override>` child elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<DisplayName DefaultValue=\"World Ready add-in\">\n  <Override Locale=\"es-es\" Value=\"Aplicación de uso internacional\"/>\n</DisplayName>\n<Description DefaultValue=\"An add-in for testing localization\">\n  <Override Locale=\"es-es\" Value=\"Una aplicación para la prueba de la localización\"/>\n</Description>\n```\n\n----------------------------------------\n\nTITLE: Adding Apply Custom Style Button in HTML\nDESCRIPTION: This snippet adds a button element with the ID 'apply-custom-style' to the task pane's HTML structure. This button is intended to trigger the application of a custom style to text in the Word document.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"apply-custom-style\">Apply Custom Style</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Importing createNestablePublicClientApplication from MSAL Browser - JavaScript\nDESCRIPTION: Demonstrates importing the createNestablePublicClientApplication function from the '@azure/msal-browser' library at the top of your JavaScript or TypeScript add-in code. This import statement is required to create an instance of the MSAL public client for authentication. The '@azure/msal-browser' package must be installed beforehand. No parameters are required; output is access to the imported function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/enable-nested-app-authentication-in-your-add-in.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createNestablePublicClientApplication } from \"@azure/msal-browser\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Shortcut Requirements - JSON\nDESCRIPTION: Illustrates defining keyboard shortcut extension points in a manifest, so shortcuts are only enabled when the host supports a particular API set (SharedRuntime version 1.1 or higher). Inputs include the capability details; effect is to activate custom shortcuts only on compatible Office versions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requirements-property-unified-manifest.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\\n    ...\\n    {\\n        ...\\n        \"keyboardShortcuts\": [\\n            {\\n                //Insert details of the keyboard shortcut configuration here.\\n\\n                \"requirements\" : {\\n                    \"capabilities\": [\\n                        {\\n                            \"name\": \"SharedRuntime\",\\n                            \"minVersion\": \"1.1\"\\n                        }\\n                    ]\\n                }\\n            }\\n        ]\\n    }\\n]\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog with displayInIframe Option - Office.js - JavaScript\nDESCRIPTION: This example shows how to enable the displayInIframe option in the dialog configuration when opening a dialog from an Office Add-in running in Office on the web. Adding displayInIframe: true opens the dialog as a floating iframe, improving performance and load time. This option is respected only in web contexts and ignored elsewhere. The method signature includes URL, height, width, and displayInIframe settings. This is suitable when you do not plan to redirect to a page that disallows being loaded in iframes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.ui.displayDialogAsync(\"https://www.contoso.com/myDialog.html\", { height: 30, width: 20, displayInIframe: true });\n```\n\n----------------------------------------\n\nTITLE: Adding Links in Smart Alerts Dialog - Office.js JavaScript\nDESCRIPTION: Demonstrates embedding clickable hyperlinks in the Smart Alerts dialog's message using event.completed and Markdown. Requires Office.js API support for errorMessageMarkdown and enforcing HTTPS URLs. errorMessageMarkdown uses the [text](url) Markdown format; non-HTTPS URLs will not render as links. Input object must specify allowEvent and errorMessageMarkdown fields.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagesend-onappointmentsend-events.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nevent.completed({\n  allowEvent: false,\n  ...\n  errorMessageMarkdown: \"Need onsite assistance on the day of your meeting? Visit the [Contoso Facilities](https://www.contoso.com/facilities/meetings) page to learn more.\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Create Chart Button - HTML\nDESCRIPTION: Inserts a Create Chart button in the HTML interface, with id 'create-chart' and MS-Button styling, to allow users to generate a chart from table data. This button is positioned after the sort-table button and is intended to be handled by a dedicated JavaScript function, providing charting capabilities within the Excel add-in task pane.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"ms-Button\\\" id=\\\"create-chart\\\">Create Chart</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Creating Unified Microsoft 365 Add-in Manifest (JSON) for Office Add-ins\nDESCRIPTION: This JSON snippet defines a unified manifest for use with Microsoft 365 Office Add-ins, enabling integration with PowerPoint and Word (in preview), providing metadata, permission grants, host targeting, add-in branding, and localization. The manifest includes required identifiers, developer details, app assets, domain whitelisting, permission scopes, and support for alternate icons. Dependencies include a Microsoft 365 environment and Office.js. Key parameters include valid GUID, localization, and remote URLs for privacy and support. The manifest is intended to be saved as a .json file and referenced when deploying the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"$schema\\\": \\\"https://developer.microsoft.com/json-schemas/teams/vDevPreview/MicrosoftTeams.schema.json#\\\",\\n    \\\"manifestVersion\\\": \\\"devPreview\\\",\\n    \\\"version\\\": \\\"1.0.0.0\\\",\\n    \\\"id\\\": \\\"[Replace_With_Your_GUID]\\\",\\n    \\\"localizationInfo\\\": {\\n        \\\"defaultLanguageTag\\\": \\\"en-us\\\"\\n    },\\n    \\\"developer\\\": {\\n        \\\"name\\\": \\\"[Provider Name e.g., Contoso]\\\",\\n        \\\"websiteUrl\\\": \\\"[Insert the URL for the app e.g., https://www.contoso.com]\\\",\\n        \\\"privacyUrl\\\": \\\"[Insert the URL of a page that provides privacy information for the app e.g., https://www.contoso.com/privacy]\\\",\\n        \\\"termsOfUseUrl\\\": \\\"[Insert the URL of a page that provides terms of use for the app e.g., https://www.contoso.com/servicesagreement]\\\"\\n    },\\n    \\\"name\\\": {\\n        \\\"short\\\": \\\"Get Doc add-in\\\",\\n        \\\"full\\\": \\\"Get Doc add-in\\\"\\n    },\\n    \\\"description\\\": {\\n        \\\"short\\\": \\\"My get PowerPoint or Word document add-in.\\\",\\n        \\\"full\\\": \\\"My get PowerPoint or Word document add-in.\\\"\\n    },\\n    \\\"icons\\\": {\\n        \\\"outline\\\": \\\"_layouts/images/general/office_logo.jpg\\\",\\n        \\\"color\\\": \\\"_layouts/images/general/office_logo.jpg\\\"\\n    },\\n    \\\"accentColor\\\": \\\"#230201\\\",\\n    \\\"validDomains\\\": [\\n        \\\"https://www.contoso.com\\\"\\n    ],\\n    \\\"showLoadingIndicator\\\": false,\\n    \\\"isFullScreen\\\": false,\\n    \\\"defaultBlockUntilAdminAction\\\": false,\\n    \\\"authorization\\\": {\\n        \\\"permissions\\\": {\\n            \\\"resourceSpecific\\\": [\\n                {\\n                    \\\"name\\\": \\\"Document.ReadWrite.User\\\",\\n                    \\\"type\\\": \\\"Delegated\\\"\\n                }\\n            ]\\n        }\\n    },\\n    \\\"extensions\\\": [\\n        {\\n            \\\"requirements\\\": {\\n                \\\"scopes\\\": [\\n                    \\\"document\\\",\\n                    \\\"presentation\\\"\\n                ]\\n            },\\n            \\\"alternates\\\": [\\n                {\\n                    \\\"alternateIcons\\\": {\\n                        \\\"icon\\\": {\\n                            \\\"size\\\": 32,\\n                            \\\"url\\\": \\\"http://officeimg.vo.msecnd.net/_layouts/images/general/office_logo.jpg\\\"\\n                        },\\n                        \\\"highResolutionIcon\\\": {\\n                            \\\"size\\\": 64,\\n                            \\\"url\\\": \\\"http://officeimg.vo.msecnd.net/_layouts/images/general/office_logo.jpg\\\"\\n                        }\\n                    }\\n                }\\n            ]\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking ExcelApiOnline Requirement Set Support in Office JavaScript API - JavaScript\nDESCRIPTION: This snippet performs a runtime check to determine whether the \"ExcelApiOnline\" requirement set version 1.1 is available, which is relevant for functionality exclusive to Office on the web (online-only). Use this check to conditionally run code depending on the environment, thereby preventing access to unsupported APIs elsewhere. Dependencies are the Office JavaScript API, with parameters being the set name (\"ExcelApiOnline\") and version (\"1.1\").\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/platform-specific-requirement-sets.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (Office.context.requirements.isSetSupported(\"ExcelApiOnline\", \"1.1\")) {\n   // Any API exclusive to the ExcelApiOnline requirement set.\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Microsoft Graph API with Acquired Token in JavaScript\nDESCRIPTION: Demonstrates how to use the successfully acquired `accessToken` to make an authenticated call to the Microsoft Graph API. It uses the `fetch` API to request the names of the first 10 items in the user's OneDrive root folder. The token is included in the `Authorization` header. It processes the JSON response, extracts file names, and attempts to display them in a task pane element with ID `item-subject` and logs them to the console. Handles potential API call errors. This code replaces `TODO 4` in the initial `run` function structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/enable-nested-app-authentication-in-your-add-in.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Call the Microsoft Graph API with the access token.\nconst response = await fetch(\n  `https://graph.microsoft.com/v1.0/me/drive/root/children?$select=name&$top=10`,\n  {\n    headers: { Authorization: accessToken },\n  }\n);\n\nif (response.ok) {\n  // Write file names to the console.\n  const data = await response.json();\n  const names = data.value.map((item) => item.name);\n\n  // Be sure the taskpane.html has an element with Id = item-subject.\n  const label = document.getElementById(\"item-subject\");\n\n  // Write file names to task pane and the console.\n  const nameText = names.join(\", \");\n  if (label) label.textContent = nameText;\n  console.log(nameText);\n} else {\n  const errorText = await response.text();\n  console.error(\"Microsoft Graph call failed - error text: \" + errorText);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Compose Surface Extension Point in XML Manifest\nDESCRIPTION: This XML snippet defines an `ExtensionPoint` of type `MessageComposeCommandSurface` for the `manifest.xml` file. It adds a group (`msgComposeCmdGroup`) with two buttons (`msgComposeInsertGist` and `msgComposeInsertDefaultGist`) to the default ribbon tab (`TabDefault`) in the Outlook compose window. The first button is configured to show a task pane (`Action xsi:type=\"ShowTaskpane\"`), while the second executes a function (`Action xsi:type=\"ExecuteFunction\"` named `insertDefaultGist`). Labels, tooltips (Supertips), and icons are defined using resource IDs (`resid`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Message Compose -->\n<ExtensionPoint xsi:type=\"MessageComposeCommandSurface\">\n  <OfficeTab id=\"TabDefault\">\n    <Group id=\"msgComposeCmdGroup\">\n      <Label resid=\"GroupLabel\"/>\n      <Control xsi:type=\"Button\" id=\"msgComposeInsertGist\">\n        <Label resid=\"TaskpaneButton.Label\"/>\n        <Supertip>\n          <Title resid=\"TaskpaneButton.Title\"/>\n          <Description resid=\"TaskpaneButton.Tooltip\"/>\n        </Supertip>\n        <Icon>\n          <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n          <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n          <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n        </Icon>\n        <Action xsi:type=\"ShowTaskpane\">\n          <SourceLocation resid=\"Taskpane.Url\"/>\n        </Action>\n      </Control>\n      <Control xsi:type=\"Button\" id=\"msgComposeInsertDefaultGist\">\n        <Label resid=\"FunctionButton.Label\"/>\n        <Supertip>\n          <Title resid=\"FunctionButton.Title\"/>\n          <Description resid=\"FunctionButton.Tooltip\"/>\n        </Supertip>\n        <Icon>\n          <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n          <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n          <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n        </Icon>\n        <Action xsi:type=\"ExecuteFunction\">\n          <FunctionName>insertDefaultGist</FunctionName>\n        </Action>\n      </Control>\n    </Group>\n  </OfficeTab>\n</ExtensionPoint>\n```\n\n----------------------------------------\n\nTITLE: Starting and Sideloading Office Add-in in PowerPoint Desktop\nDESCRIPTION: This command uses npm to execute the `start` script defined in the project's `package.json`. It starts the local web server (if not already running) and automatically opens the PowerPoint desktop application with the add-in sideloaded for testing purposes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_15\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Requesting ReadItem Permission in Unified JSON Manifest (Microsoft 365)\nDESCRIPTION: This JSON snippet shows how to request the equivalent of 'ReadItem' permission using the 'MailboxItem.Read.User' delegated permission within the unified manifest for Microsoft 365. This permission grants the add-in the ability to read properties of the current mailbox item on behalf of the signed-in user. It is used in the modern manifest format for Microsoft 365 applications, including Outlook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/privacy-and-security.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"authorization\": {\n  \"permissions\": {\n    \"resourceSpecific\": [\n      ...\n      {\n        \"name\": \"MailboxItem.Read.User\",\n        \"type\": \"Delegated\"\n      },\n    ]\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Attempting Interactive Token Acquisition with MSAL.js Popup in JavaScript\nDESCRIPTION: Checks if the `accessToken` is still null after the silent attempt. If so, it calls `pca.acquireTokenPopup` to initiate an interactive authentication flow, which might display a sign-in dialog. A try-catch block handles errors during the popup process. On success, the acquired token is stored in `accessToken`. Console logs track the interactive attempt. This code replaces `TODO 2` in the initial `run` function structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/enable-nested-app-authentication-in-your-add-in.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (accessToken === null) {\n  // Acquire token silent failure. Send an interactive request via popup.\n  try {\n    console.log(\"Trying to acquire token interactively...\");\n    const userAccount = await pca.acquireTokenPopup(tokenRequest);\n    console.log(\"Acquired token interactively.\");\n    accessToken = userAccount.accessToken;\n  } catch (popupError) {\n    // Acquire token interactive failure.\n    console.log(`Unable to acquire token interactively: ${popupError}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring the Dictionary Add-in Task Pane UI (HTML)\nDESCRIPTION: This HTML code defines the structure for the user interface of a dictionary Office Add-in, intended for display in a task pane. It includes necessary script references for Microsoft Ajax and Office.js, an optional reference for jQuery, links to custom CSS and JavaScript files, and defines containers for instructions, the headword, definitions, a 'See More' link, and messages. Placeholders like `headword` and `definitions` will be populated dynamically via JavaScript.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n\n    <!--The title will not be shown but is supplied to ensure valid HTML.-->\n    <title>Example Dictionary</title>\n\n    <!--Required library includes.-->\n    <script type=\"text/javascript\" src=\"https://ajax.microsoft.com/ajax/4.0/1/MicrosoftAjax.js\"></script>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n\n    <!--Optional library includes.-->\n    <script type=\"text/javascript\" src=\"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.1.js\"></script>\n\n    <!--App-specific CSS and JS.-->\n    <link rel=\"Stylesheet\" type=\"text/css\" href=\"Home.css\" />\n    <script type=\"text/javascript\" src=\"Home.js\"></script>\n</head>\n\n<body>\n    <div id=\"mainContainer\">\n        <div>INSTRUCTIONS</div>\n        <ol>\n            <li>Ensure there's text in the document.</li>\n            <li>Select text.</li>\n        </ol>\n        <div id=\"header\">\n            <span id=\"headword\"></span>\n        </div>\n        <div>DEFINITIONS</div>\n        <ol id=\"definitions\">\n        </ol>\n        <div id=\"SeeMore\">\n            <a id=\"SeeMoreLink\" target=\"_blank\">See More...</a>\n        </div>\n        <div id=\"message\"></div>\n    </div>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Sample Desktop Installation Link for Script Lab Add-in (Word, URL Example, Plaintext)\nDESCRIPTION: This snippet is a full example of a desktop installation link that opens Word and installs the Script Lab add-in using the protocol, AppSource ID (case-sensitive), correlation GUID, and file format. All placeholders have been replaced with valid sample values. The link can serve as a model for constructing similar installation links by replacing the provided values with those for a different add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_3\n\nLANGUAGE: URL Example\nCODE:\n```\nms-word:https://api.addins.store.office.com/addinstemplate/en-US/228a829b-69d7-45f4-a338-c6aba330ec7e/WA104380862/none/Script%20Lab,%20a%20Microsoft%20Garage%20project.docx?omexsrctype=1&isexternallink=1\n```\n\n----------------------------------------\n\nTITLE: Representing Image Data as Base64 String (Text)\nDESCRIPTION: This snippet represents image data encoded as a Base64 string. While presented within a code block, it's data intended to be imported and used by JavaScript code (e.g., in `base64Image.js`) to insert an image into the PowerPoint document.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nRsFheLbQcqyfrCJMTvaFpu9qxIj2IEz0nJu8eClb0tf2iv+1Uh3Xgu1XWlXu6TqpH5QW/sOfPAztQRcEiruhYvqalzgW9S3yjsGZrBe/9BhIruKZ2fGf1uCRFWZ5TsFjVzxlvHitrAc9FluawN3y3bGd5TsEiEt4uzRNStf6dzMkb3enRRxna5uLXrf0K/SCApkAULOK2nl+k8yITaoGnyqOL2fLUp+E+Mr2II4t0QsHyJVhLhUpH7L4r7pkYZViex8BSFekULApWpGgm60wVcdCom7N59JLQbXHp3TMJXgK3vOvBqKF3gY6FbhPdJr5rLn5p8HVppJeTk+tVV10c9ONjF/UgzshNtoKUgR+nkTKGbRqJJ3j42f8Ds4luEx2rr2XfX6BjLdRNqJqsA8AqTgj967sydJt4cXWh3gypG8M2DKsFAGzJQMGaE2wzdV7v/3/vYl43wpJZbFty0ZmoOJr5XQiha02U1+QnOSRz/ZbWdmsgTWiDULDmkt5Fv93VfPlKje40KsrjykJr4HFBn23Lds9ujoaOgkVfGWtfqXF2mvZVQgcogZi0bKebo2CRBfSVmo7G0gahmv6lsy2v6OYoWMuL7ewiftPPyleqJutA1oJd1SFe9fcXz83ZD5vvmlPPXiUUrBBpm8Pooz1gZmAr7LtlYXylZiqXUDFldnVtZAIfHTZbN6e67IkVZMvIllm+UbDiR6uKRkWuDs5HfTI39CPz6Cs10/QGa1L6KIOf4ayzdXNTFbaZXWxUKVUUrBhjh7bdJyHt289pW+LvKzUrU4OIgz7KoNlVjJub8ybxmV3kK9xJpGDNj2wdlX3Fi2LuKzV7f0dlvK3pogzjW4rxdHOef3H5CvcWKVhzSLeJ43KQrd/j4yuTOeUqsl21ae7YjoXT2tyUk1N51Y9MShUFa845q6NRCTdtNFtfGc9rjgiDIMks8hXuA1KwFojTGo7LUcfZZ+srI3Nz3/3g6aKP2nITkIK1yLRNHJVnHF6fua/06eZsVYrDYaYr93CtQqmiYC00024jRkZMfKUtSQM3B8RxLAU3ASlYSydb31Tw5vEcfKsh+cqZuznPV2OjyhHzFKylpNtEozKXzVXc+8p4ujkPpG7gepWbgBSspSeCbcRoGA+LzkX3GDdmmZuAsXpc8hLMkrUC1uo4q+Pr0nINYpiLQjJb1kX2ySzgEIp4yNZOE5tPkMzyYsSlYLzZpFpRsIiaTAnbFvIPph75R4L8Lexi5/WEIdWEgkUAIJFGvoKbTS+jlYlPVm9h5zU2TUYWKFhketnaeY3MLi9GRFL1yZfYqlOqKFjEK8kcNk1sv+qHoUgoFzmLzSfYqjOyQMEiQZAysFXHJ19OMWaZuCpjV3D9EXbYv5iCRQJnrYBti9uIgUmVvYzBIcUAAAIqSURBVAmYLfNiULBIaGRK2GlyG9HfNdzFtsVNQAoWiYrBNiJlayq4CUjBIjMyNWnkK9i2uI3oVqq4CUjBIjPG3kbcec1tRPUlysL4nJuAFCwSJ9mytxEpWyNF6Ao2n2CnqZyXQShYZGasFbBV5zZiX6rsTUDmFShYJNbY24jXHy3venxmt39omZuAFCwyH2TLy7iNuH6nvwlIqaJgkXmzRcu0jWhvAho1bgJSsMg8M9hGXL+zoD9gtp9X4CYgBYssjmwZtUXbRrQPLe80KVUULLKI2NuIxudzv41obwJuW9wEpGCRRWe92O/FPKfr8VfucROQgkWWjExp/rYR7c7FG1VKFQWLLB+DXszx30a0NwF5aJlQsChb/W3EeMpW6gY3AQkFi4xipx9itY1obwJuW5QqIj5keQkIEJuRrhxfSlhhkSlka4YjXTm+lFCwyNREP9KV40sJBYv4sGY/bCNeuRfuC63ewvYrbgISChYJQrY2qmFtIw46F6cMXmlCwSIBEfhIV44vJRQsEi6BjHTl+FJCwSLR4XmkK8eXEgoWmQ3TjnTl+FJCwSIzZjDSVQPHl5JAee/du3e8CsQX3Sa6Y730pB8khIJFCKElJIQQChYhhFCwCCEULEIIoWARQggFixBCwSKEEAoWIYRQsAghFCxCCKFgEUIIBYsQQsEihBAKFiGEULAIIRQsQgihYBFCCAWLEELBIoQQChYhhILFS0AIoWARQkjA/D87uqZQTj7xTgAAAABJRU5ErkJggg==\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Page Data using Office Common API (JavaScript)\nDESCRIPTION: This JavaScript function retrieves the current text selection from a OneNote page using the Common Office.js API method 'getSelectedDataAsync'. It specifies the coercion type ('Text') and data format, then either displays any error encountered or populates an input element with the retrieved value. Dependencies: Office.js (Common API); for handling UI, jQuery is used to set the field value. Key parameters: CoercionType (restricts data kind), callback function (receives asyncResult). Inputs: Office context and user selection. Outputs: populates input field or logs errors. Must be run in an Office Add-in environment with access to the Common API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/onenote/onenote-add-ins-programming-overview.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getSelectionFromPage() {\n    Office.context.document.getSelectedDataAsync(\n        Office.CoercionType.Text,\n        { valueFormat: \"unformatted\" },\n        function (asyncResult) {\n            const error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(error.message);\n            }\n            else $('#input').val(asyncResult.value);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Setless API Method Support via Runtime Check in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates a runtime check to determine if a specific API method that is *not* part of a requirement set (a 'setless' API) is available in the current Office application context. It checks for the existence of the method (e.g., `document.setSelectedDataAsync`) as a property on its parent object (`Office.context.document`). This approach is used for specific methods not covered by requirement sets, although its use should be limited.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-api-requirements-runtime.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nif (Office.context.document.setSelectedDataAsync) {\n    // Run code that uses `document.setSelectedDataAsync`.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Static Value Column to an Excel Table using Office.js - JavaScript\nDESCRIPTION: Adds a new column with static values, including a header, to the end of the \"ExpensesTable\" in the \"Sample\" worksheet. It uses the Excel JavaScript API and automatically fits the columns and rows. Requires the Office.js Excel API, assumes the table with the specified name exists, and takes no runtime parameters. The output is a table with an additional column containing provided values.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n    let expensesTable = sheet.tables.getItem(\\\"ExpensesTable\\\");\\n\\n    expensesTable.columns.add(null /*add columns to the end of the table*/, [\\n        [\\\"Day of the Week\\\"],\\n        [\\\"Saturday\\\"],\\n        [\\\"Friday\\\"],\\n        [\\\"Monday\\\"],\\n        [\\\"Thursday\\\"],\\n        [\\\"Sunday\\\"],\\n        [\\\"Saturday\\\"],\\n        [\\\"Monday\\\"]\\n    ]);\\n\\n    sheet.getUsedRange().format.autofitColumns();\\n    sheet.getUsedRange().format.autofitRows();\\n\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Reported Message and Capturing Dialog Responses in Outlook Add-in (JavaScript)\nDESCRIPTION: Implements an event handler 'onSpamReport' for the Outlook Office add-in spam-reporting event. The function uses Office.js's getAsFileAsync to obtain a Base64-encoded copy of the reported message as EML, retrieves user-selected options and free text from the SpamReporting event object, and provides a placeholder for further processing. The handler is mapped to the event using Office.actions.associate. No third-party dependencies are required, but Office JavaScript APIs must be available in the Outlook environment. The primary inputs are the event and message context; outputs and further operations depend on additional processing implementation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Handles the SpamReporting event to process a reported message.\\nfunction onSpamReport(event) {\\n  // Get the Base64-encoded EML format of a reported message.\\n  Office.context.mailbox.item.getAsFileAsync({ asyncContext: event }, (asyncResult) => {\\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\\n      console.log(`Error encountered during message processing: ${asyncResult.error.message}`);\\n      return;\\n    }\\n\\n    // Get the user's responses to the options and text box in the preprocessing dialog.\\n    const spamReportingEvent = asyncResult.asyncContext;\\n    const reportedOptions = spamReportingEvent.options;\\n    const additionalInfo = spamReportingEvent.freeText;\\n\\n    // Run additional processing operations here.\\n\\n    // TODO - Signal that the spam-reporting event has completed processing.\\n  });\\n}\\n\\n// IMPORTANT: To ensure your add-in is supported in Outlook, remember to map the event handler name specified in the manifest to its JavaScript counterpart.\\nOffice.actions.associate(\\\"onSpamReport\\\", onSpamReport);\n```\n\n----------------------------------------\n\nTITLE: Prepending Data to Outlook Item Body with Office.js - JavaScript\nDESCRIPTION: This code demonstrates how to prepend data to the start of the body in an Outlook email or appointment being composed, using Office.js. After verifying the item body's type with getTypeAsync, it prepends either HTML or text accordingly with prependAsync. Requires the Office JavaScript API and must be executed within the Outlook host during compose operations. Accepts data in text or HTML and optional parameters, and supports a maximum insertion of 1,000,000 characters.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/insert-data-in-the-body.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet item;\n\n// Confirms that the Office.js library is loaded.\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Outlook) {\n        item = Office.context.mailbox.item;\n        prependItemBody();\n    }\n});\n\n\n// Prepends data to the body of the item being composed.\nfunction prependItemBody() {\n    // Identify the body type of the mail item.\n    item.body.getTypeAsync((asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(asyncResult.error.message);\n            return;\n        }\n\n        // Prepend data of the appropriate type to the body.\n        if (asyncResult.value === Office.CoercionType.Html) {\n            // Prepend HTML to the body.\n            item.body.prependAsync(\n                '<b>Greetings!</b>',\n                { coercionType: Office.CoercionType.Html, asyncContext: { optionalVariable1: 1, optionalVariable2: 2 } },\n                (asyncResult) => {\n                    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                        console.log(asyncResult.error.message);\n                        return;\n                    }\n\n                    /*\n                      Run additional operations appropriate to your scenario and\n                      use the optionalVariable1 and optionalVariable2 values as needed.\n                    */\n            });\n        }\n        else {\n            // Prepend plain text to the body.\n            item.body.prependAsync(\n                'Greetings!',\n                { coercionType: Office.CoercionType.Text, asyncContext: { optionalVariable1: 1, optionalVariable2: 2 } },\n                (asyncResult) => {\n                    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                        console.log(asyncResult.error.message);\n                        return;\n                    }\n\n                    /*\n                      Run additional operations appropriate to your scenario and\n                      use the optionalVariable1 and optionalVariable2 values as needed.\n                    */\n            });\n        }\n    });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using InitializationReason in Office.initialize (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates using the optional `reason` parameter provided to the `Office.initialize` handler in task pane and content add-ins. It uses a switch statement to execute different logic based on whether the add-in was newly inserted (`inserted`) or already part of the document when opened (`documentOpened`). It also integrates with jQuery's `$(document).ready()`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/initialize-add-in.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.initialize = function (reason) {\n    $(document).ready(function () {\n        switch (reason) {\n            case 'inserted': console.log('The add-in was just inserted.');\n            case 'documentOpened': console.log('The add-in is already part of the document.');\n        }\n    });\n };\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Permissions in Unified Manifest (manifest.json)\nDESCRIPTION: This JSON snippet shows how to update the `authorization.permissions.resourceSpecific` array within the `manifest.json` file. It specifically sets the required permission to `MailboxItem.ReadWrite.User` (delegated type), which allows the event-based add-in to read and modify properties, such as the subject, of the newly composed message or appointment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n...\\n\"authorization\": {\\n    \"permissions\": {\\n        \"resourceSpecific\": [\\n            {\\n                \"name\": \"MailboxItem.ReadWrite.User\",\\n                \"type\": \"Delegated\"\\n            }\\n        ]\\n    }\\n},\\n...\n```\n\n----------------------------------------\n\nTITLE: Assigning Event Handlers with jQuery in JavaScript\nDESCRIPTION: This JavaScript code, intended for `Home.js`, uses jQuery to assign click event handlers to the HTML buttons defined previously. It maps each button's ID (e.g., `#add-slides`, `#go-to-first-slide`) to its corresponding JavaScript function (`addSlides`, `goToFirstSlide`, etc.). This code replaces a placeholder `TODO8` and depends on jQuery and the existence of the specified HTML elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n$('#add-slides').on(\"click\", addSlides);\n$('#go-to-first-slide').on(\"click\", goToFirstSlide);\n$('#go-to-next-slide').on(\"click\", goToNextSlide);\n$('#go-to-previous-slide').on(\"click\", goToPreviousSlide);\n$('#go-to-last-slide').on(\"click\", goToLastSlide);\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Deregistering Visibility Change Handler in JavaScript\nDESCRIPTION: This snippet shows how to asynchronously call the deregister function (previously obtained from `Office.addin.onVisibilityModeChanged` and stored in `removeVisibilityModeHandler`). Using `await` ensures that the deregistration process completes before the subsequent code is executed. This requires the call to be made within an `async` function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/show-hide-add-in.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// await the promise from the deregister handler before continuing\nawait removeVisibilityModeHandler();\n// subsequent code here\n```\n\n----------------------------------------\n\nTITLE: Creating a Yellow Square Shape in Excel - Markdown\nDESCRIPTION: This Copilot prompt creates guidance for inserting a yellow square shape into the worksheet using Excel JavaScript API. Designed for Office.js shape manipulation demonstrations. Copilot will generate code that specifies geometric parameters, color attributes, and worksheet insertion.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nCreate *a yellow square* shape in the worksheet using the Excel \nJavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Base64 Image Data in JavaScript\nDESCRIPTION: This JavaScript code snippet replaces the `TODO1` comment in `taskpane.js`. It imports the `base64Image` variable, which contains the Base64 encoded image data, from the specified relative path `../../base64Image`. This variable will be used later to insert the image.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { base64Image } from \"../../base64Image\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Allowed JavaScript Files for Outlook Add-In SSO (JSON)\nDESCRIPTION: This JSON snippet defines a list of fully qualified JavaScript file URLs that are authorized to request SSO or CORS tokens as part of an event-based or spam-reporting Outlook add-in deployment. The JSON object contains a required top-level property 'allowed', which is an array of string URLs. Each URL specifies an exact JavaScript file authorized for the origin. The JSON file must be hosted at the URI '[origin]/.well-known/microsoft-officeaddins-allowed.json'. It must be accessible from the Outlook add-in and not from the target CORS resource server. The structure and location are strictly required to ensure security and correct Office functionality.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/use-sso-in-event-based-activation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowed\":\n    [\n        \"https://addin.contoso.com:8000/main/js/autorun.js\",\n        \"https://addin.contoso.com:8000/beta/js/autorun.js\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Full Scope Name (Localhost)\nDESCRIPTION: Provides an example of the full scope name as it would appear for a local development setup (localhost:6789). This combines the localhost Application ID URI and the `access_as_user` scope name.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_9\n\nLANGUAGE: uri\nCODE:\n```\napi://localhost:6789/c6c1f32b-5e55-4997-881a-753cc1d563b7/access_as_user\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Folder Permissions - Outlook Add-in Manifest (JSON) - JSON\nDESCRIPTION: Demonstrates how to add a permission object for 'Mailbox.SharedFolder' to the 'authorization.permissions.resourceSpecific' array in a unified Office Add-in manifest. This enables handling shared folder/mailbox scenarios using delegated permissions in classic Outlook on Windows. The relevant code must be added inside the manifest's JSON structure under the 'authorization' property. Requires understanding of Office Add-in manifest schema.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/delegate-access.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"authorization\": {\n  \"permissions\": {\n    \"resourceSpecific\": [\n      ...\n      {\n        \"name\": \"Mailbox.SharedFolder\",\n        \"type\": \"Delegated\"\n      },\n    ]\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Disabling Ribbon Button and Tracking State (JavaScript)\nDESCRIPTION: Defines the `disableChartFormat` function as an event handler. It constructs a JSON payload to disable the `ChartFormatButton` via `Office.ribbon.requestUpdate`. As a best practice, it also updates a global variable `chartFormatButtonEnabled` to `false` to maintain the intended state of the button, helping to handle potential UI update inconsistencies.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction disableChartFormat() {\n    const button =\n    {\n        id: \"ChartFormatButton\",\n        enabled: false\n    };\n    const parentGroup =\n    {\n        id: \"MyGroup\",\n        controls: [button]\n    };\n    const parentTab =\n    {\n        id: \"CustomChartTab\",\n        groups: [parentGroup]\n    };\n    const ribbonUpdater = { tabs: [parentTab] };\n    Office.ribbon.requestUpdate(ribbonUpdater);\n\n    chartFormatButtonEnabled = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Mail Add-in Manifest Elements in XML\nDESCRIPTION: Outlines the specific required order for child elements under the `<OfficeApp>` tag for a Mail Add-in (`xsi:type=\"MailApp\"`) manifest. Adherence to this sequence, dictated by the Office Add-in XSD, is necessary for the manifest to be valid and the add-in to load correctly. The internal ordering of the `VersionOverrides` element, marked with an asterisk, is described in separate sections corresponding to different versions (1.0 and 1.1).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/manifest-element-ordering.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp xsi:type=\"MailApp\">\n    <Id>\n    <AlternateId>\n    <Version>\n    <ProviderName>\n    <DefaultLocale>\n    <DisplayName>\n        <Override>\n    <Description>\n        <Override>\n    <IconUrl>\n        <Override>\n    <HighResolutionIconUrl>\n        <Override>\n    <SupportUrl>\n    <AppDomains>\n        <AppDomain>\n    <Hosts>\n        <Host>\n    <Requirements>\n        <Sets>\n            <Set>\n    <FormSettings>\n        <Form>\n        <DesktopSettings>\n            <SourceLocation>\n            <RequestedHeight>\n        <TabletSettings>\n            <SourceLocation>\n            <RequestedHeight>\n        <PhoneSettings>\n            <SourceLocation>\n    <Permissions>\n    <Rule>\n    <DisableEntityHighlighting>\n    <VersionOverrides>*\n```\n\n----------------------------------------\n\nTITLE: Checking Formula Value Preview Mode in an Excel Custom Function (JavaScript)\nDESCRIPTION: This JavaScript custom function `getHousePrice` demonstrates how to check if the function is being invoked in formula value preview mode using the `invocation.isInValuePreview` property. If the property is true, it returns a mock numeric value (450000) to avoid executing potentially expensive or time-consuming logic, such as calling an external API (`callHouseServiceAPI`). If the property is false, it executes the actual logic to retrieve the house price.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-formula-value-preview.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Get the listing price for a house on the market for the given address.\n * @customfunction\n * @param address The address of the house.\n * @param invocation Custom function handler.\n * @returns The price of the house at the address.\n */\nexport function getHousePrice(address: string, invocation: CustomFunctions.Invocation): number {\n  // Check if this call is for formula value preview mode.\n  if (invocation.isInValuePreview) { \n    // Avoid long-running expensive service calls. \n    // Return a useable but fake number.\n    return 450000; \n  } else { \n    // Make the actual service calls in this block. \n    const price = callHouseServiceAPI(address);\n    return price; \n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server and Sideloading Add-in - Command Line\nDESCRIPTION: This command launches the project's local web server and opens Word with the Office Add-in loaded for testing. The command must be executed in the root directory of your project and assumes 'npm' and Node.js are already installed. It is primarily used during Office Add-in development to simplify the process of testing changes. No parameters are required for this command. Upon execution, it sideloads the add-in in Word, preparing the environment for immediate testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/tutorial-word-start-server.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Sending Worksheet Properties from Host Page to Dialog using messageChild (JavaScript)\nDESCRIPTION: This example demonstrates retrieving active worksheet properties using the Excel JavaScript API (`Excel.run`) and then sending this data to an open dialog box. The `worksheetPropertiesChanged` function stringifies the worksheet object using `JSON.stringify` and passes the resulting string to the dialog using the `dialog.messageChild()` method. The `dialog` variable is assumed to hold the `Dialog` object obtained when the dialog was opened.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const worksheet = context.workbook.worksheets.getActiveWorksheet();\n    worksheet.load();\n    await context.sync();\n    worksheetPropertiesChanged(worksheet);\n});\n\n...\n\nfunction worksheetPropertiesChanged(currentWorksheet) {\n    const messageToDialog = JSON.stringify(currentWorksheet);\n    dialog.messageChild(messageToDialog);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Keyboard Shortcuts with Office.js - JavaScript\nDESCRIPTION: This snippet shows how to use Office.actions.replaceShortcuts in JavaScript to assign custom keyboard shortcuts for add-in actions in a user's Microsoft 365 environment. It demonstrates how to provide a mapping where keys are action IDs and values are keyboard combinations, and includes error handling for invalid combinations or missing action IDs. Requires the \"KeyboardShortcuts 1.1\" Office.js requirement set and that the add-in's manifest defines the relevant action IDs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst userCustomShortcuts = {\n    ShowTaskpane: \"Ctrl+Shift+1\",\n    HideTaskpane: \"Ctrl+Shift+2\"\n};\n\nOffice.actions.replaceShortcuts(userCustomShortcuts)\n    .then(() => {\n        console.log(\"Successfully registered shortcut.\");\n    })\n    .catch((error) => {\n        if (error.code == \"InvalidOperation\") {\n            console.log(\"ActionId doesn't exist or shortcut combination is invalid.\");\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Registering Add-in Event Handlers with Office JS (JavaScript)\nDESCRIPTION: Demonstrates registering JavaScript functions as handlers for Office Add-in actions using `Office.actions.associate`. This code maps the string identifiers 'prependHeaderOnSend' and 'appendDisclaimerOnSend' (defined in the add-in manifest) to their corresponding JavaScript function implementations (`prependHeaderOnSend` and `appendDisclaimerOnSend`), enabling Outlook to invoke them.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/append-on-send.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.actions.associate(\"prependHeaderOnSend\", prependHeaderOnSend);\nOffice.actions.associate(\"appendDisclaimerOnSend\", appendDisclaimerOnSend);\n```\n\n----------------------------------------\n\nTITLE: Setting Mailbox Read/Write Permissions in Manifest (JSON)\nDESCRIPTION: This JSON object defines a delegated permission within the `authorization.permissions.resourceSpecific` array of the `manifest.json`. It grants the add-in permission to read and write to the user's mailbox items (`MailboxItem.ReadWrite.User`). This configuration is essential for add-ins that need to interact with email or appointment data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"MailboxItem.ReadWrite.User\",\n    \"type\": \"Delegated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI for SPA\nDESCRIPTION: Specifies the Redirect URI format for a Single-page application (SPA) platform during Azure app registration. Replace `<fully-qualified-domain-name>` with the actual domain where the add-in's dialog page (`dialog.html`) is hosted. This URI is used for authentication flows, particularly MSAL fallback.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_1\n\nLANGUAGE: uri\nCODE:\n```\nhttps://<fully-qualified-domain-name>/dialog.html\n```\n\n----------------------------------------\n\nTITLE: Getting Master Categories from Outlook Mailbox using Office JS\nDESCRIPTION: This snippet shows how to retrieve the complete list of categories defined in the user's master category list. It utilizes the `Office.context.mailbox.masterCategories.getAsync` method. The result, obtained in the callback's `asyncResult.value`, is an array of `CategoryDetails` objects.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/categories.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.context.mailbox.masterCategories.getAsync(function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n        console.log(\"Action failed with error: \" + asyncResult.error.message);\n    } else {\n        const masterCategories = asyncResult.value;\n        console.log(\"Master categories:\");\n        masterCategories.forEach(function (item) {\n            console.log(\"-- \" + JSON.stringify(item));\n        });\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Assigning Chart Event Handlers in Office Add-in (JavaScript)\nDESCRIPTION: Demonstrates attaching event handlers to chart activation and deactivation events in an Excel add-in using the Office JavaScript API within the `Office.onReady` function. Requires the Office JS API and an Excel host. It fetches charts from the active worksheet and assigns the `enableChartFormat` and `disableChartFormat` functions to the respective events.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady(async () => {\n    await Excel.run((context) => {\n        const charts = context.workbook.worksheets\n            .getActiveWorksheet()\n            .charts;\n        charts.onActivated.add(enableChartFormat);\n        charts.onDeactivated.add(disableChartFormat);\n        return context.sync();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server and Sideloading Add-in (Command Line)\nDESCRIPTION: This command launches the local web server for the Outlook add-in project, which is essential for testing, and also triggers sideloading of the add-in into Outlook, as defined in the project's configuration. It requires npm and proper configuration in the add-in project. The outcome is a running server and an add-in available for testing in Outlook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_15\n\nLANGUAGE: Command Line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding Attachment and Programmatic Send with Office.js (JavaScript)\nDESCRIPTION: This JavaScript function for use in a task pane replaces the original addAttachment handler to add a file attachment using Office.js's addFileAttachmentAsync and then sends the mail item via sendAsync. It demonstrates handling Office.js asynchronous operations, careful placement of operations before sendAsync, and basic error handling in send callbacks. Dependencies include Office.js, DOM access (document.querySelector), and a helper getFileName function; inputs are the user-provided URL, outputs are sending the email with the attachment. Operations after sendAsync may not be processed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Adds the specified URL as an attachment to the message.\n// Then, programmatically sends the message.\nexport async function addAttachment() {\n  const attachmentUrl = document.querySelector(\"#attachment-url\").value;\n  Office.context.mailbox.item.addFileAttachmentAsync(attachmentUrl, getFileName(attachmentUrl), (asyncResult) => {\n    console.log(\"Added attachment\");\n\n    // Programmatically send the item.\n    Office.context.mailbox.item.sendAsync((sendResult) => {\n        if (sendResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(`Unable to send the message: ${sendResult.error.message}`);\n            return;\n        }\n\n        // Don't run additional operations here. Process them before the sendAsync call instead.\n    });\n\n    // Don't run additional operations after the sendAsync call. Process them before the sendAsync call instead.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Roaming Settings on Initialization in Outlook Add-ins (JavaScript)\nDESCRIPTION: Demonstrates how to load existing roaming settings within the `Office.onReady` handler when an Outlook add-in initializes. It accesses the `Office.context.mailbox` and `Office.context.roamingSettings` objects and retrieves the values of 'customerName' and 'customerBalance' settings using the `settings.get()` method. Requires the Office JavaScript API (Office.js).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/metadata-for-an-outlook-add-in.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet _mailbox;\nlet _settings;\nlet _customerName;\nlet _customerBalance;\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Outlook) {\n    // Initialize instance variables to access API objects.\n    _mailbox = Office.context.mailbox;\n    _settings = Office.context.roamingSettings;\n    _customerName = _settings.get(\"customerName\");\n    _customerBalance = _settings.get(\"customerBalance\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Copying spamreporting.js via CopyWebpackPlugin in Webpack Config (JavaScript)\nDESCRIPTION: Configures webpack to copy the built spamreporting.js file from the source directory to the distribution folder using CopyWebpackPlugin. The code snippet adds a new CopyWebpackPlugin object with patterns to the beginning of the plugins array in webpack.config.js, ensuring the JavaScript handler is bundled in the add-in output. Requires the CopyWebpackPlugin npm package as a dependency and assumes a standard webpack config structure. Inputs specify source and destination paths; outputs ensure the correct script is available in the deployment folder.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nnew CopyWebpackPlugin({\\n  patterns: [\\n    {\\n      from: \\\"./src/spamreporting/spamreporting.js\\\",\\n      to: \\\"spamreporting.js\\\",\\n    },\\n  ],\\n}),\n```\n\n----------------------------------------\n\nTITLE: Parsing OData Project Data and Displaying Comparison in JavaScript\nDESCRIPTION: Defines the `parseODataResult` function which takes the raw JSON string (`oDataResult`) from the OData query and the `currentProjectGuid` as input. It deserializes the JSON using `Sys.Serialization.JavaScriptSerializer.deserialize` (requiring the ASP.NET AJAX library or similar). It then iterates through the project results (`res.d.results`), summing up `ProjectCost`, `ProjectWork`, `ProjectActualCost`, and `ProjectPercentCompleted` to calculate averages across all projects. It identifies the current project within the results using the provided `currentProjectGuid`. Finally, it displays the calculated averages and the current project's specific values in corresponding HTML table cells (by ID, e.g., `AverageProjectCost`, `CurrentProjectCost`), formatting numbers appropriately and applying color styling (green/red) to the current project's values to visually indicate comparison results against the averages (e.g., red if cost is higher than average, green if work is higher than average). Handles the case where the current project isn't found in the results (e.g., unpublished) by displaying 'NA'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// Calculate the average values of actual cost, cost, work, and percent complete\n// for all projects, and compare with the values for the current project.\nfunction parseODataResult(oDataResult, currentProjectGuid) {\n    // Deserialize the JSON string into a JavaScript object.\n    let res = Sys.Serialization.JavaScriptSerializer.deserialize(oDataResult);\n    let len = res.d.results.length;\n    let projActualCost = 0;\n    let projCost = 0;\n    let projWork = 0;\n    let projPercentCompleted = 0;\n    let myProjectIndex = -1;\n\n    for (i = 0; i < len; i++) {\n        // If the current project GUID matches the GUID from the OData query,  \n        // then store the project index.\n        if (currentProjectGuid.toLocaleLowerCase() == res.d.results[i].ProjectId) {\n            myProjectIndex = i;\n        }\n        projCost += Number(res.d.results[i].ProjectCost);\n        projWork += Number(res.d.results[i].ProjectWork);\n        projActualCost += Number(res.d.results[i].ProjectActualCost);\n        projPercentCompleted += Number(res.d.results[i].ProjectPercentCompleted);\n\n    }\n    let avgProjCost = projCost / len;\n    let avgProjWork = projWork / len;\n    let avgProjActualCost = projActualCost / len;\n    let avgProjPercentCompleted = projPercentCompleted / len;\n\n    // Round off cost to two decimal places, and round off other values to one decimal place.\n    avgProjCost = avgProjCost.toFixed(2);\n    avgProjWork = avgProjWork.toFixed(1);\n    avgProjActualCost = avgProjActualCost.toFixed(2);\n    avgProjPercentCompleted = avgProjPercentCompleted.toFixed(1);\n\n    // Display averages in the table, with the correct units. \n    document.getElementById(\"AverageProjectCost\").innerHTML = \"$\"\n        + avgProjCost;\n    document.getElementById(\"AverageProjectActualCost\").innerHTML\n        = \"$\" + avgProjActualCost;\n    document.getElementById(\"AverageProjectWork\").innerHTML\n        = avgProjWork + \" hrs\";\n    document.getElementById(\"AverageProjectPercentComplete\").innerHTML\n        = avgProjPercentCompleted + \"%\";\n\n    // Calculate and display values for the current project.\n    if (myProjectIndex != -1) {\n\n        let myProjCost = Number(res.d.results[myProjectIndex].ProjectCost);\n        let myProjWork = Number(res.d.results[myProjectIndex].ProjectWork);\n        let myProjActualCost = Number(res.d.results[myProjectIndex].ProjectActualCost);\n        let myProjPercentCompleted = Number(res.d.results[myProjectIndex].ProjectPercentCompleted);\n\n        myProjCost = myProjCost.toFixed(2);\n        myProjWork = myProjWork.toFixed(1);\n        myProjActualCost = myProjActualCost.toFixed(2);\n        myProjPercentCompleted = myProjPercentCompleted.toFixed(1);\n\n        document.getElementById(\"CurrentProjectCost\").innerHTML = \"$\" + myProjCost;\n\n        if (Number(myProjCost) <= Number(avgProjCost)) {\n            document.getElementById(\"CurrentProjectCost\").style.color = \"green\"\n        }\n        else {\n            document.getElementById(\"CurrentProjectCost\").style.color = \"red\"\n        }\n\n        document.getElementById(\"CurrentProjectActualCost\").innerHTML = \"$\" + myProjActualCost;\n\n        if (Number(myProjActualCost) <= Number(avgProjActualCost)) {\n            document.getElementById(\"CurrentProjectActualCost\").style.color = \"green\"\n        }\n        else {\n            document.getElementById(\"CurrentProjectActualCost\").style.color = \"red\"\n        }\n\n        document.getElementById(\"CurrentProjectWork\").innerHTML = myProjWork + \" hrs\";\n\n        if (Number(myProjWork) <= Number(avgProjWork)) {\n            document.getElementById(\"CurrentProjectWork\").style.color = \"red\"\n        }\n        else {\n            document.getElementById(\"CurrentProjectWork\").style.color = \"green\"\n        }\n\n        document.getElementById(\"CurrentProjectPercentComplete\").innerHTML = myProjPercentCompleted + \"%\";\n\n        if (Number(myProjPercentCompleted) <= Number(avgProjPercentCompleted)) {\n            document.getElementById(\"CurrentProjectPercentComplete\").style.color = \"red\"\n        }\n        else {\n            document.getElementById(\"CurrentProjectPercentComplete\").style.color = \"green\"\n        }\n    }\n    else {    // The current project isn't published.\n        document.getElementById(\"CurrentProjectCost\").innerHTML = \"NA\";\n        document.getElementById(\"CurrentProjectCost\").style.color = \"blue\"\n\n        document.getElementById(\"CurrentProjectActualCost\").innerHTML = \"NA\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Shared Folder Support - Office Add-in Manifest (XML) - XML\nDESCRIPTION: Illustrates how to set the <SupportsSharedFolders> element to 'true' within the <DesktopFormFactor> section of the Office Add-in XML manifest for classic Outlook on Windows. This enables the add-in to interact with shared mailboxes/folders. The snippet must be inserted under the proper <Hosts> and <Host xsi:type=\"MailHost\"> hierarchy, and assumes Office Add-in schema compliance.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/delegate-access.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n...\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n    ...\n    <Hosts>\n      <Host xsi:type=\"MailHost\">\n        <DesktopFormFactor>\n          <SupportsSharedFolders>true</SupportsSharedFolders>\n          <FunctionFile resid=\"residDesktopFuncUrl\" />\n          <ExtensionPoint xsi:type=\"MessageReadCommandSurface\">\n            <!-- Configure the extension point. -->\n          </ExtensionPoint>\n          ...\n        </DesktopFormFactor>\n      </Host>\n    </Hosts>\n    ...\n  </VersionOverrides>\n</VersionOverrides>\n...\n```\n\n----------------------------------------\n\nTITLE: Checking Sensitivity Labels Catalog Status with Office JavaScript API - JavaScript\nDESCRIPTION: This snippet checks if the sensitivity labels catalog is enabled on the user's mailbox using Office.context.sensitivityLabelsCatalog.getIsEnabledAsync in compose mode. It requires the Outlook add-in be granted appropriate mailbox permissions via the manifest and assumes prior setup described in the prerequisites. It takes no arguments and returns the enabled status through the callback: true if enabled, else false or an error message.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/sensitivity-label.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Check whether the catalog of sensitivity labels is enabled.\\nOffice.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {\\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\\n        console.log(asyncResult.value);\\n    } else {\\n        console.log(\\\"Action failed with error: \\\" + asyncResult.error.message);\\n    }\\n});\n```\n\n----------------------------------------\n\nTITLE: Closing Dialog in Message Handler - JavaScript\nDESCRIPTION: Closes the dialog when a message is received by invoking the close method on the dialog object. Ensures the dialog box is properly disposed after message processing for resource management. Requires dialog to be a global or accessible variable returned by displayDialogAsync. Input is the message event argument; output is a closed dialog instance.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction processMessage(arg) {\n    dialog.close();\n    // Add code to process the message here.\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing Contextual Tab JSON at Runtime using JavaScript\nDESCRIPTION: This JavaScript function `GetContextualTabsJsonSupportedLocale` retrieves the user's display language using `Office.context.displayLanguage`. It then uses a switch statement to return a different JSON string containing the configuration for contextual tabs, localized for the detected language (e.g., 'en-US' or 'fr-FR'). This allows the add-in to display tab labels and other UI elements in the user's preferred language.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction GetContextualTabsJsonSupportedLocale () {\n    const displayLanguage = Office.context.displayLanguage;\n\n        switch (displayLanguage) {\n            case 'en-US':\n                return `{\n                    \"actions\": [\n                        // actions omitted\n                     ],\n                    \"tabs\": [\n                        {\n                          \"id\": \"CtxTab1\",\n                          \"label\": \"Contoso Data\",\n                          \"groups\": [\n                              // groups omitted\n                          ]\n                        }\n                    ]\n                }`;\n\n            case 'fr-FR':\n                return `{\n                    \"actions\": [\n                        // actions omitted \n                    ],\n                    \"tabs\": [\n                        {\n                          \"id\": \"CtxTab1\",\n                          \"label\": \"Contoso Données\",\n                          \"groups\": [\n                              // groups omitted\n                          ]\n                       }\n                    ]\n               }`;\n\n            // Other cases omitted\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Summing Numbers Efficiently in Excel Custom Functions - JavaScript\nDESCRIPTION: This snippet defines a custom function called Add that sums an array of numbers efficiently with minimal nesting. It is attributed with @customfunction for Excel add-in recognition. The function accepts a single parameter args (an array of numbers), loops through the values, and returns their sum. Dependencies include the Office JavaScript API with support for custom functions. Input is an array of numbers; output is their summed value as a number. Best used for bulk addition without excessive nesting.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-get-started.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n* Returns the sum of input numbers.\n* @customfunction\n*/\nfunction Add(args: number[]): number {\n  let total = 0;\n  args.forEach(value => {\n    total += value;\n  });\n \n  return total;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing changeFont Logic in JavaScript\nDESCRIPTION: This JavaScript snippet replaces the 'TODO1' placeholder within the 'changeFont' function. It queues commands to get the second paragraph of the document (by getting the first and then the next) and set its font properties (name, bold, size). This code runs within the 'Word.run' context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst secondParagraph = context.document.body.paragraphs.getFirst().getNext();\nsecondParagraph.font.set({\n        name: \"Courier New\",\n        bold: true,\n        size: 18\n    });\n```\n\n----------------------------------------\n\nTITLE: Getting Email Delivery Time using Office JavaScript API\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve the scheduled delivery date and time of an email message currently being composed using the Office JavaScript API. It calls the `item.delayDeliveryTime.getAsync` method. The callback function checks the status of the asynchronous operation. If successful, it retrieves the delivery date (`asyncResult.value`). If the value is `0`, it indicates the message will be sent immediately; otherwise, it converts the returned timestamp into a JavaScript Date object and logs it.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/delay-delivery.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Gets the delivery date and time of a message.\nOffice.context.mailbox.item.delayDeliveryTime.getAsync((asyncResult) => {\n  if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n    console.log(asyncResult.error.message);\n    return;\n  }\n\n  const deliveryDate = asyncResult.value;\n  if (deliveryDate === 0) {\n    console.log(\"Your message will be delivered immediately when you select Send.\");\n  } else {\n    const date = new Date(deliveryDate);\n    console.log(`Message delivery date and time: ${date.toString()}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Event Handlers to Navigation Buttons in JavaScript\nDESCRIPTION: This JavaScript code assigns `onclick` event handlers to the five HTML buttons defined previously. It links each button click to a corresponding function (`addSlides`, `goToFirstSlide`, etc.), wrapping the navigation functions in `clearMessage` and `addSlides` in `tryCatch` for potential error handling or UI updates.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"add-slides\").onclick = () => tryCatch(addSlides);\ndocument.getElementById(\"go-to-first-slide\").onclick = () => clearMessage(goToFirstSlide);\ndocument.getElementById(\"go-to-next-slide\").onclick = () => clearMessage(goToNextSlide);\ndocument.getElementById(\"go-to-previous-slide\").onclick = () => clearMessage(goToPreviousSlide);\ndocument.getElementById(\"go-to-last-slide\").onclick = () => clearMessage(goToLastSlide);\n```\n\n----------------------------------------\n\nTITLE: Implementing First-Run Logic with JavaScript and Local Storage\nDESCRIPTION: This JavaScript code replaces the existing `Office.onReady` function in `taskpane.js`. It checks if the host application is Excel (`info.host === Office.HostType.Excel`), then uses `localStorage.getItem(\"showedFRE\")` to check if a flag indicating the first-run experience (FRE) has been shown exists. If the flag doesn't exist (`!localStorage.getItem(\"showedFRE\")`), it calls the `showFirstRunExperience` function. The `showFirstRunExperience` function makes the `#first-run-experience` div visible and sets the `showedFRE` flag in local storage to `true`, preventing the FRE from showing on subsequent runs. The code also sets up the click handler for the 'Run' button.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/first-run-experience-tutorial.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n\n    // showedFRE is created and set to \"true\" when you call showFirstRunExperience().\n    if (!localStorage.getItem(\"showedFRE\")) {\n      showFirstRunExperience();\n    }\n\n    document.getElementById(\"run\").onclick = run;\n  }\n});\n\nasync function showFirstRunExperience() {\n  document.getElementById(\"first-run-experience\").style.display = \"flex\";\n  localStorage.setItem(\"showedFRE\", true);\n}  \n```\n\n----------------------------------------\n\nTITLE: Adding and Formatting Text in Geometric Shapes with PowerPoint JavaScript API - JavaScript\nDESCRIPTION: This snippet creates a 'bracePair' geometric shape and populates it with styled text. It sets shape position, size, color fill, text content, font color, and vertically centers the text using properties of the 'Shape' and 'TextFrame' APIs. Requires the PowerPoint JavaScript API, and uses async execution with 'PowerPoint.run'. Outputs a formatted shape with customized text display.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/shapes.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This sample creates a light blue rectangle with braces (\"{}\") on the left and right ends\n// and adds the purple text \"Shape text\" to the center.\nawait PowerPoint.run(async (context) => {\n    const shapes = context.presentation.slides.getItemAt(0).shapes;\n    const braces = shapes.addGeometricShape(PowerPoint.GeometricShapeType.bracePair);\n    braces.left = 100;\n    braces.top = 400;\n    braces.height = 50;\n    braces.width = 150;\n    braces.name = \"Braces\";\n    braces.fill.setSolidColor(\"lightblue\");\n    braces.textFrame.textRange.text = \"Shape text\";\n    braces.textFrame.textRange.font.color = \"purple\";\n    braces.textFrame.verticalAlignment = PowerPoint.TextVerticalAlignment.middleCentered;\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Associating Actions to Functions with Office.actions.associate in Office.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates mapping the defined shortcut actions (e.g., 'ShowTaskpane') to actual handler functions using the Office.actions.associate API. When the corresponding key combination is pressed, the specified JavaScript function is executed—typically invoking Office.js APIs like Office.addin.showAsTaskpane or Office.addin.hide. Inputs are the action name (mapped in JSON and/or manifest), and handler functions returning Promises; outputs are asynchronous execution of Office.js functionality. Requires Office.js referenced in the project, and assumes correct configuration of shortcuts and manifest. Limitations include handling only registered action names and functions; errors are returned via error.code from any rejected Promise.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.actions.associate(\"ShowTaskpane\",\\u202f() => {\n    return\\u202fOffice.addin.showAsTaskpane()\n        .then(() =>\\u202f{\n            return;\n        })\n        .catch((error) =>\\u202f{\n            return\\u202ferror.code;\n        });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.actions.associate(\"HideTaskpane\", () => {\n    return Office.addin.hide()\n        .then(() => {\n            return;\n        })\n        .catch((error) => {\n            return\\u202ferror.code;\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Data Changes in an Office Binding using JavaScript\nDESCRIPTION: This snippet shows how to attach an event handler to the `DataChanged` event of a specific binding ('MyBinding') using `addHandlerAsync`. It defines the handler function `dataChanged` which receives event arguments and uses a helper function `write` to display a message when data changes. The `Office.select` method is used to target the binding, and `Office.EventType.BindingDataChanged` specifies the event type.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction addHandler() {\nOffice.select(\"bindings#MyBinding\").addHandlerAsync(\n    Office.EventType.BindingDataChanged, dataChanged);\n}\nfunction dataChanged(eventArgs) {\n    write('Bound data changed in binding: ' + eventArgs.binding.id);\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Attaching an Outlook Item using Office JavaScript API\nDESCRIPTION: This JavaScript function `addItemAttachment` demonstrates how to attach an existing Outlook item (like an email or contact) to the message or appointment currently being composed. It uses the `Office.context.mailbox.item.addItemAttachmentAsync` method, requiring the EWS ID of the item to be attached. A callback function handles the asynchronous result, logging the new attachment ID upon success or the error message upon failure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-and-remove-attachments-to-an-item-in-a-compose-form.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Adds the specified item as an attachment to the composed item.\n// ID is the EWS ID of the item to be attached.\nfunction addItemAttachment(itemId) {\n    // When the attachment finishes uploading, the\n    // callback function is invoked. Here, the callback\n    // function uses only asyncResult as a parameter,\n    // and if the attaching succeeds, gets the attachment ID.\n    // You can optionally pass any other object you wish to\n    // access in the callback function as an argument to\n    // the asyncContext parameter.\n    Office.context.mailbox.item.addItemAttachmentAsync(\n        itemId,\n        \"Welcome email\",\n        { asyncContext: { var1: 1, var2: 2 } },\n        (asyncResult) => {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.error(asyncResult.error.message);\n                return;\n            }\n\n            const attachmentID = asyncResult.value;\n            console.log(`ID of added attachment: ${attachmentID}`);\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Recipients with Office.js API in Outlook Compose Forms - JavaScript\nDESCRIPTION: This code demonstrates how to get the To, Cc, and Bcc recipients of an email message or required/optional attendees in an appointment when composing in Outlook, using the Office.js API's asynchronous methods. The code checks the item type to access the appropriate recipient fields, then calls getAsync for each, handling results with a callback that checks the operation status, retrieves email addresses, and writes them to the UI. Dependencies include the Office.js library and a page element with id=\\\"message\\\"; the mailbox item must be in compose mode. Inputs: current compose item context; Outputs: displayed email addresses of recipients. Limitations: Recipients must be resolved by the Outlook client, and Bcc is only available for messages.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-set-or-add-recipients.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet item;\n\n// Confirms that the Office.js library is loaded.\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Outlook) {\n        item = Office.context.mailbox.item;\n        getAllRecipients();\n    }\n});\n\n// Gets the email addresses of all the recipients of the item being composed.\nfunction getAllRecipients() {\n    let toRecipients, ccRecipients, bccRecipients;\n\n    // Verify if the mail item is an appointment or message.\n    if (item.itemType === Office.MailboxEnums.ItemType.Appointment) {\n        toRecipients = item.requiredAttendees;\n        ccRecipients = item.optionalAttendees;\n    }\n    else {\n        toRecipients = item.to;\n        ccRecipients = item.cc;\n        bccRecipients = item.bcc;\n    }\n\n    // Get the recipients from the To or Required field of the item being composed.\n    toRecipients.getAsync((asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            write(asyncResult.error.message);\n            return;\n        }\n\n        // Display the email addresses of the recipients or attendees.\n        write(`Recipients in the To or Required field: ${displayAddresses(asyncResult.value)}`);\n    });\n\n    // Get the recipients from the Cc or Optional field of the item being composed.\n    ccRecipients.getAsync((asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            write(asyncResult.error.message);\n            return;\n        }\n\n        // Display the email addresses of the recipients or attendees.\n        write(`Recipients in the Cc or Optional field: ${displayAddresses(asyncResult.value)}`);\n    });\n\n    // Get the recipients from the Bcc field of the message being composed, if applicable.\n    if (bccRecipients.length > 0) {\n        bccRecipients.getAsync((asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            write(asyncResult.error.message);\n            return;\n        }\n\n        // Display the email addresses of the recipients.\n        write(`Recipients in the Bcc field: ${displayAddresses(asyncResult.value)}`);\n        });\n    } else {\n        write(\"Recipients in the Bcc field: None\");\n    }\n}\n\n// Displays the email address of each recipient.\nfunction displayAddresses (recipients) {\n    for (let i = 0; i < recipients.length; i++) {\n        write(recipients[i].emailAddress);\n    }\n}\n\n// Writes to a div with id=\"message\" on the page.\nfunction write(message) {\n    document.getElementById(\"message\").innerText += message;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Paragraph Insertion and Style Application with Office.js (JavaScript)\nDESCRIPTION: Implements Office.js task functions for inserting paragraphs into and applying styles to a Word document from a task pane add-in. Each is an async function that wraps Office.js command queuing via Word.run. insertParagraph enqueues a paragraph insertion at the body start, while applyStyle acquires and styles the first paragraph using a Word built-in style. Both rely on context.sync to commit batched Office.js commands. Dependencies are the Office.js library and that the add-in be running in a Word document context. Functions expect to be invoked from UI button events, with inputs handled internally, and produce visible Word document changes. Limitations include running only in supported Word environments and requiring user permissions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertParagraph() {\\n    await Word.run(async (context) => {\\n\\n        // TODO1: Queue commands to insert a paragraph into the document.\\n\\n        await context.sync();\\n    });\\n}\\n\\n/** Default helper for invoking an action and handling errors. */\\nasync function tryCatch(callback) {\\n    try {\\n        await callback();\\n    } catch (error) {\\n        // Note: In a production add-in, you'd want to notify the user through your add-in's UI.\\n        console.error(error);\\n    }\\n}\\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst docBody = context.document.body;\\ndocBody.insertParagraph(\\\"Office has several versions, including Office 2016, Microsoft 365 subscription, and Office on the web.\\\",\\n                        Word.InsertLocation.start);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function applyStyle() {\\n    await Word.run(async (context) => {\\n\\n        // TODO1: Queue commands to style text.\\n\\n        await context.sync();\\n    });\\n}\\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstParagraph = context.document.body.paragraphs.getFirst();\\nfirstParagraph.styleBuiltIn = Word.Style.intenseReference;\n```\n\n----------------------------------------\n\nTITLE: Safely Retrieving or Creating an Excel Worksheet using getItemOrNullObject in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates using `Excel.run` and `getItemOrNullObject` within an asynchronous function to attempt retrieving an Excel worksheet named 'Data'. It first calls `getItemOrNullObject` and then `context.sync()`. The `isNullObject` property of the returned `dataSheet` object is then checked. If true (meaning the sheet doesn't exist), a new worksheet with the name 'Data' is created using `worksheets.add()`. Finally, the position of the worksheet (either the pre-existing one or the newly created one) is set.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let dataSheet = context.workbook.worksheets.getItemOrNullObject(\"Data\");\n    \n    await context.sync();\n    \n    if (dataSheet.isNullObject) {\n        dataSheet = context.workbook.worksheets.add(\"Data\");\n    }\n    \n    // Set `dataSheet` to be the second worksheet in the workbook.\n    dataSheet.position = 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Returning a Rectangular Dynamic Array in JavaScript Excel Custom Function\nDESCRIPTION: This JavaScript function, declared as a custom function (`@customfunction`), returns a 3x3 two-dimensional array. The results `[['apples', 1, 'pounds'], ['oranges', 3, 'pounds'], ['pears', 5, 'crates']]` will spill both downwards and rightwards, filling a rectangular range of cells in Excel. It relies on the Excel custom functions framework.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-dynamic-arrays.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Get text values that spill both right and down.\n * @customfunction\n * @returns {string[][]} A dynamic array with multiple results.\n */\nfunction spillRectangle() {\n  return [\n    ['apples', 1, 'pounds'],\n    ['oranges', 3, 'pounds'],\n    ['pears', 5, 'crates']\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Outlook API Feature with office-addin-mock and Jest in JavaScript\nDESCRIPTION: This script tests the `addHelloWorldText` function from `my-outlook-add-in-feature.js`. It leverages `office-addin-mock` to create a mock `Office` object tailored for Outlook by setting the mandatory `host` property to \"outlook\" and mocking `context.mailbox.item.setSelectedDataAsync`. The mock `Office` object is made globally available via `global.Office`. A Jest test executes the feature function and asserts that the `data` property on the mocked `item` object equals \"Hello World!\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst OfficeAddinMock = require(\"office-addin-mock\");\nconst myOutlookAddinFeature = require(\"../my-outlook-add-in-feature\");\n\n// Create the seed mock object.\nconst mockData = {\n  // Identify the host to the mock library (required for Outlook).\n  host: \"outlook\",\n  context: {\n    mailbox: {\n      item: {\n          setSelectedDataAsync: function (data) {\n          this.data = data;\n        },\n      },\n    },\n  },\n};\n  \n// Create the final mock object from the seed object.\nconst officeMock = new OfficeAddinMock.OfficeMockObject(mockData);\n\n// Create the Office object that is called in the addHelloWorldText function.\nglobal.Office = officeMock;\n\n/* Code that calls the test framework goes below this line. */\n\n// Jest test\ntest(\"Text of selection in message should be set to 'Hello World'\", async function () {\n    await myOutlookAddinFeature.addHelloWorldText();\n    expect(officeMock.context.mailbox.item.data).toBe(\"Hello World!\");\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Requesting Storage Access with Storage Access API in JavaScript\nDESCRIPTION: This snippet demonstrates how to prompt the user to grant storage access via the Storage Access API in a browser environment where third-party cookies may be blocked (e.g., due to ITP). It displays a login button if storage access is not yet granted and attaches an event handler to requestStorageAccess, calling authenticateWithCookies upon success. It requires document.hasStorageAccess and document.requestStorageAccess API support, and assumes createLoginButton and authenticateWithCookies are defined elsewhere. The function handles both scenarios where storage access is present or must be requested, and notifies on failure due to unmet requirements. Inputs: none directly; Outputs: initiates authentication if possible, otherwise shows an error.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/itp-and-third-party-cookies.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction displayLoginButton() {\n  const button = createLoginButton();\n  button.addEventListener(\"click\", function(ev) {\n    document.requestStorageAccess().then(function() {\n      authenticateWithCookies(); \n    }).catch(function() {\n      // User must have previously interacted with this domain loaded in a top frame.\n      // Also you should have previously written a cookie when domain was loaded in the top frame.\n      console.error(\"User cancelled or requirements were not met.\");\n    });\n  });\n}\n\nif (document.hasStorageAccess) { \n  document.hasStorageAccess().then(function(hasStorageAccess) { \n    if (!hasStorageAccess) { \n      displayLoginButton(); \n    } else { \n      authenticateWithCookies(); \n    } \n  }); \n} else { \n    authenticateWithCookies(); \n} \n```\n\n----------------------------------------\n\nTITLE: Configuring MailboxItem.ReadWrite.User Permission in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `authorization.permissions.resourceSpecific` array in the `manifest.json` file for an Outlook add-in using the unified manifest. It grants the `MailboxItem.ReadWrite.User` delegated permission, which is necessary for the add-in to modify the signature of a message item.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagefromchanged-onappointmentfromchanged-events.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n...\n\"authorization\": {\n    \"permissions\": {\n        \"resourceSpecific\": [\n            {\n                \"name\": \"MailboxItem.ReadWrite.User\",\n                \"type\": \"Delegated\"\n            }\n        ]\n    }\n},\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Desktop Debugging Session via npm\nDESCRIPTION: Executes the 'start:desktop' script defined in package.json. This command launches the Excel desktop application and sideloads the Office Add-in, preparing it for debugging. Requires Node.js, npm, a configured 'start:desktop' script in package.json, and a local installation of Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:desktop\n```\n\n----------------------------------------\n\nTITLE: Searching for Tabs and Changing Font in Office.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to search for tab characters ('^t') in a Word document and change their font color, highlight color, and boldness using Office.js in JavaScript. It relies on running a batch operation via Word.run and loading the 'font' property of found search results. Inputs include the active document context, while outputs involve visual formatting changes for all tab occurrences. Requires the Office.js library and should be executed in an Office Add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/search-option-guidance.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Run a batch operation against the Word object model.\\nawait Word.run(async (context) => {\\n\\n    // Queue a command to search the document for tabs.\\n    const searchResults = context.document.body.search('^t');\\n\\n    // Queue a command to load the font property values.\\n    searchResults.load('font');\\n\\n    // Synchronize the document state.\\n    await context.sync();\\n    console.log('Found count: ' + searchResults.items.length);\\n\\n    // Queue a set of commands to change the font for each found item.\\n    for (let i = 0; i < searchResults.items.length; i++) {\\n        searchResults.items[i].font.color = 'purple';\\n        searchResults.items[i].font.highlightColor = 'pink';\\n        searchResults.items[i].font.bold = true;\\n    }\\n\\n    // Synchronize the document state.\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing office-addin-mock Library in JavaScript\nDESCRIPTION: Imports the `office-addin-mock` library into a JavaScript test file using the CommonJS `require` syntax. This makes the mocking utilities available within the test script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst OfficeAddinMock = require(\"office-addin-mock\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Presentation from a Template File in PowerPoint Add-ins (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a new PowerPoint presentation based on an existing .pptx file template. It uses the HTML `FileReader` API to read a local file selected by the user (via an input element with id 'file'), convert it to a Base64-encoded string, and then passes this string to the `PowerPoint.createPresentation(base64)` method. The metadata prefix (`data:*;base64,`) is stripped before passing the string.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/powerpoint-add-ins.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst myFile = document.getElementById(\"file\");\nconst reader = new FileReader();\n\nreader.onload = function (event) {\n    // Strip off the metadata before the Base64-encoded string.\n    const startIndex = reader.result.toString().indexOf(\"base64,\");\n    const copyBase64 = reader.result.toString().substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);\n};\n\n// Read in the file as a data URL so we can parse the Base64-encoded string.\nreader.readAsDataURL(myFile.files[0]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Contextual Add-in Regular Expression Rule in Outlook Manifest XML\nDESCRIPTION: Defines an <ExtensionPoint> in the add-in manifest that activates when a regular expression matches text in the body of an Outlook item. The example uses the DetectedEntity extension point and an ItemHasRegularExpressionMatch rule that targets stock ticker symbols. Dependencies include a valid Outlook add-in XML manifest structure. Required parameters: PropertyName specifies the mail item property (BodyAsPlaintext), RegExName is the rule identifier, and RegExValue is the regular expression. The output is the activation of the contextual add-in when a match is found. Ensure character escaping per XML and Outlook manifest requirements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/contextual-outlook-add-ins.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ExtensionPoint xsi:type=\"DetectedEntity\">\n  <Label resid=\"Context.Label\" />\n  <SourceLocation resid=\"DetectedEntity.URL\" />\n  <Rule xsi:type=\"ItemHasRegularExpressionMatch\" PropertyName=\"BodyAsPlaintext\" RegExName=\"TickerSymbols\" RegExValue=\"\\b(NYSE|NASDAQ|AMEX):\\s*[A-Za-z]+\\b\" />\n</ExtensionPoint>\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Domain Message to Dialog with Specific Origin (JavaScript)\nDESCRIPTION: Demonstrates sending a message from the parent runtime to the dialog runtime using `dialog.messageChild`. It specifies the target domain using the `targetOrigin` property within the `DialogMessageOptions` object. This is necessary when the dialog may have navigated to a different domain than the parent. Requires the Dialog Origin 1.1 requirement set.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.messageChild(messageToDialog, { targetOrigin: \"https://resource.contoso.com\" });\n```\n\n----------------------------------------\n\nTITLE: Opening Office Dialog in openDialog Function (JavaScript)\nDESCRIPTION: This snippet demonstrates calling the Office.context.ui.displayDialogAsync method to open a dialog window in the Office add-in. Dependencies include Office.js and a locally-running webpage at https://localhost:3000/popup.html. The function takes the dialog URL, options for height and width (as percentages), and expects a callback as further parameter. It displays the dialog centered on the screen, and its success result is handled via the callback.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.ui.displayDialogAsync(\\n    'https://localhost:3000/popup.html',\\n    {height: 45, width: 55},\\n\\n    // TODO2: Add callback parameter.\\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting All Slides from Base64 into PowerPoint using Office JS\nDESCRIPTION: This asynchronous JavaScript function `insertAllSlides` uses the Office JavaScript API for PowerPoint (`PowerPoint.run`) to insert slides. It calls the `insertSlidesFromBase64` method on the current presentation, passing the globally stored base64 string (`chosenFileBase64`). By default, this inserts all slides from the source presentation at the beginning of the current presentation, keeping the source formatting.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/insert-slides-into-presentation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertAllSlides() {\n  await PowerPoint.run(async function(context) {\n    context.presentation.insertSlidesFromBase64(chosenFileBase64);\n    await context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Key for Privacy Link Indication (Registry Format)\nDESCRIPTION: This snippet shows the generic structure of the Windows Registry key used to indicate that privacy terms have been presented during installation. This is required for certified developers. It uses the same path structure as the add-in installation key but adds a `HasPrivacyLink` value set to \"1\". Placeholders `{{OfficeApplication}}` and `{{add-inName}}` must be replaced.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_9\n\nLANGUAGE: reg\nCODE:\n```\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Wef\\AutoInstallAddins\\{{OfficeApplication}}\\{{add-inName}}] \n\"HasPrivacyLink\"=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Handling OBO Flow Errors, Specifically Token Expiration, in JavaScript\nDESCRIPTION: Implements the error handling (`catch` block) for the OBO flow and Graph call. It specifically checks if the error message contains the `AADSTS500133` code, which indicates an expired assertion token during the OBO exchange. If detected, it sends a 401 status (Unauthorized) so the client application can attempt to refresh the SSO token and retry. Other errors result in a generic 403 status (Forbidden) response.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n} catch (err) {\n   // On rare occasions the SSO access token is unexpired when Office validates it,\n   // but expires by the time it is used in the OBO flow. Microsoft identity platform will respond\n   // with \"The provided value for the 'assertion' is not valid. The assertion has expired.\"\n   // Construct an error message to return to the client so it can refresh the SSO token.\n   if (err.errorMessage.indexOf('AADSTS500133') !== -1) {\n     res.status(401).send({ type: \"TokenExpiredError\", errorDetails: err });\n   } else {\n     res.status(403).send({ type: \"Unknown\", errorDetails: err });\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Title Typography Style with Fabric Core CSS\nDESCRIPTION: Applies the 'Title' typography style (21px, Segoe Light) using the Fabric Core CSS class `.ms-font-xl`. This style matches Office application task pane titles and is suitable for top-level elements like dialog box, page, or content titles. Use sparingly to avoid a flat typographic hierarchy. Text color needs to be applied separately.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/add-in-typography.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.ms-font-xl\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Web Server and Sideloading in Excel Desktop using npm\nDESCRIPTION: This command starts the local Node.js web server (if not already running) and automatically opens the desktop version of Excel, sideloading the add-in for testing. It should be run from the root directory of the project.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_45\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Preview Office.js TypeScript Definitions via npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install the TypeScript type definitions for the preview version of the Office JavaScript APIs. The `--save-dev` flag adds the package as a development dependency in your project's `package.json` file. These types are necessary for TypeScript compilation and provide IntelliSense support when working with preview Office.js APIs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/using-preview-apis-host.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @types/office-js-preview\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Office.js Type Acquisition in JSON\nDESCRIPTION: A `tsconfig.json` file configured to enable automatic fetching of Office.js type definitions for JavaScript IntelliSense in Visual Studio. It allows JavaScript files (`allowJs: true`), prevents compilation output (`noEmit: true`), excludes `node_modules` and local Office scripts, and explicitly includes `office-js` for type acquisition.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-javascript-intellisense-in-visual-studio.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"compilerOptions\": {\n            \"allowJs\": true,            // These settings apply to JavaScript files also.\n            \"noEmit\":  true             // Do not compile the JS (or TS) files in this project.\n        },\n        \"exclude\": [\n            \"node_modules\",             // Don't include any JavaScript found under \"node_modules\".\n            \"Scripts/Office/1\"          // Suppress loading all the JavaScript files from the Office NuGet package.\n        ],\n        \"typeAcquisition\": {\n            \"enable\": true,             // Enable automatic fetching of type definitions for detected JavaScript libraries.\n            \"include\": [ \"office-js\" ]  // Ensure that the \"Office-js\" type definition is fetched.\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Event Handler Script in Commands HTML File\nDESCRIPTION: This HTML snippet demonstrates how to include the external JavaScript file (`launchevent.js`), which contains the Office Add-in event handling logic, within the add-in's `commands.html` file. Adding this script tag ensures that the functions defined in `launchevent.js` are loaded and accessible when the add-in's command surface is initialized or when event-based activation occurs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagefromchanged-onappointmentfromchanged-events.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../launchevent/launchevent.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding webApplicationInfo to Unified Manifest - Office Add-in - JSON\nDESCRIPTION: This JSON snippet configures the 'webApplicationInfo' property within an Office Add-in's unified manifest. It specifies the app registration 'id' and 'resource' domain, enabling admin consent to be triggered automatically during deployment if required Microsoft Graph permissions are present. The 'id' should match the Azure app registration and 'resource' must be the correct fully qualified domain. This property is essential for modern authentication workflows when deploying via AppSource or centralized deployment by admins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-nested-app-auth-add-in.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"webApplicationInfo\": {\n        \"id\": \"a92ace55-9daf-47bc-84e9-065e9a6e70e3\",\n        \"resource\": \"https://contoso.com\"\n    },\n```\n\n----------------------------------------\n\nTITLE: Example Registry Key for Privacy Link Indication (Registry Format)\nDESCRIPTION: This snippet provides a concrete example of the registry key structure indicating the presence of a privacy link for a certified developer's add-in. It applies to an add-in named 'ContosoAdd-in' for Word, setting the `HasPrivacyLink` value to \"1\" under the appropriate `HKEY_CURRENT_USER` path.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_10\n\nLANGUAGE: reg\nCODE:\n```\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Wef\\AutoInstallAddins\\Word\\ContosoAdd-in] \n\"HasPrivacyLink\"=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Defining Valid Domain for Add-in Communication (JSON)\nDESCRIPTION: This JSON snippet shows the `validDomains` array within the `manifest.json`. It specifies the domains (`https://www.contoso.com`) that the add-in is allowed to navigate to or communicate with, ensuring secure cross-domain interactions and preventing unauthorized external calls.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"validDomains\": [\n    \"https://www.contoso.com\"\n],\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js Express App for Deployment (JavaScript)\nDESCRIPTION: This JavaScript code replaces the content of `src/middle-tier/app.js` (or `.ts`) to configure an Express.js server for deployment. It sets up middleware (dotenv, http-errors, path, cookie-parser, morgan, express), defines the view engine (Pug), handles static file serving differently for development and production, sets up routing (including a `/getuserdata` route protected by JWT validation), and implements error handling. Dependencies include standard Express middleware and custom helpers (`msgraph-helper`, `ssoauth-helper`). The server listens on the port defined in the environment variable `PORT`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/deploy-office-add-in-sso-to-azure.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n * Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license in root of repo. -->\n *\n * This file is the main Node.js server file that defines the express middleware.\n */\n\nrequire(\"dotenv\").config();\nimport * as createError from \"http-errors\";\nimport * as path from \"path\";\nimport * as cookieParser from \"cookie-parser\";\nimport * as logger from \"morgan\";\nimport express from \"express\";\nimport { getUserData } from \"./msgraph-helper\";\nimport { validateJwt } from \"./ssoauth-helper\";\n\n/* global console, process, require, __dirname */\n\nconst app = express();\nconst port = process.env.PORT;\n\napp.set(\"port\", port);\n\n// view engine setup\napp.set(\"views\", path.join(__dirname, \"views\"));\napp.set(\"view engine\", \"pug\");\n\napp.use(logger(\"dev\"));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\n/* Turn off caching when developing */\nif (process.env.NODE_ENV !== \"production\") {\n  app.use(express.static(path.join(process.cwd(), \"dist\"), { etag: false }));\n\n  app.use(function (req, res, next) {\n    res.header(\"Cache-Control\", \"private, no-cache, no-store, must-revalidate\");\n    res.header(\"Expires\", \"-1\");\n    res.header(\"Pragma\", \"no-cache\");\n    next();\n  });\n} else {\n  // In production mode, let static files be cached.\n  app.use(express.static(path.join(process.cwd())));\n  console.log(\"static set up: \" + path.join(process.cwd()));\n}\n\nconst indexRouter = express.Router();\nindexRouter.get(\"/\", function (req, res) {\n  res.sendFile(\"/taskpane.html\", { root: __dirname });\n});\n\n// Route APIs\nindexRouter.get(\"/getuserdata\", validateJwt, getUserData);\n\napp.use(\"/\", indexRouter);\n\n// Catch 404 and forward to error handler\napp.use(function (req, res, next) {\n  console.log(\"error 404\");\n  next(createError(404));\n});\n\n// error handler\napp.use(function (err, req, temp, res) {\n  // set locals, only providing error in development\n  console.log(\"error 500\");\n  res.locals.message = err.message;\n  res.locals.error = req.app.get(\"env\") === \"development\" ? err : {};\n\n  // render the error page\n  res.status(err.status || 500).send({\n    message: err.message,\n  });\n});\n\napp.listen(process.env.PORT, () => console.log(\"Server listening on port: \" + process.env.PORT));    \n```\n\n----------------------------------------\n\nTITLE: Reverting Office Add-in Webview to Default Setting\nDESCRIPTION: Resets the webview configuration for the specified Office Add-in, allowing Office to use the default webview determined by the Windows and Office version combination. Replace `<path-to-manifest>` with the path to the add-in's manifest file. This command uses the `office-addin-dev-settings` tool via `npx`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/use-legacy-edge-or-ie.md#_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\nnpx office-addin-dev-settings webview <path-to-manifest> default\n```\n\n----------------------------------------\n\nTITLE: Defining a Contextual Tab Structure in JSON\nDESCRIPTION: This JSON object represents a single contextual tab within the `tabs` array. It includes a unique `id` ('CtxTab1'), a user-friendly `label` ('Contoso Data'), and an empty `groups` array which will contain the control groups (1 to 20 allowed) for this tab. The optional `visible` property defaults to false.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\": \"CtxTab1\",\\n  \"label\": \"Contoso Data\",\\n  \"groups\": [\\n\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Function for Sphere Volume in JavaScript\nDESCRIPTION: This JavaScript snippet defines an Excel custom function named `sphereVolume`. It uses the `@customfunction` JSDoc tag to mark it as a custom function. The function takes a single parameter, `radius` (a number), and calculates the volume of a sphere using the formula (4/3) * pi * radius^3. It returns the calculated volume as a number.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-overview.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Returns the volume of a sphere.\n * @customfunction\n * @param {number} radius\n */\nfunction sphereVolume(radius) {\n  return Math.pow(radius, 3) * 4 * Math.PI / 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Dialog Communication Domains via Windows Registry (Properties)\nDESCRIPTION: This snippet shows the content of a `.reg` file used to configure trusted domains for cross-domain dialog communication in older versions of Office on Windows that don't fully support the `targetOrigin` parameter in `messageParent`. By adding specific domains under the `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\WEF\\AllowedDialogCommunicationDomains` registry key, administrators can allow legacy add-ins to continue functioning without code updates.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_14\n\nLANGUAGE: properties\nCODE:\n```\nWindows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\WEF\\AllowedDialogCommunicationDomains]\n\"My trusted domain\"=\"https://www.contoso.com\"\n\"Another trusted domain\"=\"https://fabrikam.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Web Image Cell Value Type with Error Fallbacks in Excel (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to define a web image cell value in Excel that can be included either as part of an entity or as an independent value in a range. The object uses the Excel.WebImageCellValue type and includes key properties such as 'type', 'address', 'basicType', and 'basicValue' to support image referencing and error fallback when compatibility requirements are not met. Required dependencies are the Excel JavaScript API and its type definitions, and the snippet expects the URL to the image and some basic Excel range error constants as input. The output is a well-formed cell value object that Excel can interpret, but it may resolve to a '#VALUE!' error in environments lacking full support for data types.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-data-types-concepts.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// This is an example of the complete JSON for a web image.\nconst myImage: Excel.WebImageCellValue = {\n    type: Excel.CellValueType.webImage,\n    address: \"https://bit.ly/2YGOwtw\", \n    basicType: Excel.RangeValueType.error, // A read-only property. Used as a fallback in incompatible scenarios.\n    basicValue: \"#VALUE!\" // A read-only property. Used as a fallback in incompatible scenarios.\n};\n```\n\n----------------------------------------\n\nTITLE: Localizing Image Resource URL in Office Manifest XML\nDESCRIPTION: This XML snippet demonstrates localizing an image resource defined within the `<Resources>` section of the manifest. The `<bt:Image>` element specifies a default image URL via `DefaultValue` and includes an `<bt:Override>` child element to provide a different image URL for the Japanese (`ja-jp`) locale.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<Resources>\n      <bt:Images>\n        <bt:Image id=\"icon1_16x16\" DefaultValue=\"https://www.contoso.com/icon_default.png\">\n          <bt:Override Locale=\"ja-jp\" Value=\"https://www.contoso.com/ja-jp16-icon_default.png\" />\n        </bt:Image>\n ...\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Appending Text to Selected Paragraph using Word JavaScript API\nDESCRIPTION: This JavaScript snippet demonstrates how to append a new sentence to the end of the first paragraph selected by the user within a Word document using the Word JavaScript API. It uses `Word.run` to manage the execution context, retrieves the selected paragraphs, loads their properties, inserts text at the end of the first paragraph, and synchronizes the changes back to the document.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/word-add-ins-programming-overview.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Word.run(async (context) => {\n  const paragraphs = context.document.getSelection().paragraphs;\n  paragraphs.load();\n  await context.sync();\n  paragraphs.items[0].insertText(' New sentence in the paragraph.',\n                                   Word.InsertLocation.end);\n  await context.sync();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Outlook Signature Event Handlers in JavaScript\nDESCRIPTION: Defines JavaScript event handlers (`onNewMessageComposeHandler`, `onMessageFromChangedHandler`) for an Outlook add-in using the Office JS API. `onNewMessageComposeHandler` conditionally adds a default signature to new messages if no client signature is enabled (platform check included). `onMessageFromChangedHandler` retrieves the selected 'From' account details, creates a signature including an embedded image, and updates the message body when the sender changes. The `setSignature` function is a helper to apply the signature using `setSignatureAsync`. `Office.actions.associate` maps these functions to action IDs defined in the add-in manifest, enabling event-based activation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagefromchanged-onappointmentfromchanged-events.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n// The OnNewMessageCompose event handler that adds a signature to a new message.\nfunction onNewMessageComposeHandler(event) {\n    const platform = Office.context.platform;\n    const signature = \"<i>This is a sample signature.</i>\";\n\n    // On supported platforms, check if a default Outlook signature is already configured.\n    if (platform !== Office.PlatformType.Android && platform !== Office.PlatformType.iOS) {\n        Office.context.mailbox.item.isClientSignatureEnabledAsync({ asyncContext: { event: event, signature: signature } }, (result) => {\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                console.log(result.error.message);\n                return;\n            }\n\n            // Add a signature if there's no default Outlook signature configured.\n            const signatureEnabled = result.value;\n            if (signatureEnabled === false) {\n                const event = result.asyncContext.event;\n                const signature = result.asyncContext.signature;\n                setSignature(signature, event);\n            }\n        });\n    } else {\n        setSignature(signature, event);\n    }\n}\n\n// The OnMessageFromChanged event handler that updates the signature when the email address in the From field is changed.\nfunction onMessageFromChangedHandler(event) {\n    const item = Office.context.mailbox.item;\n    const signatureIcon =\n    \"iVBORw0KGgoAAAANSUhEUgAAACcAAAAnCAMAAAC7faEHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAzUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKMFRskAAAAQdFJOUwAQIDBAUGBwgI+fr7/P3+8jGoKKAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABT0lEQVQ4T7XT2ZalIAwF0DAJhMH+/6+tJOQqot6X6joPiouNBo3w9/Hd6+hrYnUt6vhLcjEAJevVW0zJxABSlcunhERpjY+UKoNN5+ZgDGu2onNz0OngjP2FM1VdyBW1LtvGeYrBLs7U5I1PTXZt+zifcS3Icw2GcS3vxRY3Vn/iqx31hUyTnV515kdTfbaNhZLI30AceqDiIo4tyKEmJpKdP5M4um+nUwfDWxAXdzqMNKQ14jLdL5ntXzxcRF440mhS6yu882Kxa30RZcUIjTCJg7lscsR4VsMjfX9Q0Vuv/Wd3YosD1J4LuSRtaL7bzXGN1wx2cytUdncDuhA3fu6HPTiCvpQUIjZ3sCcHVbvLtbNTHlysx2w9/s27m9gEb+7CTri6hR1wcTf2gVf3wBRe3CMbcHYvTODkXhnD0+178K/pZ9+n/C1ru/2HAPwAo7YM1X4+tLMAAAAASUVORK5CYII=\";\n\n    // Get the currently selected From account.\n    item.from.getAsync({ asyncContext: event }, (result) => {\n        if (result.status === Office.AsyncResultStatus.Failed) {\n            console.log(result.error.message);\n            return;\n        }\n\n        // Create a signature based on the currently selected From account.\n        const name = result.value.displayName;\n        const options = { asyncContext: { event: result.asyncContext, name: name }, isInline: true };\n        item.addFileAttachmentFromBase64Async(signatureIcon, \"signatureIcon.png\", options, (result) => {\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                console.log(result.error.message);\n                return;\n            }\n    \n            // Add the created signature to the mail item.\n            const signature = \"<img src='cid:signatureIcon.png'>\" + result.asyncContext.name;\n            const event = result.asyncContext.event;\n            setSignature(signature, event);\n        });\n    });\n}\n\n// Sets the custom signature and adds it to the mail item.\nfunction setSignature(signature, event) {\n    Office.context.mailbox.item.body.setSignatureAsync(\n        signature,\n        { asyncContext: event, coercionType: Office.CoercionType.Html },\n        (result) => {\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                console.log(result.error.message);\n                return;\n            }\n\n            console.log(\"Successfully added signature.\");\n            const event = result.asyncContext;\n            event.completed();\n        }\n    );\n}\n\n// IMPORTANT: To ensure your add-in is supported in Outlook, remember to\n// map the event handler name specified in the manifest's LaunchEvent element (with the add-in only manifest)\n// or the \"autoRunEvents.events.actionId\" property (with the unified manifest for Microsoft 365)\n// to its JavaScript counterpart.\nOffice.actions.associate(\"onNewMessageComposeHandler\", onNewMessageComposeHandler);\nOffice.actions.associate(\"onMessageFromChangedHandler\", onMessageFromChangedHandler);\n```\n\n----------------------------------------\n\nTITLE: Applying Localized Strings using Office JS API and JavaScript\nDESCRIPTION: This JavaScript code runs within the `Home.js` file of an Office Add-in. It initializes using `Office.onReady` and ensures the DOM is ready with `$(document).ready`. It retrieves the Office application's display language using `Office.context.displayLanguage` (with an option to use `Office.context.contentLanguage`). It then uses the `UIStrings.getLocaleStrings` function (from `UIStrings.js`) to fetch the corresponding localized strings object. Finally, it uses jQuery (`$`) to update the text content of the HTML elements with IDs `greeting` and `about` with the retrieved localized strings.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n/// <reference path=\"../App.js\" />\n/// <reference path=\"../UIStrings.js\" />\n\n\n(() => {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.onReady(() => {\n        $(document).ready(() => {\n            // Get the language setting for editing document content.\n            // To test this, uncomment the following line and then comment out the\n            // line that uses Office.context.displayLanguage.\n            // const myLanguage = Office.context.contentLanguage;\n    \n            // Get the language setting for UI display in the Office application.\n            const myLanguage = Office.context.displayLanguage;\n            let UIText;\n    \n            // Get the resource strings that match the language.\n            // Use the UIStrings object from the UIStrings.js file\n            // to get the JSON object with the correct localized strings.\n            UIText = UIStrings.getLocaleStrings(myLanguage);\n    \n            // Set localized text for UI elements.\n            $(\"#greeting\").text(UIText.Greeting);\n            $(\"#about\").text(UIText.Introduction);\n        });\n    });\n})();\n```\n\n----------------------------------------\n\nTITLE: Closing Task Panes Programmatically in Outlook Mobile using Office.js (JavaScript)\nDESCRIPTION: Demonstrates the use of the Office.js API method `Office.context.ui.closeContainer` to programmatically close the current task pane within an Outlook mobile add-in. This is particularly relevant for mobile scenarios where task panes occupy the full screen and should be dismissed once the add-in's workflow is complete to return the user to the main Outlook interface.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-mobile-support.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.ui.closeContainer\n```\n\n----------------------------------------\n\nTITLE: Locating Excel Add-in Sideloading Folder on Mac\nDESCRIPTION: Specifies the user library path where Excel Add-in manifest files should be placed for sideloading on macOS. The '<username>' placeholder must be replaced with the actual user's home folder name. This 'wef' folder might need to be created manually if it doesn't exist.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/sideload-an-office-add-in-on-mac.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/Users/<username>/Library/Containers/com.microsoft.Excel/Data/Documents/wef\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Item from Outlook REST API via AJAX in JavaScript\nDESCRIPTION: Provides a complete example for calling the Outlook Mail REST API directly from a JavaScript add-in using jQuery's $.ajax. The function assumes the existence of a valid access token, retrieves the correct REST-formatted item ID, constructs the endpoint URL using Office.context.mailbox.restUrl, and issues an authenticated GET request. Dependencies include jQuery, Office.js, and supporting helper functions. Upon success, processes the returned message object; on failure, it triggers error handling. This pattern is suitable for add-ins running in environments that support CORS for client-side requests.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/use-rest-api.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getCurrentItem(accessToken) {\\n  // Get the item's REST ID.\\n  const itemId = getItemRestId();\\n\\n  // Construct the REST URL to the current item.\\n  // Details for formatting the URL can be found at\\n  // https://learn.microsoft.com/previous-versions/office/office-365-api/api/version-2.0/mail-rest-operations#get-messages.\\n  const getMessageUrl = Office.context.mailbox.restUrl +\\n    '/v2.0/me/messages/' + itemId;\\n\\n  $.ajax({\\n    url: getMessageUrl,\\n    dataType: 'json',\\n    headers: { 'Authorization': 'Bearer ' + accessToken }\\n  }).done(function(item){\\n    // Message is passed in `item`.\\n    const subject = item.Subject;\\n    ...\\n  }).fail(function(error){\\n    // Handle error.\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Excel Slicer using Office JS API\nDESCRIPTION: This snippet demonstrates how to delete a slicer from an Excel worksheet. It retrieves the first slicer from the active worksheet's slicer collection using `getItemAt(0)` and then calls the `delete` method on the slicer object. The operation is executed within an `Excel.run` context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.slicers.getItemAt(0).delete();\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Common API Feature to Set Selected Text in JavaScript\nDESCRIPTION: Exports an object `myCommonAPIAddinFeature` with an async function `addHelloWorldText`. This function uses the Office Common API `Office.context.document.setSelectedDataAsync` to set the currently selected content in the document (e.g., cell in Excel, range in Word) to \"Hello World!\", specifying text coercion. It requires the Office JavaScript library (Office.js) to be loaded in the actual add-in environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst myCommonAPIAddinFeature = {\n\n    addHelloWorldText: async () => {\n        const options = { coercionType: Office.CoercionType.Text };\n        await Office.context.document.setSelectedDataAsync(\"Hello World!\", options);\n    }\n}\n  \nmodule.exports = myCommonAPIAddinFeature;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Command for Outlook Add-in - XML\nDESCRIPTION: This XML manifest snippet defines command surfaces for an Outlook add-in, adding a button in the Appointment Attendee context for both desktop and mobile. When pressed, the button executes a function (e.g., 'logCRMEvent'). The manifest references company-specific resources and strings, and is intended to replace the full <VersionOverrides> node. Dependencies include an Office Add-in deployment and appropriately hosted referenced assets. Main parameters: resource IDs (label, tooltip, icons), function name, and resource URLs. The output is a configured add-in button executing a named JavaScript function. The snippet must be inserted in the manifest.xml, replacing all company placeholders with valid information; constraints include required image hosting and function implementation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\\\"http://schemas.microsoft.com/office/mailappversionoverrides\\\" xsi:type=\\\"VersionOverridesV1_0\\\">\\n  <VersionOverrides xmlns=\\\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\\\" xsi:type=\\\"VersionOverridesV1_1\\\">\\n    <Description resid=\\\"residDescription\\\"></Description>\\n    <Requirements>\\n      <bt:Sets>\\n        <bt:Set Name=\\\"Mailbox\\\" MinVersion=\\\"1.3\\\"/>\\n      </bt:Sets>\\n    </Requirements>\\n    <Hosts>\\n      <Host xsi:type=\\\"MailHost\\\">\\n        <DesktopFormFactor>\\n          <FunctionFile resid=\\\"residFunctionFile\\\"/>\\n          <!-- Configures the add-in button to appear in the Appointment Attendee surface of Outlook desktop clients. -->\\n          <ExtensionPoint xsi:type=\\\"AppointmentAttendeeCommandSurface\\\">\\n            <OfficeTab id=\\\"TabDefault\\\">\\n              <Group id=\\\"apptReadGroup\\\">\\n                <Label resid=\\\"residDescription\\\"/>\\n                <Control xsi:type=\\\"Button\\\" id=\\\"apptReadDesktopFunctionButton\\\">\\n                  <Label resid=\\\"residLabel\\\"/>\\n                  <Supertip>\\n                    <Title resid=\\\"residLabel\\\"/>\\n                    <Description resid=\\\"residTooltip\\\"/>\\n                  </Supertip>\\n                  <Icon>\\n                    <bt:Image size=\\\"16\\\" resid=\\\"icon-16\\\"/>\\n                    <bt:Image size=\\\"32\\\" resid=\\\"icon-32\\\"/>\\n                    <bt:Image size=\\\"80\\\" resid=\\\"icon-80\\\"/>\\n                  </Icon>\\n                  <Action xsi:type=\\\"ExecuteFunction\\\">\\n                    <FunctionName>logCRMEvent</FunctionName>\\n                  </Action>\\n                </Control>\\n              </Group>\\n            </OfficeTab>\\n          </ExtensionPoint>\\n        </DesktopFormFactor>\\n        <MobileFormFactor>\\n          <FunctionFile resid=\\\"residFunctionFile\\\"/>\\n          <!-- Configures the add-in button to appear in the Appointment Attendee surface of Outlook on mobile devices. -->\\n          <ExtensionPoint xsi:type=\\\"MobileLogEventAppointmentAttendee\\\">\\n            <Control xsi:type=\\\"MobileButton\\\" id=\\\"apptReadMobileFunctionButton\\\">\\n              <Label resid=\\\"residLabel\\\"/>\\n              <Icon>\\n                <bt:Image size=\\\"25\\\" scale=\\\"1\\\" resid=\\\"icon-16\\\"/>\\n                <bt:Image size=\\\"25\\\" scale=\\\"2\\\" resid=\\\"icon-16\\\"/>\\n                <bt:Image size=\\\"25\\\" scale=\\\"3\\\" resid=\\\"icon-16\\\"/>\\n                <bt:Image size=\\\"32\\\" scale=\\\"1\\\" resid=\\\"icon-32\\\"/>\\n                <bt:Image size=\\\"32\\\" scale=\\\"2\\\" resid=\\\"icon-32\\\"/>\\n                <bt:Image size=\\\"32\\\" scale=\\\"3\\\" resid=\\\"icon-32\\\"/>\\n                <bt:Image size=\\\"48\\\" scale=\\\"1\\\" resid=\\\"icon-48\\\"/>\\n                <bt:Image size=\\\"48\\\" scale=\\\"2\\\" resid=\\\"icon-48\\\"/>\\n                <bt:Image size=\\\"48\\\" scale=\\\"3\\\" resid=\\\"icon-48\\\"/>\\n              </Icon>\\n              <Action xsi:type=\\\"ExecuteFunction\\\">\\n                <FunctionName>logCRMEvent</FunctionName>\\n              </Action>\\n            </Control>\\n          </ExtensionPoint>\\n        </MobileFormFactor>\\n      </Host>\\n    </Hosts>\\n    <Resources>\\n      <bt:Images>\\n        <bt:Image id=\\\"icon-16\\\" DefaultValue=\\\"https://contoso.com/assets/icon-16.png\\\"/>\\n        <bt:Image id=\\\"icon-32\\\" DefaultValue=\\\"https://contoso.com/assets/icon-32.png\\\"/>\\n        <bt:Image id=\\\"icon-48\\\" DefaultValue=\\\"https://contoso.com/assets/icon-48.png\\\"/>\\n        <bt:Image id=\\\"icon-80\\\" DefaultValue=\\\"https://contoso.com/assets/icon-80.png\\\"/>\\n      </bt:Images>\\n      <bt:Urls>\\n        <bt:Url id=\\\"residFunctionFile\\\" DefaultValue=\\\"https://contoso.com/commands.html\\\"/>\\n      </bt:Urls>\\n      <bt:ShortStrings>\\n        <bt:String id=\\\"residDescription\\\" DefaultValue=\\\"Log appointment notes and other details to Contoso CRM.\\\"/>\\n        <bt:String id=\\\"residLabel\\\" DefaultValue=\\\"Log to Contoso\\\"/>\\n      </bt:ShortStrings>\\n      <bt:LongStrings>\\n        <bt:String id=\\\"residTooltip\\\" DefaultValue=\\\"Log notes to Contoso CRM for this appointment.\\\"/>\\n      </bt:LongStrings>\\n    </Resources>\\n  </VersionOverrides>\\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Localizing Resources in Office Add-in Manifest (XML)\nDESCRIPTION: This XML snippet shows how to use the `<Resources>` element, typically found within `<VersionOverrides>`, to localize add-in assets. It demonstrates providing default values (`DefaultValue`) and locale-specific overrides (`<bt:Override Locale=\"...\">`) for images (`bt:Image`), URLs (`bt:Url`), and short strings (`bt:String`). Each resource is identified by an `id` (e.g., `icon1_16x16`, `residDesktopFuncUrl`, `residViewTemplates`) which can be referenced elsewhere in the manifest. This example includes an override for the Arabic (Saudi Arabia) locale (`ar-sa`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Resources>\n  <bt:Images>\n    <bt:Image id=\"icon1_16x16\" DefaultValue=\"https://contoso.com/images/app_icon_small.png\" >\n      <bt:Override Locale=\"ar-sa\" Value=\"https://contoso.com/images/app_icon_small_arsa.png\" />\n      <!-- Add information for other locales. -->\n    </bt:Image>\n  </bt:Images>\n\n  <bt:Urls>\n    <bt:Url id=\"residDesktopFuncUrl\" DefaultValue=\"https://contoso.com/urls/page_appcmdcode.html\" >\n      <bt:Override Locale=\"ar-sa\" Value=\"https://contoso.com/urls/page_appcmdcode.html?lcid=ar-sa\" />\n      <!-- Add information for other locales. -->\n    </bt:Url>\n  </bt:Urls>\n\n  <bt:ShortStrings> \n    <bt:String id=\"residViewTemplates\" DefaultValue=\"Launch My Add-in\">\n      <bt:Override Locale=\"ar-sa\" Value=\"<add localized value here>\" />\n      <!-- Add information for other locales. -->\n    </bt:String>\n  </bt:ShortStrings>\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Declaring Nested Mail Add-in Version Overrides in Manifest (XML)\nDESCRIPTION: This XML snippet illustrates how to structure `<VersionOverrides>` for a mail (Outlook) add-in, including nested overrides. The outer `<VersionOverrides>` uses the mail V1.0 schema (`http://schemas.microsoft.com/office/mailappversionoverrides`, `xsi:type=\"VersionOverridesV1_0\"`). It contains a nested `<VersionOverrides>` element using the mail V1.1 schema (`http://schemas.microsoft.com/office/mailappversionoverrides/1.1`, `xsi:type=\"VersionOverridesV1_1\"`), which must be the last child. This structure allows leveraging features from both schema versions, with V1.1 settings overriding V1.0 where applicable.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n  <!-- Other child elements are omitted. -->\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n    <!-- Child elements are omitted. -->\n  </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Adding Mobile Form Factor in Unified Manifest (JSON)\nDESCRIPTION: Specifies 'mobile' within the 'extensions.ribbons.requirements.formFactors' array in the unified manifest (JSON) to indicate that the add-in supports mobile devices. This is a required step for enabling add-in commands on Outlook mobile.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-mobile-support.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"formFactors\": [\n    \"mobile\",\n    <!-- Typically, there'll be other form factors listed. -->\n]\n```\n\n----------------------------------------\n\nTITLE: Building the Office Add-in Project using npm\nDESCRIPTION: This command line instruction utilizes the Node Package Manager (npm) to execute the 'build' script defined in the project's `package.json` file. This script typically compiles or transpiles code (e.g., TypeScript to JavaScript), bundles assets using tools like Webpack, and prepares the add-in's files for deployment or local testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagefromchanged-onappointmentfromchanged-events.md#_snippet_7\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Languages in Office Add-in Manifest (JSON)\nDESCRIPTION: This JSON snippet shows the 'localizationInfo' object for a unified app manifest in Microsoft 365, specifying a default language ('en') and linking to an external JSON file ('fr-fr.json') for French translations. It enables multi-language support by referencing language-tagged resources. Used in the manifest to inform Office about additional localized resources; the 'file' property names a resource file to use for the specified tag.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"localizationInfo\\\": {\\n    \\\"defaultLanguageTag\\\": \\\"en\\\",\\n    \\\"additionalLanguages\\\": [\\n      {\\n        \\\"languageTag\\\": \\\"fr-fr\\\",\\n        \\\"file\\\": \\\"fr-fr.json\\\"\\n      }\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Word Paragraph Style in styles.xml (XML)\nDESCRIPTION: This XML snippet represents a minimal but complete definition for the built-in 'Heading 1' style within the `styles.xml` part of an Office Open XML package. It shows the necessary structure (`pkg:part`, `pkg:xmlData`, `w:styles`) and elements (`w:style`, `w:name`, `w:basedOn`, `w:pPr`, `w:rPr`) required to define the style for use when inserting content via a Word add-in. It includes the style name, ID, and formatting attributes, retaining the complete definition as a best practice.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<pkg:part pkg:name=\"/word/styles.xml\" pkg:contentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\">\n  <pkg:xmlData>\n    <w:styles xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" >\n      <w:style w:type=\"paragraph\" w:styleId=\"Heading1\">\n        <w:name w:val=\"heading 1\"/>\n        <w:basedOn w:val=\"Normal\"/>\n        <w:next w:val=\"Normal\"/>\n        <w:link w:val=\"Heading1Char\"/>\n        <w:uiPriority w:val=\"9\"/>\n        <w:qFormat/>\n        <w:pPr>\n          <w:keepNext/>\n          <w:keepLines/>\n          <w:spacing w:before=\"240\" w:after=\"0\" w:line=\"259\" w:lineRule=\"auto\"/>\n          <w:outlineLvl w:val=\"0\"/>\n        </w:pPr>\n        <w:rPr>\n          <w:rFonts w:asciiTheme=\"majorHAnsi\" w:eastAsiaTheme=\"majorEastAsia\" w:hAnsiTheme=\"majorHAnsi\" w:cstheme=\"majorBidi\"/>\n          <w:color w:val=\"2E74B5\" w:themeColor=\"accent1\" w:themeShade=\"BF\"/>\n          <w:sz w:val=\"32\"/>\n          <w:szCs w:val=\"32\"/>\n        </w:rPr>\n      </w:style>\n    </w:styles>\n  </pkg:xmlData>\n</pkg:part>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Project Data via OData REST Call using jQuery AJAX in JavaScript\nDESCRIPTION: Defines the `retrieveOData` function that constructs a REST query URL using global variables (`_odataUrl`, `PROJQUERY`, etc.). It uses jQuery's `$.ajax` method to send an asynchronous GET request to the Project Server OData endpoint (`/_api/ProjectData/Projects`). It sets the 'Accept' header for JSON verbose format (`application/json; odata=verbose`) and enables CORS support via `$.support.cors = true` (noting this may not work with Project on the web). The `complete` callback handles the response: it passes the response text to `parseODataResult`, displays the request URL, response status, headers, and raw JSON response in the UI (`#odataText`), and logs the URL on error. Errors during the AJAX call are delegated to the `getProjectDataErrorHandler` function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n//  Functions to get and parse the Project Server reporting data./\n\n// Get data about all projects on Project Server,\n// by using a REST query with the ajax method in jQuery.\nfunction retrieveOData() {\n    let restUrl = _odataUrl + PROJQUERY + QUERY_FILTER + QUERY_SELECT1 + QUERY_SELECT2;\n    let accept = \"application/json; odata=verbose\";\n    accept.toLocaleLowerCase();\n\n    // Enable cross-origin scripting (required by jQuery 1.5 and later).\n    // This does not work with Project on the web.\n    $.support.cors = true;\n\n    $.ajax({\n        url: restUrl,\n        type: \"GET\",\n        contentType: \"application/json\",\n        data: \"\",      // Empty string for the optional data.\n        //headers: { \"Accept\": accept },\n        beforeSend: function (xhr) {\n            xhr.setRequestHeader(\"ACCEPT\", accept);\n        },\n        complete: function (xhr, textStatus) {\n            // Create a message to display in the text box.\n            let message = \"\\r\\ntextStatus: \" + textStatus +\n                \"\\r\\nContentType: \" + xhr.getResponseHeader(\"Content-Type\") +\n                \"\\r\\nStatus: \" + xhr.status +\n                \"\\r\\nResponseText:\\r\\n\" + xhr.responseText;\n\n            // xhr.responseText is the result from an XmlHttpRequest, which \n            // contains the JSON response from the OData service.\n            parseODataResult(xhr.responseText, _projectUid);\n\n            // Write the document name, response header, status, and JSON to the odataText control.\n            $(\"#odataText\").text(_docUrl);\n            $(\"#odataText\").append(\"\\r\\nREST query:\\r\\n\" + restUrl);\n            $(\"#odataText\").append(message);\n\n            if (xhr.status != 200 &amp;&amp; xhr.status != 1223 &amp;&amp; xhr.status != 201) {\n                $(\"#odataInfo\").append(\"<div>\" + htmlEncode(restUrl) + \"</div>\");\n            }\n        },\n        error: getProjectDataErrorHandler\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 'Create Content Control' Button in Word Task Pane with HTML\nDESCRIPTION: This snippet adds a new button with id 'create-content-control' to the taskpane HTML, making it available for JavaScript event handling to trigger content control creation. No dependencies besides standard HTML are required. The button triggers a JavaScript function to insert a content control in the document when clicked. The button is styled using the 'ms-Button' class.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"ms-Button\\\" id=\\\"create-content-control\\\">Create Content Control</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Mobile Ribbon Group in manifest.json\nDESCRIPTION: This JSON snippet illustrates how to define a mobile-specific ribbon group by adding a `customMobileRibbonGroups` array to a tab definition (identified by `builtInTabId`: \"TabDefault\") within the `extensions.ribbons.tabs` section of `manifest.json`. It includes configuration for a mobile button (\"mobileInsertMeetingButton\") with its label, type, action ID, and icons for various scales and sizes. Non-mobile groups are omitted for brevity.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"tabs\": [\n    {\n        \"builtInTabId\": \"TabDefault\",\n        \"groups\": [\n            <-- non-mobile group objects omitted -->\n        ],\n        \"customMobileRibbonGroups\": [\n            {\n                \"id\": \"mobileApptComposeGroup\",\n                \"label\": \"Contoso Meeting\",\n                \"controls\": [\n                    { \n                        \"id\": \"mobileInsertMeetingButton\",\n                        \"label\": \"Add meeting\",\n                        \"type\": \"mobileButton\",\n                        \"actionId\": \"insertContosoMeeting\",\n                        \"icons\": [\n                            {\n                                \"scale\": 1,\n                                \"size\": 25,\n                               \"url\": \"https://contoso.com/assets/icon-25.png\"\n                            },\n                            {\n                                \"scale\": 1,\n                                \"size\": 32,\n                                \"url\": \"https://contoso.com/assets/icon-32.png\"\n                            },\n                            {\n                                \"scale\": 1,\n                                \"size\": 48,\n                                \"url\": \"https://contoso.com/assets/icon-48.png\"\n                            },                                \n                            {\n                                \"scale\": 2,\n                                \"size\": 25,\n                                \"url\": \"https://contoso.com/assets/icon-25.png\"\n                            },\n                            {\n                                \"scale\": 2,\n                                \"size\": 32,\n                                \"url\": \"https://contoso.com/assets/icon-32.png\"\n                            },\n                            {\n                                \"scale\": 2,\n                                \"size\": 48,\n                                \"url\": \"https://contoso.com/assets/icon-48.png\"\n                            },                                \n                            {\n                                \"scale\": 3,\n                                \"size\": 25,\n                                \"url\": \"https://contoso.com/assets/icon-25.png\"\n                            },\n                            {\n                                \"scale\": 3,\n                                \"size\": 32,\n                                \"url\": \"https://contoso.com/assets/icon-32.png\"\n                            },\n                            {\n                                \"scale\": 3,\n                                \"size\": 48,\n                                \"url\": \"https://contoso.com/assets/icon-48.png\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]  \n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ins using Teams Toolkit CLI - Command Line\nDESCRIPTION: Invokes the Teams Toolkit CLI to uninstall an add-in based on its title ID in a non-interactive mode. This command requires the Teams Toolkit CLI installed and a valid add-in title ID (with 'U_' prefix) obtained from the Windows registry. It can be executed in a command prompt, bash shell, or terminal. Inputs: the add-in's title ID. Output: Removes the CLI-managed Office Add-in from your local environment. This command is limited to add-ins installed via the Teams Toolkit CLI.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/uninstall-add-in.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nteamsapp uninstall --mode title-id --title-id {title ID} --interactive false\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Box in Excel using JavaScript\nDESCRIPTION: This snippet demonstrates adding a text box containing \"Hello!\" to the 'MyWorksheet' using the `shapes.addTextBox` method. It positions and sizes the text box and assigns it the name \"Textbox\" via the Excel JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// This sample creates a text box with the text \"Hello!\" and sizes it appropriately.\nawait Excel.run(async (context) => {\n    let shapes = context.workbook.worksheets.getItem(\"MyWorksheet\").shapes;\n    let textbox = shapes.addTextBox(\"Hello!\");\n    textbox.left = 100;\n    textbox.top = 100;\n    textbox.height = 20;\n    textbox.width = 45;\n    textbox.name = \"Textbox\";\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP GET/POST Protocols in Web.config for ASMX Service (XML)\nDESCRIPTION: This XML snippet is added to the `web.config` file of the web application project. It configures the `<webServices>` section to explicitly enable the `HttpGet` and `HttpPost` protocols, allowing the ASMX web service to be called via these standard web methods, typically required for client-side scripting interaction.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n```XML\n<webServices>\n  <protocols>\n    <add name=\"HttpGet\" />\n    <add name=\"HttpPost\" />\n  </protocols>\n</webServices>\n```\n```\n\n----------------------------------------\n\nTITLE: Localizing Add-in Icon URL in Office Manifest XML\nDESCRIPTION: This XML snippet illustrates localizing the icon URL for an Office Add-in. The `<IconUrl>` element specifies the default icon path using `DefaultValue`. A subsequent sibling `<Override>` element provides an alternative icon URL specifically for the French (`fr-fr`) locale.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Replace \"domain\" with a real web server name and path. -->\n<IconUrl DefaultValue=\"https://<domain>/DefaultLogo.png\"/>\n<Override Locale=\"fr-fr\" Value=\"https://<domain>/FrenchLogo.png\"/>\n```\n\n----------------------------------------\n\nTITLE: Clearing Office Add-in UI Validation Cache in Windows Registry (Current User)\nDESCRIPTION: Identifies the Windows Registry key under HKEY_CURRENT_USER that stores the Custom UI Validation Cache for Office Add-ins. Entries within this key, typically named starting with the add-in's ID (a GUID), should be found and deleted to clear cached custom UI elements (like ribbon buttons) associated with the ghost add-in for the current user.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/uninstall-add-in.md#_snippet_6\n\nLANGUAGE: registry\nCODE:\n```\nComputer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Common\\CustomUIValidationCache\n```\n\n----------------------------------------\n\nTITLE: Loading Latest Office JavaScript API Library (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to include the Office JavaScript API library (Office.js) in an Office Add-in's HTML file using a script tag pointing to the Microsoft CDN. Using `/1/` in the URL ensures that the add-in always references the most recent version of the library.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-office-hosts-and-api-requirements-unified.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Prepend-on-Send Handler in Outlook Add-in (JavaScript)\nDESCRIPTION: This JavaScript function `prependHeaderOnSend` implements the logic for the prepend-on-send feature, intended to be called by an `ExecuteFunction` action defined in the manifest. It first asynchronously gets the current body type (`Office.context.mailbox.item.body.getTypeAsync`) to ensure compatibility. Then, it defines an HTML header and uses `Office.context.mailbox.item.body.prependOnSendAsync` to add this header to the beginning of the email body when the item is sent. The function includes error handling for the async calls and signals completion to the Outlook client using `event.completed()`, which is required for on-send event handlers.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/append-on-send.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction prependHeaderOnSend(event) {\n  // It's recommended to call the getTypeAsync method and pass its returned value to the options.coercionType parameter of the prependOnSendAsync call.\n  Office.context.mailbox.item.body.getTypeAsync(\n    {\n      asyncContext: event\n    },\n    (asyncResult) => {\n      if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n        console.log(asyncResult.error.message);\n        return;\n      }\n        \n      // Sets the header to be prepended to the body of the message on send.\n      const bodyFormat = asyncResult.value;\n      // Because of the various ways in which HTML text can be formatted, the content may render differently when it's prepended to the mail item body.\n      // In this scenario, a <br> tag is added to the end of the HTML string to preserve its format.\n      const header = '<div style=\"border:3px solid #000;padding:15px;\"><h1 style=\"text-align:center;\">Contoso Limited</h1></div><br>';\n\n      Office.context.mailbox.item.body.prependOnSendAsync(\n        header,\n        {\n          asyncContext: asyncResult.asyncContext,\n          coercionType: bodyFormat\n        },\n        (asyncResult) => {\n          if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(asyncResult.error.message);\n            return;\n          }\n\n          console.log(\"The header will be prepended when the mail item is sent.\");\n          asyncResult.asyncContext.completed();\n        }\n      );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Add-in Project Directory - Command Line - Shell\nDESCRIPTION: This snippet uses the command line to change the working directory to the root of the newly created Office Add-in project called \\\"My Office Add-in\\\". It is a prerequisite step before running further commands to start servers or perform project operations. The required dependency is a shell environment (e.g., CMD, bash, or PowerShell), and the main parameter is the directory name. No input or output parameters other than directory navigation; ensure the path matches the actual target directory.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/fluent-react-quickstart.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenID Scope to manifest.xml for SSO\nDESCRIPTION: This XML snippet shows how to add the `openid` scope within the `<Scopes>` section of the `manifest.xml` file. This scope is necessary for enabling Single Sign-On (SSO) functionality, allowing the add-in to request identity information according to the OpenID Connect standard.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/deploy-office-add-in-sso-to-azure.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Scopes>\n    <Scope>User.Read</Scope>\n    <Scope>profile</Scope>\n    <Scope>openid</Scope>\n</Scopes>\n```\n\n----------------------------------------\n\nTITLE: Setting the Category Axis Title of an Excel Chart using JavaScript\nDESCRIPTION: Accesses the category axis of the first chart on the 'Sample' worksheet and sets its title text to 'Product'. This applies to charts with a category axis, such as column or line charts.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let chart = sheet.charts.getItemAt(0);\n    chart.axes.categoryAxis.title.text = \"Product\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Excel API Helper Function by Mocking ClientRequestContext in JavaScript\nDESCRIPTION: This script tests the `getSelectedRangeAddress` helper function from `my-excel-add-in-feature.js`. It uses `office-addin-mock` to create a mock `ClientRequestContext` object by defining the necessary `workbook` properties and methods (`getSelectedRange`, `range.address`, and implicitly `sync`). A Jest test invokes the helper function with the mock context and verifies that the returned address matches the mocked value \"C2:G3\". This approach is suitable for testing helper functions that operate on a context without calling `Excel.run` directly.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst OfficeAddinMock = require(\"office-addin-mock\");\nconst myExcelAddinFeature = require(\"../my-excel-add-in-feature\");\n\n// Create the seed mock object.\nconst mockData = {\n    workbook: {\n      range: {\n        address: \"C2:G3\",\n      },\n      // Mock the Workbook.getSelectedRange method.\n      getSelectedRange: function () {\n        return this.range;\n      },\n    },\n};\n\n// Create the final mock object from the seed object.\nconst contextMock = new OfficeAddinMock.OfficeMockObject(mockData);\n\n/* Code that calls the test framework goes below this line. */\n\n// Jest test\ntest(\"getSelectedRangeAddress should return address of selected range\", async function () {\n  expect(await myOfficeAddinFeature.getSelectedRangeAddress(contextMock)).toBe(\"C2:G3\");\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Print Layout Settings - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet sets multiple print layout options for a worksheet using the Excel JavaScript API. It centers the printed page both horizontally and vertically, sets the first row as a print title row, and limits the print area to a specific cell range ('A1:D100'). Dependencies include the Office JavaScript API and an active Excel context. Key parameters specify centering, print title rows, and print area. The inputs are method calls chaining pageLayout properties, and the output is a worksheet with updated print configuration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheet-display.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Center the page in both directions.\n    sheet.pageLayout.centerHorizontally = true;\n    sheet.pageLayout.centerVertically = true;\n\n    // Set the first row as the title row for every page.\n    sheet.pageLayout.setPrintTitleRows(\"$1:$1\");\n\n    // Limit the area to be printed to the range \"A1:D100\".\n    sheet.pageLayout.setPrintArea(\"A1:D100\");\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Local Branch in Git\nDESCRIPTION: This command deletes the specified local branch (`<branch name>`). The `-d` flag ensures the branch is only deleted if it has been fully merged into its upstream counterpart or the current HEAD. Replace `<branch name>` with the actual name of the branch to be deleted. This is used to clean up local branches after their changes have been merged.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -d <branch name>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Control Group in Manifest\nDESCRIPTION: This JSON snippet shows how to define a custom control group within the 'groups' array. It includes a unique 'id', a 'label' displayed on the ribbon, 'icons' of various sizes (used when the ribbon is resized), and a placeholder for the 'controls' array that will contain the actual UI elements like buttons or menus.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"groups\": [\n    {\n        \"id\": \"msgReadGroup\",\n        \"label\": \"Contoso Add-in\",\n        \"icons\": [\n            {\n                \"size\": 16,\n                \"url\": \"https://localhost:3000/assets/icon-16.png\"\n            },\n            {\n                \"size\": 32,\n                \"url\": \"https://localhost:3000/assets/icon-32.png\"\n            },\n            {\n                \"size\": 80,\n                \"url\": \"https://localhost:3000/assets/icon-80.png\"\n            }\n        ],\n        \"controls\": [\n            {\n                // properties omitted\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Yeoman and Office Add-in Generator via NPM - Command Line\nDESCRIPTION: Installs Yeoman and the Yeoman generator for Office Add-ins globally using npm. This ensures that you have the required tools to scaffold a new Office Add-in project with SSO features. The command should be run from a command prompt and requires Node.js and npm to be installed beforehand.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/sso-quickstart.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm install -g yo generator-office\n```\n\n----------------------------------------\n\nTITLE: Embedding Custom XML Data and Storing its ID in Excel using Office JavaScript API\nDESCRIPTION: Illustrates how to add a custom XML part containing reviewer data to an Excel workbook using `context.workbook.customXmlParts.add()`. It also demonstrates saving the unique ID of the created XML part into the workbook's settings using `settings.add()` for potential future retrieval. This persists structured data within the document itself. Dependencies: Excel JavaScript API (`Excel.run`, `context.workbook.customXmlParts`, `context.workbook.settings`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    // Add reviewer data to the document as XML\n    const originalXml = \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n    const customXmlPart = context.workbook.customXmlParts.add(originalXml);\n    customXmlPart.load(\"id\");\n    await context.sync();\n\n    // Store the XML part's ID in a setting\n    const settings = context.workbook.settings;\n    settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Filters using AutoFilter on an Excel Table with Office JS\nDESCRIPTION: This snippet demonstrates applying multiple filters to the 'ExpensesTable' using the table's `autoFilter` object. It applies a value filter to the third column (index 2, 'Category') and a dynamic 'belowAverage' filter to the fourth column (index 3, 'Amount') using the `autoFilter.apply()` method, specifying the target range, column index, and filter criteria for each. This provides an alternative way to manage filters compared to accessing individual column filters.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    expensesTable.autoFilter.apply(expensesTable.getRange(), 2, {\n        filterOn: Excel.FilterOn.values,\n        values: [\"Restaurant\", \"Groceries\"]\n    });\n    expensesTable.autoFilter.apply(expensesTable.getRange(), 3, {\n        filterOn: Excel.FilterOn.dynamic,\n        dynamicCriteria: Excel.DynamicFilterCriteria.belowAverage\n    });\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Text in a Content Control using Office.js (JavaScript)\nDESCRIPTION: Selects a content control by its tag ('serviceName') and invokes insertText to replace its content with a new string, specifying the replace insert location. The code assumes that exactly one matching content control exists and uses getFirst() to target it. Requires the Word JavaScript API and that the tag matches the intended control. The new text will fully replace the control's content.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nconst serviceNameContentControl = context.document.contentControls.getByTag(\\\"serviceName\\\").getFirst();\nserviceNameContentControl.insertText(\\\"Fabrikam Online Productivity Suite\\\", Word.InsertLocation.replace);\n```\n\n----------------------------------------\n\nTITLE: Applying PivotValueFilter to Excel PivotTable Field using Office JS API\nDESCRIPTION: This snippet, designed as part of a larger `Excel.run` call, applies a `PivotValueFilter` to the 'Farm' PivotField. The filter compares the 'Farm' data against the 'Sum of Crates Sold Wholesale' value field. It uses the `ValueFilterCondition.greaterThan` condition with a comparator value of 500, including only farms where the sum of wholesale crates sold exceeds 500.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n    // Get the \"Farm\" field.\n    let filterField = pivotTable.hierarchies.getItem(\"Farm\").fields.getItem(\"Farm\");\n    \n    // Filter to only include rows with more than 500 wholesale crates sold.\n    let filter: Excel.PivotValueFilter = {\n      condition: Excel.ValueFilterCondition.greaterThan,\n      comparator: 500,\n      value: \"Sum of Crates Sold Wholesale\"\n    };\n    \n    // Apply the value filter to the field.\n    filterField.applyFilter({ valueFilter: filter });\n```\n```\n\n----------------------------------------\n\nTITLE: Creating New OWA Mailbox Policy for a Specific Group (Classic Outlook Web)\nDESCRIPTION: Creates a new OWA mailbox policy tailored for a specific group of users (e.g., 'Finance') in the classic Outlook on the web environment. This policy will be configured to enable the on-send feature for this group. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nNew-OWAMailboxPolicy FinanceOWAPolicy\n```\n\n----------------------------------------\n\nTITLE: Setting Resource-Specific Permissions in Manifest.json - JSON\nDESCRIPTION: Defines a resource-specific delegated permission allowing read and write access to the user's mailbox items in the add-in manifest. This permission entry is required to let the add-in manage and update mailbox data. It should be placed in the authorization.permissions.resourceSpecific array. No additional dependencies are required, but appropriate user/admin consent may be needed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"MailboxItem.ReadWrite.User\",\n    \"type\": \"Delegated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from localStorage in Dialog Box (Office Add-ins, JavaScript)\nDESCRIPTION: This snippet retrieves the value previously saved in localStorage by the host, enabling the dialog box to access persistent data using the getItem method. The code reads the 'clientID' key and assigns it to a constant. Dependencies: localStorage API; assumes the key exists and dialog runs on same domain. Output: retrieved value, typically used for authentication or identification.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/parent-to-dialog.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst clientID = localStorage.getItem(\"clientID\");\n// You can also use property syntax:\n// const clientID = localStorage.clientID;\n```\n\n----------------------------------------\n\nTITLE: Waiting for Multiple Observables with Observable.forkJoin\nDESCRIPTION: Demonstrates using RxJS `Observable.forkJoin()` to wait for multiple Observables (`x`, `y`, `z`) to complete. Similar to `Promise.all`, it combines the latest values from each Observable once they all emit at least one value and complete. The example shows subscribing to the resulting source Observable and handling the emitted values, potential errors, and completion.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/add-ins-with-angular2.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = Observable.forkJoin([x, y, z]);\n\nconst subscription = source.subscribe(\n  x => {\n    // TODO: Callback logic goes here.\n  },\n  err => console.log('Error: ' + err),\n  () => console.log('Completed')\n);\n```\n\n----------------------------------------\n\nTITLE: Validating Manifest using npm Script (Command Line)\nDESCRIPTION: Executes the predefined 'validate' npm script in the project's root directory to check the Office Add-in manifest file. This command is typically available in projects generated using the Teams Toolkit or Yeoman generator for Office Add-ins and also performs Microsoft 365 and Copilot store validation. Requires Node.js, npm, and the script to be defined in `package.json`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/troubleshoot-manifest.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm run validate\n```\n\n----------------------------------------\n\nTITLE: Initiating Authentication Dialog from Custom Function using displayWebDialog (JavaScript)\nDESCRIPTION: This JavaScript function (`getTokenViaDialog`) shows how to use `OfficeRuntime.displayWebDialog` from a custom function's runtime to open an authentication dialog. It handles receiving messages (like an auth token) from the dialog via the `onMessage` callback and manages potential runtime errors with `onRuntimeError`. It also includes logic to prevent opening multiple dialogs simultaneously and returns a Promise resolving with the retrieved token or rejecting on error/timeout. Note that the example focuses on API usage rather than a complete authentication implementation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-authentication.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Function retrieves a cached token or opens a dialog box if there is no saved token. Note that this isn't a sufficient example of authentication but is intended to show the capabilities of the displayWebDialog method.\n * @param {string} url URL for a stored token.\n */\nfunction getTokenViaDialog(url) {\n  return new Promise (function (resolve, reject) {\n    if (_dialogOpen) {\n      // Can only have one dialog box open at once. Wait for previous dialog box's token.\n      let timeout = 5;\n      let count = 0;\n      const intervalId = setInterval(function () {\n        count++;\n        if(_cachedToken) {\n          resolve(_cachedToken);\n          clearInterval(intervalId);\n        }\n        if(count >= timeout) {\n          reject(\"Timeout while waiting for token\");\n          clearInterval(intervalId);\n        }\n      }, 1000);\n    } else {\n      _dialogOpen = true;\n      OfficeRuntime.displayWebDialog(url, {\n        height: '50%',\n        width: '50%',\n        onMessage: function (message, dialog) {\n          _cachedToken = message;\n          resolve(message);\n          dialog.close();\n          return;\n        },\n        onRuntimeError: function(error, dialog) {\n          reject(error);\n        },\n      }).catch(function (e) {\n        reject(e);\n      });\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OBO Token Exchange with MSAL in JavaScript\nDESCRIPTION: Implements the core On-Behalf-Of (OBO) flow logic within the route handler. It extracts the assertion token from the Authorization header, defines the required scopes (`files.read`), validates the necessary `access_as_user` scope, and uses `authHelper.getConfidentialClientApplication().acquireTokenOnBehalfOf()` to exchange the assertion for a Microsoft Graph access token. Includes placeholders for Graph API call (`TODO 11`) and error handling (`TODO 12`). Requires the 'jsonwebtoken' library (`jwt`) and the configured `authHelper`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const authHeader = req.headers.authorization;\n  let oboRequest = {\n    oboAssertion: authHeader.split(' ')[1],\n    scopes: [\"files.read\"],\n  };\n\n  // The Scope claim tells you what permissions the client application has in the service.\n  // In this case we look for a scope value of access_as_user, or full access to the service as the user.\n  const tokenScopes = jwt.decode(oboRequest.oboAssertion).scp.split(' ');\n  const accessAsUserScope = tokenScopes.find(\n    (scope) => scope === 'access_as_user'\n  );\n  if (!accessAsUserScope) {\n    res.status(401).send({ type: \"Missing access_as_user\" });\n    return;\n  }\n  const cca = authHelper.getConfidentialClientApplication();\n  const response = await cca.acquireTokenOnBehalfOf(oboRequest);\n  // TODO 11: Call Microsoft Graph to get list of filenames.\n} catch (err) {\n  // TODO 12: Handle any errors.\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Custom Properties on Outlook Items using Office JavaScript API\nDESCRIPTION: Defines the `clearCustomProperties` function using the Office JavaScript API. It asynchronously retrieves the custom properties collection of the current mailbox item, removes the property named \"EventLogged\", and then saves the updated properties collection back to the item. Logs a confirmation message to the console upon successful removal and saving. Requires the Office.js library.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nfunction clearCustomProperties() {\n  Office.context.mailbox.item.loadCustomPropertiesAsync((customPropertiesResult) => {\n      if (customPropertiesResult.status === Office.AsyncResultStatus.Succeeded) {\n        const customProperties = customPropertiesResult.value;\n        customProperties.remove(\"EventLogged\");\n        customProperties.saveAsync((removeSaveAsyncResult) => {\n            if (removeSaveAsyncResult.status === Office.AsyncResultStatus.Succeeded) {\n              console.log(\"Custom properties cleared.\");\n            }\n        });\n      }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ItemChanged Event Handler (JavaScript)\nDESCRIPTION: Demonstrates how to register the `itemChanged` event handler using `Office.context.mailbox.addHandlerAsync` within the `Office.onReady` function (and typically after the DOM is ready, shown here with jQuery). This ensures the add-in listens for `Office.EventType.ItemChanged` events and calls the handler when the selected item changes. The example also includes an initial call to `updateTaskPaneUI` to set the initial state.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/pinnable-taskpane.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nOffice.onReady(() => {\n  $(document).ready(() => {\n    // Set up the ItemChanged event.\n    Office.context.mailbox.addHandlerAsync(Office.EventType.ItemChanged, itemChanged);\n    updateTaskPaneUI(Office.context.mailbox.item);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Removing an Add-in from Exchange Server (PowerShell)\nDESCRIPTION: Use the `Remove-App` PowerShell cmdlet within a remote Exchange session to remove a previously installed Outlook add-in from the Exchange server entirely. Requires specifying the add-in to be removed. This is one of the cmdlets used to manage add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/testing-and-tips.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-App\n```\n\n----------------------------------------\n\nTITLE: Saving a Workbook Using Excel JavaScript API - JavaScript\nDESCRIPTION: Illustrates saving the current Excel workbook with an explicit save behavior using the Excel JavaScript API. Accepts an optional parameter for save method—either 'prompt' for user file-picker interaction or 'save' for silent save. Should be called within an Office.js context. Input is the save behavior; output is the persisted workbook state or an exception if the prompt is canceled.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontext.workbook.save(Excel.SaveBehavior.prompt);\n```\n\n----------------------------------------\n\nTITLE: Getting All Worksheet Names with Excel JavaScript API\nDESCRIPTION: Retrieves the collection of all worksheets in the current workbook, loads the 'name' property for each worksheet, and logs the names to the console. It uses `context.workbook.worksheets` to access the collection and `sheets.load(\"items/name\")` to prepare the names for reading.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.load(\"items/name\");\n\n    await context.sync();\n    \n    if (sheets.items.length > 1) {\n        console.log(`There are ${sheets.items.length} worksheets in the workbook:`);\n    } else {\n        console.log(`There is one worksheet in the workbook:`);\n    }\n\n    sheets.items.forEach(function (sheet) {\n        console.log(sheet.name);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Completing Spam Report and Opening Task Pane in Outlook JavaScript Add-in\nDESCRIPTION: This JavaScript code snippet calls event.completed to signal the completion of a spam-reporting event and simultaneously opens a designated task pane using the commandId property. It includes contextData (passed as a JSON string) for consumption within the task pane and guarantees the task pane’s appearance by specifying moveItemTo as Office.MailboxEnums.MoveSpamItemTo.NoMove. Requires the Outlook JavaScript API (requirement set 1.15 or higher) and proper commandId matching an existing control in the manifest. Key parameters: commandId (string), contextData (JSON string), moveItemTo (enum).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n...\n    event.completed({\n      commandId: \"msgReadOpenPaneButton\",\n      contextData: JSON.stringify({ a: \"aValue\", b: \"bValue\" }),\n      moveItemTo: Office.MailboxEnums.MoveSpamItemTo.NoMove\n    });\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index of Selected Slide Using Office.js Common APIs - JavaScript\nDESCRIPTION: This function uses the Common Office.js API to asynchronously obtain the slide index of the user's current selection in PowerPoint. It returns a promise and uses getSelectedDataAsync with the SlideRange coercion type, resolving with the 1-based index of the first selected slide. The use of Promises facilitates integration with recent async/await code styles. Requires the Office.js library and api permissions for reading context data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/tagging-presentations-slides-shapes.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getSelectedSlideIndex() {\n    return new OfficeExtension.Promise<number>(function(resolve, reject) {\n        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function(asyncResult) {\n            try {\n                if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                    reject(console.error(asyncResult.error.message));\n                } else {\n                    resolve(asyncResult.value.slides[0].index);\n                }\n            } \n            catch (error) {\n                reject(console.log(error));\n            }\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Click Handler Initialization for Non-Outlook Add-ins - TypeScript\nDESCRIPTION: Wraps a jQuery click handler (for an element with ID 'run') in an Office.onReady block to ensure that Office.js is fully initialized before event handlers are registered. This replacement provides robust initialization, as Script Lab code attaches handlers outside the Office.js ready context by default. Place this code in /src/taskpane/taskpane.ts (or taskpane.js) to ensure compatibility with Office Add-in startup requirements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/create-an-office-add-in-from-script-lab.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nOffice.onReady(function () {\n  // Office is ready.\n  $(document).ready(function () {\n    // The document is ready.\n    $(\"#run\").on(\"click\", () => tryCatch(run));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Removing onSelectionChanged Event Handler in Excel JavaScript\nDESCRIPTION: This code demonstrates the complete lifecycle of registering and removing an event handler for the `onSelectionChanged` event. The `run` function registers the handler and stores the result (which includes the necessary context). The `handleSelectionChange` function processes the event. The `remove` function uses the stored `eventResult` (specifically `eventResult.context`) to execute `eventResult.remove()` within the correct `Excel.run` context, effectively unregistering the handler.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-events.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nlet eventResult;\n\nasync function run() {\n  await Excel.run(async (context) => {\n    const worksheet = context.workbook.worksheets.getItem(\"Sample\");\n    eventResult = worksheet.onSelectionChanged.add(handleSelectionChange);\n\n    await context.sync();\n    console.log(\"Event handler successfully registered for onSelectionChanged event in the worksheet.\");\n  });\n}\n\nasync function handleSelectionChange(event) {\n  await Excel.run(async (context) => {\n    await context.sync();\n    console.log(\"Address of current selection: \" + event.address);\n  });\n}\n\nasync function remove() {\n  // The `RequestContext` used to create the event handler is needed to remove it.\n  // In this example, `eventContext` is being used to keep track of that context.\n  await Excel.run(eventResult.context, async (context) => {\n    eventResult.remove();\n    await context.sync();\n    \n    eventResult = null;\n    console.log(\"Event handler successfully removed.\");\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Column Name in an Excel Table using Office.js - JavaScript\nDESCRIPTION: Modifies the header of the first column in the \"ExpensesTable\" in the \"Sample\" worksheet to \"Purchase date\". Uses columns.load to load column items, then updates the name property. Applies auto-fit formatting after renaming. Requires Excel JavaScript API, and the target table must already exist.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getItem(\\\"Sample\\\");\\n\\n    let expensesTable = sheet.tables.getItem(\\\"ExpensesTable\\\");\\n    expensesTable.columns.load(\\\"items\\\");\\n\\n    await context.sync();\\n        \\n    expensesTable.columns.items[0].name = \\\"Purchase date\\\";\\n\\n    sheet.getUsedRange().format.autofitColumns();\\n    sheet.getUsedRange().format.autofitRows();\\n\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Text Binding from User Selection - Office.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a text binding to the user's current selection using Office.js's addFromSelectionAsync API. It establishes a region binding (named 'myBinding'), handles asynchronous completion via callback, and writes the operation status to a DOM element. Key parameters include the binding type, options for the binding's ID, and the async callback to report success or error. Requires Office.js references and must be run in the context of a supported Office Add-in, with a writable DOM element with id 'message' for output.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.document.bindings.addFromSelectionAsync(Office.BindingType.Text, { id: 'myBinding' }, function (asyncResult) {\\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\\n        write('Action failed. Error: ' + asyncResult.error.message);\\n    } else {\\n        write('Added new binding with type: ' + asyncResult.value.type + ' and id: ' + asyncResult.value.id);\\n    }\\n});\\n\\n// Function that writes to a div with id='message' on the page.\\nfunction write(message){\\n    document.getElementById('message').innerText += message; \\n}\n```\n\n----------------------------------------\n\nTITLE: Handling displayDialogAsync Errors in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates calling `Office.context.ui.displayDialogAsync` to open a dialog. It includes a callback function that checks the `asyncResult.status`. If the call fails (`Office.AsyncResultStatus.Failed`), it displays the error code and message using a `showNotification` function (implementation not shown). If successful, it stores the resulting `Dialog` object and adds an event handler for `DialogMessageReceived`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-handle-errors-events.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nlet dialog;\nOffice.context.ui.displayDialogAsync('https://myDomain/myDialog.html',\nfunction (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n        showNotification(asyncResult.error.code = \": \" + asyncResult.error.message);\n    } else {\n        dialog = asyncResult.value;\n        dialog.addEventHandler(Office.EventType.DialogMessageReceived, processMessage);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Nested App Authentication Support in JavaScript\nDESCRIPTION: Provides a JavaScript code snippet demonstrating how to use the `Office.context.requirements.isSetSupported` method from the Office JavaScript API. This check determines if the current Office host environment supports Nested App Authentication (feature \"NestedAppAuth\", version \"1.1\"), which is crucial for the NAA flow to work. This is recommended as a fallback check.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/enable-nested-app-authentication-in-your-add-in.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n   Office.context.requirements.isSetSupported(\"NestedAppAuth\", \"1.1\");\n```\n\n----------------------------------------\n\nTITLE: Registering Dialog Message Handler with Error Handling Callback (JavaScript)\nDESCRIPTION: This code provides a more robust way to register the dialog message handler by including a callback function (`onRegisterMessageComplete`) with `addHandlerAsync`. This callback checks the `asyncResult.status` to verify if the handler registration was successful. If registration fails (`asyncResult.status !== Office.AsyncResultStatus.Succeeded`), it calls a `reportError` function (not defined here) to log or display the error details.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady(() => {\n    Office.context.ui.addHandlerAsync(\n        Office.EventType.DialogParentMessageReceived,\n        onMessageFromParent,\n        onRegisterMessageComplete\n    );\n});\n\nfunction onRegisterMessageComplete(asyncResult) {\n    if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {\n        reportError(asyncResult.error.message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading address property of a specific worksheet Range with async/await in JavaScript\nDESCRIPTION: This snippet shows how to use Excel.run with async functions to obtain a specific range from a worksheet by name and address, load its address property, and synchronize proxy object state. It illustrates that only loaded properties are accessible after sync. Dependencies include Office.js with async/await support; worksheet name and address must exist. Inputs are the sheet name and range address; output is the loaded address property. Logging of unloaded properties will fail unless loaded explicitly.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheetName = 'Sheet1';\n    const rangeAddress = 'A1:B2';\n    const myRange = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n\n    myRange.load('address');\n    await context.sync();\n      \n    console.log (myRange.address);   // ok\n    //console.log (myRange.values);  // not ok as it was not loaded\n\n    console.log('done');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Entity CellValue with Nested Properties in Excel JavaScript API (TypeScript)\nDESCRIPTION: This code snippet details the creation of an entity value using the Excel.EntityCellValue object in TypeScript, illustrating how to assign text and various properties including an image, a date, and nested text. Dependencies include the Excel JavaScript API and the Excel.EntityCellValue type, with required fields for type, text, properties, basicType, and basicValue. The input includes any properties required for rendering entity data, and the output follows the entity metadata schema for integration into Excel add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-data-types-concepts.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// This is an example of the complete JSON for an entity value.\\n// The entity contains text and properties which contain an image, a date, and another text value.\\nconst myEntity: Excel.EntityCellValue = {\\n    type: Excel.CellValueType.entity,\\n    text: \\\"A llama\\\",\\n    properties: {\\n        image: myImage,\\n        \\\"start date\\\": myDate,\\n        \\\"quote\\\": {\\n            type: Excel.CellValueType.string,\\n            basicValue: \\\"I love llamas.\\\"\\n        }\\n    }, \\n    basicType: Excel.RangeValueType.error, // A read-only property. Used as a fallback in incompatible scenarios.\\n    basicValue: \\\"#VALUE!\\\" // A read-only property. Used as a fallback in incompatible scenarios.\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Card Layouts with Nested Properties in Excel JavaScript API (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the Excel JavaScript API with TypeScript to define an entity cell value configured for a customized card layout. It assigns properties for compact and expanded card appearances, including selection of an entity icon, a main image, and multiple card sections with distinct properties, titles, collapsibility, and default state (collapsed or expanded). Dependencies include the Excel JavaScript API types and enums such as Excel.EntityCellValue, Excel.CellValueType.entity, and Excel.EntityCompactLayoutIcons. Main parameters include 'productName' for the entity's text, and properties (like 'Product Name', 'Image', etc.) referenced by string from prior card property definitions. Inputs should match expected data field names; outputs are rendered in Excel as dynamic card-based entity cell values. Constraints include the requirement for referenced property types to be previously defined and known issues with icon rendering in some environments.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-data-types-entity-card.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst entity: Excel.EntityCellValue = {\n    type: Excel.CellValueType.entity,\n    text: productName,\n    properties: {\n        // Enter property settings here.\n    },\n    layouts: {\n        compact: {\n            icon: Excel.EntityCompactLayoutIcons.shoppingBag\n        },\n        card: {\n            title: { \n                property: \"Product Name\" \n            },\n            mainImage: { \n                property: \"Image\" \n            },\n            sections: [\n                {\n                    layout: \"List\",\n                    properties: [\"Product ID\"]\n                },\n                {\n                    layout: \"List\",\n                    title: \"Quantity and price\",\n                    collapsible: true,\n                    collapsed: false, // This section will not be collapsed when the card is opened.\n                    properties: [\"Quantity Per Unit\", \"Unit Price\"]\n                },\n                {\n                    layout: \"List\",\n                    title: \"Additional information\",\n                    collapsible: true,\n                    collapsed: true, // This section will be collapsed when the card is opened.\n                    properties: [\"Discontinued\"]\n                }\n            ]\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Pane Command for Outlook Add-in - XML\nDESCRIPTION: This XML manifest snippet sets up command surfaces that open a task pane for appointment attendee scenarios on both Outlook desktop and mobile clients. It replaces the <VersionOverrides> node and defines the button's appearance, action (ShowTaskpane with a specified URL), and references to company-hosted assets. Dependencies include hosting the task pane page and referenced images, and replacing placeholder URLs and strings. Main parameters include label resource identifiers, icon asset URLs, and the task pane source URL. This enables users to launch custom task pane UIs in-context; the main constraint is ensuring all resources are available at specified URLs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\\\"http://schemas.microsoft.com/office/mailappversionoverrides\\\" xsi:type=\\\"VersionOverridesV1_0\\\">\\n  <VersionOverrides xmlns=\\\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\\\" xsi:type=\\\"VersionOverridesV1_1\\\">\\n    <Description resid=\\\"residDescription\\\"></Description>\\n      <Requirements>\\n        <bt:Sets>\\n          <bt:Set Name=\\\"Mailbox\\\" MinVersion=\\\"1.3\\\"/>\\n        </bt:Sets>\\n      </Requirements>\\n      <Hosts>\\n        <Host xsi:type=\\\"MailHost\\\">\\n          <DesktopFormFactor>\\n            <!-- Configures the add-in button to appear in the Appointment Attendee surface of Outlook desktop clients. -->\\n            <ExtensionPoint xsi:type=\\\"AppointmentAttendeeCommandSurface\\\">\\n              <OfficeTab id=\\\"TabDefault\\\">\\n                <Group id=\\\"apptReadGroup\\\">\\n                  <Label resid=\\\"residDescription\\\"/>\\n                  <Control xsi:type=\\\"Button\\\" id=\\\"apptReadOpenPaneButton\\\">\\n                    <Label resid=\\\"residLabel\\\"/>\\n                    <Supertip>\\n                      <Title resid=\\\"residLabel\\\"/>\\n                      <Description resid=\\\"residTooltip\\\"/>\\n                    </Supertip>\\n                    <Icon>\\n                      <bt:Image size=\\\"16\\\" resid=\\\"icon-16\\\"/>\\n                      <bt:Image size=\\\"32\\\" resid=\\\"icon-32\\\"/>\\n                      <bt:Image size=\\\"80\\\" resid=\\\"icon-80\\\"/>\\n                    </Icon>\\n                    <Action xsi:type=\\\"ShowTaskpane\\\">\\n                      <SourceLocation resid=\\\"Taskpane.Url\\\"/>\\n                    </Action>\\n                  </Control>\\n                </Group>\\n              </OfficeTab>\\n            </ExtensionPoint>\\n          </DesktopFormFactor>\\n          <MobileFormFactor>\\n            <!-- Configures the add-in button to appear in the Appointment Attendee surface of Outlook on mobile devices. -->\\n            <ExtensionPoint xsi:type=\\\"MobileLogEventAppointmentAttendee\\\">\\n              <Control xsi:type=\\\"MobileButton\\\" id=\\\"appointmentReadFunctionButton\\\">\\n                <Label resid=\\\"residLabel\\\"/>\\n                <Icon>\\n                  <bt:Image size=\\\"25\\\" scale=\\\"1\\\" resid=\\\"icon-16\\\"/>\\n                  <bt:Image size=\\\"25\\\" scale=\\\"2\\\" resid=\\\"icon-16\\\"/>\\n                  <bt:Image size=\\\"25\\\" scale=\\\"3\\\" resid=\\\"icon-16\\\"/>\\n\\n                  <bt:Image size=\\\"32\\\" scale=\\\"1\\\" resid=\\\"icon-32\\\"/>\\n                  <bt:Image size=\\\"32\\\" scale=\\\"2\\\" resid=\\\"icon-32\\\"/>\\n                  <bt:Image size=\\\"32\\\" scale=\\\"3\\\" resid=\\\"icon-32\\\"/>\\n\\n                  <bt:Image size=\\\"48\\\" scale=\\\"1\\\" resid=\\\"icon-48\\\"/>\\n                  <bt:Image size=\\\"48\\\" scale=\\\"2\\\" resid=\\\"icon-48\\\"/>\\n                  <bt:Image size=\\\"48\\\" scale=\\\"3\\\" resid=\\\"icon-48\\\"/>\\n                </Icon>\\n                <Action xsi:type=\\\"ShowTaskpane\\\">\\n                  <SourceLocation resid=\\\"Taskpane.Url\\\"/>\\n                </Action> \\n              </Control>\\n            </ExtensionPoint>\\n          </MobileFormFactor>\\n        </Host>\\n      </Hosts>\\n      <Resources>\\n        <bt:Images>\\n          <bt:Image id=\\\"icon-16\\\" DefaultValue=\\\"https://contoso.com/assets/icon-16.png\\\"/>\\n          <bt:Image id=\\\"icon-32\\\" DefaultValue=\\\"https://contoso.com/assets/icon-32.png\\\"/>\\n          <bt:Image id=\\\"icon-48\\\" DefaultValue=\\\"https://contoso.com/assets/icon-48.png\\\"/>\\n          <bt:Image id=\\\"icon-80\\\" DefaultValue=\\\"https://contoso.com/assets/icon-80.png\\\"/>\\n        </bt:Images>\\n        <bt:Urls>\\n          <bt:Url id=\\\"residFunctionFile\\\" DefaultValue=\\\"https://contoso.com/commands.html\\\"/>\\n          <bt:Url id=\\\"Taskpane.Url\\\" DefaultValue=\\\"https://contoso.com/taskpane.html\\\"/>\\n        </bt:Urls>\\n        <bt:ShortStrings>\\n          <bt:String id=\\\"residDescription\\\" DefaultValue=\\\"Log appointment notes and other details to Contoso CRM.\\\"/>\\n          <bt:String id=\\\"residLabel\\\" DefaultValue=\\\"Log to Contoso\\\"/>\\n        </bt:ShortStrings>\\n        <bt:LongStrings>\\n          <bt:String id=\\\"residTooltip\\\" DefaultValue=\\\"Log notes to Contoso CRM for this appointment.\\\"/>\\n        </bt:LongStrings>\\n      </Resources>\\n    </VersionOverrides>\\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Configuring Valid Domains in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet specifies the valid domains from which the add-in can load resources. It updates the 'validDomains' array in the manifest.json file to include the domain of the fictional online meeting provider, 'contoso.com'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"validDomains\": [\n    \"https://contoso.com\"\n],\n```\n\n----------------------------------------\n\nTITLE: Clearing Custom Property for Logged Events in Function Command (JavaScript)\nDESCRIPTION: JavaScript function `clearCustomProperties` for a function command. It loads the custom properties of the current mailbox item, removes the 'EventLogged' property, and saves the changes asynchronously. It signals completion using `event.completed({ allowEvent: true })` upon successful save and resets the global `event` variable. Depends on `Office.context.mailbox.item.loadCustomPropertiesAsync`, `customProperties.remove`, and `customProperties.saveAsync`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nfunction clearCustomProperties() {\n  Office.context.mailbox.item.loadCustomPropertiesAsync((customPropertiesResult) => {\n    if (customPropertiesResult.status === Office.AsyncResultStatus.Succeeded) {\n      const customProperties = customPropertiesResult.value;\n      customProperties.remove(\"EventLogged\");\n      customProperties.saveAsync((removeSaveAsyncResult) => {\n        if (removeSaveAsyncResult.status === Office.AsyncResultStatus.Succeeded) {\n          console.log(\"Custom properties cleared\");\n          event.completed({ allowEvent: true });\n          event = undefined;\n        }\n      });\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating OfficeMockObject in JavaScript\nDESCRIPTION: Creates an instance of `OfficeMockObject` by passing the previously defined `mockData` to its constructor. This `contextMock` object simulates an `OfficeExtension.ClientRequestContext` and includes mock implementations of `load` and `sync`, along with the properties defined in `mockData`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst contextMock = new OfficeAddinMock.OfficeMockObject(mockData);\n```\n\n----------------------------------------\n\nTITLE: Installing an Outlook Add-in via Manifest URL using PowerShell\nDESCRIPTION: This command uses the `New-App` PowerShell cmdlet within a remote PowerShell session connected to an Exchange server. It installs an Outlook add-in by specifying the fully qualified URL (`http://<fully-qualified URL>`) pointing to the add-in's manifest file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/testing-and-tips.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-App -URL:\"http://<fully-qualified URL\">\n```\n\n----------------------------------------\n\nTITLE: Setting Data in localStorage for Dialog Communication (Office Add-ins, JavaScript)\nDESCRIPTION: This snippet demonstrates how the host page of an Office Add-in can store a value in the browser's localStorage prior to invoking displayDialogAsync. The purpose is to persist data (such as a client ID) so the dialog box can later retrieve it by key. It requires both windows (host and dialog) to share the same domain/port. Inputs: key (\\\"clientID\\\") and value (GUID). No direct output, but the value is accessible from the dialog.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/parent-to-dialog.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlocalStorage.setItem(\"clientID\", \"15963ac5-314f-4d9b-b5a1-ccb2f1aea248\");\n```\n\n----------------------------------------\n\nTITLE: Handling Null Item in ItemChanged Event Handler (JavaScript)\nDESCRIPTION: Provides an example implementation (`updateTaskPaneUI`) demonstrating how to handle the `ItemChanged` event safely. It explicitly checks if the `item` object (`Office.context.mailbox.item`) is not null before attempting to access its properties, preventing potential errors if no item is selected or available.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/pinnable-taskpane.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Example implementation.\nfunction updateTaskPaneUI(item) {\n  // Assuming that item is always a read item (instead of a compose item).\n  if (item != null) console.log(item.subject);\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Manifest Placeholder URL in XML\nDESCRIPTION: This snippet shows the placeholder `~remoteAppUrl` found within the Outlook add-in manifest XML file. This placeholder must be replaced with the root URL of the web application deployed to Azure during the publishing process described in the surrounding steps.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/stage-outlook-add-in-azure.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n~remoteAppUrl\n```\n\n----------------------------------------\n\nTITLE: Declaring Dialog Variable in Task Pane Script (JavaScript)\nDESCRIPTION: This JavaScript declaration creates a variable to store a reference to the dialog object for managing communication and state. It should be declared at the global scope of the task pane script to be accessible from multiple functions. There are no parameters or outputs at this stage; it simply reserves the variable for later use.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nlet dialog = null;\n```\n\n----------------------------------------\n\nTITLE: Loading Item Properties with Office JS in JavaScript\nDESCRIPTION: This JavaScript snippet initializes the add-in using Office.onReady and jQuery. When Office and the DOM are ready, it invokes loadItemProps to extract and display the selected message's properties (Id, Subject, Message Id, and From) in the UI. Dependencies: Office.js and jQuery. Inputs include the Office context and mailbox item; outputs are textual property values injected into the HTML labels. Designed to run as part of the web application serving the task pane UI.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/outlook-quickstart-vs.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\\n\\n(function () {\\n\\n    Office.onReady(function () {\\n        // Office is ready\\n        $(document).ready(function () {\\n            // The document is ready\\n            loadItemProps(Office.context.mailbox.item);\\n        });\\n    });\\n\\n    function loadItemProps(item) {\\n        // Write message property values to the task pane\\n        $('#item-id').text(item.itemId);\\n        $('#item-subject').text(item.subject);\\n        $('#item-internetMessageId').text(item.internetMessageId);\\n        $('#item-from').html(item.from.displayName + \\\" &lt;\\\" + item.from.emailAddress + \\\"&gt;\\\");\\n    }\\n})();\n```\n\n----------------------------------------\n\nTITLE: Referencing HD Image Layer Data in DrawingML (XML)\nDESCRIPTION: This XML snippet shows the `a14:imgLayer` element, used when certain Office picture formatting effects (like layering) are applied to an image. It contains a relationship ID (`r:embed=\"rId5\"`) that references an additional binary data part, typically containing an HD format copy of the image data, required for rendering these effects.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<a14:imgLayer r:embed=\"rId5\">\n```\n\n----------------------------------------\n\nTITLE: Defining Task Pane HTML Layout with Microsoft Fluent UI - HTML\nDESCRIPTION: This HTML snippet creates the structure for the Excel add-in's task pane, including a header, instructional text, and a 'Set color' button. It leverages CSS classes prefixed with 'ms-' (Microsoft Fluent UI) for consistent styling with Office products. The HTML is designed for insertion into the <body> of the Home.html file, and assumes requisite styles are loaded to render fonts and buttons correctly.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/excel-quickstart-vs.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body class=\\\"ms-font-m ms-welcome\\\">\\n    <div id=\\\"content-header\\\">\\n        <div class=\\\"padding\\\">\\n            <h1>Welcome</h1>\\n        </div>\\n    </div>\\n    <div id=\\\"content-main\\\">\\n        <div class=\\\"padding\\\">\\n            <p>Choose the button below to set the color of the selected range to green.</p>\\n            <br />\\n            <h3>Try it out</h3>\\n            <button class=\\\"ms-Button\\\" id=\\\"set-color\\\">Set color</button>\\n        </div>\\n    </div>\\n</body>\n```\n\n----------------------------------------\n\nTITLE: VS Code Tasks Configuration for Office Add-in Debugging - JSON\nDESCRIPTION: This tasks.json segment defines a shell task labeled 'Debug: $HOST$ Desktop' that runs an NPM script to start the Office Add-in debugging process and the host application (such as Outlook or Word). The 'command' invokes npm to run the 'start:desktop' script, passing additional arguments as required. The task presentation ensures a dedicated output panel and clear output on each run. Dependencies include NPM, the configured package.json scripts, and Visual Studio Code. Replace $HOST$ with the targeted Office app. This ensures coordinated automated debugging with corresponding launch.json configuration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-desktop-using-edge-chromium.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Debug: $HOST$ Desktop\",\n      \"type\": \"shell\",\n      \"command\": \"npm\",\n      \"args\": [\"run\", \"start:desktop\", \"--\", \"--app\", \"$HOST$\"],\n      \"presentation\": {\n        \"clear\": true,\n        \"panel\": \"dedicated\"\n      },\n      \"problemMatcher\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Add-in Task Pane Elements - CSS\nDESCRIPTION: This CSS snippet provides custom styling for the Excel add-in's task pane, setting header and main area backgrounds, font color, and container padding. '#content-header' receives a blue background (#2a8dd4), white text, and is absolutely positioned at the top. '#content-main' uses a white background and is positioned below the header, filling the remaining space. '.padding' uniformly applies 15px padding throughout the panel. It expects matching HTML element IDs and classes for proper application.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/excel-quickstart-vs.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#content-header {\\n    background: #2a8dd4;\\n    color: #fff;\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 80px;\\n    overflow: hidden;\\n}\\n\\n#content-main {\\n    background: #fff;\\n    position: fixed;\\n    top: 80px;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    overflow: auto;\\n}\\n\\n.padding {\\n    padding: 15px;\\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler for Insert Image Button in JavaScript\nDESCRIPTION: This JavaScript snippet replaces the `TODO2` comment within the `Office.onReady` handler in `taskpane.js`. It assigns an `onclick` event handler to the HTML button element with the ID `insert-image`. When clicked, it calls the `clearMessage` helper function, passing the `insertImage` function as a callback to execute after clearing any previous messages.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"insert-image\").onclick = () => clearMessage(insertImage);\n```\n\n----------------------------------------\n\nTITLE: Handling the OnMessageSend Event in an Outlook Add-in using JavaScript\nDESCRIPTION: This JavaScript code defines an event handler (`onMessageSendHandler`) for the Outlook `OnMessageSend` event. It uses the Office JavaScript API to asynchronously get the message body, check it for specific keywords (`hasMatches`), and then check for attachments (`getAttachmentsCallback`). If keywords related to attachments are found but no non-inline attachments exist, it prevents sending and displays a `Smart Alert` message using `event.completed({ allowEvent: false, errorMessage: ..., errorMessageMarkdown: ... })`. The `Office.actions.associate` function is crucial for linking the JavaScript handler function to the handler name specified in the add-in's manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n* Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n* See LICENSE in the project root for license information.\n*/\n\nfunction onMessageSendHandler(event) {\n  Office.context.mailbox.item.body.getAsync(\n    \"text\",\n    { asyncContext: event },\n    getBodyCallback\n  );\n}\n\nfunction getBodyCallback(asyncResult){\n  const event = asyncResult.asyncContext;\n  let body = \"\";\n  if (asyncResult.status !== Office.AsyncResultStatus.Failed && asyncResult.value !== undefined) {\n    body = asyncResult.value;\n  } else {\n    const message = \"Failed to get body text\";\n    console.error(message);\n    event.completed({ allowEvent: false, errorMessage: message });\n    return;\n  }\n\n  const matches = hasMatches(body);\n  if (matches) {\n    Office.context.mailbox.item.getAttachmentsAsync(\n      { asyncContext: event },\n      getAttachmentsCallback);\n  } else {\n    event.completed({ allowEvent: true });\n  }\n}\n\nfunction hasMatches(body) {\n  if (body == null || body == \"\") {\n    return false;\n  }\n\n  const arrayOfTerms = [\"send\", \"picture\", \"document\", \"attachment\"];\n  for (let index = 0; index < arrayOfTerms.length; index++) {\n    const term = arrayOfTerms[index].trim();\n    const regex = RegExp(term, 'i');\n    if (regex.test(body)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getAttachmentsCallback(asyncResult) {\n  const event = asyncResult.asyncContext;\n  if (asyncResult.value.length > 0) {\n    for (let i = 0; i < asyncResult.value.length; i++) {\n      if (asyncResult.value[i].isInline == false) {\n        event.completed({ allowEvent: true });\n        return;\n      }\n    }\n\n    event.completed({\n      allowEvent: false,\n      errorMessage: \"Looks like the body of your message includes an image or an inline file. Attach a copy to the message before sending.\",\n      // TIP: In addition to the formatted message, it's recommended to also set a\n      // plain text message in the errorMessage property for compatibility on\n      // older versions of Outlook clients.\n      errorMessageMarkdown: \"Looks like the body of your message includes an image or an inline file. Attach a copy to the message before sending.\\n\\n**Tip**: For guidance on how to attach a file, see [Attach files in Outlook](https://www.contoso.com/help/attach-files-in-outlook).\"\n    });\n  } else {\n    event.completed({\n      allowEvent: false,\n      errorMessage: \"Looks like you're forgetting to include an attachment.\",\n      // TIP: In addition to the formatted message, it's recommended to also set a\n      // plain text message in the errorMessage property for compatibility on\n      // older versions of Outlook clients.\n      errorMessageMarkdown: \"Looks like you're forgetting to include an attachment.\\n\\n**Tip**: For guidance on how to attach a file, see [Attach files in Outlook](https://www.contoso.com/help/attach-files-in-outlook).\"\n    });\n  }\n}\n\n// IMPORTANT: To ensure your add-in is supported in Outlook, remember to map the event handler name specified in the manifest to its JavaScript counterpart.\nOffice.actions.associate(\"onMessageSendHandler\", onMessageSendHandler);\n```\n\n----------------------------------------\n\nTITLE: Extracting Tag Contents Using textContent in JavaScript\nDESCRIPTION: Shows how to obtain the inner contents of an XML tag from an EWS response in JavaScript using the textContent property. This approach avoids compatibility issues with innerHTML, especially on older browsers such as Trident (Internet Explorer). This snippet requires jQuery for XML or JSON parsing and expects a DOM node as input, returning the parsed value as output.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/web-services.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontent = $.parseJSON(value.textContent);\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Inspector for Excel Add-ins on Mac (Terminal)\nDESCRIPTION: Executes a terminal command using `defaults write` to set the `OfficeWebAddinDeveloperExtras` boolean preference to `true` for Microsoft Excel on macOS. This enables the 'Inspect Element' context menu option, allowing developers to debug Excel add-ins using Safari Web Inspector. This requires macOS High Sierra and Office version 16.9.1 (Build 18012504) or later, installed from Office.com, not the Mac App Store.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-office-add-ins-on-ipad-and-mac.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndefaults write com.microsoft.Excel OfficeWebAddinDeveloperExtras -bool true\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server and Sideloading Outlook Add-in (Command Line)\nDESCRIPTION: This command instructs users to start the local development server and sideload the add-in using npm. The prerequisite is Node.js and npm installed in the project root. When executed, 'npm start' runs the configured package.json start script, typically launching a local web server and triggering Outlook sideloading via development tools. No additional parameters are required. This command should be executed from the terminal at the project root.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/item-multi-select.md#_snippet_7\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Applying Office Document Theme Classes in Content Add-in HTML\nDESCRIPTION: This HTML snippet demonstrates using `OfficeThemes.css` classes like `office-docTheme-primary-fontColor`, `office-headerFont-latin`, and `office-contentAccentX-bgColor` within a content add-in. By applying these classes, the add-in's fonts and colors automatically match the active document theme in PowerPoint. Requires the `OfficeThemes.css` file to be linked.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/use-document-themes-in-your-powerpoint-add-ins.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n    <div id=\"themeSample\" class=\"office-docTheme-primary-fontColor \">\n        <h1 class=\"office-headerFont-latin\">Hello world!</h1> \n        <h1 class=\"office-headerFont-latin office-contentAccent1-bgColor\">Hello world!</h1> \n        <h1 class=\"office-headerFont-latin office-contentAccent2-bgColor\">Hello world!</h1> \n        <h1 class=\"office-headerFont-latin office-contentAccent3-bgColor\">Hello world!</h1> \n        <h1 class=\"office-headerFont-latin office-contentAccent4-bgColor\">Hello world!</h1> \n        <h1 class=\"office-headerFont-latin office-contentAccent5-bgColor\">Hello world!</h1> \n        <h1 class=\"office-headerFont-latin office-contentAccent6-bgColor\">Hello world!</h1> \n        <p class=\"office-bodyFont-latin office-docTheme-secondary-fontColor\">Hello world!</p> \n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Outlook Add-in Manifest VersionOverrides (XML)\nDESCRIPTION: This XML snippet replaces the `<VersionOverrides>` node in an Office Add-in manifest file (manifest.xml) for Outlook. It configures the add-in to use Mailbox API set 1.13+, defines runtimes for web, Mac, and Windows environments, sets up command surfaces (task pane button, action button), and crucially enables event-based activation for `OnNewMessageCompose` and `OnMessageFromChanged` events by defining `LaunchEvent` extension points for both desktop and mobile form factors. It also includes resource definitions for icons, URLs, and strings used by the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagefromchanged-onappointmentfromchanged-events.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n    <Requirements>\n      <bt:Sets DefaultMinVersion=\"1.13\">\n        <bt:Set Name=\"Mailbox\"/>\n      </bt:Sets>\n    </Requirements>\n    <Hosts>\n      <Host xsi:type=\"MailHost\">\n        <Runtimes>\n          <!-- HTML file that references or contains inline JavaScript event handlers.\n               This is used by event-based activation add-ins in Outlook on the web and on Mac,\n               and in new Outlook on Windows. -->\n          <Runtime resid=\"WebViewRuntime.Url\">\n            <!-- JavaScript file that contains the event handlers.\n                 This is used by event-based activation add-ins in classic Outlook on Windows. -->\n            <Override type=\"javascript\" resid=\"JSRuntime.Url\"/>\n          </Runtime>\n        </Runtimes>\n        <DesktopFormFactor>\n          <FunctionFile resid=\"Commands.Url\"/>\n          <ExtensionPoint xsi:type=\"MessageComposeCommandSurface\">\n            <OfficeTab id=\"TabDefault\">\n              <Group id=\"msgComposeGroup\">\n                <Label resid=\"GroupLabel\"/>\n                <Control xsi:type=\"Button\" id=\"msgComposeOpenPaneButton\">\n                  <Label resid=\"TaskpaneButton.Label\"/>\n                  <Supertip>\n                    <Title resid=\"TaskpaneButton.Label\"/>\n                    <Description resid=\"TaskpaneButton.Tooltip\"/>\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                    <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                    <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                  </Icon>\n                  <Action xsi:type=\"ShowTaskpane\">\n                    <SourceLocation resid=\"Taskpane.Url\"/>\n                  </Action>\n                </Control>\n                <Control xsi:type=\"Button\" id=\"ActionButton\">\n                  <Label resid=\"ActionButton.Label\"/>\n                  <Supertip>\n                    <Title resid=\"ActionButton.Label\"/>\n                    <Description resid=\"ActionButton.Tooltip\"/>\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                    <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                    <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                  </Icon>\n                  <Action xsi:type=\"ExecuteFunction\">\n                    <FunctionName>action</FunctionName>\n                  </Action>\n                </Control>\n              </Group>\n            </OfficeTab>\n          </ExtensionPoint>\n          <!-- Configures event-based activation. -->\n          <ExtensionPoint xsi:type=\"LaunchEvent\">\n            <LaunchEvents>\n              <LaunchEvent Type=\"OnNewMessageCompose\" FunctionName=\"onNewMessageComposeHandler\"/>\n              <LaunchEvent Type=\"OnMessageFromChanged\" FunctionName=\"onMessageFromChangedHandler\"/>\n            </LaunchEvents>\n            <!-- Identifies the runtime to be used (also referenced by the <Runtime> element). -->\n            <SourceLocation resid=\"WebViewRuntime.Url\"/>\n          </ExtensionPoint>\n        </DesktopFormFactor>\n        <!-- Defines the add-in for Outlook mobile. -->\n        <MobileFormFactor>\n          <!-- Configures event-based activation. -->\n          <ExtensionPoint xsi:type=\"LaunchEvent\">\n            <LaunchEvents>\n              <LaunchEvent Type=\"OnNewMessageCompose\" FunctionName=\"onNewMessageComposeHandler\"/>\n              <LaunchEvent Type=\"OnMessageFromChanged\" FunctionName=\"onMessageFromChangedHandler\"/>\n            </LaunchEvents>\n            <!-- Identifies the runtime to be used (also referenced by the <Runtime> element). -->\n            <SourceLocation resid=\"WebViewRuntime.Url\"/>\n          </ExtensionPoint>\n        </MobileFormFactor>\n      </Host>\n    </Hosts>\n    <Resources>\n      <bt:Images>\n        <bt:Image id=\"Icon.16x16\" DefaultValue=\"https://localhost:3000/assets/icon-16.png\"/>\n        <bt:Image id=\"Icon.32x32\" DefaultValue=\"https://localhost:3000/assets/icon-32.png\"/>\n        <bt:Image id=\"Icon.80x80\" DefaultValue=\"https://localhost:3000/assets/icon-80.png\"/>\n      </bt:Images>\n      <bt:Urls>\n        <bt:Url id=\"Commands.Url\" DefaultValue=\"https://localhost:3000/commands.html\"/>\n        <bt:Url id=\"Taskpane.Url\" DefaultValue=\"https://localhost:3000/taskpane.html\"/>\n        <bt:Url id=\"JSRuntime.Url\" DefaultValue=\"https://localhost:3000/launchevent.js\"/>\n        <bt:Url id=\"WebViewRuntime.Url\" DefaultValue=\"https://localhost:3000/commands.html\"/>\n      </bt:Urls>\n      <bt:ShortStrings>\n        <bt:String id=\"GroupLabel\" DefaultValue=\"Contoso Add-in\"/>\n        <bt:String id=\"TaskpaneButton.Label\" DefaultValue=\"Show Taskpane\"/>\n        <bt:String id=\"ActionButton.Label\" DefaultValue=\"Perform an action\"/>\n      </bt:ShortStrings>\n      <bt:LongStrings>\n        <bt:String id=\"TaskpaneButton.Tooltip\" DefaultValue=\"Opens a pane displaying all available properties.\"/>\n        <bt:String id=\"ActionButton.Tooltip\" DefaultValue=\"Perform an action when clicked.\"/>\n      </bt:LongStrings>\n    </Resources>\n  </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Workaround for Restoring Window History Methods after Office.js Loads - HTML & JavaScript\nDESCRIPTION: This snippet presents a workaround to cache and restore the native browser history methods (replaceState, pushState), which Office.js sets to null in some environments for compatibility reasons. It uses inlined JavaScript blocks to save the current state of window.history methods, includes the Office.js script from the CDN, and then restores the original methods. Place these scripts in the HTML file in the shown order, with Office.js in-between.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/referencing-the-javascript-api-for-office-library-from-its-cdn.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\">\\n    // Cache the history method values.\\n    window._historyCache = {\\n        replaceState: window.history.replaceState,\\n        pushState: window.history.pushState\\n    };\\n</script>\\n\\n<script type=\\\"text/javascript\\\" src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"></script>\\n\\n<script type=\\\"text/javascript\\\">\\n    // Restore the history method values after loading Office.js\\n    window.history.replaceState = window._historyCache.replaceState;\\n    window.history.pushState = window._historyCache.pushState;\\n</script>\\n\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Server for Office Add-in on Mac via npm\nDESCRIPTION: This command-line instruction starts the local development web server using npm. It executes the 'dev-server' script defined in the project's `package.json` file. This step is typically required before sideloading and testing the add-in on macOS.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Setting Manifest Metadata for Outlook Add-in using XML\nDESCRIPTION: This XML snippet configures key manifest metadata for the Outlook add-in, including provider name, default locale, display name, and description. It must be placed in the manifest file within the Add-in project and edited to replace placeholder values. The settings affect how the add-in appears in the Office UI (e.g., name, publisher, description) and ensure proper localization (en-US is specified). No code execution; serves as configuration only.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/outlook-quickstart-vs.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n...\\n<ProviderName>John Doe</ProviderName>\\n<DefaultLocale>en-US</DefaultLocale>\\n<!-- The display name of your add-in. Used on the store and various places of the Office UI such as the add-ins dialog. -->\\n<DisplayName DefaultValue=\\\"My Office Add-in\\\" />\\n<Description DefaultValue=\\\"My First Outlook add-in\\\"/>\\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Task Pane Body Structure in HTML\nDESCRIPTION: Replaces the default `<body>` element in `taskpane.html` with new markup. This structure includes a header, a message area initially shown (`sideload-msg`), and the main application body (`app-body`) initially hidden. It uses Fabric UI classes for styling and lists features enabled by `SupportsNoItemContext`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/contextless.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"ms-font-m ms-welcome ms-Fabric\">\n    <header class=\"ms-welcome__header ms-bgColor-neutralLighter\">\n        <img width=\"90\" height=\"90\" src=\"../../assets/logo-filled.png\" alt=\"logo\" title=\"Add-in logo\" />\n        <h1 class=\"ms-font-su\">Activate your add-in without enabling the Reading Pane or selecting a message</h1>\n    </header>\n    <section id=\"sideload-msg\" class=\"ms-welcome__main\">\n        <h2 class=\"ms-font-xl\">Please <a target=\"_blank\" href=\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\">sideload</a> your add-in to see app body.</h2>\n    </section>\n    <main id=\"app-body\" class=\"ms-welcome__main\" style=\"display: none;\">\n        <ul class=\"ms-List ms-welcome__features\">\n            <li class=\"ms-ListItem\">\n                <i class=\"ms-Icon ms-Icon--CheckList ms-font-xl\"></i>\n                <span class=\"ms-font-m\">Item multi-select is automatically enabled when the <b>SupportsNoItemContext</b> manifest element is set to <code>true</code>. You can test this by selecting multiple messages in Outlook, then choosing <b>Show Taskpane</b> from the ribbon.</span>\n            </li>\n            <li class=\"ms-ListItem\">\n                <i class=\"ms-Icon ms-Icon--Pin ms-font-xl\"></i>\n                <span class=\"ms-font-m\">Support to pin the task pane is also automatically enabled. You can test this by selecting the <b>pin</b> icon from the top right corner of the task pane.</span>\n            </li>\n            <li class=\"ms-ListItem\">\n                <i class=\"ms-Icon ms-Icon--DockRight ms-font-xl\"></i>\n                <span class=\"ms-font-m\">This feature can only be implemented with a task pane.</span>\n            </li>\n            <li class=\"ms-ListItem\">\n                <i class=\"ms-Icon ms-Icon--Design ms-font-xl\"></i>\n                <span class=\"ms-font-m\">Implement your scenario using this feature today! For example, enable your users to access content from different data sources, such as OneDrive or your customer relationship management (CRM) system, without first selecting a message.</span>\n            </li>\n        </ul>\n    </main>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Rendering Fluent UI Icon in HTML with Fabric Core\nDESCRIPTION: This HTML example shows how to use Fabric Core CSS classes to display an Office UI Fabric icon. The <i> element references a series of classes that specify the icon set, size, specific icon (Table), and theme color. Required dependencies include the Fabric Core stylesheet loaded via CDN. Inputs are the desired semantic CSS classes, and the output is a styled icon rendered on the page. Customization is available by altering the icon class, size, or color using other core classes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/fabric-core.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<i class=\\\"ms-Icon ms-font-xl ms-Icon--Table ms-fontColor-themePrimary\\\"></i>\n```\n\n----------------------------------------\n\nTITLE: Toggling Event Firing in Excel JavaScript Runtime\nDESCRIPTION: This snippet shows how to enable or disable event firing globally within the Excel add-in runtime. It uses `Excel.run`, loads the current state of `context.runtime.enableEvents`, toggles the boolean value, assigns it back to `context.runtime.enableEvents`, and then synchronizes the context to apply the change. Console messages indicate the resulting state (on or off).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-events.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    context.runtime.load(\"enableEvents\");\n    await context.sync();\n\n    let eventBoolean = !context.runtime.enableEvents;\n    context.runtime.enableEvents = eventBoolean;\n    if (eventBoolean) {\n        console.log(\"Events are currently on.\");\n    } else {\n        console.log(\"Events are currently off.\");\n    }\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Handler to Insert Image Button (jQuery, JavaScript)\nDESCRIPTION: This JavaScript code binds a click event handler to the 'insert-image' button using jQuery. It maps user clicks to the insertImage function, establishing the UI interaction for starting the image retrieval process. Dependencies: jQuery library and presence of an element with id 'insert-image'. Place inside Home.js after jQuery is loaded and the DOM is ready.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n$('#insert-image').on(\"click\", insertImage);\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Tab Visibility and Core Tab Button State Simultaneously (JavaScript)\nDESCRIPTION: This JavaScript function `myContextChanges` demonstrates using a single call to `Office.ribbon.requestUpdate` to perform multiple ribbon updates. It makes a contextual tab (`CtxTab1`) visible and simultaneously enables a button (`MyButton`) located within a group (`CustomGroup111`) on a core Office tab (`OfficeAppTab1`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myContextChanges() {\n    Office.ribbon.requestUpdate({\n        tabs: [\n            {\n                id: \"CtxTab1\",\n                visible: true\n            },\n            {\n                id: \"OfficeAppTab1\",\n                groups: [\n                    {\n                        id: \"CustomGroup111\",\n                        controls: [\n                            {\n                                id: \"MyButton\",\n                                enabled: true\n                            }\n                        ]\n                    }\n                ]\n            ]}\n        ]\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript Resource File in HTML\nDESCRIPTION: This HTML snippet shows how to include the external JavaScript resource file (`UIStrings.js`) within the `<head>` section of the `Home.html` file. This makes the `UIStrings` object, defined in `UIStrings.js`, available to the client-side scripts running on the page, enabling access to the localized string resources.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- Resource file for localized strings: -->\n<script src=\"../UIStrings.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Getting Categories Applied to an Outlook Item using Office JS\nDESCRIPTION: This snippet demonstrates how to retrieve the list of categories currently applied to the selected Outlook message or appointment item. It utilizes the `Office.context.mailbox.item.categories.getAsync` method. The result, available in `asyncResult.value`, is an array of `CategoryDetails` objects representing the applied categories.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/categories.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.context.mailbox.item.categories.getAsync(function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n        console.log(\"Action failed with error: \" + asyncResult.error.message);\n    } else {\n        const categories = asyncResult.value;\n        console.log(\"Categories:\");\n        categories.forEach(function (item) {\n            console.log(\"-- \" + JSON.stringify(item));\n        });\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Pane Logic for Logging Appointments in JavaScript\nDESCRIPTION: JavaScript code for an Office Add-in task pane (`taskpane.js`). It defines `getEventData`, called when Office is ready (`Office.onReady`), to asynchronously fetch the current appointment's subject and body (HTML). It logs the subject and indicates success or failure in getting the body via console messages. Depends on the Office JS API (`Office.onReady`, `Office.context.mailbox.item`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// Office is ready.\nOffice.onReady(function () {\n    getEventData();\n  }\n);\n\nfunction getEventData() {\n  console.log(`Subject: ${Office.context.mailbox.item.subject}`);\n  Office.context.mailbox.item.body.getAsync(\"html\", (result) => {\n    if (result.status === Office.AsyncResultStatus.Succeeded) {\n      console.log(\"Event logged successfully.\");\n    } else {\n      console.error(\"Failed to get body.\");\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Runtime Settings in XML Manifest\nDESCRIPTION: This XML snippet adds a `<Runtimes>` section within the `<Host>` element of a `manifest.xml` file. It defines a `<Runtime>` element with `resid=\"Taskpane.Url\"` referencing the HTML file location and `lifetime=\"long\"` to enable features like running code on document open or persisting after the task pane closes. This configuration is essential for activating the shared runtime behavior.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides ...>\n  <Hosts>\n    <Host ...>\n      <Runtimes>\n        <Runtime resid=\"Taskpane.Url\" lifetime=\"long\" />\n      </Runtimes>\n    ...\n    </Host>\n```\n\n----------------------------------------\n\nTITLE: Encoding and Sending a File Slice via HTTP POST (JavaScript)\nDESCRIPTION: This function takes a file slice and the current state object. It Base64 encodes the slice data (assuming a `myEncodeBase64` function exists) and sends it to a specified server endpoint using an `XMLHttpRequest` POST request. It sets a custom header 'Slice-Number' with the slice index. The `onreadystatechange` handler updates the status upon completion, increments the slice counter, and then calls `getSlice` for the next slice or `closeFile` if all slices have been sent. It depends on `myEncodeBase64`, `XMLHttpRequest`, `updateStatus`, `getSlice`, and `closeFile`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sendSlice(slice, state) {\n    var data = slice.data;\n\n    // If the slice contains data, create an HTTP request.\n    if (data) {\n\n        // Encode the slice data, a byte array, as a Base64 string.\n        // NOTE: The implementation of myEncodeBase64(input) function isn't\n        // included with this example. For information about Base64 encoding with\n        // JavaScript, see https://developer.mozilla.org/docs/Web/JavaScript/Base64_encoding_and_decoding.\n        var fileData = myEncodeBase64(data);\n\n        // Create a new HTTP request. You need to send the request\n        // to a webpage that can receive a post.\n        var request = new XMLHttpRequest();\n\n        // Create a handler function to update the status\n        // when the request has been sent.\n        request.onreadystatechange = function () {\n            if (request.readyState == 4) {\n\n                updateStatus(\"Sent \" + slice.size + \" bytes.\");\n                state.counter++;\n\n                if (state.counter < state.sliceCount) {\n                    getSlice(state);\n                } else {\n                    closeFile(state);\n                }\n            }\n        }\n\n        request.open(\"POST\", \"[Your receiving page or service]\");\n        request.setRequestHeader(\"Slice-Number\", slice.index);\n\n        // Send the file as the body of an HTTP POST\n        // request to the web server.\n        request.send(fileData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Fabric Core via CDN in HTML\nDESCRIPTION: This HTML snippet demonstrates how to add Fabric Core's stylesheet to your page by referencing its CDN link within a <link> element. No additional dependencies are required beyond access to the CDN. The main input is the href URL for the stylesheet and the output is applied Fluent UI styling to the page's elements. This is a standard prerequisite for using any Fabric Core icons, fonts, or classes in an Office Add-in or any web project.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/fabric-core.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\">\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory - Command Line\nDESCRIPTION: This snippet demonstrates the command for changing the working directory to the newly created Office Add-in project folder. No dependencies are required apart from a terminal or command prompt. The key parameter is the path to the folder (\\\"My Office Add-in\\\") and the expected outcome is that the working directory will change to this location, allowing subsequent commands to reference project files relative to this directory.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/excel-quickstart-react.md#_snippet_0\n\nLANGUAGE: Command Line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Mocking Word Object Model and Testing Add-in Feature using Office-Addin-Mock and Jest in JavaScript\nDESCRIPTION: This snippet shows how to set up a complete mock of the Word object model for unit testing a Word add-in feature in Node.js. It creates a seed mock object implementing the minimal API surface required, including Word.InsertLocation enum, run method, and mocked document body. Office-Addin-Mock is used to generate the mock, and Jest is used for assertions. Dependencies include office-addin-mock, Jest, and availability of the add-in feature module. Key test cases check that the correct text and color are set for the inserted paragraph.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst OfficeAddinMock = require(\"office-addin-mock\");\nconst myWordAddinFeature = require(\"../my-word-add-in-feature\");\n\n// Create the seed mock object.\nconst mockData = {\n  context: {\n    document: {\n      body: {\n        paragraph: {\n          font: {},\n        },\n        // Mock the Body.insertParagraph method.\n        insertParagraph: function (paragraphText, insertLocation) {\n          this.paragraph.text = paragraphText;\n          this.paragraph.insertLocation = insertLocation;\n          return this.paragraph;\n        },\n      },\n    },\n  },\n  // Mock the Word.InsertLocation enum.\n  InsertLocation: {\n    end: \"end\",\n  },\n  // Mock the Word.run function.\n  run: async function(callback) {\n    await callback(this.context);\n  },\n};\n\n// Create the final mock object from the seed object.\nconst wordMock = new OfficeAddinMock.OfficeMockObject(mockData);\n\n// Define and initialize the Word object that is called in the insertBlueParagraph function.\nglobal.Word = wordMock;\n\n/* Code that calls the test framework goes below this line. */\n\n// Jest test set\ndescribe(\"Insert blue paragraph at end tests\", () => {\n\n  test(\"color of paragraph\", async function () {\n    await myWordAddinFeature.insertBlueParagraph();  \n    expect(wordMock.context.document.body.paragraph.font.color).toBe(\"blue\");\n  });\n\n  test(\"text of paragraph\", async function () {\n    await myWordAddinFeature.insertBlueParagraph();\n    expect(wordMock.context.document.body.paragraph.text).toBe(\"Hello World\");\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Date Field at Selection - Office.js - JavaScript\nDESCRIPTION: This code inserts a Date field before the current selection or cursor in a Word document via Office.js. It specifies the field's display format using Word field code syntax (\\\\@ \"M/d/yyyy h:mm am/pm\") and includes a Boolean to show or hide the field codes. The snippet demonstrates proper context acquisition, range targeting, property loading, and error handling for possible insertion failures.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/fields-guidance.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Inserts a Date field before selection.\\nasync function rangeInsertDateField() {\\n  await Word.run(async (context) => {\\n    let range = context.document.getSelection().getRange();\\n    const field = range.insertField(\\n      Word.InsertLocation.before,\\n      Word.FieldType.date,\\n     '\\\\@ \\\"M/d/yyyy h:mm am/pm\\\"',\\n     true\\n    );\\n    field.load(\\\"result,code\\\");\\n    await context.sync();\\n\\n    if (field.isNullObject) {\\n      console.warn(\\\"The field wasn't inserted as expected.\\\");\\n    } else {\\n      console.log(\\\"Code of the field: \\\" + field.code);\\n      console.log(\\\"Result of the field: \\\" + JSON.stringify(field.result));\\n    }\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Content Control Labeled in Word Document - Markdown\nDESCRIPTION: This snippet is a Copilot prompt for inserting a content control labeled 'Sample Content Control' into the first paragraph, and configuring its color to red, using the Word JavaScript API. Useful for building interactive, styled elements in Word add-ins. Copilot should output stepwise instructions and relevant Office.js code.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nInsert a content control labeled *\\\"Sample Content Control\\\"* into the \nfirst paragraph and *set the content control's color to red* using \nthe Word JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Style to First Paragraph in Word - Markdown\nDESCRIPTION: This Copilot prompt is for applying the style 'Heading1' to the first paragraph of a Word document, via the Word JavaScript API. Suitable for Office.js document formatting tasks. Copilot will produce code for style manipulation by targeting specific document elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nApply the style *\\\"Heading1\\\"* to the first paragraph in the document \nusing the Word JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Inserting Selected Slides Using PowerPoint JavaScript API (JavaScript)\nDESCRIPTION: This asynchronous JavaScript function uses the Office.js PowerPoint API to insert multiple specific slides from a source presentation, identified by their slide IDs, after the currently selected slide. It demonstrates the use of the insertSlidesFromBase64 method with the InsertSlideOptions parameter, setting both formatting and the target slide position, and specifying the sourceSlideIds array. Dependencies include the Office.js PowerPoint library and a helper function (getSelectedSlideID) to determine user context. The chosenFileBase64 variable must contain the base64-encoded source presentation. Returns a promise that resolves after slides are inserted and changes are synced. All slide IDs must match the format expected by the API; slide selection logic is external to this snippet.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/insert-slides-into-presentation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertAfterSelectedSlide() {\n    await PowerPoint.run(async function(context) {\n        const selectedSlideID = await getSelectedSlideID();\n        context.presentation.insertSlidesFromBase64(chosenFileBase64, {\n            formatting: \"UseDestinationTheme\",\n            targetSlideId: selectedSlideID + \"#\",\n            sourceSlideIds: [\"267#763315295\", \"256#\", \"#926310875\", \"1270#\"]\n        });\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Values with OfficeRuntime.storage in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to store a key-value pair in persistent add-in storage using the OfficeRuntime.storage API within an Excel custom function not using a shared runtime. It requires the Office Runtime JavaScript APIs to be loaded and available within the context. The function takes two parameters: 'key' and 'value', returning a resolved Promise with a status message indicating success or error. Inputs are the key and value, outputs are asynchronous messages; errors are caught and returned as part of the result. Limitation: There is no operation for clearing all storage at once.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-runtime.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoreValue(key, value) {\\n\\n  return OfficeRuntime.storage.setItem(key, value).then(function (result) {\\n      return \\\"Success: Item with key '\\\" + key + \\\"' saved to storage.\\\";\\n  }, function (error) {\\n      return \\\"Error: Unable to save item with key '\\\" + key + \\\"' to storage. \\\" + error;\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling SSO Error Codes in Office Add-ins (JavaScript)\nDESCRIPTION: This JavaScript switch statement handles a variety of SSO error codes, displaying user-friendly messages for each scenario such as missing sign-in, aborted consent, web-specific issues, and a fallback to MSAL authentication if SSO fails for other reasons. It relies on an error object (with a 'code' property) and a 'showMessage' function to communicate issues to the user. Inputs include the error object, and outputs are user notifications; it assumes 'showMessage' is implemented elsewhere. The structure is designed for extensibility for additional Office/SSO error codes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (error.code) {\n    case 13001:\n        // No one is signed into Office. If the add-in cannot be effectively used when no one \n        // is logged into Office, then the first call of getAccessToken should pass the \n        // `allowSignInPrompt: true` option.\n        showMessage(\"No one is signed into Office. But you can use many of the add-ins functions anyway. If you want to log in, press the Get OneDrive File Names button again.\");\n        break;\n    case 13002:\n        // The user aborted the consent prompt. If the add-in cannot be effectively used when consent\n        // has not been granted, then the first call of getAccessToken should pass the `allowConsentPrompt: true` option.\n        showMessage(\"You can use many of the add-ins functions even though you have not granted consent. If you want to grant consent, press the Get OneDrive File Names button again.\");\n        break;\n    case 13006:\n        // Only seen in Office on the web.\n        showMessage(\"Office on the web is experiencing a problem. Please sign out of Office, close the browser, and then start again.\");\n        break;\n    case 13008:\n        // Only seen in Office on the web.\n        showMessage(\"Office is still working on the last operation. When it completes, try this operation again.\");\n        break;\n    case 13010:\n        // Only seen in Office on the web.\n        showMessage(\"Follow the instructions to change your browser's zone configuration.\");\n        break;\n    default:\n        // For all other errors, including 13000, 13003, 13005, 13007, 13012, and 50001, fall back\n        // to non-SSO sign-in by using MSAL authentication.\n        showMessage(\"SSO failed. In these cases you should implement a falback to MSAL authentication.\");\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Secure Controller with Microsoft Identity and Graph SDK (C#, ASP.NET Core)\nDESCRIPTION: This snippet defines a new FilesController in C# with secure access enforced using the [Authorize] attribute and a required access_as_user scope. It injects dependencies for token acquisition, Microsoft Graph, and configuration using constructor injection to enable later REST API development. This controller structure is foundational for exposing user-specific Graph-powered endpoints. No public methods are implemented yet; it is a scaffold for secure API endpoints depending on Microsoft.Identity.Web and Microsoft.Graph.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Authorize]\n[Route(\"api/[controller]\")]\n[RequiredScope(\"access_as_user\")]\npublic class FilesController : Controller\n{        \n    public FilesController(ITokenAcquisition tokenAcquisition, GraphServiceClient graphServiceClient, IOptions<MicrosoftGraphOptions> graphOptions)\n    {\n        _tokenAcquisition = tokenAcquisition;\n        _graphServiceClient = graphServiceClient;\n        _graphOptions = graphOptions;\n\n    }\n\n    private readonly ITokenAcquisition _tokenAcquisition;\n    private readonly GraphServiceClient _graphServiceClient;\n    private readonly IOptions<MicrosoftGraphOptions> _graphOptions;\n\n    // TODO 10: Add the REST API to get filenames.\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server and Sideloading Add-in\nDESCRIPTION: This command executes the `start` script defined in the project's `package.json`, typically using `office-addin-debugging`. It starts a local web server to host the add-in's files and attempts to sideload the add-in into the specified Office client (Outlook in this case) for testing and debugging purposes. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_7\n\nLANGUAGE: command line\nCODE:\n```\n```command&nbsp;line\nnpm start\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Initial applyCustomStyle Function in JavaScript\nDESCRIPTION: This snippet defines an asynchronous function 'applyCustomStyle' using the Word JavaScript API's 'Word.run' pattern. It sets up the context for interacting with the Word document but includes a placeholder ('TODO1') for the specific commands to apply the custom style. It requires the Office JS library.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function applyCustomStyle() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to apply the custom style.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to the Add-in Project - Command Line\nDESCRIPTION: This command navigates the user to the root folder of the newly created Office Add-in project using the command line. No dependencies are required apart from a terminal or command prompt with standard file system access. The key parameter is the folder name (e.g., \\\"My Office Add-in\\\"); the command expects that this directory exists in the current path. The command does not produce output but sets the working directory for subsequent actions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/project-quickstart.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Localizing Group Policy for Office Add-in Protocol Handlers (ADML/XML)\nDESCRIPTION: This ADML file provides the English language resources (display names, descriptions) for the Group Policy settings defined in the corresponding ADMX file for managing Office Add-in protocol handlers. It defines user-friendly strings like 'Microsoft Office Add-ins' and 'Protocol Handlers' that appear in the Group Policy editor UI, making the policy configuration clearer for administrators. Depends on the presence and structure of the associated ADMX file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/custom-protocol-handler.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-16\"?> \n<policyDefinitionResources xmlns=\"http://www.microsoft.com/GroupPolicy/PolicyDefinitions\" revision=\"1.0\" schemaVersion=\"1.0\"> \n  <displayName>Microsoft Office Add-Ins</displayName> \n  <description>Microsoft Office Add-Ins</description> \n  <resources> \n    <stringTable> \n      <string id=\"L_MicrosoftOfficeAddins\">Microsoft Office Add-ins</string> \n      <string id=\"L_ProtocolHandlers\">Protocol Handlers</string> \n      <string id=\"L_Protocols\">[add-in name]</string> \n      <string id=\"L_ProtocolsExplain\">Defines URL protocol behavior. </string> \n    </stringTable> \n    <presentationTable> \n      <presentation id=\"L_Protocols\"> \n        <listBox refId=\"L_ProtocolsListBox\">Protocols</listBox> \n      </presentation> \n    </presentationTable> \n  </resources> \n</policyDefinitionResources> \n```\n\n----------------------------------------\n\nTITLE: Handling Default SSO Errors and Fallback in handleSSOErrors using JavaScript\nDESCRIPTION: This snippet represents the `default` case within the `handleSSOErrors` function's `switch` statement. It handles all other SSO error codes not explicitly caught by previous `case` statements (including 13000, 13003, 13005, 13007, 13012, 50001). It informs the user that SSO failed, sets the `authSSO` flag to `false` to trigger fallback authentication, and recursively calls `getAccessToken` to initiate the MSAL flow. It returns `null` after the `switch` statement for errors handled by showing a message in the preceding cases.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndefault: //recursive call.\n        // For all other errors, including 13000, 13003, 13005, 13007, 13012, and 50001, fall back\n        // to MSAL sign-in.\n        showMessage('SSO failed. Trying fallback auth.');\n        authSSO = false;\n        return getAccessToken(false);\n}\nreturn null; // Return null for errors that show a message to the user.\n```\n\n----------------------------------------\n\nTITLE: Running Office Add-ins on Specific Documents - Command Line Examples\nDESCRIPTION: Provides example command line executions for running and sideloading Office Add-ins in specific documents hosted on SharePoint Online or OneDrive. These examples require previous setup of the npm environment and Office Add-in sideloading configuration. Each command targets a different document URL, illustrating practical usage for testing or development. URLs must be accessible and replaced as needed for actual deployment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/start-web-sideload-instructions.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start -- web --document https://contoso.sharepoint.com/:t:/g/EZGxP7ksiE5DuxvY638G798BpuhwluxCMfF1WZQj3VYhYQ?e=F4QM1R\n```\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start -- web --document https://1drv.ms/x/s!jkcH7spkM4EGgcZUgqthk4IK3NOypVw?e=Z6G1qp\n```\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start -- web --document https://contoso-my.sharepoint-df.com/:t:/p/user/EQda453DNTpFnl1bFPhOVR0BwlrzetbXvnaRYii2lDr_oQ?e=RSccmNP\n```\n\n----------------------------------------\n\nTITLE: Adding Spam Reporting Runtime Object to Microsoft 365 Manifest (JSON)\nDESCRIPTION: Defines an extension runtime in manifest.json that enables integrated spam-reporting in Microsoft 365 by specifying required Mailbox capabilities, code pages, and execution context. Dependencies include using manifest schema extension runtimes and referencing appropriate handler files (HTML, JS). Key parameters include 'minVersion', a unique 'id' (\"spam_reporting_runtime\"), HTML/JS URIs in 'code', and 'actions' (with matching event handler IDs). The object is inserted in 'extensions.runtimes', must match referenced handler method names, and should only be used with supported Outlook clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requirements\": {\n        \"capabilities\": [\n            {\n                \"name\": \"Mailbox\",\n                \"minVersion\": \"1.14\"\n            }\n        ]\n    },\n    \"id\": \"spam_reporting_runtime\",\n    \"type\": \"general\",\n    \"code\": {\n        \"page\": \"https://localhost:3000/commands.html\",\n        \"script\": \"https://localhost:3000/spamreporting.js\"\n    },\n    \"lifetime\": \"short\",\n    \"actions\": [\n        {\n            \"id\": \"onSpamReport\",\n            \"type\": \"executeFunction\"\n        }\n    ]\n},\n```\n\n----------------------------------------\n\nTITLE: Calling the Localization Function for Contextual Tabs in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to invoke the `GetContextualTabsJsonSupportedLocale` function (defined previously) to obtain the appropriate localized JSON string for the current user's language. The returned JSON string is stored in the `contextualTabJSON` constant, ready to be passed to the `requestCreateControls` method.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst contextualTabJSON = GetContextualTabsJsonSupportedLocale();\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Script for Running Jest Tests in package.json\nDESCRIPTION: Shows an example `scripts` section within a `package.json` file. The `test` script is configured to run the Jest test runner when `npm test` is executed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"test\": \"jest\",\n  -- other scripts omitted --  \n}\n```\n\n----------------------------------------\n\nTITLE: Setting JS_DEBUG Environment Variable via PowerShell\nDESCRIPTION: This PowerShell snippet uses setx to assign the JS_DEBUG environment variable to the PackageFullName obtained from the previous step. This configuration change enables debugging for UI-less Office Add-ins in Microsoft Edge. Be sure to replace <PackageFullName> with the actual value fetched from the package query; after setting, Office must be restarted to apply the change.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/enable-debugging-on-edge-devtools.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nsetx JS_DEBUG <PackageFullName>\n```\n\n----------------------------------------\n\nTITLE: Referencing Office.js CDN for China (21Vianet)\nDESCRIPTION: Specifies the URL for the Office.js library CDN hosted by `partner.office365.cn`. This URL should be referenced (typically in an HTML script tag) in Office Add-ins targeting the Office 365 service operated by 21Vianet in China instead of the standard CDN to ensure compliance with local regulations and potentially improve performance.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/21Vianet-cdn.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nhttps://appsforoffice.cdn.partner.office365.cn/appsforoffice/lib/1/hosted/office.js\n```\n\n----------------------------------------\n\nTITLE: Declaring Mobile Support Requirements in Unified Manifest (JSON)\nDESCRIPTION: Declares support for mobile form factors and configures mobile-specific ribbon controls within the unified manifest for Microsoft 365. This involves including \"mobile\" in the `extensions.ribbons.requirements.formFactors` array and defining a `customMobileRibbonGroups` array within a tab, containing controls of type \"mobileButton\" with appropriate icons.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"extensions.ribbons.requirements.formFactors\": [..., \"mobile\", ...],\n\"extensions.ribbons.tabs\": [\n  {\n    // ... other tab properties\n    \"customMobileRibbonGroups\": [\n      {\n        // ... group properties\n        \"controls\": [\n          {\n            \"type\": \"mobileButton\",\n            \"id\": \"...\",\n            \"label\": \"...\",\n            \"icons\": [ ... ], // Mobile specific icon sizes\n            \"action\": { ... }\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Ribbons for Desktop and Mobile in Outlook Add-in - JSON\nDESCRIPTION: Specifies the ribbons configuration within the manifest.json file to define custom add-in buttons for both desktop and mobile Outlook clients. It demonstrates how to enable 'Log to Contoso' task pane actions on various surfaces by configuring requirements, contexts, groups, controls, and icon assets per platform. The code accommodates descriptive supertips, action identifiers, and matches actionId to runtime actions as required. Limitations include needing all nine icons for mobile and correctly matching actionId with runtime entries.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requirements\": {\n        \"formFactors\": [\n            \"desktop\",\n            \"mobile\"\n        ]\n    },\n    \"contexts\": [\n        \"logEventMeetingDetailsAttendee\"\n    ],\n    \"tabs\": [\n        {\n            \"builtInTabId\": \"TabDefault\",\n            \"groups\": [\n                {\n                    \"id\": \"apptReadGroup\",\n                    \"label\": \"Contoso Add-in\",\n                    \"icons\": [\n                        {\n                            \"size\": 16,\n                            \"url\": \"https://localhost:3000/assets/icon-16.png\"\n                        },\n                        {\n                            \"size\": 32,\n                            \"url\": \"https://localhost:3000/assets/icon-32.png\"\n                        },\n                        {\n                            \"size\": 80,\n                            \"url\": \"https://localhost:3000/assets/icon-80.png\"\n                        }\n                    ],\n                    \"controls\": [\n                        {\n                            \"id\": \"desktopOpenTaskpane\",\n                            \"type\": \"button\",\n                            \"label\": \"Log to Contoso\",\n                            \"icons\": [\n                                {\n                                    \"size\": 16,\n                                    \"url\": \"https://www.contoso.com/assets/icon-16.png\"\n                                },\n                                {\n                                    \"size\": 32,\n                                    \"url\": \"https://www.contoso.com/assets/icon-32.png\"\n                                },\n                                {\n                                    \"size\": 80,\n                                    \"url\": \"https://www.contoso.com/assets/icon-80.png\"\n                                }\n                            ],\n                            \"supertip\": {\n                                \"title\": \"Log to Contoso CRM\",\n                                \"description\": \"Log appointment notes and other details to Contoso CRM using a task pane.\"\n                            },\n                            \"actionId\": \"TaskPaneRuntimeShow\"\n                        }\n                    ]\n                }\n            ],\n            \"customMobileRibbonGroups\": [\n                {\n                    \"id\": \"mobileApptReadGroup\",\n                    \"label\": \"Contoso Add-in\",\n                    \"controls\": [\n                        {\n                            \"id\": \"mobileTaskpaneButton\",\n                            \"label\": \"Log to Contoso\",\n                            \"type\": \"mobileButton\",\n                            \"icons\": [\n                                {\n                                    \"scale\": 1,\n                                    \"size\": 25,\n                                    \"url\": \"https://contoso.com/assets/icon-25.png\"\n                                },\n                                {\n                                    \"scale\": 1,\n                                    \"size\": 32,\n                                    \"url\": \"https://contoso.com/assets/icon-32.png\"\n                                },\n                                {\n                                    \"scale\": 1,\n                                    \"size\": 48,\n                                    \"url\": \"https://contoso.com/assets/icon-48.png\"\n                                },                                \n                                {\n                                    \"scale\": 2,\n                                    \"size\": 25,\n                                    \"url\": \"https://contoso.com/assets/icon-25.png\"\n                                },\n                                {\n                                    \"scale\": 2,\n                                    \"size\": 32,\n                                    \"url\": \"https://contoso.com/assets/icon-32.png\"\n                                },\n                                {\n                                    \"scale\": 2,\n                                    \"size\": 48,\n                                    \"url\": \"https://contoso.com/assets/icon-48.png\"\n                                },                                \n                                {\n                                    \"scale\": 3,\n                                    \"size\": 25,\n                                    \"url\": \"https://contoso.com/assets/icon-25.png\"\n                                },\n                                {\n                                    \"scale\": 3,\n                                    \"size\": 32,\n                                    \"url\": \"https://contoso.com/assets/icon-32.png\"\n                                },\n                                {\n                                    \"scale\": 3,\n                                    \"size\": 48,\n                                    \"url\": \"https://contoso.com/assets/icon-48.png\"\n                                }\n                            ],\n                            \"actionId\": \"TaskPaneRuntimeShow\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Token Request and Scopes in JavaScript\nDESCRIPTION: Defines an asynchronous `run` function in JavaScript, intended to be executed within an Office Add-in task pane. It specifies the minimum required scopes (`Files.Read`, `User.Read`, `openid`, `profile`) for acquiring an access token for Microsoft Graph and initializes the `accessToken` variable to null. Placeholders indicate where silent/interactive token acquisition and API call logic should be inserted.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/enable-nested-app-authentication-in-your-add-in.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n// Specify minimum scopes needed for the access token.\nconst tokenRequest = {\n  scopes: [\"Files.Read\", \"User.Read\", \"openid\", \"profile\"],\n};\nlet accessToken = null;\n\n// TODO 1: Call acquireTokenSilent.\n\n// TODO 2: Call acquireTokenPopup.\n\n// TODO 3: Log error if token still null.\n\n// TODO 4: Call the Microsoft Graph API.\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Resources in Office Add-in Manifest XML\nDESCRIPTION: This XML snippet shows the <Resources> element within an Office Add-in manifest's <VersionOverrides> section. It defines shared resources like icons (<bt:Images>), URLs (<bt:Urls>), and strings (<bt:ShortStrings>, <bt:LongStrings>) using unique IDs. Each resource has a DefaultValue and can include <bt:Override> elements to provide locale-specific versions (e.g., for 'ja-jp'). This allows the add-in UI to adapt based on the user's Office language settings. All URLs must use HTTPS.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<Resources>\n  <bt:Images>\n    <bt:Image id=\"icon1_16x16\" DefaultValue=\"https://www.contoso.com/Images/icon_default.png\">\n      <bt:Override Locale=\"ja-jp\" Value=\"https://www.contoso.com/Images/ja-jp16-icon_default.png\" />\n    </bt:Image>\n    <bt:Image id=\"icon1_32x32\" DefaultValue=\"https://www.contoso.com/Images/icon_default.png\">\n      <bt:Override Locale=\"ja-jp\" Value=\"https://www.contoso.com/Images/ja-jp32-icon_default.png\" />\n    </bt:Image>\n    <bt:Image id=\"icon1_80x80\" DefaultValue=\"https://www.contoso.com/Images/icon_default.png\">\n      <bt:Override Locale=\"ja-jp\" Value=\"https://www.contoso.com/Images/ja-jp80-icon_default.png\" />\n    </bt:Image>\n  </bt:Images>\n  <bt:Urls>\n    <bt:Url id=\"residDesktopFuncUrl\" DefaultValue=\"https://www.contoso.com/Pages/Home.aspx\">\n      <bt:Override Locale=\"ja-jp\" Value=\"https://www.contoso.com/Pages/Home.aspx\" />\n    </bt:Url>\n  </bt:Urls>\n  <bt:ShortStrings>\n    <bt:String id=\"residLabel\" DefaultValue=\"GetData\">\n      <bt:Override Locale=\"ja-jp\" Value=\"JA-JP-GetData\" />\n    </bt:String>\n  </bt:ShortStrings>\n  <bt:LongStrings>\n    <bt:String id=\"residToolTip\" DefaultValue=\"Get data for your document.\">\n      <bt:Override Locale=\"ja-jp\" Value=\"JA-JP - Get data for your document.\" />\n    </bt:String>\n  </bt:LongStrings>\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Styles with OfficeThemes.css CSS\nDESCRIPTION: This CSS code defines classes for aligning add-in appearance with Office document themes (colors, fonts) and Office UI themes (task pane colors). It includes primary, secondary, accent colors, and font definitions intended for dynamic updates by the Office application based on the selected theme.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/use-document-themes-in-your-powerpoint-add-ins.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* The following classes describe the common theme information for office documents */ \n\n/* Basic Font and Background Colors for text */ \n.office-docTheme-primary-fontColor { color:#000000; } \n.office-docTheme-primary-bgColor { background-color:#ffffff; } \n.office-docTheme-secondary-fontColor { color: #000000; } \n.office-docTheme-secondary-bgColor { background-color: #ffffff; } \n\n/* Accent color definitions for fonts */ \n.office-contentAccent1-color { color:#5b9bd5; } \n.office-contentAccent2-color { color:#ed7d31; } \n.office-contentAccent3-color { color:#a5a5a5; } \n.office-contentAccent4-color { color:#ffc000; } \n.office-contentAccent5-color { color:#4472c4; } \n.office-contentAccent6-color { color:#70ad47; } \n\n/* Accent color for backgrounds */ \n.office-contentAccent1-bgColor { background-color:#5b9bd5; } \n.office-contentAccent2-bgColor { background-color:#ed7d31; } \n.office-contentAccent3-bgColor { background-color:#a5a5a5; } \n.office-contentAccent4-bgColor { background-color:#ffc000; } \n.office-contentAccent5-bgColor { background-color:#4472c4; } \n.office-contentAccent6-bgColor { background-color:#70ad47; } \n\n/* Accent color for borders */ \n.office-contentAccent1-borderColor { border-color:#5b9bd5; } \n.office-contentAccent2-borderColor { border-color:#ed7d31; } \n.office-contentAccent3-borderColor { border-color:#a5a5a5; } \n.office-contentAccent4-borderColor { border-color:#ffc000; } \n.office-contentAccent5-borderColor { border-color:#4472c4; } \n.office-contentAccent6-borderColor { border-color:#70ad47; } \n\n/* links */ \n.office-a { color: #0563c1; } \n.office-a:visited { color: #954f72; } \n\n/* Body Fonts */ \n.office-bodyFont-eastAsian { } /* East Asian name of the Font */ \n.office-bodyFont-latin { font-family:\"Calibri\"; } /* Latin name of the Font */ \n.office-bodyFont-script { } /* Script name of the Font */ \n.office-bodyFont-localized { font-family:\"Calibri\"; } /* Localized name of the Font. Corresponds to the default font of the culture currently used in Office.*/ \n\n/* Headers Font */ \n.office-headerFont-eastAsian { } \n.office-headerFont-latin { font-family:\"Calibri Light\"; } \n.office-headerFont-script { } \n.office-headerFont-localized { font-family:\"Calibri Light\"; } \n\n/* The following classes define font and background colors for Office UI themes. These classes should only be used in task pane add-ins */ \n\n/* Basic Font and Background Colors for PPT */ \n.office-officeTheme-primary-fontColor { color:#b83b1d; } \n.office-officeTheme-primary-bgColor { background-color:#dedede; } \n.office-officeTheme-secondary-fontColor { color:#262626; } \n.office-officeTheme-secondary-bgColor { background-color:#ffffff; }\n```\n\n----------------------------------------\n\nTITLE: Adding a Plain Text Comment to a Cell in Excel using JavaScript\nDESCRIPTION: This snippet demonstrates how to add a new comment thread to a specific cell ('A2' on 'MyWorksheet') using the `comments.add` method. It requires the cell address as a string and the comment content as a string. The operation is performed within the `Excel.run` context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Add a comment to A2 on the \"MyWorksheet\" worksheet.\n    let comments = context.workbook.comments;\n\n    // Note that an InvalidArgument error will be thrown if multiple cells passed to `Comment.add`.\n    comments.add(\"MyWorksheet!A2\", \"TODO: add data.\");\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Slide Index using Common API - PowerPoint JavaScript\nDESCRIPTION: This snippet wraps the asynchronous `Office.context.document.getSelectedDataAsync` API in a promise-returning function for easier and modern usage. It gets the index of the currently selected slide(s) in PowerPoint, returning the 1-based index of the first selected slide. Dependencies include the Office Common API and OfficeExtension.Promise (or a compatible Promise polyfill). Inputs are user selection, and outputs are a numerical slide index useful for further slide operations. Useful in add-ins facilitating slide-based interactions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/add-slides.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getSelectedSlideIndex() {\n    return new OfficeExtension.Promise<number>(function(resolve, reject) {\n        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function(asyncResult) {\n            try {\n                if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                    reject(console.error(asyncResult.error.message));\n                } else {\n                    resolve(asyncResult.value.slides[0].index);\n                }\n            } \n            catch (error) {\n                reject(console.log(error));\n            }\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Shape as a PNG Image in Excel using JavaScript\nDESCRIPTION: This code retrieves a shape named \"Image\" from 'MyWorksheet' and converts it into a base64-encoded PNG image string using the `shape.getAsImage` method with `Excel.PictureFormat.png`. The resulting string is logged to the console, suitable for saving or embedding. It assumes a shape named \"Image\" exists on the specified worksheet.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let shapes = context.workbook.worksheets.getItem(\"MyWorksheet\").shapes;\n    let shape = shapes.getItem(\"Image\");\n    let stringResult = shape.getAsImage(Excel.PictureFormat.png);\n\n    await context.sync();\n\n    console.log(stringResult.value);\n    // Instead of logging, your add-in may use the base64-encoded string to save the image as a file or insert it in HTML.\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Worksheet Protection Change Event Handler - Excel JavaScript API (JavaScript)\nDESCRIPTION: Registers an event handler for the onProtectionChanged event on the worksheet named 'Sample', then synchronizes context. The event handler receives details such as isProtected, worksheetId, and source, and logs them. Relies on Office.js event binding; relevant for monitoring Excel UI or API-driven worksheet protection changes. Inputs: event object; Outputs: logs event details.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This function registers an event handler for the onProtectionChanged event of a worksheet.\nasync function run() {\n    await Excel.run(async (context) => {\n        // Retrieve the worksheet named \"Sample\".\n        let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    \n        // Register the onProtectionChanged event handler.\n        sheet.onProtectionChanged.add(checkProtection);\n        await context.sync();\n    });\n}\n\n// This function is an event handler that returns the protection state of a worksheet \n// and information about the changed worksheet.\nasync function checkProtection(event) {\n    await Excel.run(async (context) => {\n        // Retrieve the protection, worksheet ID, and source properties of the event.\n        let protectionStatus = event.isProtected;\n        let worksheetId = event.worksheetId;\n        let source = event.source;\n\n        // Print the event properties to the console.\n        console.log(\"Protection status changed. Protection status is now: \" + protectionStatus);\n        console.log(\"    ID of changed worksheet: \" + worksheetId);\n        console.log(\"    Source of change event: \" + source);    \n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Menu Item to Run Function Command in Manifest\nDESCRIPTION: This JSON snippet defines another individual item within a menu's 'items' array, also of type 'menuItem'. Similar to the task pane item, it includes 'id', 'label', and 'supertip'. The crucial part is the 'actionId' ('SetNotification' here), which must match an action defined in the 'runtimes' section configured to execute a specific JavaScript function (a function command).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"msgReadSetNotificationMenuItem\",\n    \"type\": \"menuItem\",\n    \"label\": \"Set Notification\",\n    \"supertip\": {\n        \"title\": \"Set Notification\",\n        \"description\": \"Displays a notification message on the current message.\"\n    },\n    \"actionId\": \"SetNotification\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Recipients to Outlook Appointment using Office.js (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to append recipients to an Outlook appointment compose window using the `Recipients.addAsync` method from the Office.js library. It confirms the item is an appointment and then adds specified required attendees using an array of recipient objects, executing a callback upon completion to check for success or errors. Requires the Office.js library.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-set-or-add-recipients.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n```js\nlet item;\n\n// Confirms that the Office.js library is loaded.\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Outlook) {\n        item = Office.context.mailbox.item;\n        addAttendees();\n    }\n});\n\n// Adds the specified recipients as required attendees of the appointment.\nfunction addAttendees() {\n    if (item.itemType === Office.MailboxEnums.ItemType.Appointment) {\n        item.requiredAttendees.addAsync(\n        [{\n            \"displayName\": \"Kristie Jensen\",\n            \"emailAddress\": \"kristie@contoso.com\"\n         },\n         {\n            \"displayName\": \"Pansy Valenzuela\",\n            \"emailAddress\": \"pansy@contoso.com\"\n          }],\n        (asyncResult) => {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(asyncResult.error.message);\n                return;\n            }\n\n            console.log(\"Successfully added the required attendees.\");\n            // Run additional operations appropriate to your scenario.\n        });\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Converting an Excel Range to a Table using Office JS\nDESCRIPTION: This snippet demonstrates creating an Excel table from a range of data. First, it defines data and writes it to range 'A1:E7' on the 'Sample' worksheet. It then autofits the columns and rows of the used range. Finally, it converts the range 'A1:E7' into a table named 'ExpensesTable' using `sheet.tables.add()`, indicating that the first row contains headers (true).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    // Define values for the range.\n    let values = [[\"Product\", \"Qtr1\", \"Qtr2\", \"Qtr3\", \"Qtr4\"],\n    [\"Frames\", 5000, 7000, 6544, 4377],\n    [\"Saddles\", 400, 323, 276, 651],\n    [\"Brake levers\", 12000, 8766, 8456, 9812],\n    [\"Chains\", 1550, 1088, 692, 853],\n    [\"Mirrors\", 225, 600, 923, 544],\n    [\"Spokes\", 6005, 7634, 4589, 8765]];\n\n    // Create the range.\n    let range = sheet.getRange(\"A1:E7\");\n    range.values = values;\n\n    sheet.getUsedRange().format.autofitColumns();\n    sheet.getUsedRange().format.autofitRows();\n\n    sheet.activate();\n\n    // Convert the range to a table.\n    let expensesTable = sheet.tables.add('A1:E7', true);\n    expensesTable.name = \"ExpensesTable\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Text by Prefix in Word Add-in using JavaScript\nDESCRIPTION: This snippet shows how to search for words starting with the prefix 'vid' in the main body of a Word document. It utilizes the `Word.run` batch operation and the `search` method with the `matchPrefix` option set to true. After finding the results, it loads their font properties, logs the number of matches, and then iterates through them to format the text (purple color, yellow highlight, bold).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/search-option-guidance.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to search the document based on a prefix.\n    const searchResults = context.document.body.search('vid', {matchPrefix: true});\n\n    // Queue a command to load the font property values.\n    searchResults.load('font');\n\n    // Synchronize the document state.\n    await context.sync();\n    console.log('Found count: ' + searchResults.items.length);\n\n    // Queue a set of commands to change the font for each found item.\n    for (let i = 0; i < searchResults.items.length; i++) {\n        searchResults.items[i].font.color = 'purple';\n        searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow\n        searchResults.items[i].font.bold = true;\n    }\n\n    // Synchronize the document state.\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Table using PowerPoint JavaScript API (JavaScript)\nDESCRIPTION: This code demonstrates how to insert a new empty table with a specified number of rows and columns into the currently selected slide in a PowerPoint presentation using the PowerPoint JavaScript API. No additional formatting or values are applied, so the resulting table uses PowerPoint's default style. Dependencies: Office Add-in context and PowerPoint JavaScript API. Inputs: number of rows (3), columns (4); Output: an empty table is added.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait PowerPoint.run(async (context) => {\n    const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;\n\n    // Add a table (which is a type of Shape).\n    const shape = shapes.addTable(3, 4);\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Recurrence Details using Office JS\nDESCRIPTION: Shows how to extract specific properties from a retrieved `Recurrence` object (obtained either via `getAsync` or `item.recurrence`). It demonstrates accessing `recurrence.seriesTime` and using its methods (`getStartTime`, `getEndTime`, `getStartDate`, `getEndDate`, `getDuration`), as well as accessing `recurrenceTimeZone`, `recurrenceProperties`, and `recurrenceType` directly.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-and-set-recurrence.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Get series date and time info\nconst seriesTime = recurrence.seriesTime;\nconst startTime = recurrence.seriesTime.getStartTime();\nconst endTime = recurrence.seriesTime.getEndTime();\nconst startDate = recurrence.seriesTime.getStartDate();\nconst endDate = recurrence.seriesTime.getEndDate();\nconst duration = recurrence.seriesTime.getDuration();\n\n// Get series time zone\nconst timeZone = recurrence.recurrenceTimeZone;\n\n// Get recurrence properties\nconst recurrenceProperties = recurrence.recurrenceProperties;\n\n// Get recurrence type\nconst recurrenceType = recurrence.recurrenceType;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Ribbon Structure in Manifest\nDESCRIPTION: This JSON snippet shows the fundamental structure for the 'ribbons' array property within an Office Add-in manifest's extension object. It establishes the containers for defining the contexts (where the ribbon appears) and the tabs that will hold custom controls.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"ribbons\": [\n    {\n        \"contexts\": [\n            // child objects omitted\n        ],\n        \"tabs\": [\n            // child objects omitted\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Integrating Built-in Office Control into Custom Group (Unified Manifest)\nDESCRIPTION: This JSON snippet demonstrates adding a specific built-in Office control (e.g., 'Superscript') to a custom control group within an Office Add-in's Unified Manifest. It utilizes the `builtInControlId` property within a control object inside the `controls` array of a custom group definition, replacing the standard `id` property.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/built-in-button-integration.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"ribbons\": [\n            ...\n            {\n                ...\n                \"tabs\": [\n                    {\n                        ...\n                        \"groups\": [\n                            {\n                                \"id\": \"MyGroup\",\n                                ...\n                                \"controls\": [\n                                    ... // Optionally, other controls in the group\n                                    {\n                                        \"builtInControlId\": \"Superscript\"\n                                    },\n                                    ... // Optionally, other controls in the group\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Suspending API Calculation Until Next Sync in Excel JavaScript API - JavaScript\nDESCRIPTION: Shows how to temporarily suspend automatic calculation in the Excel API, improving add-in performance when editing large ranges. The method 'suspendApiCalculationUntilNextSync()' disables calculations until the next 'context.sync()' is called. This operation requires a valid Office.js context. No parameters are needed for the method; it affects all subsequent Excel API calls prior to the next context.sync(). Output is an internal suspension of calculation, not a return value.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontext.application.suspendApiCalculationUntilNextSync();\n```\n\n----------------------------------------\n\nTITLE: Validating Parent Message Origin in Dialog (JavaScript)\nDESCRIPTION: Illustrates a handler function (`onMessageFromParent`) within the dialog's runtime to process messages received from the parent page. It checks the `arg.origin` property to verify if the message comes from a trusted domain before processing. If the origin is untrusted, it sends a message back to the parent requesting the dialog be closed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onMessageFromParent(arg) {\n    if (arg.origin === \"https://addin.fabrikam.com\") {\n        // Process the message.\n    } else {\n        // Signal the parent page to close the dialog.\n        const messageObject = { messageType: \"untrustedDomain\" };\n        Office.context.ui.messageParent(messageObject);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete toggleProtection Handler with Async Loading and Toggling (JavaScript)\nDESCRIPTION: Provides the final implementation of toggleProtection handler: queues worksheet property loading, syncs, checks protection status, toggles protection, syncs updates, and completes the Office action. Error handling is included to capture exceptions. Dependencies: Office.js and registered handler mapping in manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_43\n\nLANGUAGE: js\nCODE:\n```\nasync function toggleProtection(args) {\\n    try {\\n        await Excel.run(async (context) => {\\n            const sheet = context.workbook.worksheets.getActiveWorksheet();\\n\\n            sheet.load('protection/protected');\\n            await context.sync();\\n        \\n            if (sheet.protection.protected) {\\n                sheet.protection.unprotect();\\n            } else {\\n                sheet.protection.protect();\\n            }\\n\\n            await context.sync();\\n        });\\n    } catch (error) {\\n        // Note: In a production add-in, you\\'d want to notify the user through your add-in\\'s UI.\\n        console.error(error);\\n    }\\n\\n    args.completed();\\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Web Server API in getFileNameList using JavaScript\nDESCRIPTION: This snippet, intended for the `getFileNameList` function, initiates a call to the web server's `/getuserfilenames` REST API using the `callWebServerAPI` helper function. It handles the response, checking for null (indicating an unresolvable auth error), passing the retrieved JSON data to `writeFileNamesToOfficeDocument`, and displaying success or error messages using `showMessage`. It uses a try-catch block for error handling.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    const jsonResponse = await callWebServerAPI('GET', '/getuserfilenames');\n    if (jsonResponse === null) {\n        // Null is returned when a message was displayed to the user\n        // regarding an authentication error that cannot be resolved.\n        return;\n    }\n    await writeFileNamesToOfficeDocument(jsonResponse);\n    showMessage('Your OneDrive filenames are added to the document.');\n} catch (error) {\n    console.log(error.message);\n    showMessage(error.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Basic Dialog - Office.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to open a dialog box in an Office Add-in using the Office.js displayDialogAsync method. The dialog is loaded with the specified HTTPS URL and opens centered in the user's Office application. Dependencies include Office.js and must be called within an Office Add-in host page context. The only required parameter is the URL, which must be HTTPS and in the same domain as the host page. The function executes asynchronously; no dialog customization is applied in this example.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.ui.displayDialogAsync(\"https://www.contoso.com/myDialog.html\");\n```\n\n----------------------------------------\n\nTITLE: Defining Word Task Pane UI with HTML\nDESCRIPTION: This HTML code defines the body structure for the Word add-in's task pane. It includes header and main content divs, informational text, and three buttons (`emerson`, `checkhov`, `proverb`) that trigger JavaScript functions to insert different quotes into the Word document. It also includes a div (`supportedVersion`) to display API support information.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/word-quickstart-vs.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <div id=\"content-header\">\n        <div class=\"padding\">\n            <h1>Welcome</h1>\n        </div>\n    </div>\n    <div id=\"content-main\">\n        <div class=\"padding\">\n            <p>Choose the buttons below to add boilerplate text to the document by using the Word JavaScript API.</p>\n            <br />\n            <h3>Try it out</h3>\n            <button id=\"emerson\">Add quote from Ralph Waldo Emerson</button>\n            <br /><br />\n            <button id=\"checkhov\">Add quote from Anton Chekhov</button>\n            <br /><br />\n            <button id=\"proverb\">Add Chinese proverb</button>\n        </div>\n    </div>\n    <br />\n    <div id=\"supportedVersion\"/>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific File Slice using getSliceAsync (JavaScript)\nDESCRIPTION: Defines the `getSlice` function which retrieves a single slice from the `File` object using `File.getSliceAsync`. It takes the state object (containing the file and current slice counter) as input. On success, it calls `sendSlice` with the retrieved `Slice` object and the state. It handles potential errors by updating the status.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Get a slice from the file and then call sendSlice.\nfunction getSlice(state) {\n    state.file.getSliceAsync(state.counter, function (result) {\n        if (result.status == Office.AsyncResultStatus.Succeeded) {\n            updateStatus(\"Sending piece \" + (state.counter + 1) + \" of \" + state.sliceCount);\n            sendSlice(result.value, state);\n        } else {\n            updateStatus(result.status);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Add-in Host Applications - Office Manifest XML\nDESCRIPTION: This manifest fragment uses the <Hosts> and <Host> elements to specify that the add-in is only installable on Excel (Workbook). Only add-ins with the appropriate type (e.g., Task pane or Content) can use these values. The Name attribute ('Workbook') restricts installation to any release of Excel, including web, Windows, and iPad clients. Dependencies: valid XML manifest compliant with Office Add-in schema. Limitations: cannot limit by platform, only by application type and name.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-office-hosts-and-api-requirements.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Hosts>\\n  <Host Name=\\\"Workbook\\\" />\\n</Hosts>\n```\n\n----------------------------------------\n\nTITLE: Defining Outlook API Feature to Set Selected Text in JavaScript\nDESCRIPTION: Exports an object `myOutlookAddinFeature` containing an async function `addHelloWorldText`. This function utilizes the Outlook-specific API `Office.context.mailbox.item.setSelectedDataAsync` to insert \"Hello World!\" into the currently selected area of the message compose window. It relies on the Office JavaScript library being available in the Outlook add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst myOutlookAddinFeature = {\n\n    addHelloWorldText: async () => {\n        Office.context.mailbox.item.setSelectedDataAsync(\"Hello World!\");\n      }\n}\n\nmodule.exports = myOutlookAddinFeature;\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Office UI Theme Classes in Task Pane Add-in HTML\nDESCRIPTION: This HTML example illustrates how to apply `OfficeThemes.css` UI theme classes, such as `office-officeTheme-primary-fontColor` and `office-officeTheme-primary-bgColor`, to elements in a task pane add-in. This ensures the add-in's appearance dynamically adapts to the Office application's chosen UI theme (e.g., White, Dark Gray). Requires referencing the `OfficeThemes.css` file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/use-document-themes-in-your-powerpoint-add-ins.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<body> \n    <div id=\"content-header\" class=\"office-officeTheme-primary-fontColor office-officeTheme-primary-bgColor\"> \n        <div class=\"padding\">\n            <h1>Welcome</h1>\n        </div> \n    </div> \n    <div id=\"content-main\" class=\"office-officeTheme-secondary-fontColor office-officeTheme-secondary-bgColor\"> \n        <div class=\"padding\"> \n            <p>Add home screen content here.</p> \n            <p>For example:</p> \n            <button id=\"get-data-from-selection\">Get data from selection</button> \n            <p><a target=\"_blank\" class=\"office-a\" href=\"https://go.microsoft.com/fwlink/?LinkId=276812\">Find more samples online...</a></p>\n        </div>\n    </div>\n</body> \n```\n\n----------------------------------------\n\nTITLE: Disabling Add-in Auto-Load on Document Open in JavaScript\nDESCRIPTION: Sets the add-in's startup behavior to none, preventing it from loading automatically when the current document is opened. This call is asynchronous and typically used to revert a previous `Office.StartupBehavior.load` setting for the specific document. It requires the Office JavaScript API and a shared runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/run-code-on-document-open.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n```JavaScript\nOffice.addin.setStartupBehavior(Office.StartupBehavior.none);\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Mobile Support in Add-in Manifest (XML)\nDESCRIPTION: Declares support for mobile form factors within the add-in only (XML) manifest. This requires including the `<MobileFormFactor>` element and defining appropriate mobile controls (e.g., `MobileButton`) and icon sizes within it.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<MobileFormFactor>\n  <!-- Include mobile-specific controls and icon sizes here -->\n</MobileFormFactor>\n```\n\n----------------------------------------\n\nTITLE: Inserting Workbook from Base64 using Excel JavaScript API - Markdown\nDESCRIPTION: This snippet provides a prompt to Copilot for inserting a workbook template, encoded in base64, into the current workbook via the insertWorksheetsFromBase64 method of the Excel JavaScript API. Useful for template automation and Office.js bulk worksheet creation. Copilot will supply code for receiving a base64 string and loading its content.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nInsert a workbook template as base64 in the current workbook using \ninsertWorksheetsFromBase64 Excel JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Stopping the Office Add-in Development Server with npm (command line)\nDESCRIPTION: This command-line snippet shows how to stop the Office Add-in development server and uninstall the Add-in with npm. Use this command in your project directory terminal when you've finished testing. The requirement is a running npm environment, and running this command cleans up and ends the local development session.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_11\n\nLANGUAGE: command line\nCODE:\n```\nnpm stop\\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Ribbon Control at Launch (XML Manifest) - XML\nDESCRIPTION: Shows how to disable a custom ribbon control (`Contoso.MyButton3`) by default upon application launch using the traditional XML manifest. An `<Enabled>` element with the value `false` is added directly under the `<Action>` element for the specific `<Control>`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp ...>\n  ...\n  <VersionOverrides ...>\n    ...\n    <Hosts>\n      <Host ...>\n        ...\n        <DesktopFormFactor>\n          <ExtensionPoint ...>\n            <CustomTab ...>\n              ...\n              <Group ...>\n                ...\n                <Control ... id=\"Contoso.MyButton3\">\n                  ...\n                  <Action ...>\n                  <Enabled>false</Enabled>\n...\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Launching Outlook with DevTools for Cache Clearing - Command Line\nDESCRIPTION: This command launches the new Outlook client on Windows with developer tools enabled, opening Microsoft Edge DevTools for debugging and manual cache clearing. It is a prerequisite to clearing cached data via the DevTools UI. This step requires Outlook and appropriate permissions to run command-line executables. Input is the command, and the expected output is Outlook opening with the associated DevTools window.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/clear-cache.md#_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nolk.exe --devtools\n```\n\n----------------------------------------\n\nTITLE: Set Function Name to be Invoked by Control Button (XML)\nDESCRIPTION: Specifies the JavaScript function to be invoked when the control button is clicked. The function name must match the registered function in your add-in's script. This is placed as a child of the \\u003cAction\\u003e element when using ExecuteFunction.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<FunctionName>toggleProtection</FunctionName>\n```\n\n----------------------------------------\n\nTITLE: Starting the Office Add-in Development Server - Command Line\nDESCRIPTION: Starts the local web server, builds the project, and sideloads the add-in into the chosen Office application. Suitable for development and testing; ensure that HTTPS is used as recommended by Office Add-in development best practices.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/sso-quickstart.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Displaying Trident-Specific Message in HTML/JavaScript\nDESCRIPTION: This HTML file structure provides an example of an Office Add-in page that conditionally displays content based on the detected webview. It includes a hidden `div` with an upgrade message and uses an inline JavaScript snippet to check for the Trident (IE11) webview via `navigator.userAgent`. If Trident is detected, the script hides the primary add-in UI (`id=\"main\"`) and reveals the message (`id=\"tridentmessage\"`). Requires the Office JavaScript API (`office.js`) to be loaded.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/support-ie-11.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\" data-framework=\"typescript\">\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Contoso Task Pane Add-in</title>\n\n    <!-- Office JavaScript API -->\n    <script type=\"text/javascript\" src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\"></script>\n</head>\n\n<body>\n    <div id=\"main\">\n         <!-- \n            The add-in UI is here. \n         -->\n    </div>\n\n    <!-- \n        The script below makes the following div display if the\n        webview is Trident, and hides the regular div. \n    -->\n    <div id=\"tridentmessage\" style=\"display: none; padding: 10;\">\n        This add-in will not run in your version of Office. Please upgrade either to \n        perpetual Office 2021 (or later) or to a Microsoft 365 account.\n    </div>\n    <script>\n        if (navigator.userAgent.indexOf(\"Trident\") !== -1) {\n            var tridentMessage = document.getElementById(\"tridentmessage\");\n            var normalUI = document.getElementById(\"main\");\n            tridentMessage.style.display = \"block\";\n            normalUI.style.display = \"none\";\n        } \n    </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Localizing Add-in Description in Office Manifest XML\nDESCRIPTION: This XML snippet shows how to provide a localized description for an Office Add-in. A default locale (`en-us`) and description are set via `DefaultValue`. The `<Override>` element provides an alternative description in French (`fr-fr`) to be used when the Office client's locale is French.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<DefaultLocale>en-us</DefaultLocale>\n...\n<Description DefaultValue=\n   \"Watch YouTube videos referenced in the emails you receive\n   without leaving your email client.\">\n   <Override Locale=\"fr-fr\" Value=\n   \"Visualisez les vidéos YouTube référencées dans vos courriers \n   électronique directement depuis Outlook.\"/>\n</Description>\n```\n\n----------------------------------------\n\nTITLE: Configuring Desktop and Mobile Ribbon Controls in Manifest (JSON)\nDESCRIPTION: This JSON object defines the ribbon configuration within the `manifest.json` for an Office Add-in, placed inside the `ribbons` array. It specifies requirements for desktop and mobile form factors, sets the context for display to the Appointment Attendee view (`logEventMeetingDetailsAttendee`), and defines controls (buttons) for both desktop (`controls`) and mobile (`customMobileRibbonGroups`). Both buttons are labeled 'Log to Contoso' and trigger the `logCRMEvent` action defined in the runtime configuration, ensuring consistent functionality across platforms.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requirements\": {\n        \"formFactors\": [\n            \"desktop\",\n            \"mobile\"\n        ]\n    },\n    \"contexts\": [\n        \"logEventMeetingDetailsAttendee\"\n    ],\n    \"tabs\": [\n        {\n            \"builtInTabId\": \"TabDefault\",\n            \"groups\": [\n                {\n                    \"id\": \"apptReadGroup\",\n                    \"label\": \"Contoso Add-in\",\n                    \"icons\": [\n                        {\n                            \"size\": 16,\n                            \"url\": \"https://localhost:3000/assets/icon-16.png\"\n                        },\n                        {\n                            \"size\": 32,\n                            \"url\": \"https://localhost:3000/assets/icon-32.png\"\n                        },\n                        {\n                            \"size\": 80,\n                            \"url\": \"https://localhost:3000/assets/icon-80.png\"\n                        }\n                    ],\n                    \"controls\": [\n                        {\n                            \"id\": \"desktopLogToCRM\",\n                            \"type\": \"button\",\n                            \"label\": \"Log to Contoso\",\n                            \"icons\": [\n                                {\n                                    \"size\": 16,\n                                    \"url\": \"https://www.contoso.com/assets/icon-16.png\"\n                                },\n                                {\n                                    \"size\": 32,\n                                    \"url\": \"https://www.contoso.com/assets/icon-32.png\"\n                                },\n                                {\n                                    \"size\": 80,\n                                    \"url\": \"https://www.contoso.com/assets/icon-80.png\"\n                                }\n                            ],\n                            \"supertip\": {\n                                \"title\": \"Log to Contoso CRM\",\n                                \"description\": \"Log notes to Contoso CRM for this appointment.\"\n                            },\n                            \"actionId\": \"logCRMEvent\"\n                        }\n                    ]\n                }\n            ],\n            \"customMobileRibbonGroups\": [\n                {\n                    \"id\": \"mobileApptReadGroup\",\n                    \"label\": \"Contoso Add-in\",\n                    \"controls\": [\n                        {\n                            \"id\": \"mobileLogToCRM\",\n                            \"label\": \"Log to Contoso\",\n                            \"type\": \"mobileButton\",\n                            \"icons\": [\n                                {\n                                    \"scale\": 1,\n                                    \"size\": 25,\n                                    \"url\": \"https://contoso.com/assets/icon-25.png\"\n                                },\n                                {\n                                    \"scale\": 1,\n                                    \"size\": 32,\n                                    \"url\": \"https://contoso.com/assets/icon-32.png\"\n                                },\n                                {\n                                    \"scale\": 1,\n                                    \"size\": 48,\n                                    \"url\": \"https://contoso.com/assets/icon-48.png\"\n                                },                                \n                                {\n                                    \"scale\": 2,\n                                    \"size\": 25,\n                                    \"url\": \"https://contoso.com/assets/icon-25.png\"\n                                },\n                                {\n                                    \"scale\": 2,\n                                    \"size\": 32,\n                                    \"url\": \"https://contoso.com/assets/icon-32.png\"\n                                },\n                                {\n                                    \"scale\": 2,\n                                    \"size\": 48,\n                                    \"url\": \"https://contoso.com/assets/icon-48.png\"\n                                },                                \n                                {\n                                    \"scale\": 3,\n                                    \"size\": 25,\n                                    \"url\": \"https://contoso.com/assets/icon-25.png\"\n                                },\n                                {\n                                    \"scale\": 3,\n                                    \"size\": 32,\n                                    \"url\": \"https://contoso.com/assets/icon-32.png\"\n                                },\n                                {\n                                    \"scale\": 3,\n                                    \"size\": 48,\n                                    \"url\": \"https://contoso.com/assets/icon-48.png\"\n                                }\n                            ],\n                            \"actionId\": \"logCRMEvent\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Data and Handling Errors in Outlook Add-ins using Office JavaScript API\nDESCRIPTION: Defines the `getEventData` function using the Office JavaScript API. It logs the subject of the current appointment item and attempts to asynchronously retrieve the item's body content in HTML format. If successful, it logs a success message and calls an assumed `updateCustomProperties` function. If fetching the body fails, it logs an error and calls the `clearCustomProperties` function as part of error handling. Requires the Office.js library and the `clearCustomProperties` function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nfunction getEventData() {\n  console.log(`Subject: ${Office.context.mailbox.item.subject}`);\n  Office.context.mailbox.item.body.getAsync(\"html\", (result) => {\n    if (result.status === Office.AsyncResultStatus.Succeeded) {\n      console.log(\"Event logged successfully.\");\n      updateCustomProperties();s\n    } else {\n      console.error(\"Failed to get body.\");\n      clearCustomProperties();\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking AppSource Store Enablement - Windows Registry - C#\nDESCRIPTION: This C# snippet defines the IsStoreEnabled function to determine if the AppSource (Office Store) is enabled within the user's Office installation. It inspects specific registry keys for the StoreDisabled flag, returning true when the store is available and false when restricted by administrators. The check is scoped to the Windows Registry, under the Wef\\AutoInstallAddins subkey for the highest detected Office version. Dependencies include Microsoft.Win32 and System. The function outputs a boolean, handles absent registry paths conservatively, and requires appropriate permissions for registry access.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Win32;\nusing System;\n\nnamespace SampleProject\n{\n    internal class IsStoreEnabledSample\n    {\n        /// <summary>\n        /// This function checks if the store is enabled.\n        /// </summary>\n        /// <returns> Returns true if it store is enabled, false if store is disabled.</returns>\n        private bool IsStoreEnabled()\n        {\n            RegistryKey hklm = Registry.CurrentUser;\n            string basePath = @\"Software\\Microsoft\\Office\";\n            RegistryKey baseKey = Registry.CurrentUser.OpenSubKey(basePath);\n            const int supportedBuildMajorNumber = 16;\n\n            if (baseKey != null)\n            {\n                Version maxVersion = new Version(supportedBuildMajorNumber, 0); // Initial value for the maximum supported build version.\n                foreach (string subKeyName in baseKey.GetSubKeyNames())\n                {\n                    if (Version.TryParse(subKeyName, out Version version))\n                    {\n                        if (version > maxVersion)\n                        {\n                            maxVersion = version;\n                        }\n                    }\n                }\n\n                string maxVersionString = maxVersion.ToString();\n\n                // The StoreDisabled value is under this registry path.\n                string antoInstallPath = String.Format(@\"Software\\Microsoft\\Office\\{0}\\Wef\\AutoInstallAddins\", maxVersionString);\n                RegistryKey autoInstallPathKey = Registry.CurrentUser.OpenSubKey(antoInstallPath);\n\n                if (autoInstallPathKey != null)\n                {\n                    object storedisableValue = autoInstallPathKey.GetValue(\"StoreDisabled\");\n\n                    if (storedisableValue != null)\n                    {\n                        int value = (int)storedisableValue;\n                        if (value == 1)\n                        {\n                            // Store is disabled\n                            return false;\n                        }\n                        else\n                        {\n                            // Store is enabled\n                            return true;\n                        }\n                    }\n                    else\n                    {\n                        // No such key exists since the build does not have the value, so the store is enabled.\n                        return true;\n                    }\n                }\n                else\n                {\n                    // The registry path does not exist, so the store is enabled.\n                    return true;\n                }\n            }\n            else\n            {\n                // Office is not installed at all.\n                return false;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Close Request in Parent Page (JavaScript)\nDESCRIPTION: Demonstrates a message handler function (`processMessage`) in the host (parent) page. It parses the message received from the dialog (`arg.message`). If the message type indicates a close request ('dialogClosed'), it calls the `dialog.close()` method to close the dialog window. Assumes the `dialog` object was previously initialized.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfunction processMessage(arg) {\n    const messageFromDialog = JSON.parse(arg.message);\n    if (messageFromDialog.messageType === \"dialogClosed\") {\n       dialog.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event-based Activation in Unified Manifest (JSON)\nDESCRIPTION: Enables event-based activation for Outlook mobile add-ins using the unified manifest for Microsoft 365. This requires defining the `extensions.autoRunEvents` property in the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"extensions.autoRunEvents\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Office.initialize with jQuery (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to integrate the `Office.initialize` event with jQuery's document ready event. The `$(document).ready()` call is placed inside the `Office.initialize` handler function to ensure Office.js is ready before executing jQuery-dependent DOM manipulation code.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/initialize-add-in.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.initialize = function () {\n    // Office is ready.\n    $(document).ready(function () {\n        // The document is ready.\n    });\n  };\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Reply to an Excel Comment Thread using JavaScript\nDESCRIPTION: This snippet shows how to add a reply to an existing comment thread. It first retrieves the first comment in the workbook using `getItemAt(0)` and then calls the `add` method on its `replies` collection, providing the reply text. The reply is attributed to the current user.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Get the first comment added to the workbook.\n    let comment = context.workbook.comments.getItemAt(0);\n    comment.replies.add(\"Thanks for the reminder!\");\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Checking WordApiHiddenDocument Requirement Set Support in Office JavaScript API - JavaScript\nDESCRIPTION: This snippet checks if the \"WordApiHiddenDocument\" requirement set version 1.5 is available, addressing desktop-only APIs in Word that should not be referenced in the add-in manifest. The check ensures that API calls are restricted to compatible environments, safeguarding cross-platform add-in stability. The code depends on the Office JavaScript API and uses the set name (\"WordApiHiddenDocument\") and version (\"1.5\") as input.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/platform-specific-requirement-sets.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (Office.context.requirements.isSetSupported(\"WordApiHiddenDocument\", \"1.5\")) {\n   // Any API exclusive to this WordApiHiddenDocument requirement set.\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Errors in Dynamic Array Outputs - JavaScript\nDESCRIPTION: This JavaScript custom function processes three inputs and returns a two-dimensional array, embedding a #NUM! error in the second row using CustomFunctions.Error. It simulates an operation where the second calculation has failed and returns an error in place of a result. Dependencies: CustomFunctions global. Inputs are numeric, outputs are a 2D array with either numbers or Excel-compatible error objects.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-errors.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/**\n* Returns the #NUM! error as part of a 2-dimensional array.\n* @customfunction\n* @param {number} first First parameter.\n* @param {number} second Second parameter.\n* @param {number} third Third parameter.\n* @returns {number[][]} Three results, as a 2-dimensional array.\n*/\nfunction returnInvalidNumberError(first, second, third) {\n  // Use the `CustomFunctions.Error` object to retrieve an invalid number error.\n  const error = new CustomFunctions.Error(\n    CustomFunctions.ErrorCode.invalidNumber, // Corresponds to the #NUM! error in the Excel UI.\n  );\n\n  // Enter logic that processes the first, second, and third input parameters.\n  // Imagine that the second calculation results in an invalid number error. \n  const firstResult = first;\n  const secondResult =  error;\n  const thirdResult = third;\n\n  // Return the results of the first and third parameter calculations and a #NUM! error in place of the second result. \n  return [[firstResult], [secondResult], [thirdResult]];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Office Add-ins and TypeScript - JavaScript\nDESCRIPTION: Provides a sample 'eslint.config.js' which sets up eslint to use recommended configurations from both @typescript-eslint and office-addins plugins. This enables analysis of TypeScript and Office.js-specific patterns. It requires the presence of the 'office-addin-lint', 'eslint-plugin-office-addins', '@typescript-eslint/parser', and 'typescript-eslint' packages. The configuration enhances lint coverage and ensures correct plugin and parser usage for Office Add-in projects.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/set-up-your-dev-environment.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n const officeAddins = require(\"eslint-plugin-office-addins\");\n const tsParser = require(\"@typescript-eslint/parser\");\n const tsEsLint = require(\"typescript-eslint\");\n \n export default [\n   ...tsEsLint.configs.recommended,\n   ...officeAddins.configs.recommended,\n   {\n     plugins: {\n       \"office-addins\": officeAddins,\n     },\n     languageOptions: {\n       parser: tsParser,\n     },\n   },\n ];\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server on macOS - Command Line\nDESCRIPTION: This command starts the local development server for the Office Add-in project, specifically recommended for Mac users. By running this command, the project's dev server is started, allowing live local testing. The NPM script 'dev-server' must be defined in the project's package.json configuration. No parameters are required. The output is a running local server suitable for add-in testing and sideloading.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/word-quickstart-yo.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Inserting Hyperlink Field at Selection - Office.js - JavaScript\nDESCRIPTION: This code shows how to insert a Hyperlink field before the cursor or current selection in a Word document using the Office.js Word API. It provides the hyperlink URL as a field code argument, chooses to display field codes with a Boolean, and uses the Office.js pattern for context handling and property loading. The snippet checks for successful field creation and logs relevant field details.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/fields-guidance.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Inserts a Hyperlink field before selection.\\nasync function rangeInsertHyperlinkField() {\\n  await Word.run(async (context) => {\\n    let range = context.document.getSelection().getRange();\\n    const field = range.insertField(\\n      Word.InsertLocation.before,\\n      Word.FieldType.hyperlink,\\n      \\\"https://bing.com\\\",\\n      true\\n    );\\n    field.load(\\\"result,code\\\");\\n    await context.sync();\\n\\n    if (field.isNullObject) {\\n      console.warn(\\\"The field wasn't inserted as expected.\\\");\\n    } else {\\n      console.log(\\\"Code of the field: \\\" + field.code);\\n      console.log(\\\"Result of the field: \\\" + JSON.stringify(field.result));\\n    }\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Admin Consent Required on Server Error Response (JavaScript)\nDESCRIPTION: This JavaScript snippet checks for a required admin consent response in a REST API error received from the server. It inspects the 'WWW-Authenticate' header for the action 'consent' and, if found, displays an appropriate message to the user regarding admin consent grants for Azure app registration. Dependencies include an errorResponse object, 'getResponseHeader' method, and 'showMessage' for UI notification. Input is the server response (errorResponse), output is a message to the user; the code assumes errorResponse follows XMLHttpRequest conventions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Check headers to see if admin has not consented.\nconst header = errorResponse.getResponseHeader('WWW-Authenticate');\nif (header !== null && header.includes('proposedAction=\\\"consent\\\"')) {\n    showMessage(\"MSAL ERROR: \" + \"Admin consent required. Be sure admin consent is granted on all scopes in the Azure app registration.\");\n    return;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling window.history APIs for Trident Compatibility\nDESCRIPTION: Provides a JavaScript snippet to be included in the `index.html` page of an Angular Office Add-in to ensure compatibility with older Office clients using the Trident (Internet Explorer 11) webview. Angular relies on `window.history.replaceState` and `window.history.pushState`, which don't work correctly in Trident. Nullifying these functions prevents potential issues like a blank task pane, especially if Office.js loads after Angular.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/add-ins-with-angular2.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">window.history.replaceState=null;window.history.pushState=null;</script>\n```\n\n----------------------------------------\n\nTITLE: Conditional Message Sending from Dialog Based on Authentication - JavaScript\nDESCRIPTION: Sends different structured payloads from a dialog box depending on authentication outcome, distinguishing between successful and failed sign-in using the messageType property. Both success and failure cases serialize an object and pass it to messageParent. Dependencies include getProfile, getError, and Office.js context. The input is the loginSuccess variable; output is a JSON message for the host.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (loginSuccess) {\n    const userProfile = getProfile();\n    const messageObject = { messageType: \"signinSuccess\", profile: userProfile };\n    const jsonMessage = JSON.stringify(messageObject);\n    Office.context.ui.messageParent(jsonMessage);\n} else {\n    const errorDetails = getError();\n    const messageObject = { messageType: \"signinFailure\", error: errorDetails };\n    const jsonMessage = JSON.stringify(messageObject);\n    Office.context.ui.messageParent(jsonMessage);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Word Add-in Feature Module in JavaScript\nDESCRIPTION: This snippet defines a JavaScript module that encapsulates a feature for inserting a blue-colored paragraph at the end of a Word document. It uses the asynchronous Word JavaScript API (Word.run and context.sync) and relies on the global Word object, which is assumed to be available in the consuming environment. The module exports an object with the core feature to facilitate import and testing. Dependencies include the Office.js library and export support via CommonJS.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myWordAddinFeature = {\n\n  insertBlueParagraph: async () => {\n    return Word.run(async (context) => {\n      // Insert a paragraph at the end of the document.\n      const paragraph = context.document.body.insertParagraph(\"Hello World\", Word.InsertLocation.end);\n  \n      // Change the font color to blue.\n      paragraph.font.color = \"blue\";\n  \n      await context.sync();\n    });\n  }\n}\n\nmodule.exports = myWordAddinFeature;\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Dialog Communication Domains via Windows Registry (Properties/.reg)\nDESCRIPTION: Provides a Windows Registry script (`.reg` file content) as a workaround for older add-ins on Office on Windows. This registry setting allows users or administrators to specify trusted domains for dialog communication, enabling add-ins that haven't been updated to use the required `DialogMessageOptions` parameter introduced in mid-2021.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_23\n\nLANGUAGE: properties\nCODE:\n```\nWindows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\WEF\\AllowedDialogCommunicationDomains]\n\"My trusted domain\"=\"https://www.contoso.com\"\n\"Another trusted domain\"=\"https://fabrikam.com\"\n```\n\n----------------------------------------\n\nTITLE: Checking ExchangeMailboxServerVersion in Outlook via Visual Basic Immediate Window - Visual Basic\nDESCRIPTION: These Visual Basic commands are intended for use in the Immediate Window in the Visual Basic Editor within Outlook when macros are enabled. They allow users to display the Exchange Server version for either the primary mailbox or a specific account in a multi-account profile. No additional libraries are required, but Outlook must be configured to allow macros. The main parameter is 'emailAddress' (a string with the user's SMTP address) for the second case. The input is the command entered, and output appears as the version number in the Immediate Window.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/troubleshoot-outlook-add-in-activation.md#_snippet_0\n\nLANGUAGE: vb\nCODE:\n```\n?Session.ExchangeMailboxServerVersion\n```\n\nLANGUAGE: vb\nCODE:\n```\n?Session.Accounts.Item(emailAddress).ExchangeMailboxServerVersion\n```\n\n----------------------------------------\n\nTITLE: Creating Office Add-in Project with Yeoman - Command Line\nDESCRIPTION: This snippet demonstrates how to initialize a new Office Add-in project by executing the 'yo office' command in the terminal. Yeoman and the Office Add-in generator must be installed beforehand, typically via npm. The command triggers an interactive setup that may prompt the user about data collection policies; users should follow the on-screen instructions. Output is a new folder containing the generated add-in project files in the current directory.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/yo-office-command-guidance.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nyo office\n```\n\n----------------------------------------\n\nTITLE: Stopping the Local Development Web Server using Command Line\nDESCRIPTION: This command line instruction runs the `stop` script, usually defined in the project's `package.json`. It halts the local web server that was started previously for testing the Office Add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Placing PowerPoint Add-in Startup Code in Office.onReady\nDESCRIPTION: Provides an example of using the `Office.onReady` handler for startup tasks in a PowerPoint add-in. This code checks if the host is PowerPoint and then registers an event handler for document selection changes using `addHandlerAsync`. This setup ensures the handler is registered automatically on document open if the add-in is configured to do so.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/run-code-on-document-open.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n```JavaScript\n// This is called as soon as the document opens.\n// Put your startup code here.\nOffice.onReady(info => {\n  if (info.host === Office.HostType.PowerPoint) {\n    Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, onChange);\n    console.log(\"A handler has been registered for the onChanged event.\");\n  }\n});\n\n/**\n * Handle the changed event from the PowerPoint document.\n *\n * @param event The event information from PowerPoint\n */\nasync function onChange(event) {\n  console.log(\"Change type of event: \" + event.type);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Equivalent COM and XLL Add-ins in Excel JavaScript Add-in Manifest XML\nDESCRIPTION: This XML snippet shows how to declare both a COM add-in (via ProgId and Type=COM) and an XLL add-in (via FileName and Type=XLL) as equivalent add-ins within the EquivalentAddins section of an Excel JavaScript API add-in manifest. This enables Excel to substitute the custom function implementation with either COM or XLL add-in functions on Windows, improving cross-platform consistency. Use the EquivalentAddins element immediately before the closing VersionOverrides tag in the manifest; each EquivalentAddin specifies either a ProgId and Type for COM or FileName and Type for XLL. Requires no external dependencies beyond conforming manifest structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/make-custom-functions-compatible-with-xll-udf.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides>\\n  ...\\n  <EquivalentAddins>\\n    <EquivalentAddin>\\n      <ProgId>ContosoCOMAddin</ProgId>\\n      <Type>COM</Type>\\n    </EquivalentAddin>\\n\\n    <EquivalentAddin>\\n      <FileName>contosofunctions.xll</FileName>\\n      <Type>XLL</Type>\\n    </EquivalentAddin>\\n  </EquivalentAddins>\\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Processing EWS GetAttachment XML Response in C#\nDESCRIPTION: This method parses the EWS GetAttachment XML response, checks for errors, and systematically processes different types of attachments: file attachments (by decoding and streaming their base64 content) and item attachments (such as message, calendar, contact, and meeting-related entities). It gracefully handles errors and uses LINQ to XML for querying response data. The method depends on System.Xml.Linq and related LINQ APIs, and expects an XElement containing the EWS SOAP envelope as input.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// This method processes the response from the Exchange server.\n// In your application the bulk of the processing occurs here.\nprivate string ProcessXmlResponse(XElement responseEnvelope)\n{\n  // First, check the response for web service errors.\n  var errorCodes = from errorCode in responseEnvelope.Descendants\n                    (\"{http://schemas.microsoft.com/exchange/services/2006/messages}ResponseCode\")\n                    select errorCode;\n  // Return the first error code found.\n  foreach (var errorCode in errorCodes)\n  {\n    if (errorCode.Value != \"NoError\")\n    {\n      return string.Format(\"Could not process result. Error: {0}\", errorCode.Value);\n    }\n  }\n\n  // No errors found, proceed with processing the content.\n  // First, get and process file attachments.\n  var fileAttachments = from fileAttachment in responseEnvelope.Descendants\n                    (\"{http://schemas.microsoft.com/exchange/services/2006/types}FileAttachment\")\n                        select fileAttachment;\n  foreach(var fileAttachment in fileAttachments)\n  {\n    var fileContent = fileAttachment.Element(\"{http://schemas.microsoft.com/exchange/services/2006/types}Content\");\n    var fileData = System.Convert.FromBase64String(fileContent.Value);\n    var s = new MemoryStream(fileData);\n    // Process the file attachment here.\n  }\n\n  // Second, get and process item attachments.\n  var itemAttachments = from itemAttachment in responseEnvelope.Descendants\n                        (\"{http://schemas.microsoft.com/exchange/services/2006/types}ItemAttachment\")\n                        select itemAttachment;\n  foreach(var itemAttachment in itemAttachments)\n  {\n    var message = itemAttachment.Element(\"{http://schemas.microsoft.com/exchange/services/2006/types}Message\");\n    if (message != null)\n    {\n      // Process a message here.\n      break;\n    }\n    var calendarItem = itemAttachment.Element(\"{http://schemas.microsoft.com/exchange/services/2006/types}CalendarItem\");\n    if (calendarItem != null)\n    {\n      // Process calendar item here.\n      break;\n    }\n    var contact = itemAttachment.Element(\"{http://schemas.microsoft.com/exchange/services/2006/types}Contact\");\n    if (contact != null)\n    {\n      // Process contact here.\n      break;\n    }\n    var task = itemAttachment.Element(\"{http://schemas.microsoft.com/exchange/services/2006/types}Tontact\");\n    if (task != null)\n    {\n      // Process task here.\n      break;\n    }\n    var meetingMessage = itemAttachment.Element(\"{http://schemas.microsoft.com/exchange/services/2006/types}MeetingMessage\");\n    if (meetingMessage != null)\n    {\n      // Process meeting message here.\n      break;\n    }\n    var meetingRequest = itemAttachment.Element(\"{http://schemas.microsoft.com/exchange/services/2006/types}MeetingRequest\");\n    if (meetingRequest != null)\n    {\n      // Process meeting request here.\n      break;\n    }\n    var meetingResponse = itemAttachment.Element(\"{http://schemas.microsoft.com/exchange/services/2006/types}MeetingResponse\");\n    if (meetingResponse != null)\n    {\n      // Process meeting response here.\n      break;\n    }\n    var meetingCancellation = itemAttachment.Element(\"{http://schemas.microsoft.com/exchange/services/2006/types}MeetingCancellation\");\n    if (meetingCancellation != null)\n    {\n      // Process meeting cancellation here.\n      break;\n    }\n  }\n\n  return string.Empty;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token in Office Add-in via JavaScript API - Markdown\nDESCRIPTION: This prompt is intended for obtaining an access token in an Office Add-in using the Office JavaScript API, for the purpose of authenticating against external services or APIs. The snippet focuses on secure Office.js authentication techniques. Copilot is expected to generate code for calling authentication APIs and handling tokens.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nGet an access token in an Office Add-in using the Office \nJavaScript API to authenticate the user with external services \nor APIs.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Slide with Specific Master and Layout - PowerPoint JavaScript\nDESCRIPTION: This JavaScript function adds a slide to a PowerPoint deck, specifying both the slide master ID and layout ID via the `AddSlideOptions` parameter. The method ensures the new slide adopts the designated template, provided the IDs are known and valid. Both IDs are strings conforming to specific formats (e.g., '2147483690#2908289500'). Dependencies include Office JS and PowerPoint API, and the function must run in a PowerPoint add-in context. The output is a slide matching the given master and layout IDs added at the end of the presentation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/add-slides.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addSlide() {\n    await PowerPoint.run(async function(context) {\n        context.presentation.slides.add({\n            slideMasterId: \"2147483690#2908289500\",\n            layoutId: \"2147483691#2499880\"\n        });\n    \n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Executing One-Time Development Build Task via npm\nDESCRIPTION: Runs the 'build-dev' script defined in package.json. This task performs a single build of the project configured for a development environment, typically without production optimizations. Requires Node.js, npm, and a configured 'build-dev' script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build-dev\n```\n\n----------------------------------------\n\nTITLE: Representing User Data Structure for SSO in Backend Database (JSON)\nDESCRIPTION: This JSON snippet defines the structure for storing user identity information and refresh tokens in a secure backend database. It includes fields for the user's display name, unique identifiers derived from both the SSO access token (`ssoId`) and the Exchange identity token (`exchangeId`), and long-lived refresh tokens for Microsoft Graph (`graphRefreshToken`) and a custom third-party API (`contosoRefreshToken`). This structure supports the described SSO implementation strategy.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/implement-sso-in-outlook-add-in.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"userDisplayName\": \"...\",\n  \"ssoId\": \"...\",\n  \"exchangeId\": \"...\",\n  \"graphRefreshToken\": \"...\",\n  \"contosoRefreshToken\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the Project with Updated Configuration using npm\nDESCRIPTION: This command runs the build script defined in the project's `package.json` file, typically invoking webpack. It recompiles the project assets, including the newly added dialog files (`popup.html`, `popup.js`) according to the updated webpack configuration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_55\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Untracking Excel Range Objects for Performance in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to improve performance in an Excel add-in by untracking Range proxy objects after they are used. It iterates through cells in a selected range, sets their values, and then explicitly calls `cell.untrack()` to release the corresponding proxy object from memory before the next iteration. This technique is particularly beneficial when processing a large number of cells (thousands) to prevent excessive memory consumption and potentially speed up execution and subsequent UI responsiveness.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/resource-limits-and-performance-optimization.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nExcel.run(async (context) => {\n    const largeRange = context.workbook.getSelectedRange();\n    largeRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n\n    for (let i = 0; i < largeRange.rowCount; i++) {\n        for (let j = 0; j < largeRange.columnCount; j++) {\n            let cell = largeRange.getCell(i, j);\n            cell.values = [[i *j]];\n\n            // Call untrack() to release the range from memory.\n            cell.untrack();\n        }\n    }\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Office Add-in Menu Control in XML Manifest\nDESCRIPTION: This XML snippet defines a menu control (<Control xsi:type=\"Menu\">) for an Office Add-in manifest. It configures a root menu item with a label, tooltip, and icons, containing two submenu items (<Item>). The first submenu item is configured to show a task pane (<Action xsi:type=\"ShowTaskpane\">), while the second executes a JavaScript function (<Action xsi:type=\"ExecuteFunction\">). Resource IDs (e.g., residLabel3, icon1_32x32) are used to reference localized strings and images defined elsewhere in the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Control xsi:type=\"Menu\" id=\"TestMenu2\">\n  <Label resid=\"residLabel3\" />\n  <Supertip>\n    <Title resid=\"residLabel\" />\n    <Description resid=\"residToolTip\" />\n  </Supertip>\n  <Icon>\n    <bt:Image size=\"16\" resid=\"icon1_32x32\" />\n    <bt:Image size=\"32\" resid=\"icon1_32x32\" />\n    <bt:Image size=\"80\" resid=\"icon1_32x32\" />\n  </Icon>\n  <Items>\n    <Item id=\"showGallery2\">\n      <Label resid=\"residLabel3\"/>\n      <Supertip>\n        <Title resid=\"residLabel\" />\n        <Description resid=\"residToolTip\" />\n      </Supertip>\n      <Icon>\n        <bt:Image size=\"16\" resid=\"icon1_32x32\" />\n        <bt:Image size=\"32\" resid=\"icon1_32x32\" />\n        <bt:Image size=\"80\" resid=\"icon1_32x32\" />\n      </Icon>\n      <Action xsi:type=\"ShowTaskpane\">\n        <TaskpaneId>MyTaskPaneID1</TaskpaneId>\n        <SourceLocation resid=\"residUnitConverterUrl\" />\n      </Action>\n    </Item>\n    <Item id=\"showGallery3\">\n      <Label resid=\"residLabel5\"/>\n      <Supertip>\n        <Title resid=\"residLabel\" />\n        <Description resid=\"residToolTip\" />\n      </Supertip>\n      <Icon>\n        <bt:Image size=\"16\" resid=\"icon4_32x32\" />\n        <bt:Image size=\"32\" resid=\"icon4_32x32\" />\n        <bt:Image size=\"80\" resid=\"icon4_32x32\" />\n      </Icon>\n      <Action xsi:type=\"ExecuteFunction\">\n        <FunctionName>getButton</FunctionName>\n      </Action>\n    </Item>\n  </Items>\n</Control>\n```\n\n----------------------------------------\n\nTITLE: Starting Local Server and Sideloading Add-in into PowerPoint using Command Line\nDESCRIPTION: This command line instruction executes the `start` script from the project's `package.json`. It typically starts the local web server (if not already running) and automatically opens the PowerPoint desktop application with the add-in loaded (sideloaded) for testing purposes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding Online Meeting Organizer Context in Unified Manifest (JSON)\nDESCRIPTION: Adds 'onlineMeetingDetailsOrganizer' to the 'extensions.ribbons.contexts' array in the unified manifest (JSON). This is required for add-ins that act as integrated online meeting providers on mobile.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-mobile-support.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"contexts\": [\n    \"meetingDetailsOrganizer\",\n    \"onlineMeetingDetailsOrganizer\"\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing an Office Add-in ExecuteFunction Command in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to implement a function triggered by an Office Add-in command defined with <Action xsi:type=\"ExecuteFunction\">. The `highlightSelection` function uses the Excel JavaScript API (`Excel.run`) to change the fill color of the selected range. It requires the `event.completed()` call to signal successful execution to the Office host. The `Office.actions.associate` call is crucial for mapping the function name ('highlightSelection') to the action ID specified in the manifest's <FunctionName> element.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Initialize the Office Add-in.\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called.\n});\n\n// The command function.\nasync function highlightSelection(event) {\n\n    // Implement your custom code here. The following code is a simple Excel example.\n    try {\n          await Excel.run(async (context) => {\n              const range = context.workbook.getSelectedRange();\n              range.format.fill.color = \"yellow\";\n              await context.sync();\n          });\n      } catch (error) {\n          // Note: In a production add-in, notify the user through your add-in's UI.\n          console.error(error);\n      }\n\n    // Calling event.completed is required. The event.completed call lets the platform know that processing has completed.\n    event.completed();\n}\n\n// This maps the function to the action ID specified in the manifest.\nOffice.actions.associate(\"highlightSelection\", highlightSelection);\n```\n\n----------------------------------------\n\nTITLE: Registering Contextual Tabs using Office.ribbon.requestCreateControls in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to register a custom contextual tab with Office during add-in initialization using `Office.onReady`. It parses a JSON string containing the tab definition into a JavaScript object and passes it to the `Office.ribbon.requestCreateControls` method. This method should only be called once per session.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady(async () => {\n    const contextualTabJSON = ` ... `; // Assign the JSON string such as the one at the end of the preceding section.\n    const contextualTab = JSON.parse(contextualTabJSON);\n    await Office.ribbon.requestCreateControls(contextualTab);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Range Parameter in JavaScript\nDESCRIPTION: This JavaScript custom function `addSingleRange` demonstrates accepting a single range argument from Excel (e.g., `ADD(A2:B3)`). The JSDoc `@param {number[][]} singleRange` specifies that the input `singleRange` will be a two-dimensional array representing the passed cell range. The function iterates through the 2D array to sum all the cell values within that single range.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @customfunction\n * @param {number[][]} singleRange\n */\nfunction addSingleRange(singleRange) {\n  let total = 0;\n  singleRange.forEach(setOfSingleValues => {\n    setOfSingleValues.forEach(value => {\n      total += value;\n    })\n  })\n  return total;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Cell Number Format Using Null in JavaScript\nDESCRIPTION: Updates the number format for only the fourth cell in a specified range to 'm/d/yyyy;@' while leaving the format of the other cells unchanged. This is achieved by providing the new format in the corresponding position within the 2-D array and using `null` for the cells whose formats should not be altered. The preceding line sets initial values for context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-blank-null-values.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nrange.values = [['Eurasia', '29.96', '0.25', '15-Feb' ]];\nrange.numberFormat = [[null, null, null, 'm/d/yyyy;@']];\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Property for Logged Events in Task Pane (JavaScript)\nDESCRIPTION: JavaScript function `updateCustomProperties` for a task pane. It loads the custom properties of the current mailbox item, sets the 'EventLogged' property to `true`, and saves the changes asynchronously. It logs success to the console upon saving. Depends on `Office.context.mailbox.item.loadCustomPropertiesAsync` and `customProperties.saveAsync`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nfunction updateCustomProperties() {\n  Office.context.mailbox.item.loadCustomPropertiesAsync((customPropertiesResult) => {\n    if (customPropertiesResult.status === Office.AsyncResultStatus.Succeeded) {\n      const customProperties = customPropertiesResult.value;\n      customProperties.set(\"EventLogged\", true);\n      customProperties.saveAsync((setSaveAsyncResult) => {\n        if (setSaveAsyncResult.status === Office.AsyncResultStatus.Succeeded) {\n          console.log(\"EventLogged custom property saved successfully.\");\n        }\n      });\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a File and Handling Results - Office.js - JavaScript\nDESCRIPTION: Shows how to asynchronously attach a file from a web server to the current Outlook compose item using addFileAttachmentAsync, with a detailed callback for status and error checking, and retrieval of the attachment ID upon success. Depends on the Office.js API and must be invoked within a compose form context. Parameters are file URI, filename, asyncContext, and a callback function. Outputs include logging status and the generated attachment ID. Attachment IDs have session-scoped validity.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-and-remove-attachments-to-an-item-in-a-compose-form.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Add the specified file attachment to the item\n// being composed.\n// When the attachment finishes uploading, the\n// callback function is invoked and gets the attachment ID.\n// You can optionally pass any object that you would\n// access in the callback function as an argument to\n// the asyncContext parameter.\nOffice.context.mailbox.item.addFileAttachmentAsync(\n    \"https://webserver/picture.png\",\n    \"picture.png\",\n    { asyncContext: { var1: 1, var2: 2 } },\n    (asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.error(asyncResult.error.message);\n            return;\n        }\n\n        // Get the ID of the attached file.\n        const attachmentID = asyncResult.value;\n        console.log(`ID of added attachment: ${attachmentID}`);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Workbook Instance with Excel JavaScript API - JavaScript\nDESCRIPTION: This example shows how to create a new Excel workbook in a separate instance using the Excel.createWorkbook method. This can optionally receive a base64-encoded string of an .xlsx file to open, but here it's invoked with no arguments. Excel must be available and initialized.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nExcel.createWorkbook();\n```\n\n----------------------------------------\n\nTITLE: Filtering Excel PivotTable Items using a Slicer with Office JS API\nDESCRIPTION: This snippet demonstrates how to programmatically filter a PivotTable using an existing slicer named 'Fruit Slicer'. It uses the `selectItems` method of the slicer object, passing an array of item keys ('Lemon', 'Lime', 'Orange'). Only rows in the connected PivotTable corresponding to these selected items will remain visible and included in aggregations. Requires a preceding `Excel.run` context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    let slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    // Anything other than the following three values will be filtered out of the PivotTable for display and aggregation.\n    slicer.selectItems([\"Lemon\", \"Lime\", \"Orange\"]);\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Dialog API with IFrame in Office Add-ins – JavaScript\nDESCRIPTION: Demonstrates how to display a dialog box in an Office Add-in using the Office.js Dialog API with the displayInIFrame flag set to true. This ensures that the dialog appears in an iframe, preventing certain browser security issues that may block pop-up dialogs. Dependencies: Requires Office.js and a valid callback function. Inputs include the dialog start address and callback; output is handled asynchronously via the callback. Ensure your dialog page supports being displayed in an iframe or the operation may fail.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/testing-and-troubleshooting.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.ui.displayDialogAsync(startAddress, {displayInIFrame:true}, callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Geometric Shapes with PowerPoint JavaScript API - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a rectangle on the first slide using the 'addGeometricShape' method from the ShapeCollection API. It sets the position and size using the 'left', 'top', 'height', and 'width' properties, and assigns a custom name to the shape. Requires the PowerPoint JavaScript API, and should be run within an asynchronous context using 'PowerPoint.run'. Returns a Shape object whose placement and sizing can be further adjusted.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/shapes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This sample creates a rectangle positioned 100 points from the top and left sides\n// of the slide and is 150x150 points. The shape is put on the first slide.\nawait PowerPoint.run(async (context) => {\n    const shapes = context.presentation.slides.getItemAt(0).shapes;\n    const rectangle = shapes.addGeometricShape(PowerPoint.GeometricShapeType.rectangle);\n    rectangle.left = 100;\n    rectangle.top = 100;\n    rectangle.height = 150;\n    rectangle.width = 150;\n    rectangle.name = \"Square\";\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific File Slice in an Office Add-in (JavaScript)\nDESCRIPTION: This function retrieves a specific slice of the document file using the `file.getSliceAsync` method, based on the current counter in the `state` object. On successful retrieval, it updates the status and calls the `sendSlice` function, passing the retrieved slice data and the current state. It requires the `state` object (containing the file object and counter) as input and depends on `updateStatus` and `sendSlice`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Get a slice from the file and then call sendSlice.\nfunction getSlice(state) {\n    state.file.getSliceAsync(state.counter, function (result) {\n        if (result.status == Office.AsyncResultStatus.Succeeded) {\n            updateStatus(\"Sending piece \" + (state.counter + 1) + \" of \" + state.sliceCount);\n            sendSlice(result.value, state);\n        } else {\n            updateStatus(result.status);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Common API Feature with office-addin-mock and Jest in JavaScript\nDESCRIPTION: This script tests the `addHelloWorldText` function from `my-common-api-add-in-feature.js`. It uses `office-addin-mock` to create a mock `Office` object, specifically mocking `context.document.setSelectedDataAsync` and providing the `CoercionType.Text` enum value. The mock `Office` object is assigned to `global.Office` for the feature code to access. A Jest test calls the function and asserts that the `data` property on the mocked `document` object was correctly set.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst OfficeAddinMock = require(\"office-addin-mock\");\nconst myCommonAPIAddinFeature = require(\"../my-common-api-add-in-feature\");\n\n// Create the seed mock object.\nconst mockData = {\n    context: {\n      document: {\n        setSelectedDataAsync: function (data, options) {\n          this.data = data;\n          this.options = options;\n        },\n      },\n    },\n    // Mock the Office.CoercionType enum.\n    CoercionType: {\n      Text: {},\n    },\n};\n  \n// Create the final mock object from the seed object.\nconst officeMock = new OfficeAddinMock.OfficeMockObject(mockData);\n\n// Create the Office object that is called in the addHelloWorldText function.\nglobal.Office = officeMock;\n\n/* Code that calls the test framework goes below this line. */\n\n// Jest test\ntest(\"Text of selection in document should be set to 'Hello World'\", async function () {\n    await myCommonAPIAddinFeature.addHelloWorldText();\n    expect(officeMock.context.document.data).toBe(\"Hello World!\");\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining SSO Application Metadata in Office Add-in Manifest (XML)\nDESCRIPTION: This XML snippet shows the <WebApplicationInfo> node required in an Office Add-in manifest to enable single sign-on. It includes the app registration's Application ID (<Id>), Application ID URI (<Resource>), and lists OAuth scopes (<Scopes>) such as Files.Read, profile, and openid. Replace all occurrences of $app-id-guid$ with the actual GUID of your Azure AD registered application. Inputs are identifiers and scope values. Outputs are manifest information consumed by Office for OAuth consent/display. Limitations: syntax must match XML and Office add-ins manifest schema requirements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<WebApplicationInfo>\\n  <Id>$app-id-guid$</Id>\\n  <Resource>api://localhost:3000/$app-id-guid$</Resource>\\n  <Scopes>\\n      <Scope>Files.Read</Scope>\\n      <Scope>profile</Scope>\\n      <Scope>openid</Scope>\\n  </Scopes>\\n</WebApplicationInfo>\n```\n\n----------------------------------------\n\nTITLE: Formatting Excel Table Columns and Applying AutoFit in JavaScript\nDESCRIPTION: This JavaScript snippet, intended to replace `TODO3` within the `createTable` function, formats the 'ExpensesTable'. It retrieves the fourth column (index 3), gets its range, and applies a Euro currency number format. It then gets the entire table's range and applies `autofitColumns()` and `autofitRows()` to adjust column widths and row heights automatically based on content.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpensesTable.columns.getItemAt(3).getRange().numberFormat = [['\\u20AC#,##0.00']];\nexpensesTable.getRange().format.autofitColumns();\nexpensesTable.getRange().format.autofitRows();\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Add-in Setting and Outputting Value - JavaScript\nDESCRIPTION: This code retrieves the value of the setting 'themeColor' from the Office.js Settings property bag and writes the result to a 'message' div on the page. The get method takes a string key and returns its value if it exists, or null otherwise. The write function appends messages to an HTML element for user feedback. Requires Office.js and a suitable HTML element.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwrite('Current value for mySetting: ' + Office.context.document.settings.get('themeColor'));\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Appointment Start Time in Compose Forms with Office.js - JavaScript\nDESCRIPTION: This code sample provides a complete implementation for retrieving the start time of an appointment being composed in Outlook using Office.js. It initializes the mailbox item once Office.js is ready, invokes 'item.start.getAsync' with a callback, and handles success or error outcomes. The result is displayed both in UTC and local time on the page by appending output to an element with id 'message'. Dependencies include Office.js and existence of the UI element. The implementation demonstrates error handling, async patterns, and output formatting.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-time-of-an-appointment.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nlet item;\n\n// Confirms that the Office.js library is loaded.\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Outlook) {\n        item = Office.context.mailbox.item;\n        getStartTime();\n    }\n});\n\n// Gets the start time of the appointment being composed.\nfunction getStartTime() {\n    item.start.getAsync((asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            write(asyncResult.error.message);\n            return;\n        }\n\n        // Display the start time in UTC format on the page.\n        write(`The start time in UTC is: ${asyncResult.value.toString()}`);\n        // Convert the start time to local time and display it on the page.\n        write(`The start time in local time is: ${asyncResult.value.toLocaleString()}`);\n    });\n}\n\n// Writes to a div with id=\"message\" on the page.\nfunction write(message) {\n    document.getElementById(\"message\").innerText += message;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Task Pane Body Structure in HTML\nDESCRIPTION: This HTML snippet replaces the existing `<body>` element in the `taskpane.html` file. It defines the main layout for the Office Add-in task pane using Fabric UI classes, including a header, sections for sideloading messages and displaying results (`display-msg`), and the main application body (`app-body`) which contains placeholders (TODO comments) for buttons.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"ms-font-m ms-welcome ms-Fabric\">\n    <!-- TODO2: Update the header node. -->\n    <header class=\"ms-welcome__header ms-bgColor-neutralLighter\">\n        <img width=\"90\" height=\"90\" src=\"../../assets/logo-filled.png\" alt=\"Contoso\" title=\"Contoso\" />\n        <h1 class=\"ms-font-su\">Welcome</h1>\n    </header>\n    <section id=\"sideload-msg\" class=\"ms-welcome__main\">\n        <h2 class=\"ms-font-xl\">Please <a target=\"_blank\" href=\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\">sideload</a> your add-in to see app body.</h2>\n    </section>\n    <main id=\"app-body\" class=\"ms-welcome__main\" style=\"display: none;\">\n        <div class=\"padding\">\n            <!-- TODO1: Create the insert-image button. -->\n            <!-- TODO3: Create the insert-text button. -->\n            <!-- TODO4: Create the get-slide-metadata button. -->\n            <!-- TODO5: Create the add-slides and go-to-slide buttons. -->\n        </div>\n    </main>\n    <section id=\"display-msg\" class=\"ms-welcome__main\">\n        <div class=\"padding\">\n            <h3>Message</h3>\n            <div id=\"message\"></div>\n        </div>\n    </section>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Removing a Ghost Outlook Add-in's Exchange Registration - PowerShell\nDESCRIPTION: Removes a specific Outlook add-in from Exchange using its unique AppId (GUID). Requires an active Exchange Online management session and administrator privileges. The AppId must be identified using previous listing commands. Inputs: App GUID to be removed. Outputs: Deregisters the add-in from Exchange, but removal may take several hours to propagate. Use with caution as it is irreversible.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/uninstall-add-in.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-App -Identity {{The GUID OF YOUR ADD-IN HERE}}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Add-in Startup Behavior in JavaScript\nDESCRIPTION: Asynchronously retrieves the current startup behavior configured for the add-in within the context of the currently open document using `Office.addin.getStartupBehavior`. This function returns an `Office.StartupBehavior` enum value (either `load` or `none`). It requires the Office JavaScript API and a shared runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/run-code-on-document-open.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n```JavaScript\nlet behavior = await Office.addin.getStartupBehavior();\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Runtime Action in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet configures a 'general' type runtime named 'CommandsRuntime' within the `extensions.runtimes` array of a `manifest.json` file. It specifies the HTML page (`commands.html`) and JavaScript file (`commands.js`) to load, sets a 'short' lifetime, and defines an action `insertDefaultGist` of type `executeFunction`. This action ID will be referenced by UI controls to trigger the corresponding JavaScript function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"CommandsRuntime\",\n    \"type\": \"general\",\n    \"code\": {\n        \"page\": \"https://localhost:3000/commands.html\",\n        \"script\": \"https://localhost:3000/commands.js\"\n    },\n    \"lifetime\": \"short\",\n    \"actions\": [\n        {\n            \"id\": \"insertDefaultGist\",\n            \"type\": \"executeFunction\",\n            \"displayName\": \"action\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Office Installation via Command Line (Batch)\nDESCRIPTION: This command executes the Office Deployment Tool (`setup.exe`) using the specified configuration file (`config.xml`). It initiates the download and installation process for the Office version defined in the XML file. This command must be run from an administrator command prompt in the same directory as `setup.exe` and `config.xml`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/install-office-that-uses-legacy-edge-or-ie.md#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nsetup.exe /configure config.xml\n```\n\n----------------------------------------\n\nTITLE: Pre-authorizing Microsoft Teams Clients\nDESCRIPTION: Specifies the Client IDs used to optionally pre-authorize Microsoft Teams clients (desktop/mobile: `1fec8e78-bce4-4aaf-ab1b-5451cc387264`, web: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346`) in addition to the main Office clients. This allows the add-in running within Teams to also obtain tokens for the API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n1fec8e78-bce4-4aaf-ab1b-5451cc387264\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n5e3ce6c0-2b1f-4285-8d4b-75ee78787346\n```\n\n----------------------------------------\n\nTITLE: Implementing Word Task Pane Logic with Office JavaScript API\nDESCRIPTION: This JavaScript code initializes the Office Add-in, checks if the required Word JavaScript API version ('1.1') is supported, and attaches click event handlers to the buttons defined in `Home.html`. It defines three asynchronous functions (`insertEmersonQuoteAtSelection`, `insertChekhovQuoteAtTheBeginning`, `insertChineseProverbAtTheEnd`) that use `Word.run` to interact with the Word document, inserting predefined quotes at the current selection, the beginning of the document, or the end of the document respectively. Basic error handling is included for the `Word.run` calls.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/word-quickstart-vs.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\n(function () {\n\n    Office.onReady(function() {\n        // Office is ready.\n        $(document).ready(function () {\n            // The document is ready.\n            // Use this to check whether the API is supported in the Word client.\n            if (Office.context.requirements.isSetSupported('WordApi', '1.1')) {\n                // Do something that is only available via the new APIs.\n                $('#emerson').on(\"click\", insertEmersonQuoteAtSelection);\n                $('#checkhov').on(\"click\", insertChekhovQuoteAtTheBeginning);\n                $('#proverb').on(\"click\", insertChineseProverbAtTheEnd);\n                $('#supportedVersion').html('This code is using Word 2016 or later.');\n            } else {\n                // Lets you know that this code will not work with your version of Word.\n                $('#supportedVersion').html('This code requires Word 2016 or later.');\n            }\n        });\n    });\n\n    async function insertEmersonQuoteAtSelection() {\n        await Word.run(async (context) => {\n\n            // Create a proxy object for the document.\n            const thisDocument = context.document;\n\n            // Queue a command to get the current selection.\n            // Create a proxy range object for the selection.\n            const range = thisDocument.getSelection();\n\n            // Queue a command to replace the selected text.\n            range.insertText('\"Hitch your wagon to a star.\" - Ralph Waldo Emerson\\n', Word.InsertLocation.replace);\n\n            // Synchronize the document state by executing the queued commands,\n            // and return a promise to indicate task completion.\n            await context.sync();\n            console.log('Added a quote from Ralph Waldo Emerson.');\n        })\n        .catch(function (error) {\n            console.log('Error: ' + JSON.stringify(error));\n            if (error instanceof OfficeExtension.Error) {\n                console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n            }\n        });\n    }\n\n    async function insertChekhovQuoteAtTheBeginning() {\n        await Word.run(async (context) => {\n\n            // Create a proxy object for the document body.\n            const body = context.document.body;\n\n            // Queue a command to insert text at the start of the document body.\n            body.insertText('\"Knowledge is of no value unless you put it into practice.\" - Anton Chekhov\\n', Word.InsertLocation.start);\n\n            // Synchronize the document state by executing the queued commands,\n            // and return a promise to indicate task completion.\n            await context.sync();\n            console.log('Added a quote from Anton Chekhov.');\n        })\n        .catch(function (error) {\n            console.log('Error: ' + JSON.stringify(error));\n            if (error instanceof OfficeExtension.Error) {\n                console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n            }\n        });\n    }\n\n    async function insertChineseProverbAtTheEnd() {\n        await Word.run(async (context) => {\n\n            // Create a proxy object for the document body.\n            const body = context.document.body;\n\n            // Queue a command to insert text at the end of the document body.\n            body.insertText('\"To know the road ahead, ask those coming back.\" - Chinese proverb\\n', Word.InsertLocation.end);\n\n            // Synchronize the document state by executing the queued commands,\n            // and return a promise to indicate task completion.\n            await context.sync();\n            console.log('Added a quote from a Chinese proverb.');\n        })\n        .catch(function (error) {\n            console.log('Error: ' + JSON.stringify(error));\n            if (error instanceof OfficeExtension.Error) {\n                console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n            }\n        });\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Controls with Actions in XML Manifest\nDESCRIPTION: This XML snippet demonstrates defining `<Control>` elements of type 'Button'. It shows how to configure buttons to trigger actions using the `<Action>` element, specifically `ExecuteFunction` to run JavaScript/TypeScript code (referencing a function name) and `ShowTaskpane` to open a task pane (referencing a source location `resid`). Each control requires a unique ID, label, tooltip (`Supertip`), and icons specified in the `<Resources>` section.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Define a control that calls a JavaScript function. -->\n<Control xsi:type=\"Button\" id=\"Button1Id1\">\n  <Label resid=\"residLabel\" />\n  <Supertip>\n    <Title resid=\"residLabel\" />\n    <Description resid=\"residToolTip\" />\n  </Supertip>\n  <Icon>\n    <bt:Image size=\"16\" resid=\"icon1_32x32\" />\n    <bt:Image size=\"32\" resid=\"icon1_32x32\" />\n    <bt:Image size=\"80\" resid=\"icon1_32x32\" />\n  </Icon>\n  <Action xsi:type=\"ExecuteFunction\">\n    <FunctionName>highlightSelection</FunctionName>\n  </Action>\n</Control>\n\n<!-- Define a control that shows a task pane. -->\n<Control xsi:type=\"Button\" id=\"Button2Id1\">\n  <Label resid=\"residLabel2\" />\n  <Supertip>\n    <Title resid=\"residLabel\" />\n    <Description resid=\"residToolTip\" />\n  </Supertip>\n  <Icon>\n    <bt:Image size=\"16\" resid=\"icon2_32x32\" />\n    <bt:Image size=\"32\" resid=\"icon2_32x32\" />\n    <bt:Image size=\"80\" resid=\"icon2_32x32\" />\n  </Icon>\n  <Action xsi:type=\"ShowTaskpane\">\n    <SourceLocation resid=\"residUnitConverterUrl\" />\n  </Action>\n</Control>\n```\n\n----------------------------------------\n\nTITLE: Pre-authorizing Office Client Applications (All Platforms)\nDESCRIPTION: Specifies the Client ID (`ea5a67f6-b6f3-4338-b240-c655ddc3cc8e`) used to pre-authorize all Microsoft Office application endpoints (desktop, web, Outlook on the web) to access the defined API scope. This step grants Office applications permission to request tokens for the add-in's API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nea5a67f6-b6f3-4338-b240-c655ddc3cc8e\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO for Office Add-in - Command Line\nDESCRIPTION: Runs the configure-sso npm script to set up Single Sign-On for your add-in project. This script uses Azure CLI to register the application in Azure and update the project with necessary SSO settings. Requires Microsoft 365 administrator credentials and the availability of Azure CLI (Homebrew may be used to install CLI on Mac).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/sso-quickstart.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpm run configure-sso\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Office Add-in\nDESCRIPTION: This command line snippet provides the command `npm run dev-server` to start the local web server from the root directory of the Office Add-in project. This server is necessary for hosting the add-in's files during development and allowing OneNote to load and run the add-in for testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/onenote-quickstart.md#_snippet_2\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler to Get Slide Metadata Button in JavaScript\nDESCRIPTION: This JavaScript code, intended to replace `TODO6` in `taskpane.js`, selects the HTML button with the ID `get-slide-metadata` and attaches a click event handler. Upon clicking, it calls `clearMessage` and then executes the `getSlideMetadata` function, initiating the process of retrieving slide information after clearing status messages. Assumes `clearMessage` and `getSlideMetadata` functions are defined.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById(\"get-slide-metadata\").onclick = () => clearMessage(getSlideMetadata);\n```\n\n----------------------------------------\n\nTITLE: Scoped Dialog and Inline Event Handler with Dialog Close - JavaScript\nDESCRIPTION: Displays a dialog with a callback that creates a locally scoped dialog variable and assigns an inline handler that closes the dialog and processes the received message. Useful for tightly scoping dialog resources and reducing global state. Inputs include dialog URL and dimensions; outputs include dialog closure and message processing upon receipt.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.ui.displayDialogAsync(\"https://www.contoso.com/myDialog.html\", { height: 30, width: 20 },\n    (asyncResult) => {\n        const dialog = asyncResult.value;\n        dialog.addEventHandler(Office.EventType.DialogMessageReceived, (arg) => {\n            dialog.close();\n            processMessage(arg);\n        });\n      }\n    );\n```\n\n----------------------------------------\n\nTITLE: Encoding and Sending a File Slice via HTTP POST (JavaScript)\nDESCRIPTION: Defines the `sendSlice` function which takes a `Slice` object and the state object. It encodes the slice data (byte array) into a Base64 string using a placeholder function `myEncodeBase64`. It then creates an `XMLHttpRequest` to send this encoded data via HTTP POST to a specified server endpoint. The request includes the slice index in a header. The `onreadystatechange` handler updates the status, increments the slice counter, and calls `getSlice` for the next slice or `closeFile` if all slices are sent.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfunction sendSlice(slice, state) {\n    var data = slice.data;\n\n    // If the slice contains data, create an HTTP request.\n    if (data) {\n\n        // Encode the slice data, a byte array, as a Base64 string.\n        // NOTE: The implementation of myEncodeBase64(input) function isn't\n        // included with this example. For information about Base64 encoding with\n        // JavaScript, see https://developer.mozilla.org/docs/Web/JavaScript/Base64_encoding_and_decoding.\n        var fileData = myEncodeBase64(data);\n\n        // Create a new HTTP request. You need to send the request\n        // to a webpage that can receive a post.\n        var request = new XMLHttpRequest();\n\n        // Create a handler function to update the status\n        // when the request has been sent.\n        request.onreadystatechange = function () {\n            if (request.readyState == 4) {\n\n                updateStatus(\"Sent \" + slice.size + \" bytes.\");\n                state.counter++;\n\n                if (state.counter < state.sliceCount) {\n                    getSlice(state);\n                } else {\n                    closeFile(state);\n                }\n            }\n        }\n\n        request.open(\"POST\", \"[Your receiving page or service]\");\n        request.setRequestHeader(\"Slice-Number\", slice.index);\n\n        // Send the file as the body of an HTTP POST\n        // request to the web server.\n        request.send(fileData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for `item.recurrence` (Attendee)\nDESCRIPTION: Provides an example structure of the JSON object obtained by accessing the `item.recurrence` property as an attendee in read mode. The structure includes `recurrenceType`, `recurrenceProperties`, `seriesTime` (represented as a placeholder), and `recurrenceTimeZone`, mirroring the output from `getAsync`. Note that `seriesTimeObject` should be accessed using `SeriesTime` methods.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-and-set-recurrence.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"recurrenceType\": \"weekly\",\n    \"recurrenceProperties\": {\n        \"interval\": 1,\n        \"days\": [\"tue\",\"thu\"],\n        \"firstDayOfWeek\": \"sun\"},\n    \"seriesTime\": {seriesTimeObject},\n    \"recurrenceTimeZone\": {\n        \"name\": \"Pacific Standard Time\",\n        \"offset\": -480}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attachments using EWS SOAP in C#\nDESCRIPTION: This method demonstrates a full implementation for retrieving attachments from an Exchange server by composing the EWS GetAttachment SOAP request, sending it via authenticated HTTP POST, handling the response, and processing each attachment individually. It sets up the web request, manages authentication headers, marshals request and response streams, and accumulates results and errors. Dependencies include System.Net, System.Text, System.Xml.Linq, and access to the SOAP request string defined earlier.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nprivate AttachmentSampleServiceResponse GetAttachmentsFromExchangeServerUsingEWS(AttachmentSampleServiceRequest request)\n{\n  var attachmentsProcessedCount = 0;\n  var attachmentNames = new List<string>();\n\n  foreach (var attachment in request.attachments)\n  {\n    // Prepare a web request object.\n    HttpWebRequest webRequest = WebRequest.CreateHttp(request.ewsUrl);\n    webRequest.Headers.Add(\"Authorization\",\n      string.Format(\"Bearer {0}\", request.attachmentToken));\n    webRequest.PreAuthenticate = true;\n    webRequest.AllowAutoRedirect = false;\n    webRequest.Method = \"POST\";\n    webRequest.ContentType = \"text/xml; charset=utf-8\";\n\n    // Construct the SOAP message for the GetAttachment operation.\n    byte[] bodyBytes = Encoding.UTF8.GetBytes(\n      string.Format(GetAttachmentSoapRequest, attachment.id));\n    webRequest.ContentLength = bodyBytes.Length;\n\n    Stream requestStream = webRequest.GetRequestStream();\n    requestStream.Write(bodyBytes, 0, bodyBytes.Length);\n    requestStream.Close();\n\n    // Make the request to the Exchange server and get the response.\n    HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse();\n\n    // If the response is okay, create an XML document from the response\n    // and process the request.\n    if (webResponse.StatusCode == HttpStatusCode.OK)\n    {\n      var responseStream = webResponse.GetResponseStream();\n\n      var responseEnvelope = XElement.Load(responseStream);\n\n      // After creating a memory stream containing the contents of the\n      // attachment, this method writes the XML document to the trace output.\n      // Your service would perform it's processing here.\n      if (responseEnvelope != null)\n      {\n        var processResult = ProcessXmlResponse(responseEnvelope);\n        attachmentNames.Add(string.Format(\"{0} {1}\", attachment.name, processResult));\n\n      }\n\n      // Close the response stream.\n      responseStream.Close();\n      webResponse.Close();\n\n    }\n    // If the response is not OK, return an error message for the\n    // attachment.\n    else\n    {\n      var errorString = string.Format(\"Attachment \\\"{0}\\\" could not be processed. \" +\n        \"Error message: {1}.\", attachment.name, webResponse.StatusDescription);\n      attachmentNames.Add(errorString);\n    }\n    attachmentsProcessedCount++;\n  }\n\n  // Return the names and number of attachments processed for display\n  // in the add-in UI.\n  var response = new AttachmentSampleServiceResponse();\n  response.attachmentNames = attachmentNames.ToArray();\n  response.attachmentsProcessed = attachmentsProcessedCount;\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an ExecuteFunction Action in JSON\nDESCRIPTION: This JSON object defines a single action to be included in the `actions` array. It specifies an `id` for referencing, a `type` of 'ExecuteFunction' (indicating it runs a function), and the `functionName` ('writeData') which corresponds to a function defined in the add-in's FunctionFile.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\": \"executeWriteData\",\\n  \"type\": \"ExecuteFunction\",\\n  \"functionName\": \"writeData\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Table Cell Alignment with Office.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to set horizontal and vertical alignment for specific cells in a PowerPoint table using Office.js. It configures a table to display left/top, centered, and right/bottom aligned text using the TableCellProperties and enumerations like ParagraphHorizontalAlignment. Dependencies include the PowerPoint JavaScript API and a helper function insertTableOnCurrentSlide; the table's alignment is set via options.specificCellProperties for targeted customization.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst rowCount = 3;\nconst columnCount = 3;\n// Compact syntax to create a 2D array filled with empty and distinct objects.\nconst specificCellProperties = Array(rowCount).fill(\"\").map(_ => Array(columnCount).fill(\"\").map(_ => ({}) ));\nconst options: PowerPoint.TableAddOptions = {\n    values: [\n        [\"Left aligned, top\", \"\\n\\n\", \"\"],\n        [\"Centered\", \"\\n\\n\", \"\"],\n        [\"Right aligned, bottom\", \"\\n\\n\", \"\"]\n    ],\n    uniformCellProperties: {\n        fill: { color: \"lightblue\" },\n        borders: {\n            bottom: {\n                color: \"black\",\n                weight: 3\n            },\n            left: {\n                color: \"black\",\n                weight: 3\n            },\n            right: {\n                color: \"black\",\n                weight: 3\n            },\n            top: {\n                color: \"black\",\n                weight: 3\n            }\n        }\n    },\n    specificCellProperties // Array values are empty objects at this point.\n};\noptions.specificCellProperties[0][0] = {\n    horizontalAlignment: PowerPoint.ParagraphHorizontalAlignment.left,\n    verticalAlignment: 0 //PowerPoint.TextVerticalAlignment.top\n};\noptions.specificCellProperties[1][0] = {\n    horizontalAlignment: PowerPoint.ParagraphHorizontalAlignment.center,\n    verticalAlignment: 1 //PowerPoint.TextVerticalAlignment.middle\n};\noptions.specificCellProperties[2][0] = {\n    horizontalAlignment: PowerPoint.ParagraphHorizontalAlignment.right,\n    verticalAlignment: 2 //PowerPoint.TextVerticalAlignment.bottom\n};\nawait insertTableOnCurrentSlide(3, 3, options);\n```\n\n----------------------------------------\n\nTITLE: Processing Dialog Events and Errors in JavaScript\nDESCRIPTION: This JavaScript function `processDialogEvent` serves as an event handler for the `DialogEventReceived` event. It takes an argument (`arg`) containing event details. A switch statement checks the `arg.error` code to identify specific dialog errors (12002: Cannot load page, 12003: HTTP protocol used, 12006: Dialog closed by user or policy) and calls a `showNotification` function (implementation not shown) with a corresponding message. A default case handles unknown errors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-handle-errors-events.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction processDialogEvent(arg) {\n    switch (arg.error) {\n        case 12002:\n            showNotification(\"The dialog box has been directed to a page that it can't find or load, or the URL syntax is invalid.\");\n            break;\n        case 12003:\n            showNotification(\"The dialog box has been directed to a URL with the HTTP protocol. HTTPS is required.\");            break;\n        case 12006:\n            showNotification(\"Dialog closed.\");\n            break;\n        default:\n            showNotification(\"Unknown error in dialog box.\");\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning OWA Mailbox Policy to a Specific Group (Classic Outlook Web)\nDESCRIPTION: Identifies members of the 'Finance' group, filters for user mailboxes, and assigns the specific OWA mailbox policy (`FinanceOWAPolicy`) to them. This enables the on-send feature for this group in classic Outlook on the web. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n$targetUsers = Get-Group 'Finance'|select -ExpandProperty members\n$targetUsers | Get-User -Filter {RecipientTypeDetails -eq 'UserMailbox'}|Set-CASMailbox -OwaMailboxPolicy FinanceOWAPolicy\n```\n\n----------------------------------------\n\nTITLE: Creating the Settings Dialog UI (HTML)\nDESCRIPTION: This HTML markup defines the structure for a settings dialog (`dialog.html`) within an Office Add-in. It includes references to the Office JavaScript API, Fluent UI CSS, and custom CSS/JavaScript files (dialog.css, jquery.js, gist-api.js, dialog.js). The UI contains elements for displaying warnings, inputting a GitHub username, showing errors, listing gists (to be populated dynamically), and a 'Done' button, styled using Fluent UI classes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n  <title>Settings</title>\n\n  <!-- Office JavaScript API -->\n  <script type=\"text/javascript\" src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\"></script>\n\n<!-- For more information on Fluent UI, visit https://developer.microsoft.com/fluentui. -->\n  <link rel=\"stylesheet\" href=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.0.0/css/fabric.min.css\"/>\n\n  <!-- Template styles -->\n  <link href=\"dialog.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n\n<body class=\"ms-font-l\">\n  <main>\n    <section class=\"ms-font-m ms-fontColor-neutralPrimary\">\n      <div class=\"not-configured-warning ms-MessageBar ms-MessageBar--warning\">\n        <div class=\"ms-MessageBar-content\">\n          <div class=\"ms-MessageBar-icon\">\n            <i class=\"ms-Icon ms-Icon--Info\"></i>\n          </div>\n          <div class=\"ms-MessageBar-text\">\n            Oops! It looks like you haven't configured <strong>Git the gist</strong> yet.\n            <br/>\n            Please configure your GitHub username and select a default gist, then try that action again!\n          </div>\n        </div>\n      </div>\n      <div class=\"ms-font-xxl\">Settings</div>\n      <div class=\"ms-Grid\">\n        <div class=\"ms-Grid-row\">\n          <div class=\"ms-TextField\">\n            <label class=\"ms-Label\">GitHub Username</label>\n            <input class=\"ms-TextField-field\" id=\"github-user\" type=\"text\" value=\"\" placeholder=\"Please enter your GitHub username\">\n          </div>\n        </div>\n        <div class=\"error-display ms-Grid-row\">\n          <div class=\"ms-font-l ms-fontWeight-semibold\">An error occurred:</div>\n          <pre><code id=\"error-text\"></code></pre>\n        </div>\n        <div class=\"gist-list-container ms-Grid-row\">\n          <div class=\"list-title ms-font-xl ms-fontWeight-regular\">Choose Default Gist</div>\n          <form>\n            <div id=\"gist-list\">\n            </div>\n          </form>\n        </div>\n      </div>\n      <div class=\"ms-Dialog-actions\">\n        <div class=\"ms-Dialog-actionsRight\">\n          <button class=\"ms-Dialog-action ms-Button ms-Button--primary\" id=\"settings-done\" disabled>\n            <span class=\"ms-Button-label\">Done</span>\n          </button>\n        </div>\n      </div>\n    </section>\n  </main>\n  <script type=\"text/javascript\" src=\"../../node_modules/jquery/dist/jquery.js\"></script>\n  <script type=\"text/javascript\" src=\"../helpers/gist-api.js\"></script>\n  <script type=\"text/javascript\" src=\"dialog.js\"></script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating the Type of an Existing Trendline in Excel using JavaScript\nDESCRIPTION: Retrieves the first trendline associated with the first data series of the first chart on the 'Sample' worksheet and changes its type to 'Linear'. Requires a pre-existing trendline on the specified series.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let chart = sheet.charts.getItemAt(0);\n    let seriesCollection = chart.series;\n    let series = seriesCollection.getItemAt(0);\n    series.trendlines.getItem(0).type = \"Linear\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Local Branch from Upstream Main - Bash\nDESCRIPTION: This Bash command creates a new local branch based on the latest 'main' branch from the 'upstream' Office-js documentation repository. The 'git pull' command is used with syntax that pulls 'main' from 'upstream' and creates '<new branch name>' locally. This ensures that your new branch is up-to-date with the central project's main development branch before making changes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main:<new branch name>\n```\n\n----------------------------------------\n\nTITLE: Initializing Office Add-in and Handling UI Events (JavaScript)\nDESCRIPTION: Initializes the Office Add-in using `Office.initialize`. It waits for the DOM to be ready using jQuery, then attaches a click event handler to the element with ID 'submit', which calls the `sendFile` function. It also includes a helper function `updateStatus` to append messages to an element with ID 'status'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n// The initialize or onReady function is required for all add-ins.\nOffice.initialize = function (reason) {\n\n    // Checks for the DOM to load using the jQuery ready method.\n    $(document).ready(function () {\n\n        // Run sendFile when Submit is clicked.\n        $('#submit').on(\"click\", function () {\n            sendFile();\n        });\n\n        // Update status.\n        updateStatus(\"Ready to send file.\");\n    });\n}\n\n// Create a function for writing to the status div.\nfunction updateStatus(message) {\n    var statusInfo = $('#status');\n    statusInfo[0].innerHTML += message + \"<br/>\";\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Date and Time in UTC Using JavaScript Date Object - JavaScript\nDESCRIPTION: This snippet creates a JavaScript Date object using the client computer's local time zone and demonstrates converting the local date to a UTC-formatted string using the toUTCString() method. It writes the resulting UTC string to the document using document.write(). The only prerequisite is a browser context that supports JavaScript, and no external dependencies are required. Key parameters include the Date object (representing the current time on the client) and the output string (UTC-formatted date). This approach is limited to converting between the client-local and UTC time zones, and will not convert to arbitrary time zones.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/tips-for-handling-date-values-in-outlook-add-ins.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create and get the current date represented \n// in the client computer time zone.\nconst myLocalDate = new Date (); \n\n// Convert the Date value in the client computer time zone\n// to a date string in UTC, and display the string.\ndocument.write (\"The current UTC time is \" + \n    myLocalDate.toUTCString());\n```\n\n----------------------------------------\n\nTITLE: Starting and Sideloading Add-in in PowerPoint on the Web (Command Line)\nDESCRIPTION: This command uses npm to start the local web server and sideloads the add-in into PowerPoint on the web. Requires replacing '{url}' with the actual URL of a PowerPoint document hosted on OneDrive or SharePoint.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/powerpoint-quickstart-yo.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\nnpm start -- --web {url}\n```\n\n----------------------------------------\n\nTITLE: Loading Properties on Visio Proxy Objects with load() Method (JavaScript)\nDESCRIPTION: Illustrates the syntax for the load() API method, which schedules the loading of specified properties or relationships on a proxy Office object upon synchronization. This allows batched fetching of properties to minimize round-trips. The snippet is generic and provides alternatives: passing a string, array, or load options object. Requires use within a function using a RequestContext and Office JS objects.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/reference/overview/visio-javascript-reference-overview.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nobject.load(string: properties); //or object.load(array: properties); //or object.load({loadOption});\n```\n\n----------------------------------------\n\nTITLE: Sorting Data in an Excel Table using Office JS\nDESCRIPTION: This snippet demonstrates how to sort the data within an Excel table named 'ExpensesTable'. It accesses the table's data body range and applies a sort condition to the fourth column (index 3) in descending order. The `sort.apply` method is used with an array of sort fields. The `context.sync()` call executes the queued sort command in Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    // Queue a command to sort data by the fourth column of the table (descending).\n    let sortRange = expensesTable.getDataBodyRange();\n    sortRange.sort.apply([\n        {\n            key: 3,\n            ascending: false,\n        },\n    ]);\n\n    // Sync to run the queued command in Excel.\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Lint Script to Package.json for Office Add-ins - JSON\nDESCRIPTION: Demonstrates how to add a script entry 'lint' in a project's package.json to invoke the Office JavaScript linter. This enables developers to use 'npm run lint' to check code for linting errors. Requires 'office-addin-lint' as a dependency and npm-based project structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/set-up-your-dev-environment.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"lint\": \"office-addin-lint check\",\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attachments using EWS Managed API in C#\nDESCRIPTION: This C# method, `GetAtttachmentsFromExchangeServerUsingEWSManagedApi`, demonstrates how a remote service can retrieve attachments from an Exchange server using the EWS Managed API. It takes the deserialized `AttachmentSampleServiceRequest` as input. The method initializes an `ExchangeService` object, authenticates using the provided attachment token (via `OAuthCredentials`), sets the EWS URL, extracts attachment IDs from the request, and calls `service.GetAttachments` to fetch the attachments. It processes both `FileAttachment` and `ItemAttachment` types, potentially reading their content into a stream, and returns a response object containing the names and count of processed attachments. Requires the Microsoft.Exchange.WebServices NuGet package.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nprivate AttachmentSampleServiceResponse GetAtttachmentsFromExchangeServerUsingEWSManagedApi(AttachmentSampleServiceRequest request)\n{\n  var attachmentsProcessedCount = 0;\n  var attachmentNames = new List<string>();\n\n  // Create an ExchangeService object, set the credentials and the EWS URL.\n  ExchangeService service = new ExchangeService();\n  service.Credentials = new OAuthCredentials(request.attachmentToken);\n  service.Url = new Uri(request.ewsUrl);\n\n  var attachmentIds = new List<string>();\n\n  foreach (AttachmentDetails attachment in request.attachments)\n  {\n    attachmentIds.Add(attachment.id);\n  }\n\n  // Call the GetAttachments method to retrieve the attachments on the message.\n  // This method results in a GetAttachments EWS SOAP request and response\n  // from the Exchange server.\n  var getAttachmentsResponse =\n    service.GetAttachments(attachmentIds.ToArray(),\n                            null,\n                            new PropertySet(BasePropertySet.FirstClassProperties,\n                                            ItemSchema.MimeContent));\n\n  if (getAttachmentsResponse.OverallResult == ServiceResult.Success)\n  {\n    foreach (var attachmentResponse in getAttachmentsResponse)\n    {\n      attachmentNames.Add(attachmentResponse.Attachment.Name);\n\n      // Write the content of each attachment to a stream.\n      if (attachmentResponse.Attachment is FileAttachment)\n      {\n        FileAttachment fileAttachment = attachmentResponse.Attachment as FileAttachment;\n        Stream s = new MemoryStream(fileAttachment.Content);\n        // Process the contents of the attachment here.\n      }\n\n      if (attachmentResponse.Attachment is ItemAttachment)\n      {\n        ItemAttachment itemAttachment = attachmentResponse.Attachment as ItemAttachment;\n        Stream s = new MemoryStream(itemAttachment.Item.MimeContent.Content);\n        // Process the contents of the attachment here.\n      }\n\n      attachmentsProcessedCount++;\n    }\n  }\n\n  // Return the names and number of attachments processed for display\n  // in the add-in UI.\n  var response = new AttachmentSampleServiceResponse();\n  response.attachmentNames = attachmentNames.ToArray();\n  response.attachmentsProcessed = attachmentsProcessedCount;\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying npm Installation (Shell)\nDESCRIPTION: Executes the `npm` command with the `-v` flag in a terminal to display the installed version of the Node Package Manager (npm). This command verifies that npm, which is typically bundled with Node.js, is correctly installed and available in the system's PATH.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/dev-kit-prerequisites.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with SSO/Fallback in getAccessToken using JavaScript\nDESCRIPTION: This snippet, for the `getAccessToken` function, implements the logic to retrieve an access token. It checks the `authSSO` boolean flag. If true, it attempts to get the token using `Office.auth.getAccessToken` with SSO options, handling errors with the `handleSSOErrors` function. If `authSSO` is false or if SSO fails and `handleSSOErrors` triggers fallback, it calls `getAccessTokenMSAL` to get the token via MSAL. It throws an error if both SSO and MSAL fallback fail.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif (authSSO) {\n    try {\n        // Get the access token from Office host using SSO.\n        // Note that Office.auth.getAccessToken modifies the options parameter. Create a copy of the object\n        // to avoid modifying the original object.\n        const options = JSON.parse(JSON.stringify(ssoOptions));\n        const token = await Office.auth.getAccessToken(options);\n        return token;\n    } catch (error) {\n        console.log(error.message);\n        return handleSSOErrors(error);\n    }\n} else {\n    // Get access token through MSAL fallback.\n    try {\n        const accessToken = await getAccessTokenMSAL();\n        return accessToken;\n    } catch (error) {\n        console.log(error);\n        throw new Error(\n            'Cannot get access token. Both SSO and fallback auth failed. ' +\n                error\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Deleted Event Handlers on Content Controls with Tracking in Office.js (TypeScript)\nDESCRIPTION: Registers the onDeleted event handler for each content control in the document and calls track() on each to enable event handling. Uses Office.js with TypeScript, leveraging Word.ContentControlCollection and iterating over contentControls.items. Dependencies include Office.js, a Word.add-in context, and the contentControlDeleted handler. Inputs are contentControls and their items; outputs are event handler registration and logging. Constraints include requiring content controls to be present in the document; otherwise, a log message is shown.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/word-add-ins-events.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet eventContexts = [];\n\nawait Word.run(async (context) => {\n  const contentControls: Word.ContentControlCollection = context.document.contentControls;\n  contentControls.load(\"items\");\n  await context.sync();\n\n  // Register the onDeleted event handler on each content control.\n  if (contentControls.items.length === 0) {\n    console.log(\"There aren't any content controls in this document so can't register event handlers.\");\n  } else {\n    for (let i = 0; i < contentControls.items.length; i++) {\n      eventContexts[i] = contentControls.items[i].onDeleted.add(contentControlDeleted);\n\n      // Call track() on each content control.\n      contentControls.items[i].track();\n    }\n\n    await context.sync();\n\n    console.log(\"Added event handlers for when content controls are deleted.\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Label for Displaying User Name (HTML)\nDESCRIPTION: This snippet appends a label element in the task pane's HTML to display the user's name after it's received from the dialog. It requires the ID 'user-name' to be referenced by JavaScript for DOM updates. The element serves as a placeholder for displaying the message sent from the dialog.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_57\n\nLANGUAGE: html\nCODE:\n```\n<label id=\\\"user-name\\\"></label><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Project Server URL and Project GUID using Office JS API in JavaScript\nDESCRIPTION: Contains functions to fetch essential context information using the Office JavaScript API. The `setOdataUrl` function asynchronously retrieves the Project Server URL using `Office.context.document.getProjectFieldAsync` with `Office.ProjectProjectFields.ProjectServerUrl`. On success, it constructs the OData URL, enables the '#compareProjects' button using jQuery, calls `getProjectGuid` and `getDocumentUrl`, and displays the OData endpoint URL. It includes error handling and commented-out code for local debugging scenarios. `getProjectGuid` fetches the active project's GUID using `Office.ProjectProjectFields.GUID`, and `getDocumentUrl` retrieves the current document's URL.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfunction setOdataUrl() {\n    Office.context.document.getProjectFieldAsync(\n        Office.ProjectProjectFields.ProjectServerUrl,\n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Succeeded) {\n                _pwa = String(asyncResult.value.fieldValue);\n\n                // If you debug with Visual Studio on a local Project Server computer, \n                // uncomment the following lines to use the localhost URL.\n                //let localhost = location.host.split(\":\", 1);\n                //let pwaStartPosition = _pwa.lastIndexOf(\"/\");\n                //let pwaLength = _pwa.length - pwaStartPosition;\n                //let pwaName = _pwa.substr(pwaStartPosition, pwaLength);\n                //_pwa = location.protocol + \"//\" + localhost + pwaName;\n\n                if (_pwa.substring(0, 4) == \"http\") {\n                    _odataUrl = _pwa + PROJDATA;\n                    $(\"#compareProjects\").removeAttr(\"disabled\");\n                    getProjectGuid();\n                }\n                else {\n                    _odataUrl = \"No connection!\";\n                    throwError(_odataUrl, \"You are not connected to Project Web App.\");\n                }\n                getDocumentUrl();\n                $(\"#projectDataEndPoint\").text(_odataUrl);\n            }\n            else {\n                throwError(asyncResult.error.name, asyncResult.error.message);\n            }\n        }\n    );\n}\n\n// Get the GUID of the active project.\nfunction getProjectGuid() {\n    Office.context.document.getProjectFieldAsync(\n        Office.ProjectProjectFields.GUID,\n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Succeeded) {\n                _projectUid = asyncResult.value.fieldValue;\n            }\n            else {\n                throwError(asyncResult.error.name, asyncResult.error.message);\n            }\n        }\n    );\n}\n\n// Get the path of the project in Project web app, which is in the form <>\\ProjectName .\nfunction getDocumentUrl() {\n    _docUrl = \"Document path:\\r\\n\" + Office.context.document.url;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Localhost Application ID URI\nDESCRIPTION: Defines the Application ID URI format specifically for local development environments using localhost. Replace `<port>` with the port number your local server is running on and `<app-id>` with the application's client ID.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_5\n\nLANGUAGE: uri\nCODE:\n```\napi://localhost:<port>/<app-id>\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Inspector for Outlook Add-ins on Mac (Terminal)\nDESCRIPTION: Executes a terminal command using `defaults write` to set the `OfficeWebAddinDeveloperExtras` boolean preference to `true` for Microsoft Outlook on macOS. This enables the 'Inspect Element' context menu option, allowing developers to debug Outlook add-ins (including event-based and spam-reporting add-ins) using Safari Web Inspector. This requires macOS High Sierra and Office version 16.9.1 (Build 18012504) or later, installed from Office.com, not the Mac App Store.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-office-add-ins-on-ipad-and-mac.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndefaults write com.microsoft.Outlook OfficeWebAddinDeveloperExtras -bool true\n```\n\n----------------------------------------\n\nTITLE: Populating Word Content Binding Using Office.js in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to populate a binding in a Word document add-in using Office.js. It loads OOXML content from a given file using a synchronous XMLHttpRequest, then writes the content into a binding identified by ID ('myBinding'), replacing any existing content in that binding. The only dependency is Office.js, and the main parameter is the filename pointing to the OOXML file. Expected input is the filename (string), and the output is the replacement of the binding's content. The code should not be used in environments where synchronous XMLHttpRequest is not supported or discouraged.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction populateBinding(filename) {\n  const myOOXMLRequest = new XMLHttpRequest();\n  let myXML;\n  myOOXMLRequest.open('GET', filename, false);\n  myOOXMLRequest.send();\n  if (myOOXMLRequest.status === 200) {\n      myXML = myOOXMLRequest.responseText;\n  }\n  Office.select(\"bindings#myBinding\").setDataAsync(myXML, { coercionType: 'ooxml' });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Location using enhancedLocation.addAsync in Office JS\nDESCRIPTION: This JavaScript snippet demonstrates how to add a location to an Outlook appointment in compose mode using the `item.enhancedLocation.addAsync` method. It defines a location object with an ID 'Contoso' and type `Office.MailboxEnums.LocationType.Custom` and calls `addAsync` within the `Office.initialize` and jQuery `$(document).ready` functions. Requires the Office JavaScript API and jQuery.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-location-of-an-appointment.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\nlet item;\nconst locations = [\n    {\n        \"id\": \"Contoso\",\n        \"type\": Office.MailboxEnums.LocationType.Custom\n    }\n];\n\nOffice.initialize = function () {\n    item = Office.context.mailbox.item;\n    // Check for the DOM to load using the jQuery ready method.\n    $(document).ready(function () {\n        // After the DOM is loaded, app-specific code can run.\n        // Add to the location of the item being composed.\n        item.enhancedLocation.addAsync(locations);\n    });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Watch Build Task via npm\nDESCRIPTION: Runs the 'watch' script defined in package.json. This build task is used during development to continuously monitor source files and trigger an automatic rebuild whenever a file is saved, facilitating a faster development cycle. Requires Node.js, npm, and a configured 'watch' script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Searching Text Using Wildcards in Word Add-in using JavaScript\nDESCRIPTION: This snippet demonstrates searching for text patterns using wildcards in the document body. Specifically, it searches for strings starting with 'to', followed by any number of characters ('*'), and ending with 'n', by using the wildcard expression 'to*n' and setting the `matchWildcards` option to true in the `search` method. It uses `Word.run` for batch execution, loads the font properties of the results, logs the count, and then formats each found item (purple color, pink highlight, bold).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/search-option-guidance.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to search the document with a wildcard\n    // for any string of characters that starts with 'to' and ends with 'n'.\n    const searchResults = context.document.body.search('to*n', {matchWildcards: true});\n\n    // Queue a command to load the font property values.\n    searchResults.load('font');\n\n    // Synchronize the document state.\n    await context.sync();\n    console.log('Found count: ' + searchResults.items.length);\n\n    // Queue a set of commands to change the font for each found item.\n    for (let i = 0; i < searchResults.items.length; i++) {\n        searchResults.items[i].font.color = 'purple';\n        searchResults.items[i].font.highlightColor = 'pink';\n        searchResults.items[i].font.bold = true;\n    }\n\n    // Synchronize the document state.\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting the Title of an Excel Chart using JavaScript\nDESCRIPTION: Retrieves the first chart on the 'Sample' worksheet and updates its title text property to 'Sales Data by Year'. Requires an existing chart on the specified worksheet.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let chart = sheet.charts.getItemAt(0);\n    chart.title.text = \"Sales Data by Year\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Passing a Named Options Object to setSelectedDataAsync in JavaScript\nDESCRIPTION: Shows how to call the `document.setSelectedDataAsync` method using a pre-defined named object (`options`) that contains the optional parameters (`coercionType` and `asyncContext`). The callback function is provided as the last argument to handle the `AsyncResult`. Requires a `write` function and a corresponding HTML element (e.g., `<div id='message'>`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\n   coercionType: \"html\",\n   asyncContext: 42\n};\n\ndocument.setSelectedDataAsync(\n    \"<html><body>hello world</body></html>\",\n    options,\n    function(asyncResult) {\n        write(asyncResult.status + \" \" + asyncResult.asyncContext);\n    }\n)\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n\n----------------------------------------\n\nTITLE: Initiating File Retrieval and Slicing in an Office Add-in (JavaScript)\nDESCRIPTION: This function initiates the process of getting the entire document content using `Office.context.document.getFileAsync`. It requests the file in 'compressed' format and specifies a slice size of 100,000 bytes (100 KB). On success, it initializes a state object containing the file reference, a slice counter, and the total slice count, then calls `getSlice` to start processing the first slice. It depends on `updateStatus` for user feedback and `getSlice` to continue the process.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Get all of the content from a PowerPoint or Word document in 100-KB chunks of text.\nfunction sendFile() {\n    Office.context.document.getFileAsync(\"compressed\",\n        { sliceSize: 100000 },\n        function (result) {\n\n            if (result.status === Office.AsyncResultStatus.Succeeded) {\n\n                // Get the File object from the result.\n                var myFile = result.value;\n                var state = {\n                    file: myFile,\n                    counter: 0,\n                    sliceCount: myFile.sliceCount\n                };\n\n                updateStatus(\"Getting file of \" + myFile.size + \" bytes\");\n                getSlice(state);\n            } else {\n                updateStatus(result.status);\n            }\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Shortcut Actions by Host Application with Office.js - JavaScript\nDESCRIPTION: This snippet illustrates how to bind different callback functions to the same action based on the Office host application (e.g., Excel vs Word) using Office.actions.associate in JavaScript. It retrieves the host context and conditionally associates an appropriate handler function per host. It requires that the action (e.g., \"ChangeFormat\") is defined in the manifest and the referenced callback functions are implemented elsewhere.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst host = Office.context.host;\nif (host === Office.HostType.Excel) {\n    Office.actions.associate(\"ChangeFormat\", changeFormatExcel);\n} else if (host === Office.HostType.Word) {\n    Office.actions.associate(\"ChangeFormat\", changeFormatWord);\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Merged Areas in PowerPoint Tables with Office.js in JavaScript\nDESCRIPTION: This snippet illustrates how to create merged cell areas within a PowerPoint table using Office.js by specifying the mergedAreas property of PowerPoint.TableAddOptions. For each merged region, the upper left cell is given a value and formatting; other participating cells are set to empty strings. The sample includes cell property customization, demonstrates restrictions like requiring non-overlapping merged areas, and uses a helper method to insert the table. The code depends on the PowerPoint JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst rowCount = 3;\nconst columnCount = 4;\n// Compact syntax to create a 2D array filled with empty and distinct objects.\nconst specificCellProperties = Array(rowCount).fill(\"\").map(_ => Array(columnCount).fill(\"\").map(_ => ({})));\nconst options: PowerPoint.TableAddOptions = {\n    values: [\n        [\"1\", \"This is a merged cell\", \"\", \"4\"],\n        [\"5\", \"6\", \"This is also a merged cell\", \"8\"],\n        [\"9\", \"10\", \"\", \"12\"]\n    ],\n    uniformCellProperties: {\n        fill: { color: \"darkslateblue\" },\n        font: { bold: true, color: \"white\" },\n        borders: {\n            bottom: {\n                color: \"black\",\n                weight: 3\n            },\n            left: {\n                color: \"black\",\n                weight: 3\n            },\n            right: {\n                color: \"black\",\n                weight: 3\n            },\n            top: {\n                color: \"black\",\n                weight: 3\n            }\n        }\n    },\n    mergedAreas: [{ rowIndex: 0, columnIndex: 1, rowCount: 1, columnCount: 2 },\n    { rowIndex: 1, columnIndex: 2, rowCount: 2, columnCount: 1 }\n    ],\n    specificCellProperties // Array values are empty objects at this point.\n};\n// Set fill color for specific cell at row 1, column 1.\noptions.specificCellProperties[1][1] = {\n    fill: { color: \"black\" }\n};\nawait insertTableOnCurrentSlide(rowCount, columnCount, options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Contextual Tab JSON Structure\nDESCRIPTION: This JSON snippet shows the initial structure for defining contextual tabs. It includes empty arrays for `actions` (functions executed by controls) and `tabs` (the contextual tabs themselves, max 20). This structure is parsed into a JavaScript object and passed to `Office.ribbon.requestCreateControls`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n'{\\n  \"actions\": [\\n\\n  ],\\n  \"tabs\": [\\n\\n  ]\\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting a Value in Office Settings - JavaScript\nDESCRIPTION: This snippet demonstrates how to add or update a setting called 'themeColor' to the Settings property bag using Office.js in a task pane or content add-in. The method requires the setting name (as a case-sensitive string) and the value to store; both inputs must conform to types supported by Office.js. No return value is given, but the data is updated in memory until explicitly persisted. Office.js must be available and loaded.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.document.settings.set('themeColor', 'green');\n```\n\n----------------------------------------\n\nTITLE: Defining Image Insertion Function in JavaScript\nDESCRIPTION: This JavaScript snippet replaces the `TODO3` comment in `taskpane.js`, defining the `insertImage` function. This function uses the Office JavaScript API method `Office.context.document.setSelectedDataAsync` to insert data into the current selection in PowerPoint. It passes the imported `base64Image` data, specifies the `coercionType` as `Office.CoercionType.Image`, and includes a callback function to handle the asynchronous result, displaying an error message via `setMessage` if the operation fails.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction insertImage() {\n  // Call Office.js to insert the image into the document.\n  Office.context.document.setSelectedDataAsync(\n    base64Image,\n    {\n      coercionType: Office.CoercionType.Image\n    },\n    (asyncResult) => {\n      if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n        setMessage(\"Error: \" + asyncResult.error.message);\n      }\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating List-Based Data Validation from a Range in Excel using JavaScript\nDESCRIPTION: This code configures list data validation for the range \"B2:C5\" on the active worksheet. It employs the `list` rule type, setting the `source` property to an Excel formula `\"=Names!$A$1:$A$3\"`. This formula references the range \"A1:A3\" on a worksheet named \"Names\" as the source of valid values. Additionally, `inCellDropDown` is set to `true`, enabling a dropdown list in the validated cells for user selection. This requires the Excel JavaScript API and the existence of a \"Names\" worksheet with appropriate data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-data-validation.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let range = sheet.getRange(\"B2:C5\");   \n    let nameSourceRange = context.workbook.worksheets.getItem(\"Names\").getRange(\"A1:A3\");\n\n    range.dataValidation.rule = {\n        list: {\n            inCellDropDown: true,\n            source: \"=Names!$A$1:$A$3\"\n        }\n    };\n\n    await context.sync();\n})\n```\n\n----------------------------------------\n\nTITLE: Adding an Inline Base64-Encoded Image - Office.js - JavaScript\nDESCRIPTION: Illustrates how to add a Base64-encoded image as an inline attachment and display it at the start of an Outlook compose item's body using addFileAttachmentFromBase64Async and body.prependAsync. The snippet requires Office.js and a Base64 image string. Parameters include the encoded image, filename, and options for inline rendering. Outputs include logging success or failure for both attachment and prepend operations. Image appears inline if inserted correctly and the item body is loaded prior.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-and-remove-attachments-to-an-item-in-a-compose-form.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst base64String =\n  \"iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAnUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN0S+bUAAAAMdFJOUwAQIDBAUI+fr7/P7yEupu8AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF8SURBVGhD7dfLdoMwDEVR6Cspzf9/b20QYOthS5Zn0Z2kVdY6O2WULrFYLBaLxd5ur4mDZD14b8ogWS/dtxV+dmx9ysA2QUj9TQRWv5D7HyKwuIW9n0vc8tkpHP0W4BOg3wQ8wtlvA+PC1e8Ao8Ld7wFjQtHvAiNC2e8DdqHqKwCrUPc1gE1AfRVgEXBfB+gF0lcCWoH2tYBOYPpqQCNwfT3QF9i+AegJfN8CtAWhbwJagtS3AbIg9o2AJMh9M5C+SVGBvx6zAfmT0r+Bv8JMwP4kyFPir+cswF5KL3WLv14zAFBCLf56Tw9cparFX4upgaJUtPhrOS1QlY5W+vWTXrGgBFB/b72ev3/0igUdQPppP/nfowfKUUEFcP207y/yxKmgAYQ+PywoAFOfCH3A2MdCFzD3kdADBvq10AGG+pXQBgb7pdAEhvuF0AIc/VtoAK7+JciAs38KIuDugyAC/v4hiMCE/i7IwLRBsh68N2WQjMVisVgs9i5bln8LGScNcCrONQAAAABJRU5ErkJggg==\";\n\n// Add the Base64-encoded image to the beginning of the body.\nOffice.context.mailbox.item.addFileAttachmentFromBase64Async(base64String, \"sample.png\", { isInline: true }, (attachmentResult) => {\n    if (attachmentResult.status === Office.AsyncResultStatus.Failed) {\n      console.log(`Failed to attach file: ${attachmentResult.error.message}`);\n      return;\n    }\n\n    Office.context.mailbox.item.body.prependAsync('<img src=\"cid:sample.png\" />', { coercionType: Office.CoercionType.Html }, (prependResult) => {\n      if (prependResult.status === Office.AsyncResultStatus.Failed) {\n        console.log(`Failed to prepend image to body: ${attachmentResult.error.message}`);\n        return;\n      }\n\n      console.log(\"Inline Base64-encoded image added to the beginning of the body.\");\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Master Categories from Outlook Mailbox using Office JS\nDESCRIPTION: This snippet demonstrates how to remove specific categories from the master list in the user's mailbox. It uses the `Office.context.mailbox.masterCategories.removeAsync` method, passing an array of category display names (strings) to be removed. Requires the 'ReadWriteMailbox' permission in the add-in manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/categories.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js\nconst masterCategoriesToRemove = [\"Urgent!\"];\n\nOffice.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove, function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n        console.log(\"Successfully removed categories from master list\");\n    } else {\n        console.log(\"masterCategories.removeAsync call failed with error: \" + asyncResult.error.message);\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Arrays of Child Elements - Unified Manifest (JSON)\nDESCRIPTION: Illustrates how plural element relationships from the legacy manifest (XML) are represented as arrays of anonymous objects in the unified JSON manifest. This snippet shows an 'items' property as an array where each element is an object corresponding to a menu item. Inputs: List of configuration objects. Output: Array structure under a property. This approach avoids property names like 'item1', 'item2'; instead, all items are anonymous objects. No external dependencies are required.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/json-manifest-overview.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"items\": [\n    {\n        -- markup for a menu item is here --\n    },\n    {\n        -- markup for another menu item is here --\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Declaring Online Meeting Extension Point in Add-in Manifest (XML)\nDESCRIPTION: Declares the extension point for online meeting provider add-ins operating in Appointment Organizer mode on mobile, using the add-in only (XML) manifest. Use the `MobileOnlineMeetingCommandSurface` extension point.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\nMobileOnlineMeetingCommandSurface\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bing Photo and Converting to Base64 (ASP.NET Web API Controller in C#)\nDESCRIPTION: This C# Web API controller fetches Bing's photo of the day using HTTP and XML parsing, then downloads the image and returns it as a Base64-encoded string for client consumption. It depends on System.Net, System.Xml, System.Web.Http, and related assemblies. The primary input is an HTTP GET request; output is the Base64 image string, suitable for embedding via JavaScript. Handles external HTTP and XML dependencies; error/resource handling may need extending.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\\nusing System.IO;\\nusing System.Net;\\nusing System.Text;\\nusing System.Web.Http;\\nusing System.Xml;\\n\\nnamespace HelloWorldWeb.Controllers\\n{\\n    public class PhotoController : ApiController\\n    {\\n        public string Get()\\n        {\\n            string url = \\\"http://www.bing.com/HPImageArchive.aspx?format=xml&idx=0&n=1\\\";\\n\\n            // Create the request.\\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\\n            WebResponse response = request.GetResponse();\\n\\n            using (Stream responseStream = response.GetResponseStream())\\n            {\\n                // Process the result.\\n                StreamReader reader = new StreamReader(responseStream, Encoding.UTF8);\\n                string result = reader.ReadToEnd();\\n\\n                // Parse the XML response and get the URL.\\n                XmlDocument doc = new XmlDocument();\\n                doc.LoadXml(result);\\n                string photoURL = \\\"http://bing.com\\\" + doc.SelectSingleNode(\\\"/images/image/url\\\").InnerText;\\n\\n                // Fetch the photo and return it as a Base64-encoded string.\\n                return getPhotoFromURL(photoURL);\\n            }\\n        }\\n\\n        private string getPhotoFromURL(string imageURL)\\n        {\\n            var webClient = new WebClient();\\n            byte[] imageBytes = webClient.DownloadData(imageURL);\\n            return Convert.ToBase64String(imageBytes);\\n        }\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Showing the Task Pane using Office.addin.showAsTaskpane in JavaScript\nDESCRIPTION: This snippet demonstrates how to programmatically make the Office Add-in task pane visible using the `Office.addin.showAsTaskpane()` method. It's shown within a function `onCurrentQuarter`, potentially an event handler for `Worksheet.onActivated`, which runs code after the task pane is successfully shown. This method requires the add-in to use the shared runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/show-hide-add-in.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onCurrentQuarter() {\n    Office.addin.showAsTaskpane()\n    .then(function() {\n        // Code that enables task pane UI elements for\n        // working with the current quarter.\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Startup Class with CORS Configuration in C#\nDESCRIPTION: This C# code presents the complete `Startup` class after implementing CORS configuration. It includes the `MyAllowSpecificOrigins` field, the `ConfigureServices` method with the `AddCors` call (using a specific example origin 'https://localhost:44397'), and the `Configure` method showing the placement of `UseCors`, `UseRouting`, `UseAuthorization`, and other middleware. This example is configured for development purposes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Startup\n{\n  public Startup(IConfiguration configuration)\n    {\n      Configuration = configuration;\n    }\n\n    readonly string MyAllowSpecificOrigins = \"_myAllowSpecificOrigins\";\n\n    public IConfiguration Configuration { get; }\n\n    // NOTE: The following code configures CORS for the localhost:44397 port.\n    // This is for development purposes. In production code, you should update this to \n    // use the appropriate allowed domains.\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddCors(options =>\n        {\n            options.AddPolicy(MyAllowSpecificOrigins,\n            builder =>\n            {\n                builder.WithOrigins(\"https://localhost:44397\")\n                .AllowAnyMethod()\n                .AllowAnyHeader();\n            });\n        });\n        services.AddControllers();\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n\n        app.UseHttpsRedirection();\n\n        app.UseRouting();\n\n        app.UseAuthorization();\n\n        app.UseCors(MyAllowSpecificOrigins);\n\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Webpack Entry Point for Multiple Custom Function Files - JavaScript\nDESCRIPTION: When using multiple source files for custom functions, the `entry.functions` property in `webpack.config.js` must also be updated. This snippet shows replacing the single string value with the same array of file paths used in the `CustomFunctionsMetadataPlugin` configuration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nentry: {\n   polyfill: [\"core-js/stable\", \"regenerator-runtime/runtime\"],\n   taskpane: [\"./src/taskpane/taskpane.js\", \"./src/taskpane/taskpane.html\"],\n   functions: [\n            \"./src/functions/someFunctions.js\", \n            \"./src/functions/otherFunctions.js\"\n          ],\n },\n```\n\n----------------------------------------\n\nTITLE: Assigning OWA Mailbox Policy to All Users (Classic Outlook Web)\nDESCRIPTION: Retrieves all user mailboxes and assigns the specified OWA mailbox policy (`OWAOnSendAddinAllUserPolicy`) to them. This ensures the on-send feature is enabled for all users under this policy in classic Outlook on the web. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nGet-User -Filter {RecipientTypeDetails -eq 'UserMailbox'}|Set-CASMailbox -OwaMailboxPolicy OWAOnSendAddinAllUserPolicy\n```\n\n----------------------------------------\n\nTITLE: Locating Sideloaded Add-in Registrations in Windows Registry (Specific User SID)\nDESCRIPTION: Specifies the Windows Registry key under HKEY_USERS for a specific user SID (`{SID}`) where sideloaded Office Add-ins are registered. This path should be checked in addition to the HKEY_CURRENT_USER path to ensure the removal of add-in registrations associated with the specific user account identified by their Security Identifier (SID) who originally sideloaded the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/uninstall-add-in.md#_snippet_5\n\nLANGUAGE: registry\nCODE:\n```\nComputer\\HKEY_USERS\\{SID}\\Software\\Microsoft\\Office\\16.0\\WEF\\Developer\n```\n\n----------------------------------------\n\nTITLE: Configuring HtmlWebpackPlugin for the Dialog HTML in Webpack\nDESCRIPTION: This JavaScript object configures the `HtmlWebpackPlugin` for the new dialog page (`popup.html`). It specifies the output filename, the template file to use (`./src/dialogs/popup.html`), and the JavaScript chunks (`polyfill`, `popup`) that should be automatically injected into the generated HTML file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_52\n\nLANGUAGE: js\nCODE:\n```\nnew HtmlWebpackPlugin({\n  filename: \"popup.html\",\n  template: \"./src/dialogs/popup.html\",\n  chunks: [\"polyfill\", \"popup\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Add-in Information by AppId - PowerShell\nDESCRIPTION: This PowerShell command fetches information about a specific Outlook add-in by its AppId (or identity) by executing Get-App -Identity {identity}, then selects the ProviderName and DisplayName properties. Used for publisher identification, it requires Exchange Online admin rights and the specific add-in identity value. Replace {identity} with the actual AppId as input. Output gives name and publisher for a single add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/faq-nested-app-auth-outlook-legacy-tokens.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-App -Identity {identity} | Select-Object -Property ProviderName, DisplayName\n```\n\n----------------------------------------\n\nTITLE: Defining a JWT Header for Exchange Identity Token - JSON\nDESCRIPTION: This JSON snippet presents a sample JWT header as used in an Exchange identity token. It specifies the token type (\"JWT\"), signature algorithm (\"RS256\"), and the X.509 certificate thumbprint (\"x5t\"). These fields are used by clients and servers to interpret and validate the token. This is an example only; replace with actual values as needed during real token validation workflows.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/inside-the-identity-token.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"typ\": \"JWT\",\n  \"alg\": \"RS256\",\n  \"x5t\": \"Un6V7lYN-rMgaCoFSTO5z707X-4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Handling and Dictionary Lookup with Office.js in JavaScript\nDESCRIPTION: This JavaScript snippet provides the main logic for a Word add-in that looks up definitions of selected text. It initializes the add-in with Office.js, tracks the user's text selection, makes AJAX requests to an XML web service for dictionary definitions, and dynamically updates the UI in the task pane. The code depends on Office.js and jQuery, requiring the add-in to run in the context of Microsoft Word with an OfficeDefinitions-conforming XML web service available. Main parameters include the selected text and the web service URL. Inputs are user-selected text in the document, and outputs are list items showing definitions in the sidebar UI. The implementation assumes the existence of specific DOM elements for results display, and will not function without Office.js and jQuery loaded.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The document the dictionary add-in is interacting with.\\nlet _doc;\\n// The last looked-up word, which is also the currently displayed word.\\nlet lastLookup;\\n\\n// The base URL for the OfficeDefinitions-conforming XML web service to query for definitions.\\nconst xmlServiceUrl = \\\"DictionaryWebService.asmx/Define\\\";\\n\\n// Initialize the add-in.\\n// Office.initialize or Office.onReady is required for all add-ins.\\nOffice.initialize = function (reason) {\\n    // Checks for the DOM to load using the jQuery ready method.\\n    $(document).ready(function () {\\n        // After the DOM is loaded, app-specific code can run.\\n        // Store a reference to the current document.\\n        _doc = Office.context.document;\\n        // Check whether text is already selected.\\n        tryUpdatingSelectedWord();\\n        // Add a handler to refresh when the user changes selection.\\n        _doc.addHandlerAsync(\\\"documentSelectionChanged\\\", tryUpdatingSelectedWord);\\n    });\\n}\\n\\n// Executes when event is raised on the user's selection changes, and at initialization time.\\n// Gets the current selection and passes that to asynchronous callback function.\\nfunction tryUpdatingSelectedWord() {\\n    _doc.getSelectedDataAsync(Office.CoercionType.Text, selectedTextCallback);\\n}\\n\\n// Async callback that executes when the add-in gets the user's selection. Determines whether anything should\\n// be done. If so, it makes requests that will be passed to various functions.\\nfunction selectedTextCallback(selectedText) {\\n    selectedText = $.trim(selectedText.value);\\n    // Be sure user has selected text. The SelectionChanged event is raised every time the user moves\\n    // the cursor, even if no selection.\\n    if (selectedText != \\\"\\\") {\\n        // Check whether the user selected the same word the pane is currently displaying to\\n        // avoid unnecessary web calls.\\n        if (selectedText != lastLookup) {\\n            // Update the lastLookup variable.\\n            lastLookup = selectedText;\\n            // Set the \\\"headword\\\" span to the word you looked up.\\n            $(\\\"#headword\\\").text(\\\"Selected text: \\\" + selectedText);\\n            // AJAX request to get definitions for the selected word; pass that to refreshDefinitions.\\n            $.ajax(xmlServiceUrl,\\n                {\\n                    data: { word: selectedText },\\n                    dataType: 'xml',\\n                    success: refreshDefinitions,\\n                    error: errorHandler\\n                });\\n    }\\n}\\n\\n// This function is called when the add-in gets back the definitions target word.\\n// It removes the old definitions and replaces them with the definitions for the current word.\\n// It also sets the \\\"See More\\\" link.\\nfunction refreshDefinitions(data, textStatus, jqXHR) {\\n    $(\\\".definition\\\").remove();\\n\\n    // Make a new list item for each returned definition that was returned, set the CSS class,\\n    // and append it to the definitions div.\\n    $(data).find(\\\"Definition\\\").each(function () {\\n        $(document.createElement(\\\"li\\\"))\\n            .text($(this).text())\\n            .addClass(\\\"definition\\\")\\n            .appendTo($(\\\"#definitions\\\"));\\n    });\\n\\n    // Change the \\\"See More\\\" link to direct to the correct URL.\\n    $(\\\"#SeeMoreLink\\\").attr(\\\"href\\\", $(data).find(\\\"SeeMoreURL\\\").text());\\n}\\n\\n// Basic error handler that writes to a div with id='message'.\\nfunction errorHandler(jqXHR, textStatus, errorThrown) {\\n    document.getElementById('message').innerText\\n      += (\\\"textStatus:- \\\" + textStatus\\n          + \\\"\\\\nerrorThrown:- \\\" + errorThrown\\n          + \\\"\\\\njqXHR:- \\\" + JSON.stringify(jqXHR));\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Group Visibility in Unified Manifest using JSON\nDESCRIPTION: This JSON snippet demonstrates configuring an entire control group (`MyControlGroup`) within a custom core tab in the Unified Manifest for Microsoft 365. Setting `\"overriddenByRibbonApi\": true` on the group ensures that the entire group and all its controls will only be displayed on platforms or Office versions that do *not* support custom contextual tabs, serving as a fallback UI mechanism. Other groups within the same tab will be displayed regardless.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"ribbons\": [\n            ...\n            {\n                ...\n                \"tabs\": [\n                    {\n                        \"id\": \"MyTab\",\n                        \"groups\": [\n                            {\n                                \"id\": \"MyControlGroup\",\n                                \"overriddenByRibbonApi\": true\n                                ...\n                                \"controls\": [\n                                    {\n                                        \"id\": \"Contoso.MyButton1\",\n                                        ...\n                                    }\n                                ]\n                            },\n                            ... other groups configured here\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding an Image Shape from Base64 in Excel using JavaScript\nDESCRIPTION: This code shows how to add an image to an Excel worksheet ('MyWorksheet') using the JavaScript API. It utilizes a standard web `FileReader` to read an image file selected by the user (`myFile.files[0]`) as a data URL. The base64 encoded portion of the data URL is extracted (removing the `data:image/...;base64,` prefix) and passed to the `sheet.shapes.addImage()` method to create the image shape. The shape is then named 'Image'. This requires a file input element with `id=\"selectedFile\"` in the HTML and an `errorHandlerFunction` defined elsewhere.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// This sample creates an image as a Shape object in the worksheet.\nlet myFile = document.getElementById(\"selectedFile\");\nlet reader = new FileReader();\n\nreader.onload = (event) => {\n    Excel.run(function (context) {\n        let startIndex = reader.result.toString().indexOf(\"base64,\");\n        let myBase64 = reader.result.toString().substr(startIndex + 7);\n        let sheet = context.workbook.worksheets.getItem(\"MyWorksheet\");\n        let image = sheet.shapes.addImage(myBase64);\n        image.name = \"Image\";\n        return context.sync();\n    }).catch(errorHandlerFunction);\n};\n\n// Read in the image file as a data URL.\nreader.readAsDataURL(myFile.files[0]);\n```\n\n----------------------------------------\n\nTITLE: Defining Icon URLs in XML Manifest for Conversion (XML)\nDESCRIPTION: This XML snippet demonstrates the necessary structure within an Office Add-in's XML manifest before conversion to the unified manifest format. It highlights the inclusion and placement of the `<IconUrl>` and `<HighResolutionIconUrl>` elements, specifying their required `DefaultValue` attributes pointing to the corresponding icon image files hosted at accessible URLs (e.g., localhost for development). These elements are prerequisites for the conversion process.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/convert-xml-to-json-manifest.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp xmlns=\"http://schemas.microsoft.com/office/appforoffice/1.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"MailApp\">\n  <Id>01234567-89ab-cdef-0123-4567-89abcdef0123</Id>\n  <Version>1.0</Version>\n  <ProviderName>Contoso</ProviderName>\n  <DefaultLocale>en-us</DefaultLocale>\n  <DisplayName DefaultValue=\"Great Add-in\"/>\n  <Description DefaultValue=\"A great add-in.\"/>\n  <IconUrl DefaultValue=\"https://localhost:3000/assets/icon-64.png\" />\n  <HighResolutionIconUrl DefaultValue=\"https://localhost:300/assets/icon-128.png\" />\n\n  <!-- Other markup omitted -->\n```\n\n----------------------------------------\n\nTITLE: Integrating Built-in Office Group into Custom Tab (Unified Manifest)\nDESCRIPTION: This JSON snippet shows how to add a built-in Office control group (e.g., 'Paragraph') to a custom ribbon tab within an Office Add-in's Unified Manifest. It uses the `builtInGroupId` property within a group object inside the `groups` array of a custom tab definition, instead of a custom `id`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/built-in-button-integration.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"ribbons\": [\n            ...\n            {\n                ...\n                \"tabs\": [\n                    {\n                        \"id\": \"MyTab\",\n                        ...\n                        \"groups\": [\n                            ... // Optionally, other groups in the tab\n                            {\n                                \"builtInGroupId\": \"Paragraph\"\n                            },\n                            ... // Optionally, other groups in the tab\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling an Add-in for a Mailbox (PowerShell)\nDESCRIPTION: Use the `Set-App` PowerShell cmdlet within a remote Exchange session to enable or disable a specific Outlook add-in on a mailbox. Requires parameters specifying the add-in and desired state (enabled/disabled). This is one of the cmdlets used to manage add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/testing-and-tips.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-App\n```\n\n----------------------------------------\n\nTITLE: Executing Office Deployment Tool with Configuration (Command Line)\nDESCRIPTION: This command line instruction executes the Office Deployment Tool (setup.exe) using the specified configuration file ('configuration.xml'). It triggers the download and installation process based on the settings defined in the XML file, such as installing the 'CurrentPreview' build. This command must be run with administrator privileges. Note that the process might take time without showing progress.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/install-latest-office-version.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nsetup.exe /configure configuration.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Command Runtime in Manifest (JSON)\nDESCRIPTION: This JSON object configures the runtime environment (`CommandsRuntime`) for an Office Add-in function command within the `extensions.runtimes` array of the `manifest.json`. It specifies Mailbox API requirement set 1.3, points to the HTML and JavaScript files for the command (`commands.html`, `commands.js`), sets a short lifetime suitable for command execution, and defines an action (`logCRMEvent`) of type `executeFunction` which will be triggered by UI elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requirements\": {\n        \"capabilities\": [\n            {\n                \"name\": \"Mailbox\",\n                \"minVersion\": \"1.3\"\n            }\n        ]\n    },\n    \"id\": \"CommandsRuntime\",\n    \"type\": \"general\",\n    \"code\": {\n        \"page\": \"https://localhost:3000/commands.html\",\n        \"script\": \"https://localhost:3000/commands.js\"\n    },\n    \"lifetime\": \"short\",\n    \"actions\": [\n        {\n            \"id\": \"logCRMEvent\",\n            \"type\": \"executeFunction\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Domain Message to Dialog with Wildcard Origin (JavaScript)\nDESCRIPTION: Shows how to send a message from the parent to the dialog using `dialog.messageChild` with the `targetOrigin` set to \"*\". This allows the message to be sent to any domain, but should only be used if the message does not contain sensitive data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.messageChild(messageToDialog, { targetOrigin: \"*\" });\n```\n\n----------------------------------------\n\nTITLE: Processing Message from Parent Host Page in Dialog Box (JavaScript)\nDESCRIPTION: This snippet defines the event handler function (`onMessageFromParent`) that processes messages received from the parent host page within the dialog. It receives an argument (`arg`) containing the message in its `message` property. The code parses the JSON string received from the parent (originally sent via `messageChild`) and uses the data (in this case, the worksheet name) to update the dialog's UI (setting the text content of an `<h1>` element).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onMessageFromParent(arg) {\n    const messageFromParent = JSON.parse(arg.message);\n    document.querySelector('h1').textContent = messageFromParent.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New OWA Mailbox Policy for All Users (Classic Outlook Web)\nDESCRIPTION: Creates a new Outlook on the Web (OWA) mailbox policy intended for applying on-send add-in settings to all users specifically within the classic Outlook on the web environment. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nNew-OWAMailboxPolicy OWAOnSendAddinAllUserPolicy\n```\n\n----------------------------------------\n\nTITLE: Creating Sample HTML Gist Content for Testing\nDESCRIPTION: Provides sample HTML content, including basic structure, CSS styling for an H1 tag, a header, and a paragraph, intended to be saved as a public GitHub gist named `test.html`. This gist serves as another test case for the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n```HTML\n<html>\n  <head>\n    <style>\n    h1 {\n      font-family: Calibri;\n    }\n    </style>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>This is a test</p>\n  </body>\n</html>\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository Using Git - Bash\nDESCRIPTION: This Bash snippet demonstrates how to clone your fork of the Office-js documentation repository to your local machine. It uses the 'git clone' command, which requires Git to be installed. The URL must be replaced with your GitHub username and repository name. The command creates a local directory containing all the repository files and history, initiating your local workspace.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your user name>/<repo name>.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph and OBO Flow in ASP.NET Core (C#)\nDESCRIPTION: This C# code configures an ASP.NET Core app to enable token validation, the On-Behalf-Of (OBO) authentication flow, and Microsoft Graph API interactions. It chains service calls to 'AddMicrosoftIdentityWebApiAuthentication', 'EnableTokenAcquisitionToCallDownstreamApi', adds Microsoft Graph configuration from appsettings, and activates in-memory token caches. Dependencies include the Microsoft.Identity.Web and Microsoft Graph SDK packages, and it assumes 'builder.Services' is available within the Program.cs file. The primary input is the configuration object, with the effect of enabling secure downstream API calls with token caching.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Add services to the container.\nbuilder.Services.AddMicrosoftIdentityWebApiAuthentication(builder.Configuration)\n                .EnableTokenAcquisitionToCallDownstreamApi()\n                    .AddMicrosoftGraph(builder.Configuration.GetSection(\"DownstreamApi\"))\n                    .AddInMemoryTokenCaches();\n\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Type Annotations to Function Parameters\nDESCRIPTION: Illustrates how to enhance a JavaScript function (`showNotification`) after converting it to TypeScript by adding explicit type annotations (`string`) to its parameters (`header`, `content`). This leverages TypeScript's static typing features for improved code clarity, maintainability, and compile-time error checking. Requires jQuery (`$`) and a `messageBanner` object.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/convert-javascript-to-typescript.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n function showNotification(header: string, content: string) {\n        $(\"#notification-header\").text(header);\n        $(\"#notification-body\").text(content);\n        messageBanner.showBanner();\n        messageBanner.toggleExpansion();\n    }\n```\n\n----------------------------------------\n\nTITLE: Granting Add-in Installation Permission to a Single User (PowerShell)\nDESCRIPTION: This PowerShell cmdlet assigns the 'My Custom Apps' role to a specific user, identified by their email alias ('wendyri' in the example). This role grants the user the minimum permissions required to sideload Outlook add-ins for testing purposes on their Exchange Server mailbox.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/testing-and-tips.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-ManagementRoleAssignment -Role \"My Custom Apps\" -User \"wendyri\"\n```\n\n----------------------------------------\n\nTITLE: Define Short String Resource for ToggleProtection Button Label (XML)\nDESCRIPTION: Defines a bt:String element in the bt:ShortStrings section for the button label, with resource ID \\\"ProtectionButtonLabel\\\" and display text \\\"Toggle Worksheet Protection\\\". Used for the button label and tooltip title, supporting localization and reuse.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<bt:String id=\\\"ProtectionButtonLabel\\\" DefaultValue=\\\"Toggle Worksheet Protection\\\" /\\u003e\n```\n\n----------------------------------------\n\nTITLE: Setting Location using location.setAsync in Office JS\nDESCRIPTION: This JavaScript code sets the location of an Outlook appointment in compose mode using `item.location.setAsync`. It sets the location to the string \"Conference room A\" (up to 255 characters), overwriting any existing location. The example includes passing optional `asyncContext` and using a callback function to handle the operation's success or failure status. Multiple locations can be set using a semi-colon separator. Requires the Office JavaScript API and jQuery.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-location-of-an-appointment.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n```js\nlet item;\n\nOffice.initialize = function () {\n    item = Office.context.mailbox.item;\n    // Check for the DOM to load using the jQuery ready method.\n    $(document).ready(function () {\n        // After the DOM is loaded, app-specific code can run.\n        // Set the location of the item being composed.\n        setLocation();\n    });\n}\n\n// Set the location of the item that the user is composing.\nfunction setLocation() {\n    item.location.setAsync(\n        'Conference room A',\n        { asyncContext: { var1: 1, var2: 2 } },\n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed){\n                write(asyncResult.error.message);\n            }\n            else {\n                // Successfully set the location.\n                // Do whatever is appropriate for your scenario,\n                // using the arguments var1 and var2 as applicable.\n            }\n        });\n}\n\n// Write to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Office JS Binding Object (JavaScript)\nDESCRIPTION: This snippet shows how to read data from an existing binding object (assumed to be stored in the variable `myBinding`). It calls the `getDataAsync` method directly on the binding object. The callback function receives the data in the `asyncResult.value` property and logs it or any errors using the `write` helper function. Requires the Office JS API and a variable `myBinding` holding a valid binding object.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nmyBinding.getDataAsync(function (asyncResult) {\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n        write('Action failed. Error: ' + asyncResult.error.message);\n    } else {\n        write(asyncResult.value);\n    }\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Workbook Document Author Property - JavaScript\nDESCRIPTION: Demonstrates setting the author property of a workbook’s document properties using the Excel JavaScript API. Accesses the DocumentProperties object and assigns a value to the author field, then syncs the change to Excel. Requires Office.js in an Excel add-in environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let docProperties = context.workbook.properties;\\n    docProperties.author = \\\"Alex\\\";\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Formulas from a Range of Cells - Excel JavaScript API - JavaScript\nDESCRIPTION: Accesses the formulas property of range B2:E6, loads it into memory, and prints it out. Formula cells reveal their formulas, while static values come through as-is. Useful for auditing or migrating spreadsheet logic.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let range = sheet.getRange(\"B2:E6\");\n    range.load(\"formulas\");\n    await context.sync();\n\n    console.log(JSON.stringify(range.formulas, null, 4));\n});\n```\n\n----------------------------------------\n\nTITLE: Updating FunctionFile Location in XML Manifest for Shared Runtime\nDESCRIPTION: This XML snippet demonstrates changing the `resid` attribute of the `<FunctionFile>` tag in `manifest.xml` from `Commands.Url` to `Taskpane.Url`. This ensures that the JavaScript file handling ribbon button actions or commands is loaded and executed within the shared runtime environment defined by `Taskpane.Url`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n</GetStarted>\n...\n<FunctionFile resid=\"Taskpane.Url\"/>\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Express Route with JWT Validation in JavaScript\nDESCRIPTION: Defines an Express.js GET route `/getuserfilenames`. It uses `authHelper.validateJwt` middleware to ensure the incoming request has a valid JWT access token before proceeding to the asynchronous handler function, which initially contains a placeholder (`TODO 10`) for the OBO flow implementation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get(\n \"/getuserfilenames\",\n authHelper.validateJwt,\n async function (req, res) {\n   // TODO 10: Exchange the access token for a Microsoft Graph token\n   //          by using the OBO flow.\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering Angular UI Updates with NgZone\nDESCRIPTION: Illustrates how to use Angular's `NgZone` service to ensure UI updates are triggered correctly. Code that modifies component properties or performs actions affecting the UI, especially if originating from outside Angular's context (like Office JS callbacks), should be wrapped in `zone.run()` to bring the execution back into the Angular zone and trigger change detection.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/add-ins-with-angular2.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NgZone } from '@angular/core';\n\nexport class MyComponent {\n  constructor(private zone: NgZone) { }\n\n  myFunction() {\n    this.zone.run(() => {\n      // The codes that need update the UI.\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Current Mailbox Item with Office.js - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to serialize the current mailbox item using Office.js within an Outlook add-in. It uses JSON.stringify to output the full context of Office.context.mailbox.item as a pretty-printed JSON string, with indentation for readability. You must run this snippet within an Office.js enabled Outlook add-in environment; the result shows the structure and time accuracy of dateTimeCreated and dateTimeModified properties. The snippet outputs a JSON string representing the current item with millisecond-level time accuracy on non-Mac, and second-level on Mac.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/compare-outlook-add-in-support-in-outlook-for-mac.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nJSON.stringify(Office.context.mailbox.item, null, 4);\n```\n\n----------------------------------------\n\nTITLE: Specifying Entity Value Provider Attribution in Excel JavaScript API (TypeScript)\nDESCRIPTION: This code snippet illustrates how to add a provider attribution to an entity cell value in Excel using the JavaScript API with TypeScript. It augments the entity definition with the 'provider' property, supplying a description (used as a tooltip or fallback), a logo image URL, and a link destination URL. Required dependencies are Excel.EntityCellValue, Excel.CellValueType.entity, and the CellValueProviderAttributes object structure. Parameters such as 'product.providerName', 'product.sourceAddress', and 'product.targetAddress' should resolve to appropriate strings with provider details. When rendered in Excel, this configuration displays a provider logo with interactive tooltip and link in the lower left of the card; if the logo URL fails, the description will be shown instead. This approach assumes provider-related information is available at runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-data-types-entity-card.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst entity: Excel.EntityCellValue = {\n    type: Excel.CellValueType.entity,\n    text: productName,\n    properties: {\n        // Enter property settings here.\n    },\n    layouts: {\n        // Enter layout settings here.\n    },\n    provider: {\n        description: product.providerName, // Name of the data provider. Displays as a tooltip when hovering over the logo. Also displays as a fallback if the source address for the image is broken.\n        logoSourceAddress: product.sourceAddress, // Source URL of the logo to display.\n        logoTargetAddress: product.targetAddress // Destination URL that the logo navigates to when selected.\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Start Development Server and Sideload Add-in (Shell)\nDESCRIPTION: Starts the development server for a Yeoman-generated Outlook add-in project and automatically sideloads the add-in into the Outlook desktop client. This command should be run from the root directory of the project. It registers the add-in's manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/sideload-outlook-add-ins-for-testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Slide Information in PowerPoint Add-ins (JavaScript)\nDESCRIPTION: This snippet shows how to retrieve details about the currently selected slide or range of slides in a PowerPoint presentation. It calls `Office.context.document.getSelectedDataAsync` with `Office.CoercionType.SlideRange` to get an object containing an array of slides, each with its ID, title, and index. The ID of the first selected slide is stored in a global variable `Globals.firstSlideId`. Assumes an `app.showNotification` function exists for displaying results.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/powerpoint-add-ins.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction getSelectedRange() {\n    // Gets the ID, title, and index of the current slide (or selected slides) and store the first slide ID. */\n    Globals.firstSlideId = 0;\n\n    Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            app.showNotification(\"Action failed with error: \" + asyncResult.error.message);\n        } else {\n            Globals.firstSlideId = asyncResult.value.slides[0].id;\n            app.showNotification(JSON.stringify(asyncResult.value));\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Node.js Office Add-in (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates typical environment variable assignments needed to configure a Node.js Office Add-in for single sign-on. Parameters such as CLIENT_ID and CLIENT_SECRET enable OAuth flows, while NODE_ENV sets the deployment environment, and SERVER_SOURCE specifies the local development server endpoint. Required dependencies include Node.js, dotenv (implied for environment var loading), and a registered Azure AD application. Inputs are string assignment statements in a .env file. Outputs are accessible via process.env for runtime configuration. Ensure secrets are kept out of version control.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCLIENT_ID=8791c036-c035-45eb-8b0b-265f43cc4824\\nCLIENT_SECRET=X7szTuPwKNts41:-/fa3p.p@l6zsyI/p\\nNODE_ENV=development\\nSERVER_SOURCE=<https://localhost:3000>\n```\n\n----------------------------------------\n\nTITLE: Safely Getting Element Text Content Cross-Browser in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a cross-browser method to safely retrieve the text content of a DOM element (`x`) while mitigating Cross-Site Scripting (XSS) risks associated with `innerHTML`. It uses the logical OR (`||`) operator to prioritize the `innerText` property (primarily for Internet Explorer) and falls back to the standard `textContent` property if `innerText` is not available or falsy. This ensures the text content is obtained without interpreting any embedded HTML.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/privacy-and-security.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n var text = x.innerText || x.textContent\n```\n\n----------------------------------------\n\nTITLE: Getting Invoking Cell Address in Excel Custom Functions (JavaScript)\nDESCRIPTION: Defines an Excel Custom Function `getAddress` using JSDoc comments for metadata. The function accepts two number parameters and the implicit `invocation` object (declared as `CustomFunctions.Invocation`). It requires the `@requiresAddress` JSDoc tag to access the `invocation.address` property, which holds the absolute address (e.g., 'SheetName!RelativeCellAddress') of the cell that called the function. This address is then returned by the function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Return the address of the cell that invoked the custom function. \n * @customfunction\n * @param {number} first First parameter.\n * @param {number} second Second parameter.\n * @param {CustomFunctions.Invocation} invocation Invocation object. \n * @requiresAddress \n */\nfunction getAddress(first, second, invocation) {\n  const address = invocation.address;\n  return address;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Existing PivotTable by Name - Excel JavaScript API - JavaScript\nDESCRIPTION: This code accesses an existing PivotTable named 'My Pivot' from the workbook's collection. The snippet demonstrates how to retrieve and synchronize the PivotTable object using the Excel.run context. It assumes that the PivotTable with the specified name already exists in the workbook, and Office.js is available. If 'My Pivot' does not exist, the code will throw an error.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let pivotTable = context.workbook.pivotTables.getItem(\"My Pivot\");\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Filters from an Excel Table using Office JS\nDESCRIPTION: This snippet demonstrates how to remove all active filters from an Excel table named 'ExpensesTable'. It directly calls the `clearFilters()` method on the table object. The subsequent `context.sync()` call applies this change in the Excel workbook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-tables.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    expensesTable.clearFilters();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Slide with Default Master and Layout - PowerPoint JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates adding a slide to a PowerPoint presentation using Office JavaScript PowerPoint APIs. The `SlideCollection.add()` method is used without parameters, so the new slide uses the presentation's default slide master and its first layout. The slide is always appended to the end of the presentation. The `PowerPoint.run` function provides a request context for the Office Add-in, and `context.sync()` applies queued commands. No parameters are required, and the output is a new blank slide at the end of the deck. Requires the PowerPoint add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/add-slides.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addSlide() {\n  await PowerPoint.run(async function(context) {\n    context.presentation.slides.add();\n\n    await context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Add-in UI Layout for PowerPoint using HTML\nDESCRIPTION: This HTML snippet constructs the user interface of the add-in for PowerPoint. It sets up the page structure, includes references to jQuery, Office.js, and the logic file (GetDoc_App.js), and provides a form with a heading, button, and status region. Dependencies are Program.css for styling and Office.js for Office integration. The form has an input button with an id of 'submit' and a div for displaying status updates. The title and headings are tailored for the PowerPoint context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n    <head>\\n        <meta charset=\\\"UTF-8\\\" />\\n        <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/>\\n        <title>Publish presentation</title>\\n        <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"Program.css\\\" />\\n        <script src=\\\"https://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js\\\" type=\\\"text/javascript\\\"></script>\\n        <script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\" type=\\\"text/javascript\\\"></script>\\n        <script src=\\\"GetDoc_App.js\\\"></script>\\n    </head>\\n    <body>\\n        <form>\\n            <h1>Publish presentation</h1>\\n            <br />\\n            <div><input id='submit' type=\\\"button\\\" value=\\\"Submit\\\" /></div>\\n            <br />\\n            <div><h2>Status</h2>\\n                <div id=\\\"status\\\"></div>\\n            </div>\\n        </form>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Ribbon UI for Toggle Protection - JSON Manifest\nDESCRIPTION: This JSON snippet defines the user interface for a custom ribbon button within the 'ribbons' array of a unified manifest (`manifest.json`). It adds a group ('Contoso Add-in') to a specified built-in tab (placeholder `TODO1`, intended for 'TabHome'), containing a button (placeholder label `TODO2`, intended for 'Toggle worksheet protection') with icons, a supertip, and linking it to a specific action (placeholder `TODO3`, intended for 'toggleProtection').\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n\"ribbons\": [\n    {\n        \"contexts\": [\n            \"default\"\n        ],\n        \"tabs\": [\n            {\n                \"builtInTabID\": <!--TODO1: Set the tab ID -->,\n                \"groups\": [\n                    {\n                        \"id\": \"worksheetProtectionGroup\",\n                        \"label\": \"Contoso Add-in\",\n                        \"controls\": [    \n                            {\n                                \"id\": \"toggleProtectionButton\",\n                                \"type\": \"button\",\n                                \"label\": <!--TODO2: Label the button -->,\n                                \"icons\": [\n                                    {\n                                        \"size\": 16,\n                                        \"url\": \"https://localhost:3000/assets/icon-16.png\"\n                                    },\n                                    {\n                                        \"size\": 32,\n                                        \"url\": \"https://localhost:3000/assets/icon-32.png\"\n                                    },\n                                    {\n                                        \"size\": 80,\n                                        \"url\": \"https://localhost:3000/assets/icon-80.png\"\n                                    }\n                                ],\n                                \"supertip\": {\n                                    \"title\": \"Toggle worksheet protection\",\n                                    \"description\": \"Enables or disables worksheet protection.\"\n                                },\n                                \"actionId\": <!--TODO3: Set the action ID -->\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Exchange Authentication Metadata Document Structure (JSON)\nDESCRIPTION: Provides an example structure for the JSON authentication metadata document. This document, retrieved from the URL specified in the token's `amurl` claim, contains public signing keys (`keys` array) used to verify the identity token's signature. The correct key is identified by matching the `x5t` value from the token header with the `keyinfo.x5t` value in the metadata.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/validate-an-identity-token.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"_70b34511-d105-4e2b-9675-39f53305bb01\",\n    \"version\": \"1.0\",\n    \"name\": \"Exchange\",\n    \"realm\": \"*\",\n    \"serviceName\": \"00000002-0000-0ff1-ce00-000000000000\",\n    \"issuer\": \"00000002-0000-0ff1-ce00-000000000000@*\",\n    \"allowedAudiences\": [\n        \"00000002-0000-0ff1-ce00-000000000000@*\"\n    ],\n    \"keys\": [\n        {\n            \"usage\": \"signing\",\n            \"keyinfo\": {\n                \"x5t\": \"enh9BJrVPU5ijV1qjZjV-fL2bco\"\n            },\n            \"keyvalue\": {\n                \"type\": \"x509Certificate\",\n                \"value\": \"MIIHNTCC...\"\n            }\n        }\n    ],\n    \"endpoints\": [\n        {\n            \"location\": \"https://by2pr06mb2229.namprd06.prod.outlook.com:444/autodiscover/metadata/json/1\",\n            \"protocol\": \"OAuth2\",\n            \"usage\": \"metadata\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Worksheet with Excel JavaScript API - Markdown\nDESCRIPTION: This Copilot prompt instructs Copilot to generate code/steps for adding a new worksheet at the end of the workbook using the Excel JavaScript API. Appropriate for automating Excel workbook manipulation via Office.js, with no additional dependencies. The result should cover Office.js object model operations for worksheet insertion.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nAdd a new worksheet *at the end* using the Excel JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Calling Microsoft Graph API and Handling Response in JavaScript\nDESCRIPTION: Shows the code for calling the Microsoft Graph API to get the top 10 file/folder names from the user's OneDrive root (`/me/drive/root/children`). It uses a helper function `getGraphData` with the obtained access token, constructs the query parameters to request only the 'name' property, and processes the response. It handles potential Graph errors by returning a 403 status and extracts/returns only the item names on success with a 200 status. Depends on a `getGraphData` helper function and the `response.accessToken` obtained from the OBO flow.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Minimize the data that must come from MS Graph by specifying only the property we need (\"name\")\n// and only the top 10 folder or file names.\nconst rootUrl = '/me/drive/root/children';\n\n// Note that the last parameter, for queryParamsSegment, is hardcoded. If you reuse this code in\n// a production add-in and any part of queryParamsSegment comes from user input, be sure that it is\n// sanitized so that it cannot be used in a Response header injection attack.\nconst params = '?$select=name&$top=10';\n\nconst graphData = await getGraphData(\n  response.accessToken,\n  rootUrl,\n  params\n);\n\n// If Microsoft Graph returns an error, such as invalid or expired token,\n// there will be a code property in the returned object set to a HTTP status (e.g. 401).\n// Return it to the client. On client side it will get handled in the fail callback of `makeWebServerApiCall`.\nif (graphData.code) {\n  res\n    .status(403)\n    .send({\n      type: \"Microsoft Graph\",\n      errorDetails:\n        \"An error occurred while calling the Microsoft Graph API.\\n\" +\n        graphData,\n    });\n} else {\n  // MS Graph data includes OData metadata and eTags that we don't need.\n  // Send only what is actually needed to the client: the item names.\n  const itemNames = [];\n  const oneDriveItems = graphData[\"value\"];\n  for (let item of oneDriveItems) {\n    itemNames.push(item[\"name\"]);\n  }\n\n  res.status(200).send(itemNames);\n}\n// TODO 12: Check for expired token.\n```\n\n----------------------------------------\n\nTITLE: Removing functions.html Plugin from Webpack Configuration\nDESCRIPTION: This JavaScript snippet shows the removal of an `HtmlWebpackPlugin` instance configured for 'functions.html' from the `webpack.config.js` file. This is necessary when migrating to a shared runtime, as the custom functions' JavaScript will be bundled and loaded via the main task pane HTML file instead of a separate `functions.html`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew HtmlWebpackPlugin({\n    filename: \"functions.html\",\n    template: \"./src/functions/functions.html\",\n    chunks: [\"polyfill\", \"functions\"]\n  })\n```\n\n----------------------------------------\n\nTITLE: Verifying bundle.js Download Location in Classic Outlook on Windows (Text)\nDESCRIPTION: Provides the typical file path format within the user's local app data directory (`%LOCALAPPDATA%`) where classic Outlook on Windows caches the JavaScript bundle (`bundle.js`) for event-based and spam-reporting add-ins. Checking this location helps verify if the add-in's code has been successfully downloaded. Placeholders like `[Outlook profile GUID]` need to be replaced with actual values from the specific user environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/troubleshoot-event-based-and-spam-reporting-add-ins.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n%LOCALAPPDATA%\\Microsoft\\Office\\16.0\\Wef\\{[Outlook profile GUID]}\\[Outlook mail account encoding]\\Javascript\\[Add-in ID]_[Add-in Version]_[locale]\n```\n\n----------------------------------------\n\nTITLE: Enabling Runtime Logging to a Specific File - Command Line\nDESCRIPTION: Enables runtime logging and directs output to the specified file for Office Add-ins using the office-addin-dev-settings npm CLI. Requires Node.js and office-addin-dev-settings. Replace [filename.txt] with the path or name of your desired log file. This limits logging output to the specified file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/runtime-logging.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-dev-settings runtime-log --enable [filename.txt]\n```\n\n----------------------------------------\n\nTITLE: Turning Off Legacy Exchange Tokens with PowerShell - PowerShell\nDESCRIPTION: This PowerShell snippet sets the authentication policy for the tenant to block legacy Exchange tokens by running Set-AuthenticationPolicy with the -BlockLegacyExchangeTokens parameter. It requires administrator permissions in Exchange Online and is typically run as part of a test (scream test) or an enforcement action to disable use of legacy authentication tokens for all add-ins. The key parameter is -Identity, which specifies the authentication policy to change. The command affects all users in the tenant after propagation (approximately 24 hours).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/faq-nested-app-auth-outlook-legacy-tokens.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AuthenticationPolicy –BlockLegacyExchangeTokens -Identity \"LegacyExchangeTokens\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a GET Endpoint for OneDrive File Names via Microsoft Graph (C#, ASP.NET Core)\nDESCRIPTION: This snippet implements the GET api/files endpoint within the FilesController, retrieving the first 10 files/folders from the authenticated user's OneDrive. It uses Microsoft Graph SDK for data access, handles authentication errors via MSAL exceptions, and provides Graph error handling. The method returns a JSON array of file and folder names or an error response. Prerequisites include proper configuration of Microsoft.Identity.Web, Microsoft.Graph, and dependency injection. Key parameters include Graph options with requested scopes; the output is a list of DriveItem objects limited to 10. Error responses are fully formatted JSON status codes. The endpoint requires OAuth SSO to operate as intended.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n // GET api/files\n    [HttpGet]\n    [Produces(\"application/json\")]\n    public async Task<IActionResult> Get()\n    {\n        List<DriveItem> result = new List<DriveItem>();\n        try\n        {\n            var files = await _graphServiceClient.Me.Drive.Root.Children.Request()\n                .Top(10)\n                .Select(m => new { m.Name })\n                .GetAsync();\n\n            result = files.ToList();\n        }\n        catch (MsalException ex)\n        {\n            var errorResponse = new\n            {\n                message = \"An authentication error occurred while acquiring a token for downstream API\",\n                details = ex.Message\n            };\n\n            return StatusCode((int)HttpStatusCode.Unauthorized, Json(errorResponse));\n        }\n        catch (ServiceException ex)\n        {\n            if (ex.InnerException is MicrosoftIdentityWebChallengeUserException challengeException)\n            {\n                _tokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeader(_graphOptions.Value.Scopes.Split(' '),\n                    challengeException.MsalUiRequiredException);\n            }\n            else\n            {\n                var errorResponse = new\n                {\n                    message = \"An error occurred calling Microsoft Graph\",\n                    details = ex.RawResponseBody\n                };\n                return StatusCode((int)HttpStatusCode.BadRequest, Json(errorResponse));\n            }\n        }\n        catch (Exception ex)\n        {\n            var errorResponse = new\n            {\n                message = \"An error occurred while calling the downstream API\",\n                details = ex.Message\n            };\n            return StatusCode((int)HttpStatusCode.BadRequest, Json(errorResponse));\n\n        }\n        return Json(result);\n    \n```\n\n----------------------------------------\n\nTITLE: Loading a Property Across an Excel Chart Collection\nDESCRIPTION: Illustrates how to load a specific scalar property ('name') for every item within an Excel chart collection using the collection's 'load' method. It then iterates through the loaded items after synchronization to access the property.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const chartCollection = sheet.charts;\n\n    // Load the name property on every chart in the chart collection.\n    chartCollection.load(\"name\");\n    await context.sync();\n\n    chartCollection.items.forEach((chart) => {\n        console.log(chart.name);\n    });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Querying User Assigned Keyboard Shortcuts with Office.js - JavaScript\nDESCRIPTION: This code calls Office.actions.getShortcuts to retrieve the currently set keyboard shortcuts for each add-in action in JavaScript. The snippet loops over the returned object and logs each action and its associated shortcut. It works asynchronously via promises and helps developers or add-ins inform users about their existing shortcut mappings.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.actions.getShortcuts()\n    .then((userShortcuts) => {\n       for (const action in userShortcuts) {\n           let shortcut = userShortcuts[action];\n           console.log(action + \": \" + shortcut);\n       }\n    });\n```\n\n----------------------------------------\n\nTITLE: Specifying API Requirements in Office Add-in Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates the use of the `<Requirements>` element within the `<OfficeApp>` element of an Office Add-in manifest. It specifies the minimum Office.js API requirements for the add-in. The `<Sets>` element uses `DefaultMinVersion=\"1.1\"` to indicate a default minimum requirement across sets, while the `<Set>` element specifies a requirement for the `Mailbox` API set with `MinVersion=\"1.1\"`. This ensures the add-in only loads in environments supporting the required API versions and sets.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<OfficeApp>\n...\n  <Requirements>\n    <Sets DefaultMinVersion=\"1.1\">\n      <Set Name=\"MailBox\" MinVersion=\"1.1\" />\n    </Sets>\n  </Requirements>\n...\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Defining Ribbon Group and Control Icons in Unified Manifest (JSON) for Office Add-ins\nDESCRIPTION: This JSON snippet demonstrates how to specify ribbon group and control icons in the unified manifest structure for Microsoft 365 Office Add-ins. It details the 'ribbons.tabs.groups.icons' array for group icons and the 'controls.icons' and 'overriddenByRibbonApi' property for control buttons, ensuring icons appear at different sizes in the contextual ribbon tab. Dependencies include the Office unified manifest, and the snippet requires hosted image resources; it should be placed correctly within the manifest structure for proper ribbon API integration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"ribbons\": [\n    {\n        ...\n        \"tabs\": [\n            \"groups\": [\n                {\n                    \"id\": \"contextualTab\",\n                    ...\n                    \"icons\": [\n                        {\n                            \"size\": 16,\n                            \"url\": \"https://cdn.contoso.com/addins/datainsertion/Images/Group16x16.png\"\n                        },\n                        {\n                            \"size\": 32,\n                            \"url\": \"https://cdn.contoso.com/addins/datainsertion/Images/Group32x32.png\"\n                        },\n                        {\n                            \"size\": 80,\n                            \"url\": \"https://cdn.contoso.com/addins/datainsertion/Images/Group80x80.png\"\n                        }\n                    ],\n                    \"controls\": [\n                        {\n                            \"id\": \"contextualButton\",\n                            ...\n                            \"icons\": [\n                                {\n                                    \"size\": 16,\n                                    \"url\": \"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton16x16.png\"\n                                },\n                                {\n                                    \"size\": 32,\n                                    \"url\": \"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton16x16.png\"\n                                },\n                                {\n                                    \"size\": 80,\n                                    \"url\": \"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton16x16.png\"\n                                }\n                            ],\n                            ...\n                            \"overriddenByRibbonApi\": true\n                        },\n                        ...\n                    ]\n                }\n            ]\n        ]\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from Shared State via Custom Function (JavaScript)\nDESCRIPTION: Implements a custom function `getValue` that returns the current value of the global `window.sharedState` variable. The function is annotated for Office.js custom functions and meant to be placed in the custom functions JavaScript file. It has no parameters and outputs the string stored in shared state. Dependency: global `window.sharedState`. No special setup required if previous initialization is followed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/share-data-and-events-between-custom-functions-and-the-task-pane-tutorial.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Gets a string value from shared state with the task pane\n * @customfunction GETVALUE\n * @returns {string} String value of the shared state with task pane.\n */\nfunction getValue() {\n  return window.sharedState;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying npm Installation - Command Line\nDESCRIPTION: This snippet demonstrates how to check if npm is installed and determine the currently installed version. The command requires a shell environment where the 'npm' executable is on the PATH. It outputs the version number if npm is installed, otherwise returns an error.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/install-node-js.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Creating Ribbon Button Controls for Function Commands - JSON - manifest\nDESCRIPTION: This JSON object specifies a control (button) within a group in the Office Add-in manifest. It includes a unique 'id', 'type', label, icons for various sizes, a supertip with title and description, and an 'actionId' that must match the corresponding runtime configuration. This structure determines button appearance and behavior on the ribbon. All properties must adhere to identifier and length constraints, and icon URLs must use SSL. Input parameters are button metadata and icon links; output is a manifest-ready button definition.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"msgReadSetNotificationButton\",\n    \"type\": \"button\",\n    \"label\": \"Set Notification\",\n    \"icons\": [\n        {\n            \"size\": 16,\n            \"url\": \"https://localhost:3000/assets/icon-16.png\"\n        },\n        {\n            \"size\": 32,\n            \"url\": \"https://localhost:3000/assets/icon-32.png\"\n        },\n        {\n            \"size\": 80,\n            \"url\": \"https://localhost:3000/assets/icon-80.png\"\n        }\n    ],\n    \"supertip\": {\n        \"title\": \"Set Notification\",\n        \"description\": \"Displays a notification message on the current message.\"\n    },\n    \"actionId\": \"SetNotification\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Runtime for Function Command in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet adds a runtime configuration to the 'extensions.runtimes' array in manifest.json. It defines a runtime named 'online_meeting_runtime' that requires Mailbox API version 1.3, runs on desktop, loads code from a specified HTML page ('https://contoso.com/commands.html'), has a short lifetime, and defines an action 'insertContosoMeeting' to execute a function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requirements\": {\n        \"capabilities\": [\n            {\n                \"name\": \"Mailbox\",\n                \"minVersion\": \"1.3\"\n            }\n        ],\n        \"formFactors\": [\n            \"desktop\"\n        ]\n    },\n    \"id\": \"online_meeting_runtime\",\n    \"type\": \"general\",\n    \"code\": {\n        \"page\": \"https://contoso.com/commands.html\"\n    },\n    \"lifetime\": \"short\",\n    \"actions\": [\n        {\n            \"id\": \"insertContosoMeeting\",\n            \"type\": \"executeFunction\",\n            \"displayName\": \"insertContosoMeeting\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Local Web Server and Uninstalling Office Add-in - Command Line\nDESCRIPTION: This command is used to stop the local web server started with npm and, if applicable, also uninstall the Office Add-in from the local Office client. It requires Node.js and npm to be installed and assumes the development server was started with npm (such as npm start). Running npm stop will stop the server process and revert changes made during add-in sideloading. Input is a terminal/command line, and the output is a stopped server and, in certain cases, an uninstalled add-in. This approach does not apply if the add-in was sideloaded manually.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/stop-uninstall-dev-add-in.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Ribbon Structure in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet defines the complete `ribbons` configuration for the `manifest.json` file. It targets the `mailCompose` context, adds controls to the default tab (`TabDefault`) within a custom group (`msgComposeCmdGroup` labeled \"Git the gist\"). It defines two buttons: 'Insert gist' (triggering `TaskPaneRuntimeShow`) and 'Insert default gist' (triggering the `insertDefaultGist` action defined earlier). Icons and supertips are also configured for each button.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"ribbons\": [\n    {\n        \"contexts\": [\n            \"mailCompose\"\n        ],\n        \"tabs\": [\n            {\n                \"builtInTabId\": \"TabDefault\",\n                \"groups\": [\n                    {\n                        \"id\": \"msgComposeCmdGroup\",\n                        \"label\": \"Git the gist\",\n                        \"icons\": [\n                            {\n                                \"size\": 16,\n                                \"file\": \"https://localhost:3000/assets/icon-16.png\"\n                            },\n                            {\n                                \"size\": 32,\n                                \"file\": \"https://localhost:3000/assets/icon-32.png\"\n                            },\n                            {\n                                \"size\": 80,\n                                \"file\": \"https://localhost:3000/assets/icon-80.png\"\n                            }\n                        ],\n                        \"controls\": [\n                            {\n                                \"id\": \"msgComposeInsertGist\",\n                                \"type\": \"button\",\n                                \"label\": \"Insert gist\",\n                                \"icons\": [\n                                    {\n                                        \"size\": 16,\n                                        \"file\": \"https://localhost:3000/assets/icon-16.png\"\n                                    },\n                                    {\n                                        \"size\": 32,\n                                        \"file\": \"https://localhost:3000/assets/icon-32.png\"\n                                    },\n                                    {\n                                        \"size\": 80,\n                                        \"file\": \"https://localhost:3000/assets/icon-80.png\"\n                                    }\n                                ],\n                                \"supertip\": {\n                                    \"title\": \"Insert gist\",\n                                    \"description\": \"Displays a list of your gists and allows you to insert their contents into the current message.\"\n                                },\n                                \"actionId\": \"TaskPaneRuntimeShow\"\n                            },\n                            {\n                                \"id\": \"msgComposeInsertDefaultGist\",\n                                \"type\": \"button\",\n                                \"label\": \"Insert default gist\",\n                                \"icons\": [\n                                    {\n                                        \"size\": 16,\n                                        \"file\": \"https://localhost:3000/assets/icon-16.png\"\n                                    },\n                                    {\n                                        \"size\": 32,\n                                        \"file\": \"https://localhost:3000/assets/icon-32.png\"\n                                    },\n                                    {\n                                        \"size\": 80,\n                                        \"file\": \"https://localhost:3000/assets/icon-80.png\"\n                                    }\n                                ],\n                                \"supertip\": {\n                                    \"title\": \"Insert default gist\",\n                                    \"description\": \"Inserts the content of the gist you mark as default into the current message.\"\n                                },\n                                \"actionId\": \"insertDefaultGist\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-mock Dependency via npm\nDESCRIPTION: This command installs the `office-addin-mock` library as a development dependency for the project using npm. It should be run in the command line from the root directory of the Office Add-in project.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm install office-addin-mock --save-dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Contexts for the Task Pane UI in Office Add-in Manifest (JSON)\nDESCRIPTION: This snippet configures contexts within a manifest, indicating which windows or panes should display the task pane command UI. Acceptable context values include \\\"mailRead\\\", \\\"mailCompose\\\", etc. Dependencies: must be inside a \\\"ribbons\\\" object; each string refers to a supported UI location.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"contexts\": [\n    \"mailRead\"\n],\n```\n\n----------------------------------------\n\nTITLE: Referencing Latest Office.js Library - HTML\nDESCRIPTION: Includes a script tag in the HTML file to load the most recent version of the Office JavaScript API library from the Microsoft CDN. This is essential for ensuring the add-in has access to the latest Office.js features and APIs. The src should always use '/1/' in the CDN path to remain up-to-date; place this tag in the first HTML file loaded by your add-in. No input parameters are needed, and there are no additional dependencies beyond a supported Office Add-in environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-office-hosts-and-api-requirements.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\" type=\\\"text/javascript\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining the Ribbons Array in Office Add-in Manifest (JSON)\nDESCRIPTION: This snippet shows how to create a top-level \\\"ribbons\\\" array in the Office Add-in manifest JSON, which is required to configure UI extensions on the Office ribbon. It illustrates the expected object structure--including \\\"contexts\\\" and \\\"tabs\\\" properties--that will be further detailed in other configuration steps. No specific dependency beyond correct manifest context; must fit within the manifest's \\\"extensions\\\" array.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"ribbons\": [\n    {\n        \"contexts\": [\n            // child objects omitted\n        ],\n        \"tabs\": [\n            // child objects omitted\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Ribbon Groups with Icons and Controls (JSON)\nDESCRIPTION: This snippet defines a group within a ribbon tab for an Office Add-in manifest, including identifiers and required icons across several sizes for optimal UI scaling. The group must have a unique \\\"id\\\" and appropriately sized icons. The \\\"controls\\\" field will contain individual UI definitions such as buttons or menus. Inputs: ID, label, and icon URLs. Limitations: icons must be SSL and recommended label length is 16 characters.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"groups\": [\n    {\n        \"id\": \"msgReadGroup\",\n        \"label\": \"Contoso Add-in\",\n        \"icons\": [\n            {\n                \"size\": 16,\n                \"url\": \"https://localhost:3000/assets/icon-16.png\"\n            },\n            {\n                \"size\": 32,\n                \"url\": \"https://localhost:3000/assets/icon-32.png\"\n            },\n            {\n                \"size\": 80,\n                \"url\": \"https://localhost:3000/assets/icon-80.png\"\n            }\n        ],\n        \"controls\": [\n            {\n                // properties omitted\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Stopping the Local Web Server Before Rebuild\nDESCRIPTION: This command is used in the command prompt to stop the Node.js local web server. This step is necessary after modifying the webpack configuration file (`webpack.config.js`) and before running the build command to ensure the changes are applied correctly.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_54\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Opening Project Folder via VS Code Command Line - Bash\nDESCRIPTION: Demonstrates how to open the current directory in Visual Studio Code from the command line using the 'code .' command. To use this command on Windows, no additional setup is required if VS Code is installed. On Mac, users must first add the command to their PATH by following the official documentation. This approach opens the entire current folder as a project in VS Code. Input is the current terminal directory, and output is the VS Code application opening with that folder loaded.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/vs-code-open-project-via-command-line.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Stop Development Server and Remove Add-in Started with npm start (Shell)\nDESCRIPTION: Stops the development server that was initiated using `npm start` and removes the automatically sideloaded Outlook add-in. This command should be run when testing is complete or the development server needs to be shut down.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/sideload-outlook-add-ins-for-testing.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Importing Add-in Module for Testing in JavaScript\nDESCRIPTION: Imports the specific add-in module containing the function(s) to be tested using the CommonJS `require` syntax. The path `../my-office-add-in` assumes the test file is in a subdirectory relative to the source file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myOfficeAddinFeature = require(\"../my-office-add-in\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Ribbon UI for Function Commands - JSON - manifest\nDESCRIPTION: This snippet provides the structure for the 'ribbons' array as part of an extension object in the Office Add-in manifest. It sets up the necessary placeholders for 'contexts' and 'tabs', which are later detailed elsewhere. Proper use requires associating this with the corresponding runtime and ensuring compliance with schema validation. This structural pattern establishes where command UI will be placed and how ribbon elements are grouped.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"ribbons\": [\n    {\n        \"contexts\": [\n            // child objects omitted\n        ],\n        \"tabs\": [\n            // child objects omitted\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory using Command Line\nDESCRIPTION: This snippet provides the command to navigate into the newly created Outlook add-in project's root directory. It is essential, after generating the project files, to move into this folder using the specified path before running further commands or modifying project code. The expected input is the name of your project surrounded by quotes if it contains spaces (here, 'My Office Add-in').\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/outlook-quickstart-yo.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Turning Off Worksheet Gridlines - Excel JavaScript API - JavaScript\nDESCRIPTION: This code sample uses the Excel JavaScript API to hide worksheet gridlines by setting the showGridlines property to false. Intended for scenarios where gridlines distract from report content, this change updates the worksheet for all users. Requires preview API support and a valid Excel context/session. The input is a boolean; the expected output is a worksheet with gridlines hidden until the property is reset.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheet-display.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = false;\n    await context.sync();\n});  \n```\n\n----------------------------------------\n\nTITLE: Running Yeoman Generator Without Installing Dependencies - Command Line\nDESCRIPTION: This snippet illustrates how to create a new Office Add-in project using the Yeoman Generator while postponing dependency installation by adding the '--skip-install' parameter. This is useful when the user wants to set up project scaffolding but defer 'npm install' for later. It maintains otherwise identical project setup behavior to the default command, and dependencies can be manually installed after creation. This approach is advantageous for customization or when network access to npm is temporarily unavailable.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/yeoman-generator-overview.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nyo office --skip-install\n\n```\n\n----------------------------------------\n\nTITLE: Defining Task Pane Layout in HTML for Outlook Add-in\nDESCRIPTION: This HTML snippet specifies the markup for the add-in's task pane, displaying key properties of a selected Outlook message such as Id, Subject, Message Id, and From. No external dependencies outside standard HTML and Office Add-in context are required. IDs for labels facilitate dynamic content injection via JavaScript, and table structure ensures readability. Input is handled elsewhere; the output is a static layout with designated elements for runtime updates.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/outlook-quickstart-vs.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<body class=\\\"ms-font-m ms-welcome\\\">\\n    <div class=\\\"ms-Fabric content-main\\\">\\n        <h1 class=\\\"ms-font-xxl\\\">Message properties</h1>\\n        <table class=\\\"ms-Table ms-Table--selectable\\\">\\n            <thead>\\n                <tr>\\n                    <th>Property</th>\\n                    <th>Value</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr>\\n                    <td><strong>Id</strong></td>\\n                    <td class=\\\"prop-val\\\"><code><label id=\\\"item-id\\\"></label></code></td>\\n                </tr>\\n                <tr>\\n                    <td><strong>Subject</strong></td>\\n                    <td class=\\\"prop-val\\\"><code><label id=\\\"item-subject\\\"></label></code></td>\\n                </tr>\\n                <tr>\\n                    <td><strong>Message Id</strong></td>\\n                    <td class=\\\"prop-val\\\"><code><label id=\\\"item-internetMessageId\\\"></label></code></td>\\n                </tr>\\n                <tr>\\n                    <td><strong>From</strong></td>\\n                    <td class=\\\"prop-val\\\"><code><label id=\\\"item-from\\\"></label></code></td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </div>\\n</body>\n```\n\n----------------------------------------\n\nTITLE: Returning a Horizontal Dynamic Array in JavaScript Excel Custom Function\nDESCRIPTION: This JavaScript custom function (`@customfunction`) returns a two-dimensional array `[['first', 'second', 'third']]` designed to spill horizontally into adjacent cells to the right of the formula cell in Excel. It depends on the Excel custom functions runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-dynamic-arrays.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Get text values that spill to the right.\n * @customfunction\n * @returns {string[][]} A dynamic array with multiple results.\n */\nfunction spillRight() {\n  return [['first', 'second', 'third']];\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Office JS Binding by ID via getByIdAsync (JavaScript)\nDESCRIPTION: This code snippet demonstrates retrieving a specific binding object by its unique ID ('myBinding') using the `Bindings.getByIdAsync` method. The callback function receives the result, checks the status, and if successful, logs the type and ID of the retrieved binding using the `write` helper function. Requires the Office JS API and an existing binding with the ID 'myBinding'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nOffice.context.document.bindings.getByIdAsync('myBinding', function (asyncResult) {\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n        write('Action failed. Error: ' + asyncResult.error.message);\n    }\n    else {\n        write('Retrieved binding with type: ' + asyncResult.value.type + ' and id: ' + asyncResult.value.id);\n    }\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Stopping Debugging Session via npm\nDESCRIPTION: Executes the 'stop' script defined in package.json. This command is intended to terminate the running Excel process (if started by a start script) and stop any associated debugging or server processes. Requires Node.js, npm, and a configured 'stop' script in package.json.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm run stop\n```\n\n----------------------------------------\n\nTITLE: Getting Data Range for Chart - Office.js JavaScript\nDESCRIPTION: Retrieves the data body (excluding header) of the 'ExpensesTable' to use as a source for charting. Uses Table.getDataBodyRange(), which ensures only actual data rows are included, suitable for visualizing data in Excel chart objects. Assumes both the table and worksheet exist and are accessible through the current Excel context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\\nconst expensesTable = currentWorksheet.tables.getItem('ExpensesTable');\\nconst dataRange = expensesTable.getDataBodyRange();\n```\n\n----------------------------------------\n\nTITLE: Applying Uniform Cell Formatting to PowerPoint Table (JavaScript)\nDESCRIPTION: This code applies the same fill and font style to all cells in a PowerPoint table using the TableAddOptions.uniformCellProperties property. All table cells are filled with dark slate blue color and bold white text. The example highlights bulk application of cell formats. Prerequisites: PowerPoint JavaScript API, properly initialized slide context. Inputs: row and column counts, values array, and uniformCellProperties object.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rowCount = 3;\nconst columnCount = 4;\nconst options: PowerPoint.TableAddOptions = {\n    values: [\n        [\"1\", \"2\", \"\", \"4\"],\n        [\"5\", \"6\", \"7\", \"8\"],\n        [\"9\", \"10\", \"11\", \"12\"]\n    ],\n    uniformCellProperties: {\n        fill: { color: \"darkslateblue\" },\n        font: { bold: true, color: \"white\" }\n    }\n};\nawait insertTableOnCurrentSlide(rowCount, columnCount, options);\n```\n\n----------------------------------------\n\nTITLE: Creating Localization Resource File in JavaScript\nDESCRIPTION: This JavaScript code defines an immediately invoked function expression (IIFE) that creates a `UIStrings` object. This object serves as a resource container for localized UI strings. It includes nested JSON objects (`EN`, `ES`) for English and Spanish locales, respectively, each containing key-value pairs for greeting and introduction text. A `getLocaleStrings` function is provided to retrieve the appropriate language object based on a given locale string (e.g., 'en-US', 'es-ES'), defaulting to English ('EN') if the locale is not explicitly handled.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n/* Store the locale-specific strings */\n\nconst UIStrings = (() => {\n    \"use strict\";\n\n    const UIStrings = {};\n\n    // JSON object for English strings\n    UIStrings.EN = {\n        \"Greeting\": \"Welcome\",\n        \"Introduction\": \"This is my localized add-in.\"\n    };\n\n    // JSON object for Spanish strings\n    UIStrings.ES = {\n        \"Greeting\": \"Bienvenido\",\n        \"Introduction\": \"Esta es mi aplicaci\\u00f3n localizada.\"\n    };\n\n    UIStrings.getLocaleStrings = (locale) => {\n        let text;\n\n        // Get the resource strings that match the language.\n        switch (locale) {\n            case 'en-US':\n                text = UIStrings.EN;\n                break;\n            case 'es-ES':\n                text = UIStrings.ES;\n                break;\n            default:\n                text = UIStrings.EN;\n                break;\n        }\n\n        return text;\n    };\n\n    return UIStrings;\n})();\n```\n\n----------------------------------------\n\nTITLE: Returning a Streaming Vertical Dynamic Array in JavaScript Excel Custom Function\nDESCRIPTION: This JavaScript custom function (`@customfunction`) demonstrates a streaming dynamic array. It takes an `amount` and a `CustomFunctions.StreamingInvocation` object. Every second, it increments three internal values by the `amount` and sends the updated results as a vertically spilling array `[[firstResult], [secondResult], [thirdResult]]` back to Excel using `invocation.setResult`. It includes cleanup logic using `invocation.onCanceled` to clear the interval timer. Requires Excel's streaming custom function support.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-dynamic-arrays.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Increment the cells with a given amount every second. Creates a dynamic spilled array with multiple results\n * @customfunction\n * @param {number} amount The amount to add to the cell value on each increment.\n * @param {CustomFunctions.StreamingInvocation<number[][]>} invocation Parameter to send results to Excel or respond to the user canceling the function. A dynamic array.\n */\nfunction increment(amount: number, invocation: CustomFunctions.StreamingInvocation<number[][]>): void {\n  let firstResult = 0;\n  let secondResult = 1;\n  let thirdResult = 2;\n\n  const timer = setInterval(() => {\n    firstResult += amount;\n    secondResult += amount;\n    thirdResult += amount;\n    invocation.setResult([[firstResult], [secondResult], [thirdResult]]);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Passing asyncContext to addFileAttachmentAsync - Office.js - JavaScript\nDESCRIPTION: Demonstrates attaching a file to a compose form in Outlook using Office.context.mailbox.item.addFileAttachmentAsync, passing optional asyncContext parameters for use within the callback. Requires Office.js loaded in the context of an Outlook add-in compose form. Inputs include the file URI and display name. Outputs are handled via the AsyncResult object provided to the callback. Limitations include dependency on platform support per requirement set and session validity for attachment IDs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-and-remove-attachments-to-an-item-in-a-compose-form.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = { asyncContext: { var1: 1, var2: 2 } };\n\nOffice.context.mailbox.item.addFileAttachmentAsync(\"https://contoso.com/rtm/icon.png\", \"icon.png\", options, callback);\n```\n\n----------------------------------------\n\nTITLE: Opening Workbook from File using FileReader and Excel.createWorkbook - JavaScript\nDESCRIPTION: Demonstrates how to open a workbook from a user-selected file. A FileReader object reads the selected file as a base64-encoded string, stripping out URL metadata before passing it to Excel.createWorkbook for loading into a new workbook instance. Runs in a browser environment with access to DOM APIs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Retrieve the external workbook file and set up a `FileReader` object. \\nlet myFile = document.getElementById(\\\"file\\\");\\nlet reader = new FileReader();\\n\\nreader.onload = (function (event) {\\n    Excel.run(function (context) {\\n        // Remove the metadata before the base64-encoded string.\\n        let startIndex = reader.result.toString().indexOf(\\\"base64,\\\");\\n        let externalWorkbook = reader.result.toString().substr(startIndex + 7);\\n\\n        Excel.createWorkbook(externalWorkbook);\\n        return context.sync();\\n    });\\n});\\n\\n// Read the file as a data URL so we can parse the base64-encoded string.\\nreader.readAsDataURL(myFile.files[0]);\n```\n\n----------------------------------------\n\nTITLE: Fetching Bing Image from Server and Invoking Insertion (JavaScript)\nDESCRIPTION: This function in JavaScript, leveraging jQuery's $.ajax, asynchronously requests the base64 image string from the /api/photo/ endpoint. On success, it calls insertImageFromBase64String; on failure, it notifies the user. Dependencies: jQuery, Office.js, PhotoController API. It expects the endpoint to return plain text (base64); error handling is basic and could be enhanced.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfunction insertImage() {\\n    // Get image from web service (as a Base64-encoded string).\\n    $.ajax({\\n        url: \"/api/photo/\",\\n        dataType: \"text\",\\n        success: function (result) {\\n            insertImageFromBase64String(result);\\n        }, error: function (xhr, status, error) {\\n            showNotification(\"Error\", \"Oops, something went wrong.\");\\n        }\\n    });\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Deleting an Excel PivotTable by Name using Office JS API\nDESCRIPTION: This snippet demonstrates how to delete a PivotTable. It accesses the PivotTable named \"Farm Sales\" located on the worksheet named \"Pivot\" and calls the `delete()` method on it. Requires a worksheet named \"Pivot\" containing a PivotTable named \"Farm Sales\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    context.workbook.worksheets.getItem(\"Pivot\").pivotTables.getItem(\"Farm Sales\").delete();\n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Data from Dialog to Parent Page and Error Handling in JavaScript\nDESCRIPTION: This JavaScript code defines the `sendStringToParentPage` function, which retrieves the value from the 'name-box' input field and uses `Office.context.ui.messageParent()` to send this value (as a string) back to the task pane that opened the dialog. It also includes a reusable `tryCatch` helper function for basic error handling, logging errors to the console. This code replaces `TODO2`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_49\n\nLANGUAGE: js\nCODE:\n```\nfunction sendStringToParentPage() {\n    const userName = document.getElementById(\"name-box\").value;\n    Office.context.ui.messageParent(userName);\n}\n\n/** Default helper for invoking an action and handling errors. */\nasync function tryCatch(callback) {\n    try {\n        await callback();\n    } catch (error) {\n        // Note: In a production add-in, you'd want to notify the user through your add-in's UI.\n        console.error(error);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Admin Consent URI - Microsoft Identity Platform - HTML\nDESCRIPTION: This HTML URI pattern provides a template for constructing the admin consent URL for Microsoft identity platform, enabling Office Add-in publishers to prompt tenant admins for Graph API scopes. Required parameters are 'client_id' (the app registration ID), 'scope' (space-delimited permission scopes such as 'openid', 'profile', and 'offline_access'), and 'redirect_uri' (the URL to redirect to after consent). Input parameters must be URL-encoded and the redirect page must be configured as an allowed redirect in the app registration. This URI is intended for direct use in hyperlinks or documentation, not as embedded HTML markup.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-nested-app-auth-add-in.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nhttps://login.microsoftonline.com/organizations/v2.0/adminconsent?client_id={client_id}&scope={scopes}&redirect_uri={redirect_uri}\n```\n\n----------------------------------------\n\nTITLE: Integrating Built-in Office Control into Custom Group (XML Manifest)\nDESCRIPTION: This XML snippet illustrates how to insert a built-in Office control (e.g., 'Superscript') into a custom control group defined in an Office Add-in's XML manifest. This is achieved by adding an `<OfficeControl>` element as a child of the `<Group>` element, identifying the specific built-in control using its `id` attribute.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/built-in-button-integration.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ExtensionPoint xsi:type=\"ContosoRibbonTab\">\n  <CustomTab id=\"Contoso.TabCustom2\">\n    <Group id=\"Contoso.TabCustom2.group1\">\n        <Label resid=\"residCustomTabGroupLabel\"/>\n        <Icon>\n            <bt:Image size=\"16\" resid=\"blue-icon-16\" />\n            <bt:Image size=\"32\" resid=\"blue-icon-32\" />\n            <bt:Image size=\"80\" resid=\"blue-icon-80\" />\n        </Icon>\n        <Control xsi:type=\"Button\" id=\"Contoso.Button1\">\n            <!-- Information on the control omitted. -->\n        </Control>\n        <OfficeControl id=\"Superscript\" />\n        <!-- Other controls, as needed. -->\n    </Group>\n    <Label resid=\"customTabLabel1\" />\n  </CustomTab>\n</ExtensionPoint>\n```\n\n----------------------------------------\n\nTITLE: Switching to a Branch in Git - Bash\nDESCRIPTION: This Bash command uses 'git checkout' to switch the active working branch to '<new branch name>'. After creating or pulling a branch, using this command sets the context for editing and committing, ensuring changes apply to the intended branch. It requires the branch to exist locally.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <new branch name>\n```\n\n----------------------------------------\n\nTITLE: Checking Touch Support in Office Add-ins using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to check if the host Office application environment supports touch input using the `Office.context.touchEnabled` property. This is particularly useful for adapting UI elements for touch devices like iPads, where this property typically returns `true`. It depends on the Office JavaScript API (`Office.context`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/develop-office-add-ins-for-the-ipad.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isTouchEnabled = [Office.context.touchEnabled](/javascript/api/office/office.context#office-office-context-touchenabled-member)\n```\n\n----------------------------------------\n\nTITLE: Running Unicode Analysis and Consuming REST API in Office Add-in (JavaScript)\nDESCRIPTION: This JavaScript code manages UI initialization and sends a REST API request to analyze the Unicode values of the selected Excel cell's content. It uses the Office.js Excel Object Model to get the selected range, constructs the REST endpoint URL using the SSL port, and sends an AJAX GET request. The returned .NET-formatted string is processed to replace '\\r\\n' with '<br>' for HTML display. Dependencies: Office.js, jQuery, the REST API backend. Inputs are provided via selected Excel cell values; on success, Unicode results are displayed, and errors update the info panel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n(function () {\n  \"use strict\";\n  // The initialize function must be run each time a new page is loaded.\n  Office.initialize = function (reason) {\n    $(document).ready(function () {\n    });\n  };\n})();\n\nfunction showUnicode() {\n  Excel.run(function (context) {\n    const range = context.workbook.getSelectedRange();\n    range.load(\"values\");\n    return context.sync(range).then(function (range) {\n      const url = \"https://localhost:<ssl port number>/api/analyzeunicode?value=\" + range.values[0][0];\n      $.ajax({\n        type: \"GET\",\n        url: url,\n        success: function (data) {\n          let htmlData = data.replace(/\\r\\n/g, '<br>');\n          $(\"#txtResult\").html(htmlData);\n        },\n        error: function (data) {\n            $(\"#txtResult\").html(\"error occurred in ajax call.\");\n        }\n      });\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an Office Add-in Runtime for ExecuteFunction Action in JSON Manifest\nDESCRIPTION: This JSON snippet, part of the `extension.runtimes` array in the `manifest.json` file, defines a runtime environment required for add-in commands that execute a function (`\"type\": \"executeFunction\"`). It specifies the HTML page and JavaScript file (`code.page`, `code.script`) that contain the command's logic, sets a short lifetime, and associates the action ID \"insertHelloWorld\" with this runtime. This allows the Office host to execute the corresponding TypeScript function in a separate process.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/outlook-quickstart-json-manifest-typescript.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"ComposeCommandsRuntime\",\n    \"type\": \"general\",\n    \"code\": {\n        \"page\": \"https://localhost:3000/commands.html\",\n        \"script\": \"https://localhost:3000/commands.js\"\n    },\n    \"lifetime\": \"short\",\n    \"actions\": [\n        {\n            \"id\": \"insertHelloWorld\",\n            \"type\": \"executeFunction\",\n            \"displayName\": \"insertHelloWorld\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Ribbon Button for Mail Compose Context in JSON Manifest\nDESCRIPTION: This JSON snippet, added to the `extension.ribbons` array in the `manifest.json`, defines a custom user interface element for an Office Add-in. It specifies that a new ribbon group (\"Contoso Add-in\") with a button (\"Insert text\") should appear only in the mail compose context (`\"contexts\": [\"mailCompose\"]`). The button's `actionId` property links it to the \"insertHelloWorld\" action, triggering the associated function when clicked. Icon URLs and tooltip text are also defined.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/outlook-quickstart-json-manifest-typescript.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"contexts\": [\"mailCompose\"],\n    \"tabs\": [\n        {\n            \"builtInTabId\": \"TabDefault\",\n            \"groups\": [\n                {\n                    \"id\": \"msgWriteGroup\",\n                    \"label\": \"Contoso Add-in\",\n                    \"icons\": [\n                        { \"size\": 16, \"url\": \"https://localhost:3000/assets/icon-16.png\" },\n                        { \"size\": 32, \"url\": \"https://localhost:3000/assets/icon-32.png\" },\n                        { \"size\": 80, \"url\": \"https://localhost:3000/assets/icon-80.png\" }\n                    ],\n                    \"controls\": [\n                        {\n                            \"id\": \"HelloWorldButton\",\n                            \"type\": \"button\",\n                            \"label\": \"Insert text\",\n                            \"icons\": [\n                                { \"size\": 16, \"url\": \"https://localhost:3000/assets/icon-16.png\" },\n                                { \"size\": 32, \"url\": \"https://localhost:3000/assets/icon-32.png\" },\n                                { \"size\": 80, \"url\": \"https://localhost:3000/assets/icon-80.png\" }\n                            ],\n                            \"supertip\": {\n                                \"title\": \"Insert text\",\n                                \"description\": \"Inserts some text.\"\n                            },\n                            \"actionId\": \"insertHelloWorld\"\n                        }                  \n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Task Pane Interface for Office Add-in using HTML\nDESCRIPTION: This HTML code defines the layout of a task pane for an Office Add-in that integrates with the GitHub Gists API. It sets up the structure, including placeholders for gist lists, settings, and error display, and loads necessary external dependencies: Office.js, jQuery, Showdown, URI.js, add-in configuration scripts, and CSS for both the Office Fabric UI and the task pane. All required scripts and styles must be present at the specified paths. User interaction is handled via elements with distinct IDs for button clicks and dynamic content injection.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_30\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n    <title>Contoso Task Pane Add-in</title>\\n\\n    <!-- Office JavaScript API -->\\n    <script type=\\\"text/javascript\\\" src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"></script>\\n\\n   <!-- For more information on Fluent UI, visit https://developer.microsoft.com/fluentui. -->\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/>\\n\\n    <!-- Template styles -->\\n    <link href=\\\"taskpane.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\\n</head>\\n\\n<body class=\\\"ms-font-l ms-landing-page\\\">\\n  <main class=\\\"ms-landing-page__main\\\">\\n    <section class=\\\"ms-landing-page__content ms-font-m ms-fontColor-neutralPrimary\\\">\\n      <div id=\\\"not-configured\\\" style=\\\"display: none;\\\">\\n        <div class=\\\"centered ms-font-xxl ms-u-textAlignCenter\\\">Welcome!</div>\\n        <div class=\\\"ms-font-xl\\\" id=\\\"settings-prompt\\\">Please choose the <strong>Settings</strong> icon at the bottom of this window to configure this add-in.</div>\\n      </div>\\n      <div id=\\\"gist-list-container\\\" style=\\\"display: none;\\\">\\n        <form>\\n          <div id=\\\"gist-list\\\">\\n          </div>\\n        </form>\\n      </div>\\n      <div id=\\\"error-display\\\" style=\\\"display: none;\\\" class=\\\"ms-u-borderBase ms-fontColor-error ms-font-m ms-bgColor-error ms-borderColor-error\\\">\\n      </div>\\n    </section>\\n    <button class=\\\"ms-Button ms-Button--primary\\\" id=\\\"insert-button\\\" tabindex=0 disabled>\\n      <span class=\\\"ms-Button-label\\\">Insert</span>\\n    </button>\\n  </main>\\n  <footer class=\\\"ms-landing-page__footer ms-bgColor-themePrimary\\\">\\n    <div class=\\\"ms-landing-page__footer--left\\\">\\n      <img src=\\\"../../assets/logo-filled.png\\\" />\\n      <h1 class=\\\"ms-font-xl ms-fontWeight-semilight ms-fontColor-white\\\">Git the gist</h1>\\n    </div>\\n    <div id=\\\"settings-icon\\\" class=\\\"ms-landing-page__footer--right\\\" aria-label=\\\"Settings\\\" tabindex=0>\\n      <i class=\\\"ms-Icon enlarge ms-Icon--Settings ms-fontColor-white\\\"></i>\\n    </div>\\n  </footer>\\n  <script type=\\\"text/javascript\\\" src=\\\"../../node_modules/jquery/dist/jquery.js\\\"></script>\\n  <script type=\\\"text/javascript\\\" src=\\\"../../node_modules/showdown/dist/showdown.min.js\\\"></script>\\n  <script type=\\\"text/javascript\\\" src=\\\"../../node_modules/urijs/src/URI.min.js\\\"></script>\\n  <script type=\\\"text/javascript\\\" src=\\\"../helpers/addin-config.js\\\"></script>\\n  <script type=\\\"text/javascript\\\" src=\\\"../helpers/gist-api.js\\\"></script>\\n  <script type=\\\"text/javascript\\\" src=\\\"taskpane.js\\\"></script>\\n</body>\\n\\n</html>\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Sign-in and Redirection for WebView2 Password Autosave in JavaScript\nDESCRIPTION: Demonstrates the JavaScript logic for a sign-in button's click event handler. It retrieves user credentials from corresponding HTML inputs (IDs 'username', 'password'), calls an asynchronous authentication function (represented by `signInUser`), and redirects to a success page (`/home.html`) using `window.location.href`. This redirection after successful sign-in is crucial as it signals WebView2 to prompt the user to save the entered password.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/auth-save-passwords.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nasync function btnSignIn() {\n  // Get the username and password credentials entered by the user.\n  const username = document.getElementById(\"username\").value;\n  const pwd = document.getElementById(\"password\").value;\n\n  try {\n    // Sign in the user. This is a placeholder for the actual sign-in logic.\n    await signInUser(username, pwd);\n\n    // Redirect to a success page to trigger the password autosave.\n    window.location.href = \"/home.html\";\n  }\n  catch (error) {\n    console.error(\"Sign in failed: \" + error);\n    return;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Hero Typography Style with Fabric Core CSS\nDESCRIPTION: Applies the 'Hero' typography style (28px, Segoe Light) using the Fabric Core CSS class `.ms-font-xxl`. Recommended for prominent elements like first-run messages or calls to action, but should be used sparingly due to its large size to avoid unseating visual hierarchy. Ensure ample whitespace and avoid long strings in constrained spaces. Text color needs to be applied separately (e.g., using Fabric Core's 'neutral primary').\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/add-in-typography.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.ms-font-xxl\n```\n\n----------------------------------------\n\nTITLE: Set Label Resource ID for Button Label (XML)\nDESCRIPTION: Demonstrates how to set the label for the ribbon button using a resource ID instead of a plain string. This refers to a short string resource defined elsewhere in the manifest, supporting localization and reuse. The ID must be unique and will be defined in the bt:ShortStrings section.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<Label resid=\\\"ProtectionButtonLabel\\\" /\\u003e\n```\n\n----------------------------------------\n\nTITLE: Replacing VersionOverrides Node in manifest.xml for Desktop Configuration\nDESCRIPTION: This XML snippet provides a complete `<VersionOverrides>` block for an Outlook Add-in's `manifest.xml` file, designed to replace any existing `<VersionOverrides>`. It configures the add-in primarily for the desktop form factor, defining requirements (Mailbox API 1.3+), the host application (Outlook MailHost), the desktop extension point (`AppointmentOrganizerCommandSurface`), a command button within the default tab, and associated resources like icons, function file URL, and UI strings.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n    <Description resid=\"residDescription\"></Description>\n    <Requirements>\n      <bt:Sets>\n        <bt:Set Name=\"Mailbox\" MinVersion=\"1.3\"/>\n      </bt:Sets>\n    </Requirements>\n    <Hosts>\n      <Host xsi:type=\"MailHost\">\n        <DesktopFormFactor>\n          <FunctionFile resid=\"residFunctionFile\"/>\n          <ExtensionPoint xsi:type=\"AppointmentOrganizerCommandSurface\">\n            <OfficeTab id=\"TabDefault\">\n              <Group id=\"apptComposeGroup\">\n                <Label resid=\"residDescription\"/>\n                <Control xsi:type=\"Button\" id=\"insertMeetingButton\">\n                  <Label resid=\"residLabel\"/>\n                  <Supertip>\n                    <Title resid=\"residLabel\"/>\n                    <Description resid=\"residTooltip\"/>\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"icon-16\"/>\n                    <bt:Image size=\"32\" resid=\"icon-32\"/>\n                    <bt:Image size=\"64\" resid=\"icon-64\"/>\n                    <bt:Image size=\"80\" resid=\"icon-80\"/>\n                  </Icon>\n                  <Action xsi:type=\"ExecuteFunction\">\n                    <FunctionName>insertContosoMeeting</FunctionName>\n                  </Action>\n                </Control>\n              </Group>\n            </OfficeTab>\n          </ExtensionPoint>\n        </DesktopFormFactor>\n      </Host>\n    </Hosts>\n    <Resources>\n      <bt:Images>\n        <bt:Image id=\"icon-16\" DefaultValue=\"https://contoso.com/assets/icon-16.png\"/>\n        <bt:Image id=\"icon-32\" DefaultValue=\"https://contoso.com/assets/icon-32.png\"/>\n        <bt:Image id=\"icon-48\" DefaultValue=\"https://contoso.com/assets/icon-48.png\"/>\n        <bt:Image id=\"icon-64\" DefaultValue=\"https://contoso.com/assets/icon-64.png\"/>\n        <bt:Image id=\"icon-80\" DefaultValue=\"https://contoso.com/assets/icon-80.png\"/>\n      </bt:Images>\n      <bt:Urls>\n        <bt:Url id=\"residFunctionFile\" DefaultValue=\"https://contoso.com/commands.html\"/>\n      </bt:Urls>\n      <bt:ShortStrings>\n        <bt:String id=\"residDescription\" DefaultValue=\"Contoso meeting\"/>\n        <bt:String id=\"residLabel\" DefaultValue=\"Add meeting\"/>\n      </bt:ShortStrings>\n      <bt:LongStrings>\n        <bt:String id=\"residTooltip\" DefaultValue=\"Add a contoso meeting to this appointment.\"/>\n      </bt:LongStrings>\n    </Resources>\n  </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Getting All Office JS Bindings (JavaScript)\nDESCRIPTION: This code snippet retrieves all active bindings within the current Office document using the `Bindings.getAllAsync` method. The callback function receives an `asyncResult` object containing an array of binding objects. It iterates through this array, constructs a string of all binding IDs, and displays it using the helper `write` function. Requires the Office JS API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nOffice.context.document.bindings.getAllAsync(function (asyncResult) {\n    let bindingString = '';\n    for (let i in asyncResult.value) {\n        bindingString += asyncResult.value[i].id + '\\n';\n    }\n    write('Existing bindings: ' + bindingString);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring LaunchEvent Extension Point in Add-in Manifest (XML)\nDESCRIPTION: Enables event-based activation for Outlook mobile add-ins using the add-in only (XML) manifest. This requires declaring the `LaunchEvent` extension point within the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\nLaunchEvent\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom XML Part and Displaying Its Content - JavaScript\nDESCRIPTION: This snippet adds a new custom XML part to a Word (or compatible) document using the Office.js CustomXmlParts API, and then outputs its ID and content to two elements on the HTML page. The XML string must have an xmlns attribute. Methods used are addAsync for creation and getXmlAsync for retrieval. Requires jQuery for DOM updates and Office.js APIs enabled.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createCustomXmlPart() {\n    const xmlString = \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n    Office.context.document.customXmlParts.addAsync(xmlString,\n        (asyncResult) => {\n            $(\"#xml-id\").text(\"Your new XML part's ID: \" + asyncResult.value.id);\n            asyncResult.value.getXmlAsync(\n                (asyncResult) => {\n                    $(\"#xml-blob\").text(asyncResult.value);\n                }\n            );\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Event Handler Name with JavaScript Function using Office.actions.associate (JavaScript)\nDESCRIPTION: Demonstrates the required call to `Office.actions.associate` within the event-handling JavaScript file. This function maps the handler name specified in the add-in manifest (e.g., \"onNewMessageComposeHandler\") to the actual JavaScript function implementation (e.g., `onNewMessageComposeHandler`). This association is necessary for the Outlook client to correctly trigger the add-in's code when the specified event occurs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/troubleshoot-event-based-and-spam-reporting-add-ins.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nOffice.actions.associate(\"onNewMessageComposeHandler\", onNewMessageComposeHandler);\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Parameter in a JavaScript Custom Function\nDESCRIPTION: This JavaScript code defines an Excel custom function `add` that takes two required numbers and one optional number. If the third parameter `third` is omitted by the user, Excel passes `null`. The function checks for `null` and defaults it to 0 before calculating the sum. The JSDoc comment `@param {number} [third]` marks the parameter as optional.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Calculates the sum of the specified numbers\n * @customfunction\n * @param {number} first First number.\n * @param {number} second Second number.\n * @param {number} [third] Third number to add. If omitted, third = 0.\n * @returns {number} The sum of the numbers.\n */\nfunction add(first, second, third) {\n  if (third === null) {\n    third = 0;\n  }\n  return first + second + third;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Office Add-in Task Pane with CSS\nDESCRIPTION: This CSS code defines the visual appearance and layout for an Office Add-in task pane, replacing the default styles in `taskpane.css`. It includes base styles for HTML and body, layout rules using flexbox for a landing page structure (`ms-landing-page`), styles for specific UI elements like buttons (`#insert-button`), error displays (`#error-display`), lists (`.ms-ListItem`), and utility classes. It assumes a corresponding HTML structure and leverages Office UI Fabric class names.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n/* Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license in root of repo. */\nhtml, body {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  overflow: auto; }\n\nbody {\n  position: relative;\n  font-size: 16px; }\n\nmain {\n  height: 100%;\n  overflow-y: auto; }\n\nfooter {\n  width: 100%;\n  position: relative;\n  bottom: 0;\n  margin-top: 10px;}\n\np, h1, h2, h3, h4, h5, h6 {\n  margin: 0;\n  padding: 0; }\n\nul {\n  padding: 0; }\n\n#settings-prompt {\n  margin: 10px 0;\n}\n\n#error-display {\n  padding: 10px;\n}\n\n#insert-button {\n  margin: 0 10px;\n}\n\n.clearfix {\n  display: block;\n  clear: both;\n  height: 0; }\n\n.pointerCursor {\n  cursor: pointer; }\n\n.invisible {\n  visibility: hidden; }\n\n.undisplayed {\n  display: none; }\n\n.ms-Icon.enlarge {\n  position: relative;\n  font-size: 20px;\n  top: 4px; }\n\n.ms-ListItem-secondaryText,\n.ms-ListItem-tertiaryText {\n  padding-left: 15px;\n}\n\n.ms-landing-page {\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-direction: column;\n          flex-direction: column;\n  -webkit-flex-wrap: nowrap;\n          flex-wrap: nowrap;\n  height: 100%; }\n\n.ms-landing-page__main {\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-direction: column;\n          flex-direction: column;\n  -webkit-flex-wrap: nowrap;\n          flex-wrap: nowrap;\n  -webkit-flex: 1 1 0;\n          flex: 1 1 0;\n  height: 100%; }\n\n.ms-landing-page__content {\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-direction: column;\n          flex-direction: column;\n  -webkit-flex-wrap: nowrap;\n          flex-wrap: nowrap;\n  height: 100%;\n  -webkit-flex: 1 1 0;\n          flex: 1 1 0;\n  padding: 20px; }\n\n.ms-landing-page__content h2 {\n  margin-bottom: 20px; }\n\n.ms-landing-page__footer {\n  display: -webkit-inline-flex;\n  display: inline-flex;\n  -webkit-justify-content: center;\n          justify-content: center;\n  -webkit-align-items: center;\n          align-items: center; }\n\n.ms-landing-page__footer--left {\n  transition: background ease 0.1s, color ease 0.1s;\n  display: -webkit-inline-flex;\n  display: inline-flex;\n  -webkit-justify-content: flex-start;\n          justify-content: flex-start;\n  -webkit-align-items: center;\n          align-items: center;\n  -webkit-flex: 1 0 0px;\n          flex: 1 0 0px;\n  padding: 20px; }\n\n.ms-landing-page__footer--left:active {\n  cursor: default; }\n\n.ms-landing-page__footer--left--disabled {\n  opacity: 0.6;\n  pointer-events: none;\n  cursor: not-allowed; }\n\n.ms-landing-page__footer--left--disabled:active, .ms-landing-page__footer--left--disabled:hover {\n  background: transparent; }\n\n.ms-landing-page__footer--left img {\n  width: 40px;\n  height: 40px; }\n\n.ms-landing-page__footer--left h1 {\n  -webkit-flex: 1 0 0px;\n          flex: 1 0 0px;\n  margin-left: 15px;\n  text-align: left;\n  width: auto;\n  max-width: auto;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis; }\n\n.ms-landing-page__footer--right {\n  transition: background ease 0.1s, color ease 0.1s;\n  padding: 29px 20px; }\n\n.ms-landing-page__footer--right:active, .ms-landing-page__footer--right:hover {\n  background: #005ca4;\n  cursor: pointer; }\n\n.ms-landing-page__footer--right:active {\n  background: #005ca4; }\n\n.ms-landing-page__footer--right--disabled {\n  opacity: 0.6;\n  pointer-events: none;\n  cursor: not-allowed; }\n\n.ms-landing-page__footer--right--disabled:active, .ms-landing-page__footer--right--disabled:hover {\n  background: transparent; }\n```\n\n----------------------------------------\n\nTITLE: Defining Async filterTable Function - Office.js JavaScript\nDESCRIPTION: Introduces the core async function filterTable, designed to queue filter operations for an Excel table. The function runs inside an Excel.run context for proper context marshaling in Office.js. Placeholder comments indicate spots for filtering logic; context.sync ensures that queued commands are sent to Excel. This function expects to be called in response to a UI action, and must be registered as an event handler. Assumes Office.js is available and that an Excel table is present in the workbook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync function filterTable() {\\n    await Excel.run(async (context) => {\\n\\n        // TODO1: Queue commands to filter out all expense categories except\\n        //        Groceries and Education.\\n\\n        await context.sync();\\n    });\\n}\n```\n\n----------------------------------------\n\nTITLE: Delayed Second Dialog Opening Using setTimeout - Office.js - JavaScript\nDESCRIPTION: Shows an alternative timing technique for ensuring that the first Office Dialog is closed before opening a second, by introducing a delay with setTimeout. After closing the initial dialog, the second dialog is opened after a fixed timeout (e.g., 1000ms), helping avoid race conditions due to asynchronous dialog closure. Dependencies: Office.js API. Inputs: initial dialog open trigger; Outputs: sequential openings of Office dialogs. Limitation: The chosen delay may need tuning for reliability; too short a delay can result in failure, too long can degrade user experience.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-best-practices.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction openFirstDialog() {\n  Office.context.ui.displayDialogAsync(\n    \"https://MyDomain/firstDialog.html\",\n    { width: 50, height: 50 },\n    (result) => {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        const dialog = result.value;\n        dialog.close();\n        setTimeout(() => { \n          Office.context.ui.displayDialogAsync(\n            \"https://MyDomain/secondDialog.html\",\n            { width: 50, height: 50 },\n            (result) => {\n              // Callback body.\n            }\n          );\n        }, 1000);\n      }\n      else {\n         // Handle errors.\n      }\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Async sortTable Function - Office.js JavaScript\nDESCRIPTION: Defines an async function named sortTable, constructed for use with Office.js to perform table sorting operations. The function is intended to be called via a UI button and runs Office.js context commands to manipulate data. Comments outline where to insert sorting code; context.sync flushes commands to Excel. Presumes the table is in a sort-ready state and relevant references are available based on earlier project steps.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nasync function sortTable() {\\n    await Excel.run(async (context) => {\\n\\n        // TODO1: Queue commands to sort the table by Merchant name.\\n\\n        await context.sync();\\n    });\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Append-on-Send Permission in Add-in Only Manifest (XML)\nDESCRIPTION: Used within the add-in only XML manifest to declare supplementary permissions beyond the standard ones. This element is specifically required for add-ins utilizing the append-on-send feature. See linked documentation for specific content within this element.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/outlook-permission-levels-table.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ExtendedPermissions>\n```\n\n----------------------------------------\n\nTITLE: Configuring VersionOverrides and Runtimes in Office Add-in Manifest - XML\nDESCRIPTION: This XML snippet defines the <VersionOverrides> node in the Office Add-in manifest, specifying runtime configurations, resource references, and extension points for event-based activation. It includes setup of the <Runtimes> and <LaunchEvent> elements, ties HTML/JS files to various Outlook clients, and maps controls, resources, labels, images, and URLs. The manifest must sit within your project root, and referenced locations must match the project structure. Inputs include URL resource IDs; outputs are recognized by the Outlook platform to trigger the add-in correctly.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<VersionOverrides xmlns=\\\"http://schemas.microsoft.com/office/mailappversionoverrides\\\" xsi:type=\\\"VersionOverridesV1_0\\\">\\n  <VersionOverrides xmlns=\\\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\\\" xsi:type=\\\"VersionOverridesV1_1\\\">\\n    <Requirements>\\n      <bt:Sets DefaultMinVersion=\\\"1.10\\\">\\n        <bt:Set Name=\\\"Mailbox\\\" />\\n      </bt:Sets>\\n    </Requirements>\\n    <Hosts>\\n      <Host xsi:type=\\\"MailHost\\\">\\n        <!-- Event-based activation happens in a lightweight runtime.-->\\n        <Runtimes>\\n          <!-- HTML file including reference to or inline JavaScript event handlers.\\n               This is used by Outlook on the web and on the new Mac UI, and new Outlook on Windows. -->\\n          <Runtime resid=\\\"WebViewRuntime.Url\\\">\\n            <!-- JavaScript file containing event handlers. This is used by classic Outlook on Windows. -->\\n            <Override type=\\\"javascript\\\" resid=\\\"JSRuntime.Url\\\"/>\\n          </Runtime>\\n        </Runtimes>\\n        <DesktopFormFactor>\\n          <FunctionFile resid=\\\"Commands.Url\\\" />\\n          <ExtensionPoint xsi:type=\\\"MessageReadCommandSurface\\\">\\n            <OfficeTab id=\\\"TabDefault\\\">\\n              <Group id=\\\"msgReadGroup\\\">\\n                <Label resid=\\\"GroupLabel\\\" />\\n                <Control xsi:type=\\\"Button\\\" id=\\\"msgReadOpenPaneButton\\\">\\n                  <Label resid=\\\"TaskpaneButton.Label\\\" />\\n                  <Supertip>\\n                    <Title resid=\\\"TaskpaneButton.Label\\\" />\\n                    <Description resid=\\\"TaskpaneButton.Tooltip\\\" />\\n                  </Supertip>\\n                  <Icon>\\n                    <bt:Image size=\\\"16\\\" resid=\\\"Icon.16x16\\\" />\\n                    <bt:Image size=\\\"32\\\" resid=\\\"Icon.32x32\\\" />\\n                    <bt:Image size=\\\"80\\\" resid=\\\"Icon.80x80\\\" />\\n                  </Icon>\\n                  <Action xsi:type=\\\"ShowTaskpane\\\">\\n                    <SourceLocation resid=\\\"Taskpane.Url\\\" />\\n                  </Action>\\n                </Control>\\n                <Control xsi:type=\\\"Button\\\" id=\\\"ActionButton\\\">\\n                  <Label resid=\\\"ActionButton.Label\\\"/>\\n                  <Supertip>\\n                    <Title resid=\\\"ActionButton.Label\\\"/>\\n                    <Description resid=\\\"ActionButton.Tooltip\\\"/>\\n                  </Supertip>\\n                  <Icon>\\n                    <bt:Image size=\\\"16\\\" resid=\\\"Icon.16x16\\\"/>\\n                    <bt:Image size=\\\"32\\\" resid=\\\"Icon.32x32\\\"/>\\n                    <bt:Image size=\\\"80\\\" resid=\\\"Icon.80x80\\\"/>\\n                  </Icon>\\n                  <Action xsi:type=\\\"ExecuteFunction\\\">\\n                    <FunctionName>action</FunctionName>\\n                  </Action>\\n                </Control>\\n              </Group>\\n            </OfficeTab>\\n          </ExtensionPoint>\\n\\n          <!-- Can configure other command surface extension points for add-in command support. -->\\n\\n          <!-- Enable launching the add-in on the included events. -->\\n          <ExtensionPoint xsi:type=\\\"LaunchEvent\\\">\\n            <LaunchEvents>\\n              <LaunchEvent Type=\\\"OnNewMessageCompose\\\" FunctionName=\\\"onNewMessageComposeHandler\\\"/>\\n              <LaunchEvent Type=\\\"OnNewAppointmentOrganizer\\\" FunctionName=\\\"onNewAppointmentComposeHandler\\\"/>\\n            </LaunchEvents>\\n            <!-- Identifies the runtime to be used (also referenced by the Runtime element). -->\\n            <SourceLocation resid=\\\"WebViewRuntime.Url\\\"/>\\n          </ExtensionPoint>\\n        </DesktopFormFactor>\\n      </Host>\\n    </Hosts>\\n    <Resources>\\n      <bt:Images>\\n        <bt:Image id=\\\"Icon.16x16\\\" DefaultValue=\\\"https://localhost:3000/assets/icon-16.png\\\"/>\\n        <bt:Image id=\\\"Icon.32x32\\\" DefaultValue=\\\"https://localhost:3000/assets/icon-32.png\\\"/>\\n        <bt:Image id=\\\"Icon.80x80\\\" DefaultValue=\\\"https://localhost:3000/assets/icon-80.png\\\"/>\\n      </bt:Images>\\n      <bt:Urls>\\n        <bt:Url id=\\\"Commands.Url\\\" DefaultValue=\\\"https://localhost:3000/commands.html\\\" />\\n        <bt:Url id=\\\"Taskpane.Url\\\" DefaultValue=\\\"https://localhost:3000/taskpane.html\\\" />\\n        <bt:Url id=\\\"WebViewRuntime.Url\\\" DefaultValue=\\\"https://localhost:3000/commands.html\\\" />\\n        <!-- Entry needed for classic Outlook on Windows. -->\\n        <bt:Url id=\\\"JSRuntime.Url\\\" DefaultValue=\\\"https://localhost:3000/launchevent.js\\\" />\\n      </bt:Urls>\\n      <bt:ShortStrings>\\n        <bt:String id=\\\"GroupLabel\\\" DefaultValue=\\\"Contoso Add-in\\\"/>\\n        <bt:String id=\\\"TaskpaneButton.Label\\\" DefaultValue=\\\"Show Taskpane\\\"/>\\n        <bt:String id=\\\"ActionButton.Label\\\" DefaultValue=\\\"Perform an action\\\"/>\\n      </bt:ShortStrings>\\n      <bt:LongStrings>\\n        <bt:String id=\\\"TaskpaneButton.Tooltip\\\" DefaultValue=\\\"Opens a pane displaying all available properties.\\\"/>\\n        <bt:String id=\\\"ActionButton.Tooltip\\\" DefaultValue=\\\"Perform an action when clicked.\\\"/>\\n      </bt:LongStrings>\\n    </Resources>\\n  </VersionOverrides>\\n</VersionOverrides>\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Other Web Server Errors in callWebServerAPI using JavaScript\nDESCRIPTION: This snippet acts as a catch-all error handler within the `callWebServerAPI` function for any failures not previously handled (like token expiration or Graph errors). It throws a generic Error indicating an unknown error from the web server, including the stringified JSON response body for debugging purposes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Handle other errors.\nthrow new Error(\n    'Unknown error from web server: ' + JSON.stringify(jsonBody)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating AnalyzeUnicode REST Endpoint Using Shared Library (ASP.NET Core, C#)\nDESCRIPTION: This C# ASP.NET Core controller method exposes a REST endpoint for Unicode analysis. It handles GET requests at /api/analyzeunicode, validates the 'value' query parameter, and calls the shared library's 'GetUnicodeFromText' method. On success, it returns a string with character Unicode codes; on missing input, it returns HTTP 400. Dependencies: ASP.NET Core, CellAnalyzerSharedLibrary reference.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpGet]\npublic ActionResult<string> AnalyzeUnicode(string value)\n{\n  if (value == null)\n  {\n    return BadRequest();\n  }\n  return CellAnalyzerSharedLibrary.CellOperations.GetUnicodeFromText(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the HTML Structure for a Dialog Popup\nDESCRIPTION: This HTML code defines the structure for a dialog page within an Office Add-in. It includes a title, metadata, a link to the Fluent UI CSS library, script tags for loading the Office.js library and a custom script (`popup.js`), an input field for user name entry, and an OK button.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_46\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head lang=\"en\">\n        <title>Dialog for My Office Add-in</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <!-- For more information on Fluent UI, visit https://developer.microsoft.com/fluentui. -->\n        <link rel=\"stylesheet\" href=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.0.0/css/fabric.min.css\"/>\n\n        <script type=\"text/javascript\" src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\"></script>\n        <script type=\"text/javascript\" src=\"popup.js\"></script>\n\n    </head>\n    <body style=\"display:flex;flex-direction:column;align-items:center;justify-content:center\">\n        <p class=\"ms-font-xl\">ENTER YOUR NAME</p>\n        <input id=\"name-box\" type=\"text\"/><br/><br/>\n        <button id=\"ok-button\" class=\"ms-Button\">OK</button>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing autoRunEvents Array in Unified Manifest (manifest.json)\nDESCRIPTION: This JSON snippet shows how to add an empty `autoRunEvents` array as a property within the `extensions` array in the `manifest.json` file. This array will subsequently hold the definitions for events that trigger automatic add-in execution.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"autoRunEvents\": [\\n\\n]\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server on Mac (Command Line)\nDESCRIPTION: This command starts the local development web server using npm. It is specifically mentioned as a prerequisite step for testing the add-in on a Mac environment before sideloading.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/powerpoint-quickstart-yo.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory - Command Line\nDESCRIPTION: This snippet demonstrates the command necessary to navigate to the root directory of the newly created Office Add-in project, enabling further operations such as server startup or build execution. This is a basic prerequisite for any subsequent project-related commands. The only parameter is the name or path of the project folder; here, the project is named \"My Office Add-in.\" The output is a changed working directory context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/word-quickstart-yo.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Remote and Fetching Updates - Bash\nDESCRIPTION: This sequence of Bash commands adds the official Office-js documentation repository as an upstream remote and fetches its latest state. The 'cd' command navigates into the cloned repository, 'git remote add upstream' establishes a link to the main repository for syncing updates, and 'git fetch upstream' retrieves any latest commits from the upstream source. These commands require prior cloning and navigation into your local repository.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <repo name>\ngit remote add upstream https://github.com/OfficeDev/<repo name>.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Including Function Command Script in HTML\nDESCRIPTION: HTML snippet for `commands.html`. It adds a `<script>` tag to include the `commands.js` file, making the defined JavaScript functions available to the function command's execution context. This tag must be placed after the Office JS library script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"commands.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Applying Subtitle Typography Style with Fabric Core CSS\nDESCRIPTION: Applies the 'Subtitle' typography style (17px, Segoe Semilight) using the Fabric Core CSS class `.ms-font-l`. This class is typically used for elements subordinate to titles, such as subtitles, navigation elements, or group headers. Text color needs to be applied separately.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/add-in-typography.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.ms-font-l\n```\n\n----------------------------------------\n\nTITLE: Ensuring Task Pane Loads with Office.initialize (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the minimal required assignment to `Office.initialize` when no specific initialization logic is needed. Assigning an empty function ensures the add-in signals readiness, which is necessary for the task pane to load correctly in some Office application and platform combinations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/initialize-add-in.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.initialize = function () {};\n```\n```\n\n----------------------------------------\n\nTITLE: Changing an Existing Conditional Formatting Rule in Excel (JavaScript)\nDESCRIPTION: This snippet shows how to modify an existing conditional formatting rule on an Excel range ('B2:M5' on 'Sample' sheet) using the Office JavaScript API. It retrieves the first conditional format object (index '0') on the range using `getItemOrNullObject` and changes its rule type to 'PresetCriteria' using `changeRuleToPresetCriteria`. It then sets the preset rule to format cells one standard deviation above average with red font color. This operation requires an existing conditional format rule to be present on the specified range.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    \n    // Retrieve the first existing `ConditionalFormat` rule on this range. \n    // Note: The specified range must have an existing conditional format rule.\n    const conditionalFormat = range.conditionalFormats.getItemOrNullObject(\"0\");\n    \n    // Change the conditional format rule to preset criteria.\n    conditionalFormat.changeRuleToPresetCriteria({\n        criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage, \n    });\n    conditionalFormat.preset.format.font.color = \"red\";\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating and Displaying Project Metrics in Office Add-in - JavaScript\nDESCRIPTION: This snippet calculates average and current values for project cost, actual cost, work, and percent complete by aggregating data from the OData results array, then formats and displays these values in the UI using DOM manipulation. It includes logic to visually distinguish current project metrics compared to average values by changing text color and handles scenarios where the current project data is unavailable. Dependencies include a populated OData response object, referenced DOM elements for display, and usage within a Project add-in web interface. Inputs are project arrays and numeric fields; outputs are formatted text and style changes in specified table cells. Assumes well-structured result data and valid HTML element IDs; results may appear as 'NA' if data is missing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nprojActualCost += Number(res.d.results[i].ProjectActualCost);\nprojPercentCompleted += Number(res.d.results[i].ProjectPercentCompleted);\n}\nlet avgProjCost = projCost / len;\nlet avgProjWork = projWork / len;\nlet avgProjActualCost = projActualCost / len;\nlet avgProjPercentCompleted = avgProjPercentCompleted / len;\n\n// Round off cost to two decimal places, and round off other values to one decimal place.\navgProjCost = avgProjCost.toFixed(2);\navgProjWork = avgProjWork.toFixed(1);\navgProjActualCost = avgProjActualCost.toFixed(2);\navgProjPercentCompleted = avgProjPercentCompleted.toFixed(1);\n\n// Display averages in the table, with the correct units.\ndocument.getElementById(\"AverageProjectCost\").innerHTML = \"$\"\n    + avgProjCost;\ndocument.getElementById(\"AverageProjectActualCost\").innerHTML\n    = \"$\" + avgProjActualCost;\ndocument.getElementById(\"AverageProjectWork\").innerHTML\n    = avgProjWork + \" hrs\";\ndocument.getElementById(\"AverageProjectPercentComplete\").innerHTML\n    = avgProjPercentCompleted + \"%\";\n\n// Calculate and display values for the current project.\nif (myProjectIndex != -1) {\n    let myProjCost = Number(res.d.results[myProjectIndex].ProjectCost);\n    let myProjWork = Number(res.d.results[myProjectIndex].ProjectWork);\n    let myProjActualCost = Number(res.d.results[myProjectIndex].ProjectActualCost);\n    let myProjPercentCompleted =\n    Number(res.d.results[myProjectIndex].ProjectPercentCompleted);\n\n    myProjCost = myProjCost.toFixed(2);\n    myProjWork = myProjWork.toFixed(1);\n    myProjActualCost = myProjActualCost.toFixed(2);\n    myProjPercentCompleted = myProjPercentCompleted.toFixed(1);\n\n    document.getElementById(\"CurrentProjectCost\").innerHTML = \"$\" + myProjCost;\n\n    if (Number(myProjCost) <= Number(avgProjCost)) {\n        document.getElementById(\"CurrentProjectCost\").style.color = \"green\"\n    }\n    else {\n        document.getElementById(\"CurrentProjectCost\").style.color = \"red\"\n    }\n\n    document.getElementById(\"CurrentProjectActualCost\").innerHTML = \"$\" + myProjActualCost;\n\n    if (Number(myProjActualCost) <= Number(avgProjActualCost)) {\n        document.getElementById(\"CurrentProjectActualCost\").style.color = \"green\"\n    }\n    else {\n        document.getElementById(\"CurrentProjectActualCost\").style.color = \"red\"\n    }\n\n    document.getElementById(\"CurrentProjectWork\").innerHTML = myProjWork + \" hrs\";\n\n    if (Number(myProjWork) <= Number(avgProjWork)) {\n        document.getElementById(\"CurrentProjectWork\").style.color = \"red\"\n    }\n    else {\n        document.getElementById(\"CurrentProjectWork\").style.color = \"green\"\n    }\n\n    document.getElementById(\"CurrentProjectPercentComplete\").innerHTML = myProjPercentCompleted + \"%\";\n\n    if (Number(myProjPercentCompleted) <= Number(avgProjPercentCompleted)) {\n        document.getElementById(\"CurrentProjectPercentComplete\").style.color = \"red\"\n    }\n    else {\n        document.getElementById(\"CurrentProjectPercentComplete\").style.color = \"green\"\n    }\n}\nelse {\n    document.getElementById(\"CurrentProjectCost\").innerHTML = \"NA\";\n    document.getElementById(\"CurrentProjectCost\").style.color = \"blue\"\n\n    document.getElementById(\"CurrentProjectActualCost\").innerHTML = \"NA\";\n    document.getElementById(\"CurrentProjectActualCost\").style.color = \"blue\"\n\n    document.getElementById(\"CurrentProjectWork\").innerHTML = \"NA\";\n    document.getElementById(\"CurrentProjectWork\").style.color = \"blue\"\n\n    document.getElementById(\"CurrentProjectPercentComplete\").innerHTML = \"NA\";\n    document.getElementById(\"CurrentProjectPercentComplete\").style.color = \"blue\"\n}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Checkboxes from Table Column using Excel JavaScript API\nDESCRIPTION: This snippet demonstrates how to remove checkboxes from a specific table column and revert the cells to display their underlying Boolean values. It accesses the active worksheet, finds the table named 'FruitTable', retrieves the data body range of the 'Analysis' column, and then sets the `control` property of that range to `Excel.CellControlType.empty`. Requires an existing table named 'FruitTable' with an 'Analysis' column formatted with checkboxes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-checkboxes.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // This code sample shows how to remove checkboxes from a table.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Get the \"Analysis\" column in the table, without the header.\n    const range = sheet.tables.getItem(\"FruitTable\").columns.getItem(\"Analysis\").getDataBodyRange();\n\n    // Change the checkboxes to Boolean values.\n    range.control = {\n      type: Excel.CellControlType.empty\n    };\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Subproperty of a Read-Only Navigation Property (Range.format) in Excel JavaScript API\nDESCRIPTION: Demonstrates setting a subproperty ('size') of a read-only navigation property ('Range.format.font') using object navigation. This change is queued and applied during the next context.sync() call.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n```js\n// This will set the font size on the range during the next `content.sync()`.\nrange.format.font.size = 10;\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Custom XML Part by ID from Settings - JavaScript\nDESCRIPTION: This code snippet retrieves the ID of a previously saved custom XML part from Office.js Settings, then retrieves the actual XML part using getByIdAsync and displays its XML contents in an HTML element. The entire process is asynchronous, and requires that the ID previously has been stored as a setting. Office.js APIs and jQuery are prerequisites for this implementation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getReviewers() {\n    const reviewersXmlId = Office.context.document.settings.get('ReviewersID');\n    Office.context.document.customXmlParts.getByIdAsync(reviewersXmlId,\n        (asyncResult) => {\n            asyncResult.value.getXmlAsync(\n                (asyncResult) => {\n                    $(\"#xml-blob\").text(asyncResult.value);\n                }\n            );\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Events to Handlers in Unified Manifest (manifest.json)\nDESCRIPTION: This JSON snippet illustrates adding an event mapping object to the `autoRunEvents` array within `manifest.json`. It specifies the requirement set (Mailbox 1.10) and scope ('mail'), then maps the `newMessageComposeCreated` event to the `onNewMessageComposeHandler` action and the `newAppointmentOrganizerCreated` event to the `onNewAppointmentComposeHandler` action. These handlers correspond to the actions defined previously in the runtime configuration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  {\\n      \"requirements\": {\\n          \"capabilities\": [\\n              {\\n                  \"name\": \"Mailbox\",\\n                  \"minVersion\": \"1.10\"\\n              }\\n          ],\\n          \"scopes\": [\\n              \"mail\"\\n          ]\\n      },\\n      \"events\": [\\n          {\\n              \"type\": \"newMessageComposeCreated\",\\n              \"actionId\": \"onNewMessageComposeHandler\"\\n          },\\n          {\\n              \"type\": \"newAppointmentOrganizerCreated\",\\n              \"actionId\": \"onNewAppointmentComposeHandler\"\\n          }\\n      ]\\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Specific SSO Errors in handleSSOErrors using JavaScript\nDESCRIPTION: This snippet, part of the `handleSSOErrors` function, uses a `switch` statement to handle specific error codes returned by `Office.auth.getAccessToken`. It provides user-friendly messages via `showMessage` for codes 13001 (user not signed in), 13002 (consent denied), 13006, 13008, and 13010 (various Office on the web issues). These handled errors typically prevent further immediate action.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (error.code) {\n    case 13001:\n        // No one is signed into Office. If the add-in cannot be effectively used when no one\n        // is logged into Office, then the first call of getAccessToken should pass the\n        // `allowSignInPrompt: true` option. Since this sample does that, you should not see\n        // this error.\n        showMessage(\n            'No one is signed into Office. But you can use many of the add-ins functions anyway. If you want to log in, press the Get OneDrive File Names button again.'\n        );\n        break;\n    case 13002:\n        // The user aborted the consent prompt. If the add-in cannot be effectively used when consent\n        // has not been granted, then the first call of getAccessToken should pass the `allowConsentPrompt: true` option.\n        showMessage(\n            'You can use many of the add-ins functions even though you have not granted consent. If you want to grant consent, press the Get OneDrive File Names button again.'\n        );\n        break;\n    case 13006:\n        // Only seen in Office on the web.\n        showMessage(\n            'Office on the web is experiencing a problem. Please sign out of Office, close the browser, and then start again.'\n        );\n        break;\n    case 13008:\n        // Only seen in Office on the web.\n        showMessage(\n            'Office is still working on the last operation. When it completes, try this operation again.'\n        );\n        break;\n    case 13010:\n        // Only seen in Office on the web.\n        showMessage(\n            \"Follow the instructions to change your browser's zone configuration.\"\n        );\n        break;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameter Addresses in Excel Custom Functions (JavaScript)\nDESCRIPTION: Defines an Excel Custom Function `getParameterAddresses` using JSDoc comments. It accepts three string parameters and the implicit `invocation` object (`CustomFunctions.Invocation`). It uses the `@requiresParameterAddresses` JSDoc tag to enable access to the `invocation.parameterAddresses` property. This property is an array containing the addresses of the function's input parameters. The function retrieves the addresses for the three parameters and returns them as a 2-dimensional array, which will spill into adjacent cells in Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Return the addresses of three parameters. \n * @customfunction\n * @param {string} firstParameter First parameter.\n * @param {string} secondParameter Second parameter.\n * @param {string} thirdParameter Third parameter.\n * @param {CustomFunctions.Invocation} invocation Invocation object. \n * @returns {string[][]} The addresses of the parameters, as a 2-dimensional array. \n * @requiresParameterAddresses\n */\nfunction getParameterAddresses(firstParameter, secondParameter, thirdParameter, invocation) {\n  const addresses = [\n    [invocation.parameterAddresses[0]],\n    [invocation.parameterAddresses[1]],\n    [invocation.parameterAddresses[2]]\n  ];\n  return addresses;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Debugger Type and WebView Settings in VS Code Launch Configuration - JSON\nDESCRIPTION: This JSON snippet demonstrates how to update the VS Code launch.json configuration for debugging Office Add-ins in Edge Chromium. It requires access to the .vscode/launch.json file, where the \"type\" property of the relevant configuration is set to \"pwa-msedge\" and the \"useWebView\" property is set to the boolean true (without quotes). The configuration may include other application-specific settings, and it is important that JSON booleans and strings are used correctly to avoid debug errors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-desktop-using-edge-chromium.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"configurations\": [\n    {\n      \"name\": \"Word Desktop (Edge Chromium)\",\n      \"type\": \"pwa-msedge\",\n      \"useWebView\": true,\n      // ... other configuration properties ...\n    }\n    // ... additional configurations ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Close Request from Dialog to Parent (JavaScript)\nDESCRIPTION: Shows a function (`closeButtonClick`) intended to be used as a click event handler for a button within the dialog. It uses `Office.context.ui.messageParent` to send a JSON message to the host (parent) page, indicating that the dialog should be closed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfunction closeButtonClick() {\n    const messageObject = { messageType: \"dialogClosed\" };\n    const jsonMessage = JSON.stringify(messageObject);\n    Office.context.ui.messageParent(jsonMessage);\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Shapes in Excel using JavaScript\nDESCRIPTION: This code snippet retrieves three existing shapes (\"Square\", \"Pentagon\", \"Octagon\") from 'MyWorksheet' and groups them into a single `ShapeGroup` named \"Group\" using the `shapes.addGroup` method within the Excel JavaScript API. It assumes the prerequisite shapes exist and logs a confirmation message to the console.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// This sample takes three previously-created shapes (\"Square\", \"Pentagon\", and \"Octagon\")\n// and groups them into a single ShapeGroup.\nawait Excel.run(async (context) => {\n    let shapes = context.workbook.worksheets.getItem(\"MyWorksheet\").shapes;\n    let square = shapes.getItem(\"Square\");\n    let pentagon = shapes.getItem(\"Pentagon\");\n    let octagon = shapes.getItem(\"Octagon\");\n\n    let shapeGroup = shapes.addGroup([square, pentagon, octagon]);\n    shapeGroup.name = \"Group\";\n    console.log(\"Shapes grouped\");\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Package Relationships in OOXML .rels File (XML)\nDESCRIPTION: This XML snippet shows the content of the `/_rels/.rels` part within an Office Open XML package before simplification. It lists the relationships (`<Relationship>`) linking the main package to its components like core properties, thumbnail, the main document (`document.xml`), and extended properties, using unique IDs and types. The purpose is to illustrate the initial state before removing unnecessary parts and their corresponding relationships for add-in usage, as relationships for removed parts must also be deleted to avoid errors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<pkg:part pkg:name=\"/_rels/.rels\" pkg:contentType=\"application/vnd.openxmlformats-package.relationships+xml\" pkg:padding=\"512\">\n  <pkg:xmlData>\n    <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n      <Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/>\n      <Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail\" Target=\"docProps/thumbnail.emf\"/>\n      <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"word/document.xml\"/>\n      <Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/>\n    </Relationships>\n  </pkg:xmlData>\n</pkg:part>\n```\n\n----------------------------------------\n\nTITLE: Assigning OWA Mailbox Policy to All Users (Modern/New Outlook)\nDESCRIPTION: Retrieves all user mailboxes and assigns the specified OWA mailbox policy (`OWAOnSendAddinAllUserPolicy`) to them. This enforces the policy settings, including the on-send compliance flag, for all users in the context of modern Outlook on the web or new Outlook on Windows. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-User -Filter {RecipientTypeDetails -eq 'UserMailbox'}|Set-CASMailbox -OwaMailboxPolicy OWAOnSendAddinAllUserPolicy\n```\n\n----------------------------------------\n\nTITLE: Updating API Endpoint URL in Office Add-in JavaScript\nDESCRIPTION: This JavaScript snippet, intended for the `Home.js` file of the Office Add-in, demonstrates how to update the `url` constant to point to the deployed Azure App Service endpoint. It constructs the API call URL, replacing the previous localhost URL. The placeholder `<myappservice>` must be replaced with the specific name of the Azure App Service. The code assumes a variable `range` exists, containing the cell value to be sent as a query parameter.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = \"https://<myappservice>.azurewebsites.net/api/analyzeunicode?value=\" + range.values[0][0];\n```\n\n----------------------------------------\n\nTITLE: Getting Item ID in Compose Mode (Saved Draft) using Office JS\nDESCRIPTION: Shows how to asynchronously retrieve the ID of the current mail item being composed using `Office.context.mailbox.item.getItemIdAsync`. This method is available from Mailbox requirement set 1.8 and should be used when the item has already been saved as a draft. Includes basic error handling.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the item ID of the current mail item being composed.\nOffice.context.mailbox.item.getItemIdAsync((result) => {\n    if (result.status === Office.AsyncResultStatus.Failed) {\n        console.error(result.error.message);\n        return;\n    }\n\n    const itemId = result.value;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding MobileFormFactor Configuration in manifest.xml\nDESCRIPTION: This XML snippet shows how to add mobile support to an Outlook Add-in's `manifest.xml` by inserting a `<MobileFormFactor>` element as a child of the `<Host>` element (peer to `<DesktopFormFactor>`). It defines the function file, uses the `MobileOnlineMeetingCommandSurface` extension point, and configures a `MobileButton` control, including its label, icons (specified for various sizes and scales), and the function to execute (`insertContosoMeeting`) when tapped.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<MobileFormFactor>\n  <FunctionFile resid=\"residFunctionFile\"/>\n  <ExtensionPoint xsi:type=\"MobileOnlineMeetingCommandSurface\">\n    <Control xsi:type=\"MobileButton\" id=\"insertMeetingButton\">\n      <Label resid=\"residLabel\"/>\n      <Icon>\n        <bt:Image size=\"25\" scale=\"1\" resid=\"icon-16\"/>\n        <bt:Image size=\"25\" scale=\"2\" resid=\"icon-16\"/>\n        <bt:Image size=\"25\" scale=\"3\" resid=\"icon-16\"/>\n\n        <bt:Image size=\"32\" scale=\"1\" resid=\"icon-32\"/>\n        <bt:Image size=\"32\" scale=\"2\" resid=\"icon-32\"/>\n        <bt:Image size=\"32\" scale=\"3\" resid=\"icon-32\"/>\n\n        <bt:Image size=\"48\" scale=\"1\" resid=\"icon-48\"/>\n        <bt:Image size=\"48\" scale=\"2\" resid=\"icon-48\"/>\n        <bt:Image size=\"48\" scale=\"3\" resid=\"icon-48\"/>\n      </Icon>\n      <Action xsi:type=\"ExecuteFunction\">\n        <FunctionName>insertContosoMeeting</FunctionName>\n      </Action>\n    </Control>\n  </ExtensionPoint>\n</MobileFormFactor>\n```\n\n----------------------------------------\n\nTITLE: Processing Excessively Large Range Arrays with Excel JavaScript API in JavaScript\nDESCRIPTION: This code snippet attempts to process nearly 10,000 rows in a single batch within an Excel JavaScript add-in using Office.js. It demonstrates that processing too many ranges in a single loop with one `context.sync()` can exceed the 5MB payload size limit, leading to failures. The main dependency is the Office.js (Excel) API. Inputs are a large range of rows; output is an attempt to set values in each range. This approach is not recommended for real-world scenarios where data size may exceed platform limits.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/performance.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This code sample does not show a recommended strategy.\\n// Calling 10,000 rows would likely exceed the 5MB payload size limit in a real-world situation.\\nasync function run() {\\n  await Excel.run(async (context) => {\\n    let worksheet = context.workbook.worksheets.getActiveWorksheet();\\n    \\n    // This sample attempts to process too many ranges at once. \\n    for (let row = 1; row < 10000; row++) {\\n      let range = sheet.getRangeByIndexes(row, 1, 1, 1);\\n      range.values = [[\\\"1\\\"]];\\n    }\\n    await context.sync(); \\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Desktop Installation Link for Office Add-ins (Add-in Store Protocol, URL Template)\nDESCRIPTION: This snippet provides a URL template to generate an installation link that launches the corresponding Office desktop application (Word, Excel, or PowerPoint) and installs the specified add-in. The template includes parameters for application protocol ('appName'), language ('language'), diagnostic correlation ID ('correlationID'), AppSource ID ('addInId', case-sensitive), add-in name ('addInName', URL-encoded), and file format ('fileFormat'). Developers must substitute all placeholders with accurate values to form a working installation link for Windows or Mac installations of the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_1\n\nLANGUAGE: URL Template\nCODE:\n```\n{{appName}}:https://api.addins.store.office.com/addinstemplate/{{language}}/{{correlationID}}/{{addinId}}/none/{{addinName}}.{{fileFormat}}?omexsrctype=1&isexternallink=1\n```\n\n----------------------------------------\n\nTITLE: Manually Installing npm - Command Line\nDESCRIPTION: This snippet shows the command to manually install or update npm using the Node Package Manager. It installs npm globally using the '-g' flag. Requires a system where Node.js is already installed and where the user has permissions to run global installs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/install-node-js.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm install npm -g\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Function ID using @customfunction Tag - JavaScript\nDESCRIPTION: This snippet illustrates how to explicitly define the `id` for a custom function using the `@customfunction` JSDoc tag followed by the desired ID (`INCREMENT`). If the `id` is not provided, it's derived from the function name. The `id` must be unique.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Increments a value once a second.\n * @customfunction INCREMENT\n * ...\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Add-in UI Layout for Word using HTML\nDESCRIPTION: This HTML snippet lays out the user interface of the add-in for Word. It shares the same structure and dependencies as the PowerPoint version (including Program.css, Office.js, and GetDoc_App.js), but the headings and title refer to a document rather than a presentation. It features a heading, status display region, and a submit button within a form, designed to integrate with Office.js and further JavaScript logic loaded separately.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n    <head>\\n        <meta charset=\\\"UTF-8\\\" />\\n        <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/>\\n        <title>Publish document</title>\\n        <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"Program.css\\\" />\\n        <script src=\\\"https://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js\\\" type=\\\"text/javascript\\\"></script>\\n        <script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\" type=\\\"text/javascript\\\"></script>\\n        <script src=\\\"GetDoc_App.js\\\"></script>\\n    </head>\\n    <body>\\n        <form>\\n            <h1>Publish document</h1>\\n            <br />\\n            <div><input id='submit' type=\\\"button\\\" value=\\\"Submit\\\" /></div>\\n            <br />\\n            <div><h2>Status</h2>\\n                <div id=\\\"status\\\"></div>\\n            </div>\\n        </form>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing core-js Polyfill in JavaScript Module\nDESCRIPTION: This JavaScript code snippet shows how to import the entire core-js polyfill library using an ES6 `import` statement within a JavaScript file. This approach is common in module-based development and ensures that all polyfills provided by core-js are loaded and available for use, bridging the gap for features not natively supported by the JavaScript engine.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/support-ie-11.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'core-js';\n```\n\n----------------------------------------\n\nTITLE: Defining WebApplicationInfo in Office Add-in Manifest - XML\nDESCRIPTION: This XML snippet demonstrates the required WebApplicationInfo section to enable SSO for an Office Add-in. It includes the application\\'s Azure AD client ID, resource URI registered for the add-in, and a set of scope permissions. Required dependencies include Office Add-in manifest support for WebApplicationInfo and proper Azure AD registration. Inputs are the Id (client ID), Resource (Azure URI), and a list of Scopes (such as openid, user.read, files.read, profile). There are format and registration constraints: URIs must match registration, and permission changes require admin consent if already deployed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/sso-in-office-add-ins.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<WebApplicationInfo>\\n    <Id>5661fed9-f33d-4e95-b6cf-624a34a2f51d</Id>\\n    <Resource>api://addin.contoso.com/5661fed9-f33d-4e95-b6cf-624a34a2f51d</Resource>\\n    <Scopes>\\n        <Scope>openid</Scope>\\n        <Scope>user.read</Scope>\\n        <Scope>files.read</Scope>\\n        <Scope>profile</Scope>\\n    </Scopes>\\n</WebApplicationInfo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Office Deployment Tool for Preview Builds (XML)\nDESCRIPTION: This XML configuration file is used with the Office Deployment Tool (setup.exe) to install the 32-bit English version of Office 365 ProPlus from the 'CurrentPreview' channel. It enables automatic updates and configures a silent installation (no UI shown) by accepting the EULA automatically. This file should be saved as 'configuration.xml' in the same directory as setup.exe.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/install-latest-office-version.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Configuration>\n  <Add OfficeClientEdition=\"32\" Branch=\"CurrentPreview\">\n    <Product ID=\"O365ProPlusRetail\">\n      <Language ID=\"en-us\" />\n    </Product>\n  </Add>\n\n  <Updates Enabled=\"TRUE\" /> \n  <Display Level=\"None\" AcceptEULA=\"TRUE\" />  \n \n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Applying Annotation Typography Style with Fabric Core CSS\nDESCRIPTION: Applies the 'Annotation' typography style (10px, Segoe Semibold) using the Fabric Core CSS class `.ms-font-mi`. This is the smallest recommended size in the type ramp and should be used rarely, primarily for circumstances where legibility isn't the primary requirement. Text color needs to be applied separately.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/add-in-typography.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.ms-font-mi\n```\n\n----------------------------------------\n\nTITLE: Creating New Local Branch from Upstream in Git\nDESCRIPTION: These commands navigate into the project directory (`office-js-docs-pr`), fetch the latest `main` branch from the `upstream` remote and create a new local branch `X2` based on it, then push this new branch `X2` to the `origin` remote. This workflow is recommended after a previous branch has been successfully merged to avoid potential conflicts and start fresh work based on the latest main branch.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd office-js-docs-pr\ngit pull upstream main:X2\ngit push origin X2\n```\n\n----------------------------------------\n\nTITLE: Declaring Shared Folders Permission in Unified Manifest (JSON)\nDESCRIPTION: Specifies the supplementary permission required for shared folders and shared mailbox scenarios within the unified manifest (manifest.json). This permission name ('Mailbox.SharedFolder') is added as the 'name' property of an object within the 'authorization.permissions.resourceSpecific' array.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/outlook-permission-levels-table.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"authorization.permissions.resourceSpecific\": [\\n  // ... other permissions\\n  {\\n    \"name\": \"Mailbox.SharedFolder\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Branch to the Origin Remote - Bash\nDESCRIPTION: This Bash command pushes your newly created branch to your GitHub fork ('origin'). After making changes in your local branch, 'git push origin <new branch name>' uploads all commits to the corresponding branch in your personal GitHub repository, making it available for pull requests. This command requires a local branch with commits and network access to GitHub.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <new branch name>\n```\n\n----------------------------------------\n\nTITLE: Using @customfunction Tag for Basic Custom Function Definition - JavaScript\nDESCRIPTION: This example shows the fundamental use of the `@customfunction` JSDoc tag. Placing this tag within the comment block of a JavaScript or TypeScript function marks it as an Excel custom function, enabling the Webpack plugin to generate metadata for it. No `id` or `name` is explicitly provided here.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Increments a value once a second.\n * @customfunction\n * ...\n */\n```\n\n----------------------------------------\n\nTITLE: Hiding an Alternate Add-in Version Based on Requirements (Unified Manifest JSON)\nDESCRIPTION: This snippet demonstrates selective visibility of available add-in alternates using the 'extensions.alternates.requirements' property. If the Office host provides at least Mailbox 1.10 requirement set, the specified legacy add-in is hidden from installation UI. Dependencies include Office that understands unified manifests, and correct IDs for 'officeAddinId' and 'assetId'. Section must be placed inside the manifest's alternates array. Input: manifest fragment; Output: alternates property visibility is conditional. All property names and values must be accurate for intended behavior.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requirements-property-unified-manifest.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"alternates\": [\n            ...\n            {\n                ...\n                \"hide\": {\n                    \"storeOfficeAddin\": {\n                        \"officeAddinId\": \"b5a2794d-4aa5-4023-a84b-c60a3cbd33d4\",\n                        \"assetId\": \"WA999999999\"\n                    }\n                },\n                \"requirements\": {\n                    \"capabilities\": [\n                        {\n                            \"name\": \"Mailbox\",\n                            \"minVersion\": \"1.10\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Renaming the Active Worksheet with Excel JavaScript API\nDESCRIPTION: Changes the name of the currently active worksheet to \"New Name\". It retrieves the active worksheet object and directly assigns the new name string to its `name` property.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let currentSheet = context.workbook.worksheets.getActiveWorksheet();\n    currentSheet.name = \"New Name\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Writing File Names to Office Document and Handling Errors (Office.js, JavaScript)\nDESCRIPTION: Adds asynchronous code that writes a received file name list into the Office document and handles any write errors. Requires the writeFileNamesToOfficeDocument helper and showMessage notification utility. Key parameters include the previously retrieved fileNameList; upon success, confirms the operation with a message, and if an error occurs, displays the error for the user. Inputs and outputs involve manipulating the Office document via Office.js APIs, with error handling for document write failures.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-aspnet.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\\n    await writeFileNamesToOfficeDocument(fileNameList);\\n    showMessage(\"Your data has been added to the document.\");\\n} catch (error) {\\n    // The error from writeFileNamesToOfficeDocument will begin \\n    // \"Unable to add filenames to document.\"\\n    showMessage(error);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Registering SelectedItemsChanged Event Handler in Office.js (JavaScript)\nDESCRIPTION: This snippet sets up the Outlook add-in task pane after Office is ready, initializes UI elements, and registers an asynchronous event handler for the SelectedItemsChanged event using Office.js. It disables the sideload message, displays the main app body, and attaches the run handler to a button click and to selection changes. Dependencies include the Office.js runtime and valid Office context. Expects the host to be Outlook and requires corresponding HTML element IDs in the DOM. On event registration failure, an error is logged.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/item-multi-select.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet list;\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Outlook) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    document.getElementById(\"run\").onclick = run;\n    list = document.getElementById(\"selected-items\");\n\n    // Register an event handler to identify when messages are selected.\n    Office.context.mailbox.addHandlerAsync(Office.EventType.SelectedItemsChanged, run, (asyncResult) => {\n      if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n        console.log(asyncResult.error.message);\n        return;\n      }\n\n      console.log(\"Event handler added.\");\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting Workbook Structure using WorkbookProtection.protect - JavaScript\nDESCRIPTION: Illustrates how to check if the workbook structure is protected and apply protection if it is not. The snippet uses the WorkbookProtection.protect method, after loading the current protection state, to prevent users from editing the workbook's structure. Executes in the Excel add-in context using Office.js.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let workbook = context.workbook;\\n    workbook.load(\\\"protection/protected\\\");\\n    await context.sync();\\n\\n    if (!workbook.protection.protected) {\\n        workbook.protection.protect();\\n    }\\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Add-in Manifest XML by AppId - PowerShell\nDESCRIPTION: This PowerShell command obtains the manifest file XML for an Outlook add-in identified by its AppId. It calls Get-App -Identity {identity} and selects the ManifestXml property, which contains the raw XML manifest describing the add-in configuration and endpoints. Requires the appropriate Exchange Online session and the precise AppId as input. Output is the XML content that may contain additional publisher or endpoint details for contacting support.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/faq-nested-app-auth-outlook-legacy-tokens.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-App -Identity {identity} | Select-Object -Property ManifestXml\n```\n\n----------------------------------------\n\nTITLE: Specifying Safe Navigation Domains in Office Add-in Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates the structure of an Office Add-in manifest file (`OfficeApp`). It specifically highlights the use of the `<AppDomains>` element to list domains (e.g., `https://www.northwindtraders.com`) that the add-in is allowed to navigate to within the add-in pane, overriding the default behavior in desktop Office clients where navigation outside the `<SourceLocation>` domain (`https://www.contoso.com`) would open in a separate browser window. It includes standard manifest elements like `Id`, `Version`, `ProviderName`, `DefaultLocale`, `DisplayName`, `Description`, `SupportUrl`, `DefaultSettings`, and `Permissions`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OfficeApp xmlns=\"http://schemas.microsoft.com/office/appforoffice/1.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"TaskPaneApp\">\n  <!--IMPORTANT! Id must be unique for each add-in. If you copy this manifest ensure that you change this id to your own GUID. -->\n  <Id>c6890c26-5bbb-40ed-a321-37f07909a2f0</Id>\n  <Version>1.0</Version>\n  <ProviderName>Contoso, Ltd</ProviderName>\n  <DefaultLocale>en-US</DefaultLocale>\n  <DisplayName DefaultValue=\"Northwind Traders Excel\" />\n  <Description DefaultValue=\"Search Northwind Traders data from Excel\"/>\n  <SupportUrl DefaultValue=\"[Insert the URL of a page that provides support information for the app]\" />\n  <AppDomains>\n    <AppDomain>https://www.northwindtraders.com</AppDomain>\n  </AppDomains>\n  <DefaultSettings>\n    <SourceLocation DefaultValue=\"https://www.contoso.com/search_app/Default.aspx\" />\n  </DefaultSettings>\n  <Permissions>ReadWriteDocument</Permissions>\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js Dev Server for Office Add-in on Mac\nDESCRIPTION: This command uses npm to execute the `dev-server` script defined in the project's `package.json`. It starts the local web server necessary for testing the Office Add-in, specifically recommended as a prerequisite step for Mac environments before running `npm start` or testing in the browser.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_14\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Detecting Touch Support in Office Add-ins using JavaScript\nDESCRIPTION: This JavaScript property, part of the Office JavaScript API (`Office.Context`), is used within an Office Add-in's code to check if the host Office application environment supports touch interactions. This allows the add-in to conditionally render UI elements or adjust behavior for optimal touch usability. Note that this specific property is not supported in Outlook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/add-in-development-best-practices.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nContext.touchEnabled\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose MSAL Logging in Outlook Add-in Initialization - JavaScript\nDESCRIPTION: This code snippet shows how to configure the MSAL public client application with verbose logging. It sets the logLevel to Verbose and defines a loggerCallback function to direct log messages to the appropriate console method based on their severity (Error, Info, Verbose, Warning). Dependencies include MSAL.js and the appropriate setup of msalConfig. Key parameters such as logLevel and loggerCallback are used to control the verbosity and output of debug information. Input is an MSAL configuration object, output is enhanced diagnostic logging in the browser console to aid debugging and migration verification.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/faq-nested-app-auth-outlook-legacy-tokens.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst msalConfig = {\n  auth: {...},\n  system: {\n    loggerOptions: {\n      logLevel: LogLevel.Verbose,\n      loggerCallback: (level, message, containsPii) => {\n        switch (level) {\n          case LogLevel.Error:\n            console.error(message);\n            return;\n          case LogLevel.Info:\n            console.info(message);\n            return;\n          case LogLevel.Verbose:\n            console.debug(message);\n            return;\n          case LogLevel.Warning:\n            console.warn(message);\n            return;\n        }\n      },\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Add-in Manifest File Content in PowerShell\nDESCRIPTION: This PowerShell cmdlet reads the content of an Outlook add-in manifest XML file into a variable. It specifies the file path and uses byte encoding. This is a prerequisite step for installing the add-in using `New-App`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Data=Get-Content -Path '.\\Contoso Message Body Checker.xml' -Encoding Byte –ReadCount 0\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js Dev Server for Office Add-in on Mac (Testing Section 2)\nDESCRIPTION: This command uses npm to execute the `dev-server` script defined in the project's `package.json`. It starts the local web server required for testing the Office Add-in, specifically highlighted as a step for Mac users before proceeding with testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_20\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js Dev Server for Office Add-in on Mac (Testing Section 3)\nDESCRIPTION: This command uses npm to run the `dev-server` script, starting the local web server. This step is indicated as necessary for testing the Office Add-in, particularly on Mac environments, before sideloading.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_26\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Stopping Node.js Server via npm (Command Line)\nDESCRIPTION: This command is executed in the terminal within the project directory to stop the local Node.js web server previously started using `npm start`. Depending on the project's `package.json` configuration, this command might also trigger the uninstallation of the associated Office add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/stop-uninstall-outlook-dev-add-in.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Options Object for Optional Parameters in JavaScript (Method 2)\nDESCRIPTION: Demonstrates an alternative way to create an `options` object for optional parameters by first initializing an empty object and then assigning properties using bracket notation. This example specifically sets `ValueFormat` and `FilterType`. This object can be passed to asynchronous Office API methods.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst options = {};\noptions[parameter1] = value1;\noptions[parameter2] = value2;\n...\noptions[parameterN] = valueN;\n```\n\nLANGUAGE: js\nCODE:\n```\nconst options = {};\noptions[\"ValueFormat\"] = \"unformatted\";\noptions[\"FilterType\"] = \"all\";\n```\n\n----------------------------------------\n\nTITLE: Defining Mobile Form Factor in XML Manifest\nDESCRIPTION: Illustrates the use of the '<MobileFormFactor>' element within VersionOverrides v1.1 of the XML manifest to define UI elements and functionality specifically for mobile clients. This example shows a single task pane button ('MobileButton') within a 'MobileMessageReadCommandSurface' extension point, including required mobile icons ('MobileIconList') and a 'ShowTaskpane' action. It highlights differences from the DesktopFormFactor, such as the absence of 'OfficeTab' and different icon requirements (25x25, 32x32, 48x48).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-mobile-support.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n    <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n        ...\n        <Hosts>\n            <Host xsi:type=\"MailHost\">\n                ...\n                <MobileFormFactor>\n                    <FunctionFile resid=\"residUILessFunctionFileUrl\" />\n                    <ExtensionPoint xsi:type=\"MobileMessageReadCommandSurface\">\n                        <Group id=\"mobileMsgRead\">\n                            <Label resid=\"groupLabel\" />\n                            <Control xsi:type=\"MobileButton\" id=\"TaskPaneBtn\">\n                                <Label resid=\"residTaskPaneButtonName\" />\n                                <Icon xsi:type=\"bt:MobileIconList\">\n                                    <bt:Image size=\"25\" scale=\"1\" resid=\"icon_25\" />\n                                    <bt:Image size=\"25\" scale=\"2\" resid=\"icon_25\" />\n                                    <bt:Image size=\"25\" scale=\"3\" resid=\"icon_25\" />\n                        \n                                    <bt:Image size=\"32\" scale=\"1\" resid=\"icon_32\" />\n                                    <bt:Image size=\"32\" scale=\"2\" resid=\"icon_32\" />\n                                    <bt:Image size=\"32\" scale=\"3\" resid=\"icon_32\" />\n                        \n                                    <bt:Image size=\"48\" scale=\"1\" resid=\"icon_48\" />\n                                    <bt:Image size=\"48\" scale=\"2\" resid=\"icon_48\" />\n                                    <bt:Image size=\"48\" scale=\"3\" resid=\"icon_48\" />\n                                </Icon>\n                                <Action xsi:type=\"ShowTaskpane\">\n                                    <SourceLocation resid=\"residTaskpaneUrl\" />\n                                </Action>\n                            </Control>\n                        </Group>\n                    </ExtensionPoint>\n                </MobileFormFactor>\n            </Host>\n        </Hosts>\n        ...\n    </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Integrating Built-in Office Group into Custom Tab (XML Manifest)\nDESCRIPTION: This XML snippet demonstrates how to embed a standard Office control group (e.g., 'Paragraph') into a custom ribbon tab using the traditional XML manifest for Office Add-ins. It uses the `<OfficeGroup>` element as a child of the `<CustomTab>` element, specifying the built-in group's ID via the `id` attribute.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/built-in-button-integration.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ExtensionPoint xsi:type=\"ContosoRibbonTab\">\n  <CustomTab id=\"Contoso.TabCustom1\">\n    <Group id=\"Contoso.myCustomTab.group1\">\n       <!-- additional markup omitted -->\n    </Group>\n    <OfficeGroup id=\"Paragraph\" />\n    <Label resid=\"customTabLabel1\" />\n  </CustomTab>\n</ExtensionPoint>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Remote Branch in Git\nDESCRIPTION: This command deletes the specified branch (`<branch name>`) from the remote repository configured as `origin` (typically the user's fork on GitHub). The syntax `:<branch name>` (a colon followed by the branch name) pushes an empty reference to the remote branch, effectively instructing the remote repository to delete it. Replace `<branch name>` with the actual branch name.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin :<branch name>\n```\n\n----------------------------------------\n\nTITLE: Stopping Debugging Session with NPX for Other Projects\nDESCRIPTION: Uses npx to execute the 'office-addin-debugging' tool's stop command directly. This command stops the debugging session, removes add-in registrations, and halts the server process. It should be used to clean up after a session started with 'npx office-addin-debugging start'. The same manifest path and options (like --prod) used with 'start' might be needed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/test-debug-non-local-server.md#_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\nnpx office-addin-debugging stop\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options in tsconfig.json\nDESCRIPTION: Defines compiler settings for the TypeScript project within Visual Studio using a `tsconfig.json` file. It specifies the target JavaScript version (ES5), enables source maps, excludes `node_modules`, includes specific file paths like `scripts/**/*` for transpilation, and defines necessary libraries (`es2015`, `dom`). This configuration is essential for the TypeScript build process managed by the `Microsoft.TypeScript.MSBuild` NuGet package.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/convert-javascript-to-typescript.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": false,\n    \"noEmitOnError\": true,\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"lib\": [ \n      \"es2015\",\n      \"dom\"\n    ]\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"wwwroot\"\n  ],\n  \"include\": [\n    \"scripts/**/*\",\n    \"**/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Microsoft Graph API Errors in callWebServerAPI using JavaScript\nDESCRIPTION: This snippet, for the `callWebServerAPI` function, specifically checks if the web server response indicates a Microsoft Graph API error. This is identified by an HTTP status code of 403 (Forbidden) and a response body type of 'Microsoft Graph'. If this condition is met, it throws a new Error containing details extracted from the `jsonBody.errorDetails`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Check for fail condition: Did we get a Microsoft Graph API error, which is returned as bad request (403)?\nif (response.status === 403 && jsonBody.type === 'Microsoft Graph') {\n    throw new Error('Microsoft Graph error: ' + jsonBody.errorDetails);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Selected File to Base64 using JavaScript FileReader\nDESCRIPTION: This asynchronous JavaScript function `storeFileAsBase64` uses the `FileReader` API to read the content of the file selected via the input element with ID 'file'. It converts the file content into a base64-encoded data URL. The `onload` event handler extracts the pure base64 string (removing the 'data:...' prefix) and stores it in the global variable `chosenFileBase64` for later use.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/insert-slides-into-presentation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet chosenFileBase64;\n\nasync function storeFileAsBase64() {\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n        const startIndex = reader.result.toString().indexOf(\"base64,\");\n        const copyBase64 = reader.result.toString().substr(startIndex + 7);\n\n        chosenFileBase64 = copyBase64;\n    };\n\n    const myFile = document.getElementById(\"file\") as HTMLInputElement;\n    reader.readAsDataURL(myFile.files[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Dialog Message and Redirecting Page - JavaScript\nDESCRIPTION: Handles an incoming message by processing it and performing a page redirect within the task pane using window.location.replace, which alters the browser history. Optionally, window.location.href can be used instead. Input is the event argument; output is a navigation change to a new page.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction processMessage(arg) {\n    // Add code to process the message here.\n    window.location.replace(\"/newPage.html\");\n    // Alternatively, use the following:\n    // window.location.href = \"/newPage.html\";\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Null Optional Parameters in TypeScript\nDESCRIPTION: This TypeScript custom function `getWeatherReport` takes two optional parameters, `zipCode` (number) and `dayOfWeek` (string), denoted by `?`. It explicitly checks if either parameter is `null` (indicating omission) and assigns a default value if necessary (`98052` for `zipCode`, \"Wednesday\" for `dayOfWeek`). The function signature clearly defines the optional parameters and their types.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets a weather report for a specified zipCode and dayOfWeek\n * @customfunction\n * @param zipCode Zip code. If omitted, zipCode = 98052.\n * @param [dayOfWeek] Day of the week. If omitted, dayOfWeek = Wednesday.\n * @returns Weather report for the day of the week in that zip code.\n */\nfunction getWeatherReport(zipCode?: number, dayOfWeek?: string): string {\n  if (zipCode === null) {\n    zipCode = 98052;\n  }\n\n  if (dayOfWeek === null) {\n    dayOfWeek = \"Wednesday\";\n  }\n\n  // Get weather report for specified zipCode and dayOfWeek.\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting the Last Worksheet with Excel JavaScript API\nDESCRIPTION: Deletes the last worksheet in the workbook sequence. It first loads all worksheet items to identify the last one, checks if it's not the only sheet (as the last sheet cannot be deleted), and then calls the `delete()` method on the last sheet object. A console message indicates which sheet is being deleted.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.load(\"items/name\");\n\n    await context.sync();\n    if (sheets.items.length === 1) {\n        console.log(\"Unable to delete the only worksheet in the workbook\");\n    } else {\n        let lastSheet = sheets.items[sheets.items.length - 1];\n\n        console.log(`Deleting worksheet named \"${lastSheet.name}\"`);\n        lastSheet.delete();\n\n        await context.sync();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Open Task Pane in Unified Manifest (JSON)\nDESCRIPTION: Specifies a task pane to open automatically by setting the 'view' property to 'Office.AutoShowTaskpaneWithDocument' within an 'openPage' action in the 'runtimes' array of a unified manifest (manifest.json). This configuration designates the page specified in 'code.page' as the one to auto-open. This feature requires the AddInCommands 1.1 requirement set.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/automatically-open-a-task-pane-with-a-document.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"runtimes\": [\n    {\n        ...\n        \"code\": {\n            \"page\": \"https://contoso.com/taskpane.html\"\n        },\n        \"actions\": [\n            {\n                \"id\": \"ShowTaskPane\",\n                \"type\": \"openPage\",\n                \"view\": \"Office.AutoShowTaskpaneWithDocument\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining an Office Task Pane Add-in Manifest with Commands (XML)\nDESCRIPTION: This XML manifest defines an Office Task Pane Add-in (`TaskPaneApp`). It includes basic settings like ID, version, provider, display name, description, icons, and supported domains. It specifies Word (`Document`) as the host and sets a default task pane URL. Crucially, it uses `VersionOverrides` to define custom UI elements for the Word desktop client: a 'Getting Started' callout, a `FunctionFile` for JavaScript logic, and a custom ribbon tab (`CustomTab`) named 'Contoso.Tab1'. Within this tab, a group (`Group`) contains controls: a button (`Contoso.FunctionButton`) that executes a JavaScript function (`writeText`), another button (`Contoso.TaskpaneButton`) that shows a specific task pane (`Contoso.Taskpane1.Url`), and a menu control (`Contoso.Menu`) with items that also show task panes. Resource IDs (`resid`) are used extensively to reference localized strings and URLs defined elsewhere.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<OfficeApp xmlns=\"http://schemas.microsoft.com/office/appforoffice/1.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bt=\"http://schemas.microsoft.com/office/officeappbasictypes/1.0\" xmlns:ov=\"http://schemas.microsoft.com/office/taskpaneappversionoverrides\" xsi:type=\"TaskPaneApp\">\n\n  <!-- See https://github.com/OfficeDev/Office-Add-in-Commands-Samples for documentation. -->\n\n  <!-- BeginBasicSettings: Add-in metadata, used for all versions of Office unless override provided. -->\n\n  <!-- IMPORTANT! Id must be unique for your add-in. If you copy this manifest, ensure that you change this ID to your own GUID. -->\n  <Id>e504fb41-a92a-4526-b101-542f357b7acb</Id>\n  <Version>1.0.0.0</Version>\n  <ProviderName>Contoso</ProviderName>\n  <DefaultLocale>en-US</DefaultLocale>\n  <!-- The display name of your add-in. Used on the store and various placed of the Office UI such as the add-in's dialog. -->\n  <DisplayName DefaultValue=\"Add-in Commands Sample\" />\n  <Description DefaultValue=\"Sample that illustrates add-in commands basic control types and actions.\" />\n  <!-- Icon for your add-in. Used on installation screens and the add-in's dialog. -->\n  <IconUrl DefaultValue=\"https://contoso.com/assets/icon-32.png\" />\n  <HighResolutionIconUrl DefaultValue=\"https://contoso.com/assets/hi-res-icon.png\" />\n  <SupportUrl DefaultValue=\"[Insert the URL of a page that provides support information for the app]\" />\n  <!-- Domains that are allowed when navigating. For example, if you use ShowTaskpane and then have an href link, navigation is only allowed if the domain is on this list. -->\n  <AppDomains>\n    <AppDomain>AppDomain1</AppDomain>\n    <AppDomain>AppDomain2</AppDomain>\n  </AppDomains>\n  <!-- End Basic Settings. -->\n\n  <!-- BeginTaskPaneMode integration. Any client that doesn't understand commands will use this section.\n    This section will also be used if there are no VersionOverrides. -->\n  <Hosts>\n    <Host Name=\"Document\"/>\n  </Hosts>\n  <DefaultSettings>\n    <SourceLocation DefaultValue=\"https://commandsimple.azurewebsites.net/Taskpane.html\" />\n  </DefaultSettings>\n  <!-- EndTaskPaneMode integration. -->\n\n  <Permissions>ReadWriteDocument</Permissions>\n\n  <!-- BeginAddinCommandsMode integration. -->\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/taskpaneappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n    <Hosts>\n      <!-- Each host can have a different set of commands. Cool huh!? -->\n      <!-- Workbook=Excel, Document=Word, Presentation=PowerPoint -->\n      <!-- Make sure the hosts you override match the hosts declared in the top section of the manifest. -->\n      <Host xsi:type=\"Document\">\n        <!-- Form factor. DesktopFormFactor is supported. Other form factors are available depending on the host and feature. -->\n        <DesktopFormFactor>\n          <!-- This code enables a customizable message to be displayed when the add-in is loaded successfully upon individual install. -->\n          <GetStarted>\n            <!-- Title of the Getting Started callout. The resid attribute points to a ShortString resource. -->\n            <Title resid=\"Contoso.GetStarted.Title\"/>\n            <!-- Description of the Getting Started callout. resid points to a LongString resource. -->\n            <Description resid=\"Contoso.GetStarted.Description\"/>  \n            <!-- Points to a URL resource which details how the add-in should be used. -->\n            <LearnMoreUrl resid=\"Contoso.GetStarted.LearnMoreUrl\"/>\n          </GetStarted>\n          <!-- Function file is an HTML page that includes, or loads, the JavaScript where functions for ExecuteAction will be called. Think of the FunctionFile as the \"code behind\" ExecuteFunction. -->\n          <FunctionFile resid=\"Contoso.FunctionFile.Url\" />\n\n          <!-- PrimaryCommandSurface==Main Office app ribbon. -->\n          <ExtensionPoint xsi:type=\"PrimaryCommandSurface\">\n            <!-- Use OfficeTab to extend an existing Tab. Use CustomTab to create a new tab. -->\n            <!-- Documentation includes all the IDs currently tested to work. -->\n            <CustomTab id=\"Contoso.Tab1\">\n              <!--Group ID-->\n              <Group id=\"Contoso.Tab1.Group1\">\n                <!--Label for your group. resid must point to a ShortString resource. -->\n                <Label resid=\"Contoso.Tab1.GroupLabel\" />\n                <Icon>\n                  <!-- Each size needs its own icon resource or it will look distorted when resized. -->\n                  <!-- Icons. Required sizes: 16, 32, 80; optional: 20, 24, 40, 48, 64. You should provide as many sizes as possible for a great user experience. -->\n                  <!-- Use PNG icons and remember that all URLs on the resources section must use HTTPS. -->\n                  <bt:Image size=\"16\" resid=\"Contoso.TaskpaneButton.Icon16\" />\n                  <bt:Image size=\"32\" resid=\"Contoso.TaskpaneButton.Icon32\" />\n                  <bt:Image size=\"80\" resid=\"Contoso.TaskpaneButton.Icon80\" />\n                </Icon>\n\n                <!-- Control. It can be of type \"Button\" or \"Menu\". -->\n                <Control xsi:type=\"Button\" id=\"Contoso.FunctionButton\">\n                  <!-- Label for your button. resid must point to a ShortString resource. -->\n                  <Label resid=\"Contoso.FunctionButton.Label\" />\n                  <Supertip>\n                    <!-- ToolTip title. resid must point to a ShortString resource. -->\n                    <Title resid=\"Contoso.FunctionButton.Label\" />\n                    <!-- ToolTip description. resid must point to a LongString resource. -->\n                    <Description resid=\"Contoso.FunctionButton.Tooltip\" />\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Contoso.FunctionButton.Icon16\" />\n                    <bt:Image size=\"32\" resid=\"Contoso.FunctionButton.Icon32\" />\n                    <bt:Image size=\"80\" resid=\"Contoso.FunctionButton.Icon80\" />\n                  </Icon>\n                  <!-- This is what happens when the command is triggered (e.g., click on the ribbon button). -->\n                  <!-- Supported actions are ExecuteFunction or ShowTaskpane. -->\n                  <!-- Look at the FunctionFile.html page for reference on how to implement the function. -->\n                  <Action xsi:type=\"ExecuteFunction\">\n                    <!-- Name of the function to call. This function needs to exist in the global DOM namespace of the function file. -->\n                    <FunctionName>writeText</FunctionName>\n                  </Action>\n                </Control>\n\n                <Control xsi:type=\"Button\" id=\"Contoso.TaskpaneButton\">\n                  <Label resid=\"Contoso.TaskpaneButton.Label\" />\n                  <Supertip>\n                    <Title resid=\"Contoso.TaskpaneButton.Label\" />\n                    <Description resid=\"Contoso.TaskpaneButton.Tooltip\" />\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Contoso.TaskpaneButton.Icon16\" />\n                    <bt:Image size=\"32\" resid=\"Contoso.TaskpaneButton.Icon32\" />\n                    <bt:Image size=\"80\" resid=\"Contoso.TaskpaneButton.Icon80\" />\n                  </Icon>\n                  <Action xsi:type=\"ShowTaskpane\">\n                    <TaskpaneId>Button2Id1</TaskpaneId>\n                    <!-- Provide a URL resource ID for the location that will be displayed on the task pane. -->\n                    <SourceLocation resid=\"Contoso.Taskpane1.Url\" />\n                  </Action>\n                </Control>\n                <!-- Menu example. -->\n                <Control xsi:type=\"Menu\" id=\"Contoso.Menu\">\n                  <Label resid=\"Contoso.Dropdown.Label\" />\n                  <Supertip>\n                    <Title resid=\"Contoso.Dropdown.Label\" />\n                    <Description resid=\"Contoso.Dropdown.Tooltip\" />\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Contoso.TaskpaneButton.Icon16\" />\n                    <bt:Image size=\"32\" resid=\"Contoso.TaskpaneButton.Icon32\" />\n                    <bt:Image size=\"80\" resid=\"Contoso.TaskpaneButton.Icon80\" />\n                  </Icon>\n                  <Items>\n                    <Item id=\"Contoso.Menu.Item1\">\n                      <Label resid=\"Contoso.Item1.Label\"/>\n                      <Supertip>\n                        <Title resid=\"Contoso.Item1.Label\" />\n                        <Description resid=\"Contoso.Item1.Tooltip\" />\n                      </Supertip>\n                      <Icon>\n                        <bt:Image size=\"16\" resid=\"Contoso.TaskpaneButton.Icon16\" />\n                        <bt:Image size=\"32\" resid=\"Contoso.TaskpaneButton.Icon32\" />\n                        <bt:Image size=\"80\" resid=\"Contoso.TaskpaneButton.Icon80\" />\n                      </Icon>\n                      <Action xsi:type=\"ShowTaskpane\">\n                        <TaskpaneId>MyTaskPaneID1</TaskpaneId>\n                        <SourceLocation resid=\"Contoso.Taskpane1.Url\" />\n                      </Action>\n                    </Item>\n\n                    <Item id=\"Contoso.Menu.Item2\">\n                      <Label resid=\"Contoso.Item2.Label\"/>\n                      <Supertip>\n                        <Title resid=\"Contoso.Item2.Label\" />\n                        <Description resid=\"Contoso.Item2.Tooltip\" />\n                      </Supertip>\n                      <Icon>\n                        <bt:Image size=\"16\" resid=\"Contoso.TaskpaneButton.Icon16\" />\n                        <bt:Image size=\"32\" resid=\"Contoso.TaskpaneButton.Icon32\" />\n                        <bt:Image size=\"80\" resid=\"Contoso.TaskpaneButton.Icon80\" />\n                      </Icon>\n                      <Action xsi:type=\"ShowTaskpane\">\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Binding from Selection using Office JavaScript API\nDESCRIPTION: This JavaScript snippet illustrates how to create a persistent binding to the user's current text selection within an Office document using the `Office.context.document.bindings.addFromSelectionAsync` method. It specifies the binding type as text (`Office.BindingType.Text`) and assigns an ID ('myBinding'). The asynchronous callback handles the result, indicating success by displaying the binding type and ID, or showing an error message, using a helper `write` function to output to an HTML element with ID 'message'. It requires the Office JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/support-for-task-pane-and-content-add-ins.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nOffice.context.document.bindings.addFromSelectionAsync(\n    Office.BindingType.Text, { id: 'myBinding' }, function (asyncResult) {\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n        write('Action failed. Error: ' + asyncResult.error.message);\n    } else {\n        write('Added new binding with type: ' + \n            asyncResult.value.type + ' and id: ' + asyncResult.value.id);\n    }\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Assigning Filter Table Button Click Handler - Office.js JavaScript\nDESCRIPTION: Registers an onclick event handler for the 'filter-table' button, invoking the filterTable function through a tryCatch wrapper. This code should be placed within the Office.onReady function to ensure the DOM is loaded and Office APIs are available. Dependencies include Office.js and a tryCatch utility function; the button with id 'filter-table' must exist in the DOM. The handler ensures user actions on the button invoke the intended filtering operation in the Excel add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\\\"filter-table\\\").onclick = () => tryCatch(filterTable);\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler for Insert Text Button in JavaScript\nDESCRIPTION: This JavaScript snippet assigns an onclick event handler to the HTML button with the ID 'insert-text-into-range'. When clicked, it calls the 'insertTextIntoRange' function, wrapped within a 'tryCatch' helper function (assumed to be defined elsewhere). Requires the HTML button defined previously and the 'tryCatch' and 'insertTextIntoRange' functions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"insert-text-into-range\").onclick = () => tryCatch(insertTextIntoRange);\n```\n\n----------------------------------------\n\nTITLE: Creating Data Validation Input Prompts in Excel using JavaScript\nDESCRIPTION: This code shows how to set up an instructional prompt for cells with data validation using the Office JavaScript API. It gets the active worksheet and a specific range (\"B2:C5\"), then configures the `prompt` property of the range's `dataValidation`. It sets a custom `message`, enables the prompt with `showPrompt: true` (default is false), and provides a `title`. This prompt appears when a user hovers over or selects a cell in the range. Requires the Excel JavaScript API library and runs within an `Excel.run` context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-data-validation.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let range = sheet.getRange(\"B2:C5\");\n\n    range.dataValidation.prompt = {\n            message: \"Please enter a positive whole number.\",\n            showPrompt: true, // The default is 'false'.\n            title: \"Positive Whole Numbers Only.\"\n        };\n\n    // Set range.dataValidation.rule and optionally .errorAlert here.\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Volatile Custom Function in JavaScript\nDESCRIPTION: This JavaScript snippet defines a `roll6sided` custom function marked with the `@volatile` JSDoc tag. Volatile functions recalculate every time Excel performs any calculation, regardless of whether their inputs changed. This function simulates rolling a 6-sided die using `Math.random()`, ensuring a potentially different result on each recalculation. It returns a number.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Simulates rolling a 6-sided die.\n * @customfunction\n * @volatile\n */\nfunction roll6sided(): number {\n  return Math.floor(Math.random() * 6) + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Selected Data with Office.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to asynchronously retrieve the user's current selection in an Office document using the Office.js API. It uses getSelectedDataAsync with the coercion type set to Text, then outputs either the retrieved string content or an error message to a page element. Requires the Office JavaScript API (Office.js) to be loaded and assumes the existence of a DOM element with id 'message'. The function write appends strings to this element; asyncResult provides status and error information.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/read-and-write-data-to-the-active-selection-in-a-document-or-spreadsheet.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.document.getSelectedDataAsync(Office.CoercionType.Text, function (asyncResult) {\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n        write('Action failed. Error: ' + asyncResult.error.message);\n    }\n    else {\n        write('Selected data: ' + asyncResult.value);\n    }\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n\n----------------------------------------\n\nTITLE: Applying CORS Middleware in ASP.NET Core\nDESCRIPTION: This C# snippet shows how to apply the previously defined CORS policy to the ASP.NET Core request pipeline. It should be added to the `Configure` method in `Startup.cs`, typically before `app.UseAuthorization()` or `app.UseEndpoints`. It uses the `MyAllowSpecificOrigins` field to specify which policy to enable.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseCors(MyAllowSpecificOrigins);\n```\n\n----------------------------------------\n\nTITLE: Defining CopyWebpackPlugin with Conditional Manifest Transformation - JavaScript\nDESCRIPTION: This snippet shows a detailed CopyWebpackPlugin setup, copying CSS, assets, and manifest files to the build output. The manifest is conditionally transformed based on the build type (development or production), with URLs swapped accordingly. The patterns array ensures all required static resources are present in the output. Inputs are CSS, assets, and manifest JSON/XML files; outputs are the same assets in the output directory. This object should be included in the plugins array of webpack.config.js.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew CopyWebpackPlugin({\n  patterns: [\n  {\n    from: \"./src/taskpane/taskpane.css\",\n    to: \"taskpane.css\",\n  },\n  {\n    from: \"./src/settings/dialog.css\",\n    to: \"dialog.css\",\n  },\n  {\n    from: \"assets/*\",\n    to: \"assets/[name][ext][query]\",\n  },\n  {\n    from: \"manifest*.json\", // The file extension is \"xml\" if the add-in only manifest is being used.\n    to: \"[name]\" + \"[ext]\",\n    transform(content) {\n      if (dev) {\n        return content;\n      } else {\n        return content.toString().replace(new RegExp(urlDev, \"g\"), urlProd);\n      }\n    },\n  },\n]})\n```\n\n----------------------------------------\n\nTITLE: Validating Manifest with Latest Tool via npx (Command Line)\nDESCRIPTION: Executes the `office-addin-manifest` validation tool using `npx`, ensuring the latest version of the tool is fetched and used without requiring a global installation. Replace `MANIFEST_FILE` with the name of the manifest file. This command is recommended if the globally installed version isn't working or to ensure up-to-date validation. Requires Node.js and npm.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/troubleshoot-manifest.md#_snippet_4\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-manifest validate MANIFEST_FILE\n```\n\n----------------------------------------\n\nTITLE: Example Production Application ID URI\nDESCRIPTION: Provides a concrete example of a correctly formatted Application ID URI using 'contoso.com' as the fully qualified domain name and `<app-id>` as the placeholder for the application's client ID.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_4\n\nLANGUAGE: uri\nCODE:\n```\napi://contoso.com/<app-id>\n```\n\n----------------------------------------\n\nTITLE: Showing Dialog on Button Click in Office Add-in (Excel, PowerPoint, or Word) - Markdown\nDESCRIPTION: This Copilot prompt provides a pattern for showing a dialog box in an Office application upon button click from an add-in, via the Office JavaScript API. The snippet is cross-application (Excel, PowerPoint, Word), and Copilot-generated code will include UI handler and dialog instantiation patterns with Office.js.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nShow a dialog in the application *when a user clicks a button \nin the add-in* using the Office JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating SharePoint Service Principal Reply URLs with PowerShell\nDESCRIPTION: This PowerShell script resolves the AADSTS50011 error encountered when debugging Office Add-ins on the web. It connects to Microsoft Graph, retrieves the SharePoint service principal ('00000003-0000-0ff1-ce00-000000000000'), adds the specified add-in's redirect URL (replace the placeholder `{Full absolute URL to add-in home page}`) to the list of allowed Reply URLs, and updates the service principal configuration. Requires the Microsoft Graph PowerShell module and appropriate permissions (Application.ReadWrite.All). This is often needed because newly deployed web applications might take time to propagate.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/debug-office-add-ins-in-visual-studio.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n```powershell\nConnect-MgGraph -Scopes Application.ReadWrite.All\n$sharepointPrincipal = Get-MgServiceprincipal -Filter \"AppId eq '00000003-0000-0ff1-ce00-000000000000'\"\n$sharepointPrincipal | fl\n$replyUrls = $sharepointPrincipal.ReplyUrls\n$replyUrls += \"{Full absolute URL to add-in home page}\"\nUpdate-MgServiceprincipal -ServicePrincipalId $sharepointPrincipal.Id -ReplyUrls $replyUrls\n```\n```\n\n----------------------------------------\n\nTITLE: Manually Removing Office Add-in Caches on Windows - Batch\nDESCRIPTION: This snippet documents the local file system paths to both the Wef and web caches for Office Add-ins on Windows. Administrators or users manually clear the add-in cache by deleting the contents of these directories. No external dependencies are required, but access rights may be necessary. Inputs are the appropriate file directories, and the expected outcome is the removal of cached add-in data for the host applications.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/clear-cache.md#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n%LOCALAPPDATA%\\Microsoft\\Office\\16.0\\Wef\\\n```\n\nLANGUAGE: batch\nCODE:\n```\n%userprofile%\\AppData\\Local\\Packages\\Microsoft.Win32WebViewHost_cw5n1h2txyewy\\AC\\#!123\\INetCache\\\n```\n\n----------------------------------------\n\nTITLE: Building the Project using NPM\nDESCRIPTION: This command line snippet executes the build script defined in the project's `package.json` using npm. This command should be run after modifying the webpack configuration (`webpack.config.js`) to regenerate the bundled JavaScript files reflecting the shared runtime configuration changes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_8\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Production-Level Store Validation via NPM (Command Line)\nDESCRIPTION: Executes the 'validate' npm script with the '-p' flag to run production-level validation checks for a Microsoft 365 and Copilot add-in. This command is typically used before submitting an add-in to the store. Requires Node.js, npm, and a project with a configured 'validate' script (often using tools like 'office-addin-manifest') in its package.json. The '--' separates npm arguments from the script's arguments, passing '-p' directly to the validation script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/office-store-validate.md#_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\nnpm run validate -- -p\n```\n\n----------------------------------------\n\nTITLE: Displaying Microsoft.Win32WebViewHost Package Details (Sample Output) in PowerShell\nDESCRIPTION: This is a sample output from the Get-AppxPackage command, demonstrating what information is presented when querying the Microsoft.Win32WebViewHost package in PowerShell. These details help identify the package and particularly the PackageFullName, a key value needed for setting the debugging environment variable. The output includes information such as Name, Publisher, Version, InstallLocation, and various status flags.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/enable-debugging-on-edge-devtools.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nName              : Microsoft.Win32WebViewHost\nPublisher         : CN=Microsoft Windows, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\nArchitecture      : Neutral\nResourceId        : neutral\nVersion           : 10.0.18362.449\nPackageFullName   : Microsoft.Win32WebViewHost_10.0.18362.449_neutral_neutral_cw5n1h2txyewy\nInstallLocation   : C:\\\\Windows\\\\SystemApps\\\\Microsoft.Win32WebViewHost_cw5n1h2txyewy\nIsFramework       : False\nPackageFamilyName : Microsoft.Win32WebViewHost_cw5n1h2txyewy\nPublisherId       : cw5n1h2txyewy\nIsResourcePackage : False\nIsBundle          : False\nIsDevelopmentMode : False\nNonRemovable      : True\nIsPartiallyStaged : False\nSignatureKind     : System\nStatus            : Ok\n```\n\n----------------------------------------\n\nTITLE: Adding jQuery Script Reference to Office Add-in HTML - HTML\nDESCRIPTION: Adds a jQuery library reference to the HTML <head> section to ensure that script dependencies from Script Lab (which frequently uses jQuery) will run in a standalone Office Add-in project. This snippet is essential for enabling code copied from Script Lab that depends on jQuery. The script tag should be placed within the <head> of /src/taskpane/taskpane.html. The jQuery version may vary; check Script Lab's Libraries tab for specifics.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/create-an-office-add-in-from-script-lab.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\\\"https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.3.1.js\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Outlook Add-in Manifest for Spam Reporting (XML)\nDESCRIPTION: This XML snippet shows the <VersionOverrides> node configuration within an Outlook add-in manifest (manifest.xml) specifically for enabling integrated spam reporting. It defines runtimes for different Outlook clients (web/Mac/new Windows vs. classic Windows), sets the extension point to `ReportPhishingCommandSurface`, customizes the ribbon button (`Control`) and its action (`ExecuteFunction` calling `onSpamReport`), configures the preprocessing dialog (`PreProcessingDialog`) with options, free text, and more info links, and defines necessary resources like icons, URLs, and localized strings. Requires Mailbox API version 1.14 or higher.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n    <Requirements>\n      <bt:Sets DefaultMinVersion=\"1.14\">\n        <bt:Set Name=\"Mailbox\"/>\n      </bt:Sets>\n    </Requirements>\n    <Hosts>\n      <Host xsi:type=\"MailHost\">\n        <Runtimes>\n            <!-- References the HTML file that links to the spam-reporting event handler.\n                 This is used by Outlook on the web and on the new Mac UI, and new Outlook on Windows. -->\n          <Runtime resid=\"WebViewRuntime.Url\">\n            <!-- References the JavaScript file that contains the spam-reporting event handler. This is used by classic Outlook on Windows. -->\n            <Override type=\"javascript\" resid=\"JSRuntime.Url\"/>\n          </Runtime>\n        </Runtimes>\n        <DesktopFormFactor>\n          <FunctionFile resid=\"WebViewRuntime.Url\"/>\n          <!-- Implements the integrated spam-reporting feature in the add-in. -->\n          <ExtensionPoint xsi:type=\"ReportPhishingCommandSurface\">\n            <ReportPhishingCustomization>\n              <!-- Configures the ribbon button. -->\n              <Control xsi:type=\"Button\" id=\"spamReportingButton\">\n                <Label resid=\"spamButton.Label\"/>\n                <Supertip>\n                  <Title resid=\"spamButton.Label\"/>\n                  <Description resid=\"spamSuperTip.Text\"/>\n                </Supertip>\n                <Icon>\n                  <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                  <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                  <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                </Icon>\n                <Action xsi:type=\"ExecuteFunction\">\n                  <FunctionName>onSpamReport</FunctionName>\n                </Action>\n              </Control>\n              <!-- Configures the preprocessing dialog. -->\n              <PreProcessingDialog>\n                <Title resid=\"PreProcessingDialog.Label\"/>\n                <Description resid=\"PreProcessingDialog.Text\"/>\n                <ReportingOptions>\n                  <Title resid=\"OptionsTitle.Label\"/>\n                  <Option resid=\"Option1.Label\"/>\n                  <Option resid=\"Option2.Label\"/>\n                  <Option resid=\"Option3.Label\"/>\n                </ReportingOptions>\n                <FreeTextLabel resid=\"FreeText.Label\"/>\n                <MoreInfo>\n                  <MoreInfoText resid=\"MoreInfo.Label\"/>\n                  <MoreInfoUrl resid=\"MoreInfo.Url\"/>\n                </MoreInfo>\n              </PreProcessingDialog>\n             <!-- Identifies the runtime to be used. This is also referenced by the Runtime element. -->\n              <SourceLocation resid=\"WebViewRuntime.Url\"/>\n            </ReportPhishingCustomization> \n          </ExtensionPoint>\n        </DesktopFormFactor>\n      </Host>\n    </Hosts>\n    <Resources>\n      <bt:Images>\n        <bt:Image id=\"Icon.16x16\" DefaultValue=\"https://localhost:3000/assets/icon-16.png\"/>\n        <bt:Image id=\"Icon.32x32\" DefaultValue=\"https://localhost:3000/assets/icon-32.png\"/>\n        <bt:Image id=\"Icon.80x80\" DefaultValue=\"https://localhost:3000/assets/icon-80.png\"/>\n      </bt:Images>\n      <bt:Urls>\n        <bt:Url id=\"WebViewRuntime.Url\" DefaultValue=\"https://localhost:3000/commands.html\"/>\n        <bt:Url id=\"JSRuntime.Url\" DefaultValue=\"https://localhost:3000/spamreporting.js\"/>\n        <bt:Url id=\"MoreInfo.Url\" DefaultValue=\"https://www.contoso.com/spamreporting\"/>\n      </bt:Urls>\n      <bt:ShortStrings>\n        <bt:String id=\"spamButton.Label\" DefaultValue=\"Report Spam Message\"/>\n        <bt:String id=\"PreProcessingDialog.Label\" DefaultValue=\"Report Spam Message\"/>\n        <bt:String id=\"OptionsTitle.Label\" DefaultValue=\"Why are you reporting this email?\"/>\n        <bt:String id=\"FreeText.Label\" DefaultValue=\"Provide additional information, if any:\"/>\n        <bt:String id=\"MoreInfo.Label\" DefaultValue=\"Reporting unsolicited messages\"/>\n        <bt:String id=\"Option1.Label\" DefaultValue=\"Received spam email.\"/>\n        <bt:String id=\"Option2.Label\" DefaultValue=\"Received a phishing email.\"/>\n        <bt:String id=\"Option3.Label\" DefaultValue=\"I'm not sure this is a legitimate email.\"/>\n      </bt:ShortStrings>\n      <bt:LongStrings>\n        <bt:String id=\"spamSuperTip.Text\" DefaultValue=\"Report an unsolicited message.\"/>\n        <bt:String id=\"PreProcessingDialog.Text\" DefaultValue=\"Thank you for reporting this message.\"/>\n      </bt:LongStrings>\n    </Resources>\n  </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Getting Invocation Cell Address in JavaScript Custom Function\nDESCRIPTION: This JavaScript snippet shows an Excel custom function `getAddress` that retrieves the address of the cell invoking it. It utilizes the `@requiresAddress` JSDoc tag, which necessitates the last parameter to be of type `CustomFunctions.Invocation`. The function then accesses the `invocation.address` property to get and return the cell address.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Return the address of the cell that invoked the custom function. \n * @customfunction\n * @param {number} first First parameter.\n * @param {number} second Second parameter.\n * @param {CustomFunctions.Invocation} invocation Invocation object. \n * @requiresAddress \n */\nfunction getAddress(first, second, invocation) {\n  const address = invocation.address;\n  return address;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRun Events and Alternates in Office Add-in Manifest - JSON\nDESCRIPTION: This JSON snippet outlines how to specify auto-run events and alternates for an Office Add-in manifest. It sets requirements based on Office capabilities (such as MailBox v1.10), enumerates events like new message compose and message sending, configures user prompts for send operations, and details alternate manifest properties. Dependencies include compliance with the Microsoft Office JavaScript Add-in manifest schema and correct referencing of icon assets. The input expects specific schema-compliant JSON, with required event type and actionId properties, and may be constrained by the manifest version and scope requirements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/unified-manifest-overview.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n        ]\n      },\n      \"autoRunEvents\": [\n        {\n          \"requirements\": {\n            \"capabilities\": [\n              {\n                \"name\": \"MailBox\", \"minVersion\": \"1.10\"\n              }\n            ]\n          },\n          \"events\": [\n            {\n              \"type\": \"newMessageComposeCreated\",\n              \"actionId\": \"onNewMessageComposeCreated\"\n            },\n            {\n              \"type\": \"messageSending\",\n              \"actionId\": \"onMessageSending\",\n              \"options\": {\n                \"sendMode\": \"promptUser\"\n              }\n            }\n          ]\n        }\n      ],\n      \"alternates\": [\n        {\n          \"requirements\": {\n            \"scopes\": [ \"mail\" ]\n          },\n          \"prefer\": {\n            \"comAddin\": {\n              \"progId\": \"ContosoExtension\"\n            }\n          },\n          \"hide\": {\n            \"storeOfficeAddin\": {\n              \"officeAddinId\": \"00000000-0000-0000-0000-000000000000\",\n              \"assetId\": \"WA000000000\"\n            }\n          },\n          \"alternateIcons\": {\n            \"icon\": {\n              \"size\": 64,\n              \"url\": \"https://contoso.com/assets/icon64x64.jpg\"\n            },\n            \"highResolutionIcon\": {\n              \"size\": 64,\n              \"url\": \"https://contoso.com/assets/icon128x128.jpg\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Localization Overrides in Add-in Manifest (XML)\nDESCRIPTION: This XML snippet from an Office Add-in manifest file demonstrates how to specify URLs for localized custom function metadata files. It sets a default locale (`en-us`) pointing to `functions.json` and provides an override for the `de-de` (German) locale, directing Excel to load metadata from `functions-de.json` when the user's Office language is German. This uses the `<Resources>`, `<bt:Urls>`, and `<bt:Override>` elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-naming.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<DefaultLocale>en-us</DefaultLocale>\n...\n<Resources>\n     <bt:Urls>\n        <bt:Url id=\"Contoso.Functions.Metadata.Url\" DefaultValue=\"https://localhost:3000/dist/functions.json\"/>\n          <bt:Override Locale=\"de-de\" Value=\"https://localhost:3000/dist/functions-de.json\" />\n        </bt:url>\n        \n     </bt:Urls>\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Defining an Office Content Add-in Manifest (XML)\nDESCRIPTION: This XML snippet defines the manifest for an Office Content Add-in (`xsi:type=\"ContentApp\"`). It specifies essential metadata such as the unique `Id`, `Version`, `ProviderName`, `DefaultLocale`, `DisplayName`, `Description`, icon URLs (`IconUrl`, `HighResolutionIconUrl`), and `SupportUrl`. It declares supported `Hosts` (Excel Workbook and Access Database) and `Requirements` (specifically the `TableBindings` requirement set). The `DefaultSettings` specify the initial content source URL (`SourceLocation`) and the requested dimensions (`RequestedWidth`, `RequestedHeight`). Finally, it sets the `Permissions` level to `Restricted` and allows snapshots (`AllowSnapshot`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/xml-manifest-overview.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<OfficeApp\n  xmlns=\"http://schemas.microsoft.com/office/appforoffice/1.1\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:type=\"ContentApp\">\n  <!--IMPORTANT! Id must be unique for each add-in. If you copy this manifest ensure that you change this id to your own GUID. -->\n  <Id>01eac144-e55a-45a7-b6e3-f1cc60ab0126</Id>\n  <AlternateId>en-US\\WA123456789</AlternateId>\n  <Version>1.0.0.0</Version>\n  <ProviderName>Microsoft</ProviderName>\n  <DefaultLocale>en-US</DefaultLocale>\n  <DisplayName DefaultValue=\"Sample content add-in\" />\n  <Description DefaultValue=\"Describe the features of this app.\" />\n  <IconUrl DefaultValue=\"https://contoso.com/assets/icon-32.png\" />\n  <HighResolutionIconUrl DefaultValue=\"https://contoso.com/assets/hi-res-icon.png\" />\n  <SupportUrl DefaultValue=\"[Insert the URL of a page that provides support information for the app]\" />\n  <Hosts>\n    <Host Name=\"Workbook\" />\n    <Host Name=\"Database\" />\n  </Hosts>\n  <Requirements>\n    <Sets DefaultMinVersion=\"1.1\">\n      <Set Name=\"TableBindings\" />\n    </Sets>\n  </Requirements>  \n  <DefaultSettings>\n    <SourceLocation DefaultValue=\"https://contoso.com/apps/content.html\" />\n    <RequestedWidth>400</RequestedWidth>\n    <RequestedHeight>400</RequestedHeight>\n  </DefaultSettings>\n  <Permissions>Restricted</Permissions>\n  <AllowSnapshot>true</AllowSnapshot>\n</OfficeApp>\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Notification and Event Handler Framework for PowerPoint Add-in (JavaScript)\nDESCRIPTION: This JavaScript snippet initializes the core logic for the add-in's task pane, including the setup of the notification mechanism with Fabric UI, structure for button event handlers, and helper functions to display messages. It is intended for inclusion in the main script file (Home.js), with dependencies on jQuery, Office.js, and Fabric UI's MessageBanner component. Placeholders for key add-in functions (like insertImage, insertText, and navigation handlers) are included as TODOs. The script expects relevant HTML elements to exist for notifications and button controls; ensure dependencies are loaded before use.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function () {\\n    \\\"use strict\\\";\\n\\n    let messageBanner;\\n\\n    Office.onReady(function () {\\n        $(document).ready(function () {\\n            // Initialize the FabricUI notification mechanism and hide it.\\n            const element = document.querySelector('.MessageBanner');\\n            messageBanner = new components.MessageBanner(element);\\n            messageBanner.hideBanner();\\n\\n            // TODO1: Assign event handler for insert-image button.\\n            // TODO4: Assign event handler for insert-text button.\\n            // TODO6: Assign event handler for get-slide-metadata button.\\n            // TODO8: Assign event handlers for add-slides and the four navigation buttons.\\n        });\\n    });\\n\\n    // TODO2: Define the insertImage function.\\n\\n    // TODO3: Define the insertImageFromBase64String function.\\n\\n    // TODO5: Define the insertText function.\\n\\n    // TODO7: Define the getSlideMetadata function.\\n\\n    // TODO9: Define the addSlides and navigation functions.\\n\\n    // Helper function for displaying notifications.\\n    function showNotification(header, content) {\\n        $(\\\"#notification-header\\\").text(header);\\n        $(\\\"#notification-body\\\").text(content);\\n        messageBanner.showBanner();\\n        messageBanner.toggleExpansion();\\n    }\\n})();\n```\n\n----------------------------------------\n\nTITLE: Getting Text from a Range of Cells - Excel JavaScript API - JavaScript\nDESCRIPTION: Retrieves the display text for each cell in range B2:E6 and logs the results. Employs range.load('text') to capture formatted display strings, even for formulas. Output is a 2D array of text representations as seen by end-users.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let range = sheet.getRange(\"B2:E6\");\n    range.load(\"text\");\n    await context.sync();\n\n    console.log(JSON.stringify(range.text, null, 4));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime for Prepend/Append Actions in Outlook Manifest – JSON\nDESCRIPTION: This JSON manifest snippet configures the add-in's runtime to enable executing prepend and append actions when sending messages or appointments. It declares requirement sets, desktop targeting, runtime location, short execution lifetime, and maps UI-less function command actions for prependHeaderOnSend and appendDisclaimerOnSend. Prerequisites: Outlook Add-in project, manifest.json, and server hosting the HTML command page. Key properties: requirements, id, code.page, actions. Inputs are manifest structure, outputs are ability to trigger actions. Limited to platforms supporting Mailbox requirement set 1.13 or later.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/append-on-send.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requirements\": {\n        \"capabilities\": [\n            {\n                \"name\": \"Mailbox\",\n                \"minVersion\": \"1.13\"\n            }\n        ],\n        \"formFactors\": [\n            \"desktop\"\n        ]\n    },\n    \"id\": \"function_command_runtime\",\n    \"type\": \"general\",\n    \"code\": {\n        \"page\": \"https://localhost:3000/commands.html\"\n    },\n    \"lifetime\": \"short\",\n    \"actions\": [\n        {\n            \"id\": \"prependHeaderOnSend\",\n            \"type\": \"executeFunction\",\n            \"displayName\": \"prependHeaderOnSend\"\n        },\n        {\n            \"id\": \"appendDisclaimerOnSend\",\n            \"type\": \"executeFunction\",\n            \"displayName\": \"appendDisclaimerOnSend\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Dialog Entry Point to Webpack Configuration\nDESCRIPTION: This JavaScript snippet shows how to add a new entry point named 'popup' to the `entry` object within the webpack configuration file (`webpack.config.js`). This tells webpack to include `./src/dialogs/popup.js` as a separate bundle.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_50\n\nLANGUAGE: js\nCODE:\n```\npopup: \"./src/dialogs/popup.js\"\n```\n\n----------------------------------------\n\nTITLE: Defining Task Pane UI Elements for PowerPoint Add-in (HTML)\nDESCRIPTION: This HTML snippet replaces the task pane's main content container (<div id=\"content-main\">), inserting placeholders for upcoming add-in features like insert-image, insert-text, and navigation buttons. It uses class attributes for styling and includes TODO comments as scaffolds for further UI development. No external dependencies are required except for the CSS referenced by these class names. This markup acts as the root container for the add-in's main controls; inputs and buttons should be added as directed in follow-up steps.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- TODO2: Create the content-header div. -->\\n<div id=\\\"content-main\\\">\\n    <div class=\\\"padding\\\">\\n        <!-- TODO1: Create the insert-image button. -->\\n        <!-- TODO3: Create the insert-text button. -->\\n        <!-- TODO4: Create the get-slide-metadata button. -->\\n        <!-- TODO5: Create the add-slides and go-to-slide buttons. -->\\n    </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration for WebView2 Add-in Debugging - JSON\nDESCRIPTION: This launch.json fragment configures VS Code to attach its debugger to a running Microsoft Edge WebView2 instance for desktop Office applications. The primary configuration fields include host name (to be replaced in 'name'), 'type' set as 'msedge', the port for debugger communications, 'preLaunchTask' to initiate the debug shell task, and 'useWebView' enabled. Required prerequisites are VS Code, msedge debugger extension, and a compatible development environment. The port and preLaunchTask tie into previous tasks.json and NPM script setup. Inputs: paths and placeholders must be customized. Intended output: an attached debug session with breakpoints supported. Limitations include the need for correct host and manifest setup.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-desktop-using-edge-chromium.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Other properties may be here.\n  \"configurations\": [\n    {\n      \"name\": \"$HOST$ Desktop (Edge Chromium)\",\n      \"type\": \"msedge\",\n      \"request\": \"attach\",\n      \"useWebView\": true,\n      \"port\": 9229,\n      \"timeout\": 600000,\n      \"webRoot\": \"${workspaceRoot}\",\n      \"preLaunchTask\": \"Debug: Excel Desktop\"\n    }\n  ]\n  // Other properties may be here.\n}\n```\n\n----------------------------------------\n\nTITLE: Example Azure Web App Root URL\nDESCRIPTION: This snippet provides an example format (`https://YourDomain.azurewebsites.net`) for the root URL of the web application hosted on Azure. This URL is obtained after publishing the web project using Visual Studio as described in Step 2, and it is used to replace the `~remoteAppUrl` placeholder in the add-in manifest file (Step 3).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/stage-outlook-add-in-azure.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://YourDomain.azurewebsites.net\n```\n\n----------------------------------------\n\nTITLE: Embedding a Video in an Office Add-in Dialog Box Using HTML\nDESCRIPTION: This code snippet demonstrates the HTML markup required to embed an online video in a dialog box within an Office Add-in. It uses an iframe element with the src attribute pointing to a YouTube video, ensuring the video plays automatically and is displayed at 640x360 resolution. Dependencies include an HTTPS video source and the dialog box page being served from the same domain as the host Office Add-in. The main parameter is the iframe src, which must be an HTTPS link to a playable online video. Output is a rendered video player inside the dialog. The solution is limited to sources allowed by embedding policies and browser security constraints.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-video.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe class=\"ms-firstrun-video__player\"  width=\"640\" height=\"360\"\n    src=\"https://www.youtube.com/embed/XVfOe5mFbAE?rel=0&autoplay=1\"\n    frameborder=\"0\" allowfullscreen>\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Stopping the Development Web Server (npm)\nDESCRIPTION: This command line instruction uses npm to execute the 'stop' script, typically defined in the project's package.json file. It is used to halt the local web server that serves the Office Add-in during development, often required before reinstalling the add-in with updated manifest changes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Stopping the Office Add-in Development Server using npm\nDESCRIPTION: This command line instruction uses npm to execute the `stop` script defined in the project's `package.json` file, or simply terminates the running `npm start` process. Running `npm stop` (or pressing Ctrl+C) is intended to shut down the local development server previously started with `npm start`, freeing up the port and ending the debugging session. The specific behavior depends on how the `stop` script is configured or if one exists.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/outlook-quickstart-json-manifest-typescript.md#_snippet_8\n\nLANGUAGE: command line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Configuring ItemSend Event Handler for Subject/CC Check in Outlook Manifest (XML)\nDESCRIPTION: This XML snippet, from the `Contoso Subject and CC Checker.xml` manifest, configures an Outlook add-in to execute the `validateSubjectAndCC` JavaScript function synchronously when the `ItemSend` event occurs. It links the event to the function defined in the referenced `FunctionFile` for the Desktop form factor.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<Hosts>\n    <Host xsi:type=\"MailHost\">\n        <DesktopFormFactor>\n            <!-- The functionfile and function name to call on message send.  -->\n            <!-- In this case the function validateSubjectAndCC will be called within the JavaScript code referenced in residUILessFunctionFileUrl. -->\n            <FunctionFile resid=\"residUILessFunctionFileUrl\" />\n            <ExtensionPoint xsi:type=\"Events\">\n                <Event Type=\"ItemSend\" FunctionExecution=\"synchronous\" FunctionName=\"validateSubjectAndCC\" />\n            </ExtensionPoint>\n        </DesktopFormFactor>\n    </Host>\n</Hosts>\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc @returns for Function Return Value IntelliSense in JavaScript\nDESCRIPTION: Shows how to use the JSDoc `@returns` tag to specify the data type (`Word.Range`) of the value returned by a function (`myFunc`). This helps Visual Studio provide IntelliSense for the properties and methods of the expected return type when assigning or using the result of calling `myFunc`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-javascript-intellisense-in-visual-studio.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @returns {Word.Range} */\nfunction myFunc() {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Body of Current Outlook Item in Inspector - Outlook Object Model (VBA)\nDESCRIPTION: This code sample is run in the Immediate Window of the Visual Basic Editor in Outlook (classic Windows) to show the HTML body of the open (inspected) message or appointment. It references the ActiveInspector object and its CurrentItem's HTMLBody property. The code assumes you have an item open in its own window. The result is the underlying HTML content of the current item.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/troubleshoot-outlook-add-in-activation.md#_snippet_4\n\nLANGUAGE: VBA\nCODE:\n```\n?ActiveInspector.CurrentItem.HTMLBody\n```\n\n----------------------------------------\n\nTITLE: Running Yeoman Generator to Scaffold Office Add-in Project - Command Line\nDESCRIPTION: This snippet demonstrates the basic command to execute the Yeoman Generator for Office Add-ins, initializing a new project in the current directory. Prerequisites include Node.js, npm, and the 'yo' tool with the generator installed globally. The 'yo office' command launches an interactive prompt that collects project details such as type, host application, and preferred language. The input is minimal ('yo office') and the expected output is a structured Office Add-in project folder with all dependencies and starter code scaffolded, ready for development. This command should be run in a system command prompt rather than a bash shell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/yeoman-generator-overview.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nyo office \n\n```\n\n----------------------------------------\n\nTITLE: Inspecting Outlook Add-in Manifest Cache and Diagnostic Events - Path/Text Commands\nDESCRIPTION: These path and diagnostic message snippets help users inspect and manage the local manifest cache for Outlook add-ins. The environment requires access to Windows Explorer and/or Event Viewer, with user profiles configured for cached add-ins. Paths are constructed using %LocalAppData% and user details, potentially including organization-specific GUIDs and hashes. Inputs are folder search actions; outputs are file/resource presence or messages such as the Event Viewer description for successful manifest retrieval. There are no explicit technical limitations, other than environment access permissions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/troubleshoot-outlook-add-in-activation.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n%LocalAppData%\\Microsoft\\Office\\16.0\\WEF\n```\n\nLANGUAGE: text\nCODE:\n```\n\\<insert your guid>\\<insert base 64 hash>\\Manifests\\<ManifestID>_<ManifestVersion>\n```\n\nLANGUAGE: text\nCODE:\n```\nC:\\Users\\john\\appdata\\Local\\Microsoft\\Office\\16.0\\WEF\\{8D8445A4-80E4-4D6B-B7AC-D4E6AF594E73}\\GoRshCWa7vW8+jhKmyiDhA==\\Manifests\\b3d7d9d5-6f57-437d-9830-94e2aaccef16_1.2\n```\n\nLANGUAGE: text\nCODE:\n```\nThe Exchange web service request GetAppManifests succeeded.\n```\n\nLANGUAGE: text\nCODE:\n```\n%LocalAppData%\\Microsoft\\Office\\16.0\\WEF\\<insert your guid>\\<insert base 64 hash>\\Manifests\\\n```\n\n----------------------------------------\n\nTITLE: Example Localhost Application ID URI\nDESCRIPTION: Provides a specific example of a correctly formatted Application ID URI for a local development setup running on localhost port 3000, using a sample application (client) ID.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_6\n\nLANGUAGE: uri\nCODE:\n```\napi://localhost:3000/c6c1f32b-5e55-4997-881a-753cc1d563b7\n```\n\n----------------------------------------\n\nTITLE: Providing Office Add-ins Issue Reporting Guidance - Markdown/HTML - English\nDESCRIPTION: This snippet uses HTML comments embedded within a Markdown file to instruct contributors on reporting issues related to the Office Add-ins documentation. It explains the process of providing article URLs, describes alternative channels for non-documentation issues, and guides feature requests and questions to appropriate forums. The HTML comment ensures these guidelines are not rendered in the final output but are visible to contributors editing the file. No dependencies or parameters are required. The snippet is intended for maintainers and contributors interacting with the documentation repository.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Issue_Template.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!---\nWelcome to the Office Add-ins documentation repository.\n\nTo report an issue with the Office-Add-ins documentation, please provide the article URL and describe the issue below. Alternatively, if you want to submit a pull request with your recommended documentation changes, we will review your contributions and update our documentation accordingly.\n\nIf your issue is not related to the Office Add-ins documentation, please post it to one of the following channels instead.\n\n- To ask a question about using the Office.js API, post your question to Stack Overflow and tag it with the \\\"office-js\\\" tag (https://stackoverflow.com/questions/tagged/office-js).\n\n- To report an issue with the Office.js API or platform, create the issue in the OfficeDev/office-js repository (https://github.com/OfficeDev/office-js/issues), where members of the product team monitor for customer-reported issues.\n\n- To submit a feature request for the Office.js API or platform, post your idea to the Microsoft 365 Developer Platform Tech Community(https://aka.ms/m365dev-suggestions), or if the feature request already exists there, add your vote for it.\n-->\n```\n\n----------------------------------------\n\nTITLE: Installing Office JavaScript Linter Dependencies - Command Line\nDESCRIPTION: Adds 'office-addin-lint' and 'eslint-plugin-office-addins' as development dependencies to an existing Office Add-ins project using npm. These tools allow linting of Office.js code for common errors and best practices. Requires an initialized JavaScript/TypeScript project with package.json already present.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/set-up-your-dev-environment.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm install office-addin-lint --save-dev\nnpm install eslint-plugin-office-addins --save-dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Errors via Toast Notifications - Browser DOM & jQuery - JavaScript\nDESCRIPTION: This JavaScript snippet provides runtime error reporting and user notification through dynamically generated 'toast' popups. The 'throwError' function creates a custom error object, catches it, and displays error details using the 'Toast' utility. The 'Toast' object manages the dynamic creation, display, and closing of a notification div, utilizing DOM manipulation and jQuery for animated presentation. Key parameters include the error title and message; dependencies include the browser DOM and jQuery (for element selection/animation). Toast controls (close button) are handled via inline event attributes. Limitations: Assumes presence of jQuery in the runtime environment and specific element IDs for binding.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n/*\n * Show error messages in a \"toast\" notification.\n */\n\n// Throws a custom defined error.\nfunction throwError(errTitle, errMessage) {\n    try {\n        // Define and throw a custom error.\n        let customError = { name: errTitle, message: errMessage }\n        throw customError;\n    }\n    catch (err) {\n        // Catch the error and display it to the user.\n        Toast.showToast(err.name, err.message);\n    }\n}\n\n// Add a dynamically-created div \"toast\" for displaying errors to the user.\nlet Toast = {\n\n    Toast: \"divToast\",\n    Close: \"btnClose\",\n    Notice: \"lblNotice\",\n    Output: \"lblOutput\",\n\n    // Show the toast with the specified information.\n    showToast: function (title, message) {\n\n        if (document.getElementById(this.Toast) == null) {\n            this.createToast();\n        }\n\n        document.getElementById(this.Notice).innerText = title;\n        document.getElementById(this.Output).innerText = message;\n\n        $(\"#\" + this.Toast).hide();\n        $(\"#\" + this.Toast).show(\"slow\");\n    },\n\n    // Create the display for the toast.\n    createToast: function () {\n        let divToast;\n        let lblClose;\n        let btnClose;\n        let divOutput;\n        let lblOutput;\n        let lblNotice;\n\n        // Create the container div.\n        divToast = document.createElement(\"div\");\n        let toastStyle = \"background-color:rgba(220, 220, 128, 0.80);\" +\n            \"position:absolute;\" +\n            \"bottom:0px;\" +\n            \"width:90%;\" +\n            \"text-align:center;\" +\n            \"font-size:11pt;\";\n        divToast.setAttribute(\"style\", toastStyle);\n        divToast.setAttribute(\"id\", this.Toast);\n\n        // Create the close button.\n        lblClose = document.createElement(\"div\");\n        lblClose.setAttribute(\"id\", this.Close);\n        let btnStyle = \"text-align:right;\" +\n            \"padding-right:10px;\" +\n            \"font-size:10pt;\" +\n            \"cursor:default\";\n        lblClose.setAttribute(\"style\", btnStyle);\n        lblClose.appendChild(document.createTextNode(\"CLOSE \"));\n\n        btnClose = document.createElement(\"span\");\n        btnClose.setAttribute(\"style\", \"cursor:pointer;\");\n        btnClose.setAttribute(\"onclick\", \"Toast.close()\");\n        btnClose.innerText = \"X\";\n        lblClose.appendChild(btnClose);\n\n        // Create the div to contain the toast title and message.\n        divOutput = document.createElement(\"div\");\n        divOutput.setAttribute(\"id\", \"divOutput\");\n        let outputStyle = \"margin-top:0px;\";\n        divOutput.setAttribute(\"style\", outputStyle);\n\n        lblNotice = document.createElement(\"span\");\n        lblNotice.setAttribute(\"id\", this.Notice);\n        let labelStyle = \"font-weight:bold;margin-top:0px;\";\n        lblNotice.setAttribute(\"style\", labelStyle);\n\n        lblOutput = document.createElement(\"span\");\n        lblOutput.setAttribute(\"id\", this.Output);\n\n        // Add the child nodes to the toast div.\n        divOutput.appendChild(lblNotice);\n        divOutput.appendChild(document.createElement(\"br\"));\n        divOutput.appendChild(lblOutput);\n        divToast.appendChild(lblClose);\n        divToast.appendChild(divOutput);\n\n        // Add the toast div to the document body.\n        document.body.appendChild(divToast);\n    },\n\n    // Close the toast.\n    close: function () {\n        $(\"#\" + this.Toast).hide(\"slow\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Binding - PowerPoint Office JS - JavaScript\nDESCRIPTION: Shows how to programmatically delete a shape binding from the PowerPoint bindings collection using the Office JS API. The function takes a binding ID, attempts to remove the binding with getItemAt, and then synchronizes the context. Errors are not explicitly handled, so callers should wrap calls in their own error management logic if needed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/bind-shapes-in-presentation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function deleteBinding(bindingId) {\\n    await PowerPoint.run(async (context) => {\\n        context.presentation.bindings.getItemAt(bindingId).delete();\\n        await context.sync();\\n    });\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Actions with Keyboard Shortcuts in Microsoft 365 Unified Manifest (JSON)\nDESCRIPTION: This snippet demonstrates how to define runtime actions within the \\\"runtimes\\\" array in manifest.json for a Microsoft 365 Office Add-in. It specifies two actions—showing and hiding a task pane—each with an \\\"id\\\", \\\"type\\\", and \\\"displayName\\\" for clarity in shortcut assignment. The actions must later be mapped to functions in your add-in and are referenced by keyboard shortcut configuration. No external dependencies beyond Office Add-ins APIs are required, but manifest schema compliance is essential.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"runtimes\": [\n    {\n        \"id\": \"TaskPaneRuntime\",\n        \"type\": \"general\",\n        \"code\": {\n            \"page\": \"https://localhost:3000/taskpane.html\"\n        },\n        \"lifetime\": \"long\",\n        \"actions\": [\n            {\n                \"id\": \"ShowTaskpane\",\n                \"type\": \"executeFunction\",\n                \"displayName\": \"Show task pane (Contoso Add-in)\"\n            },\n            {\n                \"id\": \"HideTaskpane\",\n                \"type\": \"executeFunction\",\n                \"displayName\": \"Hide task pane (Contoso Add-in)\"\n            }\n        ],\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Roaming Settings JSON Structure in Outlook Add-ins\nDESCRIPTION: Shows the expected JSON format for data stored within an `Office.RoamingSettings` object. The data is stored as a serialized JSON string representing key-value pairs. This example illustrates three settings.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/metadata-for-an-outlook-add-in.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"add-in_setting_name_0\": \"add-in_setting_value_0\",\n  \"add-in_setting_name_1\": \"add-in_setting_value_1\",\n  \"add-in_setting_name_2\": \"add-in_setting_value_2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Advanced Font Formatting to a Specific PowerPoint Table Cell (JavaScript)\nDESCRIPTION: This code shows how to set multiple font properties for a specific table cell in PowerPoint using the specificCellProperties property. Properties such as color, font name, size, capitalization, and italics can all be specified. Requires a matching 2D array structure for cell properties in the TableAddOptions object. Outputs: The designated cell will display orange Arial font, size 50, all caps, and italicized.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/work-with-tables.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\noptions.specificCellProperties[1][1] = {\n    font: {\n        color: \"orange\",\n        name: \"Arial\",\n        size: 50,\n        allCaps: true,\n        italic: true\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Append-on-Send Permission in Unified Manifest (JSON)\nDESCRIPTION: Specifies the supplementary permission required for the append-on-send feature within the unified manifest (manifest.json). This permission name ('Mailbox.AppendOnSend.User') is added as the 'name' property of an object within the 'authorization.permissions.resourceSpecific' array.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/outlook-permission-levels-table.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"authorization.permissions.resourceSpecific\": [\\n  // ... other permissions\\n  {\\n    \"name\": \"Mailbox.AppendOnSend.User\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Adding an Excel Comment with an @mention using JavaScript\nDESCRIPTION: This snippet shows how to add a comment that includes an @mention, which notifies the mentioned user. It uses `comments.add` with a `CommentRichContent` object containing mention details (email, id, name) and a specially formatted `richContent` string (`<at id=\"{id}\">{mentionName}</at>`). The `contentType` must be set to `Excel.ContentType.mention`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Add an \"@mention\" for \"Kate Kristensen\" to cell A1 in the \"MyWorksheet\" worksheet.\n    let mention = {\n        email: \"kakri@contoso.com\",\n        id: 0,\n        name: \"Kate Kristensen\"\n    };\n\n    // This will tag the mention's name using the '@' syntax.\n    // They will be notified via email.\n    let commentBody = {\n        mentions: [mention],\n        richContent: '<at id=\"0\">' + mention.name + \"</at> -  Can you take a look?\"\n    };\n\n    // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.\n    context.workbook.comments.add(\"MyWorksheet!A1\", commentBody, Excel.ContentType.mention);\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Environment in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet configures a runtime within the \"extensions.runtimes\" array of a `manifest.json` file for an Office Add-in. It specifies a minimum Mailbox API version (\"1.14\"), sets a unique runtime ID (\"autorun_runtime\"), defines separate entry points for browser (`page`) and JavaScript-only (`script`) runtimes, sets the runtime `lifetime` to \"short\", and declares an action (`onMessageSendHandler`) to be executed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   {\n      \"requirements\": {\n          \"capabilities\": [\n              {\n                  \"name\": \"Mailbox\",\n                  \"minVersion\": \"1.14\"\n              }\n          ]\n      },\n      \"id\": \"autorun_runtime\",\n      \"type\": \"general\",\n      \"code\": {\n          \"page\": \"https://localhost:3000/commands.html\",\n          \"script\": \"https://localhost:3000/launchevent.js\"\n      },\n      \"lifetime\": \"short\",\n      \"actions\": [\n          {\n              \"id\": \"onMessageSendHandler\",\n              \"type\": \"executeFunction\",\n              \"displayName\": \"onMessageSendHandler\"\n          }\n      ]\n  }\n  \n```\n\n----------------------------------------\n\nTITLE: Defining an Error Handler for Office.select in JavaScript\nDESCRIPTION: Provides an example `onError` function suitable for use as the error handling callback in the `Office.select` method. It accesses the `error` property of the `AsyncResult` object and displays the error name and message using a helper `write` function. The `write` function appends messages to an HTML element with the id 'message'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction onError(result){\n    const err = result.error;\n    write(err.name + \": \" + err.message);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Entry Object to Include All Relevant Assets - JavaScript\nDESCRIPTION: This object illustrates a full webpack entry configuration encompassing polyfills and all major add-in components, including dialog.js. Each key points to the entry source(s) for part of the extension. This pattern enables the bundling of major JavaScript and HTML resources for the add-in taskpane, commands, and dialog features. Inputs are entry point source files; output is a set of JavaScript bundles. Dependencies include all listed files existing in the specified locations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nentry: {\n  polyfill: [\"core-js/stable\", \"regenerator-runtime/runtime\"],\n  taskpane: [\"./src/taskpane/taskpane.js\", \"./src/taskpane/taskpane.html\"],\n  commands: \"./src/commands/commands.js\",\n  dialog: \"./src/settings/dialog.js\",\n},\n```\n\n----------------------------------------\n\nTITLE: Inserting TOC (Table of Contents) Field at Selection - Office.js - JavaScript\nDESCRIPTION: This function inserts a Table of Contents (TOC) field, replacing the current selection in a Word document using the Office.js Word API. The context and range are acquired asynchronously, the field is inserted at the 'replace' location with TOC type, and relevant properties are loaded for result inspection. Comments at the top instruct how to prepare the document for TOC insertion.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/fields-guidance.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\\n 1. Run setup.\\n 2. Select \\\"[To place table of contents]\\\" paragraph.\\n 3. Run rangeInsertTOCField.\\n */\\n\\n// Inserts a TOC (table of contents) field replacing selection.\\nasync function rangeInsertTOCField() {\\n  await Word.run(async (context) => {\\n    let range = context.document.getSelection().getRange();\\n    const field = range.insertField(\\n      Word.InsertLocation.replace,\\n      Word.FieldType.toc\\n    );\\n    field.load(\\\"result,code\\\");\\n    await context.sync();\\n\\n    if (field.isNullObject) {\\n      console.warn(\\\"The field wasn't inserted as expected.\\\");\\n    } else {\\n      console.log(\\\"Code of the field: \\\" + field.code);\\n      console.log(\\\"Result of the field: \\\" + JSON.stringify(field.result));\\n    }\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler to Open Dialog (JavaScript)\nDESCRIPTION: This JavaScript snippet attaches the openDialog function as the click event handler for the 'Open Dialog' button. Required dependencies include Office.js and the presence of the DOM element with ID 'open-dialog'. This code should be added within the Office.onReady function and expects the openDialog function to be defined elsewhere. It links the UI button to the dialog opening procedure and does not return a value.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\\\"open-dialog\\\").onclick = openDialog;\n```\n\n----------------------------------------\n\nTITLE: Loading a Nested Property Path in Excel JavaScript API\nDESCRIPTION: Demonstrates queuing a load command for a specific nested scalar property ('name' of the font within the format of a range) without loading other related properties. This uses a string path to specify the exact property needed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n```js\nsomeRange.load(\"format/font/name\")\n```\n```\n\n----------------------------------------\n\nTITLE: Set Action Type to ExecuteFunction in Control (XML)\nDESCRIPTION: Configures the control action to use the ExecuteFunction type, enabling the button to trigger a custom JavaScript function instead of launching a task pane. This is necessary for buttons intended to perform custom logic in Office Add-ins. Must be used within the \\u003cAction\\u003e element and paired with a valid \\u003cFunctionName\\u003e child.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<Action xsi:type=\\\"ExecuteFunction\\\"\\u003e\n```\n\n----------------------------------------\n\nTITLE: Configuring ItemSend Event Handler in Outlook Manifest (XML)\nDESCRIPTION: This XML snippet defines the configuration within an Outlook add-in manifest (`Contoso Message Body Checker.xml`) to trigger a specific JavaScript function when the user attempts to send an email. It specifies the JavaScript file (`residUILessFunctionFileUrl`) and the function (`validateBody`) to be executed synchronously for the `ItemSend` event on the Desktop form factor.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<Hosts>\n    <Host xsi:type=\"MailHost\">\n        <DesktopFormFactor>\n            <!-- The functionfile and function name to call on message send.  -->\n            <!-- In this case, the function validateBody will be called within the JavaScript code referenced in residUILessFunctionFileUrl. -->\n            <FunctionFile resid=\"residUILessFunctionFileUrl\" />\n            <ExtensionPoint xsi:type=\"Events\">\n                <Event Type=\"ItemSend\" FunctionExecution=\"synchronous\" FunctionName=\"validateBody\" />\n            </ExtensionPoint>\n        </DesktopFormFactor>\n    </Host>\n</Hosts>\n```\n\n----------------------------------------\n\nTITLE: Closing a Workbook Using Excel JavaScript API - JavaScript\nDESCRIPTION: Demonstrates how to close a workbook and associated add-ins with an optional save behavior using Office.js. The close method can be invoked with parameters for 'save' or 'skipSave'. It must run inside an Excel JavaScript API context. Input is the close behavior argument; output is closing the file, with saved or unsaved state depending on the option selected. No value is returned to the caller.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-workbooks.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontext.workbook.close(Excel.CloseBehavior.save);\n```\n\n----------------------------------------\n\nTITLE: Office Add-in Function File Markup with Script References - HTML\nDESCRIPTION: This HTML snippet defines the structure of the function file for an Office add-in, loading Office.js, jQuery, Showdown, URI.js, and project helper scripts. The body is intentionally empty because functions are invoked by command buttons rather than UI. Script references resolve dependencies needed by commands and configuration. It expects the referenced JS files to be present in specified directories and is limited to scenarios where scripts are loaded and run in a secure Office context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_25\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n\n    <!-- Office JavaScript API -->\n    <script type=\"text/javascript\" src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\"></script>\n\n    <script type=\"text/javascript\" src=\"../../node_modules/jquery/dist/jquery.js\"></script>\n    <script type=\"text/javascript\" src=\"../../node_modules/showdown/dist/showdown.min.js\"></script>\n    <script type=\"text/javascript\" src=\"../../node_modules/urijs/src/URI.min.js\"></script>\n    <script type=\"text/javascript\" src=\"../helpers/addin-config.js\"></script>\n    <script type=\"text/javascript\" src=\"../helpers/gist-api.js\"></script>\n</head>\n\n<body>\n  <!-- NOTE: The body is empty on purpose. Since functions in commands.js are\n       invoked via a button, there is no UI to render. -->\n</body>\n\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Defining C# Models for Deserializing Attachment Data\nDESCRIPTION: This C# code defines two classes, `AttachmentSampleServiceRequest` and `AttachmentDetails`, within the `AttachmentsSample` namespace. These classes serve as Data Transfer Objects (DTOs) on the remote service (e.g., a Web API). They are structured to match the JSON payload sent by the Outlook add-in, allowing the server-side framework to automatically deserialize the incoming JSON string into these .NET objects. `AttachmentSampleServiceRequest` holds the token, EWS URL, service identifier, and an array of `AttachmentDetails`. `AttachmentDetails` mirrors the structure of the `AttachmentDetails` object provided by the Office JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\nnamespace AttachmentsSample\n{\n  public class AttachmentSampleServiceRequest\n  {\n    public string attachmentToken { get; set; }\n    public string ewsUrl { get; set; }\n    public string service { get; set; }\n    public AttachmentDetails [] attachments { get; set; }\n  }\n\n  public class AttachmentDetails\n  {\n    public string attachmentType { get; set; }\n    public string contentType { get; set; }\n    public string id { get; set; }\n    public bool isInline { get; set; }\n    public string name { get; set; }\n    public int size { get; set; }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Supertip/Tooltip Resource IDs for Button (XML)\nDESCRIPTION: Defines the Office ribbon button's tooltip by setting resource IDs for the title and description. These correspond to string resources for labeling and explanatory text, allowing for easy localization and future modifications. Must be part of the \\u003cSupertip\\u003e element within the Control definition.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<Supertip\\u003e\\n    <Title resid=\\\"ProtectionButtonLabel\\\" /\\u003e\\n    <Description resid=\\\"ProtectionButtonToolTip\\\" /\\u003e\\n</Supertip\\u003e\n```\n\n----------------------------------------\n\nTITLE: Inserting OOXML Content with Office.js - JavaScript\nDESCRIPTION: This JavaScript function retrieves a saved Office Open XML (OOXML) file synchronously via XMLHttpRequest and inserts its content into the current Word document selection using Office.context.document.setSelectedDataAsync. Dependencies include the Office.js library, a valid OOXML XML file, and access to XMLHttpRequest. The function expects a correct file path provided in place of 'yourXMLfilename' and inserts the document using the ooxml coercionType. The main parameters are the file path and asynchronous function options. This approach is limited in that synchronous XMLHttpRequests can block the UI, and error handling is minimal.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction writeContent() {\n    const myOOXMLRequest = new XMLHttpRequest();\n    let myXML;\n    myOOXMLRequest.open('GET', 'yourXMLfilename', false);\n    myOOXMLRequest.send();\n    if (myOOXMLRequest.status === 200) {\n        myXML = myOOXMLRequest.responseText;\n    }\n    Office.context.document.setSelectedDataAsync(myXML, { coercionType: 'ooxml' });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Collection Items for Modification in Excel JavaScript API\nDESCRIPTION: Shows how to load the 'items' property of an Excel chart collection when needing to iterate and modify properties of individual items within the collection, but without needing specific pre-loaded properties on those items. It then sets the 'name' property for each chart.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/application-specific-api-model.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const chartCollection = sheet.charts;\n\n    // Load the items property from the chart collection to set properties on individual charts.\n    chartCollection.load(\"items\");\n    await context.sync();\n\n    chartCollection.items.forEach((chart, index) => {\n        chart.name = `Sample chart ${index}`;\n    });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Specific Manifest File using npx (Command Line)\nDESCRIPTION: Directly invokes the `office-addin-manifest` tool using `npx` to validate a specific manifest file specified with the `-p` flag. Replace `MANIFEST_FILE` with the actual path to the manifest. This is suggested as an alternative if the standard `npm run validate` command encounters issues. Requires Node.js and npm.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/troubleshoot-manifest.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-manifest validate -p MANIFEST_FILE\n```\n\n----------------------------------------\n\nTITLE: Specifying Online Meeting Organizer Context in Unified Manifest (JSON)\nDESCRIPTION: Configures an Outlook mobile add-in developed by an online meeting provider for Appointment Organizer mode using the unified manifest. Add \"onlineMeetingDetailsOrganizer\" to the `extensions.ribbons.contexts` array.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"extensions.ribbons.contexts\": [\"onlineMeetingDetailsOrganizer\", ...]\n```\n\n----------------------------------------\n\nTITLE: Starting Server and Sideloading Add-in in Excel - Command Line\nDESCRIPTION: This snippet serves to both start the local web server and launch Microsoft Excel with the Office Add-in automatically sideloaded, streamlining the development workflow. The command depends on a 'start' script in package.json configured for Add-in development and sideloading. Prerequisites include npm, Node.js, and a properly configured Office Add-in project. The command has no parameters, and its output is the Excel application running with the Add-in loaded for immediate testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/quickstart-yo-start-server-excel.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Full Scope Name Format (Production)\nDESCRIPTION: Shows the complete format of the scope name that should be generated after defining the `access_as_user` scope. It combines the Application ID URI (using a fully qualified domain name) and the specific scope name.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_8\n\nLANGUAGE: uri\nCODE:\n```\napi://<fully-qualified-domain-name>/<app-id>/access_as_user\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Property Clearing into Logging Logic (Function Command, JavaScript)\nDESCRIPTION: Modified `logCRMEvent` function for a function command. If getting the appointment body fails, it now calls `clearCustomProperties` instead of simply signaling failure with `event.completed({ allowEvent: false })`. The completion signal (`event.completed`) is subsequently handled within `clearCustomProperties` upon successful saving.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nfunction logCRMEvent(appointmentEvent) {\n  event = appointmentEvent;\n  console.log(`Subject: ${Office.context.mailbox.item.subject}`);\n  Office.context.mailbox.item.body.getAsync(\n    \"html\",\n    { asyncContext: \"This is passed to the callback\" },\n    (result) => {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        updateCustomProperties();\n      } else {\n        console.error(\"Failed to get body.\");\n        // Replace `event.completed({ allowEvent: false });` with the following statement.\n        clearCustomProperties();\n      }\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Data in OfficeRuntime.storage from a Custom Function (JavaScript)\nDESCRIPTION: This JavaScript custom function (`storeValue`) demonstrates how to persist data using `OfficeRuntime.storage.setItem`. It accepts a key and a value, attempts to store them, and returns a promise resolving to a success string or rejecting with an error string. This is crucial for storing authentication tokens or other shared data in non-shared runtime scenarios.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-authentication.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Stores a key-value pair into OfficeRuntime.storage.\n * @customfunction\n * @param {string} key Key of item to put into storage.\n * @param {*} value Value of item to put into storage.\n */\nfunction storeValue(key, value) {\n  return OfficeRuntime.storage.setItem(key, value).then(function (result) {\n      return \"Success: Item with key '\" + key + \"' saved to storage.\";\n  }, function (error) {\n      return \"Error: Unable to save item with key '\" + key + \"' to storage. \" + error;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handler Runtime in Unified Manifest (manifest.json)\nDESCRIPTION: This JSON snippet demonstrates adding a runtime definition object to the `extensions.runtimes` array in `manifest.json`. It configures a runtime named `autorun_runtime` required for handling events, specifying Mailbox requirement set 1.10, code entry points (`commands.html` and `launchevent.js`), a 'short' lifetime, and defines the actions (`onNewMessageComposeHandler`, `onNewAppointmentComposeHandler`) that will be executed by this runtime.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n {\\n    \"requirements\": {\\n        \"capabilities\": [\\n            {\\n                \"name\": \"Mailbox\",\\n                \"minVersion\": \"1.10\"\\n            }\\n        ]\\n    },\\n    \"id\": \"autorun_runtime\",\\n    \"type\": \"general\",\\n    \"code\": {\\n        \"page\": \"https://localhost:3000/commands.html\",\\n        \"script\": \"https://localhost:3000/launchevent.js\"\\n    },\\n    \"lifetime\": \"short\",\\n    \"actions\": [\\n        {\\n            \"id\": \"onNewMessageComposeHandler\",\\n            \"type\": \"executeFunction\",\\n            \"displayName\": \"onNewMessageComposeHandler\"\\n        },\\n        {\\n            \"id\": \"onNewAppointmentComposeHandler\",\\n            \"type\": \"executeFunction\",\\n            \"displayName\": \"onNewAppointmentComposeHandler\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Decoded Access Token Payload (JSON)\nDESCRIPTION: This JSON object represents a typical decoded payload of an access token obtained via the `getAccessToken()` method in an Office Add-in using SSO. It includes claims such as audience (`aud`), issuer (`iss`), user object ID (`oid`), tenant ID (`tid`), user display name (`name`), user principal name (`preferred_username`), scopes (`scp`), and token version (`ver`), which can be used for identity verification and authorization.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/sso-in-office-add-ins.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    aud: \"2c3caa80-93f9-425e-8b85-0745f50c0d24\",\n    iss: \"https://login.microsoftonline.com/fec4f964-8bc9-4fac-b972-1c1da35adbcd/v2.0\",\n    iat: 1521143967,\n    nbf: 1521143967,\n    exp: 1521147867,\n    aio: \"ATQAy/8GAAAA0agfnU4DTJUlEqGLisMtBk5q6z+6DB+sgiRjB/Ni73q83y0B86yBHU/WFJnlMQJ8\",\n    azp: \"e4590ed6-62b3-5102-beff-bad2292ab01c\",\n    azpacr: \"0\",\n    e_exp: 262800,\n    name: \"Mila Nikolova\",\n    oid: \"6467882c-fdfd-4354-a1ed-4e13f064be25\",\n    preferred_username: \"milan@contoso.com\",\n    scp: \"access_as_user\",\n    sub: \"XkjgWjdmaZ-_xDmhgN1BMP2vL2YOfeVxfPT_o8GRWaw\",\n    tid: \"fec4f964-8bc9-4fac-b972-1c1da35adbcd\",\n    uti: \"MICAQyhrH02ov54bCtIDAA\",\n    ver: \"2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Ribbon Command Contexts - JSON - manifest\nDESCRIPTION: This snippet defines allowable values for the 'contexts' array in a ribbons configuration within the manifest. It specifies where in the Office UI (such as 'mailRead') the ribbon command will appear. Providing the appropriate contexts matches the UI exposure to desired scenarios (e.g., reading an email). Only accepted string values are valid per Office manifest schema. Input consists of UI context names; output is a properly structured 'contexts' array.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"contexts\": [\n    \"mailRead\"\n],\n```\n\n----------------------------------------\n\nTITLE: Complete Control Element for Toggle Worksheet Protection Button (XML)\nDESCRIPTION: Presents the entire manifest XML markup for the ToggleProtection button, including label, tooltip, icon resources, and ExecuteFunction action setup. Integrates previously defined resource IDs and is ready for insertion into the manifest. Requires associated string and icon resources to be defined elsewhere in the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<Control xsi:type=\\\"Button\\\" id=\\\"ToggleProtection\\\"\\u003e\\n    <Label resid=\\\"ProtectionButtonLabel\\\" /\\u003e\\n    <Supertip\\u003e\\n        <Title resid=\\\"ProtectionButtonLabel\\\" /\\u003e\\n        <Description resid=\\\"ProtectionButtonToolTip\\\" /\\u003e\\n    </Supertip\\u003e\\n    <Icon\\u003e\\n        <bt:Image size=\\\"16\\\" resid=\\\"Icon.16x16\\\"/\\u003e\\n        <bt:Image size=\\\"32\\\" resid=\\\"Icon.32x32\\\"/\\u003e\\n        <bt:Image size=\\\"80\\\" resid=\\\"Icon.80x80\\\"/\\u003e\\n    </Icon\\u003e\\n    <Action xsi:type=\\\"ExecuteFunction\\\"\\u003e\\n       <FunctionName>toggleProtection</FunctionName>\\n    </Action\\u003e\\n</Control\\u003e\n```\n\n----------------------------------------\n\nTITLE: Adding an event handler to autoRunEvents in unified app manifest - JSON\nDESCRIPTION: Illustrates how to fully specify an event handler mapping in the \\\"autoRunEvents\\\" array. This JSON object sets a capability requirement (Mailbox 1.5+), a scope (mail), and maps the supported event type (e.g., \\\"newMessageComposeCreated\\\") to a handler function (actionId). Ensure the handler is defined and supported in the add-in codebase. The event types must match those supported by Outlook mobile as described; multiple handler objects can be added to the array as needed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-event-based.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  {\n      \"requirements\": {\n          \"capabilities\": [\n              {\n                  \"name\": \"Mailbox\",\n                  \"minVersion\": \"1.5\"\n              }\n          ],\n          \"scopes\": [\n              \"mail\"\n          ]\n      },\n      \"events\": [\n          {\n              \"type\": \"newMessageComposeCreated\",\n              \"actionId\": \"onNewMessageComposeHandler\"\n          },\n      ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Fetching a Shape by Binding ID with Error Handling - PowerPoint Office JS - JavaScript\nDESCRIPTION: Defines an asynchronous function to retrieve a shape object from a binding ID using the Office JS API, including robust error handling. The function returns the shape if found, or undefined if an error occurs (e.g., if the binding or shape was deleted). This is useful for managing references that may become invalid during document editing or shape deletion.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/bind-shapes-in-presentation.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getShapeFromBindingID(id) {\\n    await PowerPoint.run(async (context) => {\\n        try {\\n            const binding = context.presentation.bindings.getItemAt(id);\\n            const shape = binding.getShape();\\n\\n            await context.sync();\\n            return shape;\\n        } catch (err) {\\n            console.log(err);\\n            return undefined;\\n        }\\n    });\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Adding HtmlWebpackPlugin Entry for Dialog HTML Output - JavaScript\nDESCRIPTION: This snippet configures HtmlWebpackPlugin to generate dialog.html in the build output. It specifies the template, filename, and which webpack chunks to inject (polyfill and dialog). Insert this object into the plugins array of webpack.config.js. Prerequisites include having dialog.html and dialog.js in the specified locations. This ensures the dialog UI has its corresponding HTML and script bundle in the final build.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew HtmlWebpackPlugin({\n  filename: \"dialog.html\",\n  template: \"./src/settings/dialog.html\",\n  chunks: [\"polyfill\", \"dialog\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Loopback Exemption for HTTPS Localhost (Outlook Add-in)\nDESCRIPTION: Executes the `CheckNetIsolation.exe` command in an elevated prompt to add a loopback exemption for an application identified by a specific AppContainer name derived from `https://localhost:3000`. This step is necessary to resolve network access errors when debugging Outlook add-ins hosted locally over HTTPS on Windows. Assumes default port 3000; adjust if using a different port.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/outlook-loopback-exemption.md#_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\ncall %SystemRoot%\\System32\\CheckNetIsolation.exe LoopbackExempt -a -n=1_https___localhost_300004ACA5EC-D79A-43EA-AB47-E50E47DD96FC\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Outlook Add-in (NPM) - Command Line\nDESCRIPTION: This command starts the local web server and triggers the sideloading process for the Outlook add-in using npm. It requires Node.js and the relevant node modules to be installed. Running this in the project root will make the add-in accessible in Outlook for testing. The npm start script should be preconfigured in the project's package.json as set up by the Yeoman generator.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/outlook-quickstart-yo.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the Office JavaScript Linter - Command Line\nDESCRIPTION: Runs the Office Add-ins lint check script previously configured in package.json. Invoking this command analyzes the project's JavaScript/TypeScript files for issues specific to Office.js development. The output is displayed in the terminal or an editor that supports linter output.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/set-up-your-dev-environment.md#_snippet_4\n\nLANGUAGE: command line\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Adding jQuery Type Definitions via package.json\nDESCRIPTION: Configures the `package.json` file to include the `@types/jquery` package as a dev dependency. This provides TypeScript type definitions for jQuery, improving the development experience with type safety and autocompletion when using jQuery in `.ts` files. This file manages npm package dependencies for the web project.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/convert-javascript-to-typescript.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0.0\",\n  \"name\": \"asp.net\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"@types/jquery\": \"^3.5.30\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Insert Text Button in HTML\nDESCRIPTION: This snippet adds a button element with the ID 'insert-text-into-range' to the task pane's HTML structure. This button is intended to trigger the insertion of text into the currently selected range in the Word document.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"insert-text-into-range\">Insert Abbreviation</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Updating Slide Tag Value Using Office.js - JavaScript\nDESCRIPTION: This snippet shows how to update the value of an existing tag on the first slide of a PowerPoint presentation. The \"add\" method is used for both insertion and updating the tag value, based on the key. Asynchronous operations and proper context synchronization are used. Requires Office.js context and PowerPoint namespace.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/tagging-presentations-slides-shapes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function updateTag() {\n  await PowerPoint.run(async function(context) {\n    const slide = context.presentation.slides.getItemAt(0);\n    slide.tags.add(\"PLANET\", \"Mars\");\n\n    await context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Text Comparison Conditional Formatting in Excel (JavaScript)\nDESCRIPTION: This snippet illustrates applying Text Comparison conditional formatting using the Office JavaScript API to a range ('B16:D18' on 'Sample' sheet). It configures a rule to set the font color to red for any cell within the range that contains the specific text 'Delayed', using the `Excel.ConditionalTextOperator.contains` operator.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats.add(\n         Excel.ConditionalFormatType.containsText\n    );\n    \n    // Color the font of every cell containing \"Delayed\".\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = {\n         operator: Excel.ConditionalTextOperator.contains,\n         text: \"Delayed\"\n    };\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Mobile Support to formFactors in manifest.json\nDESCRIPTION: This snippet shows how to add the \"mobile\" value to the `formFactors` array within the `extensions.ribbons.requirements` section of a `manifest.json` file. This modification indicates that the Office Add-in supports the mobile form factor alongside the desktop one.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"formFactors\": [\n    \"desktop\",\n    \"mobile\"\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type with @returns in TypeScript Custom Function\nDESCRIPTION: This TypeScript snippet repeats the `add` function example to specifically illustrate the use of the `@returns` JSDoc tag. The tag clarifies the purpose of the value returned by the function (the sum of the two numbers). While TypeScript provides type safety via `: number`, `@returns` adds descriptive documentation visible in Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * Adds two numbers.\n * @customfunction \n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nfunction add(first: number, second: number): number {\n  return first + second;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Function Command Logic for Logging Appointments in JavaScript\nDESCRIPTION: JavaScript code for an Office Add-in function command (`commands.js`). It defines the `logCRMEvent` function, triggered by an appointment event, which retrieves the appointment subject and body asynchronously (HTML format). It depends on the Office JS API (`Office.context.mailbox.item`, `Office.actions.associate`, `Office.onReady`). The function signals completion using `event.completed` based on the success of fetching the body.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nlet event;\n\n// Add start-up logic code to the onReady function, if any.\nOffice.onReady();\n\nfunction logCRMEvent(appointmentEvent) {\n  event = appointmentEvent;\n  console.log(`Subject: ${Office.context.mailbox.item.subject}`);\n  Office.context.mailbox.item.body.getAsync(\n    \"html\",\n    { asyncContext: \"This is passed to the callback\" },\n    (result) => {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        event.completed({ allowEvent: true });\n      } else {\n        console.error(\"Failed to get body.\");\n        event.completed({ allowEvent: false });\n      }\n    }\n  );\n}\n\n// Register the function.\nOffice.actions.associate(\"logCRMEvent\", logCRMEvent);\n```\n\n----------------------------------------\n\nTITLE: Requesting ReadItem Permission in XML Manifest (Outlook)\nDESCRIPTION: This XML snippet demonstrates how to request the 'ReadItem' permission within the classic Outlook add-in manifest file. This permission level allows the add-in to read properties of the current item (like sender/recipient names and email addresses) and write custom properties set by the add-in itself on that item. It's suitable for add-ins needing to access current item details without modifying them extensively or accessing other items.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/privacy-and-security.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Permissions>ReadItem</Permissions>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Ribbon Groups with Icons and Controls - JSON - manifest\nDESCRIPTION: This JSON code template defines a group object in the 'groups' array for a ribbon tab within the manifest. It includes required and optional properties ('id', 'label', 'icons', and 'controls'), where 'icons' specify different image sizes (16, 32, 80 pixels) used by the Office UI. Constraints include unique 'id', maximum lengths for 'id' and 'label', and SSL URLs for icon images. This pattern is used to organize one or more controls (e.g., buttons/menus) in a ribbon group. Inputs are metadata and icon URLs; output is a group structure for the Office ribbon.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"groups\": [\n    {\n        \"id\": \"msgReadGroup\",\n        \"label\": \"Contoso Add-in\",\n        \"icons\": [\n            {\n                \"size\": 16,\n                \"url\": \"https://localhost:3000/assets/icon-16.png\"\n            },\n            {\n                \"size\": 32,\n                \"url\": \"https://localhost:3000/assets/icon-32.png\"\n            },\n            {\n                \"size\": 80,\n                \"url\": \"https://localhost:3000/assets/icon-80.png\"\n            }\n        ],\n        \"controls\": [\n            {\n                // properties omitted\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Task Pane Auto-Open in XML Manifest\nDESCRIPTION: Designates a specific task pane to open automatically upon add-in installation within the traditional XML manifest. This is done by adding a `<TaskpaneId>` element with the value `Office.AutoShowTaskpaneWithDocument` as the first child of the relevant `<Action>` element (where `xsi:type=\"ShowTaskpane\"`). This configuration determines which task pane opens by default if the add-in has multiple task pane commands.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/automatically-open-on-installation.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Action xsi:type=\"ShowTaskpane\">\n    <TaskpaneId>Office.AutoShowTaskpaneWithDocument</TaskpaneId>\n    <SourceLocation resid=\"Contoso.Taskpane.Url\" />\n</Action>\n```\n\n----------------------------------------\n\nTITLE: Start Sideloading and Debugging with office-addin-debugging\nDESCRIPTION: Uses the `office-addin-debugging` tool via npx to package the unified manifest and its referenced icons into a zip file, sideloads it to the target Office desktop application, and starts a local development server to host the add-in files. The `<relative-path-to-unified-manifest>` placeholder should be replaced with the actual path to the add-in's manifest file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/sideload-add-in-with-unified-manifest.md#_snippet_0\n\nLANGUAGE: command-line\nCODE:\n```\nnpx office-addin-debugging start <relative-path-to-unified-manifest> desktop\n```\n\n----------------------------------------\n\nTITLE: Linking OfficeThemes.css in Visual Studio Project HTML\nDESCRIPTION: This HTML snippet demonstrates the specific <link> tag syntax used within a default Visual Studio PowerPoint Web Add-in project to reference the OfficeThemes.css file located in the Content folder. It should be placed within the <head> section of the add-in's UI page (e.g., Home.html).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/use-document-themes-in-your-powerpoint-add-ins.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"../../Content/OfficeThemes.css\" rel=\"stylesheet\" type=\"text/css\" />\n```\n\n----------------------------------------\n\nTITLE: Executing Tests via npm Command\nDESCRIPTION: This command, when run in the command line from the project's root directory, executes the script associated with the `test` key in the `package.json` file, typically running the configured test framework (like Jest in this context).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/unit-testing.md#_snippet_7\n\nLANGUAGE: command line\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Cache Control in IIS web.config (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure client-side caching for static content within an IIS `web.config` file. It sets the `cacheControlMode` to `UseMaxAge` with a `cacheControlMaxAge` of zero and adds `must-revalidate` to the `cacheControlCustom` directive, effectively instructing browsers not to cache static files. This is useful during development to ensure changes to static files like JavaScript, HTML, and CSS are reflected immediately without needing to manually clear the browser cache.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/troubleshoot-development-errors.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<system.webServer>\n  <staticContent>\n    <clientCache cacheControlMode=\"UseMaxAge\" cacheControlMaxAge=\"0.00:00:00\" cacheControlCustom=\"must-revalidate\" />\n  </staticContent>\n</system.webServer>\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Custom Function Metadata in JSON (German)\nDESCRIPTION: This JSON snippet demonstrates how to define metadata for an Excel custom function localized into German. It specifies the function's unique `id` ('MULTIPLY'), its German display `name` ('SUMME'), `description`, and localized `name` and `description` for its parameters ('eins', 'zwei'). This structure is used in a language-specific metadata file (e.g., 'functions-de.json').\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-naming.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"MULTIPLY\",\n    \"name\": \"SUMME\",\n    \"description\": \"Summe zwei Zahlen\",\n    \"helpUrl\": \"http://www.contoso.com\",\n    \"result\": {\n        \"type\": \"number\",\n        \"dimensionality\": \"scalar\"\n    },\n    \"parameters\": [\n        {\n            \"name\": \"eins\",\n            \"description\": \"Erste Nummer\",\n            \"dimensionality\": \"scalar\"\n        },\n        {\n            \"name\": \"zwei\",\n            \"description\": \"Zweite Nummer\",\n            \"dimensionality\": \"scalar\"\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Office Add-in and Defining Global Variables in JavaScript\nDESCRIPTION: Defines global variables to store OData service path components (PROJDATA, PROJQUERY, etc.) and context information like the Project Web App URL (_pwa), active project GUID (_projectUid), document URL (_docUrl), and the full OData service URL (_odataUrl). It also includes the standard Office Add-in initialization block using `Office.onReady` and jQuery's `$(document).ready` to ensure both the Office.js library and the DOM are loaded before executing further code.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nlet PROJDATA = \"/_api/ProjectData\";\nlet PROJQUERY = \"/Projects?\";\nlet QUERY_FILTER = \"$filter=ProjectName ne 'Timesheet Administrative Work Items'\";\nlet QUERY_SELECT1 = \"&amp;$select=ProjectId, ProjectName\";\nlet QUERY_SELECT2 = \", ProjectCost, ProjectWork, ProjectPercentCompleted, ProjectActualCost\";\nlet _pwa;           // URL of Project Web App.\nlet _projectUid;    // GUID of the active project.\nlet _docUrl;        // Path of the project document.\nlet _odataUrl = \"\"; // URL of the OData service: http[s]://ServerName /ProjectServerName /_api/ProjectData\n\n// Ensure the Office.js library is loaded.\nOffice.onReady(function() {\n    // Office is ready.\n    $(document).ready(function () {\n        // The document is ready.\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Page Source Location in XML Manifest for Shared Runtime\nDESCRIPTION: This XML snippet shows how to modify the `<Page><SourceLocation>` element within the `<AllFormFactors>` section of a `manifest.xml` file. The `resid` attribute is changed from potentially `Functions.Page.Url` to `Taskpane.Url`, ensuring that the UI-less HTML page for custom functions (if present) loads within the context of the shared runtime specified by `Taskpane.Url`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<AllFormFactors>\n...\n<Page>\n  <SourceLocation resid=\"Taskpane.Url\"/>\n</Page>\n...\n\n```\n\n----------------------------------------\n\nTITLE: Finding Numerical Constant Cells using Excel JavaScript API (JavaScript)\nDESCRIPTION: This snippet finds all numerical constants (cells containing literal numbers) within the used range of a worksheet using getSpecialCells with type filtering. Only literal-number cells are highlighted in pink; formulas and non-numeric constants are ignored. Office JS Excel library and async JavaScript execution with Excel.run are required; suitable for worksheets containing mixed data types.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-special-cells.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let usedRange = sheet.getUsedRange();\n    let constantNumberRanges = usedRange.getSpecialCells(\n        Excel.SpecialCellType.constants,\n        Excel.SpecialCellValueType.numbers);\n    constantNumberRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing an Organization Outlook Add-in using PowerShell\nDESCRIPTION: This PowerShell cmdlet installs an Outlook add-in for the entire organization using the manifest data previously read into the `$Data` variable. The `-OrganizationApp` switch designates it as an organization app, and `-DefaultStateForUser Enabled` makes it enabled by default for users. Requires connection to Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-App -OrganizationApp -FileData $Data -DefaultStateForUser Enabled\n```\n\n----------------------------------------\n\nTITLE: Batch Processing Ranges with Multiple Loops using Excel JavaScript API in JavaScript\nDESCRIPTION: This snippet shows an improved strategy by splitting the processing of 10,000 rows into two separate loops and `context.sync()` calls using JavaScript and the Excel API. It avoids exceeding the 5MB payload size limit but can negatively affect performance due to extra round-trips. Dependencies include Office.js for Excel. Parameters include loop ranges for chunking. Input is a large row range and output is cell updates in batches. Intended for use only when payload size limits require it.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/performance.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This code sample shows a strategy for reducing payload request size.\\n// However, using multiple loops and `context.sync()` calls negatively impacts performance.\\n// Only use this strategy if you've determined that you're exceeding the payload request limit.\\nasync function run() {\\n  await Excel.run(async (context) => {\\n    let worksheet = context.workbook.worksheets.getActiveWorksheet();\\n\\n    // Split the ranges into two loops, rows 1-5000 and then 5001-10000.\\n    for (let row = 1; row < 5000; row++) {\\n      let range = worksheet.getRangeByIndexes(row, 1, 1, 1);\\n      range.values = [[\\\"1\\\"]];\\n    }\\n    // Sync after each loop. \\n    await context.sync(); \\n    \\n    for (let row = 5001; row < 10000; row++) {\\n      let range = worksheet.getRangeByIndexes(row, 1, 1, 1);\\n      range.values = [[\\\"1\\\"]];\\n    }\\n    await context.sync(); \\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Data Bar Conditional Formatting - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet demonstrates applying data bar conditional formatting to an Excel range using the JavaScript API. The code sets data bars to fill cells from left to right in proportion to their values within the range, using default minimum and maximum bounds. It depends on the Excel JavaScript context, specifying data bar direction, and must be executed asynchronously with Office.js. The user must ensure the range and worksheet exist prior to execution.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(\n         Excel.ConditionalFormatType.dataBar\n    );\n    \n    // Give left-to-right, default-appearance data bars to all the cells.\n    conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Ribbon Contexts in Manifest\nDESCRIPTION: This JSON snippet demonstrates how to populate the 'contexts' array within the 'ribbons' object. It specifies the Office application states or windows where the custom ribbon elements should be visible. The example 'mailRead' indicates the ribbon modifications will appear when reading an email.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"contexts\": [\n    \"mailRead\"\n],\n```\n\n----------------------------------------\n\nTITLE: Defining an Anonymous Callback Function - Office.js - JavaScript\nDESCRIPTION: This snippet shows a generic anonymous callback function for use with Office.js asynchronous methods. It takes a single parameter (commonly the AsyncResult object) and writes the 'value' from the result using a hypothetical write function. No additional dependencies beyond Office.js and a write function are required. Input is the AsyncResult from the Office API, and output is the displayed data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction (result) {\n    write('Selected data: ' + result.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting EWS Callback Token in On-Premises Exchange using Office JS\nDESCRIPTION: Provides functions to request an EWS callback token using `Office.context.mailbox.getCallbackTokenAsync` for on-premises Exchange environments. The `getAttachmentToken` function initiates the request, and `attachmentTokenCallback` handles the asynchronous response, storing the token for use by a remote service to authenticate EWS calls.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction getAttachmentToken() {\n    if (serviceRequest.attachmentToken == \"\") {\n        Office.context.mailbox.getCallbackTokenAsync(attachmentTokenCallback);\n    }\n}\n\nfunction attachmentTokenCallback(asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n        // Cache the result from the server.\n        serviceRequest.attachmentToken = asyncResult.value;\n        serviceRequest.state = 3;\n        testAttachments();\n    } else {\n        showToast(\"Error\", \"Couldn't get callback token: \" + asyncResult.error.message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Presentation Metadata Tag Using Office.js - JavaScript\nDESCRIPTION: This snippet shows how to delete a custom metadata tag (\"SECURITY\") from a PowerPoint presentation using the tags.delete method. The tag key is provided as a parameter, and Office.js asynchronous context methods ensure the operation is properly executed within the Office host environment. Prerequisites: Office.js with PowerPoint enabled; valid tag key must exist.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/tagging-presentations-slides-shapes.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function deletePresentationTag() {\n  await PowerPoint.run(async function (context) {\n    let presentationTags = context.presentation.tags;\n    presentationTags.delete(\"SECURITY\");\n\n    await context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Roaming Settings Asynchronously in Outlook Add-ins (JavaScript)\nDESCRIPTION: Shows how to remove a specific roaming setting using the `RoamingSettings.remove()` method, identified by its key ('cookie' in this example). It then calls `RoamingSettings.saveAsync()` to asynchronously save the changes to the user's mailbox, ensuring the removal persists across sessions. Requires the Office JavaScript API and assumes `_settings` and `saveMyAddInSettingsCallback` are defined.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/metadata-for-an-outlook-add-in.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove an add-in setting.\nfunction removeAddInSetting()\n{\n  _settings.remove(\"cookie\");\n  // Save changes to the roaming settings for the mailbox, so that they'll be available in the next Outlook session.\n  _settings.saveAsync(saveMyAddInSettingsCallback);\n}\n```\n\n----------------------------------------\n\nTITLE: Including jwt-decode in Taskpane HTML (HTML)\nDESCRIPTION: This snippet shows how to include the jwt-decode library in an Office Add-in task pane HTML file using a <script> tag. It enables JavaScript within the page to access and use the jwt-decode API for parsing ID tokens from the Office SSO API. Adjust the script path and version as needed for your project's configuration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/use-sso-to-get-office-signed-in-user-token.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\\\"Scripts/jwt-decode-2.2.0.js\\\" type=\\\"text/javascript\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Mailbox Permissions in Add-in Manifest (XML)\nDESCRIPTION: This XML snippet sets the required permissions for an Outlook add-in using the traditional XML manifest. The `<Permissions>` element contains the value `ReadWriteMailbox`, granting the add-in the necessary access to read and potentially modify mailbox items, a prerequisite for handling multiple selected messages.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/item-multi-select.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Permissions>ReadWriteMailbox</Permissions>\n```\n\n----------------------------------------\n\nTITLE: Adding Word Binding from Content Control Title (JavaScript)\nDESCRIPTION: This function demonstrates creating a 'text' type binding specifically in Word, associated with a Rich Text content control identified by its `Title` property ('FirstName'). It uses `addFromNamedItemAsync` with `Office.BindingType.Text`, assigns the ID 'firstName', and logs the result or error. Requires the Office JS API, Word environment, and a Rich Text content control with the Title 'FirstName'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction bindContentControl() {\n    Office.context.document.bindings.addFromNamedItemAsync('FirstName', \n        Office.BindingType.Text, {id:'firstName'},\n        function (result) {\n            if (result.status === Office.AsyncResultStatus.Succeeded) {\n                write('Control bound. Binding.id: '\n                    + result.value.id + ' Binding.type: ' + result.value.type);\n            } else {\n                write('Error:', result.error.message);\n            }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Building Outlook Add-in Project with npm - Command Line\nDESCRIPTION: This snippet demonstrates how to build your Outlook Add-in project from the root directory using npm. The 'npm run build' command compiles your source files as configured in your project's package.json scripts, preparing all necessary assets for use or sideloading. Required dependencies include Node.js and npm, and the script must be defined in your project. Input: none, but the project must be initialized with the required build script. Output: build artifacts ready for sideloading.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_8\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Including Office.js Beta and Launch Script for Preview Features (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to include the preview version of the Office.js library along with the launchevent.js script for projects making use of features currently in preview (such as customized dialog buttons or send mode overrides) on certain Outlook clients. Both script tags must reference accurate CDN and local paths. This is necessary to access preview API features before general release.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://appsforoffice.microsoft.com/lib/beta/hosted/office.js\"></script>\n<script type=\"text/javascript\" src=\"../launchevent/launchevent.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for Office Add-in - Command Line\nDESCRIPTION: Runs the npm script \\\"dev-server\\\" to start the local web server, serving the Office Add-in's assets for development and testing. This requires Node.js and npm, and the add-in project must include a \\\"dev-server\\\" script in its package.json. No arguments are needed; running this command launches the server, outputting logs to the terminal. The server remains active until it is explicitly stopped.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/project-quickstart.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler for 'Add Version Info' Button in JavaScript\nDESCRIPTION: Selects the HTML button with the ID `insert-text-outside-range` using `document.getElementById` and assigns its `onclick` event handler. The handler calls the `insertTextBeforeRange` function, wrapped within a `tryCatch` block for error management. This code snippet should be placed inside the `Office.onReady` function call in `taskpane.js`. Depends on the button existing in the DOM and the `tryCatch` and `insertTextBeforeRange` functions being defined.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"insert-text-outside-range\").onclick = () => tryCatch(insertTextBeforeRange);\n```\n\n----------------------------------------\n\nTITLE: Wiring 'Create Content Control' Button to JavaScript Handler in Office.js Task Pane\nDESCRIPTION: This snippet attaches an onclick event handler to the HTML button with id 'create-content-control', wiring it to the createContentControl function wrapped in tryCatch. It must be invoked from within the Office.onReady callback to ensure Office.js is fully loaded. Assumes the existence of 'tryCatch' error handling logic and a function named 'createContentControl'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\\\"create-content-control\\\").onclick = () => tryCatch(createContentControl);\n```\n\n----------------------------------------\n\nTITLE: Starting Office Add-in Debugging with NPX - Command Line\nDESCRIPTION: This command uses npx to launch the office-addin-debugging tool, initiating automated sideload, server instance, and debug configuration for the specified manifest file. Requires the office-addin-debugging NPM package be installed globally or locally. The key parameter is <your manifest path>, which should be replaced with the relative path to your Office Add-in's manifest XML. The tool sets up the debugging environment, but may prompt for registry changes depending on project origin. Output includes started servers and launched host apps. Limitations: only works on compatible environments and requires the mentioned dependencies.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-desktop-using-edge-chromium.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-debugging start <your manifest path>\n```\n\n----------------------------------------\n\nTITLE: Example WebExtension Part for Centralized Deployment (EXCatalog) in Open XML\nDESCRIPTION: Provides a concrete example of the `webextension` part configured for an Office Add-in deployed via Centralized Deployment through the Microsoft 365 admin center. It specifies the `storeType` and `store` as \"EXCatalog\" and uses the add-in's manifest GUID for the `id` attribute and version. This configuration is typically used for testing the auto-open feature in enterprise environments.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/automatically-open-a-task-pane-with-a-document.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<we:webextension xmlns:we=\"http://schemas.microsoft.com/office/webextensions/webextension/2010/11\" id=\"{52811C31-4593-43B8-A697-EB873422D156}\">\n    <we:reference id=\"af8fa5ba-4010-4bcc-9e03-a91ddadf6dd3\" version=\"1.0.0.0\" store=\"EXCatalog\" storeType=\"EXCatalog\"/>\n    <we:alternateReferences/>\n    <we:properties/>\n    <we:bindings/>\n    <we:snapshot xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"/>\n</we:webextension>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web API Routing in ASP.NET (C#)\nDESCRIPTION: This C# snippet configures Web API routing for an ASP.NET project by mapping attribute-based and default HTTP routes. It must reside in the WebApiConfig.cs file within an App_Start folder. Key parameters are the route template for API controllers and optional id. This setup is a prerequisite for enabling Web API endpoints in the solution.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Web;\\nusing System.Web.Http;\\n\\nnamespace HelloWorldWeb.App_Start\\n{\\n    public static class WebApiConfig\\n    {\\n        public static void Register(HttpConfiguration config)\\n        {\\n            config.MapHttpAttributeRoutes();\\n\\n            config.Routes.MapHttpRoute(\\n                name: \\\"DefaultApi\\\",\\n                routeTemplate: \\\"api/{controller}/{id}\\\",\\n                defaults: new { id = RouteParameter.Optional }\\n            );\\n        }\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining UI Buttons in Word Add-in Task Pane (HTML)\nDESCRIPTION: Defines UI elements (buttons) in the task pane HTML that act as triggers for Office.js operations. Dependencies include that the file be loaded in an Office task pane context and script handlers attached for expected IDs. Key parameter is the unique \"id\" on each button, allowing for programmatic event binding in the client JavaScript. Expected input is user interaction, and the output is an event fired in the browser document. Only the button(s) render visually; no application logic is handled here.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"ms-Button\\\" id=\\\"insert-paragraph\\\">Insert Paragraph</button><br/><br/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"ms-Button\\\" id=\\\"apply-style\\\">Apply Style</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Configuring CopyWebpackPlugin Patterns for CSS Assets - JavaScript\nDESCRIPTION: These objects are CopyWebpackPlugin pattern definitions for including CSS files in the build. They copy taskpane.css and dialog.css from their source locations to the build output, making the required UI styles available for the Office Add-in. Place these definitions in the patterns array of CopyWebpackPlugin in your webpack.config.js. These patterns assume the source CSS files exist at the specified locations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  from: \"./src/taskpane/taskpane.css\",\n  to: \"taskpane.css\",\n},\n{\n  from: \"./src/settings/dialog.css\",\n  to: \"dialog.css\",\n},\n```\n\n----------------------------------------\n\nTITLE: Creating New OWA Mailbox Policy for All Users (Modern/New Outlook)\nDESCRIPTION: Creates a new Outlook on the Web (OWA) mailbox policy specifically intended for applying on-send add-in settings to all users in the context of modern Outlook on the web or new Outlook on Windows. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-OWAMailboxPolicy OWAOnSendAddinAllUserPolicy\n```\n\n----------------------------------------\n\nTITLE: Defining a Dropdown Menu Control in Manifest\nDESCRIPTION: This JSON snippet defines a dropdown menu control within the 'controls' array of a group. Key properties include 'id', 'type' set to 'menu', 'label' for the menu button, 'icons' for the menu button, a 'supertip' (tooltip) with 'title' and 'description', and an 'items' array to hold the individual menu options.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"msgReadMenu\",\n    \"type\": \"menu\",\n    \"label\": \"Contoso Menu\",\n    \"icons\": [\n        {\n            \"size\": 16,\n            \"url\": \"https://localhost:3000/assets/icon-16.png\"\n        },\n        {\n            \"size\": 32,\n            \"url\": \"https://localhost:3000/assets/icon-32.png\"\n        },\n        {\n            \"size\": 80,\n            \"url\": \"https://localhost:3000/assets/icon-80.png\"\n        }\n    ],\n    \"supertip\": {\n        \"title\": \"Show Contoso Actions\",\n        \"description\": \"Opens the Contoso menu.\"\n    },\n    \"items\": [\n        {\n            \"id\": \"\",\n            \"type\": \"\",\n            \"label\": \"\",\n            \"supertip\": {},\n            \"actionId\": \"\"\n        },\n        {\n            \"id\": \"\",\n            \"type\": \"\",\n            \"label\": \"\",\n            \"supertip\": {},\n            \"actionId\": \"\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tab Position in Unified Manifest - JSON\nDESCRIPTION: Shows how to specify a custom tab's position using the unified JSON manifest for Microsoft 365 add-ins. Requires the host application to support AddinCommands 1.3 and the add-in to use the unified manifest structure. The \\\"position\\\" object within \\\"extensions.ribbons.tabs\\\" sets the target built-in tab (using its ID, e.g., TabReview) and the relative alignment (\\\"before\\\" or \\\"after\\\"). Input: Office manifest as JSON; Output: Tab placement in ribbon UI. Ensure that all referenced tab IDs are valid per Office documentation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/custom-tab-placement.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"ribbons\": [\n            ...\n            {\n                ...\n                \"tabs\": [\n                    {\n                        \"id\": \"MyTab\",\n                        ...\n                        \"position\": {\n                            \"builtInTabId\": \"TabReview\",\n                            \"align\": \"after\"\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Ribbon UI for Prepend/Append Buttons in Outlook Manifest – JSON\nDESCRIPTION: This manifest JSON snippet specifies ribbon tab, group, icons, and button controls configuration to provide users with UI options to prepend headers or append disclaimers in a mail compose context. Controls are assigned to the same action IDs configured in the runtime. Prerequisites: Manifest structure with ribbons section. Key properties: contexts, tabs, groups, controls, supertips, actionId references, and icon URLs. Expected input is a valid Microsoft 365 manifest, output is add-in buttons surfacing in compose windows. Ensure icon URLs are correct and duplicated keys are avoided.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/append-on-send.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"contexts\": [\n        \"mailCompose\"\n    ],\n    \"tabs\": [\n        {\n            \"builtInTabId\": \"TabDefault\",\n            \"groups\": [\n                {\n                    \"id\": \"msgComposeGroup\",\n                    \"label\": \"Contoso Add-in\",\n                    \"icons\": [\n                        {\n                            \"size\": 16,\n                            \"url\" \"https://localhost:3000/assets/icon-16.png\"\n                        },\n                        {\n                            \"size\": 32,\n                            \"url\" \"https://localhost:3000/assets/icon-32.png\"\n                        },\n                        {\n                            \"size\": 80,\n                            \"url\" \"https://localhost:3000/assets/icon-80.png\"\n                        }\n                    ],\n                    \"controls\": [\n                        {\n                            \"id\": \"PrependButton\",\n                            \"type\": \"button\",\n                            \"label\": \"Prepend header\",\n                            \"icons\": [\n                                {\n                                    \"size\": 16,\n                                    \"url\" \"https://localhost:3000/assets/icon-16.png\"\n                                },\n                                {\n                                    \"size\": 32,\n                                    \"url\" \"https://localhost:3000/assets/icon-32.png\"\n                                },\n                                {\n                                    \"size\": 80,\n                                    \"url\" \"https://localhost:3000/assets/icon-80.png\"\n                                }\n                            ],\n                            \"supertip\": {\n                                \"title\": \"Prepend header on send\",\n                                \"description\": \"Prepend the Contoso header on send.\"\n                            },\n                            \"actionId\": \"prependHeaderOnSend\"\n                        },\n                        {\n                            \"id\": \"AppendButton\",\n                            \"type\": \"button\",\n                            \"label\": \"Add disclaimer\",\n                            \"icons\": [\n                                {\n                                    \"size\": 16,\n                                    \"url\" \"https://localhost:3000/assets/icon-16.png\"\n                                },\n                                {\n                                    \"size\": 32,\n                                    \"url\" \"https://localhost:3000/assets/icon-32.png\"\n                                },\n                                {\n                                    \"size\": 80,\n                                    \"url\" \"https://localhost:3000/assets/icon-80.png\"\n                                }\n                            ],\n                            \"supertip\": {\n                                \"title\": \"Append disclaimer on send\",\n                                \"description\": \"Append the Contoso disclaimer on send.\"\n                            },\n                            \"actionId\": \"appendDisclaimerOnSend\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring contexts array in unified app manifest - JSON\nDESCRIPTION: Demonstrates how to add the \\\"mailRead\\\" context to the \\\"extensions.ribbons.contexts\\\" array within the unified app manifest. Dependencies include a valid manifest structure and familiarity with Microsoft 365 add-in development. This configuration ensures the add-in is activated in the mail reading view on supported Outlook mobile clients. This array can include additional contexts as needed. Modifying this array alters where the add-in's features are available.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-event-based.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"contexts\": [\n        \"mailRead\"\n    ],\n```\n\n----------------------------------------\n\nTITLE: Moving a Worksheet to the First Position with Excel JavaScript API\nDESCRIPTION: Relocates a worksheet from the last position in the workbook to the first position. It loads the worksheet items, identifies the last sheet, and then sets its `position` property to 0 (zero-based index for the first position).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.load(\"items\");\n    await context.sync();\n\n    let lastSheet = sheets.items[sheets.items.length - 1];\n    lastSheet.position = 0;\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript File Reference in Outlook Add-in Commands HTML (HTML)\nDESCRIPTION: Demonstrates how to add a script reference to the spamreporting.js handler in the commands.html file used by an Outlook add-in. The script tag must be added before the closing </head> tag to ensure the spam-reporting logic is available on command execution. No additional dependencies are required aside from the existence of the referenced JavaScript file, and the snippet is valid for both preview and general Office.js scenarios. Inputs include no parameters; the output is script inclusion in the HTML page.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"../spamreporting/spamreporting.js\\\"></script>    \n```\n\n----------------------------------------\n\nTITLE: Running Development Web Server via npm\nDESCRIPTION: Runs the 'dev-server' script defined in package.json. This task starts the local web server used to host the add-in's files during development, enabling sideloading and testing. Requires Node.js, npm, and a configured 'dev-server' script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Inserting Base64 Image Into Slide Using Office JS API (JavaScript)\nDESCRIPTION: This JavaScript function uses Office.context.document.setSelectedDataAsync to insert a provided base64 string as an image into the current document or slide. It requires the Office.js library and expects valid base64 image input. Error feedback is displayed through showNotification. Inputs: image (base64 string). Outputs: modifies the current selection, invokes the callback with the async result.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nfunction insertImageFromBase64String(image) {\\n    // Call Office.js to insert the image into the document.\\n    Office.context.document.setSelectedDataAsync(image, {\\n        coercionType: Office.CoercionType.Image\\n    },\\n        function (asyncResult) {\\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\\n                showNotification(\"Error\", asyncResult.error.message);\\n            }\\n        });\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Buttons in HTML for PowerPoint Add-in\nDESCRIPTION: This HTML markup defines five buttons within the add-in's task pane (`Home.html`) for adding slides and navigating between them (first, next, previous, last). Each button uses specific IDs for JavaScript event handling and includes descriptive text and icons (using `ms-Icon`). This code replaces a placeholder `TODO5`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<br /><br />\n<button class=\"Button Button--primary\" id=\"add-slides\">\n    <span class=\"Button-icon\"><i class=\"ms-Icon ms-Icon--plus\"></i></span>\n    <span class=\"Button-label\">Add Slides</span>\n    <span class=\"Button-description\">Adds 2 slides.</span>\n</button>\n<br /><br />\n<button class=\"Button Button--primary\" id=\"go-to-first-slide\">\n    <span class=\"Button-icon\"><i class=\"ms-Icon ms-Icon--plus\"></i></span>\n    <span class=\"Button-label\">Go to First Slide</span>\n    <span class=\"Button-description\">Go to the first slide.</span>\n</button>\n<br /><br />\n<button class=\"Button Button--primary\" id=\"go-to-next-slide\">\n    <span class=\"Button-icon\"><i class=\"ms-Icon ms-Icon--plus\"></i></span>\n    <span class=\"Button-label\">Go to Next Slide</span>\n    <span class=\"Button-description\">Go to the next slide.</span>\n</button>\n<br /><br />\n<button class=\"Button Button--primary\" id=\"go-to-previous-slide\">\n    <span class=\"Button-icon\"><i class=\"ms-Icon ms-Icon--plus\"></i></span>\n    <span class=\"Button-label\">Go to Previous Slide</span>\n    <span class=\"Button-description\">Go to the previous slide.</span>\n</button>\n<br /><br />\n<button class=\"Button Button--primary\" id=\"go-to-last-slide\">\n    <span class=\"Button-icon\"><i class=\"ms-Icon ms-Icon--plus\"></i></span>\n    <span class=\"Button-label\">Go to Last Slide</span>\n    <span class=\"Button-description\">Go to the last slide.</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Adding Result Button and Display Panel to Office Add-in UI (HTML)\nDESCRIPTION: This HTML snippet provides the user interface for the Office Add-in, offering a button to trigger Unicode analysis, a label, and a div for result display. The button calls 'showUnicode()' on click. No dependencies aside from supporting JavaScript and jQuery for event wiring and output manipulation. Inputs are provided by the user via Excel cell selection, and outputs are shown in 'txtResult'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"btnShowUnicode\" onclick=\"showUnicode()\">Show Unicode</button>\n<p>Result:</p>\n<div id=\"txtResult\"></div>\n```\n\n----------------------------------------\n\nTITLE: Starting the Standalone Add-in Development Server - Command Line\nDESCRIPTION: Starts the Office Add-in development server and launches the Office application with the add-in loaded for testing and development. Run this command from the root of your Yo Office project whenever you need to test code changes in the add-in environment. No arguments are required.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/create-an-office-add-in-from-script-lab.md#_snippet_4\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Disabling On-Send Feature for a Specific User (Classic Outlook Web)\nDESCRIPTION: Disables the on-send feature for a specific user (`joe@contoso.com`) by assigning them an OWA mailbox policy (`ContosoCorpOWAPolicy`) where the `OnSendAddinsEnabled` flag is set to `$false` or not set. This applies within the classic Outlook on the web environment. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CASMailbox joe@contoso.com | Set-CASMailbox –OWAMailboxPolicy \"ContosoCorpOWAPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Defining Button Actions to Open Default and Specific Task Panes (JSON)\nDESCRIPTION: This JSON snippet defines two `ShowTaskpane` actions. The first (`openChartsTaskpane`) opens the default task pane (shared runtime). The second (`openTablesTaskpane`) uses the `sourceLocation` property to specify a URL for a different task pane, which will run in a separate runtime. Buttons (`CtxBt112`, `CtxBt113`) are configured using `actionId` to trigger these respective actions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n`{\n  \"actions\": [\n    {\n      \"id\": \"openChartsTaskpane\",\n      \"type\": \"ShowTaskpane\",\n      \"title\": \"Work with Charts\",\n      \"supportPinning\": false\n    },\n    {\n      \"id\": \"openTablesTaskpane\",\n      \"type\": \"ShowTaskpane\",\n      \"title\": \"Work with Tables\",\n      \"supportPinning\": false\n      \"sourceLocation\": \"https://MyDomain.com/myPage.html\"\n    }\n  ],\n  \"tabs\": [\n    {\n      // some tab properties omitted\n      \"groups\": [\n        {\n          // some group properties omitted\n          \"controls\": [\n            {\n                \"type\": \"Button\",\n                \"id\": \"CtxBt112\",\n                \"actionId\": \"openChartsTaskpane\",\n                \"enabled\": false,\n                \"label\": \"Open Charts Taskpane\",\n                // some control properties omitted\n            },\n            {\n                \"type\": \"Button\",\n                \"id\": \"CtxBt113\",\n                \"actionId\": \"openTablesTaskpane\",\n                \"enabled\": false,\n                \"label\": \"Open Tables Taskpane\",\n                // some control properties omitted\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}`\n```\n\n----------------------------------------\n\nTITLE: Starting Debugging Session with NPM for Yo Office/Teams Toolkit Projects\nDESCRIPTION: Executes the predefined 'start' script in the project's package.json file. This script typically invokes 'office-addin-debugging' to sideload the add-in for testing and debugging. This method is used for projects created with Teams Toolkit or the Office Yeoman Generator after updating manifest URLs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/test-debug-non-local-server.md#_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Prepend/Append Buttons and Permissions in Outlook Add-in Manifest (XML)\nDESCRIPTION: This XML snippet replaces the <VersionOverrides> node in an Outlook add-in manifest (manifest.xml) to configure prepend-on-send and append-on-send functionality. It defines requirements (Mailbox 1.13+), adds buttons (`PrependButton`, `AppendButton`) to the message compose command surface that trigger JavaScript functions (`prependHeaderOnSend`, `appendDisclaimerOnSend`), specifies associated resources (icons, URLs, strings), and requests the necessary `AppendOnSend` extended permission. This configuration enables users to trigger these actions via UI buttons.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/append-on-send.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n  <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n    <Requirements>\n      <bt:Sets DefaultMinVersion=\"1.13\">\n        <bt:Set Name=\"Mailbox\" />\n      </bt:Sets>\n    </Requirements>\n    <Hosts>\n      <Host xsi:type=\"MailHost\">\n        <DesktopFormFactor>\n          <FunctionFile resid=\"Commands.Url\" />\n          <ExtensionPoint xsi:type=\"MessageComposeCommandSurface\">\n            <OfficeTab id=\"TabDefault\">\n              <Group id=\"msgComposeGroup\">\n                <Label resid=\"GroupLabel\" />\n                <Control xsi:type=\"Button\" id=\"msgComposeOpenPaneButton\">\n                  <Label resid=\"TaskpaneButton.Label\" />\n                  <Supertip>\n                    <Title resid=\"TaskpaneButton.Label\" />\n                    <Description resid=\"TaskpaneButton.Tooltip\" />\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Icon.16x16\" />\n                    <bt:Image size=\"32\" resid=\"Icon.32x32\" />\n                    <bt:Image size=\"80\" resid=\"Icon.80x80\" />\n                  </Icon>\n                  <Action xsi:type=\"ShowTaskpane\">\n                    <SourceLocation resid=\"Taskpane.Url\" />\n                  </Action>\n                </Control>\n                <!-- Configure the prepend-on-send function command. -->\n                <Control xsi:type=\"Button\" id=\"PrependButton\">\n                  <Label resid=\"PrependButton.Label\"/>\n                  <Supertip>\n                    <Title resid=\"PrependButton.Label\"/>\n                    <Description resid=\"PrependButton.Tooltip\"/>\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                    <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                    <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                  </Icon>\n                  <Action xsi:type=\"ExecuteFunction\">\n                    <FunctionName>prependHeaderOnSend</FunctionName>\n                  </Action>\n                </Control>\n                <!-- Configure the append-on-send function command. -->\n                <Control xsi:type=\"Button\" id=\"AppendButton\">\n                  <Label resid=\"AppendButton.Label\"/>\n                  <Supertip>\n                    <Title resid=\"AppendButton.Label\"/>\n                    <Description resid=\"AppendButton.Tooltip\"/>\n                  </Supertip>\n                  <Icon>\n                    <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                    <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                    <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                  </Icon>\n                  <Action xsi:type=\"ExecuteFunction\">\n                    <FunctionName>appendDisclaimerOnSend</FunctionName>\n                  </Action>\n                </Control>\n              </Group>\n            </OfficeTab>\n          </ExtensionPoint>\n\n          <!-- Append-on-send and prepend-on-send are supported in Message Compose and Appointment Organizer modes. \n          To support these features when creating a new appointment, configure the AppointmentOrganizerCommandSurface extension point. -->\n\n        </DesktopFormFactor>\n      </Host>\n    </Hosts>\n    <Resources>\n      <bt:Images>\n        <bt:Image id=\"Icon.16x16\" DefaultValue=\"https://localhost:3000/assets/icon-16.png\"/>\n        <bt:Image id=\"Icon.32x32\" DefaultValue=\"https://localhost:3000/assets/icon-32.png\"/>\n        <bt:Image id=\"Icon.80x80\" DefaultValue=\"https://localhost:3000/assets/icon-80.png\"/>\n      </bt:Images>\n      <bt:Urls>\n        <bt:Url id=\"Commands.Url\" DefaultValue=\"https://localhost:3000/commands.html\" />\n        <bt:Url id=\"Taskpane.Url\" DefaultValue=\"https://localhost:3000/taskpane.html\" />\n      </bt:Urls>\n      <bt:ShortStrings>\n        <bt:String id=\"GroupLabel\" DefaultValue=\"Contoso Add-in\"/>\n        <bt:String id=\"TaskpaneButton.Label\" DefaultValue=\"Show Taskpane\"/>\n        <bt:String id=\"PrependButton.Label\" DefaultValue=\"Prepend header\"/>\n        <bt:String id=\"AppendButton.Label\" DefaultValue=\"Add disclaimer\"/>\n      </bt:ShortStrings>\n      <bt:LongStrings>\n        <bt:String id=\"TaskpaneButton.Tooltip\" DefaultValue=\"Opens a pane displaying all available properties.\"/>\n        <bt:String id=\"PrependButton.Tooltip\" DefaultValue=\"Prepend the Contoso header on send.\"/>\n        <bt:String id=\"AppendButton.Tooltip\" DefaultValue=\"Append the Contoso disclaimer on send.\"/>\n      </bt:LongStrings>\n    </Resources>\n    <!-- Configures the prepend-on-send and append-on-send features. The same value, AppendOnSend, is used for both features. -->\n    <ExtendedPermissions>\n      <ExtendedPermission>AppendOnSend</ExtendedPermission>\n    </ExtendedPermissions>\n  </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Generating a Bulleted List in Smart Alerts Dialog - Office.js JavaScript\nDESCRIPTION: Illustrates how to present a bulleted/unordered list in the Smart Alerts dialog using event.completed and errorMessageMarkdown. Dependencies include the Office.js event-based activation environment (API requirement set 1.15+). The errorMessageMarkdown string is crafted with Markdown and uses '\\r' to indicate item completion. The function expects an object literal configuration and renders a bulleted list in the dialog.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagesend-onappointmentsend-events.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nevent.completed({\n  allowEvent: false,\n  ...\n  errorMessageMarkdown: \"Your email doesn't meet company guidelines.\\n\\nFor additional assistance, contact the IT Service Desk:\\n\\n- Phone number: 425-555-0102\\r- Email: it@contoso.com\\r- Website: [Contoso IT Service Desk](https://www.contoso.com/it-service-desk)\\r\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting the Last Worksheet with Excel JavaScript API\nDESCRIPTION: Retrieves the last worksheet in the workbook's sequence using the `getLast()` method. It loads the worksheet's 'name' property and logs it to the console.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let lastSheet = context.workbook.worksheets.getLast();\n    lastSheet.load(\"name\");\n\n    await context.sync();\n    console.log(`The name of the last worksheet is \"${lastSheet.name}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Keyboard Shortcut Mapping in Office Add-in Manifest XML\nDESCRIPTION: This XML snippet demonstrates how to reference the previously created shortcut JSON file in the Office Add-in manifest. By placing the <ExtendedOverrides> element (with its Url attribute set to the JSON file location) immediately after </VersionOverrides>, Office apps are instructed where to find custom shortcut configurations. Requires knowledge of the manifest schema; the value of the Url attribute must be accessible by the Office app (typically an HTTPS endpoint). This allows the manifest to be extended with shortcut definitions for the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n    ...\n    </VersionOverrides>\n    <ExtendedOverrides Url=\"https://contoso.com/addin/shortcuts.json\"></ExtendedOverrides>\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Manifest for No Item Context Activation in Outlook\nDESCRIPTION: This XML snippet replaces the entire '<VersionOverrides>' section in an Outlook add-in's 'manifest.xml' file. It specifies the Mailbox requirement set 1.13, defines a 'MessageReadCommandSurface' extension point with a button control ('msgReadOpenPaneButton') that triggers a 'ShowTaskpane' action. Crucially, it includes the '<SupportsNoItemContext>true</SupportsNoItemContext>' element within the '<Action>' element, enabling the add-in to activate without the Reading Pane enabled or a message selected. It also defines necessary resources like icons and URLs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/contextless.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n    <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n        <Requirements>\n            <bt:Sets DefaultMinVersion=\"1.13\">\n              <bt:Set Name=\"Mailbox\"/>\n            </bt:Sets>\n        </Requirements>\n        <Hosts>\n            <Host xsi:type=\"MailHost\">\n                <DesktopFormFactor>\n                    <!-- Message Read mode-->\n                    <ExtensionPoint xsi:type=\"MessageReadCommandSurface\">\n                        <OfficeTab id=\"TabDefault\">\n                            <Group id=\"msgReadGroup\">\n                                <Label resid=\"GroupLabel\"/>\n                                <Control xsi:type=\"Button\" id=\"msgReadOpenPaneButton\">\n                                    <Label resid=\"TaskpaneButton.Label\"/>\n                                    <Supertip>\n                                        <Title resid=\"TaskpaneButton.Label\"/>\n                                        <Description resid=\"TaskpaneButton.Tooltip\"/>\n                                    </Supertip>\n                                    <Icon>\n                                        <bt:Image size=\"16\" resid=\"Icon.16x16\"/>\n                                        <bt:Image size=\"32\" resid=\"Icon.32x32\"/>\n                                        <bt:Image size=\"80\" resid=\"Icon.80x80\"/>\n                                    </Icon>\n                                    <Action xsi:type=\"ShowTaskpane\">\n                                        <SourceLocation resid=\"Taskpane.Url\"/>\n                                        <!-- Enables your add-in to activate without the Reading Pane enabled or a message selected. -->\n                                        <SupportsNoItemContext>true</SupportsNoItemContext>\n                                    </Action>\n                                </Control>\n                            </Group>\n                        </OfficeTab>\n                    </ExtensionPoint>\n                </DesktopFormFactor>\n            </Host>\n        </Hosts>\n        <Resources>\n            <bt:Images>\n              <bt:Image id=\"Icon.16x16\" DefaultValue=\"https://localhost:3000/assets/icon-16.png\"/>\n              <bt:Image id=\"Icon.32x32\" DefaultValue=\"https://localhost:3000/assets/icon-32.png\"/>\n              <bt:Image id=\"Icon.80x80\" DefaultValue=\"https://localhost:3000/assets/icon-80.png\"/>\n            </bt:Images>\n            <bt:Urls>\n              <bt:Url id=\"Taskpane.Url\" DefaultValue=\"https://localhost:3000/taskpane.html\"/>\n            </bt:Urls>\n            <bt:ShortStrings>\n              <bt:String id=\"GroupLabel\" DefaultValue=\"Test walkthrough\"/>\n              <bt:String id=\"TaskpaneButton.Label\" DefaultValue=\"Show Taskpane\"/>\n            </bt:ShortStrings>\n            <bt:LongStrings>\n              <bt:String id=\"TaskpaneButton.Tooltip\" DefaultValue=\"Opens a task pane.\"/>\n            </bt:LongStrings>\n        </Resources>\n    </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Processing Typed Messages from Dialog and Branching Workflow - JavaScript\nDESCRIPTION: Receives a JSON message from the dialog, inspects the messageType property to distinguish between sign-in success or failure, and accordingly closes the dialog, shows the user name, redirects, or displays an error notification. This pattern enables multiplexing message handling over a single event. Inputs include the event argument; outputs are dialog closure, UI updates, and potential navigation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction processMessage(arg) {\n    const messageFromDialog = JSON.parse(arg.message);\n    if (messageFromDialog.messageType === \"signinSuccess\") {\n        dialog.close();\n        showUserName(messageFromDialog.profile.name);\n        window.location.replace(\"/newPage.html\");\n    } else {\n        dialog.close();\n        showNotification(\"Unable to authenticate user: \" + messageFromDialog.error);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Event Handler Script with CopyWebpackPlugin - JavaScript (Webpack Config)\nDESCRIPTION: This JavaScript code configures CopyWebpackPlugin in webpack.config.js to copy the launchevent.js file from the source location to the output build directory. Add this configuration object to the plugins array in your Webpack setup. Prerequisite: CopyWebpackPlugin must be installed. The object ensures event handling scripts are available at the correct path in the built output for referencing in HTML or by the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew CopyWebpackPlugin({\\n  patterns: [\\n    {\\n      from: \\\"./src/launchevent/launchevent.js\\\",\\n      to: \\\"launchevent.js\\\",\\n    },\\n  ],\\n}),\\n\n```\n\n----------------------------------------\n\nTITLE: Reading Binding Data with Nested Callbacks - Office.js - JavaScript\nDESCRIPTION: This snippet demonstrates nested asynchronous calls in Office.js: first, getByIdAsync accesses a binding named 'MyBinding', then getDataAsync fetches its data. The final output is written to a 'message' div using a write function. This illustrates the common pattern for handling multiple dependent async operations in sequence. Prerequisites are Office.js, a binding with ID 'MyBinding', and a 'message' div.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction readData() {\n    Office.context.document.bindings.getByIdAsync(\"MyBinding\", function (result) {\n        result.value.getDataAsync({ coercionType: 'text' }, function (result2) {\n            write(result2.value);\n        });\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Insert Image Button UI for Office Add-in (HTML)\nDESCRIPTION: This HTML snippet defines a styled button for the 'Insert Image' action in the Office add-in's task pane UI. The button uses semantic and CSS class markup and is identified by 'insert-image' for JavaScript event binding. This must go into the relevant Home.html file; users interact with this element to trigger the image insertion process.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"Button Button--primary\\\" id=\\\"insert-image\\\">\\n    <span class=\\\"Button-icon\\\"><i class=\\\"ms-Icon ms-Icon--plus\\\"></i></span>\\n    <span class=\\\"Button-label\\\">Insert Image</span>\\n    <span class=\\\"Button-description\\\">Gets the photo of the day that shows on the Bing home page and adds it to the slide.</span>\\n</button>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Trusted Domains in Windows Registry for Office Add-ins (reg)\nDESCRIPTION: This snippet adds an entry to the AllowedAppDomains key in the Windows Registry, enabling Office Add-ins running on Windows to trust all subdomains of contoso.com. The registry key must be set under the HKEY_CURRENT_USER hive. Administrators must use regedit or an automated method to apply this, and the change affects all Office Add-ins on the system. Inputs include the registry path and the domain with wildcard; output is the trusted configuration applied at the system level.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/trusted-domains.md#_snippet_0\n\nLANGUAGE: reg\nCODE:\n```\n[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\WEF\\AllowedAppDomains]\n\"AppDomain1\"=\"https://*.contoso.com\" \n```\n\n----------------------------------------\n\nTITLE: Display Runtime Logging Status - Command Line\nDESCRIPTION: Displays the current runtime logging status using the office-addin-dev-settings npm CLI. No parameters required. Shows whether logging is currently enabled or disabled to aid troubleshooting.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/runtime-logging.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-dev-settings runtime-log\n```\n\n----------------------------------------\n\nTITLE: Enabling Pinnable Task Pane via XML Manifest\nDESCRIPTION: Configures a button control in an XML manifest to open a task pane that supports pinning. The `<Action>` element of type `ShowTaskpane` includes the `<SupportsPinning>true</SupportsPinning>` tag, requiring the VersionOverrides v1.1 schema. This allows the task pane launched by this button to be pinned by the user in supported Outlook clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/pinnable-taskpane.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Task pane button. -->\n<Control xsi:type=\"Button\" id=\"msgReadOpenPaneButton\">\n  <Label resid=\"paneReadButtonLabel\" />\n  <Supertip>\n    <Title resid=\"paneReadSuperTipTitle\" />\n    <Description resid=\"paneReadSuperTipDescription\" />\n  </Supertip>\n  <Icon>\n    <bt:Image size=\"16\" resid=\"green-icon-16\" />\n    <bt:Image size=\"32\" resid=\"green-icon-32\" />\n    <bt:Image size=\"80\" resid=\"green-icon-80\" />\n  </Icon>\n  <Action xsi:type=\"ShowTaskpane\">\n    <SourceLocation resid=\"readTaskPaneUrl\" />\n    <SupportsPinning>true</SupportsPinning>\n  </Action>\n</Control>\n```\n\n----------------------------------------\n\nTITLE: Getting the Sensitivity Label of the Current Item Using Office JavaScript API - JavaScript\nDESCRIPTION: This snippet retrieves the GUID of the sensitivity label applied to a message or appointment currently being composed by checking the catalog's enabled status and then calling Office.context.mailbox.item.sensitivityLabel.getAsync. It depends on having granted item read/write permissions in the manifest and catalog activation in the tenant. The callback receives the label GUID or indicates failure; it logs the result to the console.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/sensitivity-label.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// It's recommended to check the status of the catalog of sensitivity labels before\\n// calling other sensitivity label methods.\\nOffice.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {\\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {\\n        // Get the current sensitivity label of a message or appointment.\\n        Office.context.mailbox.item.sensitivityLabel.getAsync((asyncResult) => {\\n            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\\n                console.log(asyncResult.value);\\n            } else {\\n                console.log(\\\"Action failed with error: \\\" + asyncResult.error.message);\\n            }\\n        });\\n    } else {\\n        console.log(\\\"Action failed with error: \\\" + asyncResult.error.message);\\n    }\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Excel Custom Function for Calculations - Markdown\nDESCRIPTION: This Copilot prompt covers the development of a custom function in Excel using JavaScript to perform a general calculation. Intended for Office Add-in authors aiming to expand Excel with bespoke computational logic via Office.js. No external dependencies or special inputs; Copilot is expected to return both function definition and usage guidance.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nCreate a JavaScript custom function in Excel that conducts a \ncalculation.\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring WriteDocument Permission in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet shows how to request the 'WriteDocument' permission within the 'authorization.permissions.resourceSpecific' property of a Unified manifest for Microsoft 365. It uses the 'Document.Write.User' name with type 'Delegated', granting the add-in permission to write to the document but not read it. This structure is part of the newer manifest format.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requesting-permissions-for-api-use-in-content-and-task-pane-add-ins.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\n\"authorization\": {\n   \"permissions\": {\n     \"resourceSpecific\": [\n       ...\n       {\n         \"name\": \"Document.Write.User\",\n         \"type\": \"Delegated\"\n       },\n     ]\n   }  \n},\n```\n```\n\n----------------------------------------\n\nTITLE: Starting and Sideloading Add-in in Desktop PowerPoint (Command Line)\nDESCRIPTION: This command uses npm to start the local web server (if not already running) and automatically opens the desktop version of PowerPoint with the add-in sideloaded for testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/powerpoint-quickstart-yo.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Launching Add-in in Word Client - Command Line\nDESCRIPTION: This snippet details the command to launch the Word client with the add-in loaded, starting the local web server if necessary. The 'npm start' script must be present in the project's package.json and typically handles sideloading the add-in into Word. This command is cross-platform and enables local development and debugging. No parameters are required, and it automates both web server initialization and Word launch.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/word-quickstart-yo.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Declaring WriteDocument Permission in Add-in Only Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates how to request the 'WriteDocument' permission using the '<Permissions>' element in an Add-in only manifest (manifest.xml). This permission level allows the add-in's JavaScript code to write data to the document but restricts read access. This is the older manifest format.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requesting-permissions-for-api-use-in-content-and-task-pane-add-ins.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n```XML\n<Permissions>WriteDocument</Permissions>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Application ID URI\nDESCRIPTION: Defines the required format for the Application ID URI when exposing an API for an Office Add-in. It requires inserting the add-in's fully qualified domain name between 'api://' and the application (client) ID (`<app-id>`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_3\n\nLANGUAGE: uri\nCODE:\n```\napi://<fully-qualified-domain-name>/<app-id>\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler for Apply Custom Style Button in JavaScript\nDESCRIPTION: This JavaScript snippet assigns an onclick event handler to the HTML button with the ID 'apply-custom-style'. When clicked, it calls the 'applyCustomStyle' function, wrapped within a 'tryCatch' helper function (assumed to be defined elsewhere). Requires the HTML button defined previously and the 'tryCatch' and 'applyCustomStyle' functions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"apply-custom-style\").onclick = () => tryCatch(applyCustomStyle);\n```\n\n----------------------------------------\n\nTITLE: Getting the Next Worksheet Relative to Active with Excel JavaScript API\nDESCRIPTION: Finds and references the worksheet immediately following the currently active worksheet using the `getNext()` method called on the active worksheet object. It loads the next sheet's 'name' and logs it. This will throw an `ItemNotFound` error if the active worksheet is the last one in the workbook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let currentSheet = context.workbook.worksheets.getActiveWorksheet();\n    let nextSheet = currentSheet.getNext();\n    nextSheet.load(\"name\");\n\n    await context.sync();\n    console.log(`The name of the sheet that follows the active worksheet is \"${nextSheet.name}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Moving a Range with Excel JavaScript API (JavaScript)\nDESCRIPTION: This sample shows how to move a range of cells from A1:E1 to G1 (spanning G1:K1) using the Excel JavaScript API's Range.moveTo method, and sets a label in F1 for reference. Dependencies: Office.js, active worksheet in current workbook. Inputs: source range (A1:E1), destination (G1). Output: Formatting and values from source are relocated, and F1 receives the text 'Moved Range'. Limitation: Overwriting may occur if destination overlaps existing data; must be used inside Excel/Office add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-cut-copy-paste.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\\n    sheet.getRange(\\\"F1\\\").values = [[\\\"Moved Range\\\"]];\\n\\n    // Move the cells \\\"A1:E1\\\" to \\\"G1\\\" (which fills the range \\\"G1:K1\\\").\\n    sheet.getRange(\\\"A1:E1\\\").moveTo(\\\"G1\\\");\\n    await context.sync();\\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Inconsistent RangeAreas Properties - Excel JavaScript API (JavaScript)\nDESCRIPTION: This snippet illustrates reading properties from a RangeAreas object with inconsistent member properties. It sets the fill color to pink only for one of the two ranges and demonstrates how non-uniform properties are handled: non-boolean properties return null if inconsistent, booleans return false if not true for all, and the address aggregates all range addresses. It requires Office.js, Excel API, and ranges where member properties can differ. The outputs demonstrate null, false, and combined address behavior.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-multiple-ranges.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\\n    let rangeAreas = sheet.getRanges(\\\"F3:F5, H:H\\\");\\n\\n    let pinkColumnRange = sheet.getRange(\\\"H:H\\\");\\n    pinkColumnRange.format.fill.color = \\\"pink\\\";\\n\\n    rangeAreas.load(\\\"format/fill/color, isEntireColumn, address\\\");\\n    await context.sync();\\n\\n    console.log(rangeAreas.format.fill.color); // null\\n    console.log(rangeAreas.isEntireColumn); // false\\n    console.log(rangeAreas.address); // \\\"Sheet1!F3:F5, Sheet1!H:H\\\"\\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Service Request Object in JavaScript\nDESCRIPTION: This JavaScript snippet initializes an object `serviceRequest` intended to hold data for a call to a remote service. It captures the Exchange Web Services (EWS) URL from the Office context (`Office.context.mailbox.ewsUrl`) and prepares an empty array to hold attachment details. This object forms the base structure for the data packet sent to the backend.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Initialize a context object for the add-in.\n// Set the fields that are used on the request\n// object to default values.\n const serviceRequest = {\n    attachmentToken: '',\n    ewsUrl: Office.context.mailbox.ewsUrl,\n    attachments: []\n };\n```\n\n----------------------------------------\n\nTITLE: Updating Ribbon Control Availability - JavaScript\nDESCRIPTION: Illustrates how to programmatically enable a specific ribbon button at runtime using JavaScript. It constructs a `RibbonUpdaterData` object specifying the target tab (`OfficeAppTab1`), group (`CustomGroup111`), and control (`MyButton`) along with the desired enabled status (`true`), and then calls `Office.ribbon.requestUpdate()` to apply the change. This requires the add-in to use a shared runtime and RibbonApi 1.1.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/disable-add-in-commands.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction enableButton() {\n    const ribbonUpdaterData = {\n        tabs: [\n            {\n                id: \"OfficeAppTab1\",\n                groups: [\n                    {\n                      id: \"CustomGroup111\",\n                      controls: [\n                        {\n                            id: \"MyButton\",\n                            enabled: true\n                        }\n                      ]\n                    }\n                ]\n            }\n        ]\n    };\n\n    Office.ribbon.requestUpdate(ribbonUpdaterData);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Outlook Item Object via Office.js API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Office.js API within an Outlook add-in to access the current Item object. It relies on the Office.js library being loaded in an Outlook add-in runtime, specifically requiring the Office context and mailbox to be available. The key line retrieves the item from the Office context, allowing the add-in to interact with the message or appointment currently in view. This approach assumes the Reading Pane is enabled in Outlook so that the Item object is accessible; otherwise, the property may be null.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/mailbox-object-desc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Access the Item object.\\nconst item = Office.context.mailbox.item;\n```\n\n----------------------------------------\n\nTITLE: Configuring Office Deployment Tool Installation (XML)\nDESCRIPTION: This XML configuration file (`config.xml`) instructs the Office Deployment Tool on which version, edition, channel, product, and language of Office to install. The 'Version' attribute must be changed to specific build numbers (`16.0.11929.20946` for EdgeHTML or `16.0.10730.20348` for Trident) to install an Office version using the desired legacy webview. 'OfficeClientEdition' can be '64' or '32', and 'Language ID' can be adjusted.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/install-office-that-uses-legacy-edge-or-ie.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Configuration>\n  <Add OfficeClientEdition=\"64\" Channel=\"SemiAnnual\" Version=\"16.0.xxxxx.xxxxx\">\n    <Product ID=\"O365ProPlusRetail\">\n      <Language ID=\"en-us\" />\n    </Product>\n  </Add>\n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Task Pane Auto-Open in Unified Manifest (JSON)\nDESCRIPTION: Specifies which task pane page should open automatically upon add-in installation within the unified manifest (`manifest.json`). This is achieved by adding a `\"view\": \"Office.AutoShowTaskpaneWithDocument\"` property to the desired `openPage` action within the `runtimes` array. This setting is only applicable if the add-in has multiple task pane commands and should only be applied to one `openPage` action.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/automatically-open-on-installation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"runtimes\": [\n    {\n        ...\n        \"code\": {\n            \"page\": \"https://contoso.com/taskpane.html\"\n        },\n        \"actions\": [\n            {\n                \"id\": \"ShowTaskPane\",\n                \"type\": \"openPage\",\n                \"view\": \"Office.AutoShowTaskpaneWithDocument\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Renaming PivotTable Data Hierarchies in Excel using JavaScript\nDESCRIPTION: This code demonstrates how to change the display names of data hierarchies within an Excel PivotTable using the Office JS API. It accesses the \"Farm Sales\" PivotTable, loads its data hierarchies, and updates the `name` property of the first two hierarchy items to \"Farm Sales\" and \"Wholesale\" respectively. Requires an active Excel PivotTable named \"Farm Sales\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let dataHierarchies = context.workbook.worksheets.getActiveWorksheet()\n        .pivotTables.getItem(\"Farm Sales\").dataHierarchies;\n    dataHierarchies.load(\"no-properties-needed\");\n    await context.sync();\n\n    // Changing the displayed names of these entries.\n    dataHierarchies.items[0].name = \"Farm Sales\";\n    dataHierarchies.items[1].name = \"Wholesale\";\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Insert Text into PowerPoint Slide using Office JS\nDESCRIPTION: This JavaScript function `insertText`, intended to replace `TODO5` in `taskpane.js`, uses the Office JS API (`Office.context.document.setSelectedDataAsync`) to insert the string \"Hello World!\" into the currently selected location in the PowerPoint document. It includes an asynchronous callback to handle the result, displaying an error message via a `setMessage` function if the insertion fails. Requires the Office JS library and assumes `setMessage` function is defined.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nfunction insertText() {\n  Office.context.document.setSelectedDataAsync(\"Hello World!\", (asyncResult) => {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      setMessage(\"Error: \" + asyncResult.error.message);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Office-js Preview Type Definitions with npm (bash)\nDESCRIPTION: This command installs the preview TypeScript type definitions for Office.js using npm. It sets up typings for enhanced IntelliSense and compilation support in Office.js add-in projects. Requires Node.js and npm pre-installed. The --save-dev flag ensures the types are listed as development dependencies in package.json. Expected input: none. Expected output: the @types/office-js-preview package appears under devDependencies. Only works in project directories initialized with npm.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/using-preview-apis.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/office-js-preview\n```\n\n----------------------------------------\n\nTITLE: Setting Mailbox Permissions in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet defines the necessary delegated permission within the 'authorization.permissions.resourceSpecific' array in the manifest.json file. It grants the add-in the ability to read and write to the user's mailbox items, which is required for manipulating meeting details.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/online-meeting.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"MailboxItem.ReadWrite.User\",\n    \"type\": \"Delegated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tab Position in Add-in Only Manifest - XML\nDESCRIPTION: Demonstrates how to set a custom tab's position using XML in an add-in only manifest. The <InsertAfter> or <InsertBefore> child elements determine placement relative to built-in tabs (IDs such as TabReview). Only one of these elements is allowed per custom tab element. This example uses <InsertAfter> to place the tab immediately after the Review tab. Input: Add-in manifest as XML; Output: Placement of custom tab in ribbon interface. All referenced tab IDs must correspond to Office-documented ribbon identifiers.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/custom-tab-placement.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ExtensionPoint xsi:type=\"ContosoRibbonTab\">\n  <CustomTab id=\"Contoso.TabCustom2\">\n    <Group id=\"Contoso.TabCustom2.group2\">\n       <!-- additional markup omitted -->\n    </Group>\n    <Label resid=\"customTabLabel1\" />\n    <InsertAfter>TabReview</InsertAfter>\n  </CustomTab>\n</ExtensionPoint>\n```\n\n----------------------------------------\n\nTITLE: Defining API Scope Name for SSO\nDESCRIPTION: Specifies the required scope name (`access_as_user`) when adding a scope in the 'Expose an API' section of the Azure app registration. This specific scope name is essential for enabling Single Sign-On (SSO) functionality within the Office Add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\naccess_as_user\n```\n\n----------------------------------------\n\nTITLE: Refreshing AutoFilter Using reapply - Excel JavaScript API (JavaScript)\nDESCRIPTION: Refreshes the existing AutoFilter on the active worksheet after underlying data changes by invoking the reapply method. Prerequisite: Office.js Excel API context. No parameters required. Synchronizes state with Excel to ensure the visible rows reflect the latest data and filter logic. Run in Office Add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This method refreshes the AutoFilter to ensure that changes are captured.\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.autoFilter.reapply();\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Locations using enhancedLocation.removeAsync in Office JS\nDESCRIPTION: This JavaScript example shows how to remove locations from an Outlook appointment in compose mode. It first calls `item.enhancedLocation.getAsync` to retrieve the current locations. Then, within the callback function, it iterates through the results and calls `item.enhancedLocation.removeAsync` for each location using its `locationIdentifier`. Requires the Office JavaScript API and jQuery.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-location-of-an-appointment.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js\nlet item;\n\nOffice.initialize = function () {\n    item = Office.context.mailbox.item;\n    // Checks for the DOM to load using the jQuery ready method.\n    $(document).ready(function () {\n        // After the DOM is loaded, app-specific code can run.\n        // Get the location of the item being composed.\n        item.enhancedLocation.getAsync(callbackFunction);\n    });\n}\n\nfunction callbackFunction(asyncResult) {\n    asyncResult.value.forEach(function (currentValue) {\n        // Remove each location from the item being composed.\n        item.enhancedLocation.removeAsync([currentValue.locationIdentifier]);\n    });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Guiding Copilot for Office Add-in Project Structure - Markdown\nDESCRIPTION: This snippet is a copilot prompt requesting the typical structure of an Office Add-in project and explanations for each file, alongside setup instructions for Visual Studio Code. It helps developers quickly understand project directory layouts and initial steps when starting out. No external dependencies required; the snippet expects Copilot to produce both informative output and actionable commands for new users.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nShow me the typical structure of an Office Add-in project and \nexplain the functionality of each file. Explain the steps and \ncommands to get started in *Visual Studio Code*.\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing ASP.NET Web API Application Startup (C#)\nDESCRIPTION: This C# code defines the application entry point for an ASP.NET Web API project, ensuring API configuration registers at application startup. Place this in Global.asax.cs as part of the project root. It depends on the WebApiConfig.Register method configured earlier. Inputs and outputs are limited to ASP.NET application lifecycle handling.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing HelloWorldWeb.App_Start;\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Web;\\nusing System.Web.Http;\\nusing System.Web.Security;\\nusing System.Web.SessionState;\\n\\nnamespace HelloWorldWeb\\n{\\n    public class WebApiApplication : System.Web.HttpApplication\\n    {\\n        protected void Application_Start()\\n        {\\n            GlobalConfiguration.Configure(WebApiConfig.Register);\\n        }\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Property Metadata (Sublabel) to an Entity Property in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to add metadata to a specific property within an `Excel.EntityCellValue`. It focuses on the 'Unit Price' property, adding a `propertyMetadata` object with a `sublabel` key to specify 'USD', providing additional context to the formatted number value. This demonstrates enhancing card properties with extra information.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-data-types-entity-card.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n```TypeScript\n// This code snippet is an excerpt from the `properties` field of the \n// preceding `EntityCellValue` snippet. \"Unit Price\" is a property of \n// an entity value.\n        \"Unit Price\": {\n            type: Excel.CellValueType.formattedNumber,\n            basicValue: product.unitPrice,\n            numberFormat: \"$* #,##0.00\",\n            propertyMetadata: {\n              sublabel: \"USD\"\n            }\n        },\n```\n```\n\n----------------------------------------\n\nTITLE: Selecting the Edge of Used Range in Excel using JavaScript API\nDESCRIPTION: This snippet demonstrates using the `getRangeEdge` method to select the cell at the furthest edge of the current used range, relative to the active cell, in a specified direction (up). This mimics the behavior of the Ctrl+Up arrow key keyboard shortcut. It requires the currently selected range and the active cell as context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Get the selected range.\n    let range = context.workbook.getSelectedRange();\n\n    // Specify the direction with the `KeyboardDirection` enum.\n    let direction = Excel.KeyboardDirection.up;\n\n    // Get the active cell in the workbook.\n    let activeCell = context.workbook.getActiveCell();\n\n    // Get the top-most cell of the current used range.\n    // This method acts like the Ctrl+Up arrow key keyboard shortcut while a range is selected.\n    let rangeEdge = range.getRangeEdge(\n      direction,\n      activeCell\n    );\n    rangeEdge.select();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Inline Optional Parameters to setSelectedDataAsync in JavaScript\nDESCRIPTION: Illustrates calling the `Office.context.document.setSelectedDataAsync` method while passing optional parameters (`coercionType` and `asyncContext`) directly as an anonymous JavaScript object inline. The callback function receives the `AsyncResult` object, and a helper `write` function displays the status and context value. Requires a `write` function and a corresponding HTML element (e.g., `<div id='message'>`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nOffice.context.document.setSelectedDataAsync(\n    \"<html><body>hello world</body></html>\",\n    {coercionType: \"html\", asyncContext: 42},\n    function(asyncResult) {\n        write(asyncResult.status + \" \" + asyncResult.asyncContext);\n    }\n)\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Plain Text Body of Current Outlook Item in Inspector - Outlook Object Model (VBA)\nDESCRIPTION: This VBA sample, to be executed in the Immediate Window in Outlook's Visual Basic Editor, outputs the plain text content from the currently opened (inspected) message or appointment. It uses ActiveInspector and accesses the Body property of the CurrentItem. This is useful for verifying what plain text body will be available to an activation rule targeting bodies.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/troubleshoot-outlook-add-in-activation.md#_snippet_5\n\nLANGUAGE: VBA\nCODE:\n```\n?ActiveInspector.CurrentItem.Body\n```\n\n----------------------------------------\n\nTITLE: Queue Worksheet Command to Read Protection Status and Toggle (JavaScript)\nDESCRIPTION: Illustrates loading the active worksheet and toggling protection based on the loaded protection.protected property. Assumes sheet has already been acquired via context.workbook.worksheets.getActiveWorksheet(). Requires Office.js and relevant Excel API objects. Correct use requires loading and syncing the \\\"protection/protected\\\" property before reading it.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_41\n\nLANGUAGE: js\nCODE:\n```\nconst sheet = context.workbook.worksheets.getActiveWorksheet();\\n\\n// TODO2: Queue command to load the sheet's \\\"protection.protected\\\" property from\\n//        the document and re-synchronize the document and task pane.\\n\\nif (sheet.protection.protected) {\\n    sheet.protection.unprotect();\\n} else {\\n    sheet.protection.protect();\\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Document Read Permission in Traditional Manifest (XML)\nDESCRIPTION: Shows how to request the 'ReadDocument' permission using the `<Permissions>` element within a traditional Office Add-in XML manifest file (schema version 1.0). This permission grants the add-in read-only access to the document content. This is the older method for specifying permissions compared to the unified JSON manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/support-for-task-pane-and-content-add-ins.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<OfficeApp xmlns=\"http://schemas.microsoft.com/office/appforoffice/1.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \nxsi:type=\"TaskPaneApp\">\n    <!-- Other manifest elements omitted. -->\n    <Permissions>ReadDocument</Permissions>\n    ...\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Hiding an AppSource Add-in via Unified Manifest Configuration (JSON)\nDESCRIPTION: This JSON snippet demonstrates configuring the `alternates` array within an `extensions` object in the unified manifest. It uses the `hide` property with a `storeOfficeAddin` object, containing the `officeAddinId` (GUID) and `assetId` (AppSource ID) of the older, AppSource-distributed add-in, to prevent its UI from appearing alongside the new unified manifest version in Outlook. This linking requires the asset ID to match an existing offer published by the same seller account.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/duplicate-legacy-metaos-add-ins.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"alternates\": [\n            ...\n            {\n                ...\n                \"hide\": {\n                    \"storeOfficeAddin\": {\n                        \"officeAddinId\": \"b5a2794d-4aa5-4023-a84b-c60a3cbd33d4\",\n                        \"assetId\": \"WA999999999\"\n                    }\n                }\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Line Breaks in Smart Alerts Dialog - Office.js JavaScript\nDESCRIPTION: Illustrates how to insert explicit line breaks in the Smart Alerts dialog using the event.completed method and '\\n\\n' within the errorMessageMarkdown property. This approach depends on Office.js with event-based activation and Markdown rendering. The errorMessageMarkdown value, when constructed with appropriate newlines, results in formatted multi-paragraph content in the Smart Alerts dialog.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/onmessagesend-onappointmentsend-events.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nevent.completed({\n  allowEvent: false,\n  ...\n  errorMessageMarkdown: \"Add a personalized user avatar to your signature today!\\n\\nTo customize your signature, visit [Customize my email signature](https://www.fabrikam.com/marketing/customize-email-signature).\"\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Regular Expression Matches in Outlook Add-in with JavaScript\nDESCRIPTION: Illustrates using the Office.js API within an Outlook add-in to retrieve matches for a regular expression rule named 'videoURL'. The Office.context.mailbox.item.getRegExMatches method returns an object keyed by the regex names defined in the manifest. Input: method is called from the context of an active item, and outputs an array of matches for 'videoURL'. Requires Office.js library and an appropriate manifest configuration. No order is guaranteed in results, and matches should be handled as asynchronous and possibly out-of-order across clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/contextual-outlook-add-ins.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst videos = Office.context.mailbox.item.getRegExMatches().videoURL;\n```\n\n----------------------------------------\n\nTITLE: Locating Word Add-in Sideloading Folder on Mac\nDESCRIPTION: Specifies the user library path where Word Add-in manifest files should be placed for sideloading on macOS. The '<username>' placeholder must be replaced with the actual user's home folder name. This 'wef' folder might need to be created manually if it doesn't exist.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/sideload-an-office-add-in-on-mac.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/Users/<username>/Library/Containers/com.microsoft.Word/Data/Documents/wef\n```\n\n----------------------------------------\n\nTITLE: Declaring Standard Permissions in Add-in Only Manifest (XML)\nDESCRIPTION: Specifies the standard permission level (e.g., Restricted, ReadItem, ReadWriteItem, ReadWriteMailbox) required by the Outlook add-in within the add-in only XML manifest file. This element contains the specific permission requested (e.g., <Permissions>ReadItem</Permissions>).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/outlook-permission-levels-table.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Permissions>\n```\n\n----------------------------------------\n\nTITLE: Closing the File Connection using closeAsync (JavaScript)\nDESCRIPTION: Defines the `closeFile` function which is called after all slices have been sent. It uses the `File.closeAsync` method from the Office JavaScript API to close the connection to the document file and release associated resources. It updates the status message based on the success or failure of the asynchronous close operation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-the-whole-document-from-an-add-in-for-powerpoint-or-word.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nfunction closeFile(state) {\n    // Close the file when you're done with it.\n    state.file.closeAsync(function (result) {\n\n        // If the result returns as a success, the\n        // file has been successfully closed.\n        if (result.status === Office.AsyncResultStatus.Succeeded) {\n            updateStatus(\"File closed.\");\n        } else {\n            updateStatus(\"File couldn't be closed.\");\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Volatile Custom Function in JavaScript\nDESCRIPTION: This JavaScript snippet defines an Excel custom function named `roll6sided`. It uses the `@customfunction` JSDoc tag to register it and the `@volatile` tag to indicate that its value should recalculate every time Excel recalculates, even if inputs don't change. The function simulates rolling a six-sided die by returning a random integer between 1 and 6 using `Math.random()`. This is useful for scenarios like modeling or simulations requiring random inputs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-volatile.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Simulates rolling a 6-sided dice.\n * @customfunction\n * @volatile\n */\nfunction roll6sided() {\n  return Math.floor(Math.random() * 6) + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Content Controls Before Inserting HTML in Word Add-ins (TypeScript)\nDESCRIPTION: This TypeScript snippet shows a workaround using the Word JavaScript API to prevent layout issues when inserting HTML into a footer content control while the cursor is in a header content control. It explicitly clears the target content control (`contentControls.items[2].clear()`) before calling `insertHtml` to avoid mixing header and footer content. This requires the Word JavaScript API and assumes specific content controls exist at indices 0, 1 (header), and 2 (footer).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/word-add-ins-troubleshooting.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```TypeScript\nawait Word.run(async (context) => {\n    // Credit to https://github.com/barisbikmaz for this version of the workaround.\n    // For more information, see https://github.com/OfficeDev/office-js/issues/129.\n\n    // Let's say there are 2 content controls in the header and 1 in the footer.\n    const contentControls = context.document.contentControls;\n    contentControls.load();\n\n    await context.sync().then(function () {\n        // Clear the 2 content controls in the header.\n        contentControls.items[0].clear(); \n        contentControls.items[1].clear();\n\n        // Clear the control control in the footer then update it.\n        contentControls.items[2].clear();\n        contentControls.items[2].insertHtml('<p>New Footer</p>', 'Replace');\n    });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Linking Function File and Extension Point in XML Manifest\nDESCRIPTION: This XML snippet shows how to specify the HTML file containing JavaScript/TypeScript for command actions using `<FunctionFile>` (referenced by `resid` which points to a URL in the `<Resources>` section) and define where commands appear using `<ExtensionPoint>` within the `<DesktopFormFactor>`. The HTML file typically includes references to the necessary JavaScript/TypeScript files.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<DesktopFormFactor>\n    <FunctionFile resid=\"Commands.Url\" />\n    <ExtensionPoint xsi:type=\"PrimaryCommandSurface\">\n      <!-- Information about this extension point. -->\n    </ExtensionPoint>\n\n    <!-- You can define more than one ExtensionPoint element as needed. -->\n</DesktopFormFactor>\n```\n\n----------------------------------------\n\nTITLE: Mapping Element with Attribute and Text to Unified Manifest - JSON\nDESCRIPTION: Shows how an equivalent structure from an XML manifest is transformed into JSON for the Microsoft 365 unified manifest. The example demonstrates turning both XML attributes and inner text into child properties of a named JSON object. Prerequisites: Understanding of JSON objects. Key parameters: 'color' for the attribute value and 'text' for the element's content. Output is a JSON property with named children. This is a core pattern used when migrating XML-based manifests to the unified JSON format.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/json-manifest-overview.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"myThing\" : {\n    \"color\": \"blue\",\n    \"text\": \"Some text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Accessing Word Add-in Runtime Log on Mac - Command Line\nDESCRIPTION: Enables runtime logging for Word on Mac by setting the CEFRuntimeLoggingFile via defaults and immediately opens the resulting log file in Finder. The first command creates or points to the log file; the second opens it using the open command. Replace the path as needed for other Office hosts.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/runtime-logging.md#_snippet_6\n\nLANGUAGE: command line\nCODE:\n```\ndefaults write com.microsoft.Word CEFRuntimeLoggingFile -string \"runtime_logs.txt\"\nopen ~/library/Containers/com.microsoft.Word/Data/runtime_logs.txt\n```\n\n----------------------------------------\n\nTITLE: Deleting an Excel Comment Reply using JavaScript\nDESCRIPTION: This snippet shows how to delete a specific reply from a comment thread without affecting the main comment or other replies. It retrieves the first comment thread, then the first reply using `getItemAt(0)`, and calls the `delete()` method on the reply object.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Delete the first comment reply from this worksheet's first comment.\n    let comment = context.workbook.comments.getItemAt(0);\n    comment.replies.getItemAt(0).delete();\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Pushing Operations to the Batch Queue for Remote Calls in JavaScript\nDESCRIPTION: Implements the _pushOperation function, which adds a custom function invocation and its arguments to the batching queue. It creates an invocation entry with references to operation details and to promise resolution functions, enabling asynchronous result handling. Also ensures that only one remote request is scheduled per batching cycle, based on a timeout (default 100 ms), and returns a promise that resolves or rejects based on remote computation. Requires global _batch and _isBatchedRequestScheduled, and is generally paired with batching dispatcher logic such as _makeRemoteRequest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-batching.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This function encloses your custom functions as individual entries,\n// which have some additional properties so you can keep track of whether or not\n// a request has been resolved or rejected.\nfunction _pushOperation(op, args) {\n  // Create an entry for your custom function.\n  console.log(\"pushOperation\");\n  const invocationEntry = {\n    operation: op, // e.g., sum\n    args: args,\n    resolve: undefined,\n    reject: undefined,\n  };\n\n  // Create a unique promise for this invocation,\n  // and save its resolve and reject functions into the invocation entry.\n  const promise = new Promise((resolve, reject) => {\n    invocationEntry.resolve = resolve;\n    invocationEntry.reject = reject;\n  });\n\n  // Push the invocation entry into the next batch.\n  _batch.push(invocationEntry);\n\n  // If a remote request hasn't been scheduled yet,\n  // schedule it after a certain timeout, e.g., 100 ms.\n  if (!_isBatchedRequestScheduled) {\n    console.log(\"schedule remote request\");\n    _isBatchedRequestScheduled = true;\n    setTimeout(_makeRemoteRequest, 100);\n  }\n\n  // Return the promise for this invocation.\n  return promise;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Message Read Context in Unified Manifest (JSON)\nDESCRIPTION: Configures an Outlook mobile add-in primarily for Message Read mode using the unified manifest for Microsoft 365. The `extensions.ribbons.contexts` array should typically only contain \"mailRead\" for standard mobile add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extensions.ribbons.contexts\": [\"mailRead\"]\n```\n\n----------------------------------------\n\nTITLE: Adding CORS Policy Configuration in ASP.NET Core\nDESCRIPTION: This C# snippet demonstrates how to add a CORS policy within the `ConfigureServices` method in `Startup.cs`. It defines a policy named `MyAllowSpecificOrigins` that allows requests from a specific origin (the Office Add-in's SSL URL), permits any HTTP method, and allows any header. The `<your URL SSL>` placeholder needs to be replaced with the actual SSL URL of the Office Add-in, excluding the trailing slash.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddCors(options =>\n{\n  options.AddPolicy(MyAllowSpecificOrigins,\n  builder =>\n  {\n    builder.WithOrigins(\"<your URL SSL>\")\n    .AllowAnyMethod()\n    .AllowAnyHeader();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Requirements - JSON\nDESCRIPTION: Shows how to configure a runtime object within the unified manifest so it is only available on host versions with required APIs (such as Mailbox 1.13 or newer). This helps prevent add-ins from invoking code that is unsupported on older versions. Inputs are specified API capability and minimum version; output is an enabled/disabled runtime object based on capability detection.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requirements-property-unified-manifest.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\\n    ...\\n    {\\n        ...\\n        \"runtimes\": [\\n            ...\\n            {\\n                // Insert details of the runtime configuration here.\\n\\n                \"requirements\": {\\n                    \"capabilities\": [\\n                        {\\n                            \"name\": \"Mailbox\",\\n                            \"minVersion\": \"1.13\"\\n                        }\\n                    ]\\n                }\\n            }\\n        ]\\n    }\\n]\n```\n\n----------------------------------------\n\nTITLE: Changing Note Visibility - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet changes the visibility of a note associated with cell A1 in the active worksheet using the Note.visible property. It first retrieves the note, loads its properties, synchronizes the context, and then sets the note's visible property to true. Requirements include the use of Excel.run, a loaded Office.js API context, and that a note exists on cell A1.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-notes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    // This function sets the note on cell A1 to visible.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const firstNote = sheet.notes.getItem(\"A1\");\n\n    firstNote.load();\n    await context.sync();\n\n    firstNote.visible = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Async Function Stub for Inserting Text Before Range in JavaScript\nDESCRIPTION: Defines an asynchronous function `insertTextBeforeRange` that uses `Word.run` to create a Word-specific execution context. This structure allows batching of Office JS API commands for performance. It includes placeholder comments (TODO1, TODO2) indicating where the core logic for inserting text and loading range data will be implemented. This function should be added to the `taskpane.js` file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertTextBeforeRange() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to insert a new range before the\n        //        selected range.\n\n        // TODO2: Load the text of the original range and sync so that the\n        //        range text can be read and inserted.\n\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial insertTextIntoRange Function in JavaScript\nDESCRIPTION: This snippet defines an asynchronous function 'insertTextIntoRange' using 'Word.run'. It includes placeholders ('TODO1', 'TODO2', 'TODO3') for queuing commands related to inserting text, loading range properties, and potentially adding more content. It requires the Office JS library.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertTextIntoRange() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to insert text into a selected range.\n\n        // TODO2: Load the text of the range and sync so that the\n        //        current range text can be read.\n\n        // TODO3: Queue commands to repeat the text of the original\n        //        range at the end of the document.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Office Add-in and Sideloading - Command Line - Shell\nDESCRIPTION: This command uses npm to start the local web server and open the selected Office application with the add-in loaded, facilitating testing and sideloading. It is a required step for both development and debugging; dependency on Node.js/npm and correct configuration in package.json is assumed. The command does not require parameters and its side effect is launching the Office client with the add-in attached.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/fluent-react-quickstart.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Async Function Stub for Header Freeze - JavaScript\nDESCRIPTION: This snippet defines an asynchronous function `freezeHeader` in `taskpane.js` using the Excel JavaScript API. It sets up the basic structure with `Excel.run` to execute Excel-specific commands and includes a placeholder `TODO1` for the actual freezing logic.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nasync function freezeHeader() {\n    await Excel.run(async (context) => {\n\n        // TODO1: Queue commands to keep the header visible when the user scrolls.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Outlook Add-in Local Web Server - Command Line\nDESCRIPTION: This command stops the local development web server previously started with 'npm start'. It is essential for cleanly ending the debugging session and avoiding port or resource lock issues on subsequent runs. There are no parameters or special dependencies; running 'npm stop' in the project root directory will terminate active instances of the server.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/outlook-quickstart-json-manifest-typescript.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Initializing Content Replacement in Content Control using Office.js (JavaScript)\nDESCRIPTION: Defines an asynchronous function 'replaceContentInControl' that schedules Word JavaScript API operations to replace the text of a specific content control. A comment placeholder identifies where the replace logic will be inserted. The function synchronizes the changes with context.sync() and presumes it is triggered by the task pane UI. Requires Office.js and prior existence of the target content control.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nasync function replaceContentInControl() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to replace the text in the Service Name\n        //        content control.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Content Control Creation in Word using Office.js (JavaScript)\nDESCRIPTION: Defines an asynchronous function 'createContentControl' that executes Word JavaScript API commands in a context. The placeholder comment (TODO1) marks where the logic to create and configure the content control is inserted. This function is meant to be triggered from the task pane by the relevant UI button, and it synchronizes queued operations with context.sync(). Requires Office.js and Word add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createContentControl() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to create a content control.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Specific Office Platform Client IDs for Pre-authorization\nDESCRIPTION: Lists the individual Client IDs for specific Microsoft Office platforms: `d3590ed6-52b3-4102-aeff-aad2292ab01c` (Microsoft Office desktop), `93d53678-613d-4013-afc1-62e9e444a0a5` (Office on the web), and `bc59ab01-8403-45c6-8796-ac3ef710b3e3` (Outlook on the web). These can be used individually if you need to selectively pre-authorize platforms instead of using the combined ID.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nd3590ed6-52b3-4102-aeff-aad2292ab01c\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n93d53678-613d-4013-afc1-62e9e444a0a5\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nbc59ab01-8403-45c6-8796-ac3ef710b3e3\n```\n\n----------------------------------------\n\nTITLE: Displaying Plain Text Body of Selected Outlook Item in Explorer - Outlook Object Model (VBA)\nDESCRIPTION: This VBA snippet, intended for use in the Immediate Window in the Visual Basic Editor for Outlook, displays the plain text body of the first selected message or appointment in the Outlook explorer window. It uses the ActiveExplorer object and accesses the Body property. Macros must be enabled, and the Developer tab should be active. The returned value is the plain text content of the selected Outlook item.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/troubleshoot-outlook-add-in-activation.md#_snippet_3\n\nLANGUAGE: VBA\nCODE:\n```\n?ActiveExplorer.Selection.Item(1).Body\n```\n\n----------------------------------------\n\nTITLE: Updating Add-in Description in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet shows how to update the `short` and `full` description properties within the `manifest.json` file for an Outlook add-in using the unified manifest format. It provides more specific details about the add-in's purpose (\"Gets gists\", \"Allows users to access their GitHub gists\").\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json\n\"description\": {\n    \"short\": \"Gets gists.\",\n    \"full\": \"Allows users to access their GitHub gists.\"\n},\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Menu Requirements - JSON\nDESCRIPTION: Demonstrates how to configure context menus in the unified manifest so that they only appear if the host supports specific requirement sets (here, AddinCommands version 1.1 or higher) and scopes (such as 'workbook'). Requires knowledge of the Office manifest unified schema and where to insert manifest fragments. Inputs include the targeted API and minimum version, outputs are restricted context menu activation based on compatibility.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/requirements-property-unified-manifest.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\\n    ...\\n    {\\n        ...\\n        \"contextMenus\": [\\n            ...\\n            {\\n                // Insert details of the context menu configuration here.\\n\\n                \"requirements\": {\\n                    \"scopes\": [\\n                        \"workbook\"\\n                    ],\\n                    \"capabilities\": [\\n                        {\\n                            \"name\": \"AddinCommands\",\\n                            \"minVersion\": \"1.1\"\\n                        }\\n                    ]\\n                }\\n            }\\n        ]\\n    }\\n]\n```\n\n----------------------------------------\n\nTITLE: Set Button ID in Control Element in Office Manifest (XML)\nDESCRIPTION: Provides the updated Control opening tag with the ID replaced to uniquely identify the button as \\\"ToggleProtection\\\". This is referenced by the Office Add-in framework when binding actions to UI controls. Prerequisite: must be placed within a \\u003cGroup\\u003e element in the manifest.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<Control xsi:type=\\\"Button\\\" id=\\\"ToggleProtection\\\"\\u003e\n```\n\n----------------------------------------\n\nTITLE: Adding a Note to a Cell - Excel JavaScript API - JavaScript\nDESCRIPTION: This code demonstrates how to add a note to the currently selected cell in an Excel worksheet using the Excel JavaScript API. It calls the NoteCollection.add method with the selected range and a text string as content, requiring the workbook's context and Office.js Excel API loaded in an environment where Excel.run is supported. The code assumes only a single cell is selected; otherwise, an InvalidArgument error is thrown. No output is returned, but the note is visibly added to the worksheet.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-notes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    // This function adds a note to the selected cell.\n    const selectedRange = context.workbook.getSelectedRange();\n\n    // Note that an InvalidArgument error is thrown if multiple cells are selected.\n    context.workbook.notes.add(selectedRange, \"The first note.\");\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Top/Bottom Conditional Formatting in Excel (JavaScript)\nDESCRIPTION: This snippet demonstrates applying Top/Bottom conditional formatting with the Office JavaScript API to a range ('B21:E23' on 'Sample' sheet). It highlights the cell with the single highest value (rank 1, type 'TopItems') in the specified range by setting its background fill color to green.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats.add(\n         Excel.ConditionalFormatType.topBottom\n    );\n    \n    // For the highest valued cell in the range, make the background green.\n    conditionalFormat.topBottom.format.fill.color = \"green\"\n    conditionalFormat.topBottom.rule = { rank: 1, type: \"TopItems\"}\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Token Acquisition Failure in JavaScript\nDESCRIPTION: Verifies if the `accessToken` remains null after both silent and interactive acquisition attempts. If no token could be acquired, it logs an error message to the console and returns, preventing further execution like the API call. This code replaces `TODO 3` in the initial `run` function structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/enable-nested-app-authentication-in-your-add-in.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Log error if both silent and popup requests failed.\nif (accessToken === null) {\n  console.error(`Unable to acquire access token.`);\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Worksheet Headings - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet disables worksheet headings (the row numbers and column letters) using the Excel JavaScript API by setting the showHeadings property to false. It runs asynchronously in the context of an Office Add-in and requires preview API support. The main parameter is the boolean value for visibility; the output is a worksheet with headings hidden for all co-authors until the value is changed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheet-display.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showHeadings = false;\n    await context.sync();\n});  \n```\n\n----------------------------------------\n\nTITLE: Assigning OWA Mailbox Policy to a Specific Group (Modern/New Outlook)\nDESCRIPTION: Identifies members of a specific group ('Finance'), filters for user mailboxes among them, and assigns the designated OWA mailbox policy (`FinanceOWAPolicy`) to these users. This enforces the on-send compliance settings specifically for this group in modern Outlook on the web or new Outlook on Windows. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$targetUsers = Get-Group 'Finance'|select -ExpandProperty members\n$targetUsers | Get-User -Filter {RecipientTypeDetails -eq 'UserMailbox'}|Set-CASMailbox -OwaMailboxPolicy FinanceOWAPolicy\n```\n\n----------------------------------------\n\nTITLE: Executing Final Context Synchronization in JavaScript\nDESCRIPTION: This snippet, intended to replace `TODO4` in `insertTextBeforeRange`, calls `await context.sync()`. This executes the command queued in the previous step (inserting the paragraph demonstrating the original range's text). This ensures all queued operations within the `Word.run` scope are completed before the `insertTextBeforeRange` function finishes.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nawait context.sync();\n```\n\n----------------------------------------\n\nTITLE: Navigating to Add-in Project Directory with Command Line\nDESCRIPTION: This snippet demonstrates how to navigate to the newly created Office Add-in project directory via the command line. It assumes the Yeoman generator has been used to scaffold a project named 'My Office Add-in'. No additional dependencies are required for this step. The main parameter is the project directory name, and the output is the change of working directory to begin further development.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Starting Outlook Add-in Local Web Server - Command Line\nDESCRIPTION: This command initiates the local development web server and begins the sideloading process of the Outlook add-in. It depends on Node.js and project dependencies installed via npm. Executing 'npm start' in the root project directory serves the add-in locally; any errors likely indicate missing dependencies or insufficient privileges. The command must be run as an administrator and expects that certificate prompts may occur if this is the first run.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/outlook-quickstart-json-manifest-typescript.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Stop Development Server and Remove Add-in Started with npm run start (Shell)\nDESCRIPTION: Executes the 'stop' script defined in the project's package.json file, intended to stop the development server and remove the sideloaded add-in that was started using `npm run start`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/sideload-outlook-add-ins-for-testing.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run stop\n```\n\n----------------------------------------\n\nTITLE: Using WebSockets in JavaScript Custom Functions\nDESCRIPTION: This JavaScript snippet shows how to establish a WebSocket connection within a custom function using `new WebSocket()`. It sets up handlers for `onmessage` to process incoming messages from the server (logging them to the console) and `onerror` to handle and log any connection errors. This allows for real-time, bidirectional communication between the custom function and a server.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-web-reqs.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nlet ws = new WebSocket('wss://bundles.office.com');\n\nws.onmessage(message) {\n    console.log(`Received: ${message}`);\n}\n\nws.onerror(error){\n    console.err(`Failed: ${error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Office Add-in Manifest File in XML\nDESCRIPTION: This XML snippet represents the structure of a customized Office Add-in manifest file. It defines metadata such as the add-in's unique identifier, display name, description, icon URL, support URL, hosting configuration, default settings, and permissions. The manifest enables integration of the add-in with Microsoft Project via the specified host and provides a reference to an icon image file. Prerequisites include having a valid GUID for the <Id> element, a 32x32 icon at the referenced path, and correct <ProviderName> and <SupportUrl> values for deployment. Input is an XML file, output is metadata recognized by Office for add-in registration and display. The <Id> element must be unique per add-in, and paths like ~remoteAppUrl require correct app hosting configuration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<OfficeApp xmlns=\\\"http://schemas.microsoft.com/office/appforoffice/1.1\\\"\\n        xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:type=\\\"TaskPaneApp\\\">\\n    <!--IMPORTANT! Id must be unique for each add-in. If you copy this manifest ensure that you change this id to your own GUID. -->\\n    <Id>c512df8d-a1c5-4d74-8a34-d30f6bbcbd82</Id>\\n    <Version>1.0</Version>\\n    <ProviderName> [Provider name]</ProviderName>\\n    <DefaultLocale>en-US</DefaultLocale>\\n    <DisplayName DefaultValue=\\\"Hello ProjectData\\\" />\\n    <Description DefaultValue=\\\"Test REST queries of the ProjectData service\\\"/>\\n    <IconUrl DefaultValue=\\\"~remoteAppUrl/Images/NewIcon.png\\\" />\\n    <SupportUrl DefaultValue=\\\"[Insert the URL of a page that provides support information for the app]\\\" />\\n    <Hosts>\\n        <Host Name=\\\"Project\\\" />\\n    </Hosts>\\n    <DefaultSettings>\\n        <SourceLocation DefaultValue=\\\"~remoteAppUrl/AddIn/Home/Home.html\\\" />\\n    </DefaultSettings>\\n    <Permissions>ReadWriteDocument</Permissions>\\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Domains in validDomains Array - JSON\nDESCRIPTION: Shows how to whitelist specific domains (here, https://www.contoso.com) in the manifest.json validDomains array, ensuring the add-in can make network calls to these endpoints. Add relevant URLs to this array to allow resources to load or external calls from the add-in. The value should be an array of strings representing allowed origins. Improper configuration may prevent desired network operations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-log-appointments.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"validDomains\": [\n    \"https://www.contoso.com\"\n],\n```\n\n----------------------------------------\n\nTITLE: Exporting a Base64-Encoded Image String in JavaScript\nDESCRIPTION: This JavaScript code defines and exports a constant, 'base64Image', which holds a Base64-encoded PNG image as a string. Other modules can import this constant to access the image data, for example, to embed the image into Office documents using Office.js APIs. There are no external dependencies, but it assumes the consumer is using an ES module-capable JavaScript environment and understands how to use Base64 image data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const base64Image =\n    \"\"\n\n```\n\n----------------------------------------\n\nTITLE: Exporting a Base64 Image Constant with JavaScript ES Module\nDESCRIPTION: This code snippet defines and exports a constant named base64Image, containing a Base64-encoded image string. The string represents binary image data, allowing other JavaScript files to import this variable and use it (e.g., to insert images in Office slides using Office.js APIs). The dependency is the JavaScript ES module system; no additional libraries required. The primary input is the exported string; there are no runtime outputs, but consumers of this module can use the string to render or insert images. The main constraint is that the full Base64 image is pre-included in the source code.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const base64Image =\n    \"\";\n```\n\n----------------------------------------\n\nTITLE: Updating Task Pane Button Label for User Feedback (HTML)\nDESCRIPTION: This HTML snippet updates the label of the task pane button with id 'add-attachment' to inform users that the button both adds an attachment and sends the message. No dependencies are required beyond standard HTML; it redraws a UI element to reflect new functionality. This improves transparency in the user experience when programmatically sending messages.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<span id=\"add-attachment\" class=\"ms-Button-label\">Add and send</span>\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Office Open XML Document Package - XML\nDESCRIPTION: This XML snippet defines the minimal structure needed for Office Open XML to represent formatted paragraph content in a Word document. It includes only essential parts: package root, a relationships definition (._rels/.rels), and the main document body (word/document.xml) with inline formatting. Dependencies include an understanding of Office Open XML schema and that the XML can be inserted as content through Word or Office.js APIs. It requires excluding XML declaration and mso-application tags for Office.js insertion, but these may be required if opened directly in Word. The main parameters are structured tags and attribute values, with expected output being formatted paragraph content in a document. The markup is limited in functionality, omitting advanced or style-based features.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<pkg:package xmlns:pkg=\"http://schemas.microsoft.com/office/2006/xmlPackage\">\n  <pkg:part pkg:name=\"/_rels/.rels\" pkg:contentType=\"application/vnd.openxmlformats-package.relationships+xml\" pkg:padding=\"512\">\n    <pkg:xmlData>\n      <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n        <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"word/document.xml\"/>\n      </Relationships>\n    </pkg:xmlData>\n  </pkg:part>\n  <pkg:part pkg:name=\"/word/document.xml\" pkg:contentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\">\n    <pkg:xmlData>\n      <w:document xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" >\n        <w:body>\n          <w:p>\n            <w:pPr>\n              <w:spacing w:before=\"360\" w:after=\"0\" w:line=\"480\" w:lineRule=\"auto\"/>\n              <w:rPr>\n                <w:color w:val=\"70AD47\" w:themeColor=\"accent6\"/>\n                <w:sz w:val=\"28\"/>\n              </w:rPr>\n            </w:pPr>\n            <w:r>\n              <w:rPr>\n                <w:color w:val=\"70AD47\" w:themeColor=\"accent6\"/>\n                <w:sz w:val=\"28\"/>\n              </w:rPr>\n              <w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t>\n            </w:r>\n          </w:p>\n        </w:body>\n      </w:document>\n    </pkg:xmlData>\n  </pkg:part>\n</pkg:package>\n```\n\n----------------------------------------\n\nTITLE: Selecting Extended Range to Used Range Edge in Excel using JavaScript API\nDESCRIPTION: This snippet demonstrates using the `getExtendedRange` method to select all cells from the currently selected range to the furthest edge of the used range in a specified direction (down), relative to the active cell. This mimics the behavior of the Ctrl+Shift+Down arrow key keyboard shortcut. It uses the current selection, active cell, and a direction.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Get the selected range.\n    let range = context.workbook.getSelectedRange();\n\n    // Specify the direction with the `KeyboardDirection` enum.\n    let direction = Excel.KeyboardDirection.down;\n\n    // Get the active cell in the workbook.\n    let activeCell = context.workbook.getActiveCell();\n\n    // Get all the cells from the currently selected range to the bottom-most edge of the used range.\n    // This method acts like the Ctrl+Shift+Down arrow key keyboard shortcut while a range is selected.\n    let extendedRange = range.getExtendedRange(\n      direction,\n      activeCell\n    );\n    extendedRange.select();\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Excel as Host Application in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet, part of a unified manifest file, illustrates how to use the `extensions.requirements.scopes` array to restrict an Office Add-in's installation to only Excel. By including `\"workbook\"` in the scopes array, the add-in declares its compatibility solely with Excel across supported platforms (web, Windows, Mac, iPad).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-office-hosts-and-api-requirements-unified.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    {\n        \"requirements\": {\n            \"scopes\": [ \"workbook\" ],\n        },\n        ...\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Clearing Office Add-in UI Validation Cache in Windows Registry (Specific User SID)\nDESCRIPTION: Identifies the Windows Registry key under HKEY_USERS for a specific user SID (`{SID}`) that stores the Custom UI Validation Cache for Office Add-ins. Similar to the HKEY_CURRENT_USER path, entries related to the specific add-in ID should be deleted here to clear cached UI elements for the user account identified by the SID.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/uninstall-add-in.md#_snippet_7\n\nLANGUAGE: registry\nCODE:\n```\nComputer\\HKEY_USERS\\{SID}\\Software\\Microsoft\\Office\\16.0\\Common\\CustomUIValidationCache\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Branch Updates to GitHub - Bash\nDESCRIPTION: This Bash command pushes the current state of your local branch, including all staged commits, to the corresponding branch in your GitHub fork. 'git push origin <new branch name>' is essential for updating your forked repository prior to submitting a pull request. This ensures your remote branch is synchronized with your local edits.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <new branch name>\n```\n\n----------------------------------------\n\nTITLE: Adding Filter Table Button - HTML\nDESCRIPTION: Adds an HTML button element with MS-Button styling and id 'filter-table'. This element allows users to trigger the filter operation in the add-in task pane. No dependencies are required aside from the surrounding add-in project HTML and MS-Button styles. When clicked, the associated JavaScript handler should be invoked by assigning an appropriate event listener.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"ms-Button\\\" id=\\\"filter-table\\\">Filter Table</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Defining Initial changeFont Function in JavaScript\nDESCRIPTION: This snippet defines an asynchronous function 'changeFont' using the Word JavaScript API's 'Word.run' pattern. It sets up the context for interacting with the Word document but includes a placeholder ('TODO1') for the specific commands to change the font. It requires the Office JS library.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function changeFont() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to apply a different font.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CustomFunctionsMetadataPlugin in Webpack (Single Input) - JavaScript\nDESCRIPTION: This snippet shows how to configure the `CustomFunctionsMetadataPlugin` within the `plugins` array in `webpack.config.js`. It specifies the output filename (`functions.json`) and the path to the single input JavaScript source file containing the custom function definitions. If using TypeScript, the `.ts` file should be specified.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew CustomFunctionsMetadataPlugin({\n   output: \"functions.json\",\n   input: \"./src/functions/functions.js\", \n}),\n```\n\n----------------------------------------\n\nTITLE: Replacing Multiple Click Handler Initializations for Outlook Add-ins - TypeScript\nDESCRIPTION: Encapsulates multiple jQuery click event registrations for Outlook-specific actions in an Office.onReady block to ensure handlers are attached after Office initialization. This code is for add-ins targeting Outlook hosts, updating default Script Lab code by deferring event binding until both Office.js and the document are fully loaded. Insert this snippet in /src/taskpane/taskpane.ts (or taskpane.js) for proper initialization.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/create-an-office-add-in-from-script-lab.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nOffice.onReady(function () {\n  // Office is ready\n  $(document).ready(function () {\n    // The document is ready\n    $(\"#get\").on(\"click\", get);\n    $(\"#set\").on(\"click\", set);\n    $(\"#save\").on(\"click\", save);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Shared Folders Support in Add-in Only Manifest (XML)\nDESCRIPTION: Used within the add-in only XML manifest to indicate that the add-in supports shared folders and shared mailbox scenarios. Setting this element's value to 'true' grants the necessary permission.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/outlook-permission-levels-table.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<SupportsSharedFolders>true</SupportsSharedFolders>\n```\n\n----------------------------------------\n\nTITLE: Adding a Help URL to a Custom Function using @helpurl - JavaScript\nDESCRIPTION: This example illustrates the use of the `@helpurl` JSDoc tag to associate a specific URL with the custom function. This URL (`http://www.contoso.com/weatherhelp`) will be displayed in Excel, providing users with a link to additional help or documentation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A function which streams the temperature in a town you specify.\n * @customfunction getTemperature\n * @helpurl http://www.contoso.com/weatherhelp\n * ...\n */\n```\n\n----------------------------------------\n\nTITLE: Converting Non-Yo Office Project Manifest using office-addin-manifest-converter\nDESCRIPTION: This command utilizes the `office-addin-manifest-converter` tool via npx to convert the manifest of a NodeJS/npm Office Add-in project that was *not* created using the Yeoman generator. It requires the relative path to the original XML manifest (`<relative-path-to-XML-manifest>`). The command generates the unified manifest (`.json`) and places it within a new subfolder named after the original manifest's filename stem (e.g., `.\\MyManifest\\MyManifest.json` if the input was `MyManifest.xml`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/convert-xml-to-json-manifest.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-manifest-converter convert <relative-path-to-XML-manifest>\n```\n\n----------------------------------------\n\nTITLE: Starting the Office Add-in Development Server with npm (command line)\nDESCRIPTION: This command-line snippet demonstrates how to start the development server for your Office Add-in project using npm. The dependency is Node.js with npm installed, and the expected input is execution in a terminal in the project directory. Output is the running development server which enables hot-reloading and debugging as you test shared runtime behavior.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_10\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\\n\n```\n\n----------------------------------------\n\nTITLE: Building Excel Custom Functions Add-in Project with NPM - Command Line\nDESCRIPTION: This command uses npm to build the Excel custom functions project. It compiles the add-in's TypeScript or JavaScript code and ensures all dependencies are properly handled. The project should have an appropriate package.json with a 'build' script configured. Expected output includes the compiled JavaScript files in the build directory.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial-create-custom-functions.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding Button to Trigger Text Insertion Before Range in HTML\nDESCRIPTION: Defines an HTML `<button>` element with the ID `insert-text-outside-range` and text \"Add Version Info\". This button will be used in the Word Add-in's task pane to trigger the insertion of text before the currently selected range in the document. It should be placed within the `taskpane.html` file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"insert-text-outside-range\">Add Version Info</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Selecting Scope for Client Application Authorization\nDESCRIPTION: Indicates the specific scope that needs to be selected (checked) when adding a client application for pre-authorization. This scope, previously defined in 'Expose an API', grants the specified client applications (like Office hosts) permission to access the API on behalf of the user.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_13\n\nLANGUAGE: uri\nCODE:\n```\napi://<fully-qualified-domain-name>/<app-id>/access_as_user\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Open Task Pane in XML Manifest\nDESCRIPTION: Specifies a task pane to open automatically by setting the 'TaskpaneId' element to 'Office.AutoShowTaskpaneWithDocument' within a 'ShowTaskpane' Action in the XML manifest (manifest.xml). This configuration links the auto-open behavior to the task pane defined by the associated 'SourceLocation'. This feature requires the AddInCommands 1.1 requirement set.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/automatically-open-a-task-pane-with-a-document.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Action xsi:type=\"ShowTaskpane\">\n    <TaskpaneId>Office.AutoShowTaskpaneWithDocument</TaskpaneId>\n    <SourceLocation resid=\"Contoso.Taskpane.Url\" />\n</Action>\n```\n\n----------------------------------------\n\nTITLE: Stopping the Development Server and Uninstalling the Add-in - Command Line - Shell\nDESCRIPTION: Executes the \\\"npm stop\\\" command to terminate the running development server and begin add-in uninstallation cleanup. Primary dependency is Node.js/npm and that the development server was started in the current session. No configuration or parameters are necessary; outputs stopped server and cleaned up development environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/fluent-react-quickstart.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Copying web.config to Build Output - CopyWebpackPlugin - JavaScript\nDESCRIPTION: This JavaScript code snippet is inserted in the 'plugins' array within 'webpack.config.js'. It configures CopyWebpackPlugin to copy 'src/web.config' to the same location in the build output during each webpack build. Dependencies include the 'copy-webpack-plugin' NPM package and Webpack. Required parameters are the source ('from') and destination ('to') file paths. This ensures that the custom MIME types configuration is included in the production bundle.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-add-in-vs-code.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew CopyWebpackPlugin({\\n  patterns: [\\n  {\\n    from: \\\"src/web.config\\\",\\n    to: \\\"src/web.config\\\",\\n  },\\n ],\\n}),\n```\n\n----------------------------------------\n\nTITLE: Uninstall Sideloaded Add-in with Teams Toolkit CLI by Title ID\nDESCRIPTION: Uninstalls an Office Add-in previously sideloaded using the Teams Toolkit CLI. The add-in is identified by its unique Title ID (obtained during the `teamsapp install` command output or from the registry), which should replace the `{title ID}` placeholder (including the `U_` prefix). The `--interactive false` flag prevents user prompts.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/sideload-add-in-with-unified-manifest.md#_snippet_4\n\nLANGUAGE: command-line\nCODE:\n```\nteamsapp uninstall --mode title-id --title-id {title ID} --interactive false\n```\n\n----------------------------------------\n\nTITLE: Clearing Edge WebView Cache via Command Prompt (Bash)\nDESCRIPTION: This Bash command forcefully deletes the cache files associated with the Microsoft Edge WebView control (Microsoft.Win32WebViewHost) used by Office Add-ins on Windows. It utilizes the `del` command with flags `/s` (delete from subdirectories), `/f` (force delete read-only files), and `/q` (quiet mode) targeting the specific cache directory within the user's `LOCALAPPDATA`. This command serves as an alternative method for clearing the WebView cache when doing so through the browser's UI proves ineffective for resolving issues caused by stale cached static files (JS, HTML, CSS) during development.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/troubleshoot-development-errors.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndel /s /f /q %LOCALAPPDATA%\\Packages\\Microsoft.Win32WebViewHost_cw5n1h2txyewy\\AC\\#!123\\INetCache\\\n```\n\n----------------------------------------\n\nTITLE: Example Output for Checking Legacy Token Status\nDESCRIPTION: Shows sample output from the `Get-AuthenticationPolicy -AllowLegacyExchangeTokens` command in a PowerShell console. This example indicates that legacy tokens are currently disabled (`AllowLegacyExchangeTokens: False`). The 'Allowed' and 'Blocked' lists are noted as unused for this specific check.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/turn-exchange-tokens-on-off.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nPS C:\\> Get-AuthenticationPolicy -AllowLegacyExchangeTokens\nAllowLegacyExchangeTokens: False\nAllowed: []\nBlocked: []\nPS C:\\>\n```\n\n----------------------------------------\n\nTITLE: Launching New Outlook with DevTools using Command Line\nDESCRIPTION: This command launches the new Outlook for Windows client executable (`olk.exe`) with the Microsoft Edge DevTools attached by using the `--devtools` flag. This setup is required to debug Outlook web add-ins running within the context of the new desktop client. The command should be run from a command prompt after ensuring the new Outlook client is closed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/one-outlook.md#_snippet_0\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nolk.exe --devtools\n```\n\n----------------------------------------\n\nTITLE: Defining CORS Policy Name Constant in C#\nDESCRIPTION: This C# snippet declares a read-only string field named `MyAllowSpecificOrigins` within the `Startup` class. This field holds the name of the CORS policy defined in `ConfigureServices` and is used when applying the policy in the `Configure` method.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nreadonly string MyAllowSpecificOrigins = \"_myAllowSpecificOrigins\";\n```\n\n----------------------------------------\n\nTITLE: Starting the Add-in Development Server using npm\nDESCRIPTION: Command to be run in the project's root directory via a terminal. It uses Node Package Manager (npm) to execute the 'start' script defined in the project's `package.json`, which typically starts the local development web server and sideloads the Outlook add-in for testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/contextless.md#_snippet_4\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Declaring Standard Permissions in Unified Manifest (JSON)\nDESCRIPTION: Defines standard resource-specific permissions for the Microsoft 365 application within the unified manifest (manifest.json). The 'name' property within an object in this array should be set to the canonical permission name (e.g., MailboxItem.Restricted.User, MailboxItem.Read.User, MailboxItem.ReadWrite.User, Mailbox.ReadWrite.User).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/outlook-permission-levels-table.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"authorization.permissions.resourceSpecific\": [\\n  {\\n    \"name\": \"MailboxItem.Read.User\" \\n    // ... other permissions if needed\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Writing Data to an Office Binding using JavaScript\nDESCRIPTION: This snippet demonstrates how to write data to an existing Office binding using the `setDataAsync` method. It passes the data ('Hello World!') and an anonymous callback function to handle the asynchronous result. Assumes `myBinding` is a pre-existing variable holding a reference to a text binding.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nmyBinding.setDataAsync('Hello World!', function (asyncResult) { });\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Legacy Exchange Online Tokens using PowerShell\nDESCRIPTION: Uses the Set-AuthenticationPolicy cmdlet with the -BlockLegacyExchangeTokens switch to disable the issuance of legacy Exchange Online tokens for the entire tenant. Existing tokens remain valid until expiration, and the change can take up to 24 hours to propagate. The -Identity parameter is required but applies tenant-wide.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/turn-exchange-tokens-on-off.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-AuthenticationPolicy –BlockLegacyExchangeTokens -Identity \"LegacyExchangeTokens\"\n```\n\n----------------------------------------\n\nTITLE: Starting and Sideloading Office Add-in in Excel Desktop via npm\nDESCRIPTION: This command-line instruction uses npm to start the local development server (if not already running) and automatically opens the Excel desktop application with the add-in sideloaded for testing. It relies on the 'start' script configured in the project's `package.json`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_7\n\nLANGUAGE: commandline\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Applying Body Typography Style with Fabric Core CSS\nDESCRIPTION: Applies the standard 'Body' text style (14px, Segoe Regular) using the Fabric Core CSS class `.ms-font-m`. This is the commonly recommended style for the main body text content within Office Add-ins. Text color needs to be applied separately.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/add-in-typography.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.ms-font-m\n```\n\n----------------------------------------\n\nTITLE: Install Teams Toolkit CLI Globally\nDESCRIPTION: Installs the Microsoft Teams Toolkit command-line interface (CLI) globally using npm. This makes the `teamsapp` command available in the system's terminal or command prompt for managing Teams applications and Office Add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/sideload-add-in-with-unified-manifest.md#_snippet_2\n\nLANGUAGE: command-line\nCODE:\n```\nnpm install -g @microsoft/teamsapp-cli\n```\n\n----------------------------------------\n\nTITLE: Referencing Active Page Using Visio Proxy Object (JavaScript)\nDESCRIPTION: Shows how to acquire a proxy to the currently active page in the embedded Visio document. The context object, obtained from RequestContext, provides access to the Visio document model. This proxy reference is used in further batch operations and methods but does not reflect the current state until synchronized. Dependencies include the Visio JavaScript API and an active session/context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/reference/overview/visio-javascript-reference-overview.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst activePage = context.document.getActivePage();\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Root Directory - Command Line\nDESCRIPTION: Changes the current directory to the root folder of the newly created Office Add-in project. This is necessary before running configuration scripts or issuing build/start commands. The project root directory name may vary depending on your selected project name.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/sso-quickstart.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Declaring autoRunEvents array in unified app manifest - JSON\nDESCRIPTION: Provides an empty \\\"autoRunEvents\\\" array setup, which is required in the manifest to enable event-based activation. This property should be placed inside the \\\"extensions\\\" array object and will later contain specific event handler configurations. If left empty, no events will be automatically triggered. Proper population of this array is essential for add-in event automation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-event-based.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"autoRunEvents\": [\n    \n    ]\n```\n\n----------------------------------------\n\nTITLE: Reading Content Language Using Office JavaScript API (JavaScript)\nDESCRIPTION: This simple JavaScript snippet fetches the content language of the Office document using Office.context.contentLanguage. The value is assigned to a variable for use in locale-specific operations. This is useful for adapting UI or logic to match the language context of document data. Requires the Office.js API and runs in an Office Add-in environment. Input is the document's content language; output is the assigned value for further processing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst myLanguage = Office.context.contentLanguage;\\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Office.js via CDN for Outlook Add-in - HTML\nDESCRIPTION: Includes the Office.js JavaScript API library in the Outlook add-in by referencing the official Microsoft CDN. This enables the JavaScript APIs for interacting with Office/Outlook features. Place this <script> tag in the <head> of your HTML, ASPX, or PHP page to ensure the Office API is available. The CDN ensures compliance for AppSource submission and up-to-date API versions. No additional parameters required; input is the script tag, and it loads the Office.js library for subsequent use. This approach cannot use a local file reference.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/apis.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/Office.js\\\" type=\\\"text/javascript\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Yeoman Generator for Office Add-ins - Command Line\nDESCRIPTION: This command installs Yeoman (yo) and the Yeoman generator for Office Add-ins (generator-office) globally using npm, the Node.js package manager. Ensure Node.js is installed as a prerequisite before running this command. By executing this, developers can scaffold new Office Add-in projects via Yeoman generators. The command must be run from a command prompt or terminal with appropriate permissions. Outputs include completion logs from npm; errors may occur if npm is not initialized or permissions are insufficient.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/quickstart-yo-prerequisites.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm install -g yo generator-office\n```\n\n----------------------------------------\n\nTITLE: Installing jwt-decode for Office Add-in SSO (NuGet CLI and npm)\nDESCRIPTION: These commands install the jwt-decode library, which is used to decode JWT tokens returned from the Office SSO API. The NuGet CLI is for projects built with Visual Studio (.NET), while the npm command is for Node.js/JavaScript projects generated with Yo Office. Ensure installation in the appropriate project directory for correct dependency management.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/use-sso-to-get-office-signed-in-user-token.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package jwt-decode -Projectname sso-display-user-infoWeb\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install jwt-decode\n```\n\n----------------------------------------\n\nTITLE: Hiding Toolbars in Embedded Visio Diagram Using Visio.run (JavaScript)\nDESCRIPTION: Demonstrates using Visio.run to execute a batch operation that hides toolbars in a Visio diagram embedded in SharePoint. Relies on the Visio JavaScript API, an active EmbeddedSession, and the OfficeExtension library. The batch queues operations on the application object, disables toolbars, and synchronizes state with Visio via context.sync(). Includes error handling for runtime errors.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/reference/overview/visio-javascript-reference-overview.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction hideToolbars() {\\n    Visio.run(session, function(context){\\n        const app = context.document.application;\\n        app.showToolbars = false;\\n        return context.sync().then(function () {\\n            window.console.log(\\\"Toolbars Hidden\\\");\\n        });\\n    }).catch(function(error)\\n    {\\n        window.console.log(\\\"Error: \\\" + error);\\n    });\\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Ribbon and Button Icons in Add-in Only Manifest (XML) for Office Add-ins\nDESCRIPTION: This XML snippet outlines how to declare image assets for contextual tabs and buttons within the <Resources> section of an add-in only manifest for Office Add-ins. Each <bt:Image> element defines a unique icon size and its corresponding URL, ensuring correct rendering for different contexts in the Office ribbon. The manifest requires all icon sizes (16x16, 32x32, 80x80) and properly hosted resources for each; this pattern should be repeated for all ribbon elements that need visual representation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Resources>\n    <bt:Images>\n        <bt:Image id=\\\"contextual-tab-icon-16\\\" DefaultValue=\\\"https://cdn.contoso.com/addins/datainsertion/Images/Group16x16.png\\\"/>\n        <bt:Image id=\\\"contextual-tab-icon-32\\\" DefaultValue=\\\"https://cdn.contoso.com/addins/datainsertion/Images/Group32x32.png\\\"/>\n        <bt:Image id=\\\"contextual-tab-icon-80\\\" DefaultValue=\\\"https://cdn.contoso.com/addins/datainsertion/Images/Group80x80.png\\\"/>\n        <bt:Image id=\\\"contextual-button-icon-16\\\" DefaultValue=\\\"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton16x16.png\\\"/>\n        <bt:Image id=\\\"contextual-button-icon-32\\\" DefaultValue=\\\"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton32x32.png\\\"/>\n        <bt:Image id=\\\"contextual-button-icon-80\\\" DefaultValue=\\\"https://cdn.contoso.com/addins/datainsertion/Images/WriteDataButton80x80.png\\\"/>\n    </bt:Images>\n    ...\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Attempt to Set Read-Only Property in Office JS (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates an attempt to assign a value ('5') to the `id` property of a `myChart` object, presumably an instance of an Excel Chart object from the Office JavaScript API. This operation will fail silently without throwing an error because the `Chart.id` property is read-only according to the API specification. The snippet highlights a common development pitfall where changes to object properties might not take effect if the target property is immutable.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/troubleshoot-development-errors.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// This will do nothing, since `id` is a read-only property.\nmyChart.id = \"5\";\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Domain Message from Dialog to Parent with Wildcard Origin (JavaScript)\nDESCRIPTION: This snippet shows how to send a message from an Office Add-in dialog to its parent host page, allowing the message to be sent to any domain. It uses `Office.context.ui.messageParent` with the `targetOrigin` property set to \"*\". This approach should only be used if the message does not contain sensitive data. Like the specific origin example, this requires the Dialog Origin 1.1 requirement set for cross-domain scenarios.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/dialog-api-in-office-add-ins.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.ui.messageParent(\"Some message\", { targetOrigin: \"*\" });\n```\n\n----------------------------------------\n\nTITLE: Default Application ID URI Format\nDESCRIPTION: Shows the default Application ID URI automatically generated by Azure when exposing an API. It uses the application's client ID (`<app-id>`). This default URI needs to be updated.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_2\n\nLANGUAGE: uri\nCODE:\n```\napi://<app-id>\n```\n\n----------------------------------------\n\nTITLE: Creating and Filling a Shape - PowerPoint Office JS - JavaScript\nDESCRIPTION: Creates a new geometric shape on the first selected slide in PowerPoint using the Office JavaScript API, then fills it with a Base64-encoded image. Requires the PowerPoint API and a Base64 string representing the image data, typically from an external data source. The 'slides' object is used to select the appropriate slide, and the 'myShape' object is updated with the provided image.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/bind-shapes-in-presentation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait PowerPoint.run(async (context) => {\\n    const slides = context.presentation.getSelectedSlides();\\n\\n    // Insert new shape on first selected slide. \\n    const myShape = slides\\n        .getItemAt(0)\\n        .shapes.addGeometricShape(PowerPoint.GeometricShapeType.rectangle, {\\n            top: 100,\\n            left: 30,\\n            width: 200,\\n            height: 200\\n        });\\n\\n    // Fill shape with a Base64-encoded image. \\n    // Note: The image is typically created from a data source request. \\n    const productsImage = \"...base64 image data...\";\\n    myShape.fill.setImage(productsImage);\\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Logging Preference on Mac - Command Line\nDESCRIPTION: Sets a runtime logging file preference for a specific Office host app on Mac using the defaults system utility. Replace <bundle id> with the correct bundle identifier and <file_name> with the destination logfile name. Requires access to the Mac Terminal and admin rights. Used on Office 2016 build 16.27.19071500 or later.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/runtime-logging.md#_snippet_5\n\nLANGUAGE: command line\nCODE:\n```\ndefaults write <bundle id> CEFRuntimeLoggingFile -string <file_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Pane UI for Smart Alerts Testing (HTML)\nDESCRIPTION: This HTML snippet defines the body content for an Outlook add-in task pane. It includes branding, introductory text linking to documentation, and UI elements specifically for testing the Smart Alerts features. These elements include a text input and button for adding an attachment via URL, and another button for adding an inline image to test the send mode override functionality. It uses Office UI Fabric styles for presentation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"ms-welcome ms-Fabric\">\n    <header class=\"ms-welcome__header ms-bgColor-neutralLighter\">\n        <img width=\"90\" height=\"90\" src=\"../../assets/logo-filled.png\" alt=\"Contoso\" title=\"Contoso\" />\n        <h1 class=\"ms-font-su\">Try out the Smart Alerts sample</h1>\n    </header>\n    <section id=\"sideload-msg\" class=\"ms-welcome__main\">\n        <h2 class=\"ms-font-xl\">Please <a href=\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\">sideload</a> your add-in to see app body.</h2>\n    </section>\n    <main id=\"app-body\" class=\"ms-welcome__main\" style=\"display: none;\">\n        <p>\n            This sample implements a Smart Alerts add-in that activates when you forget to attach a document or picture that you mention in your message.\n            To learn more, see the <a href=\"https://learn.microsoft.com/office/dev/add-ins/outlook/smart-alerts-onmessagesend-walkthrough\">Smart Alerts walkthrough</a>.\n        </p>\n        <h3 class=\"ms-font-l\">Add an attachment</h3>\n        <p>Add the URL of a file to add it as an attachment.</p>\n        <div class=\"ms-TextField\">\n            <label class=\"ms-Label ms-font-l\">URL of file:</label>\n            <input id=\"attachment-url\" class=\"ms-TextField-field\" type=\"text\" value=\"https://localhost:3000/assets/icon-128.png\" placeholder=\"\">\n        </div>\n        <br/>\n        <button class=\"ms-Button ms-Button--primary\">\n            <span id=\"add-attachment\" class=\"ms-Button-label\">Add as attachment</span>\n        </button>\n        <br/>\n        <h3 class=\"ms-font-l\">Override the send mode option at runtime</h3>\n        <p>Add an inline image to test overriding the send mode option at runtime.</p>\n        <button class=\"ms-Button ms-Button--primary\">\n            <span id=\"add-inline-image\" class=\"ms-Button-label\">Add an inline image</span>\n        </button>\n    </main>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Adding Button to Task Pane HTML\nDESCRIPTION: This HTML snippet adds a button element with the ID 'create-table' and text 'Create Table' to the main content area of the task pane's HTML file (`taskpane.html`). This button will be used to trigger the table creation functionality.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"create-table\">Create Table</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Adding Button to Trigger Text Replacement in HTML\nDESCRIPTION: Defines an HTML `<button>` element with the ID `replace-text` and text \"Change Quantity Term\". This button is added to the Word Add-in's task pane UI to trigger the replacement of the selected text in the document. It should be placed within the `taskpane.html` file, typically after other related buttons.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"replace-text\">Change Quantity Term</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Complex Types with JSDoc @typedef in JavaScript\nDESCRIPTION: Demonstrates defining a complex custom type named `MyType` using the JSDoc `@typedef` tag, specifying its properties (`range` of type `Word.Range` and `paragraphs` of type `Word.ParagraphCollection`). It also shows using this custom type with the `@returns` tag for a function (`myFunc`), enabling Visual Studio IntelliSense for objects conforming to the structure defined by `MyType`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/get-javascript-intellisense-in-visual-studio.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @typedef {{range: Word.Range, paragraphs: Word.ParagraphCollection}} MyType\n\n/** @returns {MyType} */\nfunction myFunc() {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Data Read from Binding via Office.select (JavaScript)\nDESCRIPTION: This snippet shows the alternative way to initiate reading data from a binding by using `Office.select` with the binding's ID ('myBindingID') followed by chaining the `getDataAsync` method. It demonstrates the call structure but omits the callback definition for brevity. Requires the Office JS API and an existing binding with ID 'myBindingID'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nOffice.select(\"bindings#myBindingID\").getDataAsync\n```\n```\n\n----------------------------------------\n\nTITLE: Adding 'Rename Service' Button in Word Task Pane with HTML\nDESCRIPTION: This snippet adds a 'Rename Service' button in the taskpane after the 'Create Content Control' button. The button's id is 'replace-content-in-control', and it is intended to be wired up to JavaScript for replacing text inside a previously created content control. No external dependencies apart from HTML and CSS class references are needed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_48\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"ms-Button\\\" id=\\\"replace-content-in-control\\\">Rename Service</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Launching Edge DevTools for Outlook Add-ins via Command Line\nDESCRIPTION: Command to launch the new Outlook on Windows desktop client with the Microsoft Edge Developer Tools attached. This method is necessary as the context menu and keyboard shortcuts are not supported for launching the debugger in the new Outlook client (preview).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-add-ins-using-devtools-edge-chromium.md#_snippet_0\n\nLANGUAGE: command\nCODE:\n```\nolk.exe --devtools\n```\n\n----------------------------------------\n\nTITLE: Starting and Sideloading Office Add-in in PowerPoint Desktop (Testing Section 2)\nDESCRIPTION: This command uses npm to execute the `start` script. It starts the local web server (if not running) and opens the PowerPoint desktop application with the add-in loaded, facilitating testing of the implemented features like 'Insert Text'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_21\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding an 'Insert Table' Button in HTML\nDESCRIPTION: This HTML snippet adds a button with the ID 'insert-table' and the class 'ms-Button' to the task pane's HTML structure. This button is designed to trigger the table insertion functionality. It is placed after the 'insert-html' button.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"insert-table\">Insert Table</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Adding Sort Table Button - HTML\nDESCRIPTION: Adds a button to the HTML interface with id 'sort-table', styled as an MS-Button, to allow users to trigger the table sorting functionality. This button must be inserted after the filter-table button and is designed to be linked to a sort logic handler in the task pane’s JavaScript.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"ms-Button\\\" id=\\\"sort-table\\\">Sort Table</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Adding MSAL Browser Dependency in package.json - JavaScript/JSON\nDESCRIPTION: Specifies adding the '@azure/msal-browser' library to the dependencies section of package.json for enabling MSAL-based authentication in the Office Add-in. This dependency must be installed via npm to access the APIs required for NAA and SSO. The version may be updated to match the latest secure release. No direct inputs or outputs; this is a package setup step required before consuming the MSAL APIs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/enable-nested-app-authentication-in-your-add-in.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n    \"@azure/msal-browser\": \"^3.27.0\",\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Command Line (Testing Section 3)\nDESCRIPTION: This command line instruction changes the current directory to the \"My Office Add-in\" folder, the root directory of the project. This is a prerequisite step before running test commands like `npm start`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_25\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Updating Task Pane Header using HTML and Fabric Core\nDESCRIPTION: This HTML markup defines the header section for the PowerPoint add-in's task pane. It uses Fabric Core CSS classes (`ms-Grid`, `ms-bgColor-neutralPrimary`, etc.) for styling and sets the title to \"My PowerPoint add-in\". This code replaces the `TODO2` placeholder in the `taskpane.html` file and requires the Fabric Core stylesheet to be referenced for proper rendering.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<header id=\"content-header\">\n    <div class=\"ms-Grid ms-bgColor-neutralPrimary\">\n        <div class=\"ms-Grid-row\">\n            <div class=\"padding ms-Grid-col ms-u-sm12 ms-u-md12 ms-u-lg12\"> <div class=\"ms-font-xl ms-fontColor-white ms-fontWeight-semibold\">My PowerPoint add-in</div></div>\n        </div>\n    </div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Root Directory using Command Line\nDESCRIPTION: This command line instruction changes the current directory to the root folder of the Office Add-in project, typically named 'My Office Add-in'. This is a prerequisite step before running build or start commands.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Listing Enabled Add-ins for a Mailbox (PowerShell)\nDESCRIPTION: Use the `Get-App` PowerShell cmdlet within a remote Exchange session to list the Outlook add-ins currently enabled for a specific mailbox. This is one of the cmdlets used to manage add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/testing-and-tips.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-App\n```\n\n----------------------------------------\n\nTITLE: Localizing Add-in DisplayName in Office Manifest XML\nDESCRIPTION: This XML snippet demonstrates how to localize the display name of an Office Add-in. It sets a default locale (`en-us`) and a default display name ('Video player') using the `DefaultValue` attribute. An `<Override>` child element is used to specify a French (`fr-fr`) translation ('Lecteur vidéo') which will be displayed if the client's locale matches.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<DefaultLocale>en-us</DefaultLocale>\n...\n<DisplayName DefaultValue=\"Video player\">\n    <Override Locale=\"fr-fr\" Value=\"Lecteur vidéo\" />\n</DisplayName>\n```\n\n----------------------------------------\n\nTITLE: Updating Task Pane HTML for First-Run Experience Structure\nDESCRIPTION: This HTML snippet replaces the default `<main>` element in `taskpane.html`. It introduces a `div` with the ID `first-run-experience` containing introductory content (a list of features), initially hidden (`style=\"display: none;\"`). This `div` is intended to be shown only on the first run. The standard add-in elements like the 'Run' button and instruction paragraph remain.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/first-run-experience-tutorial.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<main id=\"app-body\" class=\"ms-welcome__main\" style=\"display: none;\">\n    <div id=\"first-run-experience\" style=\"display: none;\">\n        <h2 class=\"ms-font-xl\"> Discover what Office Add-ins can do for you today! </h2>\n        <ul class=\"ms-List ms-welcome__features\">\n            <li class=\"ms-ListItem\">\n                <i class=\"ms-Icon ms-Icon--Ribbon ms-font-xl\"></i>\n                <span class=\"ms-font-m\">Achieve more with Office integration</span>\n            </li>\n            <li class=\"ms-ListItem\">\n                <i class=\"ms-Icon ms-Icon--Unlock ms-font-xl\"></i>\n                <span class=\"ms-font-m\">Unlock features and functionality</span>\n            </li>\n            <li class=\"ms-ListItem\">\n                <i class=\"ms-Icon ms-Icon--Design ms-font-xl\"></i>\n                <span class=\"ms-font-m\">Create and visualize like a pro</span>\n            </li>\n        </ul>\n    </div>\n    <p class=\"ms-font-l\">Select any range of cells in the worksheet, then click <b>Run</b>.</p>\n    <div role=\"button\" id=\"run\" class=\"ms-welcome__action ms-Button ms-Button--hero ms-font-xl\">\n        <span class=\"ms-Button-label\">Run</span>\n    </div>\n    <p><label id=\"item-subject\"></label></p>    \n</main>\n```\n\n----------------------------------------\n\nTITLE: Configuring Add-in Metadata and Descriptions - Office Add-in Manifest XML\nDESCRIPTION: This XML snippet updates key metadata in the add-in's manifest file, including provider name, locale, display name, and description. 'ProviderName' and default values for 'DisplayName' and 'Description' should reflect the developer's identity and the add-in's intended purpose. The manifest defines how the add-in appears in the Office add-ins catalog and user interface. Changes are required for proper Office Store submission, and the XML should remain within the 'ExcelWebAddIn1.xml' manifest structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/excel-quickstart-vs.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n...\\n<ProviderName>John Doe</ProviderName>\\n<DefaultLocale>en-US</DefaultLocale>\\n<!-- The display name of your add-in. Used on the store and various places of the Office UI such as the add-ins dialog. -->\\n<DisplayName DefaultValue=\\\"My Office Add-in\\\" />\\n<Description DefaultValue=\\\"A task pane add-in for Excel\\\"/>\\n...\n```\n\n----------------------------------------\n\nTITLE: Replacing Main Element in Outlook Add-in Taskpane - HTML\nDESCRIPTION: This HTML snippet replaces the <main> section of the add-in's taskpane to provide a welcome message, a label for displaying the selected message's subject, and a button to trigger script functionality. It relies on accompanying JavaScript (taskpane.ts) to interact with Outlook APIs. The main parameters are the 'item-subject' label (for dynamic content) and the 'run' button (to trigger actions); inputs and outputs are through user interaction and DOM manipulation. Requires placement within the <body> element of taskpane.html, and may assume inclusion of Office.js and related CSS.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/outlook-quickstart-json-manifest-typescript.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<main id=\"app-body\" class=\"ms-welcome__main\" style=\"display: none;\">\n    <h2 class=\"ms-font-xl\"> Discover what Office Add-ins can do for you today! </h2>\n    <p><label id=\"item-subject\"></label></p>\n    <div role=\"button\" id=\"run\" class=\"ms-welcome__action ms-Button ms-Button--hero ms-font-xl\">\n        <span class=\"ms-Button-label\">Run</span>\n    </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Watching for File Changes via Command Line (Non-VS Code)\nDESCRIPTION: Executes the 'watch' script defined in package.json using npm. This command initiates a process that monitors project source files and automatically rebuilds the project upon detecting changes, intended for use when debugging outside of VS Code. Requires Node.js, npm, and a configured 'watch' script in the project's package.json.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Settings Property Bag Structure - JSON\nDESCRIPTION: This JSON snippet illustrates an example property bag used for persisting add-in settings. It consists of three key-value pairs, all using string representations, compatible with the Settings object in Office.js. This structure can be saved and retrieved as a serialized JSON object, with allowed value types conforming to Office.js persistence requirements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/persisting-add-in-state-and-settings.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"firstName\\\":\\\"Erik\\\",\\n    \\\"location\\\":\\\"98052\\\",\\n    \\\"defaultView\\\":\\\"basic\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Loopback Exemption for HTTP Localhost (Outlook Add-in)\nDESCRIPTION: Executes the `CheckNetIsolation.exe` command in an elevated prompt to add a loopback exemption for an application identified by a specific AppContainer name derived from `http://localhost:3000`. This step is necessary to resolve network access errors when debugging Outlook add-ins hosted locally over HTTP on Windows. Assumes default port 3000; adjust if using a different port.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/outlook-loopback-exemption.md#_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\ncall %SystemRoot%\\System32\\CheckNetIsolation.exe LoopbackExempt -a -n=1_http___localhost_300004ACA5EC-D79A-43EA-AB47-E50E47DD96FC\n```\n\n----------------------------------------\n\nTITLE: Declaring Appointment Attendee Extension Point in Add-in Manifest (XML)\nDESCRIPTION: Declares the extension point for add-ins (e.g., note-taking, CRM) operating in Appointment Attendee mode on mobile, using the add-in only (XML) manifest. Use the `MobileLogEventAppointmentAttendee` extension point.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\nMobileLogEventAppointmentAttendee\n```\n\n----------------------------------------\n\nTITLE: Checking the Status of Legacy Exchange Online Tokens using PowerShell\nDESCRIPTION: Uses the Get-AuthenticationPolicy cmdlet with the -AllowLegacyExchangeTokens parameter to check whether the issuance of legacy Exchange Online tokens is currently enabled (True) or disabled (False) by administrative settings for the tenant.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/turn-exchange-tokens-on-off.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AuthenticationPolicy -AllowLegacyExchangeTokens\n```\n\n----------------------------------------\n\nTITLE: Referencing Event Handler Script in Outlook Add-in HTML (JavaScript, HTML)\nDESCRIPTION: This HTML snippet adds a script reference to the launchevent.js JavaScript file in the Outlook add-in's commands.html page, ensuring that the event handler for message composition is loaded. The <script> tag should be placed before the closing </head> tag to enable Office.js activation of the event handler during add-in lifecycle events. There are no additional dependencies except a valid path and Office.js context; the referenced script should match the manifest configuration for the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-event-based.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../launchevent/launchevent.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Command Line\nDESCRIPTION: This command-line instruction changes the current directory to the root folder of the Office Add-in project, typically named \"My Office Add-in\" in the context of the tutorial.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Issue Templates for Office Add-ins - Markdown - English\nDESCRIPTION: This Markdown snippet provides section headings and usage instructions for contributors to report documentation issues. It prompts users to specify the article URL and describe the issue thoroughly within defined sections. No dependencies are required, and it is intended for contributors to supply structured feedback for Office Add-ins documentation. The snippet helps maintain organized and actionable issue reports.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Issue_Template.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Article URL\n<!-- Provide the URL of the article that this documentation issue relates to -->\n\n## Issue\n<!-- Provide a thorough description of the documentation issue -->\n \n```\n\n----------------------------------------\n\nTITLE: Handling Worksheet Selection Change Event in Excel - Markdown\nDESCRIPTION: This snippet prompts Copilot to write code for handling events triggered when the worksheet selection changes, using the Excel JavaScript API. Relevant for Office.js event programming; expects the registration of an event handler and appropriate callback code. No special parameters; code will use Office event API patterns.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nHandle an event *when selection changes in worksheet* using \nExcel JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Start Script in package.json for Node.js Deployment\nDESCRIPTION: This JSON snippet shows how to modify the `scripts` section in a `package.json` file for deployment. The `start` script is updated to execute `middletier.js` using Node.js, suitable for Azure App Service. The `prestart` script, often used for local development tasks, is removed as it's not needed for this deployment scenario.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/deploy-office-add-in-sso-to-azure.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"node middletier.js\",\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-manifest Tool Globally (Command Line)\nDESCRIPTION: Installs the `office-addin-manifest` Node.js package globally using npm. This makes the `office-addin-manifest` command available system-wide for validating Office Add-in manifests independently of specific project setups. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/troubleshoot-manifest.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpm install -g office-addin-manifest\n```\n\n----------------------------------------\n\nTITLE: Connecting a Line Between Two Shapes in Excel using JavaScript\nDESCRIPTION: This code demonstrates connecting an existing line shape ('MyLine') between two other existing shapes ('LeftShape' and 'RightShape') on a worksheet ('MyWorksheet'). It retrieves the line object from the shape using `.line` and then uses the `connectBeginShape()` and `connectEndShape()` methods, specifying the target shapes retrieved via `shapes.getItem()` and the connection site indices (0 for the start, 3 for the end). Connection site indices correspond to predefined points on a shape.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-shapes.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// This sample connects a line between two shapes at connection points '0' and '3'.\nawait Excel.run(async (context) => {\n    let shapes = context.workbook.worksheets.getItem(\"MyWorksheet\").shapes;\n    let line = shapes.getItem(\"MyLine\").line;\n    line.connectBeginShape(shapes.getItem(\"LeftShape\"), 0);\n    line.connectEndShape(shapes.getItem(\"RightShape\"), 3);\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Content Add-in <VersionOverrides> Structure - Office Add-in Manifest (XML)\nDESCRIPTION: Presents a minimal element ordering for the <VersionOverrides> section in Content Add-in manifests. Focused on the WebApplicationInfo block, it lists Id, Resource, and Scopes elements, indicating the required fields developers must declare for a valid Content Add-in manifest. This example acts as a structural guideline; actual manifests may include additional blocks as needed. No dependencies beyond conformance to the schema for Office Add-in Manifest v1.1.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/manifest-element-ordering.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides>\\n    <WebApplicationInfo>\\n        <Id>\\n        <Resource>\\n        <Scopes>\\n            <Scope>\n```\n\n----------------------------------------\n\nTITLE: Defining Add-in UI Structure with HTML\nDESCRIPTION: This HTML snippet defines the body structure for the `Home.html` page of an Office Add-in. It includes header and main content divs, with specific elements (`h1` with id 'greeting' and `p` with id 'about') intended to display localized text. Basic styling classes from Office UI Fabric (like `ms-bgColor-themePrimary`, `ms-font-xl`, `ms-fontColor-white`, `ms-font-m`, `padding`) are used.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/localization.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Page content -->\n    <div id=\"content-header\" class=\"ms-bgColor-themePrimary ms-font-xl\">\n        <div class=\"padding\">\n            <h1 id=\"greeting\" class=\"ms-fontColor-white\"></h1>\n        </div>\n    </div>\n    <div id=\"content-main\">\n        <div class=\"padding\">\n            <div class=\"ms-font-m\">\n                <p id=\"about\"></p>\n            </div>\n        </div>\n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Building the Add-in for Deployment - NPM - Command Line\nDESCRIPTION: This command invokes the build process for the Office Add-in project, typically running scripts specified in the project's package.json under the 'build' script. Required dependencies include Node.js and npm. Input is the command executed in the terminal within the root directory, and the output is a populated 'dist' folder containing all necessary files for deployment. Ensure that the build script properly bundles and prepares production-ready resources.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-add-in-vs-code.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Updating CopyWebpackPlugin in webpack.config.js (JavaScript)\nDESCRIPTION: This JavaScript snippet updates the configuration for `CopyWebpackPlugin` within `webpack.config.js`. It ensures that the `package.json` file is copied to the output directory (`dist`). Additionally, it modifies the rule for copying `manifest*.xml` files to include a transformation step that replaces occurrences of the development URL (`urlDev`) with the production URL (`urlProd`) when building for production (when `dev` is false).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/deploy-office-add-in-sso-to-azure.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew CopyWebpackPlugin({\n    patterns: [\n    {\n        from: \"assets/*\",\n        to: \"assets/[name][ext][query]\",\n    },\n    {\n        from: \"package.json\",\n        to: \"package.json\",\n    },\n    {\n        from: \"manifest*.xml\",\n        to: \"[name]\" + \"[ext]\",\n        transform(content) {\n            if (dev) {\n                return content;\n            } else {\n                return content.toString().replace(new RegExp(urlDev, \"g\"), urlProd);\n            }\n        },\n    },\n  ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Linking Localization Resource File in Office Add-in XML Manifest\nDESCRIPTION: Specifies the `ResourceUrl` attribute within the `ExtendedOverrides` element in an Office Add-in XML manifest (`OfficeApp`). This URL points to a JSON file containing localized strings for elements defined in the `ExtendedOverrides` file (specified by the `Url` attribute). This approach is used with the Add-in only manifest type.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n    ...</VersionOverrides>  \n    <ExtendedOverrides Url=\"https://contoso.com/addin/extended-overrides.json\" \n                       ResourceUrl=\"https://contoso.com/addin/my-resources.json\">\n    </ExtendedOverrides>\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Including Event Handler Script in Commands HTML File - HTML\nDESCRIPTION: This HTML code snippet shows how to add a script tag reference for the event-handling JavaScript file into the add-in's commands.html file. This ensures the event handler code is loaded when Outlook instantiates the add-in in environments that support HTML-based runtime. Place this line before the closing </head> tag in the commands.html file. The only input is the correct relative path to launchevent.js.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"../launchevent/launchevent.js\\\"></script>\\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Placeholders with Context.Sync Inside Loops - Office.js - JavaScript\nDESCRIPTION: Demonstrates a straightforward, but less efficient, approach to replacing placeholders by synchronizing Office.js context within nested loops. For each job mapping, it loads and searches for the placeholder in the document, then replaces each instance with the designated name, synchronizing after both search and replace operations. Dependencies include Word JavaScript API and a previously defined \\\"jobMapping\\\" array. Performance is limited because \\\"context.sync\\\" is called multiple times inside loops.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/correlated-objects-pattern.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nWord.run(async (context) => {\n    // The context.sync calls in the loops will degrade performance.\n    for (let i = 0; i < jobMapping.length; i++) {\n      let options = Word.SearchOptions.newObject(context);\n      options.matchWildcards = false;\n      let searchResults = context.document.body.search(jobMapping[i].job, options);\n      searchResults.load('items');\n\n      await context.sync(); \n\n      for (let j = 0; j < searchResults.items.length; j++) {\n        searchResults.items[j].insertText(jobMapping[i].person, Word.InsertLocation.replace);\n\n        await context.sync();\n      }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Note Size - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet resizes the first note in a worksheet by updating its width and height properties. It retrieves the first note, modifies its size, and synchronizes with the Excel context. Prerequisites include at least one note present in the worksheet's NoteCollection, and the API must be running within a supported Office.js environment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-notes.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    // This function changes the height and width of the first note.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const note = sheet.notes.getItemAt(0);\n\n    note.width = 400;\n    note.height = 200;    \n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-dev-settings Tool via npm\nDESCRIPTION: Installs the `office-addin-dev-settings` tool as a development dependency in a Node.js project using the Node Package Manager (npm). This tool is required for managing Office Add-in development settings, including forcing specific webviews. This step is necessary if the project was not created using the Yeoman generator for Office Add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/use-legacy-edge-or-ie.md#_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\nnpm install office-addin-dev-settings --save-dev\n```\n\n----------------------------------------\n\nTITLE: Getting Active Project GUID Asynchronously in JavaScript\nDESCRIPTION: Defines the `getProjectGuid` function which asynchronously retrieves the GUID of the currently active project using `Office.context.document.getProjectFieldAsync` with the `Office.ProjectProjectFields.GUID` field identifier. Upon successful completion, it stores the retrieved GUID in the global `_projectUid` variable. Handles potential errors during the asynchronous call by invoking the `throwError` function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// Get the GUID of the active project.\nfunction getProjectGuid() {\n    Office.context.document.getProjectFieldAsync(\n        Office.ProjectProjectFields.GUID,\n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Succeeded) {\n                _projectUid = asyncResult.value.fieldValue;\n            }\n            else {\n                throwError(asyncResult.error.name, asyncResult.error.message);\n            }\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Document Read Permissions - Office Add-in Only Manifest - XML\nDESCRIPTION: This XML snippet shows how to request the 'ReadDocument' permission in a classic Office Add-in manifest file for a task pane add-in. The <Permissions> element is set to 'ReadDocument' within the root <OfficeApp> element, which includes required namespaces and the xsi:type attribute. Other manifest elements are omitted for clarity but must be included for a functional add-in. This XML must conform to the Office manifest schema and should be integrated into a standard manifest structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/privacy-and-security.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<OfficeApp xmlns=\\\"http://schemas.microsoft.com/office/appforoffice/1.0\\\"\\n           xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \\n           xmlns:ver=\\\"http://schemas.microsoft.com/office/appforoffice/1.0\\\"\\n           xsi:type=\\\"TaskPaneApp\\\">\\n\\n    ... <!-- To keep permissions as the focus, not displaying other elements. -->\\n    <Permissions>ReadDocument</Permissions>\\n    ...\\n</OfficeApp>\n```\n\n----------------------------------------\n\nTITLE: Requesting Item Subject Using makeEwsRequestAsync and Processing EWS SOAP in JavaScript\nDESCRIPTION: Implements EWS GetItem operation in a JavaScript Outlook add-in via makeEwsRequestAsync. The getSubjectRequest function builds a SOAP request XML for the GetItem operation to retrieve the subject of an email item given its ID; sendRequest initiates the EWS request, and callback processes the result. This code requires the Office.js library and access to the mailbox object in an add-in; inputs include the current item ID, and outputs are handled in the callback via the asyncResult object. Limitations include dependency on EWS support, which is unavailable on Outlook for iOS and Android.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/web-services.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getSubjectRequest(id) {\n   // Return a GetItem operation request for the subject of the specified item. \n   const result = \n    '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n    '<soap:Envelope xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"' +\n    '               xmlns:xsd=\"https://www.w3.org/2001/XMLSchema\"' +\n    '               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"' +\n    '               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">' +\n    '  <soap:Header>' +\n    '    <RequestServerVersion Version=\"Exchange2013\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\" soap:mustUnderstand=\"0\" />' +\n    '  </soap:Header>' +\n    '  <soap:Body>' +\n    '    <GetItem xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">' +\n    '      <ItemShape>' +\n    '        <t:BaseShape>IdOnly</t:BaseShape>' +\n    '        <t:AdditionalProperties>' +\n    '            <t:FieldURI FieldURI=\"item:Subject\"/>' +\n    '        </t:AdditionalProperties>' +\n    '      </ItemShape>' +\n    '      <ItemIds><t:ItemId Id=\"' + id + '\"/></ItemIds>' +\n    '    </GetItem>' +\n    '  </soap:Body>' +\n    '</soap:Envelope>';\n\n   return result;\n}\n\nfunction sendRequest() {\n   // Create a local variable that contains the mailbox.\n   const mailbox = Office.context.mailbox;\n\n   mailbox.makeEwsRequestAsync(getSubjectRequest(mailbox.item.itemId), callback);\n}\n\nfunction callback(asyncResult)  {\n   const result = asyncResult.value;\n   const context = asyncResult.context;\n\n   // Process the returned response here.\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Attempt to Set Fill Color to Null in JavaScript\nDESCRIPTION: Illustrates an invalid assignment where `null` is assigned to the `color` property of the range's fill format. Similar to setting `range.values` to null, assigning `null` directly to single formatting sub-properties like `color` is not permitted.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-blank-null-values.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nrange.format.fill.color =  null;  // This is not a valid snippet. \n```\n\n----------------------------------------\n\nTITLE: Locating Sideloaded Add-in Registrations in Windows Registry (Current User)\nDESCRIPTION: Specifies the primary Windows Registry key under HKEY_CURRENT_USER where sideloaded Office Add-ins are registered. Each entry under this key typically lists the path to the add-in's manifest in its 'Data' value. Finding and deleting the entry corresponding to a 'ghost' add-in is a step in removing its local registration for the current user.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/uninstall-add-in.md#_snippet_4\n\nLANGUAGE: registry\nCODE:\n```\nComputer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\WEF\\Developer\n```\n\n----------------------------------------\n\nTITLE: Disabling Word Add-in Runtime Logging on Mac - Command Line\nDESCRIPTION: Disables runtime logging for Word on Mac by removing the CEFRuntimeLoggingFile preference. Only applies to Word; modify the bundle ID for other Office hosts. Run this in Mac Terminal.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/runtime-logging.md#_snippet_8\n\nLANGUAGE: command line\nCODE:\n```\ndefaults delete com.microsoft.Word CEFRuntimeLoggingFile\n```\n\n----------------------------------------\n\nTITLE: Styling the Settings Dialog (CSS)\nDESCRIPTION: This CSS code provides styling rules for the settings dialog (`dialog.html`). It defines margins for the main section, hides elements like the 'not configured' warning, error display, and gist list container by default using `display: none`. It also styles the list title with a bottom border and adjusts padding for specific list item text elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_16\n\nLANGUAGE: css\nCODE:\n```\nsection {\n  margin: 10px 20px;\n}\n\n.not-configured-warning {\n  display: none;\n}\n\n.error-display {\n  display: none;\n}\n\n.gist-list-container {\n  margin: 10px -8px;\n  display: none;\n}\n\n.list-title {\n  border-bottom: 1px solid #a6a6a6;\n  padding-bottom: 5px;\n}\n\nul {\n  margin-top: 10px;\n}\n\n.ms-ListItem-secondaryText,\n.ms-ListItem-tertiaryText {\n  padding-left: 15px;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Inspector for PowerPoint Add-ins on Mac (Terminal)\nDESCRIPTION: Executes a terminal command using `defaults write` to set the `OfficeWebAddinDeveloperExtras` boolean preference to `true` for Microsoft PowerPoint on macOS. This enables the 'Inspect Element' context menu option, allowing developers to debug PowerPoint add-ins using Safari Web Inspector. This requires macOS High Sierra and Office version 16.9.1 (Build 18012504) or later, installed from Office.com, not the Mac App Store.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/debug-office-add-ins-on-ipad-and-mac.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndefaults write com.microsoft.Powerpoint OfficeWebAddinDeveloperExtras -bool true\n```\n\n----------------------------------------\n\nTITLE: Running Build Script to Compile Project (Command Line)\nDESCRIPTION: This command executes the project's configured build script (typically using webpack or another bundler) from the command line. It compiles source files and prepares static assets including scripts referenced by HTML files. Prerequisites include a valid npm and appropriate scripts in package.json. Input is the current project directory, and output is a built/dist folder.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/smart-alerts-onmessagesend-walkthrough.md#_snippet_14\n\nLANGUAGE: Command Line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Summing Two Numbers with Nested Custom Functions - JavaScript\nDESCRIPTION: This example demonstrates a less efficient implementation of the Add custom function for Excel, taking two arguments and returning their sum. It is marked with @customfunction for Excel's runtime. This design increases nesting if many numbers are to be summed, harming recalculation performance. Input parameters are arg1 and arg2 (numbers), with output their sum. Requires the Office JavaScript Custom Functions runtime. Should be avoided for summing more than two numbers in complex sheets.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-get-started.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n* Returns the sum of two numbers.\n* @customfunction\n*/\nfunction Add(arg1: number, arg2: number): number {\n  return arg1 + arg2;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Sideloading Office Add-in in PowerPoint Desktop (Testing Section 3)\nDESCRIPTION: This command uses npm to execute the `start` script. It launches the local web server (if required) and opens PowerPoint with the add-in automatically sideloaded, allowing testing of the 'Get Slide Metadata' functionality.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_27\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Removing commands.html Plugin from Webpack Configuration\nDESCRIPTION: This JavaScript snippet demonstrates removing the `HtmlWebpackPlugin` instance configured for 'commands.html' from the `webpack.config.js` file. In a shared runtime setup, the JavaScript handling commands (like ribbon button actions) is included in the main bundle loaded by `taskpane.html`, making a separate `commands.html` entry point redundant.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/configure-your-add-in-to-use-a-shared-runtime.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew HtmlWebpackPlugin({\n    filename: \"commands.html\",\n    template: \"./src/commands/commands.html\",\n    chunks: [\"polyfill\", \"commands\"]\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource-Specific Permission for Append-On-Send – JSON\nDESCRIPTION: This manifest JSON snippet grants delegated permission to the add-in for appending content on send, specifically 'Mailbox.AppendOnSend.User', which is required for modifying message bodies via the append-on-send API. Should be placed in the authorization.permissions.resourceSpecific array. Prerequisite: Ensure the permissions array exists and is valid. Inputs: permission object, outputs: permission granted to the add-in. No further configuration needed beyond manifest updates.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/append-on-send.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Mailbox.AppendOnSend.User\",\n  \"type\": \"Delegated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting CSS Selectors for First-Run Experience Styling\nDESCRIPTION: This CSS snippet modifies a selector in `taskpane.css`. It changes the selector `.ms-welcome__main {` to `.ms-welcome__main, .ms-welcome__main > div {` to ensure that styling rules originally applied only to the main container (`ms-welcome__main`) now also apply directly to immediate child `div` elements within it. This is necessary to correctly style the newly added `first-run-experience` div alongside other content within the main container.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/first-run-experience-tutorial.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.ms-welcome__main, .ms-welcome__main > div {\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Outlook Add-ins on a User's Computer - PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of all Outlook add-ins installed on the current user's computer by invoking Get-App and pipes the output to Select-Object to display the ProviderName, DisplayName, and AppId properties. Required prerequisites include appropriate Exchange Online connection and permissions. Note: Sideloaded add-ins may not be listed. Inputs are not required, but the user context must be established. The output lists installed add-ins with publisher, display name, and application ID.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/faq-nested-app-auth-outlook-legacy-tokens.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-App | Select-Object -Property ProviderName, DisplayName, AppId\n```\n\n----------------------------------------\n\nTITLE: Starting Web Debugging Session via npm\nDESCRIPTION: Executes the 'start' script defined in package.json with specific arguments (`-- web --document {url}`) to launch the add-in in Excel on the web, loading a specific document for debugging. Replace `{url}` with the actual file URL. Requires Node.js, npm, a configured 'start' script in package.json that handles these arguments, and access to the online document.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start -- web --document {url}\n```\n\n----------------------------------------\n\nTITLE: Enabling Runtime Logging with office-addin-dev-settings - Command Line\nDESCRIPTION: Enables runtime logging globally for Office Add-ins using the office-addin-dev-settings npm CLI. Requires Node.js and the office-addin-dev-settings package (installed via npx or globally). Run this command in a terminal or command prompt on Windows. There are no required parameters unless targeting a specific file; otherwise, logging is enabled system-wide.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/runtime-logging.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-dev-settings runtime-log --enable\n```\n\n----------------------------------------\n\nTITLE: Validating Manifest with Global Tool (Command Line)\nDESCRIPTION: Runs the validation process on the specified manifest file using the globally installed `office-addin-manifest` tool. Execute this command within the directory containing the manifest file, replacing `MANIFEST_FILE` with the actual filename. Requires the `office-addin-manifest` tool to have been installed globally via npm.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/troubleshoot-manifest.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\noffice-addin-manifest validate MANIFEST_FILE\n```\n\n----------------------------------------\n\nTITLE: Stopping the Node.js Middle-Tier Server using npm\nDESCRIPTION: Provides the npm command (`npm stop`) used to terminate the running Node.js middle-tier server that hosts the backend API for the Office Add-in. This command typically executes a script defined in the `scripts` section of the project's `package.json` file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-sso-office-add-ins-nodejs.md#_snippet_14\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Adding Insert Image Button in HTML\nDESCRIPTION: This HTML snippet defines the 'Insert Image' button within the task pane. It replaces the `TODO1` comment in `taskpane.html`. The button has the ID `insert-image`, which will be used by the JavaScript code to attach an event handler.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"insert-image\">Insert Image</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft.Win32WebViewHost Package with PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the details of the Microsoft.Win32WebViewHost app package using Get-AppxPackage. It is essential for obtaining the PackageFullName, which is required in subsequent debugging configuration steps. The command outputs a set of detailed package attributes including name, version, install location, and status.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/enable-debugging-on-edge-devtools.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AppxPackage Microsoft.Win32WebViewHost\n```\n\n----------------------------------------\n\nTITLE: Changing Font Formatting for Selected Text in Word - Markdown\nDESCRIPTION: This prompt asks Copilot to generate code that changes font formatting for selected document text in Word using the Word JavaScript API. Designed for style customization and Office.js document enhancement workflows. No extra dependencies; Copilot will emit code using text selection and font APIs.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nChange the font formatting of *the selected document text* using \nthe Word JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Login Form for WebView2 Password Autosave\nDESCRIPTION: Provides the required HTML structure with input fields for username (type=\"text\") and password (type=\"password\"), along with a sign-in button. Microsoft Edge WebView2 uses this specific structure to identify login forms and offer password saving after successful authentication and redirection.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/auth-save-passwords.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n```html\n<div>\n    <label for=\"username\">Username:</label><br/>\n    <input type=\"text\" id=\"username\" name=\"username\" /><br/>\n    \n    <label for=\"password\">Password:</label><br/>\n    <input type=\"password\" id=\"password\" name=\"password\" /><br/>\n    \n    <button id=\"btn\" type=\"button\">Sign in</button>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Debugging Session with NPX for Other Projects\nDESCRIPTION: Uses npx to execute the 'office-addin-debugging' tool's start command directly. This command sideloads the add-in defined in the specified manifest file for testing and debugging. It's typically used for Node.js projects not generated by Teams Toolkit or Yo Office.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/test-debug-non-local-server.md#_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\nnpx office-addin-debugging start manifest.json\n```\n\n----------------------------------------\n\nTITLE: Specifying Required VersionOverrides for On-Send in Outlook Manifest (XML)\nDESCRIPTION: This XML snippet shows the necessary `VersionOverrides` structure within an Outlook add-in manifest to enable the on-send feature. It explicitly declares the use of `VersionOverridesV1_1` nested within `VersionOverridesV1_0`, which is required for defining `ItemSend` event handlers.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides\" xsi:type=\"VersionOverridesV1_0\">\n     <!-- On-send requires VersionOverridesV1_1 -->\n     <VersionOverrides xmlns=\"http://schemas.microsoft.com/office/mailappversionoverrides/1.1\" xsi:type=\"VersionOverridesV1_1\">\n         ...\n     </VersionOverrides>\n</VersionOverrides>\n```\n\n----------------------------------------\n\nTITLE: Sample dateTimeCreated/dateTimeModified Values in Office.js - JavaScript\nDESCRIPTION: This snippet displays exemplar string values representing the dateTimeCreated or dateTimeModified properties returned in Office.js item data. The actual data is platform-specific and demonstrates the difference in the time zone component's formatting. These examples assist developers in parsing and correctly interpreting date/time properties in Outlook add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/compare-outlook-add-in-support-in-outlook-for-mac.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"Thu Mar 13 2014 14:09:11 GMT+0800 (China Standard Time)\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"Thu Mar 13 2014 14:09:11 GMT+0800 (CST)\"\n```\n\n----------------------------------------\n\nTITLE: Hiding a Custom Add-in via Unified Manifest Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `alternates` array in the unified manifest's `extensions` object to hide an older Office Add-in that was *not* distributed through AppSource (e.g., sideloaded or centrally deployed via admin center). It uses the `hide` property with a `customOfficeAddin` object, specifying only the `officeAddinId` (GUID) of the older add-in. This configuration prevents the UI of the older, custom-distributed add-in from showing up duplicated in Outlook.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/concepts/duplicate-legacy-metaos-add-ins.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    ...\n    {\n        ...\n        \"alternates\": [\n            ...\n            {\n                ...\n                \"hide\": {\n                    \"customOfficeAddin\": {\n                        \"officeAddinId\": \"b5a2794d-4aa5-4023-a84b-c60a3cbd33d4\"\n                    }\n                }\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Citation Text for Office Dictionary Add-in (XML)\nDESCRIPTION: This XML snippet demonstrates the `<CitationText>` element within an Office Add-in manifest's `<Dictionary>` section. The `DefaultValue` attribute specifies the introductory text (e.g., 'Results by: ') that precedes the dictionary name in the citation line displayed below web service results. Localization is possible using the `<Override>` element.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<CitationText DefaultValue=\"Results by: \" />\n```\n\n----------------------------------------\n\nTITLE: Creating openDialog Function with Placeholder (JavaScript)\nDESCRIPTION: This function serves as a placeholder for the logic to open the Office dialog, intentionally omitting any Excel-specific code. Intended for use in the task pane context, it is to be completed later by calling the Office Common API to display a dialog. There are no parameters, and the function does not currently perform any actions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nfunction openDialog() {\\n    // TODO1: Call the Office Common API that opens a dialog.\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Add-in UI Elements in HTML\nDESCRIPTION: This HTML snippet updates the user interface of the PowerPoint content add-in. It replaces the default paragraph and button elements in `Home.html` with new ones. The paragraph explains the button's function, and the button, styled using Office UI Fabric classes, is intended to trigger the retrieval of slide details when clicked.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/powerpoint-quickstart-content.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"ms-font-m-plus\">This example will get some details about the current slide.</p>\n\n<button class=\"Button Button--primary\" id=\"get-data-from-selection\">\n    <span class=\"Button-icon\"><i class=\"ms-Icon ms-Icon--plus\"></i></span>\n    <span class=\"Button-label\">Get slide details</span>\n    <span class=\"Button-description\">Gets and displays the current slide's details.</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Building the Add-in for Deployment (with Custom Functions) - NPM - Command Line\nDESCRIPTION: This command repeats the build process for add-ins that include custom functions for Excel. The process ensures all files, including the updated web.config, are bundled for deployment. The context and requirements are the same as in the earlier build step—Node.js, npm, and a defined 'build' script. Outputs a new 'dist' folder with all files needed for Azure deployment. Deploy after this step.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-add-in-vs-code.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Navigating to Add-in Project Directory - Command Line\nDESCRIPTION: This snippet provides the command to change the current working directory to the newly created add-in project folder named \\\"My Office Add-in\\\". This is a standard prerequisite before running further build or start commands with the Yeoman-generated Office Add-in project. The command assumes the folder exists in the current location and does not require additional dependencies beyond a standard shell/terminal.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/excel-quickstart-angular.md#_snippet_0\n\nLANGUAGE: Command Line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Granting Add-in Installation Permission to Multiple Users (PowerShell)\nDESCRIPTION: This PowerShell command retrieves mailboxes (using `Get-Mailbox *`, which targets all mailboxes, though the variable name `$users` suggests potential filtering capability) and iterates through them. For each user, it assigns the 'My Custom Apps' role using `New-ManagementRoleAssignment`, granting them the permission to sideload Outlook add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/testing-and-tips.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$users = Get-Mailbox *$users | ForEach-Object { New-ManagementRoleAssignment -Role \"My Custom Apps\" -User $_.Alias}\n```\n\n----------------------------------------\n\nTITLE: Applying Caption Typography Style with Fabric Core CSS\nDESCRIPTION: Applies the 'Caption' typography style (11px, Segoe Regular) using the Fabric Core CSS class `.ms-font-xs`. Suitable for secondary or tertiary text elements such as timestamps, bylines, image captions, or field labels. Text color needs to be applied separately.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/add-in-typography.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.ms-font-xs\n```\n\n----------------------------------------\n\nTITLE: Adding Office.js Preview and spamreporting.js References for Outlook Add-in Testing (HTML)\nDESCRIPTION: Shows how to include both the preview version of the Office.js API and the spamreporting.js handler for testing the spam-reporting feature in Outlook on Mac or other environments in preview. Both script tags must be included near the closing </head> tag in the HTML commands file. This setup is necessary when using the preview build of the Outlook add-in platform. The expected result is correct loading of APIs and handler scripts when the add-in is run in relevant Outlook clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/spam-reporting.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"https://appsforoffice.microsoft.com/lib/beta/hosted/office.js\\\"></script>\\n<script type=\\\"text/javascript\\\" src=\\\"../spamreporting/spamreporting.js\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Structuring Word Content in OOXML document.xml (XML)\nDESCRIPTION: This XML snippet displays the structure of the `/word/document.xml` part within an Office Open XML package, holding the main document content before simplification. It showcases WordprocessingML tags defining a paragraph (`w:p`) with specific formatting (color, size, spacing) applied directly (`w:pPr`, `w:rPr`) and the text content (`w:t`). It also includes namespaces, bookmark tags (`w:bookmarkStart`, `w:bookmarkEnd`), and section properties (`w:sectPr`), illustrating the detailed structure that can be simplified for add-in content insertion by removing unused namespaces and elements like bookmarks and section properties.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/create-better-add-ins-for-word-with-office-open-xml.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<pkg:part pkg:name=\"/word/document.xml\" pkg:contentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\">\n    <pkg:xmlData>\n      <w:document mc:Ignorable=\"w14 w15 wp14\" xmlns:wpc=\"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\" xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:wp14=\"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\" xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\" xmlns:w10=\"urn:schemas-microsoft-com:office:word\" xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" xmlns:w14=\"http://schemas.microsoft.com/office/word/2010/wordml\" xmlns:w15=\"http://schemas.microsoft.com/office/word/2012/wordml\" xmlns:wpg=\"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\" xmlns:wpi=\"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\" xmlns:wne=\"http://schemas.microsoft.com/office/word/2006/wordml\" xmlns:wps=\"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\">\n        <w:body>\n          <w:p>\n            <w:pPr>\n              <w:spacing w:before=\"360\" w:after=\"0\" w:line=\"480\" w:lineRule=\"auto\"/>\n              <w:rPr>\n                <w:color w:val=\"70AD47\" w:themeColor=\"accent6\"/>\n                <w:sz w:val=\"28\"/>\n              </w:rPr>\n            </w:pPr>\n            <w:r>\n              <w:rPr>\n                <w:color w:val=\"70AD47\" w:themeColor=\"accent6\"/>\n                <w:sz w:val=\"28\"/>\n              </w:rPr>\n              <w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t>\n            </w:r>\n            <w:bookmarkStart w:id=\"0\" w:name=\"_GoBack\"/>\n            <w:bookmarkEnd w:id=\"0\"/>\n          </w:p>\n          <w:p/>\n          <w:sectPr>\n            <w:pgSz w:w=\"12240\" w:h=\"15840\"/>\n            <w:pgMar w:top=\"1440\" w:right=\"1440\" w:bottom=\"1440\" w:left=\"1440\" w:header=\"720\" w:footer=\"720\" w:gutter=\"0\"/>\n            <w:cols w:space=\"720\"/>\n          </w:sectPr>\n        </w:body>\n      </w:document>\n    </pkg:xmlData>\n</pkg:part>\n```\n\n----------------------------------------\n\nTITLE: Updating the Webpack Plugins Configuration for Dialog\nDESCRIPTION: This JavaScript code shows the complete `plugins` array in `webpack.config.js` after adding the `HtmlWebpackPlugin` configuration for the `popup.html` file. It includes configurations for cleaning the output directory, generating HTML files for the task pane, commands page, and the new popup dialog, and copying CSS assets.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_53\n\nLANGUAGE: js\nCODE:\n```\nplugins: [\n  new CleanWebpackPlugin(),\n  new HtmlWebpackPlugin({\n    filename: \"taskpane.html\",\n    template: \"./src/taskpane/taskpane.html\",\n    chunks: ['polyfill', 'taskpane']\n  }),\n  new CopyWebpackPlugin([\n  {\n    to: \"taskpane.css\",\n    from: \"./src/taskpane/taskpane.css\"\n  }\n  ]),\n  new HtmlWebpackPlugin({\n    filename: \"commands.html\",\n    template: \"./src/commands/commands.html\",\n    chunks: [\"polyfill\", \"commands\"]\n  }),\n  new HtmlWebpackPlugin({\n    filename: \"popup.html\",\n    template: \"./src/dialogs/popup.html\",\n    chunks: [\"polyfill\", \"popup\"]\n  })\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Production Environment in .ENV File\nDESCRIPTION: This snippet demonstrates setting the `NODE_ENV` variable to `production` within the `.ENV` file. This configuration is crucial for Node.js applications deployed to Azure, as it typically enables optimizations and disables development-specific behaviors. The description also advises storing secrets like client secrets in Azure Key Vault for production deployments instead of the `.ENV` file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/deploy-office-add-in-sso-to-azure.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nNODE_ENV=production\n```\n\n----------------------------------------\n\nTITLE: Defining ExchangeAppContext Data Contract with Newtonsoft.Json in C#\nDESCRIPTION: This class provides a C# data model for the 'appctx' claim present in Exchange identity tokens, using Newtonsoft.Json attributes for property mapping. The ExchangeAppContext class encapsulates three fields: ExchangeUid (user identifier), Version (token version), and MetadataUrl (URL for authentication metadata). Prerequisites are Newtonsoft.Json, and this class is meant to be deserialized from the appctx claim within the JWT token validation pipeline.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/validate-an-identity-token.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Newtonsoft.Json;\n\n/// <summary>\n/// Representation of the appctx claim in an Exchange user identity token.\n/// </summary>\npublic class ExchangeAppContext\n{\n    /// <summary>\n    /// The Exchange identifier for the user\n    /// </summary>\n    [JsonProperty(\"msexchuid\")]\n    public string ExchangeUid { get; set; }\n\n    /// <summary>\n    /// The token version\n    /// </summary>\n    public string Version { get; set; }\n\n    /// <summary>\n    /// The URL to download authentication metadata\n    /// </summary>\n    [JsonProperty(\"amurl\")]\n    public string MetadataUrl { get; set; }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Head Section for Office Add-in HTML\nDESCRIPTION: This HTML snippet defines the `<head>` section for the Home.html file of an Office Add-in. It includes metadata, the page title, links to CSS files (Office.css, App.css), and script references for jQuery, MicrosoftAjax.js, Office.js, and custom add-in logic (HelloProjectOData.js, SurfaceErrors.js). Comments indicate the recommendation to use CDN references for jQuery and Office.js during deployment for better performance.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n<title>Test ProjectData Service</title>\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"../Content/Office.css\" />\n\n<!-- Add your CSS styles to the following file. -->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"../Content/App.css\" />\n\n<!-- Use the CDN reference to the mini-version of jQuery when deploying your add-in. -->\n<!--<script src=\"http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js\"></script> -->\n<script src=\"../Scripts/jquery-1.7.1.js\"></script>\n\n<!-- Use the CDN reference to office.js when deploying your add-in. -->\n<!--<script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\"></script>-->\n\n<!-- Use the local script references for Office.js to enable offline debugging -->\n<script src=\"../Scripts/Office/1.0/MicrosoftAjax.js\"></script>\n<script src=\"../Scripts/Office/1.0/Office.js\"></script>\n\n<!-- Add your JavaScript to the following files. -->\n<script src=\"../Scripts/HelloProjectOData.js\"></script>\n<script src=\"../Scripts/SurfaceErrors.js\"></script>\n</head>\n<body>\n<!-- See the code in Step 3. -->\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'insertHTML' Function Stub in JavaScript\nDESCRIPTION: This JavaScript snippet defines an asynchronous function `insertHTML` which handles the insertion of HTML content. It uses the standard `Word.run` pattern for batching Word API calls. A `TODO1` comment marks the location where the specific commands for HTML insertion need to be implemented.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertHTML() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to insert a string of HTML.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Shared Unicode Conversion Method in a .NET Class Library - C#\nDESCRIPTION: This snippet provides the implementation of a reusable `GetUnicodeFromText` static method within a `CellOperations` class for inclusion in a .NET Framework class library. The method accepts a string input and returns a formatted string, listing each character alongside its Unicode value, designed for consumption by both VSTO and Office Add-ins. It requires only basic .NET and no third-party dependencies; expected input is a string, and output is a multiline string of character-to-Unicode mappings. The method does not handle null inputs, and clients should ensure parameters are valid.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CellOperations\\n{\\n    static public string GetUnicodeFromText(string value)\\n    {\\n        string result = \"\";\\n        foreach (char c in value)\\n        {\\n            int unicode = c;\\n    \\n            result += $\"{c}: {unicode}\\\\r\\\\n\";\\n        }\\n        return result;\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Body Content for Office Add-in UI HTML\nDESCRIPTION: This HTML snippet defines the `<body>` content for the Office Add-in's user interface. It includes divs for sectioning content, buttons to trigger OData actions (`setOdataUrl()`, `retrieveOData()`), spans and table cells (`<td>`) with unique `id` attributes (e.g., `projectDataEndPoint`, `AverageProjectCost`, `CurrentProjectCost`) used by jQuery to display data retrieved from the ProjectData service. It also includes a placeholder image (`NewLogo.png`) and a textarea (`odataText`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <div id=\"SectionContent\">\n    <div id=\"odataQueries\">\n        ODATA REST QUERY\n    </div>\n    <div id=\"odataInfo\">\n        <button class=\"button-wide\" onclick=\"setOdataUrl()\">Get ProjectData Endpoint</button>\n        <br /><br />\n        <span class=\"rest\" id=\"projectDataEndPoint\">Endpoint of the \n            <strong>ProjectData</strong> service</span>\n        <br />\n    </div>\n    <div id=\"compareProjectData\">\n        <button class=\"button-wide\" disabled=\"disabled\" id=\"compareProjects\"\n        onclick=\"retrieveOData()\">Compare All Projects</button>\n        <br />\n    </div>\n    </div>\n    <div id=\"corpInfo\">\n        <table class=\"infoTable\" aria-readonly=\"True\" style=\"width: 100%;\">\n            <tr>\n                <td class=\"heading_leftCol\"></td>\n                <td class=\"heading_midCol\"><strong>Average</strong></td>\n                <td class=\"heading_rightCol\"><strong>Current</strong></td>\n            </tr>\n            <tr>\n                <td class=\"row_leftCol\"><strong>Project Cost</strong></td>\n                <td class=\"row_midCol\" id=\"AverageProjectCost\">&amp;nbsp;</td>\n                <td class=\"row_rightCol\" id=\"CurrentProjectCost\">&amp;nbsp;</td>\n            </tr>\n            <tr>\n                <td class=\"row_leftCol\"><strong>Project Actual Cost</strong></td>\n                <td class=\"row_midCol\" id=\"AverageProjectActualCost\">&amp;nbsp;</td>\n                <td class=\"row_rightCol\" id=\"CurrentProjectActualCost\">&amp;nbsp;</td>\n            </tr>\n            <tr>\n                <td class=\"row_leftCol\"><strong>Project Work</strong></td>\n                <td class=\"row_midCol\" id=\"AverageProjectWork\">&amp;nbsp;</td>\n                <td class=\"row_rightCol\" id=\"CurrentProjectWork\">&amp;nbsp;</td>\n            </tr>\n            <tr>\n                <td class=\"row_leftCol\"><strong>Project % Complete</strong></td>\n                <td class=\"row_midCol\" id=\"AverageProjectPercentComplete\">&amp;nbsp;</td>\n                <td class=\"row_rightCol\" id=\"CurrentProjectPercentComplete\">&amp;nbsp;</td>\n            </tr>\n        </table>\n    </div>\n    <img alt=\"Corporation\" class=\"logo\" src=\"../../images/NewLogo.png\" />\n    <br />\n    <textarea id=\"odataText\" rows=\"12\" cols=\"40\"></textarea>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Managing Exchange Registration for Outlook Add-ins - PowerShell\nDESCRIPTION: Installs the ExchangeOnlineManagement module, sets the execution policy, and connects to Exchange Online within a PowerShell session. This is a prerequisite for listing and removing ghost Outlook add-ins directly from the user's Exchange mailbox. Dependencies include PowerShell with administrator privileges and access permissions. Inputs: None directly, but the session must be connected with the same user ID used for add-in development. Outputs: Establishes a remote Exchange Online session. Requires confirmation for module installs and policy setting.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/uninstall-add-in.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name ExchangeOnlineManagement -RequiredVersion 3.4.0\nSet-ExecutionPolicy RemoteSigned\nConnect-ExchangeOnline\n```\n\n----------------------------------------\n\nTITLE: Importing Base64 Image Data in JavaScript\nDESCRIPTION: This JavaScript code imports a variable named `base64Image` from a relative file path `../../base64Image.js`. This variable is expected to contain a Base64-encoded string representation of an image, which will be used later for insertion into the Word document.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { base64Image } from \"../../base64Image\";\n```\n\n----------------------------------------\n\nTITLE: Disabling On-Send Feature via Policy (Classic Outlook Web)\nDESCRIPTION: Retrieves a specific OWA mailbox policy (`OWAOnSendAddinAllUserPolicy`) and disables the on-send add-in feature by setting the `OnSendAddinsEnabled` flag to `$false`. This impacts all users assigned to this policy in classic Outlook on the web. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nGet-OWAMailboxPolicy OWAOnSendAddinAllUserPolicy | Set-OWAMailboxPolicy –OnSendAddinsEnabled:$false\n```\n\n----------------------------------------\n\nTITLE: Starting Add-in in Excel on the Web via Command Line (Non-VS Code)\nDESCRIPTION: Executes the 'start' script defined in package.json using npm, passing arguments to launch in Excel on the web and load a specific document from the provided URL. Replace `{url}` with the actual file URL. Requires Node.js, npm, a configured 'start' script capable of handling these arguments, and access to the specified online document.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start -- web --document {url}\n```\n\n----------------------------------------\n\nTITLE: Defining the 'insertTable' Function Stub in JavaScript\nDESCRIPTION: This JavaScript snippet defines an asynchronous function `insertTable` intended for inserting a table into the Word document. It follows the `Word.run` pattern. Two `TODO` comments indicate where code is needed: `TODO1` for getting a reference to the preceding paragraph and `TODO2` for creating and populating the table.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nasync function insertTable() {\n    await Word.run(async (context) => {\n\n        // TODO1: Queue commands to get a reference to the paragraph\n        //        that will precede the table.\n\n        // TODO2: Queue commands to create a table and populate it with data.\n\n        await context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target Dialects for Office Dictionary Add-in (XML)\nDESCRIPTION: This XML snippet demonstrates the usage of the `<TargetDialects>` element within an Office Add-in manifest. It contains multiple `<TargetDialect>` child elements, each specifying a regional language (e.g., 'EN-AU', 'EN-CA', 'EN-US') supported by the dictionary add-in, using RFC1766 language tags. This element is required for dictionary add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<TargetDialects>\n  <TargetDialect>EN-AU</TargetDialect>\n  <TargetDialect>EN-BZ</TargetDialect>\n  <TargetDialect>EN-CA</TargetDialect>\n  <TargetDialect>EN-029</TargetDialect>\n  <TargetDialect>EN-HK</TargetDialect>\n  <TargetDialect>EN-IN</TargetDialect>\n  <TargetDialect>EN-ID</TargetDialect>\n  <TargetDialect>EN-IE</TargetDialect>\n  <TargetDialect>EN-JM</TargetDialect>\n  <TargetDialect>EN-MY</TargetDialect>\n  <TargetDialect>EN-NZ</TargetDialect>\n  <TargetDialect>EN-PH</TargetDialect>\n  <TargetDialect>EN-SG</TargetDialect>\n  <TargetDialect>EN-ZA</TargetDialect>\n  <TargetDialect>EN-TT</TargetDialect>\n  <TargetDialect>EN-GB</TargetDialect>\n  <TargetDialect>EN-US</TargetDialect>\n  <TargetDialect>EN-ZW</TargetDialect>\n</TargetDialects>\n```\n\n----------------------------------------\n\nTITLE: Starting Add-in in Excel Desktop via Command Line (Non-VS Code)\nDESCRIPTION: Executes the 'start:desktop' script defined in package.json using npm. This command is intended to launch the Excel desktop application and sideload the Office Add-in for testing and debugging when not using VS Code, provided the script exists. Requires Node.js, npm, a configured 'start:desktop' script, and a local installation of Excel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:desktop\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server and Sideloading Add-in (npm)\nDESCRIPTION: This command line instruction uses npm to execute the 'start' script, typically defined in the project's package.json file. It starts the local web server for the Office Add-in development and often triggers the sideloading process to install or update the add-in in the target Office application (like Outlook).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Start Development Server and Sideload Add-in via npm script (Shell)\nDESCRIPTION: Executes the 'start' script defined in the project's package.json file, typically used to start the development server and sideload the Outlook add-in. This is mentioned as an alternative command to `npm start`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/sideload-outlook-add-ins-for-testing.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting and Sideloading Add-in (Desktop) in Command Line\nDESCRIPTION: This command-line instruction uses npm to run the `start` script. This command typically starts the local web server (if not already running) and automatically opens the specified Office client application (PowerPoint in this context) with the add-in sideloaded for testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server and Sideloading Outlook Add-in - Command Line\nDESCRIPTION: This snippet starts the local web server and sideloads your Outlook Add-in using npm. The 'npm start' script launches the development server and leverages your configuration to automatically sideload the add-in into Outlook. You must have Node.js, npm, and a correctly defined 'start' script in your project. Input: none required at runtime, but server will run until stopped manually. Output: add-in is hosted and available in Outlook clients for testing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/on-new-compose-events-walkthrough.md#_snippet_9\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Office Add-in Development Server and Sideloading (Command Line)\nDESCRIPTION: Shows the command `npm start` used to initiate the development environment for an Office add-in. Executing this command in the project's root directory typically compiles the add-in, starts a local web server to host the add-in files, and automatically sideloads the add-in into the target Office application (Outlook) for testing and debugging.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/append-on-send.md#_snippet_7\n\nLANGUAGE: commandline\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining JSON MIME Type for Azure Static Websites - Web.Config - XML\nDESCRIPTION: This XML file tells Azure's static website hosting to serve .json files with the correct MIME type. It must be saved as 'web.config' in the /src directory before building and deploying. Required dependency: The Azure Static Website host must support custom web.config files. Key parameters include the '.json' file extension and its mapping to 'application/json'. This allows browsers and Excel to correctly interpret JSON files (required for custom functions).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-add-in-vs-code.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\"?>\\n<configuration>\\n  <system.webServer>\\n    <staticContent>\\n      <mimeMap fileExtension=\\\".json\\\" mimeType=\\\"application/json\\\" />\\n    </staticContent>\\n  </system.webServer>\\n</configuration> \n```\n\n----------------------------------------\n\nTITLE: Setting Values on Unbounded Ranges in Excel JavaScript API - JavaScript\nDESCRIPTION: Attempts to assign a scalar value ('Due Date') to the values property of an unbounded range (here, columns 'A:B') using the Excel JavaScript API. This demonstrates that setting cell-level properties on unbounded ranges is not allowed, highlighting how the API enforces constraints to prevent requests that are too large to process. Requires an Excel context object and proper add-in framework initialization; will always result in an error when executed on unbounded ranges.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-unbounded.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Note: This code sample attempts to specify `values` for an unbounded range, which is not a valid request. The sample will return an error. \nlet range = context.workbook.worksheets.getActiveWorksheet().getRange('A:B');\nrange.values = 'Due Date';\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler for Change Font Button in JavaScript\nDESCRIPTION: This JavaScript snippet assigns an onclick event handler to the HTML button with the ID 'change-font'. When clicked, it calls the 'changeFont' function, wrapped within a 'tryCatch' helper function (assumed to be defined elsewhere). Requires the HTML button defined previously and the 'tryCatch' and 'changeFont' functions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"change-font\").onclick = () => tryCatch(changeFont);\n```\n\n----------------------------------------\n\nTITLE: Getting Active Project Document URL in JavaScript\nDESCRIPTION: Defines the `getDocumentUrl` function which retrieves the URL of the currently open project document using the synchronous `Office.context.document.url` property. It formats the URL with a prefix (\"Document path:\\r\\n\") and stores the result in the global `_docUrl` variable. This provides the path context for the active project.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// Get the path of the project in Project web app, which is in the form <>\\ProjectName .\nfunction getDocumentUrl() {\n    _docUrl = \"Document path:\\r\\n\" + Office.context.document.url;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the OfficeDefinitions XML Schema for Dictionary Add-ins (XML)\nDESCRIPTION: Provides the XSD schema (`OfficeDefinitions`) required for the XML response from a dictionary web service. This schema defines the structure including the `SeeMoreURL` and a list of up to three `Definition` elements, each with a maximum length of 400 characters. This structure is consumed by Office applications to display definitions in various UI elements.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xs:schema\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:xs=\"https://www.w3.org/2001/XMLSchema\"\n  targetNamespace=\"http://schemas.microsoft.com/contoso/OfficeDefinitions\"\n  xmlns=\"http://schemas.microsoft.com/contoso/OfficeDefinitions\">\n  <xs:element name=\"Result\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"SeeMoreURL\" type=\"xs:anyURI\"/>\n        <xs:element name=\"Definitions\" type=\"DefinitionListType\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n  <xs:complexType name=\"DefinitionListType\">\n    <xs:sequence>\n      <xs:element name=\"Definition\" maxOccurs=\"3\">\n        <xs:simpleType>\n          <xs:restriction base=\"xs:normalizedString\">\n            <xs:maxLength value=\"400\"/>\n          </xs:restriction>\n        </xs:simpleType>\n      </xs:element>\n    </xs:sequence>\n  </xs:complexType>\n</xs:schema>\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling On-Send Compliance for a Specific User (Modern/New Outlook)\nDESCRIPTION: Disables on-send compliance enforcement for a specific user (`joe@contoso.com`) by assigning them an OWA mailbox policy (`ContosoCorpOWAPolicy`) where the `OnSendAddinsEnabled` flag is presumably set to `$false` or not set. This cmdlet directly modifies the user's CAS mailbox settings in the context of modern Outlook on the web or new Outlook on Windows. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CASMailbox joe@contoso.com | Set-CASMailbox –OWAMailboxPolicy \"ContosoCorpOWAPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Querying ProjectData OData Service using jQuery AJAX in JavaScript\nDESCRIPTION: Implements the `retrieveOData` function to query the Project Server ProjectData OData service. It constructs the full REST URL using the global variables defined earlier. It uses jQuery's `ajax` method to perform an asynchronous GET request. Cross-origin resource sharing (CORS) is enabled via `$.support.cors = true;` for on-premises Project Server compatibility (not suitable for Project on the web). Request headers (Accept: application/json; odata=verbose) are set using `beforeSend`. The `complete` callback handles the response, displaying status information, the raw response text, and calling `parseODataResult` to process the JSON data. The `error` parameter specifies `getProjectDataErrorHandler` to handle AJAX errors, displaying them in the UI and using the `throwError` function.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Functions to get and parse the Project Server reporting data./\n\n// Get data about all projects on Project Server,\n// by using a REST query with the ajax method in jQuery.\nfunction retrieveOData() {\n    let restUrl = _odataUrl + PROJQUERY + QUERY_FILTER + QUERY_SELECT1 + QUERY_SELECT2;\n    let accept = \"application/json; odata=verbose\";\n    accept.toLocaleLowerCase();\n\n    // Enable cross-origin scripting (required by jQuery 1.5 and later).\n    // This does not work with Project on the web.\n    $.support.cors = true;\n\n    $.ajax({\n        url: restUrl,\n        type: \"GET\",\n        contentType: \"application/json\",\n        data: \"\",      // Empty string for the optional data.\n        //headers: { \"Accept\": accept },\n        beforeSend: function (xhr) {\n            xhr.setRequestHeader(\"ACCEPT\", accept);\n        },\n        complete: function (xhr, textStatus) {\n            // Create a message to display in the text box.\n            let message = \"\\r\\ntextStatus: \" + textStatus +\n                \"\\r\\nContentType: \" + xhr.getResponseHeader(\"Content-Type\") +\n                \"\\r\\nStatus: \" + xhr.status +\n                \"\\r\\nResponseText:\\r\\n\" + xhr.responseText;\n\n            // xhr.responseText is the result from an XmlHttpRequest, which\n            // contains the JSON response from the OData service.\n            parseODataResult(xhr.responseText, _projectUid);\n\n            // Write the document name, response header, status, and JSON to the odataText control.\n            $(\"#odataText\").text(_docUrl);\n            $(\"#odataText\").append(\"\\r\\nREST query:\\r\\n\" + restUrl);\n            $(\"#odataText\").append(message);\n\n            if (xhr.status != 200 &amp;&amp; xhr.status != 1223 &amp;&amp; xhr.status != 201) {\n                $(\"#odataInfo\").append(\"<div>\" + htmlEncode(restUrl) + \"</div>\");\n            }\n        },\n        error: getProjectDataErrorHandler\n    });\n}\n\nfunction getProjectDataErrorHandler(data, errorCode, errorMessage) {\n    $(\"#odataText\").text(\"Error code: \" + errorCode + \"\\r\\nError message: \\r\\n\"\n    + errorMessage);\n    throwError(errorCode, errorMessage);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML File Input for PowerPoint Selection\nDESCRIPTION: This HTML snippet creates a section with a paragraph instructing the user and a form containing a file input element (`<input type=\"file\">`). This allows the user to browse and select a local PowerPoint (.pptx) file.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/insert-slides-into-presentation.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<section>\n    <p>Select a PowerPoint presentation from which to insert slides</p>\n    <form>\n        <input type=\"file\" id=\"file\" />\n    </form>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Declaring ASP.NET Application Startup Handler in Markup (XML/C#)\nDESCRIPTION: This XML markup snippet, intended for Global.asax, specifies that the application inherits from the defined WebApiApplication C# class via the CodeBehind mechanism. Required by ASP.NET for proper initialization; no parameters or variable inputs. The Language attribute must match the language used (C#).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-vs.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<%@ Application Codebehind=\\\"Global.asax.cs\\\" Inherits=\\\"HelloWorldWeb.WebApiApplication\\\" Language=\\\"C#\\\" %>\\n\n```\n\n----------------------------------------\n\nTITLE: Running Office Add-ins with npm Command Line - Command Line\nDESCRIPTION: Demonstrates how to use the npm run command to start an Office Add-in for the web and target a specific document URL. This command depends on Node.js, npm, and the project configuration to support the 'start' script. The \\\"-- web --document {url}\\\" parameters specify the Office on the web platform and the target document. Replace {url} with the full document URL; on Mac, enclose {url} in single quotation marks, but do not do this on Windows. The command launches the add-in with the specified document in Office Online.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/start-web-sideload-instructions.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start -- web --document {url}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server (Mac) in Command Line\nDESCRIPTION: This command-line instruction uses npm to run the `dev-server` script defined in the project's `package.json`. It starts the local web server required for serving the add-in's files during development, specifically mentioned as a step for Mac users.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Building the Office Add-in Project (npm Command Line)\nDESCRIPTION: Invokes the build process for the Office Add-in project using npm scripts. The command `npm run build` must be issued in a shell in the project root. Prerequisite: Node.js, npm, and relevant project setup with build script. No input parameters, output is a compiled/built project. Meant for local development and deployment.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/share-data-and-events-between-custom-functions-and-the-task-pane-tutorial.md#_snippet_5\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Stopping the Office Add-in Development Server (npm Command Line)\nDESCRIPTION: Shuts down the dev server and uninstalls the add-in from Excel for the current project with `npm run stop`. Assumes the add-in was previously started using npm scripts, and npm is available in the environment. No parameters or outputs beyond reverting the dev state.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/share-data-and-events-between-custom-functions-and-the-task-pane-tutorial.md#_snippet_7\n\nLANGUAGE: command line\nCODE:\n```\nnpm run stop\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Webview (IE/Edge Legacy) for Office Add-in\nDESCRIPTION: Specifies the webview Office on Windows should use for a particular add-in, overriding the default. Run this `npx` command in the project root. Replace `<path-to-manifest>` with the path to the add-in's manifest file (e.g., `manifest.xml` or `manifest.json`) and `<webview>` with either `ie` (for Trident/Internet Explorer) or `edge-legacy` (for EdgeHTML/Edge Legacy). Using the `webview` switch requires the Microsoft 365 Beta Channel.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/use-legacy-edge-or-ie.md#_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\nnpx office-addin-dev-settings webview <path-to-manifest> <webview>\n```\n\nLANGUAGE: commandline\nCODE:\n```\nnpx office-addin-dev-settings webview manifest.xml ie\n```\n\nLANGUAGE: commandline\nCODE:\n```\nnpx office-addin-dev-settings webview manifest.json edge-legacy\n```\n\n----------------------------------------\n\nTITLE: Inserting Paragraph at Document Start in Word using JavaScript API - Markdown\nDESCRIPTION: This prompt instructs Copilot to provide code for adding a paragraph containing 'My paragraph' at the top of a Word document, leveraging the Word JavaScript API. Its focus is on automating document text insertion as part of add-in development. Works within Office.js ecosystem; Copilot will return context-appropriate code blocks.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nInsert a paragraph with the content *\\\"My paragraph\\\"* at the start \nof the document using the Word JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Inserting Comment into Word Document Selection - Markdown\nDESCRIPTION: This prompt tells Copilot to generate code for inserting a comment at the current selection within a Word document using the Word JavaScript API. Geared towards collaborative document scenarios using Office.js comment APIs. The generated code targets selection objects for annotation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nInsert a comment into the document selection using the Word JavaScript API\n```\n```\n\n----------------------------------------\n\nTITLE: Decoding and Inspecting an Exchange Identity Token Payload - JSON\nDESCRIPTION: This JSON snippet illustrates the decoded payload of an Exchange identity token as returned after validation. The fields include the audience (\\\"aud\\\"), issuer (\\\"iss\\\"), not before (\\\"nbf\\\"), expiration (\\\"exp\\\"), sender context (\\\"appctxsender\\\"), browser context flag, and a detailed app context (\\\"appctx\\\") with unique user ID (\\\"msexchuid\\\"), version, and metadata URL (\\\"amurl\\\"). This structure is required for user mapping operations in the backend, with 'msexchuid' and 'amurl' commonly concatenated to generate a reliable unique ID.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/authenticate-a-user-with-an-identity-token.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \n    \"aud\" : \"https://mailhost.contoso.com/IdentityTest.html\",\n    \"iss\" : \"00000002-0000-0ff1-ce00-000000000000@mailhost.contoso.com\",\n    \"nbf\" : \"1505749527\",\n    \"exp\" : \"1505778327\",\n    \"appctxsender\":\"00000002-0000-0ff1-ce00-000000000000@mailhost.context.com\",\n    \"isbrowserhostedapp\":\"true\",\n    \"appctx\" : {\n        \"msexchuid\" : \"53e925fa-76ba-45e1-be0f-4ef08b59d389\",\n        \"version\" : \"ExIdTok.V1\",\n        \"amurl\" : \"https://mailhost.contoso.com:443/autodiscover/metadata/json/1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Registry Keys for Office Add-in Auto-Installation (C#)\nDESCRIPTION: This C# code defines a method `WriteRegisterKeys` within a sample class to programmatically add the necessary registry keys for Office add-in auto-installation. It finds the latest Office version (16.0 or higher) under `HKEY_CURRENT_USER\\Software\\Microsoft\\Office`, constructs the appropriate path under `Wef\\AutoInstallAddins`, and sets the `AssetIds` value with the add-in's AppSource ID. It requires the `Microsoft.Win32` namespace.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Win32;\nusing System;\n\nnamespace SampleProject\n{\n    internal class WriteRegisterKeysSample\n    {\n        /// <summary>\n        /// This function writes information to the registry that will tell Office applications to install the web add-in.\n        /// </summary>\n        private void WriteRegisterKeys()\n        {\n            RegistryKey hklm = Registry.CurrentUser;\n            string basePath = @\"Software\\Microsoft\\Office\";\n            RegistryKey baseKey = Registry.CurrentUser.OpenSubKey(basePath);\n            string wxpName = \"Word\";  // Can be one of \"Word\", \"Powerpoint\", or \"Excel\".\n            string assetID = \"WA999999999\"; // Use the AppSource asset ID of your web add-in.\n            string appName = \"ContosoAddin\"; // Pass your own web add-in name.\n            const int supportedBuildMajorNumber = 16; // Major Office build numbers before 16 do not support web add-ins.\n            const string assetIdStr = \"AssetIDs\"; // A registry key to indicate that there is a web add-in to install along with the main app.\n\n            if (baseKey != null)\n            {\n                Version maxVersion = new Version(supportedBuildMajorNumber, 0); // Initial value for the max supported build version.\n                foreach (string subKeyName in baseKey.GetSubKeyNames())\n                {\n                    if (Version.TryParse(subKeyName, out Version version))\n                    {\n                        if (version > maxVersion)\n                        {\n                            maxVersion = version;\n                        }\n                    }\n                }\n\n                string maxVersionString = maxVersion.ToString();\n\n                // Create the path under AutoInstalledAddins to write the AssetIDs value.\n                RegistryKey AddInNameKey = hklm.CreateSubKey(String.Format(@\"Software\\Microsoft\\Office\\{0}\\Wef\\AutoInstallAddins\\{1}\\{2}\", maxVersionString, wxpName, appName));\n                if (AddInNameKey != null)\n                {\n                    AddInNameKey.SetValue(assetIdStr, assetID);\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling On-Send Feature for a Group-Specific Policy (Classic Outlook Web)\nDESCRIPTION: Retrieves the group-specific OWA mailbox policy (`FinanceOWAPolicy`) and enables the on-send add-in feature by setting `OnSendAddinsEnabled` to `$true`. This allows on-send add-ins for users assigned this policy within classic Outlook on the web. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nGet-OWAMailboxPolicy FinanceOWAPolicy | Set-OWAMailboxPolicy –OnSendAddinsEnabled:$true\n```\n\n----------------------------------------\n\nTITLE: Configuring Ribbon Tabs and Groups Placeholder in Manifest\nDESCRIPTION: This JSON snippet illustrates the structure within the 'tabs' array. It defines which built-in Office ribbon tab ('builtInTabID') the custom controls will be added to (e.g., 'TabDefault') and includes a placeholder for the 'groups' array where custom control groups are defined.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"tabs\": [\n    {\n        \"builtInTabID\": \"TabDefault\",\n        \"groups\": [\n            {\n                // properties omitted\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dictionary Settings in Office Add-in Manifest (XML)\nDESCRIPTION: This XML snippet defines dictionary-specific settings within an Office Add-in manifest file. It specifies the target language dialects supported by the dictionary, the URI for the dictionary's web service, and citation details (text, dictionary name, homepage URL) to be displayed.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<Dictionary>\n  <!--TargetDialects is the set of regional languages your dictionary contains. For example, if your\n      dictionary applies to Spanish (Mexico) and Spanish (Peru), but not Spanish (Spain), you can\n      specify that here. Do not put more than one language (for example, Spanish and English) here.\n      Publish separate languages as separate dictionaries. -->\n  <TargetDialects>\n    <TargetDialect>EN-AU</TargetDialect>\n    <TargetDialect>EN-BZ</TargetDialect>\n    <TargetDialect>EN-CA</TargetDialect>\n    <TargetDialect>EN-029</TargetDialect>\n    <TargetDialect>EN-HK</TargetDialect>\n    <TargetDialect>EN-IN</TargetDialect>\n    <TargetDialect>EN-ID</TargetDialect>\n    <TargetDialect>EN-IE</TargetDialect>\n    <TargetDialect>EN-JM</TargetDialect>\n    <TargetDialect>EN-MY</TargetDialect>\n    <TargetDialect>EN-NZ</TargetDialect>\n    <TargetDialect>EN-PH</TargetDialect>\n    <TargetDialect>EN-SG</TargetDialect>\n    <TargetDialect>EN-ZA</TargetDialect>\n    <TargetDialect>EN-TT</TargetDialect>\n    <TargetDialect>EN-GB</TargetDialect>\n    <TargetDialect>EN-US</TargetDialect>\n    <TargetDialect>EN-ZW</TargetDialect>\n  </TargetDialects>\n  <!--QueryUri is the address of this dictionary's XML web service (which is used to put definitions in\n      additional contexts, such as the spelling checker.)-->\n  <QueryUri DefaultValue=\"~remoteAppUrl/DictionaryWebService.asmx\"/>\n  <!--Citation Text, Dictionary Name, and Dictionary Home Page will be combined to form the citation\n      line (for example, this would produce \"Examples by: Contoso\", where \"Contoso\" is a hyperlink to\n      http://www.contoso.com).-->\n  <CitationText DefaultValue=\"Examples by: \" />\n  <DictionaryName DefaultValue=\"Contoso\" />\n  <DictionaryHomePage DefaultValue=\"http://www.contoso.com\" />\n</Dictionary>\n```\n\n----------------------------------------\n\nTITLE: Adding Button to Task Pane - HTML\nDESCRIPTION: This snippet adds a button element with the ID 'freeze-header' to the task pane's HTML file (`taskpane.html`). This button is intended to trigger the header freezing functionality when clicked.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/excel-tutorial.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"freeze-header\">Freeze Header</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties to Spreadsheet using Open XML SDK (C#)\nDESCRIPTION: This C# code snippet, typically found within a `SpreadsheetBuilder.cs` file, demonstrates how to add a custom name/value pair property (e.g., 'userName') to an Office document's Web Extension Property Bag using the Open XML SDK. The code is commented out by default and needs to be uncommented and potentially modified to include specific variables like `userName` and append the property to an existing property bag (`webExtensionPropertyBag1`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/pnp-open-in-excel.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// CUSTOM MODIFICATION BEGIN\n// Uncomment the following code to add your own custom name/value pair properties for the add-in.\n// We.WebExtensionProperty webExtensionProperty2 = new We.WebExtensionProperty() { Name = \"userName\", Value = userName };\n// webExtensionPropertyBag1.Append(webExtensionProperty2);\n// CUSTOM MODIFICATION END\n```\n\n----------------------------------------\n\nTITLE: Removing Inline Unicode Conversion Logic in VSTO Add-in (C#)\nDESCRIPTION: This C# code snippet demonstrates how the VSTO Add-in previously converted cell text to a Unicode character listing using a local for-each loop. It depended only on string concatenation and iteration, which has since been centralized in a shared library for maintainability. The logic processes a given 'cellValue', converting each character to its corresponding Unicode code, and appends the results to a 'result' string, outputting a string representation line by line.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n//Convert to Unicode listing\nstring result = \"\";\nforeach (char c in cellValue)\n{\n  int unicode = c;\n  result += $\"{c}: {unicode}\\r\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring formFactors array in unified app manifest - JSON\nDESCRIPTION: Shows how to include \\\"mobile\\\" as a supported form factor in the \\\"extensions.ribbons.requirements.formFactors\\\" array. Having \\\"mobile\\\" listed is required for enabling the add-in on Android and iOS clients. Additional form factors may be specified as well. Ensure this is added alongside any other target platforms to validate compatibility with mobile environments.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/mobile-event-based.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"formFactors\": [\n        \"mobile\",\n        <!-- Typically there will be other form factors listed. -->\n    ]\n```\n\n----------------------------------------\n\nTITLE: Specifying Supported Form Factors for Outlook Add-in Manifest (JSON)\nDESCRIPTION: This JSON snippet demonstrates configuring the `extensions.requirements.formFactors` property within the unified manifest, specifically for an Outlook add-in. It specifies that the add-in is designed to be installable on both `desktop` (including tablets) and `mobile` form factors. This property helps control the add-in's availability based on the device type.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-office-hosts-and-api-requirements-unified.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    {\n        \"requirements\": {\n            ...\n            \"formFactors\": [\n                \"desktop\",\n                \"mobile\"\n            ]\n        },\n        ...\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Styling the Outlook Add-in Task Pane with CSS\nDESCRIPTION: This CSS snippet stylizes the task pane for the Outlook add-in. It ensures the HTML and body fill the viewport, applies word-breaking to property value cells for better handling of long texts, and sets margin spacing for the main content section. No external dependencies are required. The selectors align with the previously defined HTML structure and target standard HTML elements and class names used in the add-in's markup.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/outlook-quickstart-vs.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\nhtml,\\nbody {\\n    width: 100%;\\n    height: 100%;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\ntd.prop-val {\\n    word-break: break-all;\\n}\\n\\n.content-main {\\n    margin: 10px;\\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Office Add-in to Add-in Store - Markdown\nDESCRIPTION: A prompt for Copilot to outline the procedure to submit and distribute a developed Office JavaScript Add-in to the public add-in store. The output will summarize packaging, compliance checks, and submission steps, facilitating add-in marketplace publishing.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_21\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nTell me how to deploy and distribute the local Office JavaScript \nadd-in code to the *add-in store* after development. Provide the \nsteps to follow.\n```\n```\n\n----------------------------------------\n\nTITLE: Outputting Unicode Conversion Results Using Shared Library in VSTO Add-in (C#)\nDESCRIPTION: This line in C# replaces previous inline logic by delegating Unicode conversion to the shared class library. This improves modularity and eases future updates. It uses the static method 'GetUnicodeFromText' from 'CellAnalyzerSharedLibrary.CellOperations' to process a provided 'cellValue', then assigns the processed string to the 'txtResult' UI element. Prerequisite: reference to CellAnalyzerSharedLibrary project.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/migrate-vsto-to-office-add-in-shared-code-library-tutorial.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n//Output the result\ntxtResult.Text = CellAnalyzerSharedLibrary.CellOperations.GetUnicodeFromText(cellValue);\n```\n\n----------------------------------------\n\nTITLE: Disabling Runtime Logging - Command Line\nDESCRIPTION: Disables runtime logging for Office Add-ins via the office-addin-dev-settings npm CLI. No parameters are required. Useful for restoring normal performance after debugging, as logging can have performance impacts.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/runtime-logging.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-dev-settings runtime-log --disable\n```\n\n----------------------------------------\n\nTITLE: Adding an 'Insert HTML' Button in HTML\nDESCRIPTION: This HTML snippet adds a button with the ID 'insert-html' and the class 'ms-Button' to the task pane's HTML structure. This button is intended to trigger the HTML insertion functionality when clicked. It's placed after the 'insert-image' button.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/word-tutorial.md#_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"insert-html\">Insert HTML</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrally Deployed Add-in Reference in Excel via Open XML SDK (C#)\nDESCRIPTION: This C# snippet illustrates an alternative configuration using the Open XML SDK for embedding an Office Add-in that is deployed via Central Deployment rather than Microsoft AppSource. It creates `WebExtensionStoreReference` objects using placeholders for the add-in's specific GUID (`<Your add-in GUID>`) and `Version`. The `StoreType` and `Store` are set to \"excatalog\" to indicate central deployment. A second reference (potentially for AppSource fallback or compatibility) with `StoreType` \"omex\" is also created and appended to a list (`webExtensionReferenceList1`).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/pnp-open-in-excel.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nWe.WebExtensionStoreReference webExtensionStoreReference1 = new We.WebExtensionStoreReference() { Id = \"<Your add-in GUID>\", Version = \"<Your version>\", Store = \"excatalog\", StoreType = \"excatalog\" };\nWe.WebExtensionStoreReference webExtensionStoreReference2 = new We.WebExtensionStoreReference() { Id = \"<Your add-in GUID>\", Version = \"<Your version>\", Store = \"omex\", StoreType = \"omex\" };            \nwebExtensionReferenceList1.Append(webExtensionStoreReference2);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Exchange Online using PowerShell\nDESCRIPTION: Initiates a connection to the Exchange Online service. It prompts the user to sign in with their Microsoft 365 administrator credentials. This connection is necessary to run subsequent Exchange Online cmdlets.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/turn-exchange-tokens-on-off.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-ExchangeOnline\n```\n\n----------------------------------------\n\nTITLE: Stopping the Standalone Add-in Development Server - Command Line\nDESCRIPTION: Stops the Office Add-in development server and cleanly uninstalls the add-in from the Office client. Run this command from the project root after completing development or when you need to shut down the local service.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/overview/create-an-office-add-in-from-script-lab.md#_snippet_5\n\nLANGUAGE: command line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Excel Add-in Manifest Elements (XML)\nDESCRIPTION: This XML code snippet demonstrates how to update essential fields in the Excel Web Add-in manifest file. It sets the provider name, default locale, display name, and description, all of which are important for proper identification and presentation of the add-in in the Office UI and the store. Required dependencies include a valid Office Add-in manifest schema, and the parameters such as 'ProviderName', 'DisplayName DefaultValue', and 'Description DefaultValue' should be tailored to your project and organization. Inputs are static XML values, and no outputs are produced other than correct configuration; incorrect manifest entries may lead to add-in registration or display issues.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/excel-quickstart-content.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n...\n<ProviderName>John Doe</ProviderName>\n<DefaultLocale>en-US</DefaultLocale>\n<!-- The display name of your add-in. Used on the store and various places of the Office UI such as the add-ins dialog. -->\n<DisplayName DefaultValue=\"My Office Add-in\" />\n<Description DefaultValue=\"A content add-in for Excel.\"/>\n...\n```\n\n----------------------------------------\n\nTITLE: Setting HasPrivacyLink Registry Value (C#)\nDESCRIPTION: This C# code snippet shows the line needed to set the `HasPrivacyLink` registry value. It uses the `SetValue` method on a `RegistryKey` object (assumed to be `AddInNameKey` from the main C# example) to write the value `1`, using the previously defined `hasPrivacyLinkStr` constant. This should be added within the `WriteRegisterKeys` method after setting the `AssetIds` value.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// Set this value if the Privacy Consent has been shown on the main app installation program, this is required for a silent installation of the web add-in.\nAddInNameKey.SetValue(hasPrivacyLinkStr, 1);\n```\n\n----------------------------------------\n\nTITLE: Updating Add-in Description in Add-in Only Manifest (XML)\nDESCRIPTION: This XML snippet shows how to update the `<Description>` element's `DefaultValue` attribute in the `manifest.xml` file for an Outlook add-in using the add-in only manifest format. It sets the add-in's description to \"Allows users to access their GitHub gists.\"\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<Description DefaultValue=\"Allows users to access their GitHub gists.\"/>\n```\n```\n\n----------------------------------------\n\nTITLE: Example Registry Key for Auto-Installing a Word Add-in (Registry Format)\nDESCRIPTION: This snippet provides a concrete example of the registry key structure for auto-installing an Office web add-in. It shows the configuration for an add-in named 'ContosoAdd-in' targeting Word, using the placeholder AppSource asset ID 'WA999999999'. This entry under `HKEY_CURRENT_USER` directs Word 16.0+ to install the specified add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_7\n\nLANGUAGE: reg\nCODE:\n```\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Wef\\AutoInstallAddins\\Word\\ContosoAdd-in] \n\"AssetIds\"=\"WA999999999\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Office Add-in Code to Organization - Markdown\nDESCRIPTION: A Copilot prompt that instructs on the steps to deploy/distribute the Office JavaScript Add-in to all employees in an organization post-development. Guidance will include deployment methods, permissions, and necessary procedural steps but no code, as focus is on process.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_20\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nTell me how to deploy and distribute the local Office JavaScript \nadd-in code to *all employees in my organization* after \ndevelopment. Provide the steps to follow.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Signed Data for JWT Signature Verification (Conceptual)\nDESCRIPTION: Specifies the portion of the original encoded JWT string that constitutes the signed data used for signature verification. This consists of the base64 URL-encoded header and payload concatenated with a period in between.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/validate-an-identity-token.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{header}.{payload}\n```\n\n----------------------------------------\n\nTITLE: Removing Runtime Logging Preference on Mac - Command Line\nDESCRIPTION: Deletes the runtime logging preference for the specified Office host on Mac, disabling logging. Replace <bundle id> with the correct Office host bundle identifier. This is necessary after finishing debugging to restore normal settings.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/runtime-logging.md#_snippet_7\n\nLANGUAGE: command line\nCODE:\n```\ndefaults delete <bundle id> CEFRuntimeLoggingFile\n```\n\n----------------------------------------\n\nTITLE: Turning On Legacy Exchange Tokens with PowerShell - PowerShell\nDESCRIPTION: This PowerShell snippet enables legacy Exchange tokens by running Set-AuthenticationPolicy with the -AllowLegacyExchangeTokens parameter. The action is usually performed after identifying that business-critical add-ins broke following token deactivation. Like the counterpart command to block tokens, it requires administrator rights and targets a tenant-wide policy given by -Identity. Token re-enablement takes approximately 24 hours to propagate to all users.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/faq-nested-app-auth-outlook-legacy-tokens.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AuthenticationPolicy –AllowLegacyExchangeTokens -Identity \"LegacyExchangeTokens\"\n```\n\n----------------------------------------\n\nTITLE: Importing File into Word Document from Base64 - Markdown\nDESCRIPTION: A Copilot prompt guiding the import of a local file (as base64) as a template into the current document, using the Word JavaScript insertFileFromBase64 API. Supportive for template-based document workflows within Office.js; requires a base64-encoded file as input for the insertion API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nImport a file from local storage as a template to the current\ndocument using the Word JavaScript insertFileFromBase64 API.\n```\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Project via NPM Script - Command Line\nDESCRIPTION: This command recompiles the project and rebuilds all assets using the defined npm build script. It assumes a valid package.json exists with an appropriate 'build' script entry, and that Node.js and npm are installed. No input parameters are needed; output will be logs from the build process or any associated errors. This is required for changes to scripts or markup to take effect in the built add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_28\n\nLANGUAGE: Command Line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Importing the ExchangeOnlineManagement Module in PowerShell\nDESCRIPTION: Imports the ExchangeOnlineManagement module into the current PowerShell session. This module is required to connect to and manage Exchange Online settings.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/turn-exchange-tokens-on-off.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name ExchangeOnlineManagement\n```\n\n----------------------------------------\n\nTITLE: Disabling On-Send Compliance via Policy (Modern/New Outlook)\nDESCRIPTION: Retrieves a specific OWA mailbox policy (`OWAOnSendAddinAllUserPolicy`) and disables the on-send add-in compliance feature by setting the `OnSendAddinsEnabled` flag to `$false`. This affects all users currently assigned to this policy in modern Outlook on the web or new Outlook on Windows. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nGet-OWAMailboxPolicy OWAOnSendAddinAllUserPolicy | Set-OWAMailboxPolicy –OnSendAddinsEnabled:$false\n```\n\n----------------------------------------\n\nTITLE: Specifying the Dictionary Home Page URL for Citations (XML)\nDESCRIPTION: This XML snippet illustrates the `<DictionaryHomePage>` element within an Office Add-in manifest's `<Dictionary>` section. The `DefaultValue` attribute defines the URL (e.g., 'https://www.bing.com') that the dictionary name (specified by `<DictionaryName>`) will link to in the citation line. Localization is supported.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<DictionaryHomePage DefaultValue=\"https://www.bing.com\" />\n```\n\n----------------------------------------\n\nTITLE: Inserting Line Chart into Excel Worksheet using Data - Markdown\nDESCRIPTION: Generates a Copilot prompt to insert a line chart entitled 'My chart' on the current worksheet, based on data from range A1:B3, using the Excel JavaScript API. Useful for automating chart creation via Office.js. Expects parameters defining data range and chart title; Copilot will produce sample code for end-to-end operation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nInsert a line chart titled *\\\"My chart\\\"* into the current worksheet \nusing the data *in the range A1:B3* using the Excel JavaScript API.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Office Word Add-in for Document Template Import - Markdown\nDESCRIPTION: This copilot prompt instructs Copilot to guide users through generating an Office JavaScript add-in for Word, with the ability to import a document as a template. The output should include stepwise instructions and sample code for relevant files, with special focus on Visual Studio Code integration. No external libraries beyond Office.js are implied; relevant for template-based document automation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/resources/resources-github-copilot-prompt-library.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n```code\nCreate an Office JavaScript add-in for *Word* to *import a \ndocument as a template*. List the steps to follow in *Visual \nStudio Code* to create the add-in and insert code snippets in \nthe correct files.\n```\n```\n\n----------------------------------------\n\nTITLE: Example XML Response Conforming to OfficeDefinitions Schema (XML)\nDESCRIPTION: Illustrates a sample XML response structure that adheres to the `OfficeDefinitions` schema. It includes a `SeeMoreURL` linking to a search results page and three placeholder `Definition` elements for the word \"example\". This format is expected by the Office application when receiving results from the dictionary web service.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Result xmlns=\"http://schemas.microsoft.com/contoso/OfficeDefinitions\">\n  <SeeMoreURL xmlns=\"\">https://www.bing.com/search?q=example</SeeMoreURL>\n  <Definitions xmlns=\"\">\n    <Definition>Definition1</Definition>\n    <Definition>Definition2</Definition>\n    <Definition>Definition3</Definition>\n  </Definitions>\n </Result>\n\n```\n```\n\n----------------------------------------\n\nTITLE: Locating the Published Add-in Manifest File in Visual Studio\nDESCRIPTION: This example file path shows the default directory structure where the Office Add-in manifest files are located after publishing the add-in project using Visual Studio 2019. The manifest is found within the 'OfficeAppManifests' subfolder inside the project's 'app.publish' directory, typically under the user's profile and project structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/package-your-add-in-using-visual-studio.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n%UserProfile%\\Documents\\Visual Studio 2019\\Projects\\MyApp\\bin\\Debug\\app.publish\\OfficeAppManifests\n```\n\n----------------------------------------\n\nTITLE: Sample Output: Range Values as JSON - Excel JavaScript API - JSON\nDESCRIPTION: Displays the raw cell values for the range B2:E6, including both header and data rows. Used as sample output for the previous snippet, showing how values are structured as JSON arrays. Outputs cell contents as a 2D array; formula cells are represented by their evaluated result.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-set-get-values.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    [\n        \"Product\",\n        \"Qty\",\n        \"Unit Price\",\n        \"Total Price\"\n    ],\n    [\n        \"Almonds\",\n        2,\n        7.5,\n        15\n    ],\n    [\n        \"Coffee\",\n        1,\n        34.5,\n        34.5\n    ],\n    [\n        \"Chocolate\",\n        5,\n        9.56,\n        47.8\n    ],\n    [\n        \"\",\n        \"\",\n        \"\",\n        97.3\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Show Help for Runtime Logging Command - Command Line\nDESCRIPTION: Displays built-in command-line help for the runtime-log option within the office-addin-dev-settings CLI. No other dependencies beyond Node.js and office-addin-dev-settings. Useful to see available flags and their usage.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/runtime-logging.md#_snippet_4\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-dev-settings runtime-log --help\n```\n\n----------------------------------------\n\nTITLE: Sample Installation Link for Script Lab Add-in (Excel Web, URL Example, Plaintext)\nDESCRIPTION: This snippet is a concrete instantiation of the Office add-in installation link using the earlier URL template, targeting Excel on the web for the Script Lab add-in. The URL includes sample values for required parameters, such as the web endpoint ('linkid=2261819'), the AppSource listing ID, and the URL-encoded add-in name. This is a shareable example that developers can model their own links after, substituting their add-in-specific AppSource data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/publish-office-add-ins-to-appsource.md#_snippet_2\n\nLANGUAGE: URL Example\nCODE:\n```\nhttps://go.microsoft.com/fwlink/?linkid=2261819&templateid=WA104380862&templatetitle=Script%20Lab,%20a%20Microsoft%20Garage%20project\n```\n\n----------------------------------------\n\nTITLE: Applying Office Add-in Protocol Handler Trust via Registry (REG/Text)\nDESCRIPTION: This sample .REG file demonstrates the registry structure used to configure trust for Office Add-in protocol handlers directly. It shows creating REG_SZ values under `HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Office\\16.0\\WEF\\ProtocolHandlers\\[add-in id]`, where the value name is the protocol (e.g., 'protocol1', 'protocol2') and the data is either 'Allow' or 'Block'. This method reflects the result of applying the corresponding Group Policy but can be used for manual configuration or scripting.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/custom-protocol-handler.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nWindows Registry Editor Version 5.00 \n\n[HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Office\\16.0\\WEF\\ProtocolHandlers] \n \n[HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Office\\16.0\\WEF\\ProtocolHandlers\\[add-in id]] \n\"protocol1\"=\"Allow\" \n\"protocol2\"=\"Block\" \n\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Name in Add-in Only Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates updating the `<ProviderName>` element in the `manifest.xml` file for an Outlook add-in using the add-in only manifest format. It replaces the default placeholder with a specific company name, like \"Contoso\".\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<ProviderName>Contoso</ProviderName>\n```\n```\n\n----------------------------------------\n\nTITLE: Staging and Committing Changes in Git - Bash\nDESCRIPTION: This pair of Bash commands stages and commits all new and modified files in the current repository. 'git add .' stages every changed file recursively. 'git commit -v -a -m \"<Describe the changes made in this commit>\"' creates a commit with a descriptive message provided inline. The optional '-v' (verbose) switch echoes the commit diff, while '-a' includes all tracked files. These commands should be run in the repository root after making modifications.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -v -a -m \"<Describe the changes made in this commit>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Group Policy for Office Add-in Protocol Handlers (ADMX/XML)\nDESCRIPTION: This ADMX file defines the structure for a Group Policy setting that allows administrators to manage trust for custom protocol handlers associated with a specific Office Add-in identified by '[add-in id]'. It targets the registry key `Software\\Policies\\Microsoft\\Office\\16.0\\WEF\\ProtocolHandlers\\[add-in id]` and uses a list box (`L_ProtocolsListBox`) for specifying protocol names and their corresponding allow/block status. Requires Group Policy Management Console (GPMC) for deployment on Windows 7 and later.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/custom-protocol-handler.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-16\"?> \n\n<policyDefinitions xmlns=\"http://www.microsoft.com/GroupPolicy/PolicyDefinitions\" revision=\"1.0\" schemaVersion=\"1.0\"> \n  <policyNamespaces> \n    <target prefix=\"osf16\" namespace=\"osf16.Office.Microsoft.Policies.Windows\" /> \n    <using prefix=\"windows\" namespace=\"Microsoft.Policies.Windows\" /> \n  </policyNamespaces> \n  <supersededAdm fileName=\"osf16\" /> \n  <resources minRequiredRevision=\"1.0\" /> \n  <categories> \n    <category name=\"L_MicrosoftOfficeAddins\" displayName=\"$(string.L_MicrosoftOfficeAddins)\" /> \n    <category name=\"L_ProtocolHandlers\" displayName=\"$(string.L_ProtocolHandlers)\"> \n      <parentCategory ref=\"L_MicrosoftOfficeAddins\" /> \n    </category> \n  </categories> \n  <policies> \n    <!-- Protocol ListBox --> \n    <policy \n      name=\"L_Protocols\" \n      class=\"Machine\" \n      displayName=\"$(string.L_Protocols)\" \n      explainText=\"$(string.L_ProtocolsExplain)\" \n      key=\"Software\\Policies\\Microsoft\\Office\\16.0\\WEF\\ProtocolHandlers\\[add-in id]\" \n      presentation=\"$(presentation.L_CustomProtocolTaskpaneProtocols)\"> \n      <parentCategory ref=\"L_ProtocolHandlers\" /> \n      <supportedOn ref=\"windows:SUPPORTED_Windows7\" /> \n      <elements> \n        <list id=\"L_ProtocolsListBox\" explicitValue=\"true\" additive=\"true\"></list> \n      </elements>\n    </policy> \n  </policies>\n</policyDefinitions> \n```\n\n----------------------------------------\n\nTITLE: Checking out a Branch in Git\nDESCRIPTION: This command switches the current working branch to `X2`. It updates the files in the local working directory to match the state of the `X2` branch. This is used after creating a new branch to start working on it or to verify its contents.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout X2\n```\n\n----------------------------------------\n\nTITLE: Constructing EWS GetAttachment SOAP Request in C#\nDESCRIPTION: This code defines a constant string representing the SOAP request XML needed to execute a GetAttachment operation against Exchange Web Services (EWS). The string is formatted to insert an attachment ID at runtime using String.Format, enabling dynamic requests for specific attachment resources. The XML includes necessary namespaces and structure for EWS, and is designed to be injected into an HTTP POST body during the web service call.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-attachments-of-an-outlook-item.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nprivate const string GetAttachmentSoapRequest =\n@\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n<soap:Envelope xmlns:xsi=\\\"https://www.w3.org/2001/XMLSchema-instance\\\"\nxmlns:xsd=\\\"https://www.w3.org/2001/XMLSchema\\\"\nxmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\nxmlns:t=\\\"http://schemas.microsoft.com/exchange/services/2006/types\\\">\\n<soap:Header>\\n<t:RequestServerVersion Version=\\\"Exchange2016\\\" />\\n</soap:Header>\\n  <soap:Body>\\n    <GetAttachment xmlns=\\\"http://schemas.microsoft.com/exchange/services/2006/messages\\\"\\n    xmlns:t=\\\"http://schemas.microsoft.com/exchange/services/2006/types\\\">\\n      <AttachmentShape/>\\n      <AttachmentIds>\\n        <t:AttachmentId Id=\\\"{0}\\\"/>\\n      </AttachmentIds>\\n    </GetAttachment>\\n  </soap:Body>\\n</soap:Envelope>\";\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory via Command Line\nDESCRIPTION: This command-line instruction changes the current working directory to the 'My Office Add-in' folder, which was created by the Yeoman generator. This step is necessary before running subsequent commands like starting the development server, as these commands typically need to be executed from the project's root directory.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/excel-quickstart-jquery.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating JWT Structure (Conceptual)\nDESCRIPTION: Shows the standard three-part structure of a JSON Web Token (JWT): header, payload, and signature, separated by periods. This represents the format of the encoded token string returned by `getUserIdentityTokenAsync` before base64 decoding.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/validate-an-identity-token.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{header}.{payload}.{signature}\n```\n\n----------------------------------------\n\nTITLE: Identifying Base API Requirement Set for Outlook Mobile Add-ins (Configuration/Text)\nDESCRIPTION: Specifies 'Mailbox requirement set 1.5' as the baseline API set generally supported by Outlook mobile add-ins. While this is the base level, developers should note that additional APIs from later requirement sets may also be supported and should consult specific documentation for details.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/add-mobile-support.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nMailbox requirement set 1.5\n```\n\n----------------------------------------\n\nTITLE: Starting Add-in via Default Command Line Script (Non-VS Code)\nDESCRIPTION: Executes the default 'start' script defined in package.json using npm. This command serves as an alternative to 'start:desktop' if that script is missing, typically starting a development server or launching the add-in in a default environment for command-line based debugging. Requires Node.js, npm, and a configured 'start' script.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Setting Application Name Placeholder\nDESCRIPTION: This snippet shows the placeholder name used during the Azure app registration process. Replace `<add-in-name>` with the actual desired name for your Office Add-in application registration.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/includes/register-sso-add-in-aad-v2-include.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<add-in-name>\n```\n\n----------------------------------------\n\nTITLE: Querying ProjectData Service: Example JSON Response\nDESCRIPTION: This snippet shows an example JSON response received from querying the ProjectData OData service endpoint (`/_api/ProjectData/Projects`). It demonstrates the structure of the data returned, including metadata and specific project properties like ProjectId, ProjectName, ProjectCost, ProjectWork, ProjectPercentCompleted, and ProjectActualCost for multiple projects. This output is used within the 'Hello ProjectData' add-in for display and analysis, and serves as a reference for debugging data parsing logic.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"d\": {\n        \"results\": [\n            {\n                \"__metadata\": {\n                    \"id\": \"http://sphvm-37189/pwa/_api/ProjectData/Projects(guid'ce3d0d65-3904-e211-96cd-00155d157123')\",\n                    \"uri\": \"http://sphvm-37189/pwa/_api/ProjectData/Projects(guid'ce3d0d65-3904-e211-96cd-00155d157123')\",\n                    \"type\": \"ReportingData.Project\"\n                },\n                \"ProjectId\": \"ce3d0d65-3904-e211-96cd-00155d157123\",\n                \"ProjectActualCost\": \"0.000000\",\n                \"ProjectCost\": \"0.000000\",\n                \"ProjectName\": \"Task list created in PWA\",\n                \"ProjectPercentCompleted\": 0,\n                \"ProjectWork\": \"16.000000\"\n            },\n            {\n                \"__metadata\": {\n                    \"id\": \"http://sphvm-37189/pwa/_api/ProjectData/Projects(guid'c31023fc-1404-e211-86b2-3c075433b7bd')\",\n                    \"uri\": \"http://sphvm-37189/pwa/_api/ProjectData/Projects(guid'c31023fc-1404-e211-86b2-3c075433b7bd')\",\n                    \"type\": \"ReportingData.Project\"\n                },\n                \"ProjectId\": \"c31023fc-1404-e211-86b2-3c075433b7bd\",\n                \"ProjectActualCost\": \"700.000000\",\n                \"ProjectCost\": \"2400.000000\",\n                \"ProjectName\": \"WinProj test 2\",\n                \"ProjectPercentCompleted\": 29,\n                \"ProjectWork\": \"48.000000\"\n            },\n            {\n                \"__metadata\": {\n                    \"id\": \"http://sphvm-37189/pwa/_api/ProjectData/Projects(guid'dc81fbb2-b801-e211-9d2a-3c075433b7bd')\",\n                    \"uri\": \"http://sphvm-37189/pwa/_api/ProjectData/Projects(guid'dc81fbb2-b801-e211-9d2a-3c075433b7bd')\",\n                    \"type\": \"ReportingData.Project\"\n                },\n                \"ProjectId\": \"dc81fbb2-b801-e211-9d2a-3c075433b7bd\",\n                \"ProjectActualCost\": \"1900.000000\",\n                \"ProjectCost\": \"5200.000000\",\n                \"ProjectName\": \"WinProj test1\",\n                \"ProjectPercentCompleted\": 37,\n                \"ProjectWork\": \"104.000000\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Range copyFrom Method Definition (TypeScript)\nDESCRIPTION: This TypeScript signature defines the full Range.copyFrom method interface, specifying its source range parameter, copyType, skipBlanks, and transpose options for clarity when implementing in TypeScript projects. Dependencies: Office.js typings. Inputs: Range | RangeAreas | string (source), optional parameters for copyType, skipBlanks, and transpose. Output: None (void function, side effect: performs copy operation). Limitations: For reference/documentation; not a runnable code example.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-cut-copy-paste.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ncopyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Defining getSpecialCells Method Signature with TypeScript\nDESCRIPTION: This TypeScript snippet provides the method signature for Range.getSpecialCells, indicating how to call it with required and optional parameters. The method returns a RangeAreas object for special cell selection in Excel, and is accessed on the Range object. No runtime functionality; just a type declaration. Requires Excel JavaScript API and TypeScript development context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-special-cells.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Body of Selected Outlook Item in Explorer - Outlook Object Model (VBA)\nDESCRIPTION: This VBA snippet is used within the Immediate Window in the Visual Basic Editor of Outlook (classic Windows) to display the HTML body of the first selected message or appointment in the Outlook explorer window. It accesses the ActiveExplorer object and retrieves the HTMLBody property. Ensure macros are enabled and the Developer tab is available before use. The output is the HTML content of the currently selected item.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/troubleshoot-outlook-add-in-activation.md#_snippet_2\n\nLANGUAGE: VBA\nCODE:\n```\n?ActiveExplorer.Selection.Item(1).HTMLBody\n```\n\n----------------------------------------\n\nTITLE: Configuring the ASMX Web Service Markup (XML/ASP.NET)\nDESCRIPTION: Shows the required markup for the `.asmx` file (`DictionaryWebService.asmx`). This directive links the markup file to its C# code-behind (`DictionaryWebService.asmx.cs`) and specifies the `WebService` class containing the implementation logic, enabling the ASP.NET runtime to host the service.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/word/dictionary-task-pane-add-ins.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n```XML\n<%@ WebService Language=\"C#\" CodeBehind=\"DictionaryWebService.asmx.cs\" Class=\"WebService\" %>\n```\n```\n\n----------------------------------------\n\nTITLE: Switching to Main Branch in Git\nDESCRIPTION: This command switches the current working branch to `main`. This is performed as the first step before deleting another branch, as Git prevents the deletion of the currently checked-out branch.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/Contributing.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Add-in Testing on Mac using Command Line\nDESCRIPTION: This command line instruction is specific to Mac users. It runs the `dev-server` script, typically defined in the project's `package.json`, to start the local web server required for testing the Office Add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Command Line\nDESCRIPTION: This command line instruction changes the current directory to the \"My Office Add-in\" folder. This step is necessary to ensure subsequent commands like `npm start` or `npm run dev-server` are executed from the project's root directory.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_19\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Local Development Server\nDESCRIPTION: This command line snippet shows the command `npm stop` used to terminate the local web server that was previously started with `npm run dev-server`. This is typically done when development or testing is complete.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/onenote-quickstart.md#_snippet_3\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Changing to Add-in Project Directory with Command Line\nDESCRIPTION: Navigates to the root folder of the newly created Excel custom functions add-in by using the cd command. This step is required to ensure all subsequent npm operations execute in the correct project context. Input: None. Output: Working directory switched to the add-in folder. Requires the folder to exist, typically created by the Yeoman generator.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/excel-custom-functions-quickstart.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My custom functions add-in\"\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Markdown Gist Content for Testing\nDESCRIPTION: Provides sample Markdown content, including a header, text, and a JSON code block, intended to be saved as a public GitHub gist named `test.md`. This gist will be used later in the tutorial to test the add-in's functionality for inserting Markdown content.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n# Hello World\n\nThis is content converted from Markdown!\n\nHere's a JSON sample:\n\n  ```json\n  {\n    \"foo\": \"bar\"\n  }\n  ```\n```\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Add-in Project Root - Command Line\nDESCRIPTION: This command-line snippet navigates to the root directory of the newly created Outlook Add-in project, enabling the user to perform project-specific actions such as building, running, or editing the add-in. No external dependencies are required except a standard command-line interface. The 'cd' command accepts the folder name as a parameter, and correct execution will change the working directory to the specified project folder.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excludes/outlook-quickstart-json-manifest-typescript.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\ncd \"Add-in with Unified Manifest\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Command Line\nDESCRIPTION: This command line snippet shows how to change the current directory to the add-in project folder named \"My Office Add-in\". This step is necessary before running subsequent commands related to the project, such as starting the development server.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/onenote-quickstart.md#_snippet_1\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Command for Checking Legacy Token Status\nDESCRIPTION: This PowerShell command retrieves all authentication policies and formats the output as a table. It is explicitly mentioned as an example of a command that *does not* correctly show the status of legacy Exchange Online tokens.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/turn-exchange-tokens-on-off.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AuthenticationPolicy | Format-Table -Auto Name\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory via Command Line\nDESCRIPTION: This command line instruction changes the current directory to the \"Git the gist\" folder, which is the root directory of the Outlook add-in project created by the Yeoman generator. This step is necessary before running subsequent project-specific commands like installing dependencies or starting the server.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\n```command&nbsp;line\ncd \"Git the gist\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Formatted Number CellValue with Excel JavaScript API in TypeScript\nDESCRIPTION: This code snippet demonstrates the creation of a formatted number value using the Excel.FormattedNumberCellValue object in TypeScript. It specifies the required schema properties—type, basicValue, basicType, and numberFormat—to represent a date-formatted number in Excel. Dependencies include the Excel JavaScript API and the Excel.FormattedNumberCellValue interface, with inputs described for formatting and fallback in incompatible or older Excel versions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-data-types-concepts.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// This is an example of the complete JSON of a formatted number value.\\n// In this case, the number is formatted as a date.\\nconst myDate: Excel.FormattedNumberCellValue = {\\n    type: Excel.CellValueType.formattedNumber,\\n    basicValue: 32889.0,\\n    basicType: Excel.RangeValueType.double, // A read-only property. Used as a fallback in incompatible scenarios.\\n    numberFormat: \\\"m/d/yyyy\\\"\\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Equivalent COM Add-ins in Unified Manifest (Office Add-in, JSON)\nDESCRIPTION: This snippet demonstrates how to declare an equivalent COM add-in in the unified Microsoft 365 manifest using JSON. The 'alternates.prefer.comAddin.progId' property holds the ProgId identifying the COM add-in. This enables Office on Windows to prefer the COM add-in and hide the Office Add-in UI if both are installed. No third-party dependencies are required, but you must know the correct ProgId from the registry; the manifest should be part of a valid unified manifest structure.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/make-office-add-in-compatible-with-existing-com-add-in.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\" [\n  ...\n  \"alternates\" [\n    {\n      \"prefer\": {\n        \"comAddin\": {\n          \"progId\": \"ContosoCOMAddin\"\n        }\n      }\n    }\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Command Line)\nDESCRIPTION: This command changes the current directory in the command line interface to the newly created add-in project folder named \"My Office Add-in\". This step is necessary before running subsequent commands to start the development server or the add-in.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/powerpoint-quickstart-yo.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\ncd \"My Office Add-in\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Debugging Session with NPM for Yo Office/Teams Toolkit Projects\nDESCRIPTION: Executes the predefined 'stop' script in the project's package.json file. This script typically invokes 'office-addin-debugging' to stop the debugging session, remove add-in registrations (from Windows registry/Mac folder and Exchange for Outlook), and stop the server process. It's crucial for cleaning up after a session started with 'npm run start'.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/test-debug-non-local-server.md#_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\nnpm run stop\n```\n\n----------------------------------------\n\nTITLE: Starting and Sideloading Add-in (Web) in Command Line\nDESCRIPTION: This command-line instruction uses npm to run the `start` script with specific arguments (`-- --document {url}`) to test the add-in in PowerPoint on a browser. It starts the local web server and requires replacing '{url}' with the actual URL of a PowerPoint document hosted on OneDrive or SharePoint.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --document {url}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Null Optional Parameters in JavaScript\nDESCRIPTION: This JavaScript custom function `getWeatherReport` demonstrates handling multiple optional parameters (`zipCode`, `dayOfWeek`). It checks if each optional parameter is `null` (meaning it was omitted by the user) and assigns a default value (`98052` for `zipCode`, \"Wednesday\" for `dayOfWeek`) if it is. JSDoc comments indicate the optional nature and default behavior.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-parameter-options.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Gets a weather report for a specified zipCode and dayOfWeek\n * @customfunction\n * @param {number} [zipCode] Zip code. If omitted, zipCode = 98052.\n * @param {string} [dayOfWeek] Day of the week. If omitted, dayOfWeek = Wednesday.\n * @returns {string} Weather report for the day of the week in that zip code.\n */\nfunction getWeatherReport(zipCode, dayOfWeek) {\n  if (zipCode === null) {\n    zipCode = 98052;\n  }\n\n  if (dayOfWeek === null) {\n    dayOfWeek = \"Wednesday\";\n  }\n\n  // Get weather report for specified zipCode and dayOfWeek.\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying PivotDateFilter to Excel PivotTable Field using Office JS API\nDESCRIPTION: This snippet demonstrates how to apply a `PivotDateFilter` to a specific PivotField ('Date Updated') within an Excel PivotTable named 'Farm Sales'. It first ensures the corresponding hierarchy is part of the PivotTable's row hierarchies. Then, it defines a date filter to include only data on or after '2020-08-01' with month specificity and applies it to the field. The operations are batched using `Excel.run` and synchronized with `context.sync()`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-pivottables.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait Excel.run(async (context) => {\n    // Get the PivotTable and the date hierarchy.\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    let dateHierarchy = pivotTable.rowHierarchies.getItemOrNullObject(\"Date Updated\");\n    await context.sync();\n\n    // PivotFilters can only be applied to PivotHierarchies that are being used for pivoting.\n    // If it's not already there, add \"Date Updated\" to the hierarchies.\n    if (dateHierarchy.isNullObject) {\n        dateHierarchy = pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem(\"Date Updated\"));\n    }\n\n    // Apply a date filter to filter out anything logged before August.\n    let filterField = dateHierarchy.fields.getItem(\"Date Updated\");\n    let dateFilter = {\n        condition: Excel.DateFilterCondition.afterOrEqualTo,\n        comparator: {\n        date: \"2020-08-01\",\n        specificity: Excel.FilterDatetimeSpecificity.month\n        }\n    };\n    filterField.applyFilter({ dateFilter: dateFilter });\n    \n    await context.sync();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Page Breaks - Excel JavaScript API - JavaScript\nDESCRIPTION: This snippet adds a horizontal page break before a specified row using the Excel JavaScript API. It calls the horizontalPageBreaks.add method on the active worksheet and synchronizes the context to persist the change. Requires the Office JavaScript API and works within an Office Add-in; key parameter is the range string (e.g., 'A21:E21') specifying where the break is inserted. Outputs a modified worksheet with the requested page break in place; does not cover vertical breaks or error handling.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheet-display.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.horizontalPageBreaks.add(\"A21:E21\"); // The page break precedes this range.\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Webpack Entry for Dialog JavaScript Asset - JavaScript\nDESCRIPTION: This code shows how to add a new entry point for dialog.js in the webpack configuration file. By specifying 'dialog: \"./src/settings/dialog.js\"', webpack will bundle the dialog's logic as a separate output file. This is essential for supporting the dialog's script in the Office Add-in. Place this line within the entry object of webpack.config.js. This modification requires the dialog.js file be present and accessible.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/outlook-tutorial.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ndialog: \"./src/settings/dialog.js\",\n```\n\n----------------------------------------\n\nTITLE: Applying Icon Set Conditional Formatting in Excel (JavaScript)\nDESCRIPTION: This snippet demonstrates how to apply Icon Set conditional formatting to an Excel range ('B8:E13' on 'Sample' sheet) using the Office JavaScript API. It selects the 'threeTriangles' icon set style and defines criteria based on numerical values (greater than or equal to 700 and 1000) to display different icons. The first criterion is left empty as the default low icon applies.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(\n         Excel.ConditionalFormatType.iconSet\n    );\n    \n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n    \n    /*\n       With a \"three*\" icon set style, such as \"threeTriangles\", the third\n        element in the criteria array (criteria[2]) defines the \"top\" icon;\n        e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n        icon, The first (criteria[0]) defines the \"low\" icon, but it can often \n        be left empty as this method does below, because every cell that\n       does not match the other two criteria always gets the low icon.\n    */\n    iconSetCF.criteria = [\n        {},\n          {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=700\"\n          },\n          {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=1000\"\n          }\n    ];\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Building Excel Custom Functions Add-in with npm (Command Line)\nDESCRIPTION: Executes the npm run build command in the add-in project directory to compile source code, transpile assets, and prepare static files required by the Excel add-in. Dependencies: Node.js, npm, and appropriate build scripts defined in package.json. Input: None. Output: Build artifacts in the dist or build directory. The build may fail if dependencies are missing or scripts are misconfigured.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/excel-custom-functions-quickstart.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Production URL in webpack.config.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates setting constants in a `webpack.config.js` file for handling different deployment environments. `urlDev` represents the local development server address, while `urlProd` should be replaced with the actual domain name of the Azure App Service where the add-in will be hosted. These constants are used later in the Webpack configuration to replace URLs in the manifest file during the production build.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/publish/deploy-office-add-in-sso-to-azure.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst urlDev = \"localhost:3000\";\nconst urlProd = \"<your-web-site-domain-name>\";   \n```\n\n----------------------------------------\n\nTITLE: Enabling On-Send Compliance for a Group-Specific Policy (Modern/New Outlook)\nDESCRIPTION: Retrieves the group-specific OWA mailbox policy (`FinanceOWAPolicy`) and enables the on-send add-in compliance feature by setting `OnSendAddinsEnabled` to `$true`. This applies the compliance behavior to users who will be assigned this policy in modern Outlook on the web or new Outlook on Windows. Requires Exchange Online PowerShell.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-on-send-addins.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-OWAMailboxPolicy FinanceOWAPolicy | Set-OWAMailboxPolicy –OnSendAddinsEnabled:$true\n```\n\n----------------------------------------\n\nTITLE: Clearing AutoFilter Criteria from a Single Column - Excel JavaScript API (JavaScript)\nDESCRIPTION: Removes the AutoFilter criteria from column 3 of the active worksheet, leaving other active filters untouched. Uses Office.js Excel API; the column is specified by its zero-based index. Recommended when only one column's filter should be cleared without affecting the rest. Requires Excel Add-in context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheets.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This method clears the AutoFilter setting from one column.\nawait Excel.run(async (context) => {\n    // Retrieve the active worksheet.\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Clear the filter from only column 3.\n    sheet.autoFilter.clearColumnCriteria(3);\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Buttons in HTML for PowerPoint Add-in Task Pane\nDESCRIPTION: This HTML snippet defines five buttons within the add-in's task pane: 'Add Slides', 'Go to First Slide', 'Go to Next Slide', 'Go to Previous Slide', and 'Go to Last Slide'. Each button has a unique ID for event handling and uses the 'ms-Button' class for styling.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"add-slides\">Add Slides</button><br/><br/>\n<button class=\"ms-Button\" id=\"go-to-first-slide\">Go to First Slide</button><br/><br/>\n<button class=\"ms-Button\" id=\"go-to-next-slide\">Go to Next Slide</button><br/><br/>\n<button class=\"ms-Button\" id=\"go-to-previous-slide\">Go to Previous Slide</button><br/><br/>\n<button class=\"ms-Button\" id=\"go-to-last-slide\">Go to Last Slide</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Toggling Data Type Icons Visibility - Excel JavaScript API - JavaScript\nDESCRIPTION: This code disables on-sheet display of data type icons using the Excel JavaScript API by setting the showDataTypeIcons property to false. It is intended to reduce visual clutter from icons associated with Excel data types. The snippet requires preview API access and runs inside an Office Add-in; the key parameter is the boolean value assigned to showDataTypeIcons. The visible change applies to everyone co-authoring the worksheet and takes effect after context.sync().\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-worksheet-display.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => { \n    const sheet = context.workbook.worksheets.getActiveWorksheet(); \n    sheet.showDataTypeIcons = false; \n    await context.sync(); \n});  \n```\n\n----------------------------------------\n\nTITLE: Getting an Excel Range by Address using JavaScript API\nDESCRIPTION: This snippet demonstrates how to retrieve a specific range (B2:C5) from a worksheet named \"Sample\" using its address string with the `sheet.getRange()` method. It then loads the `address` property of the range object and logs it to the console. This operation requires an active Excel context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-ranges-get.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    \n    let range = sheet.getRange(\"B2:C5\");\n    range.load(\"address\");\n    await context.sync();\n    \n    console.log(`The address of the range B2:C5 is \"${range.address}\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: AttachmentDetails Object Example for Outlook Add-ins - JSON\nDESCRIPTION: These JSON snippets exemplify the expected structure of AttachmentDetails as returned by Office.js in different Outlook clients. They show typical values for the contentType and name properties depending on client platform (with Mac and non-Mac differences), including file extensions and content types. These objects are used for illustrating add-in behavior rather than for direct implementation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/compare-outlook-add-in-support-in-outlook-for-mac.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contentType\": \"image/x-png\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"RE: Summer activity\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contentType\": \"image/png\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"RE: Summer activity.eml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Shapes with PowerPoint JavaScript API - JavaScript\nDESCRIPTION: This code demonstrates how to delete all shapes from the first slide using the 'delete' method of each Shape object in the ShapeCollection. The shapes are loaded without their properties, iterated over, and each is deleted, with changes synchronized back to the host. Requires asynchronous execution with 'PowerPoint.run' and access to the PowerPoint JavaScript API. Suitable for bulk deletion operations.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/shapes.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait PowerPoint.run(async (context) => {\n    // Delete all shapes from the first slide.\n    const shapes = context.presentation.slides.getItemAt(0).shapes;\n\n    // Load all the shapes in the collection without loading their properties.\n    shapes.load(\"items/$none\");\n    await context.sync();\n        \n    shapes.items.forEach(function (shape) {\n        shape.delete();\n    });\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Data Validation from an Excel Range using JavaScript\nDESCRIPTION: This snippet demonstrates how to remove all data validation rules from a specified range (`myrange`) in Excel using the Office JavaScript API. It calls the `clear()` method on the `dataValidation` object associated with the target range. This action affects all cells within the specified range, removing both programmatically and manually added validation rules, even if the clear range only partially overlaps with the validated range. Assumes `myrange` is a valid Excel Range object.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-data-validation.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmyrange.dataValidation.clear()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Function Parameters (including Optional) using @param - JavaScript\nDESCRIPTION: This snippet demonstrates using the `@param` JSDoc tag in JavaScript to define parameters for a custom function. It specifies the type (`{number}`), name (`firstNumber`, `secondNumber`, `thirdNumber`), and description for each parameter. It also shows how to mark a parameter (`thirdNumber`) as optional by enclosing its name in square brackets `[]`.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-json-autogeneration.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A function which sums two, or optionally three, numbers.\n * @customfunction ADDNUMBERS\n * @param firstNumber {number} First number to add.\n * @param secondNumber {number} Second number to add.\n * @param [thirdNumber] {number} Optional third number you wish to add.\n * ...\n */\n```\n\n----------------------------------------\n\nTITLE: Querying Appointment Start and End Times with Office.js - JavaScript\nDESCRIPTION: This snippet demonstrates direct property access for appointment start and end times using the Office JavaScript API in Outlook read forms. These properties, 'start' and 'end', are accessible when a user is reading an appointment, not composing one. The snippet requires the presence of Office.js and a loaded Outlook item. 'Office.context.mailbox.item.start' and '.end' return Date objects representing the respective time in UTC format.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-or-set-the-time-of-an-appointment.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nOffice.context.mailbox.item.start;\nOffice.context.mailbox.item.end;\n```\n\n----------------------------------------\n\nTITLE: Setting the Value Axis Display Unit of an Excel Chart using JavaScript\nDESCRIPTION: Modifies the value axis of the first chart on the 'Sample' worksheet to display its units in 'Hundreds'. This changes the numerical scale representation on the value axis.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let chart = sheet.charts.getItemAt(0);\n    chart.axes.valueAxis.displayUnit = \"Hundreds\";\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Get Slide Metadata Button to Task Pane using HTML\nDESCRIPTION: This HTML markup adds a button with the ID `get-slide-metadata` and the label \"Get Slide Metadata\" to the add-in's task pane UI. It uses the `ms-Button` class from Fabric Core for styling. This code replaces the `TODO4` placeholder in `taskpane.html` and is intended to trigger the retrieval of metadata for the selected slide(s).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/tutorials/powerpoint-tutorial-yo.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ms-Button\" id=\"get-slide-metadata\">Get Slide Metadata</button><br/><br/>\n```\n\n----------------------------------------\n\nTITLE: Exporting an Excel Chart as a Base64 Image String using JavaScript\nDESCRIPTION: Retrieves a specific chart ('Chart1' on 'Sheet1') and calls the `getImage()` method to obtain a base64-encoded string representing the chart as a JPEG image. The resulting string is then logged to the console.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-charts.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let chart = context.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");\n    let imageAsString = chart.getImage();\n    await context.sync();\n    \n    console.log(imageAsString.value);\n    // Instead of logging, your add-in may use the base64-encoded string to save the image as a file or insert it in HTML.\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Action to Open the Default Task Pane (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to define an action (`openChartsTaskpane`) with `type: \"ShowTaskpane\"` to open the add-in's default task pane (as defined in the manifest). It then shows how to associate this action with a button (`CtxBt112`) within a contextual tab's group using the `actionId` property.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/contextual-tabs.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n`{\n  \"actions\": [\n    {\n      \"id\": \"openChartsTaskpane\",\n      \"type\": \"ShowTaskpane\",\n      \"title\": \"Work with Charts\",\n      \"supportPinning\": false\n    }\n  ],\n  \"tabs\": [\n    {\n      // some tab properties omitted\n      \"groups\": [\n        {\n          // some group properties omitted\n          \"controls\": [\n            {\n                \"type\": \"Button\",\n                \"id\": \"CtxBt112\",\n                \"actionId\": \"openChartsTaskpane\",\n                \"enabled\": false,\n                \"label\": \"Open Charts Taskpane\",\n                // some control properties omitted\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}`\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Data Validation Error Alerts in Excel using JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a custom error alert for data validation within an Excel worksheet using the Office JavaScript API. It accesses the active worksheet, defines a range (\"B2:C5\"), and sets the `errorAlert` property of the range's `dataValidation` object. Key parameters include `message` (custom error text), `showAlert` (set to true), `style` (set to `Excel.DataValidationAlertStyle.stop` to prevent invalid entries), and `title` (custom alert title). Requires the Excel JavaScript API library and runs within an `Excel.run` context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-data-validation.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let range = sheet.getRange(\"B2:C5\");\n\n    range.dataValidation.errorAlert = {\n            message: \"Sorry, only positive whole numbers are allowed\",\n            showAlert: true, // The default is 'true'.\n              style: Excel.DataValidationAlertStyle.stop,\n            title: \"Negative or Decimal Number Entered\"\n        };\n\n    // Set range.dataValidation.rule and optionally .prompt here.\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Recipients Collection Property - JavaScript\nDESCRIPTION: This simple snippet illustrates how to directly access the collection of Cc recipients from a mail item in read mode using Office.js. It does not involve asynchronous APIs and is intended to read-only recipient list access, available only in read forms. Dependencies: Office.js API, read mode context. Input: current mail item; Output: recipient collection property reference.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-set-or-add-recipients.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.mailbox.item.cc;\n```\n\n----------------------------------------\n\nTITLE: Handling Worksheet Change Event in Excel JavaScript\nDESCRIPTION: This snippet shows an example event handler function (`handleChange`) designed to be called when a worksheet's `onChanged` event is triggered. It uses `Excel.run` to interact with the Excel context within the handler and logs details about the event, such as the type of change (`event.changeType`), the address affected (`event.address`), and the source of the event (`event.source` - useful for coauthoring scenarios).\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-events.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nasync function handleChange(event) {\n    await Excel.run(async (context) => {\n        await context.sync();        \n        console.log(\"Change type of event: \" + event.changeType);\n        console.log(\"Address of event: \" + event.address);\n        console.log(\"Source of event: \" + event.source);       \n    }).catch(errorHandlerFunction);\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving an Excel Comment Thread using JavaScript\nDESCRIPTION: This snippet demonstrates how to mark a comment thread as resolved. It retrieves the first comment in the workbook using `getItemAt(0)` and sets its `resolved` property to `true`. This updates the visual state of the comment in the Excel UI.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-comments.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    // Resolve the first comment thread in the workbook.\n    context.workbook.comments.getItemAt(0).resolved = true;\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Notification Before Long Calculation in Custom Function (JavaScript)\nDESCRIPTION: This asynchronous JavaScript function `longCalculation`, part of `function.js`, demonstrates how to notify the user before a potentially time-consuming operation within an Excel custom function. It first ensures the task pane is visible using `Office.addin.showAsTaskpane()`, then calls `showNotification` to display a delay message. After the notification, it executes the placeholder long operation and returns the result. This pattern helps manage user expectations during delays.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-get-started.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport async function longCalculation(param) {\n  await Office.addin.showAsTaskpane();\n  showNotification(\"It may take some time as we prepare the data.\");\n  // Perform long operation\n  // ...\n  // ...\n  return answer;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Shortcut Mappings with Office Add-in Manifest JSON\nDESCRIPTION: This JSON snippet provides a structure for defining custom keyboard shortcuts in an Office Add-in that uses an add-in only manifest. It describes the actions available, their types, and the shortcut key combinations (with per-platform overrides) used to trigger them. Dependencies include following the extended-manifest.schema.json, with required properties for actions (id, name) and shortcuts (action, key, key.default). Inputs are keyboard shortcut mappings; outputs are configuration consumed by Office to associate keys to actions. The file must be linked within the manifest.xml, and mappings specified must be later associated to JavaScript functions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/design/keyboard-shortcuts.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"actions\": [\n        {\n            \"id\": \"ShowTaskpane\",\n            \"type\": \"ExecuteFunction\",\n            \"name\": \"Show task pane\"\n        },\n        {\n            \"id\": \"HideTaskpane\",\n            \"type\": \"ExecuteFunction\",\n            \"name\": \"Hide task pane\"\n        }\n    ],\n    \"shortcuts\": [\n        {\n            \"action\": \"ShowTaskpane\",\n            \"key\": {\n                \"default\": \"Ctrl+Alt+Up\",\n                \"mac\": \"Command+Shift+Up\",\n                \"web\": \"Ctrl+Alt+1\",\n                \"windows\": \"Ctrl+Alt+Up\"\n            }\n        },\n        {\n            \"action\": \"HideTaskpane\",\n            \"key\": {\n                \"default\": \"Ctrl+Alt+Down\",\n                \"mac\": \"Command+Shift+Down\",\n                \"web\": \"Ctrl+Alt+2\",\n                \"windows\": \"Ctrl+Alt+Up\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using stopIfTrue to Apply Mutually Exclusive Conditional Formats in Excel JavaScript API (JavaScript)\nDESCRIPTION: This code example shows how to use the stopIfTrue property with conditional formatting rules to prevent subsequent, lower-priority formats from being applied to an Excel data range. It creates two conditional formats: one for low numbers and another for negative numbers, setting stopIfTrue to true for the negative number rule to ensure exclusivity. This targets scenarios where negative values should always have consistent formatting, regardless of other formats that might also apply. Prerequisites include Office.js, an Excel worksheet named 'Sample', and a table 'TemperatureTable'. Limitations: Requires the Excel Add-in runtime and a properly structured workbook context.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-conditional-formatting.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n    \n    // Set low numbers to bold, dark red font and assign priority 1.\n    const presetFormat = temperatureDataRange.conditionalFormats\n        .add(Excel.ConditionalFormatType.presetCriteria);\n    presetFormat.preset.format.font.color = \"red\";\n    presetFormat.preset.format.font.bold = true;\n    presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };\n    presetFormat.priority = 1;\n    \n    // Set negative numbers to blue font with green background and \n    // set priority 0, but set stopIfTrue to true, so none of the \n    // formatting of the conditional format with the higher priority\n    // value will apply, not even the bolding of the font.\n    const cellValueFormat = temperatureDataRange.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    cellValueFormat.cellValue.format.font.color = \"blue\";\n    cellValueFormat.cellValue.format.fill.color = \"lightgreen\";\n    cellValueFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n    cellValueFormat.priority = 0;\n    cellValueFormat.stopIfTrue = true;\n    \n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Access Token to Server-Side API with AJAX Call - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to send an obtained access token to a web API by including it in the Authorization header of an AJAX POST request. Dependencies include jQuery for AJAX functionality. It expects a valid accessToken variable to be set, and a target server endpoint. The function allows for custom JSON data payloads and handles standard AJAX success, failure, and cleanup callbacks. Security recommendation: Always send tokens over secure HTTPS endpoints and do not expose tokens to unauthorized clients.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/sso-in-office-add-ins.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.ajax({\\n    type: \\\"POST\\\",\\n    url: \\\"/api/DoSomething\\\",\\n    headers: {\\n        \\\"Authorization\\\": \\\"Bearer \\\" + accessToken\\n    },\\n    data: { /* some JSON payload */ },\\n    contentType: \\\"application/json; charset=utf-8\\\"\\n}).done(function (data) {\\n    // Handle success\\n}).fail(function (error) {\\n    // Handle error\\n}).always(function () {\\n    // Cleanup\\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Access Token Using Office.js in JavaScript\nDESCRIPTION: Demonstrates how to use Office.context.mailbox.getCallbackTokenAsync with the isRest: true option to asynchronously retrieve a REST-compatible access token for Outlook add-ins. No explicit dependencies are required beyond Office.js, but optionally a callback such as getCurrentItem may be needed to process the token. The method takes an options object and a result callback; upon success, the result contains the access token in result.value, which can be used for further REST API calls. This token is generally read-only for the item unless the add-in manifest requests additional mailbox permissions.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/use-rest-api.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.mailbox.getCallbackTokenAsync({isRest: true}, function(result){\\n  if (result.status === \\\"succeeded\\\") {\\n    const accessToken = result.value;\\n\\n    // Use the access token.\\n    getCurrentItem(accessToken);\\n  } else {\\n    // Handle the error.\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Pinnable Task Pane via Unified Manifest (JSON)\nDESCRIPTION: Defines an action in a unified Microsoft 365 manifest (JSON) to open a task pane (`openPage`). Setting the `pinnable` property to `true` enables the user to pin this task pane within the Outlook client. This action has an ID, type, target view, display name, and the pinnable setting.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/pinnable-taskpane.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"actions\": [\n    {\n        \"id\": \"OpenTaskPane\",\n        \"type\": \"openPage\",\n        \"view\": \"TaskPaneView\",\n        \"displayName\": \"OpenTaskPane\",\n        \"pinnable\": true\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Stopping the Development Server for Office Add-in - Command Line\nDESCRIPTION: Stops the running local development server by executing the npm \\\"stop\\\" script, as defined in the project's package.json. This command requires Node.js, npm, and a defined \\\"stop\\\" script in the add-in project. Running it will terminate any active server processes initiated by npm scripts, cleaning up the local development environment. No parameters are required and the result is the cessation of the dev server.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/quickstarts/project-quickstart.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Data Validation in Excel using JavaScript\nDESCRIPTION: This snippet illustrates how to add data validation for dates to the range \"B2:C5\". It utilizes the `date` rule type in conjunction with the `between` operator. The `formula1` and `formula2` properties are set using ISO 8601 date strings (\"2022-04-01\" and \"2022-04-08\" respectively). This configuration restricts valid input to dates falling strictly between April 1st, 2022, and April 8th, 2022. It relies on the Excel JavaScript API.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/excel-add-ins-data-validation.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let range = sheet.getRange(\"B2:C5\");\n\n    range.dataValidation.rule = {\n            date: {\n                formula1: \"2022-04-01\",\n                formula2: \"2022-04-08\",\n                operator: Excel.DataValidationOperator.between\n            }\n        };\n\n    await context.sync();\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Debugging Session via Default npm Start Script\nDESCRIPTION: Executes the default 'start' script defined in package.json. If the 'start:desktop' script is unavailable, this command might be used to initiate a debugging session, potentially starting a dev server or launching the add-in in a default environment. Requires Node.js, npm, and a configured 'start' script in package.json.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/excel/custom-functions-debugging.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Specifying Appointment Attendee Context in Unified Manifest (JSON)\nDESCRIPTION: Configures an Outlook mobile add-in (e.g., note-taking, CRM) for Appointment Attendee mode using the unified manifest. Add \"logEventMeetingDetailsAttendee\" to the `extensions.ribbons.contexts` array.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/outlook-mobile-addins.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"extensions.ribbons.contexts\": [\"logEventMeetingDetailsAttendee\", ...]\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum API Requirement Sets in Office Add-in Manifest (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `extensions.requirements.capabilities` array within the unified manifest. It declares the minimum API requirement sets (specifically `TableBindings` version 1.1 and `OOXML` version 1.1) that must be supported by the host Office application for the add-in to be installed and run. This ensures compatibility by preventing installation on non-supporting platforms.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/specify-office-hosts-and-api-requirements-unified.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\n    {\n        \"requirements\": {\n            \"capabilities\": [ \n                {\n                    \"name\": \"TableBindings\",\n                    \"minVersion\": \"1.1\"\n                },\n                {\n                    \"name\": \"OOXML\",\n                    \"minVersion\": \"1.1\"\n                }\n            ],\n        },\n        ...\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Selected Data with Named Callback - Office.js - JavaScript\nDESCRIPTION: This snippet uses the Office.context.document.getSelectedDataAsync method but passes a named function (writeDataCallback) as the callback. The named callback writes the retrieved selection data to the page through a write function, allowing for code reuse across multiple async operations. Dependencies include Office.js and a 'message' div in the DOM. Inputs are the coercion type and callback; output is displayed selected data.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/asynchronous-programming-in-office-add-ins.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nOffice.context.document.getSelectedDataAsync(Office.CoercionType.Text, \n    writeDataCallback);\n\n// Callback to write the selected data to the add-in UI.\nfunction writeDataCallback(result) {\n    write('Selected data: ' + result.value);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message;\n}\n```\n\n----------------------------------------\n\nTITLE: Taskpane Body Markup for SSO User Info Display (HTML)\nDESCRIPTION: This HTML snippet defines a simple UI for the Office Add-in task pane, including a 'Get ID Token' button and a container to display retrieved user info. This markup is used both in Visual Studio and Yo Office projects to provide a clear interface for users to initiate token retrieval and view SSO results. The button and span elements are referenced from JavaScript logic for interactivity.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/use-sso-to-get-office-signed-in-user-token.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\\n  <h1>Welcome</h1>\\n  <p>\\n    Sign in to Office, then choose the <b>Get ID Token</b> button to see your\\n    ID token information.\\n  </p>\\n  <button id=\\\"getIDToken\\\">Get ID Token</button>\\n  <div>\\n    <span id=\\\"userInfo\\\"></span>\\n  </div>\\n</body>\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Outlook Add-ins in Exchange - PowerShell\nDESCRIPTION: Queries Exchange Online to list all installed add-ins, displaying their display names and App IDs in a formatted table. This command requires a connected Exchange Online PowerShell session, established as shown in preceding steps. Inputs: None. Outputs: Formatted table listing DisplayName and AppId for installed add-ins, to help identify the ghost add-in by name. Useful for cross-referencing add-ins before removal.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/testing/uninstall-add-in.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-App | Format-Table -Auto DisplayName,AppId\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for `getAsync` Recurrence (Organizer)\nDESCRIPTION: Provides an example structure of the JSON object returned by the `getAsync` call when retrieving appointment recurrence details as an organizer in compose mode. It includes `recurrenceType`, `recurrenceProperties`, `seriesTime` (represented as a placeholder), and `recurrenceTimeZone`. Note that `seriesTimeObject` should be accessed using `SeriesTime` methods.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/outlook/get-and-set-recurrence.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"recurrenceType\": \"weekly\",\n    \"recurrenceProperties\": {\n        \"interval\": 1,\n        \"days\": [\"tue\",\"thu\"],\n        \"firstDayOfWeek\": \"sun\"},\n    \"seriesTime\": {seriesTimeObject},\n    \"recurrenceTimeZone\": {\n        \"name\": \"Pacific Standard Time\",\n        \"offset\": -480}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtimes for Add-in Commands in Unified Manifest (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the 'runtimes' section of the unified manifest file for an Office Add-in to define a task pane command. It specifies the minimum requirement set ('Mailbox' 1.3), sets the runtime ID, type, code page URL, and actions such as 'ShowTaskPane' with 'openPage' type. Key parameters include 'requirements.capabilities', 'id', 'type', 'code.page', 'lifetime', and 'actions'. The manifest must accurately declare capability requirements and proper page URLs, and is limited to being used within the manifest context only.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/create-addin-commands-unified-manifest.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"runtimes\": [\n    {\n        \"requirements\": {\n            \"capabilities\": [\n                {\n                    \"name\": \"Mailbox\",\n                    \"minVersion\": \"1.3\"\n                }\n            ]\n        },\n        \"id\": \"TaskPaneRuntime\",\n        \"type\": \"general\",\n        \"code\": {\n            \"page\": \"https://localhost:3000/taskpane.html\"\n        },\n        \"lifetime\": \"short\",\n        \"actions\": [\n            {\n                \"id\": \"ShowTaskPane\",\n                \"type\": \"openPage\",\n                \"view\": \"homepage\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Project Server OData URL Asynchronously in JavaScript\nDESCRIPTION: Defines the `setOdataUrl` function which asynchronously fetches the Project Web App URL using `Office.context.document.getProjectFieldAsync` with `Office.ProjectProjectFields.ProjectServerUrl`. If successful and the URL is valid HTTP(S), it constructs the full OData service URL (`_odataUrl`), stores it globally, enables the '#compareProjects' button, calls `getProjectGuid` and `getDocumentUrl`, and displays the OData endpoint URL in the UI element '#projectDataEndPoint'. Handles errors if Project isn't connected to PWA or if the API call fails, calling `throwError`. Contains commented-out code for debugging with a local Project Server instance.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/project/create-a-project-add-in-that-uses-rest-with-an-on-premises-odata-service.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// Set the global variables, enable the Compare All Projects button,\n// and display the URL of the ProjectData service.\n// Display an error if Project isn't connected with Project Web App.\nfunction setOdataUrl() {\n    Office.context.document.getProjectFieldAsync(\n        Office.ProjectProjectFields.ProjectServerUrl,\n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Succeeded) {\n                _pwa = String(asyncResult.value.fieldValue);\n\n                // If you debug with Visual Studio on a local Project Server computer,\n                // uncomment the following lines to use the localhost URL.\n                //let localhost = location.host.split(\":\", 1);\n                //let pwaStartPosition = _pwa.lastIndexOf(\"/\");\n                //let pwaLength = _pwa.length - pwaStartPosition;\n                //let pwaName = _pwa.substr(pwaStartPosition, pwaLength);\n                //_pwa = location.protocol + \"//\" + localhost + pwaName;\n\n                if (_pwa.substring(0, 4) == \"http\") {\n                    _odataUrl = _pwa + PROJDATA;\n                    $(\"#compareProjects\").removeAttr(\"disabled\");\n                    getProjectGuid();\n                }\n                else {\n                    _odataUrl = \"No connection!\";\n                    throwError(_odataUrl, \"You are not connected to Project Web App.\");\n                }\n                getDocumentUrl();\n                $(\"#projectDataEndPoint\").text(_odataUrl);\n            }\n            else {\n                throwError(asyncResult.error.name, asyncResult.error.message);\n            }\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Blank Presentation in PowerPoint Add-ins (JavaScript)\nDESCRIPTION: This snippet shows the simplest way to create a new, blank PowerPoint presentation from an add-in. It calls the `PowerPoint.createPresentation()` method without any arguments. The new presentation opens in a separate PowerPoint instance, while the add-in remains active in the original presentation.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/powerpoint/powerpoint-add-ins.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nPowerPoint.createPresentation();\n```\n\n----------------------------------------\n\nTITLE: Defining Task Pane Add-in Element Order in VersionOverrides (XML)\nDESCRIPTION: This XML snippet illustrates the hierarchical structure and required ordering of elements within the `<VersionOverrides>` node for a general Office task pane add-in manifest. It defines components like requirements, host-specific configurations (runtimes, form factors), extension points (UI elements like tabs, groups, controls, actions), resources (images, URLs, strings), web application info, and equivalent add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/manifest-element-ordering.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<VersionOverrides>\n    <Description>\n    <Requirements>\n        <Sets>\n            <Set>\n    <Hosts>\n        <Host>\n            <Runtimes>\n                <Runtime>\n            <AllFormFactors>\n                <ExtensionPoint>\n                    <Script>\n                        <SourceLocation>\n                    <Page>\n                        <SourceLocation>\n                    <Metadata>\n                        <SourceLocation>\n                    <Namespace>\n            <DesktopFormFactor>\n                <GetStarted>\n                    <Title>\n                    <Description>\n                    <LearnMoreUrl>\n                <FunctionFile>\n                <ExtensionPoint>\n                    <OfficeTab>\n                        <Group>\n                            <Label>\n                            <Icon>\n                                <Image>\n                            <Control>\n                            <Label>\n                            <Supertip>\n                                <Title>\n                                <Description>\n                            <Icon>\n                                <Image>  \n                            <Action>\n                                <TaskpaneId>\n                                <SourceLocation>\n                                <Title>\n                                <FunctionName>\n                            <Enabled>\n                            <Items>\n                                <Item>\n                                <Label>\n                                <Supertip>\n                                    <Title>\n                                    <Description>\n                                <Action>\n                                    <TaskpaneId>\n                                    <SourceLocation>\n                                    <Title>\n                                    <FunctionName>\n                    <CustomTab>\n                        <Group> (can be below <OfficeGroup>)\n                            <OverriddenByRibbonApi>\n                            <Label>\n                            <Icon>\n                                <Image>\n                            <Control>\n                                <OverriddenByRibbonApi>\n                                <Label>\n                                <Supertip>\n                                    <Title>\n                                    <Description>\n                                <Icon>\n                                    <Image>  \n                                <Action>\n                                    <TaskpaneId>\n                                    <SourceLocation>\n                                    <Title>\n                                    <FunctionName>\n                                <Enabled>\n                                <Items>\n                                    <Item>\n                                        <OverriddenByRibbonApi>\n                                        <Label>\n                                        <Supertip>\n                                            <Title>\n                                            <Description>\n                                        <Action>\n                                            <TaskpaneId>\n                                            <SourceLocation>\n                                            <Title>\n                                            <FunctionName>\n                        <OfficeGroup> (can be above <Group>)\n                        <Label>\n                        <InsertAfter> (or <InsertBefore>)\n                    <OfficeMenu>\n                        <Control>\n                            <Label>\n                            <Supertip>\n                                <Title>\n                                <Description>\n                            <Icon>\n                                <Image>  \n                            <Action>\n                                <TaskpaneId>\n                                <SourceLocation>\n                                <Title>\n                                <FunctionName>\n                            <Enabled>\n                            <Items>\n                                <Item>\n                                    <Label>\n                                    <Supertip>\n                                        <Title>\n                                        <Description>\n                                    <Action>\n                                        <TaskpaneId>\n                                        <SourceLocation>\n                                        <Title>\n                                        <FunctionName>\n        <Resources>\n            <Images>\n                <Image>\n                    <Override>\n            <Urls>\n                <Url>\n                    <Override>\n            <ShortStrings>\n                <String>\n                    <Override>\n            <LongStrings>\n                <String>\n                    <Override>\n        <WebApplicationInfo>\n            <Id>\n            <Resource>\n            <Scopes>\n                <Scope>\n        <EquivalentAddins>\n            <EquivalentAddin>\n                <ProgId>\n                <DisplayName>\n                <FileName>\n                <Type>\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Text Binding from a Prompt - Office.js - JavaScript\nDESCRIPTION: This snippet shows how to prompt the user to select a region for a text binding in an Office document using addFromPromptAsync. The method launches Office's built-in range selector UI, creates the binding after user selection, and reports the result. Requires Office.js APIs and a DOM element with id 'message'. Useful for user-driven region selection and compatible with both Word and Excel add-ins.\nSOURCE: https://github.com/officedev/office-js-docs-pr/blob/main/docs/develop/bind-to-regions-in-a-document-or-spreadsheet.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction bindFromPrompt() {\\n    Office.context.document.bindings.addFromPromptAsync(Office.BindingType.Text, { id: 'myBinding' }, function (asyncResult) {\\n        if (asyncResult.status == Office.AsyncResultStatus.Failed) {\\n            write('Action failed. Error: ' + asyncResult.error.message);\\n        } else {\\n            write('Added new binding with type: ' + asyncResult.value.type + ' and id: ' + asyncResult.value.id);\\n        }\\n    });\\n}\\n\\n// Function that writes to a div with id='message' on the page.\\nfunction write(message){\\n    document.getElementById('message').innerText += message;\\n}\n```"
  }
]