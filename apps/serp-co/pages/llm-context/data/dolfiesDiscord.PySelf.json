[
  {
    "owner": "dolfies",
    "repo": "discord.py-self",
    "content": "TITLE: Creating a Minimal Discord Bot using discord.py-self - Python\nDESCRIPTION: This code snippet demonstrates how to create and run a minimal Discord bot using the discord.py-self library in Python. It sets up a client instance, registers event handlers for bot readiness and incoming messages, and sends a \"Hello!\" response when a specific message is received. Dependencies include the discord library and a valid bot token. Inputs include user messages on Discord; outputs are console log when the bot is ready and a channel message response. Ensure not to name the file discord.py to avoid module conflicts.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/quickstart.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nclient = discord.Client()\n\n@client.event\nasync def on_ready():\n    print(f'We have logged in as {client.user}')\n\n@client.event\nasync def on_message(message):\n    if message.author != client.user:\n        return\n\n    if message.content.startswith('$hello'):\n        await message.channel.send('Hello!')\n\nclient.run('your token here')\n```\n\n----------------------------------------\n\nTITLE: Handling Basic Discord Events with discord.py-self (Python)\nDESCRIPTION: This Python 3 code snippet demonstrates how to create a custom Client subclass using discord.py-self to respond to key Discord events. It shows implementing asynchronous handlers for on_ready (when the client connects and is ready) and on_message (when a message is received). The example illustrates required class inheritance, token usage, and the essential run() startup method. Input is your Discord account token, and outputs are console prints of login confirmation and incoming messages. Requires installation of discord.py-self and valid account credentials.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/intro.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nclass MyClient(discord.Client):\n    async def on_ready(self):\n        print(f'Logged on as {self.user}!')\n\n    async def on_message(self, message):\n        print(f'Message from {message.author}: {message.content}')\n\nclient = MyClient()\nclient.run('token')\n```\n\n----------------------------------------\n\nTITLE: Subclassing and Registering an Event Handler in discord.py-self - Python\nDESCRIPTION: This snippet demonstrates how to register an event handler by subclassing the discord.Client class in Python's discord.py-self library. It showcases the use of the async def syntax to create a coroutine for the on_message event, implementing custom logic to check message author and respond conditionally. Required dependencies include the discord.py-self library, and the method expects an incoming message object. The class must be instantiated and run elsewhere to be effective.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nclass MyClient(discord.Client):\n    async def on_message(self, message):\n        if message.author != self.user:\n            return\n\n        if message.content.startswith('$hello'):\n            await message.channel.send('Hello World!')\n\n```\n\n----------------------------------------\n\nTITLE: Ensuring Command Processing in on_message Event (Python)\nDESCRIPTION: This snippet shows how to override the on_message event in a discord.py bot while still processing commands by calling bot.process_commands(message) at the end. It is required when users customize on_message and still wish to use the command system. The function takes a Message object as input and must be marked async. Without calling process_commands, commands will not function as expected.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/faq.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@bot.event\\nasync def on_message(message):\\n    # do some extra stuff here\\n\\n    await bot.process_commands(message)\n```\n\n----------------------------------------\n\nTITLE: Making Async HTTP Requests with aiohttp (Python)\nDESCRIPTION: This snippet shows the use of the aiohttp library to make a non-blocking GET request, process the response, and parse JSON results. aiohttp is a required dependency (installed and used by discord.py-self). 'session.get' is used to make the web request, and 'await r.json()' parses the response. Inputs include the URL and session context; outputs include a Python dict representing the parsed JSON. The snippet requires running inside an async function and proper error handling is recommended for production use.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/faq.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\\n    async with session.get('http://aws.random.cat/meow') as r:\\n        if r.status == 200:\\n            js = await r.json()\n```\n\n----------------------------------------\n\nTITLE: Uploading and Using Local Image Files in Embeds (Python)\nDESCRIPTION: This example illustrates how to upload a local image as part of a message attachment and reference it in a discord embed's image field using 'attachment://' URLs. Depends on discord.py for discord.File and discord.Embed, and requires the target channel object. 'file' specifies the image file to upload. The embed must reference the uploaded file using the correct filename. Input is the path to the image and a channel object; output is an embedded message displaying the uploaded image.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/faq.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfile = discord.File(\"path/to/my/image.png\", filename=\"image.png\")\\nembed = discord.Embed()\\nembed.set_image(url=\"attachment://image.png\")\\nawait channel.send(file=file, embed=embed)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Subcommands via Group Decorator (Python)\nDESCRIPTION: Illustrates the use of the '@bot.group()' decorator to define a compound command group with subcommands, as well as adding a subcommand via '@group.command()'. The context is checked for the invoked subcommand; fallback sends an error if none is found. Commands can be invoked in the form '?git push origin master'. Inputs are context and relevant string parameters. Requires discord.py's commands extension and a basic understanding of decorators.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/faq.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@bot.group()\\nasync def git(ctx):\\n    if ctx.invoked_subcommand is None:\\n        await ctx.send('Invalid git command passed...')\\n\\n@git.command()\\nasync def push(ctx, remote: str, branch: str):\\n    await ctx.send(f'Pushing to {remote} {branch}')\n```\n\n----------------------------------------\n\nTITLE: Command Reporting Original Message Length (Python)\nDESCRIPTION: This snippet defines a command that accesses the .message attribute of the invocation context, then reports the message content length to the user. Requires discord.py's commands extension and a Context object with the .message property. The function measures length using len(ctx.message.content). Input is the context of the command; output is a numeric message back to the channel.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/faq.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\\nasync def length(ctx):\\n    await ctx.send(f'Your message is {len(ctx.message.content)} characters long.')\n```\n\n----------------------------------------\n\nTITLE: Defining an on_message Listener without Processing Commands (Python)\nDESCRIPTION: This demonstrates defining an event listener using bot.listen for the on_message event, suitable for when extra asynchronous actions are required but command processing should be left untouched by the event function. Does not require manual invocation of bot.process_commands. Input is a Message object. Best when a user wants to attach multiple listeners to on_message.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/faq.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@bot.listen('on_message')\\nasync def whatever_you_want_to_call_it(message):\\n    # do stuff here\\n    # do not process commands here\n```\n\n----------------------------------------\n\nTITLE: Customizing FlagConverter Syntax in discord.py-self (Python)\nDESCRIPTION: Demonstrates how to declare customized FlagConverter classes in discord.py-self by specifying delimiter, prefix, case sensitivity, and positional/optional flags. Each class shows different configurations and use-cases for flag parsing inspired by Discord's search bar input. Requires discord.py-self and discord.ext.commands. Each flag corresponds to a value unless designated positional.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/commands.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# --hello world syntax\nclass PosixLikeFlags(commands.FlagConverter, delimiter=' ', prefix='--'):\n    hello: str\n\n\n# /make food\nclass WindowsLikeFlags(commands.FlagConverter, prefix='/', delimiter=''):\n    make: str\n\n# TOPIC: not allowed nsfw: yes Slowmode: 100\nclass Settings(commands.FlagConverter, case_insensitive=True):\n    topic: Optional[str]\n    nsfw: Optional[bool]\n    slowmode: Optional[int]\n\n# Hello there --bold True\nclass Greeting(commands.FlagConverter):\n    text: str = commands.flag(positional=True)\n    bold: bool = False\n```\n\n----------------------------------------\n\nTITLE: FlagConverter with List-Type Flags in discord.py-self (Python)\nDESCRIPTION: Shows how to define a FlagConverter that enables a flag to accept multiple values using typing.List annotation. The BanFlags class uses List[discord.Member] for collecting multiple members and demonstrates a command that iterates over them. Requires discord.py-self, typing.List, and discord.Member. Inputs are aggregated with repeated flags; output includes banned members and message day information.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/commands.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\nfrom typing import List\nimport discord\n\nclass BanFlags(commands.FlagConverter):\n    members: List[discord.Member] = commands.flag(name='member')\n    reason: str\n    days: int = 1\n\n@commands.command()\nasync def ban(ctx, *, flags: BanFlags):\n    for member in flags.members:\n        await member.ban(reason=flags.reason, delete_message_days=flags.days)\n\n    members = ', '.join(str(member) for member in flags.members)\n    plural = f'{flags.days} days' if flags.days != 1 else f'{flags.days} day'\n    await ctx.send(f'Banned {members} for {flags.reason!r} (deleted {plural} worth of messages)')\n```\n\n----------------------------------------\n\nTITLE: Using Custom Converters and Parameter Metadata in discord.py-self (Python)\nDESCRIPTION: Shows how to provide type hints and custom converters to command parameters using commands.parameter. Helpful for type checkers and for specifying late binding defaults. Also demonstrates built-in helpers like commands.Author for user and channel defaults. Requires discord.py-self and knowledge of custom converter implementations. Inputs are parameter values; outputs include type-safe command invocation.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/commands.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass SomeType:\n    foo: int\n\nclass MyVeryCoolConverter(commands.Converter[SomeType]):\n    ...  # implementation left as an exercise for the reader\n\n@bot.command()\nasync def bar(ctx, cool_value: MyVeryCoolConverter):\n    cool_value.foo  # type checker warns MyVeryCoolConverter has no value foo (uh-oh)\n```\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def bar(ctx, cool_value: SomeType = commands.parameter(converter=MyVeryCoolConverter)):\n    cool_value.foo  # no error (hurray)\n```\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def wave(to: discord.User = commands.parameter(default=lambda ctx: ctx.author)):\n    await ctx.send(f'Hello {to.mention} :wave:')\n```\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def wave(to: discord.User = commands.Author):\n    await ctx.send(f'Hello {to.mention} :wave:')\n```\n\n----------------------------------------\n\nTITLE: Installing discord.py-self via pip (Shell)\nDESCRIPTION: These shell commands demonstrate how to install the discord.py-self package from PyPI using pip for both Unix-like and Windows systems. They assume that either python3 or py is available on your system and that you have the necessary permissions. The upgrade flag (-U) ensures you get the latest version of the package. Replace the command as needed depending on your operating system.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/intro.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install -U discord.py-self\n```\n\nLANGUAGE: shell\nCODE:\n```\npy -3 -m pip install -U discord.py-self\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback Signatures for Discord.py-Self - reStructuredText\nDESCRIPTION: Lists event callback function signatures with their parameters, purpose, and version notes for use in a discord.py-self bot. These definitions outline the triggers and parameter types for each event that can be handled in the client code. Key parameters are identified with type references, supporting developers to correctly implement function hooks in user applications.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_friend_suggestion_remove(user)\n\n    Called when a :class:`FriendSuggestion` is removed.\n\n    .. versionadded:: 2.1\n\n    :param user: The friend suggestion that was removed.\n    :type user: :class:`User`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_friend_suggestion_remove(user_id)\n\n    Called when a :class:`FriendSuggestion` is removed.\n    Unlike :func:`on_message_edit`, this is called regardless\n    of the user being in the internal user cache or not.\n\n    .. versionadded:: 2.1\n\n    :param user_id: The ID of the friend suggestion that was removed.\n    :type user_id: :class:`int`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_note_update(note)\n\n    Called when a :class:`User`'s note is updated.\n\n    .. versionadded:: 2.0\n\n    :param note: The note that was updated.\n    :type note: :class:`Note`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_oauth2_token_revoke(token, application_id)\n\n    Called when an authorized application is revoked.\n\n    .. versionadded:: 2.0\n\n    .. versionchanged:: 2.1\n\n        The ``application_id`` parameter was added.\n\n    :param token: The token that was revoked.\n    :type token: :class:`str`\n    :param application_id: The application ID that was revoked.\n    :type application_id: :class:`int`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_call_create(call)\n              on_call_delete(call)\n\n    Called when a call is created in a :class:`abc.PrivateChannel`.\n\n    :param call: The call that was created or deleted.\n    :type call: Union[:class:`PrivateCall`, :class:`GroupCall`]\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_call_update(before, after)\n\n    Called when a :class:`PrivateCall` or :class:`GroupCall` is updated,\n    e.g. when a member is added or another person is rung.\n\n    :param before: The previous call.\n    :type before: :class:`Relationship`\n    :param after: The updated call.\n    :type after: :class:`Relationship`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_guild_available(guild)\n              on_guild_unavailable(guild)\n\n    Called when a guild becomes available or unavailable. The guild must have\n    existed in the :attr:`Client.guilds` cache.\n\n    :param guild: The :class:`Guild` that has changed availability.\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_guild_join(guild)\n\n    Called when a :class:`Guild` is either created by the :class:`Client` or when the\n    :class:`Client` joins a guild.\n\n    :param guild: The guild that was joined.\n    :type guild: :class:`Guild`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_guild_remove(guild)\n\n    Called when a :class:`Guild` is removed from the :class:`Client`.\n\n    This happens through, but not limited to, these circumstances:\n\n    - The client got banned.\n    - The client got kicked.\n    - The client left the guild.\n    - The client or the guild owner deleted the guild.\n\n    In order for this event to be invoked then the :class:`Client` must have\n    been part of the guild to begin with. (i.e. it is part of :attr:`Client.guilds`)\n\n    :param guild: The guild that got removed.\n    :type guild: :class:`Guild`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_guild_update(before, after)\n\n    Called when a :class:`Guild` updates, for example:\n\n    - Changed name\n    - Changed AFK channel\n    - Changed AFK timeout\n    - etc\n\n    :param before: The guild prior to being updated.\n    :type before: :class:`Guild`\n    :param after: The guild after being updated.\n    :type after: :class:`Guild`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_guild_emojis_update(guild, before, after)\n\n    Called when a :class:`Guild` adds or removes :class:`Emoji`.\n\n    :param guild: The guild who got their emojis updated.\n    :type guild: :class:`Guild`\n    :param before: A list of emojis before the update.\n    :type before: Sequence[:class:`Emoji`]\n    :param after: A list of emojis after the update.\n    :type after: Sequence[:class:`Emoji`]\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_guild_stickers_update(guild, before, after)\n\n    Called when a :class:`Guild` updates its stickers.\n\n    .. versionadded:: 2.0\n\n    :param guild: The guild who got their stickers updated.\n    :type guild: :class:`Guild`\n    :param before: A list of stickers before the update.\n    :type before: Sequence[:class:`GuildSticker`]\n    :param after: A list of stickers after the update.\n    :type after: Sequence[:class:`GuildSticker`]\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_application_command_index_update(guild)\n\n    Called when a :class:`Guild`'s application command index is updated.\n\n    .. versionadded:: 2.1\n\n    :param guild: The guild who got their application command counts updated.\n    :type guild: :class:`Guild`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_audit_log_entry_create(entry)\n\n    Called when a :class:`Guild` gets a new audit log entry.\n    You must have :attr:`~Permissions.view_audit_log` to receive this.\n\n    .. versionadded:: 2.0\n\n    .. warning::\n\n        Audit log entries received through the gateway are subject to data retrieval\n        from cache rather than REST. This means that some data might not be present\n        when you expect it to be. For example, the :attr:`AuditLogEntry.target`\n        attribute will usually be a :class:`discord.Object` and the\n        :attr:`AuditLogEntry.user` attribute will depend on user and member cache.\n\n        To get the user ID of entry, :attr:`AuditLogEntry.user_id` can be used instead.\n\n    :param entry: The audit log entry that was created.\n    :type entry: :class:`AuditLogEntry`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_invite_create(invite)\n\n    Called when an :class:`Invite` is created.\n    You must have :attr:`~Permissions.manage_channels` to receive this.\n\n    .. versionadded:: 1.3\n\n    .. note::\n\n        There is a rare possibility that the :attr:`Invite.guild` and :attr:`Invite.channel`\n        attributes will be of :class:`Object` rather than the respective models.\n\n    :param invite: The invite that was created.\n    :type invite: :class:`Invite`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_invite_delete(invite)\n\n    Called when an :class:`Invite` is deleted.\n    You must have :attr:`~Permissions.manage_channels` to receive this.\n\n    .. versionadded:: 1.3\n\n    .. note::\n\n        There is a rare possibility that the :attr:`Invite.guild` and :attr:`Invite.channel`\n        attributes will be of :class:`Object` rather than the respective models.\n\n        Outside of those two attributes, the only other attribute guaranteed to be\n        filled by the Discord gateway for this event is :attr:`Invite.code`.\n\n    :param invite: The invite that was deleted.\n    :type invite: :class:`Invite`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_guild_feature_ack(payload)\n\n    Called when a :class:`Guild` feature is acknowledged.\n\n    This is a purposefully low-level event. Richer events such as\n    :func:`on_scheduled_event_ack` are dispatched separately.\n\n    .. versionadded:: 2.1\n\n    :param payload: The raw event payload data.\n    :type payload: :class:`RawGuildFeatureAckEvent`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_integration_create(integration)\n\n    Called when an integration is created.\n\n    .. versionadded:: 2.0\n\n    :param integration: The integration that was created.\n    :type integration: :class:`Integration`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_integration_update(integration)\n\n    Called when an integration is updated.\n\n    .. versionadded:: 2.0\n\n    :param integration: The integration that was updated.\n    :type integration: :class:`Integration`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_guild_integrations_update(guild)\n\n    Called whenever an integration is created, modified, or removed from a guild.\n\n    .. versionadded:: 1.4\n\n    :param guild: The guild that had its integrations updated.\n    :type guild: :class:`Guild`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_webhooks_update(channel)\n\n    Called whenever a webhook is created, modified, or removed from a guild channel.\n\n    :param channel: The channel that had its webhooks updated.\n    :type channel: :class:`abc.GuildChannel`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_integration_delete(payload)\n\n    Called when an integration is deleted.\n\n    .. versionadded:: 2.0\n\n    :param payload: The raw event payload data.\n    :type payload: :class:`RawIntegrationDeleteEvent`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_interaction(interaction)\n\n    Called when an interaction happens.\n\n    This currently happens when an application command or component is used.\n\n    .. versionadded:: 2.0\n\n    :param interaction: The interaction data.\n    :type interaction: :class:`Interaction`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_interaction_finish(interaction)\n\n    Called when an interaction's result is finalized.\n\n    .. versionadded:: 2.0\n\n    :param interaction: The interaction data with :attr:`Interaction.successful` filled.\n    :type interaction: :class:`Interaction`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_modal(modal)\n\n    Called when a modal is sent.\n\n    This currently happens when an application command or component responds with a modal.\n\n    .. versionadded:: 2.0\n\n    :param modal: The modal data.\n    :type modal: :class:`Modal`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_member_join(member)\n\n    Called when a :class:`Member` joins a :class:`Guild`.\n\n    :param member: The member who joined.\n    :type member: :class:`Member`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_member_remove(member)\n\n    Called when a :class:`Member` leaves a :class:`Guild`.\n\n    If the guild or member could not be found in the internal cache this event\n    will not be called, you may use :func:`on_raw_member_remove` instead.\n\n    :param member: The member who left.\n    :type member: :class:`Member`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_member_remove(payload)\n\n    Called when a :class:`Member` leaves a :class:`Guild`.\n\n    Unlike :func:`on_member_remove`\n    this is called regardless of the guild or member being in the internal cache.\n\n    .. versionadded:: 2.1\n\n    :param payload: The raw event payload data.\n    :type payload: :class:`RawMemberRemoveEvent`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_member_update(before, after)\n\n    Called when a :class:`Member` updates their profile.\n\n    This is called when one or more of the following things change:\n\n    - nickname\n    - roles\n    - pending\n    - timeout\n    - guild avatar\n    - flags\n```\n\n----------------------------------------\n\nTITLE: Running the Discord Bot Script from the Command Line - Shell\nDESCRIPTION: These shell commands show how to execute the minimal Discord bot Python script from the command line on different operating systems. On Windows, 'py -3' is used, while on Unix-based systems, 'python3' is used. The input is the script file (example_bot.py) and the output is the bot running as specified in the Python implementation. Requires Python 3 installed and accessible via relevant command.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/quickstart.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ py -3 example_bot.py\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 example_bot.py\n```\n\n----------------------------------------\n\nTITLE: Utilizing Utility Functions and Data Classes in Discord.py-Self (Python)\nDESCRIPTION: This section describes utility functions (such as find, get, setup_logging, snowflake_time, and others) and the ResolvedInvite data class, all part of discord.utils. The documentation specifies expected usage for resolving invites, handling snowflake timestamps, formatting, and safe sentinel values like MISSING. Usage requires importing discord.utils, and some functions require specific parameters based on Discord API structures.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: discord.utils.find\\n\\n.. autofunction:: discord.utils.get\\n\\n.. autofunction:: discord.utils.setup_logging\\n\\n.. autofunction:: discord.utils.maybe_coroutine\\n\\n.. autofunction:: discord.utils.snowflake_time\\n\\n.. autofunction:: discord.utils.time_snowflake\\n\\n.. autofunction:: discord.utils.oauth_url\\n\\n.. autofunction:: discord.utils.remove_markdown\\n\\n.. autofunction:: discord.utils.escape_markdown\\n\\n.. autofunction:: discord.utils.escape_mentions\\n\\n.. class:: ResolvedInvite\\n\\n    A data class which represents a resolved invite returned from :func:`discord.utils.resolve_invite`.\\n\\n    .. attribute:: code\\n\\n        The invite code.\\n\\n        :type: :class:`str`\\n\\n    ..  attribute:: event\\n\\n        The id of the scheduled event that the invite refers to.\\n\\n        :type: Optional[:class:`int`]\\n\\n.. autofunction:: discord.utils.resolve_invite\\n\\n.. autofunction:: discord.utils.resolve_template\\n\\n.. autofunction:: discord.utils.sleep_until\\n\\n.. autofunction:: discord.utils.utcnow\\n\\n.. autofunction:: discord.utils.format_dt\\n\\n.. autofunction:: discord.utils.as_chunks\\n\\n.. autofunction:: discord.utils.set_target\\n\\n.. data:: discord.utils.MISSING\\n\\n    A type safe sentinel used in the library to represent something as missing. Used to distinguish from ``None`` values.\\n\\n    .. versionadded:: 2.0\n```\n\n----------------------------------------\n\nTITLE: Describing ChannelType and MessageType Enumerations in Discord.py-Self (Python)\nDESCRIPTION: This code provides detailed enumeration class documentation for ChannelType and MessageType from the Discord API, as used by discord.py-self. It lists all possible enumeration attributes representing channel and message types, each with a description and its use cases in the library. Enumerations support safe type-checking in bot logic, and some attributes are version-gated. Requires use of enum.Enum-like classes within discord.py.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. class:: ChannelType\\n\\n    Specifies the type of channel.\\n\\n    .. attribute:: text\\n\\n        A text channel.\\n\\n    .. attribute:: voice\\n\\n        A voice channel.\\n\\n    .. attribute:: private\\n\\n        A private text channel. Also called a direct message.\\n\\n    .. attribute:: group\\n\\n        A private group text channel.\\n\\n    .. attribute:: category\\n\\n        A category channel.\\n\\n    .. attribute:: news\\n\\n        A guild news channel.\\n\\n    .. attribute:: stage_voice\\n\\n        A guild stage voice channel.\\n\\n        .. versionadded:: 1.7\\n\\n    .. attribute:: news_thread\\n\\n        A news thread.\\n\\n        .. versionadded:: 2.0\\n\\n    .. attribute:: public_thread\\n\\n        A public thread.\\n\\n        .. versionadded:: 2.0\\n\\n    .. attribute:: private_thread\\n\\n        A private thread.\\n\\n        .. versionadded:: 2.0\\n\\n    .. attribute:: directory\\n\\n        A directory channel.\\n\\n        .. versionadded:: 2.1\\n\\n    .. attribute:: forum\\n\\n        A forum channel.\\n\\n        .. versionadded:: 2.0\\n\\n    .. attribute:: media\\n\\n        A media channel.\\n\\n        .. versionadded:: 2.1\\n\\n.. class:: MessageType\\n\\n    Specifies the type of :class:`Message`. This is used to denote if a message\\n    is to be interpreted as a system message or a regular message.\\n\\n    .. container:: operations\\n\\n      .. describe:: x == y\\n\\n          Checks if two messages are equal.\\n      .. describe:: x != y\\n\\n          Checks if two messages are not equal.\\n\\n    .. attribute:: default\\n\\n        The default message type. This is the same as regular messages.\\n\\n    .. attribute:: recipient_add\\n\\n        The system message when a user is added to a group private\\n        message or a thread.\\n\\n    .. attribute:: recipient_remove\\n\\n        The system message when a user is removed from a group private\\n        message or a thread.\\n\\n    .. attribute:: call\\n\\n        The system message denoting call state, e.g. missed call, started call,\\n        etc.\\n\\n    .. attribute:: channel_name_change\\n\\n        The system message denoting that a channel's name has been changed.\\n\\n    .. attribute:: channel_icon_change\\n\\n        The system message denoting that a channel's icon has been changed.\\n\\n    .. attribute:: pins_add\\n\\n        The system message denoting that a pinned message has been added to a channel.\\n\\n    .. attribute:: new_member\\n\\n        The system message denoting that a new member has joined a Guild.\\n\\n    .. attribute:: premium_guild_subscription\\n\\n        The system message denoting that a member has \"nitro boosted\" a guild.\\n\\n    .. attribute:: premium_guild_tier_1\\n\\n        The system message denoting that a member has \"nitro boosted\" a guild\\n        and it achieved level 1.\\n\\n    .. attribute:: premium_guild_tier_2\\n\\n        The system message denoting that a member has \"nitro boosted\" a guild\\n        and it achieved level 2.\\n\\n    .. attribute:: premium_guild_tier_3\\n\\n        The system message denoting that a member has \"nitro boosted\" a guild\\n        and it achieved level 3.\\n\\n    .. attribute:: channel_follow_add\\n\\n        The system message denoting that an announcement channel has been followed.\\n\\n        .. versionadded:: 1.3\\n    .. attribute:: guild_stream\\n\\n        The system message denoting that a member is streaming in the guild.\\n\\n        .. versionadded:: 1.7\\n    .. attribute:: guild_discovery_disqualified\\n\\n        The system message denoting that the guild is no longer eligible for Server\\n        Discovery.\\n\\n        .. versionadded:: 1.7\\n    .. attribute:: guild_discovery_requalified\\n\\n        The system message denoting that the guild has become eligible again for Server\\n        Discovery.\\n\\n        .. versionadded:: 1.7\\n    .. attribute:: guild_discovery_grace_period_initial_warning\\n\\n        The system message denoting that the guild has failed to meet the Server\\n        Discovery requirements for one week.\\n\\n        .. versionadded:: 1.7\\n    .. attribute:: guild_discovery_grace_period_final_warning\\n\\n        The system message denoting that the guild has failed to meet the Server\\n        Discovery requirements for 3 weeks in a row.\\n\\n        .. versionadded:: 1.7\\n    .. attribute:: thread_created\\n\\n        The system message denoting that a thread has been created. This is only\\n        sent if the thread has been created from an older message. The period of time\\n        required for a message to be considered old cannot be relied upon and is up to\\n        Discord.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: reply\\n\\n        The system message denoting that the author is replying to a message.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: chat_input_command\\n\\n        The system message denoting that a slash command was executed.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: guild_invite_reminder\\n\\n        The system message sent as a reminder to invite people to the guild.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: thread_starter_message\\n\\n        The system message denoting the message in the thread that is the one that started the\\n        thread's conversation topic.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: context_menu_command\\n\\n        The system message denoting that a context menu command was executed.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: auto_moderation_action\\n\\n        The system message sent when an AutoMod rule is triggered. This is only\\n        sent if the rule is configured to sent an alert when triggered.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: role_subscription_purchase\\n\\n        The system message sent when a user purchases or renews a role subscription.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: interaction_premium_upsell\\n\\n        The system message sent when a user is given an advertisement to purchase a premium tier for\\n        an application during an interaction.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: stage_start\\n\\n        The system message sent when the stage starts.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: stage_end\\n\\n        The system message sent when the stage ends.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: stage_speaker\\n\\n        The system message sent when the stage speaker changes.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: stage_raise_hand\\n\\n        The system message sent when a user is requesting to speak by raising their hands.\\n\\n        .. versionadded:: 2.0\\n    .. attribute:: stage_topic\\n\\n        The system message sent when the stage topic changes.\\n\\n        .. versionadded:: 2.0\n```\n\n----------------------------------------\n\nTITLE: Handling Thread Member Join and Removal Event Hooks in Discord.py-Self (Python)\nDESCRIPTION: These event function definitions handle when members join or leave Discord threads. The documentation covers on_thread_member_join(member), on_thread_member_remove(member), and the raw variant on_raw_thread_member_remove(payload), describing the expected arguments (ThreadMember and RawThreadMembersUpdate). These event callbacks are central to tracking thread membership dynamics within bots.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. function:: on_thread_member_join(member)\\n              on_thread_member_remove(member)\\n\\n    Called when a :class:`ThreadMember` leaves or joins a :class:`Thread`.\\n\\n    You can get the thread a member belongs in by accessing :attr:`ThreadMember.thread`.\\n\\n    .. versionadded:: 2.0\\n\\n    :param member: The member who joined or left.\\n    :type member: :class:`ThreadMember`\\n\\n.. function:: on_raw_thread_member_remove(payload)\\n\\n    Called when a :class:`ThreadMember` leaves a :class:`Thread`. Unlike :func:`on_thread_member_remove` this\\n    is called regardless of the member being in the internal thread's members cache or not.\\n\\n    .. versionadded:: 2.0\\n\\n    :param payload: The raw event payload data.\\n    :type payload: :class:`RawThreadMembersUpdate`\n```\n\n----------------------------------------\n\nTITLE: Defining Thread Deletion Event Handlers in Discord.py-Self (Python)\nDESCRIPTION: This code documents the event hook functions for handling Discord thread deletion events in discord.py-self. It describes both regular and raw variants, specifying how functions like on_raw_thread_delete(payload) are called regardless of cache state. Handlers expect thread objects or raw payloads, typically as instances of Thread or RawThreadDeleteEvent. User implementations use these as async event callbacks in a Discord bot.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    :param thread: The thread that got deleted.\\n    :type thread: :class:`Thread`\\n\\n.. function:: on_raw_thread_delete(payload)\\n\\n    Called whenever a thread is deleted. Unlike :func:`on_thread_delete` this\\n    is called regardless of the thread being in the internal thread cache or not.\\n\\n    .. versionadded:: 2.0\\n\\n    :param payload: The raw event payload data.\\n    :type payload: :class:`RawThreadDeleteEvent`\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handler Functions for Discord.py-self (reStructuredText)\nDESCRIPTION: This set of code snippets defines the Python function signatures for event handler hooks in Discord.py-self, using reStructuredText's function directive for Sphinx documentation. Each snippet encapsulates the event's signature, purpose, and detailed usage notes. Required context includes Discord.py-self's class hierarchy (e.g., Member, User, Guild, Message), and it targets developers looking to implement or override these event functions. Inputs are Python objects reflecting Discord entities, and outputs are callbacks triggered asynchronously on event occurrence. There are no direct computational outputs; instead, these are documentation entries designed for use with Sphinx or similar doc generators.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_user_update(before, after)\n\n    Called when a :class:`User` updates their profile.\n\n    This is called when one or more of the following things change:\n\n    - avatar\n    - username\n    - discriminator\n\n    :param before: The updated user's old info.\n    :type before: :class:`User`\n    :param after: The updated user's updated info.\n    :type after: :class:`User`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_member_ban(guild, user)\n\n    Called when a user gets banned from a :class:`Guild`.\n\n    :param guild: The guild the user got banned from.\n    :type guild: :class:`Guild`\n    :param user: The user that got banned.\n                 Can be either :class:`User` or :class:`Member` depending if\n                 the user was in the guild or not at the time of removal.\n    :type user: Union[:class:`User`, :class:`Member`]\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_member_unban(guild, user)\n\n    Called when a :class:`User` gets unbanned from a :class:`Guild`.\n\n    :param guild: The guild the user got unbanned from.\n    :type guild: :class:`Guild`\n    :param user: The user that got unbanned.\n    :type user: :class:`User`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_presence_update(before, after)\n\n    Called when a :class:`Member` or :class:`Relationship` updates their presence.\n\n    This is called when one or more of the following things change:\n\n    - status\n    - activity\n\n    .. versionadded:: 2.0\n\n    :param before: The updated member or friend's old info.\n    :type before: Union[:class:`Member`, :class:`Relationship`]\n    :param after: The updated member or friend's updated info.\n    :type after: Union[:class:`Member`, :class:`Relationship`]\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_member_list_update(data)\n\n    Called when a member list update is received and parsed.\n\n    .. versionadded:: 2.0\n\n    :param data: The raw member list update data.\n    :type data: :class:`dict`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_message(message)\n\n    Called when a :class:`Message` is created and sent.\n\n    .. warning::\n\n        Your bot's own messages and private messages are sent through this\n        event. This can lead cases of 'recursion' depending on how your bot was\n        programmed. If you want the bot to not reply to itself, consider\n        checking the user IDs. Note that :class:`~ext.commands.Bot` does not\n        have this problem.\n\n    :param message: The current message.\n    :type message: :class:`Message`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_message_edit(before, after)\n\n    Called when a :class:`Message` receives an update event. If the message is not found\n    in the internal message cache, then these events will not be called.\n    Messages might not be in cache if the message is too old\n    or the client is participating in high traffic guilds.\n\n    If this occurs increase the :class:`max_messages <Client>` parameter\n    or use the :func:`on_raw_message_edit` event instead.\n\n    The following non-exhaustive cases trigger this event:\n\n    - A message has been pinned or unpinned.\n    - The message content has been changed.\n    - The message has received an embed.\n\n        - For performance reasons, the embed server does not do this in a \"consistent\" manner.\n\n    - The message's embeds were suppressed or unsuppressed.\n    - A call message has received an update to its participants or ending time.\n\n    :param before: The previous version of the message.\n    :type before: :class:`Message`\n    :param after: The current version of the message.\n    :type after: :class:`Message`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_message_delete(message)\n\n    Called when a message is deleted. If the message is not found in the\n    internal message cache, then this event will not be called.\n    Messages might not be in cache if the message is too old\n    or the client is participating in high traffic guilds.\n\n    If this occurs increase the :class:`max_messages <Client>` parameter\n    or use the :func:`on_raw_message_delete` event instead.\n\n    :param message: The deleted message.\n    :type message: :class:`Message`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_bulk_message_delete(messages)\n\n    Called when messages are bulk deleted. If none of the messages deleted\n    are found in the internal message cache, then this event will not be called.\n    If individual messages were not found in the internal message cache,\n    this event will still be called, but the messages not found will not be included in\n    the messages list. Messages might not be in cache if the message is too old\n    or the client is participating in high traffic guilds.\n\n    If this occurs increase the :class:`max_messages <Client>` parameter\n    or use the :func:`on_raw_bulk_message_delete` event instead.\n\n    :param messages: The messages that have been deleted.\n    :type messages: List[:class:`Message`]\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_message_ack(message, manual)\n\n    Called when a message is marked as read. If the message is not found in the\n    internal message cache, or the message ID is not real, then this event will not be called.\n\n    If this occurs increase the :class:`max_messages <Client>` parameter\n    or use the :func:`on_raw_message_ack` event instead.\n\n    .. note::\n\n        Messages sent by the current user are automatically marked as read,\n        but this event will not dispatch.\n\n    .. versionadded:: 2.1\n\n    :param message: The message that has been marked as read.\n    :type message: :class:`Message`\n    :param manual: Whether the channel read state was manually set to this message.\n    :type manual: :class:`bool`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_message_edit(payload)\n\n    Called when a message is edited. Unlike :func:`on_message_edit`, this is called\n    regardless of the state of the internal message cache.\n\n    If the message is found in the message cache,\n    it can be accessed via :attr:`RawMessageUpdateEvent.cached_message`. The cached message represents\n    the message before it has been edited. For example, if the content of a message is modified and\n    triggers the :func:`on_raw_message_edit` coroutine, the :attr:`RawMessageUpdateEvent.cached_message`\n    will return a :class:`Message` object that represents the message before the content was modified.\n\n    Due to the inherently raw nature of this event, the data parameter coincides with\n    the raw data given by the :ddocs:`gateway <topics/gateway-events#message-update>`.\n\n    Since the data payload can be partial, care must be taken when accessing stuff in the dictionary.\n    One example of a common case of partial data is when the ``'content'`` key is inaccessible. This\n    denotes an \"embed\" only edit, which is an edit in which only the embeds are updated by the Discord\n    embed server.\n\n    :param payload: The raw event payload data.\n    :type payload: :class:`RawMessageUpdateEvent`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_message_delete(payload)\n\n    Called when a message is deleted. Unlike :func:`on_message_delete`, this is\n    called regardless of the message being in the internal message cache or not.\n\n    If the message is found in the message cache,\n    it can be accessed via :attr:`RawMessageDeleteEvent.cached_message`\n\n    :param payload: The raw event payload data.\n    :type payload: :class:`RawMessageDeleteEvent`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_bulk_message_delete(payload)\n\n    Called when a bulk delete is triggered. Unlike :func:`on_bulk_message_delete`, this is\n    called regardless of the messages being in the internal message cache or not.\n\n    If the messages are found in the message cache,\n    they can be accessed via :attr:`RawBulkMessageDeleteEvent.cached_messages`\n\n    :param payload: The raw event payload data.\n    :type payload: :class:`RawBulkMessageDeleteEvent`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_message_ack(payload)\n\n    Called when a message is marked as read. Unlike :func:`on_message_ack`, this is\n    called regardless of the message being in the internal message cache or not.\n\n    If the message is found in the message cache,\n    it can be accessed via :attr:`RawMessageAckEvent.cached_message`\n\n    .. versionadded:: 2.1\n\n    :param payload: The raw event payload data.\n    :type payload: :class:`RawMessageAckEvent`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_recent_mention_delete(message)\n\n    Called when a message you were mentioned in in the last week is acknowledged and deleted.\n    If the message is not found in the internal message cache, then this event will not be called.\n\n    .. versionadded:: 2.0\n\n    :param message: The message that was deleted.\n    :type message: :class:`Message`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_recent_mention_delete(message_id)\n\n    Called when a message you were mentioned in in the last week is acknowledged and deleted.\n    Unlike :func:`on_recent_mention_delete`, this is called regardless of the message being in the\n    internal message cache or not.\n\n    .. versionadded:: 2.0\n\n    :param message_id: The ID of the message that was deleted.\n    :type message_id: :class:`int`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_poll_vote_add(user, answer)\n              on_poll_vote_remove(user, answer)\n\n    Called when a :class:`Poll` gains or loses a vote. If the ``user`` or ``answer``'s poll\n    parent message are not cached then this event will not be called.\n\n    .. note::\n\n        If the poll allows multiple answers and the user removes or adds multiple votes, this\n        event will be called as many times as votes that are added or removed.\n\n    .. versionadded:: 2.1\n\n    :param user: The user that performed the action.\n    :type user: Union[:class:`User`, :class:`Member`]\n    :param answer: The answer the user voted or removed their vote from.\n    :type answer: :class:`PollAnswer`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: on_raw_poll_vote_add(payload)\n              on_raw_poll_vote_remove(payload)\n\n    Called when a :class:`Poll` gains or loses a vote. Unlike :func:`on_poll_vote_add` and :func:`on_poll_vote_remove`\n```\n\n----------------------------------------\n\nTITLE: Describing Application State Comparisons in reStructuredText\nDESCRIPTION: These snippets use the reStructuredText '.. describe::' directive to document how various application state values can be compared using standard Python operators, such as ==, !=, >, <, >=, and <=. They illustrate operator overloading behaviors supported by the enumerated state classes and inform users of the expected comparison semantics. No programming dependencies are required; these are used to clarify documentation for developers reading the generated HTML or text docs.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_8\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. describe:: x < y\n\n    Checks if a application state is lower than another.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. describe:: x >= y\n\n    Checks if a application state is higher or equal to another.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. describe:: x <= y\n\n    Checks if a application state is lower or equal to another.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. describe:: x == y\n\n    Checks if two application states are equal.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. describe:: x != y\n\n    Checks if two application states are not equal.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. describe:: x > y\n\n    Checks if a application state is higher than another.\n\n```\n\n----------------------------------------\n\nTITLE: Documenting State, Status, and Configuration Classes in reStructuredText\nDESCRIPTION: The snippets use the reStructuredText '.. class::' directive to document enumeration or state-related classes for Discord applications and commerce flows. Each class is described in terms of its role, context, and versioning, aiding developers in understanding how to interact with or extend these enumerations in the discord.py-self API. No dependencies are needed for this documentation, but readers are expected to have a general understanding of Discord entities and the library.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_10\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: ApplicationVerificationState\n\n    Represents the verification application state of an :class:`Application`.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: StoreApplicationState\n\n    Represents the commerce application state of an :class:`Application`.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: RPCApplicationState\n\n    Represents the RPC application state of an :class:`Application`.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: ApplicationDiscoverabilityState\n\n    Represents the discoverability state of an :class:`Application`.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: ApplicationBuildStatus\n\n    Represents the status of an :class:`ApplicationBuild`.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: EmbeddedActivityPlatform\n\n    Represents an available platform for a :class:`EmbeddedActivityConfig`.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: EmbeddedActivityOrientation\n\n    Represents an orientation capability of a :class:`EmbeddedActivityConfig`.\n\n    This is only used by mobile clients.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: EmbeddedActivityLabelType\n\n    Represents the label shown by an embedded activity.\n\n    .. versionadded:: 2.1\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: EmbeddedActivityReleasePhase\n\n    Represents the release phase of an embedded activity for a specific :class:`EmbeddedActivityPlatform`.\n\n    .. versionadded:: 2.1\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: PayoutAccountStatus\n\n    Represents the status of a team payout account.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: PayoutStatus\n\n    Represents the status of a team payout.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: PayoutReportType\n\n    Represents the type of downloadable payout report.\n\n    .. versionadded:: 2.0\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: WebhookType\n\n    Represents the type of webhook that can be received.\n\n    .. versionadded:: 1.3\n\n```\n\n----------------------------------------\n\nTITLE: Defining ESRB Ratings for SKUs in Discord.py-self (Python)\nDESCRIPTION: This snippet describes a Python class containing ESRB (Entertainment Software Rating Board) rating levels as class attributes for SKUs, including E, E10+, T, M, AO, and pending rating. It enables developers to consistently assign or interpret ESRB ratings in metadata. The class was introduced in version 2.0, and requires no external dependencies.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n.. class:: ESRBRating\n\n    Represents the ESRB rating of a SKU.\n\n    .. versionadded:: 2.0\n\n    .. attribute:: everyone\n\n        The SKU is rated E for everyone.\n\n    .. attribute:: everyone_ten_plus\n\n        The SKU is rated E10+ for everyone ten and older.\n\n    .. attribute:: teen\n\n        The SKU is rated T for teen.\n\n    .. attribute:: mature\n\n        The SKU is rated M for mature.\n\n    .. attribute:: adults_only\n\n        The SKU is rated AO for adults only.\n\n    .. attribute:: rating_pending\n\n        The SKU is pending a rating.\n```\n\n----------------------------------------\n\nTITLE: Defining PEGI Ratings for SKUs in Discord.py-self (Python)\nDESCRIPTION: This documentation presents a PEGIRating class in Python, with attributes for each PEGI (Pan-European Game Information) rating (3, 7, 12, 16, 18). It standardizes age-related metadata assignment for SKUs in the discord.py-self framework. Introduced in version 2.0, it works without additional dependencies.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n.. class:: PEGIRating\n\n    Represents the PEGI rating of a SKU.\n\n    .. versionadded:: 2.0\n\n    .. attribute:: three\n\n        The SKU is rated 3.\n\n    .. attribute:: seven\n\n        The SKU is rated 7.\n\n    .. attribute:: twelve\n\n        The SKU is rated 12.\n\n    .. attribute:: sixteen\n\n        The SKU is rated 16.\n\n    .. attribute:: eighteen\n\n        The SKU is rated 18.\n```\n\n----------------------------------------\n\nTITLE: Representing Content Rating Agencies in Discord.py-self (Python)\nDESCRIPTION: This snippet documents a class structure for representing content rating agencies associated with SKUs. It defines the agencies (ESRB and PEGI) as class attributes, designed for lookup or assignment in Python logic. The structure is versioned (added in 2.0), and allows consistent referencing to a SKU's regulatory body within the project. No dependencies are required aside from base Python.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n.. class:: ContentRatingAgency\n\n    Represents the content rating agency of a SKU.\n\n    .. versionadded:: 2.0\n\n    .. attribute:: esrb\n\n        The ESRB.\n\n    .. attribute:: pegi\n\n        The PEGI system.\n```\n\n----------------------------------------\n\nTITLE: Defining PEGI Content Descriptors for SKUs in Discord.py-self (Python)\nDESCRIPTION: This documented class lists the PEGI (Pan-European Game Information) rating content descriptors, such as violence, fear, drugs, sex, discrimination, bad language, and gambling. Each is an attribute on a Python class, enabling the annotation of maturity and sensitive content in game SKUs. The pattern is used for metadata assignment and filtering.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n.. class:: PEGIContentDescriptor\n\n    Represents a PEGI rating content descriptor.\n\n    .. versionadded:: 2.0\n\n    .. attribute:: violence\n\n        The SKU contains violence.\n\n    .. attribute:: bad_language\n\n        The SKU contains bad language.\n\n    .. attribute:: fear\n\n        The SKU instills fear.\n\n    .. attribute:: gambling\n\n        The SKU contains gambling.\n\n    .. attribute:: sex\n\n        The SKU contains sexual themes.\n\n    .. attribute:: drugs\n\n        The SKU contains drug references.\n\n    .. attribute:: discrimination\n\n        The SKU contains discrimination.\n```\n\n----------------------------------------\n\nTITLE: Defining Operating Systems for SKU Requirements in Discord.py-self (Python)\nDESCRIPTION: This snippet provides a Python class with attributes representing supported operating systems for SKU system requirements, including PC platforms (Windows, macOS, Linux), mobile (Android, iOS), PlayStation, and an unknown fallback. Used for both assignment and lookup operations in requirements definition, it helps standardize the environment support coding. Annotations indicate versions where new platforms were added.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n.. class:: OperatingSystem\n\n    Represents the operating system of a SKU's system requirements.\n\n    .. versionadded:: 2.0\n\n    .. attribute:: windows\n\n        Represents Windows.\n\n    .. attribute:: mac\n\n        Represents macOS.\n\n    .. attribute:: linux\n\n        Represents Linux.\n\n    .. attribute:: android\n\n        Represents Android.\n\n    .. attribute:: ios\n\n        Represents iOS.\n\n    .. attribute:: playstation\n\n        Represents PlayStation.\n\n        .. versionadded:: 2.1\n\n    .. attribute:: unknown\n\n        Represents an unknown operating system.\n```\n\n----------------------------------------\n\nTITLE: Documenting Sticker Animation Options in Discord.py-self (Python)\nDESCRIPTION: Describes a class for sticker animation settings, corresponding to Discord client's Settings > Accessibility. Attributes 'always', 'on_interaction', and 'never' encapsulate user-preference values for sticker animation. This is intended for storing or referring to sticker animation configuration within discord.py-self, and requires no additional packages.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n.. class:: StickerAnimationOptions\n\n    Represents the options found in ``Settings > Accessibility > Stickers`` in the Discord client.\n\n    .. attribute:: always\n\n        Always animate stickers.\n\n    .. attribute:: on_interaction\n\n        Animate stickers when they are interacted with.\n\n    .. attribute:: never\n\n        Never animate stickers.\n```\n\n----------------------------------------\n\nTITLE: Defining Spoiler Content Options in Discord Client (Python)\nDESCRIPTION: Defines enumeration attributes for the Spoiler Content display options within the Discord client under Settings > Text and Images > Show Spoiler Content. Each attribute represents a different spoiler rendering behavior, such as always showing spoilers, showing them on click, or only if the user is a moderator. No external dependencies are required. Attributes can be referenced elsewhere to determine or set spoiler visibility settings.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass SpoilerContentOption:\n    \"\"\"\n    Represents the options found in ``Settings > Text and Images > Show Spoiler Content`` in the Discord client.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    always = ...  # Always render spoilers.\n    on_click = ...  # Render spoilers when they are interacted with.\n    if_moderator = ...  # Render spoilers if the user is a moderator.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Inbox Tabs in Discord Client (Python)\nDESCRIPTION: Enumerates the types of tabs available in the Discord inbox, such as mentions, unreads, todos, and for you. Each class attribute represents a specific inbox section, enabling consistent references across the application. Useful for message filtering, notification presentation, and UI tab management. All settings apply to Discord client operations.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass InboxTab:\n    \"\"\"\n    Represents the tabs found in the Discord inbox.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    default = ...  # No inbox tab has been yet selected.\n    mentions = ...  # The mentions tab.\n    unreads = ...  # The unreads tab.\n    todos = ...  # The todos tab.\n    for_you = ...  # The for you tab.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Sticker Picker Sections in Discord Client (Python)\nDESCRIPTION: Defines set sections for the sticker picker in Discord, such as favorite and recent, with guilds and sticker pack SKUs also accepted as valid sections. This aids UI logic for sticker selection and categorizing stickers in custom applications or bots.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass StickerPickerSection:\n    \"\"\"\n    Represents the sections found in the Discord sticker picker. Any guild and sticker pack SKU is also a valid section.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    favorite = ...  # The favorite section.\n    recent = ...  # The recents section.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Locales in Discord Client (Python)\nDESCRIPTION: Lists all locales supported by Discord with locale codes as attributes, such as american_english (en-US), arabic, french, japanese, and more. Provides a centralized mapping for internationalization and localization logic. Each attribute holds a locale identifier compatible with Discord's API, facilitating language selection in applications.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass Locale:\n    \"\"\"\n    Supported locales by Discord.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    american_english = ...  # The ``en-US`` locale.\n    arabic = ...  # The ``ar`` locale.\n    british_english = ...  # The ``en-GB`` locale.\n    bulgarian = ...  # The ``bg`` locale.\n    chinese = ...  # The ``zh-CN`` locale.\n    taiwan_chinese = ...  # The ``zh-TW`` locale.\n    croatian = ...  # The ``hr`` locale.\n    czech = ...  # The ``cs`` locale.\n    danish = ...  # The ``da`` locale.\n    dutch = ...  # The ``nl`` locale.\n    finnish = ...  # The ``fi`` locale.\n    french = ...  # The ``fr`` locale.\n    german = ...  # The ``de`` locale.\n    greek = ...  # The ``el`` locale.\n    hindi = ...  # The ``hi`` locale.\n    hungarian = ...  # The ``hu`` locale.\n    indonesian = ...  # The ``id`` locale.\n    italian = ...  # The ``it`` locale.\n    japanese = ...  # The ``ja`` locale.\n    korean = ...  # The ``ko`` locale.\n    latin_american_spanish = ...  # The ``es-419`` locale.\n    lithuanian = ...  # The ``lt`` locale.\n    norwegian = ...  # The ``no`` locale.\n    polish = ...  # The ``pl`` locale.\n    brazil_portuguese = ...  # The ``pt-BR`` locale.\n    romanian = ...  # The ``ro`` locale.\n    russian = ...  # The ``ru`` locale.\n    spain_spanish = ...  # The ``es-ES`` locale.\n    swedish = ...  # The ``sv-SE`` locale.\n    thai = ...  # The ``th`` locale.\n    turkish = ...  # The ``tr`` locale.\n    ukrainian = ...  # The ``uk`` locale.\n    vietnamese = ...  # The ``vi`` locale.\n\n```\n\n----------------------------------------\n\nTITLE: Defining MFA Requirement Levels for Guilds (Python)\nDESCRIPTION: Enumerates Multi-Factor Authentication (MFA) requirement levels for Discord guilds, providing attributes for disabled and require_2fa. Also specifies rich operator descriptions for comparing MFA levels between instances (e.g., equality, inequality, less/greater). Used in security logic and permission handling.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass MFALevel:\n    \"\"\"\n    Represents the Multi-Factor Authentication requirement level of a guild.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    # Operators: ==, !=, >, <, >=, <= are described in documentation.\n    disabled = ...  # The guild has no MFA requirement.\n    require_2fa = ...  # The guild requires 2 factor authentication.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Types for Scheduled Events (Python)\nDESCRIPTION: Defines entity types for scheduled events in Discord, such as stage instance, voice, and external. Each attribute corresponds to where an event will take place, guiding event scheduling logic and validation in applications integrating with Discord events.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass EntityType:\n    \"\"\"\n    Represents the type of entity that a scheduled event is for.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    stage_instance = ...  # The scheduled event will occur in a stage instance.\n    voice = ...  # The scheduled event will occur in a voice channel.\n    external = ...  # The scheduled event will occur externally.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Event Statuses for Discord Events (Python)\nDESCRIPTION: Lists possible statuses for Discord events such as scheduled, active, completed, cancelled, with aliases for ended and canceled. Enables precise event status tracking and management in external event-related features. Designed for use within scheduling, calendar, or event notification logic.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass EventStatus:\n    \"\"\"\n    Represents the status of an event.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    scheduled = ...  # The event is scheduled.\n    active = ...  # The event is active.\n    completed = ...  # The event has ended.\n    cancelled = ...  # The event has been cancelled.\n    canceled = ...  # An alias for :attr:`cancelled`.\n    ended = ...  # An alias for :attr:`completed`.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Required User Action Types (Python)\nDESCRIPTION: Enumerates possible actions required from a Discord user, such as updating agreements, completing captcha, verifying email or phone, and various re-verification workflows. Each attribute maps to a specific user action needed to resolve account restrictions or fulfill compliance. Used in onboarding and security enforcement scenarios.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass RequiredActionType:\n    \"\"\"\n    Represents an action Discord requires the user to take.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    update_agreements = ...  # The user must update their agreement.\n    complete_captcha = ...  # The user must complete a captcha.\n    verify_email = ...  # The user must add and verify an email address.\n    reverify_email = ...  # The user must reverify their existing email address.\n    verify_phone = ...  # The user must add a phone number.\n    reverify_phone = ...  # The user must reverify their existing phone number.\n    reverify_email_or_verify_phone = ...  # The user must reverify their email or add a phone.\n    verify_email_or_reverify_phone = ...  # The user must verify email or reverify phone.\n    reverify_email_or_reverify_phone = ...  # The user must reverify email or reverify phone.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Client Types for Discord (Python)\nDESCRIPTION: Declares attributes for each supported Discord client type: web, mobile, and desktop. Useful for feature gating, client-dependent logic, and platform-specific user experiences in Discord bots or tools interacting with Discord APIs.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass ClientType:\n    \"\"\"\n    Represents a type of Discord client.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    web = ...  # Represents the web client.\n    mobile = ...  # Represents a mobile client.\n    desktop = ...  # Represents a desktop client.\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Model Attributes in Discord.py-self (Python)\nDESCRIPTION: This snippet lists out and describes model attributes using Sphinx-style docstring directives (.. attribute::), for various objects such as invites, channels, threads, and automod rules in the discord.py-self library. Each attribute includes a purpose description and its type annotation as expected in the code, helping users and developers reference attributes reliably. The attributes are specified with annotation like :type: and cross-reference to related attributes for clarity, but this is documentation markup, not executable code. No specific imports are required, and this pattern is intended for API documentation generation tools such as Sphinx.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_32\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: inviter\n\n    The user who created the invite.\n\n    See also :attr:`Invite.inviter`.\n\n    :type: Optional[:class:`User`]\n\n.. attribute:: max_uses\n\n    The invite's max uses.\n\n    See also :attr:`Invite.max_uses`.\n\n    :type: :class:`int`\n\n.. attribute:: uses\n\n    The invite's current uses.\n\n    See also :attr:`Invite.uses`.\n\n    :type: :class:`int`\n\n.. attribute:: max_age\n\n    The invite's max age in seconds.\n\n    See also :attr:`Invite.max_age`.\n\n    :type: :class:`int`\n\n.. attribute:: temporary\n\n    If the invite is a temporary invite.\n\n    See also :attr:`Invite.temporary`.\n\n    :type: :class:`bool`\n\n.. attribute:: allow\n               deny\n\n    The permissions being allowed or denied.\n\n    :type: :class:`Permissions`\n\n.. attribute:: id\n\n    The ID of the object being changed.\n\n    :type: :class:`int`\n\n.. attribute:: avatar\n\n    The avatar of a member.\n\n    See also :attr:`User.avatar`.\n\n    :type: :class:`Asset`\n\n.. attribute:: slowmode_delay\n\n    The number of seconds members have to wait before\n    sending another message in the channel.\n\n    See also :attr:`TextChannel.slowmode_delay`.\n\n    :type: :class:`int`\n\n.. attribute:: rtc_region\n\n    The region for the voice channel’s voice communication.\n    A value of ``None`` indicates automatic voice region detection.\n\n    See also :attr:`VoiceChannel.rtc_region`.\n\n    :type: :class:`str`\n\n.. attribute:: video_quality_mode\n\n    The camera video quality for the voice channel's participants.\n\n    See also :attr:`VoiceChannel.video_quality_mode`.\n\n    :type: :class:`VideoQualityMode`\n\n.. attribute:: format_type\n\n    The format type of a sticker being changed.\n\n    See also :attr:`GuildSticker.format`\n\n    :type: :class:`StickerFormatType`\n\n.. attribute:: emoji\n\n    The name of the emoji that represents a sticker being changed.\n\n    See also :attr:`GuildSticker.emoji`.\n\n    :type: :class:`str`\n\n.. attribute:: unicode_emoji\n\n    The unicode emoji that is used as an icon for the role being changed.\n\n    See also :attr:`Role.unicode_emoji`.\n\n    :type: :class:`str`\n\n.. attribute:: description\n\n    The description of a guild, a sticker, or a scheduled event.\n\n    See also :attr:`Guild.description`, :attr:`GuildSticker.description`, or\n    :attr:`ScheduledEvent.description`.\n\n    :type: :class:`str`\n\n.. attribute:: available\n\n    The availability of a sticker being changed.\n\n    See also :attr:`GuildSticker.available`\n\n    :type: :class:`bool`\n\n.. attribute:: archived\n\n    The thread is now archived.\n\n    :type: :class:`bool`\n\n.. attribute:: locked\n\n    The thread is being locked or unlocked.\n\n    :type: :class:`bool`\n\n.. attribute:: auto_archive_duration\n\n    The thread's auto archive duration being changed.\n\n    See also :attr:`Thread.auto_archive_duration`\n\n    :type: :class:`int`\n\n.. attribute:: default_auto_archive_duration\n\n    The default auto archive duration for newly created threads being changed.\n\n    :type: :class:`int`\n\n.. attribute:: invitable\n\n    Whether non-moderators can add users to this private thread.\n\n    :type: :class:`bool`\n\n.. attribute:: timed_out_until\n\n    Whether the user is timed out, and if so until when.\n\n    :type: Optional[:class:`datetime.datetime`]\n\n.. attribute:: enable_emoticons\n\n    Integration emoticons were enabled or disabled.\n\n    See also :attr:`StreamIntegration.enable_emoticons`\n\n    :type: :class:`bool`\n\n.. attribute:: expire_behaviour\n               expire_behavior\n\n    The behaviour of expiring subscribers changed.\n\n    See also :attr:`StreamIntegration.expire_behaviour`\n\n    :type: :class:`ExpireBehaviour`\n\n.. attribute:: expire_grace_period\n\n    The grace period before expiring subscribers changed.\n\n    See also :attr:`StreamIntegration.expire_grace_period`\n\n    :type: :class:`int`\n\n.. attribute:: preferred_locale\n\n    The preferred locale for the guild changed.\n\n    See also :attr:`Guild.preferred_locale`\n\n    :type: :class:`Locale`\n\n.. attribute:: prune_delete_days\n\n    The number of days after which inactive and role-unassigned members are kicked has been changed.\n\n    :type: :class:`int`\n\n.. attribute:: status\n\n    The status of the scheduled event.\n\n    :type: :class:`EventStatus`\n\n.. attribute:: entity_type\n\n    The type of entity this scheduled event is for.\n\n    :type: :class:`EntityType`\n\n.. attribute:: cover_image\n\n    The scheduled event's cover image.\n\n    See also :attr:`ScheduledEvent.cover_image`.\n\n    :type: :class:`Asset`\n\n.. attribute:: enabled\n\n    Whether the automod rule is active or not.\n\n    :type: :class:`bool`\n\n.. attribute:: event_type\n\n    The event type for triggering the automod rule.\n\n    :type: :class:`AutoModRuleEventType`\n\n.. attribute:: trigger_type\n\n    The trigger type for the automod rule.\n\n    :type: :class:`AutoModRuleTriggerType`\n\n.. attribute:: trigger\n\n    The trigger for the automod rule.\n\n    .. note ::\n\n        The :attr:`~AutoModTrigger.type` of the trigger may be incorrect.\n        Some attributes such as :attr:`~AutoModTrigger.keyword_filter`, :attr:`~AutoModTrigger.regex_patterns`,\n        and :attr:`~AutoModTrigger.allow_list` will only have the added or removed values.\n\n    :type: :class:`AutoModTrigger`\n\n.. attribute:: actions\n\n    The actions to take when an automod rule is triggered.\n\n    :type: List[AutoModRuleAction]\n\n.. attribute:: exempt_roles\n\n    The list of roles that are exempt from the automod rule.\n\n    :type: List[Union[:class:`Role`, :class:`Object`]]\n\n.. attribute:: exempt_channels\n\n    The list of channels or threads that are exempt from the automod rule.\n\n    :type: List[:class:`abc.GuildChannel`, :class:`Thread`, :class:`Object`]\n\n.. attribute:: premium_progress_bar_enabled\n\n    The guild’s display setting to show boost progress bar.\n\n    :type: :class:`bool`\n\n.. attribute:: system_channel_flags\n\n    The guild’s system channel settings.\n\n    See also :attr:`Guild.system_channel_flags`\n\n    :type: :class:`SystemChannelFlags`\n\n.. attribute:: nsfw\n\n    Whether the channel is marked as “not safe for work” or “age restricted”.\n\n    :type: :class:`bool`\n\n.. attribute:: user_limit\n\n    The channel’s limit for number of members that can be in a voice or stage channel.\n\n    See also :attr:`VoiceChannel.user_limit` and :attr:`StageChannel.user_limit`\n\n    :type: :class:`int`\n\n.. attribute:: flags\n\n    The channel flags associated with this thread or forum post.\n\n    See also :attr:`ForumChannel.flags` and :attr:`Thread.flags`\n\n    :type: :class:`ChannelFlags`\n\n.. attribute:: default_thread_slowmode_delay\n\n    The default slowmode delay for threads created in this text channel or forum.\n\n    See also :attr:`TextChannel.default_thread_slowmode_delay` and :attr:`ForumChannel.default_thread_slowmode_delay`\n\n    :type: :class:`int`\n\n.. attribute:: applied_tags\n\n    The applied tags of a forum post.\n\n    See also :attr:`Thread.applied_tags`\n\n    :type: List[Union[:class:`ForumTag`, :class:`Object`]]\n\n.. attribute:: available_tags\n\n    The available tags of a forum.\n\n    See also :attr:`ForumChannel.available_tags`\n\n    :type: Sequence[:class:`ForumTag`]\n\n.. attribute:: default_reaction_emoji\n\n    The default_reaction_emoji for forum posts.\n\n    See also :attr:`ForumChannel.default_reaction_emoji`\n\n    :type: Optional[:class:`PartialEmoji`]\n```\n\n----------------------------------------\n\nTITLE: Documenting Webhook Support API with Sphinx for Discord.py-self (Python)\nDESCRIPTION: This snippet documents the Webhook and related classes in discord.py-self, describing the available classes for creating, editing, executing, and managing webhooks and webhook messages, synchronously and asynchronously. The pattern involves RST class documentation markup (.. autoclass::, .. attributetable::), supporting downstream API documentation tooling. It requires Sphinx and is intended for documentation builds; these blocks do not execute in Python source but are included in reStructuredText files.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_33\n\nLANGUAGE: reStructuredText\nCODE:\n```\nWebhook Support\n------------------\n\ndiscord.py-self offers support for creating, editing, and executing webhooks through the :class:`Webhook` class.\n\nWebhook\n~~~~~~~~~\n\n.. attributetable:: Webhook\n\n.. autoclass:: Webhook()\n    :members:\n    :inherited-members:\n\nWebhookMessage\n~~~~~~~~~~~~~~~~\n\n.. attributetable:: WebhookMessage\n\n.. autoclass:: WebhookMessage()\n    :members:\n    :inherited-members:\n\nSyncWebhook\n~~~~~~~~~~~~\n\n.. attributetable:: SyncWebhook\n\n.. autoclass:: SyncWebhook()\n    :members:\n    :inherited-members:\n\nSyncWebhookMessage\n~~~~~~~~~~~~~~~~~~~\n\n.. attributetable:: SyncWebhookMessage\n\n.. autoclass:: SyncWebhookMessage()\n    :members:\n\nPartialWebhookGuild\n~~~~~~~~~~~~~~~~~~~~\n\n.. attributetable:: PartialWebhookGuild\n\n.. autoclass:: PartialWebhookGuild()\n    :members:\n\nPartialWebhookChannel\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. attributetable:: PartialWebhookChannel\n\n.. autoclass:: PartialWebhookChannel()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Abstract Base Classes (ABCs) in Discord.py-self (Python)\nDESCRIPTION: This snippet documents the use of abstract base classes (ABCs) in discord.py-self, including Snowflake, User, PrivateChannel, GuildChannel, and Messageable. It describes the purpose of using ABCs for common interface contracts across Discord data models, marking them as intended for inheritance rather than direct instantiation. Documentation directly references the ABC class and their Sphinx tables for type and member listing.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_34\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _discord_api_abcs:\n\nAbstract Base Classes\n-----------------------\n\nAn :term:`abstract base class` (also known as an ``abc``) is a class that models can inherit\nto get their behaviour. **Abstract base classes should not be instantiated**.\nThey are mainly there for usage with :func:`isinstance` and :func:`issubclass`\\.\n\nThis library has a module related to abstract base classes, in which all the ABCs are subclasses of\n:class:`typing.Protocol`.\n\nSnowflake\n~~~~~~~~~~\n\n.. attributetable:: discord.abc.Snowflake\n\n.. autoclass:: discord.abc.Snowflake()\n    :members:\n\nUser\n~~~~~\n\n.. attributetable:: discord.abc.User\n\n.. autoclass:: discord.abc.User()\n    :members:\n\nPrivateChannel\n~~~~~~~~~~~~~~~\n\n.. attributetable:: discord.abc.PrivateChannel\n\n.. autoclass:: discord.abc.PrivateChannel()\n    :members:\n\nGuildChannel\n~~~~~~~~~~~~~\n\n.. attributetable:: discord.abc.GuildChannel\n\n.. autoclass:: discord.abc.GuildChannel()\n    :members:\n\nMessageable\n~~~~~~~~~~~~\n\n.. attributetable:: discord.abc.Messageable\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute and Class Tables for Models (reST) - reStructuredText\nDESCRIPTION: This snippet uses .. attributetable:: and .. autoclass:: directives for various Discord models. It documents class attributes and automatically includes members, inherited members, or excludes documentation for specified members. The approach is consistent across many model classes to standardize API documentation. Usage presumes integration with Sphinx and autodoc extensions, where source Python classes are discoverable. It does not define code logic, but rather serves as docstring-based metadata for generating documentation.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_36\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attributetable:: discord.abc.Connectable\n\n.. autoclass:: discord.abc.Connectable()\n    :members:\n\n```\n\n----------------------------------------\n\nTITLE: Warning and Notes for Discord Models (Danger and Note Directives) - reStructuredText\nDESCRIPTION: This snippet documents a danger warning and a note regarding the use of model classes. The .. danger:: block explicitly instructs users not to instantiate or modify certain models and outlines that models should be accessed via the cache. The .. note:: block clarifies limitations due to the use of __slots__ in the classes. These directives help to communicate usage boundaries and implementation details to documentation consumers.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_37\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. danger::\n\n    The classes listed below are **not intended to be created by users** and are also\n    **read-only**.\n\n    For example, this means that you should not make your own :class:`User` instances\n    nor should you modify the :class:`User` instance yourself.\n\n    If you want to get one of these model classes instances they'd have to be through\n    the cache, and a common way of doing so is through the :func:`utils.find` function\n    or attributes of model classes that you receive from the events specified in the\n    :ref:`discord-api-events`.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. note::\n\n    Nearly all classes here have :ref:`py:slots` defined which means that it is\n    impossible to have dynamic attributes to the data classes.\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Namedtuple Class for BanEntry - reStructuredText\nDESCRIPTION: This block defines a class description using the .. class:: directive for BanEntry, indicating it's a namedtuple returned from the Guild.bans method. It informs the documentation generator and users about the structure and source of BanEntry results. No specific code logic is present, but it clarifies type and usage context in the API.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_39\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. class:: BanEntry\n\n    A namedtuple which represents a ban returned from :meth:`~Guild.bans`.\n\n```\n\n----------------------------------------\n\nTITLE: Installing discord.py-self in a Virtual Environment (Shell)\nDESCRIPTION: This shell command installs or upgrades discord.py-self using pip, assuming you are inside an active Python virtual environment. The library will be installed only within the virtual environment, preventing interference with global packages.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/intro.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install -U discord.py-self\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment (Shell, Windows)\nDESCRIPTION: This Windows shell command activates a previously created Python virtual environment. It assumes you are running from the Windows command prompt and have created the environment 'bot-env'. After activation, you can install libraries isolated from the system Python installation.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/intro.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbot-env\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Extension Loading in setup_hook & async_with – discord.py – Python\nDESCRIPTION: Demonstrates the new necessity to await extension loading under two scenarios: in a setup_hook coroutine of a Bot subclass and within an async context managed by async with. These snippets show how to load an extension asynchronously, either during bot initialization or at runtime, and how to properly start the bot using asyncio.run. Required dependencies include discord.py, and Python 3.7+ with asyncio.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/migrating.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# before\\nbot.load_extension('my_extension')\n```\n\nLANGUAGE: python\nCODE:\n```\n# after using setup_hook\\nclass MyBot(commands.Bot):\\n    async def setup_hook(self):\\n        await self.load_extension('my_extension')\n```\n\nLANGUAGE: python\nCODE:\n```\n# after using async_with\\nasync def main():\\n    async with bot:\\n        await bot.load_extension('my_extension')\\n        await bot.start(TOKEN)\\n\\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Extracting Discord Authentication Token via Browser Console (JavaScript)\nDESCRIPTION: This JavaScript snippet extracts the Discord authentication token by leveraging webpack internals within the web client's developer console. No external dependencies are required, as it is executed directly in the client-side context. The script locates the module responsible for providing the token, then invokes its getToken function to retrieve the token as a string. Expected output is the user’s Discord authentication token. Caution: Use only within your own account context for security reasons.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/authenticating.rst#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n(webpackChunkdiscord_app.push([[\\'\\'],{},e=>{m=[];for(let c in e.c)m.push(e.c[c])}]),m).find(m => m?.exports?.default?.getToken).exports.default.getToken()\n```\n\n----------------------------------------\n\nTITLE: Documenting State and Status Class Attributes in reStructuredText\nDESCRIPTION: These entries use the reStructuredText '.. attribute::' directive to specify and explain possible enumerated values for each application state or payout status. Each '.. attribute::' is followed by an indented block defining what the value represents in the context of Discord applications, commerce, or activities. These attributes map to properties or constants in the library and enhance code discoverability in the generated API documentation.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_9\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: invited\n\n    Represents an invited user.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: accepted\n\n    Represents a user that has accepted the given invite.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: ineligible\n\n    The application is ineligible for verification.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: unsubmitted\n\n    The application is has not submitted a verification request.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: submitted\n\n    The application has submitted a verification request and is pending a response.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: succeeded\n\n    The application has been verified.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: none\n\n    The application has not applied for commerce features.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: paid\n\n    The application has paid the commerce feature fee.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: approved\n\n    The application has been approved for commerce features.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: rejected\n\n    The application has not been approved for commerce features.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: blocked\n\n    The application has been blocked from using commerce features.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: disabled\n\n    The application has not applied for RPC functionality and cannot use the feature.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: not_discoverable\n\n    The application is not discoverable on app discovery.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: discoverable\n\n    The application is discoverable on app discovery.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: featureable\n\n    The application is featureable on app discovery.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: created\n\n    The build has been created.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: uploading\n\n    The build is being uploaded.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: uploaded\n\n    The build has been uploaded.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: validating\n\n    The build is being validated.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: invalid\n\n    The build is invalid.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: corrupted\n\n    The build is corrupted.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: ready\n\n    The build is ready to be published.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: web\n\n    The activity is available on web/desktop.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: ios\n\n    The activity is available on iOS.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: android\n\n    The activity is available on Android.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: unlocked\n\n    The activity can be rotated.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: portrait\n\n    The activity is locked to portrait.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: landscape\n\n    The activity is locked to landscape.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: none\n\n    No special label.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: new\n\n    The activity is new.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: updated\n\n    The activity has been recently updated.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: in_development\n\n    The activity is still in development.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: activities_team\n\n    The activity is available to guilds with the `ACTIVITIES_INTERNAL_DEV` guild feature.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: employee_release\n\n    The activity is available to guilds with the `ACTIVITIES_EMPLOYEE` guild feature.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: soft_launch\n\n    The activity is available to guilds with the `ACTIVITIES_ALPHA` guild feature.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: global_launch\n\n    The activity is available to all guilds.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: unsubmitted\n\n    The payout account application has not been submitted.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: pending\n\n    The payout account is pending.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: action_required\n\n    The payout account requires action.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: active\n\n    The payout account is active.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: blocked\n\n    The payout account is blocked.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: suspended\n\n    The payout account is suspended.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: open\n\n    The payout is open.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: paid\n\n    The payout has been paid out.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: pending\n\n    The payout is pending.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: manual\n\n    The payout has been manually made.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: cancelled\n\n    The payout has been cancelled.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: canceled\n\n    An alias for :attr:`cancelled`.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: deferred\n\n    The payout has been deferred.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: deferred_internal\n\n    The payout has been deferred internally.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: processing\n\n    The payout is processing.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: error\n\n    The payout has an error.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: rejected\n\n    The payout has been rejected.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: risk_review\n\n    The payout is under risk review.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: submitted\n\n    The payout has been submitted.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: pending_funds\n\n    The payout is pending sufficient funds.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: by_sku\n\n    The payout report is by SKU.\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: by_transaction\n\n    The payout report is by transaction.\n\n```\n\n----------------------------------------\n\nTITLE: Installing discord.py-self with Voice Support (Shell)\nDESCRIPTION: This shell command installs the discord.py-self library with additional voice support dependencies directly from PyPI. The '[voice]' extra tells pip to fetch extra libraries required for voice functionality. Ensure you have the required build tools and permissions for your system. Use python3 or py as appropriate for your OS.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/intro.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install -U discord.py-self[voice]\n```\n\n----------------------------------------\n\nTITLE: Structuring Toctree Navigation and Section Heading in reStructuredText\nDESCRIPTION: This snippet demonstrates the use of reStructuredText to build a documentation index with a section heading and a table of contents. The maxdepth option specifies how deeply to expand nested sections, and references to child documents are listed for automatic inclusion. Intended for Sphinx-based documentation, there are no required code-level dependencies, but tools like Sphinx are required to render and navigate the documentation.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/index.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _discord_ext_commands:\n\n``discord.ext.commands`` -- Bot commands framework\n====================================================\n\n``discord.py`` offers a lower level aspect on interacting with Discord. Often times, the library is used for the creation of\nbots. However this task can be daunting and confusing to get correctly the first time. Many times there comes a repetition in\ncreating a bot command framework that is extensible, flexible, and powerful. For this reason, ``discord.py`` comes with an\nextension library that handles this for you.\n\n\n.. toctree::\n    :maxdepth: 2\n\n    commands\n    cogs\n    extensions\n    api\n```\n\n----------------------------------------\n\nTITLE: Finding Guilds and Channels with discord.py Utilities (Python)\nDESCRIPTION: This snippet demonstrates how to find a guild and a channel by name using the discord.utils.get helper function, which searches a sequence for an element matching specified keyword arguments. Dependencies include the discord.py-self library. Parameters used are 'name' for identifying the guild and channel. Input is a collection (e.g. client.guilds), and output is either the matched object or None. Ensure you check for None before using results. This is limited to cached data and will not fetch from the API.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/faq.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# find a guild by name\\nguild = discord.utils.get(client.guilds, name='My Server')\\n\\n# make sure to check if it's found\\nif guild is not None:\\n    # find a channel by name\\n    channel = discord.utils.get(guild.text_channels, name='cool-channel')\n```\n\n----------------------------------------\n\nTITLE: Defining ESRB Content Descriptors for SKUs in Discord.py-self (Python)\nDESCRIPTION: This class documents possible ESRB content descriptors—such as blood, violence, mature humor, drug references, and in-game purchases—as attributes of a Python class. These are used to annotate or check for maturity content in a SKU. The design incorporates all common ESRB warning types, supports versioning (since 2.0), and is intended for use with rating assignment or filtering logic.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n.. class:: ESRBContentDescriptor\n\n    Represents an ESRB rating content descriptor.\n\n    .. versionadded:: 2.0\n\n    .. attribute:: alcohol_reference\n\n        The SKU contains alcohol references.\n\n    .. attribute:: animated_blood\n\n        The SKU contains animated blood.\n\n    .. attribute:: blood\n\n        The SKU contains blood.\n\n    .. attribute:: blood_and_gore\n\n        The SKU contains blood and gore.\n\n    .. attribute:: cartoon_violence\n\n        The SKU contains cartoon violence.\n\n    .. attribute:: comic_mischief\n\n        The SKU contains comic mischief.\n\n    .. attribute:: crude_humor\n\n        The SKU contains crude humor.\n\n    .. attribute:: drug_reference\n\n        The SKU contains drug references.\n\n    .. attribute:: fantasy_violence\n\n        The SKU contains fantasy violence.\n\n    .. attribute:: intense_violence\n\n        The SKU contains intense violence.\n\n    .. attribute:: language\n\n        The SKU contains language.\n\n    .. attribute:: lyrics\n\n        The SKU contains lyrics.\n\n    .. attribute:: mature_humor\n\n        The SKU contains mature humor.\n\n    .. attribute:: nudity\n\n        The SKU contains nudity.\n\n    .. attribute:: partial_nudity\n\n        The SKU contains partial nudity.\n\n    .. attribute:: real_gambling\n\n        The SKU contains real gambling.\n\n    .. attribute:: sexual_content\n\n        The SKU contains sexual content.\n\n    .. attribute:: sexual_themes\n\n        The SKU contains sexual themes.\n\n    .. attribute:: sexual_violence\n\n        The SKU contains sexual violence.\n\n    .. attribute:: simulated_gambling\n\n        The SKU contains simulated gambling.\n\n    .. attribute:: strong_language\n\n        The SKU contains strong language.\n\n    .. attribute:: strong_lyrics\n\n        The SKU contains strong lyrics.\n\n    .. attribute:: strong_sexual_content\n\n        The SKU contains strong sexual content.\n\n    .. attribute:: suggestive_themes\n\n        The SKU contains suggestive themes.\n\n    .. attribute:: tobacco_reference\n\n        The SKU contains tobacco references.\n\n    .. attribute:: use_of_alcohol\n\n        The SKU contains use of alcohol.\n\n    .. attribute:: use_of_drugs\n\n        The SKU contains use of drugs.\n\n    .. attribute:: use_of_tobacco\n\n        The SKU contains use of tobacco.\n\n    .. attribute:: violence\n\n        The SKU contains violence.\n\n    .. attribute:: violent_references\n\n        The SKU contains violent references.\n\n    .. attribute:: in_game_purchases\n\n        The SKU provides in-game purchases.\n\n    .. attribute:: users_interact\n\n        The SKU allows users to interact.\n\n    .. attribute:: shares_location\n\n        The SKU shares your location.\n\n    .. attribute:: unrestricted_internet\n\n        The SKU has unrestricted internet access.\n\n    .. attribute:: mild_blood\n\n        The SKU contains mild blood.\n\n    .. attribute:: mild_cartoon_violence\n\n        The SKU contains mild cartoon violence.\n\n    .. attribute:: mild_fantasy_violence\n\n        The SKU contains mild fantasy violence.\n\n    .. attribute:: mild_language\n\n        The SKU contains mild language.\n\n    .. attribute:: mild_lyrics\n\n        The SKU contains mild inappropriate lyrics.\n\n    .. attribute:: mild_sexual_themes\n\n        The SKU contains mild sexual themes.\n\n    .. attribute:: mild_suggestive_themes\n\n        The SKU contains mild suggestive themes.\n\n    .. attribute:: mild_violence\n\n        The SKU contains mild violence.\n\n    .. attribute:: animated_violence\n\n        The SKU contains animated violence.\n```\n\n----------------------------------------\n\nTITLE: Defining Game Genre SKU Attributes in Python\nDESCRIPTION: This snippet provides an attribute listing for different game genres that can be assigned to a SKU within the discord.py-self framework. Each attribute describes a distinct genre, with documentation included for when certain attributes were introduced (e.g., versionadded 2.1). These are intended to be implemented as class-level constants or enumerations in Python, allowing developers to refer to standard genres throughout their code. There are no external dependencies, and the expected use is for internal categorization or presentation logic.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n    .. attribute:: indie\n\n        The SKU is an indie game.\n\n        .. versionadded:: 2.1\n\n    .. attribute:: life_simulator\n\n        The SKU is a life simulator.\n\n    .. attribute:: light_gun\n\n        The SKU is a light gun game.\n\n    .. attribute:: massively_multiplayer\n\n        The SKU is a massively multiplayer online game.\n\n    .. attribute:: metroidvania\n\n        The SKU is a Metroidvania game.\n\n    .. attribute:: mmorpg\n\n        The SKU is a MMORPG.\n\n    .. attribute:: moba\n\n        The SKU is a MOBA.\n\n    .. attribute:: music_rhythm\n\n        The SKU is a rhythm game.\n\n    .. attribute:: open_world\n\n        The SKU is an open-world game.\n\n    .. attribute:: party_mini_game\n\n        The SKU is a party game.\n\n    .. attribute:: pinball\n\n        The SKU is a pinball game.\n\n    .. attribute:: platformer\n\n        The SKU is a platformer.\n\n    .. attribute:: point_and_click\n\n        The SKU is a point-and-click game.\n\n        .. versionadded:: 2.1\n\n    .. attribute:: psychological_horror\n\n        The SKU is a psychological horror game.\n\n    .. attribute:: puzzle\n\n        The SKU is a puzzle game.\n\n    .. attribute:: rpg\n\n        The SKU is an RPG.\n\n    .. attribute:: role_playing\n\n        The SKU is a role-playing game.\n\n    .. attribute:: rts\n\n        The SKU is a real-time strategy game.\n\n    .. attribute:: sandbox\n\n        The SKU is a sandbox game.\n\n    .. attribute:: shooter\n\n        The SKU is a shooter.\n\n    .. attribute:: shoot_em_up\n\n        The SKU is a shoot 'em up game.\n\n    .. attribute:: simulation\n\n        The SKU is a simulation game.\n\n    .. attribute:: skateboarding_skating\n\n        The SKU is a skateboarding/skating game.\n\n    .. attribute:: snowboarding_skiing\n\n        The SKU is a snowboarding/skiing game.\n\n    .. attribute:: soccer\n\n        The SKU is a soccer game.\n\n    .. attribute:: sports\n\n        The SKU is a sports game.\n\n    .. attribute:: stealth\n\n        The SKU is a stealth game.\n\n    .. attribute:: strategy\n\n        The SKU is a strategy game.\n\n    .. attribute:: surfing_wakeboarding\n\n        The SKU is a surfing/wakeboarding game.\n\n    .. attribute:: survival\n\n        The SKU is a survival game.\n\n    .. attribute:: survival_horror\n\n        The SKU is a survival horror game.\n\n    .. attribute:: tactical\n\n        The SKU is a tactical game.\n\n        .. versionadded:: 2.1\n\n    .. attribute:: tower_defense\n\n        The SKU is a tower defense game.\n\n    .. attribute:: track_field\n\n        The SKU is a track and field game.\n\n    .. attribute:: train_simulator\n\n        The SKU is a train simulator game.\n\n    .. attribute:: trivia_board_game\n\n        The SKU is a trivia/board game.\n\n    .. attribute:: turn_based_strategy\n\n        The SKU is a turn-based strategy game.\n\n    .. attribute:: vehicular_combat\n\n        The SKU is a vehicular combat game.\n\n    .. attribute:: visual_novel\n\n        The SKU is a visual novel.\n\n    .. attribute:: wargame\n\n        The SKU is a wargame.\n\n    .. attribute:: wrestling\n\n        The SKU is a wrestling game.\n```\n\n----------------------------------------\n\nTITLE: Defining Setup and Teardown Hooks in an Extension (discord.py-self, Python)\nDESCRIPTION: This snippet provides an example of an extension that defines both setup and teardown asynchronous coroutines for performing actions during load and unload events. When loaded, setup(bot) runs and can initialize resources or register commands; when unloaded, teardown(bot) executes for cleanup purposes. Neither function returns a value. Both should be coroutines, and any exceptions in teardown are ignored by the bot to ensure successful unloading.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/extensions.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def setup(bot):\n    print('I am being loaded!')\n\nasync def teardown(bot):\n    print('I am being unloaded!')\n```\n\n----------------------------------------\n\nTITLE: Documenting Messageable API with Members and Async Methods (reST) - reStructuredText\nDESCRIPTION: This snippet uses the .. autoclass:: directive to document the discord.abc.Messageable class, including its members while explicitly excluding certain attributes. It also references async methods using .. automethod:: with custom async context. The pattern makes it clear which parts of the API surface are documented, which are excluded, and how asynchronous context managers or iterators are annotated in the documentation. The directives are tailored for auto-documentation tools like Sphinx. No external dependencies are required, but the underlying python modules must be accessible at doc generation.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_35\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: discord.abc.Messageable()\n    :members:\n    :exclude-members: typing, slash_commands, user_commands\n\n    .. automethod:: typing\n        :async-with:\n\n    .. automethod:: slash_commands\n        :async-for:\n\n    .. automethod:: user_commands\n        :async-for:\n\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Themes in Discord Client (Python)\nDESCRIPTION: Declares class attributes for the available themes in Discord, namely light and dark. Used for syncing UI appearance across different Discord clients. These attributes standardize theme choices throughout the codebase.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass Theme:\n    \"\"\"\n    Represents the theme synced across all Discord clients.\n    \"\"\"\n\n    light = ...  # Represents the Light theme on Discord.\n    dark = ...  # Represents the Dark theme on Discord.\n\n```\n\n----------------------------------------\n\nTITLE: Representing Game Distributors in Discord.py-self (Python)\nDESCRIPTION: This Python class documents attributes representing distributors for third-party SKUs integrated within Discord. Supported distributors include Discord itself and major online game services such as Steam, Twitch, Ubisoft Connect, Epic Games, and others. Designed for use in assignment and logic that needs to reference the distribution platform, this enumeration aids in consistent value usage across the code.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n.. class:: Distributor\n\n    Represents the distributor of a third-party SKU on Discord.\n\n    .. versionadded:: 2.0\n\n    .. attribute:: discord\n\n        The SKU is distributed by Discord.\n\n    .. attribute:: steam\n\n        The SKU is distributed by Steam.\n\n    .. attribute:: twitch\n\n        The SKU is distributed by Twitch.\n\n    .. attribute:: uplay\n\n        The SKU is distributed by Ubisoft Connect.\n\n    .. attribute:: battle_net\n\n        The SKU is distributed by Battle.net.\n\n    .. attribute:: origin\n\n        The SKU is distributed by Origin.\n\n    .. attribute:: gog\n\n        The SKU is distributed by GOG.\n\n    .. attribute:: epic_games\n\n        The SKU is distributed by Epic Games.\n\n    .. attribute:: google_play\n\n        The SKU is distributed by Google Play.\n```\n\n----------------------------------------\n\nTITLE: Adding Command Checks and Owner Checks in discord.py-self (Python)\nDESCRIPTION: Provides several ways to implement permission checks on commands using check decorators, custom predicate functions, and the built-in is_owner decorator. Shows how to ensure that only the bot owner or users meeting certain conditions can execute commands. Requires discord.py-self and a valid bot context. Input is command context; output is restricted command execution.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/commands.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def is_owner(ctx):\n    return ctx.author.id == 316026178463072268\n\n@bot.command(name='eval')\n@commands.check(is_owner)\nasync def _eval(ctx, *, code):\n    \"\"\"A bad example of an eval command\"\"\"\n    await ctx.send(eval(code))\n```\n\nLANGUAGE: python\nCODE:\n```\ndef is_owner():\n    async def predicate(ctx):\n        return ctx.author.id == 316026178463072268\n    return commands.check(predicate)\n\n@bot.command(name='eval')\n@is_owner()\nasync def _eval(ctx, *, code):\n    \"\"\"A bad example of an eval command\"\"\"\n    await ctx.send(eval(code))\n```\n\nLANGUAGE: python\nCODE:\n```\n@bot.command(name='eval')\n@commands.is_owner()\nasync def _eval(ctx, *, code):\n    \"\"\"A bad example of an eval command\"\"\"\n    await ctx.send(eval(code))\n```\n\nLANGUAGE: python\nCODE:\n```\ndef is_in_guild(guild_id):\n    async def predicate(ctx):\n        return ctx.guild and ctx.guild.id == guild_id\n    return commands.check(predicate)\n\n@bot.command()\n@commands.is_owner()\n@is_in_guild(41771983423143937)\nasync def secretguilddata(ctx):\n    \"\"\"super secret stuff\"\"\"\n    await ctx.send('secret stuff')\n```\n\n----------------------------------------\n\nTITLE: Handling Voice State Update Events in Discord.py-Self (Python)\nDESCRIPTION: This function documentation describes on_voice_state_update(member, before, after), an event callback triggered by various voice state changes in Discord (joining, leaving, mute/deafen state changes, etc.). The callback provides the member, their previous voice state, and the new voice state. Implementers must provide async event handlers to process these updates as part of Discord bot logic.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. function:: on_voice_state_update(member, before, after)\\n\\n    Called when a :class:`Member` changes their :class:`VoiceState`.\\n\\n    The following, but not limited to, examples illustrate when this event is called:\\n\\n    - A member joins a voice or stage channel.\\n    - A member leaves a voice or stage channel.\\n    - A member is muted or deafened by their own accord.\\n    - A member is muted or deafened by a guild administrator.\\n\\n    :param member: The member whose voice states changed.\\n    :type member: :class:`Member`\\n    :param before: The voice state prior to the changes.\\n    :type before: :class:`VoiceState`\\n    :param after: The voice state after the changes.\\n    :type after: :class:`VoiceState`\n```\n\n----------------------------------------\n\nTITLE: Defining Emoji Picker Sections in Discord Client (Python)\nDESCRIPTION: Specifies all section categories available in Discord's emoji picker, including favorite, top emojis, recent, people, nature, food, activity, and more. Each attribute corresponds to a selectable emoji category, and any guild is also valid. These constants are intended for use with emoji selection interfaces or custom emoji UI logic.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass EmojiPickerSection:\n    \"\"\"\n    Represents the sections found in the Discord emoji picker. Any guild is also a valid section.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    favorite = ...  # The favorite section.\n    top_emojis = ...  # The top emojis section.\n    recent = ...  # The recents section.\n    people = ...  # The people emojis section.\n    nature = ...  # The nature emojis section.\n    food = ...  # The food emojis section.\n    activity = ...  # The activity emojis section.\n    travel = ...  # The travel emojis section.\n    objects = ...  # The objects emojis section.\n    symbols = ...  # The symbols emojis section.\n    flags = ...  # The flags emojis section.\n\n```\n\n----------------------------------------\n\nTITLE: Hot Reloading an Extension (discord.py-self, Python)\nDESCRIPTION: This snippet shows how to reload a previously loaded extension at runtime using the bot.reload_extension coroutine method. This enables developers to update or refresh a loaded extension's functionality without restarting the bot, which is particularly useful during development or for live updates. Input is the dot-qualified extension path as a string. If an error occurs during reload, the operation is discarded and the bot's state remains unchanged.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/extensions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> await bot.reload_extension('hello')\n```\n\n----------------------------------------\n\nTITLE: Defining Python Project Dependencies (requirements.txt) - Python\nDESCRIPTION: This snippet is a requirements.txt file that specifies the exact versions and conditions for Python package dependencies required by the discord.py-self project. Dependencies listed include aiohttp with versions between 3.7.4 and 4, curl_cffi with variant version constraints based on the Python runtime version, tzlocal, discord_protos, and conditionally audioop-lts for Python 3.13 and above. The file enables package installers like pip to reproducibly set up development or deployment environments, and improper editing may cause version conflicts or compatibility issues.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\naiohttp>=3.7.4,<4\\ncurl_cffi>=0.9.0,<0.10; python_version==\\\"3.8\\\"\\ncurl_cffi>=0.9.0,<1; python_version>\\\"3.8\\\"\\ntzlocal>=4.0.0,<6\\ndiscord_protos<1.0.0\\naudioop-lts; python_version>='3.13'\n```\n\n----------------------------------------\n\nTITLE: FlagConverter with Tuple-Type Flags in discord.py-self (Python)\nDESCRIPTION: Illustrates defining FlagConverter classes with typing.Tuple annotations, allowing greedy-like semantics or tuple value parsing. The BanFlags example collects multiple members as a tuple, and the Coordinates class parses flags as pairs of integers. Requires discord.py-self and typing.Tuple. Tuple flags should be quoted if their elements contain spaces.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/commands.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\nfrom typing import Tuple\nimport discord\n\nclass BanFlags(commands.FlagConverter):\n    members: Tuple[discord.Member, ...]\n    reason: str\n    days: int = 1\n```\n\nLANGUAGE: python\nCODE:\n```\n# point: 10 11 point: 12 13\nclass Coordinates(commands.FlagConverter):\n    point: Tuple[int, int]\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Converter Metaclasses for Protocols – discord.py – Python\nDESCRIPTION: Shows the required changes to custom converter classes to adapt to the migration of commands.Converter into a runtime-checkable typing.Protocol and typing.Generic. After the change, metaclasses must inherit from type(commands.Converter) for compatibility. These code snippets help users update custom converters and metaclasses in their bots/extensions for correct type behavior.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/migrating.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# before\\nclass SomeConverterMeta(type):\\n    ...\\n\\nclass SomeConverter(commands.Converter, metaclass=SomeConverterMeta):\\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n# after\\nclass SomeConverterMeta(type(commands.Converter)):\\n    ...\\n\\nclass SomeConverter(commands.Converter, metaclass=SomeConverterMeta):\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Autodoc Patterns for API Models and Relationships (reST) - reStructuredText\nDESCRIPTION: This snippet provides repeated .. attributetable:: and .. autoclass:: blocks for a wide variety of Discord models (User, Guild, Application, etc.), specifying members to include or exclude as well as inherited members. This design pattern is consistent for registering models for automatic doc generation using Sphinx. It assumes the models exist and are importable in the documentation build environment.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_38\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attributetable:: User\n\n.. autoclass:: User()\n    :members:\n    :inherited-members:\n    :exclude-members: typing, slash_commands, user_commands\n\n    .. automethod:: typing\n        :async-with:\n\n    .. automethod:: slash_commands\n        :async-for:\n\n    .. automethod:: user_commands\n        :async-for:\n\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attributetable:: Application\n\n.. autoclass:: Application()\n    :members:\n    :inherited-members:\n\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Setup with Coroutine for Async Loading – discord.py – Python\nDESCRIPTION: Compares the old synchronous and new asynchronous approaches to defining the setup function in a discord.py extension. The asynchronous version is now required due to a migration to async extension loading, and must be an async def coroutine. The bot.add_cog call is now awaited to ensure proper coroutines execution. No additional dependencies are required beyond discord.py and Python's asyncio; bot references the instance of commands.Bot.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/migrating.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# before\\ndef setup(bot):\\n    bot.add_cog(MyCog(bot))\n```\n\nLANGUAGE: python\nCODE:\n```\n# after\\nasync def setup(bot):\\n    await bot.add_cog(MyCog(bot))\n```\n\n----------------------------------------\n\nTITLE: Defining Local Command Error Handlers in discord.py-self (Python)\nDESCRIPTION: Demonstrates how to create a command and attach a local error handler using the .error decorator. The handler checks for BadArgument exceptions and sends a custom message. Requires discord.py-self and a working bot command context. Input is any command invocation; output is custom error reporting.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/commands.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def info(ctx, *, member: discord.Member):\n    \"\"\"Tells you some info about the member.\"\"\"\n    msg = f'{member} joined on {member.joined_at} and has {len(member.roles)} roles.'\n    await ctx.send(msg)\n\n@info.error\nasync def info_error(ctx, error):\n    if isinstance(error, commands.BadArgument):\n        await ctx.send('I could not find that member...')\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Virtual Environment (Shell, Unix-like OS)\nDESCRIPTION: This shell snippet demonstrates how to create and activate a Python virtual environment in your project directory using venv. Replace 'your-bot-source' with the actual directory name. After activation, all pip installations will be isolated to this environment. Python 3.3 or higher is required.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/intro.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd your-bot-source\npython3 -m venv bot-env\n```\n\nLANGUAGE: shell\nCODE:\n```\nsource bot-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing system dependencies for voice (Shell - Debian-based Linux)\nDESCRIPTION: This shell command installs the development libraries that enable voice support on Linux systems for discord.py-self. It assumes you're using a Debian-based OS with apt package manager. Required packages include libffi-dev, libnacl-dev, and python3-dev. You may need sudo privileges depending on your system configuration.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/intro.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napt install libffi-dev libnacl-dev python3-dev\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a New Extension with Setup (discord.py-self, Python)\nDESCRIPTION: This snippet demonstrates how to define a new extension module by creating a Python file with a coroutine called setup(bot). It imports the commands extension, defines a single async command ('hello'), and registers it with the bot during the setup phase. The hello command sends a personalized greeting to the command user when invoked. Required dependencies: discord.py-self library, especially from discord.ext import commands. Key parameters: 'ctx' is the command context, and 'bot' is the Bot instance. The extension is expected to be loaded using await bot.load_extension('hello').\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/ext/commands/extensions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\n\n@commands.command()\nasync def hello(ctx):\n    await ctx.send(f'Hello {ctx.author.display_name}.')\n\nasync def setup(bot):\n    bot.add_command(hello)\n```\n\n----------------------------------------\n\nTITLE: Basic Echo Command with String Argument (Python)\nDESCRIPTION: Shows how to define a simple bot command that echoes a single argument back to the sender using discord.py's command extension. Uses '@bot.command()' decorator and expects a single positional string argument. Input is a Context object and a string; output is a message sent to the channel. Arguments with spaces will be truncated unless the function signature is modified.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/faq.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\\nasync def echo(ctx, message: str):\\n    await ctx.send(message)\n```\n\n----------------------------------------\n\nTITLE: Echo Command Consuming All Remaining Arguments (Python)\nDESCRIPTION: This variant of the echo command uses '*', allowing it to consume the remainder of the argument string as a single value, handling spaces automatically. It solves the issue where only the first word is captured in commands like '?echo a b c'. Inputs are a Context object and a variable-length string. Outputs a message consisting of all remaining text. A standard discord.py core library dependency.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/faq.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\\nasync def echo(ctx, *, message: str):\\n    await ctx.send(message)\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Connection Types for Users (Python)\nDESCRIPTION: Defines all supported external service connections a Discord user can have, including Amazon Music, GitHub, Instagram, PlayStation, Spotify, Steam, Xbox, and many others. Each attribute matches a supported OAuth provider or external service connection option, facilitating authentication and presence logic. This class is critical for managing linked account features within Discord integrations.\nSOURCE: https://github.com/dolfies/discord.py-self/blob/master/docs/api.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass ConnectionType:\n    \"\"\"\n    Represents the type of connection a user has with Discord.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    amazon_music = ...  # The user has an Amazon Music connection.\n    battle_net = ...  # The user has a Battle.net connection.\n    bluesky = ...  # The user has a Bluesky connection.\n    bungie = ...  # The user has a Bungie connection.\n    contacts = ...  # The user has a contact sync connection.\n    crunchyroll = ...  # The user has a Crunchyroll connection.\n    domain = ...  # The user has a domain connection.\n    ebay = ...  # The user has an eBay connection.\n    epic_games = ...  # The user has an Epic Games connection.\n    facebook = ...  # The user has a Facebook connection.\n    github = ...  # The user has a GitHub connection.\n    instagram = ...  # The user has Instagram connection.\n    league_of_legends = ...  # The user has a League of Legends connection.\n    mastodon = ...  # The user has a Mastodon connection.\n    paypal = ...  # The user has a PayPal connection.\n    playstation = ...  # The user has a PlayStation connection.\n    playstation_stg = ...  # The user has a PlayStation staging connection.\n    reddit = ...  # The user has a Reddit connection.\n    roblox = ...  # The user has a Roblox connection.\n    riot_games = ...  # The user has a Riot Games connection.\n    soundcloud = ...  # The user has a SoundCloud connection.\n    spotify = ...  # The user has a Spotify connection.\n    skype = ...  # The user has a Skype connection.\n    steam = ...  # The user has a Steam connection.\n    tiktok = ...  # The user has a TikTok connection.\n    twitch = ...  # The user has a Twitch connection.\n    twitter = ...  # The user has a Twitter connection.\n    youtube = ...  # The user has a YouTube connection.\n    xbox = ...  # The user has an Xbox Live connection.\n\n```"
  }
]