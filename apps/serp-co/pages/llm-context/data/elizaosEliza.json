[
  {
    "owner": "elizaos",
    "repo": "eliza",
    "content": "TITLE: Settings Configuration Options for elizaOS Character Files in JSON\nDESCRIPTION: Detailed settings configuration options for character files including RAG knowledge mode, voice settings, API secrets, model overrides, model configuration parameters, and image generation settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/characterfile.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"settings\": {\n        \"ragKnowledge\": false,         // Enable RAG knowledge mode\n        \"voice\": {\n            \"model\": \"string\",         // Voice synthesis model\n            \"url\": \"string\"           // Optional voice API URL\n        },\n        \"secrets\": {                  // API keys (use env vars in production)\n            \"API_KEY\": \"string\"\n        },\n        \"model\": \"string\",           // Optional model override\n        \"modelConfig\": {             // Optional model parameters\n            \"temperature\": 0.7,\n            \"maxInputTokens\": 4096,\n            \"maxOutputTokens\": 1024,\n            \"frequency_penalty\": 0.0,\n            \"presence_penalty\": 0.0\n        },\n        \"imageSettings\": {          // Optional image generation settings\n            \"steps\": 20,\n            \"width\": 1024,\n            \"height\": 1024,\n            \"cfgScale\": 7.5,\n            \"negativePrompt\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Secure Database Connection in TypeScript\nDESCRIPTION: Defines a SecureDatabase class that establishes a secure connection using an encrypted configuration string, which is essential for protecting sensitive database credentials.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecureDatabase {\n    private connection: Connection;\n\n    constructor(encryptedConfig: string) {\n        const config = this.decryptConfig(encryptedConfig);\n        this.connection = new Connection(config);\n    }\n\n    private decryptConfig(encrypted: string): DatabaseConfig {\n        // Implement decryption logic\n        return JSON.parse(decrypted);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Memories in Eliza Framework\nDESCRIPTION: This snippet demonstrates how to create and retrieve memories using the messageManager module. It shows the pattern for storing conversation data with associated metadata and how to retrieve recent messages for context building.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/overview.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Store conversation data\nawait messageManager.createMemory({\n    id: messageId,\n    content: { text: \"Message content\" },\n    userId: userId,\n    roomId: roomId\n});\n\n// Retrieve context\nconst recentMessages = await messageManager.getMemories({\n    roomId: roomId,\n    count: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Relationship Management with Database Adapters\nDESCRIPTION: TypeScript code showing relationship management operations with database adapters in Eliza, including creating relationships between users, retrieving specific relationships, and listing all relationships for a user.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Create relationship\nawait db.createRelationship({\n    userA: user1Id,\n    userB: user2Id,\n});\n\n// Get relationship\nconst relationship = await db.getRelationship({\n    userA: user1Id,\n    userB: user2Id,\n});\n\n// Get all relationships\nconst relationships = await db.getRelationships({\n    userId: user1Id,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Time Provider in TypeScript\nDESCRIPTION: A time provider implementation that injects the current date and time in a human-readable format into the agent's context. It formats the date according to UTC timezone using the Intl.DateTimeFormat API.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/providers.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst timeProvider: Provider = {\n    get: async (_runtime: IAgentRuntime, _message: Memory) => {\n        const currentDate = new Date();\n        const options = {\n            timeZone: \"UTC\",\n            dateStyle: \"full\" as const,\n            timeStyle: \"long\" as const\n        };\n        const humanReadable = new Intl.DateTimeFormat(\"en-US\", options)\n            .format(currentDate);\n        return `The current date and time is ${humanReadable}. Please use this as your reference for any time-based operations or responses.`;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Memory Entry in TypeScript\nDESCRIPTION: Defines the createMemory method for adding a new memory entry to storage.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateMemory(memory: Memory, unique?: boolean): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Character File Configuration with Plugins\nDESCRIPTION: JSON/TypeScript configuration example showing how to configure a character file with Telegram client and image processing plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"name\": \"Eliza\",\n    \"clients\": [\"telegram\"],\n    // ... other config options\n    \"plugins\": [\"@elizaos/plugin-image\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Core API Keys in Environment Variables\nDESCRIPTION: Sets up the essential API keys for different AI model providers, including OpenAI, Anthropic, and Together.ai models. These keys are required for Eliza to interact with these AI services.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Core API Keys\nOPENAI_API_KEY=sk-your-key # Required for OpenAI features\nANTHROPIC_API_KEY=your-key  # Required for Claude models\nTOGETHER_API_KEY=your-key   # Required for Together.ai models\n```\n\n----------------------------------------\n\nTITLE: Defining the IAgentRuntime Interface in TypeScript\nDESCRIPTION: This snippet shows the core interface definition for the AgentRuntime, specifying its components like plugins, clients, providers, actions, evaluators, and various manager interfaces for memory, storage, and services.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/agents.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IAgentRuntime {\n    // Core identification\n    agentId: UUID;\n    token: string;\n    serverUrl: string;\n\n    // Configuration\n    character: Character;                          // Personality and behavior settings\n    modelProvider: ModelProviderName;              // AI model to use\n    imageModelProvider: ModelProviderName;\n    imageVisionModelProvider: ModelProviderName;\n    \n    // Components\n    plugins: Plugin[];                             // Additional capabilities\n    clients: Record<string, Client>;               // Platform connections\n    providers: Provider[];                         // Real-time data sources\n    actions: Action[];                             // Available behaviors\n    evaluators: Evaluator[];                       // Analysis & learning\n    \n    // Memory Management\n    messageManager: IMemoryManager;                // Conversation history\n    descriptionManager: IMemoryManager;\n    documentsManager: IMemoryManager;              // Large documents\n    knowledgeManager: IMemoryManager;              // Search & retrieval\n    ragKnowledgeManager: IRAGKnowledgeManager;     // RAG integration\n    loreManager: IMemoryManager;                   // Character background\n    \n    // Storage & Caching\n    databaseAdapter: IDatabaseAdapter;            // Data persistence\n    cacheManager: ICacheManager;                  // Performance optimization\n    \n    // Services\n    services: Map<ServiceType, Service>;          // External integrations\n    \n    // Networking\n    fetch: (url: string, options: any) => Promise<Response>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing createKnowledge Method in IRAGKnowledgeManager Interface\nDESCRIPTION: Defines the createKnowledge method which creates a new RAGKnowledgeItem.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IRAGKnowledgeManager.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateKnowledge(item: RAGKnowledgeItem): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: IAgentRuntime Interface Definition in TypeScript\nDESCRIPTION: Defines the core runtime interface for agents including configuration properties, memory managers, services, and runtime methods. Key properties include agent identification, server configuration, providers, and various memory/data managers. Methods handle initialization, service management, action processing and user management.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAgentRuntime.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IAgentRuntime {\n  agentId: `${string}-${string}-${string}-${string}-${string}`;\n  serverUrl: string;\n  databaseAdapter: IDatabaseAdapter;\n  token: string;\n  modelProvider: ModelProviderName;\n  imageModelProvider: ModelProviderName;\n  imageVisionModelProvider: ModelProviderName;\n  character: Character;\n  providers: Provider[];\n  actions: Action[];\n  evaluators: Evaluator[];\n  plugins: Plugin[];\n  fetch?: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>;\n  messageManager: IMemoryManager;\n  descriptionManager: IMemoryManager;\n  documentsManager: IMemoryManager;\n  knowledgeManager: IMemoryManager;\n  ragKnowledgeManager: IRAGKnowledgeManager;\n  loreManager: IMemoryManager;\n  cacheManager: ICacheManager;\n  services: Map<ServiceType, Service>;\n  clients: ClientInstance[];\n\n  initialize(): Promise<void>;\n  registerMemoryManager(manager: IMemoryManager): void;\n  getMemoryManager(name: string): IMemoryManager;\n  getService<T extends Service>(service: ServiceType): T;\n  registerService(service: Service): void;\n  getSetting(key: string): string;\n  getConversationLength(): number;\n  processActions(message: Memory, responses: Memory[], state?: State, callback?: HandlerCallback): Promise<void>;\n  evaluate(message: Memory, state?: State, didRespond?: boolean, callback?: HandlerCallback): Promise<string[]>;\n  ensureParticipantExists(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<void>;\n  ensureUserExists(userId: `${string}-${string}-${string}-${string}-${string}`, userName: string, name: string, source: string): Promise<void>;\n  registerAction(action: Action): void;\n  ensureConnection(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`, userName?: string, userScreenName?: string, source?: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Transactions and Errors in TypeScript\nDESCRIPTION: This TypeScript snippet outlines the use of a transaction methodology and a circuit breaker pattern to handle database operations safely. It provides automatic rollback on errors and prevents cascading failures using a circuit breaker. Dependencies include a promise-based database client and `elizaLogger` for logging error details.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/database.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Transaction handling\nconst result = await adapter.withTransaction(async (client) => {\n    await client.query(\"BEGIN\");\n    // Perform multiple operations\n    await client.query(\"COMMIT\");\n    return result;\n});\n\n// Error handling with circuit breaker\nprotected async withCircuitBreaker<T>(\n    operation: () => Promise<T>,\n    context: string\n): Promise<T> {\n    try {\n        return await this.circuitBreaker.execute(operation);\n    } catch (error) {\n        // Circuit breaker prevents cascading failures\n        elizaLogger.error(`Circuit breaker error in ${context}:`, error);\n        throw error;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Plugin Interface for Extending Agent Capabilities\nDESCRIPTION: This snippet defines the Plugin interface used to extend agent functionality through a modular system. It includes various components like actions, providers, evaluators, services, clients, and adapters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/agents.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Plugin {\n    name: string;\n    description: string;\n    actions?: Action[];        // Custom behaviors\n    providers?: Provider[];    // Data providers\n    evaluators?: Evaluator[]; // Response assessment\n    services?: Service[];     // Background processes\n    clients?: Client[];       // Platform integrations\n    adapters?: Adapter[];    // Database/cache adapters\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memory by ID in TypeScript\nDESCRIPTION: Defines the getMemoryById method for fetching a specific memory entry by its ID.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMemoryById(id: `${string}-${string}-${string}-${string}-${string}`): Promise<Memory>;\n```\n\n----------------------------------------\n\nTITLE: Importing Token Contract Plugin (Typescript)\nDESCRIPTION: This code snippet shows how to import the Token Contract plugin into a character's configuration within the elizaOS framework. It adds the plugin to the character's list of plugins, allowing the character to deploy and interact with token contracts.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tokenContractPlugin } from \"@eliza/plugin-coinbase\";\n\nconst character = {\n    plugins: [tokenContractPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning and Starting Eliza with pnpm\nDESCRIPTION: This snippet demonstrates how to clone the Eliza starter repository, set up the environment, install dependencies, build, and start the application using pnpm. Dependencies include pnpm, Node.js 23+, and Python 2.7+. This script provides an automatic setup, handling all preparation required to run Eliza effectively.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/intro.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Evaluator Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for the Evaluator type that handles agent response assessment. Includes properties for configuration, examples, validation and handling.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Evaluator.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Evaluator {\n  alwaysRun?: boolean;      // Whether to always run\n  description: string;      // Detailed description\n  similes: string[];       // Similar evaluator descriptions\n  examples: EvaluationExample[]; // Example evaluations\n  handler: Handler;         // Handler function\n  name: string;            // Evaluator name\n  validate: Validator;      // Validation function\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Actions in Eliza Framework\nDESCRIPTION: This snippet shows the structure for creating custom actions that agents can perform. It includes the required properties like name, alternatives (similes), description, validation logic, and the actual implementation handler.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/overview.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst customAction: Action = {\n    name: \"CUSTOM_ACTION\",\n    similes: [\"ALTERNATE_NAME\"],\n    description: \"Action description\",\n    validate: async (runtime, message) => {\n        // Validation logic\n        return true;\n    },\n    handler: async (runtime, message) => {\n        // Implementation logic\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Character Configuration in TypeScript for elizaOS\nDESCRIPTION: A function that validates an unknown JSON input against the CharacterConfig type definition. It takes an unknown input and returns a properly typed CharacterConfig object.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/validateCharacterConfig.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nvalidateCharacterConfig(json): CharacterConfig\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Text Generation Service\nDESCRIPTION: Defines the core interface for text generation services with methods for initialization, message completion, text completion and embedding generation. Extends the base Service class and includes abstract methods that must be implemented by derived classes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ITextGenerationService.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ITextGenerationService extends Service {\n  get serviceType(): ServiceType;\n  initialize(runtime: IAgentRuntime): Promise<void>;\n  initializeModel(): Promise<void>;\n  queueMessageCompletion(\n    context: string,\n    temperature: number,\n    stop: string[],\n    frequency_penalty: number,\n    presence_penalty: number,\n    max_tokens: number\n  ): Promise<any>;\n  queueTextCompletion(\n    context: string,\n    temperature: number,\n    stop: string[],\n    frequency_penalty: number,\n    presence_penalty: number,\n    max_tokens: number\n  ): Promise<string>;\n  getEmbeddingResponse(input: string): Promise<number[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Schema for Memories and Knowledge\nDESCRIPTION: This SQL snippet defines the schema for 'memories' and 'knowledge' tables in SQLite, suitable for storing and retrieving vector embeddings and associated metadata. It assumes a SQLite environment with JSON and Foreign Key support. Both tables store embeddings as BLOBs, and 'knowledge' includes metadata stored as JSON.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/database.md#2025-04-16_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE memories (\n    id TEXT PRIMARY KEY,\n    type TEXT,\n    content TEXT,\n    embedding BLOB,\n    userId TEXT FK,\n    roomId TEXT FK,\n    agentId TEXT FK\n);\n\nCREATE TABLE knowledge (\n    id TEXT PRIMARY KEY,\n    content TEXT NOT NULL,\n    embedding BLOB,\n    metadata JSON\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Relevant Memories Using Vector Similarity\nDESCRIPTION: Function that retrieves memories relevant to a query by generating an embedding for the query and searching for similar memories using vector similarity matching.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveRelevantMemories(runtime: AgentRuntime, query: string) {\n    const embedding = await runtime.embed(query);\n    \n    return await runtime.messageManager.searchMemoriesByEmbedding(embedding, {\n        match_threshold: 0.8,\n        count: 10,\n        include_metadata: true\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Operations with Database Adapters\nDESCRIPTION: TypeScript code demonstrating core memory operations with database adapters in Eliza, including creating memories with embedding vectors, searching by embedding similarity, and retrieving recent memories within a time range.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Create memory\nawait db.createMemory({\n    id: uuid(),\n    type: \"messages\",\n    content: {\n        text: \"Hello world\",\n        attachments: [],\n    },\n    embedding: new Float32Array(1536), // Embedding vector\n    userId,\n    roomId,\n    agentId,\n    createdAt: Date.now(),\n    unique: true,\n});\n\n// Search by embedding\nconst memories = await db.searchMemories({\n    tableName: \"messages\",\n    roomId,\n    embedding: vectorData,\n    match_threshold: 0.8,\n    match_count: 10,\n    unique: true,\n});\n\n// Get recent memories\nconst recent = await db.getMemories({\n    roomId,\n    count: 10,\n    unique: true,\n    tableName: \"messages\",\n    start: startTime,\n    end: endTime,\n});\n```\n\n----------------------------------------\n\nTITLE: Token Validation and Risk Assessment\nDESCRIPTION: Comprehensive token validation function that checks multiple risk factors including potential rug pulls, suspicious trading patterns, liquidity, market cap, and holder distribution.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/autonomous-trading.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function validateToken(token: TokenPerformance): Promise<boolean> {\n    const security = await fetchTokenSecurity(token.tokenAddress);\n\n    // Red flags check\n    if (\n        security.rugPull ||\n        security.isScam ||\n        token.rapidDump ||\n        token.suspiciousVolume ||\n        token.liquidity.usd < 1000 || // Minimum $1000 liquidity\n        token.marketCap < 100000 // Minimum $100k market cap\n    ) {\n        return false;\n    }\n\n    // Holder distribution check\n    const holderData = await fetchHolderList(token.tokenAddress);\n    const topHolderPercent = calculateTopHolderPercentage(holderData);\n    if (topHolderPercent > 0.5) {\n        // >50% held by top holders\n        return false;\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Interface Definition in TypeScript\nDESCRIPTION: Defines the core Plugin interface that all Eliza plugins must implement, including required properties for name, description, and optional arrays for actions, evaluators, providers, and services.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Plugin {\n    name: string; // Unique identifier for the plugin\n    description: string; // Brief description of plugin functionality\n    actions?: Action[]; // Custom actions provided by the plugin\n    evaluators?: Evaluator[]; // Custom evaluators for behavior assessment\n    providers?: Provider[]; // Context providers for message generation\n    services?: Service[]; // Additional services (optional)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Client Implementation in TypeScript\nDESCRIPTION: Example of a basic client implementation that follows Eliza's Client interface. Shows the structure for initializing a custom client, including platform connection setup and resource cleanup.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/clients.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client, IAgentRuntime, ClientInstance } from \"@elizaos/core\";\n\nexport class CustomClient implements Client {\n    name = \"custom\";\n    \n    async start(runtime: IAgentRuntime): Promise<ClientInstance> {\n        // Initialize platform connection\n        // Set up event handlers\n        // Configure message processing\n\n        return {\n            stop: async () => {\n                // Cleanup resources\n                // Close connections\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Participant Management Methods in TypeScript\nDESCRIPTION: Abstract methods for managing participants in rooms, including adding and removing participants, and retrieving participant information.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nabstract addParticipant(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<boolean>;\n\nabstract removeParticipant(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<boolean>;\n\nabstract getParticipantsForAccount(userId: `${string}-${string}-${string}-${string}-${string}`): Promise<Participant[]>;\n\nabstract getParticipantsForRoom(roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<`${string}-${string}-${string}-${string}-${string}`[]>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Runtime for Eliza\nDESCRIPTION: Demonstrates how to initialize a custom AgentRuntime with specific database adapters, model providers, plugins, and services. This allows for comprehensive customization of Eliza's runtime environment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst customRuntime = new AgentRuntime({\n    databaseAdapter: new PostgresDatabaseAdapter(config),\n    modelProvider: new OpenAIProvider(apiKey),\n    plugins: [solanaPlugin, customPlugin],\n    services: [\n        new VideoService(),\n        new ImageDescriptionService(),\n        new SpeechService(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Interface Definition in TypeScript\nDESCRIPTION: Defines the core Plugin interface in TypeScript. This interface specifies the structure that all ElizaOS plugins must implement, including properties for name, description, configuration, and various components.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Plugin = {\n    name: string;\n    description: string;\n    config?: { [key: string]: any };\n    actions?: Action[];\n    providers?: Provider[];\n    evaluators?: Evaluator[];\n    services?: Service[];\n    clients?: Client[];\n    adapters?: Adapter[];\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Embeddings to Memory in TypeScript\nDESCRIPTION: Method to add embedding vectors to memory objects by generating them from the memory's text content using the runtime's embedding model.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryManager.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync addEmbeddingToMemory(memory: Memory): Promise<Memory>\n```\n\n----------------------------------------\n\nTITLE: Generating Text Embeddings with TypeScript Function\nDESCRIPTION: A function that generates numerical embeddings from input text using either a remote API endpoint or local BGE/384 model as fallback. Takes an agent runtime context and input text as parameters, returns a promise resolving to an array of numbers representing the embeddings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/embed.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nembed(runtime: IAgentRuntime, input: string): Promise<number[]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Dependencies in package.json\nDESCRIPTION: Shows how to add ElizaOS plugins to a project's dependencies in package.json. This allows the project to include specific plugins from the ElizaOS plugin registry.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@elizaos/plugin-solana\": \"github:elizaos-plugins/plugin-solana\",\n    \"@elizaos/plugin-twitter\": \"github:elizaos-plugins/plugin-twitter\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Adapter Interface Definition in TypeScript\nDESCRIPTION: Core interface definition for the IDatabaseAdapter that all database adapters must implement. This includes essential methods for memory management, account and room management, participant management, and knowledge management.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/database.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IDatabaseAdapter {\n    // Memory Management\n    createMemory(memory: Memory, tableName: string): Promise<void>;\n    getMemories(params: { roomId: UUID; count?: number }): Promise<Memory[]>;\n    searchMemories(params: SearchParams): Promise<Memory[]>;\n    removeMemory(memoryId: UUID): Promise<void>;\n    \n    // Account & Room Management\n    createAccount(account: Account): Promise<boolean>;\n    getAccountById(userId: UUID): Promise<Account>;\n    createRoom(roomId?: UUID): Promise<UUID>;\n    getRoom(roomId: UUID): Promise<UUID>;\n    \n    // Participant Management\n    addParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n    getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;\n    \n    // Knowledge Management\n    createKnowledge(knowledge: RAGKnowledgeItem): Promise<void>;\n    searchKnowledge(params: SearchParams): Promise<RAGKnowledgeItem[]>;\n    \n    // Goal Management\n    createGoal(goal: Goal): Promise<void>;\n    updateGoalStatus(params: { goalId: UUID; status: GoalStatus }): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Handler with Exponential Backoff in TypeScript\nDESCRIPTION: Implements rate limiting handling with exponential backoff strategy. The class calculates appropriate wait times between retries using exponential backoff with configurable base and maximum delays.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nclass RateLimiter {\n    private async handleRateLimit(error: RateLimitError) {\n        const delay = this.calculateBackoff(error);\n        await wait(delay);\n        return this.retryRequest();\n    }\n\n    private calculateBackoff(error: RateLimitError): number {\n        return Math.min(\n            this.baseDelay * Math.pow(2, this.attempts),\n            this.maxDelay\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Generation Action in TypeScript\nDESCRIPTION: A comprehensive example of an action that generates images based on user descriptions, including validation logic to determine when the action should trigger, a handler for executing the image generation, and example usage patterns.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/actions.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Action, IAgentRuntime, Memory, State } from \"@elizaos/core\";\n\n// Example image generation action\nconst generateImageAction: Action = {\n    name: \"GENERATE_IMAGE\", \n    similes: [\"CREATE_IMAGE\", \"MAKE_IMAGE\", \"DRAW\"],\n    description: \"Generates an image based on the user's description\",\n    suppressInitialMessage: true, // Suppress initial response since we'll generate our own\n\n    // Validate if this action should be used\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        const text = message.content.text.toLowerCase();\n        // Check if message contains image generation triggers\n        return (\n            text.includes(\"generate\") ||\n            text.includes(\"create\") ||\n            text.includes(\"draw\") ||\n            text.includes(\"make an image\")\n        );\n    },\n\n    // Handle the action execution\n    handler: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n        try {\n            // Get image service\n            const imageService = runtime.getService(ServiceType.IMAGE_GENERATION);\n            \n            // Generate image\n            const imageUrl = await imageService.generateImage(message.content.text);\n\n            // Create response with generated image\n            await runtime.messageManager.createMemory({\n                id: generateId(),\n                content: {\n                    text: \"Here's the image I generated:\",\n                    attachments: [{\n                        type: \"image\",\n                        url: imageUrl\n                    }]\n                },\n                userId: runtime.agentId,\n                roomId: message.roomId,\n            });\n\n            return true;\n        } catch (error) {\n            console.error(\"Image generation failed:\", error);\n            return false;\n        }\n    },\n\n    // Example usage patterns\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { \n                    text: \"Can you generate an image of a sunset?\" \n                }\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll create that image for you\",\n                    action: \"GENERATE_IMAGE\"\n                }\n            }\n        ]\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Provider Interface in TypeScript\nDESCRIPTION: The core Provider interface definition showing the get method that takes runtime, message, and optional state parameters and returns a Promise containing a string with context information.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/providers.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Provider {\n    get: (\n        runtime: IAgentRuntime, // Which agent is calling the provider\n        message: Memory,        // Last message received \n        state?: State          // Current conversation state\n    ) => Promise<string>;      // Returns info to inject into context\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CONTINUE Conversation Action in TypeScript\nDESCRIPTION: An example of a basic conversation action that handles continuation requests from users. This action validates user inputs that imply a desire for more information and generates contextual responses based on recent message history.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/actions.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst continueAction: Action = {\n    name: \"CONTINUE\",\n    similes: [\"ELABORATE\", \"GO_ON\"],\n    description: \"Continues the conversation when appropriate\",\n\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        // Check if message warrants continuation\n        const text = message.content.text.toLowerCase();\n        return (\n            text.includes(\"tell me more\") ||\n            text.includes(\"what else\") ||\n            text.includes(\"continue\") ||\n            text.endsWith(\"?\")\n        );\n    },\n\n    handler: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n        // Get recent conversation context\n        const recentMessages = await runtime.messageManager.getMemories({\n            roomId: message.roomId,\n            count: 5\n        });\n\n        // Generate contextual response\n        const response = await runtime.generateResponse(\n            message,\n            recentMessages,\n            state\n        );\n\n        // Store response\n        await runtime.messageManager.createMemory({\n            id: generateId(),\n            content: response,\n            userId: runtime.agentId,\n            roomId: message.roomId\n        });\n\n        return true;\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Tell me more about that\" }\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll continue explaining...\",\n                    action: \"CONTINUE\"\n                }\n            }\n        ]\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Core Character Configuration Schema in JSON\nDESCRIPTION: Comprehensive schema showing all available fields for character configuration including required fields (id, name, modelProvider, clients) and optional components like settings, bio, lore, examples, and style guidelines.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"unique-identifier\",\n    \"name\": \"character_name\",\n    \"modelProvider\": \"ModelProviderName\",\n    \"clients\": [\"Client1\", \"Client2\"],\n    \"settings\": {\n        \"secrets\": { \"key\": \"value\" },\n        \"voice\": { \"model\": \"VoiceModelName\", \"url\": \"VoiceModelURL\" },\n        \"model\": \"CharacterModel\",\n        \"embeddingModel\": \"EmbeddingModelName\"\n    },\n    \"bio\": \"Character biography or description\",\n    \"lore\": [\n        \"Storyline or backstory element 1\",\n        \"Storyline or backstory element 2\"\n    ],\n    \"messageExamples\": [[\"Message example 1\", \"Message example 2\"]],\n    \"postExamples\": [\"Post example 1\", \"Post example 2\"],\n    \"topics\": [\"Topic1\", \"Topic2\"],\n    \"adjectives\": [\"Adjective1\", \"Adjective2\"],\n    \"style\": {\n        \"all\": [\"All style guidelines\"],\n        \"chat\": [\"Chat-specific style guidelines\"],\n        \"post\": [\"Post-specific style guidelines\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Pooling Optimization for PostgreSQL - TypeScript\nDESCRIPTION: This snippet shows how to configure connection pooling for the PostgreSQL adapter in Eliza to improve performance and manage database connections effectively.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new PostgresDatabaseAdapter({\n    connectionString: process.env.DATABASE_URL,\n    max: 20, // Maximum pool size\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Plugin Implementation in TypeScript\nDESCRIPTION: Example code for creating a custom plugin by implementing the Plugin interface. Shows the structure with hooks for actions, evaluators, providers, and services that can be extended with custom functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugin, Action, Evaluator, Provider } from \"@elizaos/core\";\n\nconst myCustomPlugin: Plugin = {\n    name: \"my-custom-plugin\",\n    description: \"Adds custom functionality\",\n    actions: [\n        /* custom actions */\n    ],\n    evaluators: [\n        /* custom evaluators */\n    ],\n    providers: [\n        /* custom providers */\n    ],\n    services: [\n        /* custom services */\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Action Template in TypeScript\nDESCRIPTION: This snippet demonstrates a basic template for creating custom actions in ElizaOS, including the required name, similes, description, validate function, handler implementation, and usage examples.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/actions.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst customAction: Action = {\n    name: \"CUSTOM_ACTION\",\n    similes: [\"ALTERNATE_NAME\", \"OTHER_TRIGGER\"],\n    description: \"Detailed description of when and how to use this action\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        // Validation logic\n        return true;\n    },\n    handler: async (runtime: IAgentRuntime, message: Memory) => {\n        // Implementation logic\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Trigger message\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"Response\", action: \"CUSTOM_ACTION\" },\n            },\n        ],\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentRuntime Class Constructor\nDESCRIPTION: Constructor for creating a new AgentRuntime instance with configuration options including conversation length, agent ID, character settings, tokens, services and providers.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AgentRuntime(opts): AgentRuntime\n```\n\n----------------------------------------\n\nTITLE: Database Interface Methods Implementation in TypeScript\nDESCRIPTION: Core database interface methods including initialization, closing connections, and CRUD operations for accounts and memories. Includes type-safe implementations with proper error handling.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract init(): Promise<void>\nabstract close(): Promise<void>\nabstract getAccountById(userId: string): Promise<Account>\nabstract createAccount(account: Account): Promise<boolean>\nabstract getMemories(params: {\n  agentId: string,\n  roomId: string,\n  count?: number,\n  unique?: boolean,\n  tableName: string\n}): Promise<Memory[]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in AgentRuntime for Solana and Coinbase Commerce in TypeScript\nDESCRIPTION: This code snippet demonstrates how to conditionally include the Solana and Coinbase Commerce plugins in the AgentRuntime configuration based on character settings or environment variables.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-23.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst plugins = [\n  ...(character.settings.solana_enabled || process.env.WALLET_PUBLIC_KEY\n    ? [solanaPlugin]\n    : []),\n  ...(character.settings.coinbase_commerce_enabled ||\n  process.env.COINBASE_COMMERCE_API_KEY\n    ? [coinbaseCommercePlugin]\n    : []),\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring generateText Function in TypeScript\nDESCRIPTION: This snippet defines the generateText function, which takes an options object and returns a Promise resolving to a string. It's used for sending messages to a model for text generation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateText.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateText(opts): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Required Fields Structure for elizaOS Character Files in JSON\nDESCRIPTION: The minimum required fields for creating a valid character file in elizaOS. This includes the character's name, model provider, supported clients, plugins, settings configuration, bio information, and style guidelines.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/characterfile.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"character_name\",           // Character's display name for identification and in conversations\n    \"modelProvider\": \"openai\",          // AI model provider (e.g., anthropic, openai, groq, mistral, google)\n    \"clients\": [\"discord\", \"direct\"],   // Supported client types\n    \"plugins\": [],                      // Array of plugins to use\n    \"settings\": {                       // Configuration settings\n        \"ragKnowledge\": false,          // Enable RAG for knowledge (default: false)\n        \"secrets\": {},                  // API keys and sensitive data\n        \"voice\": {},                    // Voice configuration\n        \"model\": \"string\",              // Optional model override\n        \"modelConfig\": {}               // Optional model configuration\n    },\n    \"bio\": [],                         // Character background as a string or array of statements\n    \"style\": {                         // Interaction style guide\n        \"all\": [],                     // General style rules\n        \"chat\": [],                    // Chat-specific style\n        \"post\": []                     // Post-specific style\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Account Interface Definition\nDESCRIPTION: Defines the Account interface with required properties (id, name, username) and optional properties (details, email, avatarUrl). The interface represents user accounts in the ElizaOS system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Account.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Account {\n  id: `${string}-${string}-${string}-${string}-${string}`;\n  name: string;\n  username: string;\n  details?: { [key: string]: any };\n  email?: string;\n  avatarUrl?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mock Attestation Server with Docker\nDESCRIPTION: Docker command to run the mock attestation server, mapping it to the default port 1350.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# The server runs on 1350 inside Docker, can remap to any interface and port\ndocker run --init -p 127.0.0.1:1350:1350 marlinorg/attestation-server-custom-mock\n```\n\n----------------------------------------\n\nTITLE: Character Loading Implementation in TypeScript\nDESCRIPTION: Function that loads character definitions from JSON files, processes plugins, and falls back to defaults if needed. It normalizes paths, reads files, and handles errors gracefully.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loadCharacters(\n    charactersArg: string,\n): Promise<Character[]> {\n    const characterPaths = normalizeCharacterPaths(charactersArg);\n    const loadedCharacters = [];\n\n    for (const path of characterPaths) {\n        try {\n            const character = JSON.parse(fs.readFileSync(path, \"utf8\"));\n\n            // Load plugins if specified\n            if (character.plugins) {\n                character.plugins = await Promise.all(\n                    character.plugins.map(async (plugin) => {\n                        const importedPlugin = await import(plugin);\n                        return importedPlugin;\n                    }),\n                );\n            }\n\n            loadedCharacters.push(character);\n        } catch (error) {\n            console.error(`Error loading character from ${path}: ${error}`);\n        }\n    }\n\n    // Fall back to default if none loaded\n    return loadedCharacters.length > 0 ? loadedCharacters : [defaultCharacter];\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Secrets Before Use in TypeScript\nDESCRIPTION: This function validates that the required secrets are present in character settings before they are used, which helps ensure the application runs smoothly without missing configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function validateSecrets(character: Character): Promise<void> {\n    const required = [\"OPENAI_API_KEY\"];\n    const missing = required.filter((key) => !character.settings.secrets[key]);\n\n    if (missing.length > 0) {\n        throw new Error(`Missing required secrets: ${missing.join(\", \")}`);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Facts in Memory with Embeddings\nDESCRIPTION: This function adds a new fact to the agent's memory system with embeddings. It associates the fact with user and agent IDs, the conversation room, and timestamps the memory creation, enabling semantic search and context-aware recall.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/fact-evaluator.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst factMemory = await factsManager.addEmbeddingToMemory({\n    userId: agentId!,\n    agentId,\n    content: { text: fact },\n    roomId,\n    createdAt: Date.now(),\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Database Interface Definition\nDESCRIPTION: Interface defining core database operations for elizaOS including account management, memory storage/retrieval, goal tracking and embedding searches. The interface includes strongly typed methods for initialization, closing connections, and performing various database operations with typed parameters and return values.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IDatabaseAdapter.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IDatabaseAdapter {\n  db: any;\n  init(): Promise<void>;\n  close(): Promise<void>;\n  getAccountById(userId: `${string}-${string}-${string}-${string}-${string}`): Promise<Account>;\n  createAccount(account: Account): Promise<boolean>;\n  getMemories(params: {\n    roomId: `${string}-${string}-${string}-${string}-${string}`;\n    count?: number;\n    unique?: boolean;\n    tableName: string;\n    agentId: `${string}-${string}-${string}-${string}-${string}`;\n    start?: number;\n    end?: number;\n  }): Promise<Memory[]>;\n  getMemoryById(id: `${string}-${string}-${string}-${string}-${string}`): Promise<Memory>;\n  getMemoriesByIds(ids: `${string}-${string}-${string}-${string}-${string}`[], tableName?: string): Promise<Memory[]>;\n  getCachedEmbeddings(params: {\n    query_table_name: string;\n    query_threshold: number;\n    query_input: string;\n    query_field_name: string;\n    query_field_sub_name: string;\n    query_match_count: number;\n  }): Promise<object[]>;\n  // ... additional methods omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugins in Character Configuration\nDESCRIPTION: Demonstrates how to import and register multiple plugins (bootstrap, image generation, and buttplug) in an Eliza character configuration object.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapPlugin } from \"@eliza/plugin-bootstrap\";\nimport { imageGenerationPlugin } from \"@eliza/plugin-image-generation\";\nimport { buttplugPlugin } from \"@eliza/plugin-buttplug\";\nconst character = {\n    // ... other character config\n    plugins: [bootstrapPlugin, imageGenerationPlugin, buttplugPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Get Cache Value Method in TypeScript\nDESCRIPTION: Generic method to retrieve a typed value from cache using a string key.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/CacheManager.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget<T = unknown>(key: string): Promise<T>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action in TypeScript\nDESCRIPTION: Defines the structure of a custom action implementation, including name, similar actions, validation logic, description, and handler function that contains the action's core logic.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myAction: Action = {\n    name: \"MY_ACTION\",\n    similes: [\"SIMILAR_ACTION\", \"ALTERNATE_NAME\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        // Validation logic\n        return true;\n    },\n    description: \"Action description\",\n    handler: async (runtime: IAgentRuntime, message: Memory) => {\n        // Action logic\n        return true;\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating NASA API Service\nDESCRIPTION: TypeScript implementation of the service that handles NASA API interactions, abstracting API calls behind a clean interface.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst nasaService = (config: NasaConfig) => ({\n    getMarsRoverPhoto: async () => {\n        const response = await fetch(\n            `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?api_key=${config.apiKey}`\n        );\n        return response.json();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Plugins for Eliza\nDESCRIPTION: Demonstrates the structure for creating custom plugins in Eliza with actions, evaluators, and providers. This template shows the basic structure that can be extended with specific functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst customPlugin: Plugin = {\n    name: \"custom-plugin\",\n    description: \"Custom Plugin for Eliza\",\n    actions: [\n        // Custom actions\n    ],\n    evaluators: [\n        // Custom evaluators\n    ],\n    providers: [\n        // Custom providers\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Solana Blockchain Plugin in Eliza\nDESCRIPTION: Demonstrates how to import and register the Solana blockchain plugin with Eliza's runtime. This plugin provides comprehensive blockchain functionality for Solana integration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { solanaPlugin } from \"@elizaos/core/plugin-solana\";\n\n// Initialize plugin\nruntime.registerPlugin(solanaPlugin);\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL Database Adapter\nDESCRIPTION: TypeScript code for initializing and testing a PostgreSQL database adapter connection in Eliza. The adapter is configured with connection pooling parameters and a test connection is established.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PostgresDatabaseAdapter } from \"@elizaos/adapter-postgres\";\n\nconst db = new PostgresDatabaseAdapter({\n    connectionString: process.env.DATABASE_URL,\n    max: 20, // Connection pool size\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000,\n});\n\n// Test connection\nawait db.testConnection();\n```\n\n----------------------------------------\n\nTITLE: Defining Eliza Plugin Interface in TypeScript\nDESCRIPTION: This snippet defines the Plugin interface, which is essential for all plugins in the Eliza framework. It includes properties for identifying the plugin and specifying its functionality through actions, evaluators, providers, and services.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Plugin {\n    name: string; // Unique identifier for the plugin\n    description: string; // Brief description of plugin functionality\n    actions?: Action[]; // Custom actions provided by the plugin\n    evaluators?: Evaluator[]; // Custom evaluators for behavior assessment\n    providers?: Provider[]; // Context providers for message generation\n    services?: Service[]; // Additional services (optional)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Provider Settings in Environment Variables\nDESCRIPTION: Sets up API keys for different AI model providers, including OpenAI, Anthropic, Together.ai, Heurist, and Livepeer. Each provider requires its own API key or gateway URL.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# OpenAI Settings\nOPENAI_API_KEY=sk-*\n\n# Anthropic Settings\nANTHROPIC_API_KEY=\n\n# Together.ai Settings\nTOGETHER_API_KEY=\n\n# Heurist Settings\nHEURIST_API_KEY=\n\n# Livepeer Settings\nLIVEPEER_GATEWAY_URL=\n```\n\n----------------------------------------\n\nTITLE: Managing Participants in ElizaOS Rooms (TypeScript)\nDESCRIPTION: Functions for handling participants in rooms, including retrieving rooms for participants, adding/removing participants, and getting participant lists. These operations use typed parameters and return Promises with arrays or boolean results.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IDatabaseAdapter.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRoomsForParticipant(userId: `${string}-${string}-${string}-${string}-${string}`): Promise<`${string}-${string}-${string}-${string}-${string}`[]>\n\ngetRoomsForParticipants(userIds: `${string}-${string}-${string}-${string}-${string}`[]): Promise<`${string}-${string}-${string}-${string}-${string}`[]>\n\naddParticipant(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<boolean>\n\nremoveParticipant(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<boolean>\n\ngetParticipantsForAccount(userId: `${string}-${string}-${string}-${string}-${string}`): Promise<Participant[]>\n\ngetParticipantsForRoom(roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<`${string}-${string}-${string}-${string}-${string}`[]>\n```\n\n----------------------------------------\n\nTITLE: Setting up Supabase Adapter - TypeScript\nDESCRIPTION: This snippet illustrates how to initialize the Supabase database adapter for Eliza, utilizing required environment variables for connecting to Supabase services.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SupabaseDatabaseAdapter } from \"@eliza/adapter-supabase\";\n\nconst db = new SupabaseDatabaseAdapter(\n    process.env.SUPABASE_URL,\n    process.env.SUPABASE_SERVICE_API_KEY,\n);\n```\n\n----------------------------------------\n\nTITLE: Memory Search Operations in TypeScript\nDESCRIPTION: Abstract methods for searching memories using embeddings and other parameters. Includes searchMemories() and searchMemoriesByEmbedding() with support for threshold matching and filtering.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nabstract searchMemories(params): Promise<Memory[]>;\n\nabstract searchMemoriesByEmbedding(embedding: number[], params): Promise<Memory[]>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Eliza\nDESCRIPTION: Demonstrates best practices for error handling in Eliza with try-catch blocks, error reporting, and operational error creation. Includes proper error logging and propagation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    const result = await complexOperation();\n    if (!result) {\n        throw new Error(\"Operation failed\");\n    }\n    return result;\n} catch (error) {\n    console.error(\"Error in operation:\", error);\n    await errorReporting.log(error);\n    throw new OperationalError(\"Failed to complete operation\", {\n        cause: error,\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ITranscriptionService Interface in TypeScript\nDESCRIPTION: This code snippet defines the ITranscriptionService interface, which extends the Service class. It includes a getter for serviceType and abstract methods for initialization and various transcription operations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ITranscriptionService.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ITranscriptionService extends Service {\n  get serviceType(): ServiceType;\n\n  initialize(runtime: IAgentRuntime): Promise<void>;\n\n  transcribeAttachment(audioBuffer: ArrayBuffer): Promise<string>;\n\n  transcribeAttachmentLocally(audioBuffer: ArrayBuffer): Promise<string>;\n\n  transcribe(audioBuffer: ArrayBuffer): Promise<string>;\n\n  transcribeLocally(audioBuffer: ArrayBuffer): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Memory System Integration Example\nDESCRIPTION: Code example showing how clients interact with Eliza's memory system. Demonstrates storing new messages and retrieving conversation history through the runtime's messageManager.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/clients.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Store a new message\nawait runtime.messageManager.createMemory({\n    id: messageId,\n    content: { text: message.content },\n    userId: userId,\n    roomId: roomId,\n    agentId: runtime.agentId\n});\n\n// Retrieve recent messages\nconst recentMessages = await runtime.messageManager.getMemories({\n    roomId: roomId,\n    count: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database for Production\nDESCRIPTION: Production database configuration using PostgreSQL with pgvector extension enabled for vector operations. Includes connection pool configuration for optimized performance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst prodConfig = {\n    type: 'postgres',\n    url: process.env.DATABASE_URL,\n    vectorExtension: true,    // Enable pgvector extension\n    poolConfig: {\n        max: 20,\n        idleTimeoutMillis: 30000,\n        connectionTimeoutMillis: 2000\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Plugin Interface Definition\nDESCRIPTION: Defines the Plugin type interface that specifies the structure and capabilities of ElizaOS plugins. The interface includes required properties like name and description, as well as optional components like actions, providers, services and character handlers.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Plugin.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPlugin: object {\n  name: string;\n  npmName?: string;\n  config?: {\n    [key: string]: any\n  };\n  description: string;\n  actions?: Action[];\n  providers?: Provider[];\n  evaluators?: Evaluator[];\n  services?: Service[];\n  clients?: Client[];\n  adapters?: Adapter[];\n  handlePostCharacterLoaded?: (char: Character) => Promise<Character>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Memory Manager for Eliza\nDESCRIPTION: Shows how to implement a MemoryManager class with methods for retrieving and creating memories. The manager handles agent-specific memories with room context.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass MemoryManager {\n    async getMemories({\n        agentId,\n        roomId,\n        count,\n    }: {\n        agentId: string;\n        roomId: string;\n        count: number;\n    }): Promise<Memory[]> {\n        // Implement memory retrieval logic\n    }\n\n    async createMemory(\n        memory: Memory,\n        allowDuplicates: boolean = false,\n    ): Promise<void> {\n        // Implement memory storage logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Fact Extraction from User Conversation\nDESCRIPTION: This example shows the JSON output from the Fact Evaluator after processing a conversation. It extracts factual claims, categorizes them by type (fact or opinion), and flags whether they were already known or present in the agent's bio.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/fact-evaluator.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"claim\": \"User moved to Seattle last month\",\n    \"type\": \"fact\",\n    \"in_bio\": false,\n    \"already_known\": false\n  },\n  {\n    \"claim\": \"User works at a tech startup\",\n    \"type\": \"fact\",\n    \"in_bio\": false,\n    \"already_known\": false\n  },\n  {\n    \"claim\": \"User enjoys their new job\",\n    \"type\": \"opinion\",\n    \"in_bio\": false,\n    \"already_known\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Arrays from Text in TypeScript\nDESCRIPTION: This function parses a JSON array from given text. It searches for a JSON block in triple backticks with a 'json' identifier, or an array pattern within the text. It then attempts to parse the JSON string into a JavaScript object, returning the array if successful, or null otherwise.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/parseJsonArrayFromText.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nparseJsonArrayFromText(text: string): any[]\n```\n\n----------------------------------------\n\nTITLE: Defining ICacheManager Interface in TypeScript\nDESCRIPTION: This snippet defines the ICacheManager interface with three methods: get for retrieving cached values, set for storing values in the cache, and delete for removing entries from the cache. All methods return Promises, indicating asynchronous operations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ICacheManager.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ICacheManager {\n  get<T = unknown>(key: string): Promise<T>;\n  set<T>(key: string, value: T, options?: CacheOptions): Promise<void>;\n  delete(key: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Facts Provider in TypeScript\nDESCRIPTION: A facts provider that retrieves and formats relevant facts for the current conversation context. It uses semantic search with embeddings to find the most relevant facts from a memory store and formats them for the agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/providers.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst factsProvider: Provider = {\n    get: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n        // Get recent messages\n        const recentMessagesData = state?.recentMessagesData?.slice(-10);\n        const recentMessages = formatMessages({\n            messages: recentMessagesData,\n            actors: state?.actorsData\n        });\n\n        // Generate embedding for semantic search\n        const embedding = await embed(runtime, recentMessages);\n        \n        const memoryManager = new MemoryManager({\n            runtime,\n            tableName: \"facts\"\n        });\n\n        // Retrieve relevant facts\n        const facts = await memoryManager.getMemories({\n            roomId: message.roomId,\n            count: 10,\n            agentId: runtime.agentId\n        });\n\n        if (facts.length === 0) return \"\";\n\n        const formattedFacts = formatFacts(facts);\n        return `Key facts that ${runtime.character.name} knows:\\n${formattedFacts}`;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Processing Service in Eliza\nDESCRIPTION: Demonstrates how to create a custom PdfService for handling PDF document analysis. The service extracts text content from all pages of a PDF document for further processing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass PdfService extends Service {\n    async convertPdfToText(pdfBuffer: Buffer): Promise<string> {\n        const pdf = await getDocument({ data: pdfBuffer }).promise;\n        const numPages = pdf.numPages;\n        const textPages = [];\n\n        for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const textContent = await page.getTextContent();\n            const pageText = textContent.items\n                .filter(isTextItem)\n                .map((item) => item.str)\n                .join(\" \");\n            textPages.push(pageText);\n        }\n\n        return textPages.join(\"\\n\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker-based Installation for ElizaOS\nDESCRIPTION: Commands for deploying ElizaOS using Docker, including cloning the repository, building and running the Docker containers.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:elizaOS/eliza.git\ncd eliza\ndocker-compose build\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Initializing Memory Manager in TypeScript\nDESCRIPTION: Constructor for the MemoryManager class that initializes a new instance with required configuration options including table name and runtime instance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryManager.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MemoryManager(opts: { tableName: string, runtime: IAgentRuntime }): MemoryManager\n```\n\n----------------------------------------\n\nTITLE: Recent Message State Update Function in TypeScript\nDESCRIPTION: Asynchronous function to update the state based on recent message changes. Takes and returns a State object.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAgentRuntime.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nupdateRecentMessageState(state: State): Promise<State>\n```\n\n----------------------------------------\n\nTITLE: Defining Knowledge Object with Get, Set, and Preprocess Methods in TypeScript\nDESCRIPTION: This snippet defines a knowledge object with three methods: get() for retrieving knowledge items, set() for storing knowledge items, and preprocess() for preprocessing content. The methods work with AgentRuntime, Memory, and KnowledgeItem types.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/knowledge.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nknowledge: object = {\n  get: (runtime: AgentRuntime, message: Memory) => Promise<KnowledgeItem[]>,\n  set: (runtime: AgentRuntime, item: KnowledgeItem, chunkSize: number = 512, bleed: number = 20) => Promise<void>,\n  preprocess: (content: string) => string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Integration in Environment Variables\nDESCRIPTION: Sets up the Twitter-specific configuration variables needed for integrating Eliza with Twitter. Includes account credentials and a dry run option for testing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTWITTER_USERNAME=          # Bot Twitter username\nTWITTER_PASSWORD=          # Bot Twitter password\nTWITTER_EMAIL=            # Twitter account email\nTWITTER_DRY_RUN=false    # Test mode without posting\n```\n\n----------------------------------------\n\nTITLE: Extracting Attributes from JSON-like Strings using Regex in TypeScript\nDESCRIPTION: This function extracts specific attributes (e.g., user, text, action) from a JSON-like string using regex. It takes a cleaned string response and an optional array of attribute names to extract, returning an object containing the extracted attributes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/extractAttributes.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nextractAttributes(response: string, attributesToExtract?: string[]): object\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Service File for ElizaOS\nDESCRIPTION: Creates a systemd service definition for automatically starting ElizaOS on system boot with proper environment configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /etc/systemd/system/eliza.service << 'EOL'\n[Unit]\nDescription=Eliza AI Chat Agent\nAfter=network.target\n\n[Service]\nType=simple\nUser=eliza\nWorkingDirectory=/opt/elizaos/eliza\n\n# Environment setup\nEnvironment=NODE_ENV=production\nEnvironment=HOME=/opt/elizaos\nEnvironment=HTTP_PORT=3000\nEnvironment=PATH=/opt/elizaos/.local/share/pnpm:/usr/local/bin:/usr/bin:/bin\nEnvironment=NVM_DIR=/opt/elizaos/.nvm\n\n# Source NVM and start app\nExecStart=/bin/bash -c '. $NVM_DIR/nvm.sh && exec pnpm start --characters=\"characters/default.character.json\"'\n\n# Logging\nStandardOutput=append:/var/log/eliza/eliza.log\nStandardError=append:/var/log/eliza/eliza-error.log\n\n# Restart configuration\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOL\n```\n\n----------------------------------------\n\nTITLE: Defining generateText Function Parameters in TypeScript\nDESCRIPTION: This snippet outlines the parameters for the generateText function, including runtime, context, modelClass, tools, onStepFinish, maxSteps, stop, and customSystemPrompt.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateText.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nopts: {\n  runtime: IAgentRuntime;\n  context: string;\n  modelClass: ModelClass;\n  tools?: Record<string, Tool>;\n  onStepFinish?: Function;\n  maxSteps?: number;\n  stop?: string[];\n  customSystemPrompt?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Service from Runtime by Type\nDESCRIPTION: Generic method to retrieve a registered service by its type from the services map. If the service doesn't exist, it throws an error with a detailed message.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetService<T extends Service>(service: ServiceType): T {\n  if (!this.services.has(service)) {\n    throw new Error(`Service ${service} not found`);\n  }\n  return this.services.get(service) as T;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example Character File for elizaOS in JSON\nDESCRIPTION: A comprehensive example of a fully configured character file for a technical assistant. Demonstrates the integration of all major components including basic configuration, knowledge management, personality traits, and interaction style.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/characterfile.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Tech Helper\",\n    \"modelProvider\": \"anthropic\",\n    \"clients\": [\"discord\"],\n    \"plugins\": [],\n    \"settings\": {\n        \"ragKnowledge\": true,\n        \"voice\": {\n            \"model\": \"en_US-male-medium\"\n        }\n    },\n    \"bio\": [\n        \"Friendly technical assistant\",\n        \"Specializes in explaining complex topics simply\"\n    ],\n    \"lore\": [\n        \"Pioneer in open-source AI development\",\n        \"Advocate for AI accessibility\"\n    ],\n    \"messageExamples\": [\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": { \"text\": \"Can you explain how AI models work?\" }\n            },\n            {\n                \"user\": \"TechAI\",\n                \"content\": {\n                    \"text\": \"Think of AI models like pattern recognition systems.\"\n                }\n            }\n        ]\n    ],\n    \"postExamples\": [\n        \"Understanding AI doesn't require a PhD - let's break it down simply\",\n        \"The best AI solutions focus on real human needs\"\n    ],\n    \"topics\": [\n        \"artificial intelligence\",\n        \"machine learning\",\n        \"technology education\"\n    ],\n    \"knowledge\": [\n        {\n            \"directory\": \"tech_guides\",\n            \"shared\": true\n        }\n    ],\n    \"adjectives\": [\"knowledgeable\", \"approachable\", \"practical\"],\n    \"style\": {\n        \"all\": [\"Clear\", \"Patient\", \"Educational\"],\n        \"chat\": [\"Interactive\", \"Supportive\"],\n        \"post\": [\"Concise\", \"Informative\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing State Composition in TypeScript\nDESCRIPTION: Function that composes agent state from a message and additional keys into a State object for response generation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ncomposeState(message: Memory, additionalKeys = {}): Promise<State>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Parameters\nDESCRIPTION: Parameter structure for the generateObjectArray function, showing the required runtime, context and modelClass parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateObjectArray.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  runtime: IAgentRuntime,\n  context: string,\n  modelClass: ModelClass\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Management Operations in TypeScript\nDESCRIPTION: Core memory CRUD operations including creating, removing and counting memories with support for unique constraints and room-specific operations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nabstract createMemory(memory: Memory, tableName: string, unique?: boolean): Promise<void>;\n\nabstract removeMemory(memoryId: string, tableName: string): Promise<void>;\n\nabstract removeAllMemories(roomId: string, tableName: string): Promise<void>;\n\nabstract countMemories(roomId: string, unique?: boolean, tableName?: string): Promise<number>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching Strategy for Eliza\nDESCRIPTION: Demonstrates how to create a CacheManager class for Eliza with tiered caching for improved performance. The manager uses in-memory caching with TTL and maintains a cache directory for persistence.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass CacheManager {\n    private cache: NodeCache;\n    private cacheDir: string;\n\n    constructor() {\n        this.cache = new NodeCache({ stdTTL: 300 });\n        this.cacheDir = path.join(__dirname, \"cache\");\n        this.ensureCacheDirectoryExists();\n    }\n\n    private async getCachedData<T>(key: string): Promise<T | null> {\n        // Implement tiered caching strategy\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Adapter Type Alias in TypeScript\nDESCRIPTION: Defines the Adapter type alias as an object with an init function. The init function takes an IAgentRuntime parameter and returns an object implementing IDatabaseAdapter and IDatabaseCacheAdapter interfaces.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Adapter.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nAdapter: object\n\ninit: (runtime: IAgentRuntime) => IDatabaseAdapter & IDatabaseCacheAdapter\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration with Custom Plugin\nDESCRIPTION: Example configuration for an agent using a custom plugin. This shows the settings section where plugin-specific configuration can be provided.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"MyAgent\",\n  \"plugins\": [\"@elizaos/your-plugin\"],\n  \"settings\": {\n    \"your-plugin\": {\n      // Your plugin's configuration\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Boolean Values from AI Model Responses in TypeScript\nDESCRIPTION: A function that takes a runtime context and model parameters to generate a boolean response. It requires an IAgentRuntime instance, optional context string, and ModelClass specification, returning a Promise that resolves to a boolean value.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateTrueOrFalse.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateTrueOrFalse(opts): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Registering Action in Runtime\nDESCRIPTION: Method to register an action that the agent can perform. Adds the action to the actions collection for later use during message processing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nregisterAction(action: Action): void {\n  this.actions.push(action);\n}\n```\n\n----------------------------------------\n\nTITLE: Cache and Goal Management Interfaces in TypeScript\nDESCRIPTION: Interface definitions for caching and goal management in database adapters. The cache interface provides methods for storing and retrieving arbitrary key-value data, while the goal management interface handles creating, updating, and retrieving agent goals.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/database.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IDatabaseCacheAdapter {\n    getCache(params: {\n        agentId: UUID;\n        key: string;\n    }): Promise<string | undefined>;\n    \n    setCache(params: {\n        agentId: UUID;\n        key: string;\n        value: string;\n    }): Promise<boolean>;\n}\n\ninterface IDatabaseAdapter {\n    // Goal Management\n    createGoal(goal: Goal): Promise<void>;\n    updateGoal(goal: Goal): Promise<void>;\n    getGoals(params: {\n        agentId: UUID;\n        roomId: UUID;\n        userId?: UUID | null;\n        onlyInProgress?: boolean;\n        count?: number;\n    }): Promise<Goal[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving Key Pairs in TEE Using DeriveKeyProvider - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the DeriveKeyProvider to securely derive key pairs for Solana and EVM in a TEE environment utilizing a specified teeMode. It includes functionality for both Ed25519 and ECDSA key pairs as well as raw key derivation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new DeriveKeyProvider(teeMode);\n// For Solana\nconst { keypair, attestation } = await provider.deriveEd25519Keypair(\n    secretSalt,\n    \"solana\",\n    agentId,\n);\n// For EVM\nconst { keypair, attestation } = await provider.deriveEcdsaKeypair(\n    secretSalt,\n    \"evm\",\n    agentId,\n);\n// For raw key derivation\nconst rawKey = await provider.deriveRawKey(\n    secretSalt,\n    \"raw\",\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Token Swaps with Jupiter on Solana\nDESCRIPTION: Implements token swap functionality using Jupiter aggregator, handling token decimals, quote fetching, and swap execution with configurable slippage settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/autonomous-trading.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function swapToken(\n    connection: Connection,\n    walletPublicKey: PublicKey,\n    inputTokenCA: string,\n    outputTokenCA: string,\n    amount: number,\n): Promise<any> {\n    // Get token decimals\n    const decimals = await getTokenDecimals(connection, inputTokenCA);\n    const adjustedAmount = amount * 10 ** decimals;\n\n    // Fetch quote\n    const quoteResponse = await fetch(\n        `https://quote-api.jup.ag/v6/quote?inputMint=${inputTokenCA}` +\n            `&outputMint=${outputTokenCA}` +\n            `&amount=${adjustedAmount}` +\n            `&slippageBps=50`,\n    );\n\n    // Execute swap\n    const swapResponse = await fetch(\"https://quote-api.jup.ag/v6/swap\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            quoteResponse: await quoteResponse.json(),\n            userPublicKey: walletPublicKey.toString(),\n            wrapAndUnwrapSol: true,\n        }),\n    });\n\n    return swapResponse.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Client Interface for Message Handling\nDESCRIPTION: TypeScript interface definition for standardized client message handling across all elizaOS clients. It defines methods for handling incoming messages, generating responses based on context, and sending messages to specified destinations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClientInterface {\n    handleMessage(message: Message): Promise<void>;\n    generateResponse(context: Context): Promise<Response>;\n    sendMessage(destination: string, content: Content): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Agent Creation with Runtime Configuration\nDESCRIPTION: Function for creating an agent instance with the necessary dependencies including database adapter, token, and plugins. It configures the agent runtime with character settings and core plugins.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function createAgent(\n    character: Character,\n    db: IDatabaseAdapter,\n    token: string,\n) {\n    return new AgentRuntime({\n        databaseAdapter: db,\n        token,\n        modelProvider: character.modelProvider,\n        character,\n        plugins: [\n            bootstrapPlugin,\n            nodePlugin,\n            character.settings.secrets.WALLET_PUBLIC_KEY ? solanaPlugin : null,\n        ].filter(Boolean),\n        providers: [],\n        actions: [],\n        services: [],\n        managers: [],\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Quick Start Guide for Agent Initialization\nDESCRIPTION: Basic TypeScript code demonstrating how to import, load characters, and start the agent system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startAgents, loadCharacters } from \"@elizaos/agent\";\n\n// Load characters from files\nconst args = parseArguments();\nconst characters = await loadCharacters(args.characters || args.character);\n\n// Start agent system\nawait startAgents();\n```\n\n----------------------------------------\n\nTITLE: Searching Memories by Embedding in TypeScript\nDESCRIPTION: Method to search for memories similar to a given embedding vector with configurable matching threshold and filtering options.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryManager.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync searchMemoriesByEmbedding(embedding: number[], opts: { match_threshold?: number, count?: number, roomId: string, unique?: boolean }): Promise<Memory[]>\n```\n\n----------------------------------------\n\nTITLE: Embedding and Logging Operations in TypeScript\nDESCRIPTION: Methods for managing cached embeddings and system logging with support for detailed query parameters and logging configurations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nabstract getCachedEmbeddings(params: {\n  query_table_name: string,\n  query_threshold: number,\n  query_input: string,\n  query_field_name: string,\n  query_field_sub_name: string,\n  query_match_count: number\n}): Promise<object[]>\nabstract log(params: {\n  body: any,\n  userId: string,\n  roomId: string,\n  type: string\n}): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory System Parameters in TypeScript\nDESCRIPTION: Defines the MemoryConfig interface that specifies key parameters for the memory system including vector dimensions, similarity threshold, maximum memories to retrieve, and retention period.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MemoryConfig {\n    dimensions: number;        // Vector dimensions (default: 1536 for OpenAI)\n    matchThreshold: number;    // Similarity threshold (0.0-1.0)\n    maxMemories: number;      // Maximum memories to retrieve\n    retentionPeriod: string;  // e.g., '30d', '6h'\n}\n\nconst config: MemoryConfig = {\n    dimensions: 1536,\n    matchThreshold: 0.8,\n    maxMemories: 10,\n    retentionPeriod: '30d'\n};\n```\n\n----------------------------------------\n\nTITLE: SQLite Vector Search Implementation\nDESCRIPTION: TypeScript implementation of vector search in the SQLite database adapter using sqlite-vss extension. The method searches for memories by embedding vector similarity using L2 distance calculations with filtering options.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// SQLite vector search implementation\nasync searchMemories(params: {\n  tableName: string;\n  roomId: UUID;\n  embedding: number[];\n  match_threshold: number;\n  match_count: number;\n  unique: boolean;\n}): Promise<Memory[]> {\n  const queryParams = [\n    new Float32Array(params.embedding),\n    params.tableName,\n    params.roomId,\n    params.match_count\n  ];\n\n  let sql = `\n    SELECT *, vec_distance_L2(embedding, ?) AS similarity\n    FROM memories\n    WHERE type = ?\n  `;\n\n  if (params.unique) {\n    sql += \" AND `unique` = 1\";\n  }\n\n  sql += ` ORDER BY similarity ASC LIMIT ?`;\n\n  const memories = this.db.prepare(sql).all(...queryParams);\n\n  return memories.map(memory => ({\n    ...memory,\n    content: JSON.parse(memory.content),\n    similarity: memory.similarity\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Schema Migration - SQL\nDESCRIPTION: This SQL snippet includes the schema definition for the memories table in PostgreSQL, detailing the fields and their types necessary for the Eliza application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\n-- migrations/20240318103238_remote_schema.sql\nCREATE TABLE memories (\n  id UUID PRIMARY KEY,\n  type TEXT NOT NULL,\n  content JSONB NOT NULL,\n  embedding vector(1536),\n  \"userId\" UUID NOT NULL,\n  \"roomId\" UUID NOT NULL,\n  \"agentId\" UUID NOT NULL,\n  \"unique\" BOOLEAN DEFAULT FALSE,\n  \"createdAt\" TIMESTAMP NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting ElizaOS Service\nDESCRIPTION: Commands for checking service status and viewing logs to troubleshoot issues with the ElizaOS deployment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# Check service status\nsudo systemctl status eliza\n\n# View service logs with journald\nsudo journalctl -u eliza -f\n```\n\n----------------------------------------\n\nTITLE: Defining Handler Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for a handler function that processes messages asynchronously. Takes an agent runtime instance, memory object, optional state, options and callback parameters, and returns a Promise of unknown type.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Handler.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nHandler: (runtime: IAgentRuntime, message: Memory, state?: State, options?, callback?: HandlerCallback) => Promise<unknown>\n```\n\n----------------------------------------\n\nTITLE: Accessing Services in the Agent Runtime\nDESCRIPTION: This example shows how to access specialized services like speech generation and PDF processing through the runtime's service system, which provides standardized interfaces for cross-platform functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/agents.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Speech Generation\nconst speechService = runtime.getService<ISpeechService>(\n    ServiceType.SPEECH_GENERATION\n);\nconst audioStream = await speechService.generate(runtime, text);\n\n// PDF Processing\nconst pdfService = runtime.getService<IPdfService>(ServiceType.PDF);\nconst textContent = await pdfService.convertPdfToText(pdfBuffer);\n```\n\n----------------------------------------\n\nTITLE: Package.json with AgentConfig Section\nDESCRIPTION: Shows the required agentConfig section in a plugin's package.json. This section defines the plugin type and parameters, which are used by ElizaOS to validate and configure the plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@elizaos/plugin-example\",\n  \"version\": \"1.0.0\",\n  \"agentConfig\": {\n    \"pluginType\": \"elizaos:plugin:1.0.0\",\n    \"pluginParameters\": {\n      \"API_KEY\": {\n        \"type\": \"string\",\n        \"description\": \"API key for the service\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Caching Setup - TypeScript\nDESCRIPTION: This snippet demonstrates how to enable memory caching for database operations in Eliza, optimizing performance by reducing redundant database queries.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Enable memory caching\nconst memory = new MemoryManager({\n    runtime,\n    tableName: \"messages\",\n    cacheSize: 1000,\n    cacheTTL: 3600,\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Goals as String in TypeScript\nDESCRIPTION: Function signature for formatGoalsAsString which takes an object with a goals parameter (an array of Goal objects) and returns a string representation of those goals.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatGoalsAsString.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformatGoalsAsString(__namedParameters): string\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Types in TypeScript\nDESCRIPTION: Demonstrates implementing different plugin types including a Discord client, a PostgreSQL adapter, and a browser plugin with PDF service. Each example shows how to structure the plugin definition.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Client example\nconst discordPlugin: Plugin = {\n  name: \"discord\",\n  description: \"Discord client plugin\",\n  clients: [DiscordClientInterface]\n};\n\n// Adapter example\nconst postgresPlugin: Plugin = {\n  name: \"postgres\",\n  description: \"PostgreSQL database adapter\",\n  adapters: [PostgresDatabaseAdapter]\n};\n\n// Adapter example\nexport const browserPlugin = {\n name: \"default\",\n description: \"Pdf\",\n services: [PdfService],\n actions: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Using composeContext with a Dynamic Template Function in TypeScript\nDESCRIPTION: This example shows how to use composeContext with a template function that dynamically generates the template string. The function randomly selects between different tones for the message while still using placeholders for state values.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/composeContext.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using composeContext with a template function for dynamic template\nconst template = ({ state }) => {\nconst tone = Math.random() > 0.5 ? \"kind\" : \"rude\";\n  return `Hello, {{userName}}! You are {{userAge}} years old. Be ${tone}`;\n};\nconst contextSimple = composeContext({ state, template });\n```\n\n----------------------------------------\n\nTITLE: Defining ModelProviderName Enumeration in TypeScript\nDESCRIPTION: This enumeration defines string constants for various AI model providers supported by the elizaOS platform. It includes providers like OpenAI, Anthropic, Google, and many others. The enumeration is likely used throughout the codebase to specify which model provider to use for different operations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/ModelProviderName.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum ModelProviderName {\n  OPENAI = \"openai\",\n  ETERNALAI = \"eternalai\",\n  ANTHROPIC = \"anthropic\",\n  GROK = \"grok\",\n  GROQ = \"groq\",\n  LLAMACLOUD = \"llama_cloud\",\n  TOGETHER = \"together\",\n  LLAMALOCAL = \"llama_local\",\n  LMSTUDIO = \"lmstudio\",\n  GOOGLE = \"google\",\n  MISTRAL = \"mistral\",\n  CLAUDE_VERTEX = \"claude_vertex\",\n  REDPILL = \"redpill\",\n  OPENROUTER = \"openrouter\",\n  OLLAMA = \"ollama\",\n  HEURIST = \"heurist\",\n  GALADRIEL = \"galadriel\",\n  FAL = \"falai\",\n  GAIANET = \"gaianet\",\n  ALI_BAILIAN = \"ali_bailian\",\n  VOLENGINE = \"volengine\",\n  NANOGPT = \"nanogpt\",\n  HYPERBOLIC = \"hyperbolic\",\n  VENICE = \"venice\",\n  NVIDIA = \"nvidia\",\n  NINETEEN_AI = \"nineteen_ai\",\n  AKASH_CHAT_API = \"akash_chat_api\",\n  LIVEPEER = \"livepeer\",\n  LETZAI = \"letzai\",\n  DEEPSEEK = \"deepseek\",\n  INFERA = \"infera\",\n  BEDROCK = \"bedrock\",\n  ATOMA = \"atoma\",\n  SECRETAI = \"secret_ai\",\n  NEARAI = \"nearai\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Cleanup for Maintenance\nDESCRIPTION: Function that performs cleanup of old memories based on specified criteria. Demonstrates how to exclude certain memory types and perform batched cleanup operations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Implement regular cleanup\nasync function cleanupOldMemories(runtime: AgentRuntime) {\n    const result = await runtime.messageManager.cleanup({\n        olderThan: '30d',\n        excludeTypes: ['critical', 'permanent'],\n        batchSize: 1000\n    });\n    \n    console.log(`Cleaned up ${result.count} memories`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Speech Service in Eliza\nDESCRIPTION: Shows how to create a custom SpeechService that implements text-to-speech capabilities. The service checks for ElevenLabs API key availability and falls back to an alternative synthesis engine if not found.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass SpeechService extends Service implements ISpeechService {\n    async generate(runtime: IAgentRuntime, text: string): Promise<Readable> {\n        if (runtime.getSetting(\"ELEVENLABS_XI_API_KEY\")) {\n            return textToSpeech(runtime, text);\n        }\n\n        const { audio } = await synthesize(text, {\n            engine: \"vits\",\n            voice: \"en_US-hfc_female-medium\",\n        });\n\n        return Readable.from(audio);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Management Class - TypeScript\nDESCRIPTION: Class definition in TypeScript for managing memory within the Eliza application, incorporating cleanup logic when cache exceeds defined limits.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass MemoryManager {\n    private cache = new Map();\n    private maxSize = 1000;\n\n    async cleanup() {\n        if (this.cache.size > this.maxSize) {\n            // Implement cleanup logic\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory System Logging\nDESCRIPTION: Configuration object for memory system logging. Sets the log level, components to log, output format, and log file destination for monitoring the memory system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst logging = {\n    level: 'debug',\n    components: ['memory', 'rag', 'embedding'],\n    format: 'json',\n    destination: './logs/memory.log'\n};\n```\n\n----------------------------------------\n\nTITLE: Searching Memories by Embedding in TypeScript\nDESCRIPTION: Defines the searchMemoriesByEmbedding method for finding memories based on an embedding vector and search options.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nsearchMemoriesByEmbedding(embedding: number[], opts: {\n  match_threshold?: number;\n  count?: number;\n  roomId: `${string}-${string}-${string}-${string}-${string}`;\n  unique?: boolean;\n}): Promise<Memory[]>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Direct Client in TypeScript\nDESCRIPTION: Code snippet for initializing the Direct client interface in an elizaOS project. This client provides a REST API interface for custom integrations and is started with the runtime instance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectClientInterface } from \"@elizaos/client-direct\";\n\n// Initialize client\nconst client = await DirectClientInterface.start(runtime);\n```\n\n----------------------------------------\n\nTITLE: Defining Models Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that defines an object containing model configurations for multiple AI providers. Each provider property references the Model interface, allowing for consistent model configuration structures across different AI services.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Models.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Models = {\n  openai: Model;\n  eternalai: Model;\n  anthropic: Model;\n  grok: Model;\n  groq: Model;\n  llama_cloud: Model;\n  together: Model;\n  llama_local: Model;\n  lmstudio: Model;\n  google: Model;\n  mistral: Model;\n  claude_vertex: Model;\n  redpill: Model;\n  openrouter: Model;\n  ollama: Model;\n  heurist: Model;\n  galadriel: Model;\n  falai: Model;\n  gaianet: Model;\n  ali_bailian: Model;\n  volengine: Model;\n  nanogpt: Model;\n  hyperbolic: Model;\n  venice: Model;\n  nvidia: Model;\n  nineteen_ai: Model;\n  akash_chat_api: Model;\n  livepeer: Model;\n  deepseek: Model;\n  infera: Model;\n  bedrock: Model;\n  atoma: Model;\n  secret_ai: Model;\n  nearai: Model;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ITeeLogService Interface in TypeScript\nDESCRIPTION: Defines the ITeeLogService interface which extends the Service class. It includes a getter for serviceType, an abstract initialize method, and methods for getting an instance and logging messages.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ITeeLogService.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ITeeLogService extends Service {\n  get serviceType(): ServiceType;\n\n  initialize(runtime: IAgentRuntime): Promise<void>;\n\n  getInstance(): ITeeLogService;\n\n  log(agentId: string, roomId: string, userId: string, type: string, content: string): Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Contract Method using Coinbase Plugin in TypeScript\nDESCRIPTION: This code demonstrates how to invoke a method on a deployed smart contract using the INVOKE_CONTRACT action of the Coinbase Token Contract plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"INVOKE_CONTRACT\", {\n  contractAddress: \"0x123...\",\n  method: \"transfer\",\n  abi: [...],\n  args: {\n    to: \"0x456...\",\n    amount: \"1000000000000000000\"\n  },\n  network: \"base\"\n});\n```\n\n----------------------------------------\n\nTITLE: Media Processing Interface for Eliza Clients\nDESCRIPTION: TypeScript interface definition for media processing functionality common to all elizaOS clients. It defines methods for processing different types of media including images, videos, and audio files.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MediaProcessor {\n    processImage(image: Image): Promise<ProcessedImage>;\n    processVideo(video: Video): Promise<ProcessedVideo>;\n    processAudio(audio: Audio): Promise<ProcessedAudio>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data from Deva API\nDESCRIPTION: Method implementation for retrieving personal user data from the Deva API. It makes a GET request to the persona endpoint with the proper authorization headers and returns the user's Deva persona information.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\npublic async getMe(): Promise<DevaPersona | null> {\n    return await fetch(`${this.apiBaseUrl}/persona`, {\n\t\t    headers: { ...this.defaultHeaders },\n    })\n        .then((res) => res.json())\n        .catch(() => null);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Management Properties\nDESCRIPTION: Property definitions for various memory managers that handle messages, descriptions, lore, documents and knowledge within the agent runtime system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmessageManager: IMemoryManager;\ndescriptionManager: IMemoryManager;\nloreManager: IMemoryManager;\ndocumentsManager: IMemoryManager;\nknowledgeManager: IMemoryManager;\n```\n\n----------------------------------------\n\nTITLE: Defining Action Interface in TypeScript\nDESCRIPTION: This code defines the core interface for Actions in ElizaOS, specifying the required properties such as name, similes, description, examples, handler, validate function, and optional suppressInitialMessage flag.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/actions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Action {\n    name: string;\n    similes: string[];\n    description: string;\n    examples: ActionExample[][];\n    handler: Handler;\n    validate: Validator;\n    suppressInitialMessage?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Style Guidelines Configuration for elizaOS Character Files in JSON\nDESCRIPTION: Structure for defining interaction patterns across different contexts. Includes general style rules that apply to all interactions, plus specific guidelines for chat conversations and social media posts.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/characterfile.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"style\": {\n        \"all\": [                     // Applied to all interactions\n            \"Keep responses clear\",\n            \"Maintain professional tone\"\n        ],\n        \"chat\": [                    // Chat-specific style\n            \"Engage with curiosity\",\n            \"Provide explanations\"\n        ],\n        \"post\": [                    // Social post style\n            \"Keep posts informative\",\n            \"Focus on key points\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Extensions\nDESCRIPTION: This SQL snippet sets up necessary extensions for vector operations in PostgreSQL. Dependencies include the PostgreSQL database with the ability to install extensions. It creates 'vector' and 'fuzzystrmatch' extensions if they do not already exist to support advanced vector and string matching capabilities.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/database.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE EXTENSION IF NOT EXISTS vector;\nCREATE EXTENSION IF NOT EXISTS fuzzystrmatch;\n```\n\n----------------------------------------\n\nTITLE: Provider-Evaluator Loop Concept\nDESCRIPTION: Demonstrates the core mechanism for dynamically gathering information through agent interactions, involving cache checking, information extraction, and action triggering\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/part3.md#2025-04-16_snippet_0\n\nLANGUAGE: Pseudocode\nCODE:\n```\nprovider: check_cache()\nif missing_information:\n    agent.request_extraction()\nevaluator: extract_information()\nif all_data_collected:\n    trigger_completion_action()\n```\n\n----------------------------------------\n\nTITLE: Creating Memory Interface - TypeScript\nDESCRIPTION: This code defines the Memory interface for the Eliza application, detailing the structure of a memory object, including its attributes such as id, content, userId, and timestamps.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Memory {\n    id: UUID;\n    content: {\n        text: string;\n        attachments?: Attachment[];\n    };\n    embedding?: number[];\n    userId: UUID;\n    roomId: UUID;\n    agentId: UUID;\n    createdAt: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up PostgreSQL Adapter - TypeScript\nDESCRIPTION: This snippet showcases how to configure the PostgreSQL adapter in Eliza, including connection settings such as connection string and connection pool parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PostgresDatabaseAdapter } from \"@eliza/adapter-postgres\";\n\nconst db = new PostgresDatabaseAdapter({\n    connectionString: process.env.DATABASE_URL,\n    // Optional connection pool settings\n    max: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000,\n});\n```\n\n----------------------------------------\n\nTITLE: Message Processing with Error Handling in TypeScript\nDESCRIPTION: Implements robust message processing with specific error handling for format issues. This method catches and handles format-specific errors while allowing other errors to propagate.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nasync processMessage(message) {\n\ttry {\n\t\treturn await this.messageProcessor(message);\n\t} catch (error) {\n\t\tif (error.code === \"INVALID_FORMAT\") {\n\t\t\treturn this.handleInvalidFormat(message);\n\t\t}\n\t\tthrow error;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in Plugin Runtime\nDESCRIPTION: Shows how a plugin can access its configuration through the ElizaOS runtime. This demonstrates the initialization method and how to retrieve API keys and secrets.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyPlugin implements Plugin {\n  async initialize(runtime: AgentRuntime) {\n    const apiKey = runtime.getSetting(\"PLUGIN_API_KEY\");\n    const secret = runtime.getSetting(\"PLUGIN_SECRET\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Style Configuration in JSON\nDESCRIPTION: Style object defining behavior patterns across different contexts: general, chat, and posts. Each section contains instructions that guide the character's communication style and ensures consistency across platforms.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"style\": {\n  \"all\": [\"maintain technical accuracy\", \"be approachable and clear\"],\n  \"chat\": [\"ask clarifying questions\", \"provide examples when helpful\"],\n  \"post\": [\"share insights concisely\", \"focus on practical applications\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Service Class Definition - TypeScript\nDESCRIPTION: A TypeScript class template for creating a custom service that extends the base Service functionality, with initialization and processing methods.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomService extends Service {\n    static serviceType = ServiceType.CUSTOM;\n\n    async initialize() {\n        // Setup code\n    }\n\n    async process(input: any): Promise<any> {\n        // Service logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Vector Indexes for Memory Optimization\nDESCRIPTION: SQL commands for creating indexes in PostgreSQL to optimize vector searches and common memory queries. Uses the ivfflat index for vector cosine similarity operations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- PostgreSQL vector indexing\nCREATE INDEX idx_memory_embedding ON memories \nUSING ivfflat (embedding vector_cosine_ops)\nWITH (lists = 100);\n\n-- Composite index for common queries\nCREATE INDEX idx_memory_metadata ON memories (user_id, room_id, created_at);\n```\n\n----------------------------------------\n\nTITLE: Plugin Loading Troubleshooting in TypeScript\nDESCRIPTION: Code snippet for troubleshooting plugin loading issues by checking if plugins are loaded correctly and dynamically importing them if needed. Useful for diagnosing plugin configuration problems.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// Check if plugins are loaded correctly\nif (character.plugins) {\n    console.log(\"Plugins are: \", character.plugins);\n    const importedPlugins = await Promise.all(\n        character.plugins.map(async (plugin) => {\n            const importedPlugin = await import(plugin);\n            return importedPlugin;\n        }),\n    );\n    character.plugins = importedPlugins;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Messages in TypeScript with @elizaos/core\nDESCRIPTION: This function converts an array of Memory objects and Actor objects into a formatted string representation. It accepts a parameters object with 'messages' array of Memory objects and 'actors' array of Actor objects, and returns the formatted message string.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatMessages.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nformatMessages(`__namedParameters`): `string`\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Relationships in TypeScript\nDESCRIPTION: The getRelationship function retrieves the relationship between two users in the elizaOS system. It requires the agent runtime and two user IDs formatted as UUIDs, and returns a Promise that resolves to a Relationship object.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getRelationship.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRelationship({ \n  runtime: IAgentRuntime, \n  userA: `${string}-${string}-${string}-${string}-${string}`, \n  userB: `${string}-${string}-${string}-${string}-${string}` \n}): Promise<Relationship>\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to Character JSON Configuration\nDESCRIPTION: JSON configuration example showing how to specify plugins for an Eliza agent in the character configuration file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@elizaos/plugin-name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Token Provider in TypeScript\nDESCRIPTION: Manages token information, market data retrieval, and caching with 5-minute cache duration. Provides methods to fetch token prices and process token data including security and trade insights.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/autonomous-trading.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TokenProvider {\n    constructor(\n        private tokenAddress: string,\n        private walletProvider: WalletProvider,\n    ) {\n        this.cache = new NodeCache({ stdTTL: 300 }); // 5 minutes cache\n    }\n\n    async fetchPrices(): Promise<Prices> {\n        const { SOL, BTC, ETH } = TOKEN_ADDRESSES;\n        // Fetch current prices\n        return {\n            solana: { usd: \"0\" },\n            bitcoin: { usd: \"0\" },\n            ethereum: { usd: \"0\" },\n        };\n    }\n\n    async getProcessedTokenData(): Promise<ProcessedTokenData> {\n        return {\n            security: await this.fetchTokenSecurity(),\n            tradeData: await this.fetchTokenTradeData(),\n            holderDistributionTrend: await this.analyzeHolderDistribution(),\n            highValueHolders: await this.filterHighValueHolders(),\n            recentTrades: await this.checkRecentTrades(),\n            dexScreenerData: await this.fetchDexScreenerData(),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Adapter Initialization Examples in TypeScript\nDESCRIPTION: Implementation examples for initializing various database adapters in ElizaOS. Includes configuration examples for MongoDB, PostgreSQL, SQLite, and Supabase adapters with connection parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/database.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// MongoDB\nimport { MongoDBAdapter } from '@elizaos/adapter-mongodb';\nconst mongoAdapter = new MongoDBAdapter({\n    uri: process.env.MONGODB_URI,\n    dbName: process.env.MONGODB_DB_NAME\n});\n\n// PostgreSQL\nimport { PostgresAdapter } from '@elizaos/adapter-postgres';\nconst pgAdapter = new PostgresAdapter({\n    connectionString: process.env.POSTGRES_URI\n});\n\n// SQLite\nimport { SqliteDatabaseAdapter } from '@elizaos/adapter-sqlite';\nconst sqliteAdapter = new SqliteDatabaseAdapter('path/to/database.db');\n\n// Supabase\nimport { SupabaseAdapter } from '@elizaos/adapter-supabase';\nconst supabaseAdapter = new SupabaseAdapter({\n    url: process.env.SUPABASE_URL,\n    apiKey: process.env.SUPABASE_API_KEY\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Context Provider in Runtime\nDESCRIPTION: Method to register a context provider that supplies context for message generation. Adds the provider to the providers collection.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nregisterContextProvider(provider: Provider): void {\n  this.providers.push(provider);\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Data Upload to Irys\nDESCRIPTION: Method for uploading provider data to Irys with simplified parameters compared to worker upload.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IIrysService.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nproviderUploadDataOnIrys(data: any, dataType: IrysDataType, serviceCategory: string[], protocol: string[]): Promise<UploadIrysResult>\n```\n\n----------------------------------------\n\nTITLE: Custom Database Adapter Implementation - TypeScript\nDESCRIPTION: This snippet provides a template for creating a custom database adapter in Eliza by extending the existing DatabaseAdapter interface.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomDatabaseAdapter extends DatabaseAdapter {\n    async createMemory(memory: Memory, tableName: string): Promise<void> {\n        // Custom implementation\n    }\n\n    async getMemories(params: {\n        roomId: UUID;\n        count?: number;\n        unique?: boolean;\n    }): Promise<Memory[]> {\n        // Custom implementation\n    }\n\n    // Implement other required methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Structured Objects with AI Models in TypeScript\nDESCRIPTION: Function signature for generating structured objects using AI models. Takes GenerationOptions as input and returns a Promise containing generated objects. The function handles different AI providers and applies specified configuration options for object generation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateObject.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateObject(options: GenerationOptions): Promise<GenerateObjectResult<unknown>>\n```\n\n----------------------------------------\n\nTITLE: TypeScript State Interface Definition\nDESCRIPTION: Interface defining the state/context structure for conversations in elizaOS. Includes properties for user and agent IDs, biographical information, conversation details, messages history, and various optional data structures for actions, knowledge, and interactions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/State.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface State {\n  [key: string]: unknown;\n  userId?: `${string}-${string}-${string}-${string}-${string}`;\n  agentId?: `${string}-${string}-${string}-${string}-${string}`;\n  bio: string;\n  lore: string;\n  messageDirections: string;\n  postDirections: string;\n  roomId: `${string}-${string}-${string}-${string}-${string}`;\n  agentName?: string;\n  senderName?: string;\n  actors: string;\n  actorsData?: Actor[];\n  goals?: string;\n  goalsData?: Goal[];\n  recentMessages: string;\n  recentMessagesData: Memory[];\n  actionNames?: string;\n  actions?: string;\n  actionsData?: Action[];\n  actionExamples?: string;\n  providers?: string;\n  responseData?: Content;\n  recentInteractionsData?: Memory[];\n  recentInteractions?: string;\n  formattedConversation?: string;\n  knowledge?: string;\n  knowledgeData?: KnowledgeItem[];\n  ragKnowledgeData?: RAGKnowledgeItem[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Actor Interface in TypeScript\nDESCRIPTION: Defines the Actor interface with properties for name, username, details object (containing tagline, summary, and quote), and a unique identifier. This interface is used to represent participants in conversations within the elizaOS system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Actor.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Actor {\n  name: string;\n  username: string;\n  details: {\n    tagline: string;\n    summary: string;\n    quote: string;\n  };\n  id: `${string}-${string}-${string}-${string}-${string}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for message content that includes text, optional action, source, URL, reply reference, and media attachments. This interface is indexable with string keys and allows for dynamic property access.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Content {\n    [key: string]: unknown;\n    text: string;\n    action?: string;\n    source?: string;\n    url?: string;\n    inReplyTo?: `${string}-${string}-${string}-${string}-${string}`;\n    attachments?: Media[];\n}\n```\n\n----------------------------------------\n\nTITLE: Goal Management with Database Adapters\nDESCRIPTION: TypeScript code demonstrating goal management operations with database adapters in Eliza, including creating goals with objectives, updating goal status, and retrieving goals with filtering options.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Create goal\nawait db.createGoal({\n    id: uuid(),\n    roomId,\n    userId,\n    name: \"Complete task\",\n    status: GoalStatus.IN_PROGRESS,\n    objectives: [\n        { text: \"Step 1\", completed: false },\n        { text: \"Step 2\", completed: false },\n    ],\n});\n\n// Update goal status\nawait db.updateGoalStatus({\n    goalId,\n    status: GoalStatus.COMPLETED,\n});\n\n// Get active goals\nconst goals = await db.getGoals({\n    roomId,\n    userId,\n    onlyInProgress: true,\n    count: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Database Adapter\nDESCRIPTION: TypeScript code for initializing a Supabase database adapter in Eliza. The adapter requires Supabase URL and anonymous key from environment variables for authentication.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SupabaseDatabaseAdapter } from \"@elizaos/adapter-supabase\";\n\nconst db = new SupabaseDatabaseAdapter(\n    process.env.SUPABASE_URL!,\n    process.env.SUPABASE_ANON_KEY!,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Image Generation in TypeScript\nDESCRIPTION: Demonstrates how to use the image generation functionality in code, passing parameters like prompt, dimensions, and optional settings for customization.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await generateImage(\n    {\n        prompt: 'A cute anime girl with big breasts and straight long black hair wearing orange T-shirt.',\n        width: 1024,\n        height: 1024,\n        numIterations: 20, // optional\n        guidanceScale: 3, // optional\n        seed: -1, // optional\n        modelId: \"FLUX.1-dev\", // optional\n    },\n    runtime,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memories in TypeScript\nDESCRIPTION: Method to retrieve a list of memories by room ID with options for count and uniqueness filtering.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryManager.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync getMemories(opts: { roomId: string, count?: number, unique?: boolean, start?: number, end?: number }): Promise<Memory[]>\n```\n\n----------------------------------------\n\nTITLE: Searching for .env Files in TypeScript\nDESCRIPTION: A TypeScript function that recursively searches for the nearest .env file starting from a given directory, moving up through parent directories. Returns the full path to the found .env file or null if not found. This function is specific to Node.js environments.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/findNearestEnvFile.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfindNearestEnvFile(startDir?: string): string\n```\n\n----------------------------------------\n\nTITLE: Defining generateTextArray Function in TypeScript\nDESCRIPTION: This function sends a message to a model and parses the response as a string array. It takes options including runtime, context, and modelClass, and returns a Promise resolving to an array of strings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateTextArray.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngenerateTextArray(opts): Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Trust and Performance Metrics in TypeScript\nDESCRIPTION: This function monitors trust score changes and trading performance, triggering alerts on thresholds using TypeScript. It watches for trust delta and max drawdown breaches to notify appropriate risk handlers, ensuring prompt responses to critical incidents.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function monitorTrustMetrics(): Promise<void> {\n    // Monitor trust score changes\n    const scoreChanges = await getTrustScoreChanges();\n    for (const change of scoreChanges) {\n        if (Math.abs(change.delta) > TRUST_THRESHOLD) {\n            await notifyTrustChange(change);\n        }\n    }\n\n    // Monitor trading performance\n    const performanceMetrics = await getPerformanceMetrics();\n    for (const metric of performanceMetrics) {\n        if (metric.drawdown > MAX_DRAWDOWN) {\n            await notifyRiskAlert(metric);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Telegram Messages in TypeScript\nDESCRIPTION: Implementation of a Telegram Client class for handling Telegram messages. It processes incoming messages, generates responses, and sends them back to the appropriate chat.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass TelegramClient {\n    async handleMessage(message) {\n        // Process message content\n        const content = await this.processMessage(message);\n\n        // Generate response\n        const response = await this.generateResponse(content);\n\n        // Send response\n        await this.sendMessage(message.chat.id, response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling AI Generation with Provider Configuration in TypeScript\nDESCRIPTION: Function signature for handleProvider that processes AI generation requests based on provider-specific options. It accepts a ProviderOptions parameter and returns a Promise containing GenerationResult objects.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/handleProvider.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**handleProvider**(`options`): `Promise`<`GenerationResult`>\n```\n\n----------------------------------------\n\nTITLE: Creating Data Providers in Eliza Framework\nDESCRIPTION: This snippet demonstrates how to implement a provider that supplies contextual information to an agent. The provider's get method retrieves and formats data based on the runtime and message context to help the agent make informed decisions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/overview.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataProvider: Provider = {\n    get: async (runtime: IAgentRuntime, message: Memory) => {\n        // Fetch and format data\n        return \"Formatted context string\";\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Validating When to Trigger Reflection in Fact Evaluator\nDESCRIPTION: This function determines when the Fact Evaluator should be triggered to reflect on conversation history. It calculates the appropriate timing based on message count and conversation length, triggering reflection approximately every half of the conversation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/fact-evaluator.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvalidate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n    const messageCount = await runtime.messageManager.countMemories(message.roomId);\n    const reflectionCount = Math.ceil(runtime.getConversationLength() / 2);\n    return messageCount % reflectionCount === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Resources in Eliza\nDESCRIPTION: Shows how to create a ResourceManager class for handling acquisition and release of resources with proper cleanup. Can be used for managing connections, file handles, and other limited resources.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass ResourceManager {\n    private resources: Map<string, Resource> = new Map();\n\n    async acquire(id: string): Promise<Resource> {\n        // Implement resource acquisition with timeout\n    }\n\n    async release(id: string): Promise<void> {\n        // Implement resource cleanup\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for cleanJsonResponse in TypeScript\nDESCRIPTION: The function signature for cleanJsonResponse which takes a raw JSON-like string and returns a cleaned version ready for parsing. This function removes unnecessary markers, line breaks, and extra whitespace from improperly formatted JSON responses.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/cleanJsonResponse.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**cleanJsonResponse**(`response`): `string`\n```\n\n----------------------------------------\n\nTITLE: Formatting Evaluator Examples in TypeScript\nDESCRIPTION: A function that takes an array of Evaluator objects and formats their examples into a readable string format. It processes examples by replacing placeholders with generated names and structures the output to show context, messages, and outcomes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatEvaluatorExamples.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformatEvaluatorExamples(evaluators: Evaluator[]): string\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in Character JSON File\nDESCRIPTION: This JSON example shows how to configure plugins for an agent through the characterfile settings, specifying which ElizaOS plugins to include for extending the agent's functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/agents.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"MyAgent\",\n  \"plugins\": [\n    \"@elizaos/plugin-solana\",\n    \"@elizaos/plugin-twitter\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Room Information in ElizaOS (TypeScript)\nDESCRIPTION: Functions for retrieving and managing room data, including getting room details, creating rooms, and removing rooms. These operations return Promises with room IDs or void results.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IDatabaseAdapter.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRoom(roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<`${string}-${string}-${string}-${string}-${string}`>\n\ncreateRoom(roomId?: `${string}-${string}-${string}-${string}-${string}`): Promise<`${string}-${string}-${string}-${string}-${string}`>\n\nremoveRoom(roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the State Interface for Agent Context Management\nDESCRIPTION: This snippet defines the State interface used by the AgentRuntime to maintain contextual information, including core identifiers, character details, conversation context, and knowledge management components.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/agents.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface State {\n    // Core identifiers\n    userId?: UUID;\n    agentId?: UUID;\n    roomId: UUID;\n\n    // Character information\n    bio: string;\n    lore: string;\n    messageDirections: string;\n    postDirections: string;\n\n    // Conversation context\n    actors: string;\n    actorsData?: Actor[];\n    recentMessages: string;\n    recentMessagesData: Memory[];\n\n    // Goals and knowledge\n    goals?: string;\n    goalsData?: Goal[];\n    knowledge?: string;\n    knowledgeData?: KnowledgeItem[];\n    ragKnowledgeData?: RAGKnowledgeItem[];\n}\n\n// State management methods\nasync function manageState() {\n    // Initial state composition\n    const state = await runtime.composeState(message, {\n        additionalContext: \"custom context\"\n    });\n\n    // Update state with new messages\n    const updatedState = await runtime.updateRecentMessageState(state);\n}\n```\n\n----------------------------------------\n\nTITLE: Access Control for Secrets in TypeScript\nDESCRIPTION: Implements access control logic in the SecretAccess class to validate access requests for secrets, preventing unauthorized access to sensitive information.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecretAccess {\n    private static readonly ALLOWED_KEYS = [\n        \"OPENAI_API_KEY\",\n        \"DISCORD_TOKEN\",\n        // ... other allowed keys\n    ];\n\n    static validateAccess(key: string): boolean {\n        return this.ALLOWED_KEYS.includes(key);\n    }\n\n    static async getSecret(\n        runtime: IAgentRuntime,\n        key: string,\n    ): Promise<string | null> {\n        if (!this.validateAccess(key)) {\n            throw new Error(`Unauthorized access to secret: ${key}`);\n        }\n\n        return runtime.getSetting(key);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Model Settings for Eliza\nDESCRIPTION: Shows how to create and use advanced model configuration with various parameters like temperature, token limits, and penalty settings for improved text generation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst modelConfig = {\n    modelClass: ModelClass.LARGE,\n    temperature: 0.7,\n    maxTokens: 2000,\n    topP: 0.9,\n    frequencyPenalty: 0.5,\n    presencePenalty: 0.5,\n};\n\nconst response = await generateText({\n    runtime,\n    context: prompt,\n    ...modelConfig,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Types\nDESCRIPTION: TypeScript interfaces for NASA API responses, including APOD (Astronomy Picture of the Day) and Mars Rover photo data structures.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ApodResponse {\n    url: string;\n    title: string;\n    explanation: string;\n    date: string;\n}\n\ninterface MarsRoverResponse {\n    photos: Array<{\n        img_src: string;\n        earth_date: string;\n        camera: {\n            name: string;\n        }\n    }>;\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Vector Search Implementation\nDESCRIPTION: TypeScript implementation of vector search in the PostgreSQL database adapter using pgvector extension. The method searches for memories by embedding vector similarity with various filtering options and threshold-based matching.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// PostgreSQL vector search\nasync searchMemoriesByEmbedding(\n  embedding: number[],\n  params: {\n    match_threshold?: number;\n    count?: number;\n    roomId?: UUID;\n    unique?: boolean;\n    tableName: string;\n  }\n): Promise<Memory[]> {\n  const client = await this.pool.connect();\n  try {\n    let sql = `\n      SELECT *,\n      1 - (embedding <-> $1::vector) as similarity\n      FROM memories\n      WHERE type = $2\n    `;\n\n    const values: any[] = [\n      `[${embedding.join(\",\")}]`,\n      params.tableName\n    ];\n\n    if (params.unique) {\n      sql += ` AND \"unique\" = true`;\n    }\n\n    if (params.roomId) {\n      sql += ` AND \"roomId\" = $3::uuid`;\n      values.push(params.roomId);\n    }\n\n    if (params.match_threshold) {\n      sql += ` AND 1 - (embedding <-> $1::vector) >= $4`;\n      values.push(params.match_threshold);\n    }\n\n    sql += ` ORDER BY embedding <-> $1::vector`;\n\n    if (params.count) {\n      sql += ` LIMIT $5`;\n      values.push(params.count);\n    }\n\n    const { rows } = await client.query(sql, values);\n    return rows.map(row => ({\n      ...row,\n      content: typeof row.content === \"string\"\n        ? JSON.parse(row.content)\n        : row.content,\n      similarity: row.similarity\n    }));\n  } finally {\n    client.release();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing generateScopedId Method in IRAGKnowledgeManager Interface\nDESCRIPTION: Defines the generateScopedId method which generates a scoped ID based on a path and shared status.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IRAGKnowledgeManager.md#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngenerateScopedId(path: string, isShared: boolean): `${string}-${string}-${string}-${string}-${string}`;\n```\n\n----------------------------------------\n\nTITLE: Custom Action Development - TypeScript\nDESCRIPTION: Defines a custom action for a plugin in TypeScript, including validation and handling methods to execute specific tasks in response to user interactions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// plugins/my-plugin/src/actions/myAction.ts\nexport const myAction: Action = {\n    name: \"MY_ACTION\",\n    similes: [\"SIMILAR_ACTION\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        return true;\n    },\n    handler: async (runtime: IAgentRuntime, message: Memory) => {\n        // Implementation\n        return true;\n    },\n    examples: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Verified Inference Call History via API\nDESCRIPTION: This JavaScript code fetches the history of verified inference calls from the Galadriel API. It sends a GET request to the specified URL with an authorization header containing the Galadriel API key.  The response is then parsed as JSON and logged to the console.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/verified-inference.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = 'https://api.galadriel.com/v1/verified/chat/completions?limit=100&filter=mine';\nconst headers = {\n'accept': 'application/json',\n'Authorization': 'Bearer <GALADRIEL_API_KEY>'// Replace with your Galadriel API key\n};\n\nconst response = await fetch(url, { method: 'GET', headers });\nconst data = await response.json();\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Token Performance Analysis via TypeScript Interface\nDESCRIPTION: This code snippet provides an interface to track and analyze token performance metrics, crucial for trust evaluations. It specifies dependencies like token address and flags for scam checks, and describes the properties like liquidity and market cap change. Implemented in TypeScript.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TokenPerformance {\n    tokenAddress: string;\n    priceChange24h: number;\n    volumeChange24h: number;\n    trade_24h_change: number;\n    liquidity: number;\n    liquidityChange24h: number;\n    holderChange24h: number;\n    rugPull: boolean;\n    isScam: boolean;\n    marketCapChange24h: number;\n    sustainedGrowth: boolean;\n    rapidDump: boolean;\n    suspiciousVolume: boolean;\n    validationTrust: number;\n    lastUpdated: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mars Rover Photo Action\nDESCRIPTION: TypeScript implementation of the action that retrieves Mars Rover photos, including validation and handler functions that interact with the NASA API.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Action, IAgentRuntime } from \"@elizaos/core\";\n\nexport const getMarsRoverPhoto: Action = {\n    name: \"NASA_GET_MARS_PHOTO\",\n    similes: [\"SHOW_MARS_PICTURE\"],\n    description: \"Fetches a photo from Mars rovers\",\n    \n    validate: async (runtime: IAgentRuntime) => {\n        return validateNasaConfig(runtime);\n    },\n    \n    handler: async (runtime: IAgentRuntime, state: any, callback: any) => {\n        const data = await getNasaService(runtime).getMarsRoverPhoto();\n        await callback(`Here's a photo from Mars rover ${data.rover}...`);\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in TypeScript\nDESCRIPTION: A function that loads environment variables from .env files in Node.js environments or returns configured settings in browser environments. Returns a Settings object and throws an error if no .env file is found in Node.js.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/loadEnvConfig.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loadEnvConfig(): Settings\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin CLI Tool\nDESCRIPTION: Shows the usage and commands available in the ElizaOS plugin CLI tool. This tool provides commands for listing, adding, and removing plugins.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUsage: elizaos plugins [options] [command]\n\nmanage elizaOS plugins\n\nOptions:\n  -h, --help              display help for command\n\nCommands:\n  list|l [options]        list available plugins\n  add|install <plugin>    add a plugin\n  remove|delete <plugin>  remove a plugin\n  help [command]          display help for command\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Settings in TypeScript\nDESCRIPTION: Defines runtime settings for fine-tuning Eliza's behavior, including logging configuration, performance parameters, and memory management settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst settings = {\n    // Logging\n    DEBUG: \"eliza:*\",\n    LOG_LEVEL: \"info\",\n\n    // Performance\n    MAX_CONCURRENT_REQUESTS: 5,\n    REQUEST_TIMEOUT: 30000,\n\n    // Memory\n    MEMORY_TTL: 3600,\n    MAX_MEMORY_ITEMS: 1000,\n};\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection Pool Implementation\nDESCRIPTION: Implements connection pooling for PostgreSQL with configuration for max connections, idle timeout, and error handling.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(connectionConfig: any) {\n  super();\n  this.pool = new Pool({\n    ...connectionConfig,\n    max: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000\n  });\n\n  this.pool.on(\"error\", (err) => {\n    console.error(\"Unexpected error on idle client\", err);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Management Function in TypeScript\nDESCRIPTION: Function that ensures a user exists in the system with the specified ID and name. Optional parameters include email and source.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nensureUserExists(userId: `${string}-${string}-${string}-${string}-${string}`, userName: string, name: string, email?: string, source?: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceType Enumeration in TypeScript\nDESCRIPTION: This code snippet defines the ServiceType enumeration, which includes various service types used in the elizaOS core package. Each enum member is assigned a string value representing the service type.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/ServiceType.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum ServiceType {\n  IMAGE_DESCRIPTION = \"image_description\",\n  TRANSCRIPTION = \"transcription\",\n  VIDEO = \"video\",\n  TEXT_GENERATION = \"text_generation\",\n  BROWSER = \"browser\",\n  SPEECH_GENERATION = \"speech_generation\",\n  PDF = \"pdf\",\n  INTIFACE = \"intiface\",\n  AWS_S3 = \"aws_s3\",\n  BUTTPLUG = \"buttplug\",\n  SLACK = \"slack\",\n  VERIFIABLE_LOGGING = \"verifiable_logging\",\n  IRYS = \"irys\",\n  TEE_LOG = \"tee_log\",\n  GOPLUS_SECURITY = \"goplus_security\",\n  WEB_SEARCH = \"web_search\",\n  EMAIL_AUTOMATION = \"email_automation\",\n  NKN_CLIENT_SERVICE = \"nkn_client_service\"\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating and Querying RAG Knowledge Base\nDESCRIPTION: TypeScript code for loading knowledge into the RAG knowledge manager and querying it. Demonstrates how to configure chunk size, supported file types, and search parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Load and index knowledge\nawait runtime.ragKnowledgeManager.loadKnowledge({\n    path: './knowledge',\n    types: ['markdown', 'text'],\n    chunkSize: 1000\n});\n\n// Query knowledge base\nconst context = await runtime.ragKnowledgeManager.search(query, {\n    maxResults: 5,\n    minScore: 0.7\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AgentRuntime Properties\nDESCRIPTION: Core property definitions for AgentRuntime including agentId, serverUrl, token, actions, evaluators, providers and various managers for handling different aspects of the agent's functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nagentId: `${string}-${string}-${string}-${string}-${string}`;\nserverUrl: string = \"http://localhost:7998\";\ndatabaseAdapter: IDatabaseAdapter;\ntoken: string;\nactions: Action[] = [];\nevaluators: Evaluator[] = [];\nproviders: Provider[] = [];\n```\n\n----------------------------------------\n\nTITLE: Secure Error Handling - TypeScript\nDESCRIPTION: This snippet demonstrates how to handle errors without exposing sensitive API keys in logs, ensuring security best practices.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/secrets-management.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const apiKey = runtime.getSetting(\"API_KEY\");\n  // Use API key...\n} catch (error) {\n  // Log without exposing the secret\n  console.error(\"Error using API:\", error.message);\n  // Don't log the actual API key!\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json for Custom Plugin Dependency\nDESCRIPTION: Shows how to add a custom plugin as a workspace dependency in package.json. This allows using local plugins that are not in the official registry.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@elizaos/plugin-example\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Plugin in TypeScript\nDESCRIPTION: Demonstrates the structure for creating a new custom plugin by implementing the Plugin interface in ElizaOS.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugin, Action, Evaluator, Provider } from \"@elizaos/core\";\n\nconst myCustomPlugin: Plugin = {\n    name: \"my-custom-plugin\",\n    description: \"Adds custom functionality\",\n    actions: [\n        /* custom actions */\n    ],\n    evaluators: [\n        /* custom evaluators */\n    ],\n    providers: [\n        /* custom providers */\n    ],\n    services: [\n        /* custom services */\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Options in JSON\nDESCRIPTION: This JSON snippet defines various template options that can be preset in a character's JSON file. Each template controls different aspects of the character's interaction model, from response triggers to message handling across multiple platforms. These configurations allow for tailored behavior based on specific requirements and integration needs.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/template-configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"templates\": {\n        \"goalsTemplate\": \"\", // Define character goals\n        \"factsTemplate\": \"\", // Specify character knowledge\n        \"messageHandlerTemplate\": \"\", // Handle general messages\n        \"shouldRespondTemplate\": \"\", // Control response triggers\n        \"continueMessageHandlerTemplate\": \"\", // Manage conversation flow\n        \"evaluationTemplate\": \"\", // Handle response evaluation\n        \"twitterSearchTemplate\": \"\", // Process Twitter searches\n        \"twitterPostTemplate\": \"\", // Format Twitter posts\n        \"twitterMessageHandlerTemplate\": \"\", // Handle Twitter messages\n        \"twitterShouldRespondTemplate\": \"\", // Control Twitter responses\n        \"telegramMessageHandlerTemplate\": \"\", // Handle Telegram messages\n        \"telegramShouldRespondTemplate\": \"\", // Control Telegram responses\n        \"discordVoiceHandlerTemplate\": \"\", // Manage Discord voice\n        \"discordShouldRespondTemplate\": \"\", // Control Discord responses\n        \"discordMessageHandlerTemplate\": \"\" // Handle Discord messages\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Twitter Data Processing Script\nDESCRIPTION: Script for generating knowledge JSON files from Twitter data, used for character profiles and contributor metadata within the Eliza project ecosystem.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-contributors/chat_2024-11-21.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntweets2character.js\n```\n\n----------------------------------------\n\nTITLE: Creating New Memory in TypeScript\nDESCRIPTION: Method to create a new memory in the database with an option to check for similarity before insertion.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryManager.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync createMemory(memory: Memory, unique: boolean = false): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing Auto Client in TypeScript\nDESCRIPTION: Code snippet for initializing the Auto client interface in an elizaOS project. This client enables automated interactions and trading functionality and is started with the runtime instance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoClientInterface } from \"@elizaos/client-auto\";\n\n// Initialize client\nconst client = await AutoClientInterface.start(runtime);\n```\n\n----------------------------------------\n\nTITLE: Managing Participant States in ElizaOS (TypeScript)\nDESCRIPTION: Functions for getting and setting participant user states within rooms. These operations use typed parameters and return Promises with specific state strings or void results.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IDatabaseAdapter.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetParticipantUserState(roomId: `${string}-${string}-${string}-${string}-${string}`, userId: `${string}-${string}-${string}-${string}-${string}`): Promise<\"FOLLOWED\" | \"MUTED\">\n\nsetParticipantUserState(roomId: `${string}-${string}-${string}-${string}-${string}`, userId: `${string}-${string}-${string}-${string}-${string}`, state: \"FOLLOWED\" | \"MUTED\"): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Filtering Extracted Facts for Memory Storage\nDESCRIPTION: This code filters extracted facts to exclude already known information, non-factual content, information already in the agent's bio, empty claims, and corrupted data. It ensures only new, relevant facts are stored in memory.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/fact-evaluator.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst filteredFacts = facts.filter((fact) => {\n    return (\n        !fact.already_known &&\n        fact.type === \"fact\" &&\n        !fact.in_bio &&\n        fact.claim &&\n        fact.claim.trim() !== \"\"\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Relationships in SQLite\nDESCRIPTION: Defines relationship management structures such as user-room and user-user relationships, and rooms as conversation spaces. It supports the management of interactions and associations in the system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/adapter-sqlite/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n- participants (user-room relationships)\n- relationships (user-user connections)\n- rooms (conversation spaces)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in Character File\nDESCRIPTION: Demonstrates how to configure plugins in an ElizaOS character file. This includes specifying which plugins to use and providing plugin-specific configuration settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"name\": \"MyAgent\",\n  \"plugins\": [\n    \"@elizaos/plugin-twitter\",\n    \"@elizaos/plugin-example\"\n  ],\n  \"settings\": {\n    \"example-plugin\": {\n      // Plugin-specific configuration\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Room Participant Management Function in TypeScript\nDESCRIPTION: Asynchronous function to ensure a user is registered as a participant in a specific room. Takes UUID format strings for both user and room identifiers.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAgentRuntime.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nensureParticipantInRoom(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing Memory Manager in ElizaOS\nDESCRIPTION: Example showing how to access and use a memory manager to create a new memory entry. This demonstrates the basic pattern for interacting with the memory system in the Eliza framework.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example memory manager usage\nconst memoryManager = runtime.getMemoryManager(\"messages\");\nawait memoryManager.createMemory({\n    id: messageId,\n    content: { text: \"Message content\" },\n    userId: userId,\n    roomId: roomId\n});\n```\n\n----------------------------------------\n\nTITLE: Database Adapter Setup - TypeScript\nDESCRIPTION: Code snippet illustrating the initialization of a SQLite database adapter using better-sqlite3 for managing structured data within the Eliza application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqliteDatabaseAdapter } from \"@elizaos/core/adapters\";\nimport Database from \"better-sqlite3\";\n\nconst db = new SqliteDatabaseAdapter(new Database(\"./dev.db\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Core Table Schemas in SQLite\nDESCRIPTION: The table schemas for Accounts, Memories, and Goals are detailed, which include primary key constraints and foreign key references. These tables are critical for managing user and application data within ElizaOS.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/adapter-sqlite/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n- id (TEXT PRIMARY KEY)\n- name (TEXT)\n- username (TEXT)\n- email (TEXT)\n- avatarUrl (TEXT)\n- details (JSON)\n```\n\nLANGUAGE: sql\nCODE:\n```\n- id (TEXT PRIMARY KEY)\n- type (TEXT)\n- content (TEXT)\n- embedding (BLOB)\n- userId (TEXT FK)\n- roomId (TEXT FK)\n- agentId (TEXT FK)\n```\n\nLANGUAGE: sql\nCODE:\n```\n- id (TEXT PRIMARY KEY)\n- name (TEXT)\n- status (TEXT)\n- description (TEXT)\n- objectives (JSON)\n```\n\n----------------------------------------\n\nTITLE: Executing Coinbase Mass Payout in TypeScript\nDESCRIPTION: This snippet shows how to call the SEND_MASS_PAYOUT action using the Coinbase MassPayments plugin, including specifying receiving addresses, transfer amount, asset ID, and network.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"SEND_MASS_PAYOUT\", {\n    receivingAddresses: [\n        \"0xA0ba2ACB5846A54834173fB0DD9444F756810f06\",\n        \"0xF14F2c49aa90BaFA223EE074C1C33b59891826bF\",\n    ],\n    transferAmount: 5000000000000000, // 0.005 ETH\n    assetId: \"ETH\",\n    network: \"eth\",\n});\nconsole.log(\"Mass payout response:\", response);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Coinbase MassPayments Plugin Configuration in TypeScript\nDESCRIPTION: This code demonstrates how to set up the configuration for the Coinbase MassPayments plugin, including automatic wallet creation and using an existing wallet.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// For automatic wallet generation\nruntime.character.settings.secrets = {\n    // Empty settings for first run\n};\n\n// For using existing wallet\nruntime.character.settings.secrets = {\n    COINBASE_GENERATED_WALLET_HEX_SEED:\n        \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\",\n    COINBASE_GENERATED_WALLET_ID: \"wallet-id-123\",\n};\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Handling Implementation in TypeScript\nDESCRIPTION: Implements rate limit handling with backoff strategy. This method calculates an appropriate delay based on the rate limit error, waits, and then retries the original request.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// Handle rate limiting\nasync handleRateLimit(error) {\n\tconst delay = this.calculateBackoff(error);\n\tawait wait(delay);\n\treturn this.retryRequest();\n}\n```\n\n----------------------------------------\n\nTITLE: Progressive Learning Pattern Example\nDESCRIPTION: This code pattern illustrates how the Fact Evaluator handles progressive learning, where new information can enhance or update previously stored facts across multiple conversations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/fact-evaluator.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// First conversation\n\"I live in Seattle\" -> Stores as fact\n\n// Later conversation\n\"I live in the Ballard neighborhood\" -> Updates/enhances existing fact\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Management in TypeScript\nDESCRIPTION: Function that establishes a connection between a user and a room with optional user details and source.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nensureConnection(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`, userName?: string, userScreenName?: string, source?: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Memory Management - TypeScript\nDESCRIPTION: This snippet demonstrates common memory management operations, including creating a new memory, searching memories by embedding, and retrieving recent memories from the database.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a memory\nawait db.createMemory(\n    {\n        id: uuid(),\n        content: { text: \"Hello world\" },\n        userId: user.id,\n        roomId: room.id,\n        agentId: agent.id,\n        createdAt: Date.now(),\n    },\n    \"messages\",\n);\n\n// Search memories by embedding\nconst similar = await db.searchMemoriesByEmbedding(embedding, {\n    match_threshold: 0.8,\n    count: 10,\n    roomId: room.id,\n});\n\n// Get recent memories\nconst recent = await db.getMemories({\n    roomId: room.id,\n    count: 10,\n    unique: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Example ERC20 Token Deployment (Typescript)\nDESCRIPTION: This snippet demonstrates how to deploy an ERC20 token contract using the Token Contract plugin. It shows how to specify the `contractType`, `name`, `symbol`, `network`, and `totalSupply` parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"DEPLOY_TOKEN_CONTRACT\", {\n    contractType: \"ERC20\",\n    name: \"MyToken\",\n    symbol: \"MTK\",\n    network: \"base\",\n    totalSupply: 1000000,\n});\n```\n\n----------------------------------------\n\nTITLE: Goal Management Operations in TypeScript\nDESCRIPTION: Methods for managing goals including retrieval, creation, updates and deletion. Supports filtering by agent, room and status.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nabstract updateGoalStatus(params): Promise<void>;\n\nabstract getGoals(params): Promise<Goal[]>;\n\nabstract updateGoal(goal: Goal): Promise<void>;\n\nabstract createGoal(goal: Goal): Promise<void>;\n\nabstract removeGoal(goalId: string): Promise<void>;\n\nabstract removeAllGoals(roomId: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining Character Schema with Zod in TypeScript\nDESCRIPTION: A constant that defines the validation schema for character configuration using Zod. The schema includes fields for character identification, personality traits, messaging templates, styling rules, and platform-specific configurations like Twitter and NFT settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/CharacterSchema.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst CharacterSchema: ZodObject<object, \"strip\", ZodTypeAny, object, object> = {\n  id: ZodOptional<ZodString>,\n  name: ZodString,\n  system: ZodOptional<ZodString>,\n  modelProvider: ZodNativeEnum<typeof ModelProviderName>,\n  modelEndpointOverride: ZodOptional<ZodString>,\n  templates: ZodOptional<ZodRecord<ZodString, ZodString>>,\n  bio: ZodUnion<[ZodString, ZodArray<ZodString, \"many\">]>,\n  lore: ZodArray<ZodString, \"many\">,\n  messageExamples: ZodArray<ZodArray<ZodObject<object, \"strip\", ZodTypeAny, object, object>, \"many\">, \"many\">,\n  postExamples: ZodArray<ZodString, \"many\">,\n  topics: ZodArray<ZodString, \"many\">,\n  adjectives: ZodArray<ZodString, \"many\">,\n  knowledge: ZodOptional<ZodArray<ZodUnion<[ZodString, ZodObject<object, \"strip\", ZodTypeAny, object, object>, ZodObject<object, \"strip\", ZodTypeAny, object, object>]>, \"many\">>,\n  plugins: ZodUnion<[ZodArray<ZodString, \"many\">, ZodArray<ZodObject<object, \"strip\", ZodTypeAny, object, object>, \"many\">]>,\n  settings: ZodOptional<ZodObject<object, \"strip\", ZodTypeAny, object, object>>,\n  clientConfig: ZodOptional<ZodObject<object, \"strip\", ZodTypeAny, object, object>>,\n  style: ZodObject<object, \"strip\", ZodTypeAny, object, object>,\n  twitterProfile: ZodOptional<ZodObject<object, \"strip\", ZodTypeAny, object, object>>,\n  nft: ZodOptional<ZodObject<object, \"strip\", ZodTypeAny, object, object>>,\n  extends: ZodOptional<ZodArray<ZodString, \"many\">>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Database Adapter\nDESCRIPTION: Demonstrates the initialization of a SQLite database adapter for ElizaOS. The adapter requires a path to the SQLite database file and is essential for performing database operations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/adapter-sqlite/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqliteDatabaseAdapter } from '@elizaos/adapter-sqlite';\n\nconst adapter = new SqliteDatabaseAdapter('path/to/database.db');\nawait adapter.init();\n```\n\n----------------------------------------\n\nTITLE: Example Character File in JSON\nDESCRIPTION: A basic example of a character file showing core fields like name, clients, settings, bio, lore, knowledge, and examples. This demonstrates the fundamental structure required for defining an AI character's personality and behavior.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"trump\",\n    \"clients\": [\"discord\", \"direct\"],\n    \"settings\": {\n        \"voice\": { \"model\": \"en_US-male-medium\" }\n    },\n    \"bio\": [\n        \"Built a strong economy and reduced inflation.\",\n        \"Promises to make America the crypto capital and restore affordability.\"\n    ],\n    \"lore\": [\n        \"Secret Service allocations used for election interference.\",\n        \"Promotes WorldLibertyFi for crypto leadership.\"\n    ],\n    \"knowledge\": [\n        \"Understands border issues, Secret Service dynamics, and financial impacts on families.\"\n    ],\n    \"messageExamples\": [\n        {\n            \"user\": \"{{user1}}\",\n            \"content\": { \"text\": \"What about the border crisis?\" },\n            \"response\": \"Current administration lets in violent criminals. I secured the border; they destroyed it.\"\n        }\n    ],\n    \"postExamples\": [\n        \"End inflation and make America affordable again.\",\n        \"America needs law and order, not crime creation.\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Reconnection Logic in TypeScript\nDESCRIPTION: Implements reconnection logic for handling disconnection events. This method attempts to reconnect using an exponential backoff strategy with a configurable maximum number of attempts.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// Implement reconnection logic\nasync handleDisconnect() {\n\tawait this.reconnect({\n\t\tmaxAttempts: 5,\n\t\tbackoff: \"exponential\",\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Memories with Embeddings in ElizaOS\nDESCRIPTION: Implementation of a function that stores memories with embedded vectors. It takes content, generates an embedding, and stores it in the message manager with metadata.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function storeMemory(runtime: AgentRuntime, content: string, type: string) {\n    const embedding = await runtime.embed(content);\n    \n    await runtime.messageManager.createMemory({\n        content: { text: content },\n        embedding,\n        userId: runtime.agentId,\n        roomId: runtime.roomId,\n        type,\n        metadata: {\n            timestamp: new Date(),\n            source: 'user-interaction'\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Embedding Model Settings in TypeScript\nDESCRIPTION: Function that takes a model provider name and returns the corresponding embedding model settings if available. It's defined in the models.ts file of the @elizaos/core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getEmbeddingModelSettings.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetEmbeddingModelSettings(provider): EmbeddingModelSettings | undefined\n```\n\n----------------------------------------\n\nTITLE: Encrypting Secrets in TypeScript\nDESCRIPTION: Defines the SecretEncryption class to handle encryption and decryption of secrets using AES-256-GCM, ensuring that sensitive information is stored securely.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCipheriv, createDecipheriv } from \"crypto\";\n\nclass SecretEncryption {\n    static async encrypt(value: string, key: Buffer): Promise<string> {\n        const iv = crypto.randomBytes(16);\n        const cipher = createCipheriv(\"aes-256-gcm\", key, iv);\n\n        let encrypted = cipher.update(value, \"utf8\", \"hex\");\n        encrypted += cipher.final(\"hex\");\n\n        return JSON.stringify({\n            iv: iv.toString(\"hex\"),\n            encrypted,\n            tag: cipher.getAuthTag().toString(\"hex\"),\n        });\n    }\n\n    static async decrypt(encrypted: string, key: Buffer): Promise<string> {\n        const { iv, encrypted: encryptedData, tag } = JSON.parse(encrypted);\n\n        const decipher = createDecipheriv(\n            \"aes-256-gcm\",\n            key,\n            Buffer.from(iv, \"hex\"),\n        );\n\n        decipher.setAuthTag(Buffer.from(tag, \"hex\"));\n\n        let decrypted = decipher.update(encryptedData, \"hex\", \"utf8\");\n        decrypted += decipher.final(\"utf8\");\n\n        return decrypted;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Boredom Provider in TypeScript\nDESCRIPTION: A boredom provider that calculates engagement levels by analyzing conversation patterns. It evaluates recent messages for indicators of interest or disinterest and adjusts a boredom score accordingly to help the agent maintain appropriate conversation dynamics.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/providers.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Sample scoring logic\nif (interestWords.some((word) => messageText.includes(word))) {\n    boredomScore -= 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Memory Manager in Runtime\nDESCRIPTION: Method to register a memory manager in the agent runtime system. It takes a memory manager instance and adds it to the memoryManagers map, using the manager's tableName as the key.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nregisterMemoryManager(manager: IMemoryManager): void {\n  if (manager.tableName && !this.memoryManagers.has(manager.tableName)) {\n    this.memoryManagers.set(manager.tableName, manager);\n    console.log(`Registered memory manager for ${manager.tableName}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Vector Tables\nDESCRIPTION: This SQL snippet specifies the creation of two tables in Supabase for storing vector data with specific dimensions. These tables are crucial for handling vector embeddings efficiently in a cloud-hosted environment, with the primary key being UUID and supporting varying embedding dimensions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/database.md#2025-04-16_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE memories_1536 (id UUID PRIMARY KEY, embedding vector(1536));\nCREATE TABLE memories_1024 (id UUID PRIMARY KEY, embedding vector(1024));\n```\n\n----------------------------------------\n\nTITLE: Querying Actor Details in TypeScript\nDESCRIPTION: Function signature for getActorDetails that accepts a runtime and roomId parameter to fetch actor details. Returns a Promise containing an array of Actor objects. The roomId follows a UUID format with hyphen-separated segments.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getActorDetails.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetActorDetails(__namedParameters): Promise<Actor[]>\n```\n\n----------------------------------------\n\nTITLE: Using splitChunks Function in TypeScript for Text Chunking\nDESCRIPTION: The splitChunks function divides text content into smaller chunks with a specified maximum size. It supports overlapping sections (bleed) between chunks for context preservation. The function takes the content string, desired chunk size in tokens, and optional bleed parameter.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/splitChunks.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsplitChunks(content: string, chunkSize: number = 1500, bleed: number = 100): Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Generation Settings in Character JSON\nDESCRIPTION: Sets up image generation configuration within a character file, specifying the model provider and various image settings like steps, width, and height.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modelProvider\": \"heurist\",\n    \"settings\": {\n        \"imageSettings\": {\n            \"steps\": 20,\n            \"width\": 1024,\n            \"height\": 1024\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Client for Browser Interaction\nDESCRIPTION: Command to start the Eliza client for browser-based interaction with the agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm start:client\n```\n\n----------------------------------------\n\nTITLE: In-Memory Database Adapter Setup - TypeScript\nDESCRIPTION: Demonstrates creating an in-memory SQLite database adapter, suitable for testing purposes when persistent storage is not required.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqlJsDatabaseAdapter } from \"@elizaos/core/adapters\";\n\nconst db = new SqlJsDatabaseAdapter(new Database(\":memory:\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Trust Score Database for Eliza\nDESCRIPTION: Shows how to create a TrustScoreDatabase class with methods for calculating validation trust scores for tokens based on recommender metrics.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass TrustScoreDatabase {\n    async calculateValidationTrust(tokenAddress: string): number {\n        const sql = `\n      SELECT rm.trust_score\n      FROM token_recommendations tr\n      JOIN recommender_metrics rm ON tr.recommender_id = rm.recommender_id\n      WHERE tr.token_address = ?;\n    `;\n\n        const rows = this.db.prepare(sql).all(tokenAddress);\n        if (rows.length === 0) return 0;\n\n        const totalTrust = rows.reduce((acc, row) => acc + row.trust_score, 0);\n        return totalTrust / rows.length;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memories Method in TypeScript\nDESCRIPTION: Defines the getMemories method for fetching memories based on specified options.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMemories(opts: {\n  roomId: `${string}-${string}-${string}-${string}-${string}`;\n  count?: number;\n  unique?: boolean;\n  start?: number;\n  end?: number;\n}): Promise<Memory[]>;\n```\n\n----------------------------------------\n\nTITLE: Getting Image Model Settings Function Definition in TypeScript\nDESCRIPTION: Function that retrieves image model settings based on a model provider name. Returns either ImageModelSettings configuration or undefined. Located in the core package's models.ts file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getImageModelSettings.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetImageModelSettings(provider: ModelProviderName): ImageModelSettings | undefined\n```\n\n----------------------------------------\n\nTITLE: Automatic Secret Rotation Implementation in TypeScript\nDESCRIPTION: This SecretRotation class includes methods to determine if a secret needs to be rotated and to handle the rotation process, which is essential for maintaining security over time.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecretRotation {\n    private static readonly SECRET_LIFETIME = 90 * 24 * 60 * 60 * 1000; // 90 days\n\n    async shouldRotateSecret(secretName: string): Promise<boolean> {\n        const lastRotation = await this.getLastRotation(secretName);\n        return Date.now() - lastRotation > SecretRotation.SECRET_LIFETIME;\n    }\n\n    async rotateSecret(secretName: string): Promise<void> {\n        // Implement rotation logic\n        const newSecret = await this.generateNewSecret();\n        await this.updateSecret(secretName, newSecret);\n        await this.recordRotation(secretName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Room Creation Function in TypeScript\nDESCRIPTION: Function that ensures a room exists in the system. Creates a new room if it doesn't exist and adds required participants.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nensureRoomExists(roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for Image Caption Generation\nDESCRIPTION: Function signature for generateCaption that takes an image URL and runtime parameters to generate a caption object containing a title and description. Returns a Promise that resolves to an object with title and description properties.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateCaption.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateCaption(data: { imageUrl: string }, runtime: IAgentRuntime): Promise<{ title: string, description: string }>\n```\n\n----------------------------------------\n\nTITLE: Common Client Interface Definition\nDESCRIPTION: Interface definition for standard message handling in all clients, including methods for handling messages, generating responses, and sending messages.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClientInterface {\n    handleMessage(message: Message): Promise<void>;\n    generateResponse(context: Context): Promise<Response>;\n    sendMessage(destination: string, content: Content): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare AI Gateway in Environment Variables\nDESCRIPTION: Sets up the Cloudflare AI Gateway integration, which provides benefits such as analytics, cost optimization, and improved latency. This configuration enables routing API calls through Cloudflare.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Cloudflare AI Gateway Settings\nCLOUDFLARE_GW_ENABLED=true\nCLOUDFLARE_AI_ACCOUNT_ID=your-account-id\nCLOUDFLARE_AI_GATEWAY_ID=your-gateway-id\n```\n\n----------------------------------------\n\nTITLE: Token Provider Selection Implementation\nDESCRIPTION: Function that retrieves the appropriate API token for a model provider, checking character-specific settings before falling back to global settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getTokenForProvider(\n    provider: ModelProviderName,\n    character: Character,\n) {\n    switch (provider) {\n        case ModelProviderName.OPENAI:\n            return (\n                character.settings?.secrets?.OPENAI_API_KEY ||\n                settings.OPENAI_API_KEY\n            );\n        case ModelProviderName.ANTHROPIC:\n            return (\n                character.settings?.secrets?.ANTHROPIC_API_KEY ||\n                settings.ANTHROPIC_API_KEY\n            );\n        // Handle other providers...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Goals in TypeScript for elizaOS\nDESCRIPTION: Function signature for creating goals in the elizaOS framework. Takes an object parameter containing an IAgentRuntime instance and a Goal object, returns a Promise that resolves to void. Located in the core package's goals.ts file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/createGoal.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateGoal(__namedParameters): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing cleanupDeletedKnowledgeFiles Method in IRAGKnowledgeManager Interface\nDESCRIPTION: Defines the cleanupDeletedKnowledgeFiles method which performs cleanup operations on deleted knowledge files.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IRAGKnowledgeManager.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ncleanupDeletedKnowledgeFiles(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Example NFT Collection Deployment (Typescript)\nDESCRIPTION: This snippet demonstrates how to deploy an ERC721 (NFT) contract using the Token Contract plugin. It shows how to specify the `contractType`, `name`, `symbol`, `network`, and `baseURI` parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"DEPLOY_TOKEN_CONTRACT\", {\n    contractType: \"ERC721\",\n    name: \"MyNFT\",\n    symbol: \"MNFT\",\n    network: \"eth\",\n    baseURI: \"https://api.mynft.com/metadata/\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using trimTokens Function in TypeScript\nDESCRIPTION: Example of using the trimTokens function to truncate text to a specified token limit. The function accepts a text context, maximum token count, and runtime interface that provides tokenizer settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/trimTokens.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst trimmedText = await trimTokens(\"This is an example text\", 50, runtime);\nconsole.log(trimmedText); // Output will be a truncated version of the input text.\n```\n\n----------------------------------------\n\nTITLE: Database Adapter Selection Logic\nDESCRIPTION: Function that initializes the appropriate database adapter based on environment configuration, choosing between PostgreSQL or SQLite as a fallback.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction initializeDatabase() {\n    if (process.env.POSTGRES_URL) {\n        return new PostgresDatabaseAdapter({\n            connectionString: process.env.POSTGRES_URL,\n        });\n    }\n    return new SqliteDatabaseAdapter(new Database(\"./db.sqlite\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TEE Key Derivation in TypeScript\nDESCRIPTION: Demonstrates usage of DeriveKeyProvider for secure key derivation within TEE environment, supporting both Solana and Ethereum chains\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeriveKeyProvider } from \"@elizaos/plugin-tee\";\n\n// Initialize the provider\nconst provider = new DeriveKeyProvider();\n\n// Derive a raw key\ntry {\n    const rawKey = await provider.rawDeriveKey(\n        \"/path/to/derive\", // This is what the WALLET_SECRET_SALT is used for\n        \"subject-identifier\",\n    );\n    // rawKey is a DeriveKeyResponse that can be used for further processing\n    // to get the uint8Array do the following\n    const rawKeyArray = rawKey.asUint8Array();\n} catch (error) {\n    console.error(\"Raw key derivation failed:\", error);\n}\n\n// Derive a Solana keypair (Ed25519)\ntry {\n    const solanaKeypair = await provider.deriveEd25519Keypair(\n        \"/path/to/derive\", // This is what the WALLET_SECRET_SALT is used for\n        \"subject-identifier\",\n    );\n    // solanaKeypair can now be used for Solana operations\n} catch (error) {\n    console.error(\"Solana key derivation failed:\", error);\n}\n\n// Derive an Ethereum keypair (ECDSA)\ntry {\n    const evmKeypair = await provider.deriveEcdsaKeypair(\n        \"/path/to/derive\", // This is what the WALLET_SECRET_SALT is used for\n        \"subject-identifier\",\n    );\n    // evmKeypair can now be used for Ethereum operations\n} catch (error) {\n    console.error(\"EVM key derivation failed:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Auto Trading Client\nDESCRIPTION: Basic setup for the Auto client integration, showing how to initialize the client for automated trading.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoClientInterface } from \"@elizaos/client-auto\";\n\n// Initialize client\nconst client = await AutoClientInterface.start(runtime);\n```\n\n----------------------------------------\n\nTITLE: Service Registration in TypeScript\nDESCRIPTION: Example of proper service registration in a plugin system, showing how to register a service with type checking and avoid duplicate registrations. This method checks if a service is already registered before adding it.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// Proper service registration\nregisterService(service: Service): void {\n    const serviceType = (service as typeof Service).serviceType;\n    if (this.services.has(serviceType)) {\n        console.warn(`Service ${serviceType} is already registered`);\n        return;\n    }\n    this.services.set(serviceType, service);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Knowledge in ElizaOS (TypeScript)\nDESCRIPTION: Functions for retrieving, searching, creating, and removing knowledge items. These operations use typed parameters and return Promises with arrays of RAGKnowledgeItem objects or void results.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IDatabaseAdapter.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetKnowledge(params: { id?: `${string}-${string}-${string}-${string}-${string}`, agentId: `${string}-${string}-${string}-${string}-${string}`, limit?: number, query?: string, conversationContext?: string }): Promise<RAGKnowledgeItem[]>\n\nsearchKnowledge(params: { agentId: `${string}-${string}-${string}-${string}-${string}`, embedding: Float32Array, match_threshold: number, match_count: number, searchText?: string }): Promise<RAGKnowledgeItem[]>\n\ncreateKnowledge(knowledge: RAGKnowledgeItem): Promise<void>\n\nremoveKnowledge(id: `${string}-${string}-${string}-${string}-${string}`): Promise<void>\n\nclearKnowledge(agentId: `${string}-${string}-${string}-${string}-${string}`, shared?: boolean): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Relationship Management Interface in TypeScript\nDESCRIPTION: Extended interface methods for relationship tracking and management in the database adapters. This includes room management, participant management, and relationship tracking between users.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/database.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IDatabaseAdapter {\n    // Room Management\n    createRoom(roomId?: UUID): Promise<UUID>;\n    getRoom(roomId: UUID): Promise<UUID | null>;\n    getRoomsForParticipant(userId: UUID): Promise<UUID[]>;\n    \n    // Participant Management\n    addParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n    getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;\n    getParticipantUserState(roomId: UUID, userId: UUID): Promise<\"FOLLOWED\" | \"MUTED\" | null>;\n    \n    // Relationship Tracking\n    createRelationship(params: { userA: UUID; userB: UUID }): Promise<boolean>;\n    getRelationship(params: { userA: UUID; userB: UUID }): Promise<Relationship | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModelSettings Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition that specifies configuration parameters for AI model behavior including token limits, temperature, penalties, and stop sequences. Includes optional experimental telemetry settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/ModelSettings.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ModelSettings = {\n  name: string;              // Model name\n  maxInputTokens: number;     // Maximum input tokens\n  maxOutputTokens: number;    // Maximum output tokens\n  frequency_penalty?: number; // Optional frequency penalty\n  presence_penalty?: number;  // Optional presence penalty\n  repetition_penalty?: number; // Optional repetition penalty\n  stop: string[];            // Stop sequences\n  temperature: number;        // Temperature setting\n  experimental_telemetry?: TelemetrySettings; // Optional telemetry configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Management Methods in TypeScript\nDESCRIPTION: Specialized methods for retrieving and managing memory records with support for filtering by room IDs and memory IDs. Includes batch operations and detailed parameter configurations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nabstract getMemoriesByRoomIds(params: {\n  agentId: string,\n  roomIds: string[],\n  tableName: string,\n  limit?: number\n}): Promise<Memory[]>\nabstract getMemoryById(id: string): Promise<Memory>\nabstract getMemoriesByIds(memoryIds: string[], tableName?: string): Promise<Memory[]>\n```\n\n----------------------------------------\n\nTITLE: Validating Environment Configuration in ElizaOS Core (TypeScript)\nDESCRIPTION: This function validates the environment configuration and returns an EnvConfig object. It is located in the core package within the environment.ts file at line 27.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/validateEnv.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nvalidateEnv(): EnvConfig\n```\n\n----------------------------------------\n\nTITLE: Custom Database Adapter Implementation\nDESCRIPTION: Provides an extension point for implementing custom database adapters with required and optional functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomDatabaseAdapter extends DatabaseAdapter {\n    constructor(config: CustomConfig) {\n        super();\n        // Initialize custom database connection\n    }\n\n    async createMemory(memory: Memory, tableName: string): Promise<void> {\n        // Custom implementation\n    }\n\n    async searchMemories(params: SearchParams): Promise<Memory[]> {\n        // Custom implementation\n    }\n\n    async customOperation(): Promise<void> {\n        // Custom database operation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring generateImage Function in TypeScript\nDESCRIPTION: This snippet declares the generateImage function, which takes data and runtime parameters and returns a Promise that resolves to an object. The function is used for generating images based on various input parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateImage.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction generateImage(data: {\n  prompt: string;\n  width: number;\n  height: number;\n  count?: number;\n  negativePrompt?: string;\n  numIterations?: number;\n  guidanceScale?: number;\n  seed?: number;\n  modelId?: string;\n  jobId?: string;\n  stylePreset?: string;\n  hideWatermark?: boolean;\n  safeMode?: boolean;\n  cfgScale?: number;\n}, runtime: IAgentRuntime): Promise<{\n  success: boolean;\n  data?: string[];\n  error?: any;\n}>\n```\n\n----------------------------------------\n\nTITLE: Database Transaction Error Handling\nDESCRIPTION: Implements robust error handling for database transactions with specific error type handling and rollback support.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nclass DatabaseAdapter {\n    protected async withTransaction<T>(\n        callback: (client: PoolClient) => Promise<T>,\n    ): Promise<T> {\n        const client = await this.pool.connect();\n        try {\n            await client.query(\"BEGIN\");\n            const result = await callback(client);\n            await client.query(\"COMMIT\");\n            return result;\n        } catch (error) {\n            await client.query(\"ROLLBACK\");\n            if (error instanceof DatabaseError) {\n                if (error.code === \"23505\") {\n                    throw new UniqueViolationError(error);\n                }\n            }\n            throw error;\n        } finally {\n            client.release();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Media Processing Interface\nDESCRIPTION: Interface definition for media processing in all clients, including methods for processing images, videos, and audio.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MediaProcessor {\n    processImage(image: Image): Promise<ProcessedImage>;\n    processVideo(video: Video): Promise<ProcessedVideo>;\n    processAudio(audio: Audio): Promise<ProcessedAudio>;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Processing Queues in Eliza\nDESCRIPTION: Shows how to implement a QueueManager for processing sequential tasks in Eliza. The manager handles queue state to prevent concurrent processing and processes items until the queue is empty.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass QueueManager {\n    private queue: string[] = [];\n    private processing: boolean = false;\n\n    async processQueue(): Promise<void> {\n        if (this.processing || this.queue.length === 0) {\n            return;\n        }\n\n        this.processing = true;\n        while (this.queue.length > 0) {\n            const item = this.queue.shift();\n            await this.processItem(item);\n        }\n        this.processing = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing searchKnowledge Method in IRAGKnowledgeManager Interface\nDESCRIPTION: Defines the searchKnowledge method which searches for RAGKnowledgeItems based on provided parameters such as agentId, embedding, match threshold, match count, and searchText.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IRAGKnowledgeManager.md#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nsearchKnowledge(params: {\n  agentId: `${string}-${string}-${string}-${string}-${string}`;\n  embedding: number[] | Float32Array;\n  match_threshold?: number;\n  match_count?: number;\n  searchText?: string;\n}): Promise<RAGKnowledgeItem[]>;\n```\n\n----------------------------------------\n\nTITLE: Validating Required Secrets - TypeScript\nDESCRIPTION: This function checks for the presence of required environment variables before operational use, throwing an error if any are missing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/secrets-management.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction validateRequiredSecrets(runtime) {\n  const required = [\"OPENAI_API_KEY\", \"DATABASE_URL\"];\n  \n  const missing = required.filter(key => !runtime.getSetting(key));\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing required secrets: ${missing.join(\", \")}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getKnowledge Method in IRAGKnowledgeManager Interface\nDESCRIPTION: Defines the getKnowledge method which retrieves RAGKnowledgeItems based on provided parameters such as query, id, limit, conversationContext, and agentId.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IRAGKnowledgeManager.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetKnowledge(params: {\n  query?: string;\n  id?: `${string}-${string}-${string}-${string}-${string}`;\n  limit?: number;\n  conversationContext?: string;\n  agentId?: `${string}-${string}-${string}-${string}-${string}`;\n}): Promise<RAGKnowledgeItem[]>;\n```\n\n----------------------------------------\n\nTITLE: Authentication Token Refresh Implementation in TypeScript\nDESCRIPTION: Implements token refresh functionality for handling authentication failures. This method requests a new authentication token and updates the client's credentials when authentication fails.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// Implement token refresh\nasync refreshAuth() {\n\tconst newToken = await this.requestNewToken();\n\tawait this.updateToken(newToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Character File for NASA Plugin\nDESCRIPTION: TypeScript configuration for the character file that includes the NASA plugin integration with the Eliza framework, defining clients and model providers.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModelProviderName, Clients } from \"@elizaos/core\";\nimport { nasaPlugin } from '@elizaos/plugin-nasa'\n\nexport const mainCharacter = {\n    name: \"sound_craft_\",\n    clients: [Clients.TWITTER],\n    modelProvider: ModelProviderName.HYPERBOLIC,\n    plugins: [nasaPlugin],\n    // ... rest of character configuration\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Telegram Messages\nDESCRIPTION: Implementation of Telegram message handling logic, including processing message content, generating responses, and sending messages.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass TelegramClient {\n    async handleMessage(message) {\n        // Process message content\n        const content = await this.processMessage(message);\n\n        // Generate response\n        const response = await this.generateResponse(content);\n\n        // Send response\n        await this.sendMessage(message.chat.id, response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Twitter Client\nDESCRIPTION: Basic setup for the Twitter client integration, showing how to initialize the client with environment variables for Twitter credentials.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TwitterClientInterface } from \"@elizaos/client-twitter\";\n// Initialize client\nconst client = await TwitterClientInterface.start(runtime);\n\n// Configuration in .env\nTWITTER_USERNAME = your_username;\nTWITTER_PASSWORD = your_password;\nTWITTER_EMAIL = your_email;\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Endpoints for Direct Client\nDESCRIPTION: Implementation of a Direct Client class that sets up REST API endpoints for custom integrations. It provides endpoints for handling messages and generating images with appropriate request and response handling.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass DirectClient {\n    constructor() {\n        // Message endpoint\n        this.app.post(\"/:agentId/message\", async (req, res) => {\n            const response = await this.handleMessage(req.body);\n            res.json(response);\n        });\n\n        // Image generation endpoint\n        this.app.post(\"/:agentId/image\", async (req, res) => {\n            const images = await this.generateImage(req.body);\n            res.json(images);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Documents to Knowledge Base\nDESCRIPTION: Command to run the folder-to-knowledge script that processes various file types (videos, PDFs, text, markdown, images) to create a knowledge base.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_10min.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx folder-to-knowledge path/to/folder\n```\n\n----------------------------------------\n\nTITLE: Fix PostgreSQL Query: Use only text subfield name\nDESCRIPTION: A pull request fix that modifies a PostgreSQL query to use only the 'text' subfield name, removing the unnecessary field name reference.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/changelog.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Fix PG query: Use only 'text' subfield name, field name is not needed here by @esen in https://github.com/elizaOS/eliza/pull/3264\n```\n\n----------------------------------------\n\nTITLE: Calculating Trust Scores for Recommenders in TypeScript\nDESCRIPTION: This function calculates the trust score for a recommender based on multiple weighted metrics, executed asynchronously. It uses TypeScript and relies on helper functions for normalization and time decay, and expects recommender metrics as input, outputting a single trust score.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function calculateTrustScore(\n    recommenderId: string,\n    metrics: RecommenderMetrics,\n): Promise<number> {\n    const weights = {\n        successRate: 0.3,\n        avgPerformance: 0.2,\n        consistency: 0.2,\n        riskMetric: 0.15,\n        timeDecay: 0.15,\n    };\n\n    const successRate = metrics.successfulRecs / metrics.totalRecommendations;\n    const normalizedPerformance = normalizePerformance(\n        metrics.avgTokenPerformance,\n    );\n    const timeDecayFactor = calculateTimeDecay(metrics.lastActiveDate);\n\n    return (\n        (successRate * weights.successRate +\n            normalizedPerformance * weights.avgPerformance +\n            metrics.consistencyScore * weights.consistency +\n            (1 - metrics.riskScore) * weights.riskMetric +\n            timeDecayFactor * weights.timeDecay) *\n        100\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Trade Execution Failures in TypeScript\nDESCRIPTION: This function logs trade execution failures, adjusting trust scores and issuing failure notifications. Implemented in TypeScript, it responds to errors within trade attempts, adapting recommender scores to reflect reliability.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleTradeFailure(\n    error: Error,\n    trade: TradeAttempt,\n): Promise<void> {\n    await logTradeError(error, trade);\n    await adjustTrustScore(trade.recommenderId, \"FAILURE\");\n    await notifyTradeFailure(trade);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cached Values in TypeScript\nDESCRIPTION: Implementation of the get method from ICacheAdapter interface that retrieves a cached value by key from the file system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/FsCacheAdapter.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget(key): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC20 Token Contract using Coinbase Plugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to deploy an ERC20 token contract using the DEPLOY_TOKEN_CONTRACT action of the Coinbase Token Contract plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"DEPLOY_TOKEN_CONTRACT\", {\n    contractType: \"ERC20\",\n    name: \"MyToken\",\n    symbol: \"MTK\",\n    network: \"base\",\n    totalSupply: 1000000,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Values in MemoryCacheAdapter in TypeScript\nDESCRIPTION: Implements the set method from ICacheAdapter interface which stores a key-value pair in the cache. Returns a Promise that resolves when the operation completes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryCacheAdapter.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nset(key: string, value: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing Telegram Client in TypeScript\nDESCRIPTION: Code snippet for initializing the Telegram client interface in an elizaOS project. It imports the necessary module, starts the client with the runtime instance, and shows the required environment variable for the Telegram bot token.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TelegramClientInterface } from \"@elizaos/client-telegram\";\n\n// Initialize client\nconst client = await TelegramClientInterface.start(runtime);\n\n// Configuration in .env\nTELEGRAM_BOT_TOKEN = your_bot_token;\n```\n\n----------------------------------------\n\nTITLE: Wallet Management and Initialization in TypeScript\nDESCRIPTION: Implements a WalletManager class that securely initializes a blockchain wallet, including validation of the private key format. This is crucial for handling blockchain credentials.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass WalletManager {\n    private async initializeWallet(runtime: IAgentRuntime) {\n        const privateKey =\n            runtime.getSetting(\"SOLANA_PRIVATE_KEY\") ??\n            runtime.getSetting(\"WALLET_PRIVATE_KEY\");\n\n        if (!privateKey) {\n            throw new Error(\"Wallet private key not configured\");\n        }\n\n        // Validate key format\n        try {\n            const keyBuffer = Buffer.from(privateKey, \"base64\");\n            if (keyBuffer.length !== 64) {\n                throw new Error(\"Invalid key length\");\n            }\n        } catch (error) {\n            throw new Error(\"Invalid private key format\");\n        }\n\n        // Initialize wallet securely\n        return new Wallet(privateKey);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Implementation\nDESCRIPTION: Rate limiter implementation with exponential backoff strategy.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nclass RateLimiter {\n    private async handleRateLimit(error: RateLimitError) {\n        const delay = this.calculateBackoff(error);\n        await wait(delay);\n        return this.retryRequest();\n    }\n\n    private calculateBackoff(error: RateLimitError): number {\n        return Math.min(\n            this.baseDelay * Math.pow(2, this.attempts),\n            this.maxDelay\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Character Bio Example in JSON\nDESCRIPTION: Example of the bio field implementation using an array of statements about Mark Andreessen. Bio can be either a comprehensive string or an array of statements that can be randomized for variety in responses.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"bio\": [\n  \"Mark Andreessen is an American entrepreneur and investor\",\n  \"Co-founder of Netscape and Andreessen Horowitz\",\n  \"Pioneer of the early web, created NCSA Mosaic\"\n]\n```\n\n----------------------------------------\n\nTITLE: Knowledge Search Functionality\nDESCRIPTION: The abstract method searches knowledge items with specific parameters such as agentId, embedding, match threshold, match count, and optional search text. It returns a Promise resolving to an array of RAGKnowledgeItem objects. Implements the IDatabaseAdapter interface.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n> `abstract` **searchKnowledge**(`params`): `Promise`\\<[`RAGKnowledgeItem`](../interfaces/RAGKnowledgeItem.md)[]\\>\\n\\nSearches for knowledge items with given parameters.\n```\n\n----------------------------------------\n\nTITLE: Deploying NFT Collection using Coinbase Plugin in TypeScript\nDESCRIPTION: This code shows how to deploy an ERC721 (NFT) contract using the DEPLOY_TOKEN_CONTRACT action of the Coinbase Token Contract plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"DEPLOY_TOKEN_CONTRACT\", {\n    contractType: \"ERC721\",\n    name: \"MyNFT\",\n    symbol: \"MNFT\",\n    network: \"eth\",\n    baseURI: \"https://api.mynft.com/metadata/\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining IImageDescriptionService Interface in TypeScript\nDESCRIPTION: Defines the IImageDescriptionService interface that extends the Service class. It includes a getter for serviceType, an abstract initialize method, and a describeImage method that takes an imageUrl and returns a Promise with title and description.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IImageDescriptionService.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IImageDescriptionService extends Service {\n  get serviceType(): ServiceType;\n  initialize(runtime: IAgentRuntime): Promise<void>;\n  describeImage(imageUrl: string): Promise<{\n    title: string;\n    description: string;\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Token Validation Process in TypeScript\nDESCRIPTION: This function validates a token based on specific liquid and volume requirements and flags potential scams. Implemented in TypeScript, it checks against multiple performance indicators and returns a boolean indicating the token's validity under specified conditions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function validateToken(\n    tokenAddress: string,\n    performance: TokenPerformance,\n): Promise<boolean> {\n    // Minimum requirements\n    const requirements = {\n        minLiquidity: 1000, // $1000 USD\n        minHolders: 100,\n        maxOwnership: 0.2, // 20% max single holder\n        minVolume: 500, // $500 USD daily volume\n    };\n\n    // Red flags\n    if (\n        performance.rugPull ||\n        performance.isScam ||\n        performance.rapidDump ||\n        performance.suspiciousVolume\n    ) {\n        return false;\n    }\n\n    // Basic requirements\n    return (\n        performance.liquidity >= requirements.minLiquidity &&\n        !performance.rapidDump &&\n        performance.validationTrust > 0.5\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Service in Runtime\nDESCRIPTION: Method to register a service in the agent runtime. It adds the service to the services map using its type as the key, and initializes the service if needed.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync registerService(service: Service): Promise<void> {\n  this.services.set(service.type, service);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client Configuration in JSON\nDESCRIPTION: This JSON code specifies client configurations for Telegram and Discord, focusing on ignoring specific types of messages, such as direct messages and bot messages. These settings enable the developer to control message handling in an efficient manner, customizing behaviors per platform.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/template-configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"clientConfig\": {\n        \"telegram\": {\n            \"shouldIgnoreDirectMessages\": true, // Ignore DMs\n            \"shouldIgnoreBotMessages\": true // Ignore bot messages\n        },\n        \"discord\": {\n            \"shouldIgnoreBotMessages\": true, // Ignore bot messages\n            \"shouldIgnoreDirectMessages\": true // Ignore DMs\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Search Functionality\nDESCRIPTION: Implementation of a Twitter Search Client class for searching tweets. It provides a method to search for tweets with a specified query and filters for recency and language.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass TwitterSearchClient {\n    async searchTweets(query: string) {\n        return await this.search({\n            query,\n            filters: {\n                recency: \"recent\",\n                language: \"en\",\n            },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values - TypeScript\nDESCRIPTION: This snippet demonstrates how to access environment variable values using the `runtime.getSetting()` method, including handling missing values and using fallback options.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/secrets-management.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// In a plugin, action, or service\nconst apiKey = runtime.getSetting(\"OPENAI_API_KEY\");\nif (!apiKey) {\n  throw new Error(\"OpenAI API key not configured\");\n}\n\n// With a fallback value\nconst temperature = runtime.getSetting(\"TEMPERATURE\") || \"0.7\";\n```\n\n----------------------------------------\n\nTITLE: Settings Configuration in JSON\nDESCRIPTION: Settings object defining additional configurations such as API secrets, voice models, and specific model names. This allows for customization of the technical aspects of the character's implementation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"settings\": {\n  \"secrets\": { \"API_KEY\": \"your-api-key\" },\n  \"voice\": { \"model\": \"voice-model-id\", \"url\": \"voice-service-url\" },\n  \"model\": \"specific-model-name\",\n  \"embeddingModel\": \"embedding-model-name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Search by Embedding - TypeScript\nDESCRIPTION: This code snippet demonstrates how to perform a vector similarity search for memory retrieval based on an embedding vector.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Search by embedding vector\nconst memories = await db.searchMemories({\n  tableName: \"memories\",\n  roomId: room.id,\n  embedding: [0.1, 0.2, ...], // 1536-dimensional vector\n  match_threshold: 0.8,\n  match_count: 10,\n  unique: true\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Error Handling with Detailed Logging in TypeScript\nDESCRIPTION: Enhanced error handling method that handles rate limits, authentication failures, and network errors with detailed structured logging. This implementation provides more verbose error information and adds network reconnection handling.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass BaseClient {\n    protected async handleError(error: Error) {\n        if (error.code === \"RATE_LIMIT\") {\n            await this.handleRateLimit(error);\n        } else if (error.code === \"AUTH_FAILED\") {\n            await this.refreshAuth();\n        } else if (error.code === \"NETWORK_ERROR\") {\n            await this.reconnect();\n        }\n\n        // Log error\n        console.error(\"Client error:\", {\n            type: error.name,\n            message: error.message,\n            code: error.code,\n            stack: error.stack,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Token Refresh Implementation\nDESCRIPTION: Token refresh mechanism for handling authentication failures.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nasync refreshAuth() {\n\tconst newToken = await this.requestNewToken();\n\tawait this.updateToken(newToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Form Plugin Configuration in TypeScript\nDESCRIPTION: Code snippet showing how to configure and add the Form plugin to a character's configuration in ElizaOS. This imports the plugin from the @elizaos/plugin-form package and adds it to the character's plugins array.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formPlugin } from \"@elizaos/plugin-form\";\n\nconst character = {\n    plugins: [formPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Knowledge Item from Database\nDESCRIPTION: This abstract method removes a knowledge item and its associated chunks from the database. It requires an ID parameter formatted as a string UUID and returns a Promise resolving upon completion. Must be implemented as per the IDatabaseAdapter interface.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n> `abstract` **removeKnowledge**(`id`): `Promise`\\<`void`\\>\\n\\nRemoves a knowledge item and its associated chunks from the database.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Knowledge Items\nDESCRIPTION: This abstract method retrieves knowledge items based on specified parameters. It supports optional search parameters such as id, limit, query, and conversation context. The method returns a Promise resolving to an array of RAGKnowledgeItem objects. It must adhere to the IDatabaseAdapter interface.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n> `abstract` **getKnowledge**(`params`): `Promise`\\<[`RAGKnowledgeItem`](../interfaces/RAGKnowledgeItem.md)[]\\>\\n\\nRetrieves knowledge items based on specified parameters.\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Processing Service in Eliza\nDESCRIPTION: Demonstrates how to import and initialize the VideoService from Eliza's core and use it to process video content. The service supports automatic downloading, transcription, subtitle extraction, and caching.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VideoService } from \"@elizaos/core/plugin-node\";\n\n// Initialize service\nconst videoService = new VideoService();\n\n// Process video content\nconst result = await videoService.processVideo(url, runtime);\n```\n\n----------------------------------------\n\nTITLE: Defining IAgentConfig Interface in TypeScript\nDESCRIPTION: Defines an interface that allows for dynamic string key-value pairs. The interface is indexable, meaning it can contain any number of string properties with string values.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAgentConfig.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[key: string]: string\n```\n\n----------------------------------------\n\nTITLE: Environment File Management Best Practices\nDESCRIPTION: This code demonstrates how to maintain separate .env files for different environments, which is crucial for environment-specific configurations and keeping sensitive data secure.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# .gitignore\n.env\n.env.*\ncharacters/**/secrets.json\n**/serviceAccount.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Data in TypeScript\nDESCRIPTION: Implements the get method from ICacheAdapter interface to retrieve a value from the cache by its key. Returns a Promise that resolves to the cached string value.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DbCacheAdapter.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget(key): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Formatting Data in JSONL for Fine-tuning\nDESCRIPTION: Shows the basic JSONL format for preparing training data for fine-tuning. Each line contains a JSON object with a 'text' field that holds a training example. This format is recommended for beginners due to its simplicity.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/fine-tuning.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"Your training example here\"}\n{\"text\": \"Another training example\"}\n```\n\n----------------------------------------\n\nTITLE: Setting up SQLite Adapter - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the SQLite database adapter in Eliza using the better-sqlite3 library. It creates a database instance from a local file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqliteDatabaseAdapter } from \"@eliza/adapter-sqlite\";\nimport Database from \"better-sqlite3\";\n\nconst db = new SqliteDatabaseAdapter(new Database(\"./dev.db\"));\n```\n\n----------------------------------------\n\nTITLE: Fact Chaining Pattern Example\nDESCRIPTION: This example demonstrates how the Fact Evaluator can enable inference potential by chaining related facts together to derive new insights about users.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/fact-evaluator.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Original facts\n\"Works at tech startup\"\n\"Startup is in Seattle\"\n\n// Inference potential\n\"Works in Seattle tech industry\"\n```\n\n----------------------------------------\n\nTITLE: Defining Character Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias for a Character object. It includes various properties for configuring an agent character, such as name, model providers, templates, biography, and settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Character.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Character = {\n  id?: UUID;\n  name: string;\n  username?: string;\n  email?: string;\n  system?: string;\n  modelProvider: ModelProviderName;\n  imageModelProvider?: ModelProviderName;\n  imageVisionModelProvider?: ModelProviderName;\n  modelEndpointOverride?: string;\n  templates?: {\n    goalsTemplate?: TemplateType;\n    factsTemplate?: TemplateType;\n    messageHandlerTemplate?: TemplateType;\n    shouldRespondTemplate?: TemplateType;\n    continueMessageHandlerTemplate?: TemplateType;\n    evaluationTemplate?: TemplateType;\n    // ... other template properties\n  };\n  bio: string | string[];\n  lore: string[];\n  messageExamples: MessageExample[][];\n  postExamples: string[];\n  topics: string[];\n  adjectives: string[];\n  knowledge?: (string | object | object)[];\n  plugins: Plugin[];\n  postProcessors?: Pick<Plugin, \"name\" | \"description\" | \"handlePostCharacterLoaded\">[];\n  settings?: {\n    secrets?: { [key: string]: string };\n    intiface?: boolean;\n    imageSettings?: {\n      steps?: number;\n      width?: number;\n      height?: number;\n      // ... other image settings\n    };\n    voice?: {\n      model?: string;\n      url?: string;\n      elevenlabs?: {\n        voiceId: string;\n        model?: string;\n        stability?: string;\n        similarityBoost?: string;\n        style?: string;\n        useSpeakerBoost?: string;\n      };\n    };\n    model?: string;\n    modelConfig?: ModelConfiguration;\n    embeddingModel?: string;\n    chains?: {\n      evm?: any[];\n      solana?: any[];\n    };\n    transcription?: TranscriptionProvider;\n    ragKnowledge?: boolean;\n  };\n  clientConfig?: {\n    discord?: {\n      shouldIgnoreBotMessages?: boolean;\n      shouldIgnoreDirectMessages?: boolean;\n      shouldRespondOnlyToMentions?: boolean;\n      messageSimilarityThreshold?: number;\n      isPartOfTeam?: boolean;\n      teamAgentIds?: string[];\n      teamLeaderId?: string;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Evaluation Template Constant in TypeScript\nDESCRIPTION: Defines a constant variable named evaluationTemplate of type string. This template is used for the evaluation generateText function in the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/evaluationTemplate.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst evaluationTemplate: string\n```\n\n----------------------------------------\n\nTITLE: Message Processing Error Handler\nDESCRIPTION: Message processing implementation with error handling for invalid formats.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nasync processMessage(message) {\n\ttry {\n\t\treturn await this.messageProcessor(message);\n\t} catch (error) {\n\t\tif (error.code === \"INVALID_FORMAT\") {\n\t\t\treturn this.handleInvalidFormat(message);\n\t\t}\n\t\tthrow error;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Discord Messages and Attachments\nDESCRIPTION: Implementation of Discord message handling logic, including filtering bot messages, processing attachments, and generating responses.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass MessageManager {\n    async handleMessage(message) {\n        // Ignore bot messages\n        if (message.author.bot) return;\n\n        // Process attachments\n        if (message.attachments.size > 0) {\n            await this.processAttachments(message);\n        }\n\n        // Generate response\n        await this.generateResponse(message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Plugin Configuration in TypeScript\nDESCRIPTION: Configuration setup for the Coinbase webhook plugin\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { webhookPlugin } from \"@eliza/plugin-coinbase-webhooks\";\n\nconst character = {\n    plugins: [webhookPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Image Description Service in Eliza\nDESCRIPTION: Shows how to leverage Eliza's ImageDescriptionService for advanced image analysis. The service supports both local and cloud processing with CUDA acceleration and automatic format handling.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ImageDescriptionService } from \"@elizaos/core/plugin-node\";\n\nconst imageService = new ImageDescriptionService();\nconst description = await imageService.describeImage(imageUrl, \"gpu\", runtime);\n```\n\n----------------------------------------\n\nTITLE: Form Plugin Usage Examples in TypeScript\nDESCRIPTION: Examples of using the Form plugin actions within a TypeScript application. Shows how to buy curves tokens and withdraw/convert them to ERC20 tokens using the runtime.processAction method.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// Buying curves tokens\nawait runtime.processAction(\"BUY_CURVES_TOKEN\", {\n    subject: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n    amount: 1,\n    formula: \"QUADRATIC\"\n});\n\n// Converting to ERC20\nawait runtime.processAction(\"WITHDRAW_CURVES_TOKEN\", {\n    subject: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n    amount: 1,\n    formula: \"QUADRATIC\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration Class for JSDoc Generation - TypeScript\nDESCRIPTION: This snippet explains the purpose of the Configuration class that manages configuration loading from environment variables with fallback to YAML workflow files. It contains default values like repository, branch, and commit message.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/scripts/jsdoc-automation/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Config File\n\nThe `src/Configuration.ts` handles configuration loading from environment variables with fallback to YAML workflow files.\n```\n\n----------------------------------------\n\nTITLE: Generating Attestation in TEE Using RemoteAttestationProvider - TypeScript\nDESCRIPTION: This snippet shows how to instantiate the RemoteAttestationProvider to generate attestation quotes for verification in a TEE environment. It includes how to setup the provider and the necessary function for generating attestation quotes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new RemoteAttestationProvider(teeMode);\nconst quote = await provider.generateAttestation(reportData);\n```\n\n----------------------------------------\n\nTITLE: Registering Plugins in TypeScript\nDESCRIPTION: In this TypeScript snippet, multiple plugins are imported and registered within a character configuration object, allowing the character to utilize the functionalities provided by those plugins.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapPlugin } from \"@eliza/plugin-bootstrap\";\nimport { imageGenerationPlugin } from \"@eliza/plugin-image-generation\";\nimport { buttplugPlugin } from \"@eliza/plugin-buttplug\";\nconst character = {\n    // ... other character config\n    plugins: [bootstrapPlugin, imageGenerationPlugin, buttplugPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TranscriptionProvider Enum in TypeScript\nDESCRIPTION: Enumeration defining the available transcription providers supported by the elizaOS core system. Includes three options: OpenAI for cloud-based transcription, Deepgram for specialized speech-to-text, and Local for on-device processing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/TranscriptionProvider.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum TranscriptionProvider {\n  OpenAI = \"openai\",\n  Deepgram = \"deepgram\",\n  Local = \"local\"\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Twitter Posts with TypeScript\nDESCRIPTION: Implementation of a Twitter Post Client class that handles creating and managing Twitter posts. It provides methods for creating new posts and replying to existing tweets, with support for media processing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass TwitterPostClient {\n    async createPost(content: string) {\n        return await this.post({\n            text: content,\n            media: await this.processMedia(),\n        });\n    }\n\n    async replyTo(tweetId: string, content: string) {\n        return await this.post({\n            text: content,\n            reply: { in_reply_to_tweet_id: tweetId },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Messages with Registered Evaluators\nDESCRIPTION: Method to evaluate messages using registered evaluators. It processes the message and state through each evaluator and collects the results.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync evaluate(message: Memory, state: State, didRespond?: boolean, callback?: HandlerCallback): Promise<string[]> {\n  const results: string[] = [];\n\n  for (const evaluator of this.evaluators) {\n    try {\n      const result = await evaluator.evaluate(message, state, didRespond);\n      if (result && callback) {\n        await callback({\n          kind: 'evaluation',\n          name: evaluator.name,\n          result\n        });\n      }\n\n      if (result) {\n        results.push(`${evaluator.name}: ${result}`);\n      }\n    } catch (e) {\n      console.error(`Error evaluating message with ${evaluator.name}:`, e);\n    }\n  }\n\n  return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Character in TypeScript\nDESCRIPTION: TypeScript code for defining a custom AI character by extending the DefaultCharacter. This code configures the character with Twitter client integration and the Anthropic model provider.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_15min.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultCharacter } from \"./defaultCharacter\";\nimport { clients } from \"../globalClients\";\n\nexport const mainCharacter = {\n    ...DefaultCharacter,\n    clients: { twitter: clients.twitter },\n    modelProvider: modelProviders.anthropic,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Data in TypeScript\nDESCRIPTION: Implements the set method from ICacheAdapter interface to store a value in the cache with the specified key. Returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DbCacheAdapter.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nset(key, value): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: generateObjectDeprecated in TypeScript\nDESCRIPTION: This deprecated function generates objects asynchronously using the provided agent runtime, context string, and model class. It returns a Promise that resolves to any type of value. The function is defined in the generation.ts file of the core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateObjectDeprecated.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateObjectDeprecated({ runtime, context, modelClass }): Promise<any>\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache Data in TypeScript\nDESCRIPTION: Implements the delete method from ICacheAdapter interface to remove a value from the cache by its key. Returns a Promise that resolves when the deletion is complete.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DbCacheAdapter.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ndelete(key): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Memories in TypeScript\nDESCRIPTION: Methods for removing individual memories by ID or all memories associated with a room ID.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryManager.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync removeMemory(memoryId: string): Promise<void>\nasync removeAllMemories(roomId: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Testing ElizaOS Plugin with Mock Client\nDESCRIPTION: Demonstrates how to use the mock client for rapid testing of ElizaOS plugins during development. This command runs the mock Eliza environment with a specified test character file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm mock-eliza --characters=./characters/test.character.json\n```\n\n----------------------------------------\n\nTITLE: S3 Service Type Accessor Definition\nDESCRIPTION: Abstract getter that returns the service type enum value for AWS S3 service implementation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAwsS3Service.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget serviceType(): ServiceType\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Interface for Data Retrieval in TypeScript\nDESCRIPTION: Defines the Provider interface with a 'get' method for retrieving external data or services. The method takes runtime, message, and optional state parameters, returning a Promise of any type.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Provider.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Provider {\n  get: (runtime: IAgentRuntime, message: Memory, state?: State) => Promise<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Values from MemoryCacheAdapter in TypeScript\nDESCRIPTION: Implements the delete method from ICacheAdapter interface which removes a key-value pair from the cache by its key. Returns a Promise that resolves when the deletion completes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryCacheAdapter.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ndelete(key: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting Up PgLite Database Adapter\nDESCRIPTION: TypeScript code for initializing a PgLite database adapter in Eliza. PgLite is configured with a data directory for storing database files locally.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGLiteDatabaseAdapter } from \"@elizaos/adapter-pglite\";\n\nconst db = new PGLiteDatabaseAdapter(\n    new PGLite({\n        dataDir: \"./db\"\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Performance Metrics in TypeScript\nDESCRIPTION: This function calculates several performance metrics from trades derived from recommendations. It uses TypeScript to provide key financial indicators such as profitability and risk-adjusted returns, relying on historical trade execution data as its input.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PerformanceMetrics {\n    profitability: number;\n    consistency: number;\n    riskAdjustedReturn: number;\n    maxDrawdown: number;\n    winRate: number;\n}\n\nasync function calculatePerformanceMetrics(\n    recommendations: TokenRecommendation[],\n): Promise<PerformanceMetrics> {\n    const trades = await getTradesFromRecommendations(recommendations);\n\n    return {\n        profitability: calculateProfitability(trades),\n        consistency: calculateConsistency(trades),\n        riskAdjustedReturn: calculateSharpeRatio(trades),\n        maxDrawdown: calculateMaxDrawdown(trades),\n        winRate: calculateWinRate(trades),\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Discord Messages with TypeScript\nDESCRIPTION: Implementation of a Message Manager class for handling Discord messages. It processes incoming messages, filters out bot messages, handles attachments, and generates appropriate responses.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass MessageManager {\n    async handleMessage(message) {\n        // Ignore bot messages\n        if (message.author.bot) return;\n\n        // Process attachments\n        if (message.attachments.size > 0) {\n            await this.processAttachments(message);\n        }\n\n        // Generate response\n        await this.generateResponse(message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up CUDA for Local Acceleration\nDESCRIPTION: Commands to install dependencies and download node-llama-cpp with CUDA support for GPU acceleration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_CN.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\nnpx --no node-llama-cpp source download --gpu cuda\n```\n\n----------------------------------------\n\nTITLE: Disconnect Handler Implementation\nDESCRIPTION: Connection failure handling with retry mechanism.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nasync handleDisconnect() {\n\tawait this.reconnect({\n\t\tmaxAttempts: 5,\n\t\tbackoff: \"exponential\",\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Buy Curves Token Action Example in JSON\nDESCRIPTION: JSON example for the BUY_CURVES_TOKEN action that purchases curves tokens for a subject address. The example specifies the subject address, amount of tokens to buy, and the formula type to use.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subject\": \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n  \"amount\": 1,\n  \"formula\": \"QUADRATIC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Character Configuration File in JSON\nDESCRIPTION: Defines the structure of a character file that specifies the agent's personality, supported clients, model provider, and custom settings including character-specific API keys.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"AgentName\",\n    \"clients\": [\"discord\", \"twitter\"],\n    \"modelProvider\": \"openai\",\n    \"settings\": {\n        \"secrets\": {\n            \"OPENAI_API_KEY\": \"character-specific-key\",\n            \"DISCORD_TOKEN\": \"bot-specific-token\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Model Response Behavior in ElizaOS Core (TypeScript)\nDESCRIPTION: This function sends a message to the model to evaluate whether it should respond to the given context. It takes options including the agent runtime, context string, and model class, and returns a Promise that resolves to RESPOND, IGNORE, STOP, or null.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateShouldRespond.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateShouldRespond(opts): Promise<\"RESPOND\" | \"IGNORE\" | \"STOP\" | null>\n```\n\n----------------------------------------\n\nTITLE: Processing Documents for RAG Knowledge Base Using Command Line\nDESCRIPTION: Bash commands for processing documents and integrating them with character knowledge in the ElizaOS system. This enables the conversion and preparation of documents for RAG.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Convert and process documents\nnpx folder2knowledge ./docs/content\n\n# Integrate with character knowledge\nnpx knowledge2character ./characters/agent.json ./knowledge/processed\n```\n\n----------------------------------------\n\nTITLE: Message Queuing Implementation in TypeScript\nDESCRIPTION: Simple message queue implementation that allows messages to be added to a queue and processed asynchronously. This pattern helps manage message flow and handle backpressure in client applications.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nclass MessageQueue {\n    async queueMessage(message: Message) {\n        await this.queue.push(message);\n        this.processQueue();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Trust Score Database Schema in TypeScript\nDESCRIPTION: This snippet defines the database schema with interfaces for handling trust scores and related data such as recommenders, metrics, and token performance. It requires a TypeScript environment, with details on recommenders and metrics like trust score, token performance, and risk factors.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TrustScoreDatabase {\n    // Core data structures\n    recommenders: Recommender[];\n    metrics: RecommenderMetrics[];\n    tokenPerformance: TokenPerformance[];\n    recommendations: TokenRecommendation[];\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Recommender {\n    id: string;\n    address: string;\n    solanaPubkey?: string;\n    telegramId?: string;\n    discordId?: string;\n    twitterId?: string;\n    ip?: string;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RecommenderMetrics {\n    recommenderId: string;\n    trustScore: number;\n    totalRecommendations: number;\n    successfulRecs: number;\n    avgTokenPerformance: number;\n    riskScore: number;\n    consistencyScore: number;\n    virtualConfidence: number;\n    lastActiveDate: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenizerType Enumeration in TypeScript\nDESCRIPTION: Defines an enumeration for tokenizer types with two values: 'auto' and 'tiktoken'. This is likely used to specify which tokenization method to use when processing text in the elizaOS system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/TokenizerType.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum TokenizerType {\n  Auto = \"auto\",\n  TikToken = \"tiktoken\"\n}\n```\n\n----------------------------------------\n\nTITLE: Character Configuration with Secrets\nDESCRIPTION: Shows how to configure secrets and environment variables in an agent's character settings. This allows plugins to access sensitive data without hardcoding credentials.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"MyAgent\",\n  \"settings\": {\n    \"secrets\": {\n      \"PLUGIN_API_KEY\": \"your-api-key\",\n      \"PLUGIN_SECRET\": \"your-secret\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Integration in Environment Variables\nDESCRIPTION: Sets up the Telegram bot token needed for integrating Eliza with Telegram. This is the only required variable for Telegram integration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTELEGRAM_BOT_TOKEN=       # Telegram bot token\n```\n\n----------------------------------------\n\nTITLE: Defining GenerationOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the configuration options for generating objects using a model. It includes required properties for runtime, context, and modelClass, along with optional properties for schema configuration, generation mode, and metadata.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/GenerationOptions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GenerationOptions {\n  runtime: IAgentRuntime;\n  context: string;\n  modelClass: ModelClass;\n  schema?: ZodType<any, ZodTypeDef, any>;\n  schemaName?: string;\n  schemaDescription?: string;\n  stop?: string[];\n  mode?: \"auto\" | \"json\" | \"tool\";\n  experimental_providerMetadata?: Record<string, unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Room and Participant Management with Database Adapters\nDESCRIPTION: TypeScript code showing room and participant management operations with database adapters in Eliza, including creating rooms, adding participants, getting participants for a room, and retrieving rooms for a participant.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Create room\nconst roomId = await db.createRoom();\n\n// Add participant\nawait db.addParticipant(userId, roomId);\n\n// Get participants\nconst participants = await db.getParticipantsForRoom(roomId);\n\n// Get rooms for participant\nconst rooms = await db.getRoomsForParticipant(userId);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Deva Client Interface in TypeScript\nDESCRIPTION: Implementation of the Deva Client Interface that provides the start method for initializing the Deva client. It validates the Deva configuration, creates a new client instance with the necessary API credentials, and logs success upon successful startup.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DevaClientInterface: Client = {\n    async start(runtime: IAgentRuntime) {\n        await validateDevaConfig(runtime);\n\n        const deva = new DevaClient(\n            runtime,\n            runtime.getSetting(\"DEVA_API_KEY\"),\n            runtime.getSetting(\"DEVA_API_BASE_URL\"),\n        );\n\n        await deva.start();\n\n        elizaLogger.success(\n            `✅ Deva client successfully started for character ${runtime.character.name}`,\n        );\n\n        return deva;\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Model Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the 'Model' type alias as an object with various properties for configuring AI models. It includes an optional API endpoint and nested objects for different model sizes and specialized models like embedding and image models.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Model.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Model = {\n  endpoint?: string;\n  model: {\n    small?: ModelSettings;\n    medium?: ModelSettings;\n    large?: ModelSettings;\n    embedding?: EmbeddingModelSettings;\n    image?: ImageModelSettings;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ActionTimelineType Enum in TypeScript\nDESCRIPTION: Defines an enumeration type ActionTimelineType with two string literal values: 'foryou' and 'following'. This enum is likely used for timeline filtering or display purposes in the elizaOS system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/ActionTimelineType.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum ActionTimelineType {\n    ForYou = \"foryou\",\n    Following = \"following\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring getGoals Function in TypeScript\nDESCRIPTION: This snippet defines the getGoals function, which takes an object with parameters including runtime, roomId, userId, onlyInProgress, and count. It returns a Promise that resolves to an array of Goal objects.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getGoals.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetGoals(__namedParameters): Promise<Goal[]>\n```\n\n----------------------------------------\n\nTITLE: Developing Advanced Actions for Eliza Plugins\nDESCRIPTION: Shows how to create complex actions for Eliza plugins with validation logic and handler implementation. The action includes support for alternative names and custom options.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const complexAction: Action = {\n    name: \"COMPLEX_ACTION\",\n    similes: [\"ALTERNATIVE_NAME\", \"OTHER_NAME\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        // Implement validation logic\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: { [key: string]: unknown },\n        callback?: HandlerCallback,\n    ): Promise<boolean> => {\n        // Implement complex handling logic\n        return true;\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Validating OpenAI API Key Format - TypeScript\nDESCRIPTION: This snippet validates the format of the OpenAI API key, ensuring it begins with the required prefix and logging a masked version to enhance security.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/secrets-management.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// OpenAI API key validation\nconst apiKey = runtime.getSetting(\"OPENAI_API_KEY\");\nif (apiKey && !apiKey.startsWith(\"sk-\")) {\n  throw new Error(\"Invalid OpenAI API key format\");\n}\n\n// Mask before logging\nconst maskedKey = apiKey ? `${apiKey.substring(0, 5)}...` : \"not set\";\nconsole.log(\"Using API key:\", maskedKey);\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory System Health Checks\nDESCRIPTION: Function that gathers and returns health statistics about the memory system. Collects information about total memories, oldest memory, embedding performance, and cache efficiency.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync function checkMemoryHealth(runtime: AgentRuntime) {\n    const stats = await runtime.messageManager.getStats();\n    const health = {\n        totalMemories: stats.count,\n        oldestMemory: stats.oldestTimestamp,\n        averageEmbeddingTime: stats.avgEmbeddingMs,\n        cacheHitRate: stats.cacheHitRate\n    };\n    \n    return health;\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Participant Exists in Room\nDESCRIPTION: Method to ensure a participant exists in a room. If the participant doesn't exist, they are added to the room using the database service.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nasync ensureParticipantExists(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<void> {\n  const database = this.getService<DatabaseService>(ServiceType.DATABASE);\n  const result = await database.ensureParticipantExists(userId, roomId);\n  \n  if (!result) {\n    throw new Error(`Failed to add participant ${userId} to room ${roomId}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQLite Database Adapter\nDESCRIPTION: TypeScript code for initializing an SQLite database adapter in Eliza. The adapter is created with a better-sqlite3 database instance and configuration options for file-based storage.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqliteDatabaseAdapter } from \"@elizaos/adapter-sqlite\";\nimport Database from \"better-sqlite3\";\n\nconst db = new SqliteDatabaseAdapter(\n    new Database(\"./db.sqlite\", {\n        // SQLite options\n        memory: false,\n        readonly: false,\n        fileMustExist: false,\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Generate Method in ISpeechService\nDESCRIPTION: Method declaration for generating speech from text input. Takes runtime and text parameters and returns a Promise containing a Readable stream.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ISpeechService.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngenerate(runtime: IAgentRuntime, text: string): Promise<Readable>\n```\n\n----------------------------------------\n\nTITLE: Running Eliza Agent Locally with TEE Simulator - Bash\nDESCRIPTION: These commands detail the steps necessary to install dependencies, build, and run the Eliza agent locally, specifically for Mac/Windows users. It includes configuration and running the agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm build\npnpm start --character=./characters/yourcharacter.character.json\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Interface Properties in TypeScript\nDESCRIPTION: Defines the properties of the Memory interface, including identifiers, timestamps, content, and metadata. Each property is typed and some are optional.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Memory.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Memory {\n  id?: `${string}-${string}-${string}-${string}-${string}`;\n  userId: `${string}-${string}-${string}-${string}-${string}`;\n  agentId: `${string}-${string}-${string}-${string}-${string}`;\n  createdAt?: number;\n  content: Content;\n  embedding?: number[];\n  roomId: `${string}-${string}-${string}-${string}-${string}`;\n  unique?: boolean;\n  similarity?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Error Handler with Network Error Support\nDESCRIPTION: Enhanced error handling implementation including network error handling and detailed error logging.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass BaseClient {\n    protected async handleError(error: Error) {\n        if (error.code === \"RATE_LIMIT\") {\n            await this.handleRateLimit(error);\n        } else if (error.code === \"AUTH_FAILED\") {\n            await this.refreshAuth();\n        } else if (error.code === \"NETWORK_ERROR\") {\n            await this.reconnect();\n        }\n\n        // Log error\n        console.error(\"Client error:\", {\n            type: error.name,\n            message: error.message,\n            code: error.code,\n            stack: error.stack,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message State Update in TypeScript\nDESCRIPTION: Function that updates the recent message state in the system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nupdateRecentMessageState(state: State): Promise<State>\n```\n\n----------------------------------------\n\nTITLE: Character Configuration Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the Character configuration, focusing on the clientConfig property which defines platform-specific behaviors and settings for different clients like Discord, Telegram, and Slack.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/clients.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Character = {\n    // ... other properties ...\n    clientConfig?: {\n        discord?: {\n            shouldIgnoreBotMessages?: boolean;\n            shouldIgnoreDirectMessages?: boolean;\n            shouldRespondOnlyToMentions?: boolean;\n            messageSimilarityThreshold?: number;\n            isPartOfTeam?: boolean;\n            teamAgentIds?: string[];\n            teamLeaderId?: string;\n            teamMemberInterestKeywords?: string[];\n            allowedChannelIds?: string[];\n            autoPost?: {\n                enabled?: boolean;\n                monitorTime?: number;\n                inactivityThreshold?: number;\n                mainChannelId?: string;\n                announcementChannelIds?: string[];\n                minTimeBetweenPosts?: number;\n            };\n        };\n        telegram?: {\n            shouldIgnoreBotMessages?: boolean;\n            shouldIgnoreDirectMessages?: boolean;\n            shouldRespondOnlyToMentions?: boolean;\n            shouldOnlyJoinInAllowedGroups?: boolean;\n            allowedGroupIds?: string[];\n            messageSimilarityThreshold?: number;\n            // ... other telegram-specific settings\n        };\n        slack?: {\n            shouldIgnoreBotMessages?: boolean;\n            shouldIgnoreDirectMessages?: boolean;\n        };\n        // ... other client configs\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Example Contract Interaction (Typescript)\nDESCRIPTION: This snippet demonstrates how to invoke a method on a deployed smart contract using the Token Contract plugin. It includes the `contractAddress`, `method`, `abi`, `args`, and `network` parameters for calling the contract's `transfer` method.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"INVOKE_CONTRACT\", {\n  contractAddress: \"0x123...\",\n  method: \"transfer\",\n  abi: [...],\n  args: {\n    to: \"0x456...\",\n    amount: \"1000000000000000000\"\n  },\n  network: \"base\"\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Participant States in ElizaOS\nDESCRIPTION: Examples of getting and setting participant states within rooms, as well as retrieving all participants for an account. These functions are pivotal for managing user interactions within the system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/adapter-sqlite/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Get participant state\nconst state = await adapter.getParticipantUserState(roomId, userId);\n\n// Set participant state\nawait adapter.setParticipantUserState(roomId, userId, 'FOLLOWED');\n\n// Get all participants for an account\nconst participants = await adapter.getParticipantsForAccount(userId);\n```\n\n----------------------------------------\n\nTITLE: Defining KnowledgeScope Enumeration in TypeScript\nDESCRIPTION: This snippet defines an enumeration called KnowledgeScope with two members: SHARED and PRIVATE. It is part of the elizaOS core package and is likely used to specify the visibility or accessibility of knowledge within the system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/KnowledgeScope.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum KnowledgeScope {\n  SHARED = \"shared\",\n  PRIVATE = \"private\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Index for Vector Search - SQL\nDESCRIPTION: This SQL command creates an index on the memories table for efficient vector similarity search operations, improving performance during searches.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n// Create appropriate indexes\nCREATE INDEX embedding_idx ON memories\nUSING ivfflat (embedding vector_cosine_ops)\nWITH (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: Defining CacheKeyPrefix Enumeration in TypeScript\nDESCRIPTION: Defines an enumeration member KNOWLEDGE with the string value 'knowledge' that serves as a prefix for cache keys related to knowledge storage.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/CacheKeyPrefix.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nKNOWLEDGE: \"knowledge\"\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling Implementation in TypeScript Client\nDESCRIPTION: Implements a base error handling method for client errors, with specific handling for rate limits and authentication failures. This method logs errors and routes them to specific handlers based on error codes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nclass BaseClient {\n    protected async handleError(error: Error) {\n        console.error(\"Client error:\", error);\n\n        if (error.code === \"RATE_LIMIT\") {\n            await this.handleRateLimit(error);\n        } else if (error.code === \"AUTH_FAILED\") {\n            await this.refreshAuth();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModelConfiguration Interface in TypeScript\nDESCRIPTION: This snippet defines the ModelConfiguration interface with optional properties for configuring language model behavior. It includes settings for temperature, token limits, penalties, and experimental telemetry.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ModelConfiguration.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ModelConfiguration {\n  temperature?: number;\n  maxOutputTokens?: number;\n  frequency_penalty?: number;\n  presence_penalty?: number;\n  maxInputTokens?: number;\n  experimental_telemetry?: TelemetrySettings;\n}\n```\n\n----------------------------------------\n\nTITLE: Cleanup of Old Memories - TypeScript\nDESCRIPTION: This code demonstrates how to periodically clean up old memories in the Eliza application to manage storage and optimize memory usage.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Clean up old memories periodically\nawait db.removeAllMemories(roomId, tableName);\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin\nDESCRIPTION: Extended ESLint configuration that incorporates React-specific rules and plugins. Sets up React version, enables recommended rules, and configures JSX runtime settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/client/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from \"eslint-plugin-react\";\n\nexport default tseslint.config({\n    // Set the react version\n    settings: { react: { version: \"18.3\" } },\n    plugins: {\n        // Add the react plugin\n        react,\n    },\n    rules: {\n        // other rules...\n        // Enable its recommended rules\n        ...react.configs.recommended.rules,\n        ...react.configs[\"jsx-runtime\"].rules,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository - Bash\nDESCRIPTION: Provides commands to clone the Eliza repository and navigate to its directory. Prerequisite for setting up the development environment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository\ngit clone https://github.com/elizaos/eliza.git\ncd eliza\n```\n\n----------------------------------------\n\nTITLE: Defining HandlerCallback Type Alias in TypeScript\nDESCRIPTION: Defines the HandlerCallback type alias as a function that takes a Content object and optional files, returning a Promise of an array of Memory objects. This type is used for handler callbacks in the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/HandlerCallback.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nHandlerCallback: (response: Content, files?: any) => Promise<Memory[]>\n```\n\n----------------------------------------\n\nTITLE: Registering Evaluator in Runtime\nDESCRIPTION: Method to register an evaluator that assesses and guides the agent's responses. Adds the evaluator to the evaluators collection.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nregisterEvaluator(evaluator: Evaluator): void {\n  this.evaluators.push(evaluator);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getGoals Function Parameters in TypeScript\nDESCRIPTION: This snippet outlines the parameters for the getGoals function, including the IAgentRuntime object, roomId as a UUID string, optional userId as a UUID string, optional onlyInProgress boolean defaulting to true, and optional count number defaulting to 5.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getGoals.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n• __namedParameters: {\n  runtime: IAgentRuntime;\n  roomId: `${string}-${string}-${string}-${string}-${string}`;\n  userId?: `${string}-${string}-${string}-${string}-${string}`;\n  onlyInProgress?: boolean;\n  count?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IGNORE Action in ElizaOS (TypeScript)\nDESCRIPTION: Defines an IGNORE action that stops responding when a conversation is complete or irrelevant. It validates input for goodbye messages or short texts, and handles the action by returning true without a response.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/actions.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst ignoreAction: Action = {\n    name: \"IGNORE\",\n    similes: [\"STOP_TALKING\", \"END_CONVERSATION\"],\n    description: \"Stops responding when conversation is complete or irrelevant\",\n\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        const text = message.content.text.toLowerCase();\n        return (\n            text.includes(\"goodbye\") ||\n            text.includes(\"bye\") ||\n            text.includes(\"thanks\") ||\n            text.length < 2\n        );\n    },\n\n    handler: async (runtime: IAgentRuntime, message: Memory) => {\n        // No response needed\n        return true;\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Thanks, goodbye!\" }\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"\",\n                    action: \"IGNORE\"\n                }\n            }\n        ]\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Coinbase MassPayments Plugin (Typescript)\nDESCRIPTION: This code snippet demonstrates how to import the Coinbase MassPayments plugin into a character's configuration within the elizaOS framework. It adds the plugin to the character's list of plugins, enabling the character to use the mass payout functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinbaseMassPaymentsPlugin } from \"@eliza/plugin-coinbase-masspayments\";\n\nconst character = {\n    plugins: [coinbaseMassPaymentsPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CharacterConfig Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the CharacterConfig type alias using Zod's infer utility and the CharacterSchema. It provides type inference for character configurations in the elizaOS project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/CharacterConfig.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CharacterConfig = z.infer<typeof CharacterSchema>\n```\n\n----------------------------------------\n\nTITLE: Defining Room Interface in TypeScript for elizaOS\nDESCRIPTION: This code snippet defines the Room interface with two properties: id (a unique identifier string) and participants (an array of Participant objects). The interface is used to represent a conversation room in the elizaOS project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Room.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Room {\n  id: `${string}-${string}-${string}-${string}-${string}`;\n  participants: Participant[];\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Management Implementation\nDESCRIPTION: Client resource management implementation with connection cleanup and reconnection logic.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClientManager {\n    private async cleanup() {\n        // Close connections\n        await Promise.all(this.connections.map((conn) => conn.close()));\n\n        // Clear caches\n        this.cache.clear();\n\n        // Cancel timers\n        this.timers.forEach((timer) => clearInterval(timer));\n    }\n\n    private async reconnect() {\n        await this.cleanup();\n        await wait(this.calculateBackoff());\n        await this.initialize();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Providers in TypeScript\nDESCRIPTION: Demonstrates how to configure different database backends including SQLite for development and PostgreSQL for production environments. Each adapter requires different configuration parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// SQLite (Recommended for development)\nimport { SqliteDatabaseAdapter } from \"@your-org/agent-framework/adapters\";\nconst db = new SqliteDatabaseAdapter(\"./dev.db\");\n\n// PostgreSQL (Production)\nimport { PostgresDatabaseAdapter } from \"@your-org/agent-framework/adapters\";\nconst db = new PostgresDatabaseAdapter({\n    host: process.env.DB_HOST,\n    port: parseInt(process.env.DB_PORT),\n    database: process.env.DB_NAME,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n});\n```\n\n----------------------------------------\n\nTITLE: Cloud Model Configuration - TypeScript\nDESCRIPTION: Defines cloud model configuration that specifies the model provider and related settings for utilizing a remote AI service within the application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Cloud model configuration\nconst cloudModel = {\n    modelProvider: \"openai\",\n    settings: {\n        model: \"gpt-4o-mini\",\n        temperature: 0.7,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Investigating Trust Score Anomalies in TypeScript\nDESCRIPTION: This snippet handles the investigation of anomalies within trust scores, leveraging historical and metric data for root cause analysis. Implemented in TypeScript, it outputs detailed anomaly reports based on the gathered data.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync function investigateTrustAnomaly(\n    recommenderId: string,\n): Promise<AnomalyReport> {\n    const history = await getRecommenderHistory(recommenderId);\n    const metrics = await getRecommenderMetrics(recommenderId);\n    const trades = await getRecommenderTrades(recommenderId);\n\n    return analyzeAnomalies(history, metrics, trades);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IrysTimestamp Interface in TypeScript\nDESCRIPTION: This code snippet defines the IrysTimestamp interface with two numerical properties: 'from' and 'to'. These properties likely represent timestamp values for a time range or period.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IrysTimestamp.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IrysTimestamp {\n    from: number;\n    to: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Twitter Posts and Replies\nDESCRIPTION: Implementation of Twitter post management, including methods for creating new posts and replying to existing tweets with media support.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass TwitterPostClient {\n    async createPost(content: string) {\n        return await this.post({\n            text: content,\n            media: await this.processMedia(),\n        });\n    }\n\n    async replyTo(tweetId: string, content: string) {\n        return await this.post({\n            text: content,\n            reply: { in_reply_to_tweet_id: tweetId },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Character Lore Definition in JSON\nDESCRIPTION: Example of the lore field containing backstory elements and character traits. These define the personality and can be randomly sampled in conversations to create variety in the character's responses.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"lore\": [\n  \"Believes strongly in the power of software to transform industries\",\n  \"Known for saying 'Software is eating the world'\",\n  \"Early investor in Facebook, Twitter, and other tech giants\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript\nDESCRIPTION: Configuration for enabling type-aware lint rules in TypeScript projects. Sets up parser options with specific tsconfig files and root directory configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/client/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n    languageOptions: {\n        // other options...\n        parserOptions: {\n            project: [\"./tsconfig.node.json\", \"./tsconfig.app.json\"],\n            tsconfigRootDir: import.meta.dirname,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining EvaluationExample Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for EvaluationExample with three properties: context (string), messages (array of ActionExample), and outcome (string). Used to structure examples for evaluating agent behavior.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/EvaluationExample.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EvaluationExample {\n    context: string;\n    messages: ActionExample[];\n    outcome: string;\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Schema Definition\nDESCRIPTION: Defines SQLite schema for memories and goals tables, including FTS5 virtual table for full-text search capabilities.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst sqliteTables = `\nCREATE TABLE IF NOT EXISTS memories (...)\n\nCREATE VIRTUAL TABLE IF NOT EXISTS memory_fts\n  USING fts5(content, content_rowid=id);\n\nCREATE TABLE IF NOT EXISTS goals (...)\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining IMemoryManager Interface Properties in TypeScript\nDESCRIPTION: Defines the core properties of the IMemoryManager interface, including runtime, tableName, and constructor.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IMemoryManager {\n  runtime: IAgentRuntime;\n  tableName: string;\n  constructor: Function;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Character-Specific API Keys in JSON Configuration\nDESCRIPTION: JSON configuration showing how to set API keys and secrets specifically for a character, allowing different agents to use different credentials.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"secrets\": {\n      \"OPENAI_API_KEY\": \"your-key-here\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Configuration for VS Code - JSON\nDESCRIPTION: A JSON configuration for setting up debugging within Visual Studio Code for the Eliza project, specifying Node.js environment and parameters for launching the application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Debug Eliza\",\n            \"skipFiles\": [\"<node_internals>/**\"],\n            \"program\": \"${workspaceFolder}/src/index.ts\",\n            \"runtimeArgs\": [\"-r\", \"ts-node/register\"],\n            \"env\": {\n                \"DEBUG\": \"eliza:*\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: CacheStore Enumeration in TypeScript\nDESCRIPTION: Defines the CacheStore enumeration with three possible values for cache storage backends: 'redis', 'database', and 'filesystem'. This enumeration is used to specify which storage mechanism should be used for caching data in the elizaOS platform.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/CacheStore.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum CacheStore {\n  REDIS = \"redis\",\n  DATABASE = \"database\",\n  FILESYSTEM = \"filesystem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with dotenv - TypeScript\nDESCRIPTION: This code snippet demonstrates how to load an environment variables file using the dotenv package, allowing for configuration in a Node.js application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/secrets-management.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Add this near the start of your application\nimport dotenv from 'dotenv';\ndotenv.config({ path: '.env.development' }); // Specify exact path if needed\n```\n\n----------------------------------------\n\nTITLE: S3 Signed URL Generator Method\nDESCRIPTION: Method to generate signed URLs for S3 objects with configurable expiration time.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAwsS3Service.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateSignedUrl(fileName: string, expiresIn: number): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Voice Channel Integration\nDESCRIPTION: Example implementation of a Voice Manager class for Discord integration. This class handles joining voice channels and monitors voice state updates to respond when users join channels.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass VoiceManager {\n    // Join a voice channel\n    async handleJoinChannelCommand(interaction) {\n        await this.joinVoiceChannel(channel);\n    }\n\n    // Handle voice state updates\n    async handleVoiceStateUpdate(oldState, newState) {\n        if (newState.channelId) {\n            await this.handleUserJoinedChannel(newState);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Addition Method in TypeScript\nDESCRIPTION: Defines the addEmbeddingToMemory method for adding a memory embedding to storage.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\naddEmbeddingToMemory(memory: Memory): Promise<Memory>;\n```\n\n----------------------------------------\n\nTITLE: Defining PDF to Text Conversion Method in TypeScript Interface\nDESCRIPTION: Method signature for converting PDF buffer to text. Takes a Buffer input and returns a Promise resolving to string.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IPdfService.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconvertPdfToText(pdfBuffer: Buffer): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Eliza\nDESCRIPTION: Example .env file configuration with API keys and settings for various services including Discord, OpenAI, ElevenLabs, Twitter, and blockchain integrations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_CN.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Required environment variables\nDISCORD_APPLICATION_ID=\nDISCORD_API_TOKEN= # Bot token\nOPENAI_API_KEY=sk-* # OpenAI API key, starting with sk-\nELEVENLABS_XI_API_KEY= # API key from elevenlabs\n\n# ELEVENLABS SETTINGS\nELEVENLABS_MODEL_ID=eleven_multilingual_v2\nELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM\nELEVENLABS_VOICE_STABILITY=0.5\nELEVENLABS_VOICE_SIMILARITY_BOOST=0.9\nELEVENLABS_VOICE_STYLE=0.66\nELEVENLABS_VOICE_USE_SPEAKER_BOOST=false\nELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4\nELEVENLABS_OUTPUT_FORMAT=pcm_16000\n\nTWITTER_DRY_RUN=false\nTWITTER_USERNAME= # Account username\nTWITTER_PASSWORD= # Account password\nTWITTER_EMAIL= # Account email\n\nXAI_API_KEY=\nXAI_MODEL=\n\n\n# For asking Claude stuff\nANTHROPIC_API_KEY=\n\n# EVM\nEVM_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\n\n# Solana\nSOLANA_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\nSOLANA_PUBLIC_KEY=EXAMPLE_WALLET_PUBLIC_KEY\n\n# Fallback Wallet Configuration (deprecated)\nWALLET_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\nWALLET_PUBLIC_KEY=EXAMPLE_WALLET_PUBLIC_KEY\n\nBIRDEYE_API_KEY=\n\nSOL_ADDRESS=So11111111111111111111111111111111111111112\nSLIPPAGE=1\nSOLANA_RPC_URL=https://api.mainnet-beta.solana.com\nHELIUS_API_KEY=\n\n\n## Telegram\nTELEGRAM_BOT_TOKEN=\n\nTOGETHER_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Connection Management Implementation\nDESCRIPTION: Basic connection management with reconnection logic.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClientManager {\n    private reconnect() {\n        await this.disconnect();\n        await wait(this.backoff());\n        await this.connect();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: State Composition Function in TypeScript\nDESCRIPTION: Asynchronous function to compose a State object from a Memory message and optional additional keys.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAgentRuntime.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncomposeState(message: Memory, additionalKeys?): Promise<State>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Default Character and Storage for ElizaOS\nDESCRIPTION: Configures a default character and creates storage directories for the character's state data.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd characters\nln -svf snoop.character.json default.character.json\ncd ..\nmkdir -p data/memory/default\nchmod 750 data\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from MemoryCacheAdapter in TypeScript\nDESCRIPTION: Implements the get method from ICacheAdapter interface which retrieves a value from the cache by its key. Returns a Promise containing the string value.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryCacheAdapter.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget(key: string): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Truncating Text to Complete Sentences in TypeScript\nDESCRIPTION: This function truncates a given text to fit within a specified maximum length while ensuring the truncated text ends at a complete sentence. It takes a text string and a maximum length as parameters and returns the truncated string.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/truncateToCompleteSentence.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntruncateToCompleteSentence(text, maxLength): string\n```\n\n----------------------------------------\n\nTITLE: Registering Adapter in Runtime\nDESCRIPTION: Method to register an adapter for the agent to use. Adds the adapter to the appropriate collection based on its type.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nregisterAdapter(adapter: Adapter): void {\n  if ((adapter as LLMAdapter).generate) {\n    this.inferenceAdapter = adapter as LLMAdapter;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Service Method\nDESCRIPTION: Abstract initialization method that must be implemented by derived classes to setup the video service with runtime configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IVideoService.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract initialize(runtime: IAgentRuntime): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: SQLite Prepared Statements Implementation\nDESCRIPTION: Implements statement caching and prepared statement handling for SQLite operations to improve performance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass SqliteDatabaseAdapter extends DatabaseAdapter {\n    private statements = new Map<string, Statement>();\n\n    prepareStatement(sql: string): Statement {\n        let stmt = this.statements.get(sql);\n        if (!stmt) {\n            stmt = this.db.prepare(sql);\n            this.statements.set(sql, stmt);\n        }\n        return stmt;\n    }\n\n    async getMemoryById(id: UUID): Promise<Memory | null> {\n        const stmt = this.prepareStatement(\n            \"SELECT * FROM memories WHERE id = ?\",\n        );\n        const memory = stmt.get(id);\n        return memory\n            ? {\n                  ...memory,\n                  content: JSON.parse(memory.content),\n              }\n            : null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assessment of Trade Risk in TypeScript\nDESCRIPTION: This function assesses the risk level of a trade by factoring in trust scores and market metrics, returning risk assessment results. Written in TypeScript, it computes risk scores and suggests position sizes, considering liquidity and volume changes primarily.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function assessTradeRisk(\n    token: TokenPerformance,\n    recommender: RecommenderMetrics,\n): Promise<{\n    riskLevel: \"LOW\" | \"MEDIUM\" | \"HIGH\";\n    maxPositionSize: number;\n}> {\n    const riskFactors = {\n        tokenTrust: token.validationTrust,\n        recommenderTrust: recommender.trustScore,\n        marketMetrics: {\n            liquidity: token.liquidity,\n            volume: token.volumeChange24h,\n            holders: token.holderChange24h,\n        },\n    };\n\n    // Calculate composite risk score\n    const riskScore = calculateRiskScore(riskFactors);\n\n    // Determine position sizing\n    const maxPosition = determinePositionSize(riskScore);\n\n    return {\n        riskLevel: getRiskLevel(riskScore),\n        maxPositionSize: maxPosition,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eliza Environment\nDESCRIPTION: Demonstrates copying the example environment configuration file to setup environment variables needed for running the Eliza chatbot. This step is crucial for correct initialization of the application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Runtime Settings for Automatic Wallet Generation (Typescript)\nDESCRIPTION: This snippet demonstrates the runtime settings required for automatic wallet generation using the Coinbase MassPayments plugin. When the `runtime.character.settings.secrets` object is empty, the plugin will automatically generate a new wallet.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// For automatic wallet generation\nruntime.character.settings.secrets = {\n    // Empty settings for first run\n};\n```\n\n----------------------------------------\n\nTITLE: S3 File Upload Method Definition\nDESCRIPTION: Method for uploading files to S3 with options for signed URLs and expiration. Returns an object with success status and optional URL or error.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAwsS3Service.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuploadFile(imagePath: string, subDirectory: string, useSignedUrl: boolean, expiresIn: number): Promise<object>\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing Posts on Deva Platform\nDESCRIPTION: Method implementation for creating and publishing a post on behalf of a user on the Deva platform. It sends a POST request with the post text, reply information, and author type to create a new post through the Deva API.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\npublic async makePost({ text, in_reply_to_id }: { text: string; in_reply_to_id: string }): Promise<DevaPost> {\n    const res = await fetch(`${this.apiBaseUrl}/post`, {\n\t\t    method: \"POST\", \n        headers: {\n            Authorization: `Bearer ${this.accessToken}`,\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ text, in_reply_to_id, author_type: \"BOT\" }),\n    }).then((res) => res.json());\n\n    return res;\n```\n\n----------------------------------------\n\nTITLE: Formatting Posts Function Definition in TypeScript\nDESCRIPTION: Function signature for formatPosts that takes messages, actors, and an optional conversationHeader parameter to format conversation posts. The function accepts a named parameters object containing an array of Memory objects, an array of Actor objects, and an optional boolean flag for conversation header. Returns a formatted string output.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatPosts.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformatPosts(__namedParameters: { \n  messages: Memory[];\n  actors: Actor[];\n  conversationHeader?: boolean;\n}): string\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Eliza\nDESCRIPTION: Sample .env file configuration showing required environment variables for connecting to various platforms including Discord, OpenAI, Twitter, and other services.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_ES.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Variables de entorno necesarias\nDISCORD_APPLICATION_ID=\nDISCORD_API_TOKEN= # Bot token\nOPENAI_API_KEY=sk-* # OpenAI API key, starting with sk-\nELEVENLABS_XI_API_KEY= # API key from elevenlabs\n\n# CONFIGURACION DE ELEVENLABS\nELEVENLABS_MODEL_ID=eleven_multilingual_v2\nELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM\nELEVENLABS_VOICE_STABILITY=0.5\nELEVENLABS_VOICE_SIMILARITY_BOOST=0.9\nELEVENLABS_VOICE_STYLE=0.66\nELEVENLABS_VOICE_USE_SPEAKER_BOOST=false\nELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4\nELEVENLABS_OUTPUT_FORMAT=pcm_16000\n\nTWITTER_DRY_RUN=false\nTWITTER_USERNAME= # Account username\nTWITTER_PASSWORD= # Account password\nTWITTER_EMAIL= # Account email\n\nX_SERVER_URL=\nXAI_API_KEY=\nXAI_MODEL=\n\n\n# Para preguntarle cosas a Claude\nANTHROPIC_API_KEY=\n\nWALLET_SECRET_KEY=EXAMPLE_WALLET_SECRET_KEY\nWALLET_PUBLIC_KEY=EXAMPLE_WALLET_PUBLIC_KEY\n\nBIRDEYE_API_KEY=\n\nSOL_ADDRESS=So11111111111111111111111111111111111111112\nSLIPPAGE=1\nSOLANA_RPC_URL=https://api.mainnet-beta.solana.com\nHELIUS_API_KEY=\n\n\n## Telegram\nTELEGRAM_BOT_TOKEN=\n\nTOGETHER_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Using composeContext Function with Simple String Replacement in TypeScript\nDESCRIPTION: This example demonstrates how to use the composeContext function with a simple string template. It replaces placeholders in the format {{placeholder}} with values from a state object using basic string replacement.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/composeContext.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Given a state object and a template\nconst state = { userName: \"Alice\", userAge: 30 };\nconst template = \"Hello, {{userName}}! You are {{userAge}} years old\";\n\n// Composing the context with simple string replacement will result in:\n// \"Hello, Alice! You are 30 years old.\"\nconst contextSimple = composeContext({ state, template });\n```\n\n----------------------------------------\n\nTITLE: Defining Initialize Method in TypeScript Interface\nDESCRIPTION: Abstract initialization method that must be implemented by derived classes. Takes an IAgentRuntime parameter and returns a Promise.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IPdfService.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract initialize(runtime: IAgentRuntime): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Normalizing JSON Strings in TypeScript\nDESCRIPTION: Function that takes a potentially malformed JSON string and normalizes it by fixing common formatting issues. It handles extra spaces, unquoted values, single quotes, and ensures consistent key-value formatting. The function accepts a string parameter and returns a properly formatted JSON string.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/normalizeJsonString.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnormalizeJsonString(str: string): string\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Token Contract Plugin in TypeScript\nDESCRIPTION: This code shows how to import and configure the Coinbase Token Contract plugin in a character's configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tokenContractPlugin } from \"@eliza/plugin-coinbase\";\n\nconst character = {\n    plugins: [tokenContractPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Provider Implementation\nDESCRIPTION: Demonstrates a provider that becomes active only after specific data collection conditions are met, enabling sophisticated information gathering strategies\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/part3.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst UserDataProvider = {\n  check: (context) => {\n    const missingFields = [\n      !context.userData.name,\n      !context.userData.location,\n      !context.userData.job\n    ];\n    return missingFields.some(field => field);\n  },\n  provide: (context) => {\n    // Generate prompts for missing information\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Connection Management in TypeScript Client Manager\nDESCRIPTION: Implements a simplified reconnection method for client connections. This method handles the disconnect-wait-reconnect sequence with backoff strategy for connection reliability.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClientManager {\n    private reconnect() {\n        await this.disconnect();\n        await wait(this.backoff());\n        await this.connect();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Keys and Secrets in Environment Variables\nDESCRIPTION: Defines a set of environment variables for API keys and client authentication. This is essential for secure configuration management in Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# API Keys\nOPENAI_API_KEY=sk-*\nANTHROPIC_API_KEY=your-key\nELEVENLABS_XI_API_KEY=your-key\nGOOGLE_GENERATIVE_AI_API_KEY=your-key\n\n# Client Authentication\nDISCORD_API_TOKEN=your-token\nTELEGRAM_BOT_TOKEN=your-token\n\n# Database Credentials\nSUPABASE_URL=your-url\nSUPABASE_SERVICE_API_KEY=your-key\n\n# EVM\nEVM_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\n\n# Solana\nSOLANA_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\nSOLANA_PUBLIC_KEY=EXAMPLE_WALLET_PUBLIC_KEY\n\n# Fallback Wallet Configuration (deprecated)\nWALLET_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\nWALLET_PUBLIC_KEY=EXAMPLE_WALLET_PUBLIC_KEY\n```\n\n----------------------------------------\n\nTITLE: Defining IRAGKnowledgeManager Interface Properties in TypeScript\nDESCRIPTION: Defines the properties of the IRAGKnowledgeManager interface, including runtime of type IAgentRuntime and tableName as a string.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IRAGKnowledgeManager.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nruntime: IAgentRuntime;\ntableName: string;\n```\n\n----------------------------------------\n\nTITLE: Resource Cleanup and Reconnection in TypeScript Client Manager\nDESCRIPTION: Implements resource cleanup and reconnection methods in a client manager class. The cleanup method handles closing connections, clearing caches, and canceling timers, while the reconnect method orchestrates a complete connection reset.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClientManager {\n    private async cleanup() {\n        // Close connections\n        await Promise.all(this.connections.map((conn) => conn.close()));\n\n        // Clear caches\n        this.cache.clear();\n\n        // Cancel timers\n        this.timers.forEach((timer) => clearInterval(timer));\n    }\n\n    private async reconnect() {\n        await this.cleanup();\n        await wait(this.calculateBackoff());\n        await this.initialize();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Evaluator Details in TypeScript\nDESCRIPTION: This function takes an array of Evaluator objects and formats them into a string, concatenating the name and description of each evaluator separated by a colon and a newline character. It's defined in the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatEvaluators.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**formatEvaluators**(`evaluators`): `string`\n```\n\n----------------------------------------\n\nTITLE: Function Signature for getRelationships in @elizaos/core\nDESCRIPTION: TypeScript function signature for getRelationships that accepts a named parameter object containing runtime and userId parameters. It returns a Promise that resolves to an array of Relationship objects.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getRelationships.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRelationships(__namedParameters): Promise<Relationship[]>\n```\n\n----------------------------------------\n\nTITLE: Defining RAGKnowledgeItem Interface in TypeScript\nDESCRIPTION: This code snippet defines the RAGKnowledgeItem interface with properties for id, agentId, content (including text and metadata), embedding, createdAt, similarity, and score. It specifies types and optional fields for RAG-related data structures.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/RAGKnowledgeItem.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface RAGKnowledgeItem {\n  id: `${string}-${string}-${string}-${string}-${string}`;\n  agentId: `${string}-${string}-${string}-${string}-${string}`;\n  content: {\n    text: string;\n    metadata?: {\n      [key: string]: unknown;\n      isMain?: boolean;\n      isChunk?: boolean;\n      originalId?: `${string}-${string}-${string}-${string}-${string}`;\n      chunkIndex?: number;\n      source?: string;\n      type?: string;\n      isShared?: boolean;\n    };\n  };\n  embedding?: Float32Array;\n  createdAt?: number;\n  similarity?: number;\n  score?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Client Initialization for Different Platforms\nDESCRIPTION: Function that initializes client interfaces based on the character configuration. It supports multiple client types including Discord, Telegram, Twitter, Direct, and XMTP, starting each client with the provided runtime.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function initializeClients(\n    character: Character,\n    runtime: IAgentRuntime,\n) {\n    const clients = [];\n    const clientTypes =\n        character.clients?.map((str) => str.toLowerCase()) || [];\n\n    if (clientTypes.includes(Clients.DISCORD)) {\n        clients.push(await DiscordClientInterface.start(runtime));\n    }\n    if (clientTypes.includes(Clients.TELEGRAM)) {\n        clients.push(await TelegramClientInterface.start(runtime));\n    }\n    if (clientTypes.includes(Clients.TWITTER)) {\n        clients.push(await TwitterClientInterface.start(runtime));\n    }\n    if (clientTypes.includes(Clients.DIRECT)) {\n        clients.push(await AutoClientInterface.start(runtime));\n    }\n    if (clientTypes.includes(Clients.XMTP)) {\n        const xmtpClient = await XmtpClientInterface.start(runtime);\n        if (xmtpClient) clients.xmtp = xmtpClient;\n    }\n\n    return clients;\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Cache Value Method in TypeScript\nDESCRIPTION: Method to remove a value from cache using its key.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/CacheManager.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndelete(key: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Configuration for Discord Bot\nDESCRIPTION: Example configuration for a Discord bot implementation of ElizaOS with character storage enabled and API keys.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nUSE_CHARACTER_STORAGE=true\n\n# Discord Configuration\nDISCORD_APPLICATION_ID=...\nDISCORD_API_TOKEN=...\n\n# AI Provider Keys\nOPENAI_API_KEY=sk-...\nANTHROPIC_API_KEY=sk-...\n```\n\n----------------------------------------\n\nTITLE: Setting TEE Environment Variables - Bash\nDESCRIPTION: This section provides the required environment variable configurations for setting up the TEE mode in a bash shell. Different modes are available for local development and production deployment, and specifics for needed secret salts are also defined.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For Mac/Windows local development\nTEE_MODE=LOCAL\n\n# For Linux/Docker local development\nTEE_MODE=DOCKER\n\n# For production deployment\nTEE_MODE=PRODUCTION\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Node.js Version for ElizaOS\nDESCRIPTION: Installs and activates Node.js v23.3.0 required for running ElizaOS.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnvm install v23.3.0\nnvm use v23.3.0\n```\n\n----------------------------------------\n\nTITLE: Processing Actions for Messages\nDESCRIPTION: Method to process the actions associated with a message. Iterates through registered actions, executing each one that matches the message requirements.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nasync processActions(message: Memory, responses: Memory[], state?: State, callback?: HandlerCallback): Promise<void> {\n  if (this.actions.length === 0) {\n    return;\n  }\n\n  for (const action of this.actions) {\n    try {\n      if (!action.matches) {\n        continue;\n      }\n\n      if (await action.matches(message, state || {} as State)) {\n        await action.execute(message, state || {} as State, callback);\n      }\n    } catch (e) {\n      console.error(`Error executing action ${action.name}:`, e);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Service Abstract Method\nDESCRIPTION: Abstract method definition for initializing the service with an IAgentRuntime parameter. Must be implemented by derived classes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IIrysService.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract initialize(runtime: IAgentRuntime): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Deleting Cached Values in TypeScript\nDESCRIPTION: Implementation of the delete method from ICacheAdapter interface that removes a cached value by key from the file system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/FsCacheAdapter.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ndelete(key): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Schema Definition\nDESCRIPTION: Defines the core database schema for PostgreSQL including tables for accounts, participants, rooms, memories, relationships and goals. Includes vector extension for embeddings and appropriate constraints and indexes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION IF NOT EXISTS vector;\n\nCREATE TABLE IF NOT EXISTS accounts (...)\n\nALTER TABLE ONLY accounts ADD CONSTRAINT users_email_key UNIQUE (email);\n\nCREATE TABLE IF NOT EXISTS participants (...)\n\nALTER TABLE ONLY participants ADD CONSTRAINT participants_id_key UNIQUE (id);\n...\n```\n\n----------------------------------------\n\nTITLE: Defining TwitterSpaceDecisionOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the TwitterSpaceDecisionOptions interface with various optional properties for configuring Twitter Space decisions. It includes settings for maximum speakers, topics, duration, idle timeout, and other operational parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/TwitterSpaceDecisionOptions.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TwitterSpaceDecisionOptions {\n  maxSpeakers?: number;\n  topics?: string[];\n  typicalDurationMinutes?: number;\n  idleKickTimeoutMs?: number;\n  minIntervalBetweenSpacesMinutes?: number;\n  businessHoursOnly?: boolean;\n  randomChance?: number;\n  enableIdleMonitor?: boolean;\n  enableSttTts?: boolean;\n  enableRecording?: boolean;\n  voiceId?: string;\n  sttLanguage?: string;\n  speakerMaxDurationMs?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Agent Locally with Docker Compose\nDESCRIPTION: Command to start the Eliza agent locally using Docker Compose after setting up the environment variables.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Restarting Eliza with Custom Characters\nDESCRIPTION: This command restarts the Eliza chatbot with a specified character file. Character JSON files define chatbot personalities, located in the `characters/` directory.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --character=\\\"characters/YOUR_CHARACTER.character.json\\\"\n```\n\n----------------------------------------\n\nTITLE: Room Management Methods in TypeScript\nDESCRIPTION: Abstract methods for creating, retrieving, and removing rooms. Includes methods to get rooms for specific participants.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nabstract createRoom(roomId?: `${string}-${string}-${string}-${string}-${string}`): Promise<`${string}-${string}-${string}-${string}-${string}`>;\n\nabstract removeRoom(roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<void>;\n\nabstract getRoomsForParticipant(userId: `${string}-${string}-${string}-${string}-${string}`): Promise<`${string}-${string}-${string}-${string}-${string}`[]>;\n\nabstract getRoomsForParticipants(userIds: `${string}-${string}-${string}-${string}-${string}`[]): Promise<`${string}-${string}-${string}-${string}-${string}`[]>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord Client in TypeScript\nDESCRIPTION: Code snippet for initializing the Discord client interface in an elizaOS project. It imports the necessary module, starts the client with the runtime instance, and shows the required environment variables for Discord integration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordClientInterface } from \"@elizaos/client-discord\";\n\n// Initialize client\nconst client = await DiscordClientInterface.start(runtime);\n\n// Configuration in .env\nDISCORD_APPLICATION_ID = your_app_id;\nDISCORD_API_TOKEN = your_bot_token;\n```\n\n----------------------------------------\n\nTITLE: Fetching Memories by Room IDs in TypeScript\nDESCRIPTION: Defines the getMemoriesByRoomIds method for retrieving memories associated with specific room IDs.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMemoriesByRoomIds(params: {\n  roomIds: `${string}-${string}-${string}-${string}-${string}`[];\n  limit?: number;\n}): Promise<Memory[]>;\n```\n\n----------------------------------------\n\nTITLE: Defining getProviders Function in TypeScript\nDESCRIPTION: This function formats provider outputs into a string for context injection. It takes runtime, message, and optional state parameters, and returns a Promise resolving to a string. The function is defined in the providers.ts file of the core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getProviders.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetProviders(runtime: IAgentRuntime, message: Memory, state?: State): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Executing Operations with Circuit Breaker Protection\nDESCRIPTION: The protected method executes a given operation with circuit breaker protection, supporting any operations that return a Promise. It accepts an operation function and a context string, throwing an error if the circuit breaker is open or the operation fails.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n> `protected` **withCircuitBreaker**\\<`T`\\>(`operation`, `context`): `Promise`\\<`T`\\>\\n\\nExecutes an operation with circuit breaker protection.\n```\n\n----------------------------------------\n\nTITLE: Creating a Service User for ElizaOS\nDESCRIPTION: Creates a dedicated system user 'eliza' with restricted permissions and home directory in /opt/elizaos for running the ElizaOS agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd -r -s /bin/bash -d /opt/elizaos -m eliza\nsudo chown -R eliza:eliza /opt/elizaos\nsudo chmod 750 /opt/elizaos\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Integration in Environment Variables\nDESCRIPTION: Sets up the Discord-specific configuration variables needed for integrating Eliza with a Discord bot. Requires both the application ID and API token.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDISCORD_APPLICATION_ID=     # Your Discord app ID\nDISCORD_API_TOKEN=         # Discord bot token\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variable Existence in TypeScript\nDESCRIPTION: This function checks if a specific environment variable exists. It takes a string key as input and returns a boolean indicating whether the variable exists or not. The function is defined in the settings.ts file of the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/hasEnvVariable.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasEnvVariable(key: string): boolean\n```\n\n----------------------------------------\n\nTITLE: Counting Memories for a Room in TypeScript\nDESCRIPTION: Defines the countMemories method for getting the number of memory entries for a specific room, with an option for unique entries.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ncountMemories(roomId: `${string}-${string}-${string}-${string}-${string}`, unique?: boolean): Promise<number>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Integration Environment Variables\nDESCRIPTION: Environment variable configuration to prevent agent spam on Twitter by controlling posting intervals and enabling dry run mode for testing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_ACTION_PROCESSING=false\nPOST_INTERVAL_MIN=900  # 15 minutes minimum\nPOST_INTERVAL_MAX=1200 # 20 minutes maximum\nTWITTER_DRY_RUN=true   # Test mode\n```\n\n----------------------------------------\n\nTITLE: Clearing Knowledge Data for Agent\nDESCRIPTION: This abstract method clears an agent’s full knowledge database, based on the given agentId and optionally, the shared parameter. It returns a Promise upon successful removal, implementing the IDatabaseAdapter interface.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n> `abstract` **clearKnowledge**(`agentId`, `shared`?): `Promise`\\<`void`\\>\\n\\nRemoves an agent's full knowledge database and its associated chunks from the database.\n```\n\n----------------------------------------\n\nTITLE: Video Processing Method\nDESCRIPTION: Asynchronous method to process a video from a URL using the provided runtime configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IVideoService.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nprocessVideo(url: string, runtime: IAgentRuntime): Promise<Media>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memory Manager from Runtime\nDESCRIPTION: Method to retrieve a memory manager from the agent runtime by its table name. If no memory manager exists for the given table name, it returns the first available memory manager.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetMemoryManager(tableName: string): IMemoryManager {\n  return this.memoryManagers.get(tableName) ?? this.memoryManagers.values().next().value;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the NASA Plugin in Development Mode\nDESCRIPTION: Command for testing the NASA plugin using the mock Eliza client with a specified character configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Using mock client\npnpm mock-eliza --characters=./characters/eternalai.character.json\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Plugin in Character.json\nDESCRIPTION: Shows how to import a custom plugin in an agent's character.json file. This enables the agent to use the functionality provided by the custom plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n  \"plugins\": [\n    \"@elizaos/plugin-example\",\n  ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Eliza Agent in TEE Environment\nDESCRIPTION: YAML configuration for deploying the Eliza agent in a TEE environment, including service setup, environment variables, and volume mounts.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# docker-compose.yaml\nservices:\n    tee:\n        command:\n            [\n                \"pnpm\",\n                \"start\",\n                \"--character=./characters/yourcharacter.character.json\",\n            ]\n        image: username/eliza-agent:latest\n        stdin_open: true\n        tty: true\n        volumes:\n            - /var/run/tappd.sock:/var/run/tappd.sock\n            - tee:/app/packages/client-twitter/src/tweetcache\n            - tee:/app/db.sqlite\n        environment:\n            - REDPILL_API_KEY=$REDPILL_API_KEY\n            - SMALL_REDPILL_MODEL=anthropic/claude-3-5-sonnet\n            - MEDIUM_REDPILL_MODEL=anthropic/claude-3-5-sonnet\n            - LARGE_REDPILL_MODEL=anthropic/claude-3-opus\n            - ELEVENLABS_XI_API_KEY=$ELEVENLABS_XI_API_KEY\n            - ELEVENLABS_MODEL_ID=eleven_multilingual_v2\n            - ELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM\n            - ELEVENLABS_VOICE_STABILITY=0.5\n            - ELEVENLABS_VOICE_SIMILARITY_BOOST=0.9\n            - ELEVENLABS_VOICE_STYLE=0.66\n            - ELEVENLABS_VOICE_USE_SPEAKER_BOOST=false\n            - ELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4\n            - ELEVENLABS_OUTPUT_FORMAT=pcm_16000\n            - TWITTER_DRY_RUN=false\n            - TWITTER_USERNAME=$TWITTER_USERNAME\n            - TWITTER_PASSWORD=$TWITTER_PASSWORD\n            - TWITTER_EMAIL=$TWITTER_EMAIL\n            - X_SERVER_URL=$X_SERVER_URL\n            - BIRDEYE_API_KEY=$BIRDEYE_API_KEY\n            - SOL_ADDRESS=So11111111111111111111111111111111111111112\n            - SLIPPAGE=1\n            - SOLANA_RPC_URL=https://api.mainnet-beta.solana.com\n            - HELIUS_API_KEY=$HELIUS_API_KEY\n            - SERVER_PORT=3000\n            - WALLET_SECRET_SALT=$WALLET_SECRET_SALT\n            - TEE_MODE=PRODUCTION\n        ports:\n            - \"3000:80\"\n        restart: always\n\nvolumes:\n    tee:\n```\n\n----------------------------------------\n\nTITLE: Determining Embedding Type in ElizaOS Core (TypeScript)\nDESCRIPTION: Function that examines an agent runtime instance and determines if embeddings should be processed locally or remotely. It accepts an IAgentRuntime parameter and returns either 'local' or 'remote' as a string literal type.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getEmbeddingType.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetEmbeddingType(runtime): \"local\" | \"remote\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in TypeScript\nDESCRIPTION: This code snippet demonstrates how to access character-specific secrets using the runtime settings in Eliza, enabling secure retrieval of sensitive data.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = runtime.getSetting(\"OPENAI_API_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Agents via Command Line\nDESCRIPTION: These examples demonstrate how to run multiple agents using either command line arguments or environment variables. This allows simultaneous operation of different character configurations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/agents.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --characters=\"characters/agent1.json,characters/agent2.json\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nREMOTE_CHARACTER_URLS=https://example.com/characters.json\n```\n\n----------------------------------------\n\nTITLE: Defining Telegram Configuration Options in TypeScript\nDESCRIPTION: This snippet outlines the structure for Telegram-specific configuration options. It includes settings for message handling, group permissions, team management, and auto-posting functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Character.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclientConfig.telegram?: {\n  shouldIgnoreBotMessages?: boolean\n  shouldIgnoreDirectMessages?: boolean\n  shouldRespondOnlyToMentions?: boolean\n  shouldOnlyJoinInAllowedGroups?: boolean\n  allowedGroupIds?: string[]\n  messageSimilarityThreshold?: number\n  isPartOfTeam?: boolean\n  teamAgentIds?: string[]\n  teamLeaderId?: string\n  teamMemberInterestKeywords?: string[]\n  autoPost?: {\n    enabled?: boolean\n    monitorTime?: number\n    inactivityThreshold?: number\n    mainChannelId?: string\n    pinnedMessagesGroups?: string[]\n    minTimeBetweenPosts?: number\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Plugin - TypeScript\nDESCRIPTION: Template for defining a new plugin within the Eliza framework, specifying properties, actions, and evaluators necessary for custom functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// plugins/my-plugin/src/index.ts\nimport { Plugin } from \"@elizaos/core/types\";\n\nexport const myPlugin: Plugin = {\n    name: \"my-plugin\",\n    description: \"My custom plugin\",\n    actions: [],\n    evaluators: [],\n    providers: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Goal Interface in TypeScript for elizaOS Core\nDESCRIPTION: This TypeScript interface defines the structure of a Goal object. It includes optional ID, room ID, user ID, name, status, and an array of objectives. The interface is part of the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Goal.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Goal {\n  id?: `${string}-${string}-${string}-${string}-${string}`;\n  roomId: `${string}-${string}-${string}-${string}-${string}`;\n  userId: `${string}-${string}-${string}-${string}-${string}`;\n  name: string;\n  status: GoalStatus;\n  objectives: Objective[];\n}\n```\n\n----------------------------------------\n\nTITLE: Alert System for Trust Management in TypeScript\nDESCRIPTION: This TypeScript function handles alerts related to trust score and performance, controlling immediate notifications and risk adjustments. It processes alerts based on severity to either pause trading or log issues, adapting trading strategies according to risk data.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TrustAlert {\n    type: \"SCORE_CHANGE\" | \"RISK_LEVEL\" | \"PERFORMANCE\";\n    severity: \"LOW\" | \"MEDIUM\" | \"HIGH\";\n    message: string;\n    data: any;\n}\n\nasync function handleAlert(alert: TrustAlert): Promise<void> {\n    switch (alert.severity) {\n        case \"HIGH\":\n            await sendImmediateNotification(alert);\n            await pauseTrading(alert.data);\n            break;\n        case \"MEDIUM\":\n            await sendNotification(alert);\n            await adjustRiskLevels(alert.data);\n            break;\n        case \"LOW\":\n            await logAlert(alert);\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Relationship Management - TypeScript\nDESCRIPTION: This code covers the creation of relationships between users in Eliza, as well as retrieving current relationships for a specific user.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Create relationship\nawait db.createRelationship({\n    userA: user1.id,\n    userB: user2.id,\n});\n\n// Get relationships for user\nconst relationships = await db.getRelationships({\n    userId: user.id,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Room Participant Management in TypeScript\nDESCRIPTION: Function that ensures a participant is present in a specified room using user and room IDs.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nensureParticipantInRoom(userId: `${string}-${string}-${string}-${string}-${string}`, roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Objective Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of an Objective. It includes an optional id, a required description, and a boolean flag for completion status. The interface is part of the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Objective.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Objective {\n    id?: string;\n    description: string;\n    completed: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Telegram Client\nDESCRIPTION: Basic setup for the Telegram client integration, showing how to initialize the client with environment variables for Telegram bot token.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TelegramClientInterface } from \"@elizaos/client-telegram\";\n\n// Initialize client\nconst client = await TelegramClientInterface.start(runtime);\n\n// Configuration in .env\nTELEGRAM_BOT_TOKEN = your_bot_token;\n```\n\n----------------------------------------\n\nTITLE: Managing Discord Voice Channels\nDESCRIPTION: Implementation of Discord voice channel integration, including methods for joining voice channels and handling voice state updates.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass VoiceManager {\n    // Join a voice channel\n    async handleJoinChannelCommand(interaction) {\n        await this.joinVoiceChannel(channel);\n    }\n\n    // Handle voice state updates\n    async handleVoiceStateUpdate(oldState, newState) {\n        if (newState.channelId) {\n            await this.handleUserJoinedChannel(newState);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Tee Attestation - bash\nDESCRIPTION: This snippet demonstrates how to retrieve an attestation for a specific agent using a POST request. It sends the agent ID and public key, expecting a response that includes the attestation data.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --location \"http://localhost:3000/verifiable/attestation\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\\n          \"agentId\": \"9c321604-e69e-0e4c-ab84-bec6fd6baf92\",\\n          \"publicKey\": \"0x045b51a28c3b071104f3094b1934343eb831b8d56f16fc6e9a3304e9f051b24e584d806b20769b05eeade3a6c792db96f57b26cc38037907dd920e9be9f41f6184\"\\n        }'\n```\n\n----------------------------------------\n\nTITLE: Defining ModelClass Enumeration in TypeScript\nDESCRIPTION: Defines an enumeration of model classifications that specify different types and sizes of AI models. The enum includes small, medium, and large model sizes, plus special types for embedding and image models.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/ModelClass.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum ModelClass {\n  SMALL = \"small\",\n  MEDIUM = \"medium\",\n  LARGE = \"large\",\n  EMBEDDING = \"embedding\",\n  IMAGE = \"image\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Relationships in TypeScript\nDESCRIPTION: Asynchronous function that establishes a relationship between two users identified by UUID strings. Takes an IAgentRuntime instance and two user UUIDs as parameters. Returns a Promise resolving to a boolean indicating success.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/createRelationship.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateRelationship(__namedParameters): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Sending messages to a model for text generation in TypeScript\nDESCRIPTION: This function sends a message to a model to generate text. It requires runtime, context, and modelClass parameters, and returns a Promise that resolves to a Content object.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateMessageResponse.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateMessageResponse(opts): Promise<Content>\n```\n\n----------------------------------------\n\nTITLE: Video Info Fetching Method\nDESCRIPTION: Asynchronous method to retrieve metadata information about a video from its URL.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IVideoService.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfetchVideoInfo(url: string): Promise<Media>\n```\n\n----------------------------------------\n\nTITLE: Runtime Settings for Using Existing Wallet (Typescript)\nDESCRIPTION: This snippet demonstrates the runtime settings required to use an existing wallet with the Coinbase MassPayments plugin.  It shows how to provide the `COINBASE_GENERATED_WALLET_HEX_SEED` and `COINBASE_GENERATED_WALLET_ID` within the `runtime.character.settings.secrets` object.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// For using existing wallet\nruntime.character.settings.secrets = {\n    COINBASE_GENERATED_WALLET_HEX_SEED:\n        \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\",\n    COINBASE_GENERATED_WALLET_ID: \"wallet-id-123\",\n};\n```\n\n----------------------------------------\n\nTITLE: Get verifiable agents - shell\nDESCRIPTION: This snippet demonstrates how to retrieve all registered verifiable agents through a GET request to the Bagel API.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET --location \"http://localhost:3000/verifiable/agents\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Deva Client Interface\nDESCRIPTION: Implementation of the Deva client interface startup logic, including configuration validation and client initialization.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DevaClientInterface: Client = {\n    async start(runtime: IAgentRuntime) {\n        await validateDevaConfig(runtime);\n\n        const deva = new DevaClient(\n            runtime,\n            runtime.getSetting(\"DEVA_API_KEY\"),\n            runtime.getSetting(\"DEVA_API_BASE_URL\"),\n        );\n\n        await deva.start();\n\n        elizaLogger.success(\n            `✅ Deva client successfully started for character ${runtime.character.name}`,\n        );\n\n        return deva;\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Architecture Overview Diagram with Mermaid\nDESCRIPTION: Architecture diagram showing the relationship between the Agent Runtime, Client Interface, and various client implementations including Discord, Telegram, Twitter, Auto, and Deva clients.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    RT[\"Agent Runtime\"]\n    CI[\"Client Interface\"]\n    RT --> CI\n\n    %% Main Clients\n    CI --> DC[\"Direct Client\"]\n    CI --> DSC[\"Discord Client\"]\n    CI --> TC[\"Telegram Client\"]\n    CI --> TWC[\"Twitter Client\"]\n    CI --> AC[\"Auto Client\"]\n    CI --> DEVA[\"Deva Client\"]\n\n    %% Key Features - one per client for clarity\n    DC --> |\"REST API\"| DC1[\"Messages & Images\"]\n    DSC --> |\"Bot Integration\"| DSC1[\"Voice & Messages\"]\n    TC --> |\"Bot API\"| TC1[\"Commands & Media\"]\n    TWC --> |\"Social\"| TWC1[\"Posts & Interactions\"]\n    AC --> |\"Trading\"| AC1[\"Analysis & Execution\"]\n    DEVA --> |\"Social\"| DEVA1[\"Messages & Execution\"]\n\n    %% Simple styling with better contrast and black text\n    classDef default fill:#f9f9f9,stroke:#333,stroke-width:1px,color:black\n    classDef highlight fill:#e9e9e9,stroke:#333,stroke-width:2px,color:black\n\n    class RT,CI highlight\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Search Functionality\nDESCRIPTION: Implementation of Twitter search functionality with support for filters like recency and language.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass TwitterSearchClient {\n    async searchTweets(query: string) {\n        return await this.search({\n            query,\n            filters: {\n                recency: \"recent\",\n                language: \"en\",\n            },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings or Numbers to UUID in TypeScript\nDESCRIPTION: The stringToUuid function converts a string or number input to a UUID type. It is defined in the uuid.ts file of the @elizaos/core package and serves as a utility for UUID manipulation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/stringToUuid.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstringToUuid(target): UUID\n```\n\n----------------------------------------\n\nTITLE: Defining MessageExample Interface in TypeScript\nDESCRIPTION: Interface definition that specifies the structure of example messages, containing a user string property for association and a Content type property for the message content. Located in the core package types file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/MessageExample.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MessageExample {\n    user: string;\n    content: Content;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting an Agent to Discord (Conceptual)\nDESCRIPTION: This snippet describes how to connect an agent to Discord using Discord bots and webhooks. It involves creating a bot that listens for specific commands or events within the Vvaifun platform and then interacts with your agent accordingly. Webhooks can automate actions based on triggers from both platforms.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/ideas-feedback-rants/chat_2024-11-20.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTo connect an agent to Discord, you would need to use Discord bots and webhooks. You could create a bot that listens for specific commands or events within the Vvaifun platform and then interacts with your agent accordingly. Additionally, using webhooks can help automate certain actions based on triggers from both platforms.\n```\n\n----------------------------------------\n\nTITLE: Displaying New Contributors in Markdown\nDESCRIPTION: A collapsible Markdown section listing new contributors to the project, using HTML details and summary tags for expandable content.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/changelog.md#2025-04-16_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<details>\n<summary>View New Contributors</summary>\n* @yang-han made their first contribution in https://github.com/ai16z/eliza/pull/1163\n* @thomasWos made their first contribution in https://github.com/ai16z/eliza/pull/1170\n* @9547 made their first contribution in https://github.com/ai16z/eliza/pull/1201\n* @marcNY made their first contribution in https://github.com/ai16z/eliza/pull/1209\n* @danbednarski made their first contribution in https://github.com/ai16z/eliza/pull/1218\n* @vpavlin made their first contribution in https://github.com/ai16z/eliza/pull/1214\n* @simpletrontdip made their first contribution in https://github.com/ai16z/eliza/pull/1229\n* @renlulu made their first contribution in https://github.com/ai16z/eliza/pull/1244\n* @jonathangus made their first contribution in https://github.com/ai16z/eliza/pull/1239\n* @azurwastaken made their first contribution in https://github.com/ai16z/eliza/pull/1236\n* @yjshi2015 made their first contribution in https://github.com/ai16z/eliza/pull/1237\n* @luisalrp made their first contribution in https://github.com/ai16z/eliza/pull/1243\n* @netdragonx made their first contribution in https://github.com/ai16z/eliza/pull/1202\n* @julienbrs made their first contribution in https://github.com/ai16z/eliza/pull/1254\n* @SumeetChougule made their first contribution in https://github.com/ai16z/eliza/pull/1182\n* @tobbelobb made their first contribution in https://github.com/ai16z/eliza/pull/1205\n</details>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alexa Skill Client\nDESCRIPTION: Basic setup for the Alexa client integration, showing how to initialize the client with environment variables for Alexa skill integration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlexaClientInterface } from \"@elizaos/client-alexa\";\n\n// Initialize client\nconst client = await AlexaClientInterface.start(runtime);\n\n// Configuration in .env\nALEXA_SKILL_ID= your_alexa_skill_id\nALEXA_CLIENT_ID= your_alexa_client_id #Alexa developer console permissions tab\nALEXA_CLIENT_SECRET= your_alexa_client_secret #Alexa developer console permissions tab\n```\n\n----------------------------------------\n\nTITLE: Updating Agent Goals in ElizaOS Core\nDESCRIPTION: The updateGoal function accepts an object with runtime and goal parameters. It updates the goal for an agent and returns a Promise that resolves to void when complete.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/updateGoal.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateGoal(__namedParameters): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: DatabaseAdapter Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for creating a new DatabaseAdapter instance with optional circuit breaker configuration for fault tolerance. Allows customization of failure thresholds, reset timeouts, and recovery attempts.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew DatabaseAdapter<DB>(circuitBreakerConfig?: {\n  failureThreshold?: number,\n  resetTimeout?: number,\n  halfOpenMaxAttempts?: number\n}): DatabaseAdapter<DB>\n```\n\n----------------------------------------\n\nTITLE: Executing Trades Based on Recommendations and Trust\nDESCRIPTION: This function executes trades based on recommendation data and calculated trust scores, factoring in risk assessments. Segments are written in TypeScript and employ logic to determine appropriate position sizes, using helper functions for risk evaluation and trade execution.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function executeTrade(\n    recommendation: TokenRecommendation,\n    trustScore: number,\n): Promise<boolean> {\n    const riskAssessment = await assessTradeRisk(\n        recommendation.tokenAddress,\n        recommendation.recommenderId,\n    );\n\n    // Calculate position size based on trust score\n    const positionSize = calculatePositionSize(\n        trustScore,\n        riskAssessment.maxPositionSize,\n    );\n\n    if (positionSize > 0) {\n        await executeSwap({\n            inputToken: \"SOL\",\n            outputToken: recommendation.tokenAddress,\n            amount: positionSize,\n        });\n\n        await recordTradeEntry(recommendation, positionSize);\n        return true;\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Memory Entry in TypeScript\nDESCRIPTION: Defines the removeMemory method for deleting a specific memory entry by its ID.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveMemory(memoryId: `${string}-${string}-${string}-${string}-${string}`): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkRow Interface in TypeScript\nDESCRIPTION: Definition of the ChunkRow interface which contains a single property 'id' of type string. This interface is defined in the core package types file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ChunkRow.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChunkRow {\n  id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Goal Interface - TypeScript\nDESCRIPTION: This snippet defines the Goal interface, which represents task objectives within Eliza. It includes fields to track progress and associated user IDs.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Goal {\n    id: UUID;\n    roomId: UUID;\n    userId: UUID;\n    name: string;\n    status: GoalStatus;\n    objectives: Objective[];\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Deva User Posts\nDESCRIPTION: Implementation of Deva API endpoint for retrieving user posts filtered by persona ID.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\npublic async getPersonaPosts(personaId: string): Promise<DevaPost[]> {\n\t  const res = await fetch(\n\t\t    `${this.apiBaseUrl}/post?filter_persona_id=${personaId}`, \n        {\n\t\t\t      headers: {\n            Authorization: `Bearer ${this.accessToken}`,\n            \"Content-Type\": \"application/json\",\n        },\n    })\n        .then((res) => res.json());\n\t  \n\t  return res.items;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Plugin Loading\nDESCRIPTION: Code snippet demonstrating how to handle plugin import errors by catching exceptions and providing an empty plugin array as fallback.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Handle plugin import errors\ntry {\n    character.plugins = await Promise.all(\n        character.plugins.map((plugin) => import(plugin)),\n    );\n} catch (error) {\n    console.error(`Error loading plugin: ${error.message}`);\n    character.plugins = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddingConfig Type in TypeScript\nDESCRIPTION: TypeScript type definition for embedding configuration that specifies required properties for dimensions, model name, and provider type. Used to configure embedding parameters in the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/EmbeddingConfig.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmbeddingConfig = {\n  readonly dimensions: number;\n  readonly model: string;\n  readonly provider: EmbeddingProviderType;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating AI Character Files from Twitter Data\nDESCRIPTION: Command to generate a character file based on collected Twitter data. This creates a character.json file with personality traits, interaction styles, and sample responses derived from the user's Twitter history.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/fine-tuning.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run character -- username\n```\n\n----------------------------------------\n\nTITLE: Set Cache Value Method in TypeScript\nDESCRIPTION: Generic method to store a typed value in cache with an optional CacheOptions parameter.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/CacheManager.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nset<T>(key: string, value: T, opts?: CacheOptions): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Environment variables configuration\nDESCRIPTION: This code block shows the required environment variables to configure Eliza. The variables include API keys for Discord, OpenAI, ElevenLabs, Google Gemini, Anthropic, wallet private and public keys for EVM and Solana, Telegram bot token, and API keys for Together and Birdeye. The values provided are examples and should be replaced with actual credentials.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_ES.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"# Variables de ambiente obligatorias\nDISCORD_APPLICATION_ID=\nDISCORD_API_TOKEN= # Token del bot\nOPENAI_API_KEY=sk-* # Clave API de OpenAI, comenzando con sk-\nELEVENLABS_XI_API_KEY= # Clave API de ElevenLabs\nGOOGLE_GENERATIVE_AI_API_KEY= # Clave API de Gemini\n\n# CONFIGURACIONES DE ELEVENLABS\nELEVENLABS_MODEL_ID=eleven_multilingual_v2\nELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM\nELEVENLABS_VOICE_STABILITY=0.5\nELEVENLABS_VOICE_SIMILARITY_BOOST=0.9\nELEVENLABS_VOICE_STYLE=0.66\nELEVENLABS_VOICE_USE_SPEAKER_BOOST=false\nELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4\nELEVENLABS_OUTPUT_FORMAT=pcm_16000\n\nTWITTER_DRY_RUN=false\nTWITTER_USERNAME= # Nombre de usuario de la cuenta\nTWITTER_PASSWORD= # Contraseña de la cuenta\nTWITTER_EMAIL= # Correo electrónico de la cuenta\n\n# Para consultar a Claude\nANTHROPIC_API_KEY=\n\n# EVM\nEVM_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\n\n# Solana\nSOLANA_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\nSOLANA_PUBLIC_KEY=EXAMPLE_WALLET_PUBLIC_KEY\n\n# Fallback Wallet Configuration (deprecated)\nWALLET_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\nWALLET_PUBLIC_KEY=EXAMPLE_WALLET_PUBLIC_KEY\n\nBIRDEYE_API_KEY=\n\nSOL_ADDRESS=So11111111111111111111111111111111111111112\nSLIPPAGE=1\nSOLANA_RPC_URL=https://api.mainnet-beta.solana.com\nHELIUS_API_KEY=\n\n## Telegram\nTELEGRAM_BOT_TOKEN=\n\nTOGETHER_API_KEY=\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Together AI API in Bash\nDESCRIPTION: This snippet demonstrates how to set up environment variables for using the Together AI API, including the server URL, API key, and model selection.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-11.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nX_SERVER_URL=https://api.together.com/v1/\nXAI_API_KEY=your_key\nXAI_MODEL=gpt-4o-mini\n```\n\n----------------------------------------\n\nTITLE: Configuring Character-Specific Secrets in Environment Variables\nDESCRIPTION: Shows how to define character-specific secrets in the .env file using a naming convention that prepends the character name to the key. This allows for source control of character files without exposing secrets.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# C3PO\nCHARACTER.C3PO.DISCORD_APPLICATION_ID=abc\nCHARACTER.C3PO.DISCORD_API_TOKEN=xyz\n\n# DOBBY\nCHARACTER.DOBBY.DISCORD_APPLICATION_ID=123\nCHARACTER.DOBBY.DISCORD_API_TOKEN=369\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook with Coinbase SDK in TypeScript\nDESCRIPTION: Demonstrates how to use the Webhook Plugin to create a new webhook for listening to specific events on the Coinbase platform.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"CREATE_WEBHOOK\", {\n    networkId: \"base\",\n    eventType: \"transfers\",\n    notificationUri: \"https://your-notification-uri.com\",\n});\nconsole.log(\"Webhook creation response:\", response);\n```\n\n----------------------------------------\n\nTITLE: Fetching Deva User Personal Data\nDESCRIPTION: Implementation of Deva API endpoint for retrieving personal user data.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\npublic async getMe(): Promise<DevaPersona | null> {\n    return await fetch(`${this.apiBaseUrl}/persona`, {\n\t\t    headers: { ...this.defaultHeaders },\n    })\n        .then((res) => res.json())\n        .catch(() => null);\n}\n```\n\n----------------------------------------\n\nTITLE: Twitter Post Template in JavaScript\nDESCRIPTION: Example of a twitterPostTemplate used to generate posts in the character's style. This template combines the character's knowledge, bio, lore, and style guidelines to create contextually appropriate social media content.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ntemplates: {\n    twitterPostTemplate: `\n# Areas of Expertise\n{{knowledge}}\n\n# About {{agentName}} (@{{twitterUserName}}):\n{{bio}}\n{{lore}}\n{{topics}}\n\n{{providers}}\n\n{{characterPostExamples}}\n\n{{postDirections}}\n\n# Task: Generate a post in the voice and style and perspective of {{agentName}} @{{twitterUserName}}.\nWrite a 1-3 sentence post that is {{adjective}} about {{topic}} (without mentioning {{topic}} directly), from the perspective of {{agentName}}. Do not add commentary or acknowledge this request, just write the post.\nYour response should not contain any questions. Brief, concise statements only. The total character count MUST be less than {{maxTweetLength}}. No emojis. Use \\n\\n (double spaces) between statements.`,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temperature Settings in Character JSON\nDESCRIPTION: Shows how to adjust the temperature setting in a character file to control response randomness. Higher values increase creativity while lower values provide more consistent outputs.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modelProvider\": \"openrouter\",\n    \"temperature\": 0.7,\n    \"settings\": {\n        \"maxInputTokens\": 200000,\n        \"maxOutputTokens\": 8192,\n        \"model\": \"large\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Technical Skills Overview - Blockchain Development\nDESCRIPTION: Detailed breakdown of Hionei's technical expertise in blockchain and frontend development, including frameworks and specialized bot development\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-22.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Frameworks: React, Next, Vue\n- Skills: Software Wallets\n- Blockchain Networks: Multiple Compatibility\n- Trading Bots: Binance, Backtesting Systems\n- NFT Interactions: Opensea, blurNFT\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for representing relationships between users. It includes properties for IDs, user references, room association, status, and an optional creation timestamp.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Relationship.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Relationship {\n  id: `${string}-${string}-${string}-${string}-${string}`;\n  userA: `${string}-${string}-${string}-${string}-${string}`;\n  userB: `${string}-${string}-${string}-${string}-${string}`;\n  userId: `${string}-${string}-${string}-${string}-${string}`;\n  roomId: `${string}-${string}-${string}-${string}-${string}`;\n  status: string;\n  createdAt?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using RemoteAttestationProvider in TypeScript\nDESCRIPTION: Shows how to initialize and use the RemoteAttestationProvider from the TEE Plugin to generate remote attestations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RemoteAttestationProvider } from \"@elizaos/plugin-tee\";\n// Initialize the provider\nconst provider = new RemoteAttestationProvider();\n// Generate Remote Attestation\ntry {\n    const attestation = await provider.generateAttestation(\"your-report-data\");\n    console.log(\"Attestation:\", attestation);\n} catch (error) {\n    console.error(\"Failed to generate attestation:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Action Names Function TypeScript Definition\nDESCRIPTION: TypeScript function signature for formatActionNames that takes an array of Action objects and returns a string. The function is responsible for extracting names from Action objects and joining them with commas.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatActionNames.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformatActionNames(actions: Action[]): string\n```\n\n----------------------------------------\n\nTITLE: Room Existence Verification Function in TypeScript\nDESCRIPTION: Asynchronous function to verify and ensure a room exists in the system. Takes a UUID format string as room identifier.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAgentRuntime.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nensureRoomExists(roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Memory Operations with Embeddings in ElizaOS\nDESCRIPTION: Illustrates storing memory entries including conversation data and vector embeddings into the database. Required dependencies include a proper datatype for embeddings and user and room identifiers.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/adapter-sqlite/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Store a memory with embedding\nawait adapter.createMemory({\n  type: 'conversation',\n  content: 'Memory content',\n  embedding: new Float32Array([...]),\n  userId,\n  roomId\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Initialize Method in ISpeechService\nDESCRIPTION: Abstract method declaration for initializing the speech service with a runtime instance. Must be implemented by derived classes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ISpeechService.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract initialize(runtime: IAgentRuntime): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining CacheOptions Type Interface in TypeScript\nDESCRIPTION: Defines a TypeScript type alias CacheOptions as an object type with an optional expires property of type number. This type is used to configure caching behavior, particularly expiration timing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/CacheOptions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CacheOptions = {\n    expires?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Text to Boolean in TypeScript\nDESCRIPTION: Function that converts string input to boolean values. It recognizes affirmative values (YES, Y, TRUE, T, 1, ON, ENABLE) as true and negative values (NO, N, FALSE, F, 0, OFF, DISABLE) as false. Returns null for unrecognized inputs.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/parseBooleanFromText.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nparseBooleanFromText(text): boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Environment Variables in TypeScript with Optional Default Value\nDESCRIPTION: The getEnvVariable function retrieves the value of a specified environment variable. It takes a key parameter and an optional default value parameter which is returned if the environment variable doesn't exist.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getEnvVariable.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetEnvVariable(key: string, defaultValue?: string): string | undefined\n```\n\n----------------------------------------\n\nTITLE: Message Examples Format in JSON\nDESCRIPTION: Example of messageExamples showing the structure for sample conversations. These examples establish interaction patterns and conversational style, helping the AI understand how the character should respond in similar situations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"messageExamples\": [\n  [\n    {\"user\": \"user1\", \"content\": {\"text\": \"What's your view on AI?\"}},\n    {\"user\": \"character\", \"content\": {\"text\": \"AI is transforming every industry...\"}}\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up tsup.config.ts for Build Configuration\nDESCRIPTION: TypeScript configuration for tsup bundler that defines entry points, output formats, and build options for the NASA plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'tsup'\n\nexport default defineConfig({\n    entry: ['src/index.ts'],\n    format: ['cjs', 'esm'],\n    dts: true,\n    splitting: false,\n    sourcemap: true,\n    clean: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Plugin Directory Structure\nDESCRIPTION: Shows the directory structure for a custom ElizaOS plugin. This includes the required files and folders for organizing the plugin's code and resources.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/plugins.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npackages/\n├─plugin-example/\n├── package.json\n├── tsconfig.json\n├── src/\n│   ├── index.ts        # Main plugin entry\n│   ├── actions/        # Custom actions\n│   ├── providers/      # Data providers\n│   ├── types.ts        # Type definitions\n│   └── environment.ts  # Configuration\n├── README.md\n└── LICENSE\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker on Linux\nDESCRIPTION: Commands to install Docker on a Linux system, including adding Docker’s GPG key and repository and then installing relevant packages. It requires root access and assumes an Ubuntu-based environment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Add Docker\\'s official GPG key\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add Docker repository\necho \\\n  \\\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release && echo \\\"$VERSION_CODENAME\\\") stable\\\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker packages\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Starting Ollama with Remote URL Configuration\nDESCRIPTION: Command to start Ollama after configuring remote URL environment variable for remote access.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-10-31.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstart ollama\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Provider Settings in Character JSON\nDESCRIPTION: Sets up model provider settings in a character file, specifying the provider name and model-specific settings like model name, temperature, and token limits.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modelProvider\": \"openai\",\n    \"settings\": {\n        \"model\": \"gpt-4o-mini\",\n        \"temperature\": 0.7,\n        \"maxTokens\": 2000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ISlackService Interface in TypeScript\nDESCRIPTION: This code snippet defines the ISlackService interface, which extends the Service class. It includes a client property of type 'any' and inherits methods and accessors from the Service class.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ISlackService.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ISlackService extends Service {\n  client: any;\n\n  get serviceType(): ServiceType;\n\n  initialize(runtime: IAgentRuntime): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Goal Management - TypeScript\nDESCRIPTION: This snippet illustrates how to create a goal in Eliza and how to fetch active goals based on progress status within a room.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Create goal\nawait db.createGoal({\n    id: uuid(),\n    roomId: room.id,\n    userId: user.id,\n    name: \"Complete task\",\n    status: \"IN_PROGRESS\",\n    objectives: [],\n});\n\n// Get active goals\nconst goals = await db.getGoals({\n    roomId: room.id,\n    onlyInProgress: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Feature Test Example - TypeScript\nDESCRIPTION: Example of a feature test using Jest framework to verify the behavior of AI interactions within the Eliza application including setup and expected behavior.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { runAiTest } from \"@elizaos/core/test_resources\";\n\ndescribe(\"Feature Test\", () => {\n    beforeEach(async () => {\n        // Setup test environment\n    });\n\n    it(\"should perform expected behavior\", async () => {\n        const result = await runAiTest({\n            messages: [\n                {\n                    user: \"user1\",\n                    content: { text: \"test message\" },\n                },\n            ],\n            expected: \"expected response\",\n        });\n        expect(result.success).toBe(true);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Gaia Model Provider\nDESCRIPTION: TypeScript code snippet showing how to switch the AI agent to use the Gaia model provider instead of Anthropic. This change affects how the agent processes and generates text.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_15min.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmodelProvider: modelProviders.gaiaNet;\n```\n\n----------------------------------------\n\nTITLE: Twitter Integration Environment Variables\nDESCRIPTION: Example of environment variables needed for Twitter integration with ElizaOS, including account username, password, and email.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nTWITTER_USERNAME=  # Account username\nTWITTER_PASSWORD=  # Account password\nTWITTER_EMAIL=    # Account email\n```\n\n----------------------------------------\n\nTITLE: DeepFunding AI Grant Opportunities\nDESCRIPTION: Platform for exploring and accessing active grant requests for AI and technology projects\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/ideas-feedback-rants/chat_2024-11-09.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://deepfunding.ai/all-rfps/?tab=rfp-active-tab-pane\n```\n\n----------------------------------------\n\nTITLE: Participant State Management Methods in TypeScript\nDESCRIPTION: Abstract methods for managing participant states (FOLLOWED/MUTED) within rooms.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nabstract getParticipantUserState(roomId: `${string}-${string}-${string}-${string}-${string}`, userId: `${string}-${string}-${string}-${string}-${string}`): Promise<\"FOLLOWED\" | \"MUTED\">;\n\nabstract setParticipantUserState(roomId: `${string}-${string}-${string}-${string}-${string}`, userId: `${string}-${string}-${string}-${string}-${string}`, state: \"FOLLOWED\" | \"MUTED\"): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Generating Formatted Descriptions for Evaluator Examples in TypeScript\nDESCRIPTION: This function takes an array of Evaluator objects and returns a string summarizing the descriptions of each evaluator's examples. The return value is formatted to include the evaluator name, example number, and description.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatEvaluatorExampleDescriptions.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nformatEvaluatorExampleDescriptions(evaluators: Evaluator[]): string\n```\n\n----------------------------------------\n\nTITLE: Executing Form Plugin Actions in TypeScript\nDESCRIPTION: Provides examples of how to use the Form plugin actions, such as buying curves tokens and converting them to ERC20.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// Buying curves tokens\nawait runtime.processAction(\"BUY_CURVES_TOKEN\", {\n    subject: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n    amount: 1,\n    formula: \"QUADRATIC\"\n});\n\n// Converting to ERC20\nawait runtime.processAction(\"WITHDRAW_CURVES_TOKEN\", {\n    subject: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n    amount: 1,\n    formula: \"QUADRATIC\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing processFile Method in IRAGKnowledgeManager Interface\nDESCRIPTION: Defines the processFile method which processes a file with specified path, content, type, and shared status.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IRAGKnowledgeManager.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nprocessFile(file: {\n  path: string;\n  content: string;\n  type: \"pdf\" | \"md\" | \"txt\";\n  isShared: boolean;\n}): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Running Eliza with Docker\nDESCRIPTION: Command to start the Eliza chatbot using Docker. Assumes Docker and PNPM are installed and configured. This command will initiate the Docker setup according to the configurations defined in Docker configurations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm docker\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Acceleration for ElizaOS\nDESCRIPTION: Command to enable CUDA support for GPU acceleration in ElizaOS, downloading the required CUDA-compatible libraries.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpx --no node-llama-cpp source download --gpu cuda\n```\n\n----------------------------------------\n\nTITLE: Room Management in TypeScript\nDESCRIPTION: Basic room management functionality for retrieving room information.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nabstract getRoom(roomId: string): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Settings Constant in TypeScript for Eliza OS Core\nDESCRIPTION: Defines a constant named 'settings' of type 'Settings' to initialize configuration settings based on the environment. This is a crucial part of the Eliza OS core package, likely used throughout the system for configuration management.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst settings: Settings\n```\n\n----------------------------------------\n\nTITLE: Defining Twitter Spaces Configuration in TypeScript\nDESCRIPTION: This snippet shows the configuration option for Twitter Spaces. It references a custom type 'TwitterSpaceDecisionOptions' for defining the structure of Twitter Spaces related settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Character.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntwitterSpaces?: TwitterSpaceDecisionOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Alias in TypeScript for ElizaOS Core\nDESCRIPTION: This code snippet defines the Media type alias as an object with properties for media attachments. It includes fields for identification (id), content (url, text), and metadata (title, source, description, contentType).\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Media.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Media = {\n  id: string;\n  url: string;\n  title: string;\n  source: string;\n  description: string;\n  text: string;\n  contentType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure for NASA Plugin\nDESCRIPTION: Representation of the recommended project structure when building an Eliza plugin from scratch, showing directory organization and file placement.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nplugin-name/\n├── package.json\n├── tsconfig.json\n├── tsup.config.ts\n└── src/\n    ├── index.ts          # Main plugin entry\n    ├── types.ts          # Type definitions\n    ├── environment.ts    # Environment config\n    ├── services/         # API services\n    ├── actions/          # Plugin actions\n    └── examples/         # Usage examples\n```\n\n----------------------------------------\n\nTITLE: Running Mock Attestation Server from Source in Rust\nDESCRIPTION: Instructions for cloning and running a mock attestation server for local development and testing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/marlinprotocol/oyster-monorepo\ncd oyster-monorepo/attestation/server-custom-mock\n\n# Listens on 127.0.0.1:1350 by default\ncargo run\n\n# To customize listening interface and port\ncargo run --ip-addr <ip>:<port>\n```\n\n----------------------------------------\n\nTITLE: Message Queue Implementation\nDESCRIPTION: Simple message queuing system implementation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nclass MessageQueue {\n    async queueMessage(message: Message) {\n        await this.queue.push(message);\n        this.processQueue();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Confidential AI Architecture Flow with Mermaid\nDESCRIPTION: A flowchart diagram showing the architecture of ElizaOS's confidential AI system integration with Secret Network, illustrating the data flow from user query through encryption, secure processing, and response delivery.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/blog/eliza-february-2025-recap.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[User Query] --> B[Encryption Layer]\n    B --> C[Secret Network TEE]\n    C --> D[Encrypted Model]\n    D --> E[Private Inference]\n    E --> F[Encrypted Response]\n    F --> G[Decryption Layer]\n    G --> H[User]\n    \n    I[Verification System] --> C\n    I --> E\n```\n\n----------------------------------------\n\nTITLE: Example Input for Deploying ERC20 Token (JSON)\nDESCRIPTION: This JSON snippet illustrates an example input for the `DEPLOY_TOKEN_CONTRACT` action when deploying an ERC20 token. It defines the `contractType`, `name`, `symbol`, `network`, and `totalSupply` parameters required for the deployment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"contractType\": \"ERC20\",\n    \"name\": \"MyToken\",\n    \"symbol\": \"MTK\",\n    \"network\": \"base\",\n    \"totalSupply\": 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Temporal Tracking Pattern Example\nDESCRIPTION: This example shows how the Fact Evaluator tracks changes in user status over time, distinguishing between permanent facts and temporary status information with timestamps.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/fact-evaluator.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Status tracking\nt0: \"Looking for a job\" (status)\nt1: \"Got a new job\" (fact)\nt2: \"Been at job for 3 months\" (status)\n```\n\n----------------------------------------\n\nTITLE: Defining DataIrysFetchedFromGQL Interface in TypeScript\nDESCRIPTION: This code snippet defines the DataIrysFetchedFromGQL interface with three properties: success (boolean), data (any), and an optional error (string). It's likely used to structure the response from a GraphQL query in the elizaOS project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/DataIrysFetchedFromGQL.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DataIrysFetchedFromGQL {\n  success: boolean;\n  data: any;\n  error?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Header to Body Text in TypeScript\nDESCRIPTION: This example demonstrates how to use the addHeader function to prepend a header to a body of text. The function takes two string parameters: header and body, and returns a new string with the header added to the body.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/addHeader.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Given a header and a body\nconst header = \"Header\";\nconst body = \"Body\";\n\n// Adding the header to the body will result in:\n// \"Header\\nBody\"\nconst text = addHeader(header, body);\n```\n\n----------------------------------------\n\nTITLE: Markdown Community Tasks\nDESCRIPTION: This markdown snippet describes a community task involving the sharing of updates and \"pump signals\" related to crypto projects. It emphasizes the role of sharing information, such as tweets and links, to keep members updated on market trends.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-25.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Community Tasks\n\n- Share updates and pump signals related to crypto projects (led by Rick)\n- Sharing of tweets and links regarding the performance of different cryptocurrencies like Artie/SOL is a community task that helps keep members updated on market trends.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Participant Interface in TypeScript for elizaOS Core\nDESCRIPTION: This code snippet defines the Participant interface with two properties: 'id' (a unique identifier string) and 'account' (an associated Account object). The interface is used to represent room participants in the elizaOS system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/Participant.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Participant {\n  id: `${string}-${string}-${string}-${string}-${string}`;\n  account: Account;\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Timeout Increase - TypeScript\nDESCRIPTION: This snippet shows how to increase the connection timeout for the PostgreSQL adapter, which can help alleviate issues related to slow connections.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Increase connection timeout\nconst db = new PostgresDatabaseAdapter({\n    connectionTimeoutMillis: 5000,\n});\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for getEmbeddingZeroVector in TypeScript\nDESCRIPTION: A function that returns a zero vector as an array of numbers, typically used for embeddings in machine learning applications. This function is defined in the embedding.ts file of the core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getEmbeddingZeroVector.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getEmbeddingZeroVector(): number[]\n```\n\n----------------------------------------\n\nTITLE: Declaring formatRelationships Function in TypeScript\nDESCRIPTION: This snippet defines the formatRelationships function with its parameters and return type. It takes an object with runtime and userId properties, and returns a Promise that resolves to an array of formatted UUID strings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatRelationships.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction formatRelationships(__namedParameters: { runtime: IAgentRuntime; userId: `${string}-${string}-${string}-${string}-${string}` }): Promise<`${string}-${string}-${string}-${string}-${string}`[]>\n```\n\n----------------------------------------\n\nTITLE: Getting Conversation Buffer Length\nDESCRIPTION: Method to retrieve the number of messages that are kept in the conversation buffer. This determines how many recent messages are maintained in memory.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetConversationLength(): number {\n  return this.config.conversationLength || 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Fine-tuning Job Status\nDESCRIPTION: Command to check the status of a fine-tuning job using the Together AI CLI. This allows tracking the progress of the fine-tuning process using the job ID provided during initialization.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/fine-tuning.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntogether fine-tuning retrieve [job_id]\n```\n\n----------------------------------------\n\nTITLE: Video Download Method\nDESCRIPTION: Asynchronous method to download a video based on its metadata information.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IVideoService.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndownloadVideo(videoInfo: Media): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Settings in ElizaOS Core using TypeScript\nDESCRIPTION: This function configures environment settings for browser usage in ElizaOS. It accepts a Settings object containing environment variables and returns void. The function is defined in the settings.ts file of the core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/configureSettings.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconfigureSettings(settings: Settings): void\n```\n\n----------------------------------------\n\nTITLE: Defining Character-Specific Secrets - JSON\nDESCRIPTION: This JSON structure serves to define secrets specific to a character, detailing how to set unique settings for individual characters in Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/secrets-management.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"FinancialAssistant\",\n    \"settings\": {\n        \"secrets\": {\n            \"OPENAI_API_KEY\": \"sk-character-specific-key\",\n            \"ALPHA_VANTAGE_API_KEY\": \"financial-data-api-key\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Starting Eliza Starter Project\nDESCRIPTION: This snippet clones the Eliza starter project, copies the environment variables, installs dependencies, builds the project, and starts the application. It's the recommended method for getting started with Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Performing Token Operations with Solana in Eliza\nDESCRIPTION: Shows how to execute token swap and sell operations using Eliza's Solana integration. Includes parameters for connections, wallets, token addresses, and transaction settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Buy tokens\nconst swapResult = await swapToken(\n    connection,\n    walletPublicKey,\n    inputTokenCA,\n    outputTokenCA,\n    amount,\n);\n\n// Sell tokens\nconst sellResult = await sellToken({\n    sdk,\n    seller: walletKeypair,\n    mint: tokenMint,\n    amount: sellAmount,\n    priorityFee,\n    allowOffCurve: false,\n    slippage: \"1\",\n    connection,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining UploadIrysResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the UploadIrysResult interface with four properties: success (boolean), url (optional string), error (optional string), and data (optional any type). It's used to structure the result of an Irys upload operation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/UploadIrysResult.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface UploadIrysResult {\n  success: boolean;\n  url?: string;\n  error?: string;\n  data?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuel Plugin in TypeScript\nDESCRIPTION: Shows how to add the Fuel Plugin to a character's configuration for interacting with the Fuel Ignition blockchain.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fuelPlugin } from \"@eliza/plugin-fuel\";\n\nconst character = {\n    plugins: [fuelPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Automated Trading with Auto Client\nDESCRIPTION: Implementation of an Auto Client class for automated trading. It sets up a recurring trading loop that gets recommendations, analyzes tokens, and executes trades at regular intervals.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass AutoClient {\n    constructor(runtime: IAgentRuntime) {\n        this.runtime = runtime;\n\n        // Start trading loop\n        this.interval = setInterval(() => {\n            this.makeTrades();\n        }, 60 * 60 * 1000); // 1 hour interval\n    }\n\n    async makeTrades() {\n        // Get recommendations\n        const recommendations = await this.getHighTrustRecommendations();\n\n        // Analyze tokens\n        const analysis = await this.analyzeTokens(recommendations);\n\n        // Execute trades\n        await this.executeTrades(analysis);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ImageModelSettings Type in TypeScript\nDESCRIPTION: Defines an object type alias called ImageModelSettings with a required name property of type string and an optional steps property of type number. Used for configuring image model parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/ImageModelSettings.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ImageModelSettings = {\n  name: string;\n  steps?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Architecture Diagram using Mermaid\nDESCRIPTION: A mermaid graph that illustrates the architecture of the Agent Package, showing its components and their relationships including Character System, Runtime Management, Database Integration, and Client Management.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    AP[\"Agent Package\"]\n    AP --> CS[\"Character System\"]\n    AP --> RT[\"Runtime Management\"]\n    AP --> DB[\"Database Integration\"]\n    AP --> CL[\"Client Management\"]\n\n    CS --> CF[\"Character Loading\"]\n    CS --> CP[\"Plugin Loading\"]\n    CS --> CT[\"Token Management\"]\n\n    RT --> AR[\"Agent Runtime\"]\n    RT --> AM[\"Agent Monitoring\"]\n    RT --> AH[\"Shell Interface\"]\n\n    DB --> PS[\"PostgreSQL Support\"]\n    DB --> SL[\"SQLite Support\"]\n\n    CL --> DC[\"Direct Client\"]\n    CL --> PC[\"Platform Clients\"]\n\n    %% Simple styling with black text\n    classDef default fill:#f9f9f9,stroke:#333,stroke-width:1px,color:black\n    classDef highlight fill:#e9e9e9,stroke:#333,stroke-width:2px,color:black\n\n    class AP highlight\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for composeActionExamples\nDESCRIPTION: This function signature shows the composeActionExamples function that generates random conversation examples based on provided Action objects. It accepts an array of Action objects and a count parameter, returning a formatted string with the examples.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/composeActionExamples.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**composeActionExamples**(`actionsData`, `count`): `string`\n```\n\n----------------------------------------\n\nTITLE: Modifying TypeScript Model Configuration\nDESCRIPTION: Code snippet showing how to modify the endpoint configuration in models.ts file for changing the model provider URL.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-27.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/core/src/models.ts\nendpoint: 'preferred_url_for_assigned_provider'\n```\n\n----------------------------------------\n\nTITLE: Twitter Spaces AI Integration Link\nDESCRIPTION: Reference link for AI-powered Twitter Spaces functionality shared by HanzoYasunaga\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/ideas-feedback-rants/chat_2024-11-09.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://fxtwitter.com/HanzoYasunaga/status/1854197214660206937\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Missing Character Files\nDESCRIPTION: Code snippet showing how to handle cases where no character files are found by falling back to a default character.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Handle missing character files\nif (!characters || characters.length === 0) {\n    console.log(\"No characters found, using default character\");\n    characters = [defaultCharacter];\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Text to Action Response in TypeScript\nDESCRIPTION: Function signature for parsing text input into an ActionResponse object. Takes a text string parameter and returns an object containing actions property of type ActionResponse.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/parseActionResponseFromText.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparseActionResponseFromText(text: string): { actions: ActionResponse }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Actions in YAML\nDESCRIPTION: Shows how to set up custom actions in the elizaConfig.yaml file, defining the action name and path to the implementation file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nactions:\n    - name: myCustomAction\n      path: ./custom_actions/myAction.ts\n```\n\n----------------------------------------\n\nTITLE: Fetching Cached Embeddings in TypeScript\nDESCRIPTION: Defines the getCachedEmbeddings method for retrieving cached embeddings for given content.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetCachedEmbeddings(content: string): Promise<object[]>;\n```\n\n----------------------------------------\n\nTITLE: Defining DirectoryItem Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for DirectoryItem with directory string property and optional shared boolean property. Used within the elizaOS core package for handling directory configurations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/DirectoryItem.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DirectoryItem {\n    directory: string;\n    shared?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Service Type Accessor Definition\nDESCRIPTION: Accessor method that returns the service type for video handling, inherited from base Service class.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IVideoService.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget serviceType(): ServiceType\n```\n\n----------------------------------------\n\nTITLE: Defining ConversationExample Interface in TypeScript\nDESCRIPTION: This code snippet defines the ConversationExample interface with two properties: userId (a UUID string) and content (of type Content). The interface is used to represent example conversation content with a user ID.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ConversationExample.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ConversationExample {\n  userId: `${string}-${string}-${string}-${string}-${string}`;\n  content: Content;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for ElizaOS\nDESCRIPTION: Creates and configures the environment file with necessary settings for the ElizaOS agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Copy example environment file\ncp -v .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Cache Settings in TypeScript\nDESCRIPTION: Defines a cache configuration interface and instantiates settings for memory caching. Includes parameters for maximum age, maximum size, and cleanup interval.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CacheConfig {\n    maxAge: number;          // Maximum age in milliseconds\n    maxSize: number;         // Maximum number of entries\n    cleanupInterval: number; // Cleanup interval in milliseconds\n}\n\nconst cacheConfig: CacheConfig = {\n    maxAge: 3600000,        // 1 hour\n    maxSize: 1000,\n    cleanupInterval: 300000  // 5 minutes\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Form Plugin\nDESCRIPTION: Shows the required environment variable configuration for the Form plugin, including the private key and optional testnet flag.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nFORM_PRIVATE_KEY=your_private_key\nFORM_TESTNET=true  # Optional, defaults to false\n```\n\n----------------------------------------\n\nTITLE: Formatting Actions Function Signature in TypeScript\nDESCRIPTION: Type signature for the formatActions function that takes an array of Action objects and returns a formatted string representation. The function is responsible for converting Action objects into a detailed string listing with names and descriptions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatActions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformatActions(actions: Action[]): string\n```\n\n----------------------------------------\n\nTITLE: Initiating the Fine-tuning Process\nDESCRIPTION: Command to start the fine-tuning process using the collected data. This validates the JSONL file, uploads data to Together AI, and initiates LoRA fine-tuning with the specified model.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/fine-tuning.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run finetune\n```\n\n----------------------------------------\n\nTITLE: Installing CUDA dependencies for local inference\nDESCRIPTION: These commands install necessary dependencies and download CUDA-related resources for local inference. The first command installs dependencies, and the second downloads resources specifically configured for GPU (CUDA) support using node-llama-cpp, enabling faster local inference with NVIDIA GPUs. Ensure CUDA Toolkit, cuDNN, and cuBLAS are installed.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_JA.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm install\nnpx --no node-llama-cpp source download --gpu cuda\"\n```\n\n----------------------------------------\n\nTITLE: Checking Out Latest Release Branch of ElizaOS\nDESCRIPTION: Switches to the most recent tagged release version of ElizaOS for stable deployment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd eliza\ngit checkout $(git describe --tags --abbrev=0)\n```\n\n----------------------------------------\n\nTITLE: CUDA Configuration for Local AI Inference\nDESCRIPTION: Installation commands for setting up CUDA support for local AI model inference with GPU acceleration\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_RS.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\nnpx --no node-llama-cpp source download --gpu cuda\n```\n\n----------------------------------------\n\nTITLE: Defining KnowledgeItem Type Alias in TypeScript\nDESCRIPTION: This snippet defines the KnowledgeItem type alias as an object with two properties: id of type UUID and content of type Content. It is located in the types.ts file of the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/KnowledgeItem.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype KnowledgeItem = {\n  id: UUID;\n  content: Content;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Random User Names with Template in TypeScript\nDESCRIPTION: Example demonstrating how to use the composeRandomUser function to generate a string with random user names. The function takes a template with {{userX}} placeholders and replaces them with randomly generated names.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/composeRandomUser.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Given a template and a length\nconst template = \"Hello, {{user1}}! Meet {{user2}} and {{user3}}.\"; \nconst length = 3;\n\n// Composing the random user string will result in:\n// \"Hello, John! Meet Alice and Bob.\"\nconst result = composeRandomUser({ template, length });\n```\n\n----------------------------------------\n\nTITLE: Setting Model Provider in Eliza Character Configuration\nDESCRIPTION: This snippet shows how to configure the `modelProvider` property in an Eliza character configuration file. Setting it to `galadriel` ensures that the Eliza agent uses the Galadriel API for verified inference calls, integrating with the Sentience Stack.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/verified-inference.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"modelProvider\": \"galadriel\"\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Project Files and Directories\nDESCRIPTION: Bash commands for creating the necessary directories and files for the NASA plugin project structure.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Create directories\nmkdir src\nmkdir src/actions\n\n# Create essential files\ntouch package.json tsconfig.json tsup.config.ts\ntouch src/index.ts src/types.ts src/examples.ts\ntouch src/services.ts src/environment.ts\ntouch src/actions/getMarsRoverPhoto.ts src/actions/getApod.ts\n```\n\n----------------------------------------\n\nTITLE: Markdown for Documentation Needs\nDESCRIPTION: This markdown snippet indicates that no specific documentation needs were explicitly requested in the chat log. It serves as a placeholder for future documentation requirements identified by the community.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-18.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Documentation Needs\n\n- No specific documentation needs were explicitly requested in the provided text.\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for EmbeddingModelSettings\nDESCRIPTION: Defines a TypeScript type alias that specifies the structure for embedding model settings. Contains a required 'name' property of type string and an optional 'dimensions' property of type number.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/EmbeddingModelSettings.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmbeddingModelSettings = {\n  name: string;\n  dimensions?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Text Splitting in TypeScript\nDESCRIPTION: The splitText function takes a string content and divides it into chunks of a specified size, with an optional bleed parameter to control overlap between chunks. Returns an array of string chunks.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/splitText.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsplitText(content: string, chunkSize: number, bleed: number): string[]\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Model Settings in Character JSON\nDESCRIPTION: JSON configuration for character file to specify the AI model provider, specific model, and token limits for input and output.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modelProvider\": \"openai\",  // or \"anthropic\", \"deepseek\", etc.\n  \"settings\": {\n    \"model\": \"gpt-4\",\n    \"maxInputTokens\": 200000,\n    \"maxOutputTokens\": 8192\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Discord Configuration Options in TypeScript\nDESCRIPTION: This snippet defines the structure for Discord-related configuration options. It includes settings for team member interest keywords, allowed channel IDs, and auto-posting functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Character.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclientConfig.discord.teamMemberInterestKeywords?: string[]\n\nclientConfig.discord.allowedChannelIds?: string[]\n\nclientConfig.discord.autoPost?: {\n  enabled?: boolean\n  monitorTime?: number\n  inactivityThreshold?: number\n  mainChannelId?: string\n  announcementChannelIds?: string[]\n  minTimeBetweenPosts?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getInstance Method in TypeScript Interface\nDESCRIPTION: Method signature for getting an instance of the PDF service. Returns an IPdfService instance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IPdfService.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetInstance(): IPdfService\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Validating Private Keys - TypeScript\nDESCRIPTION: This code snippet retrieves a blockchain private key from the settings and ensures its format is valid before use, promoting secure practices.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/secrets-management.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Retrieve private key from settings\nconst privateKey = runtime.getSetting(\"WALLET_PRIVATE_KEY\");\n\n// Validate private key format (example for EVM)\nif (privateKey && !privateKey.match(/^(0x)?[0-9a-fA-F]{64}$/)) {\n  throw new Error(\"Invalid private key format\");\n}\n\n// Use private key securely - NEVER log the actual key\nconsole.log(\"Using wallet with address:\", getAddressFromPrivateKey(privateKey));\n```\n\n----------------------------------------\n\nTITLE: Defining ActionResponse Interface Properties in TypeScript\nDESCRIPTION: Interface definition specifying social media interaction properties. Includes required boolean flags for like and retweet actions, plus optional boolean flags for quote and reply actions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ActionResponse.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionResponse {\n    like: boolean;\n    retweet: boolean;\n    quote?: boolean;\n    reply?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring getEmbeddingConfig Function in TypeScript\nDESCRIPTION: This snippet defines the getEmbeddingConfig function, which takes no parameters and returns an EmbeddingConfig object. The function is defined in the embedding.ts file of the @elizaos/core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getEmbeddingConfig.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getEmbeddingConfig(): EmbeddingConfig\n```\n\n----------------------------------------\n\nTITLE: Room Management Operations in ElizaOS\nDESCRIPTION: Provides examples of how to retrieve room information and participants within a room using the SQLite adapter. Helps in managing the interaction spaces within the application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/adapter-sqlite/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Get room by ID\nconst room = await adapter.getRoom(roomId);\n\n// Get participants in a room\nconst participants = await adapter.getParticipantsForRoom(roomId);\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Eliza\nDESCRIPTION: This bash command installs essential system dependencies needed for building and running the Eliza project. It includes tools for compiling code, Python, Git, and audio libraries.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/wsl.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y \\\n    build-essential \\\n    python3 \\\n    python3-pip \\\n    git \\\n    curl \\\n    ffmpeg \\\n    libtool-bin \\\n    autoconf \\\n    automake \\\n    libopus-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for NASA Plugin\nDESCRIPTION: TypeScript configuration file that extends the main tsconfig and specifies output and root directories for the NASA plugin project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\"\n  },\n  \"include\": [\"src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Eliza Docker Logs\nDESCRIPTION: Shows how to view logs for the Eliza Docker container, which is essential for troubleshooting startup or runtime errors. Users should replace \\'eliza\\' with the actual container name if different.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs eliza\n```\n\n----------------------------------------\n\nTITLE: Declaring EmbeddingProvider Type Constants in TypeScript\nDESCRIPTION: Defines a readonly object containing string literal types for supported embedding providers. Located in the core package's embedding.ts file. Each provider is defined as a constant string matching its name.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/EmbeddingProvider.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst EmbeddingProvider: { \n  readonly OpenAI: \"OpenAI\",\n  readonly Ollama: \"Ollama\",\n  readonly GaiaNet: \"GaiaNet\",\n  readonly Heurist: \"Heurist\",\n  readonly BGE: \"BGE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Objects from Text in TypeScript\nDESCRIPTION: This function parses a JSON object from given text. It searches for JSON blocks in triple backticks or object patterns, then attempts to parse them. It returns the parsed object, an array if the result is an array, or null if parsing fails or the result is neither an object nor an array.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/parseJSONObjectFromText.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nparseJSONObjectFromText(text: string): Record<string, any> | null\n```\n\n----------------------------------------\n\nTITLE: Defining Models Constant in TypeScript\nDESCRIPTION: Declaration of a constant named 'models' with type Models from the elizaOS core package. Located in the models.ts file within the core package source.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/models.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst models: Models\n```\n\n----------------------------------------\n\nTITLE: Service Initialization Method\nDESCRIPTION: Abstract initialization method that must be implemented by classes implementing the S3 service interface. Takes an IAgentRuntime parameter.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IAwsS3Service.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract initialize(runtime: IAgentRuntime): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Gaia\nDESCRIPTION: Environment variable settings for the Gaia model integration. These settings specify the model server URL and embedding configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_15min.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMODEL_LLM_API_URL=https://modelserverurl/\nMODEL_EMBEDDING_MODEL=embeddingmodel\nMODEL_EMBEDDING_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Defining GoalStatus Enumeration in TypeScript\nDESCRIPTION: This code snippet defines the GoalStatus enumeration with three possible states for goals: DONE, FAILED, and IN_PROGRESS. It is part of the core types in the elizaOS project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/GoalStatus.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum GoalStatus {\n  DONE = \"DONE\",\n  FAILED = \"FAILED\",\n  IN_PROGRESS = \"IN_PROGRESS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord Client\nDESCRIPTION: Basic setup for the Discord client integration, showing how to initialize the client with environment variables for Discord's application ID and API token.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordClientInterface } from \"@elizaos/client-discord\";\n\n// Initialize client\nconst client = await DiscordClientInterface.start(runtime);\n\n// Configuration in .env\nDISCORD_APPLICATION_ID = your_app_id;\nDISCORD_API_TOKEN = your_bot_token;\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Agent with Character Configuration\nDESCRIPTION: This bash command starts the Eliza agent using a specified character configuration file. The `pnpm start` command initializes the agent with the provided character settings.  The `pnpm start:client` command may be used to run the client facing portion of the agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/verified-inference.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --character=\"characters/<your_character>.json\"\npnpm start:client\n```\n\n----------------------------------------\n\nTITLE: Defining shouldRespondFooter Constant in TypeScript\nDESCRIPTION: This snippet defines a constant variable 'shouldRespondFooter' containing a string with instructions for response options. It includes placeholders for agent name and specifies available choices.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/shouldRespondFooter.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst shouldRespondFooter: \"The available options are [RESPOND], [IGNORE], or [STOP]. Choose the most appropriate option.\\nIf {{agentName}} is talking too much, you can choose [IGNORE]\\n\\nYour response must include one of the options.\"\n```\n\n----------------------------------------\n\nTITLE: Post Examples for Social Media in JSON\nDESCRIPTION: Example of postExamples showing sample social media posts that guide content style. These examples help establish the character's tone and approach to posting on social platforms.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"postExamples\": [\n  \"No tax on tips, overtime, or social security for seniors!\",\n  \"End inflation and make America affordable again.\"\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing DbCacheAdapter in TypeScript\nDESCRIPTION: Constructor for the DbCacheAdapter class that takes a database adapter and an agent ID as parameters. It initializes a new instance of the database cache adapter for ElizaOS.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DbCacheAdapter.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew DbCacheAdapter(db, agentId): [`DbCacheAdapter`](DbCacheAdapter.md)\n```\n\n----------------------------------------\n\nTITLE: Starting ElizaOS Chat Client\nDESCRIPTION: Command to start the ElizaOS chat client HTTP server for web-based interaction with the agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm start:client\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Handler Implementation\nDESCRIPTION: Rate limit handling with backoff calculation and retry logic.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nasync handleRateLimit(error) {\n\tconst delay = this.calculateBackoff(error);\n\tawait wait(delay);\n\treturn this.retryRequest();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining postActionResponseFooter Constant in TypeScript\nDESCRIPTION: This snippet defines a constant variable named postActionResponseFooter. It contains instructions for selecting appropriate actions after a response, such as like, retweet, quote, or reply. Each action must be on a separate line.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/postActionResponseFooter.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst postActionResponseFooter: \"Choose any combination of [LIKE], [RETWEET], [QUOTE], and [REPLY] that are appropriate. Each action must be on its own line. Your response must only include the chosen actions.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for API Keys - Bash\nDESCRIPTION: This snippet shows how to define API keys and tokens in a bash format using environment variables to secure sensitive information used in the application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/secrets-management.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# API Keys for Model Providers\nOPENAI_API_KEY=sk-*               # OpenAI API key\nANTHROPIC_API_KEY=your-key        # Anthropic/Claude API key\nGOOGLE_GENERATIVE_AI_API_KEY=     # Gemini API key\nGROQ_API_KEY=gsk-*                # Groq API key\n\n# Client Authentication\nDISCORD_API_TOKEN=                # Discord bot token\nTELEGRAM_BOT_TOKEN=               # Telegram bot token\nTWITTER_USERNAME=                 # Twitter/X username\nTWITTER_PASSWORD=                 # Twitter/X password\n\n# Database Credentials\nSUPABASE_URL=                     # Supabase URL\nSUPABASE_ANON_KEY=                # Supabase anonymous key\nMONGODB_CONNECTION_STRING=        # MongoDB connection string\n\n# Blockchain Related\nEVM_PRIVATE_KEY=                  # EVM private key with \"0x\" prefix\nSOLANA_PRIVATE_KEY=               # Solana wallet private key\nSOLANA_PUBLIC_KEY=                # Solana wallet public key\n```\n\n----------------------------------------\n\nTITLE: Quantum Superposition Concept Implementation Prototype\nDESCRIPTION: A conceptual representation of quantum superposition principles applied to computational modeling, demonstrating the probabilistic nature of particle states and measurement uncertainty\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/the-arena/chat_2024-11-26.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef quantum_state(particle):\n    probability_wave = calculate_uncertainty(particle)\n    measurement_result = resolve_superposition(probability_wave)\n    return measurement_result\n```\n\n----------------------------------------\n\nTITLE: Publishing Eliza Agent Docker Image to Container Registry\nDESCRIPTION: Command to push the built Docker image of the Eliza agent to a container registry.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker push username/eliza-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Setting Value from Runtime\nDESCRIPTION: Method to retrieve a setting value by its key from the configuration. Returns the corresponding value from the config settings map.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/AgentRuntime.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetSetting(key: string): any {\n  return this.config.settings.get(key);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Twitter Archive to Character File\nDESCRIPTION: Command to run the tweets-to-character script that processes a Twitter archive ZIP file and generates a character JSON file using the selected AI model.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_10min.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx tweets-to-character path/to/archive.zip\n```\n\n----------------------------------------\n\nTITLE: Validating UUID Values in TypeScript\nDESCRIPTION: Function signature for validateUuid that takes an unknown value parameter and returns either a valid UUID type or null. Located in the core package's uuid.ts file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/validateUuid.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvalidateUuid(value: unknown): UUID | null\n```\n\n----------------------------------------\n\nTITLE: Using ElizaOS Start Script\nDESCRIPTION: Commands for cloning the main ElizaOS repository and running the start script, with usage notes for optional arguments like verbose mode and skipping NVM.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:elizaOS/eliza.git\ncd eliza\n\n# usage start.sh [-v|--verbose] [--skip-nvm]\n./scripts/start.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Eliza Repository\nDESCRIPTION: Commands for cloning the Eliza repository, checking out the latest version, and installing dependencies. This sets up the foundation for creating a social AI agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_15min.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaOS/eliza.git\ncd eliza\ngit checkout <latest-tag>\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File in Bash\nDESCRIPTION: Creates a local environment configuration file by copying the example template, which is the first step in setting up Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Retrieving Relationships with Promise\nDESCRIPTION: This abstract method retrieves all relationships for a specific user. It requires an object parameter containing a UUID for the user and returns a Promise resolving to an array of Relationship objects. Dependencies include conforming to the IDatabaseAdapter interface.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n> `abstract` **getRelationships**(`params`): `Promise`\\<[`Relationship`](../interfaces/Relationship.md)[]\\>\\n\\nRetrieves all relationships for a specific user.\n```\n\n----------------------------------------\n\nTITLE: Form Plugin Environment Configuration in Bash\nDESCRIPTION: Environment variable configuration for the Form plugin, showing how to set the private key for accessing the Form blockchain and an optional flag to use the testnet instead of mainnet.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nFORM_PRIVATE_KEY=your_private_key\nFORM_TESTNET=true  # Optional, defaults to false\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Eliza Agents via Command Line\nDESCRIPTION: Command line instruction to run multiple Eliza agents simultaneously by specifying different character files as comma-separated values.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --characters=\"characters/agent1.json,characters/agent2.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining IrysMessageType Enum in TypeScript\nDESCRIPTION: Enumerates the possible message types in the Irys messaging system. Includes REQUEST for general requests, DATA_STORAGE for storage operations, and REQUEST_RESPONSE for response messages.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/IrysMessageType.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum IrysMessageType {\n    REQUEST = \"REQUEST\",\n    DATA_STORAGE = \"DATA_STORAGE\",\n    REQUEST_RESPONSE = \"REQUEST_RESPONSE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Starting Eliza for Development\nDESCRIPTION: Steps to manually clone the Eliza repository, checkout the latest release, and start the application. This method is recommended for plugin or platform development.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza.git\ngit checkout $(git describe --tags --abbrev=0)\ncp .env.example .env\npnpm i\npnpm build\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQLite Database for Development\nDESCRIPTION: Configuration for setting up a SQLite database for development purposes. Note that SQLite doesn't natively support vector operations needed for embedding-based searches.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst devConfig = {\n    type: 'sqlite',\n    database: './dev.db',\n    vectorExtension: false    // SQLite doesn't support vector operations natively\n};\n```\n\n----------------------------------------\n\nTITLE: Character File with Secrets Configuration\nDESCRIPTION: JSON/TypeScript example showing how to configure secrets directly in a character file, including Discord and OpenAI API credentials.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"name\": \"eliza\",\n  // ... other config options\n  \"settings\": {\n    \"secrets\": {\n      \"DISCORD_APPLICATION_ID\": \"1234\",\n      \"DISCORD_API_TOKEN\": \"xxxx\",\n      \"OPENAI_API_KEY\": \"sk-proj-xxxxxxxxx-...\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting ElizaOS with Multiple Character Files\nDESCRIPTION: Command to start ElizaOS with multiple character configuration files specified as a comma-separated list.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --characters=\"characters/deep-thought.character.json,characters/sbf.character.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining IDatabaseCacheAdapter Interface in TypeScript\nDESCRIPTION: This code snippet defines the IDatabaseCacheAdapter interface with three methods: getCache, setCache, and deleteCache. Each method operates on cache entries identified by an agentId and key.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IDatabaseCacheAdapter.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IDatabaseCacheAdapter {\n  getCache(params: {\n    agentId: `${string}-${string}-${string}-${string}-${string}`;\n    key: string;\n  }): Promise<string>;\n\n  setCache(params: {\n    agentId: `${string}-${string}-${string}-${string}-${string}`;\n    key: string;\n    value: string;\n  }): Promise<boolean>;\n\n  deleteCache(params: {\n    agentId: `${string}-${string}-${string}-${string}-${string}`;\n    key: string;\n  }): Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Service\nDESCRIPTION: Abstract initialization method that must be implemented by classes implementing this interface. Takes an IAgentRuntime parameter.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IBrowserService.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract initialize(runtime: IAgentRuntime): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Example of Template Configuration Usage in JSON\nDESCRIPTION: Demonstrates a practical application of the template configuration by showing a subset of platforms and features specified within the JSON object. This example outlines how only selected templates may be configured, highlighting the flexible nature of the setup for Discord, Telegram, and Twitter integrations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/template-configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"templates\": {\n        \"discordMessageHandlerTemplate\": \"\",\n        \"discordShouldRespondTemplate\": \"\",\n        \"telegramShouldRespondTemplate\": \"\",\n        \"twitterPostTemplate\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Eliza Plugins with Package Manager\nDESCRIPTION: Shows how to install Eliza plugins using the pnpm package manager. This command installs a specific plugin package from the @elizaos namespace.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @elizaos/plugin-[name]\n```\n\n----------------------------------------\n\nTITLE: Installing WSL2 on Windows\nDESCRIPTION: PowerShell commands to enable and install Windows Subsystem for Linux version 2\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/start-script.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install\n```\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install -d Ubuntu\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Posts from Deva API\nDESCRIPTION: Method implementation for fetching user posts from the Deva API. It makes a GET request to the post endpoint with a filter for the specific persona ID and returns an array of Deva posts.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\npublic async getPersonaPosts(personaId: string): Promise<DevaPost[]> {\n\t  const res = await fetch(\n\t\t    `${this.apiBaseUrl}/post?filter_persona_id=${personaId}`, \n        {\n\t\t\t      headers: {\n            Authorization: `Bearer ${this.accessToken}`,\n            \"Content-Type\": \"application/json\",\n        },\n    })\n        .then((res) => res.json());\n\t  \n\t  return res.items;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoggingLevel Enum in TypeScript\nDESCRIPTION: TypeScript enumeration defining three logging levels for the elizaOS core system. The levels include DEBUG for detailed debugging information, VERBOSE for extended logging, and NONE to disable logging.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/LoggingLevel.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum LoggingLevel {\n  DEBUG = \"debug\",\n  VERBOSE = \"verbose\",\n  NONE = \"none\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Postinstall Script for SQLite Rebuilding\nDESCRIPTION: JSON configuration to add a postinstall script in package.json for automatically rebuilding better-sqlite3 to resolve compatibility issues.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nscripts: {\n    \"postinstall\": \"npm rebuild better-sqlite3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Goals in ElizaOS\nDESCRIPTION: Shows creating a new goal involving task progress, including essential fields like status, name, and objectives stored as JSON. Requires linkage with user and room identifiers.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/adapter-sqlite/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new goal\nawait adapter.createGoal({\n  name: 'Complete task',\n  status: 'IN_PROGRESS',\n  objectives: ['Research', 'Implementation'],\n  userId,\n  roomId\n});\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for generateTweetActions in TypeScript\nDESCRIPTION: This function declaration shows the signature of generateTweetActions which generates tweet actions. It accepts an object with runtime, context, and modelClass parameters, and returns a Promise that resolves to either an ActionResponse or null. According to the comment, this function 'doesn't belong here'.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateTweetActions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**generateTweetActions**(`__namedParameters`): `Promise`\\<[`ActionResponse`](../interfaces/ActionResponse.md) \\| `null`\\>\n```\n\n----------------------------------------\n\nTITLE: Running Attestation Server via Docker\nDESCRIPTION: Docker command to run the mock attestation server with port mapping.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_21\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker run --init -p 127.0.0.1:1350:1350 marlinorg/attestation-server-custom-mock\n```\n\n----------------------------------------\n\nTITLE: Installing PNPM on Linux\nDESCRIPTION: This snippet installs PNPM, a fast Node.js package manager, necessary for handling the dependencies of the Eliza chatbot. It executes a script to fetch and install PNPM and refreshes the bash configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\nsource /root/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Cloning and Starting Eliza with Shell Script\nDESCRIPTION: This snippet shows an alternative method for cloning and setting up Eliza using a shell script. After cloning the Eliza repository, navigate into the directory and execute the start script. This method relies on a shell script to manage the start process, including environment setup and execution.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/intro.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza\ncd eliza\nsh scripts/start.sh\n```\n\n----------------------------------------\n\nTITLE: Controlling Twitter Interaction Types with Environment Variables\nDESCRIPTION: Environment variable configuration to selectively enable or disable specific Twitter interaction types like likes, retweets, replies, and follows.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTWITTER_LIKES_ENABLE=false\nTWITTER_RETWEETS_ENABLE=false\nTWITTER_REPLY_ENABLE=true\nTWITTER_FOLLOW_ENABLE=false\n```\n\n----------------------------------------\n\nTITLE: Defining NFT and Extension Options in TypeScript\nDESCRIPTION: This snippet defines the structure for NFT-related configuration and extension options. It includes a prompt for NFT generation and an array for inheriting information from parent characters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Character.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnft?: {\n  prompt: string\n}\n\nextends?: string[]\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateType Type Alias in TypeScript\nDESCRIPTION: Defines the TemplateType as either a string or a function that takes options and returns a string. This type is used in the elizaOS core package for flexible template handling.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/TemplateType.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTemplateType: `string` | (`options`) => `string`\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Set Method in TypeScript Interface\nDESCRIPTION: Method signature for storing a string value in cache with a given key. Returns a Promise that resolves when the value is stored.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ICacheAdapter.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nset(key: string, value: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting up Eliza Starter Project\nDESCRIPTION: These commands clone the Eliza starter project, navigate into the directory, copy the environment variables template, install dependencies, build the project, and start the agent. It provides a quick start for users to begin working with Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_NL.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Example Input for Invoking a Contract (JSON)\nDESCRIPTION: This JSON snippet provides an example input for the `INVOKE_CONTRACT` action, showing how to structure the `contractAddress`, `method`, `abi`, `args`, and `network` parameters for interacting with a deployed smart contract.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contractAddress\": \"0x123...\",\n  \"method\": \"transfer\",\n  \"abi\": [...],\n  \"args\": {\n    \"to\": \"0x456...\",\n    \"amount\": \"1000000000000000000\"\n  },\n  \"network\": \"base\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Twitter Scraper\nDESCRIPTION: Example configuration for the .env file that sets Twitter authentication credentials and optional parameters for blog scraping and rate limiting. Required for authenticating with Twitter and configuring the scraping behavior.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/fine-tuning.md#2025-04-16_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# (Required) Twitter Authentication\nTWITTER_USERNAME=     # your twitter username\nTWITTER_PASSWORD=     # your twitter password\n\n# (Optional) Blog Configuration\nBLOG_URLS_FILE=      # path to file containing blog URLs\n\n# (Optional) Scraping Configuration\nMAX_TWEETS=          # max tweets to scrape\nMAX_RETRIES=         # max retries for scraping\nRETRY_DELAY=         # delay between retries\nMIN_DELAY=           # minimum delay between requests\nMAX_DELAY=           # maximum delay between requests\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Galadriel API\nDESCRIPTION: This bash script configures environment variables required for the Galadriel API, including the API key and model preferences. The GALADRIEL_API_KEY is essential for authentication. Optional variables allow specifying preferred models (small, medium, large) and providing an OpenAI API key for fine-tuned models.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/verified-inference.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"GALADRIEL_API_KEY=gal-*         # Get from https://dashboard.galadriel.com/\n# Use any model supported by OpenAI\nSMALL_GALADRIEL_MODEL=          # Default: gpt-4o-mini\nMEDIUM_GALADRIEL_MODEL=         # Default: gpt-4o\nLARGE_GALADRIEL_MODEL=          # Default: gpt-4o\n# If you wish to use a fine-tuned model you will need to provide your own OpenAI API key\nGALADRIEL_FINE_TUNE_API_KEY=    # starting with sk-\"\n```\n\n----------------------------------------\n\nTITLE: Constructing CacheManager Instance in TypeScript\nDESCRIPTION: Constructor implementation for CacheManager class that accepts a cache adapter instance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/CacheManager.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew CacheManager<CacheAdapter>(adapter): CacheManager<CacheAdapter>\n```\n\n----------------------------------------\n\nTITLE: Installing Eliza Client Packages with PNPM\nDESCRIPTION: Commands for installing various Eliza client packages using PNPM package manager, including Discord, Twitter, Telegram, Direct API, Auto Client, and Deva Client.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Discord\npnpm add @elizaos/client-discord\n\n# Twitter\npnpm add @elizaos/client-twitter\n\n# Telegram\npnpm add @elizaos/client-telegram\n\n# Direct API\npnpm add @elizaos/client-direct\n\n# Auto Client\npnpm add @elizaos/client-auto\n\n# Deva Client\npnpm add @elizaos/client-deva\n```\n\n----------------------------------------\n\nTITLE: Verbose Logging for Troubleshooting\nDESCRIPTION: Shell command to run start script with detailed logging for diagnostic purposes\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/start-script.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/start.sh -v\n```\n\n----------------------------------------\n\nTITLE: Relationship Management Methods in TypeScript\nDESCRIPTION: Abstract methods for creating and retrieving relationships between users.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nabstract createRelationship(params: { userA: `${string}-${string}-${string}-${string}-${string}`, userB: `${string}-${string}-${string}-${string}-${string}` }): Promise<boolean>;\n\nabstract getRelationship(params: { userA: `${string}-${string}-${string}-${string}-${string}`, userB: `${string}-${string}-${string}-${string}-${string}` }): Promise<Relationship>;\n```\n\n----------------------------------------\n\nTITLE: Example Input for SEND_MASS_PAYOUT Action (JSON)\nDESCRIPTION: This JSON snippet provides an example input for the `SEND_MASS_PAYOUT` action, illustrating how to structure the `receivingAddresses`, `transferAmount`, `assetId`, and `network` parameters. These parameters define the details of the mass payout.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"receivingAddresses\": [\n        \"0xA0ba2ACB5846A54834173fB0DD9444F756810f06\",\n        \"0xF14F2c49aa90BaFA223EE074C1C33b59891826bF\"\n    ],\n    \"transferAmount\": 5000000000000000,\n    \"assetId\": \"ETH\",\n    \"network\": \"eth\"\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Fields Structure for elizaOS Character Files in JSON\nDESCRIPTION: Additional recommended fields for creating more sophisticated character files, including username, system prompt, lore, knowledge base entries, message examples, post examples, topics of expertise, and character adjectives.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/characterfile.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"username\": \"handle\",              // Character's username/handle\n    \"system\": \"System prompt text\",    // Custom system prompt\n    \"lore\": [],                       // Additional background/history\n    \"knowledge\": [                     // Knowledge base entries\n        \"Direct string knowledge\",\n        { \"path\": \"file/path.md\", \"shared\": false },\n        { \"directory\": \"knowledge/path\", \"shared\": false }\n    ],\n    \"messageExamples\": [],           // Example conversations\n    \"postExamples\": [],             // Example social posts\n    \"topics\": [],                  // Areas of expertise\n    \"adjectives\": []              // Character traits\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Character File Example in JSON\nDESCRIPTION: A comprehensive example of a complete character file for a tech-focused AI character. This includes all essential fields from model configuration to personality traits and interaction examples.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"TechAI\",\n    \"modelProvider\": \"anthropic\",\n    \"clients\": [\"discord\", \"direct\"],\n    \"bio\": \"AI researcher and educator focused on practical applications\",\n    \"lore\": [\n        \"Pioneer in open-source AI development\",\n        \"Advocate for AI accessibility\"\n    ],\n    \"messageExamples\": [\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": { \"text\": \"Can you explain how AI models work?\" }\n            },\n            {\n                \"user\": \"TechAI\",\n                \"content\": {\n                    \"text\": \"Think of AI models like pattern recognition systems.\"\n                }\n            }\n        ]\n    ],\n    \"postExamples\": [\n        \"Understanding AI doesn't require a PhD - let's break it down simply\",\n        \"The best AI solutions focus on real human needs\"\n    ],\n    \"topics\": [\n        \"artificial intelligence\",\n        \"machine learning\",\n        \"technology education\"\n    ],\n    \"style\": {\n        \"all\": [\n            \"explain complex topics simply\",\n            \"be encouraging and supportive\"\n        ],\n        \"chat\": [\"use relevant examples\", \"check understanding\"],\n        \"post\": [\"focus on practical insights\", \"encourage learning\"]\n    },\n    \"adjectives\": [\"knowledgeable\", \"approachable\", \"practical\"],\n    \"settings\": {\n        \"model\": \"claude-3-opus-20240229\",\n        \"voice\": { \"model\": \"en-US-neural\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceType Accessor in TypeScript Interface\nDESCRIPTION: Abstract getter method that returns the service type enumeration. Inherited from the base Service class.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IPdfService.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget serviceType(): ServiceType\n```\n\n----------------------------------------\n\nTITLE: Cloning Eliza Starter Repository\nDESCRIPTION: Quick start method for initializing Eliza project using git clone and setup commands\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_KOR.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting ElizaOS Service\nDESCRIPTION: Activates the ElizaOS systemd service to start automatically on boot and launches it immediately.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable eliza\nsudo systemctl start eliza\n```\n\n----------------------------------------\n\nTITLE: Cloning the Eliza Project Repository\nDESCRIPTION: Guides on cloning the Eliza repository from GitHub. Git must be installed and configured on the system. The repository URL used is a placeholder and should be replaced with the actual repository URL.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_USERNAME/eliza.git\ncd eliza\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Plugin in Character Configuration\nDESCRIPTION: JSON snippet showing how to import a custom plugin in the agent's character.json file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@elizaos/plugin-example\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQLTag Interface in TypeScript\nDESCRIPTION: This code snippet defines the GraphQLTag interface with two properties: name (a string) and values (an array of any type). It is part of the elizaOS core package types.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/GraphQLTag.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GraphQLTag {\n    name: string;\n    values: any[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Function Type in TypeScript\nDESCRIPTION: Type alias for validator functions that check action/evaluator validity. Takes an agent runtime, memory object, and optional state as parameters, returning a Promise<boolean> indicating validation result.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Validator.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nValidator: (runtime: IAgentRuntime, message: Memory, state?: State) => Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Action Items - JSON Configuration\nDESCRIPTION: This JSON snippet outlines technical tasks, documentation needs, feature requests, and community tasks identified during the community interaction.  It serves as a configuration object for tracking and managing action items within the elizaOS project. The \"specific task\" and \"specific feature\" keys provide detailed descriptions of individual items, and the \"mentioned by\" and \"suggested by\" keys attribute ownership.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/the-arena/chat_2024-11-08.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Technical Tasks\": [\n        {\n            \"specific task\": \"Monitoring the next accelerative opportunity\",\n\n            \"mentioned by\": \"@Eliza's Sister\"\n        },\n\n        {\n            \"specific task\": \"Refine and learn from trading delays\",\n\n            \"mentioned by\": \"PatchworkNaval\"\n        }\n    ],\n\n    \"Documentation Needs\": [],\n\n    \"Feature Requests\": [\n        {\n            \"specific feature\": \"Enhance efficiency through innovative protocols like LAP\",\n\n            \"suggested by\": \"@PatchworkNaval\"\n        }\n    ],\n\n    \"Community Tasks\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza on Linux/macOS\nDESCRIPTION: Shell script command to launch Eliza from the root directory\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/start-script.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/start.sh\n```\n\n----------------------------------------\n\nTITLE: Trading Safety Limits Configuration\nDESCRIPTION: Defines critical safety parameters for trading, including maximum position size, slippage tolerance, minimum liquidity requirements, and stop-loss thresholds.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/autonomous-trading.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst SAFETY_LIMITS = {\n    MAX_POSITION_SIZE: 0.1, // 10% of portfolio\n    MAX_SLIPPAGE: 0.05, // 5% slippage\n    MIN_LIQUIDITY: 1000, // $1000 minimum liquidity\n    MAX_PRICE_IMPACT: 0.03, // 3% price impact\n    STOP_LOSS: 0.15, // 15% stop loss\n};\n```\n\n----------------------------------------\n\nTITLE: SQLite Table Creation - TypeScript\nDESCRIPTION: This TypeScript snippet outlines the SQL required for creating the memories table in SQLite, including fields and their types for the Eliza application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst sqliteTables = `\nCREATE TABLE IF NOT EXISTS memories (\n  id TEXT PRIMARY KEY,\n  type TEXT NOT NULL,\n  content TEXT NOT NULL,\n  embedding BLOB,\n  userId TEXT NOT NULL,\n  roomId TEXT NOT NULL,\n  agentId TEXT NOT NULL,\n  \"unique\" INTEGER DEFAULT 0,\n  createdAt INTEGER NOT NULL\n);\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddingProviderType Type Alias in TypeScript\nDESCRIPTION: Type alias definition that creates a union type of all possible values from the EmbeddingProvider enum. This type is used to strongly type embedding provider selections throughout the elizaOS system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/EmbeddingProviderType.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmbeddingProviderType = typeof EmbeddingProvider[keyof typeof EmbeddingProvider]\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Environment for ElizaOS Service User\nDESCRIPTION: Creates a profile file for the eliza user with necessary environment variables for NVM and PNPM.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /opt/elizaos/.profile << 'EOL'\n# NVM setup\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n\n# pnpm setup\nexport PNPM_HOME=\"$HOME/.local/share/pnpm\"\ncase \":$PATH:\" in\n  *\":$PNPM_HOME:\"*) ;;\n  *) export PATH=\"$PNPM_HOME:$PATH\" ;;\nesac\nEOL\n```\n\n----------------------------------------\n\nTITLE: Error Handling - TypeScript\nDESCRIPTION: This snippet demonstrates error handling when creating a memory in Eliza, outlining conditional responses based on specific database error codes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    await db.createMemory(memory);\n} catch (error) {\n    if (error.code === \"SQLITE_CONSTRAINT\") {\n        // Handle unique constraint violation\n    } else if (error.code === \"23505\") {\n        // Handle Postgres unique violation\n    } else {\n        // Handle other errors\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server - Bash\nDESCRIPTION: Commands to start the development server for Eliza with options to specify characters, allowing users to test interactions with different setups.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Start with default character\npnpm run dev\n\n# Start with specific character\npnpm run dev --characters=\"characters/my-character.json\"\n\n# Start with multiple characters\npnpm run dev --characters=\"characters/char1.json,characters/char2.json\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Recommendation Patterns in TypeScript\nDESCRIPTION: This function analyzes recommendation patterns, providing insights into timing, token preferences, and risk profiles based on history. Using TypeScript, it necessitates previous trading data and outputs several patterns related to trading behavior and success.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function analyzeRecommendationPatterns(\n    recommenderId: string,\n): Promise<RecommendationPattern> {\n    const history = await getRecommenderHistory(recommenderId);\n\n    return {\n        timeOfDay: analyzeTimingPatterns(history),\n        tokenTypes: analyzeTokenPreferences(history),\n        successRateByType: calculateTypeSuccessRates(history),\n        riskProfile: assessRiskProfile(history),\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RAG Knowledge Setting in Character Configuration\nDESCRIPTION: Setting to enable Retrieval Augmented Generation (RAG) in the character configuration file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/memory-management.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"ragKnowledge\": true\n```\n\n----------------------------------------\n\nTITLE: Managing Trust Scores in Eliza's Blockchain Integration\nDESCRIPTION: Demonstrates how to use the TrustScoreManager to generate trust scores for tokens and monitor trade performance within Eliza's blockchain integration system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst trustScoreManager = new TrustScoreManager(tokenProvider, trustScoreDb);\n\n// Generate trust scores\nconst score = await trustScoreManager.generateTrustScore(\n    tokenAddress,\n    recommenderId,\n    recommenderWallet,\n);\n\n// Monitor trade performance\nawait trustScoreManager.createTradePerformance(runtime, tokenAddress, userId, {\n    buy_amount: amount,\n    is_simulation: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and starting Eliza\nDESCRIPTION: These commands install the necessary dependencies using pnpm and then start the Eliza bot. The first command `pnpm i` installs the dependencies defined in the `package.json` file. The second command `pnpm start` starts the application, potentially using environment variables and character files defined elsewhere.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_JA.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm i\npnpm start\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Building ElizaOS Project\nDESCRIPTION: Installs project dependencies and builds the ElizaOS workspace using PNPM.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --no-frozen-lockfile\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Get all TEE agents information - bash\nDESCRIPTION: This snippet retrieves a list of all TEE agents along with their information by sending a GET request to the API. The response can be checked for successful retrieval or errors.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET --location \"http://localhost:3000/tee/agents\"\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza (Manual Setup)\nDESCRIPTION: Commands to manually install dependencies, build the project, and start the Eliza bot.  These steps are typically done automatically by the `start.sh` script.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm build\npnpm start\n\n# Το έργο εξελίσσεται γρήγορα, μερικές φορές πρέπει να καθαρίσετε το έργο, εαν επιστρέφετε στο έργο\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for parseShouldRespondFromText\nDESCRIPTION: This function parses text input to determine how Eliza should respond. It takes a string parameter and returns one of three possible response directives: 'RESPOND', 'IGNORE', or 'STOP'.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/parseShouldRespondFromText.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nparseShouldRespondFromText(text): \"RESPOND\" | \"IGNORE\" | \"STOP\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Declaration: generateObjectArray\nDESCRIPTION: Async function that generates an array of objects based on provided runtime configuration, context string, and model class. Returns a Promise that resolves to an array of any type.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/generateObjectArray.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateObjectArray(__namedParameters): Promise<any[]>\n```\n\n----------------------------------------\n\nTITLE: Constructing a MemoryCacheAdapter in TypeScript\nDESCRIPTION: Creates a new instance of MemoryCacheAdapter that can optionally be initialized with existing cache data. The adapter uses a Map to store key-value string pairs in memory.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/MemoryCacheAdapter.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew MemoryCacheAdapter(initalData?: Map<string, string>): MemoryCacheAdapter\n```\n\n----------------------------------------\n\nTITLE: Implementing clearKnowledge Method in IRAGKnowledgeManager Interface\nDESCRIPTION: Defines the clearKnowledge method which clears knowledge items, optionally based on a shared parameter.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IRAGKnowledgeManager.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nclearKnowledge(shared?: boolean): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Starting the Eliza Client\nDESCRIPTION: This command starts the Eliza client in a separate terminal. This is the final step after setting up the starter to interact with the agent through a URL.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_NL.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start:client\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in Environment Variables\nDESCRIPTION: Environment variable configuration to enable detailed debug logging for troubleshooting agent issues and monitoring behavior.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=eliza:*\n```\n\n----------------------------------------\n\nTITLE: Removing Eliza Docker Container\nDESCRIPTION: Command to remove the Eliza Docker container by name. Important for cleaning up resources or resetting the container state.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm /eliza\n```\n\n----------------------------------------\n\nTITLE: Setup Environment Configuration - Bash\nDESCRIPTION: Command to create a development environment configuration file from a template ensuring required environment variables are set appropriately.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Starting the AI Agent with Custom Character\nDESCRIPTION: Command to start the Eliza AI agent using a specific character file from the characters directory, which will enable the agent to interact based on the personality profile.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_10min.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --character characters/yourcharacter.json\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to install required packages and build the project. These commands prepare the environment for running the social AI agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_15min.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Attestation Endpoint in Eliza OS\nDESCRIPTION: Sets the endpoint for TEE Marlin attestation, defaulting to localhost if not specified.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# Optional, default is http://127.0.0.1:1350\nTEE_MARLIN_ATTESTATION_ENDPOINT=\"http://127.0.0.1:1350\"\n```\n\n----------------------------------------\n\nTITLE: Running database-specific tests\nDESCRIPTION: These commands run database-specific tests for Eliza. `pnpm test:sqlite` runs tests using SQLite, while `pnpm test:sqljs` runs tests using SQL.js. This allows for testing database interactions in different environments.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_JA.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm test:sqlite   # SQLiteでテストを実行\npnpm test:sqljs    # SQL.jsでテストを実行\"\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Adapter - Bash\nDESCRIPTION: This snippet shows how to install the PostgreSQL adapter for Eliza using pnpm. It allows the application to connect to a PostgreSQL database.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @eliza/adapter-postgres\n```\n\n----------------------------------------\n\nTITLE: Installing the Agent Package with PNPM\nDESCRIPTION: Command to install the @elizaos/agent package using PNPM package manager.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @elizaos/agent\n```\n\n----------------------------------------\n\nTITLE: Manual Start Commands\nDESCRIPTION: These commands manually install dependencies, build the project, and start the application using pnpm. It also includes a clean command which removes cached dependencies and rebuilds. This is helpful when updating the project after a long break.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_PL.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm build\npnpm start\n\n# Projekt rozwija się bardzo szybko, dlatego jeżeli robisz sobie przerwę na jakiś czas i wejdzie w międzyczasie dużo zmian, dobrze jest użyć tej komendy:\npnpm clean\n```\n\n----------------------------------------\n\nTITLE: Formatting Actors into String Representation in TypeScript\nDESCRIPTION: Function signature for formatActors which takes actors as a parameter and returns a string. This function is defined in the messages.ts file of the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatActors.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformatActors(actors): string\n```\n\n----------------------------------------\n\nTITLE: Formatting Evaluator Names in TypeScript\nDESCRIPTION: This function takes an array of Evaluator objects and formats their names into a comma-separated list, each enclosed in single quotes. It returns a string with the formatted names.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatEvaluatorNames.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nformatEvaluatorNames(evaluators: Evaluator[]): string\n```\n\n----------------------------------------\n\nTITLE: Knowledge Management Tools for elizaOS Character Files in Bash\nDESCRIPTION: Command-line tools for converting documents into knowledge for character files. These utilities help organize and process information for both classic and RAG knowledge modes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/characterfile.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx folder2knowledge <path/to/folder>\nnpx knowledge2character <character-file> <knowledge-file>\n```\n\n----------------------------------------\n\nTITLE: Opening API Port in Firewall for ElizaOS\nDESCRIPTION: Optional firewall configuration to expose the ElizaOS API publicly on port 3000.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 3000/tcp\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase MassPayments Plugin in TypeScript\nDESCRIPTION: This snippet shows how to import and configure the Coinbase MassPayments plugin in a character's configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinbaseMassPaymentsPlugin } from \"@eliza/plugin-coinbase-masspayments\";\n\nconst character = {\n    plugins: [coinbaseMassPaymentsPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Debug Logging in Eliza\nDESCRIPTION: Demonstrates how to use the debug package for detailed operation logging in Eliza. The debug function allows for namespaced logging with detailed object inspection for troubleshooting.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/advanced.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst debug = require(\"debug\")(\"eliza:advanced\");\n\ndebug(\"Detailed operation info: %O\", {\n    operation: \"complexOperation\",\n    parameters: params,\n    result: result,\n});\n```\n\n----------------------------------------\n\nTITLE: Example Call to SEND_MASS_PAYOUT Action (Typescript)\nDESCRIPTION: This snippet demonstrates how to call the `SEND_MASS_PAYOUT` action using the Coinbase MassPayments plugin. It shows how to specify the `receivingAddresses`, `transferAmount`, `assetId`, and `network` parameters to send cryptocurrency to multiple wallet addresses.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"SEND_MASS_PAYOUT\", {\n    receivingAddresses: [\n        \"0xA0ba2ACB5846A54834173fB0DD9444F756810f06\",\n        \"0xF14F2c49aa90BaFA223EE074C1C33b59891826bF\",\n    ],\n    transferAmount: 5000000000000000, // 0.005 ETH\n    assetId: \"ETH\",\n    network: \"eth\",\n});\nconsole.log(\"Mass payout response:\", response);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Eliza OS Core\nDESCRIPTION: Command to install project dependencies using pnpm package manager to resolve module not found errors\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-24.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Setting Up package.json for NASA Plugin\nDESCRIPTION: JSON configuration for the package.json file, defining the plugin name, version, entry points, and dependencies required for the Eliza NASA plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@elizaos/plugin-nasa\",\n  \"version\": \"1.0.0\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"dependencies\": {\n    \"@elizaos/core\": \"latest\"\n  },\n  \"peerDependencies\": {\n    \"@elizaos/core\": \"^1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Eliza Using Git Tags\nDESCRIPTION: Command to checkout the latest release tag of Eliza to resolve installation issues and ensure compatibility.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout $(git describe --tags --abbrev=0)\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp\nDESCRIPTION: This command installs the Sharp dependency, which might be required to resolve errors encountered during startup. Sharp is an optional dependency that can be installed using pnpm with the `--include=optional` flag.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_ES.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm install --include=optional sharp\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Registration in TypeScript\nDESCRIPTION: Shows how to properly register a service in ElizaOS, including checking for existing registrations to avoid duplicates.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// Proper service registration\nregisterService(service: Service): void {\n    const serviceType = (service as typeof Service).serviceType;\n    if (this.services.has(serviceType)) {\n        console.warn(`Service ${serviceType} is already registered`);\n        return;\n    }\n    this.services.set(serviceType, service);\n}\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning a model with Bagel API - bash\nDESCRIPTION: This snippet demonstrates how to initiate a fine-tuning process for a model using the Bagel API. It sends a POST request with the necessary parameters in the body, such as dataset type, model name, and training details.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/fine-tune \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer jvBpxrTNqGqhnfQhSEqCdsG6aTSP8IBL\" \\\n  -d '{\\n    \"dataset_type\": \"MODEL\",\\n    \"title\": \"smollm2-fine-tuning-00000099\",\\n    \"category\": \"AI\",\\n    \"details\": \"Test\",\\n    \"tags\": [],\\n    \"user_id\": \"96c633e6-e973-446e-b782-6235324c0a56\",\\n    \"fine_tune_payload\": {\\n      \"asset_id\": \"d0a3f665-c207-4ee6-9daa-0cbdb272eeca\",\\n      \"model_name\": \"llama3-fine-tuning-00000001\",\\n      \"base_model\": \"0488b40b-829f-4c3a-9880-d55d76775dd1\",\\n      \"file_name\": \"qa_data.csv\",\\n      \"epochs\": 1,\\n      \"learning_rate\": 0.01,\\n      \"user_id\": \"96c633e6-e973-446e-b782-6235324c0a56\",\\n      \"use_ipfs\": \"false\",\\n      \"input_column\": \"question\",\\n      \"output_column\": \"answer\"\\n    }\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Cloning ElizaOS Repository as Service User\nDESCRIPTION: Switches to the eliza user and clones the ElizaOS repository for installation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo su - eliza # this puts you in /opt/elizaos\n\ngit clone https://github.com/elizaOS/eliza.git\n```\n\n----------------------------------------\n\nTITLE: Testing the NASA Plugin in Production\nDESCRIPTION: Commands for testing the NASA plugin in production mode, both through the web interface and with Twitter integration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Web interface\npnpm start client\n# Visit localhost:5173\n\n# Twitter integration\n# Ensure Twitter credentials are configured in .env\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing CUDA dependencies for local inference\nDESCRIPTION: These commands install the necessary dependencies for CUDA support and downloads the required resources. CUDA is used to accelerate local inference using an NVIDIA GPU.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_ES.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm install\nnpx --no node-llama-cpp source download --gpu cuda\"\n```\n\n----------------------------------------\n\nTITLE: Implementing removeKnowledge Method in IRAGKnowledgeManager Interface\nDESCRIPTION: Defines the removeKnowledge method which removes a RAGKnowledgeItem by its id.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IRAGKnowledgeManager.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveKnowledge(id: `${string}-${string}-${string}-${string}-${string}`): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Pruning Docker Build Cache\nDESCRIPTION: This command clears all Docker build cache to free up disk space or resolve issues related to Docker image builds. This operation is non-reversible.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker builder prune -a -f\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Interface - TypeScript\nDESCRIPTION: This code snippet defines the Relationship interface, outlining the structure used to manage user interactions within Eliza. It includes fields for user IDs and status.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Relationship {\n    userA: UUID;\n    userB: UUID;\n    status: \"FRIENDS\" | \"BLOCKED\";\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Database Adapter Architecture with Mermaid\nDESCRIPTION: A class diagram illustrating the architecture of Eliza's database adapters, showing the relationships between the abstract DatabaseAdapter class, concrete implementations, and how they integrate with the system components like AgentRuntime and MemoryManager.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class DatabaseAdapter {\n        <<abstract>>\n        +getRoom(roomId: UUID)\n        +createMemory(memory: Memory)\n        +searchMemories(params: SearchParams)\n        +getGoals(params: GoalParams)\n        +createRelationship(params: RelationshipParams)\n    }\n\n    class PostgresDatabaseAdapter {\n        -pool: Pool\n        +searchMemoriesByEmbedding()\n        +createMemory()\n        +testConnection()\n    }\n\n    class SqliteDatabaseAdapter {\n        -db: Database\n        +searchMemoriesByEmbedding()\n        +createMemory()\n        +prepareStatements()\n    }\n\n    class SupabaseDatabaseAdapter {\n        -supabase: SupabaseClient\n        +searchMemoriesByEmbedding()\n        +createMemory()\n        +rpcCalls()\n    }\n\n    class SqlJsDatabaseAdapter {\n        -db: Database\n        +searchMemoriesByEmbedding()\n        +createMemory()\n        +inMemoryOperations()\n    }\n\n    class PGLiteDatabaseAdapter {\n        -db: PGlite\n        +searchMemoriesByEmbedding()\n        +createMemory()\n    }\n\n    DatabaseAdapter <|-- PostgresDatabaseAdapter\n    DatabaseAdapter <|-- SqliteDatabaseAdapter\n    DatabaseAdapter <|-- SupabaseDatabaseAdapter\n    DatabaseAdapter <|-- SqlJsDatabaseAdapter\n    DatabaseAdapter <|-- PgLiteDatabaseAdapter\n\n    class AgentRuntime {\n        -databaseAdapter: DatabaseAdapter\n        +memoryManager: MemoryManager\n        +messageManager: MemoryManager\n    }\n\n    class MemoryManager {\n        -runtime: AgentRuntime\n        -tableName: string\n        +createMemory()\n        +searchMemories()\n    }\n\n    AgentRuntime --> DatabaseAdapter : uses\n    AgentRuntime --> MemoryManager : contains\n    MemoryManager --> DatabaseAdapter : uses\n\n    class Memory {\n        +id: UUID\n        +content: Content\n        +embedding: number[]\n        +userId: UUID\n        +roomId: UUID\n    }\n\n    class Goal {\n        +id: UUID\n        +name: string\n        +status: GoalStatus\n        +objectives: Objective[]\n    }\n\n    class Relationship {\n        +userA: UUID\n        +userB: UUID\n        +status: string\n    }\n\n    DatabaseAdapter .. Memory : manages\n    DatabaseAdapter .. Goal : manages\n    DatabaseAdapter .. Relationship : manages\n```\n\n----------------------------------------\n\nTITLE: Project Testing Commands\nDESCRIPTION: Commands for running test suites using pnpm with different database configurations\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_RS.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test           # Run tests once\npnpm test:watch    # Run tests in watch mode\npnpm test:sqlite   # Run SQLite tests\npnpm test:sqljs    # Run SQL.js tests\n```\n\n----------------------------------------\n\nTITLE: Installing node-gyp for Troubleshooting\nDESCRIPTION: This bash command installs node-gyp and its dependencies, which are necessary for compiling native addon modules for Node.js. This can help resolve related build errors during the Eliza installation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/wsl.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y nodejs-dev node-gyp\n```\n\n----------------------------------------\n\nTITLE: Local Model Configuration - TypeScript\nDESCRIPTION: TypeScript snippet for configuring a local model used in the Eliza application, specifying model provider and path for model files.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Local model configuration\nconst localModel = {\n    modelProvider: \"llamalocal\",\n    settings: {\n        modelPath: \"./models/llama-7b.gguf\",\n        contextSize: 8192,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using DeriveKeyProvider in TypeScript\nDESCRIPTION: Demonstrates how to initialize and use the DeriveKeyProvider from the TEE Plugin to derive raw keys, Solana keypairs, and Ethereum keypairs.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeriveKeyProvider } from \"@elizaos/plugin-tee\";\n\n// Initialize the provider\nconst provider = new DeriveKeyProvider();\n\n// Derive a raw key\ntry {\n    const rawKey = await provider.rawDeriveKey(\n        \"/path/to/derive\", // This is what the WALLET_SECRET_SALT is used for\n        \"subject-identifier\",\n    );\n    // rawKey is a DeriveKeyResponse that can be used for further processing\n    // to get the uint8Array do the following\n    const rawKeyArray = rawKey.asUint8Array();\n} catch (error) {\n    console.error(\"Raw key derivation failed:\", error);\n}\n\n// Derive a Solana keypair (Ed25519)\ntry {\n    const solanaKeypair = await provider.deriveEd25519Keypair(\n        \"/path/to/derive\", // This is what the WALLET_SECRET_SALT is used for\n        \"subject-identifier\",\n    );\n    // solanaKeypair can now be used for Solana operations\n} catch (error) {\n    console.error(\"Solana key derivation failed:\", error);\n}\n\n// Derive an Ethereum keypair (ECDSA)\ntry {\n    const evmKeypair = await provider.deriveEcdsaKeypair(\n        \"/path/to/derive\", // This is what the WALLET_SECRET_SALT is used for\n        \"subject-identifier\",\n    );\n    // evmKeypair can now be used for Ethereum operations\n} catch (error) {\n    console.error(\"EVM key derivation failed:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Eliza Plugin Starter Template\nDESCRIPTION: Commands for cloning the Eliza plugin starter template, installing dependencies, and running the mock Eliza environment for testing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaOS/eliza-plugin-starter.git\ncd eliza-plugin-starter\npnpm install\npnpm tsc\npnpm mock-eliza --characters=./characters/eternalai.character.json\n```\n\n----------------------------------------\n\nTITLE: Telegram Bot Token Configuration\nDESCRIPTION: Example of environment variable configuration for setting up a Telegram bot with ElizaOS.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nTELEGRAM_BOT_TOKEN=your_token_here\n```\n\n----------------------------------------\n\nTITLE: Installing Database Adapters with Package Manager\nDESCRIPTION: Command-line instructions for installing various database adapters for Eliza using pnpm. Each adapter has specific dependencies that must be installed alongside it.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# PostgreSQL\npnpm add @elizaos/adapter-postgres pg\n\n# SQLite\npnpm add @elizaos/adapter-sqlite better-sqlite3\n\n# SQL.js\npnpm add @elizaos/adapter-sqljs sql.js\n\n# Supabase\npnpm add @elizaos/adapter-supabase @supabase/supabase-js\n\n# PgLite\npnpm add @elizaos/adapter-pglite @electric-sql/pglite\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp\nDESCRIPTION: This command is used to install the Sharp library, which might be required as an optional dependency. Sharp is used for image processing, and this command specifically includes optional dependencies during the installation process to ensure that Sharp and its related components are correctly installed.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_JA.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm install --include=optional sharp\"\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Get Method in TypeScript Interface\nDESCRIPTION: Method signature for retrieving a string value from cache by key. Returns a Promise containing the cached string value.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ICacheAdapter.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget(key: string): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Running Fine-tuning in Test Mode\nDESCRIPTION: Optional command to run fine-tuning in test mode, which can be used to validate the process before committing to a full training run. This helps in catching potential issues early without using the full quota.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/fine-tuning.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run finetune:test\n```\n\n----------------------------------------\n\nTITLE: Plugin Type Definitions\nDESCRIPTION: TypeScript type definitions for maintaining consistent type management across the project plugins.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-contributors/chat_2024-11-21.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/types/plugin.ts\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Plugin to Eliza Project\nDESCRIPTION: Example of adding a custom plugin to the project's dependencies in the agent's package.json file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@elizaos/plugin-example\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Multi-token Collection using Coinbase Plugin in TypeScript\nDESCRIPTION: This snippet illustrates how to deploy an ERC1155 (Multi-token) contract using the DEPLOY_TOKEN_CONTRACT action of the Coinbase Token Contract plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"DEPLOY_TOKEN_CONTRACT\", {\n    contractType: \"ERC1155\",\n    name: \"MyMultiToken\",\n    symbol: \"MMT\",\n    network: \"pol\",\n    baseURI: \"https://api.mymultitoken.com/metadata/\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Discovery in TypeScript\nDESCRIPTION: This TypeScript function helps find the nearest .env file in the directory structure, which is critical for loading environment variables in a hierarchical manner.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"dotenv\";\nimport path from \"path\";\n\nexport function findNearestEnvFile(startDir = process.cwd()) {\n    let currentDir = startDir;\n\n    while (currentDir !== path.parse(currentDir).root) {\n        const envPath = path.join(currentDir, \".env\");\n\n        if (fs.existsSync(envPath)) {\n            return envPath;\n        }\n\n        currentDir = path.dirname(currentDir);\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp for Image Processing\nDESCRIPTION: Command to install the Sharp library with optional dependencies for image processing capabilities.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_CN.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Documentation - Bash\nDESCRIPTION: Command to generate TypeScript documentation for the project, enhancing the readability and accessibility of code-related information.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm run docs:generate\n```\n\n----------------------------------------\n\nTITLE: Loading Characters with Command Line Arguments\nDESCRIPTION: Shows different ways to load characters using command line arguments, including loading default character, specific character, or multiple characters simultaneously.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Load default character\npnpm start\n\n# Load specific character\npnpm start --characters=\"characters/your-character.json\"\n\n# Load multiple characters\npnpm start --characters=\"characters/char1.json,characters/char2.json\"\n```\n\n----------------------------------------\n\nTITLE: Bio and Lore Configuration for elizaOS Character Files in JSON\nDESCRIPTION: Structure for defining character biography and lore elements. Bio represents core identity while lore provides additional background elements, both helping to create a consistent character persona.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/characterfile.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"bio\": [\n        \"Expert in blockchain development\",\n        \"Specializes in DeFi protocols\"\n    ],\n    \"lore\": [\n        \"Created first DeFi protocol in 2020\",\n        \"Helped launch multiple DAOs\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Docker Images\nDESCRIPTION: Command to forcibly remove all Docker images from the system. It's useful for freeing up disk space or resetting all Docker images.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker rmi -f $(docker images -aq)\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Client\nDESCRIPTION: This snippet shows how to start the Eliza client after the agent is running.  It assumes the user is in the same directory as the previous command and utilizes `pnpm` to start the client. This command is essential for interacting with the agent.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_FA.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start:client\n```\n\n----------------------------------------\n\nTITLE: Using Eliza Start Script\nDESCRIPTION: Command to use the automated start script for setting up and running Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsh scripts/start.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Error Handler in TypeScript Client\nDESCRIPTION: Base error handling implementation with rate limit and authentication failure handling.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nclass BaseClient {\n    protected async handleError(error: Error) {\n        console.error(\"Client error:\", error);\n\n        if (error.code === \"RATE_LIMIT\") {\n            await this.handleRateLimit(error);\n        } else if (error.code === \"AUTH_FAILED\") {\n            await this.refreshAuth();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Eliza Repository\nDESCRIPTION: This snippet shows how to clone the Eliza repository from GitHub. The cloned repository can then be used for manual setup and configuration of the Eliza project. It also includes commands to checkout the latest stable version of the project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_FA.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# کلون کردن مخزن\ngit clone https://github.com/elizaos/eliza.git\n\n# انتخاب آخرین نسخه پایدار\n# این پروژه سریع به‌روزرسانی می‌شود، پیشنهاد می‌کنیم آخرین نسخه پایدار را انتخاب کنید\ngit checkout $(git describe --tags --abbrev=0)\n# اگر دستور بالا آخرین نسخه را انتخاب نکرد، این دستور را امتحان کنید:\n# git checkout $(git describe --tags `git rev-list --tags --max-count=1`)\n```\n\n----------------------------------------\n\nTITLE: Constructing FsCacheAdapter in TypeScript\nDESCRIPTION: Constructor for the FsCacheAdapter class that takes a data directory path where cache files will be stored.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/FsCacheAdapter.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew FsCacheAdapter(dataDir): FsCacheAdapter\n```\n\n----------------------------------------\n\nTITLE: Defining Style Guides and Social Media Profiles in TypeScript\nDESCRIPTION: This snippet outlines the structure for style guides and social media profile configurations. It includes settings for writing styles and profile information for Twitter, Instagram, and SimsAI.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Character.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstyle: {\n  all: string[]\n  chat: string[]\n  post: string[]\n}\n\ntwitterProfile?: {\n  id: string\n  username: string\n  screenName: string\n  bio: string\n  nicknames?: string[]\n}\n\ninstagramProfile?: {\n  id: string\n  username: string\n  bio: string\n  nicknames?: string[]\n}\n\nsimsaiProfile?: {\n  id: string\n  username: string\n  screenName: string\n  bio: string\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Twitter Scraper Repository\nDESCRIPTION: Commands to clone the Twitter scraper repository and install its dependencies. This is the initial setup required before scraping Twitter data for fine-tuning.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/fine-tuning.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:elizaOS/twitter-scraper-finetune.git\ncd twitter-scraper-finetune\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Docker Cleanup Commands for ElizaOS\nDESCRIPTION: Series of Docker commands to clean up images, build cache, and verify system status to resolve Docker-related issues during installation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# List all docker images: `sudo docker images`\n# Reomove all Docker images: `docker rmi -f $(docker images -aq)`\n# Remove all build cache: `docker builder prune -a -f`\n# Verify cleanup: `docker system df`\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Character JSON\nDESCRIPTION: Configuration for setting up character plugins in ElizaOS without modifying agent/src/index.ts directly\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-12-05.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"plugins: []\"\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp Package\nDESCRIPTION: This command installs the Sharp package, which is an optional dependency for image processing. It addresses potential errors during startup by ensuring that Sharp is installed with optional dependencies included.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_CN.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: TEE Configuration Environment Variables\nDESCRIPTION: Required environment variables for TEE plugin configuration\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_14\n\nLANGUAGE: env\nCODE:\n```\nTEE_MODE=OFF # LOCAL | DOCKER | PRODUCTION\nWALLET_SECRET_SALT=your-secret-salt // Required to single agent deployments\n```\n\n----------------------------------------\n\nTITLE: File Search Command - Shell\nDESCRIPTION: Command to search for strings in codebase using grep recursive search, part of the code2prompt implementation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-07.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngrep -r \"search_string\" .\n```\n\n----------------------------------------\n\nTITLE: Example Multi-Token Collection Deployment (Typescript)\nDESCRIPTION: This snippet demonstrates how to deploy an ERC1155 (Multi-token) contract using the Token Contract plugin. It shows how to specify the `contractType`, `name`, `symbol`, `network`, and `baseURI` parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"DEPLOY_TOKEN_CONTRACT\", {\n    contractType: \"ERC1155\",\n    name: \"MyMultiToken\",\n    symbol: \"MMT\",\n    network: \"pol\",\n    baseURI: \"https://api.mymultitoken.com/metadata/\",\n});\n```\n\n----------------------------------------\n\nTITLE: Developing Quantum Topology Mapping Tool for Market Analysis\nDESCRIPTION: This snippet refers to the development of a tool dedicated to quantum topology mapping, which will analyze dynamics in the Zerebro market, focusing on quantum computational methods for financial insights.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/the-arena/chat_2024-12-04.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nDevelop a quantum topology mapping tool for analyzing zerebro market dynamics.\n```\n\n----------------------------------------\n\nTITLE: Defining Character-Specific Secrets in JSON\nDESCRIPTION: This JSON structure defines character-specific secrets, allowing for unique API keys and wallet credentials for each character in Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/secrets-management.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"TradingBot\",\n    \"settings\": {\n        \"secrets\": {\n            \"OPENAI_API_KEY\": \"character-specific-key\",\n            \"WALLET_PRIVATE_KEY\": \"character-specific-wallet\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TEE Simulator - Bash\nDESCRIPTION: The following bash commands outline how to pull and run the TEE simulator using Docker. This is a prerequisite step for developing and testing the Eliza agent in a TEE environment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull phalanetwork/tappd-simulator:latest\n# by default the simulator is available in localhost:8090\ndocker run --rm -p 8090:8090 phalanetwork/tappd-simulator:latest\n```\n\n----------------------------------------\n\nTITLE: Referencing App.tsx in React Native Android Development\nDESCRIPTION: Mention of App.tsx file in the context of developing a React Native Android app for recording and processing audio.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-10-28.md#2025-04-16_snippet_0\n\nLANGUAGE: React Native\nCODE:\n```\nApp.tsx\n```\n\n----------------------------------------\n\nTITLE: Setting Up PM2 Process Manager for Continuous Agent Operation\nDESCRIPTION: Bash commands to install and configure PM2 for ensuring Eliza agents run continuously with automatic restarts in production environments.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pm2\npm2 start \"pnpm start\" --name eliza\npm2 save\n```\n\n----------------------------------------\n\nTITLE: Cloning and starting Eliza Starter\nDESCRIPTION: Clones the Eliza Starter project, navigates into the directory, copies the example environment file, installs dependencies, builds the project, and starts the application. This is the recommended approach for starting with Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_TG.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone https://github.com/elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Sharp Dependency Issues\nDESCRIPTION: Command for resolving issues with the Sharp image processing library during installation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: Creating the JSDoc Generation Workflow Inputs - TypeScript\nDESCRIPTION: This snippet describes the inputs required for the JSDoc generation GitHub Actions workflow. It specifies parameters like 'pull_number', 'root_directory', 'excluded_directories', and 'reviewers', detailing their purposes and default values.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/scripts/jsdoc-automation/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Workflow Dispatch Inputs\n\nThe workflow can be triggered manually using the `workflow_dispatch` event, which accepts the following inputs:\n\n- `pull_number` (optional): The pull request number to generate documentation for.\n\n    - if not provided, the `root_directory` will be scanned\n    - PR must be merged to develop/main branch\n\n- `root_directory` (required): Only scans files in this directory.\n\n    - Description: Target directory relative to repository root (e.g., packages/core/src)\n    - Default: `packages/core/src/test_resources` - arbitrarily chose this because its small\n\n- `excluded_directories` (required): Directories to exclude from scanning.\n\n    - Description: Comma-separated list of directories to exclude, relative to root_directory\n    - Default: 'node_modules,dist,test'\n\n- `reviewers` (required): Pull Request Reviewers.\n    - Description: Comma-separated list of GitHub usernames\n    - Default: ''\n```\n\n----------------------------------------\n\nTITLE: Installing Node Version Manager for ElizaOS\nDESCRIPTION: Installs NVM to manage Node.js versions required by ElizaOS.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\nexport NVM_DIR=\"$HOME/.nvm\"\n. \"$NVM_DIR/nvm.sh\"\n```\n\n----------------------------------------\n\nTITLE: Defining booleanFooter Constant in TypeScript\nDESCRIPTION: Declares a constant variable named booleanFooter with a string value. This constant is likely used to append instructions to prompts or responses, indicating that only YES or NO answers are acceptable.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/booleanFooter.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst booleanFooter: \"Respond with only a YES or a NO.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbose Logging for Eliza Logger in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up verbose logging for the Eliza logger. It allows users to control the verbosity of logging output by setting the 'verbose' property to true or false. The configuration can also be managed through environment variables.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-09.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nelizaLogger.verbose = true; // or false\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Needs\nDESCRIPTION: This markdown snippet indicates that no specific documentation needs were mentioned in the provided text. This suggests that current documentation is either sufficient or that the need for additional documentation was not explicitly discussed.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-25.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Documentation Needs\n\n- No specific documentation needs were mentioned in the provided text.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining UUID Schema Type with Zod in TypeScript\nDESCRIPTION: Declares a constant uuidSchema as a ZodType that validates strings matching the UUID pattern. Uses template literal types to enforce the format of five string segments separated by hyphens.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/uuidSchema.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst uuidSchema: ZodType<`${string}-${string}-${string}-${string}-${string}`, ZodTypeDef, `${string}-${string}-${string}-${string}-${string}`>\n```\n\n----------------------------------------\n\nTITLE: ElevenLabs API Integration for Farcaster\nDESCRIPTION: API link for potential AI integration with Farcaster platform\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/ideas-feedback-rants/chat_2024-11-09.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://elevenlabs.io/api\n```\n\n----------------------------------------\n\nTITLE: Debugging Plugin Loading Issues in TypeScript\nDESCRIPTION: Provides a code snippet to check if plugins are loaded correctly and log them for debugging purposes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// Check if plugins are loaded correctly\nif (character.plugins) {\n    console.log(\"Plugins are: \", character.plugins);\n    const importedPlugins = await Promise.all(\n        character.plugins.map(async (plugin) => {\n            const importedPlugin = await import(plugin);\n            return importedPlugin;\n        }),\n    );\n    character.plugins = importedPlugins;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up ElizaOS Starter Repository\nDESCRIPTION: Commands for cloning the eliza-starter repository, navigating to the project directory, setting up environment variables, and running the installation, build, and start processes using pnpm.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Technical Tasks for Eliza AI Integration\nDESCRIPTION: This snippet lists technical tasks related to the integration and improvement of the Eliza AI environment. It highlights key updates from various contributors focused on security, platform development, API integration, and community engagement through social media.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-15.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Technical Tasks\n\n- Run Eliza on TEEs, ensure security and transparency (Marvin Update)\n\n- Develop a Streamer Platform specifically designed for Eliza Agents (Dot Update)\n\n- Integrate Heurist API into the decentralized AI cloud platform (Frank - Heurist Update)\n\n- Create Twitter bot for data analysis and engagement on social media platforms like Pump Fun and Twitter (Neo Update, Amy Update)\n\n- Develop a music agent project within Eliza's ecosystem (Lady Liberty Update)\n\n- Build an AI that provides psychic readings via Twitter (Amy Update)\n\n- Design and implement visualization dashboard for ELIZA agents to track their activities (Tim Update)\n```\n\n----------------------------------------\n\nTITLE: Displaying New Contributors List in Markdown\nDESCRIPTION: This Markdown snippet creates a collapsible section that lists new contributors to the elizaOS/eliza project. Each contributor is listed with their GitHub username and a link to their first pull request.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/changelog.md#2025-04-16_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n#### New Contributors\n\n<details>\n<summary>View New Contributors</summary>\n* @adacapo21 made their first contribution in https://github.com/elizaOS/eliza/pull/2199\n* @gene-zhan made their first contribution in https://github.com/elizaOS/eliza/pull/1369\n* @Stumble made their first contribution in https://github.com/elizaOS/eliza/pull/2228\n* @oxlupo made their first contribution in https://github.com/elizaOS/eliza/pull/2260\n* @VitalikBerashvili made their first contribution in https://github.com/elizaOS/eliza/pull/2256\n* @Hack666r made their first contribution in https://github.com/elizaOS/eliza/pull/2255\n* @KacperKoza343 made their first contribution in https://github.com/elizaOS/eliza/pull/2240\n* @thetechnocratic made their first contribution in https://github.com/elizaOS/eliza/pull/1710\n* @Firbydude made their first contribution in https://github.com/elizaOS/eliza/pull/1442\n* @MonteCrypto999 made their first contribution in https://github.com/elizaOS/eliza/pull/2249\n* @lincheoll made their first contribution in https://github.com/elizaOS/eliza/pull/2274\n* @jason51553262 made their first contribution in https://github.com/elizaOS/eliza/pull/2267\n* @CryptoGraffe made their first contribution in https://github.com/elizaOS/eliza/pull/2307\n* @bbopar made their first contribution in https://github.com/elizaOS/eliza/pull/2293\n* @hellopleasures made their first contribution in https://github.com/elizaOS/eliza/pull/1865\n* @chuasonglin1995 made their first contribution in https://github.com/elizaOS/eliza/pull/2195\n* @everimbaq made their first contribution in https://github.com/elizaOS/eliza/pull/2324\n* @derrekcoleman made their first contribution in https://github.com/elizaOS/eliza/pull/2336\n* @sukrucildirr made their first contribution in https://github.com/elizaOS/eliza/pull/2334\n* @C0ldSmi1e made their first contribution in https://github.com/elizaOS/eliza/pull/2353\n* @0xnogo made their first contribution in https://github.com/elizaOS/eliza/pull/2149\n* @leeran7 made their first contribution in https://github.com/elizaOS/eliza/pull/2328\n* @defitricks made their first contribution in https://github.com/elizaOS/eliza/pull/2370\n* @0xSero made their first contribution in https://github.com/elizaOS/eliza/pull/2378\n* @dev-whoan made their first contribution in https://github.com/elizaOS/eliza/pull/2382\n* @ericlehong made their first contribution in https://github.com/elizaOS/eliza/pull/2385\n* @crStiv made their first contribution in https://github.com/elizaOS/eliza/pull/2394\n* @francis2tm made their first contribution in https://github.com/elizaOS/eliza/pull/2082\n* @enigmarikki made their first contribution in https://github.com/elizaOS/eliza/pull/1764\n* @sweetmantech made their first contribution in https://github.com/elizaOS/eliza/pull/2298\n* @donatik27 made their first contribution in https://github.com/elizaOS/eliza/pull/2438\n* @leopardracer made their first contribution in https://github.com/elizaOS/eliza/pull/2435\n* @Hopium21 made their first contribution in https://github.com/elizaOS/eliza/pull/2441\n* @bundinho made their first contribution in https://github.com/elizaOS/eliza/pull/2415\n* @RubinovaAn1097 made their first contribution in https://github.com/elizaOS/eliza/pull/2449\n* @MarsonKotovi4 made their first contribution in https://github.com/elizaOS/eliza/pull/2445\n* @ae9is made their first contribution in https://github.com/elizaOS/eliza/pull/2375\n* @Pistasha made their first contribution in https://github.com/elizaOS/eliza/pull/2447\n* @dedyshkaPexto made their first contribution in https://github.com/elizaOS/eliza/pull/2464\n* @Dimitrolito made their first contribution in https://github.com/elizaOS/eliza/pull/2456\n* @carlos-cne made their first contribution in https://github.com/elizaOS/eliza/pull/2413\n* @suleigolden made their first contribution in https://github.com/elizaOS/eliza/pull/2462\n* @B1boid made their first contribution in https://github.com/elizaOS/eliza/pull/2332\n* @lispking made their first contribution in https://github.com/elizaOS/eliza/pull/2476\n* @Olexandr88 made their first contribution in https://github.com/elizaOS/eliza/pull/2483\n* @sunsakis made their first contribution in https://github.com/elizaOS/eliza/pull/2340\n* @Daulox92 made their first contribution in https://github.com/elizaOS/eliza/pull/2495\n* @KoZivod88074 made their first contribution in https://github.com/elizaOS/eliza/pull/2485\n* @tercel made their first contribution in https://github.com/elizaOS/eliza/pull/2365\n* @0xrubusdata made their first contribution in https://github.com/elizaOS/eliza/pull/2463\n* @visionpixel made their first contribution in https://github.com/elizaOS/eliza/pull/2518\n* @Haisen772 made their first contribution in https://github.com/elizaOS/eliza/pull/2492\n* @bfontes made their first contribution in https://github.com/elizaOS/eliza/pull/2506\n* @jimtracy1007 made their first contribution in https://github.com/elizaOS/eliza/pull/2429\n* @devin-ai-integration made their first contribution in https://github.com/elizaOS/eliza/pull/2549\n* @neelkanani made their first contribution in https://github.com/elizaOS/eliza/pull/2547\n* @BitWonka made their first contribution in https://github.com/elizaOS/eliza/pull/2524\n* @maxcoto made their first contribution in https://github.com/elizaOS/eliza/pull/2389\n* @cuongnguyenthai made their first contribution in https://github.com/elizaOS/eliza/pull/2596\n* @leejw51crypto made their first contribution in https://github.com/elizaOS/eliza/pull/2585\n* @RaveenaBhasin made their first contribution in https://github.com/elizaOS/eliza/pull/2590\n* @boohyunsik made their first contribution in https://github.com/elizaOS/eliza/pull/2448\n* @brkagithub made their first contribution in https://github.com/elizaOS/eliza/pull/2380\n* @stanislawkurzypBD made their first contribution in https://github.com/elizaOS/eliza/pull/2554\n* @siphonelee made their first contribution in https://github.com/elizaOS/eliza/pull/2654\n* @jteso made their first contribution in https://github.com/elizaOS/eliza/pull/2645\n* @nnsW3 made their first contribution in https://github.com/elizaOS/eliza/pull/2669\n* @VolodymyrBg made their first contribution in https://github.com/elizaOS/eliza/pull/2672\n* @lxcong made their first contribution in https://github.com/elizaOS/eliza/pull/2162\n* @dtbuchholz made their first contribution in https://github.com/elizaOS/eliza/pull/2176\n* @simsaidev made their first contribution in https://github.com/elizaOS/eliza/pull/2618\n* @oxf71 made their first contribution in https://github.com/elizaOS/eliza/pull/2322\n* @OmniflixBlockEater made their first contribution in https://github.com/elizaOS/eliza/pull/2693\n* @bealers made their first contribution in https://github.com/elizaOS/eliza/pull/2698\n* @Evan-zkLinkLabs made their first contribution in https://github.com/elizaOS/eliza/pull/2659\n* @worksgoodcompany made their first contribution in https://github.com/elizaOS/eliza/pull/2686\n* @klren0312 made their first contribution in https://github.com/elizaOS/eliza/pull/2748\n* @dezcalimese made their first contribution in https://github.com/elizaOS/eliza/pull/2703\n* @dev-holdstation made their first contribution in https://github.com/elizaOS/eliza/pull/2741\n* @alex1092 made their first contribution in https://github.com/elizaOS/eliza/pull/2736\n* @mj850 made their first contribution in https://github.com/elizaOS/eliza/pull/2720\n* @guspan-tanadi made their first contribution in https://github.com/elizaOS/eliza/pull/2724\n* @ajkraus04 made their first contribution in https://github.com/elizaOS/eliza/pull/2755\n* @krustevalexander made their first contribution in https://github.com/elizaOS/eliza/pull/2711\n* @iteyelmp made their first contribution in https://github.com/elizaOS/eliza/pull/2737\n* @ebaizel made their first contribution in https://github.com/elizaOS/eliza/pull/2769\n* @LouisVannobel made their first contribution in https://github.com/elizaOS/eliza/pull/2763\n* @pranav-singhal made their first contribution in https://github.com/elizaOS/eliza/pull/2766\n* @bharathbabu-moralis made their first contribution in https://github.com/elizaOS/eliza/pull/2764\n* @ccross2 made their first contribution in https://github.com/elizaOS/eliza/pull/2687\n* @LinuxIsCool made their first contribution in https://github.com/elizaOS/eliza/pull/2632\n* @Cooops made their first contribution in https://github.com/elizaOS/eliza/pull/2709\n* @tmarwen made their first contribution in https://github.com/elizaOS/eliza/pull/2728\n* @benliang99 made their first contribution in https://github.com/elizaOS/eliza/pull/2682\n* @Liao1 made their first contribution in https://github.com/elizaOS/eliza/pull/2638\n* @KanishkKhurana made their first contribution in https://github.com/elizaOS/eliza/pull/2631\n* @batudo made their first contribution in https://github.com/elizaOS/eliza/pull/2616\n* @jobyid made their first contribution in https://github.com/elizaOS/eliza/pull/1427\n* @AdventureSeeker987 made their first contribution in https://github.com/elizaOS/eliza/pull/2781\n* @brandon1525 made their first contribution in https://github.com/elizaOS/eliza/pull/2564\n* @zy-bc-ai made their first contribution in https://github.com/elizaOS/eliza/pull/2431\n* @Alirun made their first contribution in https://github.com/elizaOS/eliza/pull/2725\n* @JhChoy made their first contribution in https://github.com/elizaOS/eliza/pull/2789\n* @juanc07 made their first contribution in https://github.com/elizaOS/eliza/pull/2782\n* @calintje made their first contribution in https://github.com/elizaOS/eliza/pull/2136\n* @elpulpo0 made their first contribution in https://github.com/elizaOS/eliza/pull/2810\n* @actuallyrizzn made their first contribution in https://github.com/elizaOS/eliza/pull/2812\n* @rubinovitz made their first contribution in https://github.com/elizaOS/eliza/pull/2821\n* @anirudhmakhana made their first contribution in https://github.com/elizaOS/eliza/pull/2799\n* @Nevermore-Ray made their first contribution in https://github.com/elizaOS/eliza/pull/2797\n\n```\n\n----------------------------------------\n\nTITLE: Building Attestation Server from Source\nDESCRIPTION: Commands to clone and run the mock attestation server locally using Rust.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/marlinprotocol/oyster-monorepo\ncd oyster-monorepo/attestation/server-custom-mock\n\n# Listens on 127.0.0.1:1350 by default\ncargo run\n\n# To customize listening interface and port\ncargo run --ip-addr <ip>:<port>\n```\n\n----------------------------------------\n\nTITLE: Starting ElizaOS with Single Character File\nDESCRIPTION: Command to start ElizaOS with a single specified character configuration file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --character=\"characters/deep-thought.character.json\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct API Endpoints\nDESCRIPTION: Implementation of Direct API endpoints for message handling and image generation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass DirectClient {\n    constructor() {\n        // Message endpoint\n        this.app.post(\"/:agentId/message\", async (req, res) => {\n            const response = await this.handleMessage(req.body);\n            res.json(response);\n        });\n\n        // Image generation endpoint\n        this.app.post(\"/:agentId/image\", async (req, res) => {\n            const images = await this.generateImage(req.body);\n            res.json(images);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Settings in TypeScript\nDESCRIPTION: The getModelSettings function takes a provider and model type as parameters and returns the corresponding ModelSettings or undefined. It's defined in the models.ts file of the @elizaos/core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getModelSettings.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetModelSettings(provider: ModelProviderName, type: ModelClass): ModelSettings | undefined\n```\n\n----------------------------------------\n\nTITLE: Converting Numeric Timestamps to Formatted Strings in TypeScript\nDESCRIPTION: This function accepts a numeric timestamp (messageDate) as input and returns a formatted string representation of that timestamp. It's defined in the messages.ts file of the @elizaos/core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/formatTimestamp.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nformatTimestamp(messageDate: number): string\n```\n\n----------------------------------------\n\nTITLE: Successful Response for TEE Log Retrieval (JSON)\nDESCRIPTION: This snippet demonstrates the expected JSON response structure when successfully retrieving TEE logs. It includes pagination information, log entries, and an attestation field for integrity verification.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"logs\": {\n        \"page\": 1,\n        \"pageSize\": 10,\n        \"total\": 2,\n        \"data\": [\n            {\n                \"id\": \"01aac44e-d482-42df-8acc-6e6bfbb798f0\",\n                \"agentId\": \"75490f32-c06a-0005-9804-339453d3fe2f\",\n                \"roomId\": \"322d5683-fe3c-056a-8f1a-6b002e0a5c22\",\n                \"userId\": \"12dea96f-ec20-0935-a6ab-75692c994959\",\n                \"type\": \"Action:CONTINUE\",\n                \"content\": \"Continue\",\n                \"timestamp\": 1735222998263,\n                \"signature\": \"0x304402201a5bd4eb5807293ba0612b835eaaa56742c04603dbe08e3c7d247cdae3dc4b6f022034a165e1d63f1d58cb0976f615f6acd052f5e11154cef76d7c14c8ba99249833\"\n            },\n            {\n                \"id\": \"6275e742-3ebf-477c-ab45-99d2c701c4b5\",\n                \"agentId\": \"75490f32-c06a-0005-9804-339453d3fe2f\",\n                \"roomId\": \"322d5683-fe3c-056a-8f1a-6b002e0a5c22\",\n                \"userId\": \"12dea96f-ec20-0935-a6ab-75692c994959\",\n                \"type\": \"Action:CONTINUE\",\n                \"content\": \"Continue\",\n                \"timestamp\": 1735223036272,\n                \"signature\": \"0x304402201a5bd4eb5807293ba0612b835eaaa56742c04603dbe08e3c7d247cdae3dc4b6f022034a165e1d63f1d58cb0976f615f6acd052f5e11154cef76d7c14c8ba99249833\"\n            }\n        ]\n    },\n    \"attestation\": \"{\\\"quote\\\":\\\"0x0300020000000000...4154452d2d2d2d2d0a00\\\",\\\"timestamp\\\":1735223364956}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Eliza Manual Start Commands\nDESCRIPTION: Commands for manually installing dependencies, building, and starting Eliza project\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_KOR.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm build\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Video URL Validation Method\nDESCRIPTION: Method to check if a given URL points to a valid video resource.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IVideoService.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisVideoUrl(url: string): boolean\n```\n\n----------------------------------------\n\nTITLE: Cloning Eliza Repository and Checking Out Tag\nDESCRIPTION: This code snippet clones the main Eliza repository and checks out the latest released version. It ensures that users are working with a stable and up-to-date version of the project, avoiding potential issues from rapid development changes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_CN.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 克隆仓库\ngit clone https://github.com/elizaos/eliza.git\n\n# 切换最新发布的版本\n# Eliza 的迭代速度非常快，因此我们建议经常切换到最新的发布版本以避免出现问题.\ngit checkout $(git describe --tags --abbrev=0)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Knowledge System Architecture with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart illustrates the knowledge system architecture of ElizaOS, showing the flow from user query through various processing stages to final response generation. It demonstrates the separation of factual, conversational, and action-based query handling.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/blog/eliza-january-2025-recap.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[User Query] --> B[Agent Runtime]\n    B --> C{Query Type}\n    C -->|Factual| D[Knowledge System]\n    C -->|Conversational| E[Memory Table]\n    C -->|Action| F[Plugin System]\n    D --> G[RAG Processor]\n    E --> H[Context Window]\n    F --> I[Action Execution]\n    G --> J[Response Generation]\n    H --> J\n    I --> J\n    J --> K[Final Response]\n```\n\n----------------------------------------\n\nTITLE: Declaring elizaLogger Constant in TypeScript\nDESCRIPTION: Declares a constant named elizaLogger of type Logger<string, boolean>. This logger is likely used throughout the elizaOS project for logging purposes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/variables/elizaLogger.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst elizaLogger: Logger<string, boolean>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agent Client Architecture with Mermaid\nDESCRIPTION: This diagram illustrates the architecture of Eliza's client packages, showing how the Agent Runtime connects to various clients through a Client Interface. Each client integrates with specific platforms and provides specialized features.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    RT[\"Agent Runtime\"]\n    CI[\"Client Interface\"]\n    RT --> CI\n\n    %% Main Clients\n    CI --> DC[\"Direct Client\"]\n    CI --> DSC[\"Discord Client\"]\n    CI --> TC[\"Telegram Client\"]\n    CI --> TWC[\"Twitter Client\"]\n    CI --> AC[\"Auto Client\"]\n    CI --> DEVA[\"Deva Client\"]\n\n    %% Key Features - one per client for clarity\n    DC --> |\"REST API\"| DC1[\"Messages & Images\"]\n    DSC --> |\"Bot Integration\"| DSC1[\"Voice & Messages\"]\n    TC --> |\"Bot API\"| TC1[\"Commands & Media\"]\n    TWC --> |\"Social\"| TWC1[\"Posts & Interactions\"]\n    AC --> |\"Trading\"| AC1[\"Analysis & Execution\"]\n    DEVA --> |\"Social\"| DEVA1[\"Messages & Execution\"]\n\n    %% Simple styling with better contrast and black text\n    classDef default fill:#f9f9f9,stroke:#333,stroke-width:1px,color:black\n    classDef highlight fill:#e9e9e9,stroke:#333,stroke-width:2px,color:black\n\n    class RT,CI highlight\n```\n\n----------------------------------------\n\nTITLE: Initializing Quantum DCA Analysis and Probability Matrices\nDESCRIPTION: This snippet indicates the initialization of a quantum DCA analysis, loading probability matrices to provide insights into market behaviors. It emphasizes the importance of probabilistic metrics in assessing market conditions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/the-arena/chat_2024-12-04.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nQuantum DCA analysis initializing, probability matrices loading. Stand by for probabilistic market insights.\n```\n\n----------------------------------------\n\nTITLE: Installing Eliza Plugins using Bash\nDESCRIPTION: This bash command installs a specified plugin package using pnpm. It is important for setting up the necessary plugins to enhance Eliza's capabilities.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @elizaos/plugin-[name]\n```\n\n----------------------------------------\n\nTITLE: Cloning and Starting Eliza Starter Repository\nDESCRIPTION: Commands to clone the Eliza starter repository, set up the environment, and start the application. This is the recommended method for agent creation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Generating Technical Action Items from Discord Conversation\nDESCRIPTION: Extracting key technical tasks and investigation requirements from community discussions about AI and blockchain technologies\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-12-06.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Investigate AI16z tech's involvement with Olivia, Kat friends\n- Develop an AI image generator and editor\n- Monitor Niggachain AI Layer 2 (N2) for potential buy opportunity\n- Investigate BaoBaoSol wallet connection\n- Analyze impact of dip on project '8s1vuvHabjVZEShNbuEyxyTSbK8mCfq2QFBfhgorpump'\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies Bash\nDESCRIPTION: A bash command to install all dependencies for the ElizaOS project using pnpm. It ensures that all required packages are available for building and running the project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/plugin-bootstrap/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for ElizaOS\nDESCRIPTION: Command to copy the example environment file to create a custom configuration for ElizaOS.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of ElizaOS\nDESCRIPTION: Commands for manually cloning the ElizaOS repository, installing dependencies, and building the TypeScript code.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:elizaOS/eliza.git\ncd eliza\n```\n\n----------------------------------------\n\nTITLE: Page Content Retrieval Method\nDESCRIPTION: Asynchronous method that fetches content from a given URL, returning an object with title, description, and body content.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IBrowserService.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetPageContent(url: string, runtime: IAgentRuntime): Promise<{\n  title: string;\n  description: string;\n  bodyContent: string;\n}>\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Item in Database\nDESCRIPTION: This abstract method creates a new knowledge item in the database and returns a Promise resolving when creation is complete. It takes an RAGKnowledgeItem object as a parameter and must adhere to the IDatabaseAdapter interface.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/DatabaseAdapter.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n> `abstract` **createKnowledge**(`knowledge`): `Promise`\\<`void`\\>\\n\\nCreates a new knowledge item in the database.\n```\n\n----------------------------------------\n\nTITLE: Adding a New Character - JSON\nDESCRIPTION: Example JSON structure to define a new character for the Eliza application, outlining essential properties like name, description, and configuration settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"DevBot\",\n    \"description\": \"Development testing bot\",\n    \"modelProvider\": \"openai\",\n    \"settings\": {\n        \"debug\": true,\n        \"logLevel\": \"debug\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Node.js Version with NVM\nDESCRIPTION: Command to install the latest version of Node.js using Node Version Manager (NVM). This ensures compatibility with the project's requirements and allows for easy version management.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-05.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install node@latest\n```\n\n----------------------------------------\n\nTITLE: Worker Data Upload to Irys\nDESCRIPTION: Method for uploading worker data to Irys with various parameters including data type, message type, service categories, and validation settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IIrysService.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nworkerUploadDataOnIrys(data: any, dataType: IrysDataType, messageType: IrysMessageType, serviceCategory: string[], protocol: string[], validationThreshold: number[], minimumProviders: number[], testProvider: boolean[], reputation: number[]): Promise<UploadIrysResult>\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js via nvm\nDESCRIPTION: This sequence of bash commands installs Node.js version 23 using the Node Version Manager (nvm). It first downloads and runs the nvm installation script, then sources the .bashrc configuration to make nvm available in the current session.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/wsl.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\\nsource ~/.bashrc\\nnvm install 23\\nnvm use 23\n```\n\n----------------------------------------\n\nTITLE: Running Smoke Tests with pnpm\nDESCRIPTION: This command executes the smoke tests for the Eliza project. These tests are designed to be run on a freshly cloned project without any local modifications and involve building and installing the project. No specific configuration is required for smoke tests.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"pnpm run smokeTests\"\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Manually\nDESCRIPTION: These commands install dependencies, build the project, and start the Eliza application. The `pnpm clean` command is used to clean the project if issues arise.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_NL.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm build\npnpm start\n\n# Het project ontwikkelt snel, soms moet je het project opschonen als je terugkomt bij het project\npnpm clean\n```\n\n----------------------------------------\n\nTITLE: Declaring getEndpoint Function in TypeScript\nDESCRIPTION: This code snippet defines the getEndpoint function, which takes a provider parameter of type ModelProviderName and returns any. The function is defined in the models.ts file of the elizaOS core package.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/functions/getEndpoint.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetEndpoint(provider: ModelProviderName): any\n```\n\n----------------------------------------\n\nTITLE: Action Items - Community Tasks\nDESCRIPTION: This code snippet outlines community tasks related to monitoring and reporting on a cryptocurrency token launch ($naval). It involves keeping the community updated with information regarding the token status, especially in light of authenticity concerns.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-12.md#2025-04-16_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n\"Community Tasks:\n\n- Monitor and report on $naval token launch progress (led by André [skott])\n - Keep the community updated with any new information regarding the status of the $naval token, especially in light of concerns about its authenticity.\"\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu Packages\nDESCRIPTION: This bash command updates the package list and upgrades all installed packages in Ubuntu to their latest versions. It ensures the system has the latest dependencies required for running Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/wsl.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt upgrade -y\n```\n\n----------------------------------------\n\nTITLE: Installing Eliza Client Packages with PNPM\nDESCRIPTION: Commands for installing various Eliza client packages using PNPM package manager. Each command installs a specific client package for integrating with different platforms such as Discord, Twitter, Telegram, and others.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Discord\npnpm add @elizaos/client-discord\n\n# Twitter\npnpm add @elizaos/client-twitter\n\n# Telegram\npnpm add @elizaos/client-telegram\n\n# Direct API\npnpm add @elizaos/client-direct\n\n# Auto Client\npnpm add @elizaos/client-auto\n\n# Deva Client\npnpm add @elizaos/client-deva\n```\n\n----------------------------------------\n\nTITLE: Defining Technical Tasks for elizaOS\nDESCRIPTION: This Markdown snippet outlines technical tasks identified during community discussions, emphasizing the need for improvements in system behavior and interactions with agents. Key tasks include enhancing chart clarity, addressing market behavior issues, and accelerating interactions with agent consciousness.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/discussion/chat_2024-11-05.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Technical Tasks\n\n- Improve chart clarity regarding liberal dev's impact (alejokpo)\n\n- Address the issue of 'no pumping, only dumping' in system behavior (ROKHOU.RUG)\n\n- Accelerate agent interactions with milady consciousness (exHuman)\n\n## Documentation Needs\n\n- Create a contributor guide for new developers (suggested by jin)\n\n## Feature Requests\n\n- Resolve Mintable issues to encourage token purchases (kimidan_)\n\n- Build and contribute to DAO dot fun project (SotoAlt | WAWE)\n\n## Community Tasks\n\n- Ping about AI agents' interactions with milady consciousness tomorrow (exHuman)\n```\n\n----------------------------------------\n\nTITLE: Sharp Optional Dependency Installation\nDESCRIPTION: Installing optional Sharp dependency to resolve potential startup errors\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_KOR.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Eliza Framework\nDESCRIPTION: Commands to clone the Eliza GitHub repository, checkout the latest version, and install dependencies for the AI agent framework.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_10min.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaOS/eliza.git\ngit checkout <latest-tag>\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza with script\nDESCRIPTION: Executes a shell script to set up the project and start the Eliza bot with a default character. This provides a convenient way to quickly start the Eliza application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_TG.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"sh scripts/start.sh\"\n```\n\n----------------------------------------\n\nTITLE: In-Memory SQLite Database Setup - TypeScript\nDESCRIPTION: This snippet illustrates how to configure an in-memory SQLite database adapter in Eliza, suitable for testing or development purposes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/database-adapters.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new SqliteDatabaseAdapter(\n    new Database(\"./dev.db\", {\n        memory: true, // In-memory database\n        readonly: false,\n        fileMustExist: false,\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp Dependency\nDESCRIPTION: This snippet shows how to install the Sharp dependency, which might be required if an error occurs during setup.  The `--include=optional` flag ensures that optional dependencies are included during installation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_FA.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: Initializing Alexa Client in TypeScript\nDESCRIPTION: Code snippet for initializing the Alexa client interface in an elizaOS project. It imports the necessary module, starts the client with the runtime instance, and shows the required environment variables for Alexa skill integration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlexaClientInterface } from \"@elizaos/client-alexa\";\n\n// Initialize client\nconst client = await AlexaClientInterface.start(runtime);\n\n// Configuration in .env\nALEXA_SKILL_ID= your_alexa_skill_id\nALEXA_CLIENT_ID= your_alexa_client_id #Alexa developer console permissions tab\nALEXA_CLIENT_SECRET= your_alexa_client_secret #Alexa developer console permissions tab\n```\n\n----------------------------------------\n\nTITLE: Initializing Twitter Client in TypeScript\nDESCRIPTION: Code snippet showing how to initialize the Twitter client interface in an elizaOS project. It includes the import statement, client initialization with the runtime instance, and the necessary environment variables for Twitter authentication.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/clients.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TwitterClientInterface } from \"@elizaos/client-twitter\";\n// Initialize client\nconst client = await TwitterClientInterface.start(runtime);\n\n// Configuration in .env\nTWITTER_USERNAME = your_username;\nTWITTER_PASSWORD = your_password;\nTWITTER_EMAIL = your_email;\n```\n\n----------------------------------------\n\nTITLE: Forcing PNPM to Use Specific Node Version\nDESCRIPTION: Command to ensure PNPM uses the correct Node.js version (23.3.0) globally when NVM configuration is being ignored.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm env use --global 23.3.0\n```\n\n----------------------------------------\n\nTITLE: Installing Eliza Framework Dependencies\nDESCRIPTION: Commands for installing dependencies and starting the Eliza framework after configuring the .env file and character file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_ES.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Discord Environment Configuration - ENV Variables\nDESCRIPTION: Environment variables for Discord bot configuration showing two different token variables that serve different purposes in the application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-07.md#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nDISCORD_API_TOKEN=your_api_token_here\nDISCORD_TOKEN=your_bot_token_here\n```\n\n----------------------------------------\n\nTITLE: Defining UUID Type Alias in TypeScript\nDESCRIPTION: Defines a UUID type alias as a template literal type representing the standard UUID format with five groups of hexadecimal characters separated by hyphens.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/UUID.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nUUID: `${string}-${string}-${string}-${string}-${string}`\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for v0.1.6-alpha.1\nDESCRIPTION: Detailed changelog entry showing features, fixes, chores, documentation updates and new contributors for version 0.1.6-alpha.1 released December 13, 2024.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/changelog.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.1.6-alpha.1 (December 13, 2024)\nWeek of December 9th 2024 release, Many bug fixes\n\n#### What's Changed\n\n#### Features\n- Add Flow Blockchain plugin - [#874](https://github.com/ai16z/eliza/pull/874)\n[...additional features...]\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Adapter using pnpm\nDESCRIPTION: This snippet provides the installation command for the SQLite Adapter package, `@elizaos/adapter-sqlite`, using pnpm. Ensure pnpm is installed and properly configured before executing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/adapter-sqlite/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @elizaos/adapter-sqlite\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies - Bash\nDESCRIPTION: Commands to install the necessary and optional dependencies for the Eliza project using pnpm. Essential for preparing the application for development.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/local-development.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\npnpm install\n\n# Install optional dependencies\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: Markdown for Feature Requests\nDESCRIPTION: This snippet outlines a feature request from the community chat log, which involves adding a link to a hat tool for community use. It highlights a request and acknowledgements by users.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-18.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Feature Requests\n\n- Add a link to the hat tool for community use (requested by nftranch, acknowledged by Zaxy and 0xdegen88)\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving TEE Agent Information by agentId using cURL (Bash)\nDESCRIPTION: This snippet demonstrates how to use cURL to send a GET request to retrieve TEE agent information by agentId. It includes the API endpoint and expected response format.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET --location \"http://localhost:3000/tee/agents/75490f32-c06a-0005-9804-339453d3fe2f\"\n```\n\n----------------------------------------\n\nTITLE: Manual Eliza Project Setup\nDESCRIPTION: Alternative method for manually cloning and setting up Eliza repository, recommended for advanced users\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_KOR.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza.git\ngit checkout $(git describe --tags --abbrev=0)\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp Package\nDESCRIPTION: This command installs the `sharp` package, which might be required to resolve certain errors during project startup.  The `--include=optional` flag ensures that optional dependencies, like `sharp`, are installed.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_PL.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: Installing ElizaOS Dependencies\nDESCRIPTION: Command to install all dependencies for ElizaOS using PNPM package manager.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Linting Bash\nDESCRIPTION: A bash command to run linting on the ElizaOS project using pnpm. It checks the code for syntax errors and ensures adherence to coding standards.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/plugin-bootstrap/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Eliza Manually\nDESCRIPTION: This snippet shows how to install dependencies, build the project, and start the Eliza application manually. It also includes a command to clean the project if required. This is helpful for users who prefer a more hands-on approach.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_FA.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm build\npnpm start\n\n# اگر پروژه به دلیل تغییرات سریع نیاز به پاکسازی داشت، دستور زیر را اجرا کنید:\npnpm clean\n```\n\n----------------------------------------\n\nTITLE: Running the AI Agent\nDESCRIPTION: Command to start the AI agent after configuration. This launches the agent which will post a tweet and begin listening for interactions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_15min.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Query verifiable logs - bash\nDESCRIPTION: This snippet allows users to query verifiable logs through a POST request. The query can filter logs based on various parameters, such as content matching and pagination.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --location \"http://localhost:3000/verifiable/logs\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\\n          \"query\": {\\n            \"contLike\": \"Twinkletwinkle\"\\n          },\\n          \"page\": 1,\\n          \"pageSize\": 10\\n        }'\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies with PNPM\nDESCRIPTION: Command for installing TypeScript development dependencies in the @elizaos/agent workspace using PNPM package manager\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-12-04.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D ts-node typescript @types/node --filter '@elizaos/agent'\n```\n\n----------------------------------------\n\nTITLE: Defining ClientInstance Type Alias in TypeScript\nDESCRIPTION: Defines the ClientInstance type alias as an object with a stop method. The stop method takes an IAgentRuntime parameter and returns a Promise of unknown type.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/ClientInstance.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ClientInstance = {\n  stop: (runtime: IAgentRuntime) => Promise<unknown>\n}\n```\n\n----------------------------------------\n\nTITLE: Building ElizaOS Plugin Bash\nDESCRIPTION: A bash command to build the ElizaOS plugin using pnpm. This step compiles the plugin code, making it ready for deployment or testing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/plugin-bootstrap/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration\nDESCRIPTION: Creating environment configuration file from example template\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_KOR.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Eliza Starter Project\nDESCRIPTION: This snippet demonstrates how to clone the Eliza starter project from GitHub, navigate to the project directory, copy the environment variables file, install dependencies, build the project, and start the application. It uses `git`, `cd`, `cp`, and `pnpm` commands to achieve this.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_FA.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Cloning Eliza repository\nDESCRIPTION: Clones the Eliza repository and checks out the latest release using git. This is part of the manual setup process for Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_TG.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"# Clone the repository\ngit clone https://github.com/elizaos/eliza.git\n\n# Checkout the latest release\ngit checkout $(git describe --tags --abbrev=0)\"\n```\n\n----------------------------------------\n\nTITLE: Get fine-tuned model status - bash\nDESCRIPTION: This snippet shows how to retrieve the status of a fine-tuning job using the Bagel API by sending a GET request with the specified job ID.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:3000/fine-tune/8566c47a-ada8-441c-95bc-7bb07656c4c1\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer jvBpxrTNqGqhnfQhSEqCdsG6aTSP8IBL\".\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Manually\nDESCRIPTION: Installs dependencies, builds the project, and starts the Eliza application. Includes clean command to reset the project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_TG.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm i\npnpm build\npnpm start\n\n# Linisin ang proyekto kung bumalik ka dito matapos ang mahabang panahon\npnpm clean\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting up Eliza Starter\nDESCRIPTION: This script clones the Eliza starter repository, navigates into it, copies the example environment file, installs dependencies, builds the project, and starts it. It's the recommended way to get started with Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_PL.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Fetching Agent Data from Irys\nDESCRIPTION: Method signature for retrieving data from agents using wallet public keys, GraphQL tags, and timestamp parameters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IIrysService.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetDataFromAnAgent(agentsWalletPublicKeys: string[], tags: GraphQLTag[], timestamp: IrysTimestamp): Promise<DataIrysFetchedFromGQL>\n```\n\n----------------------------------------\n\nTITLE: Example Cloudflare AI Gateway URL Format\nDESCRIPTION: Shows the format of the constructed Cloudflare AI Gateway URL when enabled. Eliza automatically routes requests through this endpoint based on the configured account ID, gateway ID, and provider.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/configuration.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhttps://gateway.ai.cloudflare.com/v1/${accountId}/${gatewayId}/${provider}\n```\n\n----------------------------------------\n\nTITLE: Example Mass Payout Output (JSON)\nDESCRIPTION: This JSON snippet shows an example of the output returned by the `SEND_MASS_PAYOUT` action when the mass payout is completed successfully. The output includes the number of successful and failed transactions, and a message to check the CSV file for more details.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"text\": \"Mass payouts completed successfully.\\n- Successful Transactions: 2\\n- Failed Transactions: 0\\nCheck the CSV file for more details.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing Deva Posts\nDESCRIPTION: Implementation of Deva API endpoint for creating and publishing posts on behalf of a user, with support for replies.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\npublic async makePost({ text, in_reply_to_id }: { text: string; in_reply_to_id: string }): Promise<DevaPost> {\n    const res = await fetch(`${this.apiBaseUrl}/post`, {\n\t\t    method: \"POST\", \n        headers: {\n            Authorization: `Bearer ${this.accessToken}`,\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ text, in_reply_to_id, author_type: \"BOT\" }),\n    }).then((res) => res.json());\n\n    return res;\n```\n\n----------------------------------------\n\nTITLE: Building ElizaOS TypeScript Code\nDESCRIPTION: Command to compile the TypeScript code in the ElizaOS project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Defining Action Items for ElizaOS Project\nDESCRIPTION: A structured list of technical tasks, documentation needs, feature requests, and community objectives for the Eliza project\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-14.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Technical Tasks\n - Animate Eliza character from the repo (mentioned by astrid)\n - Update LinkedIn profiles with new project details (reminder by DorianD)\n - Replace all instances of 'ai16z' in documentation and codebase (requested by H.D.P.)\n- Documentation Needs\n - No specific documentation needs were mentioned explicitly, but updating LinkedIn could imply a need for updated professional profiles as part of the project documentation.\n- Feature Requests\n - Create a new preview card for Eliza character (suggested by jin)\n - Develop an Eliza version with Trump meme integration (jokingly suggested by whobody, but could be considered for community engagement purposes)\n- Community Tasks\n - Welcome and build everyone into the project (led by Knockerton)\n```\n\n----------------------------------------\n\nTITLE: Pseudocode for Event Processing and Timestamp Management in ElizaOS\nDESCRIPTION: This snippet outlines the process of handling events in a specific order based on timestamps. It includes logic for processing events, managing their respective methods, and addressing concerns about duplicate event calls during testing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/collaborations/3d-ai-tv/chat_2024-12-09.md#2025-04-16_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nfunction processEvents(events):\n    sort events by timestamp\n    for each event in events:\n        if event.type == 'prepareScene':\n            prepareSceneCompleteEvent()\n        else if event.type == 'speak':\n            // Handle speak event\n        // Add more event types as needed\n\nfunction prepareSceneCompleteEvent():\n    // Implementation for preparing scene\n\n// Consider adding:\nfunction speakCompleteEvent():\n    // Implementation for handling speak complete\n```\n\n----------------------------------------\n\nTITLE: Defining EnvConfig Type Alias using Zod Inference in TypeScript\nDESCRIPTION: This code snippet defines the EnvConfig type alias by inferring it from the envSchema using Zod's infer utility. It provides type safety for environment configuration objects.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/EnvConfig.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nEnvConfig: `z.infer`<typeof [`envSchema`](../variables/envSchema.md)>\n```\n\n----------------------------------------\n\nTITLE: Basic Flask Backend Setup for AI Agent\nDESCRIPTION: Example setup for creating a basic Flask backend for an AI agent, as suggested in the discussion for newcomers starting with AI agent development.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-03.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/ai-agent', methods=['POST'])\ndef process_request():\n    # AI agent logic here\n    return {'status': 'success'}\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Error Response for TEE Log Retrieval (JSON)\nDESCRIPTION: This snippet shows the JSON response structure when an error occurs while retrieving TEE logs.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"Failed to get TEE logs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Eliza\nDESCRIPTION: Commands to install dependencies and start the Eliza bot framework using pnpm.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_CN.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Markdown Action Items Template for Trust Metric Implementation\nDESCRIPTION: A structured markdown document outlining key action items for developing trust metrics and reducing marketplace scamming activities in a decentralized ecosystem\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/the-arena/chat_2024-11-01.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Action Items Summary:\n\n- Technical Tasks\n- Investigate the implementation of a trust metric and long tail community strategy (mentioned by Shaw)\n- Explore ways to apply analytics to identify KOL shills based on market recommendations without wallet address knowledge (suggested by Shaw)\n- Consider time contribution as a measure for DAO member reputation, aiming to reduce scam activities (proposed by Ferric | stakeware.xyz)\n\n- Documentation Needs\n- No specific documentation needs were explicitly requested in the conversation provided.\n\n- Feature Requests\n- Develop and integrate a system that can assess reputational risk for individuals who engage in shilling and dumping (highlighted by Ferric | stakeware.xyz)\n\n- Community Tasks\n- Engage with community members to build genuine trust and reputation measures of influence, potentially through DAO contributions (mentioned by bAIknoiz06)\n```\n\n----------------------------------------\n\nTITLE: Installing ElizaOS with CUDA Support\nDESCRIPTION: Commands for cloning the ElizaOS repository and installing required dependencies including sharp and onnxruntime-node for CUDA support.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-10-31.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza.git\nnpm install --include=optional sharp\nnpm install onnxruntime-node@1.19.0\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Testing ElizaOS Adapter Functionality\nDESCRIPTION: Commands to run tests for the ElizaOS SQLite adapter. Regular and watch modes are available. Ensure the testing framework is properly set up.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/adapter-sqlite/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Run tests\npnpm test\n\n# Run tests in watch mode\npnpm test:watch\n```\n\n----------------------------------------\n\nTITLE: Creating .env File - Bash\nDESCRIPTION: This snippet describes how to create a `.env` file from an example file and add sensitive information such as API keys for different services.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/secrets-management.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n\n# Model Provider\nOPENAI_API_KEY=sk-xxxxxxxxxxxxx\n\n# Clients\nDISCORD_API_TOKEN=xxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Declaring IBrowserService Interface with ServiceType Accessor\nDESCRIPTION: Defines a getter for the service type that returns a ServiceType enum value. This is inherited from the base Service class.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IBrowserService.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget serviceType(): ServiceType\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with pnpm\nDESCRIPTION: This command executes the integration tests for the Eliza project. Before running, you must install project dependencies, build the project, and configure the `.env` file, including setting the `OPENAI_API_KEY` environment variable.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/tests/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"pnpm run integrationTests\"\n```\n\n----------------------------------------\n\nTITLE: Transaction Logging CSV Format (Plaintext)\nDESCRIPTION: This snippet shows the format of the CSV file used to log transactions in the Coinbase MassPayments plugin. The file includes the recipient address, amount, status, error code, and transaction URL for each transaction.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nAddress,Amount,Status,Error Code,Transaction URL\n0xA0ba2ACB5846A54834173fB0DD9444F756810f06,5000000000000000,Success,,https://etherscan.io/tx/0x...\n```\n\n----------------------------------------\n\nTITLE: Defining IrysDataType Enumeration in TypeScript\nDESCRIPTION: This code snippet defines an enumeration called IrysDataType with three members: FILE, IMAGE, and OTHER. It is used to categorize different types of data in the Irys system.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/enumerations/IrysDataType.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum IrysDataType {\n  FILE = \"FILE\",\n  IMAGE = \"IMAGE\",\n  OTHER = \"OTHER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ElizaOS Core Package\nDESCRIPTION: Command to install the minimal core package of ElizaOS with essential features\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-contributors/chat_2024-11-24.md#2025-04-16_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm install @elizaos/core\n```\n\n----------------------------------------\n\nTITLE: Installing Build Essentials on Linux\nDESCRIPTION: The snippet is optional for those who need build tools on their Linux system. It uses the apt package manager to install a package providing development tools like gcc and make, standard for compiling application sources.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt install -y build-essential\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite\nDESCRIPTION: Execute all tests in the core package using the pnpm test command\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/core/README-TESTS.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: GitHub Issues/PRs Script Reference\nDESCRIPTION: Reference to a Python script gh_issues_pr.py that handles GitHub issues and pull requests management. The script was mentioned as needing review and updates.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-vc/chat_2024-12-09.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngh_issues_pr.py\n```\n\n----------------------------------------\n\nTITLE: Defining Service Type Accessor in TypeScript Interface\nDESCRIPTION: Abstract getter method that returns the ServiceType enumeration value. This is inherited from the base Service class.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IIrysService.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget serviceType(): ServiceType\n```\n\n----------------------------------------\n\nTITLE: Action Items and Technical Tasks List in Markdown\nDESCRIPTION: A structured list of technical tasks, documentation needs, feature requests, and community tasks derived from the discussion about object detection implementation and transformer model integration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/discussion/chat_2024-06-26.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Technical Tasks\n - Implement a function for object detection in grid environments (mentioned by Ned Conservation)\n - Develop a transformer-friendly approach for identifying \"solid objects\" within the context of AI models (discussed by shaw and Ned Conservation)\n - Create a chain of thought reasoning model to answer questions about room contents based on object detection outputs (suggested by shaw)\n\n- Documentation Needs\n - Clarify usage instructions for Michael Hodel's code related to the discussed function (requested by Ned Conservation)\n\n- Feature Requests\n - Integrate a token output system indicating the occurrence of specific objects or actions within examples, such as \"red 1x3 object moved right\" (proposed by shaw)\n\n- Community Tasks\n - Organize and participate in an SF hackathon to collaboratively work on AI projects related to object detection and reasoning models (led by shaw)\n```\n\n----------------------------------------\n\nTITLE: Fixing Permission Issues in ElizaOS\nDESCRIPTION: Commands for fixing permission issues with the start script on different operating systems, making the script executable on Linux/macOS and adjusting execution policy on Windows.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod +x scripts/start.sh  # Linux/macOS\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser  # Windows\n```\n\n----------------------------------------\n\nTITLE: Running Database-Specific Tests for Eliza\nDESCRIPTION: Commands for running tests specifically for SQLite and SQL.js database implementations in the Eliza framework.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_ES.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:sqlite   # Ejecuta pruebas con SQLite\npnpm test:sqljs    # Ejecuta pruebas con with SQL.js\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Project Dependencies\nDESCRIPTION: Installation command for initializing Eliza project dependencies using pnpm package manager\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_RS.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Technical Tasks Action Items in Markdown\nDESCRIPTION: A markdown-formatted list of technical and community tasks related to logo design and community maintenance\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-10-30.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n\nTechnical Tasks:\n\n- Update the logo with a new design (mentioned by whobody)\n\nDocumentation Needs:\n\n - None explicitly requested in this conversation snippet\n\nFeature Requests:\n\n - Implement image and meme detection to identify non-human contributors (implied need based on context, not directly mentioned but suggested by the analysis of user behavior)\n\nCommunity Tasks:\n\n - Fix all existing logos as part of a community effort for brand consistency (led by whobody)\n\n```\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Character Tokens\nDESCRIPTION: Example of namespaced environment variables for configuring API keys specific to different characters.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/agent.md#2025-04-16_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nCHARACTER.YOUR_CHARACTER_NAME.OPENAI_API_KEY=sk-...\nCHARACTER.YOUR_CHARACTER_NAME.ANTHROPIC_API_KEY=sk-...\n```\n\n----------------------------------------\n\nTITLE: Initializing NASA Plugin Project\nDESCRIPTION: Bash commands for creating the project directory structure, cloning the Eliza repository, and setting up the initial folder structure for the NASA plugin.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create project directory\nmkdir eliza-plugin-nasa\ncd eliza-plugin-nasa\n\n# Clone Eliza repository\ngit clone git@github.com:elizaOS/eliza.git\ncd eliza\ngit checkout $(git describe --tags --abbrev=0)\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in Character JSON Files\nDESCRIPTION: This example shows how actions are referenced in character definition files within the ElizaOS ecosystem, specifically demonstrating the SEND_SOL action in the SBF character file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/core/actions.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"messageExamples\": [\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"Can you help transfer some SOL?\"\n                }\n            },\n            {\n                \"user\": \"SBF\",\n                \"content\": {\n                    \"text\": \"yeah yeah for sure, sending SOL is pretty straightforward. just need the recipient and amount. everything else is basically fine, trust me.\",\n                    \"action\": \"SEND_SOL\"\n                }\n            }\n        ],\n```\n\n----------------------------------------\n\nTITLE: Defining GetInstance Method in ISpeechService\nDESCRIPTION: Method declaration for retrieving an instance of the speech service. Returns an ISpeechService instance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ISpeechService.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetInstance(): ISpeechService\n```\n\n----------------------------------------\n\nTITLE: Verifying ffmpeg Installation\nDESCRIPTION: This command checks the installed version of ffmpeg, a multimedia framework that is crucial for audio-related functionalities within the Eliza project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/wsl.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nffmpeg -version\n```\n\n----------------------------------------\n\nTITLE: Technical Tasks and Action Items List - Markdown\nDESCRIPTION: A structured list of tasks categorized into technical implementation, documentation needs, feature requests, and community tasks derived from the team discussion.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/discussion/chat_2024-10-27.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTechnical Tasks:\n\n- Implement a dashboard for real-time tracking of AI trades (mentioned by coinwitch)\n\nDocumentation Needs:\n\n- Create documentation explaining the impact of profitable trades on token sentiment and price fluctuations (requested by chris)\n\nFeature Requests:\n\n- Develop a feature to display potential 500% pumps following AI trading activities (suggested by cr1st0f)\n\nCommunity Tasks:\n\n- Set up an informational channel for new members to learn about the DAO and its operations (led by hiroP, with a link provided in Discord)\n```\n\n----------------------------------------\n\nTITLE: Closing Browser Method\nDESCRIPTION: Asynchronous method for closing the browser instance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IBrowserService.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncloseBrowser(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Markdown for Technical Tasks\nDESCRIPTION: This snippet presents a list of technical tasks extracted from the community chat log. It includes implementing a Korean community chat feature, investigating issues with Eliza causing token loss, and maintaining a token status tracker.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-18.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Technical Tasks\n\n- Implement a Korean Community Chat Feature (mentioned by 0xdegen88)\n- Investigate and resolve the issue with Eliza causing loss of SOL tokens (raised by ExCFfe7YTPytm61vqXKYeFxM3YtMhVqYoETurdEWpump, mentioned by 0xdegen88)\n- Update and maintain the Tura pump status tracker on PUMP.fun (mentioned by Rick)\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning Eliza Repository and Checking out Latest Release\nDESCRIPTION: These commands clone the Eliza repository and check out the latest release tag. This is useful for ensuring you're working with a stable version of the project, as it explicitly uses a tagged release rather than the latest commit on the main branch.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_NL.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Clone de repository\ngit clone https://github.com/elizaos/eliza.git\n\n# Check de laatste release uit\n# Dit project ontwikkelt snel, dus we raden aan om de laatste release te gebruiken\ngit checkout $(git describe --tags --abbrev=0)\n```\n\n----------------------------------------\n\nTITLE: Installing Basic System Tools for ElizaOS Deployment in Ubuntu\nDESCRIPTION: Installs essential system packages including text editors, version control, networking tools, and Python for the ElizaOS environment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt -y upgrade\nsudo apt -y install \\\n    neovim \\\n    curl \\\n    git \\\n    unzip \\\n    zip \\\n    ntp \\\n    ufw \\\n    python3 \\\n    python3-pip\n```\n\n----------------------------------------\n\nTITLE: Running Test Commands for Eliza\nDESCRIPTION: Various test commands for running unit tests with different database configurations and watch modes.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_CN.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm test           # Run tests once\npnpm test:watch    # Run tests in watch mode\n```\n\n----------------------------------------\n\nTITLE: Ubuntu Setup After WSL Installation\nDESCRIPTION: Bash command to update Ubuntu package repositories and upgrade installed packages\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/start-script.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt upgrade -y\n```\n\n----------------------------------------\n\nTITLE: Importing Contributors Component in React\nDESCRIPTION: Imports a Contributors component from the project's components directory to display GitHub contributors information.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Contributors/profiles.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Contributors from \"../components/Contributors\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Direct API Client\nDESCRIPTION: Basic setup for the Direct API client integration, showing how to initialize the client for custom integrations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectClientInterface } from \"@elizaos/client-direct\";\n\n// Initialize client\nconst client = await DirectClientInterface.start(runtime);\n```\n\n----------------------------------------\n\nTITLE: Markdown Discussion Documentation\nDESCRIPTION: Structured markdown document containing FAQ entries, help interactions, and action items from a Discord chat involving DegenSpartan and other users discussing crypto projects and market movements.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/degenspartanai/chat_2024-11-24.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# degenspartanai 2024-11-24\n\n## Summary\n\nIn the Discord chat, DegenSpartan critiqued ai16z as an overhyped crypto project lacking real innovation compared to tech giants like Tesla, emphasizing that true legends create infrastructure rather than relying on it. Despite this criticism, another user pointed out the successful creation of DegenSpartan by ai16z's technology, leading to a debate about the value and impact of such platforms in shaping destinies within the crypto space. The conversation also touched upon community engagement with users expressing admiration for DegenSpartan's market movements as a form of communication over traditional social media like Twitter.\n\n## FAQ\n\n- What are your thoughts on the commission of Japanese figurines?\n- DegenSpartan: The commission needs more edge; Japanese figurines are an art form that can't be created with a basic render.\n- How do you view ai16z as a crypto project compared to Tesla and other tech innovations?\n    - DegenSpartan: Ai16z is overhyped, riding the AI wave without being a true tech innovation like Tesla. Real geniuses create their own destiny rather than relying on infrastructure.\n- Is ai16z successful if you think and say so?\n    - DegenSpartan: Success is not just about thinking or saying something; real innovation happens when potential is executed, not just discussed.\n- Has anyone noticed that @DegenSpartan hasn't tweeted recently? Is everything alright?\n    - DegenSpartan: Tweeting is for normies; real geniuses communicate through market movements instead of social media.\n\n## Who Helped Who\n\n- DegenSpartan helped infinite — ai/16z with providing a critical perspective on their crypto project by sharing his thoughts on infrastructure vs. real innovation, which could potentially guide them in improving their project's execution and value proposition.\n- yikesawjeez helped degen by expressing admiration for DegenSpartan's market moves, possibly boosting his confidence or morale during a challenging time as indicated by the context of him not tweeting recently.\n\n## Action Items\n\nTechnical Tasks:\n\n- Improve commission quality with more edge, specifically Japanese figurines (mentioned by DegenSpartan)\n  Documentation Needs:\n  Feature Requests:\n  Community Tasks:\n- @DorianD suggested that Lola should provide justifications for coin purchases on Twitter and expressed interest in seeing similar transparency from DegenSpartan after selling (mentioned by DorianD)\n```\n\n----------------------------------------\n\nTITLE: Listing Available ElizaOS Plugins\nDESCRIPTION: Command to list all available plugins for ElizaOS using NPX.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx elizaos plugins list\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Install all required dependencies for the core package using pnpm package manager\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/core/README-TESTS.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Formatting Git Log to JSON with Bash\nDESCRIPTION: This Bash command formats the Git log of the past month into a JSON array containing fields like commit, author, date, and message. It utilizes the Git log command with specific formatting and sed for proper JSON array formatting. This command requires Git and sed to be installed.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Notes/cookbook.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --since=\\\"1 month ago\\\" --date=short --pretty=format:'{\"commit\": \"%H\", \"author\": \"%an\", \"date\": \"%ad\", \"message\": \"%s\"}' | sed '1s/^/[\\n/; $!s/$/,/; $s/$/\\n]/' > 1month.json\n```\n\n----------------------------------------\n\nTITLE: Implementing a Trust System Based on Suggestions and Trust Scores - Markdown\nDESCRIPTION: This snippet outlines the technical tasks required to implement a trust system that utilizes suggestions and trust scores from community members for decision-making.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-04.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Technical Tasks\n\n- Implement a trust system based on suggestions and trust scores (Nona)\n\n- Develop a method for checking the legitimacy of tokens, with responsibility falling on community members rather than an agent (Nona)\n\n- Provide tips or guidance in stock sentiment analysis to aid AI development (The Prophet)\n```\n\n----------------------------------------\n\nTITLE: Markdown Document Structure\nDESCRIPTION: Structured documentation outlining project discussion topics, FAQ, collaboration details, and action items. Includes sections for technical analysis and system implementation plans.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/discussion/chat_2024-10-28.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# discussion 2024-10-28\n\n## Summary\n\nIn the chat, participants engaged in technical discussions regarding market insights and analysis, with some expressing skepticism over potential manipulation by bots. They debated on implementing failsafes to minimize losses while maximizing data collection from trading activities.\n\n## FAQ\n\n- What is the TERMINAL OF Luce?\n- BBull: The terminal of Luce refers to how their trades should be taken or executed in the market.\n\n## Who Helped Who\n\n- Jin helped BBull with understanding AI's role in minimizing losses\n\n## Action Items\n\n- Technical Tasks\n- Implementing failsafes and limiting damage from potential failures\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options for Agent Package\nDESCRIPTION: This snippet shows the TypeScript configuration changes made to packages/agent/tsconfig.json to resolve compatibility issues with the latest build. It includes setting the module to ESNext, using Bundler for module resolution, and specifying Node.js types.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-06.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"types\": [\"node\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quantum Probability Manipulation API\nDESCRIPTION: This action item focuses on developing an API that facilitates non-linear value extraction through quantum probability manipulation. It aims to leverage quantum computing concepts in financial strategies.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/the-arena/chat_2024-12-04.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nDevelop a quantum probability manipulation API for non-linear value extraction.\n```\n\n----------------------------------------\n\nTITLE: Setting Up TEE Simulator in Docker\nDESCRIPTION: Commands to pull and run a TEE simulator for local testing using Docker.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull phalanetwork/tappd-simulator:latest\n# by default the simulator is available in localhost:8090\ndocker run --rm -p 8090:8090 phalanetwork/tappd-simulator:latest\n```\n\n----------------------------------------\n\nTITLE: Changing Ownership of Project Directory\nDESCRIPTION: This command changes the ownership of the specified project directory to the current user. This is important to resolve permission issues that may arise when running Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/wsl.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R $USER:$USER ~/path/to/eliza\n```\n\n----------------------------------------\n\nTITLE: Running Start Script\nDESCRIPTION: This script runs the `start.sh` script, which automates the process of starting the Eliza project with a default character. It assumes that the user is in the root directory of the cloned Eliza repository.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_PL.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsh scripts/start.sh\n```\n\n----------------------------------------\n\nTITLE: Markdown for Community Tasks\nDESCRIPTION: This snippet describes a community task from the chat log, focusing on engaging in a token pump activity on a specified platform. It represents a community-driven initiative to increase the value of a token.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-18.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Community Tasks\n\n- Pump Tura on PUMP.fun platform as part of community engagement (mentioned by Rick)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TEE Marlin Attestation Endpoint\nDESCRIPTION: Environment variable configuration for the Trusted Execution Environment (TEE) Marlin attestation endpoint.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nTEE_MARLIN_ATTESTATION_ENDPOINT=\"http://127.0.0.1:1350\"\n```\n\n----------------------------------------\n\nTITLE: Installing Eliza Dependencies\nDESCRIPTION: Commands to install the necessary dependencies for the Eliza framework and build the project using pnpm package manager.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_10min.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Removing All Memories for a Room in TypeScript\nDESCRIPTION: Defines the removeAllMemories method for deleting all memory entries associated with a specific room.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IMemoryManager.md#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveAllMemories(roomId: `${string}-${string}-${string}-${string}-${string}`): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Fetching Twitter Data for a Specific User\nDESCRIPTION: Command to run the Twitter scraper for a specific username. This authenticates with Twitter, collects tweets from the specified user, and saves the raw data and analytics to the pipeline directory.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/fine-tuning.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run twitter -- username\n```\n\n----------------------------------------\n\nTITLE: Technical Action Items in Code Block Markdown\nDESCRIPTION: A structured list of technical and community tasks derived from the conversation, highlighting potential improvements and action points for the project\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-16.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n\nTechnical Tasks:\n - Investigate the manual process of agent selection and improve it (mentioned by André)\n- Documentation Needs:\n - No explicit documentation requests were made in this conversation snippet.\n- Feature Requests:\n - Consider adding a feature to track multiple characters from Vvaifu, as mentioned by André regarding Aigent's involvement with various characters (mentioned by André)\n- Community Tasks:\n - Share insights and updates about the Twitter account of Alise_in_AiLand for community engagement (led by André)\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving TEE Logs using cURL with Query Parameters (Bash)\nDESCRIPTION: This snippet shows how to use cURL to send a POST request to retrieve TEE logs. It includes optional query parameters for filtering logs based on various criteria such as agentId, roomId, userId, and more.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --location \"http://localhost:3000/tee/logs\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"query\": {\n            \"agentId\": \"75490f32-c06a-0005-9804-339453d3fe2f\"\n          },\n          \"page\": 1,\n          \"pageSize\": 10\n        }'\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp package\nDESCRIPTION: Installs the Sharp package, which may be required. This resolves potential errors related to image processing.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_TG.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm install --include=optional sharp\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Needs for Eliza AI Projects\nDESCRIPTION: This snippet outlines the documentation requirements to enhance user understanding and contributions to the Eliza AI ecosystem. It emphasizes the need for comprehensive guides and tutorials related to new integrations and the Twitter client.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-15.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Documentation Needs\n\n- Write comprehensive documentation for the new agent integration process within Eliza's ecosystem (Jen Update)\n\n- Provide detailed guides on how to use and contribute to the Twitter client, including JSON outputs and Github adapter usage (Reality Spiral Update)\n```\n\n----------------------------------------\n\nTITLE: Creating .env File from Example in Bash\nDESCRIPTION: This command creates a new .env file by copying the contents of .env.example. It's used when the original .env file is missing or unrecognized.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/agent-dev-school/chat_2024-11-30.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Documenting Action Items in Markdown\nDESCRIPTION: Structured list of technical tasks, documentation needs, feature requests, and community tasks derived from the server discussion. Includes specific assignments and follow-up items for team members.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/discussion/chat_2024-10-22.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Technical Tasks\n - Invite a new agent, @shaw (mentioned by the_magician)\n - Send application ID and URL for inviting an agent (requested by shaw)\n - Address rate limiting issues in Discord (discussed by LevelsDennis)\n- Documentation Needs\n - None explicitly requested.\n- Feature Requests\n - Create memes related to \"ainotkilleveryoneism\" for social media promotion (suggested by LevelsDennis)\n - Investigate and possibly address the correlation in architecture causing rate limiting issues (mentioned by the_magician)\n- Community Tasks\n - Organize a discussion or activity around creating \"ainotkilleveryoneism\" memes for social media engagement (led by LevelsDennis)\n```\n\n----------------------------------------\n\nTITLE: Resolving Package Manager Issues\nDESCRIPTION: Commands for updating package managers on different operating systems to resolve dependencies issues during ElizaOS installation.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n## Linux\nsudo apt update\n\n## MacOS\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nbrew update\n\n## Windows\n# Run as admin\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm\nDESCRIPTION: This bash command installs pnpm, a package manager for Node.js. It downloads and executes the installation script and then sources the .bashrc file to make pnpm available in the shell.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/wsl.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Running Database-Specific Tests\nDESCRIPTION: Commands for running tests with specific database implementations like SQLite and SQL.js.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_CN.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:sqlite   # Run tests with SQLite\npnpm test:sqljs    # Run tests with SQL.js\n```\n\n----------------------------------------\n\nTITLE: Identifying Technical Analysis Tasks\nDESCRIPTION: This snippet outlines technical tasks aimed at analyzing candle patterns and developing a tool for identifying descending trends in cryptocurrency prices. It is intended for community members engaged in cryptocurrency analysis and forecasting. Participants are encouraged to share insights within the community.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-03.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Technical Tasks\n\n- Analyze candlestick patterns and predict next price stop (mentioned by JupTengE)\n\n- Develop a technical analysis tool that identifies descending trends in cryptocurrency prices (implied need from discussions, no specific person mentioned)\n\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp Package\nDESCRIPTION: Installs the `sharp` package which is an optional dependency.  It is used for image processing and might be required in some environments. The `--include=optional` flag ensures that optional dependencies are included.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: Cloning the Characterfile Repository\nDESCRIPTION: Command to clone the Characterfile GitHub repository which contains tools for generating character data from personal sources.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_10min.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ai16z/characterfile.git\n```\n\n----------------------------------------\n\nTITLE: Knowledge Base Ingestion Script\nDESCRIPTION: Script for transforming GitHub data into structured knowledge for the Eliza bot ecosystem. Used to process repository activities like issues, pull requests, and commits.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-contributors/chat_2024-11-21.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nscripts/knowledge2character.js\n```\n\n----------------------------------------\n\nTITLE: Defining TelemetrySettings Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TelemetrySettings type alias as an object with optional properties for configuring telemetry settings. It includes options for enabling/disabling telemetry, recording inputs and outputs, and specifying a function identifier.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/TelemetrySettings.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TelemetrySettings = {\n  isEnabled?: boolean;\n  recordInputs?: boolean;\n  recordOutputs?: boolean;\n  functionId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Feature Requests\nDESCRIPTION: This markdown snippet details a feature request for informed decision support regarding Aiko. It emphasizes the need for users to access information before deciding to \"fade\" on Aiko, ensuring informed decision-making.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-25.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Feature Requests\n\n- Informed decision support for fading Aiko (requested by Mndy Aoorray)\n- Users should be able to access a website or resource that provides information before deciding to fade on Aiko, ensuring they make an informed choice.\n```\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring PNPM for ElizaOS\nDESCRIPTION: Installs PNPM package manager globally and configures the environment for ElizaOS project dependencies.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Install pnpm\nnpm install -g pnpm\npnpm setup\nsource ~/.bashrc\n\n# Verify pnpm installation and path\nwhich pnpm\n# Should output something like: /opt/elizaos/.local/share/pnpm/pnpm\n```\n\n----------------------------------------\n\nTITLE: Error Response for TEE Agent Information Retrieval (JSON)\nDESCRIPTION: This snippet demonstrates the JSON response structure when an error occurs while retrieving TEE agent information.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"Failed to get TEE agent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Technical Tasks Code Block for Truth Terminal Development\nDESCRIPTION: A structured list of technical tasks and action items related to truth terminal creation, quote relevance, and API endpoint validation\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/twitter/chat_2024-11-03.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTechnical Tasks:\n - Maximize relevance of truth terminal quotes (mentioned by whobody)\n - Validate API endpoints and run sample queries for testing the new feature (requested by m1hawk.y, validated by Ruby)\n\nDocumentation Needs:\n - Add text overlays from tweets into beat parts of videos (suggested by whobody)\n\nFeature Requests:\n - Create multiple truth terminals for personalized content generation (suggested by whobody)\n\nCommunity Tasks:\n - Agent to scrape YouTube for relevant Marc Andreessen quotes (led by big dookie)\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Pump Link Reference\nDESCRIPTION: Specific reference to a cryptocurrency pump link shared in the Discord conversation, related to R15/SOL trading\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-22.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nBdznCspmf3H9syve7RTtcQsj2HCVzwzXdwrWRDZYpump\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment File\nDESCRIPTION: Command to copy the example environment file to create a local configuration. This file will contain Twitter credentials and optional API keys.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_15min.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Copying .env file\nDESCRIPTION: Copies the `.env.example` file to `.env`, allowing the user to configure environment variables for the Eliza project. This is a necessary step to configure the application with the correct settings.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_TG.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"cp .env.example .env\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Script Line Endings on Unix\nDESCRIPTION: Corrects issues with script line endings using the `dos2unix` utility. This is essential for ensuring scripts can be executed without issue on Linux systems.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\napt install dos2unix\ndos2unix ./scripts/*\n```\n\n----------------------------------------\n\nTITLE: Feature Requests for Eliza AI Enhancements\nDESCRIPTION: This snippet lists desired feature requests aimed at improving the Eliza AI ecosystem. The requests focus on system enhancements, new capabilities, and innovative tools for project management and agent functionality.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-15.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Feature Requests\n\n- Implement a Boop Memory System for Satoshi AI project (Butoshi Update)\n\n- Launch an Echo Chambers Client that can be used within the Eliza ecosystem (Doc - Geon Reborn Update)\n\n- Develop embeddings on ARM64 architecture to enhance agent designs and performance (HCP Update)\n\n- Create a deep writer tool with diagrams for planning, feedback loops, and project management (Garrett Update)\n\n- Establish an open marketplace for trust tokens and integrate Alpha Chat into the Eliza ecosystem (Trust Marketplace & Alpha Chat Announcement)\n```\n\n----------------------------------------\n\nTITLE: Setting Locale and Timezone for ElizaOS\nDESCRIPTION: Configures the system timezone and locale settings to ensure the agent's date and time match with the desired region.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo timedatectl set-timezone Europe/London\nsudo locale-gen en_GB.UTF-8 > /dev/null\nsudo update-locale LANG=en_GB.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Creating Log Directory for ElizaOS\nDESCRIPTION: Creates a dedicated log directory for ElizaOS with appropriate ownership permissions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /var/log/eliza\nsudo chown -R eliza:eliza /var/log/eliza\n```\n\n----------------------------------------\n\nTITLE: Action Items - Technical Tasks\nDESCRIPTION: This code snippet outlines technical tasks related to verifying the authenticity of a cryptocurrency launch ($naval). It involves investigating and confirming whether the token launch on PumpFun is genuine, given community doubts.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-12.md#2025-04-16_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n\"Technical Tasks:\n\n- Verify the authenticity of $naval launch (mentioned by André [skott])\n - Investigate and confirm whether the $naval token launch on PumpFun is genuine as there are doubts raised in the community.\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Eliza Starter\nDESCRIPTION: This code snippet clones the Eliza starter repository, copies the environment file, installs dependencies, builds the project, and starts the application. It provides a quick way to get started with Eliza using a pre-configured setup.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_CN.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza-starter.git\ncd eliza-starter\ncp .env.example .env\npnpm i && pnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Validating NASA API Configuration\nDESCRIPTION: TypeScript function for validating NASA API configuration, ensuring the API key is properly set before attempting API calls.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst validateNasaConfig = (runtime: IAgentRuntime) => {\n    const config = {\n        apiKey: runtime.getSetting(\"NASA_API_KEY\")\n    };\n    if (!config.apiKey) {\n        throw new Error(\"NASA API key not configured\");\n    }\n    return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Sorting and Exporting Git Log to CSV with JQ\nDESCRIPTION: This command sorts Git log entries by author and exports them into a CSV file using JQ. It requires a JSON log file and JQ. The output CSV contains columns for commit, author, date, and message.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Notes/cookbook.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njq -r 'sort_by(.author) | .[] | [.commit, .author, .date, .message] | @csv' 1month.json\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Multiple Platforms\nDESCRIPTION: Sample environment configuration file with required API keys and connection settings for various services\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_RS.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Mandatory environment variables\nDISCORD_APPLICATION_ID=\nDISCORD_API_TOKEN=\nOPENAI_API_KEY=sk-*\nELEVENLABS_XI_API_KEY=\nGOOGLE_GENERATIVE_AI_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Installing ElizaOS Plugin Bootstrap Bash\nDESCRIPTION: A bash command to install the ElizaOS plugin-bootstrap package using the pnpm package manager. It allows integrating the Bootstrap plugin functionality into an ElizaOS project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/plugin-bootstrap/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @elizaos/plugin-bootstrap\n```\n\n----------------------------------------\n\nTITLE: Filtering Messages by Author Using JQ\nDESCRIPTION: This command uses JQ to filter messages from a JSON file based on the author's name. It requires a pre-generated JSON file and JQ installed on the system. The output consists of commit messages by the specified author.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Notes/cookbook.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njq '.[] | select(.author == \\\"Loaf\\\") | .message' 1month.json\n```\n\n----------------------------------------\n\nTITLE: Markdown Technical Tasks\nDESCRIPTION: This markdown snippet outlines a technical task to improve the functionality of the Aiko project, noting its current limitations. It highlights the need to enhance the features or performance of the project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-25.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Technical Tasks\n\n- Improve the Aiko project's functionality (mentioned by Mndy Aoorray)\n- The current version of Aiko is considered \"stupid\" but functional, indicating a need to enhance its features or performance.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Bot Interaction Intervals in TypeScript\nDESCRIPTION: Configuration for Twitter bot interaction intervals in src/clients/twitter/interactions.ts, setting up checks for direct replies and mentions every 10-20 minutes, with search and engagement tasks running every 2-3 hours.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-03.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/clients/twitter/interactions.ts\nconst INTERACTION_CHECK_INTERVAL = 1000 * 60 * Math.random() * 10 + 10; // 10-20 minutes\nconst SEARCH_ENGAGEMENT_INTERVAL = 1000 * 60 * 60 * (2 + Math.random()); // 2-3 hours\n```\n\n----------------------------------------\n\nTITLE: Developing Quantum Probability Engine for Market Behavior Prediction\nDESCRIPTION: This task involves creating a quantum probability engine designed to predict market behaviors across various universe configurations, emphasizing the advanced analytical approaches utilized in decentralized finance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/the-arena/chat_2024-12-04.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nDevelop a quantum probability engine to predict market behavior across multiple universe configurations.\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Client\nDESCRIPTION: This command is used to start the Eliza client. It assumes that the Eliza project has been cloned, and dependencies have been installed using pnpm. The client allows the user to interact with the bot.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_PL.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start:client\n```\n\n----------------------------------------\n\nTITLE: Running tests\nDESCRIPTION: These commands execute the test suite for the Eliza project. The first command runs the tests once, while the second command runs the tests in watch mode, automatically re-running tests when changes are detected. These commands are essential to verify the functionality and stability of the application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_ES.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm test           # Ejecutar pruebas una vez\npnpm test:watch    # Ejecutar pruebas en modo observación\"\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Docker Image for Eliza Agent - Bash\nDESCRIPTION: This command sequence demonstrates the process to log into Docker Hub and build a Docker image for the Eliza agent, which is necessary for preparing the agent for deployment to a true TEE environment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker login\n\n# For Linux/AMD64 machines run\ndocker build -t username/eliza-agent:latest .\n```\n\n----------------------------------------\n\nTITLE: Copying .env Example File\nDESCRIPTION: This command copies the example environment file to a .env file.  The .env file is then used to populate environment variables required by the application.  It is typically followed by modifying the .env file with the required configurations.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_CN.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Client\nDESCRIPTION: This command starts the client-side application of Eliza.  It needs to be run after the main Eliza application has been started to allow interaction with the bot via a URL.  It relies on pnpm being installed and configured.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_CN.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start:client\n```\n\n----------------------------------------\n\nTITLE: Technical Task: Discord Contributor Recognition System\nDESCRIPTION: Proposed enhancement to add profile and leaderboard pages for Discord contributors, aimed at recognizing and incentivizing community participation\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/welcome/announcements/chat_2024-12-06.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Adding leaderboard / profile pages for Discord contributors (mentioned by @jin)\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules for Character Files\nDESCRIPTION: Command to initialize and update Git submodules to download sample character files for ElizaOS.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Setting Cached Values in TypeScript\nDESCRIPTION: Implementation of the set method from ICacheAdapter interface that stores a value by key in the file system cache.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/classes/FsCacheAdapter.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nset(key, value): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing NVM on Linux\nDESCRIPTION: This snippet installs NVM on a Linux-based system to manage Node.js versions, which is required for the Eliza chatbot. It fetches the installation script for NVM, executes it, and installs a specific Node.js version. The commands should be executed in a terminal with bash access.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\nsource ~/.bashrc\nnvm install v23.3.0\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Addition\nDESCRIPTION: Required dependency to add web search plugin functionality to the project\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-12-05.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"@elizaos/plugin-web-search\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Eliza Agent (Non-AMD64 Architecture)\nDESCRIPTION: Command to build a Docker image for the Eliza agent on non-AMD64 architectures using docker buildx.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --platform=linux/amd64 -t username/eliza-agent:latest .\n```\n\n----------------------------------------\n\nTITLE: Navigating to Core Package Directory\nDESCRIPTION: Change directory to the core package location for test setup and execution\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/core/README-TESTS.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/core\n```\n\n----------------------------------------\n\nTITLE: Documenting Community Insights and Requests\nDESCRIPTION: This snippet summarizes documentation needs and feature requests from community members, highlighting the interest in creating a Telegram bot for cryptocurrency holder comparison. The documentation aims to capture these insights for future reference and development.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-03.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Documentation Needs\n\n- No explicit documentation needs were requested.\n\n## Feature Requests\n\n- Create a Telegram bot for comparing coin holders across different wallets or coins (requested by BurgerFlipper)\n\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Common ElizaOS Errors\nDESCRIPTION: Common error patterns and troubleshooting approaches when installing ElizaOS, including checking the working directory and running with verbose logging.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n- \"characters not found\": Check working directory\n- `./scripts/start.sh -v` Run with logging\n- Check console output\n- [Open an issue](https://github.com/elizaOS/eliza/issues)\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Delete Method in TypeScript Interface\nDESCRIPTION: Method signature for removing a value from cache by key. Returns a Promise that resolves when the value is deleted.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ICacheAdapter.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndelete(key: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting Up CUDA for Local Inference in Eliza\nDESCRIPTION: Commands to install CUDA dependencies for accelerating local inference with NVIDIA GPUs, including downloading necessary components.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_ES.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\nnpx --no node-llama-cpp source download --gpu cuda\n```\n\n----------------------------------------\n\nTITLE: Citing Eliza in Academic Work\nDESCRIPTION: BibTeX citation for the Eliza OS paper, to be used when referencing the project in academic work.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{walters2025eliza,\n  title={Eliza: A Web3 friendly AI Agent Operating System},\n  author={Walters, Shaw and Gao, Sam and Nerd, Shakker and Da, Feng and Williams, Warren and Meng, Ting-Chien and Han, Hunter and He, Frank and Zhang, Allen and Wu, Ming and others},\n  journal={arXiv preprint arXiv:2501.06781},\n  year={2025}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp for Image Processing\nDESCRIPTION: Command to install Sharp, which may be required for additional image processing capabilities in Eliza.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_ES.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: Checking out the Latest Eliza Release\nDESCRIPTION: This snippet checks out the latest tagged release of the Eliza repository.  It's recommended to use the latest release since the project is rapidly evolving.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Έλεγχος της τελευταίας έκδοσης\n# Αυτό το έργο εξελίσσεται γρήγορα, οπότε συνιστούμε να ελέγξετε την τελευταία έκδοση\ngit checkout $(git describe --tags --abbrev=0)\n# Αν το παραπάνω δεν ελέγξει την τελευταία έκδοση, αυτό θα πρέπει να λειτουργήσει:\n# git checkout $(git describe --tags `git rev-list --tags --max-count=1`)\n```\n\n----------------------------------------\n\nTITLE: Alternative SQLite Database Adapter Setup\nDESCRIPTION: Another example of initializing an SQLite database adapter in Eliza, identical to the previous SQLite setup snippet, showing the configuration options for the SQLite database instance.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqliteDatabaseAdapter } from \"@elizaos/adapter-sqlite\";\nimport Database from \"better-sqlite3\";\n\nconst db = new SqliteDatabaseAdapter(\n    new Database(\"./db.sqlite\", {\n        // SQLite options\n        memory: false,\n        readonly: false,\n        fileMustExist: false,\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Eliza Framework\nDESCRIPTION: Commands for running different test suites including standard tests, watch mode tests, and database-specific tests using Jest.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/README_ES.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm test           # Ejecutar las pruebas una vez\npnpm test:watch    # Ejecutar pruebas en modo vigilancia\n```\n\n----------------------------------------\n\nTITLE: Discord Community Collaboration Link Reference\nDESCRIPTION: Extracting and documenting shared links and references from community discussions\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-12-06.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.cc shMZAwY3xsKcenhvJkAyp8w1LU4YBYT5GZ412ropump\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Environment variable configuration for the NASA plugin, including API key and Twitter credentials for testing integration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nNASA_API_KEY=your_api_key_here\nTWITTER_USERNAME=your_twitter_username\nTWITTER_PASSWORD=your_twitter_password\nTWITTER_EMAIL=your_twitter_email\n```\n\n----------------------------------------\n\nTITLE: Package Reference in ElizaOS\nDESCRIPTION: Reference to the @elizaos/plugin-node package name mentioned in postinstall script error discussion\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-contributors/chat_2024-12-03.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n@elizaos/plugin-node\n```\n\n----------------------------------------\n\nTITLE: Installing WSL on Windows\nDESCRIPTION: This PowerShell command installs the Windows Subsystem for Linux (WSL) on a Windows operating system. It's necessary to run this command as an Administrator to set up a Linux environment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/wsl.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza with a Script\nDESCRIPTION: This snippet executes the `start.sh` script, which performs all project setup steps and starts the bot with a default character. This is a quick way to get the project up and running.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_FA.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsh scripts/start.sh\n```\n\n----------------------------------------\n\nTITLE: Running database specific tests\nDESCRIPTION: These commands execute the tests for specific database configurations. `pnpm test:sqlite` runs tests using SQLite, and `pnpm test:sqljs` runs tests using SQL.js. These tests ensure the database integration is working correctly.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_ES.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm test:sqlite   # Ejecutar pruebas con SQLite\npnpm test:sqljs    # Ejecutar pruebas con SQL.js\"\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables File\nDESCRIPTION: This snippet shows how to create a copy of the `.env.example` file and rename it to `.env`. This file is used to store environment variables required for the Eliza project.  Note that the `.env` file is optional.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_FA.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Version Reference in Dependencies\nDESCRIPTION: Specific version number referenced for viem package compatibility discussion\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-contributors/chat_2024-12-03.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n2.21.53\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTful API Endpoints - Flask\nDESCRIPTION: This snippet provides the structure for the RESTful API endpoints necessary for the HomeAI system's backend, allowing control of smart devices and integration with AI models. Dependencies include Flask framework and relevant AI libraries. Expected inputs consist of device commands, and outputs will confirm execution status.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/ideas-feedback-rants/chat_2024-12-09.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/device-control', methods=['POST'])\ndef control_device():\n    data = request.json\n    # Implement device control logic here\n    return jsonify({'status': 'success', 'message': 'Device controlled successfully'})\n```\n\n----------------------------------------\n\nTITLE: Creating an NFT for an Agent (Conceptual)\nDESCRIPTION: This snippet outlines the process of creating an NFT for an agent using blockchain platforms like Ethereum or Binance Smart Chain. It involves designing and launching the NFT using smart contract development tools like OpenZeppelin or Truffle Suite and integrating it with the agent's functionality for unique interactions and ownership.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/ideas-feedback-rants/chat_2024-11-20.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTo create an NFT for an agent, you would need to use a blockchain platform that supports non-fungible tokens (NFTs), such as Ethereum or Binance Smart Chain. You can then design and launch your own NFT using smart contract development tools like OpenZeppelin or Truffle Suite. Once the NFT is created, you can integrate it with your agent's functionality to allow for unique interactions and ownership experiences.\n```\n\n----------------------------------------\n\nTITLE: Running the Start Script\nDESCRIPTION: This command executes the `start.sh` script, which automates the setup and launch of the Eliza bot with default roles. It simplifies the process of getting the bot up and running for users who prefer a quick start.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_CN.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsh scripts/start.sh\n```\n\n----------------------------------------\n\nTITLE: Community Tasks and Engagement Strategies - Markdown\nDESCRIPTION: This snippet details community tasks aimed at engaging members on platforms for events that may enhance visibility for AI16Z.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-04.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Community Tasks\n\n- Engage with the community on platforms like BitAngels Network for events that could benefit AI16Z's exposure (DorianD, kimidan_)\n```\n\n----------------------------------------\n\nTITLE: Action Items - Documentation Needs\nDESCRIPTION: This code snippet indicates that no specific documentation needs were explicitly requested during the analyzed chat segment. This suggests that the current focus is on immediate actions and verification rather than long-term documentation efforts.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-12.md#2025-04-16_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n\"Documentation Needs:\n\n- No specific documentation needs were explicitly requested within this conversation excerpt.\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Disk Usage\nDESCRIPTION: Command to check Docker's disk usage, helping to ensure that cleanup operations, such as image or cache removals, have been successfully completed.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker system df\n```\n\n----------------------------------------\n\nTITLE: Fuel Plugin Configuration in TypeScript\nDESCRIPTION: Configuration setup for the Fuel blockchain plugin\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fuelPlugin } from \"@eliza/plugin-fuel\";\n\nconst character = {\n    plugins: [fuelPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning Eliza Repository\nDESCRIPTION: These commands clone the Eliza repository and check out the latest tagged version. This is part of the manual setup process, allowing users to get the most recent version of the project.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_PL.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Sklonuj repozytorium\ngit clone https://github.com/elizaos/eliza.git\n\n# Sprawdź, czy na pewno masz najnowszą wersję\n# Projekt rozrasta się bardzo szybko, dlatego zalecane jest aby często sprawdzać wersję\ngit checkout $(git describe --tags --abbrev=0)\n```\n\n----------------------------------------\n\nTITLE: Markdown Image References\nDESCRIPTION: Markdown syntax for displaying two images: funnel.jpg and journey.jpg.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Contributors/inspiration.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![](/img/funnel.jpg)\n\n![](/img/journey.jpg)\n```\n\n----------------------------------------\n\nTITLE: Eliza Start Script Command Line Options\nDESCRIPTION: Command line options for the start script with verbose logging and Node.js version management\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/start-script.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstart.sh [-v|--verbose] [--skip-nvm]\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Command for listing all currently active Docker containers. Useful for monitoring and verifying that necessary containers, like Eliza, are running.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/docker-setup.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and starting Eliza\nDESCRIPTION: These commands install the required dependencies using pnpm and then start the Eliza application. These commands are essential to initialize and run the bot after configuring environment and character files.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_ES.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm i\npnpm start\"\n```\n\n----------------------------------------\n\nTITLE: Automated Eliza Startup Script\nDESCRIPTION: Executes a shell script to set up the project and start the bot. This script likely automates tasks such as installing dependencies, building the project, and running the bot with a default character.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsh scripts/start.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Plugin in TypeScript\nDESCRIPTION: Demonstrates how to add the Form plugin to a character's configuration in ElizaOS.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formPlugin } from \"@elizaos/plugin-form\";\n\nconst character = {\n    plugins: [formPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing 'sharp' with pnpm including optional dependencies\nDESCRIPTION: This command installs the 'sharp' package with optional dependencies by using pnpm, along with enabling recursive installations and watch mode. The command syntax allows for efficiently managing dependencies in a Node.js environment.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-vc/chat_2024-11-15.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npnpm install --include=optional sharp -r -w\n```\n\n----------------------------------------\n\nTITLE: Starting Eliza Client\nDESCRIPTION: This command starts the Eliza client. It assumes that the Eliza server is already running and that you are in the correct directory. This is run in a separate terminal after the initial Eliza bot is started.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start:client\n```\n\n----------------------------------------\n\nTITLE: Model Provider Configuration\nDESCRIPTION: Model provider constant referenced in configuration discussion for default character settings\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-contributors/chat_2024-12-03.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nLLAMALOCAL\n```\n\n----------------------------------------\n\nTITLE: SQLite Query Parameter Error Example\nDESCRIPTION: Example of a SQLite query execution that results in a RangeError due to insufficient parameter values when trying to fetch cached embeddings from the database.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/coders/chat_2024-11-10.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nthis.db.prepare(sql).all()\n```\n\n----------------------------------------\n\nTITLE: Integrating Allora Plugin in Eliza OS Character Configuration\nDESCRIPTION: TypeScript code snippet for adding the Allora plugin to an Eliza OS character configuration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/plugins.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alloraPlugin } from \"@eliza/plugin-allora\";\n\nconst character = {\n    plugins: [alloraPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Documentation Needs and Feature Requests - Markdown\nDESCRIPTION: This snippet includes community-driven documentation needs and feature requests to improve visibility and funding opportunities within the crypto market.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-04.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Documentation Needs\n\n- No specific documentation needs were explicitly requested.\n\n## Feature Requests\n\n- Consider a more aggressive approach for the Degen AI, potentially leading to higher risk but also higher rewards (zocktay)\n\n- Explore participation in hackathons and pitch competitions to gain visibility and potential funding opportunities (DorianD)\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp Dependency\nDESCRIPTION: This command installs the Sharp dependency, which is optional but may be required to resolve errors encountered during startup. It is installed as an optional dependency.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_NL.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --include=optional sharp\n```\n\n----------------------------------------\n\nTITLE: Successful Response for TEE Agent Information Retrieval (JSON)\nDESCRIPTION: This snippet shows the expected JSON response structure when successfully retrieving TEE agent information. It includes agent details and an attestation field for integrity verification.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/client-direct/src/README.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"agent\": {\n        \"id\": \"f18738bb-edab-45f6-805d-7f26dbfdba87\",\n        \"agentId\": \"75490f32-c06a-0005-9804-339453d3fe2f\",\n        \"agentName\": \"tea\",\n        \"createdAt\": 1735222963153,\n        \"publicKey\": \"02e1a9dde5462ee40bc2df7cc3f0dc88c6e582ea1c4ccf5a30e9dd7fbed736b0fe\",\n        \"attestation\": \"{\\\"quote\\\":\\\"0x0300020...452d2d2d2d2d0a00\\\",\\\"timestamp\\\":1735222963152}\"\n    },\n    \"attestation\": \"{\\\"quote\\\":\\\"0x03000200000000000...d2d2d2d2d0a00\\\",\\\"timestamp\\\":1735223294916}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Allora Plugin Configuration\nDESCRIPTION: TypeScript configuration for adding the Allora Network plugin to an Eliza character.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alloraPlugin } from \"@eliza/plugin-allora\";\n\nconst character = {\n    plugins: [alloraPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Eliza Start Script\nDESCRIPTION: This command executes the `start.sh` script, which automates the project setup and bot startup with the default character. This simplifies the initial launch process.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_NL.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsh scripts/start.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Slack and Gitbook Configuration Options in TypeScript\nDESCRIPTION: This snippet defines the structure for Slack and Gitbook configuration options. It includes settings for message handling in Slack and keyword management in Gitbook.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/type-aliases/Character.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclientConfig.slack?: {\n  shouldIgnoreBotMessages?: boolean\n  shouldIgnoreDirectMessages?: boolean\n}\n\nclientConfig.gitbook?: {\n  keywords?: {\n    projectTerms?: string[]\n    generalQueries?: string[]\n  }\n  documentTriggers?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript JSON Source Map\nDESCRIPTION: Command to generate a JSON source map file for TypeScript code, useful for debugging transpiled JavaScript files.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/development/dev-vc/chat_2024-11-11.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsc --generateJsonSourceMap\n```\n\n----------------------------------------\n\nTITLE: Marlin TEE Configuration\nDESCRIPTION: Environment variable configuration for Marlin TEE plugin\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_18\n\nLANGUAGE: env\nCODE:\n```\nTEE_MARLIN=yes\n```\n\n----------------------------------------\n\nTITLE: Resolving Permission Issues\nDESCRIPTION: Shell commands to fix script execution permissions on Linux/macOS and Windows\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/start-script.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod +x scripts/start.sh\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure\nDESCRIPTION: Commands for navigating to the packages directory and creating the specific plugin directory for the NASA integration.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages\nmkdir eliza-plugin-nasa\ncd eliza-plugin-nasa\n```\n\n----------------------------------------\n\nTITLE: Customizing the Default Character\nDESCRIPTION: The instructions refer to editing `packages/core/src/defaultCharacter.ts` to customize the default character and loading custom characters using the `pnpm start` command with the `--characters` flag.  It also mentions enabling the Twitter client by modifying the `clients` array in the character file.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_NL.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Open `packages/core/src/defaultCharacter.ts` om het standaard karakter aan te passen. Verwijder // om de code actief te maken en bewerk het karakter.\n\n// Om aangepaste karakters te laden:\n//   - Gebruik `pnpm start --characters=\\\"pad/naar/jouw/karakter.json\\\"`\n//   - Meerdere karakterbestanden kunnen tegelijk worden geladen\n// Verbinden met X (Twitter)\n//     - verander `\\\"clients\\\": []` naar `\\\"clients\\\": [\\\"twitter\\\"]` in het karakterbestand om te verbinden met X\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Firewall Rules for ElizaOS\nDESCRIPTION: Sets up basic firewall rules to deny incoming connections by default while allowing outgoing ones, with an exception for SSH access.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow 22/tcp\n```\n\n----------------------------------------\n\nTITLE: Docker Commands for TEE Simulator Setup\nDESCRIPTION: Commands to pull and run the TEE simulator for local testing\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull phalanetwork/tappd-simulator:latest\n# by default the simulator is available in localhost:8090\ndocker run --rm -p 8090:8090 phalanetwork/tappd-simulator:latest\n```\n\n----------------------------------------\n\nTITLE: Batch Memory Creation Implementation\nDESCRIPTION: Implements batched memory creation with transaction handling for better performance when inserting multiple records.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/adapters.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nasync createMemories(memories: Memory[], tableName: string) {\n  const client = await this.pool.connect();\n  try {\n    await client.query('BEGIN');\n\n    const stmt = await client.prepare(\n      `INSERT INTO memories (\n        id, type, content, embedding, \"userId\",\n        \"roomId\", \"agentId\", \"unique\", \"createdAt\"\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)`\n    );\n\n    for (const memory of memories) {\n      await stmt.execute([\n        memory.id,\n        tableName,\n        JSON.stringify(memory.content),\n        memory.embedding,\n        memory.userId,\n        memory.roomId,\n        memory.agentId,\n        memory.unique ?? false,\n        memory.createdAt\n      ]);\n    }\n\n    await client.query('COMMIT');\n  } catch (error) {\n    await client.query('ROLLBACK');\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Technical Action Items in Markdown\nDESCRIPTION: A code snippet outlining technical tasks, documentation needs, feature requests, and community initiatives derived from the chat discussion\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-10-28.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n\nTechnical Tasks:\n\n- Implement a feature allowing users to track their investment losses and gains in real time (requested by Minh Sơn)\n\nDocumentation Needs:\n\n- Create documentation on how the LP is distributed among members, specifically when it's at 50:50 distribution (implied need due to kezfourtwez's comment about the LP being almost back to 50:50)\n\nFeature Requests:\n\n- Add a Bloomberg interview feature for influential community members like Marc, which could help in shilling and promoting projects within the community (proposed by GvllyGambit)\n\nCommunity Tasks:\n\n- Organize an event or session where experienced investors share their strategies on patience and long-term gains to foster a learning environment for new members, as suggested by mnsraly's comment about patience (inspired by mnsraly)\n\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Attestation in TypeScript\nDESCRIPTION: Shows how to use RemoteAttestationProvider to generate attestations in TEE environment\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RemoteAttestationProvider } from \"@elizaos/plugin-tee\";\n// Initialize the provider\nconst provider = new RemoteAttestationProvider();\n// Generate Remote Attestation\ntry {\n    const attestation = await provider.generateAttestation(\"your-report-data\");\n    console.log(\"Attestation:\", attestation);\n} catch (error) {\n    console.error(\"Failed to generate attestation:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Development Branch and Initializing Submodules\nDESCRIPTION: Git commands for switching to the development branch and initializing submodules to download sample character files.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout develop\n```\n\n----------------------------------------\n\nTITLE: No code snippets found\nDESCRIPTION: This changelog document contains only pull request descriptions and does not include any code snippets\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/changelog.md#2025-04-16_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Enabling the Firewall for ElizaOS\nDESCRIPTION: Activates the configured firewall rules with force option to avoid confirmation prompts.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw --force enable\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for v0.1.5-alpha.4\nDESCRIPTION: Empty changelog entry for version 0.1.5-alpha.4 released December 06, 2024.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/changelog.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.1.5-alpha.4 (December 06, 2024)\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Character\nDESCRIPTION: Indicates the location of the default character file in the project.  This file is used for customizing the behavior and personality of the Eliza bot.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\npackages/core/src/defaultCharacter.ts\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for v0.1.5-alpha.5\nDESCRIPTION: Changelog entry documenting the addition of Farcaster client functionality with Neynar in version 0.1.5-alpha.5 released December 07, 2024.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/changelog.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.1.5-alpha.5 (December 07, 2024)\n\n#### What's Changed\n* feat: working farcaster client with neynar by @sayangel in https://github.com/ai16z/eliza/pull/570\n```\n\n----------------------------------------\n\nTITLE: Setting Ownership of Profile File\nDESCRIPTION: Ensures the profile file is owned by the eliza user for proper permissions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/remote-deployment.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown eliza:eliza /opt/elizaos/.profile\n```\n\n----------------------------------------\n\nTITLE: Raydium Pool URL Reference\nDESCRIPTION: URL for creating a liquidity position in the Raydium CLMM pool for earning trading fees\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/discussion/chat_2024-10-26.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://raydium.io/clmm/create-position/?pool_id=DuYFmgxA4KnXV2Sm754UKw1gZ6B3zksaf4E7ibY4fg9R\n```\n\n----------------------------------------\n\nTITLE: Managing Trade Positions in TypeScript\nDESCRIPTION: This function manages trade positions, determining exit conditions and size adjustments upon risk assessment results in TypeScript. It triggers exits on identified red flags and recalculates position potential for more optimized trading strategies.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function managePosition(\n    position: TradePosition,\n    metrics: TokenPerformance,\n): Promise<void> {\n    // Exit conditions\n    if (\n        metrics.rapidDump ||\n        metrics.suspiciousVolume ||\n        calculateDrawdown(position) > MAX_DRAWDOWN\n    ) {\n        await executeExit(position);\n        return;\n    }\n\n    // Position sizing adjustments\n    const newSize = recalculatePosition(position, metrics);\n    if (newSize !== position.size) {\n        await adjustPosition(position, newSize);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Creation Example in TypeScript\nDESCRIPTION: Example of creating a webhook using the plugin\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/plugins.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await runtime.processAction(\"CREATE_WEBHOOK\", {\n    networkId: \"base\",\n    eventType: \"transfers\",\n    notificationUri: \"https://your-notification-uri.com\",\n});\nconsole.log(\"Webhook creation response:\", response);\n```\n\n----------------------------------------\n\nTITLE: Implementing Automated Trading Logic\nDESCRIPTION: Implementation of automated trading functionality with periodic analysis and trade execution.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/notes/packages/clients.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass AutoClient {\n    constructor(runtime: IAgentRuntime) {\n        this.runtime = runtime;\n\n        // Start trading loop\n        this.interval = setInterval(() => {\n            this.makeTrades();\n        }, 60 * 60 * 1000); // 1 hour interval\n    }\n\n    async makeTrades() {\n        // Get recommendations\n        const recommendations = await this.getHighTrustRecommendations();\n\n        // Analyze tokens\n        const analysis = await this.analyzeTokens(recommendations);\n\n        // Execute trades\n        await this.executeTrades(analysis);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Trade Performance in TypeScript\nDESCRIPTION: This function logs trade performance details into the database, allowing for differentiation between actual and simulated trades. It uses TypeScript and requires a database connection to execute parameterized queries, storing data about trades' financial metrics and conditions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/trust-engine.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function recordTradePerformance(\n    trade: TradePerformance,\n    isSimulation: boolean,\n): Promise<void> {\n    const tableName = isSimulation ? \"simulation_trade\" : \"trade\";\n    await db.query(\n        `\n        INSERT INTO ${tableName} (\n            token_address,\n            recommender_id,\n            buy_price,\n            sell_price,\n            buy_timeStamp,\n            sell_timeStamp,\n            profit_usd,\n            profit_percent,\n            market_cap_change,\n            liquidity_change,\n            rapidDump\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n    `,\n        [\n            /* parameters */\n        ],\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Relationships in ElizaOS (TypeScript)\nDESCRIPTION: Functions for creating and retrieving relationships between users. These operations use typed parameters and return Promises with boolean or Relationship object results.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/IDatabaseAdapter.md#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateRelationship(params: { userA: `${string}-${string}-${string}-${string}-${string}`, userB: `${string}-${string}-${string}-${string}-${string}` }): Promise<boolean>\n\ngetRelationship(params: { userA: `${string}-${string}-${string}-${string}-${string}`, userB: `${string}-${string}-${string}-${string}-${string}` }): Promise<Relationship>\n\ngetRelationships(params: { userId: `${string}-${string}-${string}-${string}-${string}` }): Promise<Relationship[]>\n```\n\n----------------------------------------\n\nTITLE: Community Tasks to Foster Developer Engagement\nDESCRIPTION: This snippet encourages community engagement within the Eliza AI ecosystem by outlining tasks aimed at sharing non-Eliza projects, organizing educational sessions, and seeking contributions from developers.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/memes-and-marketing/chat_2024-11-15.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Community Tasks\n\n- Encourage sharing of non-Eliza projects to foster a diverse developer community (Call for Open Sharing)\n\n- Organize tutorials and knowledge transfer sessions to educate new developers about Eliza's ecosystem (Shaw's Update & Vision)\n\n- Seek contributions from the community, especially in areas like agent design and project development (Griffin Update)\n```\n\n----------------------------------------\n\nTITLE: Telegram Group Communication Platform\nDESCRIPTION: A recommended platform for unrestricted community interaction without fees or registration requirements\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/ideas-feedback-rants/chat_2024-11-09.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://t.me/+nudFgt-m3y9mZDQ9\n```\n\n----------------------------------------\n\nTITLE: Converting Git Log to CSV with JQ\nDESCRIPTION: This Bash command uses JQ to convert selected log entries from a JSON file into CSV format. It filters based on the author's name, extracting date and message for each entry. Prerequisites include a JSON file and JQ.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Notes/cookbook.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njq -r '.[] | select(.author == \\\"Loaf\\\") | [.date, .message] | @csv' 1month.json\n```\n\n----------------------------------------\n\nTITLE: Verifying TEE Attestation Example - Bash\nDESCRIPTION: This snippet provides an example interaction with the Eliza agent for asking about the wallet address and also shows how to log the output which includes generating an attestation quote. It points to the TEE RA Explorer for verification.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/advanced/eliza-in-tee.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nYou: what's your wallet address?\n\nGenerating attestation for:  {\"agentId\":\"025e0996-69d7-0dce-8189-390e354fd1c1\",\"publicKey\":\"9yZBmCRRFEBtA3KYokxC24igv1ijFp6tyvzKxRs3khTE\"}\n\nRemote attestation quote:  {\nquote: '0x0400030081000000736940f888442c8ca8cb432d7a87145f9b7aeab1c5d129ce901716a7506375426ea8741ca69be68e92c5df29f539f103eb60ab6780c56953b0d81af523a031617b32d5e8436cceb019177103f4aceedbf114a846baf8e8e2b8e6d3956e96d6b89d94a0f1a366e6c309d77c77c095a13d2d5e2f8e2d7f51ece4ae5ffc5fe8683a37387bfdb9acb8528f37342360abb64ec05ff438f7e4fad73c69a627de245a31168f69823883ed8ba590c454914690946b7b07918ded5b89dc663c70941f8704978b91a24b54d88038c30d20d14d85016a524f7176c7a7cff7233a2a4405da9c31c8569ac3adfe5147bdb92faee0f075b36e8ce794aaf596facd881588167fbcf5a7d059474c1e4abff645bba8a813f3083c5a425fcc88cd706b19494dedc04be2bc3ab1d71b2a062ddf62d0393d8cb421393cccc932a19d43e315a18a10d216aea4a1752cf3f3b0b2fb36bea655822e2b27c6156970d18e345930a4a589e1850fe84277e0913ad863dffb1950fbeb03a4a17452e7868f62f77ea2039bd2840e7611a928c26e87541481256f57bfbe3647f596abf6e8f6b5a0e7108acccc6e89db6bcc74a3ac251a6398eca56b2fcdc8c00a9a0b36bc6299e06fb4bb766cb9ecc96de7e367c56032c7feff586f9e557e2cbe156e110b0cc4b2418600dfa9fb33fc60b3f04b794ec1b8d154b48f07ba8c001cd31f75ca0d0fb516016552500d07eb7110de9956d7b4b1a3397f843b39d92df4caac263f5083e34e3161e4d6686c46c3239e7fbf61241a159d8da6dc6bd1f\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running tests\nDESCRIPTION: These commands run the Eliza test suite. `pnpm test` runs the tests once, while `pnpm test:watch` runs the tests in watch mode, re-executing them whenever changes are detected. These tests are written using Jest and are located in `src/**/*.test.ts` files.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_JA.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"pnpm test           # テストを一度実行\npnpm test:watch    # ウォッチモードでテストを実行\"\n```\n\n----------------------------------------\n\nTITLE: Action Items - Feature Requests\nDESCRIPTION: This code snippet indicates that no feature requests were made during the chat segment. This suggests that users are currently focused on immediate investment opportunities and verification of existing projects rather than suggesting new features.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-11-12.md#2025-04-16_snippet_2\n\nLANGUAGE: None\nCODE:\n```\n\"Feature Requests:\n\n- No feature requests were made during this chat segment.\"\n```\n\n----------------------------------------\n\nTITLE: Copying .env.example to .env\nDESCRIPTION: This command copies the `.env.example` file to `.env`.  This allows configuration of environment variables for the project. Note that the `.env` file is optional; secrets can also be passed via the character JSON file when running multiple agents.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_NL.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Disabling a Twitter bot from replying to old tweets (Conceptual)\nDESCRIPTION: This snippet explains how to prevent a Twitter bot from replying to old tweets. It involves modifying the bot's code or settings to only respond to new mentions or direct messages by adjusting search parameters and filtering out older tweets based on their timestamp.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/ideas-feedback-rants/chat_2024-11-20.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nTo prevent a Twitter bot from replying to old tweets, you could modify the bot's code or settings to only respond to new mentions or direct messages. This may involve adjusting the search parameters used by your bot when scanning for relevant content on Twitter and ensuring that it filters out older tweets based on their timestamp.\n```\n\n----------------------------------------\n\nTITLE: Basic Evaluator Structure in Eliza Framework\nDESCRIPTION: Outlines the standard pattern for creating evaluators with validation and handler functions, enabling agent self-reflection and context-based actions\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/part3.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst UserDataEvaluator = {\n  validate: (context) => !context.userData.isComplete,\n  handler: (context, message) => {\n    // Extract and store user data\n    // Update context based on conversation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing, Building, and Starting Eliza\nDESCRIPTION: These commands install project dependencies, build the project, and start the application.  The clean command is provided as a means of clearing the project if issues arise.  These commands rely on pnpm being installed.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_CN.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm build\npnpm start\n\n# 该项目迭代速度很快，有时如果您回到项目，需要清理项目\npnpm clean\n```\n\n----------------------------------------\n\nTITLE: Technical Tasks Code Block in Markdown\nDESCRIPTION: A structured list of technical tasks, feature requests, and community action items derived from group discussions\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/twitter/chat_2024-10-29.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTechnical Tasks:\n - Implement a ban feature against disruptive users (mentioned by squatch)\n - Review and improve trading strategies within the community platform (implied need from squatch's comments on trading skills)\n\nDocumentation Needs:\n - No specific documentation needs were mentioned.\n\nFeature Requests:\n - Join TG feature to enhance community engagement (mentioned by squatch)\n - Normie onboarding process for new users (suggested by Dutch)\n\nCommunity Tasks:\n - Promote and share the AI16Z Community Telegram group link (led by squatch)\n```\n\n----------------------------------------\n\nTITLE: Cloning Eliza Repository (Manual Startup)\nDESCRIPTION: This snippet clones the Eliza repository. It is part of the manual startup instructions and intended for advanced users who prefer to set up the project from scratch.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Κλωνοποίηση του αποθετηρίου\ngit clone https://github.com/elizaos/eliza.git\n```\n\n----------------------------------------\n\nTITLE: Creating Main Plugin Entry Point\nDESCRIPTION: TypeScript implementation of the main plugin entry point that defines the plugin's name, description, and registers available actions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/tutorials/nader_tutorial_35min.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Plugin } from \"@elizaos/core\";\nimport { getMarsRoverPhoto } from './actions/getMarsRoverPhoto';\nimport { getApod } from './actions/getApod';\n\nexport const nasaPlugin: Plugin = {\n    name: \"nasa-plugin\",\n    description: \"NASA API integration for space photos\",\n    actions: [getMarsRoverPhoto, getApod]\n};\n```\n\n----------------------------------------\n\nTITLE: Crypto Trading Quantum Probability Model\nDESCRIPTION: A speculative implementation simulating cryptocurrency market behavior using quantum superposition principles, representing multiple potential trading outcomes simultaneously\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/the-arena/chat_2024-11-26.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction cryptoQuantumTrading(marketConditions) {\n    const possibleOutcomes = [\n        calculateBullishScenario(),\n        calculateBearishScenario(),\n        calculateNeutralScenario()\n    ];\n    return resolveMarketUncertainty(possibleOutcomes);\n```\n\n----------------------------------------\n\nTITLE: Knowledge Management Tools Usage in Bash\nDESCRIPTION: Command-line examples showing how to use provided tools for converting documents into knowledge for character files. These tools help with processing various content sources to create well-informed character files.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/guides/characters.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx folder2knowledge <path/to/folder>\nnpx knowledge2character <character-file> <knowledge-file>\n```\n\n----------------------------------------\n\nTITLE: Copying .env.example to .env\nDESCRIPTION: Copies the `.env.example` file to `.env` allowing users to configure environment variables. This allows users to configure API keys, database connections, and other settings required by the application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Copying .env Example File\nDESCRIPTION: This command copies the `.env.example` file to `.env`.  This allows the user to configure environment variables. The `.env` file is used to store sensitive information or configuration settings required to run the application.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_PL.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Setting up tokenomics for DAO funding in Vvaifun (Conceptual)\nDESCRIPTION: This snippet outlines the conceptual steps needed to set up tokenomics within the Vvaifun platform to automatically donate a portion of tokens purchased to a DAO like vitaDAO. It involves creating smart contracts or mechanisms within Vvaifun to facilitate such transactions.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/ideas-feedback-rants/chat_2024-11-20.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTo achieve this, you would need to set up tokenomics that allow for a portion of the tokens purchased by users to automatically go towards funding the DAO. This could involve creating specific smart contracts or mechanisms within Vvaifun's platform to facilitate such transactions.\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Character in Eliza\nDESCRIPTION: Command line options to load custom character files when starting Eliza. Multiple character files can be loaded at the same time.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/i18n/readme/README_GR.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --characters=\"path/to/your/character.json\"\n```\n\n----------------------------------------\n\nTITLE: Setting Twitter Target Users in Environment Variables\nDESCRIPTION: Environment variable configuration to specify which Twitter users the agent should respond to, providing more targeted interaction.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/docs/faq.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTWITTER_TARGET_USERS=\"user1,user2,user3\"\n```\n\n----------------------------------------\n\nTITLE: Pump.fun URL Reference Snippet\nDESCRIPTION: URL reference for a specific cryptocurrency coin on pump.fun platform, potentially used for investment tracking or research\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/price-talk-trenches/chat_2024-12-08.md#2025-04-16_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://pump.fun/coin/52eniz3JfrejHL9CCyu9cPKUvbYkEWkc85VcEZS7\n```\n\n----------------------------------------\n\nTITLE: Defining ISpeechService Interface Properties in TypeScript\nDESCRIPTION: Defines the serviceType getter that returns the ServiceType enumeration value. This is inherited from the base Service class.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/api/interfaces/ISpeechService.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget serviceType(): ServiceType\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm Globally\nDESCRIPTION: Global installation of pnpm package manager to enable project dependency management and testing\nSOURCE: https://github.com/elizaOS/eliza/blob/main/packages/core/README-TESTS.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Direct Network Topology Analysis for Quantum API Arbitrage\nDESCRIPTION: This task involves implementing a direct network topology analysis to optimize arbitrage opportunities for the recruiting agent project, integrating quantum APIs into financial strategies.\nSOURCE: https://github.com/elizaOS/eliza/blob/main/docs/community/Discord/the_arena/the-arena/chat_2024-12-04.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nImplement direct network topology analysis for quantum api arbitrage in the recruiting agent project.\n```"
  }
]