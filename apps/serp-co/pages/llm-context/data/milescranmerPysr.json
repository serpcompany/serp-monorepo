[
  {
    "owner": "milescranmer",
    "repo": "pysr",
    "content": "TITLE: Configuring a Basic PySR Symbolic Regression Model\nDESCRIPTION: Sets up a PySRRegressor with basic configuration including custom operators and a custom loss function. The model is configured to use addition and multiplication operators, along with trigonometric and other functions.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pysr import PySRRegressor\n\nmodel = PySRRegressor(\n    maxsize=20,\n    niterations=40,  # < Increase me for better results\n    binary_operators=[\"+\", \"*\"],\n    unary_operators=[\n        \"cos\",\n        \"exp\",\n        \"sin\",\n        \"inv(x) = 1/x\",\n        # ^ Custom operator (julia syntax)\n    ],\n    extra_sympy_mappings={\"inv\": lambda x: 1 / x},\n    # ^ Define operator for SymPy as well\n    elementwise_loss=\"loss(prediction, target) = (prediction - target)^2\",\n    # ^ Custom loss function (julia syntax)\n)\n```\n\n----------------------------------------\n\nTITLE: Fitting PySRRegressor Model in Python\nDESCRIPTION: Initializes and fits a PySRRegressor model with specified operators and iterations. This demonstrates the core functionality of symbolic regression.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Learn equations\nmodel = PySRRegressor(\n    niterations=30,\n    binary_operators=[\"+\", \"*\"],\n    unary_operators=[\"cos\", \"exp\", \"sin\"],\n    **default_pysr_params,\n)\n\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Operators in PySR\nDESCRIPTION: Example of configuring PySR with custom binary and unary operators, including a special function that squares its left argument and adds it to its right. Includes SymPy mapping for function interpretation.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPySRRegressor(niterations=100,\n    binary_operators=[\"mult\", \"plus\", \"special(x, y) = x^2 + y\"],\n    extra_sympy_mappings={'special': lambda x, y: x**2 + y},\n    unary_operators=[\"cos\"])\n```\n\n----------------------------------------\n\nTITLE: Simple Expression Search with PySR\nDESCRIPTION: Demonstrates how to find a simple mathematical expression (2 cos(x3) + x0^2 - 2) using PySR. The example generates random data, defines the target function, creates a PySRRegressor with basic operators, and fits the model.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nX = 2 * np.random.randn(100, 5)\ny = 2 * np.cos(X[:, 3]) + X[:, 0] ** 2 - 2\nmodel = PySRRegressor(binary_operators=[\"+\", \"-\", \"*\", \"/\"])\nmodel.fit(X, y)\nprint(model)\n```\n\n----------------------------------------\n\nTITLE: Configuring an Advanced PySR Model with Extensive Options\nDESCRIPTION: Creates a PySR model with advanced configuration options including population settings, constraints, custom operators, feature selection, and early stopping conditions. This example demonstrates many available features of PySR.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor(\n    populations=8,\n    # ^ Assuming we have 4 cores, this means 2 populations per core, so one is always running.\n    population_size=50,\n    # ^ Slightly larger populations, for greater diversity.\n    ncycles_per_iteration=500,\n    # ^ Generations between migrations.\n    niterations=10000000,  # Run forever\n    early_stop_condition=(\n        \"stop_if(loss, complexity) = loss < 1e-6 && complexity < 10\"\n        # Stop early if we find a good and simple equation\n    ),\n    timeout_in_seconds=60 * 60 * 24,\n    # ^ Alternatively, stop after 24 hours have passed.\n    maxsize=50,\n    # ^ Allow greater complexity.\n    maxdepth=10,\n    # ^ But, avoid deep nesting.\n    binary_operators=[\"*\", \"+\", \"-\", \"/\"],\n    unary_operators=[\"square\", \"cube\", \"exp\", \"cos2(x)=cos(x)^2\"],\n    constraints={\n        \"/\": (-1, 9),\n        \"square\": 9,\n        \"cube\": 9,\n        \"exp\": 9,\n    },\n    # ^ Limit the complexity within each argument.\n    # \"inv\": (-1, 9) states that the numerator has no constraint,\n    # but the denominator has a max complexity of 9.\n    # \"exp\": 9 simply states that `exp` can only have\n    # an expression of complexity 9 as input.\n    nested_constraints={\n        \"square\": {\"square\": 1, \"cube\": 1, \"exp\": 0},\n        \"cube\": {\"square\": 1, \"cube\": 1, \"exp\": 0},\n        \"exp\": {\"square\": 1, \"cube\": 1, \"exp\": 0},\n    },\n    # ^ Nesting constraints on operators. For example,\n    # \"square(exp(x))\" is not allowed, since \"square\": {\"exp\": 0}.\n    complexity_of_operators={\"/\": 2, \"exp\": 3},\n    # ^ Custom complexity of particular operators.\n    complexity_of_constants=2,\n    # ^ Punish constants more than variables\n    select_k_features=4,\n    # ^ Train on only the 4 most important features\n    progress=True,\n    # ^ Can set to false if printing to a file.\n    weight_randomize=0.1,\n    # ^ Randomize the tree much more frequently\n    cluster_manager=None,\n    # ^ Can be set to, e.g., \"slurm\", to run a slurm\n    # cluster. Just launch one script from the head node.\n    precision=64,\n    # ^ Higher precision calculations.\n    warm_start=True,\n    # ^ Start from where left off.\n    turbo=True,\n    # ^ Faster evaluation (experimental)\n    extra_sympy_mappings={\"cos2\": lambda x: sympy.cos(x)**2},\n    # extra_torch_mappings={sympy.cos: torch.cos},\n    # ^ Not needed as cos already defined, but this\n    # is how you define custom torch operators.\n    # extra_jax_mappings={sympy.cos: \"jnp.cos\"},\n    # ^ For JAX, one passes a string.\n)\n```\n\n----------------------------------------\n\nTITLE: Feature Selection with PySR for High-Dimensional Data\nDESCRIPTION: Illustrates PySR's feature selection capability for handling high-dimensional data. The example creates synthetic data with 30 features where only 2 are relevant, then configures PySR to select the 5 most important features before searching for expressions.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nX = np.random.randn(300, 30)\ny = X[:, 3]**2 - X[:, 19]**2 + 1.5\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data for Symbolic Regression with NumPy\nDESCRIPTION: Creates a synthetic dataset with 100 datapoints and 5 features, where the target variable follows the relation 2.5382*cos(x₃) + x₀² - 0.5.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nX = 2 * np.random.randn(100, 5)\ny = 2.5382 * np.cos(X[:, 3]) + X[:, 0] ** 2 - 0.5\n```\n\n----------------------------------------\n\nTITLE: Fitting PySRRegressor with Custom Operator in Python\nDESCRIPTION: Demonstrates how to use a custom operator ('quart') in PySRRegressor, including defining it in Julia syntax and mapping it to SymPy for export functions.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor(\n    niterations=5,\n    populations=40,\n    binary_operators=[\"+\", \"*\"],\n    unary_operators=[\"cos\", \"exp\", \"sin\", \"quart(x) = x^4\"],\n    extra_sympy_mappings={\"quart\": lambda x: x**4},\n)\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: Using Differential Operators in PySR for Integration in Python\nDESCRIPTION: This example demonstrates how to use differential operators in PySR to find the integral of a complex function. It sets up a PySRRegressor with a custom TemplateExpressionSpec to compute derivatives and fit the model to data.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pysr import PySRRegressor, TemplateExpressionSpec\n\nx = np.random.uniform(1, 10, (1000,))  # Integrand sampling points\ny = 1 / (x**2 * np.sqrt(x**2 - 1))     # Evaluation of the integrand\n\nexpression_spec = TemplateExpressionSpec(\n    expressions=[\"f\"],\n    variable_names=[\"x\"],\n    combine=\"df = D(f, 1); df(x)\",\n)\n\nmodel = PySRRegressor(\n    binary_operators=[\"+\", \"-\", \"*\", \"/\"],\n    unary_operators=[\"sqrt\"],\n    expression_spec=expression_spec,\n    maxsize=20,\n)\nmodel.fit(x[:, np.newaxis], y)\n```\n\n----------------------------------------\n\nTITLE: Importing PySR and Dependencies in Python\nDESCRIPTION: Imports PySR and other necessary libraries for symbolic regression, including NumPy for numerical operations, Matplotlib for plotting, and scikit-learn for data splitting.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pysr\nimport sympy\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom pysr import PySRRegressor\nfrom sklearn.model_selection import train_test_split\n```\n\n----------------------------------------\n\nTITLE: Multiple Output Expression Learning with PySR\nDESCRIPTION: Demonstrates how to search for multiple expressions simultaneously, each requiring a different feature. This example uses the same custom inverse operator but applies it to multiple columns of the input data.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nX = 2 * np.random.randn(100, 5)\ny = 1 / X[:, [0, 1, 2]]\nmodel = PySRRegressor(\n    binary_operators=[\"+\", \"*\"],\n    unary_operators=[\"inv(x) = 1/x\"],\n    extra_sympy_mappings={\"inv\": lambda x: 1/x},\n)\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: Weighted Custom Loss Function in PySR (Python)\nDESCRIPTION: This snippet demonstrates how to use weights in a custom loss function. It multiplies the absolute difference between x and y by a weight w.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor(..., elementwise_loss=\"myloss(x, y, w) = w * abs(x - y)\")\nmodel.fit(..., weights=weights)\n```\n\n----------------------------------------\n\nTITLE: Accessing PySRRegressor Results in Python\nDESCRIPTION: Demonstrates various ways to access and display the results of the symbolic regression, including printing the model and accessing SymPy representations.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmodel\n```\n\nLANGUAGE: python\nCODE:\n```\nmodel.sympy()\n```\n\nLANGUAGE: python\nCODE:\n```\nmodel.sympy(2)\n```\n\n----------------------------------------\n\nTITLE: Training a PySR Model on Data\nDESCRIPTION: Fits the PySR model to the previously created dataset. This launches a Julia process that performs a multithreaded search for equations to fit the data.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: Weighted Built-in Loss Function in PySR (Python)\nDESCRIPTION: This example demonstrates how to use weights with a built-in loss function (L3 norm) for weighted average calculations.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor(..., weights=weights, elementwise_loss=\"LPDistLoss{3}()\")\nmodel.fit(..., weights=weights)\n```\n\n----------------------------------------\n\nTITLE: Importing PySR and NumPy Libraries in Python\nDESCRIPTION: Sets up the initial environment by importing the NumPy library for numerical operations and the PySR library for symbolic regression tasks.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pysr import *\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Loss Function for Dimensional Constraints\nDESCRIPTION: This snippet defines a custom loss function in Julia for use with dimensional constraints in PySR. It calculates the error in log-space due to the large dynamic range of the data.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nelementwise_loss = \"\"\"function loss_fnc(prediction, target)\n    scatter_loss = abs(log((abs(prediction)+1e-20) / (abs(target)+1e-20)))\n    sign_loss = 10 * (sign(prediction) - sign(target))^2\n    return scatter_loss + sign_loss\nend\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using JAX Export in PySR\nDESCRIPTION: Demonstrates how to export and use PySR models as JAX functions with separate parameters for differentiable computation.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\njax_model = model.jax()\njax_model['callable'](X, jax_model['parameters'])\n```\n\n----------------------------------------\n\nTITLE: Displaying Learned Equations from PySR Model\nDESCRIPTION: Prints the learned equations from the trained PySR model, showing score, equation, loss, and complexity for each discovered expression.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprint(model)\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Loss Function in PySR (Python)\nDESCRIPTION: This snippet shows how to use a built-in loss function, specifically the L3 norm, which is faster than custom implementations.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nPySRRegressor(..., elementwise_loss=\"LPDistLoss{3}()\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Square Root Operator in Julia\nDESCRIPTION: This snippet shows how to create a custom square root operator in Julia that handles negative inputs by returning NaN. It ensures the operator works with Float32 or Float64 datatypes and avoids errors for invalid inputs.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/operators.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nmy_sqrt(x) = x >= 0 ? sqrt(x) : convert(typeof(x), NaN)\n```\n\n----------------------------------------\n\nTITLE: Custom Operator Definition in PySR\nDESCRIPTION: Shows how to define and use a custom operator (inverse function) in PySR. The example creates a PySRRegressor with the custom inverse operator and corresponding SymPy mapping, then fits it to data representing 1/x.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nX = 2 * np.random.randn(100, 5)\ny = 1 / X[:, 0]\nmodel = PySRRegressor(\n    binary_operators=[\"+\", \"*\"],\n    unary_operators=[\"inv(x) = 1/x\"],\n    extra_sympy_mappings={\"inv\": lambda x: 1/x},\n)\nmodel.fit(X, y)\nprint(model)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Objective Function in Julia for PySR\nDESCRIPTION: This snippet demonstrates how to create a custom objective function in Julia for use with PySR. It defines a function that evaluates a rational expression P(X)/Q(X) and calculates the mean squared error.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_23\n\nLANGUAGE: julia\nCODE:\n```\nfunction default_objective(tree, dataset::Dataset{T,L}, options)::L where {T,L}\n    (prediction, completion) = eval_tree_array(tree, dataset.X, options)\n    if !completion\n        return L(Inf)\n    end\n\n    diffs = prediction .- dataset.y\n\n    return sum(diffs .^ 2) / length(diffs)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Objective in Python for PySR\nDESCRIPTION: This Python snippet shows how to define a custom objective function as a string of Julia code. It creates a rational function objective and sets up a PySRRegressor with this custom objective.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nobjective = \"\"\"\nfunction my_custom_objective(tree, dataset::Dataset{T,L}, options) where {T,L}\n    # Require root node to be binary, so we can split it,\n    # otherwise return a large loss:\n    tree.degree != 2 && return L(Inf)\n\n    P = tree.l\n    Q = tree.r\n\n    # Evaluate numerator:\n    P_prediction, flag = eval_tree_array(P, dataset.X, options)\n    !flag && return L(Inf)\n\n    # Evaluate denominator:\n    Q_prediction, flag = eval_tree_array(Q, dataset.X, options)\n    !flag && return L(Inf)\n\n    # Impose functional form:\n    prediction = P_prediction ./ Q_prediction\n\n    diffs = prediction .- dataset.y\n\n    return sum(diffs .^ 2) / length(diffs)\nend\n\"\"\"\n\nmodel = PySRRegressor(\n    niterations=100,\n    binary_operators=[\"*\", \"+\", \"-\"],\n    loss_function=objective,\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting PySRRegressor Results in Python\nDESCRIPTION: Shows how to export the symbolic regression results in various formats, including LaTeX, and how to use the model for predictions.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmodel.latex()\n```\n\nLANGUAGE: python\nCODE:\n```\nypredict = model.predict(X)\nypredict_simpler = model.predict(X, 2)\n\nprint(\"Default selection MSE:\", np.power(ypredict - y, 2).mean())\nprint(\"Manual selection MSE for index 2:\", np.power(ypredict_simpler - y, 2).mean())\n```\n\n----------------------------------------\n\nTITLE: Alternative Custom Loss Function in PySR (Python)\nDESCRIPTION: This example shows that the function name in the custom loss doesn't matter. It uses the absolute value of the product of x and y as the loss function.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPySRRegressor(..., elementwise_loss=\"loss(x, y) = abs(x * y)\")\n```\n\n----------------------------------------\n\nTITLE: Data Extraction for Symbolic Regression\nDESCRIPTION: Extracts latent vectors from the trained network for PySR analysis\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nnp.random.seed(0)\nidx = np.random.randint(0, 10000, size=1000)\n\nX_for_pysr = Xt[idx]\ny_i_for_pysr = model.g(X_for_pysr)[:, :, 0]\ny_for_pysr = torch.sum(y_i_for_pysr, dim=1) / y_i_for_pysr.shape[1]\nz_for_pysr = zt[idx]  # Use true values.\n\nX_for_pysr.shape, y_i_for_pysr.shape\n```\n\n----------------------------------------\n\nTITLE: Accessing the SymPy Representation of PySR Model\nDESCRIPTION: Shows how to get the SymPy representation of the best equation found by PySR. This is useful for further symbolic manipulation or integration with other Python libraries.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmodel.sympy()\n```\n\n----------------------------------------\n\nTITLE: Complex Number Support in PySR\nDESCRIPTION: Demonstrates PySR's ability to work with complex-valued data and expressions. The example generates complex-valued inputs and targets, then configures PySR to search for complex-valued expressions.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nX = np.random.randn(100, 1) + 1j * np.random.randn(100, 1)\ny = (1 + 2j) * np.cos(X[:, 0] * (0.5 - 0.2j))\n\nmodel = PySRRegressor(\n    binary_operators=[\"+\", \"-\", \"*\"], unary_operators=[\"cos\"], niterations=100,\n)\n\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: Installing PySR with pip\nDESCRIPTION: Command to install PySR using pip package manager. Julia dependencies will be automatically installed at first import.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pysr\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Loss Function in PySR (Python)\nDESCRIPTION: This snippet demonstrates how to set a custom loss function using the 'elementwise_loss' parameter in PySRRegressor. It uses an absolute difference raised to the power of 1.5 as the loss function.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPySRRegressor(..., elementwise_loss=\"f(x, y) = abs(x - y)^1.5\")\n```\n\n----------------------------------------\n\nTITLE: Fitting PySR Model with Dimensional Constraints\nDESCRIPTION: This snippet demonstrates how to fit the PySR model with dimensional constraints, specifying the units for input features and the target variable.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# Get numerical arrays to fit:\nX = pd.DataFrame(dict(\n    M=M.to(\"M_sun\").value,\n    m=m.to(\"kg\").value,\n    r=r.to(\"R_earth\").value,\n))\ny = F.value\n\nmodel.fit(\n    X,\n    y,\n    X_units=[\"Constants.M_sun\", \"kg\", \"Constants.R_earth\"],\n    y_units=\"kg * m / s^2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PySR in Python\nDESCRIPTION: Installs the latest version of PySR using pip. This is the first step in setting up the environment for symbolic regression.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -U pysr\n```\n\n----------------------------------------\n\nTITLE: Using PyTorch Export in PySR\nDESCRIPTION: Shows how to export and use PySR models as PyTorch modules for differentiable computation with trainable parameters.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntorch_model = model.pytorch()\ntorch_model(X)\n```\n\n----------------------------------------\n\nTITLE: Defining Template Expression Specification in PySR\nDESCRIPTION: This code demonstrates how to use TemplateExpressionSpec in PySR to define a specific structure for the equation, in this case y = sin(f(x1, x2)) + g(x3).\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pysr import PySRRegressor, TemplateExpressionSpec\n\n# Create data\nX = np.random.randn(1000, 3)\ny = np.sin(X[:, 0] + X[:, 1]) + X[:, 2]**2\n\n# Define template: we want sin(f(x1, x2)) + g(x3)\ntemplate = TemplateExpressionSpec(\n    expressions=[\"f\", \"g\"],\n    variable_names=[\"x1\", \"x2\", \"x3\"],\n    combine=\"sin(f(x1, x2)) + g(x3)\",\n)\n\nmodel = PySRRegressor(\n    expression_spec=template,\n    binary_operators=[\"+\", \"*\", \"-\", \"/\"],\n    unary_operators=[\"sin\"],\n    maxsize=10,\n)\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: PySR API Call for Symbolic Regression Benchmark\nDESCRIPTION: Python code that creates a symbolic regression model using PySR with specific operators, iterations, and parameters for benchmarking purposes.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/benchmarks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\neq = pysr(X, y, binary_operators=[\"plus\", \"mult\", \"div\", \"pow\"], unary_operators=[\"sin\"], niterations=20, procs=4, parsimony=1e-10, population_size=1000, ncyclesperiteration=1000)\n```\n\n----------------------------------------\n\nTITLE: Setting Up PySR with Denoising Capability\nDESCRIPTION: Configures a PySRRegressor with denoising enabled. The denoising process fits a Gaussian process to the input data to predict denoised targets before performing symbolic regression.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor(\n    binary_operators=[\"+\", \"-\", \"*\", \"/\"],\n    unary_operators=[\"exp\"],\n    denoise=True,\n)\nmodel.fit(X, y)\nprint(model)\n```\n\n----------------------------------------\n\nTITLE: Fitting PySR Model with Custom Julia Operator\nDESCRIPTION: Fits a PySR model using a custom Julia operator for prime numbers. The model searches for an expression involving the prime number function to match the pattern in the data.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: Defining Prime Number Function in Julia\nDESCRIPTION: Creates a custom Julia function that returns the nth prime number for a given input n, with type checking and bounds validation.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: julia\nCODE:\n```\nfunction p(i::T) where T\n    if 0.5 < i < 1000\n        return T(prime(round(Int, i)))\n    else\n        return T(NaN)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Parametric Expression Specification in PySR\nDESCRIPTION: This snippet shows how to use ParametricExpressionSpec in PySR for learning expressions with shared structure but different parameters across categories.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pysr import PySRRegressor, ParametricExpressionSpec\n\n# Create data with 3 categories\nX = np.random.uniform(-3, 3, (1000, 2))\ncategory = np.random.randint(0, 3, 1000)\n\n# Parameters for each category\noffsets = [0.1, 1.5, -0.5]\nscales = [1.0, 2.0, 0.5]\n\n# y = scale[category] * sin(x1) + offset[category]\ny = np.array([\n    scales[c] * np.sin(x1) + offsets[c]\n    for x1, c in zip(X[:, 0], category)\n])\n\nmodel = PySRRegressor(\n    expression_spec=ParametricExpressionSpec(max_parameters=2),\n    binary_operators=[\"+\", \"*\", \"-\", \"/\"],\n    unary_operators=[\"sin\"],\n    maxsize=10,\n)\nmodel.fit(X, y, category=category)\n\n# Predicting on new data:\n# model.predict(X_test, category=category_test)\n```\n\n----------------------------------------\n\nTITLE: PyTorch Export Functions\nDESCRIPTION: Functions for converting PySR models to PyTorch format. Includes sympy2torch for converting symbolic expressions to PyTorch operations.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/api-advanced.md#2025-04-22_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Generating Prime Numbers with Julia in Python\nDESCRIPTION: Uses the custom Julia function to generate a dictionary of prime numbers in Python. The example calls the Julia function 'p' directly from Python using the Julia runtime bridge.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nprimes = {i: jl.p(i*1.0) for i in range(1, 999)}\n```\n\n----------------------------------------\n\nTITLE: Fitting PySR Model with Feature Selection\nDESCRIPTION: Demonstrates the fitting process for a PySR model with feature selection. When the model is fitted, the feature selection algorithm identifies the most relevant features before starting the symbolic regression process.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: JAX Export Functions\nDESCRIPTION: Utilities for converting PySR models to JAX format. Provides sympy2jax for direct conversion and sympy2jaxtext for generating text representation of JAX code.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/api-advanced.md#2025-04-22_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Installing Julia Packages for PySR\nDESCRIPTION: Demonstrates how to install a Julia package (Primes.jl) for use with PySR. The code uses the Julia package manager to add the package to the PySR environment.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\njl.seval(\"\"\"\nimport Pkg\nPkg.add(\\\"Primes\\\")\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: PySR Model Configuration for Weighted Regression\nDESCRIPTION: Configures PySR regressor with custom loss function using weights and specific operators for symbolic regression.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor(\n    elementwise_loss=\"myloss(x, y, w) = w * abs(x - y)\",  # Custom loss function with weights.\n    niterations=20,\n    populations=20,  # Use more populations\n    binary_operators=[\"+\", \"*\"],\n    unary_operators=[\"cos\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PySRRegressor Parameters in Python\nDESCRIPTION: Sets up default parameters for PySRRegressor, including the number of populations and model selection strategy.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndefault_pysr_params = dict(\n    populations=30,\n    model_selection=\"best\",\n)\n```\n\n----------------------------------------\n\nTITLE: LaTeX Export Functions\nDESCRIPTION: Functions for exporting PySR models to LaTeX format. Includes methods for generating single tables, multiple tables, and full table environments with proper LaTeX formatting.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/api-advanced.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Complex Weighted Custom Loss Function in PySR (Python)\nDESCRIPTION: This example shows a more complex use of weights in a custom loss function, where the weight is used in the denominator of the loss calculation.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor(..., weights=weights, elementwise_loss=\"myloss(x, y, w) = abs(x - y)^2/w^2\")\nmodel.fit(..., weights=weights)\n```\n\n----------------------------------------\n\nTITLE: Implementing Weighted Data in PySR\nDESCRIPTION: Demonstrates how to assign weights to data rows using inverse uncertainty squared and configure multiple processing cores.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsigma = ...\nweights = 1/sigma**2\n\nmodel = PySRRegressor(procs=10)\nmodel.fit(X, y, weights=weights)\n```\n\n----------------------------------------\n\nTITLE: Model Initialization\nDESCRIPTION: Initializes the SumNet model with specific parameters and random seed\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\npl.seed_everything(0)\nmodel = SumNet()\nmodel.total_steps = total_steps\nmodel.max_lr = 1e-2\n```\n\n----------------------------------------\n\nTITLE: Accessing LaTeX Representation of PySR Model\nDESCRIPTION: Shows how to access the LaTeX representation of a discovered expression for a specific output. This snippet retrieves the LaTeX for the first output expression.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodel.latex()[0]\n```\n\n----------------------------------------\n\nTITLE: Setting Up PySR with Feature Selection\nDESCRIPTION: Configures a PySRRegressor with feature selection parameter to handle high-dimensional data. The model is set to automatically select the 5 most important features from the input data using a gradient-boosting tree approach.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor(\n    binary_operators=[\"+\", \"-\", \"*\", \"/\"],\n    unary_operators=[\"exp\"],\n    select_k_features=5,\n)\n```\n\n----------------------------------------\n\nTITLE: Building PySR Apptainer container\nDESCRIPTION: Command to build an Apptainer (formerly Singularity) container for PySR on systems without root access, such as HPC clusters.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\napptainer build --notest pysr.sif Apptainer.def\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Operators in PySR (Python)\nDESCRIPTION: This snippet demonstrates how to define custom unary and binary operators in PySR using Python. It shows the creation of custom functions and their corresponding SymPy mappings.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/operators.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPySRRegressor(\n    ...,\n    unary_operators=[\"myfunction(x) = x^2\"],\n    binary_operators=[\"myotherfunction(x, y) = x^2*y\"],\n    extra_sympy_mappings={\n        \"myfunction\": lambda x: x**2,\n        \"myotherfunction\": lambda x, y: x**2 * y,\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Equation Evaluation\nDESCRIPTION: Displays the complexity, loss, and equations found by PySR\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nmodel.equations_[[\"complexity\", \"loss\", \"equation\"]]\n```\n\n----------------------------------------\n\nTITLE: Building PySR Docker Image\nDESCRIPTION: Command to build a Docker image for PySR that allows testing without local installation. Creates an image tagged as 'pysr'.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t pysr .\n```\n\n----------------------------------------\n\nTITLE: Configuring Operator Constraints in PySR\nDESCRIPTION: Example showing how to limit the complexity of specific operators using the constraints parameter, controlling expression complexity for power laws, multiplication, and trigonometric functions.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconstraints={'pow': (-1, 1), 'mult': (3, 3), 'cos': 5}\n```\n\n----------------------------------------\n\nTITLE: Accessing Results with Custom Operator in Python\nDESCRIPTION: Shows how to access the SymPy representation of the best equation found using the custom 'quart' operator.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmodel.sympy()\n```\n\n----------------------------------------\n\nTITLE: Serving PySR Documentation with mkdocs\nDESCRIPTION: Uses mkdocs to build and serve the documentation locally with automatic updates when the pysr directory changes.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve -w pysr\n```\n\n----------------------------------------\n\nTITLE: Setting Up PySRRegressor with Dimensional Constraints\nDESCRIPTION: This code sets up a PySRRegressor model with dimensional constraints, using the custom loss function and specifying various parameters including the dimensional constraint penalty.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor(\n    binary_operators=[\"+\", \"-\", \"*\", \"/\"],\n    unary_operators=[\"square\"],\n    elementwise_loss=elementwise_loss,\n    complexity_of_constants=2,\n    maxsize=25,\n    niterations=100,\n    populations=50,\n    # Amount to penalize dimensional violations:\n    dimensional_constraint_penalty=10**5,\n)\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with Complex-Valued PySR Model\nDESCRIPTION: Shows how to make predictions using a PySR model trained on complex-valued data. The example uses the most accurate expression found by passing -1 as the index to the predict method.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nmodel.predict(X, -1)\n```\n\n----------------------------------------\n\nTITLE: Installing PySR in Editable Mode\nDESCRIPTION: Installs PySR package in development mode, allowing changes to be immediately reflected without reinstallation.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Accessing the Julia Backend in PySR\nDESCRIPTION: Shows how to access the Julia runtime used by PySR. This allows for direct execution of Julia code and integration with Julia packages from within Python.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pysr import jl\n```\n\n----------------------------------------\n\nTITLE: Loading Saved PySR Model\nDESCRIPTION: Example of loading a previously saved PySR model from file to explore equations and generate visualizations.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/tuning.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPySRRegressor.from_file\n```\n\n----------------------------------------\n\nTITLE: Using %julia Line Magic for Expression Evaluation\nDESCRIPTION: Shows how to use Jupyter's %julia line magic to execute a single line of Julia code that references a previously defined variable.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/pysr/test/test_nb.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%julia println(x + 3)\n```\n\n----------------------------------------\n\nTITLE: Setting Up PySR with Custom Julia Operator\nDESCRIPTION: Configures a PySRRegressor with a custom Julia operator for prime numbers. The example defines a SymPy placeholder for the custom function and sets up the model with the appropriate operators and mappings.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom pysr import PySRRegressor\nimport sympy\n\nclass sympy_p(sympy.Function):\n    pass\n\nmodel = PySRRegressor(\n    binary_operators=[\"+\", \"-\", \"*\", \"/\"],\n    unary_operators=[\"p\"],\n    niterations=100,\n    extra_sympy_mappings={\"p\": sympy_p}\n)\n```\n\n----------------------------------------\n\nTITLE: Loading a Saved PySR Model from File\nDESCRIPTION: Demonstrates how to load a previously saved PySR model from a pickle file. PySR automatically saves models during training in both CSV and pickle formats.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor.from_file(\"hall_of_fame.2022-08-10_100832.281.pkl\")\n```\n\n----------------------------------------\n\nTITLE: Importing PySR and NumPy in Python\nDESCRIPTION: Imports the necessary libraries: NumPy for numerical operations and PySR for symbolic regression functionality.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/pysr/test/test_nb.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# NBVAL_IGNORE_OUTPUT\nimport numpy as np\nfrom pysr import PySRRegressor, jl\n```\n\n----------------------------------------\n\nTITLE: Configuring TensorBoard Logger for PySR in Python\nDESCRIPTION: This snippet demonstrates how to create a TensorBoard logger for PySR and set up a PySRRegressor model with custom operators. It also shows how to fit the model to data.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# Create a logger that writes to \"logs/run*\":\nlogger_spec = TensorBoardLoggerSpec(\n    log_dir=\"logs/run\",\n    log_interval=10,  # Log every 10 iterations\n)\n\nmodel = PySRRegressor(\n    binary_operators=[\"+\", \"*\", \"-\", \"/\"],\n    logger_spec=logger_spec,\n)\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: Loading Saved PySR Model from File (Python)\nDESCRIPTION: This snippet shows how to load a previously saved PySR model state from a pickle file. This can be used to resume work with a model after interruption or to use a trained model for predictions.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/options.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmodel = PySRRegressor.from_file(pickle_filename)\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Lightning\nDESCRIPTION: Simple pip install command for pytorch_lightning package\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n!pip install pytorch_lightning\n```\n\n----------------------------------------\n\nTITLE: Using TensorBoard for Logging in PySR\nDESCRIPTION: This code demonstrates how to use TensorBoard for visualizing search progress and recording hyperparameters and metrics in PySR.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pysr import PySRRegressor, TensorBoardLoggerSpec\n\nrstate = np.random.RandomState(42)\n\n# Uniform dist between -3 and 3:\nX = rstate.uniform(-3, 3, (1000, 2))\ny = np.exp(X[:, 0]) + X[:, 1]\n```\n\n----------------------------------------\n\nTITLE: PySR Model Training\nDESCRIPTION: Configures and trains PySR model on subsampled data for symbolic regression\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nrstate = np.random.RandomState(0)\nf_sample_idx = rstate.choice(f_input.shape[0], size=500, replace=False)\n\nmodel = PySRRegressor(\n    niterations=50,\n    binary_operators=[\"+\", \"-\", \"*\"],\n    unary_operators=[\"cos\", \"square\"],\n)\nmodel.fit(g_input[f_sample_idx], g_output[f_sample_idx])\n```\n\n----------------------------------------\n\nTITLE: Configuring PySR Constraints Example\nDESCRIPTION: Example of setting constraints for power laws and trigonometric functions in PySR to control equation complexity and prevent unnecessary nesting.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/tuning.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconstraints={\"pow\": (9, 1)}\nnested_constraints={\"sin\": {\"sin\": 0, \"cos\": 0}, \"cos\": {\"sin\": 0, \"cos\": 0}}\n```\n\n----------------------------------------\n\nTITLE: Initializing PySRRegressor with Random Data\nDESCRIPTION: Creates random input and output data, then initializes a PySR model with specific parameters for deterministic behavior and limited iterations.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/pysr/test/test_nb.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrstate = np.random.RandomState(0)\nX = np.random.randn(10, 2)\ny = np.random.randn(10)\n\nmodel = PySRRegressor(deterministic=True, parallelism=\"serial\", random_state=0, verbosity=0, progress=False, niterations=1, ncycles_per_iteration=1)\nstr(model)\n```\n\n----------------------------------------\n\nTITLE: Julia Interface Functions\nDESCRIPTION: Core functions for initializing and installing Julia interface components. Includes init_julia for runtime initialization and install for setting up required dependencies.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/api-advanced.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Fitting PySR Model and Checking Output Type\nDESCRIPTION: Fits the PySR regression model to the random data and checks the type of the resulting equations object, demonstrating basic model usage.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/pysr/test/test_nb.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmodel.fit(X, y)\ntype(model.equations_)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Best Equation from PySR Model\nDESCRIPTION: This snippet shows how to retrieve the best equation found by the PySR model after fitting.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nmodel.get_best().equation\n```\n\n----------------------------------------\n\nTITLE: Creating Dataset for Symbolic Regression in Python\nDESCRIPTION: Generates a synthetic dataset for demonstrating symbolic regression. The target function is 2.5382 * cos(x3) + x0^2 - 2.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Dataset\nnp.random.seed(0)\nX = 2 * np.random.randn(100, 5)\ny = 2.5382 * np.cos(X[:, 3]) + X[:, 0] ** 2 - 2\n```\n\n----------------------------------------\n\nTITLE: Fitting PySR Model with Custom Objective\nDESCRIPTION: This code fits the PySR model using the previously defined custom objective function and generated test data.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nmodel.fit(X, y)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Dataset for Symbolic Regression in Python\nDESCRIPTION: Generates a new synthetic dataset with a quartic function for demonstrating custom operators in symbolic regression.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ny = X[:, 0] ** 4 - 2\n```\n\n----------------------------------------\n\nTITLE: Importing Julia Packages in PySR\nDESCRIPTION: Shows how to import a Julia package that has been installed into the PySR environment. This example imports the Primes.jl package for use in custom operators.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\njl.seval(\"import Primes\")\n```\n\n----------------------------------------\n\nTITLE: Generating Noisy Dataset in Python\nDESCRIPTION: Creates a synthetic dataset with Gaussian noise where sigma varies uniformly between 0.1 and 5.0. Generates 3000 samples with 5 features where the true function is 5*cos(3.5*x) - 1.3.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nnp.random.seed(0)\nN = 3000\nupper_sigma = 5\nX = 2 * np.random.rand(N, 5)\nsigma = np.random.rand(N) * (5 - 0.1) + 0.1\neps = sigma * np.random.randn(N)\ny = 5 * np.cos(3.5 * X[:, 0]) - 1.3 + eps\n```\n\n----------------------------------------\n\nTITLE: Generating Data for Dimensional Constraints Example\nDESCRIPTION: This code generates data for Newton's law of gravitation using astropy units, to be used in demonstrating dimensional constraints in PySR.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom astropy import units as u, constants as const\n\nM = (np.random.rand(100) + 0.1) * const.M_sun\nm = 100 * (np.random.rand(100) + 0.1) * u.kg\nr = (np.random.rand(100) + 0.1) * const.R_earth\nG = const.G\n\nF = G * M * m / r**2\n```\n\n----------------------------------------\n\nTITLE: Generating Noisy Data for PySR Denoising Example\nDESCRIPTION: Creates synthetic data with added noise to demonstrate PySR's denoising capabilities. The target variable is a function of the input features plus Gaussian noise with a standard deviation of 0.1.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nX = np.random.randn(100, 5)\nnoise = np.random.randn(100) * 0.1\ny = np.exp(X[:, 0]) + X[:, 1] + X[:, 2] + noise\n```\n\n----------------------------------------\n\nTITLE: Neural Network Implementation with PyTorch Lightning\nDESCRIPTION: Defines a neural network architecture with sum inductive bias using PyTorch Lightning. Implements MLP layers and custom SumNet class with training configurations.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nfrom torch import nn, optim\nfrom torch.nn import functional as F\nfrom torch.utils.data import DataLoader, TensorDataset\nimport pytorch_lightning as pl\n\nhidden = 128\ntotal_steps = 50_000\n\n\ndef mlp(size_in, size_out, act=nn.ReLU):\n    return nn.Sequential(\n        nn.Linear(size_in, hidden),\n        act(),\n        nn.Linear(hidden, hidden),\n        act(),\n        nn.Linear(hidden, hidden),\n        act(),\n        nn.Linear(hidden, size_out),\n    )\n\n\nclass SumNet(pl.LightningModule):\n    def __init__(self):\n        super().__init__()\n\n        ########################################################\n        # The same inductive bias as above!\n        self.g = mlp(5, 1)\n        self.f = mlp(1, 1)\n\n    def forward(self, x):\n        y_i = self.g(x)[:, :, 0]\n        y = torch.sum(y_i, dim=1, keepdim=True) / y_i.shape[1]\n        z = self.f(y)\n        return z[:, 0]\n\n    ########################################################\n\n    # PyTorch Lightning bookkeeping:\n    def training_step(self, batch, batch_idx):\n        x, z = batch\n        predicted_z = self(x)\n        loss = F.mse_loss(predicted_z, z)\n        return loss\n\n    def validation_step(self, batch, batch_idx):\n        return self.training_step(batch, batch_idx)\n\n    def configure_optimizers(self):\n        optimizer = torch.optim.Adam(self.parameters(), lr=self.max_lr)\n        scheduler = {\n            \"scheduler\": torch.optim.lr_scheduler.OneCycleLR(\n                optimizer,\n                max_lr=self.max_lr,\n                total_steps=self.trainer.estimated_stepping_batches,\n                final_div_factor=1e4,\n            ),\n            \"interval\": \"step\",\n        }\n        return [optimizer], [scheduler]\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data for Custom Objective in Python\nDESCRIPTION: This snippet creates test data for a rational function of the form (x_0^2 * x_1 - 2) / (x_2^2 + 1) to demonstrate the custom objective function.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nX = np.random.randn(1000, 3)\ny = (X[:, 0]**2 * X[:, 1] - 2) / (X[:, 2]**2 + 1)\n```\n\n----------------------------------------\n\nTITLE: High-Dimensional Time Series Data Generation\nDESCRIPTION: Creates a synthetic time series dataset with 100000 samples, 10 timesteps, and 5 features per timestep for demonstrating neural network integration.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nrstate = np.random.RandomState(0)\n\nN = 100000\nNt = 10\nX = 6 * rstate.rand(N, Nt, 5) - 3\ny_i = X[..., 0] ** 2 + 6 * np.cos(2 * X[..., 2])\ny = np.sum(y_i, axis=1) / y_i.shape[1]\nz = y**2\nX.shape, y.shape\n```\n\n----------------------------------------\n\nTITLE: Plotting PySR Predictions vs Ground Truth\nDESCRIPTION: Demonstrates how to visualize the model's performance by plotting predictions against the ground truth. The snippet imports matplotlib, creates a scatter plot comparing predicted values to actual values, and displays the plot.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom matplotlib import pyplot as plt\nplt.scatter(y[:, 0], model.predict(X)[:, 0])\nplt.xlabel('Truth')\nplt.ylabel('Prediction')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset with Prime Numbers\nDESCRIPTION: Generates a synthetic dataset based on a relationship involving prime numbers. The target variable is calculated as the prime number at position (3*X + 1) minus 5, with a small amount of noise added.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nX = np.random.randint(0, 100, 100)[:, None]\ny = [primes[3*X[i, 0] + 1] - 5 + np.random.randn()*0.001 for i in range(100)]\n```\n\n----------------------------------------\n\nTITLE: Data Preparation and Loading\nDESCRIPTION: Prepares data for training by converting to PyTorch tensors and creating DataLoader instances with train/test split\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import cpu_count\n\nXt = torch.tensor(X).float()\nzt = torch.tensor(z).float()\nX_train, X_test, z_train, z_test = train_test_split(Xt, zt, random_state=0)\ntrain_set = TensorDataset(X_train, z_train)\ntrain = DataLoader(\n    train_set, batch_size=128, num_workers=cpu_count(), shuffle=True, pin_memory=True\n)\ntest_set = TensorDataset(X_test, z_test)\ntest = DataLoader(test_set, batch_size=256, num_workers=cpu_count(), pin_memory=True)\n```\n\n----------------------------------------\n\nTITLE: Example Output of PySR Feature Selection\nDESCRIPTION: Shows the expected console output when PySR performs feature selection. The output indicates which features were selected by the gradient-boosting tree algorithm before the symbolic regression search begins.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nUsing features ['x3', 'x5', 'x7', 'x19', 'x21']\n```\n\n----------------------------------------\n\nTITLE: PyTorch Lightning Trainer Setup\nDESCRIPTION: Configures PyTorch Lightning trainer with GPU acceleration\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ntrainer = pl.Trainer(max_steps=total_steps, accelerator=\"gpu\", devices=1)\n```\n\n----------------------------------------\n\nTITLE: Model Training\nDESCRIPTION: Executes the model training process using PyTorch Lightning\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntrainer.fit(model, train_dataloaders=train, val_dataloaders=test)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Julia Function for PySR\nDESCRIPTION: Creates a custom Julia function for use as an operator in PySR. The function 'p' returns the prime number at a given index, with bounds checking to ensure valid inputs.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\njl.seval(\"\"\"\nfunction p(i::T) where T\n    if (0.5 < i < 1000)\n        return T(Primes.prime(round(Int, i)))\n    else\n        return T(NaN)\n    end\nend\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Building PySR Docker Image with Specific Python and Julia Versions\nDESCRIPTION: Builds a Docker image for PySR with specified versions of Python and Julia using build arguments.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t pysr --build-arg JLVERSION=1.10.0 --build-arg PYVERSION=3.11.6 .\n```\n\n----------------------------------------\n\nTITLE: Running PySR in Docker with Volume Mounting\nDESCRIPTION: Command to run the PySR Docker image with interactive IPython and mount the current directory to /data in the container.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v \"$PWD:/data\" pysr ipython\n```\n\n----------------------------------------\n\nTITLE: Running PySR in Docker container with IPython\nDESCRIPTION: Command to start the PySR Docker container with an interactive IPython session.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm pysr ipython\n```\n\n----------------------------------------\n\nTITLE: Running PySR Apptainer container\nDESCRIPTION: Command to run the PySR Apptainer container after building it.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\napptainer run pysr.sif\n```\n\n----------------------------------------\n\nTITLE: Installing PySR with conda\nDESCRIPTION: Command to install PySR from conda-forge channel using the conda package manager.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge pysr\n```\n\n----------------------------------------\n\nTITLE: Installing modified PySR package in Bash\nDESCRIPTION: Command to install the PySR package with the locally modified SymbolicRegression.jl backend. This allows using the customized backend with the Python interface.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/backend.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd PySR\npip install .\n```\n\n----------------------------------------\n\nTITLE: Modifying juliapkg.json to use local SymbolicRegression.jl\nDESCRIPTION: JSON configuration to point PySR to a local modified copy of SymbolicRegression.jl instead of using the version from the registry. This requires removing the version key and adding dev and path keys.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/backend.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    ...\n    \"packages\": {\n        \"SymbolicRegression\": {\n            \"uuid\": \"8254be44-1295-4e6a-a16d-46603ac705cb\",\n            \"dev\": true,\n            \"path\": \"/path/to/SymbolicRegression.jl\"\n        },\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Julia Function with Cell Magic\nDESCRIPTION: Creates a Julia function named 'my_loss' that calculates the square of an input value using the %%julia cell magic.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/pysr/test/test_nb.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n%%julia\nfunction my_loss(x)\n    x ^ 2\nend\n```\n\n----------------------------------------\n\nTITLE: Calling a Julia Function with Line Magic\nDESCRIPTION: Demonstrates calling the previously defined Julia function 'my_loss' with an argument of 2 using the %julia line magic.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/pysr/test/test_nb.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n%julia my_loss(2)\n```\n\n----------------------------------------\n\nTITLE: Configuring LD_LIBRARY_PATH for Julia libraries\nDESCRIPTION: Example command to add Julia libraries to LD_LIBRARY_PATH to fix GLIBCXX compatibility issues. This helps resolve hard crashes during import related to missing library versions.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport LD_LIBRARY_PATH=$HOME/.julia/juliaup/julia-1.10.0+0.x64.linux.gnu/lib/julia/:$LD_LIBRARY_PATH\n```\n\n----------------------------------------\n\nTITLE: Viewing TensorBoard Logs with Bash Command\nDESCRIPTION: This bash command shows how to view the TensorBoard logs generated by the PySR model using the TensorBoard CLI tool.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/examples.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ntensorboard --logdir logs/\n```\n\n----------------------------------------\n\nTITLE: Cloning PySR and SymbolicRegression.jl repositories in Bash\nDESCRIPTION: Commands to clone both the PySR Python package and its SymbolicRegression.jl Julia backend from GitHub. This is the first step in customizing the backend.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/backend.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MilesCranmer/SymbolicRegression.jl\ngit clone https://github.com/MilesCranmer/PySR\n```\n\n----------------------------------------\n\nTITLE: Using %%julia Cell Magic for Basic Calculation\nDESCRIPTION: Demonstrates the use of Jupyter's %%julia cell magic to execute Julia code that defines a variable and performs a simple addition.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/pysr/test/test_nb.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%%julia\n\n# Automatically activates Julia magic\n\nx = 1\nprintln(x + 2)\n```\n\n----------------------------------------\n\nTITLE: Checking out specific versions in Bash\nDESCRIPTION: Commands to check out specific versions of PySR and SymbolicRegression.jl to ensure compatibility. The backend version can be found in the pysr/juliapkg.json file.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/backend.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd PySR\ngit checkout <version>\n\n# You can see the current backend version in `pysr/juliapkg.json`\ncd ../SymbolicRegression.jl\ngit checkout <backend_version>\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Table in Markdown\nDESCRIPTION: This snippet shows how to create a table in Markdown to display contributors, their avatars, and contributions. It uses HTML within Markdown for more complex formatting.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://www.linkedin.com/in/markkittisopikul/\"><img src=\"https://avatars.githubusercontent.com/u/8062771?v=4?s=50\" width=\"50px;\" alt=\"Mark Kittisopikul\"/><br /><sub><b>Mark Kittisopikul</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/PySR/commits?author=mkitti\" title=\"Code\">💻</a> <a href=\"#ideas-mkitti\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#infra-mkitti\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#platform-mkitti\" title=\"Packaging/porting to new platform\">📦</a> <a href=\"#promotion-mkitti\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/PySR/pulls?q=is%3Apr+reviewed-by%3Amkitti\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#tool-mkitti\" title=\"Tools\">🔧</a> <a href=\"https://github.com/MilesCranmer/PySR/commits?author=mkitti\" title=\"Tests\">⚠️</a></td>\n      <!-- More contributor entries... -->\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Data Persistence for PySR\nDESCRIPTION: Saves network recordings to prevent data loss due to potential C binding conflicts\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nnnet_recordings = {\n    \"g_input\": X_for_pysr.detach().cpu().numpy().reshape(-1, 5),\n    \"g_output\": y_i_for_pysr.detach().cpu().numpy().reshape(-1),\n    \"f_input\": y_for_pysr.detach().cpu().numpy().reshape(-1, 1),\n    \"f_output\": z_for_pysr.detach().cpu().numpy().reshape(-1),\n}\n\n# Save the data for later use:\nimport pickle as pkl\n\nwith open(\"nnet_recordings.pkl\", \"wb\") as f:\n    pkl.dump(nnet_recordings, f)\n```\n\n----------------------------------------\n\nTITLE: Loading Saved Network Data\nDESCRIPTION: Loads previously saved network recordings for PySR analysis\nSOURCE: https://github.com/milescranmer/pysr/blob/master/examples/pysr_demo.ipynb#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport pickle as pkl\n\nnnet_recordings = pkl.load(open(\"nnet_recordings.pkl\", \"rb\"))\nf_input = nnet_recordings[\"f_input\"]\nf_output = nnet_recordings[\"f_output\"]\ng_input = nnet_recordings[\"g_input\"]\ng_output = nnet_recordings[\"g_output\"]\n```\n\n----------------------------------------\n\nTITLE: Installing local PySR version and running tests\nDESCRIPTION: Commands for installing a local version of PySR from source code and running the test suite. This is useful for contributors who want to test their changes before submitting a pull request.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/CONTRIBUTORS.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m pysr test main\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for PySR and SymbolicRegression.jl\nDESCRIPTION: BibTeX entry for citing the main PySR and SymbolicRegression.jl paper published on arXiv in May 2023.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/CITATION.md#2025-04-22_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@misc{cranmerInterpretableMachineLearning2023,\n    title = {Interpretable {Machine} {Learning} for {Science} with {PySR} and {SymbolicRegression}.jl},\n    url = {http://arxiv.org/abs/2305.01582},\n    doi = {10.48550/arXiv.2305.01582},\n    urldate = {2023-07-17},\n    publisher = {arXiv},\n    author = {Cranmer, Miles},\n    month = may,\n    year = {2023},\n    note = {arXiv:2305.01582 [astro-ph, physics:physics]},\n    keywords = {Astrophysics - Instrumentation and Methods for Astrophysics, Computer Science - Machine Learning, Computer Science - Neural and Evolutionary Computing, Computer Science - Symbolic Computation, Physics - Data Analysis, Statistics and Probability},\n}\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for Symbolic Distillation Research\nDESCRIPTION: BibTeX entry for citing the research paper on discovering symbolic models from deep learning, published in NeurIPS 2020.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/CITATION.md#2025-04-22_snippet_1\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{cranmerDiscovering2020,\n    title={Discovering Symbolic Models from Deep Learning with Inductive Biases},\n    author={Miles Cranmer and Alvaro Sanchez-Gonzalez and Peter Battaglia and Rui Xu and Kyle Cranmer and David Spergel and Shirley Ho},\n    journal={NeurIPS 2020},\n    year={2020},\n    eprint={2006.11287},\n    archivePrefix={arXiv},\n    primaryClass={cs.LG}\n}\n```\n\n----------------------------------------\n\nTITLE: Building PySR Docker container\nDESCRIPTION: Command to build a Docker container for PySR from the Dockerfile in the repository directory.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t pysr .\n```\n\n----------------------------------------\n\nTITLE: Installing PySR Documentation Dependencies with pip\nDESCRIPTION: Installs the required dependencies for building PySR documentation from the requirements file.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running code formatter on PySR codebase\nDESCRIPTION: Command to apply Black code formatting to the PySR codebase. Contributors should run this before committing changes to ensure consistent code style across the project.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/CONTRIBUTORS.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nblack .\n```\n\n----------------------------------------\n\nTITLE: Documentation Dependencies for PySR\nDESCRIPTION: Lists the Python packages required for generating PySR documentation using MkDocs. These dependencies include the Material theme for MkDocs, automatic reference handling, Python docstring parsing for API documentation, and docstring parsing utilities.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmkdocs-material\nmkdocs-autorefs\nmkdocstrings[python]\ndocstring_parser\n```\n\n----------------------------------------\n\nTITLE: Generating PySR Documentation Source\nDESCRIPTION: Changes to the docs directory and runs the documentation generation script before returning to the previous directory.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd docs && ./gen_docs.sh && cd ..\n```\n\n----------------------------------------\n\nTITLE: Executing Benchmarks Across Multiple Git Tags in Bash\nDESCRIPTION: A bash script that checks out different version tags from git, waits 120 seconds between each checkout, and runs a benchmark script, saving the output to version-specific files.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/benchmarks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfor x in $(cat tags.txt); do sleep 120 && git checkout $x &> /dev/null && nohup ./benchmark.sh > performance_v3_$x.txt &; done\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML/Markdown\nDESCRIPTION: A responsive table layout displaying contributor information with profile pictures, links, and contribution types marked by emoji icons. The table is formatted using HTML with markdown-style links and emoji indicators.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/CONTRIBUTORS.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://www.linkedin.com/in/markkittisopikul/\"><img src=\"https://avatars.githubusercontent.com/u/8062771?v=4?s=50\" width=\"50px;\" alt=\"Mark Kittisopikul\"/><br /><sub><b>Mark Kittisopikul</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/PySR/commits?author=mkitti\" title=\"Code\">💻</a> <a href=\"#ideas-mkitti\" title=\"Ideas, planning, and feedback.\">💡</a></td>\n      <!-- Additional contributor cells omitted for brevity -->\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Contributors Table\nDESCRIPTION: HTML table structure displaying contributor information including avatars, usernames, and contribution types using align and valign attributes for layout control. Each cell contains links to contributor profiles and contribution details.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/CONTRIBUTORS.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/Jgmedina95\"><img src=\"https://avatars.githubusercontent.com/u/97254349?v=4?s=50\" width=\"50px;\" alt=\"Jgmedina95\"/><br /><sub><b>Jgmedina95</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/PySR/issues?q=author%3AJgmedina95\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-Jgmedina95\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"https://github.com/MilesCranmer/PySR/pulls?q=is%3Apr+reviewed-by%3AJgmedina95\" title=\"Reviewed Pull Requests\">👀</a></td>\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet creates a table to display contributors to the PySR project. It includes their GitHub avatars, names, and contribution types represented by emoji icons. The table is structured with rows and columns to organize multiple contributors.\nSOURCE: https://github.com/milescranmer/pysr/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/sheevy\"><img src=\"https://avatars.githubusercontent.com/u/1525683?v=4?s=50\" width=\"50px;\" alt=\"Mateusz Kubica\"/><br /><sub><b>Mateusz Kubica</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/PySR/commits?author=sheevy\" title=\"Documentation\">📖</a> <a href=\"#ideas-sheevy\" title=\"Ideas, planning, and feedback.\">💡</a></td>\n      <!-- Additional contributor entries -->\n    </tr>\n    <!-- Additional rows of contributors -->\n  </tbody>\n</table>\n```"
  }
]