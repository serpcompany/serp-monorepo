[
  {
    "owner": "benlubar",
    "repo": "df-ai",
    "content": "TITLE: Loading DFHack AI Plugin Command\nDESCRIPTION: Console command to enable the df-ai plugin in DFHack. Used to start the automated gameplay functionality.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenable df-ai\n```\n\n----------------------------------------\n\nTITLE: DFHack AI Help Command\nDESCRIPTION: Console command to display available AI commands and their usage in DFHack.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelp ai\n```\n\n----------------------------------------\n\nTITLE: AI Commands Documentation for Dwarf Fortress\nDESCRIPTION: Reference of available AI commands including ai enable/disable camera, ai version, ai report, and ai enable events commands.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nai enable camera\nai disable camera\nai version\nai report\nai enable events\n```\n\n----------------------------------------\n\nTITLE: Configuring df-ai JSON Options\nDESCRIPTION: Added comments to the df-ai.json configuration file to describe available options and their possible values. This allows users to more easily customize the AI's behavior.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Added comments to the `dfhack-config/df-ai.json` file describing what each option does and its possible values.\n```\n\n----------------------------------------\n\nTITLE: Config File Reference\nDESCRIPTION: Configuration options for df-ai including world selection and site finder settings\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"random_embark_world\" : \"region1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Manage Labors Option in df-ai\nDESCRIPTION: The manage_labors option in df-ai can now be set to use autolabor or labormanager plugins for automated labor assignment.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `manage_labors` can now be set to `\"autolabor\"` or `\"labormanager\"` for additional automated setup of those plugins.\n```\n\n----------------------------------------\n\nTITLE: Enabling Lockstep Mode in df-ai\nDESCRIPTION: Instructions for enabling or disabling lockstep mode in df-ai, which replaces the Dwarf Fortress event loop for better control and recording capabilities.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Enable or disable lockstep mode at any time using `ai enable lockstep` or `ai disable lockstep`.\n- Lockstep mode is saved in `df-ai-config.json`, so it can also be toggled in that file if Dwarf Fortress is not running.\n```\n\n----------------------------------------\n\nTITLE: Creating DFHack Plugin and Installation Rules for df-ai\nDESCRIPTION: Defines the DFHack plugin target with compiler flags for different compilers and sets up installation paths for blueprints. This ensures proper compilation with warnings treated as errors and installs room/plan JSON files to the appropriate locations.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -DDFAI_RELEASE\")\n\nDFHACK_PLUGIN(df-ai ${PROJECT_SRCS} LINK_LIBRARIES ${PROJECT_LIBS} COMPILE_FLAGS_GCC \"-Wall -Wextra -Werror -Wno-unused-parameter\" COMPILE_FLAGS_MSVC \"/W3 /WX\")\n\nINSTALL(DIRECTORY rooms/ DESTINATION df-ai-blueprints/rooms FILES_MATCHING PATTERN \"*.json\")\nINSTALL(DIRECTORY plans/ DESTINATION df-ai-blueprints/plans FILES_MATCHING PATTERN \"*.json\")\n```\n\n----------------------------------------\n\nTITLE: Defining Project Source and Header Files for df-ai\nDESCRIPTION: Lists all source (.cpp) and header (.h) files that make up the df-ai plugin. This comprehensive file list includes modules for AI behavior, planning, population management, room blueprints, and more.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(PROJECT_SRCS\n    df-ai.cpp\n    ai.cpp\n    config.cpp\n    hooks.cpp\n    population.cpp\n    population_death.cpp\n    population_justice.cpp\n    population_military.cpp\n    population_nobles.cpp\n    population_occupations.cpp\n    population_pets.cpp\n    plan.cpp\n    plan_assign.cpp\n    plan_cistern.cpp\n    plan_construct.cpp\n    plan_find.cpp\n    plan_persist.cpp\n    plan_priorities.cpp\n    plan_setup.cpp\n    plan_setup_blueprint.cpp\n    plan_setup_screen.cpp\n    plan_smooth.cpp\n    plan_task.cpp\n    blueprint.cpp\n    blueprint_furniture.cpp\n    blueprint_room.cpp\n    blueprint_merge.cpp\n    blueprint_template.cpp\n    stocks.cpp\n    stocks_detect.cpp\n    stocks_equipment.cpp\n    stocks_farm.cpp\n    stocks_find.cpp\n    stocks_forge.cpp\n    stocks_manager.cpp\n    stocks_queue.cpp\n    stocks_trade.cpp\n    stocks_update.cpp\n    camera.cpp\n    embark.cpp\n    room.cpp\n    room_describe.cpp\n    trade_helpers.cpp\n    trade_manager.cpp\n    event_manager.cpp\n    exclusive_callback.cpp\n    weblegends.cpp\n    military.cpp\n    pause.cpp\n    log.cpp\n    variable_string.cpp\n)\n\nSET(PROJECT_HDRS\n    ai.h\n    config.h\n    debug.h\n    hooks.h\n    population.h\n    plan.h\n    plan_priorities.h\n    plan_setup.h\n    blueprint.h\n    stocks.h\n    camera.h\n    embark.h\n    room.h\n    trade.h\n    event_manager.h\n    exclusive_callback.h\n    dfhack_shared.h\n    df-ai-git-describe.h\n    apply.h\n    variable_string.h\n)\n\nSET_SOURCE_FILES_PROPERTIES( ${PROJECT_HDRS} PROPERTIES HEADER_FILE_ONLY TRUE)\n\nLIST(APPEND PROJECT_SRCS ${PROJECT_HDRS})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Boost Dependencies for df-ai\nDESCRIPTION: Configures Boost library settings for the project. The code specifies static linking, disables debug libraries, and requires Boost 1.67.0 with the context component, which is essential for the plugin's coroutine functionality.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(Boost_USE_STATIC_LIBS ON)\nset(Boost_USE_DEBUG_LIBS OFF)\nset(Boost_USE_RELEASE_LIBS ON)\nset(Boost_USE_MULTITHREADED ON)\nset(Boost_USE_STATIC_RUNTIME OFF)\nset(Boost_USE_DEBUG_RUNTIME OFF)\nfind_package(Boost 1.67.0 REQUIRED COMPONENTS context)\ninclude_directories(${Boost_INCLUDE_DIRS})\n\nLIST(APPEND PROJECT_LIBS jsoncpp_static lua ${ZLIB_LIBRARIES} ${Boost_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Libraries for df-ai\nDESCRIPTION: Adds platform-specific library dependencies based on the operating system. For macOS, it links against a locally built SDL library, while for other Unix systems it uses the system SDL library.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n    IF(APPLE)\n        LIST(APPEND PROJECT_LIBS ${CMAKE_BINARY_DIR}/SDL)\n    ELSE()\n        LIST(APPEND PROJECT_LIBS SDL)\n    ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Architecture Settings for df-ai\nDESCRIPTION: Sets architecture-specific compiler settings based on the DFHACK_BUILD_ARCH variable. This determines whether to use 32-bit or 64-bit compilation settings.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(\"${DFHACK_BUILD_ARCH}\" STREQUAL \"32\")\n    set(CMAKE_CXX_COMPILER_ARCHITECTURE_ID X86)\n    set(CMAKE_SIZEOF_VOID_P 4)\nelse()\n    set(CMAKE_CXX_COMPILER_ARCHITECTURE_ID x64)\n    set(CMAKE_SIZEOF_VOID_P 8)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project and Git Version Tracking for df-ai\nDESCRIPTION: Sets up the CMake project and executes git commands to retrieve version information. This creates a header file with git metadata for version tracking in the project.\nSOURCE: https://github.com/benlubar/df-ai/blob/develop/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.11.0)\nPROJECT (df-ai)\n\nexecute_process(COMMAND ${GIT_EXECUTABLE} describe --tags --abbrev=8 --long\n    WORKING_DIRECTORY \"${df-ai_SOURCE_DIR}\"\n    OUTPUT_VARIABLE DF_AI_GIT_DESCRIPTION)\nexecute_process(COMMAND ${GIT_EXECUTABLE} rev-parse HEAD\n    WORKING_DIRECTORY \"${df-ai_SOURCE_DIR}\"\n    OUTPUT_VARIABLE DF_AI_GIT_COMMIT)\nexecute_process(COMMAND ${GIT_EXECUTABLE} describe --tags --abbrev=8 --exact-match\n    WORKING_DIRECTORY \"${df-ai_SOURCE_DIR}\"\n    RESULT_VARIABLE DF_AI_GIT_TAGGED_RESULT\n    OUTPUT_QUIET ERROR_QUIET)\n\nset(git_describe_tmp_h ${df-ai_SOURCE_DIR}/df-ai-git-describe.tmp.h)\nset(git_describe_h ${df-ai_SOURCE_DIR}/df-ai-git-describe.h)\n\nfile(WRITE ${git_describe_tmp_h} \"\")\n\nmacro(git_describe_definition var)\n    string(STRIP \"${${var}}\" GIT_DEF_VALUE)\n    file(APPEND ${git_describe_tmp_h} \"#define ${var} \\\"${GIT_DEF_VALUE}\\\"\\n\")\nendmacro()\n\ngit_describe_definition(DF_AI_GIT_DESCRIPTION)\ngit_describe_definition(DF_AI_GIT_COMMIT)\nif(${DF_AI_GIT_TAGGED_RESULT} EQUAL 0)\n    file(APPEND ${git_describe_tmp_h} \"#define DF_AI_GIT_TAGGED\\n\")\nendif()\nexecute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different\n    ${git_describe_tmp_h} ${git_describe_h})\n```"
  }
]