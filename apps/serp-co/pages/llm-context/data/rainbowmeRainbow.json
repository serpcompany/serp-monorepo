[
  {
    "owner": "rainbow-me",
    "repo": "rainbow",
    "content": "TITLE: Using the Keychain Module in React Native\nDESCRIPTION: Demonstrates basic usage of the keychain wrapper module including setting, getting, checking, and removing values. Shows how to use methods for both simple values and objects, as well as accessing shared web credentials and biometry support.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/keychain/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as keychain from '@/keychain';\n\nawait keychain.set('my-keychain-key', 'value', await keychain.getPrivateAccessControlOptions());\nconst bool = await keychain.has('my-keychain-key');\nconst result = await keychain.get('my-keychain-key');\n\nawait keychain.setObject('my-object', { foo: 'bar' });\nconst result = await keychain.getObject('my-object');\n\nawait keychain.setSharedWebCredentials('username', 'password');\nconst result = await keychain.getSharedWebCredentials('username', 'password');\n\nconst biometryType = await keychain.getSupportedBiometryType();\n\nawait keychain.remove('my-keychain-key');\nawait keychain.remove('my-object');\n\nawait keychain.clear();\n```\n\n----------------------------------------\n\nTITLE: Proper Error Handling with RainbowError\nDESCRIPTION: Example of correct error handling using the RainbowError class with a descriptive message and metadata.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RainbowError } from '@/logger';\n\ntry {\n  // some async code\n} catch (e) {\n  const error = new RainbowError('Descriptive error message');\n  logger.error(error, { ...metadata });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Analytics API in Rainbow App (TypeScript)\nDESCRIPTION: Example of how to use the analytics wrapper to identify users, track events with properties, and log screen views. This demonstrates the core analytics functionality including passing metadata with events.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/analytics/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@/analytics';\n\nanalytics.identify({\n  ...userProperties,\n});\n\nanalytics.track(analytics.event.applicationDidMount);\nanalytics.track(analytics.event.appStateChange, {\n  category: 'app state',\n  label: 'foo',\n});\n\nanalytics.screen(Routes.SWAPS_PROMO_SHEET, {\n  ...metadata,\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Keychain Module's Discriminated Union\nDESCRIPTION: Shows how to handle errors using the keychain module's discriminated union return type. Demonstrates type-safe access to values and handling specific error types without using optional chaining or try/catch blocks.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/keychain/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { value, error } = await keychain.getObject('my-object');\n\nif (value) {\n   console.log(value.foo) // safe property access\n} else {\n   switch(error) {\n      case(keychain.ErrorType.Unavailable):\n      case(keychain.ErrorType.UserCanceled):\n      case(keychain.ErrorType.NotAuthenticated):\n         console.log(...)\n         break;\n      case(keychain.ErrorType.Unknown):\n      default:\n         console.log(`An unknown error occurred: ${error}`)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Explain Sheet Component in TSX\nDESCRIPTION: This snippet demonstrates how to use the explain module to open an explainer sheet with custom content. It imports the explain module from '@/screens/Explain', then calls the open method with a function that returns JSX content including pre-built components like explain.Title. The second parameter provides configuration options such as sheetHeight.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/screens/Explain/README.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as explain from '@/screens/Explain';\n\nexplain.open(\n  () => (\n    <>\n      <explain.Title>Pre-built title comonent</explain.Title>\n    </>\n  ),\n  { sheetHeight: 400 }\n);\n```\n\n----------------------------------------\n\nTITLE: Consuming New GraphQL Client in Component\nDESCRIPTION: Example showing how to import and use a newly created GraphQL client to fetch data with a query. This demonstrates the pattern for using a custom GraphQL client in a React component.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/graphql/README.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { exampleClient } from '@/graphql';\n\nfunction fetchUsers() {\n  return exampleClient.getUsers();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ENS Avatar Resolution\nDESCRIPTION: Example showing how to import and use the AvatarResolver to fetch an avatar URI for an ENS name. The code demonstrates both getAvatar and getAvatarMetadata methods.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/ens-avatar/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StaticJsonRpcProvider } from '@ethersproject/providers';\nimport { AvatarResolver, utils: avtUtils } from '@ensdomains/ens-avatar';\n\n// const { JSDOM } = require('jsdom'); on nodejs\n// const jsdom = new JSDOM().window; on nodejs\n\nconst provider = new StaticJsonRpcProvider(\n    ...\n  );\n...\nasync function getAvatar() {\n    const avt = new AvatarResolver(provider);\n    const avatarURI = await avt.getAvatar('tanrikulu.eth', { /* jsdomWindow: jsdom (on nodejs) */ });\n    // avatarURI = https://ipfs.io/ipfs/QmUShgfoZQSHK3TQyuTfUpsc8UfeNfD8KwPUvDBUdZ4nmR\n}\n\nasync function getAvatarMetadata() {\n    const avt = new AvatarResolver(provider);\n    const avatarMetadata = await avt.getMetadata('tanrikulu.eth');\n    // avatarMetadata = { image: ... , uri: ... , name: ... , description: ... }\n    const avatarURI = avtUtils.getImageURI({ metadata /*, jsdomWindow: jsdom (on nodejs) */ });\n    // avatarURI = https://ipfs.io/ipfs/QmUShgfoZQSHK3TQyuTfUpsc8UfeNfD8KwPUvDBUdZ4nmR\n}\n```\n\n----------------------------------------\n\nTITLE: Future Network and Wallet Storage Wrapper Implementation in TypeScript\nDESCRIPTION: Proposed implementation for a wrapper class around Storage that caches network and wallet references to simplify API usage. This allows setting/getting values without repeatedly specifying scope parameters.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/storage/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Storage } from '@/storage'\n\nclass NetworkAndWalletStorage<Schema> {\n  walletAddress?: WalletAddress\n  network?: Network\n  storage: Storage<[Network, WalletAddress], Schema>\n\n  constructor() {\n    this.storage = new Storage<[Network, WalletAddress], Schema>({\n       id: 'networkAndWallet'\n    })\n  }\n\n  setWalletAddress(walletAddress: string) {\n    this.walletAddress = walletAddress\n  }\n\n  setNetwork(network: string) {\n    this.network = network\n  }\n\n  set<Key extends keyof Schema>(key: Key, data: Schema[Key]): void {\n    if (!this.network || !this.walletAddress) {\n      throw new Error(`ScopedStorage requires both network and walletAddress`)\n    }\n\n    this.storage.set([this.network, this.walletAddress, key], data)\n  }\n\n  ...etc...\n}\n\nexport networkAndWallet = new NetworkAndWalletStorage()\n```\n\n----------------------------------------\n\nTITLE: Using Portal Hook in React Components\nDESCRIPTION: Demonstrates how to use the portal.useOpen hook within a React component to display a sheet overlay with custom content. The example shows a button that opens a sheet with a Box and Text component.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/screens/Portal/README.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as portal from '@/screens/Portal';\n\nexport function Comp() {\n  const { open } = portal.useOpen();\n\n  const handlePress = () => {\n    open(\n      () => (\n        <>\n          <Box>\n            <Text>Hello world</Text>\n          </Box>\n        </>\n      ),\n      { sheetHeight: 400 }\n    );\n  };\n\n  return <Button onPress={handlePress}>Show some sheet</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming a GraphQL Query in React Component\nDESCRIPTION: Example of how to import and use a GraphQL client to fetch data with a query. This shows the pattern for consuming GraphQL data in a React component.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/graphql/README.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ensClient } from '@/graphql';\n\nfunction fetchDomain(id: string) {\n  return ensClient.getDomain({ id });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Storage Usage with Device Scope in TypeScript\nDESCRIPTION: Example of using the device-scoped storage instance for storing, retrieving, and removing data. The device store represents the most basic scope level in the storage hierarchy.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/storage/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as storage from '@/storage';\n\nstorage.device.set(['doNotTrack'], true);\nstorage.device.get(['doNotTrack']);\nstorage.device.remove(['doNotTrack']);\nstorage.device.removeMany([], ['doNotTrack']);\n```\n\n----------------------------------------\n\nTITLE: Starting React Native Development Server\nDESCRIPTION: Command to start the React Native Metro bundler development server which compiles the JavaScript code and serves it to the app during development.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/README.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Using Sentry Types in Navigation Breadcrumbs\nDESCRIPTION: Example showing how to use built-in Sentry types with the logger.info method to create navigation breadcrumbs.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.info(`From ${prevRoute} to ${nextRoute}`, { type: 'nav' });\n```\n\n----------------------------------------\n\nTITLE: Basic Logger Interface in Rainbow App\nDESCRIPTION: The main interface for using the logger module, showing all available log methods and their parameter patterns.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logger } from '@/logger'\n\nlogger.debug(message[, metadata, debugContext])\nlogger.info(message[, metadata])\nlogger.log(message[, metadata])\nlogger.warn(message[, metadata])\nlogger.error(error[, metadata])\n```\n\n----------------------------------------\n\nTITLE: Using Extended Portal Component with Explain Module\nDESCRIPTION: Demonstrates how to use the Explain module, which extends the Portal primitive with pre-built components for creating consistent explainer sheets with emoji, title, and body text elements.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/screens/Portal/README.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as explain from '@/screens/Explain';\n\nexplain.open(\n  () => (\n    <>\n      <explain.Emoji>💰</explain.Emoji>\n      <explain.Title>This is a title</explain.Title>\n      <explain.Body>And this is body text</explain.Body>\n    </>\n  ),\n  { sheetHeight: 640 }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating New GraphQL Query File\nDESCRIPTION: Example of creating a new GraphQL query file (example.graphql) with a basic query for fetching users. Shows the proper syntax for defining a GraphQL query in a new file.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/graphql/README.md#2025-04-19_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n// src/graphql/queries/example.graphql\n\n+query getUsers {\n+  id\n+  firstName\n+  lastName\n+}\n```\n\n----------------------------------------\n\nTITLE: Basic Chart Implementation in React Native\nDESCRIPTION: Example showing how to create a basic animated chart using ChartPathProvider, ChartPath, and ChartDot components. Demonstrates data interpolation and styling.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/react-native-animated-charts/README.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dimensions, View } from 'react-native';\nimport { ChartDot, ChartPath, ChartPathProvider, monotoneCubicInterpolation } from 'react-native-animated-charts';\n\nexport const { width: SIZE } = Dimensions.get('window');\n\nexport const data = [\n  { x: 1453075200, y: 1.47 },\n  { x: 1453161600, y: 1.37 },\n  { x: 1453248000, y: 1.53 },\n  { x: 1453334400, y: 1.54 },\n  { x: 1453420800, y: 1.52 },\n  { x: 1453507200, y: 2.03 },\n  { x: 1453593600, y: 2.1 },\n  { x: 1453680000, y: 2.5 },\n  { x: 1453766400, y: 2.3 },\n  { x: 1453852800, y: 2.42 },\n  { x: 1453939200, y: 2.55 },\n  { x: 1454025600, y: 2.41 },\n  { x: 1454112000, y: 2.43 },\n  { x: 1454198400, y: 2.2 },\n];\n\nconst points = monotoneCubicInterpolation(data)(40);\n\nconst BasicExample = () => (\n  <View style={{ backgroundColor: 'black' }}>\n    <ChartPathProvider data={{ points, smoothingStrategy: 'bezier' }}>\n      <ChartPath height={SIZE / 2} stroke=\"yellow\" width={SIZE} />\n      <ChartDot style={{ backgroundColor: 'blue' }} />\n    </ChartPathProvider>\n  </View>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Portal Direct API Outside React Components\nDESCRIPTION: Shows how to use the portal.open function directly outside of a React component context. This method can be used when hooks are not available.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/screens/Portal/README.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as portal from '@/screens/Portal';\n\nportal.open(() => <>...</>, { ...options });\n```\n\n----------------------------------------\n\nTITLE: Creating New GraphQL Client in Index File\nDESCRIPTION: Example of updating the index.ts file to create and export a new GraphQL client. This makes the client available for import throughout the application.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/graphql/README.md#2025-04-19_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nimport { config } from './config';\nimport { getFetchRequester } from './utils/getFetchRequester';\nimport { getSdk as getEnsSdk } from './__generated__/ens';\nimport { getSdk as getMetadataSdk } from './__generated__/metadata';\n+ import { getSdk as getExampleSdk } from './__generated__/example';\n\nexport const ensClient = getEnsSdk(getFetchRequester(config.ens.schema.url));\nexport const metadataClient = getMetadataSdk(\n  getFetchRequester(config.metadata.schema.url)\n);\n+ export const exampleClient = getEnsSdk(getFetchRequester(config.example.schema.url));\n```\n\n----------------------------------------\n\nTITLE: Adding Query to Existing GraphQL File\nDESCRIPTION: Example showing how to add a new query (getDomain) to an existing GraphQL file (ens.graphql). This diff demonstrates the proper syntax for adding a GraphQL query definition.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/graphql/README.md#2025-04-19_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// src/graphql/queries/ens.graphql\n\nquery getRegistration($id: ID!) {\n  registration(id: $id) {\n    id\n    registrationDate\n    expiryDate\n    registrant {\n      id\n    }\n  }\n}\n\n+query getDomain($id: ID!) {\n+  domain(id: $id) {\n+    id\n+    name\n+  }\n+}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Config File\nDESCRIPTION: Example of updating the GraphQL configuration file to add a new GraphQL API endpoint. This links the GraphQL schema URL with the corresponding query file.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/graphql/README.md#2025-04-19_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nexports.config = {\n  ens: {\n    schema: { url: 'https://api.thegraph.com/subgraphs/name/ensdomains/ens', method: 'POST' },\n    document: './queries/ens.graphql',\n  },\n  metadata: {\n    schema: { url: 'https://metadata.p.rainbow.me/v1/graph', method: 'GET' },\n    document: './queries/metadata.graphql',\n  },\n+ example: {\n+   schema: { url: 'https://example.com/graphql' },\n+   document: './queries/example.graphql',\n+ },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache for ENS Avatar Resolver\nDESCRIPTION: Code example showing how to initialize the AvatarResolver with a cache option. The example sets a 5-minute TTL for cached responses.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/ens-avatar/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst avt = new AvatarResolver(provider, { ttl: 300 }); // 5 min response cache in memory\n```\n\n----------------------------------------\n\nTITLE: Converting from Legacy Logger Error Handling in Rainbow App\nDESCRIPTION: Example of migrating from the old Logger.sentry/Logger.error pattern to the new RainbowError approach, showing proper error handling with metadata.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logger, RainbowError } from '@/logger';\n\ntry {\n  // some async code\n} catch (e) {\n  const error = new RainbowError('Descriptive error message');\n  logger.error(error, { ...metadata });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigation Routes with Portal\nDESCRIPTION: Shows how to create a custom navigable route using the Portal sheet wrapper as a starting point. This is useful for creating deeplink-accessible routes that use the SimpleSheet component as a base.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/screens/Portal/README.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Portal() {\n  const { params } = useRoute<RouteProp<NavigationRouteParams, 'MyRoute'>>();\n\n  return (\n    <SimpleSheet backgroundColor=\"white\" scrollEnabled={false}>\n      <Box paddingVertical=\"44px\" paddingHorizontal=\"32px\" height=\"full\" background=\"surfaceSecondary\">\n        ...\n      </Box>\n    </SimpleSheet>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Info Logs with Metadata in Rainbow App\nDESCRIPTION: Examples of using the info level logging with metadata for Sentry breadcrumbs and debugging assistance.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.info(message);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.info(message, {\n  duration: '256ms',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding New Analytics Events (TypeScript)\nDESCRIPTION: Example showing how to add a new event to the analytics system. Demonstrates adding an event with a camelCase key in the code while using the naming convention for the actual event string.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/analytics/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const event = {\n  swapsUserFormSubmitted: 'swaps.user_form.submitted',\n};\n```\n\n----------------------------------------\n\nTITLE: Event Naming Convention Pattern (Bash)\nDESCRIPTION: Illustrates the recommended naming pattern for analytics events, using dot notation to represent event categories and actions. This convention improves organization and readability of events.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/analytics/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<name_or_category>.<action>\n```\n\n----------------------------------------\n\nTITLE: Using Debug Logs with Context in Rainbow App\nDESCRIPTION: Examples of using the debug level logging with optional context parameters for filtering during development.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logger } from '@/logger';\n\nlogger.debug(message);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/components\nlogger.debug(message, logger.DebugContext.swaps);\n```\n\n----------------------------------------\n\nTITLE: Simplified Storage Usage with Wrapper Class in TypeScript\nDESCRIPTION: Example of using the proposed NetworkAndWalletStorage wrapper to set values without specifying scope parameters. This demonstrates the simplified API that would be available with the wrapper implementation.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/storage/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { networkAndWallet } from '@/storage/networkAndWallet';\n\nnetworkAndWallet.set('contacts', [{ name: 'rainbow.eth', address: '0x67890' }]);\n```\n\n----------------------------------------\n\nTITLE: Building and Running Rainbow on Android\nDESCRIPTION: Command to build, install, and launch the debug version of the Rainbow app on an Android emulator or connected device.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/README.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Using B-Spline/Monotone Cubic Interpolation in React Native Charts\nDESCRIPTION: Example showing how to use interpolation helpers to generate equidistant points from a dataset. The code demonstrates importing and using either bSplineInterpolation or monotoneCubicInterpolation with configuration options.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/react-native-animated-charts/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bSplineInterpolation as interpolator } from 'react-native-animated-charts';\n// import { monotoneCubicInterpolation as interpolator } from 'react-native-animated-charts';\n\nconst interpolatedData = interpolator({ data, range: 80 });\n```\n\n----------------------------------------\n\nTITLE: Setting Custom IPFS Gateway\nDESCRIPTION: Example demonstrating how to configure the AvatarResolver to use a custom IPFS gateway instead of the default https://ipfs.io gateway.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/ens-avatar/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst avt = new AvatarResolver(provider, { ipfs: 'https://dweb.link' });\n```\n\n----------------------------------------\n\nTITLE: Testing debug mode migrations\nDESCRIPTION: Tests that migrations with the debug flag set to true are executed but not marked as complete in storage. This allows debug migrations to run repeatedly for testing purposes.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/migrations/__tests__/migrations.test.txt#2025-04-19_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest(`migration in debug mode does not mark as complete`, async () => {\n  const throwMigrationName = 'migration_debug' as MigrationName;\n  const throwMigration: Migration = {\n    debug: true,\n    name: throwMigrationName,\n    async migrate() {},\n  };\n\n  await runMigrations([throwMigration]);\n\n  expect(storage.getString(throwMigrationName)).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing that migrations run only once in React Native\nDESCRIPTION: Verifies that a migration runs once and is properly stored in MMKV storage. It confirms that when the migration is run a second time, it doesn't execute again based on the stored completion date.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/migrations/__tests__/migrations.test.txt#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest(`new migration runs once`, async () => {\n  jest.useFakeTimers();\n  const currDate = new Date().toUTCString();\n  await runMigrations([fooMigration]);\n  jest.useRealTimers();\n\n  expect(storage.getString(fooMigrationName)).toEqual(\n    JSON.stringify({ data: currDate })\n  );\n\n  await runMigrations([fooMigration]);\n\n  // not run again\n  expect(storage.getString(fooMigrationName)).toEqual(\n    JSON.stringify({ data: currDate })\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Log Level with Metadata in Rainbow App\nDESCRIPTION: Example of using the log level, which creates separate issues in Sentry while also sending breadcrumbs.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.log(message, { ...metadata });\n```\n\n----------------------------------------\n\nTITLE: Using Warning Logs in Rainbow App\nDESCRIPTION: Example of using the warn level for recoverable errors or deprecation notices, with support for metadata.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.warn(message, { ...metadata });\n```\n\n----------------------------------------\n\nTITLE: Testing Subscription Queue Processing - Happy Path\nDESCRIPTION: Tests successful scenarios for processing the subscription queue, including empty queue handling and proper Firebase subscription updates.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/notifications/settings/__tests__/initialization.test.txt#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest('running subscription queue processing for items that were not yet properly subscribed with firebase should subscribe them properly', async () => {\n  notificationSettingsStorage.set(\n    WALLET_TOPICS_STORAGE_KEY,\n    JSON.stringify([\n      {\n        address: TEST_ADDRESS_1,\n        type: WalletNotificationRelationship.OWNER,\n        successfullyFinishedInitialSubscription: false,\n        topics: DEFAULT_ENABLED_TOPIC_SETTINGS,\n        enabled: false\n      }\n    ])\n  );\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Analytics Events (TypeScript)\nDESCRIPTION: Example showing how to update an existing analytics event by changing the key while preserving the event name value. This maintains backward compatibility with existing analytics data.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/analytics/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const event = {\n  // value stays the same\n  financeSwapsFormUserSubmitted: 'swaps.user_form.submitted',\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Bundle and Pods for Rainbow Project\nDESCRIPTION: Command to install the required Ruby bundles and CocoaPods dependencies for the Rainbow wallet iOS project using yarn scripts.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn install-bundle && yarn install-pods\n```\n\n----------------------------------------\n\nTITLE: Testing Queue Processing for Newly Added Addresses\nDESCRIPTION: Validates the behavior when processing notification settings for newly added wallet addresses, particularly when changing relationship types from watcher to owner.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/notifications/settings/__tests__/initialization.test.txt#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst queue = createInitialSettingsForNewlyAddedAddresses(\n  [\n    {\n      address: TEST_ADDRESS_1,\n      relationship: WalletNotificationRelationship.OWNER\n    },\n    {\n      address: TEST_ADDRESS_2,\n      relationship: WalletNotificationRelationship.WATCHER\n    }\n  ],\n  initState\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up MMKV storage for migration tests in React Native\nDESCRIPTION: Initializes testing environment by mocking the InteractionManager and creating an MMKV storage instance used for tracking migration progress.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/migrations/__tests__/migrations.test.txt#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { InteractionManager } from 'react-native';\nimport { describe, test, expect } from '@jest/globals';\nimport { MMKV } from 'react-native-mmkv';\n\nimport { runMigrations } from '@/migrations';\nimport {\n  Migration,\n  MigrationName,\n  MIGRATIONS_STORAGE_ID,\n} from '@/migrations/types';\n\nInteractionManager.runAfterInteractions = jest.fn();\n```\n\n----------------------------------------\n\nTITLE: Converting from Legacy Breadcrumb Logging in Rainbow App\nDESCRIPTION: Example showing how to migrate from the old addDataBreadcrumb utility to the new logger.info approach with metadata.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naddDataBreadcrumb('Message', { clicked: true });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logger } from '@/logger';\n\nlogger.info(`Message`, { clicked: true });\n```\n\n----------------------------------------\n\nTITLE: Testing Debug Migration Behavior in Production Environment with Jest\nDESCRIPTION: This test verifies that migrations marked as 'debug' exit early when running in a production environment. It mocks the environment to simulate production mode, then attempts to run a debug migration and checks that it doesn't execute but logs an appropriate error instead.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/migrations/__tests__/migrations-prod.test.txt#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { describe, test, expect } from '@jest/globals';\nimport { MMKV } from 'react-native-mmkv';\n\nimport { logger, RainbowError } from '@/logger';\nimport { runMigrations } from '@/migrations';\nimport {\n  Migration,\n  MigrationName,\n  MIGRATIONS_STORAGE_ID,\n} from '@/migrations/types';\n\njest.mock('@/env', () => ({\n  IS_PROD: true,\n}));\n\ndescribe(`@/migrations IS_PROD`, () => {\n  const storage = new MMKV({ id: MIGRATIONS_STORAGE_ID });\n\n  test(`migration in debug mode in prod exits early and logs`, async () => {\n    const spy = jest.fn();\n\n    const removeTransport = logger.addTransport(spy);\n\n    const name = 'migration_debug' as MigrationName;\n    const migration: Migration = {\n      debug: true,\n      name,\n      async migrate() {},\n    };\n\n    await runMigrations([migration]);\n\n    expect(storage.getString(name)).toBeFalsy();\n    expect(spy).toHaveBeenCalledWith(\n      logger.LogLevel.Error,\n      new RainbowError(`Migration is in debug mode`),\n      { migration: name }\n    );\n\n    removeTransport();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining test migrations and storage in React Native\nDESCRIPTION: Creates a test MMKV storage instance and defines a sample migration used in tests. This sets up the basic structure needed for testing the migration system.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/migrations/__tests__/migrations.test.txt#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst storage = new MMKV({ id: MIGRATIONS_STORAGE_ID });\n\nconst fooMigrationName = 'migration_foo' as MigrationName;\nconst fooMigration: Migration = {\n  name: fooMigrationName,\n  async migrate() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Empty Wallet Settings Test\nDESCRIPTION: Tests initialization when wallet list is empty and storage is not initialized\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/notifications/settings/__tests__/initialization.test.txt#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('initializing settings when list of wallets is empty and the stored state is not initialized', () => {\n  const storedBefore = notificationSettingsStorage.getString(\n    WALLET_TOPICS_STORAGE_KEY\n  );\n  expect(storedBefore).toBeUndefined();\n\n  const initState = _prepareInitializationState();\n  expect(initState).toEqual(EMPTY_INIT_STATE);\n  const queue = createInitialSettingsForNewlyAddedAddresses(\n    [],\n    initState\n  );\n  expect(queue).toEqual([]);\n\n  const after = notificationSettingsStorage.getString(\n    WALLET_TOPICS_STORAGE_KEY\n  );\n  expect(after).toEqual('[]');\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Design System Playground in Debug Configuration\nDESCRIPTION: Configuration setting to enable the design system playground mode instead of the regular app. This setting should be added to the debug configuration file to view components in isolation.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/design-system/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const designSystemPlaygroundEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Testing deferred migrations with InteractionManager\nDESCRIPTION: Tests that deferred migrations are properly registered with InteractionManager, which will run them after user interactions are complete. This verifies the defer functionality works as expected.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/migrations/__tests__/migrations.test.txt#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest(`deferable migration is set up`, async () => {\n  const deferMigrationName = 'migration_defer' as MigrationName;\n  const deferMigration: Migration = {\n    name: deferMigrationName,\n    async defer() {},\n  };\n\n  await runMigrations([deferMigration]);\n\n  expect(InteractionManager.runAfterInteractions).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Group Settings Initialization Test\nDESCRIPTION: Tests the initialization of default notification group settings in MMKV storage\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/notifications/settings/__tests__/initialization.test.txt#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding default group settings if they do not exist in MMKV', () => {\n  notificationSettingsStorage.delete(WALLET_GROUPS_STORAGE_KEY);\n  const before = notificationSettingsStorage.getString(\n    WALLET_GROUPS_STORAGE_KEY\n  );\n  expect(before).toBeUndefined();\n  addDefaultNotificationGroupSettings();\n  const after = notificationSettingsStorage.getString(\n    WALLET_GROUPS_STORAGE_KEY\n  );\n  expect(after).toEqual('{\"owner\":true,\"watcher\":false}');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing error handling in migrations\nDESCRIPTION: Verifies that when a migration throws an error, it doesn't mark the migration as complete in storage. This ensures that failed migrations will be attempted again on subsequent runs.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/migrations/__tests__/migrations.test.txt#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest(`migration that throws exits and does not mark as complete`, async () => {\n  const throwMigrationName = 'migration_throw' as MigrationName;\n  const throwMigration: Migration = {\n    name: throwMigrationName,\n    async migrate() {\n      throw new Error('throws');\n    },\n  };\n\n  await runMigrations([throwMigration]);\n\n  expect(storage.getString(throwMigrationName)).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Codegen Command\nDESCRIPTION: Command to run the GraphQL code generator tool that generates types and fetchers for newly defined queries. This must be run from the root directory of the rainbow repository.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/graphql/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> yarn graphql-codegen\n```\n\n----------------------------------------\n\nTITLE: Test Constants and Mock Setup\nDESCRIPTION: Defines test addresses and empty initialization state constants, and sets up Firebase mocking\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/notifications/settings/__tests__/initialization.test.txt#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst TEST_ADDRESS_1 = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045';\nconst TEST_ADDRESS_2 = '0xe5501bc2b0df6d0d7daafc18d2ef127d9e612963';\nconst EMPTY_INIT_STATE = {\n  newSettings: [],\n  alreadySaved: new Map(),\n  subscriptionQueue: [],\n};\n\njest.mock('@/notifications/settings/firebase');\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane iOS Beta Deployment\nDESCRIPTION: Command to execute the beta lane for iOS, which submits a new build to Apple TestFlight for beta testing.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/ios/fastlane/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane ios beta\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Commands to start the local development server for the Rainbow Next.js project. Provides two options using either npm or yarn package managers.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/design-system/docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Event Category Examples (Bash)\nDESCRIPTION: Examples of how to structure analytics event categories with increasing specificity from left to right. Shows how to organize events related to the swaps feature into logical sub-categories.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/analytics/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nswaps.user_form\nswaps.backend_processing\n```\n\n----------------------------------------\n\nTITLE: Using Rainbow Internals Package\nDESCRIPTION: Example demonstrating how to import and use the Internals package, specifically showing the multiply function usage.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/ios/Internals/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Internals from \"@rainbow-me/internals\";\n\n// ...\n\nconst result = await Internals.multiply(3, 7);\n```\n\n----------------------------------------\n\nTITLE: Bump Android Version Code\nDESCRIPTION: Fastlane command to increment the version code for Android app builds.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/android/fastlane/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android bump_version_code\n```\n\n----------------------------------------\n\nTITLE: Deploy to Alpha Track\nDESCRIPTION: Fastlane command to deploy the Android app to the alpha testing track.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/android/fastlane/README.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android alpha\n```\n\n----------------------------------------\n\nTITLE: Deploy to Internal Track\nDESCRIPTION: Fastlane command to deploy the Android app to the internal testing track.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/android/fastlane/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android internal\n```\n\n----------------------------------------\n\nTITLE: Deploy to Beta Track\nDESCRIPTION: Fastlane command to deploy the Android app to the beta testing track.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/android/fastlane/README.md#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android beta\n```\n\n----------------------------------------\n\nTITLE: Deploy to Production\nDESCRIPTION: Fastlane command to deploy the Android app to the production track on Google Play Store.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/android/fastlane/README.md#2025-04-19_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android production\n```\n\n----------------------------------------\n\nTITLE: Release Version to Google Play\nDESCRIPTION: Fastlane command to upload a new version of the Android app to Google Play Store.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/android/fastlane/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android release_version\n```\n\n----------------------------------------\n\nTITLE: Event Action Examples (Bash)\nDESCRIPTION: Examples of complete event names with categories and past-tense actions. Demonstrates the convention of using past-tense verbs for the action portion of the event name.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/analytics/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nswaps.user_form.submitted\nswaps.backend_processing.network_failed\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Example\nDESCRIPTION: Command to run the included Node.js example with an ENS name parameter.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/ens-avatar/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode example/node.js ENS_NAME\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 1.9.14\nDESCRIPTION: Release notes for version 1.9.14 documenting new features, changes and fixes including backend driven cards and points notifications\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.9.14]\n\n### Added\n\n- Included new contract address to unlock Smol icon (#5311)\n- Backend driven cards (#5198)\n- Points notifications toggle opt-out (#5329)\n\n### Changed\n\n- Upgraded camera package (#5178)\n- Bumped fastlane (#5331)\n\n### Fixed\n\n- Bumped react-native-linear-gradient (#5328)\n- Fixes to rank cards in points tab (#5332)\n```\n\n----------------------------------------\n\nTITLE: Installing Watchman on MacOS for Rainbow Development\nDESCRIPTION: Command to install the Watchman file watching service on MacOS using Homebrew, which is required for React Native development.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install watchman\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS Development\nDESCRIPTION: Command to install CocoaPods, the dependency manager for iOS projects, using Ruby gems with superuser privileges.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Installing Linux System Dependencies for Rainbow Development\nDESCRIPTION: Command to install required system packages on Linux distributions using apt, including libsecret-tools and watchman which are needed for React Native development.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install libsecret-tools watchman\n```\n\n----------------------------------------\n\nTITLE: Incorrect Error Handling in Rainbow App\nDESCRIPTION: Example of incorrect error handling that will be ignored, showing what NOT to do when logging errors.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/logger/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  // some async code\n} catch (e) {\n  logger.error(e, { ...metadata });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fastlane via RubyGems\nDESCRIPTION: Command to install Fastlane using RubyGems package manager. The -NV flag installs without documentation and shows verbose output.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/ios/fastlane/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[sudo] gem install fastlane -NV\n```\n\n----------------------------------------\n\nTITLE: Testing Initial Notification Settings State\nDESCRIPTION: Tests the preparation of initial notification settings state with multiple wallet addresses and their relationship types. Verifies the correct structure of settings and subscription queue.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/notifications/settings/__tests__/initialization.test.txt#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst initState = _prepareInitializationState();\nexpect(initState).toEqual({\n  newSettings: stateBefore,\n  subscriptionQueue: [],\n  alreadySaved: new Map([\n    [TEST_ADDRESS_1, { index: 0, settings: stateBefore[0] }],\n    [TEST_ADDRESS_2, { index: 1, settings: stateBefore[1] }]\n  ])\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Subscription Queue Processing - Error Path\nDESCRIPTION: Verifies error handling during subscription queue processing, ensuring system stability when Firebase operations fail.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/notifications/settings/__tests__/initialization.test.txt#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('running subscription queue processing while firebase fails should produce no changes in the stored settings', async () => {\n  const stateBefore = [\n    {\n      address: TEST_ADDRESS_1,\n      type: WalletNotificationRelationship.OWNER,\n      successfullyFinishedInitialSubscription: false,\n      topics: DEFAULT_ENABLED_TOPIC_SETTINGS,\n      enabled: false\n    },\n    {\n      address: TEST_ADDRESS_2,\n      type: WalletNotificationRelationship.OWNER,\n      successfullyFinishedInitialSubscription: false,\n      topics: DEFAULT_ENABLED_TOPIC_SETTINGS,\n      enabled: false\n    }\n  ];\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools for Fastlane\nDESCRIPTION: Command to install the latest version of Xcode command line tools, which is a prerequisite for using Fastlane.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/ios/fastlane/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Building and Running Browser Demo\nDESCRIPTION: Commands to build the demo version of the library and serve it using http-server for browser testing.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/ens-avatar/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:demo\nhttp-server example\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Animated Charts\nDESCRIPTION: Command to install the package using yarn package manager.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/react-native-animated-charts/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-animated-charts\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools\nDESCRIPTION: Command to install the latest version of Xcode command line tools, which is a prerequisite for using Fastlane.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/android/fastlane/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Installing the ENS Avatar Library\nDESCRIPTION: Commands to install the ENS Avatar library using npm or yarn package managers.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/ens-avatar/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i @ensdomains/ens-avatar\n# yarn\nyarn add @ensdomains/ens-avatar\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 1.9.13\nDESCRIPTION: Release notes for version 1.9.13 documenting additional translations and developer settings changes\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.9.13]\n\n### Added\n\n- More translations for newer features (#5292)\n\n### Changed\n\n- Remove testnet option from developer settings (#5308)\n- Update what logs get sent to sentry (#5309)\n```\n\n----------------------------------------\n\nTITLE: Installing Rainbow Internals Package\nDESCRIPTION: Command to install the @rainbow-me/internals package using npm package manager.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/ios/Internals/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @rainbow-me/internals\n```\n\n----------------------------------------\n\nTITLE: Network and Wallet Scoped Storage Implementation in TypeScript\nDESCRIPTION: Example showing how to create and use a storage instance that's scoped to both network and wallet address. Demonstrates type guards and schema enforcement for strongly-typed storage.\nSOURCE: https://github.com/rainbow-me/rainbow/blob/develop/src/storage/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype NetworkAndWalletSchema = {\n  contacts: Contact[];\n};\n\nenum Network {\n  Mainnet = 'mainnet',\n  Optimism = 'optimism',\n}\n\ntype WalletAddress = `Ox${string}`;\n\nconst networkAndWallet = new Storage<[Network, WalletAddress], NetworkAndWalletSchema>({\n  id: 'networkAndWallet',\n});\n\nnetworkAndWallet.set([Network.Mainnet, '0x12345', 'contacts'], [{ name: 'rainbow.eth', address: '0x67890' }]);\n\nconst contacts: Contact[] = networkAndWallet.get([Network.Mainnet, '0x12345', 'contacts']);\n```"
  }
]