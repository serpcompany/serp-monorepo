[
  {
    "owner": "apache",
    "repo": "rocketmq-site",
    "content": "TITLE: Starting Broker Cluster in Master-Slave Asynchronous Mode\nDESCRIPTION: Commands to start multiple Broker masters and slaves in a cluster configuration with asynchronous replication.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/01deploy.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a.properties &\n \n### On machine B, start the second Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b.properties &\n \n### On machine C, start the first slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a-s.properties &\n \n### On machine D, start the second slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b-s.properties &\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Core Settings\nDESCRIPTION: Essential configuration settings that must be enabled in RocketMQ 4.9.3+ to support MQTT functionality.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenableLmq = true \nenableMutliDispatch = true\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Core Settings\nDESCRIPTION: Essential configuration settings that must be enabled in RocketMQ 4.9.3+ to support MQTT functionality.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenableLmq = true \nenableMutliDispatch = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Transactional Message Sending in Java\nDESCRIPTION: Demonstrates how to send transactional messages using the Java SDK for Apache RocketMQ 5.0. The code shows transaction creation, half message sending, local transaction execution, and transaction resolution with commit/rollback handling.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/04transactionmessage.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    // The demo is used to simulate the order table query service to check whether the order transaction is submitted. \n    private static boolean checkOrderById(String orderId) {\n        return true;\n    }\n    // The demo is used to simulate the execution result of a local transaction. \n    private static boolean doLocalTransaction() {\n        return true;\n    }\n    public static void main(String[] args) throws ClientException {\n        ClientServiceProvider provider = new ClientServiceProvider();\n        MessageBuilder messageBuilder = new MessageBuilder();\n        // Build a transaction producer: The transactional message requires the producer to build a transaction checker to check the intermediate status of an exceptional half message. \n        Producer producer = provider.newProducerBuilder()\n                .setTransactionChecker(messageView -> {\n                    /**\n                     * The transaction checker checks whether the local transaction is correctly committed or rolled back based on the business ID, for example, an order ID. \n                     * If this order is found in the order table, the order insertion action is committed correctly by the local transaction. If no order is found in the order table, the local transaction has been rolled back. \n                     */\n                    final String orderId = messageView.getProperties().get(\"OrderId\");\n                    if (Strings.isNullOrEmpty(orderId)) {\n                        // Message error. Rollback is returned. \n                        return TransactionResolution.ROLLBACK;\n                    }\n                    return checkOrderById(orderId) ? TransactionResolution.COMMIT : TransactionResolution.ROLLBACK;\n                })\n                .build();\n        // Create a transaction branch. \n        final Transaction transaction;\n        try {\n            transaction = producer.beginTransaction();\n        } catch (ClientException e) {\n            e.printStackTrace();\n            // If the transaction branch fails to be created, the transaction is terminated. \n            return;\n        }\n        Message message = messageBuilder.setTopic(\"topic\")\n                // Specify the message index key so that the system can use a keyword to accurately locate the message. \n                .setKeys(\"messageKey\")\n                // Specify the message tag so that consumers can use the tag to filter the message. \n                .setTag(\"messageTag\")\n                // For transactional messages, a unique ID associated with the local transaction is created to verify the query of the local transaction status. \n                .addProperty(\"OrderId\", \"xxx\")\n                // Message body. \n                .setBody(\"messageBody\".getBytes())\n                .build();\n        // Send a half message.\n        final SendReceipt sendReceipt;\n        try {\n            sendReceipt = producer.send(message, transaction);\n        } catch (ClientException e) {\n            // If the half message fails to be sent, the transaction can be terminated and the message is rolled back. \n            return;\n        }\n        /**\n         * Execute the local transaction and check the execution result. \n         * 1. If the result is Commit, deliver the message. \n         * 2. If the result is Rollback, roll back the message. \n         * 3. If an unknown exception occurs, no action is performed until a response is obtained from a half message status query. \n         *\n         */\n        boolean localTransactionOk = doLocalTransaction();\n        if (localTransactionOk) {\n            try {\n                transaction.commit();\n            } catch (ClientException e) {\n                // You can determine whether to retry the message based on your business requirements. If you do not want to retry the message, you can use the half message status query to submit the transaction status. \n                e.printStackTrace();\n            }\n        } else {\n            try {\n                transaction.rollback();\n            } catch (ClientException e) {\n                // We recommend that you record the exception information. This enables you to submit the transaction status based on the half message status query in the event of a rollback exception. Otherwise, you have to retry the message. \n                e.printStackTrace();\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Synchronous Message Sending in RocketMQ\nDESCRIPTION: This Java code demonstrates synchronous message sending in RocketMQ. It creates a producer, sets up the NameServer address, builds messages, and sends them synchronously. It includes error handling and proper producer shutdown.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/02message1.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class SyncProducer {\n  public static void main(String[] args) throws Exception {\n    // Initialize a producer and set the Producer group name\n    DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\"); //（1）\n    // Set the address of NameServer\n    producer.setNamesrvAddr(\"localhost:9876\");  //（2）\n    // Start Producer\n    producer.start();\n    for (int i = 0; i < 100; i++) {\n      // Create a message and set the topic, tag, body and so on. The tag can be understood as a label to categorize the message, and RocketMQ can filter the tag on the consumer side.\n      Message msg = new Message(\"TopicTest\" /* Topic */,\n        \"TagA\" /* Tag */,\n        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n        );   //（3）\n      // Use the producer to send and wait for the result of sending synchronously\n      SendResult sendResult = producer.send(msg);   //（4）\n      System.out.printf(\"%s%n\", sendResult);\n    }\n    // Close the producer once it is no longer in use\n    producer.shutdown();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic JVM Heap Settings for RocketMQ\nDESCRIPTION: Basic server JVM configuration for RocketMQ with 8GB heap and 4GB young generation. These settings prevent the JVM from adjusting heap size by setting the same Xms and Xmx values for better performance.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-server -Xms8g -Xmx8g -Xmn4g \n```\n\n----------------------------------------\n\nTITLE: Java Producer Example for RocketMQ\nDESCRIPTION: A complete Java example that demonstrates how to create a producer and send messages to RocketMQ. It includes setting up the client configuration, creating a producer, building a message with keys and tags, and sending it to the specified topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientConfigurationBuilder;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.message.Message;\nimport org.apache.rocketmq.client.apis.producer.Producer;\nimport org.apache.rocketmq.client.apis.producer.SendReceipt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProducerExample {\n    private static final Logger logger = LoggerFactory.getLogger(ProducerExample.class);\n\n    public static void main(String[] args) throws ClientException {\n        // 接入点地址，需要设置成Proxy的地址和端口列表，一般是xxx:8080;xxx:8081\n        String endpoint = \"localhost:8081\";\n        // 消息发送的目标Topic名称，需要提前创建。\n        String topic = \"TestTopic\";\n        ClientServiceProvider provider = ClientServiceProvider.loadService();\n        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);\n        ClientConfiguration configuration = builder.build();\n        // 初始化Producer时需要设置通信配置以及预绑定的Topic。\n        Producer producer = provider.newProducerBuilder()\n            .setTopics(topic)\n            .setClientConfiguration(configuration)\n            .build();\n        // 普通消息发送。\n        Message message = provider.newMessageBuilder()\n            .setTopic(topic)\n            // 设置消息索引键，可根据关键字精确查找某条消息。\n            .setKeys(\"messageKey\")\n            // 设置消息Tag，用于消费端根据指定Tag过滤消息。\n            .setTag(\"messageTag\")\n            // 消息体。\n            .setBody(\"messageBody\".getBytes())\n            .build();\n        try {\n            // 发送消息，需要关注发送结果，并捕获失败等异常。\n            SendReceipt sendReceipt = producer.send(message);\n            logger.info(\"Send message successfully, messageId={}\", sendReceipt.getMessageId());\n        } catch (ClientException e) {\n            logger.error(\"Failed to send message\", e);\n        }\n        // producer.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Message Sending in RocketMQ\nDESCRIPTION: This Java code demonstrates asynchronous message sending in RocketMQ. It creates a producer, sets up the NameServer address, builds messages, and sends them asynchronously using a callback. It includes error handling and proper producer shutdown.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/02message1.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncProducer {\n  public static void main(String[] args) throws Exception {\n    // Initialize a producer and set the Producer group name\n    DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n    // Set the address of NameServer\n    producer.setNamesrvAddr(\"localhost:9876\");\n    // Start Producer\n    producer.start();\n    producer.setRetryTimesWhenSendAsyncFailed(0);\n    int messageCount = 100;\n    final CountDownLatch countDownLatch = new CountDownLatch(messageCount);\n    for (int i = 0; i < messageCount; i++) {\n      try {\n          final int index = i;\n          // Create a message and set the topic, tag, body and so on. The tag can be understood as a label to categorize the message, and RocketMQ can filter the tag on the consumer side.\n          Message msg = new Message(\"TopicTest\",\n            \"TagA\",\n            \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n            // Send a message asynchronously, the result is returned to the client by callback\n          producer.send(msg, new SendCallback() {\n            @Override\n            public void onSuccess(SendResult sendResult) {\n              System.out.printf(\"%-10d OK %s %n\", index,\n                sendResult.getMsgId());\n              countDownLatch.countDown();\n            }\n            @Override\n            public void onException(Throwable e) {\n              System.out.printf(\"%-10d Exception %s %n\", index, e);\n              e.printStackTrace();\n              countDownLatch.countDown();\n            }\n          });\n        } catch (Exception e) {\n            e.printStackTrace();\n            countDownLatch.countDown();\n        }\n    }\n    //If reliable transmission is required for asynchronous sending, the logic must not be terminated until a clear result is returned from the callback interface. Otherwise, closing the Producer immediately may result in some messages not being successfully transmitted.\n    countDownLatch.await(5, TimeUnit.SECONDS);\n    // Close the producer once it is no longer in use\n    producer.shutdown();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Push Consumer Example for RocketMQ\nDESCRIPTION: A complete Java example showing how to implement a Push Consumer for RocketMQ. It demonstrates configuring the client, setting up subscription expressions with filtering, and implementing a message listener to process received messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.IOException;\nimport java.util.Collections;\norg.apache.rocketmq.client.apis.ClientConfiguration;\norg.apache.rocketmq.client.apis.ClientException;\norg.apache.rocketmq.client.apis.ClientServiceProvider;\norg.apache.rocketmq.client.apis.consumer.ConsumeResult;\norg.apache.rocketmq.client.apis.consumer.FilterExpression;\norg.apache.rocketmq.client.apis.consumer.FilterExpressionType;\norg.apache.rocketmq.client.apis.consumer.PushConsumer;\norg.slf4j.Logger;\norg.slf4j.LoggerFactory;\n\npublic class PushConsumerExample {\n    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);\n\n    private PushConsumerExample() {\n    }\n\n    public static void main(String[] args) throws ClientException, IOException, InterruptedException {\n        final ClientServiceProvider provider = ClientServiceProvider.loadService();\n        // 接入点地址，需要设置成Proxy的地址和端口列表，一般是xxx:8080;xxx:8081\n        String endpoints = \"localhost:8081\";\n        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()\n            .setEndpoints(endpoints)\n            .build();\n        // 订阅消息的过滤规则，表示订阅所有Tag的消息。\n        String tag = \"*\";\n        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);\n        // 为消费者指定所属的消费者分组，Group需要提前创建。\n        String consumerGroup = \"YourConsumerGroup\";\n        // 指定需要订阅哪个目标Topic，Topic需要提前创建。\n        String topic = \"TestTopic\";\n        // 初始化PushConsumer，需要绑定消费者分组ConsumerGroup、通信参数以及订阅关系。\n        PushConsumer pushConsumer = provider.newPushConsumerBuilder()\n            .setClientConfiguration(clientConfiguration)\n            // 设置消费者分组。\n            .setConsumerGroup(consumerGroup)\n            // 设置预绑定的订阅关系。\n            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n            // 设置消费监听器。\n            .setMessageListener(messageView -> {\n                // 处理消息并返回消费结果。\n                logger.info(\"Consume message successfully, messageId={}\", messageView.getMessageId());\n                return ConsumeResult.SUCCESS;\n            })\n            .build();\n        Thread.sleep(Long.MAX_VALUE);\n        // 如果不需要再使用 PushConsumer，可关闭该实例。\n        // pushConsumer.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Consumer Usage in Java for Apache RocketMQ\nDESCRIPTION: This snippet demonstrates the recommended way to use a consumer in Apache RocketMQ. It creates a single consumer instance that is reused for multiple message receives, which is more efficient than creating and destroying consumers frequently.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/03-domainModel/08consumer.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nConsumer c = ConsumerBuilder.build();\nfor (int i =0;i<n;i++){\n      Message m= c.receive();\n      //process message\n    }\nc.shutdown();\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered Consumption in RocketMQ Using MessageListenerOrderly\nDESCRIPTION: Example showing how to register a MessageListenerOrderly implementation for ordered message consumption with logic for handling different consumption scenarios.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/02push.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nconsumer.registerMessageListener(new MessageListenerOrderly() {\n            AtomicLong consumeTimes = new AtomicLong(0);\n            @Override\n            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                this.consumeTimes.incrementAndGet();\n                if ((this.consumeTimes.get() % 2) == 0) {\n                    return ConsumeOrderlyStatus.SUCCESS;\n                } else if ((this.consumeTimes.get() % 5) == 0) {\n                    context.setSuspendCurrentQueueTimeMillis(3000);\n                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;\n                }\n                return ConsumeOrderlyStatus.SUCCESS;\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Building SFTP Connector Plugin for RocketMQ Connect\nDESCRIPTION: Commands to build the SFTP Connector Plugin and copy the resulting JAR file to the plugin directory for runtime loading.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/connectors/rocketmq-connect-sftp/\n\nmvn clean package -Dmaven.test.skip=true\n\nmkdir -p /Users/YourUsername/rocketmqconnect/connector-plugins\ncp target/rocketmq-connect-sftp-0.0.1-SNAPSHOT-jar-with-dependencies.jar /Users/YourUsername/rocketmqconnect/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Message Producer in RocketMQ\nDESCRIPTION: Shows how to create a batch message producer that sends multiple messages in a single batch. The implementation demonstrates creating a DefaultMQProducer, preparing multiple messages with the same topic, and sending them as a batch. Messages must be under 1MiB total size and share the same topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/05message4.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleBatchProducer {\n\n    public static void main(String[] args) throws Exception {\n        DefaultMQProducer producer = new DefaultMQProducer(\"BatchProducerGroupName\");\n        producer.start();\n\n        //If you just send messages of no more than 1MiB at a time, it is easy to use batch\n        //Messages of the same batch should have: same topic, same waitStoreMsgOK and no schedule support\n        String topic = \"BatchTest\";\n        List<Message> messages = new ArrayList<>();\n        messages.add(new Message(topic, \"Tag\", \"OrderID001\", \"Hello world 0\".getBytes()));\n        messages.add(new Message(topic, \"Tag\", \"OrderID002\", \"Hello world 1\".getBytes()));\n        messages.add(new Message(topic, \"Tag\", \"OrderID003\", \"Hello world 2\".getBytes()));\n\n        producer.send(messages);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transactional Message Sending in Java with Apache RocketMQ\nDESCRIPTION: This code snippet demonstrates how to implement transactional message sending using Apache RocketMQ. It sets up a TransactionMQProducer, configures a custom thread pool for transaction checks, and implements the TransactionListener interface to handle local transaction execution and status checks.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/06message5.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TransactionProducer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        TransactionListener transactionListener = new TransactionListenerImpl();\n        TransactionMQProducer producer = new TransactionMQProducer(\"please_rename_unique_group_name\");\n        ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {\n            @Override\n            public Thread newThread(Runnable r) {\n                Thread thread = new Thread(r);\n                thread.setName(\"client-transaction-msg-check-thread\");\n                return thread;\n            }\n        });\n\n        producer.setExecutorService(executorService);\n        producer.setTransactionListener(transactionListener);\n        producer.start();\n\n        String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n        for (int i = 0; i < 10; i++) {\n            try {\n                Message msg =\n                    new Message(\"TopicTest\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.sendMessageInTransaction(msg, null);\n                System.out.printf(\"%s%n\", sendResult);\n\n                Thread.sleep(10);\n            } catch (MQClientException | UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n\n        for (int i = 0; i < 100000; i++) {\n            Thread.sleep(1000);\n        }\n        producer.shutdown();\n    }\n\n    static class TransactionListenerImpl implements TransactionListener {\n        private AtomicInteger transactionIndex = new AtomicInteger(0);\n\n        private ConcurrentHashMap<String, Integer> localTrans = new ConcurrentHashMap<>();\n\n        @Override\n        public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n            int value = transactionIndex.getAndIncrement();\n            int status = value % 3;\n            localTrans.put(msg.getTransactionId(), status);\n            return LocalTransactionState.UNKNOW;\n        }\n\n        @Override\n        public LocalTransactionState checkLocalTransaction(MessageExt msg) {\n            Integer status = localTrans.get(msg.getTransactionId());\n            if (null != status) {\n                switch (status) {\n                    case 0:\n                        return LocalTransactionState.UNKNOW;\n                    case 1:\n                        return LocalTransactionState.COMMIT_MESSAGE;\n                    case 2:\n                        return LocalTransactionState.ROLLBACK_MESSAGE;\n                    default:\n                        return LocalTransactionState.COMMIT_MESSAGE;\n                }\n            }\n            return LocalTransactionState.COMMIT_MESSAGE;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message-Based Load Balancing for Push and Simple Consumers in Java\nDESCRIPTION: This code snippet demonstrates how to implement message-based load balancing for push consumers and simple consumers in Apache RocketMQ using Java. It shows two consumption examples: one using a MessageListener for push consumers, and another using the receive method for simple consumers. The code handles message processing, acknowledgment, and error handling.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/08consumerloadbalance.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n        SimpleConsumer simpleConsumer = null;\n        // Consumption example 1: When push consumers consume normal messages, they need only to process messages on a message listener and do not need to consider load balancing. \n        MessageListener messageListener = new MessageListener() {\n            @Override\n            public ConsumeResult consume(MessageView messageView) {\n                System.out.println(messageView);\n                // Return the status based on the consumption result. \n                return ConsumeResult.SUCCESS;\n            }\n        };\n        // Consumption example 2: When simple consumers consume normal messages, they obtain and submit messages. The consumers obtain messages based on the subscribed topic and do not need to consider load balancing. \n        List<MessageView> messageViewList = null;\n        try {\n            messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));\n            messageViewList.forEach(messageView -> {\n                System.out.println(messageView);\n                // After consumption is complete, consumers must invoke ACK to submit the consumption result. \n                try {\n                    simpleConsumer.ack(messageView);\n                } catch (ClientException e) {\n                    e.printStackTrace();\n                }\n            });\n        } catch (ClientException e) {\n            // If the pull fails due to system traffic throttling or other reasons, consumers must re-initiate the request to obtain the message. \n            e.printStackTrace();\n        }\n```\n\n----------------------------------------\n\nTITLE: Sending Ordered Messages in Java with Apache RocketMQ\nDESCRIPTION: This Java code demonstrates how to send ordered messages using Apache RocketMQ. It creates a producer, sends 100 messages with different tags, and uses a MessageQueueSelector to ensure messages with the same orderId are sent to the same queue.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/03message2.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Producer {\n    public static void main(String[] args) throws UnsupportedEncodingException {\n        try {\n            DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n            producer.start();\n\n            String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n            for (int i = 0; i < 100; i++) {\n                int orderId = i % 10;\n                Message msg =\n                    new Message(\"TopicTest\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.send(msg, new MessageQueueSelector() {\n                    @Override\n                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                        Integer id = (Integer) arg;\n                        int index = id % mqs.size();\n                        return mqs.get(index);\n                    }\n                }, orderId);\n\n                System.out.printf(\"%s%n\", sendResult);\n            }\n\n            producer.shutdown();\n        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lite Pull Consumer with Assign Mode in RocketMQ Java\nDESCRIPTION: This code shows how to use the Lite Pull Consumer in Assign mode. It fetches message queues, assigns specific queues to the consumer, sets a custom starting offset, and manually commits offsets. This mode provides more control over queue assignment and offset management.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/03pull.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class LitePullConsumerAssign {\n    public static volatile boolean running = true;\n    public static void main(String[] args) throws Exception {\n        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer(\"please_rename_unique_group_name\");\n        litePullConsumer.setAutoCommit(false);\n        litePullConsumer.start();\n        Collection<MessageQueue> mqSet = litePullConsumer.fetchMessageQueues(\"TopicTest\");\n        List<MessageQueue> list = new ArrayList<>(mqSet);\n        List<MessageQueue> assignList = new ArrayList<>();\n        for (int i = 0; i < list.size() / 2; i++) {\n            assignList.add(list.get(i));\n        }\n        litePullConsumer.assign(assignList);\n        litePullConsumer.seek(assignList.get(0), 10);\n        try {\n            while (running) {\n                List<MessageExt> messageExts = litePullConsumer.poll();\n                System.out.printf(\"%s %n\", messageExts);\n                litePullConsumer.commitSync();\n            }\n        } finally {\n            litePullConsumer.shutdown();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting JDBC MySQL Sink Connector via REST API\nDESCRIPTION: curl command to create a JDBC MySQL sink connector via the RocketMQ Connect REST API. This connector consumes messages from the RocketMQ topic and writes them to the MySQL target table using JDBC.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest201 -d '{\n  \"connector.class\": \"org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector\",\n  \"max.task\": \"2\",\n  \"connect.topicnames\": \"debezium-postgres-source-01\",\n  \"connection.url\": \"jdbc:mysql://database ip:3306/bank1\",\n  \"connection.user\": \"root\",\n  \"connection.password\": \"debezium\",\n  \"pk.fields\": \"holding_id\",\n  \"table.name.from.header\": \"true\",\n  \"pk.mode\": \"record_key\",\n  \"insert.mode\": \"UPSERT\",\n  \"db.timezone\": \"UTC\",\n  \"table.types\": \"TABLE\",\n  \"errors.deadletterqueue.topic.name\": \"dlq-topic\",\n  \"errors.log.enable\": \"true\",\n  \"errors.tolerance\": \"ALL\",\n  \"delete.enabled\": \"true\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring RocketMQ Push Consumer in Java\nDESCRIPTION: Sample code demonstrating how to initialize a DefaultMQPushConsumer, set the NameServer address, subscribe to topics, and implement a message listener for concurrent consumption.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/02push.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Consumer {\n  public static void main(String[] args) throws InterruptedException, MQClientException {\n    // Initialize Consumer and set Consumer Goup Name\n    DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name\");\n   \n    // Set the address of NameServer \n    consumer.setNamesrvAddr(\"localhost:9876\");\n    // Subscribe One or more of topics，and specify the tag filtering conditions, here specify * means receive all tag messages\n    consumer.subscribe(\"TopicTest\", \"*\");\n    // Register a callback interface to handle messages received from the Broker\n    consumer.registerMessageListener(new MessageListenerConcurrently() {\n      @Override\n      public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n        System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n        // Return to the message consumption status, ConsumeConcurrentlyStatus.CONSUME_SUCCESS for successful consumption\n        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n      }\n    });\n    // Start Consumer\n    consumer.start();\n    System.out.printf(\"Consumer Started.%n\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Push Consumer in RocketMQ\nDESCRIPTION: Basic implementation of a RocketMQ push consumer that demonstrates initialization, subscription to topics, and message handling through a concurrent listener.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/03-consumer/02push.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Consumer {\n  public static void main(String[] args) throws InterruptedException, MQClientException {\n    // 初始化consumer，并设置consumer group name\n    DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name\");\n   \n    // 设置NameServer地址 \n    consumer.setNamesrvAddr(\"localhost:9876\");\n    //订阅一个或多个topic，并指定tag过滤条件，这里指定*表示接收所有tag的消息\n    consumer.subscribe(\"TopicTest\", \"*\");\n    //注册回调接口来处理从Broker中收到的消息\n    consumer.registerMessageListener(new MessageListenerConcurrently() {\n      @Override\n      public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n        System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n        // 返回消息消费状态，ConsumeConcurrentlyStatus.CONSUME_SUCCESS为消费成功\n        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n      }\n    });\n    // 启动Consumer\n    consumer.start();\n    System.out.printf(\"Consumer Started.%n\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WordCount Stream Processing with RocketMQ Streams\nDESCRIPTION: Java example demonstrating a WordCount application using RocketMQ Streams. The program reads messages from a source topic, splits the text into words, counts word occurrences, and prints the results. It includes proper shutdown handling with a countdown latch.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/09-streams/03RocketMQ Streams Quick Start.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class WordCount {\n    public static void main(String[] args) {\n        StreamBuilder builder = new StreamBuilder(\"wordCount\");\n\n        builder.source(\"sourceTopic\", total -> {\n                    String value = new String(total, StandardCharsets.UTF_8);\n                    return new Pair<>(null, value);\n                })\n                .flatMap((ValueMapperAction<String, List<String>>) value -> {\n                    String[] splits = value.toLowerCase().split(\"\\\\W+\");\n                    return Arrays.asList(splits);\n                })\n                .keyBy(value -> value)\n                .count()\n                .toRStream()\n                .print();\n\n        TopologyBuilder topologyBuilder = builder.build();\n\n        Properties properties = new Properties();\n        properties.put(MixAll.NAMESRV_ADDR_PROPERTY, \"127.0.0.1:9876\");\n\n        RocketMQStream rocketMQStream = new RocketMQStream(topologyBuilder, properties);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        Runtime.getRuntime().addShutdownHook(new Thread(\"wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                rocketMQStream.stop();\n                latch.countDown();\n            }\n        });\n\n        try {\n            rocketMQStream.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Message Sending with DefaultMQProducer in Java\nDESCRIPTION: This example demonstrates how to batch multiple messages together and send them at once using Apache RocketMQ's DefaultMQProducer. The code creates a producer instance, starts it, and sends three messages in a single batch to improve throughput. Note that batch messages must share the same topic and cannot exceed 1MiB in total size.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/02-producer/05message4.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleBatchProducer {\n\n    public static void main(String[] args) throws Exception {\n        DefaultMQProducer producer = new DefaultMQProducer(\"BatchProducerGroupName\");\n        producer.start();\n\n        //If you just send messages of no more than 1MiB at a time, it is easy to use batch\n        //Messages of the same batch should have: same topic, same waitStoreMsgOK and no schedule support\n        String topic = \"BatchTest\";\n        List<Message> messages = new ArrayList<>();\n        messages.add(new Message(topic, \"Tag\", \"OrderID001\", \"Hello world 0\".getBytes()));\n        messages.add(new Message(topic, \"Tag\", \"OrderID002\", \"Hello world 1\".getBytes()));\n        messages.add(new Message(topic, \"Tag\", \"OrderID003\", \"Hello world 2\".getBytes()));\n\n        producer.send(messages);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Topics with Message Type in Apache RocketMQ 5.0 using mqadmin CLI\nDESCRIPTION: This command demonstrates how to create or update a topic in Apache RocketMQ 5.0 using the mqadmin tool. It shows how to specify the nameserver address, topic name, cluster name, and message type (Normal/FIFO/Delay/Transaction) through the message.type attribute parameter.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/03-domainModel/02topic.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=<message_type>\n```\n\n----------------------------------------\n\nTITLE: Implementing PushConsumer for Message Consumption in Java\nDESCRIPTION: This example demonstrates how to create and configure a PushConsumer to consume messages in Apache RocketMQ. It shows the complete setup including consumer group configuration, endpoint specification, subscription expression setup, and message listener implementation.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/06consumertype.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Message consumption example: Use a PushConsumer consumer to consume messages. \nClientServiceProvider provider = ClientServiceProvider.loadService();\nString topic = \"YourTopic\";\nFilterExpression filterExpression = new FilterExpression(\"YourFilterTag\", FilterExpressionType.TAG);\nPushConsumer pushConsumer = provider.newPushConsumerBuilder()\n    // Configure consumer group. \n    .setConsumerGroup(\"YourConsumerGroup\")\n    // Specify the access point. \n    .setClientConfiguration(ClientConfiguration.newBuilder().setEndpoints(\"YourEndpoint\").build())\n    // Specify the pre-bound subscriptions. \n    .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n    // Set the message listener. \n    .setMessageListener(new MessageListener() {\n        @Override\n        public ConsumeResult consume(MessageView messageView) {\n            // Consume the messages and return the consumption result. \n            return ConsumeResult.SUCCESS;\n        }\n    })\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Java Push Consumer Example with RocketMQ Client SDK\nDESCRIPTION: Complete Java example demonstrating how to create a push consumer that subscribes to a topic and processes incoming messages from a RocketMQ broker.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/01quickstart.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.IOException;\nimport java.util.Collections;\nimport org.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.consumer.ConsumeResult;\nimport org.apache.rocketmq.client.apis.consumer.FilterExpression;\nimport org.apache.rocketmq.client.apis.consumer.FilterExpressionType;\nimport org.apache.rocketmq.client.apis.consumer.PushConsumer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class PushConsumerExample {\n    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);\n\n    private PushConsumerExample() {\n    }\n\n    public static void main(String[] args) throws ClientException, IOException, InterruptedException {\n        final ClientServiceProvider provider = ClientServiceProvider.loadService();\n        String endpoints = \"localhost:8081\";\n        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()\n            .setEndpoints(endpoints)\n            .build();\n        String tag = \"*\";\n        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);\n        String consumerGroup = \"YourConsumerGroup\";\n        String topic = \"TestTopic\";\n        PushConsumer pushConsumer = provider.newPushConsumerBuilder()\n            .setClientConfiguration(clientConfiguration)\n            .setConsumerGroup(consumerGroup)\n            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n            .setMessageListener(messageView -> {\n                logger.info(\"Consume message successfully, messageId={}\", messageView.getMessageId());\n                return ConsumeResult.SUCCESS;\n            })\n            .build();\n        Thread.sleep(Long.MAX_VALUE);\n        // pushConsumer.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Message Consumption in RocketMQ Consumer\nDESCRIPTION: Demonstrates how to implement logging for received messages in a consumer. Logging message details at the beginning of consumption helps with troubleshooting and performance analysis.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/01bestpractice.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n   public ConsumeConcurrentlyStatus consumeMessage(\n            List<MessageExt> msgs,\n            ConsumeConcurrentlyContext context) {\n        log.info(\"RECEIVE_MSG_BEGIN: \" + msgs.toString());\n        // TODO 正常消费过程\n        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n    }   \n```\n\n----------------------------------------\n\nTITLE: Sending and Consuming Normal Messages in Apache RocketMQ using Java\nDESCRIPTION: This code snippet illustrates how to send and receive normal messages in Apache RocketMQ using Java. It includes examples of setting message properties, sending messages, and two methods of consuming messages: push consumer and simple consumer.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/01normalmessage.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Send a normal message. \n  MessageBuilder messageBuilder = new MessageBuilder();\n  Message message = messageBuilder.setTopic(\"topic\")\n  // Specify the message index key so that you can accurately search for the message by using a keyword.\n  .setKeys(\"messageKey\")\n  // Specify the message tag so that the consumer can filter the message based on the specified tag.\n  .setTag(\"messageTag\")\n  // Message body. \n  .setBody(\"messageBody\".getBytes())\n  .build();\n  try {\n    // Send the message. You need to pay attention to the sending result and capture exceptions such as failures. \n    SendReceipt sendReceipt = producer.send(message);\n    System.out.println(sendReceipt.getMessageId());\n  } catch (ClientException e) {\n      e.printStackTrace();\n  }\n  // Consumption example 1: When you consume a normal message as a push consumer, you need only to process the message in the message listener. \n  MessageListener messageListener = new MessageListener() {\n      @Override\n      public ConsumeResult consume(MessageView messageView) {\n          System.out.println(messageView);\n          // Return the status based on the consumption result. \n          return ConsumeResult.SUCCESS;\n      }\n  };\n  // Consumption example 2: When you consume a normal message as a simple consumer, you must obtain and consume the message, and submit the consumption result. \n  List<MessageView> messageViewList = null;\n  try {\n      messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));\n      messageViewList.forEach(messageView -> {\n          System.out.println(messageView);\n          // After consumption is complete, you must invoke ACK to submit the consumption result. \n          try {\n              simpleConsumer.ack(messageView);\n          } catch (ClientException e) {\n              e.printStackTrace();\n          }\n      });\n      } catch (ClientException e) {\n      // If the pull fails due to system traffic throttling or other reasons, you must re-initiate the request to obtain the message. \n      e.printStackTrace();\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Retry with PushConsumer in Java\nDESCRIPTION: Example showing how to implement message retry logic using a push consumer in Apache RocketMQ. The code demonstrates setting up a MessageListener that triggers message retry by returning a failure status.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/10consumerretrypolicy.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n        SimpleConsumer simpleConsumer = null;\n        // Consumption example: Consume normal messages as a push consumer and trigger a message retry by using a consumption failure. \n        MessageListener messageListener = new MessageListener() {\n            @Override\n            public ConsumeResult consume(MessageView messageView) {\n                System.out.println(messageView);\n                // Retry the message until the maximum number of retries is reached. \n                return ConsumeResult.FAILURE;\n            }\n        };\n```\n\n----------------------------------------\n\nTITLE: Setting Message Keys in RocketMQ Java Producer\nDESCRIPTION: Demonstrates how to set a unique identifier (order ID) as the message key in RocketMQ. This is crucial for locating messages and avoiding potential hash collisions in the server's index.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/01bestpractice.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n   // order Id   \n   String orderId = \"20034568923546\";   \n   message.setKeys(orderId);   \n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages with Multiple Tags in Apache RocketMQ (Java)\nDESCRIPTION: This code snippet demonstrates how to subscribe to messages with multiple tags in Apache RocketMQ. It uses a FilterExpression with multiple tags separated by '||'.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/07messagefilter.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString topic = \"Your Topic\";\n// Subscribe to messages that carry tag TagA, TagB, or TagC. \nFilterExpression filterExpression = new FilterExpression(\"TagA||TagB||TagC\", FilterExpressionType.TAG);\npushConsumer.subscribe(topic, filterExpression);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lite Pull Consumer with Subscribe Mode in RocketMQ Java\nDESCRIPTION: This code demonstrates how to use the Lite Pull Consumer in Subscribe mode. It initializes a DefaultLitePullConsumer, subscribes to a topic, and continuously polls for messages. This mode provides automatic load balancing for multiple consumers in the same group.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/03pull.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class LitePullConsumerSubscribe {\n    public static volatile boolean running = true;\n    public static void main(String[] args) throws Exception {\n        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer(\"lite_pull_consumer_test\");\n        litePullConsumer.subscribe(\"TopicTest\", \"*\");\n        litePullConsumer.setPullBatchSize(20);\n        litePullConsumer.start();\n        try {\n            while (running) {\n                List<MessageExt> messageExts = litePullConsumer.poll();\n                System.out.printf(\"%s%n\", messageExts);\n            }\n        } finally {\n            litePullConsumer.shutdown();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Delayed Messages in Java using Apache RocketMQ\nDESCRIPTION: This Java code demonstrates how to send delayed messages using Apache RocketMQ. It creates a producer, sends 100 messages with a delay level of 3 (10 seconds), and then shuts down the producer.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/02-producer/04message3.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ScheduledMessageProducer {\n    public static void main(String[] args) throws Exception {\n        // Instantiate a producer to send scheduled messages\n        DefaultMQProducer producer = new DefaultMQProducer(\"ExampleProducerGroup\");\n        // Launch producer\n        producer.start();\n        int totalMessagesToSend = 100;\n        for (int i = 0; i < totalMessagesToSend; i++) {\n            Message message = new Message(\"TestTopic\", (\"Hello scheduled message \" + i).getBytes());\n            // This message will be delivered to consumer 10 seconds later.\n            message.setDelayTimeLevel(3);\n            // Send the message\n            producer.send(message);\n        }\n        \n        // Shutdown producer after use.\n        producer.shutdown();\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Stopping RocketMQ Services with Docker Compose\nDESCRIPTION: Command to stop and remove all the RocketMQ containers that were started with Docker Compose, cleaning up the deployment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleConsumer in Java for Apache RocketMQ\nDESCRIPTION: This code demonstrates how to create and use a SimpleConsumer in Apache RocketMQ. It shows the complete process of configuring a consumer, receiving messages in batches, processing them, and acknowledging successful consumption. The example includes error handling for both message acknowledgment and message reception failures.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/06consumertype.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Consumption example: When a SimpleConsumer consumer consumes normal messages, the consumer obtain messages and commit message consumption results. \nClientServiceProvider provider = ClientServiceProvider.loadService();\nString topic = \"YourTopic\";\nFilterExpression filterExpression = new FilterExpression(\"YourFilterTag\", FilterExpressionType.TAG);\nSimpleConsumer simpleConsumer = provider.newSimpleConsumerBuilder()\n        // Configure consumer group.\n        .setConsumerGroup(\"YourConsumerGroup\")\n        // Specify the access point. \n        .setClientConfiguration(ClientConfiguration.newBuilder().setEndpoints(\"YourEndpoint\").build())\n        // Specify the pre-bound subscriptions. \n        .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n        // Specify the max await time when receive messages from the server.\n        .setAwaitDuration(Duration.ofSeconds(1))\n        .build();\ntry {\n    // A SimpleConsumer consumer must obtain and process messages. \n    List<MessageView> messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));\n    messageViewList.forEach(messageView -> {\n        System.out.println(messageView);\n        // After consumption is complete, the consumer must invoke ACK to submit the consumption result. \n        try {\n            simpleConsumer.ack(messageView);\n        } catch (ClientException e) {\n            logger.error(\"Failed to ack message, messageId={}\", messageView.getMessageId(), e);\n        }\n    });\n} catch (ClientException e) {\n    // If the pull fails due to system traffic throttling or other reasons, the consumer must re-initiate the request to obtain the message. \n    logger.error(\"Failed to receive message\", e);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delay Message Processing in Java\nDESCRIPTION: Complete Java implementation showing how to send delay messages with custom delivery timestamps and consume them using both push consumer and simple consumer patterns. Includes error handling and message acknowledgment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/02delaymessage.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n        // Send delay messages.\n        MessageBuilder messageBuilder = null;\n        // Specify a millisecond-level Unix timestamp. In this example, the specified timestamp indicates that the message will be delivered in 10 minutes from the current time. \n        Long deliverTimeStamp = System.currentTimeMillis() + 10L * 60 * 1000;\n        Message message = messageBuilder.setTopic(\"topic\")\n                // Specify the message index key. The system uses the key to locate the message. \n                .setKeys(\"messageKey\")\n                // Specify the message tag. The consumer can use the tag to filter messages. \n                .setTag(\"messageTag\")\n                .setDeliveryTimestamp(deliverTimeStamp)\n                // Configure the message body.\n                .setBody(\"messageBody\".getBytes())\n                .build();\n        try {\n            // Send the messages. Focus on the result of message sending and exceptions such as failures. \n            SendReceipt sendReceipt = producer.send(message);\n            System.out.println(sendReceipt.getMessageId());\n        } catch (ClientException e) {\n            e.printStackTrace();\n        }\n        // Consumption example 1: If a scheduled message is consumed by a push consumer, the consumer needs to process the message only in the message listener. \n        MessageListener messageListener = new MessageListener() {\n            @Override\n            public ConsumeResult consume(MessageView messageView) {\n                System.out.println(messageView.getDeliveryTimestamp());\n                // Return the status based on the consumption result. \n                return ConsumeResult.SUCCESS;\n            }\n        };\n        // Consumption example 2: If a scheduled message is consumed by a simple consumer, the consumer must obtain the message for consumption and submit the consumption result. \n        List<MessageView> messageViewList = null;\n        try {\n            messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));\n            messageViewList.forEach(messageView -> {\n                System.out.println(messageView);\n                // After consumption is complete, the consumer must invoke ACK to submit the consumption result. \n                try {\n                    simpleConsumer.ack(messageView);\n                } catch (ClientException e) {\n                    e.printStackTrace();\n                }\n            });\n        } catch (ClientException e) {\n            // If the pull fails due to system traffic throttling or other reasons, you must re-initiate the request to obtain the message. \n            e.printStackTrace();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Java Producer Example for RocketMQ\nDESCRIPTION: Sample Java code that demonstrates how to create a producer and send messages to RocketMQ. It configures the client, builds a message, and sends it to the specified topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientConfigurationBuilder;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.message.Message;\nimport org.apache.rocketmq.client.apis.producer.Producer;\nimport org.apache.rocketmq.client.apis.producer.SendReceipt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProducerExample {\n    private static final Logger logger = LoggerFactory.getLogger(ProducerExample.class);\n\n    public static void main(String[] args) throws ClientException {\n        // Endpoint address, set to the Proxy address and port list, usually xxx:8080;xxx:8081\n        String endpoint = \"localhost:8081\";\n        // The target topic name for message sending, which needs to be created in advance.\n        String topic = \"TestTopic\";\n        ClientServiceProvider provider = ClientServiceProvider.loadService();\n        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);\n        ClientConfiguration configuration = builder.build();\n        // When initializing Producer, communication configuration and pre-bound Topic need to be set.\n        Producer producer = provider.newProducerBuilder()\n            .setTopics(topic)\n            .setClientConfiguration(configuration)\n            .build();\n        // Sending a normal message.\n        Message message = provider.newMessageBuilder()\n            .setTopic(topic)\n            // Set the message index key, which can be used to accurately find a specific message.\n            .setKeys(\"messageKey\")\n            // Set the message Tag, used by the consumer to filter messages by specified Tag.\n            .setTag(\"messageTag\")\n            // Message body\n            .setBody(\"messageBody\".getBytes())\n            .build();\n        try {\n            // Send the message, paying attention to the sending result and catching exceptions.\n            SendReceipt sendReceipt = producer.send(message);\n            logger.info(\"Send message successfully, messageId={}\", sendReceipt.getMessageId());\n        } catch (ClientException e) {\n            logger.error(\"Failed to send message\", e);\n        }\n        // producer.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration for RocketMQ\nDESCRIPTION: A Docker Compose YAML configuration that defines a complete RocketMQ cluster with nameserver, broker, and proxy services. The configuration includes necessary port mappings and network settings for communication between services.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  namesrv:\n    image: apache/rocketmq:5.3.2\n    container_name: rmqnamesrv\n    ports:\n      - 9876:9876\n    networks:\n      - rocketmq\n    command: sh mqnamesrv\n  broker:\n    image: apache/rocketmq:5.3.2\n    container_name: rmqbroker\n    ports:\n      - 10909:10909\n      - 10911:10911\n      - 10912:10912\n    environment:\n      - NAMESRV_ADDR=rmqnamesrv:9876\n    depends_on:\n      - namesrv\n    networks:\n      - rocketmq\n    command: sh mqbroker\n  proxy:\n    image: apache/rocketmq:5.3.2\n    container_name: rmqproxy\n    networks:\n      - rocketmq\n    depends_on:\n      - broker\n      - namesrv\n    ports:\n      - 8080:8080\n      - 8081:8081\n    restart: on-failure\n    environment:\n      - NAMESRV_ADDR=rmqnamesrv:9876\n    command: sh mqproxy\nnetworks:\n  rocketmq:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Correct Consumer Usage Pattern in Java\nDESCRIPTION: This example demonstrates the recommended way to use a consumer in Apache RocketMQ. It creates a single consumer instance that is reused for multiple message receipts, which is more efficient than creating new instances repeatedly.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/08consumer.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConsumer c = ConsumerBuilder.build();\nfor (int i =0;i<n;i++)\n{\n  Message m= c.receive();\n  //process message\n}\nc.shutdown();\n```\n\n----------------------------------------\n\nTITLE: Java PushConsumer Example for RocketMQ\nDESCRIPTION: Sample Java code for creating a PushConsumer that subscribes to messages from RocketMQ. It configures the consumer, sets up message filters, and implements a message listener to process received messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.IOException;\nimport java.util.Collections;\norg.apache.rocketmq.client.apis.ClientConfiguration;\norg.apache.rocketmq.client.apis.ClientException;\norg.apache.rocketmq.client.apis.ClientServiceProvider;\norg.apache.rocketmq.client.apis.consumer.ConsumeResult;\norg.apache.rocketmq.client.apis.consumer.FilterExpression;\norg.apache.rocketmq.client.apis.consumer.FilterExpressionType;\norg.apache.rocketmq.client.apis.consumer.PushConsumer;\norg.slf4j.Logger;\norg.slf4j.LoggerFactory;\n\npublic class PushConsumerExample {\n    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);\n\n    private PushConsumerExample() {\n    }\n\n    public static void main(String[] args) throws ClientException, IOException, InterruptedException {\n        final ClientServiceProvider provider = ClientServiceProvider.loadService();\n        // Endpoint address, set to the Proxy address and port list, usually xxx:8080;xxx:8081\n        String endpoints = \"localhost:8081\";\n        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()\n            .setEndpoints(endpoints)\n            .build();\n        // Subscription message filtering rule, indicating subscription to all Tag messages.\n        String tag = \"*\";\n        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);\n        // Specify the consumer group the consumer belongs to, Group needs to be created in advance.\n        String consumerGroup = \"YourConsumerGroup\";\n        // Specify which target Topic to subscribe to, Topic needs to be created in advance.\n        String topic = \"TestTopic\";\n        // Initialize PushConsumer\n        PushConsumer pushConsumer = provider.newPushConsumerBuilder()\n            .setClientConfiguration(clientConfiguration)\n            // Set the consumer group\n            .setConsumerGroup(consumerGroup)\n            // Set pre-bound subscription relationship\n            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n            // Set the message listener\n            .setMessageListener(messageView -> {\n                // Handle messages and return the consumption result\n                logger.info(\"Consume message successfully, messageId={}\", messageView.getMessageId());\n                return ConsumeResult.SUCCESS;\n            })\n            .build();\n        Thread.sleep(Long.MAX_VALUE);\n        // If PushConsumer is no longer needed, this instance can be closed.\n        // pushConsumer.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Thread Numbers in RocketMQ Java Client\nDESCRIPTION: This code demonstrates how to configure the minimum and maximum number of consumer threads when starting a RocketMQ consumer. These settings control the parallelism of message consumption.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconsumer.setConsumeThreadMin(20);\nconsumer.setConsumeThreadMax(20);\n```\n\n----------------------------------------\n\nTITLE: Initializing Consistent Consumer Subscriptions in RocketMQ (Java)\nDESCRIPTION: Demonstrates how to correctly set up consistent subscriptions for multiple consumer instances in the same consumer group. Each consumer subscribes to the same topic (TopicA) with the same tag filter (TagA).\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/05subscribe.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPushConsumer consumer1 = provider.newPushConsumerBuilder().setConsumerGroup(\"GroupA\").build();\nconsumer1.subscribe(\"TopicA\", new FilterExpression(\"TagA\", FilterExpressionType.TAG));\n\nPushConsumer consumer2 = provider.newPushConsumerBuilder().setConsumerGroup(\"GroupA\").build();\nconsumer2.subscribe(\"TopicA\", new FilterExpression(\"TagA\", FilterExpressionType.TAG));\n\nPushConsumer consumer3 = provider.newPushConsumerBuilder().setConsumerGroup(\"GroupA\").build();\nconsumer3.subscribe(\"TopicA\", new FilterExpression(\"TagA\", FilterExpressionType.TAG));\n```\n\n----------------------------------------\n\nTITLE: Implementing RocketMQ Message Consumer in Java\nDESCRIPTION: Java implementation of a push consumer that subscribes to a RocketMQ topic in Kubernetes and processes incoming messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage com.rocketmq.consumer;\n\nimport java.io.IOException;\nimport java.util.Collections;\norg.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.consumer.ConsumeResult;\nimport org.apache.rocketmq.client.apis.consumer.FilterExpression;\nimport org.apache.rocketmq.client.apis.consumer.FilterExpressionType;\nimport org.apache.rocketmq.client.apis.consumer.PushConsumer;\nimport java.util.List;\n\npublic class Consumer {\n    public static void main(String[] args) throws ClientException, IOException, InterruptedException {\n        final ClientServiceProvider provider = ClientServiceProvider.loadService();\n        // The endpoint address, which needs to be set to the address and port list of the Proxy; the following is the proxy address in the k8s environment.\n        String endpoints = \"192.168.85.227:8081\";\n        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()\n            .setEndpoints(endpoints)\n            .build();\n        // The filter rule for subscribing to messages, indicating subscription to messages of all Tags.\n        String tag = \"*\";\n        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);\n        // Specify the consumer group to which the consumer belongs; the Group needs to be created in advance.\n        String consumerGroup = \"TestGroup\";\n        // Specify which target Topic needs to be subscribed to; the Topic needs to be created in advance.\n        String topic = \"TestTopic\";\n        // Initialize PushConsumer, binding to the consumer group ConsumerGroup, communication parameters, and subscription relationship.\n        PushConsumer pushConsumer = provider.newPushConsumerBuilder()\n            .setClientConfiguration(clientConfiguration)\n            // Set consumer group.\n            .setConsumerGroup(consumerGroup)\n            // Set pre-bound subscription relationship.\n            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n            // Set consumption listener.\n            .setMessageListener(messageView -> {\n                // Process the message and return the consumption result.\n                System.out.println(\"Consume message successfully, messageId=\" + messageView.getMessageId());\n                return ConsumeResult.SUCCESS;\n            })\n            .build();\n        Thread.sleep(Long.MAX_VALUE);\n        // If you don't need to use PushConsumer anymore, you can close this instance.\n        // pushConsumer.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RocketMQ NameServer Configuration Table\nDESCRIPTION: Markdown table defining the configuration parameters for RocketMQ NameServer including parameter names, descriptions, types, and importance levels. Covers essential settings like RocketMQ home directory, NameServer address, KV config paths, and feature toggles.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/06-parameterConfiguration/02server.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name               | Description                                                  | Parameter type | Default value | Effective value | Importance |\n| ------------------ | ------------------------------------------------------------ | -------------- | ------------- | --------------- | ---------- |\n| rocketmqHome       | RocketMQ main directory, default user main directory         | String         |               |                 |            |\n| namesrvAddr        | NameServer address                                           | String         |               |                 |            |\n| kvConfigpath       | KV configuration file path, including configuration information for ordered message topics | String         |               |                 |            |\n| configStorePath    | NameServer configuration file path, it is recommended to use the -c option to specify the NameServer configuration file path | String         |               |                 |            |\n| clusterTest        | Whether or not cluster testing is supported, default is false | boolean        |               |                 |            |\n| orderMessageEnable | Whether or not ordered messages are supported, default is false | boolean        |               |                 |            |\n|                    |                                                              |                |               |                 |            |\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Topics with Different Tag Patterns in RocketMQ (Java)\nDESCRIPTION: This example demonstrates subscribing to multiple topics with different tag patterns: 'TopicA' with wildcard tag '*' to receive all messages, and 'TopicB' with specific tags. All consumers in GID_test_3 must have identical subscription code.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/07subscribe.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    Properties properties = new Properties();\n    properties.put(PropertyKeyConst.GROUP_ID, \"GID_test_3\");\n    Consumer consumer = ONSFactory.createConsumer(properties);\n    consumer.subscribe(\"TopicA\", \"*\", new MessageListener() {\n        public Action consume(Message message, ConsumeContext context) {\n            System.out.println(message.getMsgID());\n            return Action.CommitMessage;\n        }\n    });     \n    consumer.subscribe(\"TopicB\", \"Tag2||Tag3\", new MessageListener() {\n        public Action consume(Message message, ConsumeContext context) {\n            System.out.println(message.getMsgID());\n            return Action.CommitMessage;\n        }\n    });   \n```\n\n----------------------------------------\n\nTITLE: Importing React Tab Components\nDESCRIPTION: Code for importing React tab components used in the documentation interface.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/00-introduction/02whatis.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\n\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered Message Consumer in RocketMQ\nDESCRIPTION: Implementation of ordered message consumption using MessageListenerOrderly interface to ensure FIFO message processing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/03-consumer/02push.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nconsumer.registerMessageListener(new MessageListenerOrderly() {\n            AtomicLong consumeTimes = new AtomicLong(0);\n            @Override\n            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                this.consumeTimes.incrementAndGet();\n                if ((this.consumeTimes.get() % 2) == 0) {\n                    return ConsumeOrderlyStatus.SUCCESS;\n                } else if ((this.consumeTimes.get() % 5) == 0) {\n                    context.setSuspendCurrentQueueTimeMillis(3000);\n                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;\n                }\n                return ConsumeOrderlyStatus.SUCCESS;\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Configuring Name Server Address in Java Code\nDESCRIPTION: Shows how to set Name Server addresses programmatically for both producer and consumer. Multiple namesrv addresses can be specified using semicolon separation.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/06-parameterConfiguration/01local.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nproducer.setNamesrvAddr(\"192.168.0.1:9876;192.168.0.2:9876\");  \n\nconsumer.setNamesrvAddr(\"192.168.0.1:9876;192.168.0.2:9876\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag Filtering in RocketMQ Consumer\nDESCRIPTION: Examples demonstrating different ways to subscribe to messages using tag filtering in RocketMQ, including single tag, all tags, and multiple tag subscription patterns.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/02push.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nconsumer.subscribe(\"TagFilterTest\", \"TagA\");\n```\n\nLANGUAGE: java\nCODE:\n```\nconsumer.subscribe(\"TagFilterTest\", \"*\");\n```\n\nLANGUAGE: java\nCODE:\n```\nconsumer.subscribe(\"TagFilterTest\", \"TagA||TagB\");\n```\n\n----------------------------------------\n\nTITLE: Setting Tag and Attribute for Messages in Java\nDESCRIPTION: This code snippet demonstrates how to set a tag and a custom attribute for a message in Apache RocketMQ using Java. It specifies the topic, message key, tag, and a custom attribute 'Region' before building the message.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/07messagefilter.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMessage message = messageBuilder.setTopic(\"topic\")\n// Specify the message index key so that the system can use a keyword to accurately locate the message. \n.setKeys(\"messageKey\")\n// Specify the message tag so that consumers can use the tag to filter the message. \n// This example indicates that the message tag is set to \"messageTag\". \n.setTag(\"messageTag\")\n// You can also set custom attributes for the messages, such as environment, region, and logical branch. \n// In this example, the custom attribute is region and the attribute value is Hangzhou. \n.addProperty(\"Region\", \"Hangzhou\")\n// Message body. \n.setBody(\"messageBody\".getBytes())\n.build();\n```\n\n----------------------------------------\n\nTITLE: One-Way Message Sending in RocketMQ\nDESCRIPTION: This Java code demonstrates one-way message sending in RocketMQ. It creates a producer, sets up the NameServer address, builds messages, and sends them using the one-way method. It includes proper producer shutdown but no error handling for sent messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/02message1.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class OnewayProducer {\n  public static void main(String[] args) throws Exception{\n    // Initialize a producer and set the Producer group name\n    DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n    // Set the address of NameServer\n    producer.setNamesrvAddr(\"localhost:9876\");\n    // Start Producer\n    producer.start();\n    for (int i = 0; i < 100; i++) {\n      // Create a message and set the topic, tag, body and so on. The tag can be understood as a label to categorize the message, and RocketMQ can filter the tag on the consumer side.\n      Message msg = new Message(\"TopicTest\" /* Topic */,\n        \"TagA\" /* Tag */,\n        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n      );\n      // Since there is no request-answer processing when sending messages in the oneway method, if there is a message sending failure, data will be lost because there is no retry. If data cannot be lost, it is recommended to use the reliable synchronous or reliable asynchronous sending method.\n      producer.sendOneway(msg);\n    }\n     // Close the producer once it is no longer in use\n     producer.shutdown();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Single Topic with Multiple Tags in RocketMQ (Java)\nDESCRIPTION: This example shows how to subscribe to 'TopicB' with multiple tags ('Tag2' and 'Tag3') using the OR operator. All consumers in group GID_test_2 must have the same subscription pattern to maintain consistency.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/07subscribe.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    Properties properties = new Properties();\n    properties.put(PropertyKeyConst.GROUP_ID, \"GID_test_2\");\n    Consumer consumer = ONSFactory.createConsumer(properties);\n    consumer.subscribe(\"TopicB\", \"Tag2||Tag3\", new MessageListener() {\n        public Action consume(Message message, ConsumeContext context) {\n            System.out.println(message.getMsgID());\n            return Action.CommitMessage;\n        }\n    });   \n```\n\n----------------------------------------\n\nTITLE: Java Implementation of FIFO Message Sending and Consumption\nDESCRIPTION: Complete Java example showing how to send and receive ordered messages using both PushConsumer and SimpleConsumer approaches. Includes message building, sending, and handling consumption results.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/03fifomessage.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n        // Send ordered messages. \n        MessageBuilder messageBuilder = null;\n        Message message = messageBuilder.setTopic(\"topic\")\n                // Specify the message index key. The system uses the key to locate the message. \n                .setKeys(\"messageKey\")\n                // Specify the message tag. The consumer can use the tag to filter the message. \n                .setTag(\"messageTag\")\n                // Configure a message group for the ordered messages. We recommend that you do not include a large number of messages in the group. \n                .setMessageGroup(\"fifoGroup001\")\n                // Configure the message body. \n                .setBody(\"messageBody\".getBytes())\n                .build();\n        try {\n            // Send the messages. Focus on the result of message sending and exceptions such as failures.\n            SendReceipt sendReceipt = producer.send(message);\n            System.out.println(sendReceipt.getMessageId());\n        } catch (ClientException e) {\n            e.printStackTrace();\n        }\n        // Make sure that ordered delivery is applied to the consumer group. Otherwise, the messages are delivered concurrently and in no particular order. \n        // Consumption example 1: If the consumer type is PushConsumer, the consumer needs to only process the message in the message listener. \n        MessageListener messageListener = new MessageListener() {\n            @Override\n            public ConsumeResult consume(MessageView messageView) {\n                System.out.println(messageView);\n                // Return the status based on the consumption result. \n                return ConsumeResult.SUCCESS;\n            }\n        };\n        // Consumption example 2: If the consumer type is SimpleConsumer, the consumer must actively obtain the message for consumption and submit the consumption result. \n        // If the consumption of a message in the message group has not finished, the next message in the message group cannot be retrieved if you call the Receive function. \n        List<MessageView> messageViewList = null;\n        try {\n            messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));\n            messageViewList.forEach(messageView -> {\n                System.out.println(messageView);\n                // After consumption is complete, the consumer must invoke ACK to submit the consumption result. \n                try {\n                    simpleConsumer.ack(messageView);\n                } catch (ClientException e) {\n                    e.printStackTrace();\n                }\n            });\n        } catch (ClientException e) {\n            // If the pull fails due to system traffic throttling or other reasons, the consumer must re-initiate the request to obtain the message. \n            e.printStackTrace();\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Lite Pull Consumer with Subscribe Mode in RocketMQ (Java)\nDESCRIPTION: This snippet shows how to use the Lite Pull Consumer in Subscribe mode. It initializes a DefaultLitePullConsumer, subscribes to a topic, and uses a polling mechanism to fetch messages. It also demonstrates how to set the pull batch size and handle the retrieved messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/03-consumer/03pull.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class LitePullConsumerSubscribe {\n    public static volatile boolean running = true;\n    public static void main(String[] args) throws Exception {\n        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer(\"lite_pull_consumer_test\");\n        litePullConsumer.subscribe(\"TopicTest\", \"*\");\n        litePullConsumer.setPullBatchSize(20);\n        litePullConsumer.start();\n        try {\n            while (running) {\n                List<MessageExt> messageExts = litePullConsumer.poll();\n                System.out.printf(\"%s%n\", messageExts);\n            }\n        } finally {\n            litePullConsumer.shutdown();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Received Messages in RocketMQ Consumer (Java)\nDESCRIPTION: This code snippet shows how to implement logging of received messages in a RocketMQ consumer. It prints the received messages at the beginning of the consumption process, which is useful for troubleshooting and monitoring message flow, especially when dealing with a small number of messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/01bestpractice.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n   public ConsumeConcurrentlyStatus consumeMessage(\n            List<MessageExt> msgs,\n            ConsumeConcurrentlyContext context) {\n        log.info(\"RECEIVE_MSG_BEGIN: \" + msgs.toString());\n        // TODO Normal consumption process\n        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n    }   \n```\n\n----------------------------------------\n\nTITLE: MessageQueueSelector Interface in Java for Apache RocketMQ\nDESCRIPTION: This code snippet shows the MessageQueueSelector interface used in Apache RocketMQ for selecting the queue to send messages to. It is used to implement custom logic for queue selection based on the message and additional arguments.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/03message2.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface MessageQueueSelector {\n    MessageQueue select(final List<MessageQueue> mqs, final Message msg, final Object arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of RocketMQ Producer in Java\nDESCRIPTION: Demonstrates the recommended way to use a RocketMQ producer by creating a single instance and reusing it for multiple message sends. This approach is more efficient and reduces system load.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/04producer.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nProducer p = ProducerBuilder.build();\nfor (int i =0;i<n;i++)\n{\n  Message m= MessageBuilder.build();\n  p.send(m);\n}\np.shutdown();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All Messages in a Topic in Java\nDESCRIPTION: This snippet shows how to subscribe to all messages in a topic in Apache RocketMQ using Java. It creates a FilterExpression that always evaluates to true, effectively subscribing to all messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/07messagefilter.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nString topic = \"topic\";\n// Subscribe to all the messages. \nFilterExpression filterExpression = new FilterExpression(\"True\", FilterExpressionType.SQL92);\nsimpleConsumer.subscribe(topic, filterExpression);\n```\n\n----------------------------------------\n\nTITLE: Setting Tag and Sending Message in Apache RocketMQ (Java)\nDESCRIPTION: This code snippet demonstrates how to set a tag and send a message in Apache RocketMQ. It sets the topic, message key, tag, and message body.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/07messagefilter.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMessage message = messageBuilder.setTopic(\"topic\")\n// Specify the message index key so that the system can use a keyword to accurately locate the message. \n.setKeys(\"messageKey\")\n// Specify the message tag so that consumers can use the tag to filter the message. \n// This example indicates that the tag of the message is set to \"TagA\". \n.setTag(\"TagA\")\n// Message body. \n.setBody(\"messageBody\".getBytes())\n.build();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Properties for SQL92 Filtering in RocketMQ (Java)\nDESCRIPTION: This code demonstrates how to set custom properties on a RocketMQ message that can be used for SQL92 filtering. The example creates a message with topic and tag, then adds a custom property 'a' with value '1'.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/02push.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMessage msg = new Message(\"topic\", \"tagA\", \"Hello MQ\".getBytes());\n// Set custom property A with property value 1.\nmsg.putUserProperties(\"a\", \"1\");\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Broker Nodes\nDESCRIPTION: Commands to start multiple broker nodes in a DLedger cluster\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/02dledger.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ nohup sh bin/mqbroker -c conf/dledger/xxx-n0.conf & \n$ nohup sh bin/mqbroker -c conf/dledger/xxx-n1.conf & \n$ nohup sh bin/mqbroker -c conf/dledger/xxx-n2.conf & \n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ with DLedger\nDESCRIPTION: Example configuration file for a RocketMQ broker using DLedger, including key settings for DLedger integration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbrokerClusterName = RaftCluster\nbrokerName=RaftNode00\nlistenPort=30911\nnamesrvAddr=127.0.0.1:9876\nstorePathRootDir=/tmp/rmqstore/node00\nstorePathCommitLog=/tmp/rmqstore/node00/commitlog\nenableDLegerCommitLog=true\ndLegerGroup=RaftNode00\ndLegerPeers=n0-127.0.0.1:40911;n1-127.0.0.1:40912;n2-127.0.0.1:40913\n## must be unique\ndLegerSelfId=n0\nsendMessageThreadPoolNums=16\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of RocketMQ Producer in Java\nDESCRIPTION: Demonstrates the recommended way to use a RocketMQ producer by creating a single instance and reusing it for multiple message sends. This approach is more efficient and reduces system load.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/04producer.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nProducer p = ProducerBuilder.build();\nfor (int i =0;i<n;i++)\n{\n  Message m= MessageBuilder.build();\n  p.send(m);\n}\np.shutdown();\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ EventBridge Properties\nDESCRIPTION: Configuration settings for RocketMQ EventBridge, including database connection, RocketMQ nameserver address, cluster name, Connect endpoint, and logging settings.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# Mysql database address\nspring.datasource.url=jdbc:mysql://xxxx:3306/xxxx?characterEncoding=utf8\nspring.datasource.username=xxx\nspring.datasource.password=xxxx\n\n# RocketMQ nameserver address\nrocketmq.namesrvAddr=xxxxx:9876\n\n# RocketMQ cluster name\nrocketmq.cluster.name=DefaultCluster\n\n# RocketMQ Connect address\nrocketmq.connect.endpoint=xxxxxx:8082\n\n# log default configuration\nlog.path=～\nlog.level=INFO\napp.name=rocketmq-eventbridge\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Producer Implementation\nDESCRIPTION: Java code example for implementing a RocketMQ message producer using synchronous sending mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/02quickstartWithDocker.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class ProducerExample {\n    public static void main(String[] args) throws Exception {\n        // Create producer instance and set the producer group name\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        // Set the Name Server address (replace with actual Name Server address)\n        producer.setNamesrvAddr(\"localhost:9876\");\n        producer.start();\n\n        try {\n            // Create a message instance, specifying the topic, tag, and message body\n            Message msg = new Message(\"TestTopic\", \"TagA\", (\"Hello RocketMQ\").getBytes());\n            // Send the message and get the send result\n            SendResult sendResult = producer.send(msg);\n            System.out.println(\"Message sent: \" + new String(msg.getBody()));\n            System.out.println(\"Send result: \" + sendResult);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Message sending failed.\");\n        } finally {\n            // Shutdown the producer\n            producer.shutdown();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages with Multiple Custom Attribute Filters in Java\nDESCRIPTION: This code example demonstrates subscribing to messages in Apache RocketMQ using multiple custom attribute filters. It creates a FilterExpression that filters messages based on both 'Region' and 'price' attributes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/07messagefilter.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nString topic = \"topic\";\n// Subscribe to messages whose value of the region attribute is Hangzhou and value of the price attribute is greater than 30. \nFilterExpression filterExpression = new FilterExpression(\"Region IS NOT NULL AND price IS NOT NULL AND Region = 'Hangzhou' AND price > 30\", FilterExpressionType.SQL92);\nsimpleConsumer.subscribe(topic, filterExpression);\n```\n\n----------------------------------------\n\nTITLE: Implementing RocketMQ Message Producer in Java\nDESCRIPTION: Java implementation of a RocketMQ message producer that configures the client and sends messages to a specified topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientConfigurationBuilder;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.message.Message;\nimport org.apache.rocketmq.client.apis.producer.Producer;\nimport org.apache.rocketmq.client.apis.producer.SendReceipt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProducerExample {\n    private static final Logger logger = LoggerFactory.getLogger(ProducerExample.class);\n\n    public static void main(String[] args) throws ClientException {\n        String endpoint = \"localhost:8081\";\n        String topic = \"TestTopic\";\n        ClientServiceProvider provider = ClientServiceProvider.loadService();\n        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);\n        ClientConfiguration configuration = builder.build();\n        Producer producer = provider.newProducerBuilder()\n            .setTopics(topic)\n            .setClientConfiguration(configuration)\n            .build();\n        Message message = provider.newMessageBuilder()\n            .setTopic(topic)\n            .setKeys(\"messageKey\")\n            .setTag(\"messageTag\")\n            .setBody(\"messageBody\".getBytes())\n            .build();\n        try {\n            SendReceipt sendReceipt = producer.send(message);\n            logger.info(\"Send message successfully, messageId={}\", sendReceipt.getMessageId());\n        } catch (ClientException e) {\n            logger.error(\"Failed to send message\", e);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All Messages in a Topic in Apache RocketMQ (Java)\nDESCRIPTION: This code snippet shows how to subscribe to all messages in a topic in Apache RocketMQ. It uses a wildcard '*' in the FilterExpression to match all tags.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/07messagefilter.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString topic = \"Your Topic\";\n// Subscribe to all messages. \nFilterExpression filterExpression = new FilterExpression(\"*\", FilterExpressionType.TAG);\npushConsumer.subscribe(topic, filterExpression);\n```\n\n----------------------------------------\n\nTITLE: SQL92 Message Filtering in RocketMQ\nDESCRIPTION: Examples of implementing SQL92-based message filtering using custom properties and SQL expressions.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/03-consumer/02push.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMessage msg = new Message(\"topic\", \"tagA\", \"Hello MQ\".getBytes());\n// 设置自定义属性A，属性值为1。\nmsg.putUserProperties(\"a\", \"1\");\n```\n\nLANGUAGE: java\nCODE:\n```\nconsumer.subscribe(\"SqlFilterTest\",\n    MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\" +\n        \"and (a is not null and a between 0 and 3)\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Inconsistent Subscriptions in Java for Apache RocketMQ (Incorrect)\nDESCRIPTION: Illustrates an incorrect way to configure subscriptions for consumers in the same group. This example shows inconsistent tag filters, which can lead to consumption conflicts.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/09subscription.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//Consumer c1\nConsumer c1 = ConsumerBuilder.build(groupA);\nc1.subscribe(topicA,\"TagA\");\n//Consumer c2Consumer \nc2 = ConsumerBuilder.build(groupA);\nc2.subscribe(topicA,\"TagB\");\n```\n\n----------------------------------------\n\nTITLE: Handling Message Backlog in RocketMQ Consumer\nDESCRIPTION: Implements a strategy to handle message backlogs by checking the queue offset difference. When the backlog exceeds 100,000 messages, special handling logic is triggered to prevent consumer slowdown issues.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/01bestpractice.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    public ConsumeConcurrentlyStatus consumeMessage(\n            List<MessageExt> msgs,\n            ConsumeConcurrentlyContext context) {\n        long offset = msgs.get(0).getQueueOffset();\n        String maxOffset =\n                msgs.get(0).getProperty(Message.PROPERTY_MAX_OFFSET);\n        long diff = Long.parseLong(maxOffset) - offset;\n        if (diff > 100000) {\n            // TODO 消息堆积情况的特殊处理\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n        // TODO 正常消费过程\n        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n    }    \n```\n\n----------------------------------------\n\nTITLE: Configuring Consistent Subscriptions in Java for Apache RocketMQ\nDESCRIPTION: Demonstrates the correct way to configure consistent subscriptions for multiple consumers in the same consumer group. Both consumers subscribe to the same topic with the same tag filter.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/09subscription.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n//Consumer c1\nConsumer c1 = ConsumerBuilder.build(groupA);\nc1.subscribe(topicA,\"TagA\");\n//Consumer c2\nConsumer c2 = ConsumerBuilder.build(groupA);\nc2.subscribe(topicA,\"TagA\");\n```\n\n----------------------------------------\n\nTITLE: Adding RocketMQ Java Client Dependency\nDESCRIPTION: Maven dependency configuration to add the RocketMQ Java client SDK to a Java project. This dependency is required for sending and receiving messages with RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.rocketmq</groupId>\n    <artifactId>rocketmq-client-java</artifactId>\n    <version>${rocketmq-client-java-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue-based Load Balancing in Apache RocketMQ (Java)\nDESCRIPTION: This code snippet demonstrates how to implement queue-based load balancing in Apache RocketMQ. It is the default behavior for pull consumers of broker versions 4.x and 3.x. The full implementation can be found in the Apache RocketMQ code library.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/08consumerloadbalance.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Example code can be found at:\n// https://github.com/apache/rocketmq/blob/develop/example/src/main/java/org/apache/rocketmq/example/simple/LitePullConsumerAssign.java\n```\n\n----------------------------------------\n\nTITLE: MessageListenerConcurrently Interface for RocketMQ Push Consumer\nDESCRIPTION: Definition of the MessageListenerConcurrently interface used for asynchronous concurrent message consumption in RocketMQ with explanatory comments.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/02push.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * A MessageListenerConcurrently object is used to receive asynchronously delivered messages concurrently\n */\npublic interface MessageListenerConcurrently extends MessageListener {\n    /**\n     * It is not recommend to throw exception,rather than returning ConsumeConcurrentlyStatus.RECONSUME_LATER if\n     * consumption failure\n     *\n     * @param msgs msgs.size() >= 1<br> DefaultMQPushConsumer.consumeMessageBatchMaxSize=1,you can modify here\n     * @return The consume status\n     */\n    ConsumeConcurrentlyStatus consumeMessage(final List<MessageExt> msgs,\n        final ConsumeConcurrentlyContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction Messages in Java with Apache RocketMQ\nDESCRIPTION: This Java code demonstrates how to send transaction messages using Apache RocketMQ. It includes setting up a transaction producer, beginning a transaction, sending a half-message, executing a local transaction, and committing or rolling back the transaction based on the local transaction result.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/04-featureBehavior/04transactionmessage.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n    //演示demo，模拟订单表查询服务，用来确认订单事务是否提交成功。\n    private static boolean checkOrderById(String orderId) {\n        return true;\n    }\n    //演示demo，模拟本地事务的执行结果。\n    private static boolean doLocalTransaction() {\n        return true;\n    }\n    public static void main(String[] args) throws ClientException {\n        ClientServiceProvider provider = new ClientServiceProvider();\n        MessageBuilder messageBuilder = new MessageBuilderImpl();\n        //构造事务生产者：事务消息需要生产者构建一个事务检查器，用于检查确认异常半事务的中间状态。\n        Producer producer = provider.newProducerBuilder()\n                .setTransactionChecker(messageView -> {\n                    /**\n                     * 事务检查器一般是根据业务的ID去检查本地事务是否正确提交还是回滚，此处以订单ID属性为例。\n                     * 在订单表找到了这个订单，说明本地事务插入订单的操作已经正确提交；如果订单表没有订单，说明本地事务已经回滚。\n                     */\n                    final String orderId = messageView.getProperties().get(\"OrderId\");\n                    if (Strings.isNullOrEmpty(orderId)) {\n                        // 错误的消息，直接返回Rollback。\n                        return TransactionResolution.ROLLBACK;\n                    }\n                    return checkOrderById(orderId) ? TransactionResolution.COMMIT : TransactionResolution.ROLLBACK;\n                })\n                .build();\n        //开启事务分支。\n        final Transaction transaction;\n        try {\n            transaction = producer.beginTransaction();\n        } catch (ClientException e) {\n            e.printStackTrace();\n            //事务分支开启失败，直接退出。\n            return;\n        }\n        Message message = messageBuilder.setTopic(\"topic\")\n                //设置消息索引键，可根据关键字精确查找某条消息。\n                .setKeys(\"messageKey\")\n                //设置消息Tag，用于消费端根据指定Tag过滤消息。\n                .setTag(\"messageTag\")\n                //一般事务消息都会设置一个本地事务关联的唯一ID，用来做本地事务回查的校验。\n                .addProperty(\"OrderId\", \"xxx\")\n                //消息体。\n                .setBody(\"messageBody\".getBytes())\n                .build();\n        //发送半事务消息\n        final SendReceipt sendReceipt;\n        try {\n            sendReceipt = producer.send(message, transaction);\n        } catch (ClientException e) {\n            //半事务消息发送失败，事务可以直接退出并回滚。\n            return;\n        }\n        /**\n         * 执行本地事务，并确定本地事务结果。\n         * 1. 如果本地事务提交成功，则提交消息事务。\n         * 2. 如果本地事务提交失败，则回滚消息事务。\n         * 3. 如果本地事务未知异常，则不处理，等待事务消息回查。\n         *\n         */\n        boolean localTransactionOk = doLocalTransaction();\n        if (localTransactionOk) {\n            try {\n                transaction.commit();\n            } catch (ClientException e) {\n                // 业务可以自身对实时性的要求选择是否重试，如果放弃重试，可以依赖事务消息回查机制进行事务状态的提交。\n                e.printStackTrace();\n            }\n        } else {\n            try {\n                transaction.rollback();\n            } catch (ClientException e) {\n                // 建议记录异常信息，回滚异常时可以无需重试，依赖事务消息回查机制进行事务状态的提交。\n                e.printStackTrace();\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Backoff for Connection Retry in Java\nDESCRIPTION: This algorithm demonstrates the recommended approach for implementing exponential backoff when retrying connections. It uses parameters like initial backoff, multiplier, jitter, and maximum backoff to control the retry behavior.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/05sendretrypolicy.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectWithBackoff()\n  current_backoff = INITIAL_BACKOFF\n  current_deadline = now() + INITIAL_BACKOFF\n  while (TryConnect(Max(current_deadline, now() + MIN_CONNECT_TIMEOUT))!= SUCCESS)\n    SleepUntil(current_deadline)\n    current_backoff = Min(current_backoff * MULTIPLIER, MAX_BACKOFF)\n    current_deadline = now() + current_backoff + UniformRandom(-JITTER * current_backoff, JITTER * current_backoff)\n```\n\n----------------------------------------\n\nTITLE: Example NameServer Address Response from HTTP Static Server\nDESCRIPTION: Shows the expected format of the NameServer address returned by the HTTP static server. This is used in the default addressing mode where clients periodically fetch the NameServer address from a predefined URL.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/01bestpractice.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n192.168.0.1:9876;192.168.0.2:9876   \n```\n\n----------------------------------------\n\nTITLE: Defining TransactionListener Interface in Java for Apache RocketMQ\nDESCRIPTION: This code snippet shows the definition of the TransactionListener interface in Apache RocketMQ. It includes two methods: executeLocalTransaction for executing local transactions after sending a half message, and checkLocalTransaction for checking the transaction status when the broker sends a check message.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/06message5.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface TransactionListener {\n    /**\n     * When send transactional prepare(half) message succeed, this method will be invoked to execute local transaction.\n     *\n     * @param msg Half(prepare) message\n     * @param arg Custom business parameter\n     * @return Transaction state\n     */\n    LocalTransactionState executeLocalTransaction(final Message msg, final Object arg);\n\n    /**\n     * When no response to prepare(half) message. broker will send check message to check the transaction status, and this\n     * method will be invoked to get local transaction status.\n     *\n     * @param msg Check message\n     * @return Transaction state\n     */\n    LocalTransactionState checkLocalTransaction(final MessageExt msg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Filter Expression for RocketMQ Consumer (Java)\nDESCRIPTION: This snippet shows how to subscribe to messages using SQL syntax for filtering. The consumer will only receive messages with tags 'TagA' or 'TagB' and with a custom property 'a' that has a value between 0 and 3.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/02push.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nconsumer.subscribe(\"SqlFilterTest\",\n    MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\" +\n        \"and (a is not null and a between 0 and 3)\"));\n```\n\n----------------------------------------\n\nTITLE: Fetching Subscribe Message Queues in RocketMQ Java\nDESCRIPTION: This snippet shows how to fetch all message queues for a specific topic using the fetchSubscribeMessageQueues method in RocketMQ. This is an alternative to manually constructing a MessageQueue.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/03pull.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSet<MessageQueue> queueSet =  consumer.fetchSubscribeMessageQueues(\"TopicTest\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker Properties with ACL Enabled\nDESCRIPTION: Configuration properties file for enabling ACL features on a RocketMQ broker. Includes essential broker settings and ACL activation flag.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/03access.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nstorePathRootDir=/data/rocketmq/rootdir-a-m\nstorePathCommitLog=/data/rocketmq/commitlog-a-m\nautoCreateSubscriptionGroup=true\n## if acl is open,the flag will be true\naclEnable=true\nlistenPort=10911\nbrokerIP1=XX.XX.XX.XX1\nnamesrvAddr=XX.XX.XX.XX:9876\n```\n\n----------------------------------------\n\nTITLE: Setting Message Keys in RocketMQ Java Client\nDESCRIPTION: Example showing how to set a unique business identifier (Keys) for a RocketMQ message using an order ID. The Keys field is used for message tracing and creates a hash index on the broker side for message querying.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/01concept1.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n   // Order Id\n   String orderId = \"20034568923546\";\n   message.setKeys(orderId);\n```\n\n----------------------------------------\n\nTITLE: SQL Expression Examples for RocketMQ Filtering\nDESCRIPTION: Collection of SQL filtering expressions demonstrating various operators and conditions for message filtering in RocketMQ. Includes examples of NULL checks, numeric comparisons, BETWEEN clauses, IN operators, and logical operators.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/07messagefilter.md#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\na IS NULL\n```\n\nLANGUAGE: sql\nCODE:\n```\na IS NOT NULL\n```\n\nLANGUAGE: sql\nCODE:\n```\na IS NOT NULL AND a > 100\n```\n\nLANGUAGE: sql\nCODE:\n```\na IS NOT NULL AND a > 'abc'\n```\n\nLANGUAGE: sql\nCODE:\n```\na IS NOT NULL AND (a BETWEEN 10 AND 100)\n```\n\nLANGUAGE: sql\nCODE:\n```\na IS NOT NULL AND (a NOT BETWEEN 10 AND 100)\n```\n\nLANGUAGE: sql\nCODE:\n```\na IS NOT NULL AND (a IN ('abc', 'def'))\n```\n\nLANGUAGE: sql\nCODE:\n```\na IS NOT NULL AND (a = 'abc' OR a<>'def')\n```\n\nLANGUAGE: sql\nCODE:\n```\na IS NOT NULL AND (a > 100) OR (b IS NULL)\n```\n\n----------------------------------------\n\nTITLE: Error: Duplicate Producer Group in RocketMQ\nDESCRIPTION: This error occurs when trying to create a Producer Group with a name that already exists. In RocketMQ, Producer Group names must be unique to avoid conflicts.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nThe producer group[xxx] has been created before, specify another name please.\n```\n\n----------------------------------------\n\nTITLE: Setting Message Keys in RocketMQ Java Client\nDESCRIPTION: This code shows how to set a unique identifier key for a RocketMQ message. Using order ID as the key helps to create a hash index on the server side, allowing easy message lookup in the console system.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/02-producer/01concept1.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n   // 订单Id\n   String orderId = \"20034568923546\";\n   message.setKeys(orderId);\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Retry Times for Message Consumption in RocketMQ (Java)\nDESCRIPTION: This code shows how to configure the maximum number of retry attempts for a RocketMQ consumer. After reaching this limit, failed messages will be sent to the dead-letter queue.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/02push.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nconsumer.setMaxReconsumeTimes(10);\n```\n\n----------------------------------------\n\nTITLE: MessageListenerConcurrently Interface Definition\nDESCRIPTION: Interface definition for concurrent message consumption in RocketMQ showing the contract for handling messages asynchronously.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/03-consumer/02push.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface MessageListenerConcurrently extends MessageListener {\n    ConsumeConcurrentlyStatus consumeMessage(final List<MessageExt> msgs,\n        final ConsumeConcurrentlyContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic for Normal Messages using mqadmin in Apache RocketMQ\nDESCRIPTION: This snippet demonstrates how to create a topic for normal messages using the mqadmin tool in Apache RocketMQ 5.0. It specifies the message type as a property parameter.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/01normalmessage.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=NORMAL\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Trace for Consumers in RocketMQ\nDESCRIPTION: Java code example showing how to create a DefaultMQPushConsumer with message tracing enabled. The second parameter in the constructor (true) activates message tracing functionality.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/03messagetra.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nDefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"CID_JODIE_1\",true);\nconsumer.subscribe(\"TopicTest\", \"*\");\nconsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\nconsumer.setConsumeTimestamp(\"20181109221800\");\nconsumer.registerMessageListener(new MessageListenerConcurrently() {\n    @Override\n    public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n        System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n    }\n});\nconsumer.start();\nSystem.out.printf(\"Consumer Started.%n\");\n```\n\n----------------------------------------\n\nTITLE: DLedger Broker Configuration\nDESCRIPTION: Sample configuration file for a DLedger broker node showing essential settings including cluster name, broker name, ports, and DLedger specific configurations\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/02dledger.md#2025-04-09_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nbrokerClusterName = RaftCluster\nbrokerName=RaftNode00\nlistenPort=30911\nnamesrvAddr=127.0.0.1:9876\nstorePathRootDir=/tmp/rmqstore/node00\nstorePathCommitLog=/tmp/rmqstore/node00/commitlog\nenableDLegerCommitLog=true\ndLegerGroup=RaftNode00\ndLegerPeers=n0-127.0.0.1:40911;n1-127.0.0.1:40912;n2-127.0.0.1:40913\n## must be unique\ndLegerSelfId=n0\nsendMessageThreadPoolNums=16\n```\n\n----------------------------------------\n\nTITLE: Starting Broker with Message Trace Enabled in RocketMQ\nDESCRIPTION: Shell command to start a RocketMQ broker with message tracing enabled using a specific configuration file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/03messagetra.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnohup sh mqbroker -c ../conf/2m-noslave/broker-a.properties &\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Interval for Message Consumption in RocketMQ (Java)\nDESCRIPTION: This snippet demonstrates how to set the suspension time (in milliseconds) before retrying message consumption after a failure. This setting only applies to sequential consumption mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/02push.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nconsumer.setSuspendCurrentQueueTimeMillis(5000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker Properties for ACL in RocketMQ\nDESCRIPTION: This snippet shows the configuration properties for enabling ACL on a RocketMQ broker. It includes settings for cluster and broker names, data storage paths, and the crucial 'aclEnable' flag set to true.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/04access.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nstorePathRootDir=/data/rocketmq/rootdir-a-m\nstorePathCommitLog=/data/rocketmq/commitlog-a-m\nautoCreateSubscriptionGroup=true\n## if acl is open,the flag will be true\naclEnable=true\nlistenPort=10911\nbrokerIP1=XX.XX.XX.XX1\nnamesrvAddr=XX.XX.XX.XX:9876\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction Topic in Apache RocketMQ\nDESCRIPTION: This command creates a new topic in Apache RocketMQ specifically for transaction messages. It uses the mqadmin tool to update a topic with the TRANSACTION message type attribute.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/04-featureBehavior/04transactionmessage.md#2025-04-09_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./bin/mqadmin updatetopic -n localhost:9876 -t TestTopic -c DefaultCluster -a +message.type=TRANSACTION\n```\n\n----------------------------------------\n\nTITLE: Testing RocketMQ Message Operations in Kubernetes\nDESCRIPTION: Commands to access the RocketMQ broker pod, create a topic, and test message sending and receiving functionality.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Log into the pod (requires management tools), or you can execute on the host\n$ kubectl exec -ti rocketmq-demo-broker-0  -- /bin/bash\n\n# Create Topic via mqadmin\n$ sh mqadmin updatetopic -t TopicTest -c DefaultCluster\n\n# Send message (execute within the pod)\n$ sh tools.sh org.apache.rocketmq.example.quickstart.Producer\nSendResult [sendStatus=SEND_OK, msgId=7F00000100E60F6F4D334B52982103E7, offsetMsgId=C0A83AE400002A9F000000000002ECD2, messageQueue=MessageQueue [topic=TopicTest, brokerName=rocketmq-demo-broker-0, queueId=2], queueOffset=124]\n\n# Receive message (execute within the pod)\n$ sh tools.sh org.apache.rocketmq.example.quickstart.Consumer\nConsumeMessageThread_please_rename_unique_group_name_4_16 Receive New Messages: [MessageExt [brokerName=rocketmq-demo-broker-0, queueId=2, storeSize=192, queueOffset=124, sysFlag=0, bornTimestamp=1723734104097, bornHost=/192.168.58.228:40492, storeTimestamp=1723734104097, storeHost=/192.168.58.228:10911, msgId=C0A83AE400002A9F000000000002ECD2, commitLogOffset=191698, bodyCRC=638172955, reconsumeTimes=0, preparedTransactionOffset=0, toString()=Message{topic='TopicTest', flag=0, properties={MIN_OFFSET=0, MAX_OFFSET=125, CONSUME_START_TIME=1723734158990, UNIQ_KEY=7F00000100E60F6F4D334B52982103E7, CLUSTER=DefaultCluster, TAGS=TagA}, body=[72, 101, 108, 108, 111, 32, 82, 111, 99, 107, 101, 116, 77, 81, 32, 57, 57, 57], transactionId='null'}]]\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Client Logger Configuration for Windows\nDESCRIPTION: Example JVM system properties configuration for RocketMQ client logging on Windows systems. Specifies log directory, level, maximum index, and file size settings.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/06log.md#2025-04-09_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n-Drocketmq.client.logRoot=D:\\logs -Drocketmq.client.logLevel=WARN -Drocketmq.client.logFileMaxIndex=20 -Drocketmq.client.logFileMaxSize=67108864\n```\n\n----------------------------------------\n\nTITLE: 设置RocketMQ消费者线程数\nDESCRIPTION: 通过设置消费者的ConsumeThreadMin和ConsumeThreadMax属性来控制消费者线程数量。这两个参数用于指定消费者处理消息的最小和最大线程数。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconsumer.setConsumeThreadMin(20);\nconsumer.setConsumeThreadMax(20);\n```\n\n----------------------------------------\n\nTITLE: Basic JVM Memory Configuration for RocketMQ\nDESCRIPTION: Basic JVM server configuration with fixed heap size of 8GB for better performance by preventing heap resizing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/05JVMOS.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-server -Xms8g -Xmx8g\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Sink Connector\nDESCRIPTION: REST API call to configure and start the JDBC sink connector for MySQL target database.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest -d '{\n  \"connector.class\": \"org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector\",\n  \"max.task\": \"2\",\n  \"connect.topicnames\": \"debezium-mysql-source\",\n  \"connection.url\": \"jdbc:mysql://database ip:3306/inventory_2\",\n  \"connection.user\": \"root\",\n  \"connection.password\": \"debezium\",\n  \"pk.fields\": \"id\",\n  \"table.name.from.header\": \"true\",\n  \"pk.mode\": \"record_key\",\n  \"insert.mode\": \"UPSERT\",\n  \"db.timezone\": \"UTC\",\n  \"table.types\": \"TABLE\",\n  \"errors.deadletterqueue.topic.name\": \"dlq-topic\",\n  \"errors.log.enable\": \"true\",\n  \"errors.tolerance\": \"ALL\",\n  \"delete.enabled\": \"true\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"}'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Consumer Subscription Setup in RocketMQ (Java)\nDESCRIPTION: Illustrates an incorrect setup where consumers in the same group subscribe to different tags of the same topic. This violates the principle of consistent subscription relationships and can lead to message consumption issues.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/05subscribe.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPushConsumer consumer1 = provider.newPushConsumerBuilder().setConsumerGroup(\"GroupA\").build();\nconsumer1.subscribe(\"TopicA\", new FilterExpression(\"Tag1\", FilterExpressionType.TAG));\n```\n\nLANGUAGE: java\nCODE:\n```\nPushConsumer consumer2 = provider.newPushConsumerBuilder().setConsumerGroup(\"GroupA\").build();\nconsumer2.subscribe(\"TopicA\", new FilterExpression(\"Tag2\", FilterExpressionType.TAG));\n```\n\nLANGUAGE: java\nCODE:\n```\nPushConsumer consumer3 = provider.newPushConsumerBuilder().setConsumerGroup(\"GroupA\").build();\nconsumer3.subscribe(\"TopicA\", new FilterExpression(\"Tag2\", FilterExpressionType.TAG));\n```\n\n----------------------------------------\n\nTITLE: Querying Messages by Offset in RocketMQ (Markdown)\nDESCRIPTION: This snippet describes the 'queryMsgByOffset' command used to query a message by its offset in RocketMQ. It includes options for specifying the broker name, queue ID, offset value, topic name, printing help, and setting the NameServer address.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| queryMsgByOffset | Query a message by offset | -b | Broker name (Note that this should be the name of the Broker, not the address. The name of the Broker can be found in clusterList.) |\n| | | -i | query queue id |\n| | | -o | offset value |\n| | | -t | topic name |\n| | | -h | Print help |\n| | | -n | NameServer address,format ip:port |\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ NameServer Container\nDESCRIPTION: Commands to start the RocketMQ NameServer in a Docker container and verify its successful startup by checking the logs.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Start NameServer\ndocker run -d --name rmqnamesrv -p 9876:9876 --network rocketmq apache/rocketmq:5.3.2 sh mqnamesrv\n\n# Verify if NameServer started successfully\ndocker logs -f rmqnamesrv\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction Topic using mqadmin\nDESCRIPTION: Creates a topic that specifically supports transactional messages in Apache RocketMQ 5.0. The command uses the message.type attribute to specify the topic as a TRANSACTION type.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/04transactionmessage.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=Transaction\n```\n\n----------------------------------------\n\nTITLE: Using mqadmin Command to Send Messages with Tracing in RocketMQ\nDESCRIPTION: Shell command example showing how to send a message with tracing enabled using the mqadmin command-line tool. The -m flag enables message tracing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/03messagetra.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./mqadmin sendMessage -m true --topic some-topic-name -n 127.0.0.1:9876 -p \"your meesgae content\"\n```\n\n----------------------------------------\n\nTITLE: Querying ACL Configuration Version Information in RocketMQ (Shell)\nDESCRIPTION: Command to query the ACL configuration file version information from a broker or across an entire cluster. This provides visibility into the current version of ACL configuration in use.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/03access.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin clusterAclConfigVersion -n 192.168.1.2:9876 -c DefaultCluster\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Maven command to build the RocketMQ Connect runtime environment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd  rocketmq-connect\nmvn -Prelease-connect -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Maven command to build the RocketMQ Connect runtime environment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd  rocketmq-connect\nmvn -Prelease-connect -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Creating Consumer with Inconsistent Tag Subscription (Java)\nDESCRIPTION: This code snippet demonstrates creating a consumer instance that subscribes to 'TopicA' with 'Tag1'. This is part of an error example where multiple consumers in the same group subscribe to different tags.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/07subscribe.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    Properties properties = new Properties();\n    properties.put(PropertyKeyConst.GROUP_ID, \"GID_test_2\");\n    Consumer consumer = ONSFactory.createConsumer(properties);\n    consumer.subscribe(\"TopicA\", \"Tag1\", new MessageListener() {\n        public Action consume(Message message, ConsumeContext context) {\n            System.out.println(message.getMsgID());\n            return Action.CommitMessage;\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Sending Messages in RocketMQ\nDESCRIPTION: Command line interface for sending messages to RocketMQ topics. Supports configuring message properties like topic, body, keys, tags and specific queue targeting.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nsendMessage options:\n-h Print help\n-n NameServer address,format ip:port\n-t topic name\n-p body, message body\n-k keys\n-c tags\n-b BrokerName\n-i queueId\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic using RocketMQ Admin Tools\nDESCRIPTION: Command to create a new topic named 'TestTopic' in the RocketMQ cluster using the mqadmin CLI tool.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/01quickstart.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/mqadmin updatetopic -n localhost:9876 -t TestTopic -c DefaultCluster\n```\n\n----------------------------------------\n\nTITLE: Configuring G1 Garbage Collector for RocketMQ\nDESCRIPTION: Recommended garbage collection settings using G1 collector for RocketMQ production deployments with JDK 1.8.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-XX:+UseG1GC \n-XX:G1HeapRegionSize=16m   \n-XX:G1ReservePercent=25 \n-XX:InitiatingHeapOccupancyPercent=30\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction Topic with mqadmin Command\nDESCRIPTION: Creates a topic named TestTopic that supports TRANSACTION message types. The command includes cluster name, topic name, nameserver address, and sets the message.type attribute to TRANSACTION.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/04transactionmessage.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/mqadmin updatetopic -n localhost:9876 -t TestTopic -c DefaultCluster -a +message.type=TRANSACTION\n```\n\n----------------------------------------\n\nTITLE: Deleting ACL Configuration with mqadmin in RocketMQ\nDESCRIPTION: This shell command shows how to delete an ACL configuration for a specific account in RocketMQ using the 'mqadmin' tool. It requires the Namesrv address, cluster name, and the Access Key to identify the account.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/04access.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sh mqadmin deleteAccessConfig -n 192.168.1.2:9876 -c DefaultCluster -a RocketMQ\n```\n\n----------------------------------------\n\nTITLE: CLIENT_SERVICE_NOT_OK错误消息\nDESCRIPTION: 当尝试在同一个JVM中使用相同的Producer/Consumer Group启动多个Producer/Consumer实例时出现的错误信息。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nThe xxx service state not OK, maybe started once\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller in NameServer Properties\nDESCRIPTION: Configuration parameters for enabling and setting up the Controller component when embedded in NameServer. Includes essential settings for DLeger group, peers, storage, and election behavior.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/03autofailover.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nenableControllerInNamesrv = true\ncontrollerDLegerGroup = group1\ncontrollerDLegerPeers = n0-127.0.0.1:9877;n1-127.0.0.1:9878;n2-127.0.0.1:9879\ncontrollerDLegerSelfId = n0\ncontrollerStorePath = /home/admin/DledgerController\nenableElectUncleanMaster = false\nnotifyBrokerRoleChanged = true\n```\n\n----------------------------------------\n\nTITLE: Creating Ordered Topic in Apache RocketMQ using Shell Command\nDESCRIPTION: This shell command demonstrates how to create a topic for ordered messages in Apache RocketMQ. It uses the mqadmin utility to update a topic with the -o parameter set to true, which represents ordered messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/03message2.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/mqadmin updateTopic -c DefaultCluster -t TopicTest -o true -n 127.0.0.1:9876\ncreate topic to 127.0.0.1:10911 success.\nTopicConfig [topicName=TopicTest, readQueueNums=8, writeQueueNums=8, perm=RW-, topicFilterType=SINGLE_TAG, topicSysFlag=0, order=true, attributes=null]\n```\n\n----------------------------------------\n\nTITLE: Specifying NameServer Address via Java Startup Parameter\nDESCRIPTION: Illustrates how to set the NameServer address using a Java startup parameter. This method provides an alternative way to configure the NameServer address without modifying the code.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/01bestpractice.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-Drocketmq.namesrv.addr=192.168.0.1:9876;192.168.0.2:9876  \n```\n\n----------------------------------------\n\nTITLE: RocketMQ Consumer Parameters Table Structure\nDESCRIPTION: HTML table structure defining consumer command parameters including consumerProgress, consumerStatus, getConsumerStatus, and updateSubGroup with their options and explanations\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\n  <colgroup>\n    <col width={177} />\n    <col width={175} />\n    <col width={177} />\n    <col width={200} />\n  </colgroup>\n  <tbody>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td height={23} className=\"xl63\" width={177} style={{ height: \"17.0pt\", width: \"133pt\" }}>Name</td>\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>Definitation</td>\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>Command options</td>\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>Explain</td>\n    </tr>\n    <!-- Additional table rows omitted for brevity -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating FIFO Topic with Default Configuration\nDESCRIPTION: Example command to create a FIFO topic with default cluster settings and localhost nameserver.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/03fifomessage.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/mqadmin updateTopic -c DefaultCluster -t FIFOTopic -o true -n 127.0.0.1:9876 -a +message.type=FIFO\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Connect Sink Connector\nDESCRIPTION: Command to start a file sink connector using the REST API, configuring it to read messages from the specified RocketMQ topic and write them to a destination file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/fileSinkConnector -d '{\n\t\"connector.class\": \"org.apache.rocketmq.connect.file.FileSinkConnector\",\n\t\"filename\": \"/Users/YourUsername/rocketmqconnect/test-sink-file.txt\",\n\t\"connect.topicnames\": \"fileTopic\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Starting Debezium PostgreSQL Source Connector\nDESCRIPTION: cURL command to start the Debezium PostgreSQL source connector for synchronizing data from the PostgreSQL database to RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/postgres-connector1000 -d  '{\n  \"connector.class\": \"org.apache.rocketmq.connect.debezium.postgres.DebeziumPostgresConnector\",\n  \"max.task\": \"1\",\n  \"connect.topicname\": \"debezium-source-topic1000\",\n  \"kafka.transforms\": \"Unwrap\",\n  \"kafka.transforms.Unwrap.delete.handling.mode\": \"none\",\n  \"kafka.transforms.Unwrap.type\": \"io.debezium.transforms.ExtractNewRecordState\",\n  \"kafka.transforms.Unwrap.add.headers\": \"op,source.db,source.table\",\n  \"database.history.skip.unparseable.ddl\": true,\n  \"database.server.name\": \"bankserver1\",\n  \"database.port\": 5432,\n  \"database.hostname\": \"database ip\",\n  \"database.connectionTimeZone\": \"UTC\",\n  \"database.user\": \"start_data_engineer\",\n  \"database.dbname\": \"start_data_engineer\",\n  \"database.password\": \"password\",\n  \"table.whitelist\": \"bank.user\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting NameServer Address via Environment Variable\nDESCRIPTION: Demonstrates how to set the NameServer address using an environment variable. This approach allows for easy configuration changes without modifying the application code or startup parameters.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/01bestpractice.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nexport   NAMESRV_ADDR=192.168.0.1:9876;192.168.0.2:9876   \n```\n\n----------------------------------------\n\nTITLE: RocketMQ Monitoring Command Parameters Table\nDESCRIPTION: HTML table structure defining monitoring-related commands including startMonitoring command with options for NameServer address configuration and help documentation.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\\n  <tbody>\\n    <tr height={23} style={{ height: \"17.0pt\" }}>\\n      <td height={23} className=\"xl63\" width={177} style={{ height: \"17.0pt\", width: \"133pt\" }}>\\n        Name\\n      </td>\\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>\\n        Definition\\n      </td>\\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>\\n        Command options\\n      </td>\\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>\\n        Explain\\n      </td>\\n    </tr>\\n    <!-- Additional rows omitted for brevity -->\\n  </tbody>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Quick Deployment of RocketMQ with DLedger\nDESCRIPTION: Commands to start a RocketMQ cluster with DLedger support using the fast-try script.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#{rocketmq-version} replace with rocketmq actual version. example: 5.1.0\n$ cd distribution/target/rocketmq-{rocketmq-version}/rocketmq-{rocketmq-version}\n$ sh bin/dledger/fast-try.sh start\n```\n\n----------------------------------------\n\nTITLE: Creating Consumer with Inconsistent Tag Subscription (Java)\nDESCRIPTION: This code snippet demonstrates a third consumer instance in the same group, also subscribing to 'TopicA' with 'Tag2'. While consistent with the second consumer, it's inconsistent with the first, violating the subscription consistency principle.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/07subscribe.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n    Properties properties = new Properties();\n    properties.put(PropertyKeyConst.GROUP_ID, \"GID_test_2\");\n    Consumer consumer = ONSFactory.createConsumer(properties);\n    consumer.subscribe(\"TopicA\", \"Tag2\", new MessageListener() {\n        public Action consume(Message message, ConsumeContext context) {\n            System.out.println(message.getMsgID());\n            return Action.CommitMessage;\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic in RocketMQ using mqadmin\nDESCRIPTION: Command to enter the RocketMQ broker container and create a new topic called 'TestTopic' using the mqadmin tool.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ docker exec -it rmqbroker bash\n$ sh mqadmin updatetopic -t TestTopic -c DefaultCluster\n```\n\n----------------------------------------\n\nTITLE: Configuring NameServer Addresses in RocketMQ Java Client\nDESCRIPTION: Shows how to set the NameServer addresses in producer and consumer code. Multiple NameServer addresses are specified with semicolons as separators to enable client connectivity to the RocketMQ cluster.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/01bestpractice.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nproducer.setNamesrvAddr(\"192.168.0.1:9876;192.168.0.2:9876\");  \n\nconsumer.setNamesrvAddr(\"192.168.0.1:9876;192.168.0.2:9876\");\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC OTLP Exporter for RocketMQ Broker Metrics\nDESCRIPTION: Steps to enable and configure the gRPC OTLP exporter for RocketMQ Broker metrics. This includes setting the exporter type, target, and optional configurations like headers, timeout, and reporting interval.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/12-observability/01metrics.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. Set `metricsExporterType` to `OTLP_GRPC`.\n2. Set `metricsGrpcExporterTarget` to the endpoint provided by the OpenTelemetry Collector.\n\nOptional configurations:\n\n1. `metricsGrpcExporterHeader`: Attach request headers to the gRPC OTLP exporter in the format of key1:value1,key2:value2.\n2. `metricGrpcExporterTimeOutInMills`: Set the request timeout for the gRPC OTLP exporter.\n3. `metricGrpcExporterIntervalInMills`: Set the reporting interval for the gRPC OTLP exporter.\n```\n\n----------------------------------------\n\nTITLE: Setting Name Server Address via Java System Property\nDESCRIPTION: Demonstrates how to configure Name Server addresses using Java startup parameters.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/06-parameterConfiguration/01local.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-Drocketmq.namesrv.addr=192.168.0.1:9876;192.168.0.2:9876  \n```\n\n----------------------------------------\n\nTITLE: RocketMQ Topic Command Options in HTML\nDESCRIPTION: HTML table showing command options for RocketMQ topic management. Includes the '-a' option for showing only active topics and the '-t' option for specifying topics.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\n  <colgroup>\n    <col width={177} />\n    <col width={175} />\n    <col width={177} />\n    <col width={185} />\n  </colgroup>\n  <tbody>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl63\"\n        width={177}\n        style={{ height: \"17.0pt\", width: \"133pt\" }}\n      >\n        Name\n      </td>\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>\n         Definition \n      </td>\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>\n         Command options \n      </td>\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>\n        Explain\n      </td>\n    </tr>\n    <tr height={207} style={{ height: \"155.0pt\" }}>\n      <td\n        rowSpan={4}\n        height={326}\n        className=\"xl67\"\n        width={177}\n        style={{\n          borderBottom: \"1.0pt\",\n          height: \"244.0pt\",\n          borderTop: \"none\",\n          width: \"133pt\"\n        }}\n      >\n        <span style={{ msoSpacerun: \"yes\" }}> </span>clusterList\n      </td>\n      <td\n        rowSpan={4}\n        className=\"xl70\"\n        width={175}\n        style={{ borderBottom: \"1.0pt\", borderTop: \"none\", width: \"131pt\" }}\n      >\n        Query cluster information, including the cluster, BrokerName, BrokerId, TPS, and other information.\n      </td>\n      <td className=\"xl65\" width={177} style={{ width: \"133pt\" }}>\n        -m\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        Print more information (additional information printed includes: #InTotalYest, #OutTotalYest,#InTotalToday ,#OutTotalToday)\n      </td>\n    </tr>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"17.0pt\", width: \"133pt\" }}\n      >\n        -h\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        Print help\n      </td>\n    </tr>\n    <tr height={57} style={{ height: \"43.0pt\" }}>\n      <td\n        height={57}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"43.0pt\", width: \"133pt\" }}\n      >\n        -n\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        NameServer address，format ip:port\n      </td>\n    </tr>\n    <tr height={39} style={{ height: \"29.0pt\" }}>\n      <td\n        height={39}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"29.0pt\", width: \"133pt\" }}\n      >\n        -i\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        Print interval, in seconds.\n      </td>\n    </tr>\n    <tr height={95} style={{ height: \"71.0pt\" }}>\n      <td\n        rowSpan={8}\n        height={391}\n        className=\"xl67\"\n        width={177}\n        style={{\n          borderBottom: \"1.0pt\",\n          height: \"292.0pt\",\n          borderTop: \"none\",\n          width: \"133pt\"\n        }}\n      >\n        clusterRT\n      </td>\n      <td\n        rowSpan={8}\n        className=\"xl70\"\n        width={175}\n        style={{ borderBottom: \"1.0pt\", borderTop: \"none\", width: \"131pt\" }}\n      >\n        Send a message to test the RT of each Broker in the cluster. The message is sent to the${\"{\"}BrokerName{\"}\"} Topic。\n      </td>\n      <td className=\"xl65\" width={177} style={{ width: \"133pt\" }}>\n        -a\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        amount,the total number of probes each time. RT = total time / amount\n      </td>\n    </tr>\n    <tr height={39} style={{ height: \"29.0pt\" }}>\n      <td\n        height={39}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"29.0pt\", width: \"133pt\" }}\n      >\n        -s\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        Message size，Unit: B\n      </td>\n    </tr>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"17.0pt\", width: \"133pt\" }}\n      >\n        -c\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        Which cluster to probe\n      </td>\n    </tr>\n    <tr height={76} style={{ height: \"57.0pt\" }}>\n      <td\n        height={76}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"57.0pt\", width: \"133pt\" }}\n      >\n        -p\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        Whether to print formatted logs, separated by |, default is not printed.\n      </td>\n    </tr>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"17.0pt\", width: \"133pt\" }}\n      >\n        -h\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        Print help\n      </td>\n    </tr>\n    <tr height={39} style={{ height: \"29.0pt\" }}>\n      <td\n        height={39}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"29.0pt\", width: \"133pt\" }}\n      >\n        -m\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        Belonging datacenter, for printing purposes.\n      </td>\n    </tr>\n    <tr height={39} style={{ height: \"29.0pt\" }}>\n      <td\n        height={39}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"29.0pt\", width: \"133pt\" }}\n      >\n        -i\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        Send interval,in seconds.\n      </td>\n    </tr>\n    <tr height={57} style={{ height: \"43.0pt\" }}>\n      <td\n        height={57}\n        className=\"xl65\"\n        width={177}\n        style={{ height: \"43.0pt\", width: \"133pt\" }}\n      >\n        -n\n      </td>\n      <td className=\"xl66\" width={185} style={{ width: \"139pt\" }}>\n        NameServer address，format ip:port\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation: Consumer 2 Subscribing to TopicB (Java)\nDESCRIPTION: This is part of an error example showing inconsistent subscription relationships. This consumer instance subscribes to 'TopicB' while other instances in the same group subscribe to different topics, violating subscription consistency.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/07subscribe.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nProperties properties = new Properties();\n    properties.put(PropertyKeyConst.GROUP_ID, \"GID_test_1\");\n    Consumer consumer = ONSFactory.createConsumer(properties);\n    consumer.subscribe(\"TopicB\", \"*\", new MessageListener() {\n        public Action consume(Message message, ConsumeContext context) {\n            System.out.println(message.getMsgID());\n            return Action.CommitMessage;\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Displaying RocketMQ Server Metrics Table\nDESCRIPTION: Markdown table showing RocketMQ broker metrics with their definitions and corresponding broker metric names. Includes performance metrics, runtime statistics, and resource utilization indicators.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Metrics name                                                 | Definition                                                   | Corresponds to Broker metric name     |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------- |\n| rocketmq_broker_tps                                          | Broker-level production TPS                                  |                                       |\n| rocketmq_broker_qps                                          | Broker-level consumption QPS                                 |                                       |\n```\n\n----------------------------------------\n\nTITLE: JVM Biased Locking Configuration\nDESCRIPTION: Configuration to disable biased locking for reduced JVM pauses.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/05JVMOS.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-XX:-UseBiasedLocking\n```\n\n----------------------------------------\n\nTITLE: 正确初始化新消息并发送 (Java)\nDESCRIPTION: 展示了如何正确地从接收到的消息创建新消息并发送。这种方法确保了消息的不可变性，避免了直接修改原始消息的问题。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/03-domainModel/04message.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMessage m = Consumer.receive();\nMessage m2= MessageBuilder.buildFrom(m);\nProducer.send(m2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Backoff Algorithm for Flow Control Retries in RocketMQ\nDESCRIPTION: Example algorithm for connection backoff strategy used when retrying message sending after flow control errors. The algorithm uses exponential backoff with jitter to avoid retry storms.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/04-featureBehavior/05sendretrypolicy.md#2025-04-09_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\nConnectWithBackoff()\n  current_backoff = INITIAL_BACKOFF\n  current_deadline = now() + INITIAL_BACKOFF\n  while (TryConnect(Max(current_deadline, now() + MIN_CONNECT_TIMEOUT))!= SUCCESS)\n    SleepUntil(current_deadline)\n    current_backoff = Min(current_backoff * MULTIPLIER, MAX_BACKOFF)\n    current_deadline = now() + current_backoff + UniformRandom(-JITTER * current_backoff, JITTER * current_backoff)\n```\n\n----------------------------------------\n\nTITLE: Error: Name Server Address Not Found in RocketMQ\nDESCRIPTION: These error messages occur when the Producer or Consumer fails to obtain the NameServer address information. This is a common configuration issue in RocketMQ client setup.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nNo name server address, please set it\n```\n\nLANGUAGE: java\nCODE:\n```\nconnect to xxx failed, maybe the domain name xxx not bind in /etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Starting Single Master Broker\nDESCRIPTION: Commands to start a single master broker node in RocketMQ with NameServer configuration. Supports multiple NameServer addresses separated by semicolons.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-b.properties &\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j2 XML for RocketMQ Client\nDESCRIPTION: XML configuration for Log4j2 when used with RocketMQ client. Defines RocketMQ-specific appender with producer group, name server address, topic, and tag.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/06log.md#2025-04-09_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<RocketMQ name=\"rocketmqAppender\" producerGroup=\"yourLogGroup\" nameServerAddress=\"yourRocketmqNameserverAddress\"\n     topic=\"yourLogTopic\" tag=\"yourTag\">\n    <PatternLayout pattern=\"%d [%p] hahahah %c %m%n\"/>\n</RocketMQ>\n```\n\n----------------------------------------\n\nTITLE: Starting the RocketMQ NameServer\nDESCRIPTION: Commands to start the RocketMQ NameServer service and verify successful startup by checking the log file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/01quickstart.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n### Start the namesrv service\n$ nohup sh bin/mqnamesrv &\n \n### Verify that the namesrv service is started successfully\n$ tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n----------------------------------------\n\nTITLE: Error: Client Parameter Validation Failures in RocketMQ\nDESCRIPTION: These error messages appear when Consumer parameter verification fails. RocketMQ performs validation on client parameters to ensure proper configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nconsumerGroup can not equal ...\n```\n\nLANGUAGE: java\nCODE:\n```\nallocateMessageQueueStrategy is null ...\n```\n\nLANGUAGE: java\nCODE:\n```\nLong polling mode, the consumer consumerTimeoutMillisWhenSuspend must greater than brokerSuspendMaxTimeMillis ...\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Version Check Configuration\nDESCRIPTION: Java code snippet showing the version constant that needs to be verified and updated before release.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final int CURRENT_VERSION = Version.V4_5_0.ordinal();\n```\n\n----------------------------------------\n\nTITLE: Compiling RocketMQ Dashboard from Source\nDESCRIPTION: Maven command to compile RocketMQ Dashboard from source code, skipping tests.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/03Dashboard.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: 错误的消息修改和发送方式 (Java)\nDESCRIPTION: 展示了一个不正确的消息处理方式，直接修改接收到的消息并重新发送。这种方法可能导致消息不一致性问题，应该避免使用。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/03-domainModel/04message.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMessage m = Consumer.receive();\nm.update()；\nProducer.send(m);\n```\n\n----------------------------------------\n\nTITLE: Starting the RocketMQ NameServer\nDESCRIPTION: Commands to start the RocketMQ NameServer service and verify successful startup by checking the log file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/01quickstart.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n### Start the namesrv service\n$ nohup sh bin/mqnamesrv &\n \n### Verify that the namesrv service is started successfully\n$ tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n----------------------------------------\n\nTITLE: Error: Message Queue Not Found for Topic in RocketMQ\nDESCRIPTION: This error occurs when a Producer cannot obtain the corresponding Queue information for a Topic. It suggests configuration or permission issues with the Topic's Queue.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nCan not find Message Queue for this topic\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Node Single Replica Broker in Cluster Mode\nDESCRIPTION: Command to start one of the masters in a multiple node Broker cluster configuration without slaves. In this setup, Proxy will be deployed separately.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-a.properties &\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Messages with RocketMQ CLI Tools\nDESCRIPTION: Commands to set the nameserver address and use RocketMQ's built-in tools to send and receive messages for testing the setup.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/01quickstart.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: UNKNOWN_HOST_EXCEPTION错误消息\nDESCRIPTION: 当主机无法解析本地地址时出现的错误信息。可能是由于网络接口配置问题或主机名解析问题导致的。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nInetAddress java.net.InetAddress.getLocalHost() throws UnknownHostException\n```\n\n----------------------------------------\n\nTITLE: Defining RocketMQ Broker Metrics Table in Markdown\nDESCRIPTION: This code snippet defines a markdown table that lists and describes various metrics for RocketMQ brokers. It includes metric types, names, units, descriptions, and associated labels for monitoring different aspects of the messaging system.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/12-observability/01metrics.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Type      | Name                                          | Unit        | Description                                                                                                                                                                                                                                                                                    | Label                                                             |\n|-----------|-----------------------------------------------|-------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|\n| counter   | rocketmq_messages_in_total                    | count       | The number of messages that are produced.                                                                                                                                                                                                                                                      | cluster,node_type,node_id,topic,message_type                      |\n| counter   | rocketmq_messages_out_total                   | count       | The number of messages that are consumed.                                                                                                                                                                                                                                                      | cluster,node_type,node_id,topic, consumer_group                   |\n| counter   | rocketmq_throughput_in_total                  | byte        | The write throughput that are produced.                                                                                                                                                                                                                                                        | cluster,node_type,node_id,topic,message_type                      |\n| counter   | rocketmq_throughput_out_total                 | byte        | The read throughput that are produced.                                                                                                                                                                                                                                                         | cluster,node_type,node_id,topic, consumer_group                   |\n| histogram | rocketmq_message_size                         | byte        | The distribution of message sizes. This metric is counted only when messages are sent. The following shows the distribution ranges:<br />le_1_kb: ≤ 1 KB<br /> le_4_kb: ≤ 4 KB<br />le_512_kb: ≤ 512 KB<br />le_1_mb: ≤ 1 MB<br />le_2_mb: ≤ 2 MB<br />le_4_mb: ≤ 4 MB<br />le_overflow: > 4 MB | cluster,node_type,node_id,topic,message_type                      |\n| gauge     | rocketmq_consumer_ready_messages              | count       | The number of ready messages.                                                                                                                                                                                                                                                                  | cluster,node_type,node_id,topic, consumer_group                   |\n| gauge     | rocketmq_consumer_inflight_messages           | count       | The number of inflight messages.                                                                                                                                                                                                                                                               | cluster,node_type,node_id,topic, consumer_group                   |\n| gauge     | rocketmq_consumer_queueing_latency            | millisecond | Ready messages queueing delay time.                                                                                                                                                                                                                                                            | cluster,node_type,node_id,topic, consumer_group                   |\n| gauge     | rocketmq_consumer_lag_latency                 | millisecond | The delayed time before messages are consumed.                                                                                                                                                                                                                                                 | cluster,node_type,node_id,topic, consumer_group                   |\n| counter   | rocketmq_send_to_dlq_messages_total           | count       | The number of messages that are sent to the dead-letter queue.                                                                                                                                                                                                                                 | cluster,node_type,node_id,topic, consumer_group                   |\n| histogram | rocketmq_rpc_latency                          | millisecond | The rpc call latency                                                                                                                                                                                                                                                                           | cluster,node_typ,node_id,protocol_type,request_code,response_code |\n| gauge     | rocketmq_storage_message_reserve_time         | millisecond | Message retention time.                                                                                                                                                                                                                                                                        | cluster,node_type,node_id                                         |\n| gauge     | rocketmq_storage_dispatch_behind_bytes        | byte        | Undispatched message size.                                                                                                                                                                                                                                                                     | cluster,node_type,node_id                                         |\n| gauge     | rocketmq_storage_flush_behind_bytes           | byte        | Unflushed message size.                                                                                                                                                                                                                                                                        | cluster,node_type,node_id                                         |\n| gauge     | rocketmq_thread_pool_wartermark               | count       | The number of tasks queued in the thread pool.                                                                                                                                                                                                                                                 | cluster,node_type,node_id,name                                    |\n| histogram | rocketmq_topic_create_execution_time          | millisecond | The execution time for creating topic: <br />le_10_ms<br />le_100_ms<br />le_1_s<br />le_3_s<br />le_5_s<br />le_overflow                                                                                                                                                                      | cluster,node_type,node_id,invocation_status,is_system            |\n| histogram | rocketmq_consumer_group_create_execution_time | millisecond | The execution time for creating consumer group: <br />le_10_ms<br />le_100_ms<br />le_1_s<br />le_3_s<br />le_5_s<br />le_overflow                                                                                                                                                             | cluster,node_type,node_id,invocation_status                      |\n| gauge     | rocketmq_topic_number                         | count       | The number of topics                                                                                                                                                                                                                                                                           | cluster,node_type,node_id                                         |\n| gauge     | rocketmq_consumer_group_number                | count       | The number of consumer group                                                                                                                                                                                                                                                                   | cluster,node_type,node_id                                         |\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC MySQL Sink Connector\nDESCRIPTION: cURL command to configure and start the JDBC MySQL Sink Connector via the RocketMQ Connect REST API. This connector consumes data from RocketMQ and writes it to the MySQL target database.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest201 -d '{\n  \"connector.class\": \"org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector\",\n  \"max.task\": \"2\",\n  \"connect.topicnames\": \"debezium-postgres-source-01\",\n  \"connection.url\": \"jdbc:mysql://database ip:3306/bank1\",\n  \"connection.user\": \"root\",\n  \"connection.password\": \"debezium\",\n  \"pk.fields\": \"holding_id\",\n  \"table.name.from.header\": \"true\",\n  \"pk.mode\": \"record_key\",\n  \"insert.mode\": \"UPSERT\",\n  \"db.timezone\": \"UTC\",\n  \"table.types\": \"TABLE\",\n  \"errors.deadletterqueue.topic.name\": \"dlq-topic\",\n  \"errors.log.enable\": \"true\",\n  \"errors.tolerance\": \"ALL\",\n  \"delete.enabled\": \"true\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Starting SFTP Source Connector for RocketMQ Connect\nDESCRIPTION: cURL command to start the SFTP source connector, which reads from the source.txt file and sends data to a RocketMQ topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST --location \"http://localhost:8082/connectors/SftpSourceConnector\" --http1.1 \\\n    -H \"Host: localhost:8082\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"connector.class\": \"org.apache.rocketmq.connect.http.sink.SftpSourceConnector\",\n          \"host\": \"127.0.0.1\",\n          \"port\": 22,\n          \"username\": \"YourUsername\",\n          \"password\": \"yourPassword\",\n          \"filePath\": \"/Users/YourUsername/rocketmqconnect/sftp-test/source.txt\",\n          \"connect.topicname\": \"sftpTopic\",\n          \"fieldSeparator\": \"|\",\n          \"fieldSchema\": \"username|idCardNo|orderNo|orderAmount|trxDate|trxTime|profit\"\n        }'\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Schema Setup\nDESCRIPTION: SQL commands to create and populate the source MySQL database schema\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate database bank;\nuse bank;\n\ncreate table bank.user\n(\n    id       bigint NOT NULL AUTO_INCREMENT,\n    user_id          integer,\n    name    varchar(8),\n    age integer,\n    birthday date,\n    datetime_created timestamp(3),\n    datetime_updated timestamp(3),\n    height           decimal(11, 2) null,\n    PRIMARY KEY (`id`)\n);\n\ninsert into bank.user values (1003, 1, 'lilei2', 10, now(), now(), now(), 1.72);\nupdate bank.user set user_id = 1003 where id = 1003;\n```\n\n----------------------------------------\n\nTITLE: Unpacking and Building RocketMQ from Source\nDESCRIPTION: Instructions for extracting the RocketMQ source package, compiling and building the binary executables. This process prepares RocketMQ for local execution.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/01quickstart.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ unzip rocketmq-all-4.9.4-source-release.zip\n$ cd rocketmq-all-4.9.4-source-release/\n$ mvn -Prelease-all -DskipTests clean install -U\n$ cd distribution/target/rocketmq-4.9.4/rocketmq-4.9.4\n```\n\n----------------------------------------\n\nTITLE: Incorrect Message Handling in RocketMQ - Java\nDESCRIPTION: Shows an incorrect approach to message handling where the original message is modified directly, violating the message immutability principle.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/04message.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMessage m = Consumer.receive();\nm.update()；\nProducer.send(m);\n```\n\n----------------------------------------\n\nTITLE: Running RocketMQ Dashboard in Docker Container\nDESCRIPTION: Command to run RocketMQ Dashboard in a Docker container with configuration for the nameserver address and port mapping.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/04Dashboard.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name rocketmq-dashboard -e \"JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876\" -p 8080:8080 -t apacherocketmq/rocketmq-dashboard:latest\n```\n\n----------------------------------------\n\nTITLE: Compiling JDBC Connector\nDESCRIPTION: Commands to compile and install the JDBC connector plugin for RocketMQ Connect.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-jdbc/\n$ mvn clean package -Dmaven.test.skip=true\ncp rocketmq-connect-jdbc/target/rocketmq-connect-jdbc-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Handling Metrics Request in RocketMQ Exporter (Java)\nDESCRIPTION: This snippet shows how the RocketMQ Exporter handles a metrics request. It creates a StringWriter to collect metrics, calls the metricsService to gather data, and then outputs the collected metrics to the HTTP response.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate void metrics(HttpServletResponse response) throws IOException {\n    StringWriter writer = new StringWriter();\n    metricsService.metrics(writer);\n    response.setHeader(\"Content-Type\", \"text/plain; version=0.0.4; charset=utf-8\");\n    response.getOutputStream().print(writer.toString());\n}\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Connect Source Connector\nDESCRIPTION: Command to start a file source connector using the REST API, configuring it to read from the test source file and send data to a specified RocketMQ topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/fileSourceConnector -d '{\n\t\"connector.class\": \"org.apache.rocketmq.connect.file.FileSourceConnector\",\n\t\"filename\": \"/Users/YourUsername/rocketmqconnect/test-source-file.txt\",\n\t\"connect.topicname\": \"fileTopic\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Sending Event to EventBus in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to send an event to the EventBus in RocketMQ EventBridge, using the CloudEvents format to specify event details.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nPOST /putEvents HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type:\"application/cloudevents+json; charset=UTF-8\"\n{\n  \"specversion\" : \"1.0\",\n  \"type\" : \"com.github.pull_request.opened\",\n  \"source\" : \"https://github.com/cloudevents/spec/pull\",\n  \"subject\" : \"123\",\n  \"id\" : \"A234-1234-1234\",\n  \"time\" : \"2018-04-05T17:31:00Z\",\n  \"datacontenttype\" : \"application/json\",\n  \"data\" : {\n    \"body\":\"demo\"\n  },\n  \"aliyuneventbusname\":\"demo-bus\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Target for DingTalk in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create an event target that delivers notifications to a DingTalk robot, specifying the event bus name, rule name, and DingTalk configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nPOST /target/createEventTargets HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n    \"eventBusName\":\"demo-bus\",\n    \"eventRuleName\":\"demo-rule\",\n    \"eventTargets\":[\n        {\n            \"eventTargetName\":\"dingtalk-target\",\n            \"className\":\"acs.dingtalk\",\n            \"config\":{\n            \"WebHook\":\"https://oapi.dingtalk.com/robot/send?access_token=b43a54b702314415c2acdae97eda1e092528b7a9dddb31510a5b4430be2ef867\",\n            \"SecretKey\":\"SEC53483bf496b8f9e0b4ab0ab669d422208e6ccfaedfd5120ea6b8426b9ecd47aa\",\n            \"Body\":\"{\\\"template\\\":\\\"{\\\\\\\"text\\\\\\\":{\\\\\\\"content\\\\\\\":\\\\\\\"${content}\\\\\\\"},\\\\\\\"msgtype\\\\\\\":\\\\\\\"text\\\\\\\"}\\\",\\\"form\\\":\\\"TEMPLATE\\\",\\\"value\\\":\\\"{\\\\\\\"content\\\\\\\":\\\\\\\"$.data.body\\\\\\\"}\\\"}\"}\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages with Single Tag in Apache RocketMQ (Java)\nDESCRIPTION: This code snippet shows how to subscribe to messages with a single tag in Apache RocketMQ. It specifies the topic and creates a FilterExpression for the tag.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/07messagefilter.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString topic = \"Your Topic\";\n// Subscribe to messages that carry tag \"TagA\". \nFilterExpression filterExpression = new FilterExpression(\"TagA\", FilterExpressionType.TAG);\npushConsumer.subscribe(topic, filterExpression);\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Messages with RocketMQ Command-line Tools\nDESCRIPTION: Shell commands to enter the RocketMQ broker container and use built-in tools to produce and consume messages for testing the deployment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Enter the broker container\n$ docker exec -it rmqbroker bash\n\n$ sh tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Handling Metrics HTTP Request in Java\nDESCRIPTION: This snippet shows how the RocketMQ Exporter handles HTTP requests for metrics. It creates a StringWriter to collect metric indicators, uses the MetricsService to gather metrics, and then outputs the collected indicators to the HTTP response.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/04Exporter.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate void metrics(HttpServletResponse response) throws IOException {\n    StringWriter writer = new StringWriter();\n    metricsService.metrics(writer);\n    response.setHeader(\"Content-Type\", \"text/plain; version=0.0.4; charset=utf-8\");\n    response.getOutputStream().print(writer.toString());\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Topic Offset in RocketMQ Exporter (Java)\nDESCRIPTION: This code snippet is part of the collectTopicOffset task in the MetricCollectTask class. It fetches the topic list, examines topic stats, and processes offset information for each topic and broker.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nTopicList topicList = null;\ntry {  \n    topicList = mqAdminExt.fetchAllTopicList();\n} catch (Exception ex) {\n        log.error(String.format(\"collectTopicOffset-exception comes getting topic list from namesrv, address is %s\",\n            JSON.toJSONString(mqAdminExt.getNameServerAddressList())));\n        return;\n}\n\nSet < String > topicSet = topicList != null ? topicList.getTopicList() : null;\nfor (String topic: topicSet) {\n     TopicStatsTable topicStats = null;\n     try {\n         topicStats = mqAdminExt.examineTopicStats(topic);\n     } catch (Exception ex) {\n         log.error(String.format(\"collectTopicOffset-getting topic(%s) stats error. the namesrv address is %s\",\n             topic,\n             JSON.toJSONString(mqAdminExt.getNameServerAddressList())));\n         continue;\n     }\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j Dependencies for RocketMQ Client in Maven\nDESCRIPTION: XML configuration for adding Log4j dependencies to a Maven project for use with RocketMQ client logging. Includes SLF4J, Log4j, and necessary bridges.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/06log.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency> \n  <groupId>org.slf4j</groupId> \n  <artifactId>jcl-over-slf4j</artifactId> \n  <version>1.7.7</version>\n</dependency> \n<dependency>\n  <groupId>org.slf4j</groupId>\n  <artifactId>slf4j-log4j12</artifactId>\n  <version>1.7.7</version>\n</dependency> \n<dependency>\n  <groupId>log4j</groupId> \n  <artifactId>log4j</artifactId>\n  <version>1.2.17</version> \n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Collecting Topic Offset in RocketMQ Exporter (Java)\nDESCRIPTION: This code snippet is part of the collectTopicOffset task in the MetricCollectTask class. It fetches the topic list, examines topic stats, and processes offset information for each topic and broker.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nTopicList topicList = null;\ntry {  \n    topicList = mqAdminExt.fetchAllTopicList();\n} catch (Exception ex) {\n        log.error(String.format(\"collectTopicOffset-exception comes getting topic list from namesrv, address is %s\",\n            JSON.toJSONString(mqAdminExt.getNameServerAddressList())));\n        return;\n}\n\nSet < String > topicSet = topicList != null ? topicList.getTopicList() : null;\nfor (String topic: topicSet) {\n     TopicStatsTable topicStats = null;\n     try {\n         topicStats = mqAdminExt.examineTopicStats(topic);\n     } catch (Exception ex) {\n         log.error(String.format(\"collectTopicOffset-getting topic(%s) stats error. the namesrv address is %s\",\n             topic,\n             JSON.toJSONString(mqAdminExt.getNameServerAddressList())));\n         continue;\n     }\n```\n\n----------------------------------------\n\nTITLE: Creating Topic with Delay Message Type - Shell Command\nDESCRIPTION: Command to create a topic with delay message type using mqadmin tool. Requires nameserver address, topic name, and cluster name as parameters.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/02delaymessage.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=Delay\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complete ACL Configuration Content in RocketMQ (Shell)\nDESCRIPTION: Command to fetch the entire contents of the ACL configuration file from a broker or across an entire cluster. This allows administrators to view the full ACL configuration currently in use.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/03access.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin getAccessConfigSubCommand -n 192.168.1.2:9876 -c DefaultCluster\n```\n\n----------------------------------------\n\nTITLE: Creating RocketMQ Topic Using mqadmin\nDESCRIPTION: Shell commands to enter the RocketMQ broker container and create a new topic called 'TestTopic' in the 'DefaultCluster' using the mqadmin tool.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker exec -it rmqbroker bash\n$ sh mqadmin updatetopic -t TestTopic -c DefaultCluster\n```\n\n----------------------------------------\n\nTITLE: Processing Topic Offset Data in RocketMQ Exporter (Java)\nDESCRIPTION: This snippet shows how the RocketMQ Exporter processes topic offset data. It iterates through topic status entries, calculates offsets for each broker, and updates timestamp information.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nSet<Map.Entry<MessageQueue, TopicOffset>> topicStatusEntries = topicStats.getOffsetTable().entrySet();\nHashMap<String, Long> brokerOffsetMap = new HashMap<>();\nHashMap<String, Long> brokerUpdateTimestampMap = new HashMap<>();\nfor (Map.Entry<MessageQueue, TopicOffset> topicStatusEntry : topicStatusEntries) {\n    MessageQueue q = topicStatusEntry.getKey();\n    TopicOffset offset = topicStatusEntry.getValue();\n    if (brokerOffsetMap.containsKey(q.getBrokerName())) {\n        brokerOffsetMap.put(q.getBrokerName(), brokerOffsetMap.get(q.getBrokerName()) + offset.getMaxOffset());\n    } else {\n        brokerOffsetMap.put(q.getBrokerName(), offset.getMaxOffset());\n    }\n    if (brokerUpdateTimestampMap.containsKey(q.getBrokerName())) {\n        if (offset.getLastUpdateTimestamp() > brokerUpdateTimestampMap.get(q.getBrokerName())) {\n            brokerUpdateTimestampMap.put(q.getBrokerName(), offset.getLastUpdateTimestamp());\n        }\n    } else {\n        brokerUpdateTimestampMap.put(q.getBrokerName(),\n        offset.getLastUpdateTimestamp());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC MySQL Sink Connector\nDESCRIPTION: REST API call to create and configure the JDBC sink connector which consumes messages from the RocketMQ topic and writes them to the MySQL database using JDBC with UPSERT mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest201 -d '{\n  \"connector.class\": \"org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector\",\n  \"max.task\": \"2\",\n  \"connect.topicnames\": \"debezium-postgres-source-01\",\n  \"connection.url\": \"jdbc:mysql://数据库ip:3306/bank1\",\n  \"connection.user\": \"root\",\n  \"connection.password\": \"debezium\",\n  \"pk.fields\": \"holding_id\",\n  \"table.name.from.header\": \"true\",\n  \"pk.mode\": \"record_key\",\n  \"insert.mode\": \"UPSERT\",\n  \"db.timezone\": \"UTC\",\n  \"table.types\": \"TABLE\",\n  \"errors.deadletterqueue.topic.name\": \"dlq-topic\",\n  \"errors.log.enable\": \"true\",\n  \"errors.tolerance\": \"ALL\",\n  \"delete.enabled\": \"true\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding RocketMQ Streams Dependency in Maven POM\nDESCRIPTION: This XML snippet shows how to add the RocketMQ Streams dependency to a Maven project's pom.xml file. It specifies the groupId, artifactId, and version for the RocketMQ Streams library.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/09-streams/03RocketMQ Streams Quick Start.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.apache.rocketmq</groupId>\n        <artifactId>rocketmq-streams</artifactId>\n            <!-- Modify as needed -->\n        <version>1.1.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metric Format Example in JavaScript\nDESCRIPTION: This snippet demonstrates the format of metrics collected by the RocketMQ Exporter for Prometheus. It shows a sample metric with labels and its value.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/04Exporter.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrocketmq_group_diff{group=\"rmq_group_test_20220114\",topic=\"fusion_console_tst\",countOfOnlineConsumers=\"0\",msgModel=\"1\",} 23.0\n```\n\n----------------------------------------\n\nTITLE: Merging Committer PR - Shell\nDESCRIPTION: Commands for merging a committer's own PR into the development branch.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/11-contributionGuide/03pull-request.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout develop      # switch to local develop branch\ngit pull apache develop   # fast-forward to current remote HEAD\ngit merge --squash RocketMQ-Vxx.0\t# merge to branch\n```\n\n----------------------------------------\n\nTITLE: Updating Global Whitelist in RocketMQ ACL Configuration (Shell)\nDESCRIPTION: Command to update the global IP whitelist in the ACL configuration file. The command can target a specific broker or an entire cluster, and updates the 'globalWhiteRemoteAddresses' field in the ACL configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/03access.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin updateGlobalWhiteAddr -n 192.168.1.2:9876 -b 192.168.12.134:10911 -g 10.10.154.1,10.10.154.2\n```\n\n----------------------------------------\n\nTITLE: Starting Single Node Broker+Proxy in Local Mode for RocketMQ 5.0\nDESCRIPTION: Command to start a Broker with Proxy enabled in single node configuration. This setup is not recommended for production as it creates a single point of failure.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nohup sh bin/mqbroker -n localhost:9876 --enable-proxy &\n\n### Verify that the Broker has started successfully, for example, the broker IP is 192.168.1.2, and the name is broker-A\n$ tail -f ~/logs/rocketmqlogs/broker_default.log \nThe broker[xxx, 192.169.1.2:10911] boot success...\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ and Testing Message Production/Consumption\nDESCRIPTION: Commands to start RocketMQ and test message production and consumption using the RocketMQ tools.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7\n$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4\n\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamBuilder in RocketMQ Streams\nDESCRIPTION: Creates a StreamBuilder instance with a job ID, defines a source topic with deserialization method.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/09-streams/02RocketMQ Streams Concept.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nStreamBuilder(jobId)\n<OUT> RStream<OUT> source(topicName, deserializer)\n```\n\n----------------------------------------\n\nTITLE: Performing Stream Operations in RocketMQ Streams\nDESCRIPTION: Describes various stream operations including grouping, mapping, filtering, joining, and output to a topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/09-streams/02RocketMQ Streams Concept.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n<K> GroupedStream<K, T> keyBy(selectAction)\n<O> RStream<O> map(mapperAction)\nRStream<T> filter(predictor)\n<VR> RStream<T> flatMap(mapper)\n<T2> JoinedStream<T, T2> join(rightStream)\nsink(topicName, serializer)\n```\n\n----------------------------------------\n\nTITLE: Configuring Base JVM Options for RocketMQ\nDESCRIPTION: Basic JVM configuration for RocketMQ production environment with 8GB heap (4GB for young generation).\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-server -Xms8g -Xmx8g -Xmn4g \n```\n\n----------------------------------------\n\nTITLE: Expected WordCount Output from RocketMQ Streams Processing\nDESCRIPTION: Expected output from the WordCount example showing the word frequencies calculated from the input text. Each line shows a key-value pair where the key is a word and the value is its current count, with counts incrementing as words are processed.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/09-streams/03RocketMQ Streams Quick Start.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n(key=to, value=1)\n(key=be, value=1)\n(key=or, value=1)\n(key=not, value=1)\n(key=to, value=2)\n(key=be, value=2)\n(key=that, value=1)\n(key=is, value=1)\n(key=the, value=1)\n(key=whether, value=1)\n(key=tis, value=1)\n(key=nobler, value=1)\n(key=mind, value=1)\n(key=against, value=1)\n(key=troubles, value=1)\n(key=slings, value=1)\n(key=die, value=1)\n(key=natural, value=1)\n(key=flesh, value=1)\n(key=sea, value=1)\n(key=fortune, value=1)\n(key=shocks, value=1)\n(key=consummation, value=1)\n(key=to, value=3)\n(key=to, value=4)\n(key=to, value=5)\n(key=say, value=1)\n(key=end, value=1)\n(key=end, value=2)\n(key=to, value=6)\n(key=to, value=7)\n(key=to, value=8)\n(key=or, value=2)\n(key=them, value=1)\n(key=take, value=1)\n(key=arms, value=1)\n(key=of, value=1)\n(key=and, value=1)\n(key=of, value=2)\n(key=and, value=2)\n(key=by, value=1)\n(key=sleep, value=1)\n(key=and, value=3)\n(key=by, value=2)\n(key=sleep, value=2)\n(key=and, value=4)\n(key=that, value=2)\n(key=arrows, value=1)\n(key=heir, value=1)\n(key=question, value=1)\n(key=is, value=2)\n(key=the, value=2)\n(key=suffer, value=1)\n(key=a, value=1)\n(key=the, value=3)\n(key=no, value=1)\n(key=a, value=2)\n(key=opposing, value=1)\n(key=the, value=4)\n(key=the, value=5)\n(key=a, value=3)\n(key=in, value=1)\n(key=more, value=1)\n(key=heartache, value=1)\n(key=outrageous, value=1)\n(key=we, value=1)\n(key=thousand, value=1)\n(key=tis, value=2)\n```\n\n----------------------------------------\n\nTITLE: Performing Stream Operations in RocketMQ Streams\nDESCRIPTION: Describes various stream operations including grouping, mapping, filtering, joining, and output to a topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/09-streams/02RocketMQ Streams Concept.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n<K> GroupedStream<K, T> keyBy(selectAction)\n<O> RStream<O> map(mapperAction)\nRStream<T> filter(predictor)\n<VR> RStream<T> flatMap(mapper)\n<T2> JoinedStream<T, T2> join(rightStream)\nsink(topicName, serializer)\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Connect in Standalone Mode\nDESCRIPTION: Commands to navigate to the Connect runtime directory and start the Connect worker in standalone mode with the specified configuration file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nsh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Broker and Proxy\nDESCRIPTION: Commands to start the RocketMQ Broker and Proxy in local deployment mode and verify their successful startup by checking the log file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/01quickstart.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n### start broker\n$ nohup sh bin/mqbroker -n localhost:9876 --enable-proxy &\n\n### verify broker\n$ tail -f ~/logs/rocketmqlogs/proxy.log \nThe broker[broker-a,192.169.1.2:10911] boot success...\n```\n\n----------------------------------------\n\nTITLE: Configuring GC Log Rotation for RocketMQ\nDESCRIPTION: Settings for GC log file rotation to manage garbage collection logs properly in production.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-XX:+UseGCLogFileRotation   \n-XX:NumberOfGCLogFiles=5 \n-XX:GCLogFileSize=30m\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Basic Setup and Testing\nDESCRIPTION: Commands for testing RocketMQ message sending and receiving functionality using the built-in tools.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7\n$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4\n\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Maven Settings Configuration for Release\nDESCRIPTION: Maven settings.xml configuration for release signing and deployment. Includes server configurations for Apache snapshots and releases.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/04release-manual.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n    <profiles>\n        <profile>\n            <id>signed_release</id>\n            <properties>\n                <mavenExecutorId>forked-path</mavenExecutorId>\n                <gpg.keyname>yourKeyName</gpg.keyname>\n                <deploy.url>https://dist.apache.org/repos/dist/dev/rocketmq/</deploy.url>\n            </properties>\n        </profile>\n    </profiles>\n    <servers>\n        <!-- To publish a snapshot of some part of Maven -->\n        <server>\n            <id>apache.snapshots.https</id>\n            <username>yourApacheID</username>\n            <!-- Use the password encryption by maven -->\n            <password>yourApachePassword</password>\n        </server>\n        <!-- To stage a release of some part of Maven -->\n        <server>\n            <id>apache.releases.https</id>\n            <username>yourApacheID</username>\n            <password>yourApachePassword</password>\n        </server>\n        <server>\n            <id>gpg.passphrase</id>\n            <passphrase>yourKeyPassword</passphrase>\n        </server>\n    </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Target Database Schema\nDESCRIPTION: SQL commands to create the target database and table in MySQL. The schema matches the source table but with different datetime field types to accommodate the JDBC connector's timestamp handling.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate database bank1;\nCREATE TABLE holding (\n                          holding_id int,\n                          user_id int,\n                          holding_stock varchar(8),\n                          holding_quantity int,\n                          datetime_created bigint,\n                          datetime_updated bigint,\n                          primary key(holding_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Connector via REST API\nDESCRIPTION: REST API call to create and configure a file source connector\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/fileSourceConnector -d '{\n\t\"connector.class\": \"org.apache.rocketmq.connect.file.FileSourceConnector\",\n\t\"filename\": \"/Users/YourUsername/rocketmqconnect/test-source-file.txt\",\n\t\"connect.topicname\": \"fileTopic\"\n}'\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Version Check in Java\nDESCRIPTION: Java code snippet showing how to set the current version constant for RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/04release-manual.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final int CURRENT_VERSION = Version.V4_5_0.ordinal();\n```\n\n----------------------------------------\n\nTITLE: Inserting Test Data into Source MySQL Table\nDESCRIPTION: SQL commands to insert test data into the source MySQL table for synchronization testing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `employee` VALUES (1, 'name-01', 24, 6, 'company', 9987, '2021-12-22 08:00:00', '2022-06-14 18:20:11', 321.11);\nINSERT INTO `employee` VALUES (2, 'name-02', 19, 7, 'company', 32232, '2021-12-29 08:00:00', '2022-06-14 18:18:47', 77.12);\nINSERT INTO `employee` VALUES (8, 'name-03', 20, 1, NULL, 0, NULL, '2022-06-14 18:26:05', 11111.00);\nINSERT INTO `employee` VALUES (9, 'name-04', 21, 1, 'company', 12345, '2021-12-24 20:44:10', '2022-06-14 18:20:02', 123.12);\nINSERT INTO `employee` VALUES (11, 'name-05', 50, 2, 'company', 33333, '2021-12-24 22:14:52', '2022-06-14 18:19:58', 123.12);\nINSERT INTO `employee` VALUES (12, 'name-06', 19, 3, NULL, 0, NULL, '2022-06-14 18:26:12', 111233.00);\nINSERT INTO `employee` VALUES (13, 'name-07', 20, 4, 'company', 3237, '2021-12-29 01:31:03', '2022-06-14 18:19:27', 52.00);\nINSERT INTO `employee` VALUES (14, 'name-08', 25, 15, 'company', 32255, '2022-02-08 19:06:39', '2022-06-14 18:18:32', 0.00);\nINSERT INTO `employee` VALUES (15, NULL, 0, 0, NULL, 0, NULL, '2022-06-14 20:13:29', NULL);\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Connect Runtime\nDESCRIPTION: Commands to start the RocketMQ Connect runtime environment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd  rocketmq-connect\n\nmvn -Prelease-connect -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Setting up Postgres Docker Container\nDESCRIPTION: Commands to set up and run a Postgres Docker container for testing purposes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# starting a pg instance\ndocker run -d --name postgres -p 5432:5432 -e POSTGRES_USER=start_data_engineer -e POSTGRES_PASSWORD=password debezium/postgres:14\n\n# bash into postgres instance\ndocker exec -ti postgres /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Starting Connect Standalone\nDESCRIPTION: Command to start the RocketMQ Connect runtime in standalone mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nsh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Connect Worker in Standalone Mode\nDESCRIPTION: Command to start the RocketMQ Connect worker in standalone mode using the configured connect-standalone.conf file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n```\n\n----------------------------------------\n\nTITLE: Testing RocketMQ Producer and Consumer in Shell\nDESCRIPTION: Commands to test RocketMQ's message sending and receiving functionality using the built-in tools. This verifies that the RocketMQ installation is working properly before proceeding with connector setup.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7\n$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4\n\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Node Multiple Replica Broker+Proxy with Asynchronous Replication\nDESCRIPTION: Commands to start a Broker cluster with Master-Slave pairs using asynchronous replication. This configuration provides better reliability with minimal performance impact.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a.properties --enable-proxy &\n \n### On machine B, start the second Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b.properties --enable-proxy &\n \n### On machine C, start the first slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a-s.properties --enable-proxy &\n \n### On machine D, start the second slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b-s.properties --enable-proxy &\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL Docker Container for Testing\nDESCRIPTION: Docker commands to start a PostgreSQL container with Debezium's image and access its bash shell. This sets up the source database for CDC.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# starting a pg instance\ndocker run -d --name postgres -p 5432:5432 -e POSTGRES_USER=start_data_engineer -e POSTGRES_PASSWORD=password debezium/postgres:14\n\n# bash into postgres instance\ndocker exec -ti postgres /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Adding RocketMQ Streams Maven Dependency\nDESCRIPTION: XML Maven configuration for adding RocketMQ Streams as a dependency in a project. The dependency references version 1.1.0 of the rocketmq-streams artifact, which may need to be modified based on the user's requirements.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/09-streams/03RocketMQ Streams Quick Start.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <dependencies>\n    <dependency>\n        <groupId>org.apache.rocketmq</groupId>\n        <artifactId>rocketmq-streams</artifactId>\n            <!-- Modify as needed -->\n        <version>1.1.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Starting NameServer in Cluster Mode for RocketMQ 5.0\nDESCRIPTION: Commands to start the NameServer component in Cluster mode and verify successful startup. In Cluster mode, Broker and Proxy are deployed separately.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n### Start NameServer first\n$ nohup sh mqnamesrv &\n \n### Verify tha Name Server has started successfully\n$ tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n----------------------------------------\n\nTITLE: Building DLedger from Source\nDESCRIPTION: Commands to clone and build DLedger from source code using Maven\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/02dledger.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/openmessaging/dledger.git\n$ cd dledger\n$ mvn clean install -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Locating Connect Standalone Configuration File\nDESCRIPTION: Commands to navigate to the RocketMQ Connect distribution directory and access the standalone configuration file for editing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n$ vim conf/connect-standalone.conf\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data for RocketMQ Streams WordCount Example\nDESCRIPTION: Sample text data that would be written to the RocketMQ source topic for the WordCount example. Each line represents a message sent to the topic, containing a line from Shakespeare's Hamlet.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/09-streams/03RocketMQ Streams Quick Start.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"To be, or not to be,--that is the question:--\",\n\"Whether 'tis nobler in the mind to suffer\",\n\"The slings and arrows of outrageous fortune\",\n\"Or to take arms against a sea of troubles,\",\n\"And by opposing end them?--To die,--to sleep,--\",\n\"No more; and by a sleep to say we end\",\n\"The heartache, and the thousand natural shocks\",\n\"That flesh is heir to,--'tis a consummation\",\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for RocketMQ Containers\nDESCRIPTION: Command to create a shared Docker network that facilitates communication between RocketMQ containers.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create rocketmq\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Node Cluster with Async Replication\nDESCRIPTION: Commands to start a cluster with two master-slave pairs using asynchronous replication. Each master is configured with one slave for high availability with millisecond-level replication delay.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a.properties &\n \n### On machine B, start the second Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b.properties &\n \n### On machine C, start the first Slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a-s.properties &\n \n### On machine B, start the second Slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b-s.properties &\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Paths for RocketMQ Connect\nDESCRIPTION: This snippet shows the configuration for plugin paths in RocketMQ Connect. The comment indicates that the rocketmq-connect-sample module is already included by default, so no additional configuration is needed.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n# The rocketmq-connect project already includes the rocketmq-connect-sample module by default, so no configuration is needed here.\npluginPaths=\n```\n\n----------------------------------------\n\nTITLE: Configuring G1 Garbage Collector for RocketMQ\nDESCRIPTION: JVM garbage collection configuration using G1GC collector recommended for JDK 1.8. These settings specify region size, reserve percentage, and heap occupancy threshold that have proven effective in production environments.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-XX:+UseG1GC \n-XX:G1HeapRegionSize=16m   \n-XX:G1ReservePercent=25 \n-XX:InitiatingHeapOccupancyPercent=30\n```\n\n----------------------------------------\n\nTITLE: Starting NameServer in Master-Slave Asynchronous Mode\nDESCRIPTION: Commands to start a NameServer and verify its successful startup in master-slave asynchronous replication mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/01deploy.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n### Start NameServer first\n$ nohup sh mqnamesrv &\n \n### Verify that the Name Server has started successfully.\n$ tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Exporter for RocketMQ Broker Metrics\nDESCRIPTION: Instructions for enabling and configuring the Prometheus exporter for RocketMQ Broker metrics. This includes setting the exporter type and optional configurations for port and hostname.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/12-observability/01metrics.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Set `metricsExporterType` to `PROM`.\n\nVisit `http://<broker-ip>:5557/metrics` to view metrics. Configure service discovery or manually configure a pull task in Prometheus to collect metrics.\n\nOptional configurations:\n\n1. `metricsPromExporterPort`: The port number on which Broker exposes the metrics service. The default is `5557`.\n2. `metricGrpcExporterTimeOutInMills`: The hostname for the exposed metrics service. The default is the IP to which Broker registers with NameServer, brokerIP1.\n```\n\n----------------------------------------\n\nTITLE: SAME_GROUP_DIFFERENT_TOPIC错误消息\nDESCRIPTION: 当Consumer订阅的Topic信息不存在时出现的错误信息。表示Consumer所在的Consumer Group或订阅的Topic可能不存在。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nthe consumer's group info/subscription not exist\n```\n\n----------------------------------------\n\nTITLE: NAME_SERVER_ADDR_NOT_EXIST_URL错误消息\nDESCRIPTION: 当Producer或Consumer无法获取NameServer地址信息时出现的错误消息。这表示客户端配置中没有正确设置NameServer地址或域名解析问题。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nNo name server address, please set it\n```\n\nLANGUAGE: java\nCODE:\n```\nconnect to xxx failed, maybe the domain name xxx not bind in /etc/hosts\n```\n\n----------------------------------------\n\nTITLE: MQLIST_NOT_EXIST错误消息\nDESCRIPTION: 当Producer根据Topic无法获取对应的Queue信息时出现的错误信息。表示Topic没有正确配置Queue信息或权限不足。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nCan not find Message Queue for this topic\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ MQTT from Source\nDESCRIPTION: Commands to clone and build the RocketMQ MQTT project from source code using Maven.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-mqtt\ncd rocketmq-mqtt \nmvn -Prelease-all -DskipTests clean install -U \ncd distribution/target/\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Broker and Proxy on Linux\nDESCRIPTION: Commands for Linux to configure and start the RocketMQ Broker and Proxy containers, including mapping necessary ports and setting environment variables.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md#2025-04-09_snippet_3\n\nLANGUAGE: code\nCODE:\n```\n# Configure the broker's IP address\necho \"brokerIP1=127.0.0.1\" > broker.conf\n\n# Start the Broker and Proxy\ndocker run -d \\\n--name rmqbroker \\\n--network rocketmq \\\n-p 10912:10912 -p 10911:10911 -p 10909:10909 \\\n-p 8080:8080 -p 8081:8081 \\\n-e \"NAMESRV_ADDR=rmqnamesrv:9876\" \\\n-v ./broker.conf:/home/rocketmq/rocketmq-5.3.2/conf/broker.conf \\\napache/rocketmq:5.3.2 sh mqbroker --enable-proxy \\\n-c /home/rocketmq/rocketmq-5.3.2/conf/broker.conf\n\n# Verify if Broker started successfully\ndocker exec -it rmqbroker bash -c \"tail -n 10 /home/rocketmq/logs/rocketmqlogs/proxy.log\"\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ MQTT Services\nDESCRIPTION: Commands to start the MQTT metadata service and MQTT broker. The meta service must be started before the MQTT broker as it provides essential metadata management for the MQTT bridge.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsh meta.sh start\nsh mqtt.sh start\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Maven command to build the RocketMQ Connect runtime environment with the connect release profile enabled. This prepares the Connect framework for execution.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd  rocketmq-connect\n\nmvn -Prelease-connect -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Adding RocketMQ Java Client Dependency\nDESCRIPTION: Maven dependency configuration for adding the RocketMQ Java client to a project. The version placeholder should be replaced with the latest version available on Maven Central.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.rocketmq</groupId>\n    <artifactId>rocketmq-client-java</artifactId>\n    <version>${rocketmq-client-java-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ MQTT Service Parameters\nDESCRIPTION: Essential configuration settings for the MQTT service in the service.conf file. This includes authentication credentials, NameServer address, and retry topic configurations that need to be created beforehand.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nusername=xxx    // 权限验证账户配置\nsecretKey=xxx    // 权限验证账户配置\nNAMESRV_ADDR=xxx  //namesrv接入点\neventNotifyRetryTopic=xx   //notify重试topic，提前创建\nclientRetryTopic=xx  //客户端消息重试topic，提前创建\n```\n\n----------------------------------------\n\nTITLE: Verifying Elasticsearch Source Connector Logs\nDESCRIPTION: This command tails the log file to check if the Elasticsearch source connector has started successfully. It looks for a specific success message in the logs.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntail -100f ~/logs/rocketmqconnect/connect_runtime.log\n```\n\n----------------------------------------\n\nTITLE: Handling UNKNOWN_HOST_EXCEPTION in Java\nDESCRIPTION: This snippet shows the exception message when there's an issue with resolving the local host in a RocketMQ setup, possibly due to multiple network interfaces or IP addresses.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nInetAddress java.net.InetAddress.getLocalHost() throws UnknownHostException\n```\n\n----------------------------------------\n\nTITLE: Quick Deployment of RocketMQ with DLedger\nDESCRIPTION: Commands to start a quick deployment of RocketMQ with DLedger after successful build.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#{rocketmq-version} replace with rocketmq actual version. example: 5.1.0\n$ cd distribution/target/rocketmq-{rocketmq-version}/rocketmq-{rocketmq-version}\n\n$ sh bin/dledger/fast-try.sh start\n```\n\n----------------------------------------\n\nTITLE: Building DLedger from Source\nDESCRIPTION: Instructions to clone and build DLedger from GitHub repository, which is required before building RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/openmessaging/dledger.git\n$ cd dledger\n$ mvn clean install -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Sending Event to EventBus in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to send an event to the EventBus in RocketMQ EventBridge, using the CloudEvents format to specify event details.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nPOST /putEvents HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type:\"application/cloudevents+json; charset=UTF-8\"\n{\n  \"specversion\" : \"1.0\",\n  \"type\" : \"com.github.pull_request.opened\",\n  \"source\" : \"https://github.com/cloudevents/spec/pull\",\n  \"subject\" : \"123\",\n  \"id\" : \"A234-1234-1234\",\n  \"time\" : \"2018-04-05T17:31:00Z\",\n  \"datacontenttype\" : \"application/json\",\n  \"data\" : {\n    \"body\":\"demo\"\n  },\n  \"aliyuneventbusname\":\"demo-bus\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Brokers with DLedger\nDESCRIPTION: Commands to start multiple RocketMQ brokers with DLedger configuration in the background.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnohup sh bin/mqbroker -c conf/dledger/xxx-n0.conf & \nnohup sh bin/mqbroker -c conf/dledger/xxx-n1.conf & \nnohup sh bin/mqbroker -c conf/dledger/xxx-n2.conf & \n```\n\n----------------------------------------\n\nTITLE: Compiling Debezium RocketMQ Connector in Maven\nDESCRIPTION: Commands to compile the Debezium RocketMQ Connector plugin that will capture changes from PostgreSQL. This builds the connector JAR file and includes test-skipping for faster compilation.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/\n$ mvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Querying Messages by ID in RocketMQ (Markdown)\nDESCRIPTION: This snippet describes the 'queryMsgById' command used to query a message by its offset message ID (offsetMsgId) in RocketMQ. It includes options for specifying the message ID, printing help, and setting the NameServer address.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| queryMsgById | To query a message by its offset message ID (offsetMsgId), you can use the offsetMsgId command if using an open source console. This command has additional parameters, the specific function of which can be found by reading the QueryMsgByIdSubCommand. | -i | msgId |\n| | | -h | Print help |\n| | | -n | NameServer address,format ip:port |\n```\n\n----------------------------------------\n\nTITLE: Deploying RocketMQ with Helm and Verifying Pod Status in Bash\nDESCRIPTION: Commands to install RocketMQ using Helm and verify the deployment by checking the status of the deployed pods.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install rocketmq-demo ./rocketmq\n# Check pod status\n# If the parameters are normal, it indicates successful deployment\n$ kubectl get pods -o wide -n default\nNAME                                        READY   STATUS    RESTARTS       AGE    IP               NODE         NOMINATED NODE   READINESS GATES\nrocketmq-demo-broker-0                      1/1     Running   0              6h3m   192.168.58.225   k8s-node02   <none>           <none>\nrocketmq-demo-nameserver-757877747b-k669k   1/1     Running   0              6h3m   192.168.58.226   k8s-node02   <none>           <none>\nrocketmq-demo-proxy-6c569bd457-wcg6g        1/1     Running   0              6h3m   192.168.85.227   k8s-node01   <none>           <none>\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Mode in RocketMQ (Cluster vs Broadcast)\nDESCRIPTION: Examples showing how to configure the message model in RocketMQ Push Consumer to either cluster mode (default) or broadcast mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/02push.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nconsumer.setMessageModel(MessageModel.CLUSTERING);\n```\n\nLANGUAGE: java\nCODE:\n```\nconsumer.setMessageModel(MessageModel.BROADCASTING);\n```\n\n----------------------------------------\n\nTITLE: Running RocketMQ Dashboard from Compiled JAR\nDESCRIPTION: Command to run the compiled RocketMQ Dashboard JAR file. This starts the dashboard application after it has been built from source.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/05-deploymentOperations/04Dashboard.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ java -jar target/rocketmq-dashboard-1.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Creating EventBridge Target in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create an EventBridge target in RocketMQ EventBridge, specifying the event bus name, rule name, and target configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPOST /target/createEventTargets HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n    \"eventBusName\":\"demo-bus\",\n    \"eventRuleName\":\"demo-rule\",\n    \"eventTargets\":[\n            {\n            \"eventTargetName\":\"eventbridge-target\",\n            \"className\":\"acs.eventbridge\",\n                \"config\":{\n                \"RegionId\":\"cn-hangzhou\",\n                \"AliyunEventBus\":\"rocketmq-eventbridge\"\n                }\n            }\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RocketMQ Client Dependency in Maven XML\nDESCRIPTION: Maven dependency configuration to include the RocketMQ Java client library in a project for developing message producers and consumers.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n ...... \n    <dependency>\n            <groupId>org.apache.rocketmq</groupId>\n            <artifactId>rocketmq-client-java</artifactId>\n            <version>5.0.7</version>\n      </dependency>\n    .....\n```\n\n----------------------------------------\n\nTITLE: Documenting RocketMQ consumeMessage Command Parameters\nDESCRIPTION: Lists and describes the parameters for the consumeMessage command in RocketMQ. This command is used to consume messages based on various criteria such as offset, timestamps, and message queues.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n-h    Print help\n-n    NameServer address, format ip:port\n-t    topic name\n-b    BrokerName\n-o    Consume from offset\n-i    queueId\n-g    Consumer group\n-s    Start timestamp, see -h for format\n-d    End timestamp\n-c    Consume a certain number of messages\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Broker and Proxy on Windows\nDESCRIPTION: Commands for Windows to configure and start the RocketMQ Broker and Proxy containers, using Windows-specific syntax for environment variables and path mounting.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md#2025-04-09_snippet_4\n\nLANGUAGE: code\nCODE:\n```\n# Configure the broker's IP address\necho \"brokerIP1=127.0.0.1\" > broker.conf\n\n# Start the Broker and Proxy\ndocker run -d ^\n--name rmqbroker ^\n--net rocketmq ^\n-p 10912:10912 -p 10911:10911 -p 10909:10909 ^\n-p 8080:8080 -p 8081:8081 \\\n-e \"NAMESRV_ADDR=rmqnamesrv:9876\" ^\n-v %cd%\\broker.conf:/home/rocketmq/rocketmq-5.3.2/conf/broker.conf ^\napache/rocketmq:5.3.2 sh mqbroker --enable-proxy \\\n-c /home/rocketmq/rocketmq-5.3.2/conf/broker.conf\n\n# Verify if Broker started successfully\ndocker exec -it rmqbroker bash -c \"tail -n 10 /home/rocketmq/logs/rocketmqlogs/proxy.log\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull Consumer in RocketMQ (Java)\nDESCRIPTION: This snippet demonstrates how to use the original Pull Consumer in RocketMQ. It initializes a DefaultMQPullConsumer, constructs a MessageQueue, pulls messages, and updates the consume offset. It also shows how to fetch subscribe message queues and handle different pull statuses.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/03-consumer/03pull.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class PullConsumerTest {\n  public static void main(String[] args) throws MQClientException {\n    DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(\"please_rename_unique_group_name_5\");\n    consumer.setNamesrvAddr(\"127.0.0.1:9876\");\n    consumer.start();\n    try {\n      MessageQueue mq = new MessageQueue();\n      mq.setQueueId(0);\n      mq.setTopic(\"TopicTest\");\n      mq.setBrokerName(\"jinrongtong-MacBook-Pro.local\");\n      long offset = 26;\n      PullResult pullResult = consumer.pull(mq, \"*\", offset, 32);\n      if (pullResult.getPullStatus().equals(PullStatus.FOUND)) {\n        System.out.printf(\"%s%n\", pullResult.getMsgFoundList());\n        consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    consumer.shutdown();\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nSet<MessageQueue> queueSet =  consumer.fetchSubscribeMessageQueues(\"TopicTest\");\n```\n\n----------------------------------------\n\nTITLE: Running RocketMQ Dashboard in Docker Container\nDESCRIPTION: Command to run RocketMQ Dashboard in a Docker container, specifying the nameserver address and port mapping.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/03Dashboard.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name rocketmq-dashboard -e \"JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876\" -p 8080:8080 -t apacherocketmq/rocketmq-dashboard:latest\n```\n\n----------------------------------------\n\nTITLE: Installing RocketMQ MQTT from Source\nDESCRIPTION: Commands to clone, build, and start the RocketMQ MQTT service from source code using Maven.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-mqtt\ncd rocketmq-mqtt \nmvn -Prelease-all -DskipTests clean install -U \ncd distribution/target/ \ncd bin\nsh mqtt.sh start\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Core Settings\nDESCRIPTION: Essential configuration settings that must be enabled in RocketMQ 4.9.3+ to support MQTT functionality.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenableLmq = true \nenableMulitDispatch = true\n```\n\n----------------------------------------\n\nTITLE: Starting MQTT Services\nDESCRIPTION: Shell commands to start the meta service and MQTT broker processes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsh meta.sh start\nsh mqtt.sh start\n```\n\n----------------------------------------\n\nTITLE: Starting NameServer in Master-Slave Synchronous Mode\nDESCRIPTION: Commands to start a NameServer and verify its successful startup in master-slave synchronous replication mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/01deploy.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n### Start NameServer first\n$ nohup sh mqnamesrv &\n \n### Verify that the Name Server has started successfully.\n$ tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n----------------------------------------\n\nTITLE: Pulling RocketMQ Docker Image\nDESCRIPTION: Command to pull the RocketMQ 5.3.2 version image from Docker Hub.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull apache/rocketmq:5.3.2\n```\n\n----------------------------------------\n\nTITLE: Adding RocketMQ Java Client Dependency\nDESCRIPTION: Maven dependency configuration for including the RocketMQ Java client library in the project.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.rocketmq</groupId>\n    <artifactId>rocketmq-client-java</artifactId>\n    <version>${rocketmq-client-java-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Starting NameServer in Single Master Mode\nDESCRIPTION: Commands to start a NameServer and verify its successful startup in single master mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/01deploy.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n### Start Name Server first\n$ nohup sh mqnamesrv &\n \n### Verify if the Name Server has started successfully\n$ tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ with Docker Compose on Windows\nDESCRIPTION: Command to start all the defined RocketMQ services in detached mode with a project name on Windows systems.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_3\n\nLANGUAGE: code\nCODE:\n```\ndocker-compose -p rocketmq_project up -d\n```\n\n----------------------------------------\n\nTITLE: Rebasing Development Branch\nDESCRIPTION: Command to get the latest code changes from the development branch using rebase.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase origin/develop # git rebase [branch]\n```\n\n----------------------------------------\n\nTITLE: Pulling RocketMQ Dashboard Docker Image\nDESCRIPTION: Command to pull the latest RocketMQ Dashboard Docker image from the official repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/03Dashboard.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull apacherocketmq/rocketmq-dashboard:latest\n```\n\n----------------------------------------\n\nTITLE: Extracting and Building RocketMQ from Source in Linux\nDESCRIPTION: Commands to extract the RocketMQ source package, compile and build the binary executables using Maven. This prepares the RocketMQ installation for use.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/01quickstart.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ unzip rocketmq-all-5.3.2-source-release.zip\n$ cd rocketmq-all-5.3.2-source-release/\n$ mvn -Prelease-all -DskipTests -Dspotbugs.skip=true clean install -U\n$ cd distribution/target/rocketmq-5.3.2/rocketmq-5.3.2\n```\n\n----------------------------------------\n\nTITLE: Starting Broker Cluster in Multiple Master Mode\nDESCRIPTION: Commands to start multiple Broker masters in a cluster configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/01deploy.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-a.properties &\n \n### On machine B, start the second Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-b.properties &\n\n...\n```\n\n----------------------------------------\n\nTITLE: Compiling RocketMQ Dashboard from Source\nDESCRIPTION: Maven command to compile the RocketMQ Dashboard source code, skipping tests to speed up the build process.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/04-deployment/03Dashboard.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Starting Broker in Single Master Mode\nDESCRIPTION: Commands to start a Broker and verify its successful startup in single master mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/01deploy.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n### Start Broker\n$ nohup sh bin/mqbroker -n localhost:9876 &\n\n### Verify that the Broker has started successfully, for example, the broker IP is 192.168.1.2, and the name is broker-a\n$ tail -f ~/logs/rocketmqlogs/Broker.log \nThe broker[broker-a, 192.169.1.2:10911] boot success...\n```\n\n----------------------------------------\n\nTITLE: Running RocketMQ Dashboard Compiled JAR\nDESCRIPTION: Command to run the compiled RocketMQ Dashboard JAR file directly from the target directory after building from source.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/04-deployment/03Dashboard.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ java -jar target/rocketmq-dashboard-1.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for RocketMQ Client\nDESCRIPTION: XML configuration for adding RocketMQ client dependency to a Java project.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/02quickstartWithDocker.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.rocketmq</groupId>\n    <artifactId>rocketmq-client</artifactId>\n    <version>4.9.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Viewing RocketMQ Connect Runtime Logs\nDESCRIPTION: Command to view the last 100 lines of the runtime log file and follow new log entries, useful for monitoring the startup and operation of RocketMQ Connect.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntail -100f ~/logs/rocketmqconnect/connect_runtime.log\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Client SDK Maven Dependency\nDESCRIPTION: Maven dependency configuration for adding the RocketMQ client SDK to a Java project, specifying version 4.9.6 which matches the RocketMQ server version used in Docker.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n<dependency>\n    <groupId>org.apache.rocketmq</groupId>\n    <artifactId>rocketmq-client</artifactId>\n    <version>4.9.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of RocketMQ Producer in Java\nDESCRIPTION: Illustrates an inefficient way of using RocketMQ producers by creating and destroying a new producer for each message. This approach is not recommended as it generates many short-lived connections, increasing system load.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/04producer.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfor (int i =0;i<n;i++)\n{\n  Producer p = ProducerBuilder.build();\n  Message m= MessageBuilder.build();\n  p.send(m);\n  p.shutdown();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Standalone\nDESCRIPTION: Configuration settings for the RocketMQ Connect standalone mode, including worker ID, store path, HTTP port, and plugin paths.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nworkerId=standalone-worker\nstorePathRootDir=/tmp/storeRoot\n\n## Http port for user to access REST API\nhttpPort=8082\n\n# Rocketmq namesrvAddr\nnamesrvAddr=localhost:9876\n\n# RocketMQ acl\naclEnable=false\naccessKey=rocketmq\nsecretKey=12345678\n\nautoCreateGroupEnable=false\nclusterName=\"DefaultCluster\"\n\n#  Core configuration, configure the plugin directory of the previously compiled debezium package here\n# Source or sink connector jar file dir,The default value is rocketmq-connect-sample\npluginPaths=/usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Pulling RocketMQ Dashboard Docker Image\nDESCRIPTION: Command to pull the latest RocketMQ Dashboard Docker image from the official repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/04Dashboard.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull apacherocketmq/rocketmq-dashboard:latest\n```\n\n----------------------------------------\n\nTITLE: Pulling RocketMQ Dashboard Docker Image\nDESCRIPTION: Command to pull the latest RocketMQ Dashboard Docker image from the official repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/04Dashboard.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull apacherocketmq/rocketmq-dashboard:latest\n```\n\n----------------------------------------\n\nTITLE: Stopping RocketMQ Cluster with DLedger\nDESCRIPTION: Command to stop the RocketMQ cluster with DLedger support using the fast-try script.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/dledger/fast-try.sh stop\n```\n\n----------------------------------------\n\nTITLE: In-Memory GC Log Configuration\nDESCRIPTION: Configures GC logs to write to in-memory filesystem to reduce latency impact of GC logging.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/05JVMOS.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-Xloggc:/dev/shm/mq_gc_%p.log123\n```\n\n----------------------------------------\n\nTITLE: Starting Debezium Source Connector\nDESCRIPTION: cURL command to start the Debezium source connector for MySQL CDC, configuring it to parse MySQL binlog and send data to RocketMQ Topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/MySQLCDCSource -d '{\n\"connector.class\": \"org.apache.rocketmq.connect.debezium.mysql.DebeziumMysqlConnector\",\n\"max.task\": \"1\",\n\"connect.topicname\": \"debezium-mysql-source-topic\",\n\"kafka.transforms\": \"Unwrap\",\n\"kafka.transforms.Unwrap.delete.handling.mode\": \"none\",\n\"kafka.transforms.Unwrap.type\": \"io.debezium.transforms.ExtractNewRecordState\",\n\"kafka.transforms.Unwrap.add.headers\": \"op,source.db,source.table\",\n\"database.history.skip.unparseable.ddl\": true,\n\"database.history.name.srv.addr\": \"localhost:9876\",\n\"database.history.rocketmq.topic\": \"db-history-debezium-topic\",\n\"database.history.store.only.monitored.tables.ddl\": true,\n\"include.schema.changes\": false,\n\"database.server.name\": \"dbserver1\",\n\"database.port\": 3306,\n\"database.hostname\": \"database ip\",\n\"database.connectionTimeZone\": \"UTC\",\n\"database.user\": \"debezium\",\n\"database.password\": \"dbz\",\n\"table.include.list\": \"inventory.employee\",\n\"max.batch.size\": 50,\n\"database.include.list\": \"inventory\",\n\"snapshot.mode\": \"when_needed\",\n\"database.server.id\": \"184054\",\n\"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n\"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Commands to clone and build the RocketMQ Connect project from GitHub, setting up the necessary environment variables and skipping tests for a clean installation.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-connect.git\n\ncd  rocketmq-connect\n\nexport RMQ_CONNECT_HOME=`pwd`\n\nmvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Docker Container as Sink Database\nDESCRIPTION: Docker command to start a MySQL database container that will be used as the sink target for data synchronized from PostgreSQL, using the Debezium example MySQL image.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:1.9\n```\n\n----------------------------------------\n\nTITLE: MQTT Service Configuration Settings\nDESCRIPTION: Configuration parameters for the MQTT service including authentication credentials and connection settings.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nusername=xxx    // Authorization verification account configuration\nsecretKey=xxx    // Authorization verification account configuration\nNAMESRV_ADDR=xxx  //namesrv access point\neventNotifyRetryTopic=xx   //notify retry topic, created in advance\nclientRetryTopic=xx  //Client message retry topic, created in advance\n```\n\n----------------------------------------\n\nTITLE: Starting JDBC Sink Connector\nDESCRIPTION: cURL command to start the JDBC sink connector, configuring it to consume data from RocketMQ Topic and write to the destination MySQL table.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest -d '{\n  \"connector.class\": \"org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector\",\n  \"max.task\": \"2\",\n  \"connect.topicnames\": \"debezium-mysql-source\",\n  \"connection.url\": \"jdbc:mysql://database ip:3306/inventory_2\",\n  \"connection.user\": \"root\",\n  \"connection.password\": \"debezium\",\n  \"pk.fields\": \"id\",\n  \"table.name.from.header\": \"true\",\n  \"pk.mode\": \"record_key\",\n  \"insert.mode\": \"UPSERT\",\n  \"db.timezone\": \"UTC\",\n  \"table.types\": \"TABLE\",\n  \"errors.deadletterqueue.topic.name\": \"dlq-topic\",\n  \"errors.log.enable\": \"true\",\n  \"errors.tolerance\": \"ALL\",\n  \"delete.enabled\": \"true\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Starting DLedger Broker Cluster\nDESCRIPTION: Commands to start multiple broker nodes in a DLedger cluster, each with its own configuration file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ nohup sh bin/mqbroker -c conf/dledger/xxx-n0.conf & \n$ nohup sh bin/mqbroker -c conf/dledger/xxx-n1.conf & \n$ nohup sh bin/mqbroker -c conf/dledger/xxx-n2.conf & \n```\n\n----------------------------------------\n\nTITLE: WindowStream Operations API\nDESCRIPTION: Methods for processing windowed data streams, including counting, filtering, mapping, and aggregation operations.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/09-streams/02RocketMQ Streams Concept.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nWindowStream<K, Integer> count()\nWindowStream<K, V> filter(predictor)\n<OUT> WindowStream<K, OUT> map(mapperAction)\n<OUT> WindowStream<K, OUT> aggregate(aggregateAction)\n<OUT> WindowStream<K, OUT> aggregate(accumulator)\nvoid sink(topicName, serializer)\n```\n\n----------------------------------------\n\nTITLE: JVM Pre-Touch Configuration\nDESCRIPTION: Enables pre-touch option to allocate all heap pages during JVM initialization, trading startup time for runtime performance.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/05JVMOS.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-XX:+AlwaysPreTouch\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Docker Container\nDESCRIPTION: Docker command to start a MySQL container for testing purposes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:1.9\n```\n\n----------------------------------------\n\nTITLE: Listing RocketMQ Metric Categories in Markdown\nDESCRIPTION: This snippet enumerates the main categories of metrics exposed by RocketMQ in Prometheus format. It includes broker, producer, and consumer metrics.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/12-observability/01metrics.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Broker metrics\n- Producer metrics\n- Consumer metrics\n```\n\n----------------------------------------\n\nTITLE: Building Elasticsearch Connector Plugin\nDESCRIPTION: Commands for building and installing the Elasticsearch connector plugin for RocketMQ Connect.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/connectors/rocketmq-connect-elasticsearch/\n\nmvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: WindowStream Operations API\nDESCRIPTION: Methods for processing windowed data streams, including counting, filtering, mapping, and aggregation operations.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/09-streams/02RocketMQ Streams Concept.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nWindowStream<K, Integer> count()\nWindowStream<K, V> filter(predictor)\n<OUT> WindowStream<K, OUT> map(mapperAction)\n<OUT> WindowStream<K, OUT> aggregate(aggregateAction)\n<OUT> WindowStream<K, OUT> aggregate(accumulator)\nvoid sink(topicName, serializer)\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Connect Configuration Example\nDESCRIPTION: Sample configuration file for RocketMQ Connect showing basic settings\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n#current cluster node uniquely identifies\nworkerId=DEFAULT_WORKER_1\n\n# Http prot for user to access REST API\nhttpPort=8082\n\n# Local file dir for config store\nstorePathRootDir=/Users/YourUsername/rocketmqconnect/storeRoot\n\n#You need to modify it to your own rocketmq nameserver endpoint.\n# RocketMQ namesrvAddr\nnamesrvAddr=127.0.0.1:9876  \n\n# Plugin path for loading Source/Sink Connectors\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Connect in Standalone Mode\nDESCRIPTION: Commands to navigate to the RocketMQ Connect distribution directory and start the Connect runtime in standalone mode with the specified configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nsh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n```\n\n----------------------------------------\n\nTITLE: Creating FIFO Subscription Group with Default Configuration\nDESCRIPTION: Example command to create a FIFO subscription group with default cluster settings and localhost nameserver.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/03fifomessage.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/mqadmin updateSubGroup -c DefaultCluster -g FIFOGroup -n 127.0.0.1:9876 -o true\n```\n\n----------------------------------------\n\nTITLE: Updating ACL Configuration with mqadmin in RocketMQ\nDESCRIPTION: This shell command demonstrates how to use the 'mqadmin' tool to update ACL configurations in RocketMQ. It specifies various parameters including access key, secret key, and permissions for topics and groups.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/04access.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sh mqadmin updateAclConfig -n 192.168.1.2:9876 -b 192.168.12.134:10911 -a RocketMQ -s 1234567809123 -t topicA=DENY,topicD=SUB -g groupD=DENY,groupB=SUB\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL Docker Container\nDESCRIPTION: Docker commands to start a PostgreSQL container with Debezium's image and connect to it via bash. The container is set up with specific user credentials for testing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# starting a pg instance\ndocker run -d --name postgres -p 5432:5432 -e POSTGRES_USER=start_data_engineer -e POSTGRES_PASSWORD=password debezium/postgres:14\n\n# bash into postgres instance\ndocker exec -ti postgres /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Maven SCM Configuration\nDESCRIPTION: XML configuration for Maven SCM settings in pom.xml for release management.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/04release-manual.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<scm>\n    <url>git@github.com:apache/rocketmq.git</url>\n    <connection>scm:git:git@github.com:apache/rocketmq.git</connection>\n    <developerConnection>scm:git:git@github.com:apache/rocketmq.git</developerConnection>\n    <tag>rocketmq-all-x.x.x</tag>\n</scm>\n```\n\n----------------------------------------\n\nTITLE: Hosts File Configuration for Name Server\nDESCRIPTION: Example of how to configure the hosts file to modify the HTTP server address for Name Server lookup.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/06-parameterConfiguration/01local.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n10.232.22.67    jmenv.taobao.net   \n```\n\n----------------------------------------\n\nTITLE: Stopping RocketMQ Connect Connectors\nDESCRIPTION: Commands to stop the file source and sink connectors using the REST API, with explanation of the command format.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:8082/connectors/fileSinkConnector/stop\ncurl http://127.0.0.1:8082/connectors/fileSourceConnector/stop\n```\n\n----------------------------------------\n\nTITLE: Sample RocketMQ Connect Configuration File\nDESCRIPTION: Example configuration file for RocketMQ Connect in standalone mode, showing settings for worker ID, HTTP port, storage path, and RocketMQ nameserver address.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n#current cluster node uniquely identifies\nworkerId=DEFAULT_WORKER_1\n\n# Http prot for user to access REST API\nhttpPort=8082\n\n# Local file dir for config store\nstorePathRootDir=/Users/YourUsername/rocketmqconnect/storeRoot\n\n#You need to modify it to your own rocketmq nameserver endpoint.\n# RocketMQ namesrvAddr\nnamesrvAddr=127.0.0.1:9876  \n\n# Plugin path for loading Source/Sink Connectors\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Docker Container\nDESCRIPTION: Docker command to start a MySQL container using Debezium's example image with specified root password and user credentials for testing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:1.9\n```\n\n----------------------------------------\n\nTITLE: Creating RocketMQ Topic via Shell Commands\nDESCRIPTION: Shell commands for accessing the broker container and creating a new Topic using mqadmin tool.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker exec -it rmqbroker bash\n$ sh mqadmin updatetopic -t TestTopic -c DefaultCluster\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription Group with mqadmin\nDESCRIPTION: Command to create a subscription group using the mqadmin tool. Requires cluster name, consumer group name, and nameserver address parameters.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/03fifomessage.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin updateSubGroup -c <cluster_name> -g <consumer_group_name> -n <nameserver_address> -o true\n```\n\n----------------------------------------\n\nTITLE: Starting Connect Runtime\nDESCRIPTION: Commands to compile and start the RocketMQ Connect runtime, including modifying the configuration file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd  rocketmq-connect\n\nmvn -Prelease-connect -DskipTests clean install -U\n\n$ cd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n$ vim conf/connect-standalone.conf\n```\n\n----------------------------------------\n\nTITLE: Querying ACL Configuration Version Information (Shell)\nDESCRIPTION: Command to query the version information of ACL configuration files across brokers in a cluster. This can be executed on all brokers in a specified cluster or on a single broker node.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/04access.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin clusterAclConfigVersion -n 192.168.1.2:9876 -c DefaultCluster\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Source Database Schema and Table\nDESCRIPTION: SQL commands to create the source database schema and table in PostgreSQL, set up primary key, and insert test data for CDC replication testing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA bank;\nSET search_path TO bank,public;\nCREATE TABLE bank.holding (\n                              holding_id int,\n                              user_id int,\n                              holding_stock varchar(8),\n                              holding_quantity int,\n                              datetime_created timestamp,\n                              datetime_updated timestamp,\n                              primary key(holding_id)\n);\nALTER TABLE bank.holding replica identity FULL;\ninsert into bank.holding values (1000, 1, 'VFIAX', 10, now(), now());\n\\q\ninsert into bank.holding values (1000, 1, 'VFIAX', 10, now(), now());\ninsert into bank.holding values (1001, 2, 'SP500', 1, now(), now());\ninsert into bank.holding values (1003, 3, 'SP500', 1, now(), now());\nupdate bank.holding set holding_quantity = 300 where holding_id=1000;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Target Database and Table\nDESCRIPTION: SQL commands to create the target database and table in MySQL for receiving the replicated data from PostgreSQL via RocketMQ Connect.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate database bank1;\nCREATE TABLE holding (\n                          holding_id int,\n                          user_id int,\n                          holding_stock varchar(8),\n                          holding_quantity int,\n                          datetime_created bigint,\n                          datetime_updated bigint,\n                          primary key(holding_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ with Docker Compose on Linux\nDESCRIPTION: Command to start all the defined RocketMQ services in detached mode according to the docker-compose.yml file on Linux systems.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_2\n\nLANGUAGE: code\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating RocketMQ Topic via Shell Commands\nDESCRIPTION: Shell commands for accessing the broker container and creating a new Topic using mqadmin tool.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker exec -it rmqbroker bash\n$ sh mqadmin updatetopic -t TestTopic -c DefaultCluster\n```\n\n----------------------------------------\n\nTITLE: Starting Connect Runtime\nDESCRIPTION: Commands to compile and start the RocketMQ Connect runtime, including modifying the configuration file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd  rocketmq-connect\n\nmvn -Prelease-connect -DskipTests clean install -U\n\n$ cd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n$ vim conf/connect-standalone.conf\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing JDBC Connector for MySQL Sink\nDESCRIPTION: Commands for compiling the JDBC connector and copying it to the RocketMQ Connect plugins directory. This connector will be used to write data to MySQL.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-jdbc/\n$ mvn clean package -Dmaven.test.skip=true\ncp rocketmq-connect-jdbc/target/rocketmq-connect-jdbc-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Maven Settings Configuration for Release\nDESCRIPTION: Maven settings.xml configuration for deploying releases to ASF Nexus repository, including server credentials and GPG signing settings.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n    <profiles>\n        <profile>\n            <id>signed_release</id>\n            <properties>\n                <mavenExecutorId>forked-path</mavenExecutorId>\n                <gpg.keyname>yourKeyName</gpg.keyname>\n                <deploy.url>https://dist.apache.org/repos/dist/dev/rocketmq/</deploy.url>\n            </properties>\n        </profile>\n    </profiles>\n    <servers>\n        <server>\n            <id>apache.snapshots.https</id>\n            <username>yourApacheID</username>\n            <password>yourApachePassword</password>\n        </server>\n        <server>\n            <id>apache.releases.https</id>\n            <username>yourApacheID</username>\n            <password>yourApachePassword</password>\n        </server>\n        <server>\n            <id>gpg.passphrase</id>\n            <passphrase>yourKeyPassword</passphrase>\n        </server>\n    </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complete ACL Configuration Contents (Shell)\nDESCRIPTION: Command to retrieve the entire contents of the ACL configuration file from brokers in a cluster. This can be executed across all brokers in a specified cluster or on a single broker node.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/04access.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin getAccessConfigSubCommand -n 192.168.1.2:9876 -c DefaultCluster\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Connect Runtime in Standalone Mode\nDESCRIPTION: Command to start the RocketMQ Connect runtime in standalone mode using the configured properties file. This launches the service that will manage the connectors.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nsh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n```\n\n----------------------------------------\n\nTITLE: Printing Messages from RocketMQ\nDESCRIPTION: Utility command to consume and print messages from a RocketMQ broker within a specified time period with configurable character encoding.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nprintMsg options:\n-h Print help\n-n NameServer address,format ip:port\n-t topic name\n-c Character set, e.g. UTF-8\n-s Start time\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ values.yaml for Kubernetes\nDESCRIPTION: YAML configuration for adjusting RocketMQ resources and container parameters in the Helm chart values file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Modify the configuration in values.yaml (adjust relevant configuration information according to actual needs, such as image version, resource size, number of replicas, etc., while disabling proxy and controller features)\n$ vim values.yaml\n## In values.yaml, modify parameters such as limits and requests in broker's resources to suitable sizes, and change the image tag to 4.9.6 ##\n  resources:\n    limits:\n      cpu: 2\n      memory: 10Gi\n    requests:\n      cpu: 2\n      memory: 10Gi\n##values.yaml##\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Broker Resources in YAML\nDESCRIPTION: YAML configuration for adjusting CPU and memory resources of the RocketMQ broker in the Helm chart's values.yaml file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n## values.yaml, adjust memory requests and limits in broker resources according to available memory size ##\n  resources:\n    limits:\n      cpu: 2\n      memory: 10Gi\n    requests:\n      cpu: 2\n      memory: 10Gi\n##values.yaml##\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime and Elasticsearch Connector Plugin\nDESCRIPTION: Commands to clone the RocketMQ Connect repository, build the runtime, and compile the Elasticsearch connector plugin.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-connect.git\n\ncd  rocketmq-connect\n\nexport RMQ_CONNECT_HOME=`pwd`\n\nmvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n\ncd $RMQ_CONNECT_HOME/connectors/rocketmq-connect-elasticsearch/\n\nmvn clean package -Dmaven.test.skip=true\n\nmkdir -p /Users/YourUsername/rocketmqconnect/connector-plugins\ncp target/rocketmq-connect-elasticsearch-1.0.0-jar-with-dependencies.jar /Users/YourUsername/rocketmqconnect/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Compiling Debezium RocketMQ Connector\nDESCRIPTION: Commands to compile the Debezium RocketMQ Connector and copy the resulting JAR files to the connector plugins directory.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/\n$ mvn clean package -Dmaven.test.skip=true\n\nmkdir -p /usr/local/connector-plugins\ncp rocketmq-connect-debezium-postgresql/target/rocketmq-connect-debezium-postgresql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n\ncp rocketmq-connect-debezium-mysql/target/rocketmq-connect-debezium-mysql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commit History in Shell\nDESCRIPTION: Displays the Git commit history. Used to identify recent commits for potential rollback.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Querying Message Trace Data by Message ID in RocketMQ\nDESCRIPTION: Shell command for querying message trace information by message ID using the mqadmin command-line tool. This allows administrators to track the delivery path of specific messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/03messagetra.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./mqadmin QueryMsgTraceById -n 127.0.0.1:9876 -i \"some-message-id\"\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Test Data\nDESCRIPTION: SQL commands to create a test database and table in MySQL, and insert sample data.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate database bank;\nuse bank;\n\ncreate table bank.user\n(\n    id       bigint NOT NULL AUTO_INCREMENT,\n    user_id          integer,\n    name    varchar(8),\n    age integer,\n    birthday date,\n    datetime_created timestamp(3),\n    datetime_updated timestamp(3),\n    height           decimal(11, 2) null,\n    PRIMARY KEY (`id`)\n);\n\ninsert into bank.user values (1003, 1, 'lilei2', 10, now(), now(), now(), 1.72);\nupdate bank.user set user_id = 1003 where id = 1003;\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Connect Standalone Configuration\nDESCRIPTION: Configuration settings for RocketMQ Connect standalone mode, including worker ID, storage path, HTTP port, RocketMQ nameserver address, ACL settings, and plugin paths.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nworkerId=standalone-worker\nstorePathRootDir=/tmp/storeRoot\n\n## Http port for user to access REST API\nhttpPort=8082\n\n# Rocketmq namesrvAddr\nnamesrvAddr=localhost:9876\n\n# RocketMQ acl\naclEnable=false\naccessKey=rocketmq\nsecretKey=12345678\n\nautoCreateGroupEnable=false\nclusterName=\"DefaultCluster\"\n\n# Core configuration, configure the plugin directory of the previously compiled debezium package here\n# Source or sink connector jar file dir,The default value is rocketmq-connect-sample\npluginPaths=/usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Maven command to build the RocketMQ Connect runtime with the connect profile enabled, which prepares the environment for running connectors.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd  rocketmq-connect\n\nmvn -Prelease-connect -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Moving Debezium PostgreSQL Connector to Runtime Directory\nDESCRIPTION: Commands to create a plugin directory and copy the compiled Debezium PostgreSQL connector JAR file to the connector plugins directory for runtime loading.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /usr/local/connector-plugins\ncp rocketmq-connect-debezium-postgresql/target/rocketmq-connect-debezium-postgresql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Building Connector Runtime and Elasticsearch Connector Plugin\nDESCRIPTION: Commands to clone the RocketMQ Connect repository, build the Connector Runtime, and compile the Elasticsearch Connector Plugin.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-connect.git\n\ncd  rocketmq-connect\n\nexport RMQ_CONNECT_HOME=`pwd`\n\nmvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n\ncd $RMQ_CONNECT_HOME/connectors/rocketmq-connect-elasticsearch/\n\nmvn clean package -Dmaven.test.skip=true\n\nmkdir -p /Users/YourUsername/rocketmqconnect/connector-plugins\ncp target/rocketmq-connect-elasticsearch-1.0.0-jar-with-dependencies.jar /Users/YourUsername/rocketmqconnect/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Target Table\nDESCRIPTION: SQL commands to create a target database and table in MySQL for data synchronization.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate database bank1;\ncreate table bank1.user\n(\n    id               bigint auto_increment\n        primary key,\n    user_id          int            null,\n    name             varchar(8)     null,\n    age              int            null,\n    birthday         date           null,\n    datetime_created timestamp(3)   null,\n    datetime_updated timestamp(3)   null,\n    height           decimal(11, 2) null\n);\n```\n\n----------------------------------------\n\nTITLE: Merging Contributor PR\nDESCRIPTION: Commands for committers to merge pull requests from contributors.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout develop\t# switch to local develop branch\ngit pull apache develop\t# fast-forward to current remote HEAD\ngit pull --squash https://github.com/cuser/rocketmq.git RocketMQ-Vxx.0  # merge to branch\n```\n\n----------------------------------------\n\nTITLE: DLedger Broker Configuration Example\nDESCRIPTION: Sample configuration file for a DLedger broker node showing key settings including DLedger group configuration, paths, and messaging parameters\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/02dledger.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbrokerClusterName = RaftCluster\nbrokerName=RaftNode00\nlistenPort=30911\nnamesrvAddr=127.0.0.1:9876\nstorePathRootDir=/tmp/rmqstore/node00\nstorePathCommitLog=/tmp/rmqstore/node00/commitlog\nenableDLegerCommitLog=true\ndLegerGroup=RaftNode00\ndLegerPeers=n0-127.0.0.1:40911;n1-127.0.0.1:40912;n2-127.0.0.1:40913\n## must be unique\ndLegerSelfId=n0\nsendMessageThreadPoolNums=16\n```\n\n----------------------------------------\n\nTITLE: Starting JDBC Sink Connector\nDESCRIPTION: cURL command to start the JDBC sink connector for consuming data from RocketMQ and writing it to the target MySQL database.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest1000 -d '{\n  \"connector.class\": \"org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector\",\n  \"max.task\": \"2\",\n  \"connect.topicnames\": \"debezium-source-topic1000\",\n  \"connection.url\": \"jdbc:mysql://database ip:3306/bank1\",\n  \"connection.user\": \"root\",\n  \"connection.password\": \"debezium\",\n  \"pk.fields\": \"id\",\n  \"table.name.from.header\": \"true\",\n  \"pk.mode\": \"record_key\",\n  \"insert.mode\": \"UPSERT\",\n  \"db.timezone\": \"UTC\",\n  \"table.types\": \"TABLE\",\n  \"errors.deadletterqueue.topic.name\": \"dlq-topic\",\n  \"errors.log.enable\": \"true\",\n  \"errors.tolerance\": \"ALL\",\n  \"delete.enabled\": \"true\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Lite Pull Consumer with Assign Mode in RocketMQ (Java)\nDESCRIPTION: This snippet demonstrates the usage of Lite Pull Consumer in Assign mode. It shows how to manually assign message queues, set the consume offset, and implement manual offset commit. It also illustrates fetching message queues and seeking to a specific offset.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/03-consumer/03pull.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class LitePullConsumerAssign {\n    public static volatile boolean running = true;\n    public static void main(String[] args) throws Exception {\n        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer(\"please_rename_unique_group_name\");\n        litePullConsumer.setAutoCommit(false);\n        litePullConsumer.start();\n        Collection<MessageQueue> mqSet = litePullConsumer.fetchMessageQueues(\"TopicTest\");\n        List<MessageQueue> list = new ArrayList<>(mqSet);\n        List<MessageQueue> assignList = new ArrayList<>();\n        for (int i = 0; i < list.size() / 2; i++) {\n            assignList.add(list.get(i));\n        }\n        litePullConsumer.assign(assignList);\n        litePullConsumer.seek(assignList.get(0), 10);\n        try {\n            while (running) {\n                List<MessageExt> messageExts = litePullConsumer.poll();\n                System.out.printf(\"%s %n\", messageExts);\n                litePullConsumer.commitSync();\n            }\n        } finally {\n            litePullConsumer.shutdown();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network\nDESCRIPTION: Creates a shared network for RocketMQ containers to communicate.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/02quickstartWithDocker.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create rocketmq\n```\n\n----------------------------------------\n\nTITLE: GC Log Rotation Configuration\nDESCRIPTION: Sets up garbage collection log rotation with 5 files of 30MB each for better log management.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/05JVMOS.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-XX:+UseGCLogFileRotation\n-XX:NumberOfGCLogFiles=5\n-XX:GCLogFileSize=30m\n```\n\n----------------------------------------\n\nTITLE: G1 Garbage Collector Configuration\nDESCRIPTION: Configures G1 garbage collector with specific heap region size, reserve percentage, and occupancy threshold for production environments.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/05JVMOS.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=16m\n-XX:G1ReservePercent=25\n-XX:InitiatingHeapOccupancyPercent=30\n```\n\n----------------------------------------\n\nTITLE: Disable Biased Locking\nDESCRIPTION: Disables biased locking to reduce JVM pauses in high-throughput scenarios.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/05JVMOS.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-XX:-UseBiasedLocking\n```\n\n----------------------------------------\n\nTITLE: Enabling JVM Pre-Touch for RocketMQ\nDESCRIPTION: Option to enable heap pre-touching during JVM initialization to improve memory allocation performance at the cost of longer startup times.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-XX:+AlwaysPreTouch  \n```\n\n----------------------------------------\n\nTITLE: Building Elasticsearch Connector Plugin\nDESCRIPTION: Commands to build and install the Elasticsearch connector plugin for RocketMQ Connect.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/connectors/rocketmq-connect-elasticsearch/\n\nmvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Connect in Standalone Mode\nDESCRIPTION: Commands to navigate to the configuration directory and modify the connect-standalone.conf file, with information about checkpoint persistence and resetting.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nvim conf/connect-standalone.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Connect in Standalone Mode\nDESCRIPTION: Commands to navigate to the configuration directory and modify the connect-standalone.conf file, with information about checkpoint persistence and resetting.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nvim conf/connect-standalone.conf\n```\n\n----------------------------------------\n\nTITLE: Making Local Changes\nDESCRIPTION: Series of commands to create a new branch and commit changes locally.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b RocketMQ-Vxx.0 # git checkout [-b] [new-branch]\ngit add /rocketmq/pom.xml # git add [dir/file]\ngit commit -a -m \"pom\"\t# git commit [-all] [-msg] [message]\n```\n\n----------------------------------------\n\nTITLE: Starting DLedger Quick Deployment\nDESCRIPTION: Commands to start RocketMQ with DLedger configuration after build\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/02dledger.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd distribution/target/rocketmq-{rocketmq-version}/rocketmq-{rocketmq-version}\n$ sh bin/dledger/fast-try.sh start\n```\n\n----------------------------------------\n\nTITLE: Checking RocketMQ Connect Shutdown Logs\nDESCRIPTION: Command to view the logs to verify that the connectors have been successfully shut down.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ntail -100f ~/logs/rocketmqconnect/connect_default.log\n```\n\n----------------------------------------\n\nTITLE: Compiling and Setting Up JDBC Connector\nDESCRIPTION: Commands to compile the JDBC Connector plugin from source and move the compiled package to the connector plugins directory for RocketMQ Connect.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-jdbc/\n$ mvn clean package -Dmaven.test.skip=true\ncp rocketmq-connect-jdbc/target/rocketmq-connect-jdbc-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Redirecting GC Logs to In-Memory Filesystem\nDESCRIPTION: Configuration to redirect garbage collection logs to an in-memory filesystem (/dev/shm). This reduces latency caused by writing GC logs to disk by using RAM instead.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-Xloggc:/dev/shm/mq_gc_%p.log123   \n```\n\n----------------------------------------\n\nTITLE: Setting Up Elasticsearch and Kibana Services Using Docker\nDESCRIPTION: Docker commands to set up two Elasticsearch instances and two Kibana services for demonstration purposes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:7.15.1\n\ndocker run --name es1 -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" -e \"ES_JAVA_OPTS=-Xms1g -Xmx1g\" \\\n  -v /Users/YourUsername/rocketmqconnect/es/es1_data:/usr/share/elasticsearch/data \\\n  -d docker.elastic.co/elasticsearch/elasticsearch:7.15.1\n\ndocker run --name es2 -p 9201:9200 -p 9301:9300 -e \"discovery.type=single-node\" -e \"ES_JAVA_OPTS=-Xms1g -Xmx1g\" \\\n  -v /Users/YourUsername/rocketmqconnect/es/es2_data:/usr/share/elasticsearch/data \\\n  -d docker.elastic.co/elasticsearch/elasticsearch:7.15.1\n\ndocker pull docker.elastic.co/kibana/kibana:7.15.1\n\ndocker run --name kibana1 --link es1:elasticsearch -p 5601:5601 -d docker.elastic.co/kibana/kibana:7.15.1\n\ndocker run --name kibana2 --link es2:elasticsearch -p 5602:5601 -d docker.elastic.co/kibana/kibana:7.15.1\n```\n\n----------------------------------------\n\nTITLE: Viewing RocketMQ Connect Log Directory\nDESCRIPTION: Commands to view the log directory where RocketMQ Connect stores its logs, using both absolute and relative paths.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nls $HOME/logs/rocketmqconnect\nls ~/logs/rocketmqconnect\n```\n\n----------------------------------------\n\nTITLE: Committing Merged Changes - Shell\nDESCRIPTION: Commands for committing merged changes and pushing to remote repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/11-contributionGuide/03pull-request.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --author=\"contributor_name <contributor_email>\" -a -m \"RocketMQ-Vxx.0 description closes apache/rocketmq#ZZ\"\ngit push apache develop\ngit push origin develop\n```\n\n----------------------------------------\n\nTITLE: Shutting Down RocketMQ Services\nDESCRIPTION: Commands to properly shut down the RocketMQ Broker and NameServer services after use. The shutdown script identifies running processes and sends termination requests.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/01quickstart.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/mqshutdown broker\nThe mqbroker(36695) is running...\nSend shutdown request to mqbroker(36695) OK\n\n$ sh bin/mqshutdown namesrv\nThe mqnamesrv(36664) is running...\nSend shutdown request to mqnamesrv(36664) OK\n```\n\n----------------------------------------\n\nTITLE: Configuring Sink Connector via REST API\nDESCRIPTION: REST API call to create and configure a file sink connector\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/fileSinkConnector -d '{\n\t\"connector.class\": \"org.apache.rocketmq.connect.file.FileSinkConnector\",\n\t\"filename\": \"/Users/YourUsername/rocketmqconnect/test-sink-file.txt\",\n\t\"connect.topicnames\": \"fileTopic\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote - Shell\nDESCRIPTION: Command for pushing local changes to the remote repository with upstream tracking.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/11-contributionGuide/03pull-request.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push --set-upstream apache RocketMQ-Vxx.0\t# push branch to https://github.com/cuser/rocketmq-site.git\n```\n\n----------------------------------------\n\nTITLE: Generating PGP Key for Release Signing\nDESCRIPTION: Shell commands demonstrating the process of generating a GPG key for signing release artifacts. The key should use the Apache ID email and be set to 4096 bits with no expiration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost ~]# gpg --gen-key\ngpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.\n...\n# secret key generation directory\ngpg: directory `/root/.gnupg' created\ngpg: new configuration file `/root/.gnupg/gpg.conf' created\ngpg: WARNING: options in `/root/.gnupg/gpg.conf' are not yet active during this run\ngpg: keyring `/root/.gnupg/secring.gpg' created\ngpg: keyring `/root/.gnupg/pubring.gpg' created\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\nYour selection?\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\n```\n\n----------------------------------------\n\nTITLE: Examples of Events in Event-Driven Systems\nDESCRIPTION: This snippet provides examples of events, which are clear occurrences that have already happened in the system.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* The kitchen light being turned on\n* Someone pressing the doorbell\n* Account A receiving 100,000\n```\n\n----------------------------------------\n\nTITLE: Setting Up Elasticsearch and Kibana Using Docker\nDESCRIPTION: Docker commands to set up two Elasticsearch instances and two Kibana services for demonstration purposes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:7.15.1\n\ndocker run --name es1 -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" -e \"ES_JAVA_OPTS=-Xms1g -Xmx1g\" \\\n  -v /Users/YourUsername/rocketmqconnect/es/es1_data:/usr/share/elasticsearch/data \\\n  -d docker.elastic.co/elasticsearch/elasticsearch:7.15.1\n\ndocker run --name es2 -p 9201:9200 -p 9301:9300 -e \"discovery.type=single-node\" -e \"ES_JAVA_OPTS=-Xms1g -Xmx1g\" \\\n  -v /Users/YourUsername/rocketmqconnect/es/es2_data:/usr/share/elasticsearch/data \\\n  -d docker.elastic.co/elasticsearch/elasticsearch:7.15.1\n\ndocker pull docker.elastic.co/kibana/kibana:7.15.1\n\ndocker run --name kibana1 --link es1:elasticsearch -p 5601:5601 -d docker.elastic.co/kibana/kibana:7.15.1\n\ndocker run --name kibana2 --link es2:elasticsearch -p 5602:5601 -d docker.elastic.co/kibana/kibana:7.15.1\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Tools\nDESCRIPTION: Commands to test RocketMQ message sending and receiving using the built-in tools, setting NAMESRV_ADDR environment variable.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7\n$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4\n\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Making Local Changes - Shell\nDESCRIPTION: Series of commands for creating a new branch, adding files, and committing changes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/11-contributionGuide/03pull-request.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b RocketMQ-Vxx.0 # git checkout [-b] [new-branch]\ngit add /rocketmq/pom.xml # git add [dir/file]\ngit commit -a -m \"pom\"\t# git commit [-all] [-msg] [message]\n```\n\n----------------------------------------\n\nTITLE: Writing Test Data to Source Elasticsearch\nDESCRIPTION: Example of writing test data to the source Elasticsearch instance using Kibana's Dev Tools.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /_bulk\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"1\", \"field1\": \"value1\", \"field2\": \"value2\" }\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"2\", \"field1\": \"value3\", \"field2\": \"value4\" }\n```\n\n----------------------------------------\n\nTITLE: Enabling JVM Pre-Touch for RocketMQ\nDESCRIPTION: Option to enable heap memory pre-touch during JVM initialization. This ensures every page will be allocated upfront, improving runtime performance at the cost of longer startup time.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-XX:+AlwaysPreTouch  \n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Commands to clone and build the RocketMQ Connect project from source code.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-connect.git\n\ncd rocketmq-connect\n\nexport RMQ_CONNECT_HOME=`pwd`\n\nmvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n```\n\n----------------------------------------\n\nTITLE: Starting SFTP Sink Connector for RocketMQ Connect\nDESCRIPTION: cURL command to start the SFTP sink connector, which consumes messages from a RocketMQ topic and writes them to the sink.txt file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST --location \"http://localhost:8082/connectors/SftpSinkConnector\" --http1.1 \\\n    -H \"Host: localhost:8082\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"connector.class\": \"org.apache.rocketmq.connect.http.sink.SftpSinkConnector\",\n          \"host\": \"127.0.0.1\",\n          \"port\": 22,\n          \"username\": \"YourUsername\",\n          \"password\": \"yourPassword\",\n          \"filePath\": \"/Users/YourUsername/rocketmqconnect/sftp-test/sink.txt\",\n          \"connect.topicnames\": \"sftpTopic\",\n          \"fieldSeparator\": \"|\",\n          \"fieldSchema\": \"username|idCardNo|orderNo|orderAmount|trxDate|trxTime|profit\"\n        }'\n```\n\n----------------------------------------\n\nTITLE: Shutting Down RocketMQ Servers\nDESCRIPTION: Commands to safely shut down the RocketMQ Broker and NameServer processes after finishing with the local deployment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/01quickstart.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/mqshutdown broker\nThe mqbroker(36695) is running...\nSend shutdown request to mqbroker(36695) OK\n\n$ sh bin/mqshutdown namesrv\nThe mqnamesrv(36664) is running...\nSend shutdown request to mqnamesrv(36664) OK\n```\n\n----------------------------------------\n\nTITLE: Writing Test Data to Source Elasticsearch\nDESCRIPTION: Example of writing test data to the source Elasticsearch instance using Kibana's Dev Tools.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /_bulk\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"1\", \"field1\": \"value1\", \"field2\": \"value2\" }\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"2\", \"field1\": \"value3\", \"field2\": \"value4\" }\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Data Operations\nDESCRIPTION: Example commands for writing test data to Elasticsearch and querying/deleting data using the Kibana console.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPOST /_bulk\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"1\", \"field1\": \"value1\", \"field2\": \"value2\" }\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"2\", \"field1\": \"value3\", \"field2\": \"value4\" }\n```\n\n----------------------------------------\n\nTITLE: Rebasing Development Branch - Shell\nDESCRIPTION: Command to get the latest code from development branch using rebase.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/11-contributionGuide/03pull-request.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase origin/develop # git rebase [branch]\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running RocketMQ Connect in Standalone Mode\nDESCRIPTION: Steps to configure the connect-standalone.conf file and start the RocketMQ Connect worker in standalone mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nvim conf/connect-standalone.conf\n\nsh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n```\n\n----------------------------------------\n\nTITLE: Starting Broker Cluster in Master-Slave Synchronous Mode\nDESCRIPTION: Commands to start multiple Broker masters and slaves in a cluster configuration with synchronous dual writes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/01deploy.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a.properties &\n \n### On machine A, start the second Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b.properties &\n \n### On machine C, start the first slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a-s.properties &\n \n### On machine D, start the second slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b-s.properties &\n```\n\n----------------------------------------\n\nTITLE: Stopping the RocketMQ DLedger Cluster\nDESCRIPTION: Command to stop the RocketMQ DLedger cluster deployment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/dledger/fast-try.sh stop\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Containers\nDESCRIPTION: Commands to stop the RocketMQ NameServer and Broker containers.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/02quickstartWithDocker.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Stop the NameServer container\ndocker stop rmqnamesrv\n\n# Stop the Broker container\ndocker stop rmqbroker\n```\n\n----------------------------------------\n\nTITLE: Debezium MySQL Source Connector Configuration\nDESCRIPTION: REST API call to configure MySQL source connector for CDC\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/MySQLCDCSource1000 -d '{\n\"connector.class\": \"org.apache.rocketmq.connect.debezium.mysql.DebeziumMysqlConnector\",\n\"max.task\": \"1\",\n\"connect.topicname\": \"debezium-source-topic1000\",\n\"kafka.transforms\": \"Unwrap\",\n\"kafka.transforms.Unwrap.delete.handling.mode\": \"none\",\n\"kafka.transforms.Unwrap.type\": \"io.debezium.transforms.ExtractNewRecordState\",\n\"kafka.transforms.Unwrap.add.headers\": \"op,source.db,source.table\",\n\"database.history.skip.unparseable.ddl\": true,\n\"database.history.name.srv.addr\": \"localhost:9876\",\n\"database.history.rocketmq.topic\": \"db-history-debezium-topic1000\",\n\"database.history.store.only.monitored.tables.ddl\": true,\n\"include.schema.changes\": false,\n\"database.server.name\": \"dbserver1\",\n\"database.port\": 3306,\n\"database.hostname\": \"database ip\",\n\"database.connectionTimeZone\": \"UTC\",\n\"database.user\": \"debezium\",\n\"database.password\": \"dbz\",\n\"table.include.list\": \"bank.user\",\n\"max.batch.size\": 50,\n\"database.include.list\": \"bank\",\n\"snapshot.mode\": \"when_needed\",\n\"database.server.id\": \"184054\",\n\"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n\"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Source Test File for SFTP Transfer\nDESCRIPTION: Commands to create a test file named source.txt with sample data for SFTP transfer testing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /Users/YourUsername/rocketmqconnect/sftp-test/\n\ncd /Users/YourUsername/rocketmqconnect/sftp-test/\n\ntouch source.txt\n\necho 'John Doe|100000202211290001|20221129001|30000.00|2022-11-28|03:00:00|7.00\nJane Smith|100000202211290002|20221129002|40000.00|2022-11-28|04:00:00|9.00\nBob Johnson|100000202211290003|20221129003|50000.00|2022-11-28|05:00:00|12.00' >> source.txt\n```\n\n----------------------------------------\n\nTITLE: Compiling JDBC Connector\nDESCRIPTION: Commands to compile the JDBC Connector and copy the resulting JAR file to the connector plugins directory.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-jdbc/\n$ mvn clean package -Dmaven.test.skip=true\ncp rocketmq-connect-jdbc/target/rocketmq-connect-jdbc-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status\nDESCRIPTION: Command to check DLedger cluster status using mqadmin tool\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/02dledger.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/mqadmin clusterList -n 127.0.0.1:9876\n```\n\n----------------------------------------\n\nTITLE: Testing SFTP Data Transfer with RocketMQ Connect\nDESCRIPTION: Commands to add more test data to the source file and verify the contents of the sink file after data transfer.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd /Users/YourUsername/rocketmqconnect/sftp-test/\n\necho 'John Doe|100000202211290001|20221129001|30000.00|2022-11-28|03:00:00|7.00\nJane Smith|100000202211290002|20221129002|40000.00|2022-11-28|04:00:00|9.00\nBob Johnson|100000202211290003|20221129003|50000.00|2022-11-28|05:00:00|12.00' >> source.txt\n\n# Wait a few seconds to give the connector time to replicate data to the sink file.\nsleep 10\n\ncat /Users/YourUsername/rocketmqconnect/sftp-test/sink.txt\n```\n\n----------------------------------------\n\nTITLE: Tag-based Message Filtering Examples in RocketMQ\nDESCRIPTION: Examples of implementing tag-based message filtering in RocketMQ consumers for different subscription patterns.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/03-consumer/02push.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nconsumer.subscribe(\"TagFilterTest\", \"TagA\");\n```\n\nLANGUAGE: java\nCODE:\n```\nconsumer.subscribe(\"TagFilterTest\", \"*\");\n```\n\nLANGUAGE: java\nCODE:\n```\nconsumer.subscribe(\"TagFilterTest\", \"TagA||TagB\");\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Schema Setup\nDESCRIPTION: SQL commands to create and populate the source PostgreSQL database schema\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA bank;\nSET search_path TO bank,public;\ncreate table bank.user\n(\n    id       integer not null\n        constraint user_pkey\n            primary key,\n    user_id          integer,\n    name    varchar(8),\n    age integer,\n    birthday date,\n    datetime_created timestamp(3),\n    datetime_updated timestamp(3),\n    height           numeric(11, 2)\n);\n\ninsert into bank.user values (1001, 1, 'lilei1', 10, now(), now(), now(), 1.72);\nupdate bank.user set user_id = 1001 where id = 1001;\n```\n\n----------------------------------------\n\nTITLE: Docker Kibana Setup\nDESCRIPTION: Docker commands to set up Kibana instances for visualizing Elasticsearch data.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull docker.elastic.co/kibana/kibana:7.15.1\n\ndocker run --name kibana1 --link es1:elasticsearch -p 5601:5601 -d docker.elastic.co/kibana/kibana:7.15.1\n\ndocker run --name kibana2 --link es2:elasticsearch -p 5602:5601 -d docker.elastic.co/kibana/kibana:7.15.1\n```\n\n----------------------------------------\n\nTITLE: Handling LOAD_JSON_EXCEPTION in Java\nDESCRIPTION: This snippet shows the exception message when consumers have an error loading the local offsets.json file in broadcast mode or when there's a damaged fastjson file in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nreadLocalOffset Exception\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Schema Setup\nDESCRIPTION: SQL commands to create and populate the source PostgreSQL database schema\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA bank;\nSET search_path TO bank,public;\ncreate table bank.user\n(\n    id       integer not null\n        constraint user_pkey\n            primary key,\n    user_id          integer,\n    name    varchar(8),\n    age integer,\n    birthday date,\n    datetime_created timestamp(3),\n    datetime_updated timestamp(3),\n    height           numeric(11, 2)\n);\n\ninsert into bank.user values (1001, 1, 'lilei1', 10, now(), now(), now(), 1.72);\nupdate bank.user set user_id = 1001 where id = 1001;\n```\n\n----------------------------------------\n\nTITLE: Defining the 'Naturally Ordered and Unique' Characteristic of Events\nDESCRIPTION: This snippet explains the 'Naturally Ordered and Unique' characteristic of events, highlighting that events for the same entity must have a temporal relationship and cannot occur simultaneously.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nThe same entity cannot have both A and B occur at the same time, there must be a temporal relationship; if so, these two events must belong to different event types.\n```\n\n----------------------------------------\n\nTITLE: Hostname Configuration for RocketMQ HTTP Static Server\nDESCRIPTION: Shows how to configure the hosts file to redirect the default RocketMQ NameServer lookup URL to a specific IP address. This enables using HTTP static server addressing without changing the client code.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/01bestpractice.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n10.232.22.67    jmenv.taobao.net   \n```\n\n----------------------------------------\n\nTITLE: Examples of Events in RocketMQ EventBridge\nDESCRIPTION: This snippet provides examples of events in RocketMQ EventBridge, emphasizing their nature as occurrences that have already happened.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* The kitchen light being turned on\n* Someone pressing the doorbell\n* Account A receiving 100,000\n```\n\n----------------------------------------\n\nTITLE: Working with Development Branch\nDESCRIPTION: Commands to checkout and push changes to the new-official-website branch.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout new-official-website\t# git checkout -b new-official-website\ngit push origin new-official-website\t# push to https://github.com/cuser/rocketmq-site.git\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Docker Setup\nDESCRIPTION: Docker commands for setting up source and destination Elasticsearch instances.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:7.15.1\n\ndocker run --name es1 -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" -e \"ES_JAVA_OPTS=-Xms1g -Xmx1g\" \\  \n-v /Users/YourUsername/rocketmqconnect/es/es1_data:/usr/share/elasticsearch/data \\  \n-d docker.elastic.co/elasticsearch/elasticsearch:7.15.1 \n\ndocker run --name es2 -p 9201:9200 -p 9301:9300 -e \"discovery.type=single-node\" -e \"ES_JAVA_OPTS=-Xms1g -Xmx1g\" \\ \n-v /Users/YourUsername/rocketmqconnect/es/es2_data:/usr/share/elasticsearch/data \\ \n-d docker.elastic.co/elasticsearch/elasticsearch:7.15.1\n```\n\n----------------------------------------\n\nTITLE: Working with Development Branch\nDESCRIPTION: Commands to checkout and push changes to the new-official-website branch.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout new-official-website\t# git checkout -b new-official-website\ngit push origin new-official-website\t# push to https://github.com/cuser/rocketmq-site.git\n```\n\n----------------------------------------\n\nTITLE: Committing Merged Changes\nDESCRIPTION: Commands to commit the merged changes and close the PR.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --author=\"contributor_name <contributor_email>\" -a -m \"RocketMQ-Vxx.0 description closes apache/rocketmq#ZZ\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote\nDESCRIPTION: Command to push the local branch changes to the remote repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push --set-upstream apache RocketMQ-Vxx.0\t# push branch to https://github.com/cuser/rocketmq-site.git\n```\n\n----------------------------------------\n\nTITLE: Merging Contributor PR as a Committer\nDESCRIPTION: Commands for a committer to merge a contributor's pull request. This includes updating local branch, pulling remote changes, and merging the PR with squash.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout develop\t# switch to local develop branch\ngit pull apache develop\t# fast-forward to current remote HEAD\ngit pull --squash https://github.com/cuser/rocketmq.git RocketMQ-Vxx.0  # merge to branch\n```\n\n----------------------------------------\n\nTITLE: Checking Helm Version in Bash\nDESCRIPTION: Command to verify the installed Helm version to ensure compatibility before deploying RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm version\n```\n\n----------------------------------------\n\nTITLE: Creating Target MySQL Database and Table\nDESCRIPTION: SQL commands to create the target database and table for data synchronization testing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE database inventory_2;\nuse inventory_2;\nCREATE TABLE `employee` (\n`id` bigint NOT NULL AUTO_INCREMENT,\n`name` varchar(128) DEFAULT NULL,\n`howold` int DEFAULT NULL,\n`male` int DEFAULT NULL,\n`company` varchar(128) DEFAULT NULL,\n`money` double DEFAULT NULL,\n`begin_time` datetime DEFAULT NULL,\n`modify_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',\n`decimal_test` decimal(11,2) DEFAULT NULL COMMENT 'test decimal type',\nPRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ EventBridge Properties\nDESCRIPTION: Demonstrates the configuration settings for RocketMQ EventBridge in the application.properties file, including database, RocketMQ, and logging settings.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# Mysql database address\nspring.datasource.url=jdbc:mysql://xxxx:3306/xxxx?characterEncoding=utf8\nspring.datasource.username=xxx\nspring.datasource.password=xxxx\n\n# RocketMQ nameserver address\nrocketmq.namesrvAddr=xxxxx:9876\n\n# RocketMQ cluster name\nrocketmq.cluster.name=DefaultCluster\n\n# RocketMQ Connect address\nrocketmq.connect.endpoint=xxxxxx:8082\n\n# log default configuration\nlog.path=～\nlog.level=INFO\napp.name=rocketmq-eventbridge\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Test Data\nDESCRIPTION: SQL commands to create a test schema and table in PostgreSQL, and insert sample data.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA bank;\nSET search_path TO bank,public;\ncreate table bank.user\n(\n    id       integer not null\n        constraint user_pkey\n            primary key,\n    user_id          integer,\n    name    varchar(8),\n    age integer,\n    birthday date,\n    datetime_created timestamp(3),\n    datetime_updated timestamp(3),\n    height           numeric(11, 2)\n);\n\ninsert into bank.user values (1001, 1, 'lilei1', 10, now(), now(), now(), 1.72);\nupdate bank.user set user_id = 1001 where id = 1001;\n```\n\n----------------------------------------\n\nTITLE: Displaying Topic-Related Parameters in Markdown\nDESCRIPTION: This markdown snippet creates a collapsible section containing a table that describes various topic-related commands and their parameters in RocketMQ. It includes details for updateTopic, deleteTopic, topicList, topicRoute, and topicStatus commands.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/04-deployment/02admintool.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Topic 相关\n<details><summary>Topic 相关参数</summary>\n\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\n  <colgroup>\n    <col width={177} />\n    <col width={175} />\n    <col width={177} />\n    <col width={185} />\n  </colgroup>\n  <tbody>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl63\"\n        width={177}\n        style={{ height: \"17.0pt\", width: \"133pt\" }}\n      >\n        名称\n      </td>\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>\n        含义\n      </td>\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>\n        命令选项\n      </td>\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>\n        说明\n      </td>\n    </tr>\n    <!-- Additional table rows omitted for brevity -->\n  </tbody>\n</table>\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Listing RocketMQ EventBridge Directory Structure\nDESCRIPTION: Shows the directory structure of the RocketMQ EventBridge binary package after extraction.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/rocketmq-eventbridge-xxx-bin-release/\n|——bin\n|   |——runserver.sh\n|   |——eventbridge.sh\n|——config\n|   |——application.properties\n|——jar\n|   |——rocketmq-eventbridge.jar\n```\n\n----------------------------------------\n\nTITLE: Checking Helm Version in Kubernetes\nDESCRIPTION: Command to verify if Helm is installed and check its version.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm version\n```\n\n----------------------------------------\n\nTITLE: Merging Committer's Own PR in Shell\nDESCRIPTION: Commands for a committer to merge their own pull request. This involves switching to the develop branch, updating it, and merging the changes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout develop      # switch to local develop branch\n$ git pull apache develop   # fast-forward to current remote HEAD\n$ git merge --squash RocketMQ-Vxx.0\t# merge to branch\n```\n\n----------------------------------------\n\nTITLE: Merging Contributor PR as Committer in Shell\nDESCRIPTION: Commands for a committer to merge a contributor's pull request. It involves switching to the develop branch, updating it, and then merging the contributor's changes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout develop\t# switch to local develop branch\n$ git pull apache develop\t# fast-forward to current remote HEAD\n$ git pull --squash https://github.com/cuser/rocketmq.git RocketMQ-Vxx.0  # merge to branch\n```\n\n----------------------------------------\n\nTITLE: Pushing Merged Changes to Apache Remote Repository in Shell\nDESCRIPTION: Command to push the merged changes to the Apache RocketMQ remote repository on GitHub.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ git push apache develop\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Command to build the RocketMQ Connect runtime from source using Maven.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd  rocketmq-connect\n\nmvn -Prelease-connect -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Pushing Merged Branch to Apache Repository\nDESCRIPTION: Command to push the merged changes to the official Apache RocketMQ repository, making the changes available to all users.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit push apache develop\n```\n\n----------------------------------------\n\nTITLE: Setting Up Debezium PostgreSQL Connector Directory\nDESCRIPTION: Commands to create a connector plugins directory and copy the compiled Debezium PostgreSQL connector JAR file to make it available for RocketMQ Connect.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /usr/local/connector-plugins\ncp rocketmq-connect-debezium-postgresql/target/rocketmq-connect-debezium-postgresql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Structuring RocketMQ Command Line Options Table in HTML\nDESCRIPTION: This HTML snippet defines a table structure for displaying RocketMQ command line tool options. It includes sections for different tools like printMsg, printMsgByQueue, and resetOffsetByTime, along with their respective command line arguments and descriptions.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tbody>\n    <tr height={39} style={{ height: \"29.0pt\" }}>\n      <td\n        height={39}\n        className=\"xl67\"\n        width={87}\n        style={{ height: \"29.0pt\", width: \"65pt\" }}\n      >\n        -s\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n        subExpress，filter expression\n      </td>\n    </tr>\n    <!-- ... more table rows ... -->\n    <tr height={39} style={{ height: \"29.0pt\" }}>\n      <td\n        height={39}\n        className=\"xl67\"\n        width={87}\n        style={{ height: \"29.0pt\", width: \"65pt\" }}\n      >\n        -c\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n        Whether to reset the offset for the C++ client.\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Rejecting a PR in Git\nDESCRIPTION: Commands to reject a pull request without merging it. This creates an empty commit that closes the PR with a message indicating it won't be fixed.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --allow-empty -m \"RocketMQ-Vxx.0 closes apache/rocketmq#ZZ *Won't fix*\"\ngit push apache develop\n```\n\n----------------------------------------\n\nTITLE: Implementing RocketMQ Transaction Message Producer in Java\nDESCRIPTION: This code demonstrates how to create a TransactionMQProducer, set up a TransactionListener, and send transaction messages. It includes handling of local transaction execution and transaction status checking.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/02-producer/06message5.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TransactionProducer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        TransactionListener transactionListener = new TransactionListenerImpl();\n        TransactionMQProducer producer = new TransactionMQProducer(\"please_rename_unique_group_name\");\n        ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {\n            @Override\n            public Thread newThread(Runnable r) {\n                Thread thread = new Thread(r);\n                thread.setName(\"client-transaction-msg-check-thread\");\n                return thread;\n            }\n        });\n\n        producer.setExecutorService(executorService);\n        producer.setTransactionListener(transactionListener);\n        producer.start();\n\n        String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n        for (int i = 0; i < 10; i++) {\n            try {\n                Message msg =\n                    new Message(\"TopicTest\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.sendMessageInTransaction(msg, null);\n                System.out.printf(\"%s%n\", sendResult);\n\n                Thread.sleep(10);\n            } catch (MQClientException | UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n\n        for (int i = 0; i < 100000; i++) {\n            Thread.sleep(1000);\n        }\n        producer.shutdown();\n    }\n\n    static class TransactionListenerImpl implements TransactionListener {\n        private AtomicInteger transactionIndex = new AtomicInteger(0);\n\n        private ConcurrentHashMap<String, Integer> localTrans = new ConcurrentHashMap<>();\n\n        @Override\n        public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n            int value = transactionIndex.getAndIncrement();\n            int status = value % 3;\n            localTrans.put(msg.getTransactionId(), status);\n            return LocalTransactionState.UNKNOW;\n        }\n\n        @Override\n        public LocalTransactionState checkLocalTransaction(MessageExt msg) {\n            Integer status = localTrans.get(msg.getTransactionId());\n            if (null != status) {\n                switch (status) {\n                    case 0:\n                        return LocalTransactionState.UNKNOW;\n                    case 1:\n                        return LocalTransactionState.COMMIT_MESSAGE;\n                    case 2:\n                        return LocalTransactionState.ROLLBACK_MESSAGE;\n                    default:\n                        return LocalTransactionState.COMMIT_MESSAGE;\n                }\n            }\n            return LocalTransactionState.COMMIT_MESSAGE;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Topic Management HTML Table Structure\nDESCRIPTION: HTML table structure defining topic-related command parameters, their definitions, options, and explanations for RocketMQ administration. Includes commands for creating, updating, deleting, and querying topics.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\n  <colgroup>\n    <col width={177} />\n    <col width={175} />\n    <col width={177} />\n    <col width={185} />\n  </colgroup>\n  <tbody>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td height={23} className=\"xl63\" width={177} style={{ height: \"17.0pt\", width: \"133pt\" }}>\n        Name\n      </td>\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>\n        Definition\n      </td>\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>\n        Command options \n      </td>\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>\n        Explain\n      </td>\n    </tr>\n    <!-- Additional rows omitted for brevity -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Message Queue Table Structure in JSX/HTML\nDESCRIPTION: Responsive table structure displaying RocketMQ command line options and their descriptions. Includes styling for cell dimensions and borders with row/column spans for command grouping.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<tr height={39} style={{ height: \"29.0pt\" }}>\n  <td\n    height={39}\n    className=\"xl67\"\n    width={87}\n    style={{ height: \"29.0pt\", width: \"65pt\" }}\n  >\n    -b\n  </td>\n  <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n    Start timestamp, see -h for format.\n  </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Structured JSX/HTML Table for RocketMQ CLI Commands\nDESCRIPTION: A structured table in JSX/HTML format displaying RocketMQ command line interface options with command names, descriptions, and parameters. The table covers commands like sendMessage, consumeMessage, and printMsg with their respective flags and explanations in Chinese.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nwidth={87}\nstyle={{ height: \"17.0pt\", width: \"65pt\" }}\n>\n-a\n</td>\n<td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n探测次数\n</td>\n```\n\n----------------------------------------\n\nTITLE: Checking Sink Connector Output File\nDESCRIPTION: Command to verify that the sink connector has successfully written data to the destination file by viewing its contents.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncat /Users/YourUsername/rocketmqconnect/test-sink-file.txt\n```\n\n----------------------------------------\n\nTITLE: Merging Contributor PR - Shell\nDESCRIPTION: Commands for merging a contributor's PR into the development branch.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/11-contributionGuide/03pull-request.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout develop\t# switch to local develop branch\ngit pull apache develop\t# fast-forward to current remote HEAD\ngit pull --squash https://github.com/cuser/rocketmq.git RocketMQ-Vxx.0  # merge to branch\n```\n\n----------------------------------------\n\nTITLE: Configuring Debezium Source Connector\nDESCRIPTION: REST API call to configure and start the Debezium source connector for MySQL CDC.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/MySQLCDCSource -d '{\n\"connector.class\": \"org.apache.rocketmq.connect.debezium.mysql.DebeziumMysqlConnector\",\n\"max.task\": \"1\",\n\"connect.topicname\": \"debezium-mysql-source-topic\",\n\"kafka.transforms\": \"Unwrap\",\n\"kafka.transforms.Unwrap.delete.handling.mode\": \"none\",\n\"kafka.transforms.Unwrap.type\": \"io.debezium.transforms.ExtractNewRecordState\",\n\"kafka.transforms.Unwrap.add.headers\": \"op,source.db,source.table\",\n\"database.history.skip.unparseable.ddl\": true,\n\"database.history.name.srv.addr\": \"localhost:9876\",\n\"database.history.rocketmq.topic\": \"db-history-debezium-topic\",\n\"database.history.store.only.monitored.tables.ddl\": true,\n\"include.schema.changes\": false,\n\"database.server.name\": \"dbserver1\",\n\"database.port\": 3306,\n\"database.hostname\": \"database ip\",\n\"database.connectionTimeZone\": \"UTC\",\n\"database.user\": \"debezium\",\n\"database.password\": \"dbz\",\n\"table.include.list\": \"inventory.employee\",\n\"max.batch.size\": 50,\n\"database.include.list\": \"inventory\",\n\"snapshot.mode\": \"when_needed\",\n\"database.server.id\": \"184054\",\n\"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n\"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"}'\n```\n\n----------------------------------------\n\nTITLE: Explaining Event Ordering and Uniqueness in RocketMQ EventBridge\nDESCRIPTION: This snippet describes the natural ordering and uniqueness of events in RocketMQ EventBridge, emphasizing that events for the same entity must have a temporal relationship.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nThe same entity cannot have both A and B occur at the same time, there must be a temporal relationship; if so, these two events must belong to different event types.\n```\n\n----------------------------------------\n\nTITLE: Checking RocketMQ Cluster Status\nDESCRIPTION: Command to check the status of the RocketMQ cluster using the mqadmin tool.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/mqadmin clusterList -n 127.0.0.1:9876\n```\n\n----------------------------------------\n\nTITLE: Release Verification Commands\nDESCRIPTION: Shell commands for verifying GPG signatures and SHA512 checksums of release artifacts\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/04release-manual.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nfor file in `find . -type f -iname '*.asc'`\ndo\n    gpg --verify ${file} \ndone\n```\n\nLANGUAGE: shell\nCODE:\n```\ngpg --verify rocketmq-all-%version-number%-source-release.zip.asc rocketmq-all-%version-number%-bin-release.zip\n```\n\nLANGUAGE: shell\nCODE:\n```\ngpg --print-md SHA512 rocketmq-all-%version-number%-source-release.zip \ngpg --print-md SHA512 rocketmq-all-%version-number%-bin-release.zip\n```\n\n----------------------------------------\n\nTITLE: Git Commit Management Commands\nDESCRIPTION: Commands for viewing and resetting git commits during rollback\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/04release-manual.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit log\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit reset --hard commit-id\ngit push origin HEAD --force\n```\n\n----------------------------------------\n\nTITLE: Uninstalling RocketMQ from Kubernetes with Helm in Bash\nDESCRIPTION: Command to remove all RocketMQ resources that were deployed with Helm from the Kubernetes cluster.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#Release all RocketMQ resources\n$ helm uninstall rocketmq-demo\n```\n\n----------------------------------------\n\nTITLE: Creating Target Schema and Table in MySQL\nDESCRIPTION: SQL commands to create the destination database and table in MySQL where the data will be synced. Note the datetime fields are BigInt since the CDC process converts timestamps to epoch.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate database bank1;\nCREATE TABLE holding (\n                          holding_id int,\n                          user_id int,\n                          holding_stock varchar(8),\n                          holding_quantity int,\n                          datetime_created bigint,\n                          datetime_updated bigint,\n                          primary key(holding_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Merging Committer PR\nDESCRIPTION: Commands for committers to merge their own pull requests.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout develop      # switch to local develop branch\ngit pull apache develop   # fast-forward to current remote HEAD\ngit merge --squash RocketMQ-Vxx.0\t# merge to branch\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Connect Configuration\nDESCRIPTION: Sample configuration for RocketMQ Connect standalone mode including worker settings and plugin paths.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nworkerId=standalone-worker\nstorePathRootDir=/tmp/storeRoot\nhttpPort=8082\nnamesrvAddr=localhost:9876\naclEnable=false\naccessKey=rocketmq\nsecretKey=12345678\nautoCreateGroupEnable=false\nclusterName=\"DefaultCluster\"\npluginPaths=/usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Describing Event Characteristics in RocketMQ EventBridge\nDESCRIPTION: This snippet explains a key characteristic of events in RocketMQ EventBridge: they are objective descriptions of changes without inherent expectations for handling.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nAn event is an objective description of a change in the state or attribute value of a thing, but it does not make any expectations about how to handle the event itself. In contrast, both Command and Query have expectations, they hope the system will make changes or return results, but the Event is just an objective description of a change in the system.\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for RocketMQ Documentation in Bash\nDESCRIPTION: This command starts a local Docusaurus development server and opens a browser window to preview documentation changes. The server supports live reloading, so most changes are reflected instantly without requiring a server restart.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Stopping RocketMQ Services\nDESCRIPTION: Command to stop and remove all Docker Compose services for RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Importing RocketMQ Code Style XML in IntelliJ IDEA\nDESCRIPTION: This snippet shows the file path and steps to import the RocketMQ code style XML file in IntelliJ IDEA. It specifies indentation format, naming conventions, and standard Java conventions.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/02code-guidelines.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nrocketmq/style/rmq_codestyle.xml\n```\n\n----------------------------------------\n\nTITLE: IDEA Code Style XML Path Reference\nDESCRIPTION: The file path reference to the RocketMQ code style XML configuration file used for maintaining consistent code formatting.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/02code-guidelines.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```rmq_codeStyle.xml```\n```\n\n----------------------------------------\n\nTITLE: Configuring Debezium PostgreSQL Source Connector\nDESCRIPTION: REST API call to create and configure the Debezium PostgreSQL source connector which reads changes from PostgreSQL's transaction log and publishes them to a RocketMQ topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/postgres-connector -d  '{\n  \"connector.class\": \"org.apache.rocketmq.connect.debezium.postgres.DebeziumPostgresConnector\",\n  \"max.task\": \"1\",\n  \"connect.topicname\": \"debezium-postgres-source-01\",\n  \"kafka.transforms\": \"Unwrap\",\n  \"kafka.transforms.Unwrap.delete.handling.mode\": \"none\",\n  \"kafka.transforms.Unwrap.type\": \"io.debezium.transforms.ExtractNewRecordState\",\n  \"kafka.transforms.Unwrap.add.headers\": \"op,source.db,source.table\",\n  \"database.history.skip.unparseable.ddl\": true,\n  \"database.server.name\": \"bankserver1\",\n  \"database.port\": 5432,\n  \"database.hostname\": \"数据库ip\",\n  \"database.connectionTimeZone\": \"UTC\",\n  \"database.user\": \"start_data_engineer\",\n  \"database.dbname\": \"start_data_engineer\",\n  \"database.password\": \"password\",\n  \"table.whitelist\": \"bank.holding\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML List of RocketMQ GitHub Issues\nDESCRIPTION: This HTML snippet renders an unordered list of RocketMQ GitHub issues. Each list item contains a link to the specific issue on GitHub along with a brief description of the issue or improvement.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/release-notes/2022-03-04-4.9.4.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<li>[<a href='https://github.com/apache/rocketmq/issues/3882'>ISSUE-3882</a>]  - Nameserver change modify topicQueueTable in RouteInfoManager</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3877'>ISSUE-3877</a>]  - Remove unnecessary Exception thrown by MQClientAPIImpl#createSubscriptionGroup</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3875'>ISSUE-3875</a>]  - fix unable to delete last acl account.</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/23'>ISSUE-23</a> - solve error Algorithm HmacSHA1 not available when your java_home is not found</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/2993'>ISSUE-2993</a>]  - fix testTruncateCQ on Windows by releasing mapped files.</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3859'>ISSUE-3859</a>]  - enhance the cal of latency for putting message</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3804'>ISSUE-3804</a>]  - Commit consumption offset with specific MessageQueue.</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3699'>ISSUE-3699</a>]  - fix unit test</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3966'>ISSUE-3966</a>]  - Fix using wrong offset when deliver in ScheduleService</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3942'>ISSUE-3942</a>]  - If both acl and message trace are enabled and the default topic RMQ_SYS_TRACE_TOPIC is used for message trace, you don't need to add the PUB permission of RMQ_SYS_TRACE_TOPIC topic to the acl config</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3894'>ISSUE-3894</a>]  - Refactor RouteInfoManager unit test</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3585'>ISSUE-3585</a>]  - [Part B] Improve encode/decode performance</li>\n```\n\n----------------------------------------\n\nTITLE: SFTP Sink Connector Configuration\nDESCRIPTION: REST API call to configure and start the SFTP sink connector for writing file data.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST --location \"http://localhost:8082/connectors/SftpSinkConnector\" --http1.1 \\\n    -H \"Host: localhost:8082\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"connector.class\": \"org.apache.rocketmq.connect.http.sink.SftpSinkConnector\",\n          \"host\": \"127.0.0.1\",\n          \"port\": 22,\n          \"username\": \"YourUsername\",\n          \"password\": \"yourPassword\",\n          \"filePath\": \"/Users/YourUsername/rocketmqconnect/sftp-test/sink.txt\",\n          \"connect.topicnames\": \"sftpTopic\",\n          \"fieldSeparator\": \"|\",\n          \"fieldSchema\": \"username|idCardNo|orderNo|orderAmount|trxDate|trxTime|profit\"\n        }'\n```\n\n----------------------------------------\n\nTITLE: Describing Event Materialization in RocketMQ EventBridge\nDESCRIPTION: This snippet explains how events in RocketMQ EventBridge are materialized, capturing detailed information about the occurrence to provide a complete picture for potential consumers.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWhen did the event occur?\nWho generated it?\nWhat type of event is it?\nWhat is the content of the event? What is the structure of the content?\n... ...\n```\n\n----------------------------------------\n\nTITLE: Setting Message Keys in RocketMQ Java Producer\nDESCRIPTION: Sets a unique business identifier (order ID) as the message key to facilitate message tracking and troubleshooting when messages are lost. This is important to ensure messages can be uniquely identified in the system.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/01bestpractice.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n   // 订单Id   \n   String orderId = \"20034568923546\";   \n   message.setKeys(orderId);   \n```\n\n----------------------------------------\n\nTITLE: Verifying SFTP Access to Test Directory\nDESCRIPTION: SFTP commands to navigate to the test directory, list files, and exit the SFTP connection, confirming that the SFTP server is properly accessible.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsftp> cd /Users/YourUsername/rocketmqconnect/sftp-test/\nsftp> ls source.txt\nsftp> bye\n```\n\n----------------------------------------\n\nTITLE: Accessing RocketMQ Connect Standalone Configuration\nDESCRIPTION: Commands to navigate to the RocketMQ Connect distribution directory and edit the standalone configuration file for customization.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nvim conf/connect-standalone.conf\n```\n\n----------------------------------------\n\nTITLE: Starting Debezium PostgreSQL Source Connector via REST API\nDESCRIPTION: curl command to create a Debezium PostgreSQL source connector via the RocketMQ Connect REST API. This connector captures changes from the PostgreSQL bank.holding table and streams them to a RocketMQ topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/postgres-connector -d  '{\n  \"connector.class\": \"org.apache.rocketmq.connect.debezium.postgres.DebeziumPostgresConnector\",\n  \"max.task\": \"1\",\n  \"connect.topicname\": \"debezium-postgres-source-01\",\n  \"kafka.transforms\": \"Unwrap\",\n  \"kafka.transforms.Unwrap.delete.handling.mode\": \"none\",\n  \"kafka.transforms.Unwrap.type\": \"io.debezium.transforms.ExtractNewRecordState\",\n  \"kafka.transforms.Unwrap.add.headers\": \"op,source.db,source.table\",\n  \"database.history.skip.unparseable.ddl\": true,\n  \"database.server.name\": \"bankserver1\",\n  \"database.port\": 5432,\n  \"database.hostname\": \"database ip\",\n  \"database.connectionTimeZone\": \"UTC\",\n  \"database.user\": \"start_data_engineer\",\n  \"database.dbname\": \"start_data_engineer\",\n  \"database.password\": \"password\",\n  \"table.whitelist\": \"bank.holding\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Commands to clone and build the RocketMQ Connect runtime environment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-connect.git\n\ncd  rocketmq-connect\n\nexport RMQ_CONNECT_HOME=`pwd`\n\nmvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ NameServer\nDESCRIPTION: Commands to start the RocketMQ NameServer in the background and verify its successful startup by checking the log file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/01quickstart.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n### start namesrv\n$ nohup sh bin/mqnamesrv &\n \n### verify namesrv \n$ tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n----------------------------------------\n\nTITLE: Starting Debezium PostgreSQL Source Connector via REST API\nDESCRIPTION: curl command to create a Debezium PostgreSQL source connector via the RocketMQ Connect REST API. This connector captures changes from the PostgreSQL bank.holding table and streams them to a RocketMQ topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/postgres-connector -d  '{\n  \"connector.class\": \"org.apache.rocketmq.connect.debezium.postgres.DebeziumPostgresConnector\",\n  \"max.task\": \"1\",\n  \"connect.topicname\": \"debezium-postgres-source-01\",\n  \"kafka.transforms\": \"Unwrap\",\n  \"kafka.transforms.Unwrap.delete.handling.mode\": \"none\",\n  \"kafka.transforms.Unwrap.type\": \"io.debezium.transforms.ExtractNewRecordState\",\n  \"kafka.transforms.Unwrap.add.headers\": \"op,source.db,source.table\",\n  \"database.history.skip.unparseable.ddl\": true,\n  \"database.server.name\": \"bankserver1\",\n  \"database.port\": 5432,\n  \"database.hostname\": \"database ip\",\n  \"database.connectionTimeZone\": \"UTC\",\n  \"database.user\": \"start_data_engineer\",\n  \"database.dbname\": \"start_data_engineer\",\n  \"database.password\": \"password\",\n  \"table.whitelist\": \"bank.holding\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Merging Committer's Own PR\nDESCRIPTION: Commands for a committer to merge their own pull request. This is similar to merging a contributor's PR but uses git merge instead of git pull.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout develop      # switch to local develop branch\ngit pull apache develop   # fast-forward to current remote HEAD\ngit merge --squash RocketMQ-Vxx.0\t# merge to branch\n```\n\n----------------------------------------\n\nTITLE: Merging Committer's Own PR\nDESCRIPTION: Commands for a committer to merge their own pull request. This is similar to merging a contributor's PR but uses git merge instead of git pull.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout develop      # switch to local develop branch\ngit pull apache develop   # fast-forward to current remote HEAD\ngit merge --squash RocketMQ-Vxx.0\t# merge to branch\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Git Tag in Shell\nDESCRIPTION: Removes a specific Git tag from the remote GitHub repository. Completes the tag deletion process during rollback.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin :refs/tags/rocketmq-all-x1.x2.x3\n```\n\n----------------------------------------\n\nTITLE: Examples of Command Requests vs Events\nDESCRIPTION: This snippet illustrates the difference between command requests and events using real-world examples. It shows how commands represent operation requests, while events are clear occurrences that have already happened.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* Turning on the kitchen lights\n* Someone pressed the doorbell\n* Account A received 100,000.\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Paths for RocketMQ Connect\nDESCRIPTION: This YAML snippet shows the configuration for plugin paths in RocketMQ Connect. It notes that the rocketmq-connect-sample module is included by default, so no additional configuration is needed.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# The rocketmq-connect project already includes the rocketmq-connect-sample module by default, so no configuration is needed here.\npluginPaths=\n```\n\n----------------------------------------\n\nTITLE: CLIENT_PARAMETER_CHECK_URL错误消息\nDESCRIPTION: 客户端参数验证失败时出现的错误消息，有多种形式，反映了Consumer配置中的不同问题。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nconsumerGroup can not equal ...\n```\n\nLANGUAGE: java\nCODE:\n```\nallocateMessageQueueStrategy is null ...\n```\n\nLANGUAGE: java\nCODE:\n```\nLong polling mode, the consumer consumerTimeoutMillisWhenSuspend must greater than brokerSuspendMaxTimeMillis ...\n```\n\n----------------------------------------\n\nTITLE: Error: Topic Does Not Exist Exception in RocketMQ\nDESCRIPTION: This error message appears when a Producer fails to obtain routing information for a topic when attempting to send or consume messages. It indicates the topic may not exist or is not properly configured.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ntopic[xxx] not exist, apply first please!\n```\n\n----------------------------------------\n\nTITLE: Defining Events in RocketMQ EventBridge\nDESCRIPTION: This snippet provides the definition of events used in RocketMQ EventBridge. It emphasizes that events refer to important things that have already occurred.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nEvents refer to things that have already happened, especially important things.\n```\n\n----------------------------------------\n\nTITLE: Stopping RocketMQ Connect Worker Process\nDESCRIPTION: Commands to navigate to the RocketMQ Connect installation directory and shut down the worker process.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\nsh bin/connectshutdown.sh\n```\n\n----------------------------------------\n\nTITLE: Handling GROUP_NAME_DUPLICATE_URL Exception in Java\nDESCRIPTION: This snippet shows the exception message when a Consumer Group with the same name has already been started and registration fails in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nThe producer group[xxx] has been created before, specify another name please.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation: Consumer 3 Subscribing to TopicC (Java)\nDESCRIPTION: This is part of an error example showing inconsistent subscription relationships. This consumer instance subscribes to 'TopicC' while other instances in the same group subscribe to different topics, violating subscription consistency.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/07subscribe.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    Properties properties = new Properties();\n    properties.put(PropertyKeyConst.GROUP_ID, \"GID_test_1\");\n    Consumer consumer = ONSFactory.createConsumer(properties);\n    consumer.subscribe(\"TopicC\", \"*\", new MessageListener() {\n        public Action consume(Message message, ConsumeContext context) {\n            System.out.println(message.getMsgID());\n            return Action.CommitMessage;\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: StreamBuilder API Methods\nDESCRIPTION: Core methods for initializing and configuring a StreamBuilder instance. Includes constructor and source definition methods.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/09-streams/02RocketMQ Streams Concept.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nStreamBuilder(jobId)\n<OUT> RStream<OUT> source(topicName, deserializer)\n```\n\n----------------------------------------\n\nTITLE: Adding More Test Data to Source File\nDESCRIPTION: Commands to append additional test data to the source file and verify that it's properly replicated to the sink file after a brief waiting period.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncd /Users/YourUsername/rocketmqconnect/\n\necho \"Say Hi to\\r\\nRMQ Connector\\r\\nAgain\" >> test-source-file.txt\n\n# Wait a few seconds, check if rocketmq-connect replicate data to sink file succeed \nsleep 10\ncat /Users/YourUsername/rocketmqconnect/test-sink-file.txt\n```\n\n----------------------------------------\n\nTITLE: Handling CLIENT_PARAMETER_CHECK_URL Exceptions in Java\nDESCRIPTION: These snippets show various exception messages that can occur when Consumer parameter verification fails in RocketMQ. They include issues with consumerGroup naming, allocation strategy, and timeout configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nconsumerGroup can not equal ...\n```\n\nLANGUAGE: java\nCODE:\n```\nallocateMessageQueueStrategy is null ...\n```\n\nLANGUAGE: java\nCODE:\n```\nLong polling mode, the consumer consumerTimeoutMillisWhenSuspend must greater than brokerSuspendMaxTimeMillis ...\n```\n\n----------------------------------------\n\nTITLE: Compiling Debezium RocketMQ Connector\nDESCRIPTION: Commands to compile the Debezium RocketMQ Connector plugin from source and move the compiled package to the connector plugins directory.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/\n$ mvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Connect Persistence Files Table in Markdown\nDESCRIPTION: This markdown table lists the key files used by RocketMQ Connect for persisting various types of information in standalone mode. It includes file names and their descriptions, covering connector and task configurations, processing progress, and status information.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| key                  | description                                               |\n| -------------------- | --------------------------------------------------------- |\n| connectorConfig.json | Connector configuration persistence files                 |\n| position.json        | Source connect data processing progress persistence files |\n| taskConfig.json      | Task configuration persistence files                      |\n| offset.json          | Sink connect data consumption progress persistence files  |\n| connectorStatus.json | Connector status persistence files                        |\n| taskStatus.json      | Task status persistence files                             |\n```\n\n----------------------------------------\n\nTITLE: Testing RocketMQ Message Sending and Receiving\nDESCRIPTION: Commands to test RocketMQ's message sending and receiving functionality using the built-in tools, with NAMESRV_ADDR environment variable set to the local NameServer address.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7\n$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4\n\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Handling NO_TOPIC_ROUTE_INFO Exception in Java\nDESCRIPTION: This snippet shows the exception message when a message is sent to a topic that is not available to the producer in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nNo route info of this topic:\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Issue List Markup\nDESCRIPTION: HTML unordered list containing links to RocketMQ GitHub issues and pull requests with descriptions of improvements and changes\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/release-notes/2022-03-04-4.9.3.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ul>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3585'>ISSUE-3585</a>] - [ISSUE-3585] - [Part F] eliminate regex match in topic/group name check</li>\n<li>[<a href='https://github.com/apache/rocketmq/issues/3585'>ISSUE-3585</a>] - [ISSUE-3585] - [Part H] Avoid unnecessary StringBuilder resizing on critical path</li>\n<!-- Additional list items omitted for brevity -->\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Group or Subscription Information in RocketMQ\nDESCRIPTION: This error indicates that a Consumer's subscription Topic information does not exist. It can occur when either the Consumer Group or the subscription Topic are missing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nthe consumer's group info/subscription not exist\n```\n\n----------------------------------------\n\nTITLE: Starting Elasticsearch Source Connector\nDESCRIPTION: cURL command to start the Elasticsearch source connector, which reads data from the source Elasticsearch and sends it to RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/elasticsearchSourceConnector -d  '{\n  \"connector.class\":\"org.apache.rocketmq.connect.elasticsearch.connector.ElasticsearchSourceConnector\",\n    \"elasticsearchHost\":\"localhost\",\n    \"elasticsearchPort\":9200,\n    \"index\":{\n        \"connect_es\": {\n            \"primaryShards\":1,\n            \"id\":1\n        }\n    },\n    \"max.tasks\":2,\n    \"connect.topicname\":\"ConnectEsTopic\",\n    \"value.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n    \"key.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Error: Message Send Failure in RocketMQ\nDESCRIPTION: This error occurs when the Producer fails to send a message after multiple attempts. In SYNC mode, three attempts are made, while in ASYNC and ONEWAY modes, only one attempt is made.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nSend [xxx] times, still failed, cost [xxx]ms, Topic: xxx, BrokersSent ...\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Commands to clone and build the RocketMQ Connect project from source\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-connect.git\n\ncd  rocketmq-connect\n\nexport RMQ_CONNECT_HOME=`pwd`\n\nmvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n```\n\n----------------------------------------\n\nTITLE: Error: Subscription Group Not Found in RocketMQ\nDESCRIPTION: This error occurs when a Consumer Group or DelayQueue can't obtain subscription information. It indicates a mismatch between Consumer subscription information and Topic information in NameServer.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nsubscription group not exist\n```\n\n----------------------------------------\n\nTITLE: NO_TOPIC_ROUTE_INFO错误消息\nDESCRIPTION: 当尝试向路由信息对生产者不可用的Topic发送消息时出现的错误信息。表示生产者无法获取Topic的路由元信息。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nNo route info of this topic:\n```\n\n----------------------------------------\n\nTITLE: Formatting Metrics in JavaScript\nDESCRIPTION: This snippet demonstrates the format of metrics data returned by the exporter. It shows an example metric with labels and its value.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<metric name>{<label name>=<label value>, ...} <metric value>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrocketmq_group_diff{group=\"rmq_group_test_20220114\",topic=\"fusion_console_tst\",countOfOnlineConsumers=\"0\",msgModel=\"1\",} 23.0\n```\n\n----------------------------------------\n\nTITLE: Error: Service State Validation Failure in RocketMQ\nDESCRIPTION: This error indicates a problem with starting multiple Producer/Consumer instances in the same JVM using the same Producer/Consumer Group. RocketMQ enforces single instance per group in a JVM.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nThe xxx service state not OK, maybe started once\n```\n\n----------------------------------------\n\nTITLE: Grouped Stream Operations in RocketMQ Streams\nDESCRIPTION: Defines operations on grouped data streams, including counting, aggregation, windowing, and custom operators.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/09-streams/02RocketMQ Streams Concept.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n<OUT> GroupedStream<K, Integer> count(selectAction)\nGroupedStream<K, V> min(selectAction)\nGroupedStream<K, V> max(selectAction)\nGroupedStream<K, ? extends Number> sum(selectAction)\nGroupedStream<K, V> filter(predictor)\n<OUT> GroupedStream<K, OUT> map(valueMapperAction)\n<OUT> GroupedStream<K, OUT> aggregate(accumulator)\nWindowStream<K, V> window(windowInfo)\nGroupedStream<K, V> addGraphNode(name, supplier)\nRStream<V> toRStream()\nsink(topicName, serializer)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for RocketMQ Cluster\nDESCRIPTION: Docker Compose template for setting up a RocketMQ cluster with name server and broker services. It defines container names, port mappings, network configuration, and mounts the broker.conf file into the broker container.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nversion: '3.8'\n\nservices:\n  namesrv:\n    image: apache/rocketmq:4.9.6\n    container_name: rmqnamesrv\n    ports:\n      - 9876:9876\n    networks:\n      - rocketmq\n    command: sh mqnamesrv\n\n  broker:\n    image: apache/rocketmq:4.9.6\n    container_name: rmqbroker\n    ports:\n      - 10909:10909\n      - 10911:10911\n      - 10912:10912\n    environment:\n      - NAMESRV_ADDR=rmqnamesrv:9876\n    volumes:\n      - ./broker.conf:/home/rocketmq/rocketmq-4.9.6/conf/broker.conf\n    depends_on:\n      - namesrv\n    networks:\n      - rocketmq\n    command: sh mqbroker -c /home/rocketmq/rocketmq-4.9.6/conf/broker.conf\n\nnetworks:\n  rocketmq:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for RocketMQ Cluster\nDESCRIPTION: Docker Compose template for setting up a RocketMQ cluster with name server and broker services. It defines container names, port mappings, network configuration, and mounts the broker.conf file into the broker container.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nversion: '3.8'\n\nservices:\n  namesrv:\n    image: apache/rocketmq:4.9.6\n    container_name: rmqnamesrv\n    ports:\n      - 9876:9876\n    networks:\n      - rocketmq\n    command: sh mqnamesrv\n\n  broker:\n    image: apache/rocketmq:4.9.6\n    container_name: rmqbroker\n    ports:\n      - 10909:10909\n      - 10911:10911\n      - 10912:10912\n    environment:\n      - NAMESRV_ADDR=rmqnamesrv:9876\n    volumes:\n      - ./broker.conf:/home/rocketmq/rocketmq-4.9.6/conf/broker.conf\n    depends_on:\n      - namesrv\n    networks:\n      - rocketmq\n    command: sh mqbroker -c /home/rocketmq/rocketmq-4.9.6/conf/broker.conf\n\nnetworks:\n  rocketmq:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Error: JSON Loading Exception in RocketMQ\nDESCRIPTION: This error occurs when the consumer fails to load the local offset.json file in broadcast mode. It can be caused by corrupted fastjson files or version incompatibilities.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nreadLocalOffset Exception\n```\n\n----------------------------------------\n\nTITLE: Sample Output Data from RocketMQ Streams Word Count Example\nDESCRIPTION: This XML snippet shows the expected output from the RocketMQ Streams word count example. Each line represents a key-value pair, where the key is a word from the input text and the value is its frequency count. The output demonstrates the incremental nature of stream processing, updating counts as new words are processed.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/09-streams/03RocketMQ Streams Quick Start.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n(key=to, value=1)\n(key=be, value=1)\n(key=or, value=1)\n(key=not, value=1)\n(key=to, value=2)\n(key=be, value=2)\n(key=that, value=1)\n(key=is, value=1)\n(key=the, value=1)\n(key=whether, value=1)\n(key=tis, value=1)\n(key=nobler, value=1)\n(key=mind, value=1)\n(key=against, value=1)\n(key=troubles, value=1)\n(key=slings, value=1)\n(key=die, value=1)\n(key=natural, value=1)\n(key=flesh, value=1)\n(key=sea, value=1)\n(key=fortune, value=1)\n(key=shocks, value=1)\n(key=consummation, value=1)\n(key=to, value=3)\n(key=to, value=4)\n(key=to, value=5)\n(key=say, value=1)\n(key=end, value=1)\n(key=end, value=2)\n(key=to, value=6)\n(key=to, value=7)\n(key=to, value=8)\n(key=or, value=2)\n(key=them, value=1)\n(key=take, value=1)\n(key=arms, value=1)\n(key=of, value=1)\n(key=and, value=1)\n(key=of, value=2)\n(key=and, value=2)\n(key=by, value=1)\n(key=sleep, value=1)\n(key=and, value=3)\n(key=by, value=2)\n(key=sleep, value=2)\n(key=and, value=4)\n(key=that, value=2)\n(key=arrows, value=1)\n(key=heir, value=1)\n(key=question, value=1)\n(key=is, value=2)\n(key=the, value=2)\n(key=suffer, value=1)\n(key=a, value=1)\n(key=the, value=3)\n(key=no, value=1)\n(key=a, value=2)\n(key=opposing, value=1)\n(key=the, value=4)\n(key=the, value=5)\n(key=a, value=3)\n(key=in, value=1)\n(key=more, value=1)\n(key=heartache, value=1)\n(key=outrageous, value=1)\n(key=we, value=1)\n(key=thousand, value=1)\n(key=tis, value=2)\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data for RocketMQ Streams Word Count Example\nDESCRIPTION: This XML snippet contains sample input data for the RocketMQ Streams word count example. Each line represents a message that would be sent to the sourceTopic in RocketMQ. The data is a passage of text, likely from Shakespeare's Hamlet.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/09-streams/03RocketMQ Streams Quick Start.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"To be, or not to be,--that is the question:--\",\n\"Whether 'tis nobler in the mind to suffer\",\n\"The slings and arrows of outrageous fortune\",\n\"Or to take arms against a sea of troubles,\",\n\"And by opposing end them?--To die,--to sleep,--\",\n\"No more; and by a sleep to say we end\",\n\"The heartache, and the thousand natural shocks\",\n\"That flesh is heir to,--'tis a consummation\",\n```\n\n----------------------------------------\n\nTITLE: GROUP_NAME_DUPLICATE_URL错误消息\nDESCRIPTION: 当尝试创建一个已经存在的Producer Group时出现的错误信息。Producer Group名称必须是唯一的。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nThe producer group[xxx] has been created before, specify another name please.\n```\n\n----------------------------------------\n\nTITLE: Error: Unknown Host Exception in RocketMQ\nDESCRIPTION: This error occurs due to network interface issues where the system cannot determine the local host address. It's related to network configuration problems.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nInetAddress java.net.InetAddress.getLocalHost() throws UnknownHostException\n```\n\n----------------------------------------\n\nTITLE: RocketMQ MQTT Example Files Structure\nDESCRIPTION: List of example Java files demonstrating MQTT and RocketMQ client implementations for publishing and subscribing to messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nMqttConsumer.java  // MQTT client initiates subscription message\nMqttProducer.java   // MQTT client starts publishing messages\nRocketMQConsumer.java // RocketMQ client starts subscription message\nRocketMQProducer.java  // RocketMQ client starts publishing messages\n```\n\n----------------------------------------\n\nTITLE: Resetting RocketMQ Connect Synchronization Checkpoint\nDESCRIPTION: Command to remove persisted checkpoint files when needing to reset the synchronization checkpoint in standalone mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf /Users/YourUsername/rocketmqconnect/storeRoot/*\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RocketMQ\nDESCRIPTION: Command interface for consuming messages from RocketMQ topics with various filtering options including offset-based, timestamp-based and queue-specific consumption.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconsumeMessage options:\n-h Print help\n-n NameServer address,format ip:port\n-t topic name\n-b BrokerName\n-o Consume from specified offset\n-i queueId\n-g Consumer group\n-s Start timestamp\n-d End timestamp\n-c Consume specified number of messages\n```\n\n----------------------------------------\n\nTITLE: Handling SEND_MSG_FAILED Exception in Java\nDESCRIPTION: This snippet shows the exception message when the Producer message sending is abnormal in RocketMQ. It includes information about the number of attempts, time cost, and the topic involved.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nSend [xxx] times, still failed, cost [xxx]ms, Topic: xxx, BrokersSent ...\n```\n\n----------------------------------------\n\nTITLE: RocketMQ MQTT Core Configuration Parameters\nDESCRIPTION: Essential configuration parameters for RocketMQ MQTT including authentication credentials, namesrv access point, and retry topics.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nusername=xxx    // Authorization verification account configuration\nsecretKey=xxx    // Authorization verification account configuration\nNAMESRV_ADDR=xxx  //namesrv access point\neventNotifyRetryTopic=xx   //notify retry topic, created in advance\nclientRetryTopic=xx  //Client message retry topic, created in advance\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Consumer Group Table Structure in JSX\nDESCRIPTION: HTML table structure written in JSX/React that documents RocketMQ consumer group management commands and their parameters. Includes styling and layout specifications for documentation display.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<table>\n  <tbody>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl67\"\n        width={87}\n        style={{ height: \"17.0pt\", width: \"65pt\" }}\n      >\n        -q\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n         Number of retry queues.\n      </td>\n    </tr>\n    <!-- Additional table rows omitted for brevity -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Handling SUBSCRIPTION_GROUP_NOT_EXIST Exception in Java\nDESCRIPTION: This snippet shows the exception message when a Consumer Group or DelayQueue encounters an error while getting subscription information in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nsubscription group not exist\n```\n\n----------------------------------------\n\nTITLE: Available MQTT Example Code Files\nDESCRIPTION: List of example code files provided in the RocketMQ MQTT project that demonstrate the basic usage patterns. These examples show how to implement MQTT clients and RocketMQ clients for publishing and subscribing to messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nMqttConsumer.java  // MQTT客户端启动订阅消息\nMqttProducer.java   // MQTT客户端启动发布消息\nRocketMQConsumer.java //RocketMQ客户端启动订阅消息\nRocketMQProducer.java  // RocketMQ客户端启动发布消息\n```\n\n----------------------------------------\n\nTITLE: Compiling Debezium RocketMQ Connector in Java\nDESCRIPTION: Commands to compile the Debezium RocketMQ Connector plugin and move it to the connector plugins directory.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/\n$ mvn clean package -Dmaven.test.skip=true\n\nmkdir -p /usr/local/connector-plugins\ncp rocketmq-connect-debezium-mysql/target/rocketmq-connect-debezium-mysql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch Data in Kibana\nDESCRIPTION: This Elasticsearch query can be used in Kibana's Dev Tools to verify that data has been successfully written to the destination Elasticsearch index 'connect_es'. It retrieves up to 100 documents from the index.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nGET /connect_es/_search\n{\n  \"size\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: SEND_MSG_FAILED错误消息\nDESCRIPTION: 当Producer发送消息失败时出现的错误信息。同步方式尝试3次，异步和单向方式尝试1次后仍然失败会报此错误。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nSend [xxx] times, still failed, cost [xxx]ms, Topic: xxx, BrokersSent ...\n```\n\n----------------------------------------\n\nTITLE: Creating Event Rule in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create an event rule in RocketMQ EventBridge, specifying the event bus name, rule name, description, and filter pattern.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPOST /rule/createEventRule HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n  \"eventBusName\":\"demo-bus\",\n  \"eventRuleName\":\"demo-rule\",\n  \"description\":\"A demo rule.\",\n  \"filterPattern\":\"{}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Source MySQL Database and Table\nDESCRIPTION: SQL commands to create the source database and table for data synchronization testing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE database inventory;\n\nuse inventory;\nCREATE TABLE `employee` (\n`id` bigint NOT NULL AUTO_INCREMENT,\n`name` varchar(128) DEFAULT NULL,\n`howold` int DEFAULT NULL,\n`male` int DEFAULT NULL,\n`company` varchar(128) DEFAULT NULL,\n`money` double DEFAULT NULL,\n`begin_time` datetime DEFAULT NULL,\n`modify_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'modify time',\n`decimal_test` decimal(11,2) DEFAULT NULL COMMENT 'test decimal type',\nPRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Topic Route Information in RocketMQ\nDESCRIPTION: This error occurs when a message is sent to a topic whose routing information is not available to the producer. It indicates a configuration mismatch between Producer and NameServer.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/08FAQ.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nNo route info of this topic:\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Proxies\nDESCRIPTION: Commands to start multiple RocketMQ proxies across different machines, with optional custom configuration file support.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n### On machine A start the first Proxy, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqproxy -n 192.168.1.1:9876 &\n\n### On machine B start the second Proxy, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqproxy -n 192.168.1.1:9876 &\n\n### On machine C start the third Proxy, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqproxy -n 192.168.1.1:9876 &\n```\n\nLANGUAGE: shell\nCODE:\n```\n### custom config file\n$ nohup sh bin/mqproxy -n 192.168.1.1:9876 -pc /path/to/proxyConfig.json &\n```\n\n----------------------------------------\n\nTITLE: Creating Event Bus in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create an event bus in RocketMQ EventBridge, specifying the event bus name and description.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nPOST /bus/createEventBus HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n\"eventBusName\":\"demo-bus\",\n\"description\":\"a demo bus.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Debezium Connector\nDESCRIPTION: Commands to create plugin directory and install compiled Debezium connector.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /usr/local/connector-plugins\ncp rocketmq-connect-debezium-mysql/target/rocketmq-connect-debezium-mysql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Starting Independent Controller\nDESCRIPTION: Shell command to start the Controller as an independent component using a dedicated configuration file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/03autofailover.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nohup sh bin/mqcontroller -c controller.conf &\n```\n\n----------------------------------------\n\nTITLE: Custom Message Trace Topic Configuration in RocketMQ\nDESCRIPTION: Java code showing how to specify a custom topic for storing message trace data instead of using the default system topic. The third parameter in the constructor defines the custom trace topic name.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/03messagetra.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n##Topic_test11111 needs to be created by the user in advance to store message traces:\nDefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\",true,\"Topic_test11111\");\n......\n\nDefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"CID_JODIE_1\",true,\"Topic_test11111\");\n......\n```\n\n----------------------------------------\n\nTITLE: Creating Event Rules in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create event rules in RocketMQ EventBridge, specifying the event bus name, rule name, description, and filter pattern.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPOST /rule/createEventRule HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n  \"eventBusName\":\"demo-bus\",\n  \"eventRuleName\":\"demo-rule\",\n  \"description\":\"A demo rule.\",\n  \"filterPattern\":\"{}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Connect Standalone Configuration File\nDESCRIPTION: Command to navigate to the Connect runtime directory and edit the standalone configuration file. This is necessary for setting up the Connect worker.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n$ vim conf/connect-standalone.conf\n```\n\n----------------------------------------\n\nTITLE: Making Local Changes in Git Repository\nDESCRIPTION: Commands to create a new branch, add files, and commit changes to the local Git repository. These are the basic steps for making and recording changes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b RocketMQ-Vxx.0 # git checkout [-b] [new-branch]\ngit add /rocketmq/pom.xml # git add [dir/file]\ngit commit -a -m \"pom\"\t# git commit [-all] [-msg] [message]\n```\n\n----------------------------------------\n\nTITLE: Modifying /etc/hosts for Custom NameServer HTTP Server\nDESCRIPTION: Illustrates how to modify the /etc/hosts file to change the server accessed for NameServer address resolution. This allows for customization of the HTTP static server without changing the hardcoded URL in the client code.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/01bestpractice.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n10.232.22.67    jmenv.taobao.net   \n```\n\n----------------------------------------\n\nTITLE: Creating Event Bus in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create an event bus in RocketMQ EventBridge, specifying the event bus name and description.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nPOST /bus/createEventBus HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n\"eventBusName\":\"demo-bus\",\n\"description\":\"a demo bus.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Connect Standalone Mode\nDESCRIPTION: Configuration settings for RocketMQ Connect in standalone mode. Includes worker ID, storage path, HTTP port, RocketMQ namesrv address, ACL settings, and plugin paths for connector loading.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nworkerId=standalone-worker\nstorePathRootDir=/tmp/storeRoot\n\n## Http port for user to access REST API\nhttpPort=8082\n\n# Rocketmq namesrvAddr\nnamesrvAddr=localhost:9876\n\n# RocketMQ acl\naclEnable=false\naccessKey=rocketmq\nsecretKey=12345678\n\nautoCreateGroupEnable=false\nclusterName=\"DefaultCluster\"\n\n# Core configuration, configure the plugin directory of the previously compiled debezium package here\n# Source or sink connector jar file dir,The default value is rocketmq-connect-sample\npluginPaths=/usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Source Database Schema and Data\nDESCRIPTION: SQL commands to create and populate the source database schema and table in PostgreSQL. Includes setting up a bank schema, holdings table with full replica identity, and inserting test data.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA bank;\nSET search_path TO bank,public;\nCREATE TABLE bank.holding (\n                              holding_id int,\n                              user_id int,\n                              holding_stock varchar(8),\n                              holding_quantity int,\n                              datetime_created timestamp,\n                              datetime_updated timestamp,\n                              primary key(holding_id)\n);\nALTER TABLE bank.holding replica identity FULL;\ninsert into bank.holding values (1000, 1, 'VFIAX', 10, now(), now());\n\\q\ninsert into bank.holding values (1000, 1, 'VFIAX', 10, now(), now());\ninsert into bank.holding values (1001, 2, 'SP500', 1, now(), now());\ninsert into bank.holding values (1003, 3, 'SP500', 1, now(), now());\nupdate bank.holding set holding_quantity = 300 where holding_id=1000;\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Name Server Address Format\nDESCRIPTION: Example of the Name Server address format returned by the HTTP static server.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/06-parameterConfiguration/01local.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n192.168.0.1:9876;192.168.0.2:9876   \n```\n\n----------------------------------------\n\nTITLE: Defining Events in RocketMQ EventBridge\nDESCRIPTION: This snippet provides the definition of events used in RocketMQ EventBridge. It emphasizes that events refer to important things that have already occurred.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nEvents refer to things that have already happened, especially important things.\n```\n\n----------------------------------------\n\nTITLE: Installing Debezium PostgreSQL Connector in Runtime Directory\nDESCRIPTION: Commands to create a plugin directory and copy the compiled Debezium PostgreSQL connector JAR file into it for RocketMQ Connect runtime to load.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /usr/local/connector-plugins\ncp rocketmq-connect-debezium-postgresql/target/rocketmq-connect-debezium-postgresql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating Test Source Files for SFTP Processing\nDESCRIPTION: Commands to create a directory and a test source file with sample data for the SFTP source connector to process, containing transaction-like records with multiple fields.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /Users/YourUsername/rocketmqconnect/sftp-test/\n\ncd /Users/YourUsername/rocketmqconnect/sftp-test/\n\ntouch source.txt\n\necho '张三|100000202211290001|20221129001|30000.00|2022-11-28|03:00:00|7.00\n李四|100000202211290002|20221129002|40000.00|2022-11-28|04:00:00|9.00\n赵五|100000202211290003|20221129003|50000.00|2022-11-28|05:00:00|12.00' >> source.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Client Logger Constants and Initialization in Java\nDESCRIPTION: Defines static configuration variables and initializes the client logger with support for both internal logging and SLF4J. The code includes logger configuration properties and conditional initialization logic based on the SLF4J usage flag.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/06log.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    public static final String CLIENT_LOG_USESLF4J = \"rocketmq.client.logUseSlf4j\";\n    public static final String CLIENT_LOG_ROOT = \"rocketmq.client.logRoot\";\n    public static final String CLIENT_LOG_MAXINDEX = \"rocketmq.client.logFileMaxIndex\";\n    public static final String CLIENT_LOG_FILESIZE = \"rocketmq.client.logFileMaxSize\";\n    public static final String CLIENT_LOG_LEVEL = \"rocketmq.client.logLevel\";\n    public static final String CLIENT_LOG_ADDITIVE = \"rocketmq.client.log.additive\";\n    public static final String CLIENT_LOG_FILENAME = \"rocketmq.client.logFileName\";\n    public static final String CLIENT_LOG_ASYNC_QUEUESIZE = \"rocketmq.client.logAsyncQueueSize\";\n    public static final String ROCKETMQ_CLIENT_APPENDER_NAME = \"RocketmqClientAppender\";\n\n    private static final InternalLogger CLIENT_LOGGER;\n\n    private static final boolean CLIENT_USE_SLF4J;\n\n    //private static Appender rocketmqClientAppender = null;\n\n    static {\n        CLIENT_USE_SLF4J = Boolean.parseBoolean(System.getProperty(CLIENT_LOG_USESLF4J, \"false\"));\n        if (!CLIENT_USE_SLF4J) {\n            InternalLoggerFactory.setCurrentLoggerType(InnerLoggerFactory.LOGGER_INNER);\n            CLIENT_LOGGER = createLogger(LoggerName.CLIENT_LOGGER_NAME);\n            createLogger(LoggerName.COMMON_LOGGER_NAME);\n            createLogger(RemotingHelper.ROCKETMQ_REMOTING);\n        } else {\n            CLIENT_LOGGER = InternalLoggerFactory.getLogger(LoggerName.CLIENT_LOGGER_NAME);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Connect Standalone Configuration\nDESCRIPTION: Key configuration options for RocketMQ Connect in standalone mode, including worker ID, RocketMQ nameserver address, ACL settings, and the critical plugin path where connector JARs are located.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nworkerId=standalone-worker\nstorePathRootDir=/tmp/storeRoot\n\n## Http port for user to access REST API\nhttpPort=8082\n\n# Rocketmq namesrvAddr\nnamesrvAddr=localhost:9876\n\n# RocketMQ acl\naclEnable=false\naccessKey=rocketmq\nsecretKey=12345678\n\nautoCreateGroupEnable=false\nclusterName=\"DefaultCluster\"\n\n# 核心配置，将之前编译好debezium包的插件目录配置在此；\n# Source or sink connector jar file dir,The default value is rocketmq-connect-sample\npluginPaths=/usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: JVM PreTouch Configuration\nDESCRIPTION: Configuration to enable heap memory pre-touching during JVM initialization for improved runtime performance.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/05JVMOS.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-XX:+AlwaysPreTouch\n```\n\n----------------------------------------\n\nTITLE: Monitoring RocketMQ Connect Runtime Logs\nDESCRIPTION: Command to view the RocketMQ Connect runtime logs to verify successful connector startup and operation.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ntail -100f ~/logs/rocketmqconnect/connect_runtime.log\n```\n\n----------------------------------------\n\nTITLE: Updating Global Whitelist in RocketMQ ACL Configuration (Shell)\nDESCRIPTION: Command to update the global IP whitelist in the ACL configuration file. This updates the 'globalWhiteRemoteAddresses' field attribute in the ACL configuration. It can be executed on a specific broker or across an entire cluster.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/04access.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin updateGlobalWhiteAddr -n 192.168.1.2:9876 -b 192.168.12.134:10911 -g 10.10.154.1,10.10.154.2\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Docker Container for CDC Testing\nDESCRIPTION: Docker commands to create and run a PostgreSQL instance using the Debezium PostgreSQL image, which is configured for CDC and includes the necessary plugins for change data capture.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# starting a pg instance\ndocker run -d --name postgres -p 5432:5432 -e POSTGRES_USER=start_data_engineer -e POSTGRES_PASSWORD=password debezium/postgres:14\n\n# bash into postgres instance\ndocker exec -ti postgres /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime\nDESCRIPTION: Commands for cloning and building the RocketMQ Connect project from source.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-connect.git\n\ncd rocketmq-connect\n\nexport RMQ_CONNECT_HOME=`pwd`\n\nmvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Connector Worker in Standalone Mode\nDESCRIPTION: Instructions for modifying the connect-standalone.conf file and starting the Connector Worker in standalone mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nvim conf/connect-standalone.conf\n\n# Example configuration\nworkerId=standalone-worker\nstorePathRootDir=/Users/YourUsername/rocketmqconnect/storeRoot\nhttpPort=8082\nnamesrvAddr=localhost:9876\naclEnable=false\nclusterName=\"DefaultCluster\"\npluginPaths=/Users/YourUsername/rocketmqconnect/connector-plugins\n\n# Start Connector Worker\nsh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n```\n\n----------------------------------------\n\nTITLE: Example Output of Message Trace Query in RocketMQ\nDESCRIPTION: Sample output from a message trace query showing the trace log format. The output includes publisher information, client host, send time, processing cost, and status.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/03messagetra.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nRocketMQLog:WARN No appenders could be found for logger (io.netty.util.internal.PlatformDependent0).\nRocketMQLog:WARN Please initialize the logger system properly.\n#Type      #ProducerGroup       #ClientHost          #SendTime            #CostTimes #Status\nPub        1623305799667        xxx.xxx.xxx.xxx       2021-06-10 14:16:40  131ms      success\n```\n\n----------------------------------------\n\nTITLE: Creating Source Schema and Table in PostgreSQL\nDESCRIPTION: SQL commands to create a schema and table in PostgreSQL as the source for CDC. The table structure includes a primary key and the replica identity is set to FULL to capture all changes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA bank;\nSET search_path TO bank,public;\nCREATE TABLE bank.holding (\n                              holding_id int,\n                              user_id int,\n                              holding_stock varchar(8),\n                              holding_quantity int,\n                              datetime_created timestamp,\n                              datetime_updated timestamp,\n                              primary key(holding_id)\n);\nALTER TABLE bank.holding replica identity FULL;\ninsert into bank.holding values (1000, 1, 'VFIAX', 10, now(), now());\n\\q\ninsert into bank.holding values (1000, 1, 'VFIAX', 10, now(), now());\ninsert into bank.holding values (1001, 2, 'SP500', 1, now(), now());\ninsert into bank.holding values (1003, 3, 'SP500', 1, now(), now());\nupdate bank.holding set holding_quantity = 300 where holding_id=1000;\n```\n\n----------------------------------------\n\nTITLE: Starting Elasticsearch Sink Connector\nDESCRIPTION: cURL command to start the Elasticsearch sink connector, which consumes data from RocketMQ and writes it to the destination Elasticsearch.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/elasticsearchSinkConnector -d '{\n  \"connector.class\":\"org.apache.rocketmq.connect.elasticsearch.connector.ElasticsearchSinkConnector\",\n    \"elasticsearchHost\":\"localhost\",\n    \"elasticsearchPort\":9201,\n    \"max.tasks\":2,\n    \"connect.topicnames\":\"ConnectEsTopic\",\n    \"value.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n    \"key.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Building SFTP Connector Plugin\nDESCRIPTION: Commands to build and deploy the SFTP connector plugin.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/connectors/rocketmq-connect-sftp/\n\nmvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: LOAD_JSON_EXCEPTION错误消息\nDESCRIPTION: 当消费者在广播模式下加载本地offsets.json文件失败时出现的错误信息。可能是由于fastjson文件损坏或版本不匹配引起的。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nreadLocalOffset Exception\n```\n\n----------------------------------------\n\nTITLE: Compiling Debezium RocketMQ Connector\nDESCRIPTION: Commands to compile and set up the Debezium connector plugins for PostgreSQL and MySQL\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/\n$ mvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Implementing RocketMQ Push Consumer in Java\nDESCRIPTION: Java implementation of a RocketMQ push consumer that subscribes to messages from a specified topic with filtering capabilities.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.IOException;\nimport java.util.Collections;\nimport org.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.consumer.ConsumeResult;\nimport org.apache.rocketmq.client.apis.consumer.FilterExpression;\nimport org.apache.rocketmq.client.apis.consumer.FilterExpressionType;\nimport org.apache.rocketmq.client.apis.consumer.PushConsumer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class PushConsumerExample {\n    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);\n\n    private PushConsumerExample() {\n    }\n\n    public static void main(String[] args) throws ClientException, IOException, InterruptedException {\n        final ClientServiceProvider provider = ClientServiceProvider.loadService();\n        String endpoints = \"localhost:8081\";\n        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()\n            .setEndpoints(endpoints)\n            .build();\n        String tag = \"*\";\n        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);\n        String consumerGroup = \"YourConsumerGroup\";\n        String topic = \"TestTopic\";\n        PushConsumer pushConsumer = provider.newPushConsumerBuilder()\n            .setClientConfiguration(clientConfiguration)\n            .setConsumerGroup(consumerGroup)\n            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n            .setMessageListener(messageView -> {\n                logger.info(\"Consume message successfully, messageId={}\", messageView.getMessageId());\n                return ConsumeResult.SUCCESS;\n            })\n            .build();\n        Thread.sleep(Long.MAX_VALUE);\n    }\n```\n\n----------------------------------------\n\nTITLE: SUBSCRIPTION_GROUP_NOT_EXIST错误消息\nDESCRIPTION: 当Consumer Group或DelayQueue获取订阅信息失败时出现的错误信息。通常表示Consumer订阅的Topic信息与NameServer中的不一致。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nsubscription group not exist\n```\n\n----------------------------------------\n\nTITLE: Installing Connector Plugins\nDESCRIPTION: Commands to create plugin directory and copy compiled connector packages\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /usr/local/connector-plugins\ncp rocketmq-connect-debezium-postgresql/target/rocketmq-connect-debezium-postgresql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n\ncp rocketmq-connect-debezium-mysql/target/rocketmq-connect-debezium-mysql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Cloning RocketMQ Repository\nDESCRIPTION: Command to clone the forked RocketMQ repository to local machine.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/cuser/rocketmq.git # git clone [repo url]\n```\n\n----------------------------------------\n\nTITLE: Deploying RocketMQ with Helm in Kubernetes\nDESCRIPTION: Commands to install RocketMQ using Helm and verify the deployment by checking pod status.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install rocketmq-demo ./rocketmq\n# Check pod status\n# If the parameters are normal, it indicates successful deployment\n$ kubectl get pods -o wide -n default\nNAMESPACE     NAME                                        READY   STATUS    RESTARTS   AGE   IP                NODE         NOMINATED NODE   READINESS GATES\ndefault       rocketmq-demo-broker-0                      0/1     Running   0          19s   192.168.58.228    k8s-node02   <none>           <none>\ndefault       rocketmq-demo-nameserver-6678bb86f6-62s5d   0/1     Running   0          19s   192.168.85.229    k8s-node01   <none>           <none>\n```\n\n----------------------------------------\n\nTITLE: G1 Garbage Collector Configuration\nDESCRIPTION: Recommended G1 garbage collector settings for JDK 1.8 with specific heap region size and occupancy thresholds.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/05JVMOS.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=16m\n-XX:G1ReservePercent=25\n-XX:InitiatingHeapOccupancyPercent=30\n```\n\n----------------------------------------\n\nTITLE: JDBC Sink Connector Configuration\nDESCRIPTION: REST API call to configure JDBC sink connector for data synchronization\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest1000 -d '{\n  \"connector.class\": \"org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector\",\n  \"max.task\": \"2\",\n  \"connect.topicnames\": \"debezium-source-topic1000\",\n  \"connection.url\": \"jdbc:mysql://database ip:3306/bank1\",\n  \"connection.user\": \"root\",\n  \"connection.password\": \"debezium\",\n  \"pk.fields\": \"id\",\n  \"table.name.from.header\": \"true\",\n  \"pk.mode\": \"record_key\",\n  \"insert.mode\": \"UPSERT\",\n  \"db.timezone\": \"UTC\",\n  \"table.types\": \"TABLE\",\n  \"errors.deadletterqueue.topic.name\": \"dlq-topic\",\n  \"errors.log.enable\": \"true\",\n  \"errors.tolerance\": \"ALL\",\n  \"delete.enabled\": \"true\",\n  \"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n  \"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Compiling JDBC Connector in Java\nDESCRIPTION: Commands to compile the JDBC Connector plugin and move it to the connector plugins directory.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-jdbc/\n$ mvn clean package -Dmaven.test.skip=true\ncp rocketmq-connect-jdbc/target/rocketmq-connect-jdbc-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Uninstalling RocketMQ from Kubernetes\nDESCRIPTION: Command to release all RocketMQ resources from the Kubernetes cluster using Helm.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#Release all RocketMQ resources\n$ helm uninstall rocketmq-demo\n```\n\n----------------------------------------\n\nTITLE: Starting DLedger Quick Deploy\nDESCRIPTION: Commands to navigate to RocketMQ distribution directory and start DLedger cluster\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/02dledger.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#{rocketmq-version} replace with rocketmq actual version. example: 4.9.4\n$ cd distribution/target/rocketmq-{rocketmq-version}/rocketmq-{rocketmq-version}\n\n$ sh bin/dledger/fast-try.sh start\n```\n\n----------------------------------------\n\nTITLE: Setting up MySQL Docker Container\nDESCRIPTION: Commands to set up and run a MySQL Docker container for testing purposes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:1.9\n```\n\n----------------------------------------\n\nTITLE: Compiling Debezium RocketMQ Connector for PostgreSQL\nDESCRIPTION: Commands for compiling the Debezium connector for PostgreSQL, which enables CDC (Change Data Capture) functionality to read changes from PostgreSQL binlogs and convert them to RocketMQ messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/\n$ mvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: RocketMQ NameServer Address Configuration\nDESCRIPTION: Format for specifying the NameServer address when executing admin commands. The address should be provided in ip:port format using the -n flag.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-n ip:port\n```\n\n----------------------------------------\n\nTITLE: Compiling RocketMQ Dashboard from Source\nDESCRIPTION: Maven command to compile RocketMQ Dashboard from source code, skipping tests for faster build.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/04Dashboard.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for RocketMQ NameServer\nDESCRIPTION: Shows how to set the RocketMQ NameServer addresses using an environment variable. This approach allows configuring the NameServer at the operating system level.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/01bestpractice.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nexport   NAMESRV_ADDR=192.168.0.1:9876;192.168.0.2:9876\n```\n\n----------------------------------------\n\nTITLE: Building SFTP Connector Plugin for RocketMQ Connect\nDESCRIPTION: Commands to build the SFTP connector plugin and place it in the appropriate directory for the RocketMQ Connect runtime to load.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/connectors/rocketmq-connect-sftp/\n\nmvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Compiling RocketMQ Dashboard from Source\nDESCRIPTION: Maven command to compile RocketMQ Dashboard from source code, skipping tests for faster build.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/04Dashboard.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Executing RocketMQ Admin Tool Commands in Bash\nDESCRIPTION: Demonstrates the basic syntax for running mqadmin commands. The command structure includes the mqadmin executable, followed by the specific command and its arguments.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mqadmin {command} {args}\n```\n\n----------------------------------------\n\nTITLE: Setting Java System Property for RocketMQ NameServer\nDESCRIPTION: Demonstrates how to specify RocketMQ NameServer addresses using Java system properties. This approach allows setting NameServer configuration at application startup time.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/01bestpractice.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-Drocketmq.namesrv.addr=192.168.0.1:9876;192.168.0.2:9876  \n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Directory and Installing SFTP Connector\nDESCRIPTION: Commands to create a plugin directory and copy the compiled SFTP connector JAR file. This makes the connector available to the RocketMQ Connect runtime.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /Users/YourUsername/rocketmqconnect/connector-plugins\ncp target/rocketmq-connect-sftp-0.0.1-SNAPSHOT-jar-with-dependencies.jar /Users/YourUsername/rocketmqconnect/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Source Database Schema\nDESCRIPTION: SQL commands to create the source database schema and sample data for testing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/04RocketMQ Connect In Action1.md#2025-04-09_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE database inventory;\n\nuse inventory;\nCREATE TABLE `employee` (\n`id` bigint NOT NULL AUTO_INCREMENT,\n`name` varchar(128) DEFAULT NULL,\n`howold` int DEFAULT NULL,\n`male` int DEFAULT NULL,\n`company` varchar(128) DEFAULT NULL,\n`money` double DEFAULT NULL,\n`begin_time` datetime DEFAULT NULL,\n`modify_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'modify time',\n`decimal_test` decimal(11,2) DEFAULT NULL COMMENT 'test decimal type',\nPRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Running RocketMQ Dashboard JAR File\nDESCRIPTION: Java command to run the compiled RocketMQ Dashboard JAR file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/03Dashboard.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar target/rocketmq-dashboard-1.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring NameServer Address in RocketMQ Java Client\nDESCRIPTION: Shows how to set the NameServer address for both producer and consumer clients in RocketMQ. This is essential for clients to locate the NameServer and subsequently find the Broker.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/01bestpractice.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nproducer.setNamesrvAddr(\"192.168.0.1:9876;192.168.0.2:9876\");  \n\nconsumer.setNamesrvAddr(\"192.168.0.1:9876;192.168.0.2:9876\");\n```\n\n----------------------------------------\n\nTITLE: Resetting RocketMQ Connect Offset Storage in Shell\nDESCRIPTION: Command to remove persistent offset information, allowing RocketMQ Connect to start processing from the beginning of data sources.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf /Users/YourUsername/rocketmqconnect/storeRoot/*\n```\n\n----------------------------------------\n\nTITLE: Creating DELAY Topic with Default Configuration - Bash Command\nDESCRIPTION: Command to create a delay topic using default cluster configuration. Sets up a topic named DelayTopic with DELAY message type attribute.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/02delaymessage.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/mqadmin updateTopic -c DefaultCluster -t DelayTopic -n 127.0.0.1:9876 -a +message.type=DELAY\n```\n\n----------------------------------------\n\nTITLE: Rendering Connection Parameters Table in HTML and Markdown\nDESCRIPTION: This snippet combines HTML and Markdown to create a collapsible table detailing connection-related parameters for RocketMQ. It includes information on consumerConnection and producerConnection, their command options, and explanations.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<details><summary>Connection-related parameters</summary>\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\n  <colgroup>\n    <col width={177} />\n    <col width={175} />\n    <col width={177} />\n    <col width={185} />\n  </colgroup>\n  <tbody>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl63\"\n        width={177}\n        style={{ height: \"17.0pt\", width: \"133pt\" }}\n      >\n        Name\n      </td>\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>\n        Definition\n      </td>\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>\n        Command options\n      </td>\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>\n        Explain\n      </td>\n    </tr>\n    <tr height={39} style={{ height: \"29.0pt\" }}>\n      <td\n        rowSpan={3}\n        height={119}\n        className=\"xl69\"\n        width={87}\n        style={{\n          borderBottom: \"1.0pt\",\n          height: \"89.0pt\",\n          borderTop: \"none\",\n          width: \"65pt\"\n        }}\n      >\n        consumerConnection\n      </td>\n      <td\n        rowSpan={3}\n        className=\"xl72\"\n        width={87}\n        style={{ borderBottom: \"1.0pt\", borderTop: \"none\", width: \"65pt\" }}\n      >\n        Query consumer network connections.\n      </td>\n      <td className=\"xl67\" width={87} style={{ width: \"65pt\" }}>\n        -g\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n        Name of consumer group.\n      </td>\n    </tr>\n    <tr height={57} style={{ height: \"43.0pt\" }}>\n      <td\n        height={57}\n        className=\"xl67\"\n        width={87}\n        style={{ height: \"43.0pt\", width: \"65pt\" }}\n      >\n        -n\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n        NameServer address，format ip:port\n      </td>\n    </tr>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl67\"\n        width={87}\n        style={{ height: \"17.0pt\", width: \"65pt\" }}\n      >\n        -h\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n        Print help\n      </td>\n    </tr>\n    <tr height={39} style={{ height: \"29.0pt\" }}>\n      <td\n        rowSpan={4}\n        height={142}\n        className=\"xl69\"\n        width={87}\n        style={{\n          borderBottom: \"1.0pt\",\n          height: \"106.0pt\",\n          borderTop: \"none\",\n          width: \"65pt\"\n        }}\n      >\n        producerConnection\n      </td>\n      <td\n        rowSpan={4}\n        className=\"xl72\"\n        width={87}\n        style={{ borderBottom: \"1.0pt\", borderTop: \"none\", width: \"65pt\" }}\n      >\n        Query producer network connections.\n      </td>\n      <td className=\"xl67\" width={87} style={{ width: \"65pt\" }}>\n        -g\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n        Name of producer group.\n      </td>\n    </tr>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl67\"\n        width={87}\n        style={{ height: \"17.0pt\", width: \"65pt\" }}\n      >\n        -t\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n        topic name\n      </td>\n    </tr>\n    <tr height={57} style={{ height: \"43.0pt\" }}>\n      <td\n        height={57}\n        className=\"xl67\"\n        width={87}\n        style={{ height: \"43.0pt\", width: \"65pt\" }}\n      >\n        -n\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n        NameServer address,format ip:port\n      </td>\n    </tr>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl67\"\n        width={87}\n        style={{ height: \"17.0pt\", width: \"65pt\" }}\n      >\n        -h\n      </td>\n      <td className=\"xl68\" width={87} style={{ width: \"65pt\" }}>\n        Print help\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Documenting Consumer Metrics in Markdown\nDESCRIPTION: This snippet presents a markdown table listing various consumer metrics in RocketMQ. It includes metric names and definitions for consumer-related performance indicators such as message accumulation, consumption rates, latencies, and offsets at both group and client levels.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/04Exporter.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Consumer metrics\n\n| Metrics name                            | Definition                                                   |\n| --------------------------------------- | ------------------------------------------------------------ |\n| rocketmq_group_diff                     | Consumer group message accumulation message count            |\n| rocketmq_group_retrydiff                | Consumer group retry queue accumulation message count        |\n| rocketmq_group_dlqdiff                  | Consumer group dead letter queue accumulation message count  |\n| rocketmq_group_count                    | Number of consumers in the consumer group                    |\n| rocketmq_client_consume_fail_msg_count  | Number of times consumers in the consumer group have failed to consume in the past 1 hour |\n| rocketmq_client_consume_fail_msg_tps    | TPS of consumer consumption failure                          |\n| rocketmq_client_consume_ok_msg_tps      | TPS of consumer consumption success                          |\n| rocketmq_client_consume_rt              | Time taken for a message to be consumed after it has been pulled |\n| rocketmq_client_consumer_pull_rt        | Time taken for a client to pull a message                    |\n| rocketmq_client_consumer_pull_tps       | Client pull message TPS                                      |\n| rocketmq_consumer_tps                   | Consumption TPS of subscription group on each Broker group   |\n| rocketmq_group_consume_tps              | Current consumption TPS of subscription group (aggregated by broker for rocketmq_consumer_tps) |\n| rocketmq_consumer_offset                | The current consumption Offset of the subscription group in a broker group |\n| rocketmq_group_consume_total_offset     | The current consumption Offset of the subscription group (aggregated by broker for rocketmq_consumer_offset) |\n| rocketmq_consumer_message_size          | The TPS of the subscription group consuming message size in a broker group |\n| rocketmq_send_back_nums                 | The number of times the subscription group in a broker group has failed to consume and written to the retry message |\n| rocketmq_group_get_latency_by_storetime | The consumption delay of the consumer group, the difference between the current time and when the exporter gets the message. |\n```\n\n----------------------------------------\n\nTITLE: Launching RocketMQ Connect in Standalone Mode\nDESCRIPTION: Command to start the RocketMQ Connect runtime in standalone mode using the configured settings file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n```\n\n----------------------------------------\n\nTITLE: Starting Broker with Controller Mode\nDESCRIPTION: Shell command to start a Broker with Controller mode configuration enabled.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/03autofailover.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nohup sh bin/mqbroker -c broker.conf &\n```\n\n----------------------------------------\n\nTITLE: Building DLedger from Source\nDESCRIPTION: Commands to clone the DLedger repository and build it using Maven.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/openmessaging/dledger.git\n$ cd dledger\n$ mvn clean install -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Checking Message Send Round-Trip Time in RocketMQ (Markdown)\nDESCRIPTION: This snippet describes the 'checkMsgSendRT' command used to check the round-trip time for sending messages to a topic in RocketMQ. It includes options for printing help and setting the NameServer address.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| checkMsgSendRT | Check the RT (round-trip time) for sending messages to a topic. This function is similar to clusterRT. | -h | Print help |\n| | | -n | NameServer address,format ip:port |\n```\n\n----------------------------------------\n\nTITLE: Connecting to SFTP Server for Verification\nDESCRIPTION: Commands to connect to the local SFTP server and verify access to the test directory and files, ensuring the server is properly configured before setting up connectors.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# sftp -P port YourUsername@hostname\nsftp -P 22 YourUsername@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Single Topic with a Single Tag in RocketMQ (Java)\nDESCRIPTION: This snippet demonstrates how to create a consumer that subscribes to 'TopicA' with 'Tag1'. All consumer instances in the same group (GID_test_1) must use identical subscription code to maintain consistency.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/07subscribe.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    Properties properties = new Properties();\n    properties.put(PropertyKeyConst.GROUP_ID, \"GID_test_1\");\n    Consumer consumer = ONSFactory.createConsumer(properties);\n    consumer.subscribe(\"TopicA\", \"Tag1\", new MessageListener() {\n        public Action consume(Message message, ConsumeContext context) {\n            System.out.println(message.getMsgID());\n            return Action.CommitMessage;\n        }\n    }); \n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ from Source\nDESCRIPTION: Commands to clone and build RocketMQ from source code using Maven\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/02dledger.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/apache/rocketmq.git\n$ cd rocketmq\n$ git checkout -b develop origin/develop\n$ mvn -Prelease-all -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Cluster Parameters Table Structure in HTML/JSX\nDESCRIPTION: HTML table structure with JSX styling definitions displaying cluster-related command parameters, their definitions, and explanations for the RocketMQ admin tool. Includes parameters for clusterList and clusterRT commands.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\n  <colgroup>\n    <col width={177} />\n    <col width={175} />\n    <col width={177} />\n    <col width={185} />\n  </colgroup>\n  <tbody>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td height={23} className=\"xl63\" width={177} style={{ height: \"17.0pt\", width: \"133pt\" }}>\n        Name\n      </td>\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>\n         Definition \n      </td>\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>\n         Command options \n      </td>\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>\n        Explain\n      </td>\n    </tr>\n    <!-- Additional rows omitted for brevity -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Standalone Connect Configuration\nDESCRIPTION: Example configuration for running RocketMQ Connect in standalone mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nworkerId=standalone-worker\nstorePathRootDir=/Users/YourUsername/rocketmqconnect/storeRoot\n\n## Http port for user to access REST API\nhttpPort=8082\n\n# Rocketmq namesrvAddr\nnamesrvAddr=localhost:9876\n\n# RocketMQ acl\naclEnable=false\n#accessKey=rocketmq\n#secretKey=12345678\n\nclusterName=\"DefaultCluster\"\n\n# Plugin path for loading Source/Sink Connectors\npluginPaths=/Users/YourUsername/rocketmqconnect/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Stopping DLedger Cluster\nDESCRIPTION: Command to stop the DLedger quick deploy cluster\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/02dledger.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/dledger/fast-try.sh stop\n```\n\n----------------------------------------\n\nTITLE: Configuring GC Log Rotation for RocketMQ\nDESCRIPTION: JVM configuration for garbage collection log rotation. These settings control the number of log files, their size, and enable automatic rotation to manage disk space.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-XX:+UseGCLogFileRotation   \n-XX:NumberOfGCLogFiles=5 \n-XX:GCLogFileSize=30m\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Broker Address Configuration\nDESCRIPTION: Format for specifying the Broker address when executing admin commands. The address should be provided in ip:port format using the -b flag, where port defaults to 10911.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-b ip:port\n```\n\n----------------------------------------\n\nTITLE: SFTP Source Connector Configuration\nDESCRIPTION: REST API call to configure and start the SFTP source connector for reading file data.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST --location \"http://localhost:8082/connectors/SftpSourceConnector\" --http1.1 \\\n    -H \"Host: localhost:8082\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"connector.class\": \"org.apache.rocketmq.connect.http.sink.SftpSourceConnector\",\n          \"host\": \"127.0.0.1\",\n          \"port\": 22,\n          \"username\": \"YourUsername\",\n          \"password\": \"yourPassword\",\n          \"filePath\": \"/Users/YourUsername/rocketmqconnect/sftp-test/source.txt\",\n          \"connect.topicname\": \"sftpTopic\",\n          \"fieldSeparator\": \"|\",\n          \"fieldSchema\": \"username|idCardNo|orderNo|orderAmount|trxDate|trxTime|profit\"\n        }'\n```\n\n----------------------------------------\n\nTITLE: Apache Maven POM Configuration\nDESCRIPTION: XML configuration for the Maven POM file to enable deployment to ASF Nexus repository. Includes Apache parent POM inheritance settings.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/04release-manual.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>XX</version>\n</parent>\n```\n\n----------------------------------------\n\nTITLE: Handling Metrics Request in Java\nDESCRIPTION: This snippet shows how the exporter handles a metrics request from Prometheus. It creates a StringWriter to collect metrics, calls the metrics service to populate it, and returns the formatted metrics data.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    private void metrics(HttpServletResponse response) throws IOException {\n    StringWriter writer = new StringWriter();\n    metricsService.metrics(writer);\n    response.setHeader(\"Content-Type\", \"text/plain; version=0.0.4; charset=utf-8\");\n    response.getOutputStream().print(writer.toString());\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling RocketMQ Dashboard Docker Image\nDESCRIPTION: Docker command to download the latest RocketMQ Dashboard Docker image from the Apache RocketMQ repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/04-deployment/03Dashboard.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull apacherocketmq/rocketmq-dashboard:latest\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ and Testing Message Sending/Receiving\nDESCRIPTION: Commands to start RocketMQ, set the NameServer address, and test message production and consumption using RocketMQ tools.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7\n$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4\n\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ with DLedger Support\nDESCRIPTION: Commands to clone the RocketMQ repository, checkout the DLedger branch, and build it using Maven.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/apache/rocketmq.git\n$ cd rocketmq\n$ git checkout -b store_with_dledger origin/store_with_dledger\n$ mvn -Prelease-all -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Adding Topic Offset Metrics in RocketMQ Exporter (Java)\nDESCRIPTION: This code snippet demonstrates how the RocketMQ Exporter adds topic offset metrics to its collector. It iterates through broker offset entries and calls the addTopicOffsetMetric method for each entry.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nSet<Map.Entry<String, Long>> brokerOffsetEntries = brokerOffsetMap.entrySet();\n       for (Map.Entry<String, Long> brokerOffsetEntry : brokerOffsetEntries) {\n           metricsService.getCollector().addTopicOffsetMetric(clusterName, brokerOffsetEntry.getKey(), topic,\n               brokerUpdateTimestampMap.get(brokerOffsetEntry.getKey()), brokerOffsetEntry.getValue());\n       }\n   }\n   log.info(\"topic offset collection task finished....\" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Dashboard from JAR\nDESCRIPTION: Command to start RocketMQ Dashboard by executing the JAR file with a configuration parameter that specifies the NameServer address.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/04-deployment/03Dashboard.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar rocketmq-dashboard-*.jar --rocketmq.config.namesrvAddr=localhost:9876\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Connector Worker in Standalone Mode\nDESCRIPTION: Steps to configure the connect-standalone.conf file and start the Connector Worker in standalone mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n\nvim conf/connect-standalone.conf\n\nsh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Docker Container for Testing\nDESCRIPTION: Docker command to start a MySQL container using Debezium's example image. This container will host the target database for the synchronized data.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:1.9\n```\n\n----------------------------------------\n\nTITLE: Producer Metrics Table in Markdown\nDESCRIPTION: Table documenting producer-related metrics including offset tracking, TPS measurements, and message size metrics at both topic and queue levels.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Metrics name | Definition |\n| ------------ | ----------- |\n| rocketmq_producer_offset | The maximum offset of the topic at the current time |\n| rocketmq_topic_retry_offset | The maximum offset of the retry topic at the current time |\n| rocketmq_topic_dlq_offset | The maximum offset of the dead letter topic at the current time |\n| rocketmq_producer_tps | The production TPS of the topic on a Broker group |\n| rocketmq_producer_message_size | The TPS of the production message size of the topic on a Broker group |\n| rocketmq_queue_producer_tps | Queue-level production TPS |\n| rocketmq_queue_producer_message_size | Queue-level production TPS of message size |\n```\n\n----------------------------------------\n\nTITLE: Starting NameServer in Multiple Master Mode\nDESCRIPTION: Commands to start a NameServer and verify its successful startup in multiple master mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/01deploy.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n### Start Name Server first\n$ nohup sh mqnamesrv &\n \n### Verify if the Name Server has started successfully\n$ tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n----------------------------------------\n\nTITLE: Writing Test Data to Source Elasticsearch\nDESCRIPTION: Kibana Dev Tools commands to write test data to the source Elasticsearch instance and query the data.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /_bulk\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"1\", \"field1\": \"value1\", \"field2\": \"value2\" }\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"2\", \"field1\": \"value3\", \"field2\": \"value4\" }\n\nGET /connect_es/_search\n{\n  \"size\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Forking RocketMQ Repository URL Example\nDESCRIPTION: Example of the forked repository URL structure after forking apache/rocketmq to a personal GitHub account.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttps://github.com/cuser/rocketmq.git # cuser's rocketmq repo[repository] url\n```\n\n----------------------------------------\n\nTITLE: Cloning a Forked Repository in Git\nDESCRIPTION: Command to clone a forked RocketMQ repository from GitHub to local environment. The local repository will use the GitHub repository as the remote repository named 'origin'.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/cuser/rocketmq.git # git clone [repo url]\n```\n\n----------------------------------------\n\nTITLE: Setting Message Consumption Mode in RocketMQ\nDESCRIPTION: Examples showing how to set clustering and broadcasting message consumption modes in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/03-consumer/02push.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nconsumer.setMessageModel(MessageModel.CLUSTERING);\n```\n\nLANGUAGE: java\nCODE:\n```\nconsumer.setMessageModel(MessageModel.BROADCASTING);\n```\n\n----------------------------------------\n\nTITLE: Kibana Docker Setup\nDESCRIPTION: Docker commands for setting up Kibana instances connected to Elasticsearch clusters.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull docker.elastic.co/kibana/kibana:7.15.1\n\ndocker run --name kibana1 --link es1:elasticsearch -p 5601:5601 -d docker.elastic.co/kibana/kibana:7.15.1\n\ndocker run --name kibana2 --link es2:elasticsearch -p 5602:5601 -d docker.elastic.co/kibana/kibana:7.15.1\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ Producer and Consumer\nDESCRIPTION: Commands to start RocketMQ producer and consumer for testing message transfer functionality.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7\n$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4\n\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Rebasing to Latest Develop Branch in Git\nDESCRIPTION: Command to rebase the local repository to the latest code from the development branch. This ensures your changes are based on the most recent code.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase origin/develop # git rebase [branch]\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Structure\nDESCRIPTION: Release notes document structure with download information, feature lists, improvements, bug fixes, and documentation updates for RocketMQ 4.8.0\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/release-notes/2020-12-21-4.8.0.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Release Notes - Apache RocketMQ - Version 4.8.0\"\ncategories:\n  - Release_Notes\ntags:\n  - Release_Notes\n  - RocketMQ\n  - Version\n---\n\n:::tip Download the 4.8.0 release\n    \n* Source: [rocketmq-all-4.8.0-source-release.zip](https://archive.apache.org/dist/rocketmq/4.8.0/rocketmq-all-4.8.0-source-release.zip) [[PGP](https://www.apache.org/dist/rocketmq/4.8.0/rocketmq-all-4.8.0-source-release.zip.asc)] [[SHA512](https://www.apache.org/dist/rocketmq/4.8.0/rocketmq-all-4.8.0-source-release.zip.sha512)]\n* Binary: [rocketmq-all-4.8.0-bin-release.zip](https://archive.apache.org/dist/rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip) [[PGP](https://www.apache.org/dist/rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip.asc)] [[SHA512](https://www.apache.org/dist/rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip.sha512)]\n:::\n```\n\n----------------------------------------\n\nTITLE: Creating DingTalk Target in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create a DingTalk target in RocketMQ EventBridge, specifying the event bus name, rule name, and DingTalk-specific configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nPOST /target/createEventTargets HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n    \"eventBusName\":\"demo-bus\",\n    \"eventRuleName\":\"demo-rule\",\n    \"eventTargets\":[\n        {\n            \"eventTargetName\":\"dingtalk-target\",\n            \"className\":\"acs.dingtalk\",\n            \"config\":{\n            \"WebHook\":\"https://oapi.dingtalk.com/robot/send?access_token=b43a54b702314415c2acdae97eda1e092528b7a9dddb31510a5b4430be2ef867\",\n            \"SecretKey\":\"SEC53483bf496b8f9e0b4ab0ab669d422208e6ccfaedfd5120ea6b8426b9ecd47aa\",\n            \"Body\":\"{\\\"template\\\":\\\"{\\\\\\\"text\\\\\\\":{\\\\\\\"content\\\\\\\":\\\\\\\"${content}\\\\\\\"},\\\\\\\"msgtype\\\\\\\":\\\\\\\"text\\\\\\\"}\\\",\\\"form\\\":\\\"TEMPLATE\\\",\\\"value\\\":\\\"{\\\\\\\"content\\\\\\\":\\\\\\\"$.data.body\\\\\\\"}\\\"}\"}\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: RocketMQ NameServer Command Parameters Table\nDESCRIPTION: HTML table structure defining NameServer-related commands including updateKvConfig, deleteKvConfig, getNamesrvConfig, and updateNamesrvConfig. Each command includes options for namespace, key-value pairs, and server addressing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\\n  <tbody>\\n    <tr height={23} style={{ height: \"17.0pt\" }}>\\n      <td height={23} className=\"xl63\" width={177} style={{ height: \"17.0pt\", width: \"133pt\" }}>\\n        Name\\n      </td>\\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>\\n        Definition\\n      </td>\\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>\\n        Command options\\n      </td>\\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>\\n        Explain\\n      </td>\\n    </tr>\\n    <!-- Additional rows omitted for brevity -->\\n  </tbody>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Updating Personal GitHub Repository\nDESCRIPTION: Command to update your personal GitHub repository with the latest changes after a PR has been merged to the main repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin develop\n```\n\n----------------------------------------\n\nTITLE: Defining Message Query Commands Table in HTML\nDESCRIPTION: An HTML table structure defining various RocketMQ message query commands, their parameters, and explanations. The table includes commands like queryMsgById, queryMsgByKey, queryMsgByOffset, queryMsgByUniqueKey, and checkMsgSendRT.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\n  <colgroup>\n    <col width={177} />\n    <col width={175} />\n    <col width={177} />\n    <col width={185} />\n  </colgroup>\n  <tbody>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl63\"\n        width={177}\n        style={{ height: \"17.0pt\", width: \"133pt\" }}\n      >\n        Name\n      </td>\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>\n        Definition\n      </td>\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>\n        Command options\n      </td>\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>\n        Explain\n      </td>\n    </tr>\n    <!-- Additional rows for each command... -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Running RocketMQ Dashboard from Compiled JAR\nDESCRIPTION: Command to run the compiled RocketMQ Dashboard JAR file to start the application.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/04Dashboard.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar target/rocketmq-dashboard-1.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Starting NameServer with Controller Configuration\nDESCRIPTION: Shell command to start the NameServer with a specified configuration file that includes Controller settings.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/03autofailover.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nohup sh bin/mqnamesrv -c namesrv.conf &\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to Remote Repository in Git\nDESCRIPTION: Command to push a local branch to the remote repository with upstream tracking set up. This makes your changes available on GitHub.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push --set-upstream apache RocketMQ-Vxx.0\t# push branch to https://github.com/cuser/rocketmq-site.git\n```\n\n----------------------------------------\n\nTITLE: Broker Runtime Metrics Table in Markdown\nDESCRIPTION: Table describing broker runtime metrics including TPS measurements for different time windows (600s, 60s, 10s) covering message transfer, missed messages, and write operations.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| rocketmq_brokeruntime_gettransfered_tps600 | | getTransferedTps |\n| rocketmq_brokeruntime_gettransfered_tps60 | | |\n| rocketmq_brokeruntime_gettransfered_tps10 | | |\n| rocketmq_brokeruntime_getmiss_tps600 | Average TPS for getMessage with no messages obtained in the past 600 seconds | getMissTps |\n| rocketmq_brokeruntime_getmiss_tps60 | Average TPS for getMessage with no messages obtained in the past 60 seconds | |\n| rocketmq_brokeruntime_getmiss_tps10 | Average TPS for getMessage with no messages obtained in the past 10 seconds | |\n| rocketmq_brokeruntime_put_tps600 | Average TPS for message write operations in the past 600 seconds | putTps |\n| rocketmq_brokeruntime_put_tps60 | Average TPS for message write operations in the past 60 seconds | |\n| rocketmq_brokeruntime_put_tps10 | Average TPS for message write operations in the past 10 seconds | |\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metric Format Example (JavaScript)\nDESCRIPTION: This snippet demonstrates the format of a Prometheus metric. It shows a sample metric for a RocketMQ group difference, including labels for group, topic, and other attributes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrocketmq_group_diff{group=\"rmq_group_test_20220114\",topic=\"fusion_console_tst\",countOfOnlineConsumers=\"0\",msgModel=\"1\",} 23.0\n```\n\n----------------------------------------\n\nTITLE: Starting Elasticsearch Source Connector\nDESCRIPTION: curl command to start the Elasticsearch source connector, which reads data from the source Elasticsearch and sends it to RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/elasticsearchSourceConnector -d  '{\n  \"connector.class\":\"org.apache.rocketmq.connect.elasticsearch.connector.ElasticsearchSourceConnector\",\n    \"elasticsearchHost\":\"localhost\",\n    \"elasticsearchPort\":9200,\n    \"index\":{\n        \"connect_es\": {\n            \"primaryShards\":1,\n            \"id\":1\n        }\n    },\n    \"max.tasks\":2,\n    \"connect.topicname\":\"ConnectEsTopic\",\n    \"value.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n    \"key.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Branch for PR in Git\nDESCRIPTION: Commands to checkout an existing branch or create a new one, and push it to the remote repository for creating a pull request.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout new-official-website\t# git checkout -b new-official-website\ngit push origin new-official-website\t# push to https://github.com/cuser/rocketmq-site.git\n```\n\n----------------------------------------\n\nTITLE: Building Connector Runtime for RocketMQ Connect\nDESCRIPTION: Commands to clone the RocketMQ Connect repository, set up the environment, and build the Connector Runtime using Maven.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-connect.git\n\ncd  rocketmq-connect\n\nexport RMQ_CONNECT_HOME=`pwd`\n\nmvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n```\n\n----------------------------------------\n\nTITLE: Expanding Server Metrics Section in Markdown\nDESCRIPTION: This code snippet uses HTML within Markdown to create an expandable section for server metrics. It demonstrates how to structure documentation for better readability in GitHub-flavored Markdown.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<details><summary>Server metrics</summary>\n```\n\n----------------------------------------\n\nTITLE: Testing RocketMQ Message System\nDESCRIPTION: Commands to test RocketMQ message sending and receiving functionality using built-in tools\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7\n$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4\n\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Committing PR Merge and Closing GitHub Issue\nDESCRIPTION: Command to commit the merged changes with proper attribution to the contributor and automatically close the associated GitHub issue.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/03pull-request.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --author=\"contributor_name <contributor_email>\" -a -m \"RocketMQ-Vxx.0 description closes apache/rocketmq#ZZ\"\n```\n\n----------------------------------------\n\nTITLE: Testing RocketMQ Message Sending and Receiving\nDESCRIPTION: Commands to test RocketMQ message sending and receiving using the provided tools. This sets up the NAMESRV_ADDR environment variable and runs the Producer and Consumer examples.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7\n$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4\n\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Connect Standalone Mode\nDESCRIPTION: Configuration settings for RocketMQ Connect in standalone mode, including worker ID, storage paths, HTTP port, and plugin paths for loading the connector JARs.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n$ vim conf/connect-standalone.conf\n```\n\n----------------------------------------\n\nTITLE: Pushing New Branch to Remote Repository in Shell\nDESCRIPTION: Command to push the newly created branch to the remote repository. This makes the branch available on GitHub for creating a pull request.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git push --set-upstream apache RocketMQ-Vxx.0\t# push branch to https://github.com/cuser/rocketmq-site.git\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Broker Command Table in HTML\nDESCRIPTION: An HTML table structure defining various RocketMQ broker commands, their meanings, command options, and explanations. The table includes details for queryMsgById, queryMsgByKey, queryMsgByOffset, queryMsgByUniqueKey, and checkMsgSendRT commands.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table border={0} cellPadding={0} cellSpacing={0} width={714}>\n  <colgroup>\n    <col width={177} />\n    <col width={175} />\n    <col width={177} />\n    <col width={185} />\n  </colgroup>\n  <tbody>\n    <tr height={23} style={{ height: \"17.0pt\" }}>\n      <td\n        height={23}\n        className=\"xl63\"\n        width={177}\n        style={{ height: \"17.0pt\", width: \"133pt\" }}\n      >\n        名称\n      </td>\n      <td className=\"xl64\" width={175} style={{ width: \"131pt\" }}>\n        含义\n      </td>\n      <td className=\"xl64\" width={177} style={{ width: \"133pt\" }}>\n        命令选项\n      </td>\n      <td className=\"xl64\" width={185} style={{ width: \"139pt\" }}>\n        说明\n      </td>\n    </tr>\n    <!-- ... (table content continues) ... -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Downloading RocketMQ Helm Chart\nDESCRIPTION: Commands to download the Apache RocketMQ Helm chart from Docker registry and extract it.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm pull oci://registry-1.docker.io/apache/rocketmq --version 0.0.1 \n$ tar -zxvf rocketmq-0.0.1.tgz\n```\n\n----------------------------------------\n\nTITLE: Creating Consumer with Inconsistent Tag Subscription (Java)\nDESCRIPTION: This code snippet shows another consumer instance in the same group subscribing to 'TopicA' but with 'Tag2', which is inconsistent with the previous consumer's subscription.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/07subscribe.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n    Properties properties = new Properties();\n    properties.put(PropertyKeyConst.GROUP_ID, \"GID_test_2\");\n    Consumer consumer = ONSFactory.createConsumer(properties);\n    consumer.subscribe(\"TopicA\", \"Tag2\", new MessageListener() {\n        public Action consume(Message message, ConsumeContext context) {\n            System.out.println(message.getMsgID());\n            return Action.CommitMessage;\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Rebasing Local Branch with Remote Develop Branch in Shell\nDESCRIPTION: Command to rebase the local branch with the latest code from the remote develop branch. This ensures the local code is up-to-date before making changes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git rebase origin/develop # git rebase [branch]\n```\n\n----------------------------------------\n\nTITLE: Downloading and Building RocketMQ MQTT from Source\nDESCRIPTION: Commands to clone the RocketMQ MQTT repository, build the project from source code, and navigate to the distribution directory. These steps prepare the MQTT bridge for deployment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-mqtt\ncd rocketmq-mqtt\nmvn -Prelease-all -DskipTests clean install -U\ncd distribution/target/\n```\n\n----------------------------------------\n\nTITLE: GC Log Rotation Configuration\nDESCRIPTION: Settings for GC log file rotation with specified number of files and size limits.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/05JVMOS.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-XX:+UseGCLogFileRotation\n-XX:NumberOfGCLogFiles=5\n-XX:GCLogFileSize=30m\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to New Branch in Shell\nDESCRIPTION: Commands to create a new branch for development, switch to it, add changes, and commit them. This is part of the workflow for preparing a pull request.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b RocketMQ-Vxx.0 # git checkout [-b] [new-branch]\n$ git add /rocketmq/pom.xml # git add [dir/file]\n$ git commit -a -m \"pom\"\t# git commit [-all] [-msg] [message]\n```\n\n----------------------------------------\n\nTITLE: Installing Helm 3 in Bash\nDESCRIPTION: Script to install Helm 3 using the official installation script if it's not already installed on the system.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n```\n\n----------------------------------------\n\nTITLE: Available Example Files\nDESCRIPTION: List of example Java files demonstrating MQTT and RocketMQ client implementations for publishing and subscribing to messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/08-mqtt/02RocketMQMQTTQuickStart.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nMqttConsumer.java  // MQTT client initiates subscription message\nMqttProducer.java   // MQTT client starts publishing messages\nRocketMQConsumer.java // RocketMQ client starts subscription message\nRocketMQProducer.java  // RocketMQ client starts publishing messages\n```\n\n----------------------------------------\n\nTITLE: Updating ACL Configuration Command\nDESCRIPTION: Shell command example for updating ACL configuration attributes including access keys and permissions for topics and groups.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/03access.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sh mqadmin updateAclConfig -n 192.168.1.2:9876 -b 192.168.12.134:10911 -a RocketMQ -s 1234567809123 -t topicA=DENY,topicD=SUB -g groupD=DENY,groupB=SUB\n```\n\n----------------------------------------\n\nTITLE: Rejecting PR\nDESCRIPTION: Commands to reject a PR without merging and close it on GitHub.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --allow-empty -m \"RocketMQ-Vxx.0 closes apache/rocketmq#ZZ *Won't fix*\"\ngit push apache develop\n```\n\n----------------------------------------\n\nTITLE: Disabling Biased Locking in JVM for RocketMQ\nDESCRIPTION: JVM option to disable biased locking which can reduce JVM pauses in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-XX:-UseBiasedLocking   \n```\n\n----------------------------------------\n\nTITLE: Cloning Forked RocketMQ Repository in Shell\nDESCRIPTION: Command to clone a forked RocketMQ repository to the local machine. The URL should be replaced with the user's specific forked repository URL.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/cuser/rocketmq.git # git clone [repo url]\n```\n\n----------------------------------------\n\nTITLE: Correct Message Handling in RocketMQ - Java\nDESCRIPTION: Demonstrates the correct way to handle message re-transmission by building a new message instance from a received message. This preserves message immutability.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/04message.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMessage m = Consumer.receive();\nMessage m2= MessageBuilder.buildFrom(m);\nProducer.send(m2);\n```\n\n----------------------------------------\n\nTITLE: Importing Apache V2 License XML in IntelliJ IDEA\nDESCRIPTION: This snippet provides the file path and steps to import the Apache V2 license XML file in IntelliJ IDEA. It sets up the copyright profile for the project.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/02code-guidelines.md#2025-04-09_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\nrocketmq/style/copyright/Apache.xml\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Branch for PR in Shell\nDESCRIPTION: Commands to switch to a specific branch and push changes to the remote repository. This is typically done before creating a pull request on GitHub.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout new-official-website\t# git checkout -b new-official-website\n$ git push origin new-official-website\t# push to https://github.com/cuser/rocketmq-site.git\n```\n\n----------------------------------------\n\nTITLE: Creating Topic in RocketMQ Cluster using mqadmin\nDESCRIPTION: This shell command creates a new topic named 'TopicTest' in the RocketMQ cluster using the mqadmin tool. It sets up 8 read and write queues on the broker.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/02message1.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/mqadmin updateTopic -c DefaultCluster -t TopicTest -n 127.0.0.1:9876\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Code Style File Path\nDESCRIPTION: The specific location of the code style configuration file within the RocketMQ project structure.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/02code-guidelines.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```rocketmq/style/rmq_codestyle.xml```\n```\n\n----------------------------------------\n\nTITLE: Committing Merged Changes and Closing PR in Shell\nDESCRIPTION: Command to commit merged changes, giving credit to the contributor and closing the associated GitHub pull request.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit --author=\"contributor_name <contributor_email>\" -a -m \"RocketMQ-Vxx.0 description closes apache/rocketmq#ZZ\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Word Count Stream Processing with RocketMQ Streams in Java\nDESCRIPTION: This Java code demonstrates how to implement a word count stream processing application using RocketMQ Streams. It sets up a stream builder, defines the processing logic, and configures the RocketMQ stream with appropriate properties. The program reads from a source topic, splits messages into words, counts their occurrences, and prints the results.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/09-streams/03RocketMQ Streams Quick Start.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class WordCount {\n    public static void main(String[] args) {\n        StreamBuilder builder = new StreamBuilder(\"wordCount\");\n\n        builder.source(\"sourceTopic\", total -> {\n                    String value = new String(total, StandardCharsets.UTF_8);\n                    return new Pair<>(null, value);\n                })\n                .flatMap((ValueMapperAction<String, List<String>>) value -> {\n                    String[] splits = value.toLowerCase().split(\"\\\\W+\");\n                    return Arrays.asList(splits);\n                })\n                .keyBy(value -> value)\n                .count()\n                .toRStream()\n                .print();\n\n        TopologyBuilder topologyBuilder = builder.build();\n\n        Properties properties = new Properties();\n        properties.put(MixAll.NAMESRV_ADDR_PROPERTY, \"127.0.0.1:9876\");\n\n        RocketMQStream rocketMQStream = new RocketMQStream(topologyBuilder, properties);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        Runtime.getRuntime().addShutdownHook(new Thread(\"wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                rocketMQStream.stop();\n                latch.countDown();\n            }\n        });\n\n        try {\n            rocketMQStream.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Keys for Release Signing\nDESCRIPTION: Example of generating a new GPG key with 4096 bit length for signing Apache releases. Shows the interactive process including key generation, user ID setup, and key configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/04release-manual.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost ~]# gpg --gen-key\ngpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.\n...\n# secret key generation directory\ngpg: directory `/root/.gnupg' created\ngpg: new configuration file `/root/.gnupg/gpg.conf' created\ngpg: WARNING: options in `/root/.gnupg/gpg.conf' are not yet active during this run\ngpg: keyring `/root/.gnupg/secring.gpg' created\ngpg: keyring `/root/.gnupg/pubring.gpg' created\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\nYour selection?\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0)\nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n# set USER-ID\nReal name: rocketmq\nEmail address: rocketmq@apache.org\nComment: rocketmq\nYou selected this USER-ID:\n    \"rocketmq (rocketmq) <rocketmq@apache.org>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nYou need a Passphrase to protect your secret key.\n```\n\n----------------------------------------\n\nTITLE: Rejecting PR with Empty Commit in Shell\nDESCRIPTION: Commands to reject a pull request by creating an empty commit with a message indicating the PR won't be fixed, and pushing this to the remote repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit --allow-empty -m \"RocketMQ-Vxx.0 closes apache/rocketmq#ZZ *Won't fix*\"\n$ git push apache develop\n```\n\n----------------------------------------\n\nTITLE: Compiling and Moving JDBC Connector\nDESCRIPTION: Commands to compile the JDBC Connector and copy the JAR file to the connector plugins directory. This connector will be used to write data to the MySQL target database.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/05RocketMQ Connect In Action2.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd rocketmq-connect/connectors/rocketmq-connect-jdbc/\n$ mvn clean package -Dmaven.test.skip=true\ncp rocketmq-connect-jdbc/target/rocketmq-connect-jdbc-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Git Tag Management Commands\nDESCRIPTION: Commands for listing, deleting and managing git tags during the release process\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/11-contributionGuide/04release-manual.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -ln\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -d rocketmq-all-x1.x2.x3\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin :refs/tags/rocketmq-all-x1.x2.x3\n```\n\n----------------------------------------\n\nTITLE: Cloning Remote Repository - Shell\nDESCRIPTION: Commands for forking and cloning the RocketMQ repository to local environment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/11-contributionGuide/03pull-request.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/cuser/rocketmq.git # git clone [repo url]\n```\n\n----------------------------------------\n\nTITLE: Creating Source File for RocketMQ Connect Testing\nDESCRIPTION: Commands to create a test source file directory and populate it with test data for the source connector to read.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/03RocketMQ Connect Quick Start.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /Users/YourUsername/rocketmqconnect/\ncd /Users/YourUsername/rocketmqconnect/\ntouch test-source-file.txt\n\necho \"Hello \\r\\nRocketMQ\\r\\n Connect\" >> test-source-file.txt\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Git Commits in Shell\nDESCRIPTION: Resets the Git repository to a specific commit and force pushes the changes. Used to undo recent commits during the rollback process.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit reset --hard commit-id\ngit push origin HEAD --force\n```\n\n----------------------------------------\n\nTITLE: Submitting PR Branch - Shell\nDESCRIPTION: Commands for checking out and pushing the PR branch to remote repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/11-contributionGuide/03pull-request.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout new-official-website\t# git checkout -b new-official-website\ngit push origin new-official-website\t# push to https://github.com/cuser/rocketmq-site.git\n```\n\n----------------------------------------\n\nTITLE: Incorrect Producer Usage in Java for Apache RocketMQ\nDESCRIPTION: This example shows an anti-pattern for producer usage in Apache RocketMQ where a new producer is created and destroyed for each message send operation, which creates excessive connections to the server and degrades performance.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/03-domainModel/04producer.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfor (int i =0;i<n;i++){\n    Producer p = ProducerBuilder.build();\n    Message m= MessageBuilder.build();\n    p.send(m);\n    p.shutdown();\n  }\n```\n\n----------------------------------------\n\nTITLE: Rejecting PR - Shell\nDESCRIPTION: Commands for rejecting a PR without merging changes.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/11-contributionGuide/03pull-request.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --allow-empty -m \"RocketMQ-Vxx.0 closes apache/rocketmq#ZZ *Won't fix*\"\ngit push apache develop\n```\n\n----------------------------------------\n\nTITLE: Verifying Specific Release File GPG Signature in Shell\nDESCRIPTION: Verifies the GPG signature for a specific release file. Alternative method for release verification.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngpg --verify rocketmq-all-%version-number%-source-release.zip.asc rocketmq-all-%version-number%-bin-release.zip\n```\n\n----------------------------------------\n\nTITLE: Incorrect Consumer Usage Pattern in Java\nDESCRIPTION: This example demonstrates an inefficient way to use consumers in Apache RocketMQ. Creating and destroying consumer instances for each message creates unnecessary overhead and can impose a high load on the system.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/08consumer.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfor (int i =0;i<n;i++)\n{\n  Consumer c = ConsumerBuilder.build();\n  Message m= c.receive();\n  //process message\n  c.shutdown();\n}\n```\n\n----------------------------------------\n\nTITLE: DLedger Broker Configuration Example\nDESCRIPTION: Sample configuration file for a DLedger broker node, showing required parameters for Raft-based replication and high availability.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nbrokerClusterName = RaftCluster\nbrokerName=RaftNode00\nlistenPort=30911\nnamesrvAddr=127.0.0.1:9876\nstorePathRootDir=/tmp/rmqstore/node00\nstorePathCommitLog=/tmp/rmqstore/node00/commitlog\nenableDLegerCommitLog=true\ndLegerGroup=RaftNode00\ndLegerPeers=n0-127.0.0.1:40911;n1-127.0.0.1:40912;n2-127.0.0.1:40913\n## must be unique\ndLegerSelfId=n0\nsendMessageThreadPoolNums=16\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ EventBridge\nDESCRIPTION: Shell command to start the RocketMQ EventBridge service.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsh bin/eventbridge.sh start\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Configuration Properties Table in Markdown\nDESCRIPTION: A markdown table listing various network configuration properties for Apache RocketMQ. It includes property names, descriptions, parameter types, default values, effective values, and importance levels.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/06-parameterConfiguration/02server.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                   | Description                                                  | Parameter type | Default value | Effective value | Importance |\n| -------------------------------------- | ------------------------------------------------------------ | -------------- | ------------- | --------------- | ---------- |\n| accessMessageInMemorymaxRatio          | The ratio of accessing messages in memory                    | int            | 40(%)         |                 |            |\n| adminBrokerThreadPoolNums              | The number of threads in the server's processing control console management command thread pool | int            | 16            |                 |            |\n| autoCreateSubscriptionGroup            | Whether or not to automatically create consumer groups       | boolean        | true          | true/false      |            |\n| autoCreateTopicEnable                  | Whether or not to automatically create topics                | boolean        |               |                 |            |\n| bitMapLengthConsumeQueueExt            | The size of the extended filter bitmap for ConsumeQueue      | int            | 112           |                 |            |\n| brokerClusterName                      | Broker cluster name                                          | String         | TestCluster   |                 |            |\n| brokerFastFailureEnable                | Whether or not to support broker fast failure. If true, it means that the sending message thread pool and message pulling thread pool will immediately clear the queued tasks and return a system error | boolean        | true          |                 |            |\n| brokerId                               | BrokerID, 0 represents the main node, greater than 0 represents the slave node | int            | 0             |                 |            |\n| brokerIP1                              | Broker service address                                       | String         |               |                 |            |\n| brokerIP2                              | Broker HAIP address, used for slave message synchronization  | String         |               |                 |            |\n| brokerName                             | Broker server name, morning server hostname                  | String         | broker-a      |                 |            |\n| brokerPermission                       | Broker permissions, default is 6, meaning read-write         | int            | 6             |                 |            |\n| brokerRole                             | Broker role, divided into ASYNC_MASTER, SYNC_MASTER, SLAVE   | enum           | ASYNC_MASTER  |                 |            |\n| brokerTopicEnable                      | Whether or not broker name can be used as a subject          | boolean        |               |                 |            |\n| channelNotActiveInterval               |                                                              | long           |               |                 |            |\n| checkCRCOnRecover                      | Whether or not to verify CRC during file recovery            | boolean        |               |                 |            |\n| cleanFileForciblyEnable                | Whether or not to support forced deletion of expired files   | boolean        |               |                 |            |\n| cleanResourceInterval                  | Clear expired file thread scheduling frequency               | int            |               |                 |            |\n| clientAsyncSemaphoreValue              | The frequency of client calls to invokeAsyncImpl method      | int            |               |                 |            |\n| clientCallbackExecutorThreads          | The number of client callback threads                        | int            |               |                 |            |\n| clientChannelMaxIdleTimeSeconds        | The maximum waiting time for each channel of the client      | int            |               |                 |            |\n| clientCloseSocketIfTimeout             | Whether or not the client needs to wait when closing the socket | boolean        | false         |                 |            |\n| clientManagerThreadPoolQueueCapacity   | The initial size of the client management thread pool task queue | int            | 1000000       |                 |            |\n| clientManageThreadPoolNums             | The number of threads for server to process client management (heartbeat, registration, unregistration) | int            | 32            |                 |            |\n| clientOnewaySemaphoreValue             | The control of client calls to invokeOnewayImpl method.      | int            |               |                 |            |\n| clientPooledByteBufAllocatorEnable     | Whether client pooling memory enabled                        | boolean        |               |                 |            |\n| clientSocketRcvBufSize                 | Size of client socket receive buffer                         | long           |               |                 |            |\n| clientSocketSndBufSize                 | Size of client socket send buffer                            | long           |               |                 |            |\n| clientWorkerThreads                    | Number of worker threads                                     | int            |               |                 |            |\n| clusterTopicEnable                     | Whether cluster name is available for topic use              | boolean        |               |                 |            |\n| commercialBaseCount                    |                                                              |                |               |                 |            |\n| commercialBigCount                     |                                                              |                |               |                 |            |\n| commercialEnable                       |                                                              |                |               |                 |            |\n| commercialTimerCount                   |                                                              |                |               |                 |            |\n| commitCommitLogLeastPages              | Minimum number of dirty pages required for one commit, default 4 pages, for commitlog file | int            |               |                 |            |\n| commitCommitLogThoroughInterval        | Maximum interval between two commits of Commitlog, if exceeded, commitCommitLogLeastPages will be ignored and submitted directly | int            | 200           |                 |            |\n| commitIntervalCommitLog                | Commitlog commit frequency                                   | int            | 200           |                 |            |\n| compressedRegister                     | Whether message compression is enabled                       | boolean        |               |                 |            |\n| connectTimeoutMillis                   | Connection timeout time                                      | long           | 3000          |                 |            |\n| consumerFallbehindThreshold            | Message consumption piling threshold, default 16GB, effective when disableConsumeifConsumeIfConsumerReadSlowly is true | long           | 17179869184   |                 |            |\n| consumerManagerThreadPoolQueueCapacity | Size of consumer management thread pool task queue           | int            | 1000000       |                 |            |\n| consumerManageThreadPoolNums           | Server processing consumer management, getting consumer list, updating consumer progress, querying consumption progress, etc. | int            | 32            |                 |            |\n| debugLockEnable                        | Whether PutMessage Lock lock print information is supported  | boolean        | false         |                 |            |\n| defaultQueryMaxNum                     | Default number of messages returned for query, default 32    | int            | 32            |                 |            |\n| defaultTopicQueueNums                  | Number of queues created on a broker for a subject           | int            | 8             |                 |            |\n| deleteCommitLogFilesInterval           | Time interval for deleting commitlog files, delete one file and then wait for another file | int            | 100           |                 |            |\n| deleteConsumeQueueFilesInterval        | Time interval for deleting consumequeue files                | int            | 100           |                 |            |\n| deleteWhen                             | Under the condition of sufficient disk file space, what time of day to perform deleting expired files by default, 04 means 4am | string         | 04            |                 |            |\n| destroyMapedFileIntervalForcibly       | Maximum survival time of MappedFile that is rejected, default 120s. When the clear expired file thread first destroys the mappedfile, if the file is referenced by other threads, the reference count is greater than 0, the availability status of the MappedFile is set to false, and the first delete time is set. The next clear task arrives, if the system time is greater than the initial delete time plus this parameter, the ref count is reduced by 1000 once, until the reference count is less than 0, then release the physical resource | int            | 120000        |                 |            |\n| disableConsumeIfConsumerReadSlowly     | Whether to disable the consumer group from continuing to consume messages if the consumer group message consumption is piled up | boolean        | false         |                 |            |\n```\n\n----------------------------------------\n\nTITLE: Verifying GPG Signatures in Shell\nDESCRIPTION: Verifies GPG signatures for all .asc files in the current directory. Part of the release verification process.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nfor file in `find . -type f -iname '*.asc'`\ndo\n    gpg --verify ${file} \ndone\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Exporter for RocketMQ Broker Metrics\nDESCRIPTION: Configuration settings required to enable the Prometheus exporter for RocketMQ Broker metrics. Includes the mandatory exporter type setting and optional configurations for port and host.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/12-observability/01metrics.md#2025-04-09_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nmetricsExporterType=PROM\n\n# Optional configurations\nmetricsPromExporterPort=5557\nmetricsPromExporterHost=<broker-host-name>\n```\n\n----------------------------------------\n\nTITLE: Starting Debezium MySQL Source Connector\nDESCRIPTION: cURL command to start the Debezium MySQL source connector for synchronizing data from the MySQL database to RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/10-connect/06RocketMQ Connect In Action3.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/MySQLCDCSource1000 -d '{\n\"connector.class\": \"org.apache.rocketmq.connect.debezium.mysql.DebeziumMysqlConnector\",\n\"max.task\": \"1\",\n\"connect.topicname\": \"debezium-source-topic1000\",\n\"kafka.transforms\": \"Unwrap\",\n\"kafka.transforms.Unwrap.delete.handling.mode\": \"none\",\n\"kafka.transforms.Unwrap.type\": \"io.debezium.transforms.ExtractNewRecordState\",\n\"kafka.transforms.Unwrap.add.headers\": \"op,source.db,source.table\",\n\"database.history.skip.unparseable.ddl\": true,\n\"database.history.name.srv.addr\": \"localhost:9876\",\n\"database.history.rocketmq.topic\": \"db-history-debezium-topic1000\",\n\"database.history.store.only.monitored.tables.ddl\": true,\n\"include.schema.changes\": false,\n\"database.server.name\": \"dbserver1\",\n\"database.port\": 3306,\n\"database.hostname\": \"database ip\",\n\"database.connectionTimeZone\": \"UTC\",\n\"database.user\": \"debezium\",\n\"database.password\": \"dbz\",\n\"table.include.list\": \"bank.user\",\n\"max.batch.size\": 50,\n\"database.include.list\": \"bank\",\n\"snapshot.mode\": \"when_needed\",\n\"database.server.id\": \"184054\",\n\"key.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n\"value.converter\": \"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing a RocketMQ Producer in Java\nDESCRIPTION: Java example demonstrating how to create a RocketMQ producer that sends a message synchronously. It initializes a DefaultMQProducer, sets the Name Server address, creates and sends a message, and handles the result.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class ProducerExample {\n    public static void main(String[] args) throws Exception {\n        // Create producer instance and set the producer group name\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        // Set the Name Server address (replace with actual Name Server address)\n        producer.setNamesrvAddr(\"localhost:9876\");\n        producer.start();\n\n        try {\n            // Create a message instance, specifying the topic, tag, and message body\n            Message msg = new Message(\"TestTopic\", \"TagA\", (\"Hello RocketMQ\").getBytes());\n            // Send the message and get the send result\n            SendResult sendResult = producer.send(msg);\n            System.out.println(\"Message sent: \" + new String(msg.getBody()));\n            System.out.println(\"Send result: \" + sendResult);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Message sending failed.\");\n        } finally {\n            // Shutdown the producer\n            producer.shutdown();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Bulk Data Operations\nDESCRIPTION: Example Elasticsearch commands for writing and querying test data using Kibana Dev Tools.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPOST /_bulk\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"1\", \"field1\": \"value1\", \"field2\": \"value2\" }\n{ \"index\" : { \"_index\" : \"connect_es\" } }\n{ \"id\": \"2\", \"field1\": \"value3\", \"field2\": \"value4\" }\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Node Multiple Replica Broker+Proxy with Synchronous Dual Write\nDESCRIPTION: Commands to start a Broker cluster with Master-Slave pairs using synchronous replication. This configuration provides the highest data reliability with a slight performance overhead.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a.properties --enable-proxy &\n \n### On machine B, start the second Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b.properties --enable-proxy &\n \n### On machine C, start the first slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a-s.properties --enable-proxy &\n \n### On machine D, start the second slave, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b-s.properties --enable-proxy &\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageListener with Logging in RocketMQ Consumer\nDESCRIPTION: This code demonstrates how to implement a MessageListener interface for a RocketMQ consumer with proper logging. It includes logging the message content before processing and returning a success result after consumption, which is useful for troubleshooting and monitoring message processing.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/01bestpractice.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n   new MessageListener() {\n        @Override\n        public ConsumeResult consume(MessageView messageView) {\n            LOGGER.info(\"Consume message={}\", messageView);\n            //Do your consume process\n            return ConsumeResult.SUCCESS;\n            }\n    }\n```\n\n----------------------------------------\n\nTITLE: Documenting RocketMQ sendMessage Command Parameters\nDESCRIPTION: Lists and describes the parameters for the sendMessage command in RocketMQ. This command is used to send a message, which can be sent to a specific message queue based on configuration, or as a normal send.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-h    Print help\n-n    NameServer address, format ip:port\n-t    topic name\n-p    message body\n-k    keys\n-c    tags\n-b    BrokerName\n-i    queueId\n```\n\n----------------------------------------\n\nTITLE: Creating Event Source in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create an event source in RocketMQ EventBridge, specifying the event bus name, source name, and description.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /source/createEventSource HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n\"eventBusName\":\"demo-bus\",\n\"eventSourceName\":\"demo-source\",\n\"description\":\"A demo source.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Consumer Usage in Java for Apache RocketMQ\nDESCRIPTION: This snippet shows an inefficient and not recommended way of using consumers in Apache RocketMQ. It creates and destroys a consumer for each message, which can lead to performance issues due to frequent creation of short-lived connections.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/03-domainModel/08consumer.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nfor (int i =0;i<n;i++){\n    Consumer c = ConsumerBuilder.build();\n    Message m= c.receive();\n    //process message\n    c.shutdown();\n  }\n```\n\n----------------------------------------\n\nTITLE: RocketMQ 4.3.1 Download Links (Markdown)\nDESCRIPTION: Download links and verification files for RocketMQ 4.3.1 source and binary releases, including PGP signatures, MD5 and SHA1 checksums.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/release-notes/2018-08-29-4.3.1.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Source: [rocketmq-all-4.3.1-source-release.zip](https://archive.apache.org/dist/rocketmq/4.3.1/rocketmq-all-4.3.1-source-release.zip) [[PGP](https://archive.apache.org/dist/rocketmq/4.3.1/rocketmq-all-4.3.1-source-release.zip.asc)] [[MD5](https://archive.apache.org/dist/rocketmq/4.3.1/rocketmq-all-4.3.1-source-release.zip.md5)] [[SHA1](https://archive.apache.org/dist/rocketmq/4.3.1/rocketmq-all-4.3.1-source-release.zip.sha1)]\n* Binary: [rocketmq-all-4.3.1-bin-release.zip](https://archive.apache.org/dist/rocketmq/4.3.1/rocketmq-all-4.3.1-bin-release.zip) [[PGP](https://archive.apache.org/dist/rocketmq/4.3.1/rocketmq-all-4.3.1-bin-release.zip.asc)] [[MD5](https://archive.apache.org/dist/rocketmq/4.3.1/rocketmq-all-4.3.1-bin-release.zip.md5)] [[SHA1](https://archive.apache.org/dist/rocketmq/4.3.1/rocketmq-all-4.3.1-bin-release.zip.sha1)]\n```\n\n----------------------------------------\n\nTITLE: Collecting Topic Offset in Java\nDESCRIPTION: This code snippet is part of the MetricCollectTask class, specifically the collectTopicOffset task. It fetches topic information from the cluster, examines topic stats, and adds the collected metrics to the RMQMetricsCollector.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/04Exporter.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nTopicList topicList = null;\ntry {  \n    topicList = mqAdminExt.fetchAllTopicList();\n} catch (Exception ex) {\n        log.error(String.format(\"collectTopicOffset-exception comes getting topic list from namesrv, address is %s\",\n            JSON.toJSONString(mqAdminExt.getNameServerAddressList())));\n        return;\n}\n\nSet < String > topicSet = topicList != null ? topicList.getTopicList() : null;\nfor (String topic: topicSet) {\n     TopicStatsTable topicStats = null;\n     try {\n         topicStats = mqAdminExt.examineTopicStats(topic);\n     } catch (Exception ex) {\n         log.error(String.format(\"collectTopicOffset-getting topic(%s) stats error. the namesrv address is %s\",\n             topic,\n             JSON.toJSONString(mqAdminExt.getNameServerAddressList())));\n         continue;\n     }\n\nSet<Map.Entry<MessageQueue, TopicOffset>> topicStatusEntries = topicStats.getOffsetTable().entrySet();\nHashMap<String, Long> brokerOffsetMap = new HashMap<>();\nHashMap<String, Long> brokerUpdateTimestampMap = new HashMap<>();\nfor (Map.Entry<MessageQueue, TopicOffset> topicStatusEntry : topicStatusEntries) {\n    MessageQueue q = topicStatusEntry.getKey();\n    TopicOffset offset = topicStatusEntry.getValue();\n    if (brokerOffsetMap.containsKey(q.getBrokerName())) {\n        brokerOffsetMap.put(q.getBrokerName(), brokerOffsetMap.get(q.getBrokerName()) + offset.getMaxOffset());\n    } else {\n        brokerOffsetMap.put(q.getBrokerName(), offset.getMaxOffset());\n    }\n    if (brokerUpdateTimestampMap.containsKey(q.getBrokerName())) {\n        if (offset.getLastUpdateTimestamp() > brokerUpdateTimestampMap.get(q.getBrokerName())) {\n            brokerUpdateTimestampMap.put(q.getBrokerName(), offset.getLastUpdateTimestamp());\n        }\n    } else {\n        brokerUpdateTimestampMap.put(q.getBrokerName(),\n        offset.getLastUpdateTimestamp());\n    }\n}\n\nSet<Map.Entry<String, Long>> brokerOffsetEntries = brokerOffsetMap.entrySet();\n        for (Map.Entry<String, Long> brokerOffsetEntry : brokerOffsetEntries) {\n            metricsService.getCollector().addTopicOffsetMetric(clusterName, brokerOffsetEntry.getKey(), topic,\n                brokerUpdateTimestampMap.get(brokerOffsetEntry.getKey()), brokerOffsetEntry.getValue());\n        }\n    }\n    log.info(\"topic offset collection task finished....\" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker IP Address for RocketMQ\nDESCRIPTION: Creates a broker.conf file with the broker's IP address set to the localhost (127.0.0.1). This configuration file will be mounted into the RocketMQ broker container.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Configure the broker's IP address\necho \"brokerIP1=127.0.0.1\" > broker.conf\n```\n\n----------------------------------------\n\nTITLE: Creating FIFO Topic with mqadmin\nDESCRIPTION: Command to create a topic with FIFO message type using the mqadmin tool. Requires nameserver address, topic name, and cluster name parameters.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/03fifomessage.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=FIFO\n```\n\n----------------------------------------\n\nTITLE: Deploying SFTP Source Connector via REST API\nDESCRIPTION: HTTP request to the RocketMQ Connect REST API to create and configure an SFTP source connector that reads from a file and publishes to a RocketMQ topic. Includes connection details and schema information.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST --location \"http://localhost:8082/connectors/SftpSourceConnector\" --http1.1 \\\n    -H \"Host: localhost:8082\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"connector.class\": \"org.apache.rocketmq.connect.http.sink.SftpSourceConnector\",\n          \"host\": \"127.0.0.1\",\n          \"port\": 22,\n          \"username\": \"YourUsername\",\n          \"password\": \"yourPassword\",\n          \"filePath\": \"/Users/YourUsername/rocketmqconnect/sftp-test/source.txt\",\n          \"connect.topicname\": \"sftpTopic\",\n          \"fieldSeparator\": \"|\",\n          \"fieldSchema\": \"username|idCardNo|orderNo|orderAmount|trxDate|trxTime|profit\"\n        }'\n```\n\n----------------------------------------\n\nTITLE: GroupedStream Operations API\nDESCRIPTION: Methods for operating on grouped data streams, including aggregation functions, window operations, and custom operators.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/09-streams/02RocketMQ Streams Concept.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n<OUT> GroupedStream<K, Integer> count(selectAction)\nGroupedStream<K, V> min(selectAction)\nGroupedStream<K, V> max(selectAction)\nGroupedStream<K, ? extends Number> sum(selectAction)\nGroupedStream<K, V> filter(predictor)\n<OUT> GroupedStream<K, OUT> map(valueMapperAction)\n<OUT> GroupedStream<K, OUT> aggregate(accumulator)\nWindowStream<K, V> window(windowInfo)\nGroupedStream<K, V> addGraphNode(name, supplier)\nRStream<V> toRStream()\nsink(topicName, serializer)\n```\n\n----------------------------------------\n\nTITLE: Setting Name Server Address via Environment Variable\nDESCRIPTION: Shows how to set Name Server addresses using environment variables in shell.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/06-parameterConfiguration/01local.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport   NAMESRV_ADDR=192.168.0.1:9876;192.168.0.2:9876   \n```\n\n----------------------------------------\n\nTITLE: Starting Elasticsearch Source Connector with curl\nDESCRIPTION: This curl command starts the Elasticsearch source connector. It configures the connector to read from the 'connect_es' index on localhost:9200 and send data to the 'ConnectEsTopic' in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/elasticsearchSourceConnector -d  '{\n  \"connector.class\":\"org.apache.rocketmq.connect.elasticsearch.connector.ElasticsearchSourceConnector\",\n    \"elasticsearchHost\":\"localhost\",\n    \"elasticsearchPort\":9200,\n    \"index\":{\n        \"connect_es\": {\n            \"primaryShards\":1,\n            \"id\":1\n        }\n    },\n    \"max.tasks\":2,\n    \"connect.topicname\":\"ConnectEsTopic\",\n    \"value.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n    \"key.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Handling NAME_SERVER_ADDR_NOT_EXIST_URL Exception in Java\nDESCRIPTION: This snippet shows two possible exception messages when there's an error in obtaining the NameServer address information for a Producer or Consumer in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nNo name server address, please set it\n```\n\nLANGUAGE: java\nCODE:\n```\nconnect to xxx failed, maybe the domain name xxx not bind in /etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Implementing Traditional Pull Consumer in RocketMQ Java\nDESCRIPTION: This code demonstrates how to initialize a DefaultMQPullConsumer, construct a MessageQueue, pull messages from a specific queue, and update the consume offset. It showcases the basic workflow of a traditional Pull Consumer in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/03pull.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class PullConsumerTest {\n  public static void main(String[] args) throws MQClientException {\n    DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(\"please_rename_unique_group_name_5\");\n    consumer.setNamesrvAddr(\"127.0.0.1:9876\");\n    consumer.start();\n    try {\n      MessageQueue mq = new MessageQueue();\n      mq.setQueueId(0);\n      mq.setTopic(\"TopicTest\");\n      mq.setBrokerName(\"jinrongtong-MacBook-Pro.local\");\n      long offset = 26;\n      PullResult pullResult = consumer.pull(mq, \"*\", offset, 32);\n      if (pullResult.getPullStatus().equals(PullStatus.FOUND)) {\n        System.out.printf(\"%s%n\", pullResult.getMsgFoundList());\n        consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    consumer.shutdown();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RocketMQ Client Dependency in Gradle\nDESCRIPTION: This Gradle dependency configuration adds the RocketMQ client library to a Java project. It specifies the group ID, artifact ID, and version of the RocketMQ client.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/02message1.md#2025-04-09_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\ncompile 'org.apache.rocketmq:rocketmq-client:4.9.4'\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic with Message Type in Apache RocketMQ 5.0\nDESCRIPTION: Example of using the mqadmin tool to create a topic in Apache RocketMQ 5.0 with a specific message type property. The command allows specifying nameserver address, topic name, cluster name, and message type (Normal, FIFO, Delay, or Transaction).\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/03-domainModel/02topic.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=<message_type>\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j Properties for RocketMQ Client\nDESCRIPTION: Properties file configuration for Log4j when used with RocketMQ client. Defines appender, layout, and RocketMQ-specific settings like topic and producer group.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/06log.md#2025-04-09_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nlog4j.appender.mq=org.apache.rocketmq.logappender.log4j.RocketmqLog4jAppender \nlog4j.appender.mq.Tag=yourTag \nlog4j.appender.mq.Topic=yourLogTopic \nlog4j.appender.mq.ProducerGroup=yourLogGroup \nlog4j.appender.mq.NameServerAddress=yourRocketmqNameserverAddress \nlog4j.appender.mq.layout=org.apache.log4j.PatternLayout \nlog4j.appender.mq.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-4r [%t] (%F:%L) %-5p - %m%n \n```\n\n----------------------------------------\n\nTITLE: Starting Elasticsearch Sink Connector with curl\nDESCRIPTION: This curl command starts the Elasticsearch sink connector. It configures the connector to consume data from the 'ConnectEsTopic' in RocketMQ and write it to Elasticsearch running on localhost:9201.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/elasticsearchSinkConnector -d '{\n  \"connector.class\":\"org.apache.rocketmq.connect.elasticsearch.connector.ElasticsearchSinkConnector\",\n    \"elasticsearchHost\":\"localhost\",\n    \"elasticsearchPort\":9201,\n    \"max.tasks\":2,\n    \"connect.topicnames\":\"ConnectEsTopic\",\n    \"value.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n    \"key.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ Connect Runtime Environment in Shell\nDESCRIPTION: Commands to clone and build the RocketMQ Connect runtime environment from source code. This prepares the foundation for running connector plugins.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/rocketmq-connect.git\n\ncd  rocketmq-connect\n\nexport RMQ_CONNECT_HOME=`pwd`\n\nmvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n```\n\n----------------------------------------\n\nTITLE: Documenting RocketMQ printMsg Command Parameters\nDESCRIPTION: Lists and describes the parameters for the printMsg command in RocketMQ. This command is used to consume messages from a Broker and print them, with an optional time period.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n-h    Print help\n-n    NameServer address, format ip:port\n-t    topic name\n-c    Character set, e.g. UTF-8\n-s    subExpress, filter expression\n```\n\n----------------------------------------\n\nTITLE: Documenting Producer Metrics in Markdown\nDESCRIPTION: This snippet presents a markdown table listing various producer metrics in RocketMQ. It includes metric names and definitions for producer-related performance indicators such as offsets, TPS, and message sizes at both topic and queue levels.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/04Exporter.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Producer metrics\n\n| Metrics name                         | Definition                                                   |\n| ------------------------------------ | ------------------------------------------------------------ |\n| rocketmq_producer_offset             | The maximum offset of the topic at the current time          |\n| rocketmq_topic_retry_offset          | The maximum offset of the retry topic at the current time    |\n| rocketmq_topic_dlq_offset            | The maximum offset of the dead letter topic at the current time |\n| rocketmq_producer_tps                | The production TPS of the topic on a Broker group            |\n| rocketmq_producer_message_size       | The TPS of the production message size of the topic on a Broker group |\n| rocketmq_queue_producer_tps          | Queue-level production TPS                                   |\n| rocketmq_queue_producer_message_size | Queue-level production TPS of message size                   |\n```\n\n----------------------------------------\n\nTITLE: Defining the 'No Expectation' Characteristic of Events\nDESCRIPTION: This code block explains the 'No Expectation' characteristic of events, emphasizing that events are objective descriptions of changes without inherent expectations for handling.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nAn event is an objective description of a change in the state or attribute value of a thing, but it does not make any expectations about how to handle the event itself. In contrast, both Command and Query have expectations, they hope the system will make changes or return results, but the Event is just an objective description of a change in the system.\n```\n\n----------------------------------------\n\nTITLE: Stopping DLedger Cluster\nDESCRIPTION: Command to stop the DLedger cluster deployment\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/02dledger.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/dledger/fast-try.sh stop\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Connect Standalone Configuration Example\nDESCRIPTION: Sample configuration for RocketMQ Connect in standalone mode, specifying worker ID, storage directory, HTTP port, RocketMQ connection details, and plugin paths.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nworkerId=standalone-worker\nstorePathRootDir=/Users/YourUsername/rocketmqconnect/storeRoot\n\n## Http port for user to access REST API\nhttpPort=8082\n\n# Rocketmq namesrvAddr\nnamesrvAddr=localhost:9876\n\n# RocketMQ acl\naclEnable=false\n#accessKey=rocketmq\n#secretKey=12345678\n\nclusterName=\"DefaultCluster\"\n\n# 插件地址，用于Worker加载Source/Sink Connector插件\npluginPaths=/Users/YourUsername/rocketmqconnect/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Node Single Replica Broker+Proxy Cluster in Local Mode\nDESCRIPTION: Commands to start a multi-Master Broker cluster with Proxy enabled in each node. This configuration provides better availability than single node but without replica protection.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-a.properties --enable-proxy &\n \n### On machine A, start the second Master, for example, the IP of the NameServer is: 192.168.1.1\n$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-b.properties --enable-proxy &\n\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Messages by Unique Key in RocketMQ (Markdown)\nDESCRIPTION: This snippet outlines the 'queryMsgByUniqueKey' command used to query a message by its unique msgId in RocketMQ. It includes options for printing help, setting the NameServer address, specifying the unique message ID, consumer group, client ID, and topic name.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| queryMsgByUniqueKey | Query based on msgId. Note that msgId is different from offsetMsgId. For more information, see Common Operations and Maintenance Issues. Use -g and -d together to try to have a specific consumer consume the message and return the consumption result once the message has been found. | -h | Print help |\n| | | -n | NameServer address,format ip:port |\n| | | -i | unique msg id |\n| | | -g | consumerGroup |\n| | | -d | clientId |\n| | | -t | topic name |\n```\n\n----------------------------------------\n\nTITLE: Installing Helm 3 in Kubernetes\nDESCRIPTION: Command to install Helm 3 using a script from the official Helm repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n```\n\n----------------------------------------\n\nTITLE: Implementing RocketMQ Message Producer in Java\nDESCRIPTION: Java implementation of a message producer that connects to the RocketMQ proxy in Kubernetes and sends a message to a specified topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.rocketmq.producer;\n\nimport org.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientConfigurationBuilder;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.message.Message;\nimport org.apache.rocketmq.client.apis.producer.Producer;\nimport org.apache.rocketmq.client.apis.producer.SendReceipt;\n\npublic class ProducerDemo {\n    public static void main(String[] args) throws ClientException {\n        // The endpoint address, which needs to be set to the address and port list of the Proxy; the following is the proxy address in the k8s environment.\n        String endpoint = \"192.168.85.227:8081\";\n        // The target Topic name for sending messages, which needs to be created in advance.\n        String topic = \"TestTopic\";\n        ClientServiceProvider provider = ClientServiceProvider.loadService();\n        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);\n        ClientConfiguration configuration = builder.build();\n        // When initializing the Producer, communication configuration and pre-bound Topic need to be set.\n        Producer producer = provider.newProducerBuilder()\n            .setTopics(topic)\n            .setClientConfiguration(configuration)\n            .build();\n        // Sending normal messages.\n        Message message = provider.newMessageBuilder()\n            .setTopic(topic)\n            // Set message index key for precise search of a specific message.\n            .setKeys(\"messageKey\")\n            // Set message Tag for filtering messages based on specific tags on the consumer side.\n            .setTag(\"messageTag\")\n            // Message body.\n            .setBody(\"messageBody\".getBytes())\n            .build();\n        try {\n            // Send the message, you need to pay attention to the sending result and handle failures and other exceptions.\n            SendReceipt sendReceipt = producer.send(message);\n            System.out.println(\"Send message successfully, messageId=\" + sendReceipt.getMessageId());\n        } catch (ClientException e) {\n        }\n        // producer.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with SimpleConsumer in Java\nDESCRIPTION: This code snippet demonstrates how to consume messages using a SimpleConsumer in Apache RocketMQ. It shows how to handle retries by allowing messages to timeout and be automatically retried by the broker.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/10consumerretrypolicy.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Consumption example: Consume normal messages as a simple consumer. If you want a message to be retried, do not process the message. Wait for it to time out, and the broker retries it automatically. \nList<MessageView> messageViewList = null;\ntry {\n    messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));\n    messageViewList.forEach(messageView -> {\n        System.out.println(messageView);\n        // If you want a message to be retried after it fails to be consumed, ignore the failure and wait for the message to be visible. Then try to obtain it again from the broker. \n    });\n} catch (ClientException e) {\n    // If the message fails to be pulled due to throttling or other reasons, you must re-initiate the request to obtain the message. \n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Additional Test Data and Verifying Transfer\nDESCRIPTION: Commands to add more test data to the source file and check if it was successfully transferred to the sink file after a brief delay, demonstrating continuous data flow.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncd /Users/YourUsername/rocketmqconnect/sftp-test/\n\necho '张三x|100000202211290001|20221129001|30000.00|2022-11-28|03:00:00|7.00\n李四x|100000202211290002|20221129002|40000.00|2022-11-28|04:00:00|9.00\n赵五x|100000202211290003|20221129003|50000.00|2022-11-28|05:00:00|12.00' >> source.txt\n\n# Wait a few seconds, check if rocketmq-connect replicate data to sink file succeed \nsleep 10\ncat /Users/YourUsername/rocketmqconnect/sftp-test/sink.txt\n```\n\n----------------------------------------\n\nTITLE: Starting NameServer Container\nDESCRIPTION: Commands to start and verify RocketMQ NameServer container.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/02quickstartWithDocker.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Start NameServer\ndocker run -d --name rmqnamesrv -p 9876:9876 --net rocketmq apache/rocketmq:4.9.6 sh mqnamesrv\n\n# Verify if NameServer started successfully\ndocker logs -f rmqnamesrv\n```\n\n----------------------------------------\n\nTITLE: Maven SCM Configuration for Release\nDESCRIPTION: XML configuration for the Source Control Management (SCM) section in pom.xml required for Maven release plugin.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<scm>\n    <url>git@github.com:apache/rocketmq.git</url>\n    <connection>scm:git:git@github.com:apache/rocketmq.git</connection>\n    <developerConnection>scm:git:git@github.com:apache/rocketmq.git</developerConnection>\n    <tag>rocketmq-all-x.x.x</tag>\n</scm>\n```\n\n----------------------------------------\n\nTITLE: Topic Management UI Component in React/JSX\nDESCRIPTION: A React component rendering a table of RocketMQ topic management commands. The table includes commands like topicClusterList, updateTopicPerm, updateOrderConf, allocateMQ, and statsAll with their respective parameters and descriptions.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/02admintool.md#2025-04-09_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<tr height={23} style={{ height: \"17.0pt\" }}>\n  <td\n    height={23}\n    className=\"xl65\"\n    width={149}\n    style={{ height: \"17.0pt\", width: \"112pt\" }}\n  >\n    -h\n  </td>\n  <td className=\"xl66\" width={159} style={{ width: \"119pt\" }}>\n    Print help\n  </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving RocketMQ Messages\nDESCRIPTION: Setting the NameServer address and running example producer and consumer scripts to test message sending and receiving functionality in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/01quickstart.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ export NAMESRV_ADDR=localhost:9876\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Describing the 'Materialize' Characteristic of Events\nDESCRIPTION: This code block outlines the 'Materialize' characteristic of events, explaining that events attempt to record as much detail as possible about the 'crime scene' due to unknown consumer requirements.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWhen did the event occur?\nWho generated it?\nWhat type of event is it?\nWhat is the content of the event? What is the structure of the content?\n... ...\n```\n\n----------------------------------------\n\nTITLE: Building DLedger from Source\nDESCRIPTION: Commands to clone and build DLedger from source code using Maven\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/02dledger.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/openmessaging/dledger.git\n$ cd dledger\n$ mvn clean install -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Documenting Broker Runtime Metrics in Markdown\nDESCRIPTION: This snippet presents a markdown table listing various broker runtime metrics in RocketMQ. It includes metric names, definitions, and corresponding method names for metrics such as transfer rates, miss rates, and put rates over different time intervals.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/04Exporter.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| rocketmq_brokeruntime_gettransfered_tps600                   |                                                              | getTransferedTps                      |\n| rocketmq_brokeruntime_gettransfered_tps60                    |                                                              |                                       |\n| rocketmq_brokeruntime_gettransfered_tps10                    |                                                              |                                       |\n| rocketmq_brokeruntime_getmiss_tps600                         | Average TPS for getMessage with no messages obtained in the past 600 seconds | getMissTps                            |\n| rocketmq_brokeruntime_getmiss_tps60                          | Average TPS for getMessage with no messages obtained in the past 60 seconds |                                       |\n| rocketmq_brokeruntime_getmiss_tps10                          | Average TPS for getMessage with no messages obtained in the past 10 seconds |                                       |\n| rocketmq_brokeruntime_put_tps600                             | Average TPS for message write operations in the past 600 seconds | putTps                                |\n| rocketmq_brokeruntime_put_tps60                              | Average TPS for message write operations in the past 60 seconds |                                       |\n| rocketmq_brokeruntime_put_tps10                              | Average TPS for message write operations in the past 10 seconds |                                       |\n```\n\n----------------------------------------\n\nTITLE: Starting Elasticsearch Sink Connector\nDESCRIPTION: curl command to start the Elasticsearch sink connector, which consumes data from RocketMQ and writes it to the destination Elasticsearch.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/elasticsearchSinkConnector -d '{\n  \"connector.class\":\"org.apache.rocketmq.connect.elasticsearch.connector.ElasticsearchSinkConnector\",\n    \"elasticsearchHost\":\"localhost\",\n    \"elasticsearchPort\":9201,\n    \"max.tasks\":2,\n    \"connect.topicnames\":\"ConnectEsTopic\",\n    \"value.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\",\n    \"key.converter\":\"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Executing RocketMQ Admin Commands\nDESCRIPTION: Basic command structure for executing RocketMQ admin tools. The command requires specifying the operation and any relevant arguments, with optional NameServer configuration using the -n flag.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mqadmin {command} {args}\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker Properties for Message Tracing in RocketMQ\nDESCRIPTION: Broker configuration file that enables message tracing in RocketMQ. The key property 'traceTopicEnable=true' activates the message trace feature on the broker node.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/03messagetra.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nstorePathRootDir=/data/rocketmq/rootdir-a-m\nstorePathCommitLog=/data/rocketmq/commitlog-a-m\nautoCreateSubscriptionGroup=true\n## if msg tracing is open,the flag will be true\ntraceTopicEnable=true\nlistenPort=10911\nbrokerIP1=XX.XX.XX.XX1\nnamesrvAddr=XX.XX.XX.XX:9876\n```\n\n----------------------------------------\n\nTITLE: Implementing a RocketMQ Consumer in Java\nDESCRIPTION: Java example demonstrating how to create a RocketMQ consumer using the Push consumption mode. It initializes a DefaultMQPushConsumer, sets the Name Server address, subscribes to a topic, and registers a message listener to process received messages.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/03quickstartWithDockercompose.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class ConsumerExample {\n    public static void main(String[] args) throws Exception {\n        // Create consumer instance and set the consumer group name\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name\");\n        // Set the Name Server address (replace with actual Name Server address)\n        consumer.setNamesrvAddr(\"localhost:9876\");\n        // Subscribe to the specified topic and tag (* means all tags)\n        consumer.subscribe(\"TestTopic\", \"*\");\n\n        // Register message listener\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                for (MessageExt msg : msgs) {\n                    System.out.println(\"Received message: \" + new String(msg.getBody()));\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        // Start the consumer\n        consumer.start();\n        System.out.println(\"Consumer started.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ with DLedger Support\nDESCRIPTION: Commands to clone RocketMQ, checkout DLedger branch, and build using Maven\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/02dledger.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/apache/rocketmq.git\n$ cd rocketmq\n$ git checkout -b store_with_dledger origin/store_with_dledger\n$ mvn -Prelease-all -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Querying Messages by Key in RocketMQ (Markdown)\nDESCRIPTION: This snippet outlines the 'queryMsgByKey' command used to query a message by its key in RocketMQ. It includes options for specifying the message key, topic name, printing help, and setting the NameServer address.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/04-deployment/02admintool.md#2025-04-09_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| queryMsgByKey | Query a message by key. | -k | msgKey |\n| | | -t | Topic name |\n| | | -h | Print help |\n| | | -n | NameServer address,format ip:port |\n```\n\n----------------------------------------\n\nTITLE: Downloading RocketMQ Helm Chart in Bash\nDESCRIPTION: Commands to download and extract the RocketMQ Helm chart from the OCI registry for Kubernetes deployment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm pull oci://registry-1.docker.io/apache/rocketmq --version 0.0.1 \n$ tar -zxvf rocketmq-0.0.1.tgz\n```\n\n----------------------------------------\n\nTITLE: Standalone Connect Configuration\nDESCRIPTION: Example configuration for running RocketMQ Connect in standalone mode with Elasticsearch connector.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nworkerId=standalone-worker\nstorePathRootDir=/Users/YourUsername/rocketmqconnect/storeRoot\n\n## Http port for user to access REST API\nhttpPort=8082\n\n# Rocketmq namesrvAddr\nnamesrvAddr=localhost:9876\n\n# RocketMQ acl\naclEnable=false\n#accessKey=rocketmq\n#secretKey=12345678\n\nclusterName=\"DefaultCluster\"\n\n# Plugin path for loading Source/Sink Connectors\npluginPaths=/Users/YourUsername/rocketmqconnect/connector-plugins\n```\n\n----------------------------------------\n\nTITLE: Pushing to Apache Repository\nDESCRIPTION: Commands to push merged changes to the main Apache repository and personal fork.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit push apache develop\ngit push origin develop\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Client Logger Configuration for Linux\nDESCRIPTION: Example JVM system properties configuration for RocketMQ client logging on Linux systems. Specifies log directory, level, maximum index, and file size settings.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/06log.md#2025-04-09_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n-Drocketmq.client.logRoot=/home/admin/logs -Drocketmq.client.logLevel=WARN -Drocketmq.client.logFileMaxIndex=20  -Drocketmq.client.logFileMaxSize=67108864\n```\n\n----------------------------------------\n\nTITLE: Starting NameServer in Local Mode for RocketMQ 5.0\nDESCRIPTION: Commands to start the NameServer component in Local mode and verify successful startup. The NameServer is the service discovery component in RocketMQ that brokers and clients connect to.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/01deploy.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n### Start Name Server first\n$ nohup sh mqnamesrv &\n \n### Verify that the Name Server has started successfully.\n$ tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n----------------------------------------\n\nTITLE: Listing Git Tags in Shell\nDESCRIPTION: Lists all Git tags with their descriptions. Used to find the most recently created tag during the rollback process.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -ln\n```\n\n----------------------------------------\n\nTITLE: Pulling RocketMQ Docker Image\nDESCRIPTION: Command to pull RocketMQ 4.9.6 image from Docker Hub.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/02quickstartWithDocker.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull apache/rocketmq:4.9.6\n```\n\n----------------------------------------\n\nTITLE: Consumer Metrics Table in Markdown\nDESCRIPTION: Table listing consumer-related metrics including group statistics, consumption performance metrics, and latency measurements.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/05-deploymentOperations/05Exporter.md#2025-04-09_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Metrics name | Definition |\n| ------------ | ----------- |\n| rocketmq_group_diff | Consumer group message accumulation message count |\n| rocketmq_group_retrydiff | Consumer group retry queue accumulation message count |\n| rocketmq_group_dlqdiff | Consumer group dead letter queue accumulation message count |\n| rocketmq_group_count | Number of consumers in the consumer group |\n| rocketmq_client_consume_fail_msg_count | Number of times consumers in the consumer group have failed to consume in the past 1 hour |\n| rocketmq_client_consume_fail_msg_tps | Consumer group consumer failure TPS |\n| rocketmq_client_consume_ok_msg_tps | Consumer group consumer success TPS |\n| rocketmq_client_consume_rt | Time taken for a message to be consumed after it has been pulled |\n| rocketmq_client_consumer_pull_rt | Time taken for a client to pull a message |\n| rocketmq_client_consumer_pull_tps | Client pull message TPS |\n| rocketmq_consumer_tps | Consumption TPS of subscription group on each Broker group |\n| rocketmq_group_consume_tps | Current consumption TPS of subscription group (aggregated by broker for rocketmq_consumer_tps) |\n| rocketmq_consumer_offset | The current consumption Offset of the subscription group in a broker group |\n| rocketmq_group_consume_total_offset | The current consumption Offset of the subscription group (aggregated by broker for rocketmq_consumer_offset) |\n| rocketmq_consumer_message_size | The TPS of the subscription group consuming message size in a broker group |\n| rocketmq_send_back_nums | The number of times the subscription group in a broker group has failed to consume and written to the retry message |\n| rocketmq_group_get_latency_by_storetime | The consumption delay of the consumer group, the difference between the current time and when the exporter gets the message. |\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Git Tag in Shell\nDESCRIPTION: Removes a specific Git tag from the local repository. Part of the rollback process to undo release preparations.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -d rocketmq-all-x1.x2.x3\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages with Custom Attribute Filter in Java\nDESCRIPTION: This snippet shows how to subscribe to messages in Apache RocketMQ using a custom attribute filter. It creates a FilterExpression that only allows messages with the 'Region' attribute set to 'Hangzhou'.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/04-featureBehavior/07messagefilter.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nString topic = \"topic\";\n// Subscribe only to messages whose value of the region attribute is Hangzhou. \nFilterExpression filterExpression = new FilterExpression(\"Region IS NOT NULL AND Region='Hangzhou'\", FilterExpressionType.SQL92);\nsimpleConsumer.subscribe(topic, filterExpression);\n```\n\n----------------------------------------\n\nTITLE: Building RocketMQ from Source\nDESCRIPTION: Commands to clone, checkout the develop branch, and build RocketMQ from source code.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/apache/rocketmq.git\n$ cd rocketmq\n$ git checkout -b develop origin/develop\n$ mvn -Prelease-all -DskipTests clean install -U\n```\n\n----------------------------------------\n\nTITLE: Apache License File Path\nDESCRIPTION: The file path to the Apache license template that should be applied to source code files in the project.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/02code-guidelines.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```rocketmq/style/copyright/Apache.xml```\n```\n\n----------------------------------------\n\nTITLE: Starting RocketMQ EventBridge\nDESCRIPTION: Shell command to start the RocketMQ EventBridge service using the provided script.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsh bin/eventbridge.sh start\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduled Messages with Apache RocketMQ in Java\nDESCRIPTION: This code demonstrates how to send scheduled messages using Apache RocketMQ. It creates a producer, sends 100 messages with a delay level of 3 (10 seconds), and then shuts down the producer.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/04message3.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ScheduledMessageProducer {\n    public static void main(String[] args) throws Exception {\n        // Instantiate a producer to send scheduled messages\n        DefaultMQProducer producer = new DefaultMQProducer(\"ExampleProducerGroup\");\n        // Launch producer\n        producer.start();\n        int totalMessagesToSend = 100;\n        for (int i = 0; i < totalMessagesToSend; i++) {\n            Message message = new Message(\"TestTopic\", (\"Hello scheduled message \" + i).getBytes());\n            // This message will be delivered to consumer 10 seconds later.\n            message.setDelayTimeLevel(3);\n            // Send the message\n            producer.send(message);\n        }\n        \n        // Shutdown producer after use.\n        producer.shutdown();\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up RocketMQ Topics and Groups in Bash\nDESCRIPTION: Commands to access the RocketMQ broker pod and create a topic and subscription group using the mqadmin tool.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/04quickstartWithHelmInKubernetes.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Log into the pod\n$ kubectl exec -ti rocketmq-demo-broker-0  -- /bin/bash\n\n# Create Topic using mqadmin tools\n$ sh mqadmin updatetopic  -t TestTopic -c DefaultCluster\n\n# Create subscription group using mqadmin tools\n$ sh mqadmin updateSubGroup -c DefaultCluster -g TestGroup\n```\n\n----------------------------------------\n\nTITLE: Java Producer Example with RocketMQ Client SDK\nDESCRIPTION: Complete Java example for creating a message producer that connects to a RocketMQ broker and sends a message to the specified topic.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/01quickstart.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.IOException;\nimport org.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientConfigurationBuilder;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.message.Message;\nimport org.apache.rocketmq.client.apis.producer.Producer;\nimport org.apache.rocketmq.client.apis.producer.SendReceipt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProducerExample {\n    private static final Logger logger = LoggerFactory.getLogger(ProducerExample.class);\n\n    public static void main(String[] args) throws ClientException, IOException {\n        String endpoint = \"localhost:8081\";\n        String topic = \"TestTopic\";\n        ClientServiceProvider provider = ClientServiceProvider.loadService();\n        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);\n        ClientConfiguration configuration = builder.build();\n        Producer producer = provider.newProducerBuilder()\n            .setTopics(topic)\n            .setClientConfiguration(configuration)\n            .build();\n        Message message = provider.newMessageBuilder()\n            .setTopic(topic)\n            .setKeys(\"messageKey\")\n            .setTag(\"messageTag\")\n            .setBody(\"messageBody\".getBytes())\n            .build();\n        try {\n            SendReceipt sendReceipt = producer.send(message);\n            logger.info(\"Send message successfully, messageId={}\", sendReceipt.getMessageId());\n        } catch (ClientException e) {\n            logger.error(\"Failed to send message\", e);\n        }\n        // producer.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking RocketMQ Cluster Status\nDESCRIPTION: Command to check the cluster status using mqadmin after deployment.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/02dledger.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sh bin/mqadmin clusterList -n 127.0.0.1:9876\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Trace for Producers in RocketMQ\nDESCRIPTION: Java code example showing how to create a DefaultMQProducer with message tracing enabled. The second parameter in the constructor (true) activates message tracing functionality.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/03messagetra.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\",true);\nproducer.setNamesrvAddr(\"XX.XX.XX.XX1\");\nproducer.start();\n    try {\n        {\n            Message msg = new Message(\"TopicTest\",\n                \"TagA\",\n                \"OrderID188\",\n                \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n            SendResult sendResult = producer.send(msg);\n            System.out.printf(\"%s%n\", sendResult);\n        }\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j XML for RocketMQ Client with Async Appender\nDESCRIPTION: XML configuration for Log4j when used with RocketMQ client, including an asynchronous appender. Defines RocketMQ-specific settings and layout pattern.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/06log.md#2025-04-09_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<appender name=\"mqAppender1\" class=\"org.apache.rocketmq.logappender.log4j.RocketmqLog4jAppender\">\n    <param name=\"Tag\" value=\"yourTag\" />\n    <param name=\"Topic\" value=\"yourLogTopic\" />\n    <param name=\"ProducerGroup\" value=\"yourLogGroup\" />\n    <param name=\"NameServerAddress\" value=\"yourRocketmqNameserverAddress\"/>\n    <layout class=\"org.apache.log4j.PatternLayout\">\n        <param name=\"ConversionPattern\" value=\"%d{yyyy-MM-dd HH:mm:ss}-%p %t %c - %m%n\" />\n    </layout>\n</appender>\n\n<appender name=\"mqAsyncAppender1\" class=\"org.apache.log4j.AsyncAppender\">\n    <param name=\"BufferSize\" value=\"1024\" />\n    <param name=\"Blocking\" value=\"false\" />\n    <appender-ref ref=\"mqAppender1\"/>\n</appender>\n```\n\n----------------------------------------\n\nTITLE: Creating Event Target for EventBridge in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create an event target that delivers to EventBridge in the cloud, specifying the event bus name, rule name, and target configuration.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPOST /target/createEventTargets HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n    \"eventBusName\":\"demo-bus\",\n    \"eventRuleName\":\"demo-rule\",\n    \"eventTargets\":[\n            {\n            \"eventTargetName\":\"eventbridge-target\",\n            \"className\":\"acs.eventbridge\",\n                \"config\":{\n                \"RegionId\":\"cn-hangzhou\",\n                \"AliyunEventBus\":\"rocketmq-eventbridge\"\n                }\n            }\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Consumer Implementation\nDESCRIPTION: Java code example for implementing a RocketMQ message consumer using push consumption mode.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/02quickstartWithDocker.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class ConsumerExample {\n    public static void main(String[] args) throws Exception {\n        // Create consumer instance and set the consumer group name\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name\");\n        // Set the Name Server address (replace with actual Name Server address)\n        consumer.setNamesrvAddr(\"localhost:9876\");\n        // Subscribe to the specified topic and tag (* means all tags)\n        consumer.subscribe(\"TestTopic\", \"*\");\n\n        // Register message listener\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                for (MessageExt msg : msgs) {\n                    System.out.println(\"Received message: \" + new String(msg.getBody()));\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        // Start the consumer\n        consumer.start();\n        System.out.println(\"Consumer started.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Biased Locking in JVM for RocketMQ\nDESCRIPTION: Configuration to disable biased locking in the JVM. This can help reduce JVM pauses in high-throughput messaging scenarios.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-XX:-UseBiasedLocking   \n```\n\n----------------------------------------\n\nTITLE: Configuring Logback Dependencies for RocketMQ Client in Maven\nDESCRIPTION: XML configuration for adding Logback dependencies to a Maven project for use with RocketMQ client logging. Includes Logback core and classic modules.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/06log.md#2025-04-09_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<dependency> \n  <groupId>ch.qos.logback</groupId> \n  <artifactId>logback-core</artifactId> \n  <version>1.1.2</version>\n</dependency> \n<dependency>\n  <groupId>ch.qos.logback</groupId>\n  <artifactId>logback-classic</artifactId> \n  <version>1.1.2</version> \n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Testing Message Tools\nDESCRIPTION: Commands to test message sending and receiving using RocketMQ tools.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/02quickstartWithDocker.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Enter the broker container\n$ docker exec -it rmqbroker bash\n\n$ sh tools.sh org.apache.rocketmq.example.quickstart.Producer\n SendResult [sendStatus=SEND_OK, msgId= ...\n\n$ sh tools.sh org.apache.rocketmq.example.quickstart.Consumer\n ConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n----------------------------------------\n\nTITLE: Running RocketMQ Dashboard in Docker Container\nDESCRIPTION: Command to run the RocketMQ Dashboard Docker container. The command maps port 8080 and configures the RocketMQ NameServer address through environment variables.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/05-deploymentOperations/04Dashboard.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -d --name rocketmq-dashboard -e \"JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876\" -p 8080:8080 -t apacherocketmq/rocketmq-dashboard:latest\n```\n\n----------------------------------------\n\nTITLE: Deploying SFTP Sink Connector via REST API\nDESCRIPTION: HTTP request to the RocketMQ Connect REST API to create and configure an SFTP sink connector that consumes from a RocketMQ topic and writes to a file. Includes connection details and schema information.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST --location \"http://localhost:8082/connectors/SftpSinkConnector\" --http1.1 \\\n    -H \"Host: localhost:8082\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"connector.class\": \"org.apache.rocketmq.connect.http.sink.SftpSinkConnector\",\n          \"host\": \"127.0.0.1\",\n          \"port\": 22,\n          \"username\": \"YourUsername\",\n          \"password\": \"yourPassword\",\n          \"filePath\": \"/Users/YourUsername/rocketmqconnect/sftp-test/sink.txt\",\n          \"connect.topicnames\": \"sftpTopic\",\n          \"fieldSeparator\": \"|\",\n          \"fieldSchema\": \"username|idCardNo|orderNo|orderAmount|trxDate|trxTime|profit\"\n        }'\n```\n\n----------------------------------------\n\nTITLE: Verifying Elasticsearch Sink Connector Logs\nDESCRIPTION: This command tails the log file to check if the Elasticsearch sink connector has started successfully. It looks for a specific success message in the logs.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/10-connect/08RocketMQ  Connect In Action5-ES.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ntail -100f ~/logs/rocketmqconnect/connect_runtime.log\n```\n\n----------------------------------------\n\nTITLE: Setting RocketMQ Consumer Load Balancing Strategy\nDESCRIPTION: Demonstrates how to configure the message queue allocation strategy for a RocketMQ consumer. This example shows setting the average allocation strategy, which is the default policy that distributes queues equally among consumers in a consumer group.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/03-consumer/01concept2.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconsumer.setAllocateMessageQueueStrategy(new AllocateMessageQueueAveragely());\n```\n\n----------------------------------------\n\nTITLE: Checking Sink Connector Output File in Shell\nDESCRIPTION: Command to view the content of the output file created by the SFTP sink connector, verifying successful data replication from source to sink.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/10-connect/07RocketMQ Connect In Action4.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncat /Users/YourUsername/rocketmqconnect/sftp-test/sink.txt\n```\n\n----------------------------------------\n\nTITLE: Verifying SHA512 Checksums in Shell\nDESCRIPTION: Generates and displays SHA512 checksums for release files. Used to verify the integrity of release artifacts.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngpg --print-md SHA512 rocketmq-all-%version-number%-source-release.zip \ngpg --print-md SHA512 rocketmq-all-%version-number%-bin-release.zip \n```\n\n----------------------------------------\n\nTITLE: Handling APPLY_TOPIC_URL Exception in Java\nDESCRIPTION: This snippet shows the exception message when a topic does not exist in RocketMQ. It occurs when a Producer sends a message or a Consumer tries to consume a message, but the routing information for the Topic cannot be obtained.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ntopic[xxx] not exist, apply first please!\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Docker Compose Setup\nDESCRIPTION: Docker Compose configuration for deploying a RocketMQ cluster with namesrv, broker, and proxy services. Includes network configuration and port mappings.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/03quickstartWithDockercompose.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  namesrv:\n    image: apache/rocketmq:5.3.2\n    container_name: rmqnamesrv\n    ports:\n      - 9876:9876\n    networks:\n      - rocketmq\n    command: sh mqnamesrv\n  broker:\n    image: apache/rocketmq:5.3.2\n    container_name: rmqbroker\n    ports:\n      - 10909:10909\n      - 10911:10911\n      - 10912:10912\n    environment:\n      - NAMESRV_ADDR=rmqnamesrv:9876\n    depends_on:\n      - namesrv\n    networks:\n      - rocketmq\n    command: sh mqbroker\n  proxy:\n    image: apache/rocketmq:5.3.2\n    container_name: rmqproxy\n    networks:\n      - rocketmq\n    depends_on:\n      - broker\n      - namesrv\n    ports:\n      - 8080:8080\n      - 8081:8081\n    restart: on-failure\n    environment:\n      - NAMESRV_ADDR=rmqnamesrv:9876\n    command: sh mqproxy\nnetworks:\n  rocketmq:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Handling CLIENT_SERVICE_NOT_OK Exception in Java\nDESCRIPTION: This snippet shows the exception message when starting multiple Producer/Consumer instances in the same JVM using the same Producer/Consumer Group, which may cause the client to fail to start in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nThe xxx service state not OK, maybe started once\n```\n\n----------------------------------------\n\nTITLE: Handling SAME_GROUP_DIFFERENT_TOPIC Exception in Java\nDESCRIPTION: This snippet shows the exception message when Consumer subscription to Topic information does not exist in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nthe consumer's group info/subscription not exist\n```\n\n----------------------------------------\n\nTITLE: Updating Personal GitHub Repository After Merge in Shell\nDESCRIPTION: Command to update the personal GitHub repository with the merged changes from the Apache repository.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/11-contributionGuide/03pull-request.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ git push origin develop\n```\n\n----------------------------------------\n\nTITLE: Creating Source Event in RocketMQ EventBridge\nDESCRIPTION: HTTP POST request to create a source event in RocketMQ EventBridge, specifying the event bus name, source name, and description.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /source/createEventSource HTTP/1.1\nHost: demo.eventbridge.com\nContent-Type: application/json; charset=utf-8\n{\n\"eventBusName\":\"demo-bus\",\n\"eventSourceName\":\"demo-source\",\n\"description\":\"A demo source.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Broker Container - Linux\nDESCRIPTION: Commands to configure and start RocketMQ Broker container on Linux.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/02quickstartWithDocker.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Configure the broker's IP address\necho \"brokerIP1=127.0.0.1\" >broker.conf\n\n# Start Broker\ndocker run -d \\\n--name rmqbroker \\\n--net rocketmq \\\n-p 10912:10912 -p 10911:10911 -p 10909:10909 \\\n-e \"NAMESRV_ADDR=rmqnamesrv:9876\" \\\n-v ./broker.conf:/home/rocketmq/rocketmq-4.9.6/conf/broker.conf \\\napache/rocketmq:4.9.6 sh mqbroker \\\n-c /home/rocketmq/rocketmq-4.9.6/conf/broker.conf\n\n# Verify if Broker started successfully\ndocker logs rmqbroker\n```\n\n----------------------------------------\n\nTITLE: Starting the RocketMQ Broker\nDESCRIPTION: Commands to start the RocketMQ Broker service with a connection to the NameServer, and verify successful startup by checking the log file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/01-quickstart/01quickstart.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n### Start the broker service\n$ nohup sh bin/mqbroker -n localhost:9876 &\n\n### Verify that the broker service is started successfully, for example, the broker's ip is 192.168.1.2 and the name is broker-a\n$ tail -f ~/logs/rocketmqlogs/broker.log \nThe broker[broker-a,192.169.1.2:10911] boot success...\n```\n\n----------------------------------------\n\nTITLE: Displaying RocketMQ EventBridge Directory Structure\nDESCRIPTION: Shows the directory structure of the RocketMQ EventBridge binary package after extraction. Includes folders for binaries, configuration, and JAR files.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/03RocketMQEventBridgeQuickStart.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/rocketmq-eventbridge-xxx-bin-release/\n|——bin\n|   |——runserver.sh\n|   |——eventbridge.sh\n|——config\n|   |——application.properties\n|——jar\n|   |——rocketmq-eventbridge.jar\n```\n\n----------------------------------------\n\nTITLE: Basic JVM Heap Configuration for RocketMQ\nDESCRIPTION: Sets server mode with 8GB heap size and 4GB young generation size for optimal RocketMQ broker performance.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/05JVMOS.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-server -Xms8g -Xmx8g -Xmn4g\n```\n\n----------------------------------------\n\nTITLE: Adding RocketMQ Client Dependency in Maven\nDESCRIPTION: This Maven dependency configuration adds the RocketMQ client library to a Java project. It specifies the group ID, artifact ID, and version of the RocketMQ client.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/02-producer/02message1.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.rocketmq</groupId>\n  <artifactId>rocketmq-client</artifactId>\n  <version>4.9.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Redirecting GC Logs to Memory Filesystem\nDESCRIPTION: Option to redirect garbage collection logs to memory filesystem to reduce I/O latency impact.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/06-bestPractice/04JVMOS.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-Xloggc:/dev/shm/mq_gc_%p.log123   \n```\n\n----------------------------------------\n\nTITLE: APPLY_TOPIC_URL错误消息\nDESCRIPTION: 当尝试生产或消费不存在的Topic时出现的错误信息。这通常意味着Producer或Consumer无法从NameServer中获取Topic的路由信息。\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/docs/05-bestPractice/08FAQ.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ntopic[xxx] not exist, apply first please!\n```\n\n----------------------------------------\n\nTITLE: Handling MQLIST_NOT_EXIST Exception in Java\nDESCRIPTION: This snippet shows the exception message when the Producer cannot obtain the corresponding Queue information based on the Topic in RocketMQ.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/06-bestPractice/06FAQ.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nCan not find Message Queue for this topic\n```\n\n----------------------------------------\n\nTITLE: Apache Parent POM Configuration\nDESCRIPTION: XML configuration showing how to inherit default settings from the Apache parent POM in the project's POM file.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/11-contributionGuide/04release-manual.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>XX</version>\n</parent>\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Support Information in Markdown\nDESCRIPTION: This markdown snippet provides information about the version support for RocketMQ metrics, specifying that the metrics were introduced in version 5.1.0 and only support the broker.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/12-observability/01metrics.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> Version support: The following metrics for RocketMQ were introduced since 5.1.0 and only support the broker.\n```\n\n----------------------------------------\n\nTITLE: Handling Message Pile-up in RocketMQ Consumer (Java)\nDESCRIPTION: This code snippet demonstrates how to handle message pile-up in RocketMQ by discarding unimportant messages when the queue accumulates more than 100,000 messages. It uses the ConsumeConcurrentlyStatus to indicate successful consumption.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/current/05-bestPractice/01bestpractice.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    public ConsumeConcurrentlyStatus consumeMessage(\n            List<MessageExt> msgs,\n            ConsumeConcurrentlyContext context) {\n        long offset = msgs.get(0).getQueueOffset();\n        String maxOffset =\n                msgs.get(0).getProperty(Message.PROPERTY_MAX_OFFSET);\n        long diff = Long.parseLong(maxOffset) - offset;\n        if (diff > 100000) {\n            // TODO Special handling of message stacking cases\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n        // TODO Normal consumption process\n        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n    }    \n```\n\n----------------------------------------\n\nTITLE: Examples of Command Requests in Event-Driven Systems\nDESCRIPTION: This code block illustrates examples of command requests, which represent operation requests that may or may not actually occur in the system.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/i18n/en/docusaurus-plugin-content-docs/version-5.0/07-eventbridge/02RocketMQEventBridgeOverview.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* Turning on the kitchen lights\n* Someone pressed the doorbell\n* Account A received 100,000.\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC OTLP Exporter for RocketMQ Broker Metrics\nDESCRIPTION: Configuration settings required to enable the gRPC OTLP exporter for RocketMQ Broker metrics. Includes mandatory settings for exporter type and target endpoint, plus optional configurations for headers, timeout, and reporting interval.\nSOURCE: https://github.com/apache/rocketmq-site/blob/new-official-website/versioned_docs/version-5.0/12-observability/01metrics.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nmetricsExporterType=OTLP_GRPC\nmetricsGrpcExporterTarget=<OpenTelemetry-Collector-endpoint>\n\n# Optional configurations\nmetricsGrpcExporterHeader=key1:value1,key2:value2\nmetricGrpcExporterTimeOutInMills=<timeout-in-milliseconds>\nmetricGrpcExporterIntervalInMills=<reporting-interval-in-milliseconds>\n```"
  }
]