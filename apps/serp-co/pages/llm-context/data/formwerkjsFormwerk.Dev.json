[
  {
    "owner": "formwerkjs",
    "repo": "formwerk.dev",
    "content": "TITLE: Creating a Form with Input Fields in Vue\nDESCRIPTION: This example shows how to create a form with email, password, and checkbox fields using Formwerk in a Vue component. It demonstrates the use of controlled fields and form submission handling.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport Checkbox from './Checkbox.vue';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n    <TextField name=\"password\" label=\"Password\" type=\"password\" required />\n\n    <Checkbox label=\"Remember me\" name=\"rememberMe\" />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Form with Formwerk in TypeScript\nDESCRIPTION: This snippet demonstrates the most basic form setup using Formwerk's useForm composable. It creates a form context and provides a handleSubmit function for form submission.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a TextField Component with Formwerk\nDESCRIPTION: Implementation of a TextField component using Formwerk composables. The component imports the useTextField composable, defines props, and creates an accessible text input with label and error message support.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/getting-started.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TextFieldProps, useTextField } from '@formwerk/core';\n\nconst props = defineProps<TextFieldProps>();\n\nconst { inputProps, labelProps, errorMessage, errorMessageProps } =\n  useTextField(props);\n</script>\n\n<template>\n  <div>\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <input v-bind=\"inputProps\" />\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Validation Sources in Vue with Formwerk\nDESCRIPTION: This snippet showcases how to combine HTML constraints, field-level schema, and form-level schema validation in a single form. It demonstrates the cascading validation behavior in Formwerk.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport { z } from 'zod';\n\nconst { handleSubmit } = useForm({\n  schema: z.object({\n    field: z.string().max(8),\n  }),\n});\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"field\" label=\"Field\" min-length=\"3\" required />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Fields and Arrays in Formwerk Vue Form\nDESCRIPTION: This example shows how to create nested fields and arrays in a Formwerk form using dot notation in the name prop. It demonstrates structuring complex form data with objects and arrays.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport Checkbox from './Checkbox.vue';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"socials.github\" label=\"GitHub \" type=\"url\" required />\n    <TextField name=\"socials.twitter\" label=\"Twitter \" type=\"url\" required />\n    <TextField name=\"socials.discord\" label=\"Discord\" type=\"url\" required />\n\n    <TextField name=\"customLinks.0\" label=\"Custom link 1\" type=\"url\" />\n    <TextField name=\"customLinks.1\" label=\"Custom Link 2\" type=\"url\" />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Inferring Types with Standard Schema (Zod)\nDESCRIPTION: Demonstrates using a Standard Schema (Zod in this example) for automatic type inference of both input and output types. This approach provides better type safety and validation capabilities.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\nconst { values, handleSubmit } = useForm({\n  schema: z.object({ email: z.string().email() }),\n});\n\nvalues; // { email: string | undefined }\n\nconst onSubmit = handleSubmit((data) => {\n  data.toObject(); // { email: string }\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Formwerk TextField Component\nDESCRIPTION: Example of how to use a custom TextField component built with Formwerk in a Vue application. It imports the component, sets up a reactive email state, and implements the component with appropriate props.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/getting-started.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TextField } from './TextField.vue';\n\nconst email = ref('');\n</script>\n\n<template>\n  <TextField label=\"Email\" type=\"email\" v-model=\"email\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a TextField Component with Error Display in Vue\nDESCRIPTION: This Vue component demonstrates how to create a TextField with error display logic based on the field being touched.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/validation.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type TextFieldProps, useTextField } from '@formwerk/core';\n\nconst props = defineProps<TextFieldProps>();\n\nconst {\ninputProps,\nlabelProps,\nerrorMessage,\nerrorMessageProps,\nisTouched,\ndescriptionProps,\n} = useTextField(props);\n\n</script>\n\n<template>\n  <div>\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <input v-bind=\"inputProps\" :style=\"{ display: 'block' }\" />\n\n    <div v-if=\"isTouched && errorMessage\" v-bind=\"errorMessageProps\">\n      {{ errorMessage }}\n    </div>\n\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Speech Recognition Custom Form Field in Vue.js\nDESCRIPTION: A complete Vue.js Single File Component that implements a speech recognition form field using the Web Speech API. It accepts a sentence prop, listens to the user's speech, and validates if all words were correctly pronounced. The component integrates with @formwerk/core for form handling.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_speechCustomField.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue';\nimport { useCustomField, type CustomFieldProps } from '@formwerk/core';\n\nconst props = defineProps<\n  CustomFieldProps & {\n    sentence: string;\n  }\n>();\n\nconst {\n  labelProps,\n  controlProps,\n  setValue,\n  errorMessage,\n  errorMessageProps,\n  setTouched,\n  isTouched,\n} = useCustomField<boolean>(props);\n\nconst words = computed(() => props.sentence.split(' '));\nconst results = ref<string[]>([]);\nconst isListening = ref(false);\nconst recognition = new (window.SpeechRecognition ||\n  window.webkitSpeechRecognition)();\n\nrecognition.lang = 'en-US';\nrecognition.interimResults = false;\nrecognition.maxAlternatives = 1;\n\nfunction onSpeakClick() {\n  if (isListening.value) {\n    stopListening();\n    return;\n  }\n\n  results.value = [];\n  isListening.value = true;\n  recognition.start();\n  setTimeout(() => stopListening(true), 8000);\n}\n\nfunction isAllSpoken() {\n  return results.value.every((word) => words.value.includes(word));\n}\n\nfunction stopListening(done = false) {\n  recognition.stop();\n  isListening.value = false;\n\n  if (done) {\n    setTouched(true);\n    setValue(isAllSpoken());\n  }\n}\n\nrecognition.onresult = (event) => {\n  results.value = event.results[0][0].transcript.toLowerCase().split(' ');\n  setValue(isAllSpoken());\n};\n</script>\n\n<template>\n  <div class=\"speech-exercise\">\n    <div class=\"challenge-container\">\n      <div class=\"challenge-label\" v-bind=\"labelProps\">{{ label }}</div>\n      <div class=\"challenge\">\n        <span\n          v-for=\"(word, idx) in words\"\n          :key=\"`word-${idx}`\"\n          class=\"challenge-word\"\n          :class=\"{ 'is-spoken': results.includes(word.toLowerCase()) }\"\n        >\n          {{ word }}\n        </span>\n      </div>\n    </div>\n\n    <button\n      type=\"button\"\n      v-bind=\"controlProps\"\n      @click=\"onSpeakClick\"\n      :class=\"{ 'is-listening': isListening }\"\n    >\n      <div class=\"button-content\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n        >\n          <path d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\" />\n          <path d=\"M19 10v2a7 7 0 0 1-14 0v-2\" />\n          <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\" />\n          <line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\" />\n        </svg>\n        {{ isListening ? 'Listening...' : 'Speak' }}\n      </div>\n    </button>\n\n    <div\n      v-if=\"errorMessage && isTouched\"\n      v-bind=\"errorMessageProps\"\n      class=\"error\"\n    >\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.speech-exercise {\n  background: white;\n  border-radius: 16px;\n}\n\n.challenge-container {\n  margin-bottom: 2rem;\n}\n\n.challenge {\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: #57534e;\n  margin-bottom: 1rem;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.25rem;\n}\n\n.challenge-label {\n  font-size: 14px;\n  color: #9ca3af;\n  margin-bottom: 0.5rem;\n}\n\n.challenge-word {\n  &.is-spoken {\n    color: #059669;\n  }\n}\n\n.result {\n  font-size: 1.1rem;\n  color: #4b5563;\n}\n\n.result-label {\n  color: #6b7280;\n  font-size: 0.9rem;\n  margin-right: 0.5rem;\n}\n\nbutton {\n  width: 100%;\n  padding: 1rem;\n  border: none;\n  border-radius: 8px;\n  background-color: #059669;\n  color: white;\n  font-size: 1.1rem;\n  font-weight: 700;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\nbutton:hover {\n  background-color: #10b981;\n  transform: translateY(-1px);\n}\n\nbutton:active {\n  transform: translateY(1px);\n}\n\n.button-content {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n}\n\n.is-listening {\n  background-color: #ef4444;\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0% {\n    box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.4);\n  }\n  70% {\n    box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);\n  }\n  100% {\n    box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);\n  }\n}\n\n.error {\n  color: #ef4444;\n  font-size: 14px;\n  margin-top: 0.5rem;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Context with useFormContext\nDESCRIPTION: Shows how to access form context from child components using the useFormContext composable. This is useful for components that need to be aware of form state like submission status.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFormContext } from '@formwerk/core';\n\nconst { isSubmitting } = useFormContext();\n```\n\n----------------------------------------\n\nTITLE: Basic Text Field Usage in Vue\nDESCRIPTION: Example showing how to use a TextField component with v-model binding and label props\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\nimport { ref } from 'vue';\n\nconst name = ref('');\n</script>\n\n<template>\n  <TextField v-model=\"name\" label=\"Your name\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Touched Field Tracking in Vue with Formwerk\nDESCRIPTION: This snippet demonstrates how to use the useForm hook to track touched fields in a form. It shows how to check if individual fields or the entire form has been touched, and how to handle form submission.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\n\nconst { handleSubmit, isTouched } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  console.log('All fields should be touched now');\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" type=\"email\" />\n    <TextField name=\"password\" label=\"Password\" type=\"password\" />\n\n    <pre>Email Touched: {{ isTouched('email') }}</pre>\n    <pre>Password Touched: {{ isTouched('password') }}</pre>\n    <pre>Form Touched: {{ isTouched() }}</pre>\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Schema Validation with Valibot in TypeScript\nDESCRIPTION: This example shows how to use Valibot for schema validation in Formwerk, including email and password validation rules.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/validation.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as v from 'valibot';\nimport { useForm } from '@formwerk/core';\n\nconst schema = v.object({\n  email: v.pipe(v.string(), v.email()),\n  password: v.pipe(v.string(), v.minLength(8)),\n});\n\nconst { values, handleSubmit } = useForm({\n  schema,\n});\n```\n\n----------------------------------------\n\nTITLE: Complete FormRepeater Component Implementation in Vue\nDESCRIPTION: A full implementation of a form repeater component in Vue, showing how to use the useFormRepeater composable with add, remove, and move operations for list items.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/form-repeater.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useFormRepeater, FormRepeaterProps } from '@formwerk/core';\n\nconst props = defineProps<FormRepeaterProps>();\n\nconst { items, Iteration, addButtonProps } = useFormRepeater(props);\n</script>\n\n<template>\n  <Iteration\n    v-for=\"(key, index) in items\"\n    :key=\"key\"\n    :index=\"index\"\n    v-slot=\"{ removeButtonProps, moveUpButtonProps, moveDownButtonProps }\"\n  >\n    <h3>#{{ index + 1 }}</h3>\n\n    <slot />\n\n    <button v-bind=\"moveUpButtonProps\">Move up</button>\n    <button v-bind=\"moveDownButtonProps\">Move down</button>\n    <button v-bind=\"removeButtonProps\">Remove</button>\n  </Iteration>\n\n  <button v-bind=\"addButtonProps\">Add</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form-level Validation with Standard Schema in Vue\nDESCRIPTION: This snippet demonstrates how to use a Standard Schema (Zod in this case) for form-level validation in a Vue component. It shows how to define a schema and handle form submission with validation.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport { z } from 'zod';\n\nconst { handleSubmit } = useForm({\n  schema: z.object({\n    email: z.string().email(),\n    password: z.string().min(8),\n  }),\n});\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" />\n    <TextField name=\"password\" label=\"Password\" type=\"password\" />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File Field Component in Vue\nDESCRIPTION: This snippet demonstrates how to create a basic file field component using the useFileField composable from Formwerk. It includes the component implementation and usage example.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/file-fields.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport FileField from './FileField.vue';\n</script>\n\n<template>\n  <FileField label=\"File\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Touched State Manually in Formwerk\nDESCRIPTION: This snippet shows how to manually set the touched state of fields using the setTouched function from the useForm hook. It demonstrates setting a single field as touched and setting all fields as touched.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nconst { setTouched } = useForm();\n\nfunction onFieldBlur() {\n  setTouched('email', true);\n  // Or set all fields to touched\n  setTouched(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Search Field Component in Vue\nDESCRIPTION: This snippet demonstrates how to create a basic search field component using Formwerk's useSearchField composable. It includes the component definition and a usage example with v-model binding.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/search-fields.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport SearchField from './SearchField.vue';\n\nconst search = ref('');\n</script>\n\n<template>\n  <SearchField label=\"Keywords\" placeholder=\"Search for...\" v-model=\"search\" />\n\n  Search value: {{ search }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Repeater Component with Vue and TypeScript\nDESCRIPTION: This Vue component implements a form repeater using the useFormRepeater hook from @formwerk/core. It allows adding, removing, and reordering items in a form with proper interface controls and transitions.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/_partials/_repeater.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useFormRepeater, type FormRepeaterProps } from '@formwerk/core';\n\nconst props = defineProps<FormRepeaterProps>();\n\nconst { items, addButtonProps, Iteration } = useFormRepeater(props);\n</script>\n\n<template>\n  <div class=\"repeater-container\">\n    <TransitionGroup name=\"list\">\n      <Iteration\n        v-for=\"(key, index) in items\"\n        :index=\"index\"\n        :key=\"key\"\n        as=\"div\"\n        class=\"repeater-item\"\n        v-slot=\"{ removeButtonProps, moveUpButtonProps, moveDownButtonProps }\"\n      >\n        <div class=\"repeater-item-content\">\n          <slot />\n        </div>\n\n        <div class=\"repeater-item-buttons\">\n          <button v-bind=\"moveUpButtonProps\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 256 256\"\n              fill=\"currentColor\"\n            >\n              <path\n                d=\"M216.49,168.49a12,12,0,0,1-17,0L128,97,56.49,168.49a12,12,0,0,1-17-17l80-80a12,12,0,0,1,17,0l80,80A12,12,0,0,1,216.49,168.49Z\"\n              ></path>\n            </svg>\n          </button>\n\n          <button v-bind=\"removeButtonProps\" class=\"remove-button\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 256 256\"\n              fill=\"currentColor\"\n            >\n              <path\n                d=\"M216,48H40a12,12,0,0,0,0,24h4V208a20,20,0,0,0,20,20H192a20,20,0,0,0,20-20V72h4a12,12,0,0,0,0-24ZM188,204H68V72H188ZM76,20A12,12,0,0,1,88,8h80a12,12,0,0,1,0,24H88A12,12,0,0,1,76,20Z\"\n              ></path>\n            </svg>\n          </button>\n\n          <button v-bind=\"moveDownButtonProps\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"currentColor\"\n              viewBox=\"0 0 256 256\"\n            >\n              <path\n                d=\"M216.49,104.49l-80,80a12,12,0,0,1-17,0l-80-80a12,12,0,0,1,17-17L128,159l71.51-71.52a12,12,0,0,1,17,17Z\"\n              ></path>\n            </svg>\n          </button>\n        </div>\n      </Iteration>\n    </TransitionGroup>\n\n    <button v-bind=\"addButtonProps\" class=\"add-button\" type=\"button\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\">\n        <path\n          d=\"M128,24A104,104,0,1,0,232,128,104.13,104.13,0,0,0,128,24Zm40,112H136v32a8,8,0,0,1-16,0V136H88a8,8,0,0,1,0-16h32V88a8,8,0,0,1,16,0v32h32a8,8,0,0,1,0,16Z\"\n        ></path>\n      </svg>\n\n      Add item\n    </button>\n  </div>\n</template>\n\n<style scoped>\n.add-button {\n  margin-top: 1rem;\n  padding: 10px 12px;\n  border-radius: 6px;\n  border: none;\n  background-color: #3f3f46;\n  color: #fff;\n  width: max-content;\n  display: flex;\n  align-items: center;\n\n  svg {\n    width: 18px;\n    height: 18px;\n    margin-right: 4px;\n    fill: #d4d4d8;\n  }\n\n  &:hover {\n    background-color: #18181b;\n  }\n\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n}\n\n.repeater-container {\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n}\n\n.repeater-item {\n  border: 1px solid #e4e4e7;\n  max-width: 340px;\n  border-radius: 6px;\n  display: flex;\n  gap: 12px;\n  background-color: #fff;\n\n  .repeater-item-buttons {\n    padding: 0 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 2px;\n\n    button {\n      border: none;\n      background: transparent;\n      cursor: pointer;\n      color: #0284c7;\n      width: 32px;\n      height: 32px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 4px;\n\n      svg {\n        width: 100%;\n        height: 100%;\n        flex-shrink: 0;\n      }\n\n      &.remove-button {\n        color: rgb(239 68 68);\n      }\n\n      &:disabled {\n        opacity: 0.3;\n        cursor: not-allowed;\n        color: #44403c;\n      }\n\n      &:hover {\n        background-color: rgb(244 244 245);\n      }\n    }\n  }\n\n  .repeater-item-content {\n    padding: 12px;\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n  }\n}\n\n.list-move,\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\n.list-leave-active {\n  position: absolute;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Signature for useForm\nDESCRIPTION: Code snippet showing the TypeScript type signature for the useForm composable. It explains the generic type parameters that enable typing form values, including schema type, input types, and output types.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useForm<\n  TSchema extends StandardSchema<FormObject>,\n  TInput extends FormObject = FormObject,\n  TOutput extends FormObject = TInput,\n>();\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropzone Component for File Uploads in Vue\nDESCRIPTION: This code snippet shows how to implement a dropzone component that allows users to drag and drop files for upload. It uses the useFileField composable and FileEntry component from Formwerk.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/file-fields.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Dropzone from './Dropzone.vue';\n</script>\n\n<template>\n  <Dropzone label=\"Dropzone\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Handling in Vue with Formwerk\nDESCRIPTION: This example demonstrates how to handle file uploads using the onUpload handler provided by Formwerk's useFileField composable.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/file-fields.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { type FileUploadContext } from '@formwerk/core';\n\nimport FileField from './FileField.vue';\n\nfunction onUpload({ file }: FileUploadContext) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Date.now().toString());\n    }, 1000);\n  });\n}\n\nconst value = ref<string>();\n</script>\n\n<template>\n  Field value: {{ value }}\n\n  <FileField label=\"File\" v-model=\"value\" @upload=\"onUpload\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Time Field Component in Vue\nDESCRIPTION: This snippet demonstrates how to create a basic time field component using Formwerk. It includes the necessary template structure and script setup.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TimeField from './TimeField.vue';\n</script>\n\n<template>\n  <TimeField name=\"time\" label=\"Time\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Calendar as a Picker Component with Vue Popover\nDESCRIPTION: Implements a calendar as a date picker using the usePicker composable from FormwerkJS core. This example shows how to create a button trigger that opens a calendar in a popover for date selection, with reactive date state management.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/calendars.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { usePicker } from '@formwerk/core';\nimport Calendar from './Calendar.vue';\n\nconst { pickerProps, pickerTriggerProps } = usePicker({\n  label: 'Pick a date',\n});\n\nconst date = ref();\n</script>\n\n<template>\n  <pre>Selected date: {{ date || 'none' }}</pre>\n  <button v-bind=\"pickerTriggerProps\">Open Calendar</button>\n\n  <div v-bind=\"pickerProps\" popover>\n    <Calendar label=\"Calendar\" v-model=\"date\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Building ComboBox Component with Vue and TypeScript\nDESCRIPTION: Shows how to create a ComboBox component using the useComboBox composable from Formwerk. This component combines an input field with a dropdown list of options.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useComboBox, useDefaultFilter } from '@formwerk/core';\nimport type { ComboBoxProps } from '@formwerk/core';\n\nconst props = defineProps<ComboBoxProps>();\nconst { contains } = useDefaultFilter();\nconst {\n  inputAttrs,\n  buttonAttrs,\n  listboxAttrs,\n  labelAttrs,\n  descriptionAttrs,\n  errorAttrs,\n} = useComboBox(props, { filter: contains });\n</script>\n\n<template>\n  <div>\n    <label v-bind=\"labelAttrs\">{{ props.label }}</label>\n    <div>\n      <input v-bind=\"inputAttrs\" />\n      <button v-bind=\"buttonAttrs\">▼</button>\n    </div>\n    <div v-bind=\"listboxAttrs\" popover>\n      <slot></slot>\n    </div>\n    <div v-if=\"props.description\" v-bind=\"descriptionAttrs\">\n      {{ props.description }}\n    </div>\n    <div v-if=\"props.error\" v-bind=\"errorAttrs\">{{ props.error }}</div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Calendar Component with Vue and Formwerk\nDESCRIPTION: A complete implementation of a calendar component using the useCalendar composable from Formwerk. This component provides a fully accessible date selection interface with navigation controls.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/calendars.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Calendar from './Calendar.vue';\nimport { ref } from 'vue';\n\nconst date = ref(new Date('2025-09-14'));\n</script>\n\n<template>\n  <Calendar label=\"Select a date\" v-model=\"date\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Group Validation with Zod Schema\nDESCRIPTION: Example showing how to implement validation at multiple levels in FormWerk: HTML constraints, field-level, group-level, and form-level validation using Zod schemas. The group schema validates shipping information fields.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/form-groups.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport FormGroup from './FormGroup.vue';\nimport { z } from 'zod';\n\nconst shippingSchema = z.object({\n  address: z.string().min(5),\n  city: z.string().min(3),\n  zip: z.string().length(5),\n});\n\nconst schema = z.object({\n  email: z.string().email(),\n});\n\nconst { handleSubmit } = useForm({\n  schema,\n});\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" />\n\n    <FormGroup\n      name=\"shipping\"\n      label=\"Shipping information\"\n      :schema=\"shippingSchema\"\n    >\n      <TextField name=\"address\" label=\"Address\" />\n      <TextField name=\"city\" label=\"City\" />\n      <TextField name=\"zip\" label=\"ZIP\" />\n    </FormGroup>\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Standard Schema in Formwerk\nDESCRIPTION: This snippet demonstrates automatic type inference when using a Standard Schema in Formwerk, showing both form values and submit handler types.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/validation.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\nimport * as v from 'valibot';\n\nconst schema = v.object({\n  email: v.pipe(v.string(), v.email()),\n  password: v.pipe(v.string(), v.minLength(8)),\n});\n\nconst { values, handleSubmit } = useForm({\n  schema,\n});\n\nvalues; // { email?: string | undefined; password?: string | undefined }\n\nconst onSubmit = handleSubmit((data) => {\n  data.toObject(); // { email: string; password: string }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing FormWerk Text Field Component with Vue and TypeScript\nDESCRIPTION: This Vue component implements a text field using the FormWerk core library. It uses the useTextField hook to handle form field functionality including input properties, validation, and accessibility features.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_textField.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type TextFieldProps, useTextField } from '@formwerk/core';\n\nconst props = defineProps<TextFieldProps>();\n\nconst {\n  inputProps,\n  labelProps,\n  errorMessage,\n  errorMessageProps,\n  descriptionProps,\n} = useTextField(props);\n</script>\n\n<template>\n  <div class=\"field\">\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <input v-bind=\"inputProps\" />\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n\n    <div v-if=\"description\" v-bind=\"descriptionProps\" class=\"hint\">\n      {{ description }}\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.field {\n  --color-primary: #10b981;\n  --color-text-primary: #333;\n  --color-text-secondary: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n\n  label {\n    display: block;\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n    color: var(--color-text-primary);\n  }\n\n  .hint {\n    font-size: 13px;\n    color: var(--color-text-secondary);\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .hint,\n  .error {\n    margin-top: 0.25rem;\n  }\n\n  input {\n    display: block;\n    width: max-content;\n    padding: 0.5rem 0.6rem;\n    font-size: 13px;\n    color: var(--color-text-primary);\n    border: 1px solid var(--color-border);\n    border-radius: 6px;\n    transition: border-color 0.3s ease;\n\n    &:focus {\n      outline: none;\n      border-color: var(--color-focus);\n      box-shadow: 0 0 0 1px var(--color-focus);\n    }\n  }\n\n  .error {\n    display: none;\n    font-size: 13px;\n    color: var(--color-error);\n  }\n\n  &:has(:focus) {\n    .hint {\n      opacity: 1;\n    }\n  }\n\n  &:has(:user-invalid) {\n    --color-border: var(--color-error);\n    --color-focus: var(--color-error);\n\n    .error {\n      display: block;\n    }\n\n    .hint {\n      display: none;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Non-Controlled Fields in Vue Form\nDESCRIPTION: This example demonstrates the use of both controlled and non-controlled fields in a Formwerk form. It shows how to conditionally render fields and handle form submission with dynamic data.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport Checkbox from './Checkbox.vue';\n\nconst { handleSubmit } = useForm();\nconst isSameAsBilling = ref(false);\n\nconst onSubmit = handleSubmit((data) => {\n  const json = data.toObject();\n  if (isSameAsBilling.value) {\n    json.billingAddress = json.shippingAddress;\n  }\n\n  alert(JSON.stringify(json, null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"shippingAddress\" label=\"Shipping Address\" required />\n\n    <TextField\n      v-if=\"!isSameAsBilling\"\n      name=\"billingAddress\"\n      label=\"Billing Address\"\n      required\n    />\n    <Checkbox label=\"Same as shipping\" v-model=\"isSameAsBilling\" />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency in NumberField Component (Vue 3)\nDESCRIPTION: This snippet demonstrates how to use the NumberField component with currency formatting options. It uses the v-model directive for two-way binding and sets the style to 'currency' with USD as the currency.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/number-fields.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport NumberField from './NumberField.vue';\n\nconst value = ref(1000);\n</script>\n\n<template>\n  <NumberField\n    label=\"Amount\"\n    v-model=\"value\"\n    step=\"100\"\n    :formatOptions=\"{ style: 'currency', currency: 'USD' }\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Building a Simple Switch Component with v-model binding in Vue\nDESCRIPTION: This example shows how to implement a basic Switch component with Formwerk and bind it to a state variable using v-model. It demonstrates setting up a boolean state and rendering the current value.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/switches.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport Switch from './Switch.vue';\n\nconst isOn = ref(false);\n</script>\n\n<template>\n  <Switch label=\"Theme\" v-model=\"isOn\" />\n\n  <div>Switch is: {{ isOn }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using CheckboxGroup Component with Multiple Checkboxes in Vue.js\nDESCRIPTION: Example of using a CheckboxGroup component with multiple Checkbox components inside it. The v-model is bound to an array that collects the values of selected checkboxes.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport Checkbox from './Checkbox.vue';\nimport CheckboxGroup from './CheckboxGroup.vue';\n\nconst colors = ref([]);\n</script>\n\n<template>\n  <CheckboxGroup label=\"Colors\" v-model=\"colors\">\n    <Checkbox label=\"Red\" value=\"red\" />\n    <Checkbox label=\"Green\" value=\"green\" />\n    <Checkbox label=\"Blue\" value=\"blue\" />\n  </CheckboxGroup>\n\n  selected colors: {{ colors }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Resetting Form State with reset() in Vue\nDESCRIPTION: Example of using the reset function to restore form fields to their initial values. This resets values, clears touched states, and removes custom errors while maintaining validation state by default.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport Checkbox from './Checkbox.vue';\n\nconst { handleSubmit, reset } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n\nfunction onResetClick() {\n  reset();\n}\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n    <TextField name=\"password\" label=\"Password\" type=\"password\" required />\n\n    <Checkbox label=\"Remember me\" name=\"rememberMe\" />\n\n    <button type=\"submit\">Submit</button>\n    <button type=\"button\" @click=\"onResetClick\">Reset</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Component Script with FormWerk in Vue\nDESCRIPTION: Sets up the file upload component using FormWerk's useFileField hook. It defines props and extracts various properties and methods needed for handling file uploads, including input/dropzone binding, file entries, and error handling.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_dropzone.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useFileField, type FileFieldProps, FileEntry } from '@formwerk/core';\n\nconst props = defineProps<FileFieldProps>();\n\nconst {\n  inputProps,\n  dropzoneProps,\n  triggerProps,\n  entries,\n  errorMessageProps,\n  errorMessage,\n} = useFileField(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Standard Schema Validation for Date Fields with Formwerk\nDESCRIPTION: Implementation of date field validation using Standard Schema with Zod. Validates that the date is between January 1st and December 31st, 2025.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport DateField from './DateField.vue';\n\nconst schema = z.date().min(new Date('2025-01-01')).max(new Date('2025-12-31'));\n</script>\n\n<template>\n  <DateField label=\"Standard Schema\" :schema=\"schema\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Item Component with Native Input Element in Vue.js\nDESCRIPTION: This code snippet shows the implementation of a RadioItem component using a native HTML input element. It demonstrates how to use the useRadio composable and bind the resulting props to the template elements.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type RadioProps, useRadio } from '@formwerk/core';\n\nconst props = defineProps<RadioProps>();\nconst { labelProps, inputProps } = useRadio(props);\n</script>\n\n<template>\n  <label>\n    <input v-bind=\"inputProps\" type=\"radio\" />\n    <span v-bind=\"labelProps\">{{ props.label }}</span>\n  </label>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multiple Thumb Slider in Vue with Formwerk\nDESCRIPTION: This snippet demonstrates how to create a slider component with multiple thumbs using Formwerk. It includes the necessary template structure, bindings, and styling for a functional slider with two thumbs.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/sliders.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSlider, useThumbMetadata } from '@formwerkjs/formwerk';\nimport Thumb from './Thumb.vue';\n\nconst props = withDefaults(\n  defineProps<{\n    modelValue?: number[];\n    label?: string;\n    disabled?: boolean;\n    readonly?: boolean;\n    min?: number;\n    max?: number;\n    step?: number;\n    dir?: 'ltr' | 'rtl';\n    orientation?: 'horizontal' | 'vertical';\n  }>(),\n  {\n    min: 0,\n    max: 100,\n    step: 1,\n    dir: 'ltr',\n    orientation: 'horizontal',\n  }\n);\n\nconst emit = defineEmits<{\n  (e: 'update:modelValue', value: number[]): void;\n}>();\n\nconst {\n  sliderRef,\n  sliderProps,\n  trackRef,\n  trackProps,\n  thumbsMetadata,\n  labelProps,\n} = useSlider(props, emit);\n\nconst { getThumbPercentage } = useThumbMetadata(thumbsMetadata);\n</script>\n\n<template>\n  <div class=\"slider-wrapper\">\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <div\n      ref=\"sliderRef\"\n      v-bind=\"sliderProps\"\n      class=\"slider\"\n      :class=\"{\n        'slider--disabled': disabled,\n        'slider--readonly': readonly,\n      }\"\n    >\n      <div ref=\"trackRef\" v-bind=\"trackProps\" class=\"slider__track\">\n        <div\n          class=\"slider__progress\"\n          :style=\"{\n            left: `${getThumbPercentage(0)}%`,\n            width: `${getThumbPercentage(1) - getThumbPercentage(0)}%`,\n          }\"\n        />\n      </div>\n      <Thumb\n        v-for=\"(value, index) in modelValue\"\n        :key=\"index\"\n        :value=\"value\"\n        :disabled=\"disabled\"\n      />\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.slider-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  width: 100%;\n}\n\n.slider {\n  position: relative;\n  height: 20px;\n  display: flex;\n  align-items: center;\n}\n\n.slider__track {\n  position: relative;\n  width: 100%;\n  height: 4px;\n  background-color: #e5e7eb;\n  border-radius: 9999px;\n}\n\n.slider__progress {\n  position: absolute;\n  height: 100%;\n  background-color: #3b82f6;\n  border-radius: 9999px;\n}\n\n.slider--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.slider--readonly {\n  opacity: 0.7;\n  cursor: default;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing File Size Validation with Zod in Vue\nDESCRIPTION: This snippet demonstrates how to use Zod schema validation with Formwerk to validate file size, limiting it to 1MB maximum.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/file-fields.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport FileField from './FileField.vue';\n\nconst schema = z.object({\n  size: z.number().max(1 * 1024 * 1024, 'Size must be less than 1MB'),\n});\n</script>\n\n<template>\n  <FileField label=\"File\" :schema=\"schema\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Field Component with FormWerk in Vue 3\nDESCRIPTION: Sets up a date field component using FormWerk's date utilities. It initializes the date field with props and extracts necessary properties for rendering segments and handling calendar interactions.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_dateFieldPartialWithCalendar.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDateField, DateTimeSegment, usePicker } from '@formwerk/core';\nimport Calendar from './Calendar.vue';\n\nimport { type DateFieldProps } from '@formwerk/core';\n\nconst props = defineProps<DateFieldProps>();\n\nconst {\n  controlProps,\n  isTouched,\n  labelProps,\n  errorMessageProps,\n  errorMessage,\n  segments,\n  direction,\n  calendarProps,\n} = useDateField(props);\n\nconst { pickerProps, pickerTriggerProps } = usePicker({\n  label: 'Pick a date',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Discrete Slider with Custom Options in Vue\nDESCRIPTION: This snippet demonstrates how to create a slider with discrete text values instead of numeric values. It uses the options prop to define a rating scale from 'Bad' to 'Great', which automatically sets appropriate min, max, and step values.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/sliders.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Slider from './Slider.vue';\n\nconst options = ['Bad', 'Poor', 'Okay', 'Good', 'Great'];\n</script>\n\n<template>\n  <Slider label=\"Discrete Slider\" :options=\"options\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using toFormData Method in FormWerk\nDESCRIPTION: Demonstrates how to use the toFormData method to convert form data to a FormData object for submission. This is useful for traditional form endpoints or when submitting files.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  data.toFormData(); // FormData\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Group with fieldset element in Vue\nDESCRIPTION: Example of creating a form with a form group using the fieldset element. This demonstrates how to use FormWerk's useForm and structure shipping information fields within a group that will be nested in the submitted data.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/form-groups.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport FormGroup from './FormGroup.vue';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n\n    <FormGroup name=\"shipping\" label=\"Shipping information\">\n      <TextField name=\"address\" label=\"Address\" required />\n      <TextField name=\"city\" label=\"City\" required />\n      <TextField name=\"zip\" label=\"ZIP\" required />\n    </FormGroup>\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Combining HTML and Schema Validation for File Fields in Vue\nDESCRIPTION: This example shows how to use both HTML constraints and Zod schema validation together in a file field component using Formwerk.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/file-fields.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport FileField from './FileField.vue';\n\nconst schema = z.object({\n  size: z.number().max(1 * 1024 * 1024, 'Size must be less than 1MB'),\n});\n</script>\n\n<template>\n  <FileField label=\"File\" :schema=\"schema\" required />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Submit Errors in FormWerk\nDESCRIPTION: Code snippet showing how to access submit errors from a field component. Unlike validation errors, submit errors are only populated when the form is submitted, making them useful for displaying errors only after form submission.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTextField } from '@formwerk/core';\n\nconst { submitErrorMessage, submitErrors } = useTextField({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Option Groups with Vue in SelectField Component\nDESCRIPTION: Example of creating a select field with option groups organized by continents and countries. This demonstrates how to use SelectField, OptionGroup, and OptionItem components to create a hierarchical dropdown list.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SelectField from './SelectField.vue';\nimport OptionGroup from './OptionGroup.vue';\nimport OptionItem from './OptionItem.vue';\n\nconst groups = [\n  { label: 'Africa', options: ['Egypt', 'Nigeria', 'Ghana', 'Kenya'] },\n  { label: 'Asia', options: ['China', 'India', 'Japan'] },\n  { label: 'Europe', options: ['France', 'Germany', 'Italy'] },\n  { label: 'North America', options: ['Canada', 'Mexico', 'United States'] },\n  { label: 'South America', options: ['Argentina', 'Brazil', 'Chile'] },\n];\n</script>\n\n<template>\n  <SelectField label=\"Select a country\">\n    <OptionGroup\n      v-for=\"group in groups\"\n      :key=\"group.label\"\n      :label=\"group.label\"\n    >\n      <OptionItem\n        v-for=\"country in group.options\"\n        :key=\"country\"\n        :label=\"country\"\n        :value=\"country\"\n      />\n    </OptionGroup>\n  </SelectField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Triggering Manual Validation in Custom Fields\nDESCRIPTION: Code snippet showing how to manually trigger validation in custom fields using the validate function from useCustomField. This is necessary because custom fields lack built-in validation triggers.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/custom-fields.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useCustomField, type CustomFieldProps } from '@formwerk/core';\n\nconst props = defineProps<CustomFieldProps>();\n\nconst { validate, setValue } = useCustomField(props);\n\nfunction onValueChange(value: string) {\n  setValue(value);\n  validate();\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Schema Validation with Checkbox Components in Vue\nDESCRIPTION: This snippet demonstrates how to use Standard Schema validation (specifically Zod) with both single checkboxes and checkbox groups. It shows how to define schemas for validation with minimum requirements.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport Checkbox from './Checkbox.vue';\nimport CheckboxGroup from './CheckboxGroup.vue';\n\nconst schema = z.array(z.string()).min(1, 'Required');\n\nconst singleSchema = z.literal(true, 'Required');\n</script>\n\n<template>\n  <!-- Single checkbox -->\n  <Checkbox label=\"Terms\" :value=\"true\" :schema=\"singleSchema\" />\n\n  <!-- Checkbox group -->\n  <CheckboxGroup label=\"Colors (Standard Schema)\" :schema=\"schema\">\n    <Checkbox label=\"Red\" value=\"red\" />\n    <Checkbox label=\"Green\" value=\"green\" />\n    <Checkbox label=\"Blue\" value=\"blue\" />\n  </CheckboxGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Zod Schema Validation with SelectField\nDESCRIPTION: Implementation of form validation using Zod schema with a select field. This demonstrates how to create complex validation rules like minimum length and string pattern matching for select values.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SelectField from './SelectField.vue';\nimport OptionItem from './OptionItem.vue';\nimport { z } from 'zod';\n\nconst schema = z\n  .string()\n  .min(1, 'Please select a drink')\n  .endsWith('coffee', 'WRONG ANSWER!');\n</script>\n\n<template>\n  <SelectField label=\"Select a drink (Standard Schema)\" :schema=\"schema\">\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </SelectField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: File Upload Vue Component Script Setup\nDESCRIPTION: TypeScript setup code for file upload component using @formwerk/core hook. Defines props and extracts functionality from useFileField hook including file handling, error states, and upload status.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_fileField.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useFileField, type FileFieldProps, FileEntry } from '@formwerk/core';\n\nconst props = defineProps<FileFieldProps>();\n\nconst {\n  inputProps,\n  triggerProps,\n  entries,\n  errorMessageProps,\n  errorMessage,\n  remove,\n  removeButtonProps,\n  isUploading,\n} = useFileField(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Errors with displayError in Vue\nDESCRIPTION: Example of using the displayError function from useForm to conditionally display field errors. This method only shows errors for fields that have been touched by the user, providing a better user experience.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport { z } from 'zod';\n\nconst { handleSubmit, displayError } = useForm({\n  schema: z.object({\n    url: z.string().url().max(8),\n    email: z.string().email(),\n  }),\n});\n</script>\n\n<template>\n  <TextField name=\"url\" label=\"URL\" required />\n  <TextField name=\"email\" label=\"Email\" required />\n\n  <ul>\n    <li>URL Error: {{ displayError('url') }}</li>\n    <li>Email Error: {{ displayError('email') }}</li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Submit State with isSubmitting in FormWerk\nDESCRIPTION: Demonstrates how to use the isSubmitting property to show loading spinners or disable submit buttons during form submission with an async handler.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\n\nconst { handleSubmit, isSubmitting } = useForm();\n\nconst onSubmit = handleSubmit(async (data) => {\n  await new Promise((resolve) => setTimeout(resolve, 2000));\n\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n    <TextField name=\"password\" label=\"Password\" type=\"password\" required />\n\n    <button :disabled=\"isSubmitting\" type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Standard Schema Validation for Switch Components using Zod\nDESCRIPTION: This example shows how to validate a Switch component using Standard Schema validation with Zod. It demonstrates setting up a schema that requires the switch value to be true.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/switches.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport Switch from './Switch.vue';\n\nconst schema = z.literal(true);\n</script>\n\n<template>\n  <Switch label=\"Standard Schema\" :schema=\"schema\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Constraint Validation in SelectField\nDESCRIPTION: Example showing how to implement required field validation using HTML constraints in a select field. This demonstrates the basic validation approach without using a schema validator.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SelectField from './SelectField.vue';\nimport OptionItem from './OptionItem.vue';\n</script>\n\n<template>\n  <SelectField label=\"Select a drink (HTML Constraints)\" required>\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </SelectField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing FormwerkJS Option Component in Vue with TypeScript\nDESCRIPTION: This Vue component uses the composition API with TypeScript to create a reusable option element. It imports and utilizes the useOption hook from @formwerk/core to handle option functionality.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_option.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type OptionProps, useOption } from '@formwerk/core';\n\nconst props = defineProps<OptionProps>();\n\nconst { optionProps } = useOption(props);\n</script>\n\n<template>\n  <div v-bind=\"optionProps\" class=\"option\">\n    {{ label }}\n  </div>\n</template>\n\n<style scoped>\n.option {\n  user-select: none;\n  padding: 2px 8px;\n  border-radius: 4px;\n  font-size: 14px;\n  border: 1px solid transparent;\n  transition:\n    background-color 0.2s,\n    color 0.2s,\n    border-color 0.2s;\n\n  &:hover {\n    background-color: #e4e4e7;\n  }\n\n  &[aria-selected='true'],\n  &[aria-checked='true'] {\n    background-color: #10b981;\n    color: #fff;\n  }\n\n  &:focus {\n    outline: none;\n    border-color: #10b981;\n  }\n\n  &[aria-disabled='true'] {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Accessing All Form Errors with getErrors in Vue\nDESCRIPTION: Example of using the getErrors function from useForm to access all form errors. It returns an array of error groups, with each group containing a field error message and path.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport { z } from 'zod';\n\nconst { handleSubmit, getErrors } = useForm({\n  schema: z.object({\n    url: z.string().url().max(8),\n    email: z.string().email(),\n  }),\n});\n</script>\n\n<template>\n  <TextField name=\"url\" label=\"URL\" required />\n  <TextField name=\"email\" label=\"Email\" required />\n\n  <ul>\n    <li v-for=\"error in getErrors()\">{{ error.path }}: {{ error.messages }}</li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Type Inference with initialValues in FormWerk.js\nDESCRIPTION: Demonstrates basic type inference using the initialValues property in useForm. This approach infers input types but doesn't provide strong output typing, resulting in possible undefined values.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst { values, handleSubmit } = useForm({\n  initialValues: { email: '' },\n});\n\nvalues; // { email?: string | undefined }\n```\n\n----------------------------------------\n\nTITLE: HTML Constraints Example\nDESCRIPTION: Shows how to implement number field validation using HTML constraints with min, max, and step values\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/number-fields.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport NumberField from './NumberField.vue';\n\nconst value = ref(26);\n</script>\n\n<template>\n  <NumberField\n    v-model=\"value\"\n    label=\"Amount\"\n    max=\"50\"\n    min=\"0\"\n    step=\"2\"\n    required\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Field Paths in Form Groups\nDESCRIPTION: Example showing how form groups prefix field names, creating nested paths in the submitted data. The example shows fields with the same name in different groups will be properly nested under their respective group names.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/form-groups.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport FormGroup from './FormGroup.vue';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"field\" label=\"Not Nested\" />\n\n    <FormGroup name=\"group-1\" label=\"Group 1\">\n      <TextField name=\"field\" label=\"Field 1 - Group 1\" />\n    </FormGroup>\n\n    <FormGroup name=\"group-2\" label=\"Group 2\">\n      <TextField name=\"field\" label=\"Field 1 - Group 2\" />\n    </FormGroup>\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DateField Component in Vue Application\nDESCRIPTION: Simple implementation showing how to import and use a DateField component with name and label props in a Vue application.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport DateField from './DateField.vue';\n</script>\n\n<template>\n  <DateField name=\"date\" label=\"Date\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Zod Schema Validation for ComboBox\nDESCRIPTION: Demonstrates how to use Zod for schema validation with a ComboBox component. This example enforces selection of a drink and validates that the selected value ends with 'coffee'.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport ComboBox from './ComboBox.vue';\nimport OptionItem from './OptionItem.vue';\nimport { z } from 'zod';\n\nconst schema = z\n  .string()\n  .min(1, 'Please select a drink')\n  .endsWith('coffee', 'WRONG ANSWER!');\n</script>\n\n<template>\n  <ComboBox label=\"Select a drink\" :schema=\"schema\" placeholder=\"Search...\">\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </ComboBox>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing ComboBox Component in Vue with TypeScript\nDESCRIPTION: Sets up the ComboBox component using Vue 3 composition API and TypeScript. It imports necessary functions from @formwerk/core, defines props, and initializes the ComboBox functionality.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_combobox.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useId } from 'vue';\nimport {\n  useComboBox,\n  type ComboBoxProps,\n  useDefaultFilter,\n} from '@formwerk/core';\n\nconst props = defineProps<ComboBoxProps>();\nconst id = useId();\nconst anchorId = `--anchor-${id}`;\n\nconst { contains } = useDefaultFilter({\n  caseSensitive: false,\n});\n\nconst {\n  buttonProps,\n  inputProps,\n  labelProps,\n  errorMessageProps,\n  errorMessage,\n  listBoxProps,\n  isListEmpty,\n} = useComboBox(props, {\n  filter: contains,\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global HTML5 Validation Disabling in TypeScript\nDESCRIPTION: This snippet demonstrates how to globally disable HTML5 validation in Formwerk using the configure function.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/validation.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from '@formwerk/core';\n\nconfigure({\n  disableHtmlValidation: true,\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Constraints Validation Example\nDESCRIPTION: Demonstration of using HTML validation constraints with maxLength, minLength and required attributes\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\n</script>\n\n<template>\n  <TextField\n    label=\"HTML Constraints Demo\"\n    maxLength=\"8\"\n    minLength=\"3\"\n    required\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch On/Off Values in Vue with Formwerk\nDESCRIPTION: This example demonstrates how to customize the on and off values of a Switch component by setting the trueValue and falseValue props. This allows for using string values instead of booleans.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/switches.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport Switch from './Switch.vue';\n\nconst value = ref('off');\n</script>\n\n<template>\n  <Switch\n    label=\"Custom values\"\n    v-model=\"value\"\n    :trueValue=\"'on'\"\n    :falseValue=\"'off'\"\n  />\n\n  <div>Value is: {{ value }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale and Calendar Support in DateField with Vue\nDESCRIPTION: This snippet demonstrates how to use the calendar and locale props in the DateField component. It shows an example of using the Islamic Umalqura calendar with Arabic locale, and includes options for importing calendar systems to optimize bundle size.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  createCalendar,\n  IslamicUmalquraCalendar,\n} from '@internationalized/date';\nimport DateField from './DateField.vue';\n\n// This will import all calendars available.\n// Resulting in a larger bundle size.\nconst calendar = createCalendar('islamic-umalqura');\n\n// This will import only the Islamic Umalqura calendar.\n// This allows tree-shaking, reducing the bundle size.\n// const calendar = IslamicUmalquraCalendar;\n</script>\n\n<template>\n  <DateField\n    label=\"Hijri Date\"\n    :value=\"new Date('2025-02-11')\"\n    :calendar=\"calendar\"\n    locale=\"ar-SA\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Indeterminate Checkboxes in Vue\nDESCRIPTION: This example shows how to create an indeterminate (tri-state) checkbox, which is useful for representing a mixed state like when a parent checkbox represents a group with some checked and some unchecked items.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport Checkbox from './Checkbox.vue';\n</script>\n\n<template>\n  <Checkbox label=\"Terms\" indeterminate />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating FormGroup Vue Component with TypeScript and FormWerk\nDESCRIPTION: A complete Vue component implementing a form group using the FormWerk library. It renders a fieldset with a legend based on provided props and exposes a slot for child elements. The component leverages the useFormGroup hook from @formwerk/core to handle accessibility and form behavior.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/_partials/_fieldset.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <fieldset v-bind=\"groupProps\">\n    <legend v-bind=\"labelProps\">{{ label }}</legend>\n\n    <slot />\n  </fieldset>\n</template>\n\n<script setup lang=\"ts\">\nimport { type FormGroupProps, useFormGroup } from '@formwerk/core';\n\nconst props = defineProps<FormGroupProps>();\n\nconst { labelProps, groupProps } = useFormGroup(props);\n</script>\n\n<style>\nfieldset {\n  border: 1px solid #e0e0e0;\n  margin: 10px 0;\n  padding: 8px;\n  border-radius: 6px;\n\n  legend {\n    font-size: 16px;\n    font-weight: 600;\n    color: #333;\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchField Component with Submit Callback in Vue\nDESCRIPTION: This snippet demonstrates how to use the SearchField component in a Vue application. It sets up a submit callback function that is triggered when the user presses Enter in the search field.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/search-fields.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SearchField from './SearchField.vue';\n\nconst onSubmit = (value: string) => {\n  alert(`Searching for: ${value}`);\n};\n</script>\n\n<template>\n  <SearchField label=\"Search\" placeholder=\"Search for...\" @submit=\"onSubmit\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Group with Zod Schema Validation in Vue.js\nDESCRIPTION: This example demonstrates how to use Zod for schema validation with a RadioGroup component. It shows how to define a schema and pass it to the RadioGroup for custom validation rules.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport RadioItem from './RadioItem.vue';\nimport RadioGroup from './RadioGroup.vue';\nimport { z } from 'zod';\n\nconst schema = z\n  .string()\n  .min(1, 'Please select a drink')\n  .endsWith('☕️', 'WRONG ANSWER!');\n</script>\n\n<template>\n  <RadioGroup label=\"Select a drink\" :schema=\"schema\">\n    <RadioItem label=\"Tea\" value=\"🍵\" />\n    <RadioItem label=\"Coffee\" value=\"☕️\" />\n    <RadioItem label=\"Milk\" value=\"🥛\" />\n  </RadioGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Select Fields with Option Groups\nDESCRIPTION: Implementation of a multiple select field that allows users to choose multiple options from grouped lists. This demonstrates the multiple prop and how it changes the behavior of the select component.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SelectField from './SelectField.vue';\nimport OptionGroup from './OptionGroup.vue';\nimport OptionItem from './OptionItem.vue';\n\nconst groups = [\n  { label: 'Africa', options: ['Egypt', 'Nigeria', 'Ghana', 'Kenya'] },\n  { label: 'Asia', options: ['China', 'India', 'Japan'] },\n  { label: 'Europe', options: ['France', 'Germany', 'Italy'] },\n  { label: 'North America', options: ['Canada', 'Mexico', 'United States'] },\n  { label: 'South America', options: ['Argentina', 'Brazil', 'Chile'] },\n];\n</script>\n\n<template>\n  <SelectField label=\"Pick countries\" multiple>\n    <OptionGroup\n      v-for=\"group in groups\"\n      :key=\"group.label\"\n      :label=\"group.label\"\n    >\n      <OptionItem\n        v-for=\"country in group.options\"\n        :key=\"country\"\n        :label=\"country\"\n        :value=\"country\"\n      />\n    </OptionGroup>\n  </SelectField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Schema Validation with Zod\nDESCRIPTION: Example showing how to use Zod schema validation with TextField component\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport TextField from './TextField.vue';\n\nconst schema = z.string().min(3).max(8);\n</script>\n\n<template>\n  <TextField label=\"Standard Schema\" :schema=\"schema\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixed Validation for Date Fields with Formwerk\nDESCRIPTION: Example showing how to use both HTML constraints and Standard Schema validation together for a date field. HTML constraints are validated first, followed by the schema validation.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport DateField from './DateField.vue';\n\nconst schema = z.date().min(new Date('2025-01-01')).max(new Date('2025-12-31'));\n</script>\n\n<template>\n  <DateField label=\"Mixed Validation\" :schema=\"schema\" required />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Input Component Logic in Vue with TypeScript\nDESCRIPTION: This snippet sets up the component's logic using the Composition API. It imports necessary functions and types from Formwerk, defines props, and uses the useTimeField hook to manage the time input state and behavior.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_timeField.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  useTimeField,\n  type TimeFieldProps,\n  DateTimeSegment,\n} from '@formwerk/core';\n\nconst props = defineProps<TimeFieldProps>();\n\nconst {\n  controlProps,\n  isTouched,\n  labelProps,\n  errorMessageProps,\n  errorMessage,\n  segments,\n  direction,\n} = useTimeField(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Values in Vue ComboBox\nDESCRIPTION: Demonstrates how to allow custom value addition in a ComboBox using the onNewValue handler. Includes dynamic option list management.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport ComboBox from './ComboBox.vue';\nimport OptionItem from './OptionItem.vue';\n\nconst drinks = ref([\n  { value: 'coffee', label: 'Coffee ☕️' },\n  { value: 'tea', label: 'Tea 🍵' },\n  { value: 'milk', label: 'Milk 🥛' },\n]);\n\nfunction onNewDrink(value: string) {\n  const newDrink = { value, label: `${value} 🍹` };\n  drinks.value.push(newDrink);\n\n  return newDrink;\n}\n</script>\n\n<template>\n  <ComboBox\n    label=\"Select a drink\"\n    placeholder=\"Search...\"\n    @new-value=\"onNewDrink\"\n  >\n    <OptionItem\n      v-for=\"drink in drinks\"\n      :key=\"drink.value\"\n      :label=\"drink.label\"\n      :value=\"drink.value\"\n    />\n  </ComboBox>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Resetting Form to Custom State in Vue\nDESCRIPTION: Example of resetting a form to a specific state by providing custom values and touched states. This allows for more fine-grained control over the form's state after reset.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_26\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\n\nconst { handleSubmit, reset } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n\nfunction onResetClick() {\n  reset({\n    value: {\n      email: 'hello@formwerk.dev',\n      password: 'p@$$w0rd',\n    },\n    touched: {\n      email: true,\n      password: false,\n    },\n  });\n}\n</script>\n\n<template>\n  <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n  <TextField name=\"password\" label=\"Password\" type=\"password\" required />\n\n  <button @click=\"onResetClick\">Reset</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Integrating Formwerk with Vue i18n in TypeScript\nDESCRIPTION: Illustrates how to use Formwerk with Vue i18n by setting a reactive locale value. This ensures that Formwerk's directionality updates automatically when the locale changes in Vue i18n.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/i18n.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createI18n } from 'vue-i18n';\nimport { configure } from '@formwerk/core';\n\nconst i18n = createI18n({\n  locale: 'en-US',\n});\n\nconfigure({\n  // Reactive if legacy: false in vue-i18n options\n  locale: i18n.global.locale,\n});\n```\n\n----------------------------------------\n\nTITLE: Using toObject and toJSON Methods for Form Data in TypeScript\nDESCRIPTION: This snippet shows how to use the toObject and toJSON methods to retrieve form data in different formats. It demonstrates the differences between these methods and their use cases.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  data.toObject(); // { email: '...', password: '...', rememberMe: true }\n});\n\nconst onSubmitJSON = handleSubmit(async (data) => {\n  const response = await fetch('https://example.org/post', {\n    body: JSON.stringify(data),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing TextArea Component with FormWerk in Vue\nDESCRIPTION: Sets up the TypeScript props and composition API for a textarea component using FormWerk's core library. It imports TextFieldProps type and useTextField hook to handle form field functionality including validation, accessibility, and state management.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_textarea.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type TextFieldProps, useTextField } from '@formwerk/core';\n\nconst props = defineProps<TextFieldProps>();\n\nconst {\n  inputProps,\n  labelProps,\n  errorMessage,\n  errorMessageProps,\n  descriptionProps,\n} = useTextField(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic FormRepeater Setup with TypeScript\nDESCRIPTION: Basic implementation of the useFormRepeater composable that returns the necessary items and Iteration component for rendering repeatable form fields.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/form-repeater.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFormRepeater, FormRepeaterProps } from '@formwerk/core';\n\nconst props = defineProps<FormRepeaterProps>();\n\nconst { items, Iteration } = useFormRepeater(props);\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Schema Validation for Time Field in Vue\nDESCRIPTION: This snippet demonstrates how to use Standard Schema (Zod in this case) for validating a time field. It includes a custom validation function to check if the time is within a specific range.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport TimeField from './TimeField.vue';\n\nconst schema = z.string().refine(\n  (value) => {\n    const time = new Date(`1970-01-01T${value}`);\n\n    return (\n      time.getHours() >= 0 &&\n      time.getHours() <= 10 &&\n      time.getMinutes() >= 0 &&\n      time.getMinutes() <= 4\n    );\n  },\n  {\n    message: 'Time must be between 00:00 and 10:04',\n  }\n);\n</script>\n\n<template>\n  <TimeField label=\"Standard Schema\" :schema=\"schema\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly ComboBox in Vue\nDESCRIPTION: Demonstrates readonly ComboBox implementation where the field is validated and submitted but doesn't accept user input. The field remains focusable with accessible popup.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport ComboBox from './ComboBox.vue';\nimport OptionGroup from './OptionGroup.vue';\nimport OptionItem from './OptionItem.vue';\n</script>\n\n<template>\n  <ComboBox label=\"Pick a drink\" readonly placeholder=\"Search...\">\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </ComboBox>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting up NumberField Component with FormwerkJS Core in Vue\nDESCRIPTION: Imports and configures the useNumberField hook from @formwerk/core. Defines props interface using NumberFieldProps and extracts all necessary props and functions for the number field component.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_numberField.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type NumberFieldProps, useNumberField } from '@formwerk/core';\n\nconst props = defineProps<NumberFieldProps>();\n\nconst {\n  inputProps,\n  labelProps,\n  errorMessage,\n  descriptionProps,\n  errorMessageProps,\n  incrementButtonProps,\n  decrementButtonProps,\n  isTouched,\n} = useNumberField(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Select Component with Formwerk\nDESCRIPTION: This snippet defines a Vue component for a custom select input. It uses the useSelect hook from Formwerk for handling select functionality and implements the UI with accessibility features.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_select.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useId } from 'vue';\nimport { useSelect, type SelectProps } from '@formwerk/core';\n\nconst props = defineProps<SelectProps>();\nconst id = useId();\nconst triggerId = `--trigger-${id}`;\n\nconst {\n  triggerProps,\n  labelProps,\n  errorMessageProps,\n  isTouched,\n  errorMessage,\n  fieldValue,\n  listBoxProps,\n} = useSelect(props);\n</script>\n\n<template>\n  <div class=\"select\">\n    <div v-bind=\"labelProps\" class=\"select-label\">{{ label }}</div>\n\n    <div v-bind=\"triggerProps\" class=\"trigger\">\n      <div v-if=\"multiple && fieldValue?.length\" class=\"multi-value-display\">\n        <span v-for=\"selected in fieldValue\">{{ selected }}</span>\n      </div>\n      <span v-else class=\"placeholder\">\n        {{ fieldValue?.length ? fieldValue : 'Pick a value' }}\n      </span>\n\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"14\"\n        height=\"14\"\n        viewBox=\"0 0 256 256\"\n      >\n        <path\n          d=\"M181.66,170.34a8,8,0,0,1,0,11.32l-48,48a8,8,0,0,1-11.32,0l-48-48a8,8,0,0,1,11.32-11.32L128,212.69l42.34-42.35A8,8,0,0,1,181.66,170.34Zm-96-84.68L128,43.31l42.34,42.35a8,8,0,0,0,11.32-11.32l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,85.66,85.66Z\"\n        ></path>\n      </svg>\n    </div>\n\n    <div v-bind=\"listBoxProps\" popover class=\"listbox\">\n      <slot />\n    </div>\n\n    <div v-if=\"description\" v-bind=\"descriptionProps\" class=\"hint\">\n      {{ description }}\n    </div>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.select {\n  --color-text: #333;\n  --color-hint: #666;\n  --color-focus: #059669;\n  --color-error: #f00;\n  --color-hover: #eee;\n  --color-border: #d4d4d8;\n\n  display: flex;\n  flex-direction: column;\n  width: max-content;\n\n  .select-label {\n    color: var(--color-text);\n    display: block;\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n  }\n\n  .trigger {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    /** CSS Anchor Positioning */\n    anchor-name: v-bind('triggerId');\n    border: 1px solid var(--color-border);\n    padding: 4px 8px;\n    font-size: 14px;\n    color: var(--color-text);\n    border-radius: 0.375rem;\n    user-select: none;\n    cursor: pointer;\n\n    svg {\n      margin-left: 4px;\n    }\n\n    &:focus {\n      outline: none;\n      border: 1px solid var(--color-focus);\n    }\n  }\n\n  .listbox {\n    padding: 0;\n    inset: auto;\n    position: relative;\n    background: #fff;\n    border: 1px solid #e5e7eb;\n    max-height: 40vh;\n    opacity: 0;\n    border-radius: 6px;\n    margin: 0;\n    width: 250px;\n    box-shadow:\n      0 4px 6px -1px rgba(0, 0, 0, 0.1),\n      0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    transition:\n      display 0.2s allow-discrete,\n      opacity 0.2s allow-discrete,\n      transform 0.2s allow-discrete,\n      overlay 0.2s allow-discrete;\n\n    &:popover-open {\n      opacity: 1;\n    }\n\n    padding: 8px;\n\n    &:has(.option-group) {\n      padding: 0;\n    }\n\n    /** CSS Anchor Positioning */\n    position-anchor: v-bind('triggerId');\n    inset-area: bottom center;\n    position-area: bottom center;\n    position-try-fallbacks:\n      flip-block,\n      flip-inline,\n      flip-block flip-inline;\n    position-try-order: max-height;\n    scrollbar-width: thin;\n    overflow-y: auto;\n    overflow-y: overlay;\n    scrollbar-color: rgb(192 192 185) transparent;\n  }\n\n  .hint,\n  .error {\n    margin-top: 0.25rem;\n  }\n\n  .error {\n    color: var(--color-error);\n    display: none;\n    font-size: 13px;\n  }\n\n  .hint {\n    color: var(--color-hint);\n    font-size: 13px;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  &:has(:focus) {\n    .hint {\n      opacity: 1;\n    }\n  }\n\n  &:has([aria-invalid='true']) {\n    .hint {\n      display: none;\n    }\n\n    .error {\n      display: block;\n    }\n  }\n\n  .multi-value-display {\n    display: flex;\n    gap: 3px;\n\n    span {\n      padding: 2px 4px;\n      background: #10b981;\n      font-size: 13px;\n      color: #fff;\n      border-radius: 4px;\n    }\n  }\n\n  .placeholder {\n    color: var(--color-hint);\n  }\n}\n\n@starting-style {\n  .listbox:popover-open {\n    opacity: 0;\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for Time Field in Vue\nDESCRIPTION: This example shows how to set minimum and maximum allowed times for a time field using the 'min' and 'max' props.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TimeField from './TimeField.vue';\n</script>\n\n<template>\n  <TimeField label=\"Min and Max\" min=\"00:00\" max=\"10:04\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Integrating DateField with Calendar Component in Vue\nDESCRIPTION: This example shows how to use the DateField component in conjunction with a Calendar component. It assumes the existence of a custom Calendar component and demonstrates the basic setup for integrating the two.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport DateField from './DateField.vue';\n</script>\n\n<template>\n  <DateField label=\"Date\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly Radio Group in Vue\nDESCRIPTION: Demonstrates implementation of a readonly radio group that allows submission and validation but prevents user interaction. Uses v-model for value binding.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport RadioItem from './RadioItem.vue';\nimport RadioGroup from './RadioGroup.vue';\n\nconst value = ref('☕️');\n</script>\n\n<template>\n  <RadioGroup\n    label=\"Select a drink\"\n    v-model=\"value\"\n    description=\"Can't change this\"\n    readonly\n  >\n    <RadioItem label=\"Tea 🍵\" value=\"🍵\" />\n    <RadioItem label=\"Coffee ☕️\" value=\"☕️\" />\n    <RadioItem label=\"Milk 🥛\" value=\"🥛\" />\n  </RadioGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple File Selection in Vue Dropzone\nDESCRIPTION: This example demonstrates how to allow users to select multiple files in a dropzone component using the multiple prop with Formwerk.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/file-fields.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Dropzone from './Dropzone.vue';\n</script>\n\n<template>\n  <Dropzone label=\"Multiple Files\" multiple />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom SpeakField Component in Vue\nDESCRIPTION: A simple example showing how to use a custom 'SpeakField' component that implements a speech recognition challenge where users speak a sentence.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/custom-fields.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SpeakField from './SpeakField.vue';\n</script>\n\n<template>\n  <SpeakField name=\"challenge\" label=\"Say the following\" sentence=\"I went to the store\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing RTL Support for Search Fields in Vue\nDESCRIPTION: This example demonstrates how to create a right-to-left (RTL) search field using Formwerk's SearchField component with the dir prop.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/search-fields.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SearchField from './SearchField.vue';\n</script>\n\n<template>\n  <SearchField label=\"البحث\" placeholder=\"ابحث عن...\" dir=\"rtl\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using HTML Constraints for Date Field Validation with Formwerk\nDESCRIPTION: Example showing how to validate a date field using HTML constraints including required fields and min/max date boundaries.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport DateField from './DateField.vue';\n</script>\n\n<template>\n  <DateField\n    label=\"HTML Constraints\"\n    required\n    :min=\"new Date('2025-01-01')\"\n    :max=\"new Date('2025-12-31')\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider Component in Vue with Formwerk\nDESCRIPTION: This code snippet shows how to build a slider component using the useSlider composable from Formwerk. It includes the necessary template structure, bindings, and styling for a functional slider with a single thumb.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/sliders.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSlider, useThumbMetadata } from '@formwerkjs/formwerk';\nimport Thumb from './Thumb.vue';\n\nconst props = withDefaults(\n  defineProps<{\n    modelValue?: number;\n    label?: string;\n    disabled?: boolean;\n    readonly?: boolean;\n    min?: number;\n    max?: number;\n    step?: number;\n    dir?: 'ltr' | 'rtl';\n    orientation?: 'horizontal' | 'vertical';\n  }>(),\n  {\n    min: 0,\n    max: 100,\n    step: 1,\n    dir: 'ltr',\n    orientation: 'horizontal',\n  }\n);\n\nconst emit = defineEmits<{\n  (e: 'update:modelValue', value: number): void;\n}>();\n\nconst {\n  sliderRef,\n  sliderProps,\n  trackRef,\n  trackProps,\n  thumbsMetadata,\n  labelProps,\n} = useSlider(props, emit);\n\nconst { getThumbPercentage } = useThumbMetadata(thumbsMetadata);\n</script>\n\n<template>\n  <div class=\"slider-wrapper\">\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <div\n      ref=\"sliderRef\"\n      v-bind=\"sliderProps\"\n      class=\"slider\"\n      :class=\"{\n        'slider--disabled': disabled,\n        'slider--readonly': readonly,\n      }\"\n    >\n      <div ref=\"trackRef\" v-bind=\"trackProps\" class=\"slider__track\">\n        <div\n          class=\"slider__progress\"\n          :style=\"{ width: `${getThumbPercentage(0)}%` }\"\n        />\n      </div>\n      <Thumb :value=\"modelValue\" :disabled=\"disabled\" />\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.slider-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  width: 100%;\n}\n\n.slider {\n  position: relative;\n  height: 20px;\n  display: flex;\n  align-items: center;\n}\n\n.slider__track {\n  position: relative;\n  width: 100%;\n  height: 4px;\n  background-color: #e5e7eb;\n  border-radius: 9999px;\n}\n\n.slider__progress {\n  position: absolute;\n  height: 100%;\n  background-color: #3b82f6;\n  border-radius: 9999px;\n}\n\n.slider--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.slider--readonly {\n  opacity: 0.7;\n  cursor: default;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Customizing Time Field Format Options in Vue\nDESCRIPTION: This snippet demonstrates how to customize the display format of a time field using the 'formatOptions' prop. It changes the format to 12-hour with AM/PM indicator.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TimeField from './TimeField.vue';\n</script>\n\n<template>\n  <TimeField\n    label=\"Format Options\"\n    :formatOptions=\"{\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true,\n    }\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Option Component with Vue and TypeScript\nDESCRIPTION: Demonstrates how to create an Option component using the useOption composable from Formwerk. This component represents individual options in a ComboBox or Select field.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useOption, type OptionProps } from '@formwerk/core';\n\nconst props = defineProps<OptionProps<any>>();\nconst { optionAttrs } = useOption(props);\n</script>\n\n<template>\n  <li v-bind=\"optionAttrs\">\n    {{ props.label }}\n  </li>\n</template>\n```\n\n----------------------------------------\n\nTITLE: OTP Field with Completion Handler\nDESCRIPTION: Example of an OTP field with an onCompleted event handler that triggers when all slots are filled with valid characters. The handler displays an alert with the completed code.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\n\nfunction onCompleted(value: string) {\n  alert(`Code completed: ${value}`);\n}\n</script>\n\n<template>\n  <OtpField label=\"Enter Code\" @completed=\"onCompleted\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckboxGroup Component with TypeScript in Vue\nDESCRIPTION: This Vue component implements a checkbox group using FormWerk's core functionality. It manages group state (checked, unchecked, mixed), provides a toggle function, and renders a container with a label and checkboxes. The component uses the useCheckboxGroup composable from @formwerk/core to handle group state management.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkboxGroupMixed.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Checkbox from './Checkbox.vue';\nimport { type CheckboxGroupProps, useCheckboxGroup } from '@formwerk/core';\n\nconst props = defineProps<CheckboxGroupProps>();\n\nconst { groupProps, groupState, labelProps } = useCheckboxGroup(props);\n\nfunction toggleGroupState() {\n  groupState.value = groupState.value === 'checked' ? 'unchecked' : 'checked';\n}\n</script>\n\n<template>\n  <div v-bind=\"groupProps\">\n    <div v-bind=\"labelProps\" class=\"group-label\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"18\"\n        height=\"18\"\n        fill=\"#000000\"\n        viewBox=\"0 0 256 256\"\n        @click=\"toggleGroupState\"\n      >\n        <path\n          v-if=\"groupState === 'checked'\"\n          d=\"M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32Zm-34.34,77.66-56,56a8,8,0,0,1-11.32,0l-24-24a8,8,0,0,1,11.32-11.32L112,148.69l50.34-50.35a8,8,0,0,1,11.32,11.32Z\"\n        ></path>\n        <path\n          v-else-if=\"groupState === 'mixed'\"\n          d=\"M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM168,136H88a8,8,0,0,1,0-16h80a8,8,0,0,1,0,16Z\"\n        ></path>\n        <path\n          v-else\n          d=\"M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32Zm0,176H48V48H208V208Z\"\n        ></path>\n      </svg>\n\n      {{ label }}\n    </div>\n\n    <div class=\"checkboxes\">\n      <slot />\n    </div>\n\n    State: {{ groupState }}\n  </div>\n</template>\n\n<style>\n.group-label {\n  display: flex;\n  gap: 4px;\n  align-items: center;\n}\n\n.checkboxes {\n  margin-left: 1rem;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation for Checkbox Components in Vue.js\nDESCRIPTION: Demonstrates how to implement validation for both single checkboxes and checkbox groups using the required attribute. This enables HTML5 form validation capabilities.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport Checkbox from './Checkbox.vue';\nimport CheckboxGroup from './CheckboxGroup.vue';\n</script>\n\n<template>\n  <!-- Single checkbox -->\n  <Checkbox label=\"Terms\" required />\n\n  <!-- Checkbox group -->\n  <CheckboxGroup name=\"test\" label=\"Colors\" required>\n    <Checkbox label=\"Red\" value=\"red\" />\n    <Checkbox label=\"Green\" value=\"green\" />\n    <Checkbox label=\"Blue\" value=\"blue\" />\n  </CheckboxGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Masked OTP Field Implementation\nDESCRIPTION: Example of OTP fields with character masking for sensitive information. Shows both default masking and custom masking character implementation.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\n</script>\n\n<template>\n  <OtpField label=\"Secret Code\" mask />\n\n  <OtpField label=\"Custom mask\" mask=\"*\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Template for DateField Component\nDESCRIPTION: Defines the template structure for the date field component, including label, segmented controls, and error message display. Implements dynamic binding for validation states and directional support.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_dateFieldPartial.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"InputDate\" :class=\"{ touched: isTouched }\" :dir=\"direction\">\n    <span class=\"label\">{{ label }}</span>\n\n    <div class=\"control\">\n      <div v-bind=\"controlProps\">\n        <DateTimeSegment\n          v-for=\"segment in segments\"\n          v-bind=\"segment\"\n          class=\"segment\"\n        />\n      </div>\n    </div>\n\n    <span class=\"error-message\">\n      {{ errorMessage }}\n    </span>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Combining HTML and Schema Validation for Search Fields\nDESCRIPTION: This example shows how to use both HTML constraints and Standard Schema validation together in a Formwerk search field component.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/search-fields.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport SearchField from './SearchField.vue';\n\nconst schema = z.string().min(3).max(8);\n</script>\n\n<template>\n  <SearchField\n    label=\"Mixed Validation\"\n    placeholder=\"Search for...\"\n    :schema=\"schema\"\n    required\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar Component with FormWerk in Vue\nDESCRIPTION: This snippet sets up the calendar component using the FormWerk library. It imports necessary functions and types, defines props, and uses the useCalendar hook to initialize the calendar functionality.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_calendarPartial.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useCalendar, CalendarCell, type CalendarProps } from '@formwerk/core';\n\nconst props = defineProps<CalendarProps>();\n\nconst {\n  calendarProps,\n  gridProps,\n  nextButtonProps,\n  previousButtonProps,\n  gridLabelProps,\n  gridLabel,\n  currentView,\n  errorMessage,\n  errorMessageProps,\n} = useCalendar(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Generically Typed Slider Components in Vue\nDESCRIPTION: This code shows how to implement generic type parameters with a slider component. It allows for type inference when using the slider, including with custom option types beyond simple numbers.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/sliders.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TValue\">\nimport { useSlider, type SliderProps } from '@formwerk/core';\n\nconst props = defineProps<SliderProps<TValue>>();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Islamic Calendar with Arabic Locale in Vue\nDESCRIPTION: Creates a calendar component using the Islamic Umalqura calendar system with Arabic locale. The example demonstrates two approaches for importing calendar systems: importing all calendars or selectively importing only the needed calendar to optimize bundle size through tree-shaking.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/calendars.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  createCalendar,\n  IslamicUmalquraCalendar,\n} from '@internationalized/date';\nimport Calendar from './Calendar.vue';\n\n// This will import all calendars available.\n// Resulting in a larger bundle size.\nconst calendar = createCalendar('islamic-umalqura');\n\n// This will import only the Islamic Umalqura calendar.\n// This allows tree-shaking, reducing the bundle size.\n// const calendar = IslamicUmalquraCalendar;\n</script>\n\n<template>\n  <Calendar label=\"Calendar\" :calendar=\"calendar\" locale=\"ar-SA\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Simple OTP Field Component Implementation in Vue\nDESCRIPTION: Basic implementation of an OTP field component using Formwerk. Demonstrates importing and using the useOtpField composable to create a functional OTP input component.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\n</script>\n\n<template>\n  <OtpField label=\"Your code\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tracking Dirty Fields in Vue with Formwerk\nDESCRIPTION: This snippet demonstrates how to use the useForm hook to track dirty fields in a form. It shows how to check if individual fields or the entire form has been modified from their initial values.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\n\nconst { isDirty } = useForm();\n</script>\n\n<template>\n  <TextField name=\"email\" label=\"Email\" type=\"email\" />\n  <TextField name=\"password\" label=\"Password\" type=\"password\" />\n\n  <pre>Email Dirty: {{ isDirty('email') }}</pre>\n  <pre>Password Dirty: {{ isDirty('password') }}</pre>\n  <pre>Form Dirty: {{ isDirty() }}</pre>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Checkbox Component Script Setup\nDESCRIPTION: TypeScript script setup block that initializes a checkbox component using FormWerk core utilities. Defines props and destructures checkbox functionality from the useCheckbox hook.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkbox.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type CheckboxProps, useCheckbox } from '@formwerk/core';\n\nconst props = defineProps<CheckboxProps<string>>();\n\nconst { labelProps, inputProps, errorMessage, errorMessageProps, isChecked } =\n  useCheckbox(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Radio Item Component with Span Element in Vue.js\nDESCRIPTION: This example demonstrates how to create a custom radio item component using a span element instead of a native input. It shows how to bind the inputProps to a custom element for more styling flexibility.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type RadioProps, useRadio } from '@formwerk/core';\n\nconst props = defineProps<RadioProps>();\nconst { labelProps, inputProps } = useRadio(props);\n</script>\n\n<template>\n  <label>\n    <span v-bind=\"inputProps\" />\n    <span v-bind=\"labelProps\">{{ props.label }}</span>\n  </label>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Internationalization in NumberField Component (Vue 3)\nDESCRIPTION: This example shows how to use the NumberField component with different locales and numeral systems. It demonstrates binding multiple NumberField components to the same value and displaying the parsed value.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/number-fields.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport NumberField from './NumberField.vue';\n\nconst value = ref(10);\n</script>\n\n<template>\n  <NumberField label=\"Latin\" v-model=\"value\" />\n  <NumberField label=\"Arabic\" v-model=\"value\" locale=\"ar-EG\" />\n  <NumberField label=\"Chinese\" v-model=\"value\" locale=\"zh-cn-u-nu-hanidec\" />\n\n  value is: {{ value }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Mixed Validation Implementation\nDESCRIPTION: Example combining both HTML constraints and Schema validation\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport TextField from './TextField.vue';\n\nconst schema = z.string().min(3).max(20);\n</script>\n\n<template>\n  <TextField label=\"Mixed Validation\" :schema=\"schema\" type=\"url\" required />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckboxGroup Component with TypeScript in Vue\nDESCRIPTION: Sets up a CheckboxGroup component by importing types and hooks from FormWerk core. It defines props and uses the useCheckboxGroup hook to manage the checkbox group's state and properties.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkboxGroup.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CheckboxGroupProps, useCheckboxGroup } from '@formwerk/core';\n\nconst props = defineProps<CheckboxGroupProps>();\n\nconst {\n  groupProps,\n  labelProps,\n  descriptionProps,\n  errorMessageProps,\n  errorMessage,\n  isTouched,\n} = useCheckboxGroup(props);\n```\n\n----------------------------------------\n\nTITLE: Configuring DateField with Min and Max Date Ranges in Vue\nDESCRIPTION: This snippet demonstrates how to use the DateField component with min and max date props to set valid date ranges. It shows three examples: same year and month, same year, and different years.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport DateField from './DateField.vue';\n</script>\n\n<template>\n  <DateField\n    label=\"Same Year and Month\"\n    :min=\"new Date('2025-02-01')\"\n    :max=\"new Date('2025-02-15')\"\n  />\n\n  <DateField\n    label=\"Same Year\"\n    :min=\"new Date('2025-01-01')\"\n    :max=\"new Date('2025-12-31')\"\n  />\n\n  <DateField\n    label=\"Different Year\"\n    :min=\"new Date('2024-01-01')\"\n    :max=\"new Date('2025-12-31')\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: OTP Field with Standard Schema Validation Using Zod\nDESCRIPTION: Example of an OTP field validated with Standard Schema validation using Zod. The schema requires the input to be exactly 6 characters long.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\nimport { z } from 'zod';\n\nconst schema = z.string().length(6);\n</script>\n\n<template>\n  <OtpField label=\"Your code\" :schema=\"schema\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Formwerk with Nuxt i18n Using Locale Ref in TypeScript\nDESCRIPTION: Demonstrates how to set up Formwerk with Nuxt i18n in a Nuxt plugin. It uses the reactive locale value from Nuxt i18n, allowing Formwerk to automatically update directionality when the locale changes.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/i18n.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from '@formwerk/core';\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  configure({\n    locale: nuxtApp.$i18n.locale,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slider Thumb Component in Vue with Formwerk\nDESCRIPTION: This snippet demonstrates how to create a slider thumb component using the useSliderThumb composable from Formwerk. It includes the necessary template structure and styling for a basic thumb representation.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/sliders.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSliderThumb } from '@formwerkjs/formwerk';\n\nconst props = defineProps<{\n  value?: number;\n  disabled?: boolean;\n}>();\n\nconst { thumbRef, thumbProps } = useSliderThumb(props);\n</script>\n\n<template>\n  <div ref=\"thumbRef\" v-bind=\"thumbProps\">\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"#3B82F6\" />\n    </svg>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Group with HTML Constraint Validation in Vue.js\nDESCRIPTION: This snippet shows how to use the RadioGroup component with HTML constraint validation. It demonstrates setting the 'required' attribute on the RadioGroup to enforce selection.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Radio from './Radio.vue';\nimport RadioGroup from './RadioGroup.vue';\n</script>\n\n<template>\n  <RadioGroup label=\"Radio Group\" required>\n    <Radio label=\"Radio 1\" value=\"1\" />\n    <Radio label=\"Radio 2\" value=\"2\" />\n    <Radio label=\"Radio 3\" value=\"3\" />\n  </RadioGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Setup for DateField Component\nDESCRIPTION: Initializes the DateField component using FormWerk's core utilities and TypeScript. Sets up props and composable hook for managing date field state and functionality.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_dateFieldPartial.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  useDateField,\n  type DateFieldProps,\n  DateTimeSegment,\n} from '@formwerk/core';\n\nconst props = defineProps<DateFieldProps>();\n\nconst {\n  controlProps,\n  isTouched,\n  labelProps,\n  errorMessageProps,\n  errorMessage,\n  segments,\n  direction,\n} = useDateField(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating OptionGroup Component with Vue and TypeScript\nDESCRIPTION: Illustrates the creation of an OptionGroup component using the useOptionGroup composable from Formwerk. This component groups related options in a ComboBox or Select field.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useOptionGroup, type OptionGroupProps } from '@formwerk/core';\n\nconst props = defineProps<OptionGroupProps>();\nconst { optionGroupAttrs, labelAttrs } = useOptionGroup(props);\n</script>\n\n<template>\n  <li v-bind=\"optionGroupAttrs\">\n    <span v-bind=\"labelAttrs\">{{ props.label }}</span>\n    <ul>\n      <slot></slot>\n    </ul>\n  </li>\n</template>\n```\n\n----------------------------------------\n\nTITLE: OTP Field with Mixed Validation (HTML and Schema)\nDESCRIPTION: Example demonstrating mixed validation using both HTML constraints and Standard Schema. The field must be filled, have exactly 6 characters, and start with 'abc'.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\nimport { z } from 'zod';\n\nconst schema = z.string().length(6).startsWith('abc');\n</script>\n\n<template>\n  <OtpField label=\"Your code\" :schema=\"schema\" required />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox Component with v-model in Vue.js\nDESCRIPTION: Example of using a Checkbox component with v-model binding in a parent component. This demonstrates the two-way data binding capability of the checkbox component with a boolean value.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport Checkbox from './Checkbox.vue';\n\nconst isChecked = ref(false);\n</script>\n\n<template>\n  <Checkbox label=\"Terms\" v-model=\"isChecked\" />\n\n  checked: {{ isChecked }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Limited Custom Values in Vue ComboBox\nDESCRIPTION: Shows how to implement a ComboBox with custom value addition that includes a limit check. Returns null to prevent adding more than 5 items.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport ComboBox from './ComboBox.vue';\nimport OptionItem from './OptionItem.vue';\n\nconst drinks = ref([\n  { value: 'coffee', label: 'Coffee ☕️' },\n  { value: 'tea', label: 'Tea 🍵' },\n  { value: 'milk', label: 'Milk 🥛' },\n]);\n\nfunction onNewDrink(value: string) {\n  // Prevent adding more than 5 drinks\n  if (drinks.value.length >= 5) {\n    return null;\n  }\n\n  const newDrink = { value, label: `${value} 🍹` };\n  drinks.value.push(newDrink);\n\n  return newDrink;\n}\n</script>\n\n<template>\n  <ComboBox\n    label=\"Select a drink\"\n    placeholder=\"Search...\"\n    @new-value=\"onNewDrink\"\n  >\n    <OptionItem\n      v-for=\"drink in drinks\"\n      :key=\"drink.value\"\n      :label=\"drink.label\"\n      :value=\"drink.value\"\n    />\n  </ComboBox>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Slider Component Script Setup\nDESCRIPTION: TypeScript setup for a slider component using FormwerkJS core library. Imports necessary components and initializes slider functionality with props and thumb metadata.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_slider.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSlider, type SliderProps } from '@formwerk/core';\n\nimport Thumb from './Thumb.vue';\n\nconst props = defineProps<SliderProps>();\n\nconst {\n  trackProps,\n  groupProps,\n  labelProps,\n  errorMessage,\n  errorMessageProps,\n  useThumbMetadata,\n} = useSlider(props);\n\nconst thumbData = useThumbMetadata(0);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using wasSubmitted Property in FormWerk\nDESCRIPTION: Shows how to use the wasSubmitted property to display a success message or perform custom logic after form submission without errors.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\n\nconst { handleSubmit, wasSubmitted } = useForm();\n\nconst onSubmit = handleSubmit(async (data) => {\n  console.log(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form v-if=\"!wasSubmitted\" @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n    <TextField name=\"password\" label=\"Password\" type=\"password\" required />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n\n  <p v-else>Form was submitted</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling ComboBox Component with Scoped CSS\nDESCRIPTION: Defines scoped CSS styles for the ComboBox component, including custom properties for colors, layout styles, and transitions. It uses CSS anchor positioning and handles various states like focus and error.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_combobox.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n.combobox {\n  --color-text: #333;\n  --color-hint: #666;\n  --color-focus: #059669;\n  --color-error: #f00;\n  --color-hover: #eee;\n  --color-border: #d4d4d8;\n\n  display: flex;\n  flex-direction: column;\n  width: max-content;\n\n  .combobox-label {\n    color: var(--color-text);\n    display: block;\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n  }\n\n  .control {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    /** CSS Anchor Positioning */\n    anchor-name: v-bind('anchorId');\n    border: 1px solid var(--color-border);\n    font-size: 14px;\n    color: var(--color-text);\n    border-radius: 0.375rem;\n    user-select: none;\n    cursor: pointer;\n\n    svg {\n      margin-left: 4px;\n    }\n\n    &:focus {\n      outline: none;\n      border: 1px solid var(--color-focus);\n    }\n\n    button {\n      background: transparent;\n      border: none;\n      cursor: pointer;\n    }\n\n    input {\n      border: none;\n      height: 100%;\n      width: 100%;\n      outline: none;\n      padding: 4px 8px;\n      background: transparent;\n    }\n  }\n\n  .listbox {\n    padding: 0;\n    inset: auto;\n    position: relative;\n    background: #fff;\n    border: 1px solid #e5e7eb;\n    max-height: 40vh;\n    opacity: 0;\n    border-radius: 6px;\n    margin: 0;\n    width: 250px;\n    box-shadow:\n      0 4px 6px -1px rgba(0, 0, 0, 0.1),\n      0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    transition:\n      display 0.2s allow-discrete,\n      opacity 0.2s allow-discrete,\n      transform 0.2s allow-discrete,\n      overlay 0.2s allow-discrete;\n\n    &:popover-open {\n      opacity: 1;\n    }\n\n    padding: 8px;\n\n    &:has(.option-group) {\n      padding: 0;\n    }\n\n    /** CSS Anchor Positioning */\n    position-anchor: v-bind('anchorId');\n    inset-area: bottom center;\n    position-area: bottom center;\n    position-try-fallbacks:\n      flip-block,\n      flip-inline,\n      flip-block flip-inline;\n    position-try-order: max-height;\n    scrollbar-width: thin;\n    overflow-y: auto;\n    overflow-y: overlay;\n    scrollbar-color: rgb(192 192 185) transparent;\n  }\n\n  .hint,\n  .error {\n    margin-top: 0.25rem;\n  }\n\n  .error {\n    color: var(--color-error);\n    display: none;\n    font-size: 13px;\n  }\n\n  .hint {\n    color: var(--color-hint);\n    font-size: 13px;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  &:has(:focus) {\n    .hint {\n      opacity: 1;\n    }\n  }\n\n  &:has([aria-invalid='true']) {\n    .hint {\n      display: none;\n    }\n\n    .error {\n      display: block;\n    }\n  }\n\n  .empty-message {\n    color: var(--color-text);\n    font-size: 13px;\n  }\n}\n\n@starting-style {\n  .listbox:popover-open {\n    opacity: 0;\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Building a Date Field Component with Vue and Formwerk\nDESCRIPTION: Example implementation of a DateField component using Formwerk's useDateTimeField composable. The component handles date input with automatic segment navigation and formatting.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useDateTimeSegment, type DateTimeSegmentProps } from '@formwerk/core';\n\nconst props = defineProps<DateTimeSegmentProps>();\n\nconst { segmentProps, label } = useDateTimeSegment(props);\n</script>\n\n<template>\n  <div v-bind=\"segmentProps\">\n    {{ label }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Validation for Schema-only Validation in Search Fields\nDESCRIPTION: This snippet shows how to disable native HTML validation and use only Standard Schema validation in a Formwerk search field component.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/search-fields.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport SearchField from './SearchField.vue';\n\nconst schema = z.string().min(3).max(10);\n</script>\n\n<template>\n  <SearchField\n    label=\"HTML Validation Disabled\"\n    placeholder=\"Search for...\"\n    disable-html-validation\n    :schema=\"schema\"\n    required\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Disabled Options in Vue ComboBox\nDESCRIPTION: Shows how to disable individual options within a ComboBox while keeping the component itself interactive. Disabled options are skipped in focus order and search.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport ComboBox from './ComboBox.vue';\nimport OptionGroup from './OptionGroup.vue';\nimport OptionItem from './OptionItem.vue';\n</script>\n\n<template>\n  <ComboBox label=\"Pick a drink\" placeholder=\"Search...\">\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" disabled value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </ComboBox>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Implementation\nDESCRIPTION: Demonstrates number field validation using Standard Schema (Zod) for complex validation rules\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/number-fields.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport NumberField from './NumberField.vue';\n\nconst schema = z\n  .number('Required')\n  .min(1, 'Must be greater than 0')\n  .max(14, 'Must be less than 14');\n</script>\n\n<template>\n  <NumberField label=\"Number\" :schema=\"schema\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using isSubmitAttempted Property in FormWerk\nDESCRIPTION: Demonstrates the use of isSubmitAttempted property to track form submission attempts, including invalid submissions.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nconst { handleSubmit, isSubmitAttempted } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  console.log(JSON.stringify(data.toObject(), null, 2));\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Form with Hidden Field Implementation\nDESCRIPTION: A complete example of a form using a HiddenField component with form submission handling. The form data including the hidden field value is displayed in an alert upon submission.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/hidden-fields.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { HiddenField, useForm } from '@formwerk/core';\n\nconst { handleSubmit } = useForm({});\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\">\n    <HiddenField name=\"csrfToken\" value=\"abc123xyz789\" />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dual Thumb Slider Component in Vue with TypeScript\nDESCRIPTION: This snippet sets up a slider component using the @formwerk/core library. It imports and uses the useSlider hook to manage slider state and interactions, initializes thumb metadata for two thumbs, and defines the component props.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_sliderMultiple.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSlider, type SliderProps } from '@formwerk/core';\n\nimport Thumb from './Thumb.vue';\n\nconst props = defineProps<SliderProps>();\n\nconst {\n  trackProps,\n  groupProps,\n  labelProps,\n  errorMessage,\n  errorMessageProps,\n  useThumbMetadata,\n} = useSlider(props);\n\nconst t1 = useThumbMetadata(0);\nconst t2 = useThumbMetadata(1);\n</script>\n\n<template>\n  <div class=\"slider\" v-bind=\"groupProps\">\n    <div v-bind=\"labelProps\">{{ label }}</div>\n    <div v-bind=\"trackProps\" class=\"track\">\n      <Thumb />\n      <Thumb />\n    </div>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.slider {\n  --track-width: 150px;\n\n  .track {\n    display: flex;\n    align-items: center;\n    width: var(--track-width);\n    margin-top: 24px;\n    margin-bottom: 24px;\n    height: 6px;\n    background-color: #a1a1aa;\n    border-radius: 6px;\n\n    &::before {\n      content: '';\n      width: calc(\n        (v-bind('t2.sliderPercent') - v-bind('t1.sliderPercent')) * 100%\n      );\n      background-color: #10b981;\n      border-radius: 6px;\n      height: 6px;\n      translate: calc(v-bind('t1.sliderPercent') * var(--track-width)) 0;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Search Field Component in Vue\nDESCRIPTION: This example demonstrates how to create a disabled search field using Formwerk's SearchField component.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/search-fields.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SearchField from './SearchField.vue';\n</script>\n\n<template>\n  <SearchField label=\"Disabled\" disabled value=\"Well...\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Radio Props Implementation\nDESCRIPTION: Demonstrates how to implement type-safe radio components using TypeScript generics for flexible value types.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRadio, type RadioProps } from '@formwerk/core';\n\nconst props = defineProps<RadioProps<string>>();\n```\n\n----------------------------------------\n\nTITLE: Implementing App Component with Select Field in Vue\nDESCRIPTION: Main application component demonstrating the usage of SelectField and OptionItem components to create a drink selection dropdown.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SelectField from './SelectField.vue';\nimport OptionItem from './OptionItem.vue';\n</script>\n\n<template>\n  <SelectField label=\"Select a drink\">\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </SelectField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating SelectField with Individual Disabled Options\nDESCRIPTION: Demonstration of how to disable individual options within a select field while keeping the field itself enabled. Disabled options are skipped in focus order and search functionality.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SelectField from './SelectField.vue';\nimport OptionGroup from './OptionGroup.vue';\nimport OptionItem from './OptionItem.vue';\n</script>\n\n<template>\n  <SelectField label=\"Pick a drink\">\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" disabled value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </SelectField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Required File Field Validation in Vue\nDESCRIPTION: This example shows how to use the required property to make a file field mandatory using HTML constraint validation with Formwerk.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/file-fields.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport FileField from './FileField.vue';\n</script>\n\n<template>\n  <FileField label=\"File\" required />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Mixed Validation Example\nDESCRIPTION: Shows how to combine both HTML constraints and Schema validation in a number field\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/number-fields.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport NumberField from './NumberField.vue';\n\nconst schema = z.number().min(1).max(10);\n</script>\n\n<template>\n  <NumberField label=\"Number\" :schema=\"schema\" max=\"50\" min=\"0\" step=\"2\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Readonly Search Field in Vue\nDESCRIPTION: This snippet shows how to create a readonly search field using Formwerk's SearchField component, which allows validation and submission but prevents user input.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/search-fields.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SearchField from './SearchField.vue';\n</script>\n\n<template>\n  <SearchField label=\"Readonly\" value=\"Can't change this\" readonly />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Group with div element in Vue\nDESCRIPTION: Example demonstrating how to create a form group using a div element instead of a fieldset. This shows how FormWerk's bindings automatically adapt based on the element used while maintaining consistent user experience.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/form-groups.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport FormGroup from './FormGroup.vue';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n\n    <FormGroup name=\"shipping\" label=\"Shipping information\">\n      <TextField name=\"address\" label=\"Address\" required />\n      <TextField name=\"city\" label=\"City\" required />\n      <TextField name=\"zip\" label=\"ZIP\" required />\n    </FormGroup>\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Radio Group Component Script Setup\nDESCRIPTION: TypeScript setup for radio group component using FormWerk core utilities. Defines props and destructures group functionality from useRadioGroup hook.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_radioGroup.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type RadioGroupProps, useRadioGroup } from '@formwerk/core';\n\nconst props = defineProps<RadioGroupProps>();\n\nconst {\n  groupProps,\n  labelProps,\n  descriptionProps,\n  errorMessageProps,\n  errorMessage,\n  isTouched,\n} = useRadioGroup(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Filter for ComboBox Options\nDESCRIPTION: Shows how to use the useDefaultFilter composable to create filtering strategies for ComboBox options, including case-insensitive filtering and debouncing.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDefaultFilter } from '@formwerk/core';\n\nconst { startsWith, endsWith, equals } = useDefaultFilter({\n  caseSensitive: false,\n  debounceMs: 300,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Date Range for Calendar in Vue\nDESCRIPTION: Configures a calendar component with minimum and maximum selectable dates. The example highlights how to properly initialize date objects, ensuring the time components are correctly set to avoid unexpected behaviors when passing date constraints to the calendar.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/calendars.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Calendar from './Calendar.vue';\n\n// You need to be careful with the time component of the date object.\n// JS date objects fills the date time with the current time component.\nconst min = new Date(2025, 0, 4, 0, 0, 0, 0);\nconst value = new Date('2025-01-15');\nconst max = new Date('2025-01-20');\n</script>\n\n<template>\n  <Calendar label=\"Calendar\" :value=\"value\" :min=\"min\" :max=\"max\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Validating a Custom Field with Standard Schema\nDESCRIPTION: Example demonstrating how to add validation to a custom field using the Standard Schema library with Zod. The schema validates that the field value must be true.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/custom-fields.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SpeakField from './SpeakField.vue';\nimport { z } from 'zod';\n\nconst schema = z.literal(true);\n</script>\n\n<template>\n  <SpeakField\n    name=\"challenge\"\n    label=\"Say the following\"\n    :schema=\"schema\"\n    sentence=\"I went to the store\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Component Logic in Vue with TypeScript\nDESCRIPTION: This snippet sets up the component's logic using Vue's composition API and FormWerk's useRadio hook. It defines props and extracts label and input properties for use in the template.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_radioItem.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type RadioProps, useRadio } from '@formwerk/core';\n\nconst props = defineProps<RadioProps>();\n\nconst { labelProps, inputProps } = useRadio(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering FormWerk Switch Component Template in Vue 3\nDESCRIPTION: This snippet shows the template structure for the switch component. It includes the switch control, label, hidden checkbox input, and error message display.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_switch.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"switch\">\n    <label v-bind=\"labelProps\">\n      <div class=\"switch-control\">\n        <div class=\"switch-knob\"></div>\n      </div>\n\n      <input v-bind=\"inputProps\" type=\"checkbox\" class=\"sr-only\" />\n\n      {{ label }}\n    </label>\n\n    <div v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly Checkboxes and Checkbox Groups in Vue\nDESCRIPTION: This example demonstrates how to make checkboxes and checkbox groups readonly, preventing user interaction while still allowing submission and validation, unlike the disabled state.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Checkbox from './Checkbox.vue';\nimport CheckboxGroup from './CheckboxGroup.vue';\n</script>\n\n<template>\n  <CheckboxGroup label=\"Checkbox Group\">\n    <Checkbox label=\"Option 1\" value=\"1\" />\n    <Checkbox label=\"Option 2\" value=\"2\" />\n    <Checkbox label=\"Option 3\" value=\"3\" readonly />\n    <Checkbox label=\"Option 4\" value=\"4\" />\n  </CheckboxGroup>\n\n  <CheckboxGroup label=\"Readonly Group\" readonly>\n    <Checkbox label=\"Option 1\" value=\"1\" />\n    <Checkbox label=\"Option 2\" value=\"2\" />\n    <Checkbox label=\"Option 3\" value=\"3\" />\n  </CheckboxGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering ComboBox Template in Vue\nDESCRIPTION: Defines the template structure for the ComboBox component, including input, button, listbox, description, and error message elements. It uses Vue directives to bind properties and conditionally render elements.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_combobox.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"combobox\">\n    <div v-bind=\"labelProps\" class=\"combobox-label\">{{ label }}</div>\n\n    <div class=\"control\">\n      <input v-bind=\"inputProps\" />\n\n      <button v-bind=\"buttonProps\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"14\"\n          height=\"14\"\n          viewBox=\"0 0 256 256\"\n        >\n          <path\n            d=\"M181.66,170.34a8,8,0,0,1,0,11.32l-48,48a8,8,0,0,1-11.32,0l-48-48a8,8,0,0,1,11.32-11.32L128,212.69l42.34-42.35A8,8,0,0,1,181.66,170.34Zm-96-84.68L128,43.31l42.34,42.35a8,8,0,0,0,11.32-11.32l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,85.66,85.66Z\"\n          ></path>\n        </svg>\n      </button>\n    </div>\n\n    <div v-bind=\"listBoxProps\" popover class=\"listbox\">\n      <slot />\n\n      <div v-if=\"isListEmpty\" class=\"empty-message\">No Results</div>\n    </div>\n\n    <div v-if=\"description\" v-bind=\"descriptionProps\" class=\"hint\">\n      {{ description }}\n    </div>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Validating Time Field with HTML Constraints in Vue\nDESCRIPTION: This example shows how to use HTML constraints for validating a time field. It sets the field as required and specifies minimum and maximum time values.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TimeField from './TimeField.vue';\n</script>\n\n<template>\n  <TimeField label=\"HTML Constraints\" required min=\"00:00\" max=\"10:04\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing FormWerk Switch Component in Vue 3 with TypeScript\nDESCRIPTION: This snippet defines the script section of a Vue 3 component for a switch input. It imports the useSwitch hook from @formwerk/core and sets up props and reactive state for the switch.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_switch.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSwitch, type SwitchProps } from '@formwerk/core';\n\nconst props = defineProps<SwitchProps>();\n\nconst { inputProps, labelProps, isPressed, errorMessage, errorMessageProps } =\n  useSwitch(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Calendar Cell Component with Formwerk\nDESCRIPTION: An example of building a custom calendar cell component using the useCalendarCell composable. This allows for complete customization of calendar cell rendering while maintaining accessibility features.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/calendars.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useCalendarCell, type CalendarCellProps } from '@formwerk/core';\n\nconst props = defineProps<CalendarCellProps>();\n\nconst { cellProps, label } = useCalendarCell(props);\n</script>\n\n<template>\n  <div v-bind=\"cellProps\">\n    {{ label }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Time Input Component Template in Vue\nDESCRIPTION: This snippet defines the template for the time input component. It renders a label, time segments using the DateTimeSegment component, and an error message. The component's structure and styling classes are also defined here.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_timeField.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"InputTime\" :class=\"{ touched: isTouched }\" :dir=\"direction\">\n    <span class=\"label\">{{ label }}</span>\n\n    <div class=\"control\">\n      <div v-bind=\"controlProps\">\n        <DateTimeSegment\n          v-for=\"segment in segments\"\n          v-bind=\"segment\"\n          class=\"segment\"\n        />\n      </div>\n    </div>\n\n    <span class=\"error-message\">\n      {{ errorMessage }}\n    </span>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly SelectField Components\nDESCRIPTION: Example of a readonly select field that still validates and submits but doesn't accept user input. Unlike disabled fields, readonly fields are still focusable and their dropdowns can be opened.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SelectField from './SelectField.vue';\nimport OptionGroup from './OptionGroup.vue';\nimport OptionItem from './OptionItem.vue';\n</script>\n\n<template>\n  <SelectField label=\"Pick a drink\" readonly>\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </SelectField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Revalidation on Form Reset\nDESCRIPTION: Code snippet showing how to disable automatic form revalidation when resetting a form. This can improve user experience by not showing validation errors until the user interacts with the form again.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nconst { reset } = useForm();\n\nfunction onReset() {\n  reset({ revalidate: false });\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Form Groups in Formwerk\nDESCRIPTION: This example shows how type inference works with form groups in Formwerk when using a Standard Schema.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/validation.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFormGroup } from '@formwerk/core';\nimport * as v from 'valibot';\n\nconst schema = v.object({\n  email: v.pipe(v.string(), v.email()),\n  password: v.pipe(v.string(), v.minLength(8)),\n});\n\nconst { getValues } = useFormGroup({\n  schema,\n});\n\ngetValues(); // { email?: string | undefined; password?: string | undefined }\n```\n\n----------------------------------------\n\nTITLE: Customizing DateField Format Options in Vue\nDESCRIPTION: This example shows how to customize the display format of the DateField component using the formatOptions prop. It demonstrates setting various Intl.DateTimeFormatOptions to control the appearance of date and time segments.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport DateField from './DateField.vue';\n</script>\n\n<template>\n  <DateField\n    label=\"Format Options\"\n    :formatOptions=\"{\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true,\n    }\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Radio Group Component Template\nDESCRIPTION: Vue template markup for radio group component with dynamic bindings, slots for radio inputs, and conditional error/description display.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_radioGroup.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div\n    v-bind=\"groupProps\"\n    class=\"radio-group\"\n    :class=\"{ 'is-touched': isTouched }\"\n  >\n    <div v-bind=\"labelProps\" class=\"group-label\">{{ label }}</div>\n\n    <div class=\"radios-container\">\n      <slot />\n    </div>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n\n    <div v-else-if=\"description\" v-bind=\"descriptionProps\" class=\"hint\">\n      {{ description }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Applying HTML Constraints to a Search Field in Vue\nDESCRIPTION: This example shows how to use native HTML validation properties like minLength and maxLength with a Formwerk search field component.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/search-fields.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport SearchField from './SearchField.vue';\n\nconst search = ref('');\n</script>\n\n<template>\n  <SearchField\n    label=\"Keywords\"\n    placeholder=\"Search for...\"\n    v-model=\"search\"\n    required\n    min-length=\"3\"\n    max-length=\"8\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Value Types using TypeScript Generics\nDESCRIPTION: This code snippet shows how to customize the value type of checkboxes using TypeScript generics, both by explicitly specifying the type and by using Vue's generic component syntax for improved type safety and flexibility.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCheckbox, type CheckboxProps } from '@formwerk/core';\n\nconst props = defineProps<CheckboxProps<string>>();\n\n// ...\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TValue\">\nimport { useCheckbox, type CheckboxProps } from '@formwerk/core';\n\nconst props = defineProps<CheckboxProps<TValue>>();\n\n//...\n</script>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TValue\">\nimport { useCheckboxGroup, type CheckboxGroupProps } from '@formwerk/core';\n\nconst props = defineProps<CheckboxGroupProps<TValue>>();\n\n// ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Checkbox Composable in Vue.js\nDESCRIPTION: Basic setup for importing the useCheckbox composable and defining props for a checkbox component. This snippet shows how to initialize the checkbox functionality and receive binding objects for input and label elements.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckboxProps, useCheckbox } from '@formwerk/core';\n\nconst props = defineProps<CheckboxProps>();\n\nconst { labelProps, inputProps } = useCheckbox(props);\n```\n\n----------------------------------------\n\nTITLE: Vue Checkbox Template Structure\nDESCRIPTION: HTML template structure for the checkbox component including SVG checkmark and error message display. Implements accessible attributes through bound props.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkboxCustom.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"checkbox-item\">\n    <div v-bind=\"inputProps\" class=\"checkbox-input\">\n      <div class=\"checkbox-square\">\n        <svg\n          v-if=\"isChecked\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 256 256\"\n          class=\"fill-emerald-500\"\n        >\n          <path\n            d=\"M232.49,80.49l-128,128a12,12,0,0,1-17,0l-56-56a12,12,0,1,1,17-17L96,183,215.51,63.51a12,12,0,0,1,17,17Z\"\n          ></path>\n        </svg>\n      </div>\n\n      <div v-bind=\"labelProps\">{{ label }}</div>\n    </div>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with Direct Function Call in Vue\nDESCRIPTION: This example demonstrates how to handle form submission in Formwerk without using a form element. It shows direct function call for form submission and data handling.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n\nfunction onClick() {\n  onSubmit();\n}\n</script>\n\n<template>\n  <TextField name=\"field\" label=\"Your field\" value=\"Press 👇\" />\n\n  <button @click=\"onClick\">Press me</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Checkbox Component Script Setup\nDESCRIPTION: TypeScript setup code for checkbox component using @formwerk/core utilities. Defines props and extracts checkbox functionality through useCheckbox hook.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkboxCustom.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type CheckboxProps, useCheckbox } from '@formwerk/core';\n\nconst props = defineProps<CheckboxProps<string>>();\n\nconst { labelProps, inputProps, errorMessage, errorMessageProps, isChecked } =\n  useCheckbox(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Read-only Time Field in Vue\nDESCRIPTION: This snippet demonstrates how to create a read-only time field using the 'readonly' prop. Read-only fields are still validated and submitted but cannot be edited by the user.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TimeField from './TimeField.vue';\n</script>\n\n<template>\n  <TimeField label=\"Readonly\" value=\"10:04\" readonly />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Search Field Component Script Setup\nDESCRIPTION: TypeScript setup code for the search field component that imports and uses the FormWerk core library. Defines props and destructures various field-related properties from the useSearchField hook.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_searchField.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type SearchFieldProps, useSearchField } from '@formwerk/core';\n\nconst props = defineProps<SearchFieldProps>();\n\nconst {\n  inputProps,\n  labelProps,\n  fieldValue,\n  errorMessage,\n  errorMessageProps,\n  clearBtnProps,\n} = useSearchField(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled SelectField Components\nDESCRIPTION: Example showing how to create a fully disabled select field that prevents user interaction. Disabled fields are not validated and not included in form submissions.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SelectField from './SelectField.vue';\nimport OptionGroup from './OptionGroup.vue';\nimport OptionItem from './OptionItem.vue';\n</script>\n\n<template>\n  <SelectField label=\"Pick a drink\" disabled>\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </SelectField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Number Field Implementation\nDESCRIPTION: Demonstrates basic usage of NumberField component with v-model binding\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/number-fields.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport NumberField from './NumberField.vue';\n\nconst count = ref(5);\n</script>\n\n<template>\n  <NumberField label=\"Count\" v-model=\"count\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling required form fields with :has() selector in Vue\nDESCRIPTION: Example of using the :has() CSS pseudo-class to style form fields based on whether they contain a required input. This approach adds an asterisk to required field labels without needing JavaScript or conditional rendering.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/styling.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\n</script>\n\n<template>\n  <TextField label=\"Email\" required type=\"email\" class=\"Field\" />\n  <TextField label=\"Password\" required type=\"password\" class=\"Field\" />\n  <TextField label=\"Name\" class=\"Field\" />\n</template>\n\n<style>\n.Field:has(:required) {\n  label {\n    &::after {\n      content: ' *';\n      color: red;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Open-on-Focus ComboBox in Vue\nDESCRIPTION: Shows how to configure a ComboBox to automatically open its listbox when focused using the openOnFocus prop.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport ComboBox from './ComboBox.vue';\nimport OptionGroup from './OptionGroup.vue';\nimport OptionItem from './OptionItem.vue';\n</script>\n\n<template>\n  <ComboBox label=\"Pick a drink\" open-on-focus placeholder=\"Search...\">\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </ComboBox>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing FormWerk Switch Component in Vue 3 with TypeScript\nDESCRIPTION: This snippet defines the script section of a Vue 3 component for a switch control. It uses the composition API with TypeScript and imports the useSwitch hook from FormWerk core. The component accepts props of type SwitchProps and destructures various properties and methods from the useSwitch hook.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_switchCustom.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSwitch, type SwitchProps } from '@formwerk/core';\n\nconst props = defineProps<SwitchProps>();\n\nconst { inputProps, labelProps, isPressed, errorMessage, errorMessageProps } =\n  useSwitch(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hidden Field with useHiddenField Composable\nDESCRIPTION: Example of using the useHiddenField composable to create a custom hidden field component. This approach provides more flexibility for customization.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/hidden-fields.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useHiddenField, type HiddenFieldProps } from '@formwerk/core';\n\nconst props = defineProps<HiddenFieldProps>();\n</script>\n\n<template>\n  <input type=\"hidden\" :name=\"name\" :value=\"value\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Formwerk with Nuxt i18n Using Hooks in TypeScript\nDESCRIPTION: Shows an alternative method to integrate Formwerk with Nuxt i18n using Nuxt hooks. It listens to the 'i18n:localeSwitched' hook to update Formwerk's locale and directionality when the locale changes in Nuxt i18n.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/i18n.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from '@formwerk/core';\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.hook('i18n:localeSwitched', ({ newLocale }) => {\n    configure({\n      locale: newLocale,\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Schema Validation for Search Fields\nDESCRIPTION: This snippet demonstrates how to use Standard Schema validation (using Zod in this case) with a Formwerk search field component.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/search-fields.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport SearchField from './SearchField.vue';\n\nconst schema = z.string().min(3).max(8);\n</script>\n\n<template>\n  <SearchField\n    label=\"Standard Schema\"\n    placeholder=\"Search for...\"\n    :schema=\"schema\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Radio Group in Vue\nDESCRIPTION: Example showing how to implement disabled states for both individual radio items and entire radio groups. Demonstrates usage of the disabled prop for both group and individual items.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport RadioItem from './RadioItem.vue';\nimport RadioGroup from './RadioGroup.vue';\n</script>\n\n<template>\n  <RadioGroup label=\"Radio Group\">\n    <RadioItem label=\"Radio 1\" value=\"1\" />\n    <RadioItem label=\"Radio 2\" value=\"2\" />\n    <RadioItem label=\"Radio 3\" value=\"3\" disabled />\n    <RadioItem label=\"Radio 4\" value=\"4\" />\n  </RadioGroup>\n\n  <RadioGroup label=\"Disabled Group\" disabled>\n    <RadioItem label=\"Radio 1\" value=\"1\" />\n    <RadioItem label=\"Radio 2\" value=\"2\" />\n    <RadioItem label=\"Radio 3\" value=\"3\" />\n  </RadioGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Directory Selection in Vue File Dropzone\nDESCRIPTION: This snippet shows how to allow users to pick directories in a multiple file dropzone component using the allowDirectory prop with Formwerk.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/file-fields.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Dropzone from './Dropzone.vue';\n</script>\n\n<template>\n  <Dropzone label=\"Allow Directory\" multiple allow-directory />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Radio Component with useRadio Composable in Vue.js\nDESCRIPTION: This snippet demonstrates how to set up a basic radio component using the useRadio composable from Formwerk. It defines props and extracts labelProps and inputProps for use in the component template.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RadioProps, useRadio } from '@formwerk/core';\n\nconst props = defineProps<RadioProps>();\n\nconst { labelProps, inputProps } = useRadio(props);\n```\n\n----------------------------------------\n\nTITLE: Using HiddenField Component in Vue\nDESCRIPTION: Example of using the HiddenField component to create a hidden field for a CSRF token. This approach allows for declarative value definition without creating custom components.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/hidden-fields.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { HiddenField } from '@formwerk/core';\n</script>\n\n<template>\n  <HiddenField name=\"csrfToken\" :value=\"csrfToken\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Seconds to Time Field Display in Vue\nDESCRIPTION: This example shows how to include seconds in the time field display by modifying the 'formatOptions' prop.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TimeField from './TimeField.vue';\n</script>\n\n<template>\n  <TimeField\n    label=\"With Seconds\"\n    :formatOptions=\"{\n      second: '2-digit',\n    }\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Switch Component in Vue with Formwerk\nDESCRIPTION: This example demonstrates how to create a disabled Switch component that is non-interactive and will not be validated or submitted with the form. This is useful for fields that should not be editable.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/switches.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Switch from './Switch.vue';\n</script>\n\n<template>\n  <Switch label=\"Disabled switch\" disabled />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Different Input and Output Types with FormSchema\nDESCRIPTION: Shows how to explicitly define different input and output types using FormSchema's second generic parameter. This is useful when the submitted data structure differs from the form input structure.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type FormSchema, useForm } from '@formwerk/core';\n\ntype LoginForm = FormSchema<\n  { email: string },\n  { email: string; token: string }\n>;\n\nconst { handleSubmit, values } = useForm<LoginForm>();\n\nvalues; // { email: string | undefined; }\n\nconst onSubmit = handleSubmit((data) => {\n  console.log(data.toObject()); // { email: string; token: string }\n});\n```\n\n----------------------------------------\n\nTITLE: File Upload Component Template Structure\nDESCRIPTION: Vue template implementing the file upload interface with conditional rendering for upload states, error messages, and file entry display. Includes SVG icons for upload and delete actions.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_fileField.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"field\">\n    <input v-bind=\"inputProps\" class=\"sr-only\" />\n\n    <button v-bind=\"triggerProps\" class=\"trigger\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"icon\"\n        viewBox=\"0 0 256 256\"\n      >\n        <path\n          v-if=\"isUploading\"\n          class=\"icon-uploading\"\n          d=\"M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z\"\n        ></path>\n        <path\n          v-else\n          d=\"M248,128a56.06,56.06,0,0,1-56,56H48a40,40,0,0,1,0-80H192a24,24,0,0,1,0,48H80a8,8,0,0,1,0-16H192a8,8,0,0,0,0-16H48a24,24,0,0,0,0,48H192a40,40,0,0,0,0-80H80a8,8,0,0,1,0-16H192A56.06,56.06,0,0,1,248,128Z\"\n        ></path>\n      </svg>\n      Choose a file\n    </button>\n\n    <p v-if=\"!entry\" class=\"empty-state\">No file selected</p>\n\n    <div v-else class=\"file-entry\">\n      <span>{{ entry.file.name }}</span>\n\n      <button v-bind=\"removeButtonProps\" class=\"delete-button\" @click=\"remove\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"icon\"\n          viewBox=\"0 0 256 256\"\n        >\n          <path\n            d=\"M208.49,191.51a12,12,0,0,1-17,17L128,145,64.49,208.49a12,12,0,0,1-17-17L111,128,47.51,64.49a12,12,0,0,1,17-17L128,111l63.51-63.52a12,12,0,0,1,17,17L145,128Z\"\n          ></path>\n        </svg>\n      </button>\n    </div>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled File Field Component in Vue\nDESCRIPTION: This snippet shows how to create a disabled file field component using Formwerk, which will be non-interactive and not validated or submitted.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/file-fields.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport FileField from './FileField.vue';\n</script>\n\n<template>\n  <FileField label=\"Disabled Field\" disabled />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Hidden Fields in a Form\nDESCRIPTION: Example showing how to use both enabled and disabled hidden fields in a form. The disabled field will not be included in the submitted form data.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/hidden-fields.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { HiddenField, useForm } from '@formwerk/core';\n\nconst { handleSubmit } = useForm({});\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\">\n    <HiddenField name=\"csrfToken\" value=\"abc123xyz789\" />\n    <HiddenField name=\"disabled\" value=\"disabled-field\" disabled />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing RTL Radio Group in Vue\nDESCRIPTION: Example of implementing right-to-left (RTL) support for radio groups, affecting both visual layout and keyboard navigation direction.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport RadioItem from './RadioItem.vue';\nimport RadioGroup from './RadioGroup.vue';\n</script>\n\n<template>\n  <RadioGroup label=\"من اليمين لليسار\" dir=\"rtl\">\n    <RadioItem label=\"الحقل الأول\" value=\"1\" />\n    <RadioItem label=\"الحقل الثاني\" value=\"2\" />\n    <RadioItem label=\"الحقل الثالث\" value=\"3\" />\n  </RadioGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Mixed Validation for Switch Components with HTML Constraints and Zod\nDESCRIPTION: This example demonstrates how to combine HTML constraints and Standard Schema validation for a Switch component. It uses both the required attribute and a custom Zod validation rule creating a paradox.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/switches.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport Switch from './Switch.vue';\n\nconst schema = z.custom((val) => {\n  return val !== true;\n}, 'I am a paradox');\n</script>\n\n<template>\n  <Switch label=\"Mixed Validation\" required :schema=\"schema\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using handleReset Event Handler in Vue\nDESCRIPTION: Example of using the handleReset function to create an event handler for the native form reset event. This allows for executing custom logic after a form is reset via the standard reset button.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_28\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\n\nconst { handleSubmit, handleReset } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n\nconst onReset = handleReset(() => {\n  alert('after reset');\n});\n</script>\n\n<template>\n  <form @reset=\"onReset\" @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n    <TextField name=\"password\" label=\"Password\" type=\"password\" required />\n\n    <button type=\"submit\">Submit</button>\n    <button type=\"reset\">Reset</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Readonly OTP Field Implementation\nDESCRIPTION: Example of a readonly OTP field component with a pre-filled value. Readonly fields are non-editable but are still validated and submitted.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\n</script>\n\n<template>\n  <OtpField label=\"Readonly Code\" readonly value=\"123456\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabled TextField Implementation\nDESCRIPTION: Example showing how to create a disabled text field\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\n</script>\n\n<template>\n  <TextField label=\"Disabled Field\" disabled />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled ComboBox in Vue\nDESCRIPTION: Demonstrates how to create a ComboBox component with disabled state. The entire ComboBox and its options are non-interactive and won't be submitted.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/comboboxes.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport ComboBox from './ComboBox.vue';\nimport OptionGroup from './OptionGroup.vue';\nimport OptionItem from './OptionItem.vue';\n</script>\n\n<template>\n  <ComboBox label=\"Pick a drink\" disabled>\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </ComboBox>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Disabled Calendar Component\nDESCRIPTION: An example showing how to create a disabled calendar component. Disabled calendars are non-interactive, not validated, and not included in form submissions.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/calendars.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Calendar from './Calendar.vue';\n</script>\n\n<template>\n  <Calendar label=\"Disabled Calendar\" disabled />\n</template>\n```\n\n----------------------------------------\n\nTITLE: RTL Support in NumberField Component (Vue 3)\nDESCRIPTION: This snippet illustrates how to set the direction of the NumberField component to right-to-left (RTL) using the dir prop. It's a simple example to demonstrate RTL support in the component.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/number-fields.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport NumberField from './NumberField.vue';\n</script>\n\n<template>\n  <NumberField label=\"Amount\" value=\"10\" dir=\"rtl\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Slider Component Template Structure\nDESCRIPTION: HTML template structure for the slider component with label, track, thumb, and error message elements. Uses Vue's v-bind directive to apply dynamic props.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_slider.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"slider\" v-bind=\"groupProps\">\n    <div v-bind=\"labelProps\" class=\"slider-label\">{{ label }}</div>\n    <div v-bind=\"trackProps\" class=\"track\">\n      <Thumb />\n    </div>\n\n    <div v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Merge Strategy for Form Reset\nDESCRIPTION: Code snippet showing how to use the merge behavior strategy when resetting form values. This allows new values to be merged with existing initial values rather than completely replacing them.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nconst { reset } = useForm();\n\nfunction onReset() {\n  reset(\n    {\n      // values and stuff...\n    },\n    { behavior: 'merge' },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using TextField Component in Vue App\nDESCRIPTION: This Vue component demonstrates how to use the TextField component with email validation.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/validation.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\n</script>\n\n<template>\n  <TextField label=\"Email\" type=\"email\" required />\n</template>\n```\n\n----------------------------------------\n\nTITLE: OTP Field with Numeric-Only Input\nDESCRIPTION: Example of an OTP field that accepts only numeric characters using the 'accept' prop set to 'numeric'.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\n</script>\n\n<template>\n  <OtpField label=\"Numeric Code\" accept=\"numeric\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: File Upload Component Template with Drag-and-Drop Support in Vue\nDESCRIPTION: Implements the template for the file upload component with dropzone functionality, file entry visualization, and error handling. The template includes an empty state for when no files are selected and a grid display for when files have been added.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_dropzone.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div v-bind=\"dropzoneProps\" class=\"dropzone\">\n    <input v-bind=\"inputProps\" class=\"sr-only\" />\n\n    <div v-if=\"entries.length === 0\" class=\"empty-state\">\n      <button v-bind=\"triggerProps\" class=\"trigger\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"icon\"\n          viewBox=\"0 0 256 256\"\n        >\n          <path\n            d=\"M248,128a56.06,56.06,0,0,1-56,56H48a40,40,0,0,1,0-80H192a24,24,0,0,1,0,48H80a8,8,0,0,1,0-16H192a8,8,0,0,0,0-16H48a24,24,0,0,0,0,48H192a40,40,0,0,0,0-80H80a8,8,0,0,1,0-16H192A56.06,56.06,0,0,1,248,128Z\"\n          ></path>\n        </svg>\n        Choose a file\n      </button>\n\n      <p class=\"empty-message\">No file selected</p>\n    </div>\n\n    <div v-else class=\"file-grid\">\n      <ul>\n        <FileEntry\n          as=\"li\"\n          v-for=\"entry in entries\"\n          v-bind=\"entry\"\n          class=\"file-entry\"\n          v-slot=\"{ removeButtonProps, previewProps, hasPreview }\"\n        >\n          <component\n            :is=\"previewProps.as\"\n            v-bind=\"previewProps\"\n            class=\"preview\"\n          />\n\n          <button v-bind=\"removeButtonProps\" class=\"delete-button\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              class=\"icon\"\n              viewBox=\"0 0 256 256\"\n            >\n              <path\n                d=\"M208.49,191.51a12,12,0,0,1-17,17L128,145,64.49,208.49a12,12,0,0,1-17-17L111,128,47.51,64.49a12,12,0,0,1,17-17L128,111l63.51-63.52a12,12,0,0,1,17,17L145,128Z\"\n              ></path>\n            </svg>\n          </button>\n\n          <span v-if=\"!hasPreview\" class=\"filename\">{{ entry.file.name }}</span>\n        </FileEntry>\n      </ul>\n    </div>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Scrolling to Invalid Fields in FormWerk\nDESCRIPTION: Demonstrates how to disable the automatic scrolling to invalid fields on form submission by setting scrollToInvalidFieldOnSubmit to false.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nuseForm({\n  scrollToInvalidFieldOnSubmit: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Disabled OTP Field Implementation\nDESCRIPTION: Example of a disabled OTP field component with a pre-filled value. Disabled fields are non-interactive, not validated, and not submitted.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\n</script>\n\n<template>\n  <OtpField label=\"Disabled Code\" disabled value=\"123456\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Native Form Submission with FormWerk\nDESCRIPTION: Shows how to use formProps for native form submissions in non-JS server-rendered applications. It enhances the native submission cycle with FormWerk features.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport Checkbox from './Checkbox.vue';\n\nconst { formProps } = useForm();\n</script>\n\n<template>\n  <form v-bind=\"formProps\" target=\"_blank\" action=\"/form-d\">\n    <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n    <TextField name=\"password\" label=\"Password\" type=\"password\" required />\n    <Checkbox label=\"Remember me\" name=\"rememberMe\" />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Radio Group Orientation in Vue\nDESCRIPTION: Shows how to implement vertical orientation for radio groups using the orientation prop. This affects layout but not focus order.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport RadioItem from './RadioItem.vue';\nimport RadioGroup from './RadioGroup.vue';\n</script>\n\n<template>\n  <RadioGroup label=\"Radio Group\" orientation=\"vertical\">\n    <RadioItem label=\"Radio 1\" value=\"1\" />\n    <RadioItem label=\"Radio 2\" value=\"2\" />\n    <RadioItem label=\"Radio 3\" value=\"3\" />\n  </RadioGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling TextArea Component with CSS Variables\nDESCRIPTION: Applies scoped CSS styling to the textarea component using CSS variables for consistent theming. Includes styles for the field container, label, textarea input, error messages, and hints, with focus and validation states using the :has() selector for modern CSS features.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_textarea.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.field {\n  --color-primary: #10b981;\n  --color-text-primary: #333;\n  --color-text-secondary: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n\n  label {\n    display: block;\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n    color: var(--color-text-primary);\n  }\n\n  .hint {\n    font-size: 13px;\n    color: var(--color-text-secondary);\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .hint,\n  .error {\n    margin-top: 0.25rem;\n  }\n\n  textarea {\n    display: block;\n    width: max-content;\n    padding: 0.5rem 0.6rem;\n    font-size: 13px;\n    color: var(--color-text-primary);\n    border: 1px solid var(--color-border);\n    border-radius: 6px;\n    resize: none;\n    transition: border-color 0.3s ease;\n\n    &:focus {\n      outline: none;\n      border-color: var(--color-focus);\n      box-shadow: 0 0 0 1px var(--color-focus);\n    }\n  }\n\n  .error {\n    display: none;\n    font-size: 13px;\n    color: var(--color-error);\n  }\n\n  &:has(:focus) {\n    .hint {\n      opacity: 1;\n    }\n  }\n\n  &:has(:user-invalid) {\n    --color-border: var(--color-error);\n    --color-focus: var(--color-error);\n\n    .error {\n      display: block;\n    }\n\n    .hint {\n      display: none;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Scoped CSS Styling for DateField Component\nDESCRIPTION: Provides comprehensive styling for the date field component including theme variables, layout, interactions, and validation states. Implements responsive design and accessibility features.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_dateFieldPartial.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.InputDate {\n  position: relative;\n  width: 100%;\n  margin-bottom: 1.5em;\n\n  --color-primary: #10b981;\n  --color-text-primary: #333;\n  --color-text-secondary: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n  --color-background: #fff;\n}\n\n.label {\n  display: block;\n  margin-bottom: 0.25rem;\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--color-text-primary);\n}\n\n.control {\n  display: flex;\n  align-items: center;\n  gap: 0.25em;\n  width: max-content;\n  padding: 0.5rem 0.6rem;\n  border: 1px solid var(--color-border);\n  border-radius: 6px;\n  background-color: var(--color-background);\n  color: var(--color-text-primary);\n  font-size: 13px;\n  transition: all 0.3s ease;\n}\n\n.control:focus-within {\n  border-color: var(--color-focus);\n  box-shadow: 0 0 0 1px var(--color-focus);\n  outline: none;\n}\n\n.segment {\n  padding: 0.125rem;\n  border-radius: 0.25rem;\n  caret-color: transparent;\n\n  &:focus {\n    background-color: var(--color-focus);\n    color: #fff;\n    outline: none;\n  }\n\n  &[aria-disabled='true'] {\n    opacity: 0.4;\n  }\n}\n\n.error-message {\n  display: none;\n  position: absolute;\n  left: 0;\n  margin-top: 0.25rem;\n  font-size: 13px;\n  color: var(--color-error);\n}\n\n.InputDate:has(:user-invalid),\n.InputDate:has(.error-message:not(:empty)) {\n  --color-border: var(--color-error);\n  --color-focus: var(--color-error);\n}\n\n.InputDate:has(:user-invalid) .error-message,\n.InputDate:has(.error-message:not(:empty)) .error-message {\n  display: block;\n}\n\n.InputDate:has(:disabled) .control {\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Time Field Component in Vue\nDESCRIPTION: This example shows how to create a disabled time field using the 'disabled' prop. Disabled time fields are not validated or submitted.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TimeField from './TimeField.vue';\n</script>\n\n<template>\n  <TimeField label=\"Disabled\" value=\"10:04\" disabled />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Option Group Component with TypeScript\nDESCRIPTION: Complete Vue single-file component implementation of an option group. Uses FormWerk core utilities for option group functionality and includes styled layout with sticky label positioning.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_optionGroup.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type OptionGroupProps, useOptionGroup } from '@formwerk/core';\n\nconst props = defineProps<OptionGroupProps>();\n\nconst { labelProps, groupProps } = useOptionGroup(props);\n</script>\n\n<template>\n  <div v-bind=\"groupProps\" class=\"option-group\">\n    <div v-bind=\"labelProps\" class=\"label\">{{ label }}</div>\n\n    <div class=\"options\">\n      <!-- Options will be slotted here -->\n      <slot />\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.option-group {\n  .label {\n    padding: 4px 8px;\n    user-select: none;\n    position: sticky;\n    font-weight: 600;\n    background-color: #fff;\n    top: 0;\n  }\n\n  .options {\n    padding: 2px 8px;\n    display: flex;\n    flex-direction: column;\n    gap: 2px;\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Date Field with Formwerk\nDESCRIPTION: Implementation of a disabled date field that cannot be interacted with and won't be validated or submitted with the form.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport DateField from './DateField.vue';\n</script>\n\n<template>\n  <DateField label=\"Disabled\" :value=\"new Date('2025-02-11')\" disabled />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Date Input Component with CSS\nDESCRIPTION: Provides the styling for the date input component, including variables for colors, layout structure, and interactive states. It handles styling for different component states like focus, error, and disabled conditions.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_dateFieldPartialWithCalendar.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.InputDate {\n  position: relative;\n  width: 100%;\n  margin-bottom: 1.5em;\n\n  --color-primary: #10b981;\n  --color-text-primary: #333;\n  --color-text-secondary: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n  --color-background: #fff;\n}\n\n.label {\n  display: block;\n  margin-bottom: 0.25rem;\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--color-text-primary);\n}\n\n.control {\n  display: flex;\n  align-items: center;\n  gap: 0.25em;\n  width: max-content;\n  padding: 0.5rem 0.6rem;\n  border: 1px solid var(--color-border);\n  border-radius: 6px;\n  background-color: var(--color-background);\n  color: var(--color-text-primary);\n  font-size: 13px;\n  transition: all 0.3s ease;\n}\n\n.control:focus-within {\n  border-color: var(--color-focus);\n  box-shadow: 0 0 0 1px var(--color-focus);\n  outline: none;\n}\n\n.segment {\n  padding: 0.125rem;\n  border-radius: 0.25rem;\n  caret-color: transparent;\n}\n\n.segment:focus {\n  background-color: var(--color-focus);\n  color: #fff;\n  outline: none;\n}\n\n.error-message {\n  display: none;\n  position: absolute;\n  left: 0;\n  margin-top: 0.25rem;\n  font-size: 13px;\n  color: var(--color-error);\n}\n\n.picker-trigger {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 2rem;\n  height: 2rem;\n  border: none;\n  border-radius: 6px;\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover {\n    background-color: var(--color-border);\n  }\n}\n\n[popover] {\n  border: none;\n  padding: 6px;\n  border-radius: 6px;\n  box-shadow: 0 0 0 1px var(--color-border);\n}\n\n.InputDate:has(:user-invalid),\n.InputDate:has(.error-message:not(:empty)) {\n  --color-border: var(--color-error);\n  --color-focus: var(--color-error);\n}\n\n.InputDate:has(:user-invalid) .error-message,\n.InputDate:has(.error-message:not(:empty)) .error-message {\n  display: block;\n}\n\n.InputDate:has(:disabled) .control {\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n```\n\n----------------------------------------\n\nTITLE: API Documentation Table for useTimeField Returns\nDESCRIPTION: Markdown component that renders a table of return values from the useTimeField composable.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<MdxTableAPI fnName=\"useTimeField\" />\n```\n\n----------------------------------------\n\nTITLE: Search Field Component Template\nDESCRIPTION: Vue template markup for the search field component that includes a label, search icon, input field, clear button, and conditional error/description messages.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_searchField.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"search-field\" :class=\"{ 'is-blank': !fieldValue }\">\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <div class=\"input-wrapper\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"#808080\"\n        viewBox=\"0 0 256 256\"\n      >\n        <path\n          d=\"M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z\"\n        ></path>\n      </svg>\n\n      <input v-bind=\"inputProps\" />\n      <button class=\"clear-btn\" v-bind=\"clearBtnProps\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 256 256\"\n        >\n          <path\n            d=\"M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z\"\n          ></path>\n        </svg>\n      </button>\n    </div>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n    <div v-else-if=\"description\" v-bind=\"descriptionProps\" class=\"hint\">\n      {{ description }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider Thumb Component in Vue\nDESCRIPTION: A complete Vue single-file component that implements a slider thumb with tooltip. The component leverages the @formwerk/core library's useSliderThumb composition function to handle accessibility and interaction behavior.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_sliderThumb.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div v-bind=\"thumbProps\" class=\"thumb\">\n    <div class=\"tooltip\">{{ currentValue }}</div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useSliderThumb, type SliderThumbProps } from '@formwerk/core';\n\nconst props = defineProps<SliderThumbProps>();\n\nconst { thumbProps, currentValue } = useSliderThumb(props);\n</script>\n\n<style scoped>\n.thumb {\n  background: #10b981;\n  width: 18px;\n  height: 18px;\n  border-radius: 999999px;\n\n  &:hover {\n    background: #16a34a;\n  }\n\n  .tooltip {\n    position: absolute;\n    border-radius: 6px;\n    display: none;\n    font-size: 14px;\n    color: #fff;\n    background: #10b981;\n    left: 50%;\n    top: 100%;\n    translate: -50% 10%;\n    padding: 6px;\n  }\n\n  &:focus,\n  &:active {\n    outline: none;\n    background: #047857;\n\n    .tooltip {\n      display: block;\n    }\n  }\n\n  &[aria-orientation='vertical'] {\n    .tooltip {\n      left: 100%;\n      top: 50%;\n      translate: 10% -50%;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using FormSchema Type for Input and Output Types\nDESCRIPTION: Demonstrates using the FormSchema utility type to define both input and output types for a form. By default, it assumes input type is a partial of the output type, providing better type safety.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type FormSchema, useForm } from '@formwerk/core';\n\n// Input type is assumed to be a partial of the output type\ntype LoginForm = FormSchema<{ email: string }>;\n\nconst { handleSubmit, values } = useForm<LoginForm>();\n\nvalues; // { email: string | undefined }\n\nconst onSubmit = handleSubmit((data) => {\n  console.log(data.toObject()); // { email: string }\n});\n```\n\n----------------------------------------\n\nTITLE: Styling File Upload Component with Scoped CSS\nDESCRIPTION: Defines the CSS styles for the file upload component. It includes styling for the dropzone, empty state, file entries, previews, and error messages. The CSS uses CSS variables for customization and implements hover effects for interactive elements.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_dropzone.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.dropzone {\n  --color-primary: #10b981;\n  --color-text-primary: #333;\n  --color-text-secondary: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n  --color-background: #fff;\n  --color-background-hover: color-mix(\n    in srgb,\n    var(--color-background) 97%,\n    black\n  );\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n  width: 100%;\n  max-width: 32rem;\n  padding: 1rem;\n  border: 2px dashed var(--color-border);\n  border-radius: 0.5rem;\n  transition: all 0.3s ease;\n}\n\n.dropzone:hover {\n  border-color: var(--color-primary);\n  background-color: var(--color-background-hover);\n}\n\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.25rem;\n  margin-top: 0.75rem;\n}\n\n.trigger {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  font-size: 14px;\n  font-weight: 500;\n  color: white;\n  background-color: var(--color-primary);\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.trigger:hover {\n  background-color: color-mix(in srgb, var(--color-primary) 85%, black);\n}\n\n.trigger:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px color-mix(in srgb, var(--color-primary) 25%, white);\n}\n\n.icon {\n  width: 16px;\n  height: 16px;\n  fill: currentColor;\n}\n\n.empty-message {\n  font-size: 13px;\n  color: var(--color-text-secondary);\n  margin: 0;\n}\n\n.file-grid ul {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.file-entry {\n  position: relative;\n  width: 4rem;\n  height: 4rem;\n  border: 1px solid var(--color-border);\n  border-radius: 0.375rem;\n}\n\n.preview {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 0.375rem;\n}\n\n.delete-button {\n  position: absolute;\n  top: -0.5rem;\n  right: -0.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 1.5rem;\n  height: 1.5rem;\n  padding: 0.25rem;\n  color: white;\n  background-color: var(--color-primary);\n  border: none;\n  border-radius: 9999px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.delete-button:hover {\n  background-color: var(--color-error);\n}\n\n.filename {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 0.25rem;\n  font-size: 12px;\n  color: var(--color-text-primary);\n  background-color: rgba(255, 255, 255, 0.8);\n  border-radius: 0 0 0.375rem 0.375rem;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.error {\n  font-size: 13px;\n  color: var(--color-error);\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling the NumberField Component with Scoped CSS\nDESCRIPTION: Defines the styling for the number field component using scoped CSS variables for theming. Includes styles for labels, inputs, increment/decrement buttons, hints, and error messages with interactive states like focus, hover, and validation states.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_numberField.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.field {\n  --color-primary: #10b981;\n  --color-text: #333;\n  --color-hint: #666;\n  --color-border: #d4d4d8;\n  --color-error: #f00;\n  --color-hover: #eee;\n  --color-focus: var(--color-primary);\n\n  label {\n    color: var(--color-text);\n    display: block;\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n  }\n\n  .hint {\n    color: var(--color-hint);\n    font-size: 13px;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .hint,\n  .error {\n    margin-top: 0.25rem;\n  }\n\n  .input-wrapper {\n    color: var(--color-text);\n    display: flex;\n    align-items: stretch;\n    font-size: 13px;\n    width: max-content;\n    border: 1px solid var(--color-border);\n    border-radius: 6px;\n    transition: border-color 0.3s ease;\n    overflow: hidden;\n    background-color: #fff;\n\n    &:focus-within {\n      outline: none;\n      border-color: var(--color-focus);\n      box-shadow: 0 0 0 1px var(--color-focus);\n    }\n\n    input {\n      appearance: none;\n      border: none;\n      outline: none;\n      padding: 0.5rem 0.6rem;\n      background-color: transparent;\n      font-size: 14px;\n    }\n  }\n\n  .spinbutton {\n    margin-left: auto;\n    display: flex;\n    flex-direction: column;\n    align-items: starlight;\n    justify-content: center;\n    border-inline-start: 1px solid var(--color-border);\n    width: 2rem;\n\n    button {\n      background-color: transparent;\n      border: none;\n      outline: none;\n      padding: 2px 0.25rem;\n      margin: 0;\n      color: var(--color-text);\n      font-size: 15px;\n      cursor: pointer;\n      &:hover {\n        background-color: var(--color-hover);\n      }\n    }\n\n    button + button {\n      border-top: 1px solid var(--color-border);\n    }\n  }\n\n  .error {\n    color: var(--color-error);\n    display: none;\n    font-size: 13px;\n  }\n\n  &:has(:focus) {\n    .hint {\n      opacity: 1;\n    }\n  }\n\n  &.is-touched {\n    &:has(:invalid) {\n      --color-border: var(--color-error);\n      --color-focus: var(--color-error);\n\n      .error {\n        display: block;\n      }\n\n      .hint {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: RTL Support Implementation\nDESCRIPTION: Example showing RTL (Right-to-Left) text direction support\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\n</script>\n\n<template>\n  <TextField name=\"fullName\" label=\"ما هو اسمك؟\" dir=\"rtl\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tracking Submit Attempts with submitAttemptsCount in FormWerk\nDESCRIPTION: Illustrates the use of submitAttemptsCount to track the number of form submission attempts, useful for UI feedback or analytics.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\n\nconst { handleSubmit, submitAttemptsCount } = useForm();\n\nconst onSubmit = handleSubmit(async (data) => {\n  console.log(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <p>Submit attempts: {{ submitAttemptsCount }}</p>\n\n  <form @submit=\"onSubmit\" novalidate>\n    <TextField name=\"email\" label=\"Email\" type=\"email\" required />\n    <TextField name=\"password\" label=\"Password\" type=\"password\" required />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Validation in Formwerk\nDESCRIPTION: This snippet shows how to disable HTML validation for a form by passing the disableHtmlValidation option to the useForm hook.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nuseForm({\n  disableHtmlValidation: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Checkbox Scoped Styling\nDESCRIPTION: Scoped CSS styles for the checkbox component including custom properties, hover/focus states, and error styling. Includes utility class for screen reader accessibility.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkboxCustom.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.checkbox-item {\n  --color-primary: #10b981;\n  --color-focus: var(--color-primary);\n  --color-white: #fff;\n  --color-gray-100: #fafafa;\n  --color-gray-400: #a1a1aa;\n  --color-error: #f00;\n\n  .checkbox-square {\n    width: 1rem;\n    height: 1rem;\n    border-radius: 0.375rem;\n    flex-shrink: 0;\n    border: 1px solid var(--color-gray-400);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: var(--color-white);\n  }\n\n  svg {\n    width: 0.9rem;\n    height: 0.9rem;\n    fill: var(--color-white);\n  }\n\n  .checkbox-input {\n    display: inline-flex;\n    gap: 4px;\n    width: max-content;\n    align-items: center;\n    user-select: none;\n    font-size: 14px;\n    cursor: pointer;\n    font-weight: 500;\n\n    &:hover {\n    }\n\n    &:focus {\n      outline: none;\n      .checkbox-square {\n        border-color: var(--color-focus);\n        outline: 1px solid var(--color-focus);\n        background-color: var(--color-gray-100);\n      }\n    }\n\n    &[aria-checked='true'] {\n      .checkbox-square {\n        background-color: var(--color-primary);\n        border-color: var(--color-primary);\n      }\n    }\n\n    &[aria-disabled='true'] {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n  }\n\n  .error {\n    color: var(--color-error);\n    font-size: 13px;\n  }\n}\n\n/** This is a common utility CSS class, you can find it in your CSS framework of choice */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing TextField Component with FormWerk in Vue\nDESCRIPTION: A Vue Single File Component that implements a text input field using FormWerk's core functionality. The component uses the useTextField composable to handle input properties, validation, and accessibility features.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/_partials/_textField.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type TextFieldProps, useTextField } from '@formwerk/core';\n\nconst props = defineProps<TextFieldProps>();\n\nconst {\n  inputProps,\n  labelProps,\n  errorMessage,\n  errorMessageProps,\n  descriptionProps,\n} = useTextField(props);\n</script>\n\n<template>\n  <div class=\"field\">\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <input v-bind=\"inputProps\" />\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n\n    <div v-if=\"description\" v-bind=\"descriptionProps\" class=\"hint\">\n      {{ description }}\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.field {\n  --color-primary: #10b981;\n  --color-text-primary: #333;\n  --color-text-secondary: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n\n  label {\n    display: block;\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n    color: var(--color-text-primary);\n  }\n\n  .hint {\n    font-size: 13px;\n    color: var(--color-text-secondary);\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .hint,\n  .error {\n    margin-top: 0.25rem;\n  }\n\n  input {\n    display: block;\n    width: max-content;\n    padding: 0.5rem 0.6rem;\n    font-size: 13px;\n    color: var(--color-text-primary);\n    border: 1px solid var(--color-border);\n    border-radius: 6px;\n    transition: border-color 0.3s ease;\n\n    &:focus {\n      outline: none;\n      border-color: var(--color-focus);\n      box-shadow: 0 0 0 1px var(--color-focus);\n    }\n  }\n\n  .error {\n    display: none;\n    font-size: 13px;\n    color: var(--color-error);\n  }\n\n  &:has(:focus) {\n    .hint {\n      opacity: 1;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Minimal Starter Documentation\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining the title, sidebar label, and description for the minimal starter kit.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/starter-kits/minimal.mdx#2025-04-13_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Minimal Starter Kit\nsidebar:\n  label: Minimal\ndescription: A minimal starter kit for Formwerk, a great starting point for your next project with custom styles.\n---\n```\n\n----------------------------------------\n\nTITLE: Generic Radio Component Implementation\nDESCRIPTION: Shows how to create a type-safe radio component using TypeScript generics for maximum flexibility and type safety.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TValue\">\nimport { useRadio, type RadioProps } from '@formwerk/core';\n\nconst props = defineProps<RadioProps<TValue>>();\n\n//...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Behavior for Invalid Fields in FormWerk\nDESCRIPTION: Shows how to customize the scroll behavior when the form is submitted with invalid fields using the scrollToInvalidFieldOnSubmit option.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@formwerk/core';\n\nuseForm({\n  scrollToInvalidFieldOnSubmit: {\n    behavior: 'instant', // default is 'smooth'\n    block: 'center', // default is 'center'\n    inline: 'start', // default is 'start'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale in Formwerk with TypeScript\nDESCRIPTION: Demonstrates how to set the locale configuration option in Formwerk using the configure function. This is the main method Formwerk uses to determine locale and directionality.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/i18n.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from '@formwerk/core';\n\nconfigure({\n  locale: 'en-US',\n});\n```\n\n----------------------------------------\n\nTITLE: Disabled HTML Validation Example\nDESCRIPTION: Example showing how to disable HTML validation while using schema validation\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport TextField from './TextField.vue';\n\nconst schema = z.string().min(3).max(20);\n</script>\n\n<template>\n  <TextField\n    label=\"HTML Validation Disabled\"\n    disable-html-validation\n    :schema=\"schema\"\n    type=\"url\"\n    required\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: NumberField Component Template Structure in Vue\nDESCRIPTION: Defines the HTML structure for the number field component with label, input, increment/decrement buttons, description, and error messages. Uses Vue's v-bind to attach props from useNumberField to the appropriate elements and conditional rendering for descriptions and errors.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_numberField.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div class=\"field\" :class=\"{ 'is-touched': isTouched }\">\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <div class=\"input-wrapper\">\n      <input v-bind=\"inputProps\" />\n\n      <div class=\"spinbutton\">\n        <button type=\"button\" v-bind=\"incrementButtonProps\">+</button>\n        <button type=\"button\" v-bind=\"decrementButtonProps\">-</button>\n      </div>\n    </div>\n\n    <div v-if=\"description\" v-bind=\"descriptionProps\" class=\"hint\">\n      {{ description }}\n    </div>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Radio Button Component Template Structure in Vue\nDESCRIPTION: Defines the HTML structure for the radio button component using Vue template syntax. It applies the generated labelProps to the label element and inputProps to the input element, adds styling classes, and implements a custom radio button appearance.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_radioInput.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <label v-bind=\"labelProps\" class=\"radio-item\">\n    <input v-bind=\"inputProps\" class=\"sr-only\" />\n    <div class=\"radio-circle\">\n      <div class=\"radio-circle-inner\"></div>\n    </div>\n\n    {{ label }}\n  </label>\n</template>\n```\n\n----------------------------------------\n\nTITLE: OTP Field with Prefix Implementation\nDESCRIPTION: Example of an OTP field with a non-editable prefix. The prefix 'F-' appears before the OTP input slots and cannot be modified by the user.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\n</script>\n\n<template>\n  <OtpField label=\"Prefixed Code\" prefix=\"F-\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Direction Auto-detection in Formwerk with TypeScript\nDESCRIPTION: Shows how to turn off the auto-detection of directionality in Formwerk using the configure function. This allows manual control over the directionality of components.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/i18n.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from '@formwerk/core';\n\nconfigure({\n  detectDirection: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Disabled Number Field Implementation\nDESCRIPTION: Shows how to implement a disabled number field that prevents user interaction\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/number-fields.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport NumberField from './NumberField.vue';\n</script>\n\n<template>\n  <NumberField label=\"Disabled\" disabled />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing OTP Field Template in Vue\nDESCRIPTION: Defines the template structure for the OTP field component, including label, input slots, and error message display.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_otpField.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"otp-field\">\n    <div class=\"otp-field__label\" v-bind=\"labelProps\">{{ label }}</div>\n\n    <div class=\"otp-field__control\" v-bind=\"controlProps\">\n      <OtpSlot\n        v-for=\"slot in fieldSlots\"\n        v-bind=\"slot\"\n        class=\"otp-field__slot\"\n      />\n    </div>\n\n    <span v-bind=\"errorMessageProps\" class=\"otp-field__error-message\">\n      {{ errorMessage }}\n    </span>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling disabled form fields with :disabled pseudo-class in Vue\nDESCRIPTION: Example of styling disabled form fields using the :disabled pseudo-class. This applies to HTML input elements, while for non-input elements the aria-disabled attribute should be used instead.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/styling.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\n</script>\n\n<template>\n  <TextField label=\"Email\" type=\"email\" disabled />\n  <TextField label=\"Password\" required type=\"password\" min-length=\"8\" />\n</template>\n\n<style>\n*:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar UI in Vue Template\nDESCRIPTION: This snippet defines the template for the calendar component. It includes the calendar header with navigation buttons, and conditional rendering for different views (weeks, months, years) using v-if directives.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_calendarPartial.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"calendar\" v-bind=\"calendarProps\">\n    <div class=\"calendar-header\">\n      <button class=\"calendar-header-button\" v-bind=\"previousButtonProps\">\n        &lt;\n      </button>\n\n      <span v-bind=\"gridLabelProps\">\n        {{ gridLabel }}\n      </span>\n\n      <button class=\"calendar-header-button\" v-bind=\"nextButtonProps\">\n        &gt;\n      </button>\n    </div>\n\n    <div\n      v-if=\"currentView.type === 'weeks'\"\n      v-bind=\"gridProps\"\n      class=\"calendar-grid weeks-grid\"\n    >\n      <div v-for=\"day in currentView.weekDays\" :key=\"day\" class=\"weekday-label\">\n        {{ day }}\n      </div>\n\n      <CalendarCell\n        v-for=\"day in currentView.days\"\n        v-bind=\"day\"\n        class=\"calendar-cell\"\n        :class=\"{\n          'outside-month': day.isOutsideMonth,\n          today: day.isToday,\n        }\"\n      >\n        {{ day.label }}\n      </CalendarCell>\n    </div>\n\n    <div\n      v-if=\"currentView.type === 'months'\"\n      v-bind=\"gridProps\"\n      class=\"calendar-grid months-grid\"\n    >\n      <CalendarCell\n        v-for=\"month in currentView.months\"\n        v-bind=\"month\"\n        class=\"calendar-cell\"\n      >\n        {{ month.label }}\n      </CalendarCell>\n    </div>\n\n    <div\n      v-if=\"currentView.type === 'years'\"\n      v-bind=\"gridProps\"\n      class=\"calendar-grid years-grid\"\n    >\n      <CalendarCell\n        v-for=\"year in currentView.years\"\n        v-bind=\"year\"\n        class=\"calendar-cell\"\n      >\n        {{ year.label }}\n      </CalendarCell>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling form fields with :user-invalid and :user-valid pseudo-classes in Vue\nDESCRIPTION: Example of styling form fields using the :user-invalid and :user-valid pseudo-classes. These classes only apply styles after user interaction, providing a better user experience than the base :invalid/:valid selectors.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/styling.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\n</script>\n\n<template>\n  <TextField label=\"Email\" required type=\"email\" />\n  <TextField label=\"Password\" required type=\"password\" min-length=\"8\" />\n</template>\n\n<style>\n.field:has(:user-invalid) {\n  input {\n    border-color: red;\n  }\n\n  .error {\n    display: block;\n  }\n}\n\n.field:has(:user-valid) {\n  input {\n    border-color: green;\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Vue Checkbox Scoped Styles\nDESCRIPTION: Scoped CSS styles for the checkbox component including custom variables, checkbox appearance, hover/focus states, and accessibility utilities.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkbox.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.checkbox-item {\n  --color-primary: #10b981;\n  --color-focus: var(--color-primary);\n  --color-white: #fff;\n  --color-gray-100: #fafafa;\n  --color-gray-400: #a1a1aa;\n  --color-error: #f00;\n\n  .checkbox-square {\n    width: 1rem;\n    height: 1rem;\n    border-radius: 0.375rem;\n    flex-shrink: 0;\n    border: 1px solid var(--color-gray-400);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: var(--color-white);\n  }\n\n  svg {\n    width: 0.9rem;\n    height: 0.9rem;\n    fill: var(--color-white);\n  }\n\n  label {\n    display: inline-flex;\n    gap: 4px;\n    width: max-content;\n    align-items: center;\n    user-select: none;\n    font-size: 14px;\n    cursor: pointer;\n    font-weight: 500;\n\n    &:hover {\n    }\n\n    &:has(:focus) {\n      .checkbox-square {\n        border-color: var(--color-focus);\n        outline: 1px solid var(--color-focus);\n        background-color: var(--color-gray-100);\n      }\n    }\n\n    &:has(:checked) {\n      .checkbox-square {\n        background-color: var(--color-primary);\n        border-color: var(--color-primary);\n      }\n    }\n\n    &:has(:disabled) {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n  }\n\n  .error {\n    color: var(--color-error);\n    font-size: 13px;\n  }\n}\n\n/** This is a common utility CSS class, you can find it in your CSS framework of choice */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Binding Checkbox Elements in Vue.js Template\nDESCRIPTION: Shows how to bind the props returned from useCheckbox to DOM elements. This ensures proper state management, behavior, and accessibility support for checkbox components.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<input v-bind=\"inputProps\" />\n<label v-bind=\"labelProps\">{{ label }}</label>\n```\n\n----------------------------------------\n\nTITLE: Configuring Formwerk with Nuxt SSR\nDESCRIPTION: Example demonstrating Formwerk integration in a Nuxt.js application through StackBlitz embed. Shows basic setup for server-side rendering compatibility.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/ssr.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://stackblitz.com/edit/nuxt-starter-ppdb67?ctl=1&embed=1&file=app.vue&hideNavigation=1\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Date Input Component Template in Vue\nDESCRIPTION: Defines the HTML structure for the date input component, including the label, segmented date controls, calendar picker button, and error message display. It binds the component properties from FormWerk to the appropriate elements.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_dateFieldPartialWithCalendar.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"InputDate\" :class=\"{ touched: isTouched }\" :dir=\"direction\">\n  <span class=\"label\">{{ label }}</span>\n\n  <div class=\"control\">\n    <div v-bind=\"controlProps\">\n      <DateTimeSegment\n        v-for=\"segment in segments\"\n        v-bind=\"segment\"\n        class=\"segment\"\n      />\n    </div>\n\n    <button class=\"picker-trigger\" v-bind=\"pickerTriggerProps\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"#000000\"\n        viewBox=\"0 0 256 256\"\n      >\n        <path\n          d=\"M208,32H184V24a8,8,0,0,0-16,0v8H88V24a8,8,0,0,0-16,0v8H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM72,48v8a8,8,0,0,0,16,0V48h80v8a8,8,0,0,0,16,0V48h24V80H48V48ZM208,208H48V96H208V208Z\"\n        ></path>\n      </svg>\n    </button>\n  </div>\n  <div v-bind=\"pickerProps\" popover>\n    <Calendar v-bind=\"calendarProps\" />\n  </div>\n\n  <span class=\"error-message\">\n    {{ errorMessage }}\n  </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling form fields with :invalid and :valid pseudo-classes in Vue\nDESCRIPTION: Example of styling form fields using the :invalid and :valid pseudo-classes. This approach applies styles immediately, even before user interaction, which may be too aggressive for many use cases.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/extras/styling.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\n</script>\n\n<template>\n  <TextField label=\"Email\" required type=\"email\" />\n  <TextField label=\"Password\" required type=\"password\" min-length=\"8\" />\n</template>\n\n<style>\n.field:has(:invalid) {\n  input {\n    border-color: red;\n  }\n\n  .error {\n    display: block;\n  }\n}\n\n.field:has(:valid) {\n  input {\n    border-color: green;\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Rendering Radio Component Template in Vue\nDESCRIPTION: This snippet defines the template for the radio component. It includes a container div with nested elements for the radio circle and label, binding the appropriate props to each element.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_radioItem.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"radio-item\" v-bind=\"inputProps\">\n    <div class=\"radio-circle\">\n      <div class=\"radio-circle-inner\"></div>\n    </div>\n\n    <span v-bind=\"labelProps\">{{ label }}</span>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling FormWerk Switch Component with Scoped CSS\nDESCRIPTION: This snippet contains the scoped CSS styles for the switch component. It defines custom properties for colors and applies styles for different states of the switch, including checked, focused, readonly, and disabled.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_switch.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.switch {\n  --switch-bg: #57534e;\n  --color-primary: #10b981;\n  --switch-readonly-bg: #a8a29e;\n  --switch-knob-color: #f5f5f4;\n  --color-text: #333;\n  --color-error: #f00;\n  --color-focus: var(--color-primary);\n\n  label {\n    display: inline-flex;\n    align-items: center;\n    cursor: pointer;\n    gap: 0.25rem;\n    font-size: 14px;\n    user-select: none;\n  }\n\n  .switch-control {\n    width: 3rem;\n    height: 1.5rem;\n    background-color: var(--switch-bg);\n    border-radius: 99999px;\n    transition: background-color 0.2s;\n    display: flex;\n    align-items: center;\n  }\n\n  .switch-knob {\n    border-radius: 99999px;\n    height: 1.2rem;\n    width: 1.4rem;\n    background: var(--switch-knob-color);\n    translate: 2px 0;\n    transition: translate 0.2s;\n  }\n\n  &:has(:checked) {\n    .switch-control {\n      background-color: var(--color-primary);\n    }\n\n    .switch-knob {\n      translate: 100% 0;\n    }\n  }\n\n  &:has(:focus) {\n    .switch-control {\n      outline: 2px solid var(--color-focus);\n    }\n  }\n\n  &:has([readonly='true']) {\n    .switch-control {\n      background-color: var(--switch-readonly-bg);\n    }\n  }\n\n  &:has(:disabled) {\n    .switch-control {\n      opacity: 0.4;\n      cursor: not-allowed;\n    }\n  }\n\n  /** This is a common utility CSS class, you can find it in your CSS framework of choice */\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    border: 0;\n  }\n\n  .error {\n    color: var(--color-error);\n    display: none;\n    font-size: 13px;\n  }\n\n  &:has(:user-invalid) {\n    .error {\n      display: block;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Rendering FormWerk Switch Component Template in Vue 3\nDESCRIPTION: This snippet shows the template structure for the switch component. It includes a wrapper div, the switch control, label, and an error message area. The component uses v-bind directives to apply properties from the useSwitch hook.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_switchCustom.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"switch\">\n    <div class=\"switch-wrapper\" v-bind=\"inputProps\">\n      <div class=\"switch-control\">\n        <div class=\"switch-knob\"></div>\n      </div>\n\n      <div class=\"switch-label\" v-bind=\"labelProps\">{{ label }}</div>\n    </div>\n\n    <div v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Readonly Date Field with Formwerk\nDESCRIPTION: Implementation of a readonly date field that cannot be edited but will still be validated and submitted with the form.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/date-fields.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport DateField from './DateField.vue';\n</script>\n\n<template>\n  <DateField label=\"Readonly\" :value=\"new Date('2025-02-11')\" readonly />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Slider Component Scoped Styling\nDESCRIPTION: Scoped CSS styling for the slider component including track, label, and error message elements. Supports both horizontal and vertical orientations with dynamic thumb positioning.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_slider.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.slider {\n  --color-text: #333;\n  --color-error: #f00;\n  display: flex;\n  width: 300px;\n  align-items: center;\n  gap: 6px 14px;\n  flex-wrap: wrap;\n\n  .slider-label {\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n    color: var(--color-text);\n  }\n\n  .track {\n    display: flex;\n    align-items: center;\n    width: 150px;\n    height: 6px;\n    background-color: #a1a1aa;\n    border-radius: 6px;\n\n    &::before {\n      content: '';\n      width: calc(v-bind('thumbData.percent') * 100%);\n      background-color: #10b981;\n      border-radius: 6px;\n      height: 6px;\n    }\n  }\n\n  .error {\n    display: block;\n    min-height: 18px;\n    font-size: 13px;\n    color: #f00;\n    width: 100%;\n  }\n\n  &:has([aria-orientation='vertical']) {\n    .track {\n      flex-direction: column;\n      margin: 0;\n      height: 80px;\n      width: 6px;\n\n      &::before {\n        height: calc(v-bind('thumbData.percent') * 100%);\n        width: 6px;\n        margin-top: auto;\n      }\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling Radio Component with Scoped CSS\nDESCRIPTION: This snippet provides the styles for the radio component. It defines custom properties for colors and applies styles to create a visually appealing and interactive radio button with various states (focus, checked, disabled, readonly).\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_radioItem.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.radio-item {\n  --color-primary: #10b981;\n  --color-text: #333;\n  --color-hint: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n  --color-hover: #eee;\n\n  display: inline-flex;\n  width: max-content;\n  gap: 4px;\n  align-items: center;\n  user-select: none;\n  font-size: 13px;\n  font-weight: 500;\n  cursor: pointer;\n\n  .radio-circle {\n    width: 1rem;\n    height: 1rem;\n    border-radius: 9999999px;\n    border: 1px solid var(--color-border);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .radio-circle-inner {\n    width: 70%;\n    height: 70%;\n    border-radius: 9999999px;\n  }\n\n  &:focus {\n    .radio-circle {\n      border: 1px solid var(--color-focus);\n      outline: 1px solid var(--color-focus);\n    }\n  }\n\n  &[aria-checked='true'] {\n    .radio-circle-inner {\n      background-color: var(--color-focus);\n    }\n  }\n\n  &[aria-disabled='true'] {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  &[aria-readonly='true'] {\n    .radio-circle {\n      opacity: 0.5;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Formwerk with yarn\nDESCRIPTION: Command to install the Formwerk core package using yarn package manager.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/getting-started.mdx#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @formwerk/core\n```\n\n----------------------------------------\n\nTITLE: Example Preview Card for NumberFlow DateTime Component\nDESCRIPTION: HTML markup for a preview card showcasing the NumberFlow date/time field component that uses @number-flow/vue for animated value transitions.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n  <PreviewCard\n    title=\"NumberFlow\"\n    description=\"Showcase of a date/time field using the excellent `@number-flow/vue` to animate value transitions.\"\n    link=\"https://stackblitz.com/edit/formwerk-numberflow-datetime\"\n    src=\"/thumbs/numberflow-datetime.mp4\"\n    external\n    client:idle\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: OTP Field with Custom Length\nDESCRIPTION: Example of an OTP field with a custom number of slots. This implementation specifies 5 slots instead of the default 6.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\n</script>\n\n<template>\n  <OtpField label=\"Custom Length\" length=\"5\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Radio Group Component Styles\nDESCRIPTION: Scoped CSS styling for radio group component including custom properties, layout rules, and state-based styling. Includes vertical orientation support and touch state handling.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_radioGroup.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.radio-group {\n  --color-text: #333;\n  --color-hint: #666;\n  --color-border: #d4d4d8;\n  --color-focus: #007bff;\n  --color-error: #f00;\n  --color-valid: #059669;\n  --color-hover: #eee;\n\n  display: flex;\n  flex-direction: column;\n\n  .hint,\n  .error {\n    margin-top: 0.25rem;\n  }\n\n  .error {\n    color: var(--color-error);\n    display: none;\n    font-size: 13px;\n  }\n\n  .hint {\n    color: var(--color-hint);\n    font-size: 13px;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .radios-container {\n    margin-top: 0.25rem;\n    display: flex;\n    gap: 0.5rem;\n  }\n\n  .group-label {\n    color: var(--color-text);\n    display: block;\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n  }\n\n  &:has(:focus) {\n    .hint {\n      opacity: 1;\n    }\n  }\n\n  &.is-touched[aria-invalid='true'] {\n    .error {\n      display: block;\n    }\n\n    .hint {\n      display: none;\n    }\n  }\n\n  &[aria-orientation='vertical'] {\n    .radios-container {\n      flex-direction: column;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling CheckboxGroup Component with Scoped CSS\nDESCRIPTION: Defines the visual styling for the CheckboxGroup component with CSS variables for theming. Includes styles for the group container, labels, error messages, hints, and interactive states like focus and validation.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkboxGroup.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.checkbox-group {\n  --color-text: #333;\n  --color-hint: #666;\n  --color-border: #d4d4d8;\n  --color-focus: #007bff;\n  --color-error: #f00;\n  --color-valid: #059669;\n  --color-hover: #eee;\n\n  display: flex;\n  flex-direction: column;\n\n  .hint,\n  .error {\n    margin-top: 0.25rem;\n  }\n\n  .error {\n    color: var(--color-error);\n    display: none;\n    font-size: 13px;\n  }\n\n  .hint {\n    color: var(--color-hint);\n    font-size: 13px;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .checkboxes-container {\n    margin-top: 0.25rem;\n    display: flex;\n    gap: 0.5rem;\n  }\n\n  .group-label {\n    color: var(--color-text);\n    display: block;\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n  }\n\n  &:has(:focus) {\n    .hint {\n      opacity: 1;\n    }\n  }\n\n  &.is-touched:has(:invalid) {\n    .error {\n      display: block;\n    }\n\n    .hint {\n      display: none;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Time Input Component with Scoped CSS\nDESCRIPTION: This snippet contains the scoped CSS styles for the time input component. It defines the layout, colors, and interactions for the input field, including focus states, error states, and disabled states. The styles use CSS variables for easy theming.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_timeField.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n.InputTime {\n  position: relative;\n  width: 100%;\n  margin-bottom: 1.5em;\n\n  --color-primary: #10b981;\n  --color-text-primary: #333;\n  --color-text-secondary: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n  --color-background: #fff;\n}\n\n.label {\n  display: block;\n  margin-bottom: 0.25rem;\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--color-text-primary);\n}\n\n.control {\n  display: flex;\n  align-items: center;\n  gap: 0.25em;\n  width: max-content;\n  padding: 0.5rem 0.6rem;\n  border: 1px solid var(--color-border);\n  border-radius: 6px;\n  background-color: var(--color-background);\n  color: var(--color-text-primary);\n  font-size: 13px;\n  transition: all 0.3s ease;\n}\n\n.control:focus-within {\n  border-color: var(--color-focus);\n  box-shadow: 0 0 0 1px var(--color-focus);\n  outline: none;\n}\n\n.segment {\n  padding: 0.125rem;\n  border-radius: 0.25rem;\n  caret-color: transparent;\n  min-width: 2ch;\n\n  &:focus {\n    background-color: var(--color-focus);\n    color: #fff;\n    outline: none;\n  }\n\n  &[aria-disabled='true'] {\n    opacity: 0.4;\n  }\n}\n\n.error-message {\n  display: none;\n  position: absolute;\n  left: 0;\n  margin-top: 0.25rem;\n  font-size: 13px;\n  color: var(--color-error);\n}\n\n.InputTime:has(:user-invalid),\n.InputTime:has(.error-message:not(:empty)) {\n  --color-border: var(--color-error);\n  --color-focus: var(--color-error);\n}\n\n.InputTime:has(:user-invalid) .error-message,\n.InputTime:has(.error-message:not(:empty)) .error-message {\n  display: block;\n}\n\n.InputTime:has(:disabled) .control {\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Formwerk with pnpm\nDESCRIPTION: Command to install the Formwerk core package using pnpm package manager.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/getting-started.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @formwerk/core\n```\n\n----------------------------------------\n\nTITLE: Generic Radio Group Implementation\nDESCRIPTION: Example of implementing a type-safe radio group component using TypeScript generics for flexible value types.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/radios.mdx#2025-04-13_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TValue\">\nimport { useRadioGroup, type RadioGroupProps } from '@formwerk/core';\n\nconst props = defineProps<RadioGroupProps<TValue>>();\n\n// ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Search Field Component Styles\nDESCRIPTION: Scoped CSS styles for the search field component that define custom properties for colors, spacing, and transitions. Includes styles for the input field, buttons, icons, and various states like focus and error.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_searchField.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.search-field {\n  --color-primary: #10b981;\n  --color-text: #333;\n  --color-hint: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n  --color-hover: #eee;\n\n  label {\n    display: block;\n    margin-bottom: 0.25rem;\n    font-size: 14px;\n    font-weight: 500;\n    color: var(--color-text);\n  }\n\n  .hint {\n    font-size: 13px;\n    color: var(--color-hint);\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .hint,\n  .error {\n    margin-top: 0.25rem;\n  }\n\n  .error {\n    display: none;\n    font-size: 13px;\n    color: #f00;\n  }\n\n  .input-wrapper {\n    display: flex;\n    align-items: stretch;\n    width: max-content;\n    padding: 0.4rem;\n    font-size: 13px;\n    color: var(--color-text);\n    border: 1px solid var(--color-border);\n    border-radius: 6px;\n    transition: border-color 0.3s ease;\n\n    &:focus-within {\n      outline: none;\n      border-color: var(--color-focus);\n      box-shadow: 0 0 0 1px var(--color-focus);\n    }\n\n    input {\n      appearance: none;\n      border: none;\n      outline: none;\n      padding: 0 0 0 0.6rem;\n      background-color: transparent;\n      font-size: 14px;\n    }\n  }\n\n  .clear-btn {\n    border: none;\n    background: transparent;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--color-text);\n    cursor: pointer;\n  }\n\n  svg {\n    width: 1.25rem;\n    height: 1.25rem;\n    pointer-events: none;\n  }\n\n  &:has(:focus) {\n    .hint {\n      opacity: 1;\n    }\n  }\n\n  &:has(:user-invalid) {\n    --border-color: var(--color-error);\n    --color-focus: var(--color-error);\n\n    .error {\n      display: block;\n    }\n\n    .hint {\n      display: none;\n    }\n  }\n\n  &.is-blank {\n    .clear-btn {\n      visibility: hidden;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling Radio Component with Scoped CSS\nDESCRIPTION: Provides comprehensive styling for the radio component with CSS variables for theming. Includes styles for default state, focus state, checked state, and disabled state of the radio button. Also includes a utility class for visually hiding elements while keeping them accessible.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_radioInput.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.radio-item {\n  --color-primary: #10b981;\n  --color-text: #333;\n  --color-hint: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n  --color-hover: #eee;\n\n  display: inline-flex;\n  width: max-content;\n  gap: 4px;\n  align-items: center;\n  user-select: none;\n  font-size: 13px;\n  font-weight: 500;\n\n  .radio-circle {\n    width: 1rem;\n    height: 1rem;\n    border-radius: 9999999px;\n    border: 1px solid var(--color-border);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .radio-circle-inner {\n    width: 70%;\n    height: 70%;\n    border-radius: 9999999px;\n  }\n\n  &:has(:focus) {\n    .radio-circle {\n      border: 1px solid var(--color-focus);\n      outline: 1px solid var(--color-focus);\n    }\n  }\n\n  &:has(:checked) {\n    .radio-circle-inner {\n      background-color: var(--color-focus);\n    }\n  }\n\n  &:has(:disabled) {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n/** This is a common utility CSS class, you can find it in your CSS framework of choice */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling Calendar Component with CSS\nDESCRIPTION: This snippet contains the CSS styles for the calendar component. It defines the layout, colors, and responsive design for various calendar elements, including the grid, cells, and navigation buttons.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_calendarPartial.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style>\n.calendar {\n  background-color: #fff;\n}\n\n.calendar-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: #000;\n}\n\n.calendar-grid {\n  display: grid;\n  gap: 8px;\n}\n\n.weeks-grid {\n  grid-template-columns: repeat(7, 1fr);\n}\n\n.weekday-label {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.6);\n  margin-top: 10px;\n}\n\n.calendar-cell {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border: 2px solid transparent;\n  color: #000;\n  width: 35px;\n  height: 35px;\n  border-radius: 999999px;\n}\n\n.calendar-cell:focus {\n  border-color: #059669;\n  outline: none;\n}\n\n.calendar-cell[aria-disabled='true'] {\n  cursor: not-allowed;\n  opacity: 0.5;\n}\n\n.calendar-cell[aria-selected='true'] {\n  background-color: #059669;\n  font-weight: 500;\n  color: white;\n}\n\n.calendar-cell[aria-disabled='true'] {\n  opacity: 0.1;\n  cursor: not-allowed;\n}\n\n.outside-month {\n  opacity: 0.4;\n}\n\n.months-grid,\n.years-grid {\n  margin-top: 10px;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n\n  .calendar-cell {\n    padding: 2px 4px;\n    width: auto;\n    height: unset;\n  }\n}\n\n.calendar-header-button {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  font-size: 20px;\n  border-radius: 6px;\n  &:hover {\n    background-color: #f0f0f0;\n  }\n}\n\n.today {\n  border-color: #059669;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Formwerk with npm\nDESCRIPTION: Command to install the Formwerk core package using npm package manager.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/getting-started.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @formwerk/core\n```\n\n----------------------------------------\n\nTITLE: API Documentation Table for useTimeField Props\nDESCRIPTION: Markdown component that renders a table of API properties for the useTimeField composable props.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<MdxTableAPI typeName=\"TimeFieldProps\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Table for useTextField Returns in Markdown\nDESCRIPTION: This snippet uses a custom MdxTableAPI component to render a table of return values for the useTextField composable.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<MdxTableAPI fnName=\"useTextField\" />\n```\n\n----------------------------------------\n\nTITLE: File Upload Component Styling\nDESCRIPTION: Scoped CSS styles for the file upload component including variables for theming, layout styling, interactive states, and animations for the upload indicator.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_fileField.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.field {\n  --color-primary: #10b981;\n  --color-text-primary: #333;\n  --color-text-secondary: #666;\n  --color-border: #d4d4d8;\n  --color-focus: var(--color-primary);\n  --color-error: #f00;\n\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.trigger {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  width: max-content;\n  padding: 0.5rem 1rem;\n  font-size: 14px;\n  font-weight: 500;\n  color: white;\n  background-color: var(--color-primary);\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n.trigger:hover {\n  background-color: color-mix(in srgb, var(--color-primary) 85%, black);\n}\n\n.trigger:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px color-mix(in srgb, var(--color-primary) 25%, white);\n}\n\n.icon {\n  width: 16px;\n  height: 16px;\n  fill: currentColor;\n}\n\n.empty-state {\n  font-size: 13px;\n  color: var(--color-text-secondary);\n  margin: 0;\n}\n\n.file-entry {\n  font-size: 13px;\n  color: var(--color-text-primary);\n  padding: 0.25rem 0;\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n}\n\n.error {\n  font-size: 13px;\n  color: var(--color-error);\n}\n\n.delete-button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n  color: var(--color-text-secondary);\n}\n\n.delete-button:hover {\n  color: var(--color-error);\n}\n\n.icon-uploading {\n  animation: spin 1s linear infinite;\n  transform-origin: center;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight with Astro CLI\nDESCRIPTION: Command to create a new Astro project using the Starlight template. This is the primary way to initialize a new Starlight documentation site.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Implementing a Readonly Switch Component in Vue with Formwerk\nDESCRIPTION: This example shows how to create a readonly Switch component that is still validated and submitted but doesn't accept user input. The switch remains focusable and the value is copyable.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/switches.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport Switch from './Switch.vue';\n\nconst value = ref(true);\n</script>\n\n<template>\n  <Switch label=\"Readonly switch\" v-model=\"value\" readonly />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Table for TextField Props in Markdown\nDESCRIPTION: This snippet uses a custom MdxTableAPI component to render a table of props for the TextFieldProps type.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<MdxTableAPI typeName=\"TextFieldProps\" />\n```\n\n----------------------------------------\n\nTITLE: Vue PreviewCard Component Usage\nDESCRIPTION: Example of using PreviewCard components to display form field documentation entries with titles, descriptions, and video previews.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/composables.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PreviewCard\n    client:idle\n    title=\"Text Fields\"\n    description=\"Allows users to enter plain text.\"\n    link=\"/guides/fields/text-fields/\"\n    src=\"/thumbs/text.mp4\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Visualizing Starlight Project Structure\nDESCRIPTION: Directory structure of a typical Starlight project, showing the organization of files and folders. This illustrates where documentation files, assets, and configuration files should be placed.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/README.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Vue SVG Component Implementation\nDESCRIPTION: SVG implementation for the custom fields preview card showing an asterisk-like icon in emerald color.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/composables.mdx#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div class=\"flex h-full w-full items-center justify-center bg-zinc-700\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"size-20 fill-current text-emerald-500\"\n        viewBox=\"0 0 256 256\"\n      >\n        <path d=\"M218.29,182.17a12,12,0,0,1-16.47,4.12L140,149.19V216a12,12,0,0,1-24,0V149.19l-61.82,37.1a12,12,0,1,1-12.35-20.58L104.68,128,41.83,90.29A12,12,0,1,1,54.18,69.71L116,106.81V40a12,12,0,0,1,24,0v66.81l61.82-37.1a12,12,0,1,1,12.35,20.58L151.32,128l62.85,37.71A12,12,0,0,1,218.29,182.17Z\"></path>\n      </svg>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Installing Formwerk with bun\nDESCRIPTION: Command to install the Formwerk core package using bun package manager.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/getting-started.mdx#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun add @formwerk/core\n```\n\n----------------------------------------\n\nTITLE: Rendering Preview Cards with Vue Components in JSX\nDESCRIPTION: Demonstrates how to use the PreviewCard Vue component to showcase Formwerk demo projects. The code creates a responsive grid layout with three preview cards, each linking to different demo examples.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/showcase.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div class=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n\n<PreviewCard\n  title=\"Number Fields with NumberFlow\"\n  description=\"Showcase of a number field using the excellent `@number-flow/vue` to animate value transitions.\"\n  link=\"https://stackblitz.com/edit/formwerk-numberflow\"\n  src=\"/thumbs/number-flow.mp4\"\n  external\n  client:idle\n/>\n\n<PreviewCard\n  title=\"Date/Time Fields with NumberFlow\"\n  description=\"Showcase of a date/time field using the excellent `@number-flow/vue` to animate value transitions.\"\n  link=\"https://stackblitz.com/edit/formwerk-numberflow-datetime\"\n  src=\"/thumbs/numberflow-datetime.mp4\"\n  external\n  client:idle\n/>\n\n<PreviewCard\n  title=\"FM Radio\"\n  description=\"Showcase of a slider built to look like a FM radio dial.\"\n  link=\"https://stackblitz.com/edit/formwerk-fm-radio\"\n  src=\"/thumbs/fm-radio.mp4\"\n  external\n  client:idle\n/>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: OTP Field Component with HTML Constraint Validation\nDESCRIPTION: Example of an OTP field with required validation using native HTML constraint validation. When this field is empty, it will display the required validation error.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/otp-fields.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport OtpField from './OtpField.vue';\n</script>\n\n<template>\n  <OtpField label=\"Your code\" required />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting up Radio Component with FormWerk Core in Vue\nDESCRIPTION: Initializes a radio button component using FormWerk's core utilities. It imports the RadioProps type and useRadio hook, defines props using Vue's defineProps, and extracts labelProps and inputProps from the useRadio hook.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_radioInput.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type RadioProps, useRadio } from '@formwerk/core';\n\nconst props = defineProps<RadioProps>();\n\nconst { labelProps, inputProps } = useRadio(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Styling OTP Field Component with Scoped CSS in Vue\nDESCRIPTION: Defines the scoped CSS styles for the OTP field component, including custom properties for theming, layout, and input styling.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_otpField.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.otp-field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n\n  --fw-border-color: #aaa;\n  --fw-input-bg: #fff;\n  --fw-text-color: #000;\n  --fw-error-color: #ff0000;\n  --fw-focus-color: #10b981;\n  --fw-disabled-bg: #e4e4e7;\n}\n\n.otp-field__label {\n  font-size: 14px;\n  font-weight: 400;\n  color: var(--fw-text-color);\n}\n\n.otp-field__control {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.otp-field__slot {\n  height: 2.5rem;\n  width: 2.5rem;\n  border-radius: 0.375rem;\n  border: 1px solid var(--fw-border-color);\n  background-color: var(--fw-input-bg);\n  align-content: center;\n  text-align: center;\n  font-size: 1.3rem;\n  font-weight: 500;\n  color: var(--fw-text-color);\n  vertical-align: middle;\n  &:focus {\n    outline: 1px solid #059669;\n    background-color: #f0fdf4;\n    caret-color: transparent;\n  }\n\n  &:disabled {\n    background-color: var(--fw-disabled-bg);\n    opacity: 0.5;\n  }\n}\n\n.otp-field__error-message {\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: var(--fw-error-color);\n  font-size: 0.875rem;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring OTP Field Component with TypeScript in Vue\nDESCRIPTION: Sets up the component logic using the composition API with TypeScript. It imports necessary utilities from @formwerk/core and defines props and reactive data.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_otpField.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useOtpField, type OtpFieldProps, OtpSlot } from '@formwerk/core';\n\nconst props = defineProps<OtpFieldProps>();\n\nconst {\n  controlProps,\n  labelProps,\n  errorMessage,\n  errorMessageProps,\n  fieldSlots,\n} = useOtpField(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: FormRepeater with Unnamed Fields in Vue\nDESCRIPTION: Example showing how to use empty string field names to set values directly on array indices instead of as named object properties within the repeater.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/form-repeater.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport FormRepeater from './FormRepeater.vue';\n\nconst { values } = useForm();\n</script>\n\n<template>\n  <FormRepeater name=\"emails\" min=\"1\">\n    <TextField name=\"\" label=\"Email Address\" required type=\"email\" />\n  </FormRepeater>\n\n  <pre>{{ values }}</pre>\n</template>\n```\n\n----------------------------------------\n\nTITLE: FormRepeater with Min and Max Items Constraints in Vue\nDESCRIPTION: Example demonstrating how to use the min and max props to enforce limits on the number of repeatable items in a form repeater.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/form-repeater.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport Checkbox from './Checkbox.vue';\nimport FormRepeater from './FormRepeater.vue';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <FormRepeater name=\"users\" min=\"1\" max=\"3\">\n      <TextField name=\"email\" label=\"Email Address\" required type=\"email\" />\n      <Checkbox name=\"isAdmin\" label=\"Is Admin\" />\n    </FormRepeater>\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Checkboxes and Checkbox Groups in Vue\nDESCRIPTION: This example shows how to disable individual checkboxes or entire checkbox groups using the disabled prop. Disabled checkboxes are not focusable, while disabled groups won't be submitted or validated.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Checkbox from './Checkbox.vue';\nimport CheckboxGroup from './CheckboxGroup.vue';\n</script>\n\n<template>\n  <CheckboxGroup label=\"Checkbox Group\">\n    <Checkbox label=\"Option 1\" value=\"1\" />\n    <Checkbox label=\"Option 2\" value=\"2\" />\n    <Checkbox label=\"Option 3\" value=\"3\" disabled />\n    <Checkbox label=\"Option 4\" value=\"4\" />\n  </CheckboxGroup>\n\n  <CheckboxGroup label=\"Disabled Group\" disabled>\n    <Checkbox label=\"Option 1\" value=\"1\" />\n    <Checkbox label=\"Option 2\" value=\"2\" />\n    <Checkbox label=\"Option 3\" value=\"3\" />\n  </CheckboxGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic FormRepeater Usage Example in Vue\nDESCRIPTION: Example of using the FormRepeater component with TextField and Checkbox fields to create a repeatable form for user information collection.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/form-repeater.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport Checkbox from './Checkbox.vue';\nimport FormRepeater from './FormRepeater.vue';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((data) => {\n  alert(JSON.stringify(data.toObject(), null, 2));\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <FormRepeater name=\"users\">\n      <TextField name=\"email\" label=\"Email Address\" required type=\"email\" />\n      <Checkbox name=\"isAdmin\" label=\"Is Admin\" />\n    </FormRepeater>\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Readonly Calendar Component\nDESCRIPTION: An example showing how to create a readonly calendar component. Readonly calendars can still be validated and submitted, but do not accept user input while remaining focusable.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/calendars.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Calendar from './Calendar.vue';\n</script>\n\n<template>\n  <Calendar label=\"Readonly Calendar\" readonly />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing FormGroup Component with Vue and TypeScript\nDESCRIPTION: A Vue component that renders a form group with a heading label and content slot. It uses the useFormGroup hook from @formwerk/core to process props and generate appropriate binding attributes for accessibility and styling.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/_partials/_group.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div v-bind=\"groupProps\">\n    <h3 v-bind=\"labelProps\">{{ label }}</h3>\n\n    <slot />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { type FormGroupProps, useFormGroup } from '@formwerk/core';\n\nconst props = defineProps<FormGroupProps>();\n\nconst { labelProps, groupProps } = useFormGroup(props);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Readonly Number Field Implementation\nDESCRIPTION: Demonstrates implementation of a readonly number field that allows focusing but prevents input\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/number-fields.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport NumberField from './NumberField.vue';\n</script>\n\n<template>\n  <NumberField label=\"Readonly\" value=\"47\" readonly />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Validation for Switch Components with Standard Schema\nDESCRIPTION: This snippet shows how to disable HTML validation while still using Standard Schema validation for a Switch component by setting the disable-html-validation prop to true.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/switches.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { z } from 'zod';\nimport Switch from './Switch.vue';\n\nconst schema = z.custom((val) => {\n  return val !== true;\n}, 'I am a paradox');\n</script>\n\n<template>\n  <Switch\n    label=\"Mixed Validation\"\n    required\n    :schema=\"schema\"\n    disable-html-validation\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: HTML Constraints Validation for Switch Components in Vue\nDESCRIPTION: This snippet demonstrates how to implement HTML constraint validation for a Switch component using the required attribute. Though switches ideally should not be validatable, Formwerk supports this use case.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/switches.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Switch from './Switch.vue';\n</script>\n\n<template>\n  <Switch label=\"HTML Validation\" required />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing TextField with displayError Function in Vue\nDESCRIPTION: This Vue component shows an alternative implementation of TextField using the displayError function for simplified error display logic.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/validation.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type TextFieldProps, useTextField } from '@formwerk/core';\n\nconst props = defineProps<TextFieldProps>();\n\nconst {\ninputProps,\nlabelProps,\ndisplayError,\nerrorMessageProps,\ndescriptionProps,\n} = useTextField(props);\n\n</script>\n\n<template>\n  <div>\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <input v-bind=\"inputProps\" :style=\"{ display: 'block' }\" />\n\n    <div v-bind=\"errorMessageProps\">\n      {{ displayError() }}\n    </div>\n\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering TextArea Component Template with Error Handling\nDESCRIPTION: Defines the Vue template for the textarea component with supporting elements for label, error message, and description. The template uses Vue's v-bind directive to apply the props provided by the useTextField hook for accessibility and validation.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_textarea.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"field\">\n    <label v-bind=\"labelProps\">{{ label }}</label>\n    <textarea v-bind=\"inputProps\"></textarea>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n\n    <div v-if=\"description\" v-bind=\"descriptionProps\" class=\"hint\">\n      {{ description }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Readonly TextField Example\nDESCRIPTION: Example demonstrating readonly text field implementation\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextField from './TextField.vue';\n</script>\n\n<template>\n  <TextField label=\"Readonly Field\" value=\"You can't change me\" readonly />\n</template>\n```\n\n----------------------------------------\n\nTITLE: TextArea Field Implementation in Vue\nDESCRIPTION: Example of using a TextArea component with a label prop\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/text-fields.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport TextAreaField from './TextAreaField.vue';\n</script>\n\n<template>\n  <TextAreaField label=\"Write a poem\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering CheckboxGroup Structure with Vue Template\nDESCRIPTION: Defines the HTML structure for the CheckboxGroup component. It renders a container with conditional classes, a label, slots for checkboxes, and conditional display of error messages or descriptions based on component state.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkboxGroup.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<div\n  v-bind=\"groupProps\"\n  class=\"checkbox-group\"\n  :class=\"{ 'is-touched': isTouched }\"\n>\n  <div v-bind=\"labelProps\" class=\"group-label\">{{ label }}</div>\n\n  <div class=\"checkboxes-container\">\n    <slot />\n  </div>\n\n  <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n    {{ errorMessage }}\n  </div>\n\n  <div v-else-if=\"description\" v-bind=\"descriptionProps\" class=\"hint\">\n    {{ description }}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Managing Checkbox Group State in Vue\nDESCRIPTION: This example demonstrates how to visually represent a checkbox group's overall state using the groupState property from useCheckboxGroup, which indicates if the group is entirely checked, unchecked, or in a mixed state.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/checkboxes.mdx#2025-04-13_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport Checkbox from './Checkbox.vue';\nimport CheckboxGroup from './CheckboxGroup.vue';\n</script>\n\n<template>\n  <CheckboxGroup label=\"Colors\" v-model=\"colors\">\n    <Checkbox label=\"Red\" value=\"red\" />\n    <Checkbox label=\"Green\" value=\"green\" />\n    <Checkbox label=\"Blue\" value=\"blue\" />\n  </CheckboxGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Checkbox Template Structure\nDESCRIPTION: Template markup for the checkbox component including a hidden input, custom checkbox square with SVG checkmark, label text, and error message display.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_checkbox.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"checkbox-item\">\n    <label v-bind=\"labelProps\">\n      <input v-bind=\"inputProps\" class=\"sr-only\" />\n\n      <div class=\"checkbox-square\">\n        <svg\n          v-if=\"isChecked\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 256 256\"\n          class=\"fill-emerald-500\"\n        >\n          <path\n            d=\"M232.49,80.49l-128,128a12,12,0,0,1-17,0l-56-56a12,12,0,1,1,17-17L96,183,215.51,63.51a12,12,0,0,1,17,17Z\"\n          ></path>\n        </svg>\n      </div>\n\n      {{ label }}\n    </label>\n\n    <div v-if=\"errorMessage\" v-bind=\"errorMessageProps\" class=\"error\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering MdxTableAPI Component for useSelect Documentation\nDESCRIPTION: Renders the MdxTableAPI component to display documentation for the useSelect composable's return values. The component is configured with the fnName prop set to \"useSelect\".\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<MdxTableAPI fnName=\"useSelect\" />\n```\n\n----------------------------------------\n\nTITLE: Combining HTML and Schema Validation in SelectField\nDESCRIPTION: Example showing mixed validation approach using both HTML constraints and Zod schema validation together. The HTML constraints are validated first, followed by the schema validation.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/selects.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport SelectField from './SelectField.vue';\nimport OptionItem from './OptionItem.vue';\nimport { z } from 'zod';\n\nconst schema = z.string().endsWith('coffee', 'WRONG ANSWER!');\n</script>\n\n<template>\n  <SelectField\n    label=\"Select a drink (Mixed Validation)\"\n    required\n    :schema=\"schema\"\n  >\n    <OptionItem label=\"Coffee ☕️\" value=\"coffee\" />\n    <OptionItem label=\"Tea 🍵\" value=\"tea\" />\n    <OptionItem label=\"Milk 🥛\" value=\"milk\" />\n  </SelectField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: API Documentation Table for useDateSegment Returns\nDESCRIPTION: Markdown component that renders a table of return values from the useDateTimeSegment composable.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<MdxTableAPI fnName=\"useDateTimeSegment\" />\n```\n\n----------------------------------------\n\nTITLE: API Documentation Table for useDateSegment Props\nDESCRIPTION: Markdown component that renders a table of API properties for the useDateSegment composable props.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/time-fields.mdx#2025-04-13_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<MdxTableAPI typeName=\"DateTimeSegmentProps\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Calendar Views in Vue\nDESCRIPTION: Demonstrates how to limit which calendar views are available to users by setting the allowed-views prop. This example restricts the calendar to only show weeks and months views, disabling the year view that would normally be available by default.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/calendars.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Calendar from './Calendar.vue';\n</script>\n\n<template>\n  <Calendar label=\"Calendar\" :allowed-views=\"['weeks', 'months']\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Errors with getError in Vue\nDESCRIPTION: Example of using the getError function from useForm to access specific field errors. This approach allows you to get the error of a particular field, returning undefined if no error exists.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/forms/index.mdx#2025-04-13_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from '@formwerk/core';\nimport TextField from './TextField.vue';\nimport { z } from 'zod';\n\nconst { handleSubmit, getError } = useForm({\n  schema: z.object({\n    url: z.string().url().max(8),\n    email: z.string().email(),\n  }),\n});\n</script>\n\n<template>\n  <TextField name=\"url\" label=\"URL\" required />\n  <TextField name=\"email\" label=\"Email\" required />\n\n  <ul>\n    <li>URL Error: {{ getError('url') }}</li>\n    <li>Email Error: {{ getError('email') }}</li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling FormWerk Switch Component with Scoped CSS\nDESCRIPTION: This snippet contains the scoped CSS styles for the switch component. It defines custom properties for colors and sizes, and includes styles for different states of the switch such as checked, focused, readonly, and disabled. It also includes a utility class for screen reader only content and error message styling.\nSOURCE: https://github.com/formwerkjs/formwerk.dev/blob/main/src/content/docs/guides/fields/_partials/_switchCustom.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.switch {\n  --switch-bg: #57534e;\n  --switch-active-bg: #10b981;\n  --switch-readonly-bg: #a8a29e;\n  --switch-knob-color: #f5f5f4;\n  --color-text: #333;\n  --color-error: #f00;\n  --color-primary: #10b981;\n  --color-focus: var(--color-primary);\n\n  .switch-label {\n    font-size: 14px;\n    user-select: none;\n  }\n\n  .switch-control {\n    width: 3rem;\n    height: 1.5rem;\n    background-color: var(--switch-bg);\n    border-radius: 99999px;\n    transition: background-color 0.2s;\n    display: flex;\n    align-items: center;\n  }\n\n  .switch-knob {\n    border-radius: 99999px;\n    height: 1.2rem;\n    width: 1.4rem;\n    background: var(--switch-knob-color);\n    translate: 2px 0;\n    transition: translate 0.2s;\n  }\n\n  [aria-checked='true'] {\n    .switch-control {\n      background-color: var(--switch-active-bg);\n    }\n\n    .switch-knob {\n      translate: 100% 0;\n    }\n  }\n\n  .switch-wrapper {\n    display: inline-flex;\n    align-items: center;\n    cursor: pointer;\n    gap: 0.25rem;\n\n    &:focus {\n      .switch-control {\n        outline: 2px solid var(--color-primary);\n      }\n    }\n\n    [readonly='true'] {\n      .switch-control {\n        background-color: var(--switch-readonly-bg);\n      }\n    }\n\n    [disabled='true'] {\n      .switch-control {\n        opacity: 0.4;\n        cursor: not-allowed;\n      }\n    }\n  }\n\n  /** This is a common utility CSS class, you can find it in your CSS framework of choice */\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    border: 0;\n  }\n\n  .error {\n    color: var(--color-error);\n    display: none;\n    font-size: 13px;\n  }\n\n  &[aria-invalid='true'] {\n    .error {\n      display: block;\n    }\n  }\n}\n</style>\n```"
  }
]