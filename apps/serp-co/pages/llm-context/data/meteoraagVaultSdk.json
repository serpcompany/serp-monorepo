[
  {
    "owner": "meteoraag",
    "repo": "vault-sdk",
    "content": "TITLE: Interacting with VaultImpl\nDESCRIPTION: Core vault operations including checking supply, depositing, withdrawing, and checking balances.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// To refetch the vault's latest supply\n// Alternatively, use `vaultImpl.lpSupply`\nconst lpSupply = await vaultImpl.getVaultSupply();\n\n// Rewards are not instantly redeemable, and are subject to a lock.\n// This function returns the amount of LP that are redeemable.\nconst unlockedAmount = await vaultImpl.getWithdrawableAmount();\n\n// To deposit into the vault\nconst amountInLamports = 1 * 10 ** 9; // 1.0 SOL\nconst depositTx = await vaultImpl.deposit(mockWallet.publicKey, new BN(amountInLamports)); // Web3 Transaction Object\nconst depositResult = await provider.sendAndConfirm(depositTx); // Transaction hash\n\n// Get the user's ATA LP balance\nconst userLpBalance = await vaultImpl.getUserBalance(mockWallet.publicKey);\n\n// To withdraw from the vault\nconst withdrawTx = await vaultImpl.withdraw(mockWallet.publicKey, new BN(userLpBalance)); // Web3 Transaction Object\nconst withdrawResult = await provider.sendAndConfirm(withdrawTx); // Transaction hash\n```\n\n----------------------------------------\n\nTITLE: Initializing VaultImpl Instance\nDESCRIPTION: Setup code for creating a VaultImpl instance with Solana connection and wallet configuration.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport VaultImpl from '@meteora-ag/vault-sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport { NATIVE_MINT } from \"@solana/spl-token\";\nimport { Wallet, AnchorProvider } from '@coral-xyz/anchor';\n\n// Connection, Wallet, and AnchorProvider to interact with the network\nconst mainnetConnection = new Connection('https://api.mainnet-beta.solana.com');\nconst mockWallet = new Wallet(new Keypair());\nconst provider = new AnchorProvider(mainnetConnection, mockWallet, {\n  commitment: 'confirmed',\n});\n\nconst vaultImpl = await VaultImpl.create(connection, NATIVE_MINT);\n```\n\n----------------------------------------\n\nTITLE: Example Commands for Mercurial Vault CLI Operations\nDESCRIPTION: Example commands demonstrating how to use the Mercurial vault CLI for common operations: showing vault information, depositing 100 tokens, and withdrawing 100 tokens, all using the SOL token mint address.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/rust-client/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n../target/debug/rust-client show --provider.token_mint So11111111111111111111111111111111111111112\n\n../target/debug/rust-client deposit 100 --provider.token_mint So11111111111111111111111111111111111111112\n\n../target/debug/rust-client withdraw 100 --provider.token_mint So11111111111111111111111111111111111111112\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions\nDESCRIPTION: Utility functions for converting between LP tokens and underlying token amounts.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { helper } from '@meteora-ag/vault-sdk';\n\nconst userShare = await vaultImpl.getUserBalance(mockWallet.publicKey);\nconst unlockedAmount = await vaultImpl.getWithdrawableAmount();\nconst lpSupply = await vaultImpl.getVaultSupply();\n\n// To convert user's LP balance into underlying token amount\nconst underlyingShare = helper.getAmountByShare(userShare, unlockedAmount, lpSupply);\n\n// To convert underlying token amount into user's LP balance\nconst amountInLamports = 1 * 10 ** 9; // 1.0 SOL\nconst lpToUnmint = helper.getUnmintAmount(new BN(amountInLamports), unlockedAmount, lpSupply); // To withdraw 1.0 SOL\n```\n\n----------------------------------------\n\nTITLE: Initializing Vault with Affiliate\nDESCRIPTION: Configuration for setting up a vault instance with affiliate program integration.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst vaultImpl = await VaultImpl.create(\n    connection,\n    NATIVE_MINT,\n    {\n        affiliateId: new PublicKey('YOUR_PARTNER_PUBLIC_KEY');\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Partner Information\nDESCRIPTION: Code to retrieve affiliate/partner information from the vault.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Affiliate / Partner info\nconst partnerInfo = await vaultImpl.getAffiliateInfo();\n```\n\n----------------------------------------\n\nTITLE: Mercurial Vault CLI Command Structure\nDESCRIPTION: Detailed help output showing the CLI structure with all available options and subcommands for the Mercurial vault client, including provider configuration options and operations like deposit and withdraw.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/rust-client/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nUSAGE:\n    rust-client [OPTIONS] <SUBCOMMAND>\n\nOPTIONS:\n    -h, --help                                Print help information\n        --provider.admin <ADMIN>              \n        --provider.base <BASE>                \n        --provider.cluster <CLUSTER>          Cluster override\n        --provider.program_id <PROGRAM_ID>    Program id override\n        --provider.token_mint <TOKEN_MINT>    Token mint override\n        --provider.wallet <WALLET>            Wallet override\n\nSUBCOMMANDS:\n    deposit                \n    get-unlocked-amount    \n    help                   Print this message or the help of the given subcommand(s)\n    show                   \n    withdraw                \n```\n\n----------------------------------------\n\nTITLE: Installing Mercurial Vault SDK Dependencies\nDESCRIPTION: Installation command for required npm packages including the vault SDK and Solana dependencies.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @meteora-ag/vault-sdk @coral-xyz/anchor @solana/web3.js@1 @solana/spl-token\n```\n\n----------------------------------------\n\nTITLE: Building the Mercurial Vault CLI Client in Rust\nDESCRIPTION: Simple command to build the Rust client for the Mercurial vault using Cargo, Rust's package manager and build system.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/rust-client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TypeScript SDK\nDESCRIPTION: Instructions for installing dependencies and running tests for the TypeScript SDK using pnpm package manager.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Affiliate SDK\nDESCRIPTION: Instructions for installing dependencies and running tests specifically for the Affiliate functionality using pnpm package manager.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\npnpm run test-affiliate\n```\n\n----------------------------------------\n\nTITLE: Mercurial Vault CLI Help Command Usage\nDESCRIPTION: Command to display the help information for the Rust client, showing available options and subcommands for interacting with the Mercurial vault.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/rust-client/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n../target/debug/rust-client --help\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard changelog format following Keep a Changelog conventions and Semantic Versioning, documenting changes across multiple versions including additions, changes, deprecations, removals, fixes and security updates.\nSOURCE: https://github.com/meteoraag/vault-sdk/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n### Added\n\n### Changed\n\n### Deprecated\n\n### Removed\n\n### Fixed\n\n### Security\n```"
  }
]