[
  {
    "owner": "vercel",
    "repo": "swr-site",
    "content": "TITLE: Installing SWR with Package Managers in React\nDESCRIPTION: Commands to install the SWR library using different package managers (pnpm, npm, and yarn).\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add swr\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i swr\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add swr\n```\n\n----------------------------------------\n\nTITLE: Using useSWR Hook in a React Component\nDESCRIPTION: Demonstrates how to use the useSWR hook in a React functional component to fetch user data and handle loading and error states.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile ({ userId }) {\n  const { data, error, isLoading } = useSWR(`/api/user/${userId}`, fetcher)\n\n  if (error) return <div>failed to load</div>\n  if (isLoading) return <div>loading...</div>\n\n  // render data\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Data Hook with SWR\nDESCRIPTION: Shows how to create a reusable custom hook (useUser) using SWR for fetching user data, which can be used across multiple components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useUser (id) {\n  const { data, error, isLoading } = useSWR(`/api/user/${id}`, fetcher)\n\n  return {\n    user: data,\n    isLoading,\n    isError: error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SWRConfig Context in JSX\nDESCRIPTION: This snippet demonstrates how to use SWRConfig to provide global options for all SWR hooks within its context.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={options}>\n  <Component/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Complete Optimistic UI Implementation with Error Rollback\nDESCRIPTION: This code demonstrates a complete optimistic UI implementation with SWR that includes error handling. It updates the UI immediately, populates the cache with the server response, skips revalidation, and rolls back changes if an error occurs.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('New Item'), {\n      optimisticData: [...data, 'New Item'],\n      populateCache: true,\n      revalidate: false,\n      rollbackOnError: true,\n    })\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using SWR Hook for Data Fetching in React\nDESCRIPTION: This snippet demonstrates how to use the useSWR hook to fetch data in a React component. It shows error handling, loading state, and data display.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/index.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, error, isLoading } = useSWR('/api/user', fetcher)\n\n  if (error) return <div>failed to load</div>\n  if (isLoading) return <div>loading...</div>\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom SWR Hook in a React Component\nDESCRIPTION: Demonstrates the usage of the custom useUser hook in a React component, showing how to handle loading and error states.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Avatar ({ userId }) {\n  const { user, isLoading, isError } = useUser(userId)\n\n  if (isLoading) return <Spinner />\n  if (isError) return <Error />\n  return <img src={user.avatar} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fetcher Function for SWR in React\nDESCRIPTION: Definition of a basic fetcher function that wraps the native fetch API to handle JSON responses, which is required for SWR to fetch data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst fetcher = (...args) => fetch(...args).then(res => res.json())\n```\n\n----------------------------------------\n\nTITLE: Using SWR Hook for Data Fetching in React Components\nDESCRIPTION: Example of implementing the useSWR hook in a React functional component to fetch user data, with loading and error state handling.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from \"swr\"\n\nfunction Profile ({ userId }) {\n  const { data, error, isLoading } = useSWR(`/api/user/${userId}`, fetcher)\n\n  if (error) return <div>failed to load</div>\n  if (isLoading) return <div>loading...</div>\n\n  // renderizar datos\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Usage for Data Fetching in JavaScript\nDESCRIPTION: Demonstrates the fundamental API of SWR for data fetching. The useSWR hook takes a key and a fetcher function as arguments, returning data and error objects.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = useSWR(key, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Installing SWR via Package Managers\nDESCRIPTION: Commands to install SWR using different package managers (pnpm, npm, yarn).\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add swr\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i swr\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add swr\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Conditional Fetching with SWR\nDESCRIPTION: Demonstrates different approaches to conditional data fetching using SWR. Shows how to use null values and functions to control when data fetching occurs based on conditions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/conditional-fetching.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// conditionally fetch\nconst { data } = useSWR(shouldFetch ? '/api/data' : null, fetcher)\n\n// ...or return a falsy value\nconst { data } = useSWR(() => shouldFetch ? '/api/data' : null, fetcher)\n\n// ...or throw an error when user.id is not defined\nconst { data } = useSWR(() => '/api/data?uid=' + user.id, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Clearing All Cache Data with mutate in SWR\nDESCRIPTION: This snippet shows how to use the filter function with mutate to clear all cache data. This can be useful in scenarios like logging out a user.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst clearCache = () => mutate(\n  () => true,\n  undefined,\n  { revalidate: false }\n)\n\n// ...clear cache on logout\nclearCache()\n```\n\n----------------------------------------\n\nTITLE: Refactored Components Using SWR Hooks\nDESCRIPTION: Shows how to refactor the previous example using SWR and the custom useUser hook, demonstrating improved code organization and data fetching.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.en-US.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// page component\n\nfunction Page ({ userId }) {\n  return <div>\n    <Navbar userId={userId} />\n    <Content userId={userId} />\n  </div>\n}\n\n// child components\n\nfunction Navbar ({ userId }) {\n  return <div>\n    ...\n    <Avatar userId={userId} />\n  </div>\n}\n\nfunction Content ({ userId }) {\n  const { user, isLoading } = useUser(userId)\n  if (isLoading) return <Spinner />\n  return <h1>Welcome back, {user.name}</h1>\n}\n\nfunction Avatar ({ userId }) {\n  const { user, isLoading } = useUser(userId)\n  if (isLoading) return <Spinner />\n  return <img src={user.avatar} alt={user.name} />\n}\n```\n\n----------------------------------------\n\nTITLE: SWRConfig with Fetcher and RefreshInterval in React\nDESCRIPTION: Demonstrates a complete example of a Dashboard component using SWR hooks with global configuration for refreshInterval and fetcher. Shows how to override specific options in individual hook calls.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { SWRConfig } from 'swr'\n\nfunction Dashboard () {\n  const { data: events } = useSWR('/api/events')\n  const { data: projects } = useSWR('/api/projects')\n  const { data: user } = useSWR('/api/user', { refreshInterval: 0 }) // override\n\n  // ...\n}\n\nfunction App () {\n  return (\n    <SWRConfig \n      value={{\n        refreshInterval: 3000,\n        fetcher: (resource, init) => fetch(resource, init).then(res => res.json())\n      }}\n    >\n      <Dashboard />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SWRConfig Usage in JSX\nDESCRIPTION: Shows the basic syntax for using SWRConfig to wrap components and provide global options to all SWR hooks within its scope.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={options}>\n  <Component/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with SWR in React\nDESCRIPTION: Demonstrates how to implement optimistic updates using SWR's mutate function. This example shows updating a user's name locally before the server request completes, with options for rollback on error.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction Profile () {\n  const { mutate } = useSWRConfig()\n  const { data } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        const user = { ...data, name: newName }\n        const options = {\n          optimisticData: user,\n          rollbackOnError(error) {\n            // 如果超时中止请求的错误，不执行回滚\n            return error.name !== 'AbortError'\n          },\n        }\n\n        // 立即更新本地数据\n        // 发送一个请求以更新数据\n        // 触发重新验证（重新请求）确保本地数据正确\n        mutate('/api/user', updateFn(user), options);\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Race Conditions with useSWR and useSWRMutation in React\nDESCRIPTION: This example illustrates how useSWRMutation can avoid race conditions with useSWR. It shows how to handle potential conflicts between data refreshes and mutations, ensuring that stale data is not displayed after a mutation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Profile() {\n  const { data } = useSWR('/api/user', getUser, { revalidateInterval: 3000 })\n  const { trigger } = useSWRMutation('/api/user', updateUser)\n\n  return <>\n    {data ? data.username : null}\n    <button onClick={() => trigger()}>Update User</button>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useSWR Hook Usage in JavaScript\nDESCRIPTION: Example of using the useSWR hook to fetch data with its basic syntax. The hook returns data, error state, loading state, validation state, and mutation function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/api.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { data, error, isLoading, isValidating, mutate } = useSWR(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Using optimisticData Function with useSWR in React\nDESCRIPTION: This example shows how to pass a function to optimisticData to make it dependent on the current data. It demonstrates a more flexible approach to optimistic updates using useSWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction Profile () {\n  const { mutate } = useSWRConfig()\n  const { data } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        mutate('/api/user', updateUserName(newName), {\n          optimisticData: user => ({ ...user, name: newName }),\n          rollbackOnError: true\n        });\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Global Error Handling Configuration in SWR\nDESCRIPTION: This snippet shows how to set up global error handling in SWR using the SWRConfig component. It demonstrates how to implement a global onError function that can be used for centralized error reporting or notifications.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  onError: (error, key) => {\n    if (error.status !== 403 && error.status !== 404) {\n      // We can send the error to Sentry,\n      // or show a notification UI.\n    }\n  }\n}}>\n  <MyApp />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Using the useSWR Hook in JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of the useSWR hook. It shows the structure of the hook call and the returned values, including data, error, loading states, and the mutate function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/api.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error, isLoading, isValidating, mutate } = useSWR(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with SWR using Unfetch in JavaScript\nDESCRIPTION: Shows how to use the unfetch library with SWR for data fetching. The fetcher function uses fetch to make an HTTP request and parse the JSON response.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from 'unfetch'\n\nconst fetcher = url => fetch(url).then(r => r.json())\n\nfunction App () {\n  const { data, error } = useSWR('/api/data', fetcher)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Specification for useSWR\nDESCRIPTION: Shows how to explicitly specify types for 'key' and 'fetcher' arguments in useSWR. It also demonstrates how to type the error thrown by the fetcher function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Fetcher } from 'swr'\n\nconst uid = '<user_id>'\nconst fetcher: Fetcher<User, string> = (id) => getUserById(id)\n\nconst { data } = useSWR(uid, fetcher)\n// `data` will be `User | undefined`.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = useSWR<User, Error>(uid, fetcher);\n// `data` will be `User | undefined`.\n// `error` will be `Error | undefined`.\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Data Fetching Pattern in JavaScript\nDESCRIPTION: SWR の基本的な使用パターンを示すコードスニペット。key と fetcher を受け取り、data と error を返します。\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.ja.mdx#2025-04-19_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { data, error } = useSWR(key, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Using SWR with Axios in JavaScript\nDESCRIPTION: Example of implementing SWR with the Axios HTTP client. The fetcher function makes a GET request to the specified URL and returns the data property from the response.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios'\n\nconst fetcher = url => axios.get(url).then(res => res.data)\n\nfunction App () {\n  const { data, error } = useSWR('/api/data', fetcher)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Data Fetching with SWR in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement dependent data fetching using SWR, where one data request depends on the results of another. It shows how to use a function-based key that relies on previously fetched data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/conditional-fetching.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyProjects () {\n  const { data: user } = useSWR('/api/user')\n  const { data: projects } = useSWR(() => '/api/projects?uid=' + user.id)\n  // Al pasar una función, SWR utilizará el valor devuelto\n  // como `key`. Si la función lanza o devuelve\n  // falsy, SWR sabrá que algunas dependencias no estan\n  // ready. En este caso `user.id` lanza cuando `user`\n  // no este cargado.\n\n  if (!projects) return 'loading...'\n  return 'You have ' + projects.length + ' projects'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSWR with TypeScript\nDESCRIPTION: Demonstrates type inference for the 'key' and 'fetcher' arguments in useSWR. Shows various ways to use useSWR with different key types and how TypeScript infers the types automatically.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// `key` is inferred to be `string`\nuseSWR('/api/user', key => {})\nuseSWR(() => '/api/user', key => {})\n\n// `key` will be inferred as { a: string; b: { c: string; d: number } }\nuseSWR({ a: '1', b: { c: '3', d: 2 } }, key => {})\nuseSWR(() => ({ a: '1', b: { c: '3', d: 2 } }), key => {})\n\n// `arg0` will be inferred as string.  `arg1` will be inferred as number\nuseSWR(['user', 8], ([arg0, arg1]) => {})\nuseSWR(() => ['user', 8], ([arg0, arg1]) => {})\n```\n\n----------------------------------------\n\nTITLE: Mutating Multiple Items with SWR in JavaScript\nDESCRIPTION: This example demonstrates how to use SWR's global mutate API with a filter function to revalidate multiple cache keys based on a condition.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport { mutate } from 'swr'\n// Or from the hook if you customized the cache provider:\n// { mutate } = useSWRConfig()\n\nmutate(\n  key => typeof key === 'string' && key.startsWith('/api/item?id='),\n  undefined,\n  { revalidate: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Avatar Component with SWR in React\nDESCRIPTION: This snippet demonstrates how to create a reusable user hook with SWR and implement an Avatar component. It showcases SWR's deduplication feature, where multiple instances of the same hook result in only one network request.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useUser() {\n   return useSWR('/api/user', fetcher)\n}\n\nfunction Avatar () {\n   const { data, error } = useUser()\n   if (error) return <Error />\n   if (!data) return <Spinner />\n\n   return <img src={data.avatar_url} />\n}\n\nfunction App() {\n  return <>\n    <Avatar />\n    <Avatar />\n    <Avatar />\n    <Avatar />\n    <Avatar />\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useSWR in React\nDESCRIPTION: This snippet demonstrates how to use the optimisticData option with useSWR to update local data immediately while waiting for the remote mutation to finish. It also shows how to use rollbackOnError to control when to revert the data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction Profile () {\n  const { mutate } = useSWRConfig()\n  const { data } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        const user = { ...data, name: newName }\n        const options = {\n          optimisticData: user,\n          rollbackOnError(error) {\n            // If it's timeout abort error, don't rollback\n            return error.name !== 'AbortError'\n          },\n        }\n\n        // updates the local data immediately\n        // send a request to update the data\n        // triggers a revalidation (refetch) to make sure our local data is correct\n        mutate('/api/user', updateFn(user), options);\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Laggy Data Middleware for SWR in React\nDESCRIPTION: A more complex middleware example that keeps the previous result when the key changes, allowing for a smoother transition between data states. Uses useRef to store previous data and extends the SWR return object with additional properties.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef, useEffect, useCallback } from 'react'\n\n// This is a SWR middleware for keeping the data even if key changes.\nfunction laggy(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Use a ref to store previous returned data.\n    const laggyDataRef = useRef()\n\n    // Actual SWR hook.\n    const swr = useSWRNext(key, fetcher, config)\n\n    useEffect(() => {\n      // Update ref if data is not undefined.\n      if (swr.data !== undefined) {\n        laggyDataRef.current = swr.data\n      }\n    }, [swr.data])\n\n    // Expose a method to clear the laggy data, if any.\n    const resetLaggy = useCallback(() => {\n      laggyDataRef.current = undefined\n    }, [])\n\n    // Fallback to previous data if the current data is undefined.\n    const dataOrLaggyData = swr.data === undefined ? laggyDataRef.current : swr.data\n\n    // Is it showing previous data?\n    const isLagging = swr.data === undefined && laggyDataRef.current !== undefined\n\n    // Also add a `isLagging` field to SWR.\n    return Object.assign({}, swr, {\n      data: dataOrLaggyData,\n      isLagging,\n      resetLaggy,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: useSWRMutation Basic Implementation\nDESCRIPTION: Example of implementing useSWRMutation for manual remote mutations\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\n// Fetcher implementation.\n// The extra argument will be passed via the `arg` property of the 2nd parameter.\n// In the example below, `arg` will be 'my_token'\nasync function updateUser(url, { arg }: { arg: string }) {\n  await fetch(url, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${arg}`\n    }\n  })\n}\n\nfunction Profile() {\n  // A useSWR + mutate like API, but it will not start the request automatically.\n  const { trigger } = useSWRMutation('/api/user', updateUser, options)\n\n  return <button onClick={() => {\n    // Trigger `updateUser` with a specific argument.\n    trigger('my_token')\n  }}>Update User</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR in Next.js App Router Client Components\nDESCRIPTION: Demonstrates how to use SWR in a client component within the Next.js App Router by adding the 'use client' directive and importing the useSWR hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport useSWR from 'swr'\nexport default function Page() {\n  const { data } = useSWR('/api/user', fetcher)\n  return <h1>{data.name}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Data with SWR\nDESCRIPTION: This code demonstrates the new preload API in SWR 2.0 that allows fetching data before it's needed. It begins loading the user data before the component renders, improving perceived performance by reducing visible loading states.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { preload } from 'swr'\n\nconst fetcher = (url) => fetch(url).then((res) => res.json())\n\n// You can call the preload function in anywhere\npreload('/api/user', fetcher)\n\nfunction Profile() {\n  // The component that actually uses the data:\n  const { data, error } = useSWR('/api/user', fetcher)\n  // ...\n}\n\nexport function Page () {\n  return <Profile/>\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cache After Mutation with mutate in SWR\nDESCRIPTION: This example shows how to use the populateCache option with mutate to update the cache for useSWR with the response of the mutation. It demonstrates how to avoid an extra fetch when the mutation request returns the updated data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst updateTodo = () => fetch('/api/todos/1', {\n  method: 'PATCH',\n  body: JSON.stringify({ completed: true })\n})\n\nmutate('/api/todos', updateTodo, {\n  populateCache: (updatedTodo, todos) => {\n    // filter the list, and return it with the updated item\n    const filteredTodos = todos.filter(todo => todo.id !== '1')\n    return [...filteredTodos, updatedTodo]\n  },\n  // Since the API already gives us the updated information,\n  // we don't need to revalidate here.\n  revalidate: false\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Stock Data Fetching with SWR in React\nDESCRIPTION: This snippet demonstrates how to use SWR to fetch stock data with a refresh interval, utilizing isLoading and isValidating for better UX. It shows how to display a skeleton loader during initial data fetch and a spinner during background revalidation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.ja.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Stock() {\n  const { data, isLoading, isValidating } = useSWR(STOCK_API, fetcher, {\n    refreshInterval: 3000\n  });\n\n  // 初期データのローディング中の場合には、表示するためのデータはありません\n  // そのため、スケルトンの表示を返します\n  if (isLoading) return <div className=\"skeleton\" />;\n\n  // そうでなければ、データとバックグラウンドで再検証中であることを示す\n  // UI を表示します\n  return (\n    <>\n      <div>${data}</div>\n      {isValidating ? <div className=\"spinner\" /> : null}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Axios with SWR for Data Fetching in JavaScript\nDESCRIPTION: Demonstrates how to use Axios with SWR for data fetching. The fetcher function uses axios.get to make an HTTP request and returns the response data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios'\n\nconst fetcher = url => axios.get(url).then(res => res.data)\n\nfunction App () {\n  const { data, error } = useSWR('/api/data', fetcher)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Mutate with useSWRConfig\nDESCRIPTION: Example showing how to access and use the global mutate function using the useSWRConfig hook\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSWRConfig } from \"swr\"\n\nfunction App() {\n  const { mutate } = useSWRConfig()\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic Updates with Function-based Data in React\nDESCRIPTION: This example shows how to use a function for optimisticData to make it dependent on current data. It uses useSWR and useSWRConfig hooks to update the user's name.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.fr-FR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction Profile () {\n  const { mutate } = useSWRConfig()\n  const { data } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>Mon nom est {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        mutate('/api/user', updateUserName(newName), {\n          optimisticData: user => ({ ...user, name: newName }),\n          rollbackOnError: true\n        });\n      }}>Mettre mon nom en majuscule!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRMutation for Declarative Data Mutation in React\nDESCRIPTION: This code demonstrates how to use the new useSWRMutation hook to perform remote data mutations. It defines a sendRequest function to handle POST requests and implements a button that triggers the mutation, showing different states based on the mutation status.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nasync function sendRequest(url, { arg }) {\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(arg)\n  })\n}\n\nfunction App() {\n  const { trigger, isMutating } = useSWRMutation('/api/user', sendRequest)\n\n  return (\n    <button\n      disabled={isMutating}\n      onClick={() => trigger({ username: 'johndoe' })}\n    >{\n      isMutating ? 'Creating...' : 'Create User'\n    }</button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Waterfall Problems with SWR Preload in Suspense Mode\nDESCRIPTION: This example demonstrates how to use the preload function from SWR to avoid waterfall problems in Suspense mode. It preloads data for multiple endpoints before rendering components that use Suspense.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { preload } from 'swr'\n\n// should call before rendering\npreload('/api/user', fetcher);\npreload('/api/movies', fetcher);\n\nconst Page = () => {\n  // The below useSWR hooks will suspend the rendering, but the requests to `/api/user` and `/api/movies` have started by `preload` already,\n  // so the waterfall problem doesn't happen.\n  const { data: user } = useSWR('/api/user', fetcher, { suspense: true });\n  const { data: movies } = useSWR('/api/movies', fetcher, { suspense: true });\n  return (\n    <div>\n      <User user={user} />\n      <Movies movies={movies} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering with Default Data using SWR and Next.js getStaticProps\nDESCRIPTION: Shows how to use SWR with Next.js getStaticProps for pre-rendering pages with default data. This approach combines SEO benefits of pre-rendering with SWR's client-side features.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps () {\n  // `getStaticProps` is executed on the server side.\n  const article = await getArticleFromAPI()\n  return {\n    props: {\n      fallback: {\n        '/api/article': article\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // `data` will always be available as it's in `fallback`.\n  const { data } = useSWR('/api/article', fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  // SWR hooks inside the `SWRConfig` boundary will use those values.\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Data Fetching with SWR in JavaScript\nDESCRIPTION: Implementation of SWR for GraphQL queries using the graphql-request library. The fetcher function sends the GraphQL query to the specified endpoint and returns the response data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { request } from 'graphql-request'\n\nconst fetcher = query => request('/api/graphql', query)\n\nfunction App () {\n  const { data, error } = useSWR(\n    `{\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }`,\n    fetcher\n  )\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fetcher Function for SWR\nDESCRIPTION: Defines a simple fetcher function using the native fetch API to be used with SWR for JSON data fetching.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst fetcher = (...args) => fetch(...args).then(res => res.json())\n```\n\n----------------------------------------\n\nTITLE: Correct Approach for Multiple Arguments with useSWR using Array\nDESCRIPTION: Shows the correct way to pass multiple arguments to the fetcher function using an array as the key parameter. This ensures the cache key is associated with all arguments.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = useSWR(['/api/user', token], ([url, token]) => fetchWithToken(url, token))\n```\n\n----------------------------------------\n\nTITLE: Dependent Data Fetching with SWR in JavaScript\nDESCRIPTION: This snippet shows how to fetch data that depends on other data using SWR. It demonstrates a scenario where project data is fetched only after user data is available, avoiding waterfalls while allowing serial fetching when necessary.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/conditional-fetching.ja.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyProjects () {\n  const { data: user } = useSWR('/api/user')\n  const { data: projects } = useSWR(() => '/api/projects?uid=' + user.id)\n  // 関数を渡す場合、SWRは返り値を`key`として使用します。\n  // 関数がスローまたはfalsyな値を返す場合、\n  // SWRはいくつかの依存関係が準備できてないことを知ることができます。\n  // この例では、`user.id`は`user`がロードされてない時にスローします。\n\n  if (!projects) return 'loading...'\n  return 'You have ' + projects.length + ' projects'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cache After Mutation with SWR in React\nDESCRIPTION: Shows how to update the SWR cache with the response from a mutation request, eliminating the need for an additional request to load updated data. This example uses the populateCache option with mutate.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst updateTodo = () => fetch('/api/todos/1', {\n  method: 'PATCH',\n  body: JSON.stringify({ completed: true })\n})\n\nmutate('/api/todos', updateTodo, {\n  populateCache: (updatedTodo, todos) => {\n   // 过滤列表并返回更新后的待办项\n    const filteredTodos = todos.filter(todo => todo.id !== '1')\n    return [...filteredTodos, updatedTodo]\n  },\n\n  // 因为 API 已经给了我们更新后的数据，所以我们不需要重新请求验证它。\n  revalidate: false\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Data Fetching with SWR using graphql-request in JavaScript\nDESCRIPTION: Shows how to use SWR with GraphQL and the graphql-request library. The fetcher function sends a GraphQL query to the specified endpoint using the request function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { request } from 'graphql-request'\n\nconst fetcher = query => request('/api/graphql', query)\n\nfunction App () {\n  const { data, error } = useSWR(\n    `{\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }`,\n    fetcher\n  )\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with useSWR in React\nDESCRIPTION: This snippet demonstrates how to use useSWR for basic pagination in a React component. It includes state management for the page index and fetches data based on the current page.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const [pageIndex, setPageIndex] = useState(0);\n\n  // The API URL includes the page index, which is a React state.\n  const { data } = useSWR(`/api/data?page=${pageIndex}`, fetcher);\n\n  // ... handle loading and error states\n\n  return <div>\n    {data.map(item => <div key={item.id}>{item.name}</div>)}\n    <button onClick={() => setPageIndex(pageIndex - 1)}>Previous</button>\n    <button onClick={() => setPageIndex(pageIndex + 1)}>Next</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRInfinite for Infinite Loading in React\nDESCRIPTION: This example shows how to use the useSWRInfinite hook for implementing infinite loading. It includes a getKey function for generating request keys and handling the end of data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst getKey = (pageIndex, previousPageData) => {\n  if (previousPageData && !previousPageData.length) return null // reached the end\n  return `/users?page=${pageIndex}&limit=10`                    // SWR key\n}\n\nfunction App () {\n  const { data, size, setSize } = useSWRInfinite(getKey, fetcher)\n  if (!data) return 'loading'\n\n  // We can now calculate the number of all users\n  let totalUsers = 0\n  for (let i = 0; i < data.length; i++) {\n    totalUsers += data[i].length\n  }\n\n  return <div>\n    <p>{totalUsers} users listed</p>\n    {data.map((users, index) => {\n      // `data` is an array of each page's API response.\n      return users.map(user => <div key={user.id}>{user.name}</div>)\n    })}\n    <button onClick={() => setSize(size + 1)}>Load More</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRMutation for Remote Data Mutations in React\nDESCRIPTION: Demonstrates how to use the new useSWRMutation hook to handle remote data mutations in a declarative way, with a button that triggers a POST request to create a user when clicked.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nasync function sendRequest(url, { arg }) {\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(arg)\n  })\n}\n\nfunction App() {\n  const { trigger, isMutating } = useSWRMutation('/api/user', sendRequest)\n\n  return (\n    <button\n      disabled={isMutating}\n      onClick={() => trigger({ username: 'johndoe' })}\n    >{\n      isMutating ? 'Criando...' : 'Criar usuário'\n    }</button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic UI with SWR Mutations\nDESCRIPTION: This example shows how to use the optimisticData option to immediately update the UI before the server responds. It adds a new item to a todo list and displays it optimistically while the actual request is being processed.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('New Item'), {\n      optimisticData: [...data, 'New Item'],\n    })\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSWR with Fetcher Functions\nDESCRIPTION: Shows three equivalent ways to pass a single argument to the fetcher function in SWR. By default, the key parameter is passed to the fetcher function as an argument.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', () => fetcher('/api/user'))\nuseSWR('/api/user', url => fetcher(url))\nuseSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useSWRMutation in React\nDESCRIPTION: Demonstrates how to implement optimistic updates using useSWRMutation in a React component, including error handling and rollback.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ko.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nfunction Profile () {\n  const { trigger } = useSWRMutation('/api/user', updateUserName)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n\n        trigger(newName, {\n          optimisticData: user => ({ ...user, name: newName }),\n          rollbackOnError: true\n        })\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware for SWR in JavaScript\nDESCRIPTION: Demonstrates how to create a custom middleware function for SWR. The middleware wraps the SWR hook and allows execution of logic before and after the hook runs.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction myMiddleware (useSWRNext) {\n  return (key, fetcher, config) => {\n    // Before hook runs...\n\n    // Handle the next middleware, or the `useSWR` hook if this is the last one.\n    const swr = useSWRNext(key, fetcher, config)\n\n    // After hook runs...\n    return swr\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Usage with useSWR\nDESCRIPTION: Examples of automatic type inference with useSWR hook using different key types and fetcher patterns.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// `key` is inferred to be `string`\nuseSWR('/api/user', key => {})\nuseSWR(() => '/api/user', key => {})\n\n// `key` will be inferred as { a: string; b: { c: string; d: number } }\nuseSWR({ a: '1', b: { c: '3', d: 2 } }, key => {})\nuseSWR(() => ({ a: '1', b: { c: '3', d: 2 } }), key => {})\n\n// `arg0` will be inferred as string.  `arg1` will be inferred as number\nuseSWR(['user', 8], ([arg0, arg1]) => {})\nuseSWR(() => ['user', 8], ([arg0, arg1]) => {})\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Search with SWR and keepPreviousData in React\nDESCRIPTION: This code snippet shows how to create a search component using SWR with the keepPreviousData option. It demonstrates how to maintain previous search results while loading new data, improving the user experience during continuous user actions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Fetching in SWR with JavaScript\nDESCRIPTION: This code demonstrates three ways to implement conditional data fetching using SWR: using null as a key when a condition is false, returning a falsy value from a key function, or allowing a function to throw an error when dependencies aren't available.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/conditional-fetching.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// fetch condicional\nconst { data } = useSWR(shouldFetch ? '/api/data' : null, fetcher)\n\n// ...or retornar um valor falsy\nconst { data } = useSWR(() => shouldFetch ? '/api/data' : null, fetcher)\n\n// ...or lançar um erro quando user.id não está definido\nconst { data } = useSWR(() => '/api/data?uid=' + user.id, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Updating Cache After Mutation with useSWRMutation in SWR\nDESCRIPTION: This snippet demonstrates how to use the populateCache option with useSWRMutation to update the cache with the response of the mutation. It provides an alternative approach to the previous example using mutate.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWRMutation('/api/todos', updateTodo, {\n  populateCache: (updatedTodo, todos) => {\n    // filter the list, and return it with the updated item\n    const filteredTodos = todos.filter(todo => todo.id !== '1')\n    return [...filteredTodos, updatedTodo]\n  },\n  // Since the API already gives us the updated information,\n  // we don't need to revalidate here.\n  revalidate: false\n})\n```\n\n----------------------------------------\n\nTITLE: Dependency Chain with Multiple useSWR Hooks\nDESCRIPTION: Demonstrates how to create a dependency chain between multiple useSWR hooks, where the second hook depends on data from the first hook. The second hook only executes when user data is available.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = useSWR(['/api/user', token], fetchWithToken)\n\n// ...and then pass it as an argument to another useSWR hook\nconst { data: orders } = useSWR(user ? ['/api/orders', user] : null, fetchWithUser)\n```\n\n----------------------------------------\n\nTITLE: Using useSWRMutation Hook in React\nDESCRIPTION: Demonstrates how to use the new useSWRMutation hook for declarative data mutations. It shows setting up a mutation and triggering it on button click.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nasync function sendRequest(url, { arg }) {\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(arg)\n  })\n}\n\nfunction App() {\n  const { trigger, isMutating } = useSWRMutation('/api/user', sendRequest)\n\n  return (\n    <button\n      disabled={isMutating}\n      onClick={() => trigger({ username: 'johndoe' })}\n    >{\n      isMutating ? 'Creating...' : 'Create User'\n    }</button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Specification with useSWR\nDESCRIPTION: Demonstration of explicitly specifying types for fetcher and error handling with useSWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Fetcher } from 'swr'\n\nconst uid = '<user_id>'\nconst fetcher: Fetcher<User, string> = (id) => getUserById(id)\n\nconst { data } = useSWR(uid, fetcher)\n// `data` will be `User | undefined`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Interval Revalidation in SWR\nDESCRIPTION: This snippet demonstrates how to enable automatic revalidation at regular intervals using the refreshInterval option in SWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/revalidation.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/todos', fetcher, { refreshInterval: 1000 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Stock Display with SWR in React\nDESCRIPTION: This snippet demonstrates how to use SWR to fetch and display stock data with loading and validating states. It uses the isLoading and isValidating flags to show appropriate UI elements.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Stock() {\n  const { data, isLoading, isValidating } = useSWR(STOCK_API, fetcher, {\n    refreshInterval: 3000\n  });\n\n  // If it's still loading the initial data, there is nothing to display.\n  // We return a skeleton here.\n  if (isLoading) return <div className=\"skeleton\" />;\n\n  // Otherwise, display the data and a spinner that indicates a background\n  // revalidation.\n  return (\n    <>\n      <div>${data}</div>\n      {isValidating ? <div className=\"spinner\" /> : null}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Global Error Reporting with SWRConfig\nDESCRIPTION: Implementing global error handling at the application level using SWRConfig's onError option, which can be used for centralized error reporting to services like Sentry or displaying UI notifications.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  onError: (error, key) => {\n    if (error.status !== 403 && error.status !== 404) {\n      // Podemos enviar el error a Sentry\n      // o mostrarlo una notificación UI.\n    }\n  }\n}}>\n  <MyApp />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Suspense Implementation in React\nDESCRIPTION: Shows how to enable Suspense mode in SWR by setting the suspense option to true. Demonstrates basic usage with a Profile component wrapped in React Suspense.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/suspense.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport useSWR from 'swr'\n\nfunction Profile () {\n  const { data } = useSWR('/api/user', fetcher, { suspense: true })\n  return <div>hello, {data.name}</div>\n}\n\nfunction App () {\n  return (\n    <Suspense fallback={<div>loading...</div>}>\n      <Profile/>\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Retry Configuration in SWR\nDESCRIPTION: This example demonstrates how to customize the error retry behavior in SWR. It shows how to implement a custom onErrorRetry function that controls when and how to retry failed requests based on various conditions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', fetcher, {\n  onErrorRetry: (error, key, config, revalidate, { retryCount }) => {\n    // Never retry on 404.\n    if (error.status === 404) return\n\n    // Never retry for a specific key.\n    if (key === '/api/user') return\n\n    // Only retry up to 10 times.\n    if (retryCount >= 10) return\n\n    // Retry after 5 seconds.\n    setTimeout(() => revalidate({ retryCount }), 5000)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Mutating Data Based on Current Cache in SWR\nDESCRIPTION: This snippet shows how to use SWR's mutate function with an async function that receives the current cached value and returns updated data, allowing for mutations based on current data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nmutate('/api/todos', async todos => {\n  // let's update the todo with ID `1` to be completed,\n  // this API returns the updated data\n  const updatedTodo = await fetch('/api/todos/1', {\n    method: 'PATCH',\n    body: JSON.stringify({ completed: true })\n  })\n\n  // filter the list, and return it with the updated item\n  const filteredTodos = todos.filter(todo => todo.id !== '1')\n  return [...filteredTodos, updatedTodo]\n// Since the API already gives us the updated information,\n// we don't need to revalidate here.\n}, { revalidate: false })\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useSWRMutation in React\nDESCRIPTION: This snippet demonstrates how to achieve optimistic updates using the useSWRMutation hook and trigger function. It provides an alternative approach to the previous examples using useSWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nfunction Profile () {\n  const { trigger } = useSWRMutation('/api/user', updateUserName)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n\n        trigger(newName, {\n          optimisticData: user => ({ ...user, name: newName }),\n          rollbackOnError: true\n        })\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling with Status Codes in JavaScript\nDESCRIPTION: This code snippet shows how to create a custom fetcher function that handles non-2xx status codes as errors. It attaches additional information to the error object, including the response JSON and status code.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetcher = async url => {\n  const res = await fetch(url)\n\n  // If the status code is not in the range 200-299,\n  // we still try to parse and throw it.\n  if (!res.ok) {\n    const error = new Error('An error occurred while fetching the data.')\n    // Attach extra info to the error object.\n    error.info = await res.json()\n    error.status = res.status\n    throw error\n  }\n\n  return res.json()\n}\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n// error.info === {\n//   message: \"You are not authorized to access this resource.\",\n//   documentation_url: \"...\"\n// }\n// error.status === 403\n```\n\n----------------------------------------\n\nTITLE: Mutating Multiple Keys with SWR\nDESCRIPTION: This code shows how to use the global mutate API to update multiple resources at once using a filter function. It demonstrates both single resource mutation and conditional mutation of multiple resources based on a key pattern.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mutate } from 'swr'\n// Or from the hook if you have customized your cache provider:\n// { mutate } = useSWRConfig()\n\n// Mutate single resource\nmutate(key)\n\n// Mutate multiple resources and clear the cache (set to undefined)\nmutate(\n  key => typeof key === 'string' && key.startsWith('/api/item?id='),\n  undefined,\n  { revalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Fetching with useSWRInfinite in React\nDESCRIPTION: Demonstrates how to enable parallel data fetching for multiple pages using the parallel option in useSWRInfinite. When enabled, pages are fetched independently rather than sequentially, improving load times for non-interdependent data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst getKey = (pageIndex, previousPageData) => {\n  return `/users?page=${pageIndex}&limit=10`\n}\n\nfunction App () {\n  const { data } = useSWRInfinite(getKey, fetcher, { parallel: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized React Component Using Only SWR Data State\nDESCRIPTION: This snippet demonstrates how SWR optimizes rendering by only updating the states used in the component. By using only the 'data' state, the component reduces the number of re-renders, improving performance.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n   const { data } = useSWR('/api', fetcher)\n   console.log(data)\n   return null\n}\n```\n\n----------------------------------------\n\nTITLE: Populating Cache with Server Response in SWR Mutations\nDESCRIPTION: This code demonstrates how to use the populateCache option to update the local cache with the response from the mutation request, eliminating the need for an additional fetch request to get the latest data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('New Item'), {\n      optimisticData: [...data, 'New Item'],\n      populateCache: true,\n    })\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Rollback with Optimistic Updates in SWR\nDESCRIPTION: Example demonstrating how to use the rollbackOnError option to revert optimistic updates when a mutation fails, providing fallback behavior for error cases.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('New Item'), {\n      optimisticData: [...data, 'New Item'],\n      populateCache: true,\n      revalidate: false,\n      rollbackOnError: true,\n    })\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with keepPreviousData in React SWR\nDESCRIPTION: Example showing how to use the keepPreviousData option in SWR to maintain previous search results while fetching new data, improving user experience during live search operations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  })\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR for Data Fetching in React Components\nDESCRIPTION: Refactored example using SWR for data fetching, demonstrating how components can independently fetch data when needed, while benefiting from SWR's automatic deduplication and caching.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.es-ES.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// componente de la página\n\nfunction Page ({ userId }) {\n  return <div>\n    <Navbar userId={userId} />\n    <Content userId={userId} />\n  </div>\n}\n\n// componentes hijos\n\nfunction Navbar ({ userId }) {\n  return <div>\n    ...\n    <Avatar userId={userId} />\n  </div>\n}\n\nfunction Content ({ userId }) {\n  const { user, isLoading } = useUser(userId)\n  if (isLoading) return <Spinner />\n  return <h1>Welcome back, {user.name}</h1>\n}\n\nfunction Avatar ({ userId }) {\n  const { user, isLoading } = useUser(userId)\n  if (isLoading) return <Spinner />\n  return <img src={user.avatar} alt={user.name} />\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Interval Revalidation in SWR\nDESCRIPTION: This snippet demonstrates how to enable automatic revalidation at regular intervals using the refreshInterval option in SWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/revalidation.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/todos', fetcher, { refreshInterval: 1000 })\n```\n\n----------------------------------------\n\nTITLE: Updating Cache After Mutation with SWR in React\nDESCRIPTION: This example shows how to use the 'populateCache' option with SWR's mutate function to update the cache directly after a mutation, avoiding an extra fetch request.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst updateTodo = () => fetch('/api/todos/1', {\n  method: 'PATCH',\n  body: JSON.stringify({ completed: true })\n})\n\nmutate('/api/todos', updateTodo, {\n  populateCache: (updatedTodo, todos) => {\n    // filter the list, and return it with the updated item\n    const filteredTodos = todos.filter(todo => todo.id !== '1')\n    return [...filteredTodos, updatedTodo]\n  },\n  // Since the API already gives us the updated information,\n  // we don't need to revalidate here.\n  revalidate: false\n})\n```\n\n----------------------------------------\n\nTITLE: Optimistic UI Updates with SWR's optimisticData Option\nDESCRIPTION: Demonstrates how to implement optimistic UI updates with SWR by immediately showing the updated data before the server responds, using the optimisticData option.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Exibir dados */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('Novo Item'), {\n      optimisticData: [...data, 'Novo Item'],\n    })\n  }}>\n    Adicionar novo item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic UI with SWR Mutation\nDESCRIPTION: Shows how to use the new optimisticData, populateCache, revalidate, and rollbackOnError options for implementing optimistic UI updates during mutations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('New Item'), {\n      optimisticData: [...data, 'New Item'],\n      populateCache: true,\n      revalidate: false,\n      rollbackOnError: true,\n    })\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using SWR in Next.js Client Components\nDESCRIPTION: Demonstrates how to use SWR in a Next.js Client Component by adding the 'use client' directive and importing useSWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport useSWR from 'swr'\nexport default function Page() {\n  const { data } = useSWR('/api/user', fetcher)\n  return <h1>{data.name}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Configuration with useSWRConfig Hook\nDESCRIPTION: Demonstrates how to use the useSWRConfig hook to access global configuration values, mutate function, and cache within a component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Component () {\n  const { refreshInterval, mutate, cache, ...restConfig } = useSWRConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR Provider in Next.js App Router Server Component\nDESCRIPTION: Demonstrates how to use the SWR provider client component in a server component page within the Next.js App Router.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// This is still a server component\nimport { SWRProvider } from './swr-provider'\nexport default function Page() {\n  return (\n    <SWRProvider>\n      <h1>hello SWR</h1>\n    </SWRProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Next Page with useSWR in React\nDESCRIPTION: This snippet demonstrates how to preload the next page of data by rendering it in a hidden div. This improves user experience by having the next page's data ready when needed.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const [pageIndex, setPageIndex] = useState(0);\n\n  return <div>\n    <Page index={pageIndex}/>\n    <div style={{ display: 'none' }}><Page index={pageIndex + 1}/></div>\n    <button onClick={() => setPageIndex(pageIndex - 1)}>Previous</button>\n    <button onClick={() => setPageIndex(pageIndex + 1)}>Next</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useSWR in React\nDESCRIPTION: This snippet demonstrates how to perform optimistic updates using useSWR and useSWRConfig hooks. It updates local data immediately while sending a request to update remote data, with options for rollback on error.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction Profile () {\n  const { mutate } = useSWRConfig()\n  const { data } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>Mon nom est {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        const user = { ...data, name: newName }\n        const options = {\n          optimisticData: user,\n          rollbackOnError(error) {\n            // Si c'est une erreur d'abandon de délai, ne pas revenir en arrière\n            return error.name !== 'AbortError'\n          },\n        }\n\n        // met à jour les données locales immédiatement\n        // envoie une requête pour mettre à jour les données\n        // déclange un revalidation (refetch) pour s'assurer que nos données locales sont correctes\n        mutate('/api/user', updateFn(user), options);\n      }}>Mettre mon nom en majuscule!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Programmatic Prefetching\nDESCRIPTION: Demonstrates how to programmatically prefetch data using SWR's preload API before component rendering to prevent waterfalls.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport useSWR, { preload } from 'swr'\n\nconst fetcher = (url) => fetch(url).then((res) => res.json())\n\n// Preload the resource before rendering the User component below,\n// this prevents potential waterfalls in your application.\n// You can also start preloading when hovering the button or link, too.\npreload('/api/user', fetcher)\n\nfunction User() {\n  const { data } = useSWR('/api/user', fetcher)\n  ...\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false)\n  return (\n    <div>\n      <button onClick={() => setShow(true)}>Show User</button>\n      {show ? <User /> : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Prefetching Data in React Effects and Event Handlers with SWR\nDESCRIPTION: This snippet illustrates how to use the preload function from SWR within React effects and event handlers. It shows preloading in useEffect and on button hover.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App({ userId }) {\n  const [show, setShow] = useState(false)\n\n  // preload in effects\n  useEffect(() => {\n    preload('/api/user?id=' + userId, fetcher)\n  }, [userId])\n\n  return (\n    <div>\n      <button\n        onClick={() => setShow(true)}\n        {/* preload in event callbacks */}\n        onHover={() => preload('/api/user?id=' + userId, fetcher)}\n      >\n        Show User\n      </button>\n      {show ? <User /> : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Real-time Subscription Example\nDESCRIPTION: Implementation example showing how to use useSWRSubscription with Firebase Realtime Database.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\n\nfunction Post({ id }) {\n  const { data } = useSWRSubscription(['views', id], ([_, postId], { next }) => {\n    const ref = firebase.database().ref('views/' + postId)\n    ref.on('value',\n      snapshot => next(null, snapshot.data()),\n      err => next(err)\n    )\n    return () => ref.off()\n  })\n\n  return <span>Your post has {data} views!</span>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Middleware Usage in React Components\nDESCRIPTION: Shows how to apply middleware to SWR hooks, either globally using SWRConfig or individually for specific useSWR calls.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ use: [myMiddleware] }}>\n\n// or...\n\nuseSWR(key, fetcher, { use: [myMiddleware] })\n```\n\n----------------------------------------\n\nTITLE: Preloading Data with SWR\nDESCRIPTION: Shows how to improve user experience by preloading data that will be used later in the application using SWR's preload API, which starts fetching data before components render.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { preload } from 'swr'\n\nconst fetcher = (url) => fetch(url).then((res) => res.json())\n\n// Você pode chamar a função preload em qualquer lugar\npreload('/api/user', fetcher)\n\nfunction Profile() {\n  // O componente que realmente usa os dados:\n  const { data, error } = useSWR('/api/user', fetcher)\n  // ...\n}\n\nexport function Page () {\n  return <Profile/>\n}\n```\n\n----------------------------------------\n\nTITLE: Event-Based SWR Prefetching\nDESCRIPTION: Shows how to implement SWR prefetching within React effects and event handlers for optimized data loading.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App({ userId }) {\n  const [show, setShow] = useState(false)\n\n  // preload in effects\n  useEffect(() => {\n    preload('/api/user?id=' + userId, fetcher)\n  }, [userId])\n\n  return (\n    <div>\n      <button\n        onClick={() => setShow(true)}\n        {/* preload in event callbacks */}\n        onHover={() => preload('/api/user?id=' + userId, fetcher)}\n      >\n        Show User\n      </button>\n      {show ? <User /> : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with SWR in React\nDESCRIPTION: This snippet demonstrates how to use the 'optimisticData' and 'rollbackOnError' options with SWR's mutate function to implement optimistic updates in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction Profile () {\n  const { mutate } = useSWRConfig()\n  const { data } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        const user = { ...data, name: newName }\n        const options = {\n          optimisticData: user,\n          rollbackOnError(error) {\n            // If it's timeout abort error, don't rollback\n            return error.name !== 'AbortError'\n          },\n        }\n\n        // updates the local data immediately\n        // send a request to update the data\n        // triggers a revalidation (refetch) to make sure our local data is correct\n        mutate('/api/user', updateFn(user), options);\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic SWR Cache Provider with Map\nDESCRIPTION: Example of setting up a basic SWR cache provider using JavaScript's Map object. The provider is passed to SWRConfig to be used by all SWR hooks within its boundary.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { SWRConfig } from 'swr'\n\nfunction App() {\n  return (\n    <SWRConfig value={{ provider: () => new Map() }}>\n      <Page/>\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Error Boundary Implementation with SWR Suspense\nDESCRIPTION: Demonstrates how to handle errors in SWR Suspense mode using React Error Boundary component alongside Suspense.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/suspense.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorBoundary fallback={<h2>Could not fetch posts.</h2>}>\n  <Suspense fallback={<h1>Loading posts...</h1>}>\n    <Profile />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Populating Cache with Server Response in SWR\nDESCRIPTION: Example demonstrating how to use the populateCache option to update the local data with the server response from a mutation, eliminating the need for an additional fetch.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('New Item'), {\n      optimisticData: [...data, 'New Item'],\n      populateCache: true,\n    })\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering with SWR and Next.js getStaticProps\nDESCRIPTION: Shows how to use SWR with Next.js getStaticProps for pre-rendering, passing pre-fetched data as initial values for SWR hooks.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.pt-BR.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps () {\n  // `getStaticProps` é executado no lado do servidor.\n  const article = await getArticleFromAPI()\n  return {\n    props: {\n      fallback: {\n        '/api/article': article\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // `data` estará sempre disponível, pois está em `fallback`.\n  const { data } = useSWR('/api/article', fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  // Hooks SWR dentro do limites do `SWRConfig` usarão esses valores.\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generics with SWR in TypeScript\nDESCRIPTION: Demonstrates how to use generics to specify the type of 'data' in SWR. It shows two approaches: using a typed fetcher and explicitly specifying the data type.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 🔹 A. Use a typed fetcher:\n// `getUser` is `(endpoint: string) => User`.\nconst { data } = useSWR('/api/user', getUser)\n\n// 🔹 B. Specify the data type:\n// `fetcher` is generally returning `any`.\nconst { data } = useSWR<User>('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Mutating Multiple Items with Filter Function in SWR\nDESCRIPTION: This example demonstrates how to use the global mutate API with a filter function to revalidate multiple keys. It shows how to match keys based on string patterns or array structures.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mutate } from 'swr'\n// Or from the hook if you customized the cache provider:\n// { mutate } = useSWRConfig()\n\nmutate(\n  key => typeof key === 'string' && key.startsWith('/api/item?id='),\n  undefined,\n  { revalidate: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Optimistic Updates with useSWRMutation in React\nDESCRIPTION: Shows how to implement optimistic updates using the useSWRMutation hook with optimisticData and rollbackOnError options in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ja.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nfunction Profile () {\n  const { trigger } = useSWRMutation('/api/user', updateUserName)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n\n        trigger(newName, {\n          optimisticData: user => ({ ...user, name: newName }),\n          rollbackOnError: true\n        })\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Multiple Items with SWR's Global Mutate API in React\nDESCRIPTION: This snippet demonstrates how to use SWR's global mutate API to update multiple cache items based on a filter function. It shows examples of filtering by key prefix and array structure.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mutate } from 'swr'\n// 如果你自定义了缓存 provider，也可以从 hook 上获取。\n// { mutate } = useSWRConfig()\n\nmutate(\n  key => typeof key === 'string' && key.startsWith('/api/item?id='),\n  undefined,\n  { revalidate: true }\n)\n```\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWR(['item', 123], ...)\nuseSWR(['item', 124], ...)\nuseSWR(['item', 125], ...)\n\nmutate(\n  key => Array.isArray(key) && key[0] === 'item',\n  undefined,\n  { revalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with SWR and keepPreviousData in React\nDESCRIPTION: This snippet shows how to implement a search functionality using SWR with the keepPreviousData option. It demonstrates handling user input, fetching search results, and displaying products while maintaining previous data for better UX.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Middleware in React\nDESCRIPTION: Shows how to use the new middleware feature in SWR for building and reusing abstractions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ use: [...middleware] }}>\n\n// ... or directly in `useSWR`:\nuseSWR(key, fetcher, { use: [...middleware] })\n```\n\n----------------------------------------\n\nTITLE: Implementing Stock Display with Loading States in React using SWR\nDESCRIPTION: This snippet demonstrates how to use SWR's isLoading and isValidating states to improve user experience when fetching stock data. It shows a skeleton loader during initial load and a spinner during revalidation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.ko.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Stock() {\n  const { data, isLoading, isValidating } = useSWR(STOCK_API, fetcher, {\n    refreshInterval: 3000\n  });\n\n  // 여전히 초기 데이터를 로드하는 중이라면 표시할 내용이 없습니다.\n  // 여기서 스켈레톤을 반환합니다.\n  if (isLoading) return <div className=\"skeleton\" />;\n\n  // 그렇지 않으면 데이터와 배경을 나타내는 스피너를 표시합니다.\n  // 재검증합니다.\n  return (\n    <>\n      <div>${data}</div>\n      {isValidating ? <div className=\"spinner\" /> : null}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR with Fetch API in JavaScript\nDESCRIPTION: Example of using SWR with the fetch API via the unfetch polyfill. The fetcher function fetches from the provided URL and converts the response to JSON format before returning the data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from 'unfetch'\n\nconst fetcher = url => fetch(url).then(r => r.json())\n\nfunction App () {\n  const { data, error } = useSWR('/api/data', fetcher)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing User Data Between Multiple useSWR Hooks\nDESCRIPTION: Shows how to use data from one useSWR hook as an argument for another hook. The second hook only fetches when user data is available (conditional fetching).\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.pt-BR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = useSWR(['/api/user', token], fetchWithToken)\n\n// ...e então passá-lo como argumento para outro hook useSWR\nconst { data: orders } = useSWR(user ? ['/api/orders', user] : null, fetchWithUser)\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useSWRMutation in React\nDESCRIPTION: This snippet demonstrates how to use the 'useSWRMutation' hook to implement optimistic updates in a React component, providing an alternative to the standard SWR mutate function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nfunction Profile () {\n  const { trigger } = useSWRMutation('/api/user', updateUserName)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n\n        trigger(newName, {\n          optimisticData: user => ({ ...user, name: newName }),\n          rollbackOnError: true\n        })\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor-Based Pagination with useSWRInfinite\nDESCRIPTION: This snippet demonstrates how to use useSWRInfinite with a cursor-based API. The getKey function is adapted to handle cursor-based pagination, including the initial request and subsequent requests with cursors.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst getKey = (pageIndex, previousPageData) => {\n  // reached the end\n  if (previousPageData && !previousPageData.data) return null\n\n  // first page, we don't have `previousPageData`\n  if (pageIndex === 0) return `/users?limit=10`\n\n  // add the cursor to the API endpoint\n  return `/users?cursor=${previousPageData.nextCursor}&limit=10`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Data Fetching with SWR in JavaScript\nDESCRIPTION: This snippet demonstrates different approaches to conditionally fetch data using SWR. It shows how to use null values as keys, return falsy values from key functions, or throw errors to prevent fetching when conditions aren't met.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/conditional-fetching.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// conditionally fetch\nconst { data } = useSWR(shouldFetch ? '/api/data' : null, fetcher)\n\n// ...o devuelve un falsy value\nconst { data } = useSWR(() => shouldFetch ? '/api/data' : null, fetcher)\n\n// ...o lanza un error cuando user.id no está definifo\nconst { data } = useSWR(() => '/api/data?uid=' + user.id, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Implementing Stock Data Display with SWR in React\nDESCRIPTION: This snippet demonstrates how to use SWR to fetch and display stock data with a refreshing interval. It utilizes isLoading and isValidating states to show appropriate loading indicators.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Stock() {\n  const { data, isLoading, isValidating } = useSWR(STOCK_API, fetcher, {\n    refreshInterval: 3000\n  });\n\n  // If it's still loading the initial data, there is nothing to display.\n  // We return a skeleton here.\n  if (isLoading) return <div className=\"skeleton\" />;\n\n  // Otherwise, display the data and a spinner that indicates a background\n  // revalidation.\n  return (\n    <>\n      <div>${data}</div>\n      {isValidating ? <div className=\"spinner\" /> : null}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Logger Middleware for SWR\nDESCRIPTION: A middleware example that logs all SWR requests to the console by extending the original fetcher function to include logging functionality before making the actual request.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction logger(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Add logger to the original fetcher.\n    const extendedFetcher = (...args) => {\n      console.log('SWR Request:', key)\n      return fetcher(...args)\n    }\n\n    // Execute the hook with the new fetcher.\n    return useSWRNext(key, extendedFetcher, config)\n  }\n}\n\n// ... inside your component\nuseSWR(key, fetcher, { use: [logger] })\n```\n\n----------------------------------------\n\nTITLE: Mutating Multiple Items with SWR in JavaScript\nDESCRIPTION: This example demonstrates how to mutate multiple items using a filter function with the global mutate API. It shows how to revalidate or clear cache for multiple keys based on different conditions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.fr-FR.mdx#2025-04-19_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { mutate } from 'swr'\n// Ou depuis le hook si vous avez personnalisé le fournisseur de cache :\n// { mutate } = useSWRConfig()\n\nmutate(\n  key => typeof key === 'string' && key.startsWith('/api/item?id='),\n  undefined,\n  { revalidate: true }\n)\n\n// ...\n\nconst clearCache = () => mutate(\n  () => true,\n  undefined,\n  { revalidate: false }\n)\n\n// ...nettoyer le cache à la déconnexion\nclearCache()\n```\n\n----------------------------------------\n\nTITLE: Nested Object Configuration in SWRConfig\nDESCRIPTION: Shows how nested SWRConfig components merge configurations. Primitive values from the inner component override parent values, while mergeable objects like fallback are combined.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SWRConfig, useSWRConfig } from 'swr'\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{\n        dedupingInterval: 100,\n        refreshInterval: 100,\n        fallback: { a: 1, b: 1 },\n      }}\n    >\n      <SWRConfig\n        value={{\n          dedupingInterval: 200, // will override the parent value since the value is primitive\n          fallback: { a: 2, c: 2 }, // will merge with the parent value since the value is a mergeable object\n        }}\n      >\n        <Page />\n      </SWRConfig>\n    </SWRConfig>\n  )\n}\n\nfunction Page() {\n  const config = useSWRConfig()\n  // {\n  //   dedupingInterval: 200,\n  //   refreshInterval: 100,\n  //   fallback: { a: 2,  b: 1, c: 2 },\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRSubscription with WebSocket in React\nDESCRIPTION: This example shows how to use the useSWRSubscription hook to subscribe to a WebSocket data source in a React component. It demonstrates setting up the WebSocket connection, handling messages and errors, and cleaning up the connection.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.zh-CN.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\n\nfunction App() {\n  const { data, error } = useSWRSubscription('ws://...', (key, { next }) => {\n    const socket = new WebSocket(key)\n    socket.addEventListener('message', (event) => next(null, event.data))\n    socket.addEventListener('error', (event) => next(event.error))\n    return () => socket.close()\n  })\n\n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n  return <div>hello {data}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent SWR Configuration with Combined Middleware\nDESCRIPTION: Shows the equivalent configuration when multiple middleware are combined from nested SWRConfig components and individual useSWR calls.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nuseSWR(key, fetcher, { use: [a, b, c] })\n```\n\n----------------------------------------\n\nTITLE: Passing Objects as Keys to useSWR\nDESCRIPTION: Shows how to pass an object directly as the key in useSWR. Since SWR 1.1.0, object-like keys are automatically serialized, and the fetcher receives the object as an argument.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: orders } = useSWR({ url: '/api/orders', args: user }, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Mutating Data Based on Current Values with SWR in React\nDESCRIPTION: This example shows how to update partial data based on the current cache value using SWR's mutate function. It updates a todo item's status to completed and filters the list accordingly.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nmutate('/api/todos', async todos => {\n  // 让我们将 ID 为 `1` 的待办事项更新为已完成\n  const updatedTodo = await fetch('/api/todos/1', {\n    method: 'PATCH',\n    body: JSON.stringify({ completed: true })\n  })\n\n  // 过滤列表并返回更新后的待办项\n  const filteredTodos = todos.filter(todo => todo.id !== '1')\n  return [...filteredTodos, updatedTodo]\n  // 因为 API 已经给了我们更新后的信息，所以我们不需要去重新验证它。\n}, { revalidate: false })\n```\n\n----------------------------------------\n\nTITLE: Mutating Data Based on Current Data with SWR in React\nDESCRIPTION: This snippet shows how to update data based on the current data using mutate. It demonstrates updating a todo item's completion status and filtering the list accordingly.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.fr-FR.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nmutate('/api/todos', async todos => {\n  // Mettons à jour le todo avec l'ID `1` pour qu'il soit terminé,\n  // L'API renvoie les données mises à jour\n  const updatedTodo = await fetch('/api/todos/1', {\n    method: 'PATCH',\n    body: JSON.stringify({ completed: true })\n  })\n\n  // filtre la liste, et la renvoie avec l'élément mis à jour\n  const filteredTodos = todos.filter(todo => todo.id !== '1')\n  return [...filteredTodos, updatedTodo]\n// Etant donné que l'API nous donne déjà les informations mises à jour,\n// on n'a plus besoin de revalider ici.\n}, { revalidate: false })\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling with SWR Fetcher\nDESCRIPTION: A simple example showing how to define a fetcher function that returns JSON data and how to access the error object if the fetch fails.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst fetcher = url => fetch(url).then(r => res.json())\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with ErrorBoundary in React Suspense and SWR\nDESCRIPTION: This code snippet shows how to handle errors when using SWR with React Suspense. It wraps the Suspense component with an ErrorBoundary to catch and display errors that may occur during data fetching.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/suspense.zh-CN.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorBoundary fallback={<h2>Could not fetch posts.</h2>}>\n  <Suspense fallback={<h1>Loading posts...</h1>}>\n    <Profile />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with useSWRInfinite\nDESCRIPTION: Demonstrates how to use TypeScript with the useSWRInfinite hook for infinite loading scenarios.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.ja.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SWRInfiniteKeyLoader } from 'swr/infinite'\n\nconst getKey: SWRInfiniteKeyLoader = (index, previousPageData) => {\n  // ...\n}\n\nconst { data } = useSWRInfinite(getKey, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Using useSWRMutation for Cache Updates in React\nDESCRIPTION: This snippet demonstrates how to use the 'useSWRMutation' hook with the 'populateCache' option to update the cache after a mutation in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWRMutation('/api/todos', updateTodo, {\n  populateCache: (updatedTodo, todos) => {\n    // filter the list, and return it with the updated item\n    const filteredTodos = todos.filter(todo => todo.id !== '1')\n    return [...filteredTodos, updatedTodo]\n  },\n  // Since the API already gives us the updated information,\n  // we don't need to revalidate here.\n  revalidate: false\n})\n```\n\n----------------------------------------\n\nTITLE: Using Bound Mutate with useSWR in React\nDESCRIPTION: Illustrates how to use the bound mutate function returned by useSWR to update data and trigger revalidation in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ko.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile () {\n  const { data, mutate } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        await requestUpdateUsername(newName)\n        mutate({ ...data, name: newName })\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Suspense Mode Prefetching\nDESCRIPTION: Shows how to use preload with React Suspense to prevent network request waterfalls.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.zh-CN.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { preload } from 'swr'\n\npreload('/api/user', fetcher);\npreload('/api/movies', fetcher);\n\nconst Page = () => {\n  const { data: user } = useSWR('/api/user', fetcher, { suspense: true });\n  const { data: movies } = useSWR('/api/movies', fetcher, { suspense: true });\n  return (\n    <div>\n      <User user={user} />\n      <Movies movies={movies} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Index-based Pagination with useSWRInfinite\nDESCRIPTION: Implementation of index-based pagination using useSWRInfinite hook, including cursor management and dynamic data loading with load more functionality.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.pt-BR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst getKey = (pageIndex, previousPageData) => {\n  if (previousPageData && !previousPageData.length) return null // atingiu o fim\n  return `/users?page=${pageIndex}&limit=10`                    // chave SWR\n}\n\nfunction App () {\n  const { data, size, setSize } = useSWRInfinite(getKey, fetcher)\n  if (!data) return 'loading'\n\n  // Agora podemos calcular o número total de usuários\n  let totalUsers = 0\n  for (let i = 0; i < data.length; i++) {\n    totalUsers += data[i].length\n  }\n\n  return <div>\n    <p>{totalUsers} users listed</p>\n    {data.map((users, index) => {\n      // `data` é um array de respostas da API de cada página.\n      return users.map(user => <div key={user.id}>{user.name}</div>)\n    })}\n    <button onClick={() => setSize(size + 1)}>Carregar mais</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using isLoading State in SWR for Initial Data Loading\nDESCRIPTION: Example showing how to use the new isLoading state from useSWR, which specifically indicates when the initial request is ongoing and no data is available yet, simplifying loading state handling.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, isLoading } = useSWR('/api/user', fetcher)\n\n  if (isLoading) return <div>loading...</div>\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Retry Behavior in SWR\nDESCRIPTION: Example of customizing the retry behavior when errors occur by implementing the onErrorRetry option with conditional logic based on status codes and retry counts.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nuseSWR('/api/user', fetcher, {\n  onErrorRetry: (error, key, config, revalidate, { retryCount }) => {\n    // Never retry on 404.\n    if (error.status === 404) return\n\n    // Never retry for a specific key.\n    if (key === '/api/user') return\n\n    // Only retry up to 10 times.\n    if (retryCount >= 10) return\n\n    // Retry after 5 seconds.\n    setTimeout(() => revalidate({ retryCount }), 5000)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Search with Previous Data in React using SWR\nDESCRIPTION: This code snippet shows how to implement a real-time search feature using SWR with the keepPreviousData option. It maintains the previous search results while loading new data, improving the user experience during continuous user interactions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.ko.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bound Mutate for Local Data Updates in React with SWR\nDESCRIPTION: Illustrates how to use the bound mutate function returned by useSWR for convenient local data updates. It includes an example of updating a user's name and revalidating the data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile () {\n  const { data, mutate } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        // 发送请求给 API 以更新数据\n        await requestUpdateUsername(newName)\n        // 立即更新并重新验证本地数据（重新请求）\n        // 注意： 当使用 useSWR 的 mutate 时，key 并不是必须的，因为它已经预先绑定了。\n        mutate({ ...data, name: newName })\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with useSWRSubscription\nDESCRIPTION: Shows how to use TypeScript with useSWRSubscription, including inline subscribe function with manual type specification and declaring a subscribe function using SWRSubscription type.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\nimport type { SWRSubscriptionOptions } from 'swr/subscription'\n\nconst { data, error } = useSWRSubscription('key', \n  (key, { next }: SWRSubscriptionOptions<number, Error>) => {\n  //^ key will be inferred as `string`\n  //....\n  })\n  return {\n    data,\n    //^ data will be inferred as `number | undefined`\n    error\n    //^ error will be inferred as `Error | undefined`\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\nimport type { SWRSubscription } from 'swr/subscription'\n\n/** \n * The first generic is Key\n * The second generic is Data\n * The Third generic is Error\n */\nconst sub: SWRSubscription<string, number, Error> = (key, { next }) => {                         \n  //......\n}\nconst { data, error } = useSWRSubscription('key', sub)\n```\n\n----------------------------------------\n\nTITLE: Implementing live search with SWR keepPreviousData option\nDESCRIPTION: This code shows how to use the new keepPreviousData option in SWR to maintain previous search results while fetching new data, improving user experience in live search functionality.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  })\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Pesquisar...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout with Revalidation\nDESCRIPTION: Shows how to implement logout functionality with cache revalidation using the mutate API.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction App () {\n  const { mutate } = useSWRConfig()\n\n  return (\n    <div>\n      <Profile />\n      <button onClick={() => {\n        // set the cookie as expired\n        document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;'\n\n        // tell all SWRs with this key to revalidate\n        mutate('/api/user')\n      }}>\n        Logout\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cache After Mutation with SWR in React\nDESCRIPTION: This example shows how to update the cache after a mutation using the populateCache option. It filters and updates a todo list without requiring an additional request to reload data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.fr-FR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst updateTodo = () => fetch('/api/todos/1', {\n  method: 'PATCH',\n  body: JSON.stringify({ completed: true })\n})\n\nmutate('/api/todos', updateTodo, {\n  populateCache: (updatedTodo, todos) => {\n    // filtre la liste et la renvoie avec l'élément mis à jour\n    const filteredTodos = todos.filter(todo => todo.id !== '1')\n    return [...filteredTodos, updatedTodo]\n  },\n  // Etant donné que l'API nous donne déjà les informations mises à jour,\n  // on peut ne pas revalider ici.\n  revalidate: false\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cache Provider with SWRConfig in React\nDESCRIPTION: This example demonstrates how to create a custom cache provider using a JavaScript Map and integrate it with SWRConfig in a React component. It shows the setup for providing a custom cache to all SWR hooks within the component tree.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { SWRConfig } from 'swr'\n\nfunction App() {\n  return (\n    <SWRConfig value={{ provider: () => new Map() }}>\n      <Page/>\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Data with SWRConfig\nDESCRIPTION: Example of using the new fallback option in SWRConfig to provide pre-fetched data as initial values for SWR hooks with specific keys. This is useful for SSG, SSR, and test data mocking.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  fallback: {\n    '/api/user': { name: 'Bob', ... },\n    '/api/items': ...,\n    ...\n  }\n}}>\n  <App/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Error Boundary in React Suspense\nDESCRIPTION: This code snippet shows how to use an Error Boundary component to catch and handle errors when using SWR with Suspense. It wraps the Suspense component to provide fallback UI for error states.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/suspense.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorBoundary fallback={<h2>Could not fetch posts.</h2>}>\n  <Suspense fallback={<h1>Loading posts...</h1>}>\n    <Profile />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic UI with SWR's optimisticData Option\nDESCRIPTION: Example showing how to use the new optimisticData option to immediately update the UI before the server responds, creating a more responsive user experience.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('New Item'), {\n      optimisticData: [...data, 'New Item'],\n    })\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Logging SWR Hook States in React Component\nDESCRIPTION: This example shows how to use and log all four states returned by the useSWR hook: data, error, isLoading, and isValidating. It illustrates how SWR updates these states independently throughout the data fetching lifecycle.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const { data, error, isLoading, isValidating } = useSWR('/api', fetcher)\n  console.log(data, error, isLoading, isValidating)\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Global Mutate in React\nDESCRIPTION: Demonstrates how to import and use the global mutate function from SWR in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ko.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSWRConfig } from \"swr\"\n\nfunction App() {\n  const { mutate } = useSWRConfig()\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Cursor-based Pagination with useSWRInfinite\nDESCRIPTION: Shows how to implement cursor-based pagination using useSWRInfinite with dynamic key generation based on previous page data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst getKey = (pageIndex, previousPageData) => {\n  // reached the end\n  if (previousPageData && !previousPageData.data) return null\n\n  // la primera página, no tenemos `previousPageData`.\n  if (pageIndex === 0) return `/users?limit=10`\n\n  // añadir el cursor al punto final de la API\n  return `/users?cursor=${previousPageData.nextCursor}&limit=10`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useSWRMutation Usage Example in JSX\nDESCRIPTION: Shows basic implementation of useSWRMutation for handling user creation with loading states and error handling.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.pt-BR.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nasync function sendRequest(url, { arg }: { arg: { username: string } }) {\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(arg)\n  }).then(res => res.json())\n}\n\nfunction App() {\n  const { trigger, isMutating } = useSWRMutation('/api/user', sendRequest)\n\n  return (\n    <button\n      disabled={isMutating}\n      onClick={async () => {\n        try {\n          const result = await trigger({ username: 'johndoe' })\n        } catch (e) {\n          // lidando com erros\n        }\n      }}\n    >\n      Criar Usuário\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying SWR Middleware in React Components\nDESCRIPTION: Examples showing how to use middleware with SWR, either globally via SWRConfig or locally in individual useSWR calls. The middleware is passed as an array in the 'use' option.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ use: [myMiddleware] }}>\n\n// or...\n\nuseSWR(key, fetcher, { use: [myMiddleware] })\n```\n\n----------------------------------------\n\nTITLE: Mutating Data Based on Current Cache in SWR\nDESCRIPTION: This snippet shows how to update a part of your data based on the current cached data using mutate. It demonstrates updating a specific item in a list of todos.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nmutate('/api/todos', async todos => {\n  // let's update the todo with ID `1` to be completed,\n  // this API returns the updated data\n  const updatedTodo = await fetch('/api/todos/1', {\n    method: 'PATCH',\n    body: JSON.stringify({ completed: true })\n  })\n\n  // filter the list, and return it with the updated item\n  const filteredTodos = todos.filter(todo => todo.id !== '1')\n  return [...filteredTodos, updatedTodo]\n// Since the API already gives us the updated information,\n// we don't need to revalidate here.\n}, { revalidate: false })\n```\n\n----------------------------------------\n\nTITLE: Using Laggy Middleware with SWR Hook in JavaScript\nDESCRIPTION: Demonstrates how to use the laggy middleware with a SWR hook, accessing the additional properties provided by the middleware.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.en-US.mdx#2025-04-19_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst { data, isLagging, resetLaggy } = useSWR(key, fetcher, { use: [laggy] })\n```\n\n----------------------------------------\n\nTITLE: Customizing SWR Focus and Reconnect Event Handlers\nDESCRIPTION: Implementation of custom event handlers for online state, visibility, focus, and reconnection events in SWR configuration.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/react-native.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={{\n    provider: () => new Map(),\n    isOnline() {\n      /* Customize the network state detector */\n      return true\n    },\n    isVisible() {\n      /* Customize the visibility state detector */\n      return true\n    },\n    initFocus(callback) {\n      /* Register the listener with your state provider */\n    },\n    initReconnect(callback) {\n      /* Register the listener with your state provider */\n    }\n  }}\n>\n  <App />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Mutation with useSWRConfig in JavaScript\nDESCRIPTION: Shows how to access the global mutate function using the useSWRConfig hook to modify any data key.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSWRConfig } from \"swr\"\n\nfunction App() {\n  const { mutate } = useSWRConfig()\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Error Handling with Status Codes in SWR\nDESCRIPTION: Customized fetcher function that provides more detailed error information including status codes and response bodies for non-successful HTTP requests. This helps with better debugging and error presentation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.fr-FR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetcher = async url => {\n  const res = await fetch(url)\n\n  // Si le code d'état n'est pas dans la plage 200-299,\n  // on essaie quand même de l'analyser et de le jeter.\n  if (!res.ok) {\n    const error = new Error('Une erreur est survenue lors de la récupération des données.')\n    // Joignez des informations supplémentaires à l'objet d'erreur.\n    error.info = await res.json()\n    error.status = res.status\n    throw error\n  }\n\n  return res.json()\n}\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n// error.info === {\n//   message: \"Vous n'êtes pas autorisé à accéder à cette ressource.\",\n//   documentation_url: \"...\"\n// }\n// error.status === 403\n```\n\n----------------------------------------\n\nTITLE: Importing SWR Serialization APIs in Next.js App Router Server Components\nDESCRIPTION: Demonstrates how to import key serialization APIs from SWR in React Server Components (RSC) within Next.js App Router. These are the only SWR APIs available in server components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { unstable_serialize } from 'swr' // ✅ Available in server components\nimport { unstable_serialize as infinite_unstable_serialize } from 'swr/infinite' // ✅ Available in server components\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Provider with SWRConfig in React\nDESCRIPTION: Shows how to use the new provider option in SWRConfig to customize the cache used by SWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  provider: () => myCache\n}}>\n  <App/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Bound Mutate with Data Updates\nDESCRIPTION: Example of using bound mutate to update user data and trigger revalidation\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile () {\n  const { data, mutate } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        // send a request to the API to update the data\n        await requestUpdateUsername(newName)\n        // update the local data immediately and revalidate (refetch)\n        // NOTE: key is not required when using useSWR's mutate as it's pre-bound\n        mutate({ ...data, name: newName })\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Index-based Pagination with useSWRInfinite\nDESCRIPTION: Implementation of infinite loading using useSWRInfinite hook with index-based pagination API.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst getKey = (pageIndex, previousPageData) => {\n  if (previousPageData && !previousPageData.length) return null // reached the end\n  return `/users?page=${pageIndex}&limit=10`                    // SWR key\n}\n\nfunction App () {\n  const { data, size, setSize } = useSWRInfinite(getKey, fetcher)\n  if (!data) return 'loading'\n\n  // Ahora podemos calcular el número de todos los usuarios\n  let totalUsers = 0\n  for (let i = 0; i < data.length; i++) {\n    totalUsers += data[i].length\n  }\n\n  return <div>\n    <p>{totalUsers} users listed</p>\n    {data.map((users, index) => {\n      // `data` es un array con la respuesta de la API de cada página.\n      return users.map(user => <div key={user.id}>{user.name}</div>)\n    })}\n    <button onClick={() => setSize(size + 1)}>Load More</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSWR with Fetcher Functions\nDESCRIPTION: Demonstrates three equivalent ways to use the useSWR hook with a fetcher function. By default, the key is passed to the fetcher as an argument.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', () => fetcher('/api/user'))\nuseSWR('/api/user', url => fetcher(url))\nuseSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering with SWR Default Data in Next.js\nDESCRIPTION: Shows how to use SWR with Next.js getStaticProps for pre-rendering, passing pre-fetched data as the initial value for SWR hooks.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.fr-FR.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps () {\n  // `getStaticProps` is executed on the server side.\n  const article = await getArticleFromAPI()\n  return {\n    props: {\n      fallback: {\n        '/api/article': article\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // `data` will always be available as it's in `fallback`.\n  const { data } = useSWR('/api/article', fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  // SWR hooks inside the `SWRConfig` boundary will use those values.\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global SWR Settings with Custom Fetcher in React\nDESCRIPTION: This example shows how to set up global SWR configurations including a custom fetcher and refresh interval. It also demonstrates how to override specific options in individual hooks.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { SWRConfig } from 'swr'\n\nfunction Dashboard () {\n  const { data: events } = useSWR('/api/events')\n  const { data: projects } = useSWR('/api/projects')\n  const { data: user } = useSWR('/api/user', { refreshInterval: 0 }) // override\n\n  // ...\n}\n\nfunction App () {\n  return (\n    <SWRConfig \n      value={{\n        refreshInterval: 3000,\n        fetcher: (resource, init) => fetch(resource, init).then(res => res.json())\n      }}\n    >\n      <Dashboard />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic SWR Middleware Function in JavaScript\nDESCRIPTION: Definition of a basic SWR middleware function that executes logic before and after the SWR hook runs. The middleware receives the next middleware in the chain and returns a function that processes the key, fetcher, and configuration.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction myMiddleware (useSWRNext) {\n  return (key, fetcher, config) => {\n    // Before hook runs...\n\n    // Handle the next middleware, or the `useSWR` hook if this is the last one.\n    const swr = useSWRNext(key, fetcher, config)\n\n    // After hook runs...\n    return swr\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Data Fetching with useEffect in React Components\nDESCRIPTION: Example of the traditional approach to data fetching using useEffect and useState in a parent component, then passing data down via props.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.es-ES.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// componente de la página\n\nfunction Page ({ userId }) {\n  const [user, setUser] = useState(null)\n\n  // obtener datos\n  useEffect(() => {\n    fetch(`/api/user/${userId}`)\n      .then(res => res.json())\n      .then(data => setUser(data))\n  }, [userId])\n\n  // estado de carga global\n  if (!user) return <Spinner />\n\n  return (\n    <div>\n      <Navbar user={user} />\n      <Content user={user} />\n    </div>\n  )\n}\n\n// componentes hijos\n\nfunction Navbar({ user }) {\n  return (\n    <div>\n      ...\n      <Avatar user={user} />\n    </div>\n  )\n}\n\nfunction Content({ user }) {\n  return <h1>Welcome back, {user.name}</h1>\n}\n\nfunction Avatar({ user }) {\n  return <img src={user.avatar} alt={user.name} />\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering with SWR and Complex Keys in Next.js\nDESCRIPTION: Demonstrates how to use SWR with complex keys (array type) when pre-rendering pages in Next.js. It uses the unstable_serialize function to serialize fallback keys for proper matching.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.en-US.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { unstable_serialize } from 'swr'\n\nexport async function getStaticProps () {\n  const article = await getArticleFromAPI(1)\n  return {\n    props: {\n      fallback: {\n        // unstable_serialize() array style key\n        [unstable_serialize(['api', 'article', 1])]: article,\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // using an array style key.\n  const { data } = useSWR(['api', 'article', 1], fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRSubscription with Firestore in React\nDESCRIPTION: This example demonstrates how to use the useSWRSubscription hook to subscribe to a Firestore data source in a React component. It shows how to set up the subscription and handle incoming data updates.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.zh-CN.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\n\nfunction Post({ id }) {\n  const { data } = useSWRSubscription(['views', id], ([_, postId], { next }) => {\n    const ref = firebase.database().ref('views/' + postId)\n    ref.on('value',\n      snapshot => next(null, snapshot.data()),\n      err => next(err)\n    )\n    return () => ref.off()\n  })\n\n  return <span>Your post has {data} views!</span>\n}\n```\n\n----------------------------------------\n\nTITLE: Data Fetching with GraphQL in JavaScript\nDESCRIPTION: graphql-request ライブラリを使用して GraphQL クエリを実行する例。GraphQL エンドポイントにクエリを送信してデータを取得します。\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.ja.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { request } from 'graphql-request'\n\nconst fetcher = query => request('/api/graphql', query)\n\nfunction App () {\n  const { data, error } = useSWR(\n    `{\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }`,\n    fetcher\n  )\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRMutation for Remote Mutations in React\nDESCRIPTION: Shows how to use the useSWRMutation hook for handling remote mutations in a React component, including error handling.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ko.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nasync function updateUser(url, { arg }: { arg: string }) {\n  await fetch(url, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${arg}`\n    }\n  })\n}\n\nfunction Profile() {\n  const { trigger } = useSWRMutation('/api/user', updateUser, options)\n\n  return <button onClick={() => {\n    trigger('my_token')\n  }}>Update User</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Global Mutation with useSWRInfinite using unstable_serialize\nDESCRIPTION: Demonstrates how to perform global mutation with useSWRInfinite using the unstable_serialize utility function to handle cache keys for all pages.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.en-US.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from \"swr\"\nimport { unstable_serialize } from \"swr/infinite\"\n\nfunction App() {\n    const { mutate } = useSWRConfig()\n    mutate(unstable_serialize(getKey))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling with SWR in JavaScript\nDESCRIPTION: Simple example of how errors are captured by the SWR hook when fetching data. If the fetch operation fails, the error will be returned by the hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetcher = url => fetch(url).then(r => r.json())\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Creating a Real-time Search UI with keepPreviousData in SWR\nDESCRIPTION: This snippet shows how to implement a search interface that maintains previous search results during new fetches using SWR's keepPreviousData option. This improves user experience by avoiding empty states during searches.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Pesquisar...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nested SWR Middleware Configuration Example\nDESCRIPTION: Demonstration of middleware extension with nested SWRConfig components where middleware arrays are combined from parent to child components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Bar () {\n  useSWR(key, fetcher, { use: [c] })\n  // ...\n}\n\nfunction Foo() {\n  return (\n    <SWRConfig value={{ use: [a] }}>\n      <SWRConfig value={{ use: [b] }}>\n        <Bar/>\n      </SWRConfig>\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Subscribe Function for Real-time Data Source\nDESCRIPTION: This example demonstrates how to implement a subscribe function for a generic real-time data source. It shows how to use the next function to update the state with new data or errors.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.zh-CN.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction subscribe(key, { next }) {\n  const sub = remote.subscribe(key, (err, data) => next(err, data))\n  return () => sub.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Fetching with SWR Suspense\nDESCRIPTION: Demonstrates conditional data fetching behavior in Suspense mode where data can be undefined when the request is paused.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/suspense.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Profile () {\n  const { data } = useSWR(isReady ? '/api/user' : null, fetcher, { suspense: true })\n\n  // `data` will be `undefined` if `isReady` is false\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using optimisticData Function with SWR Mutation in React\nDESCRIPTION: This example shows how to use a function for 'optimisticData' in SWR's mutate function, allowing the optimistic update to depend on the current data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction Profile () {\n  const { mutate } = useSWRConfig()\n  const { data } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        mutate('/api/user', updateUserName(newName), {\n          optimisticData: user => ({ ...user, name: newName }),\n          rollbackOnError: true\n        });\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Laggy Data Middleware for SWR in React\nDESCRIPTION: Creates a middleware that keeps the previous result even when the key changes, allowing for \"laggy\" data behavior. It extends the SWR hook's returned object with additional properties.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef, useEffect, useCallback } from 'react'\n\n// This is a SWR middleware for keeping the data even if key changes.\nfunction laggy(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Use a ref to store previous returned data.\n    const laggyDataRef = useRef()\n\n    // Actual SWR hook.\n    const swr = useSWRNext(key, fetcher, config)\n\n    useEffect(() => {\n      // Update ref if data is not undefined.\n      if (swr.data !== undefined) {\n        laggyDataRef.current = swr.data\n      }\n    }, [swr.data])\n\n    // Expose a method to clear the laggy data, if any.\n    const resetLaggy = useCallback(() => {\n      laggyDataRef.current = undefined\n    }, [])\n\n    // Fallback to previous data if the current data is undefined.\n    const dataOrLaggyData = swr.data === undefined ? laggyDataRef.current : swr.data\n\n    // Is it showing previous data?\n    const isLagging = swr.data === undefined && laggyDataRef.current !== undefined\n\n    // Also add a `isLagging` field to SWR.\n    return Object.assign({}, swr, {\n      data: dataOrLaggyData,\n      isLagging,\n      resetLaggy,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Data Mutation with useSWRMutation in React\nDESCRIPTION: Shows how to use the useSWRMutation hook for manual triggering of remote data mutations. This example includes a custom fetcher function and demonstrates how to trigger the mutation with specific arguments.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\n// 实现 fetcher\n// 额外的参数可以通过第二个参数 `arg` 传入\n// 在下例中，`arg` 为 'my_token'\nasync function updateUser(url, { arg }: { arg: string }) {\n  await fetch(url, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${arg}`\n    }\n  })\n}\n\nfunction Profile() {\n  // 一个类似 useSWR + mutate 的 API，但是它不会自动发送请求\n  const { trigger } = useSWRMutation('/api/user', updateUser, options)\n\n  return <button onClick={() => {\n    // 以特定参数触发 `updateUser` 函数\n    trigger('my_token')\n  }}>Update User</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useSWRConfig Hook\nDESCRIPTION: Example of the new useSWRConfig hook that provides access to global SWR configuration including the current cache provider and global mutate function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Foo () {\n  const { refreshInterval, cache, mutate, ...restConfig } = useSWRConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Mutate with useSWRConfig in React\nDESCRIPTION: Demonstrates how to access the global mutate function using the useSWRConfig hook in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ja.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSWRConfig } from \"swr\"\n\nfunction App() {\n  const { mutate } = useSWRConfig()\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic Updates with useSWRMutation in React\nDESCRIPTION: This snippet demonstrates how to achieve the same optimistic update functionality using useSWRMutation and trigger. It provides an alternative approach to updating user data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.fr-FR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nfunction Profile () {\n  const { trigger } = useSWRMutation('/api/user', updateUserName)\n\n  return (\n    <div>\n      <h1>Mon nom est {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n\n        trigger(newName, {\n          optimisticData: user => ({ ...user, name: newName }),\n          rollbackOnError: true\n        })\n      }}>Mettre mon nom en majuscule!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Global Error Reporting with SWRConfig in React\nDESCRIPTION: Implementation of a global error handler using SWRConfig to intercept and process all errors from SWR hooks. This approach is useful for centralized error reporting to services like Sentry or for displaying UI notifications.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.fr-FR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  onError: (error, key) => {\n    if (error.status !== 403 && error.status !== 404) {\n      // On peut envoyer l'erreur à Sentry,\n      // ou afficher une notification à l'interface utilisateur.\n    }\n  }\n}}>\n  <MyApp />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Key Serialization Middleware for SWR\nDESCRIPTION: A middleware for older SWR versions (< 1.1.0) that serializes object keys to ensure stability between renders. This middleware JSON-stringifies array or object keys before passing them to SWR and unserializes them in the fetcher.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction serialize(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Serialize the key.\n    const serializedKey = Array.isArray(key) ? JSON.stringify(key) : key\n\n    // Pass the serialized key, and unserialize it in fetcher.\n    return useSWRNext(serializedKey, (k) => fetcher(...JSON.parse(k)), config)\n  }\n}\n\n// ...\nuseSWR(['/api/user', { id: '73' }], fetcher, { use: [serialize] })\n\n// ... or enable it globally with\n<SWRConfig value={{ use: [serialize] }}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Search with SWR and keepPreviousData in React\nDESCRIPTION: This example shows how to implement a real-time search feature using SWR with the keepPreviousData option. It demonstrates maintaining previous search results while fetching new data, improving user experience during continuous user actions based on key input.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.ja.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Keys with SWR Serialization\nDESCRIPTION: Demonstrates using SWR with complex array keys and proper serialization for pre-fetched data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.zh-CN.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { unstable_serialize } from 'swr'\n\nexport async function getStaticProps () {\n  const article = await getArticleFromAPI(1)\n  return {\n    props: {\n      fallback: {\n        // unstable_serialize() array style key\n        [unstable_serialize(['api', 'article', 1])]: article,\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // using an array style key.\n  const { data } = useSWR(['api', 'article', 1], fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Pagination with React State\nDESCRIPTION: Demonstrates basic pagination implementation using useSWR hook with React state to manage page index. Includes page navigation controls and data rendering.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const [pageIndex, setPageIndex] = useState(0);\n\n  // A URL da API inclui o índice da página, que é um estado do React.\n  const { data } = useSWR(`/api/data?page=${pageIndex}`, fetcher);\n\n  // ... lidando com estados de loading e erro\n\n  return <div>\n    {data.map(item => <div key={item.id}>{item.name}</div>)}\n    <button onClick={() => setPageIndex(pageIndex - 1)}>Anterior</button>\n    <button onClick={() => setPageIndex(pageIndex + 1)}>Próximo</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR with Complex Keys and Pre-fetched Data in Next.js\nDESCRIPTION: Demonstrates how to use SWR with complex keys (arrays or functions) and pre-fetched data in Next.js, using unstable_serialize for key serialization.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.pt-BR.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { unstable_serialize } from 'swr'\n\nexport async function getStaticProps () {\n  const article = await getArticleFromAPI(1)\n  return {\n    props: {\n      fallback: {\n        // chave de lista usando unstable_serialize()\n        [unstable_serialize(['api', 'article', 1])]: article,\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // usando uma chave de estilo de array.\n  const { data } = useSWR(['api', 'article', 1], fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SWR configurations with nested SWRConfig\nDESCRIPTION: This example illustrates how to use nested SWRConfig components to extend and modify SWR configurations, allowing for more flexible setup in large codebases.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={parentConfig => ({\n    dedupingInterval: parentConfig.dedupingInterval * 5,\n    refreshInterval: 100,\n  })}\n>\n  <Page />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering with SWR and Next.js getStaticProps\nDESCRIPTION: Illustrates how to use SWR with Next.js getStaticProps for pre-rendering, passing pre-fetched data as initial values to SWR hooks.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.es-ES.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps () {\n  // `getStaticProps` is executed on the server side.\n  const article = await getArticleFromAPI()\n  return {\n    props: {\n      fallback: {\n        '/api/article': article\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // `data` will always be available as it's in `fallback`.\n  const { data } = useSWR('/api/article', fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  // SWR hooks inside the `SWRConfig` boundary will use those values.\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Global Error Reporting Configuration with SWR in JSX\nDESCRIPTION: Demonstrates how to set up global error reporting for SWR using the SWRConfig component, allowing for centralized error handling and reporting.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.ja.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  onError: (error, key) => {\n    if (error.status !== 403 && error.status !== 404) {\n      // エラーをSentryに送信するか、\n      // 通知UIを表示することができます。\n    }\n  }\n}}>\n  <MyApp />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Using useSWRMutation Hook in React\nDESCRIPTION: Shows how to use the useSWRMutation hook for manual remote mutations in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ja.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\n// フェッチャーの実装\n// 追加の引数は第二引数の `arg` プロパティとして渡されます\n// 下記の例では、`arg` は `'my_token'` となります\nasync function updateUser(url, { arg }: { arg: string }) {\n  await fetch(url, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${arg}`\n    }\n  })\n}\n\nfunction Profile() {\n  // useSWR と mutate を組み合わせたような API ですが、リクエストを自動的に開始しません\n  const { trigger } = useSWRMutation('/api/user', updateUser, options)\n\n  return <button onClick={() => {\n    // `updateUser` を指定した引数と一緒に実行します\n    trigger('my_token')\n  }}>Update User</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Race Conditions with useSWR and useSWRMutation in React\nDESCRIPTION: This example illustrates how to avoid race conditions between useSWR and useSWRMutation. It ensures that stale data is never displayed after a mutation by automatically handling request abortion and revalidation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.fr-FR.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Profile() {\n  const { data } = useSWR('/api/user', getUser, { revalidateInterval: 3000 })\n  const { trigger } = useSWRMutation('/api/user', updateUser)\n\n  return <>\n    {data ? data.username : null}\n    <button onClick={() => trigger()}>Mettre à jour l'utilisateur</button>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Data with SWR\nDESCRIPTION: Shows how to use the new preload API to start fetching data early, improving user experience by having data ready before rendering.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { preload } from 'swr'\n\nconst fetcher = (url) => fetch(url).then((res) => res.json())\n\n// You can call the preload function in anywhere\npreload('/api/user', fetcher)\n\nfunction Profile() {\n  // The component that actually uses the data:\n  const { data, error } = useSWR('/api/user', fetcher)\n  // ...\n}\n\nexport function Page () {\n  return <Profile/>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing keepPreviousData with SWR in React Search Component\nDESCRIPTION: A React component demonstrating the usage of keepPreviousData option in SWR for live search functionality. The feature maintains previous data while new data is being fetched to improve user experience.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  })\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SWR Data Pre-filling\nDESCRIPTION: Shows how to pre-fill the SWR cache with existing data using the fallbackData option.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWR('/api/data', fetcher, { fallbackData: prefetchedData })\n```\n\n----------------------------------------\n\nTITLE: Revalidating Specific Pages with useSWRInfinite in React\nDESCRIPTION: Shows how to selectively revalidate specific pages using the revalidate option in mutate. The example demonstrates revalidating only the last page of the infinite loading list.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.en-US.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const { data, mutate, size } = useSWRInfinite(\n    (index) => [`/api/?page=${index + 1}`, index + 1],\n    fetcher\n  );\n\n  mutate(data, {\n    // only revalidate the last page\n    revalidate: (pageData, [url, page]) => page === size\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Retry Behavior in SWR\nDESCRIPTION: Custom configuration for the retry behavior when errors occur during data fetching. This example shows how to customize retry attempts based on error status, specific endpoints, and retry count limits.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.fr-FR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', fetcher, {\n  onErrorRetry: (error, key, config, revalidate, { retryCount }) => {\n    // Ne jamais retenter sur 404.\n    if (error.status === 404) return\n\n    // Ne pas retenter pour un clé spécifique.\n    if (key === '/api/user') return\n\n    // Retenter 10 fois uniquement.\n    if (retryCount >= 10) return\n\n    // Délai de 5 secondes avant la prochaine tentative.\n    setTimeout(() => revalidate({ retryCount }), 5000)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using LocalStorage-based Cache Provider with SWRConfig in React\nDESCRIPTION: This snippet demonstrates how to use the previously defined LocalStorage-based cache provider with SWRConfig in a React application. It wraps the App component with SWRConfig, providing the custom cache implementation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: localStorageProvider }}>\n  <App/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Data Fetching Pattern in JavaScript\nDESCRIPTION: The fundamental API pattern for SWR. The fetcher is an async function that accepts the key parameter and returns data, which will be stored in the data variable. Any thrown errors will be captured in the error variable.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = useSWR(key, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Specification in useSWR\nDESCRIPTION: Shows how to explicitly specify types for the key, fetcher, and error in useSWR hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.ja.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Fetcher } from 'swr'\n\nconst uid = '<user_id>'\nconst fetcher: Fetcher<User, string> = (id) => getUserById(id)\n\nconst { data } = useSWR(uid, fetcher)\n// `data` は `User | undefined` となります。\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = useSWR<User, Error>(uid, fetcher);\n// `data` は `User | undefined` となります.\n// `error` は `Error | undefined` となります.\n```\n\n----------------------------------------\n\nTITLE: Optimized SWR Usage Example\nDESCRIPTION: Shows optimized usage of SWR by only consuming needed state values, reducing unnecessary re-renders.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const { data } = useSWR('/api', fetcher)\n  console.log(data)\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRMutation for Declarative Data Mutation in React\nDESCRIPTION: Example showing how to use the new useSWRMutation hook to perform a POST request. Unlike useSWR, this hook doesn't start the request immediately but provides a trigger function to manually initiate the mutation when needed.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nasync function sendRequest(url, { arg }) {\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(arg)\n  })\n}\n\nfunction App() {\n  const { trigger, isMutating } = useSWRMutation('/api/user', sendRequest)\n\n  return (\n    <button\n      disabled={isMutating}\n      onClick={() => trigger({ username: 'johndoe' })}\n    >{\n      isMutating ? 'Creating...' : 'Create User'\n    }</button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Provider with SWRConfig\nDESCRIPTION: Shows how to provide a custom cache implementation using the provider option in SWRConfig. This example uses a Map as the cache store.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: () => new Map() }}>\n  <Dashboard />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Typing SWR Configuration in TypeScript\nDESCRIPTION: Shows how to import and use types for SWR configuration options, allowing for type-safe configuration of SWR hooks.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR from 'swr'\nimport type { SWRConfiguration } from 'swr'\n\nconst config: SWRConfiguration = {\n  fallbackData: \"fallback\",\n  revalidateOnMount: false\n  // ...\n}\n\nconst { data } = useSWR<string[]>('/api/data', fetcher, config)\n```\n\n----------------------------------------\n\nTITLE: Correct Way to Pass Multiple Arguments Using Array Keys\nDESCRIPTION: Demonstrates the proper way to pass multiple arguments to a fetcher function using an array as the key parameter. This ensures the cache key is associated with all the arguments.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.pt-BR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = useSWR(['/api/user', token], ([url, token]) => fetchWithToken(url, token))\n```\n\n----------------------------------------\n\nTITLE: Custom Error Retry Logic with SWR in JavaScript\nDESCRIPTION: Illustrates how to customize the retry behavior of SWR when errors occur, including conditions for retrying and retry intervals.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.ja.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', fetcher, {\n  onErrorRetry: (error, key, config, revalidate, { retryCount }) => {\n    // 404では再試行しない。\n    if (error.status === 404) return\n\n    // 特定のキーでは再試行しない。\n    if (key === '/api/user') return\n\n    // 再試行は10回までしかできません。\n    if (retryCount >= 10) return\n\n    // 5秒後に再試行します。\n    setTimeout(() => revalidate({ retryCount }), 5000)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Bound Mutate with useSWR in React\nDESCRIPTION: Illustrates how to use the bound mutate function returned by useSWR to update data and trigger revalidation in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ja.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile () {\n  const { data, mutate } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        // データを更新するために API にリクエストを送信します\n        await requestUpdateUsername(newName)\n        // ローカルのデータを即座に更新して再検証（再フェッチ）します\n        // 注意: useSWR の mutate は key が対応付けられているため、key の指定は必要ありません\n        mutate({ ...data, name: newName })\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SWRConfig with Global Options in React\nDESCRIPTION: Exemple de configuration globale SWR fournissant un fetcher personnalisé et un intervalle de rafraîchissement par défaut pour tous les hooks SWR dans l'application.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { SWRConfig } from 'swr'\n\nfunction Dashboard () {\n  const { data: events } = useSWR('/api/events')\n  const { data: projects } = useSWR('/api/projects')\n  const { data: user } = useSWR('/api/user', { refreshInterval: 0 }) // override\n\n  // ...\n}\n\nfunction App () {\n  return (\n    <SWRConfig \n      value={{\n        refreshInterval: 3000,\n        fetcher: (resource, init) => fetch(resource, init).then(res => res.json())\n      }}\n    >\n      <Dashboard />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: SWR Configuration Types\nDESCRIPTION: Example of using TypeScript with SWR configuration options.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.es-ES.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR from 'swr'\nimport type { SWRConfiguration } from 'swr'\n\nconst config: SWRConfiguration = {\n  fallbackData: \"fallback\",\n  revalidateOnMount: false\n  // ...\n}\n\nconst { data } = useSWR<string[]>('/api/data', fetcher, config)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with useSWRInfinite\nDESCRIPTION: Demonstrates how to use TypeScript with useSWRInfinite, showing both automatic type inference and explicit type specification.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SWRInfiniteKeyLoader } from 'swr/infinite'\n\nconst getKey: SWRInfiniteKeyLoader = (index, previousPageData) => {\n  // ...\n}\n\nconst { data } = useSWRInfinite(getKey, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Request Logger Middleware for SWR in JavaScript\nDESCRIPTION: Creates a middleware that logs all fetcher requests made by the SWR hook, demonstrating how to extend the original fetcher functionality.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction logger(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Add logger to the original fetcher.\n    const extendedFetcher = (...args) => {\n      console.log('SWR Request:', key)\n      return fetcher(...args)\n    }\n\n    // Execute the hook with the new fetcher.\n    return useSWRNext(key, extendedFetcher, config)\n  }\n}\n\n// ... inside your component\nuseSWR(key, fetcher, { use: [logger] })\n```\n\n----------------------------------------\n\nTITLE: Using Immutable Data Hook in SWR\nDESCRIPTION: This code shows how to use the useSWRImmutable hook for immutable data, which disables all automatic revalidations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/revalidation.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport useSWRImmutable from 'swr/immutable'\n\n// ...\nuseSWRImmutable(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: SWR Optimized State Management Example\nDESCRIPTION: Shows how SWR optimizes re-renders by only updating states that are actually used by the component, reducing unnecessary renders significantly.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.pt-BR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const { data } = useSWR('/api', fetcher)\n  console.log(data)\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SWR Provider Client Component for Next.js App Router\nDESCRIPTION: Shows how to create a separate SWR provider client component to configure global settings when using SWR in server components within the Next.js App Router.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { SWRConfig } from 'swr'\nexport const SWRProvider = ({ children }) => {\n  return <SWRConfig>{children}</SWRConfig>\n};\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering with SWR and getStaticProps\nDESCRIPTION: Example of using SWR with Next.js getStaticProps for pre-rendering with fallback data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.zh-CN.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps () {\n  // `getStaticProps` 在服务端执行\n  const article = await getArticleFromAPI()\n  return {\n    props: {\n      fallback: {\n        '/api/article': article\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // `data` 将始终可用，因为其处于 `fallback` 列表中\n  const { data } = useSWR('/api/article', fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  // 在 `SWRConfig` 标签内的 SWR hooks 将使用这些值\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cache with useSWRMutation in React\nDESCRIPTION: This snippet demonstrates how to update the cache after a mutation using useSWRMutation. It provides an alternative approach to updating a todo list without revalidation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.fr-FR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWRMutation('/api/todos', updateTodo, {\n  populateCache: (updatedTodo, todos) => {\n    // filtre la liste et la renvoie avec l'élément mis à jour\n    const filteredTodos = todos.filter(todo => todo.id !== '1')\n    return [...filteredTodos, updatedTodo]\n  },\n  // Etant donné que l'API nous donne déjà les informations mises à jour,\n  // on peut ne pas revalider ici.\n  revalidate: false\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable User Data Hook with SWR in React\nDESCRIPTION: Implementation of a custom hook (useUser) that encapsulates SWR logic for fetching user data, making it reusable across components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useUser (id) {\n    const { data, error, isLoading } = useSWR(`/api/user/${id}`, fetcher)\n\n    return {\n        user: data,\n        isLoading,\n        isError: error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Mutate Function with useSWRConfig in React\nDESCRIPTION: Demonstrates how to access the global mutate function using the useSWRConfig hook from SWR. This allows for global data mutation across the application.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSWRConfig } from \"swr\"\n\nfunction App() {\n  const { mutate } = useSWRConfig()\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling with SWR in JavaScript\nDESCRIPTION: Demonstrates how to handle errors in SWR by checking the error object returned from the useSWR hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.ja.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetcher = url => fetch(url).then(r => r.json())\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Creating SWR Provider Component for Next.js\nDESCRIPTION: Shows how to create a separate SWR provider component to configure global settings in server components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.pt-BR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { SWRConfig } from 'swr'\nexport const SWRProvider = ({ children }) => {\n  return <SWRConfig>{children}</SWRConfig>\n};\n```\n\n----------------------------------------\n\nTITLE: Programmatically Prefetching Data with SWR in React\nDESCRIPTION: This example shows how to use the preload API from SWR to programmatically prefetch data and store it in the cache. It demonstrates preloading before rendering a component to prevent waterfalls.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport useSWR, { preload } from 'swr'\n\nconst fetcher = (url) => fetch(url).then((res) => res.json())\n\n// Preload the resource before rendering the User component below,\n// this prevents potential waterfalls in your application.\n// You can also start preloading when hovering the button or link, too.\npreload('/api/user', fetcher)\n\nfunction User() {\n  const { data } = useSWR('/api/user', fetcher)\n  ...\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false)\n  return (\n    <div>\n      <button onClick={() => setShow(true)}>Show User</button>\n      {show ? <User /> : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Data Fetching with Axios in JavaScript\nDESCRIPTION: Axios ライブラリを使用してデータをフェッチする例。axios.get を使って URL からデータを取得します。\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.ja.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport axios from 'axios'\n\nconst fetcher = url => axios.get(url).then(res => res.data)\n\nfunction App () {\n  const { data, error } = useSWR('/api/data', fetcher)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidation Example with Logout\nDESCRIPTION: Shows how to trigger revalidation on logout using the mutate function\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction App () {\n  const { mutate } = useSWRConfig()\n\n  return (\n    <div>\n      <Profile />\n      <button onClick={() => {\n        // set the cookie as expired\n        document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;'\n\n        // tell all SWRs with this key to revalidate\n        mutate('/api/user')\n      }}>\n        Logout\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the isLoading State in SWR\nDESCRIPTION: This code demonstrates using the new isLoading state in SWR 2.0 to conditionally render loading UI. The isLoading state specifically indicates when a request is ongoing and no data has been loaded yet, simplifying loading state management.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, isLoading } = useSWR('/api/user', fetcher)\n\n  if (isLoading) return <div>loading...</div>\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SWR Cache Provider\nDESCRIPTION: Example of extending a parent cache provider in nested SWRConfig components. The first argument to the provider function is the parent cache provider.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: (cache) => newCache }}>\n  ...\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Data Fetching with Fetch API in JavaScript\nDESCRIPTION: unfetch ポリフィルを使用してデータをフェッチする例。fetch API を使って URL からデータを取得し、JSON としてパースします。\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/data-fetching.ja.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport fetch from 'unfetch'\n\nconst fetcher = url => fetch(url).then(r => r.json())\n\nfunction App () {\n  const { data, error } = useSWR('/api/data', fetcher)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generics with SWR in TypeScript\nDESCRIPTION: Explains how to use generics to specify data types and SWR configuration options in TypeScript.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.ja.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 🔹 A. 型付きの fetcher を使う：\n// `getUser` は `(endpoint: string) => User` になります。\nconst { data } = useSWR('/api/user', getUser)\n\n// 🔹 B. データ型を指定：\n// `fetcher` は 通常 `any` を返します。\nconst { data } = useSWR<User>('/api/user', fetcher)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR from 'swr'\nimport type { SWRConfiguration } from 'swr'\n\nconst config: SWRConfiguration = {\n  fallbackData: \"fallback\",\n  revalidateOnMount: false\n  // ...\n}\n\nconst { data } = useSWR<string[]>('/api/data', fetcher, config)\n```\n\n----------------------------------------\n\nTITLE: Accessing SWR Cache Provider and Configuration\nDESCRIPTION: Example showing how to access the current cache provider and other SWR configurations within a React component using the useSWRConfig hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Avatar() {\n  const { cache, mutate, ...extraConfig } = useSWRConfig()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Préremplissage de données avec fallbackData dans SWR\nDESCRIPTION: Utilisation de l'option fallbackData pour préremplir le cache SWR avec des données existantes avant la récupération.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.fr-FR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWR('/api/data', fetcher, { fallbackData: prefetchedData })\n```\n\n----------------------------------------\n\nTITLE: Multiple Arguments with Array Key in useSWR\nDESCRIPTION: Demonstrates the correct way to pass multiple arguments to the fetcher function using an array as the key parameter, which properly associates both URL and token with the cache key.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.fr-FR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = useSWR(['/api/user', token], ([url, token]) => fetchWithToken(url, token))\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling with Status Codes in SWR\nDESCRIPTION: A fetcher implementation that enhances error objects with additional information such as status code and JSON error details returned from the API.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst fetcher = async url => {\n  const res = await fetch(url)\n\n  // Si el status code no esta en el rango 200-299,\n  // seguimos intentando analizarlo y lanzarlo.\n  if (!res.ok) {\n    const error = new Error('An error occurred while fetching the data.')\n    // Adjunta información extra al objeto de error.\n    error.info = await res.json()\n    error.status = res.status\n    throw error\n  }\n\n  return res.json()\n}\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n// error.info === {\n//   message: \"You are not authorized to access this resource.\",\n//   documentation_url: \"...\"\n// }\n// error.status === 403\n```\n\n----------------------------------------\n\nTITLE: Using a Custom SWR Hook in React Components\nDESCRIPTION: Example of using the custom useUser hook in a component, demonstrating how to handle loading and error states while displaying user avatar.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Avatar({ id }) {\n   const { user, isLoading, isError } = useUser(id)\n\n   if(isLoading) return <Spinner />\n   if (isError) return <Error />\n   return <img src={user.avatar} />\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Revalidation After Mutation in SWR\nDESCRIPTION: Demonstrates how to optimize SWR's mutation process by disabling automatic revalidation after a mutation completes when the mutation already returns the latest data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Exibir dados */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('Novo Item'), {\n      optimisticData: [...data, 'Novo Item'],\n      populateCache: true,\n      revalidate: false,\n    })\n  }}>\n    Adicionar novo item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Generic Type Usage with SWR\nDESCRIPTION: Examples of specifying generic types for data and using typed fetchers with SWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.es-ES.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// 🔹 A. Use a typed fetcher:\n// `getUser` is `(endpoint: string) => User`.\nconst { data } = useSWR('/api/user', getUser)\n\n// 🔹 B. Specify the data type:\n// `fetcher` is generally returning `any`.\nconst { data } = useSWR<User>('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Creating SWR Provider for Next.js Server Components\nDESCRIPTION: Shows how to create a separate SWR provider component to configure global settings for use in Server Components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.fr-FR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { SWRConfig } from 'swr'\nexport const SWRProvider = ({ children }) => {\n  return <SWRConfig>{children}</SWRConfig>\n};\n```\n\n----------------------------------------\n\nTITLE: Using useSWRMutation for Remote Updates\nDESCRIPTION: Demonstrates using useSWRMutation hook for manually triggered remote data mutations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\n// Fetcher implementation.\n// The extra argument will be passed via the `arg` property of the 2nd parameter.\n// In the example below, `arg` will be 'my_token'\nasync function updateUser(url, { arg }: { arg: string }) {\n  await fetch(url, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${arg}`\n    }\n  })\n}\n\nfunction Profile() {\n  // A useSWR + mutate like API, but it will not start the request automatically.\n  const { trigger } = useSWRMutation('/api/user', updateUser, options)\n\n  return <button onClick={() => {\n    // Trigger `updateUser` with a specific argument.\n    trigger('my_token')\n  }}>Update User</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocalStorage Cache Provider with SWRConfig\nDESCRIPTION: Example showing how to apply the localStorage-based persistent cache provider to the application through SWRConfig.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: localStorageProvider }}>\n  <App/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Passing Default Key Argument to SWR Hook in JavaScript\nDESCRIPTION: Demonstrates three equivalent ways to pass the default key argument to an SWR hook. The key is automatically passed to the fetcher function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', () => fetcher('/api/user'))\nuseSWR('/api/user', url => fetcher(url))\nuseSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Deferred Data Loading with useSWRMutation in JSX\nDESCRIPTION: Example of using useSWRMutation to defer data loading until needed, with conditional rendering.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.pt-BR.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport useSWRMutation from 'swr/mutation'\n\nconst fetcher = url => fetch(url).then(res => res.json())\n\nconst Page = () => {\n  const [show, setShow] = useState(false)\n  const { data: user, trigger } = useSWRMutation('/api/user', fetcher);\n\n  return (\n    <div>\n      <button onClick={() => {\n        trigger();\n        setShow(true);\n      }}>Mostrar Usuário</button>\n      {show && user ? <div>{user.name}</div> : null}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-filling Data in SWR Cache with fallbackData Option\nDESCRIPTION: This snippet shows how to pre-fill existing data into the SWR cache using the fallbackData option. It's useful when you have prefetched data available before the component renders.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWR('/api/data', fetcher, { fallbackData: prefetchedData })\n```\n\n----------------------------------------\n\nTITLE: useSWRMutation Implementation in TypeScript\nDESCRIPTION: Demonstrates the usage of useSWRMutation hook for handling remote mutations with authentication.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.pt-BR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nasync function updateUser(url, { arg }: { arg: string }) {\n  await fetch(url, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${arg}`\n    }\n  })\n}\n\nfunction Profile() {\n  const { trigger } = useSWRMutation('/api/user', updateUser, options)\n\n  return <button onClick={() => {\n    trigger('my_token')\n  }}>Atualizar usuário</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Revalidation After Mutation in SWR\nDESCRIPTION: This code shows how to use the revalidate option to prevent SWR from performing an additional revalidation after a mutation when the server response already contains the latest data, improving performance.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('New Item'), {\n      optimisticData: [...data, 'New Item'],\n      populateCache: true,\n      revalidate: false,\n    })\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Data Loading\nDESCRIPTION: Example showing how to use useSWRMutation for deferred data loading triggered by user interaction.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport useSWRMutation from 'swr/mutation'\n\nconst fetcher = url => fetch(url).then(res => res.json())\n\nconst Page = () => {\n  const [show, setShow] = useState(false)\n  // data is undefined until trigger is called\n  const { data: user, trigger } = useSWRMutation('/api/user', fetcher);\n\n  return (\n    <div>\n      <button onClick={() => {\n        trigger();\n        setShow(true);\n      }}>Show User</button>\n      {show && user ? <div>{user.name}</div> : null}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRImmutable for Immutable Resources\nDESCRIPTION: Demonstrates how to use the useSWRImmutable hook to indicate that a resource is immutable and disable all automatic revalidations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/revalidation.ko.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport useSWRImmutable from 'swr/immutable'\n\n// ...\nuseSWRImmutable(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bound Mutate with Profile Example\nDESCRIPTION: Example showing bound mutate usage in a Profile component with local data updates and revalidation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile () {\n  const { data, mutate } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        // send a request to the API to update the data\n        await requestUpdateUsername(newName)\n        // update the local data immediately and revalidate (refetch)\n        // NOTE: key is not required when using useSWR's mutate as it's pre-bound\n        mutate({ ...data, name: newName })\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR Provider in Next.js Server Components\nDESCRIPTION: Demonstrates how to use the created SWR provider component in a Next.js Server Component page.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.fr-FR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// This is still a server component\nimport { SWRProvider } from './swr-provider'\nexport default function Page() {\n  return (\n    <SWRProvider>\n      <h1>hello SWR</h1>\n    </SWRProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR Deduplication with React Components\nDESCRIPTION: Demonstrates how SWR deduplicates multiple identical requests using a shared useUser hook across multiple Avatar components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useUser () {\n  return useSWR('/api/user', fetcher)\n}\n\nfunction Avatar () {\n  const { data, error } = useUser()\n\n  if (error) return <Error />\n  if (!data) return <Spinner />\n\n  return <img src={data.avatar_url} />\n}\n\nfunction App () {\n  return <>\n    <Avatar />\n    <Avatar />\n    <Avatar />\n    <Avatar />\n    <Avatar />\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Fetcher in SWR React Application\nDESCRIPTION: Shows how to set up a default fetcher function for SWR in version 1.0, which no longer provides a built-in default fetcher.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ fetcher: (url) => fetch(url).then(res => res.json()) }}>\n  <App/>\n</SWRConfig>\n\n// ... or\nuseSWR(key, (url) => fetch(url).then(res => res.json()))\n```\n\n----------------------------------------\n\nTITLE: Paginated Component Abstraction\nDESCRIPTION: Shows how to create a reusable Page component abstraction for pagination using SWR, separating the pagination logic from the main App component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page ({ index }) {\n  const { data } = useSWR(`/api/data?page=${index}`, fetcher);\n\n  // ... lidando com estados de loading e erro\n\n  return data.map(item => <div key={item.id}>{item.name}</div>)\n}\n\nfunction App () {\n  const [pageIndex, setPageIndex] = useState(0);\n\n  return <div>\n    <Page index={pageIndex}/>\n    <button onClick={() => setPageIndex(pageIndex - 1)}>Anterior</button>\n    <button onClick={() => setPageIndex(pageIndex + 1)}>Próximo</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Cursor-based Pagination Implementation\nDESCRIPTION: Shows how to implement cursor-based pagination using getKey function, handling cursor management and pagination state.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.pt-BR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst getKey = (pageIndex, previousPageData) => {\n  // alcançou o fim\n  if (previousPageData && !previousPageData.data) return null\n\n  // primeira página, nós não temos `previousPageData`\n  if (pageIndex === 0) return `/users?limit=10`\n\n  // adiciona o cursor para o endpoint da API\n  return `/users?cursor=${previousPageData.nextCursor}&limit=10`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling with SWR in JavaScript\nDESCRIPTION: This snippet demonstrates how to use SWR's useSWR hook to handle errors in data fetching. It defines a simple fetcher function and shows how to access the error object returned by the hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetcher = url => fetch(url).then(r => r.json())\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: TypeScript with useSWRInfinite\nDESCRIPTION: Example of using TypeScript with useSWRInfinite hook for infinite loading scenarios.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SWRInfiniteKeyLoader } from 'swr/infinite'\n\nconst getKey: SWRInfiniteKeyLoader = (index, previousPageData) => {\n  // ...\n}\n\nconst { data } = useSWRInfinite(getKey, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Bound Mutation Profile Component in JSX\nDESCRIPTION: Example of using bound mutation to update user profile data with immediate local updates and revalidation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.pt-BR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile () {\n  const { data, mutate } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>Meu nome é {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        await requestUpdateUsername(newName)\n        mutate({ ...data, name: newName })\n      }}>Deixe meu nome em caixa alta!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSWRMutation in React\nDESCRIPTION: Demonstrates the basic usage of useSWRMutation hook for handling remote mutations in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ja.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nasync function sendRequest(url, { arg }: { arg: { username: string } }) {\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(arg)\n  }).then(res => res.json())\n}\n\nfunction App() {\n  const { trigger, isMutating } = useSWRMutation('/api/user', sendRequest, /* options */)\n\n  return (\n    <button\n      disabled={isMutating}\n      onClick={async () => {\n        try {\n          const result = await trigger({ username: 'johndoe' }, /* options */)\n        } catch (e) {\n          // エラーハンドリング\n        }\n      }}\n    >\n      Create User\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR in Client Components\nDESCRIPTION: Example of using SWR hooks in a Next.js Client Component with the 'use client' directive.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.zh-CN.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport useSWR from 'swr'\nexport default function Page() {\n  const { data } = useSWR('/api/user', fetcher)\n  return <h1>{data.name}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global Mutate Function Directly in React\nDESCRIPTION: Shows how to import and use the global mutate function directly from SWR, allowing for data mutation without using the useSWRConfig hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mutate } from \"swr\"\n\nfunction App() {\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Preload Tag Implementation\nDESCRIPTION: Uses the HTML rel=\"preload\" attribute to prefetch data before JavaScript loads, enabling faster initial data loading for SWR requests.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"/api/data\" as=\"fetch\" crossorigin=\"anonymous\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Component with SWR Deduplication in React\nDESCRIPTION: Example showing how SWR deduplicates multiple identical requests when the same hook is used across multiple components. Even with 5 Avatar components rendering, only one network request is made.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useUser () {\n  return useSWR('/api/user', fetcher)\n}\n\nfunction Avatar () {\n  const { data, error } = useUser()\n\n  if (error) return <Error />\n  if (!data) return <Spinner />\n\n  return <img src={data.avatar_url} />\n}\n\nfunction App () {\n  return <>\n    <Avatar />\n    <Avatar />\n    <Avatar />\n    <Avatar />\n    <Avatar />\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Object Configurations in SWRConfig\nDESCRIPTION: Exemple de configurations SWR imbriquées utilisant des objets. Les configurations enfants fusionnent ou remplacent les configurations parentes selon le type de valeur.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.fr-FR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SWRConfig, useSWRConfig } from 'swr'\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{\n        dedupingInterval: 100,\n        refreshInterval: 100,\n        fallback: { a: 1, b: 1 },\n      }}\n    >\n      <SWRConfig\n        value={{\n          dedupingInterval: 200, // remplacera la valeur mère puisque qu'elle est primitive\n          fallback: { a: 2, c: 2 }, // fussionera avec la valeur mère puisque qu'elle est un objet fussionnable\n        }}\n      >\n        <Page />\n      </SWRConfig>\n    </SWRConfig>\n  )\n}\n\nfunction Page() {\n  const config = useSWRConfig()\n  // {\n  //   dedupingInterval: 200,\n  //   refreshInterval: 100,\n  //   fallback: { a: 2,  b: 1, c: 2 },\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Fetcher with SWRConfig\nDESCRIPTION: Example of adding a default fetcher in SWR v1.0, which no longer provides a built-in default fetcher. Shows implementation both globally and per hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ fetcher: (url) => fetch(url).then(res => res.json()) }}>\n  <App/>\n</SWRConfig>\n\n// ... or\nuseSWR(key, (url) => fetch(url).then(res => res.json()))\n```\n\n----------------------------------------\n\nTITLE: Error Handling Types with useSWR\nDESCRIPTION: Example of specifying error types when using useSWR for better type safety in error handling.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = useSWR<User, Error>(uid, fetcher);\n// `data` will be `User | undefined`.\n// `error` will be `Error | undefined`.\n```\n\n----------------------------------------\n\nTITLE: Functional Configuration in Nested SWRConfig\nDESCRIPTION: Demonstrates using a functional approach to configure nested SWRConfig components, where the inner configuration receives the parent configuration as an argument and returns a new configuration.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SWRConfig, useSWRConfig } from 'swr'\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{\n        dedupingInterval: 100,\n        refreshInterval: 100,\n        fallback: { a: 1, b: 1 },\n      }}\n    >\n      <SWRConfig\n        value={parent => ({\n          dedupingInterval: parent.dedupingInterval * 5,\n          fallback: { a: 2, c: 2 },\n        })}\n      >\n        <Page />\n      </SWRConfig>\n    </SWRConfig>\n  )\n}\n\nfunction Page() {\n  const config = useSWRConfig()\n  // {\n  //   dedupingInterval: 500,\n  //   fallback: { a: 2, c: 2 },\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Objects as Keys to useSWR\nDESCRIPTION: Demonstrates how to pass an object directly as a key to useSWR. Since version 1.1.0, object keys are automatically serialized under the hood.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.pt-BR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: orders } = useSWR({ url: '/api/orders', args: user }, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Defining useSWRSubscription Hook TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the useSWRSubscription hook, showing its parameters and return type structure.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseSWRSubscription<Data, Error>(key: Key, subscribe: (key: Key, options: { next: (error?: Error | null, data: Data) => void }) => () => void): { data?: Data, error?: Error }\n```\n\n----------------------------------------\n\nTITLE: Defining useSWRSubscription Hook in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the useSWRSubscription hook. It specifies the function signature, including generic types for Data and Error, and the expected return type.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.zh-CN.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseSWRSubscription<Data, Error>(key: Key, subscribe: (key: Key, options: { next: (error?: Error | null, data: Data) => void }) => () => void): { data?: Data, error?: Error }\n```\n\n----------------------------------------\n\nTITLE: WebSocket Integration Example\nDESCRIPTION: Example demonstrating how to use useSWRSubscription with WebSocket connections for real-time updates.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\n\nfunction App() {\n  const { data, error } = useSWRSubscription('ws://...', (key, { next }) => {\n    const socket = new WebSocket(key)\n    socket.addEventListener('message', (event) => next(null, event.data))\n    socket.addEventListener('error', (event) => next(event.error))\n    return () => socket.close()\n  })\n  \n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n  return <div>hello {data}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SWR Configurations with Function Value in React\nDESCRIPTION: This code shows how to use a function value in SWRConfig to extend configurations in a nested manner. It allows for more flexible configuration in large codebases by modifying parent configurations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={parentConfig => ({\n    dedupingInterval: parentConfig.dedupingInterval * 5,\n    refreshInterval: 100,\n  })}\n>\n  <Page />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Accessing Global SWR Configurations in React Component\nDESCRIPTION: This example demonstrates how to use the useSWRConfig hook to access global SWR configurations, including mutate and cache, within a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.es-ES.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Component () {\n  const { refreshInterval, mutate, cache, ...restConfig } = useSWRConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Race Conditions with useSWRMutation in React\nDESCRIPTION: This example illustrates how 'useSWRMutation' automatically handles race conditions between mutations and regular SWR data fetching in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Profile() {\n  const { data } = useSWR('/api/user', getUser, { revalidateInterval: 3000 })\n  const { trigger } = useSWRMutation('/api/user', updateUser)\n\n  return <>\n    {data ? data.username : null}\n    <button onClick={() => trigger()}>Update User</button>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Migration: Updating Type Imports for useSWRInfinite\nDESCRIPTION: Shows how to update TypeScript type imports for useSWRInfinite in v1.0, which now need to be imported from 'swr/infinite'.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- import { SWRInfiniteConfiguration, SWRInfiniteResponse } from 'swr'\n+ import { SWRInfiniteConfiguration, SWRInfiniteResponse } from 'swr/infinite'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cache Provider in SWRConfig for React\nDESCRIPTION: This snippet shows how to set up a custom cache provider using SWRConfig. It uses a Map as the cache storage.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: () => new Map() }}>\n  <Dashboard />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Revalidations in SWR\nDESCRIPTION: This snippet demonstrates how to disable all automatic revalidations by setting specific options in the useSWR hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/revalidation.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR(key, fetcher, {\n  revalidateIfStale: false,\n  revalidateOnFocus: false,\n  revalidateOnReconnect: false\n})\n\n// equivalent to\nuseSWRImmutable(key, fetcher)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Subscription Example\nDESCRIPTION: Implementation example showing how to use useSWRSubscription with WebSocket connections.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\n\nfunction App() {\n  const { data, error } = useSWRSubscription('ws://...', (key, { next }) => {\n    const socket = new WebSocket(key)\n    socket.addEventListener('message', (event) => next(null, event.data))\n    socket.addEventListener('error', (event) => next(event.error))\n    return () => socket.close()\n  })\n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n  return <div>hello {data}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Object Arguments to SWR Hook in JavaScript\nDESCRIPTION: Demonstrates how to pass object arguments to an SWR hook. This method is supported in SWR version 1.1.0 and later, with automatic serialization of object-like keys.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: orders } = useSWR({ url: '/api/orders', args: user }, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for Next.js SSR with SWR\nDESCRIPTION: This code snippet embeds a CodeSandbox example demonstrating SWR usage with Next.js SSR. It sets up an iframe with specific styling and security attributes to display the interactive example.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/ssr.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-0huort?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Firebase Integration Example\nDESCRIPTION: Example showing how to use useSWRSubscription with Firebase Realtime Database to track post views.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\n\nfunction Post({ id }) {\n  const { data } = useSWRSubscription(['views', id], ([_, postId], { next }) => {\n    const ref = firebase.database().ref('views/' + postId)\n    ref.on('value', \n      snapshot => next(null, snapshot.data()),\n      err => next(err)\n    )\n    return () => ref.off()\n  })\n\n  return <span>Your post has {data} views!</span>\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SWR Configurations with Parent Config\nDESCRIPTION: Example showing how to extend SWR configurations using SWRConfig component. The configuration can now accept a function that receives parent config and returns modified settings.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={parentConfig => ({\n    dedupingInterval: parentConfig.dedupingInterval * 5,\n    refreshInterval: 100,\n  })}\n>\n  <Page />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Using useSWRConfig Hook in React\nDESCRIPTION: Demonstrates how to use the new useSWRConfig hook to access global SWR configurations including cache and mutate function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Foo () {\n  const { refreshInterval, cache, mutate, ...restConfig } = useSWRConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Race Conditions with useSWR and useSWRMutation in React\nDESCRIPTION: This snippet demonstrates how to use useSWR for data fetching and useSWRMutation for data updates to avoid race conditions. It shows a Profile component that displays a username and provides an update button.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Profile() {\n  const { data } = useSWR('/api/user', getUser, { revalidateInterval: 3000 })\n  const { trigger } = useSWRMutation('/api/user', updateUser)\n\n  return <>\n    {data ? data.username : null}\n    <button onClick={() => trigger()}>Update User</button>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Migration - Initial Data to Fallback Data\nDESCRIPTION: Migration guide showing the rename from initialData to fallbackData.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.en-US.mdx#2025-04-19_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- useSWR(key, fetcher, { initialData: ... })\n+ useSWR(key, fetcher, { fallbackData: ... })\n```\n\n----------------------------------------\n\nTITLE: SWR State Logging Example with Full Dependencies\nDESCRIPTION: Demonstrates SWR's state management with all four stateful values (data, error, isLoading, isValidating) during a complete fetch lifecycle including error and retry scenarios.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const { data, error, isLoading, isValidating } = useSWR('/api', fetcher)\n  console.log(data, error, isLoading, isValidating)\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Implementation with useSWR in React\nDESCRIPTION: Demonstrates a simple pagination implementation using useSWR hook with a page index state to fetch paginated data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const [pageIndex, setPageIndex] = useState(0);\n\n  // La URL de la API incluye el índice de la página, que es un React state.\n  const { data } = useSWR(`/api/data?page=${pageIndex}`, fetcher);\n\n  // ... manejar los estados de carga y error\n\n  return <div>\n    {data.map(item => <div key={item.id}>{item.name}</div>)}\n    <button onClick={() => setPageIndex(pageIndex - 1)}>Previous</button>\n    <button onClick={() => setPageIndex(pageIndex + 1)}>Next</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SWR Provider for Next.js Client Components\nDESCRIPTION: Shows how to create a separate SWR provider component for use in Next.js Client Components, allowing global configuration.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { SWRConfig } from 'swr'\nexport const SWRProvider = ({ children }) => {\n  return <SWRConfig>{children}</SWRConfig>\n};\n```\n\n----------------------------------------\n\nTITLE: Basic useSWRMutation Implementation\nDESCRIPTION: Shows basic implementation of useSWRMutation with error handling and loading states.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation'\n\nasync function sendRequest(url, { arg }: { arg: { username: string } }) {\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(arg)\n  }).then(res => res.json())\n}\n\nfunction App() {\n  const { trigger, isMutating } = useSWRMutation('/api/user', sendRequest, /* options */)\n\n  return (\n    <button\n      disabled={isMutating}\n      onClick={async () => {\n        try {\n          const result = await trigger({ username: 'johndoe' }, /* options */)\n        } catch (e) {\n          // error handling\n        }\n      }}\n    >\n      Create User\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Demo for Next.js SSR with SWR\nDESCRIPTION: An iframe implementation that embeds a CodeSandbox demo showcasing SWR's server-side rendering functionality in Next.js. The demo includes styling configurations and necessary security permissions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/ssr.ru.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-0huort?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Preloading Data with SWR\nDESCRIPTION: Example demonstrating SWR's preload API which allows starting data fetching before components render, improving perceived performance by having data ready when components need it.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { preload } from 'swr'\n\nconst fetcher = (url) => fetch(url).then((res) => res.json())\n\n// You can call the preload function in anywhere\npreload('/api/user', fetcher)\n\nfunction Profile() {\n  // The component that actually uses the data:\n  const { data, error } = useSWR('/api/user', fetcher)\n  // ...\n}\n\nexport function Page () {\n  return <Profile/>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Subscribe Function with Data Transformation\nDESCRIPTION: This example shows how to implement a subscribe function that transforms the incoming data before updating the state. It uses a function passed to the next function's data parameter to concatenate new data with previous data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.zh-CN.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction subscribe(key, { next }) {\n  const sub = remote.subscribe(key, (err, data) => next(err, prev => prev.concat(data)))\n  return () => sub.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalStorage-Based Persistent Cache Provider\nDESCRIPTION: A complete implementation of a persistent cache provider using localStorage. It initializes from localStorage, writes back on page unload, and uses a Map for performance.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction localStorageProvider() {\n  // When initializing, we restore the data from `localStorage` into a map.\n  const map = new Map(JSON.parse(localStorage.getItem('app-cache') || '[]'))\n\n  // Before unloading the app, we write back all the data into `localStorage`.\n  window.addEventListener('beforeunload', () => {\n    const appCache = JSON.stringify(Array.from(map.entries()))\n    localStorage.setItem('app-cache', appCache)\n  })\n\n  // We still use the map for write & read for performance.\n  return map\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR with React Suspense in JSX\nDESCRIPTION: This snippet demonstrates how to use SWR with React Suspense. It shows the basic setup for a Profile component using SWR with the suspense option enabled, wrapped in a Suspense component for loading state handling.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/suspense.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport useSWR from 'swr'\n\nfunction Profile () {\n  const { data } = useSWR('/api/user', fetcher, { suspense: true })\n  return <div>hello, {data.name}</div>\n}\n\nfunction App () {\n  return (\n    <Suspense fallback={<div>loading...</div>}>\n      <Profile/>\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Laggy Data Middleware with SWR\nDESCRIPTION: Example usage of the laggy middleware with useSWR, showing how to access the extended properties like isLagging and resetLaggy provided by the middleware.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst { data, isLagging, resetLaggy } = useSWR(key, fetcher, { use: [laggy] })\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Page Component with useSWR\nDESCRIPTION: This example shows how to create an abstraction for a page component using useSWR. It separates the data fetching logic into a reusable component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page ({ index }) {\n  const { data } = useSWR(`/api/data?page=${index}`, fetcher);\n\n  // ... handle loading and error states\n\n  return data.map(item => <div key={item.id}>{item.name}</div>)\n}\n\nfunction App () {\n  const [pageIndex, setPageIndex] = useState(0);\n\n  return <div>\n    <Page index={pageIndex}/>\n    <button onClick={() => setPageIndex(pageIndex - 1)}>Previous</button>\n    <button onClick={() => setPageIndex(pageIndex + 1)}>Next</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR with React Suspense in JSX\nDESCRIPTION: This snippet demonstrates how to use SWR with React Suspense. It shows the basic setup of a Profile component using SWR for data fetching, wrapped in a Suspense component for loading state management.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/suspense.zh-CN.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport useSWR from 'swr'\n\nfunction Profile () {\n  const { data } = useSWR('/api/user', fetcher, { suspense: true })\n  return <div>hello, {data.name}</div>\n}\n\nfunction App () {\n  return (\n    <Suspense fallback={<div>loading...</div>}>\n      <Profile/>\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Création d'un hook personnalisé avec SWR en React\nDESCRIPTION: Exemple de création d'un hook useUser réutilisable basé sur SWR pour récupérer les données d'un utilisateur.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.fr-FR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useUser (id) {\n  const { data, error, isLoading } = useSWR(`/api/user/${id}`, fetcher)\n\n  return {\n    user: data,\n    isLoading,\n    isError: error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exemple de structure d'application React avant l'utilisation de SWR\nDESCRIPTION: Structure d'une application React avec gestion d'état et passage de props avant l'utilisation de SWR pour la récupération de données.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.fr-FR.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page ({ userId }) {\n  const [user, setUser] = useState(null)\n\n  // Récupération des données\n  useEffect(() => {\n    fetch(`/api/user/${userId}`)\n      .then(res => res.json())\n      .then(data => setUser(data))\n  }, [userId])\n\n  // Etat de chargement global\n  if (!user) return <Spinner/>\n\n  return <div>\n    <Navbar user={user} />\n    <Content user={user} />\n  </div>\n}\n\nfunction Navbar ({ user }) {\n  return <div>\n    ...\n    <Avatar user={user} />\n  </div>\n}\n\nfunction Content ({ user }) {\n  return <h1>Bon retour, {user.name}</h1>\n}\n\nfunction Avatar ({ user }) {\n  return <img src={user.avatar} alt={user.name} />\n}\n```\n\n----------------------------------------\n\nTITLE: Préchargement pour éviter les problèmes de cascade en mode Suspense\nDESCRIPTION: Utilisation de preload avant le rendu pour éviter les problèmes de cascade lors de l'utilisation du mode Suspense de React avec SWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.fr-FR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { preload } from 'swr'\n\n// doit être appelé avant le rendu\npreload('/api/user', fetcher);\npreload('/api/movies', fetcher);\n\nconst Page = () => {\n  // Les hooks useSWR ci-dessous suspendront le rendu, mais les demandes à `/api/user` et `/api/movies` ont déjà commencé par `preload`,\n  // donc le problème de cascade ne se produit pas.\n  const { data: user } = useSWR('/api/user', fetcher, { suspense: true });\n  const { data: movies } = useSWR('/api/movies', fetcher, { suspense: true });\n  return (\n    <div>\n      <User user={user} />\n      <Movies movies={movies} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SWR with Path Imports in v1.0\nDESCRIPTION: Example of the new import paths in SWR v1.0 that enable better tree-shaking. The example shows importing the core useSWR hook and the useSWRInfinite hook from separate paths.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useSWR from 'swr'\nimport useSWRInfinite from 'swr/infinite'\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Key Serialization Middleware for SWR in JavaScript\nDESCRIPTION: Creates a middleware that serializes object keys to ensure stability when passing serializable objects as keys in older SWR versions (< 1.1.0).\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.en-US.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction serialize(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Serialize the key.\n    const serializedKey = Array.isArray(key) ? JSON.stringify(key) : key\n\n    // Pass the serialized key, and unserialize it in fetcher.\n    return useSWRNext(serializedKey, (k) => fetcher(...JSON.parse(k)), config)\n  }\n}\n\n// ...\nuseSWR(['/api/user', { id: '73' }], fetcher, { use: [serialize] })\n\n// ... or enable it globally with\n<SWRConfig value={{ use: [serialize] }}>\n```\n\n----------------------------------------\n\nTITLE: Defining useSWRSubscription Hook TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the useSWRSubscription hook, showing the hook's signature with generic types for Data and Error.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseSWRSubscription<Data, Error>(key: Key, subscribe: (key: Key, options: { next: (error?: Error | null, data: Data) => void }) => () => void): { data?: Data, error?: Error }\n```\n\n----------------------------------------\n\nTITLE: Mutating Multiple Keys with SWR\nDESCRIPTION: Demonstrates how to use the global mutate API to mutate or revalidate multiple keys using a filter function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mutate } from 'swr'\n// Or from the hook if you have customized your cache provider:\n// { mutate } = useSWRConfig()\n\n// Mutate single resource\nmutate(key)\n\n// Mutate multiple resources and clear the cache (set to undefined)\nmutate(\n  key => typeof key === 'string' && key.startsWith('/api/item?id='),\n  undefined,\n  { revalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Using SWR with Complex Keys in Next.js Pre-rendering\nDESCRIPTION: Shows how to use SWR with complex keys (arrays or functions) in Next.js pre-rendering scenarios, utilizing the unstable_serialize function for key serialization.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.es-ES.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { unstable_serialize } from 'swr'\n\nexport async function getStaticProps () {\n  const article = await getArticleFromAPI(1)\n  return {\n    props: {\n      fallback: {\n        // unstable_serialize() array style key\n        [unstable_serialize(['api', 'article', 1])]: article,\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // using an array style key.\n  const { data } = useSWR(['api', 'article', 1], fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Cache Data with Mutate\nDESCRIPTION: Example of how to safely modify or clear the SWR cache using the mutate function instead of direct cache manipulation, which could cause undefined behavior.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.en-US.mdx#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate } = useSWRConfig()\n\nmutate(\n  key => true, // which cache keys are updated\n  undefined, // update cache data to `undefined`\n  { revalidate: false } // do not revalidate\n)\n```\n\n----------------------------------------\n\nTITLE: Création d'une fonction fetcher pour SWR en JavaScript\nDESCRIPTION: Définition d'une fonction fetcher simple pour SWR, qui encapsule la fonction fetch native et retourne le résultat en JSON.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.fr-FR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst fetcher = (...args) => fetch(...args).then(res => res.json())\n```\n\n----------------------------------------\n\nTITLE: Incorrect Approach for Multiple Arguments with useSWR\nDESCRIPTION: Demonstrates an incorrect way to pass multiple arguments to the fetcher function. This approach is problematic because the cache key remains '/api/user' regardless of token changes.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', url => fetchWithToken(url, token))\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering with SWR and Complex Keys in Next.js\nDESCRIPTION: Demonstrates how to use SWR with complex keys (array type) in Next.js getStaticProps, using unstable_serialize for key serialization.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.fr-FR.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { unstable_serialize } from 'swr'\n\nexport async function getStaticProps () {\n  const article = await getArticleFromAPI(1)\n  return {\n    props: {\n      fallback: {\n        // unstable_serialize() array style key\n        [unstable_serialize(['api', 'article', 1])]: article,\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // using an array style key.\n  const { data } = useSWR(['api', 'article', 1], fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Revalidations in SWR\nDESCRIPTION: This code shows how to disable all automatic revalidations for immutable resources using the useSWRImmutable hook or by setting specific options in the useSWR hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/revalidation.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport useSWRImmutable from 'swr/immutable'\n\n// ...\nuseSWRImmutable(key, fetcher, options)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR(key, fetcher, {\n  revalidateIfStale: false,\n  revalidateOnFocus: false,\n  revalidateOnReconnect: false\n})\n\n// equivalente a\nuseSWRImmutable(key, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Nesting SWRConfig with Functional Configuration in React\nDESCRIPTION: This example demonstrates how to use a functional configuration with nested SWRConfig components. The function receives the parent configuration and returns a new configuration.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SWRConfig, useSWRConfig } from 'swr'\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{\n        dedupingInterval: 100,\n        refreshInterval: 100,\n        fallback: { a: 1, b: 1 },\n      }}\n    >\n      <SWRConfig\n        value={parent => ({\n          dedupingInterval: parent.dedupingInterval * 5,\n          fallback: { a: 2, c: 2 },\n        })}\n      >\n        <Page />\n      </SWRConfig>\n    </SWRConfig>\n  )\n}\n\nfunction Page() {\n  const config = useSWRConfig()\n  // {\n  //   dedupingInterval: 500,\n  //   fallback: { a: 2, c: 2 },\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe Function with Data Updater\nDESCRIPTION: Implementation of a subscribe function that uses a updater function to modify previous data state.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction subscribe(key, { next }) {\n  const sub = remote.subscribe(key, (err, data) => next(err, prev => prev.concat(data)))\n  return () => sub.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Data Pre-filling with SWR\nDESCRIPTION: Example of pre-filling the SWR cache with existing data using the fallbackData option.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.zh-CN.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWR('/api/data', fetcher, { fallbackData: prefetchedData })\n```\n\n----------------------------------------\n\nTITLE: Nesting SWRConfig with Object Configuration in React\nDESCRIPTION: This snippet illustrates how to nest SWRConfig components with object configurations. It shows how values are merged or overridden based on their types.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SWRConfig, useSWRConfig } from 'swr'\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{\n        dedupingInterval: 100,\n        refreshInterval: 100,\n        fallback: { a: 1, b: 1 },\n      }}\n    >\n      <SWRConfig\n        value={{\n          dedupingInterval: 200, // anulará el valor del objeto padre, ya que el valor es primitivo\n          fallback: { a: 2, c: 2 }, // se fusionará con el valor del objeto padre, ya que el valor es un objeto fusionable\n        }}\n      >\n        <Page />\n      </SWRConfig>\n    </SWRConfig>\n  )\n}\n\nfunction Page() {\n  const config = useSWRConfig()\n  // {\n  //   dedupingInterval: 200,\n  //   refreshInterval: 100,\n  //   fallback: { a: 2,  b: 1, c: 2 },\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Utilisation de génériques avec SWR en TypeScript\nDESCRIPTION: Exemples d'utilisation de génériques pour spécifier les types de données et de configuration avec SWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.fr-FR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 🔹 A. Utiliser un fetcher typé :\n// `fetcher` est `(endpoint: string) => User`.\nconst { data } = useSWR('/api/user', getUser)\n\n// 🔹 B. Spécifier le type de données :\n// `fetcher` est généralement de type `any`.\nconst { data } = useSWR<User>('/api/user', fetcher)\n\nimport useSWR from 'swr'\nimport type { SWRConfiguration } from 'swr'\n\nconst config: SWRConfiguration = {\n  fallbackData: \"fallback\",\n  revalidateOnMount: false\n  // ...\n}\n\nconst { data } = useSWR<string[]>('/api/data', fetcher, config)\n```\n\n----------------------------------------\n\nTITLE: Configuration de useSWRSubscription avec TypeScript\nDESCRIPTION: Exemples de configuration de useSWRSubscription avec une fonction d'abonnement en ligne et une déclaration séparée, en utilisant SWRSubscriptionOptions et SWRSubscription.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.fr-FR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\nimport type { SWRSubscriptionOptions } from 'swr/subscription'\n\nconst { data, error } = useSWRSubscription('key', \n  (key, { next }: SWRSubscriptionOptions<number, Error>) => {\n  //^ key sera inféré comme `string`\n  //....\n  })\n  return {\n    data,\n    //^ data sera inféré comme `number | undefined`\n    error\n    //^ error sera inféré comme `Error | undefined`\n  }\n}\n\nimport type { SWRSubscription } from 'swr/subscription'\n\n/** \n * Le premier générique est Key\n * Le second générique est Data\n * Le troisième générique est Error\n */\nconst sub: SWRSubscription<string, number, Error> = (key, { next }) => {                         \n  //......\n}\nconst { data, error } = useSWRSubscription('key', sub)\n```\n\n----------------------------------------\n\nTITLE: Implementing AppState Focus Detection in React Native\nDESCRIPTION: Detailed implementation of focus detection using React Native's AppState API within SWR configuration.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/react-native.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AppState } from 'react-native'\n\n// ...\n\n<SWRConfig\n  value={{\n    provider: () => new Map(),\n    isVisible: () => { return true },\n    initFocus(callback) {\n      let appState = AppState.currentState\n\n      const onAppStateChange = (nextAppState) => {\n        /* If it's resuming from background or inactive mode to active one */\n        if (appState.match(/inactive|background/) && nextAppState === 'active') {\n          callback()\n        }\n        appState = nextAppState\n      }\n\n      // Subscribe to the app state change events\n      const subscription = AppState.addEventListener('change', onAppStateChange)\n\n      return () => {\n        subscription.remove()\n      }\n    }\n  }}\n>\n  <App>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Revalidation with Global Mutate in React\nDESCRIPTION: Demonstrates how to trigger revalidation for a specific key using the global mutate function in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ja.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction App () {\n  const { mutate } = useSWRConfig()\n\n  return (\n    <div>\n      <Profile />\n      <button onClick={() => {\n        // クッキーを期限切れとして設定します\n        document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;'\n\n        // この key を使っている全ての SWR フックに再検証を伝えます\n        mutate('/api/user')\n      }}>\n        Logout\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Data Fetching in React Components\nDESCRIPTION: Illustrates the traditional approach of fetching data using useEffect in a top-level component and passing it down to child components via props.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// page component\n\nfunction Page ({ userId }) {\n  const [user, setUser] = useState(null)\n\n  // fetch data\n  useEffect(() => {\n    fetch(`/api/user/${userId}`)\n      .then(res => res.json())\n      .then(data => setUser(data))\n  }, [userId])\n\n  // global loading state\n  if (!user) return <Spinner/>\n\n  return <div>\n    <Navbar user={user} />\n    <Content user={user} />\n  </div>\n}\n\n// child components\n\nfunction Navbar ({ user }) {\n  return <div>\n    ...\n    <Avatar user={user} />\n  </div>\n}\n\nfunction Content ({ user }) {\n  return <h1>Welcome back, {user.name}</h1>\n}\n\nfunction Avatar ({ user }) {\n  return <img src={user.avatar} alt={user.name} />\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic Updates with Mutate in React\nDESCRIPTION: Illustrates how to implement optimistic updates using the mutate function with optimisticData and rollbackOnError options in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ja.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction Profile () {\n  const { mutate } = useSWRConfig()\n  const { data } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button onClick={async () => {\n        const newName = data.name.toUpperCase()\n        const user = { ...data, name: newName }\n        const options = {\n          optimisticData: user,\n          rollbackOnError(error) {\n            // タイムアウトの AbortError だった場合はロールバックしません\n            return error.name !== 'AbortError'\n          },\n        }\n\n        // ローカルのデータを即座に更新します\n        // データを更新するためにリクエストを送信します\n        // ローカルデータが正しいことを保証するために再検証 (再フェッチ) を発行します\n        mutate('/api/user', updateFn(user), options);\n      }}>Uppercase my name!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Function with Data Update\nDESCRIPTION: Shows how to use an updater function to modify existing data when new data arrives.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction subscribe(key, { next }) {\n  const sub = remote.subscribe(key, (err, data) => next(err, prev => prev.concat(data)))\n  return () => sub.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interval Revalidation in SWR\nDESCRIPTION: Sets up automatic revalidation at regular intervals using the refreshInterval option in useSWR hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/revalidation.ko.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/todos', fetcher, { refreshInterval: 1000 })\n```\n\n----------------------------------------\n\nTITLE: Equivalent SWR Middleware Chaining in JavaScript\nDESCRIPTION: Shows the programmatic equivalent of nested SWRConfig middleware configuration, where middleware arrays are combined into a single array passed to useSWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nuseSWR(key, fetcher, { use: [a, b, c] })\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Cache Provider in React Component\nDESCRIPTION: This code snippet shows how to access the current cache provider and other SWR configurations within a React component using the useSWRConfig hook. It demonstrates retrieving the cache, mutate function, and other extra configurations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Avatar() {\n  const { cache, mutate, ...extraConfig } = useSWRConfig()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global SWR Configurations in React Components\nDESCRIPTION: Utilisation du hook useSWRConfig pour accéder aux configurations globales SWR, y compris l'intervalle de rafraîchissement, la fonction mutate et le cache.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.fr-FR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Component () {\n  const { refreshInterval, mutate, cache, ...restConfig } = useSWRConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Revalidation with Global Mutate in React\nDESCRIPTION: Demonstrates how to trigger revalidation of a specific key using the global mutate function in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ko.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction App () {\n  const { mutate } = useSWRConfig()\n\n  return (\n    <div>\n      <Profile />\n      <button onClick={() => {\n        document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;'\n        mutate('/api/user')\n      }}>\n        Logout\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Subscription Function Example\nDESCRIPTION: Demonstrates a basic subscription implementation with error handling and cleanup.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction subscribe(key, { next }) {\n  const sub = remote.subscribe(key, (err, data) => next(err, data))\n  return () => sub.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR Provider in Next.js Server Components\nDESCRIPTION: Demonstrates how to use the SWR provider component in a Next.js Server Component, maintaining server-side rendering capabilities.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// This is still a server component\nimport { SWRProvider } from './swr-provider'\nexport default function Page() {\n  return (\n    <SWRProvider>\n      <h1>hello SWR</h1>\n    </SWRProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Fetching with SWR and Suspense in React\nDESCRIPTION: This snippet illustrates conditional fetching with SWR in Suspense mode. It shows how the 'data' property behaves when the request is paused due to a condition not being met.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/suspense.zh-CN.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Profile () {\n  const { data } = useSWR(isReady ? '/api/user' : null, fetcher, { suspense: true })\n\n  // If `isReady` is false, `data` will be `undefined`\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Provider Implementation\nDESCRIPTION: Shows how to implement a custom cache provider using the new provider option.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  provider: () => myCache\n}}>\n  <App/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Extending SWR Middleware Configuration in React Components\nDESCRIPTION: Illustrates how middleware configurations are extended when nested SWRConfig components are used, resulting in a combined middleware array.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Bar () {\n  useSWR(key, fetcher, { use: [c] })\n  // ...\n}\n\nfunction Foo() {\n  return (\n    <SWRConfig value={{ use: [a] }}>\n      <SWRConfig value={{ use: [b] }}>\n        <Bar/>\n      </SWRConfig>\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalStorage-based Persistent Cache in JavaScript\nDESCRIPTION: This example provides an implementation of a LocalStorage-based persistent cache for SWR. It creates a cache provider that syncs data with localStorage, restoring data on initialization and saving data before the app unloads.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.es-ES.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction localStorageProvider() {\n  // When initializing, we restore the data from `localStorage` into a map.\n  const map = new Map(JSON.parse(localStorage.getItem('app-cache') || '[]'))\n\n  // Before unloading the app, we write back all the data into `localStorage`.\n  window.addEventListener('beforeunload', () => {\n    const appCache = JSON.stringify(Array.from(map.entries()))\n    localStorage.setItem('app-cache', appCache)\n  })\n\n  // We still use the map for write & read for performance.\n  return map\n}\n```\n\n----------------------------------------\n\nTITLE: Guaranteed Data Access with SWR Suspense\nDESCRIPTION: Shows how Suspense mode ensures data is always available during render, eliminating the need for undefined checks.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/suspense.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Profile () {\n  const { data } = useSWR('/api/user', fetcher, { suspense: true })\n\n  // `data` will never be `undefined`\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Path Imports in SWR 1.0\nDESCRIPTION: Demonstrates the new path import syntax for SWR modules, allowing better tree-shaking support.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport useSWR from 'swr'\nimport useSWRInfinite from 'swr/infinite'\n```\n\n----------------------------------------\n\nTITLE: Pagination Component Abstraction with Page Component\nDESCRIPTION: Shows how to create a reusable Page component for pagination and implement preloading of the next page.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/pagination.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page ({ index }) {\n  const { data } = useSWR(`/api/data?page=${index}`, fetcher);\n\n  // ... manejar los estados de carga y error\n\n  return data.map(item => <div key={item.id}>{item.name}</div>)\n}\n\nfunction App () {\n  const [pageIndex, setPageIndex] = useState(0);\n\n  return <div>\n    <Page index={pageIndex}/>\n    <div style={{ display: 'none' }}><Page index={pageIndex + 1}/></div>\n    <button onClick={() => setPageIndex(pageIndex - 1)}>Previous</button>\n    <button onClick={() => setPageIndex(pageIndex + 1)}>Next</button>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR Provider in Server Component\nDESCRIPTION: Shows how to use the SWR Provider Client Component within a Server Component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.zh-CN.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// 这仍然是一个 Server Component\nimport { SWRProvider } from './swr-provider'\nexport default function Page() {\n  return (\n    <SWRProvider>\n      <h1>hello SWR</h1>\n    </SWRProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Demo for Next.js SSR with SWR\nDESCRIPTION: An iframe implementation that embeds a CodeSandbox demonstration showing SWR usage with Next.js server-side rendering. The sandbox includes styling configurations and necessary security permissions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/ssr.ko.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-j9b2y?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Mutating Multiple Cache Keys in SWR\nDESCRIPTION: Example showing how to use the global mutate API with a filter function to update or invalidate multiple cache entries that match specific criteria.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mutate } from 'swr'\n// Or from the hook if you have customized your cache provider:\n// { mutate } = useSWRConfig()\n\n// Mutate single resource\nmutate(key)\n\n// Mutate multiple resources and clear the cache (set to undefined)\nmutate(\n  key => typeof key === 'string' && key.startsWith('/api/item?id='),\n  undefined,\n  { revalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Utilisation de base de useSWR dans un composant React\nDESCRIPTION: Exemple d'utilisation du hook useSWR dans un composant Profile pour récupérer et afficher les données d'un utilisateur.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.fr-FR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile ({ userId }) {\n  const { data, error, isLoading } = useSWR(`/api/user/${userId}`, fetcher)\n\n  if (error) return <div>échec du chargement</div>\n  if (isLoading) return <div>chargement...</div>\n\n  // rendu des données\n  return <div>bonjour {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Cache Data with SWR's Mutate Function in React\nDESCRIPTION: This example shows how to use SWR's mutate function with a filter to clear all cache data. This is particularly useful for scenarios like logging out of an application.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst clearCache = () => mutate(\n  () => true,\n  undefined,\n  { revalidate: false }\n)\n\n// ...退出登陆时清除所有缓存\nclearCache()\n```\n\n----------------------------------------\n\nTITLE: Using Immutable Mode with SWR in React\nDESCRIPTION: Demonstrates how to use the useSWRImmutable hook for resources that never change, disabling automatic revalidations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRImmutable from 'swr/immutable'\n\n// ...\n\nuseSWRImmutable(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Using Object Keys with useSWR\nDESCRIPTION: Demonstrates how to use an object as the key parameter in useSWR, which will be passed directly to the fetcher function. Since SWR 1.1.0, object keys are automatically serialized.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.fr-FR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: orders } = useSWR({ url: '/api/orders', args: user }, fetcher)\n```\n\n----------------------------------------\n\nTITLE: SWR Console Output Example\nDESCRIPTION: Demonstrates the console output during a complete SWR request lifecycle including initial request, error, and retry.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nundefined undefined true true  // => start fetching\nundefined Error false false    // => end fetching, got an error\nundefined Error true true      // => start retrying\nData undefined false false     // => end retrying, get the data\n```\n\n----------------------------------------\n\nTITLE: Mutating Multiple Keys in SWR Cache\nDESCRIPTION: Demonstrates how to use SWR's global mutate function with a filter function to mutate or invalidate multiple cache entries matching specific criteria.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mutate } from 'swr'\n// Ou do hook se você tiver customizado seu provedor de cache:\n// { mutate } = useSWRConfig()\n\n// Modificar um único recurso\nmutate(key)\n\n// Modificar múltiplos recursos e limpar o cache (definir como undefined)\nmutate(\n  key => typeof key === 'string' && key.startsWith('/api/item?id='),\n  undefined,\n  { revalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Token Usage with useSWR in JavaScript\nDESCRIPTION: Shows an incorrect way to pass a token to the fetcher function, which will cause caching issues as the token won't be part of the cache key.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.fr-FR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', url => fetchWithToken(url, token))\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Blog Page in Markdown\nDESCRIPTION: Sets the page title to 'Blog' and disables searching for this page. This frontmatter configuration is typically used in static site generators or content management systems.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.ja.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Blog\nsearchable: false\n---\n```\n\n----------------------------------------\n\nTITLE: Using SWR in Next.js Client Components\nDESCRIPTION: Demonstrates how to use SWR hooks in a Next.js client component by adding the 'use client' directive.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.pt-BR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport useSWR from 'swr'\n\nexport default function Page() {\n  const { data } = useSWR('/api/user', fetcher)\n  return <h1>{data.name}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Mutate Import\nDESCRIPTION: Demonstrates importing and using the global mutate function directly.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mutate } from \"swr\"\n\nfunction App() {\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing keepPreviousData for Live Search in React with SWR\nDESCRIPTION: This snippet demonstrates how to use the new keepPreviousData option in SWR 2.0 to improve UX in a live search feature. It preserves previous search results while fetching new data based on user input.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  })\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Mutation with SWR in React\nDESCRIPTION: Example of a basic implementation for adding a new todo item using SWR's mutate function. This shows the standard approach where the UI waits for the server response before updating.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={async () => {\n    await addNewTodo('New Item')\n    mutate()\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Nesting Functional Configurations in SWRConfig\nDESCRIPTION: Exemple de configurations SWR imbriquées utilisant une fonction. La configuration enfant reçoit la configuration parente et renvoie une nouvelle configuration personnalisée.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.fr-FR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SWRConfig, useSWRConfig } from 'swr'\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{\n        dedupingInterval: 100,\n        refreshInterval: 100,\n        fallback: { a: 1, b: 1 },\n      }}\n    >\n      <SWRConfig\n        value={parent => ({\n          dedupingInterval: parent.dedupingInterval * 5,\n          fallback: { a: 2, c: 2 },\n        })}\n      >\n        <Page />\n      </SWRConfig>\n    </SWRConfig>\n  )\n}\n\nfunction Page() {\n  const config = useSWRConfig()\n  // {\n  //   dedupingInterval: 500,\n  //   fallback: { a: 2, c: 2 },\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Immutable Mode with useSWRImmutable\nDESCRIPTION: Demonstration of the new immutable mode through the useSWRImmutable hook that prevents automatic revalidations for data that never changes, ensuring the request is only made once.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRImmutable from 'swr/immutable'\n\n// ...\n\nuseSWRImmutable(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Using isLoading state in React component with SWR\nDESCRIPTION: This snippet demonstrates how to use the new isLoading state returned by useSWR to render a loading message while data is being fetched.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, isLoading } = useSWR('/api/user', fetcher)\n\n  if (isLoading) return <div>carregando...</div>\n  return <div>olá {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SWR Serialization in Server Components\nDESCRIPTION: Shows the correct way to import serialization utilities from SWR in Next.js Server Components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.zh-CN.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { unstable_serialize } from 'swr' // ✅ 在 Server components 中可用\nimport { unstable_serialize as infinite_unstable_serialize } from 'swr/infinite' // ✅ 在 Server components 中可用\n```\n\n----------------------------------------\n\nTITLE: Using isLoading State in SWR\nDESCRIPTION: Demonstrates the usage of the new isLoading state returned by useSWR, which indicates if the initial request is ongoing and no data is loaded yet.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, isLoading } = useSWR('/api/user', fetcher)\n\n  if (isLoading) return <div>loading...</div>\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR in Next.js Client Components\nDESCRIPTION: Demonstrates how to use SWR in a Next.js Client Component by adding the 'use client' directive and importing the useSWR hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.fr-FR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport useSWR from 'swr'\nexport default function Page() {\n  const { data } = useSWR('/api/user', fetcher)\n  return <h1>{data.name}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global Mutate Function in React\nDESCRIPTION: Shows how to import and use the global mutate function directly in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ja.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mutate } from \"swr\"\n\nfunction App() {\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Inline TypeScript Usage with useSWRSubscription\nDESCRIPTION: Example of using TypeScript with useSWRSubscription hook using inline subscribe function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\nimport type { SWRSubscriptionOptions } from 'swr/subscription'\n\nconst { data, error } = useSWRSubscription('key', \n  (key, { next }: SWRSubscriptionOptions<number, Error>) => {\n  //^ key will be inferred as `string`\n  //....\n  })\n  return {\n    data,\n    //^ data will be inferred as `number | undefined`\n    error\n    //^ error will be inferred as `Error | undefined`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global Mutate Directly in React\nDESCRIPTION: Shows how to import the global mutate function directly from SWR and use it in a React component.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.ko.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mutate } from \"swr\"\n\nfunction App() {\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cache Usage in SWR 2.0\nDESCRIPTION: This diff demonstrates the changes in how cache is accessed and modified in SWR 2.0. The internal structure of cache data now includes additional states like error and isValidating.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- assert(cache.get(key) === data)\n+ assert(cache.get(key) === { data, error, isValidating })\n\n// getter\n- cache.get(key)\n+ cache.get(key)?.data\n\n// setter\n- cache.set(key, data)\n+ cache.set(key, { ...cache.get(key), data })\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with useSWRSubscription\nDESCRIPTION: Shows how to use TypeScript with the useSWRSubscription hook, including inline subscribe function and manual type specification.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.ja.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\nimport type { SWRSubscriptionOptions } from 'swr/subscription'\n\nconst { data, error } = useSWRSubscription('key', \n  (key, { next }: SWRSubscriptionOptions<number, Error>) => {\n  //^ key will be inferred as `string`\n  //....\n  })\n  return {\n    data,\n    //^ data will be inferred as `number | undefined`\n    error\n    //^ error will be inferred as `Error | undefined`\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\nimport type { SWRSubscription } from 'swr/subscription'\n\n/** \n * The first generic is Key\n * The second generic is Data\n * The Third generic is Error\n */\nconst sub: SWRSubscription<string, number, Error> = (key, { next }) => {                         \n  //......\n}\nconst { data, error } = useSWRSubscription('key', sub)\n```\n\n----------------------------------------\n\nTITLE: Modifying SWR Cache Data using Mutate Function\nDESCRIPTION: This code snippet demonstrates how to modify the SWR cache data using the mutate function. It shows an example of clearing all cache data by setting it to undefined for all cache keys without revalidating.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.es-ES.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate } = useSWRConfig()\n\nmutate(\n  key => true, // which cache keys are updated\n  undefined, // update cache data to `undefined`\n  { revalidate: false } // do not revalidate\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect SWR Import in Next.js App Router Server Components\nDESCRIPTION: Shows an example of an incorrect SWR import in a server component, which is not allowed as most SWR APIs are not available in React Server Components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWR from 'swr' // ❌ This is not available in server components\n```\n\n----------------------------------------\n\nTITLE: Using isLoading and isValidating for Improved Stock Data Display in React with SWR\nDESCRIPTION: This snippet demonstrates how to use SWR's isLoading and isValidating states to create a better user experience when fetching stock data. It shows a skeleton while initially loading data and adds a spinner during background revalidations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/understanding.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Stock() {\n  const { data, isLoading, isValidating } = useSWR(STOCK_API, fetcher, {\n    refreshInterval: 3000\n  });\n\n  // Se ainda estiver carregando os dados iniciais, não há nada para exibir.\n  // Iremos retornar um skeleton aqui.\n  if (isLoading) return <div className=\"skeleton\" />;\n\n  // Se não, exibiremos os dados e um spinner que indica a revalidação\n  //em segundo plano.\n  return (\n    <>\n      <div>${data}</div>\n      {isValidating ? <div className=\"spinner\" /> : null}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSWR with TypeScript\nDESCRIPTION: Demonstrates how SWR automatically infers types from the key and fetcher arguments in various scenarios.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.ja.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// `key` は `string` に推測されます。\nuseSWR('/api/user', key => {})\nuseSWR(() => '/api/user', key => {})\n\n// `key` は { a: string; b: { c: string; d: number } } として推測されます。\nuseSWR({ a: '1', b: { c: '3', d: 2 } }, key => {})\nuseSWR(() => ({ a: '1', b: { c: '3', d: 2 } }), key => {})\n\n// `arg0` は文字列として推測されます。 `arg1` は数値として推測されます。\nuseSWR(['user', 8], ([arg0, arg1]) => {})\nuseSWR(() => ['user', 8], ([arg0, arg1]) => {})\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR Middleware\nDESCRIPTION: Example of using the new middleware feature in SWR v1.0 that allows building and reusing abstractions on top of SWR hooks, either globally or per hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ use: [...middleware] }}>\n\n// ... or directly in `useSWR`:\nuseSWR(key, fetcher, { use: [...middleware] })\n```\n\n----------------------------------------\n\nTITLE: Typing SWR Middleware in TypeScript\nDESCRIPTION: Demonstrates how to use TypeScript to add types to custom SWR middleware, importing necessary type definitions for proper typing.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.en-US.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Middleware, SWRHook } from 'swr'\n\nconst swrMiddleware: Middleware = (useSWRNext: SWRHook) => (key, fetcher, config) => {\n  // ...\n  return useSWRNext(key, fetcher, config)\n}\n```\n\n----------------------------------------\n\nTITLE: Migration: Using Hook-Returned Mutate Instead of Import\nDESCRIPTION: Shows the recommended practice of using the mutate function returned from useSWRConfig hook instead of importing it globally.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- import { mutate } from 'swr'\n+ import { useSWRConfig } from 'swr'\n\n\n  function Foo () {\n+   const { mutate } = useSWRConfig()\n\n    return <button onClick={() => mutate('key')}>\n      Mutate Key\n    </button>\n  }\n```\n\n----------------------------------------\n\nTITLE: Migration - Revalidate to Mutate\nDESCRIPTION: Migration guide showing the change from revalidate to mutate method.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.en-US.mdx#2025-04-19_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- const { revalidate } = useSWR(key, fetcher, options)\n+ const { mutate } = useSWR(key, fetcher, options)\n\n\n  // ...\n\n\n- revalidate()\n+ mutate()\n```\n\n----------------------------------------\n\nTITLE: Invalid SWR Import in Server Components\nDESCRIPTION: Demonstrates incorrect usage of SWR imports in Server Components that are not supported.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.zh-CN.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWR from 'swr' // ❌ 在 Server components 中不可用\n```\n\n----------------------------------------\n\nTITLE: Revalidation Example with Logout in JSX\nDESCRIPTION: Shows how to trigger revalidation of user data when logging out using the mutate function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.pt-BR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction App () {\n  const { mutate } = useSWRConfig()\n\n  return (\n    <div>\n      <Profile />\n      <button onClick={() => {\n        document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;'\n        mutate('/api/user')\n      }}>\n        Logout\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Fetcher Function in SWR 2.0\nDESCRIPTION: This diff shows the change in how fetcher functions receive arguments in SWR 2.0. The key is now passed as a single argument instead of multiple arguments.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- useSWR([1, 2, 3], (a, b, c) => {\n+ useSWR([1, 2, 3], ([a, b, c]) => {\n  assert(a === 1)\n  assert(b === 2)\n  assert(c === 3)\n})\n```\n\n----------------------------------------\n\nTITLE: Importing SWR Components in React\nDESCRIPTION: Demonstrates how to import the core SWR hook and the infinite scrolling hook separately, allowing for better tree-shaking.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\nimport useSWRInfinite from 'swr/infinite'\n```\n\n----------------------------------------\n\nTITLE: Préchargement dans les effets et gestionnaires d'événements React\nDESCRIPTION: Utilisation de preload dans useEffect et les gestionnaires d'événements pour précharger les données en fonction des interactions utilisateur.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.fr-FR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App({ userId }) {\n  const [show, setShow] = useState(false)\n\n  // preload in effects\n  useEffect(() => {\n    preload('/api/user?id=' + userId, fetcher)\n  }, [userId])\n\n  return (\n    <div>\n      <button\n        onClick={() => setShow(true)}\n        {/* précharger dans les rappels d'événements */}\n        onHover={() => preload('/api/user?id=' + userId, fetcher)}\n      >\n        Afficher l'utilisateur\n      </button>\n      {show ? <User /> : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Provider\nDESCRIPTION: Example of implementing a custom cache provider with the new provider option in SWRConfig. This allows for customized cache behavior like persistent storage or regex-based key manipulation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  provider: () => myCache\n}}>\n  <App/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Provider Interface in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for a cache provider in SWR. It specifies the required methods for getting, setting, deleting, and iterating over cache keys.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Cache<Data> {\n  get(key: string): Data | undefined\n  set(key: string, value: Data): void\n  delete(key: string): void\n  keys(): IterableIterator<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Fallback Data Configuration\nDESCRIPTION: Shows how to configure pre-fetched data as initial values for SWR hooks using the new fallback option.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  fallback: {\n    '/api/user': { name: 'Bob', ... },\n    '/api/items': ...,\n    ...\n  }\n}}>\n  <App/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Migration: Replacing revalidate with mutate\nDESCRIPTION: Shows how to update code that previously used the revalidate method, which has been renamed to mutate in v1.0.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- const { revalidate } = useSWR(key, fetcher, options)\n+ const { mutate } = useSWR(key, fetcher, options)\n\n\n  // ...\n\n\n- revalidate()\n+ mutate()\n```\n\n----------------------------------------\n\nTITLE: Defining SWR Cache Provider Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SWR cache providers. The interface requires implementing get, set, delete, and keys methods to create a Map-like object that SWR can use for caching.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Cache<Data> {\n  get(key: string): Data | undefined\n  set(key: string, value: Data): void\n  delete(key: string): void\n  keys(): IterableIterator<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Revalidation on Logout with SWR in React\nDESCRIPTION: Demonstrates how to trigger revalidation of user data when logging out by using the mutate function without passing new data. This example shows setting an expired cookie and notifying SWR to revalidate.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.zh-CN.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction App () {\n  const { mutate } = useSWRConfig()\n\n  return (\n    <div>\n      <Profile />\n      <button onClick={() => {\n        // 设置 cookie 为已过期\n        document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;'\n\n        // 通知所有拥有这个 key SWR 重新验证\n        mutate('/api/user')\n      }}>\n        Logout\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: SWR Middleware Execution Order Visualization\nDESCRIPTION: Text representation of middleware execution order showing the nested nature of middleware calls, where each middleware wraps the next one in the chain.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nenter a\n  enter b\n    enter c\n      useSWR()\n    exit  c\n  exit  b\nexit  a\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling with Status Codes in JavaScript\nDESCRIPTION: Shows how to create a custom fetcher that handles non-2xx status codes and provides additional error information.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/error-handling.ja.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetcher = async url => {\n  const res = await fetch(url)\n\n  // もしステータスコードが 200-299 の範囲内では無い場合、\n  // レスポンスをパースして投げようとします。\n  if (!res.ok) {\n    const error = new Error('An error occurred while fetching the data.')\n    // エラーオブジェクトに追加情報を付与します。\n    error.info = await res.json()\n    error.status = res.status\n    throw error\n  }\n\n  return res.json()\n}\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n// error.info === {\n//   message: \"You are not authorized to access this resource.\",\n//   documentation_url: \"...\"\n// }\n// error.status === 403\n```\n\n----------------------------------------\n\nTITLE: Conditional Fetching with SWR in JavaScript\nDESCRIPTION: This snippet demonstrates three ways to conditionally fetch data using SWR: using a ternary operator with null, returning a falsy value, or throwing when a condition is not met.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/conditional-fetching.ja.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 条件付きでフェッチする\nconst { data } = useSWR(shouldFetch ? '/api/data' : null, fetcher)\n\n// ...または、falsyな値を返します\nconst { data } = useSWR(() => shouldFetch ? '/api/data' : null, fetcher)\n\n// ...または、user.id が定義されてない場合にスローします\nconst { data } = useSWR(() => '/api/data?uid=' + user.id, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Migration Guide - Global Mutate Updates\nDESCRIPTION: Illustrates the changes in global mutate functionality where getKey function is no longer accepted, requiring direct key passing instead.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- mutate(() => '/api/item') // a function to return a key\n+ mutate('/api/item')       // to mutate the key, directly pass it\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Arguments to SWR Hook Using Array in JavaScript\nDESCRIPTION: Shows how to pass multiple arguments to an SWR hook using an array. This method is useful for scenarios like authorized requests where both URL and token are needed.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = useSWR(['/api/user', token], ([url, token]) => fetchWithToken(url, token))\n```\n\n----------------------------------------\n\nTITLE: Declared Subscribe Function with useSWRSubscription\nDESCRIPTION: Example of using TypeScript with useSWRSubscription hook using a declared subscribe function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.es-ES.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRSubscription from 'swr/subscription'\nimport type { SWRSubscription } from 'swr/subscription'\n\n/** \n * The first generic is Key\n * The second generic is Data\n * The Third generic is Error\n */\nconst sub: SWRSubscription<string, number, Error> = (key, { next }) => {                         \n  //......\n}\nconst { data, error } = useSWRSubscription('key', sub)\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Revalidations in useSWR\nDESCRIPTION: Shows how to manually disable all automatic revalidations by setting specific options in the useSWR hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/revalidation.ko.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR(key, fetcher, {\n  revalidateIfStale: false,\n  revalidateOnFocus: false,\n  revalidateOnReconnect: false\n})\n\n// Equivalent to\nuseSWRImmutable(key, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Preloading Top-Level Page Data with HTML in SWR\nDESCRIPTION: This snippet demonstrates how to preload data for top-level requests using the rel=\"preload\" attribute in HTML. It's recommended for fast and native preloading before JavaScript starts downloading.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"/api/data\" as=\"fetch\" crossorigin=\"anonymous\">\n```\n\n----------------------------------------\n\nTITLE: SWR Request Logger Output Example\nDESCRIPTION: Example console output from the request logger middleware showing the SWR keys being logged when requests are made.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/middleware.es-ES.mdx#2025-04-19_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nSWR Request: /api/user1\nSWR Request: /api/user2\n```\n\n----------------------------------------\n\nTITLE: Utilisation d'un hook personnalisé SWR dans un composant React\nDESCRIPTION: Exemple d'utilisation du hook useUser personnalisé dans un composant Avatar pour afficher l'avatar d'un utilisateur.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.fr-FR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Avatar ({ id }) {\n  const { user, isLoading, isError } = useUser(id)\n\n  if (isLoading) return <Spinner />\n  if (isError) return <Error />\n  return <img src={user.avatar} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Mutate via Direct Import\nDESCRIPTION: Demonstrates importing and using the global mutate function directly\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mutate } from \"swr\"\n\nfunction App() {\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Global Mutation Import Example in JavaScript\nDESCRIPTION: Demonstrates direct import of the global mutate function for data modification.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mutate } from \"swr\"\n\nfunction App() {\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cache Interface in SWR 2.0\nDESCRIPTION: This diff shows the addition of a required keys() method to the Cache interface in SWR 2.0. This method should return all keys in the cache object, similar to JavaScript Map instances.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\ninterface Cache<Data> {\n  get(key: string): Data | undefined\n  set(key: string, value: Data): void\n  delete(key: string): void\n+ keys(): IterableIterator<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Migration: Updating useSWRInfinite Imports\nDESCRIPTION: Shows how to update import statements for useSWRInfinite in v1.0, which now needs to be imported from 'swr/infinite' instead of the main 'swr' package.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- import { useSWRInfinite } from 'swr'\n+ import useSWRInfinite from 'swr/infinite'\n```\n\n----------------------------------------\n\nTITLE: Migration Guide: Global Mutate Usage Update\nDESCRIPTION: Example showing the updated way to use global mutate function, removing support for getKey function and requiring direct key passing.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- mutate(() => '/api/item') // a function to return a key\n+ mutate('/api/item')       // to mutate the key, directly pass it\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Data with SWRConfig in React\nDESCRIPTION: Shows how to use the new fallback option in SWRConfig to provide pre-fetched data as initial values for SWR hooks.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{\n  fallback: {\n    '/api/user': { name: 'Bob', ... },\n    '/api/items': ...,\n    ...\n  }\n}}>\n  <App/>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Préchargement programmatique avec SWR en React\nDESCRIPTION: Utilisation de l'API preload de SWR pour précharger les données de manière programmatique avant le rendu du composant.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.fr-FR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport useSWR, { preload } from 'swr'\n\nconst fetcher = (url) => fetch(url).then((res) => res.json())\n\n// Préchargez la ressource avant de rendre le composant User ci-dessous,\n// cela empêche les cascades potentielles dans votre application.\n// Vous pouvez également commencer à précharger lorsque vous survolez le bouton ou le lien.\npreload('/api/user', fetcher)\n\nfunction User() {\n  const { data } = useSWR('/api/user', fetcher)\n  ...\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false)\n  return (\n    <div>\n      <button onClick={() => setShow(true)}>Afficher l'utilisateur</button>\n      {show ? <User /> : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Spécification explicite des types pour useSWR en TypeScript\nDESCRIPTION: Exemple de spécification explicite des types pour les arguments `key` et `fetcher` dans useSWR, y compris la gestion des erreurs typées.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.fr-FR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Fetcher } from 'swr'\n\nconst uid = '<user_id>'\nconst fetcher: Fetcher<User, string> = (id) => getUserById(id)\n\nconst { data } = useSWR(uid, fetcher)\n// `data` sera `User | undefined`.\n\nconst { data, error } = useSWR<User, Error>(uid, fetcher);\n// `data` sera `User | undefined`.\n// `error` sera `Error | undefined`.\n```\n\n----------------------------------------\n\nTITLE: Basic useSWR Argument Usage in JavaScript\nDESCRIPTION: Demonstrates three equivalent ways to use the useSWR hook with a single argument, where the key is passed to the fetcher function.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', () => fetcher('/api/user'))\nuseSWR('/api/user', url => fetcher(url))\nuseSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Refactorisation d'une application React avec SWR\nDESCRIPTION: Exemple de refactorisation d'une application React en utilisant SWR et le hook useUser personnalisé pour une meilleure gestion des données.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.fr-FR.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page ({ userId }) {\n  return <div>\n    <Navbar userId={userId} />\n    <Content userId={userId} />\n  </div>\n}\n\nfunction Navbar ({ userId }) {\n  return <div>\n    ...\n    <Avatar userId={userId} />\n  </div>\n}\n\nfunction Content ({ userId }) {\n  const { user, isLoading } = useUser(userId)\n  if (isLoading) return <Spinner />\n  return <h1>Welcome back, {user.name}</h1>\n}\n\nfunction Avatar ({ userId }) {\n  const { user, isLoading } = useUser(userId)\n  if (isLoading) return <Spinner />\n  return <img src={user.avatar} alt={user.name} />\n}\n```\n\n----------------------------------------\n\nTITLE: Migration: Renaming initialData to fallbackData\nDESCRIPTION: Shows how to update the initialData option to the new fallbackData option name in SWR v1.0.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.pt-BR.mdx#2025-04-19_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- useSWR(key, fetcher, { initialData: ... })\n+ useSWR(key, fetcher, { fallbackData: ... })\n```\n\n----------------------------------------\n\nTITLE: Démonstration de l'inférence de type automatique avec useSWR en TypeScript\nDESCRIPTION: Exemples montrant comment SWR infère automatiquement les types d'arguments de `fetcher` à partir de `key` pour différentes structures de clés.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// `key` est inféré comme `string`\nuseSWR('/api/user', key => {})\nuseSWR(() => '/api/user', key => {})\n\n// `key` peut etre inféré comme { a: string; b: { c: string; d: number } }\nuseSWR({ a: '1', b: { c: '3', d: 2 } }, key => {})\nuseSWR(() => ({ a: '1', b: { c: '3', d: 2 } }), key => {})\n\n// `arg0` peut etre inféré comme string. `arg1` peut etre inféré comme number\nuseSWR(['user', 8], ([arg0, arg1]) => {})\nuseSWR(() => ['user', 8], ([arg0, arg1]) => {})\n```\n\n----------------------------------------\n\nTITLE: Importing SWR Serialization APIs in Next.js Server Components\nDESCRIPTION: Demonstrates how to import key serialization APIs from SWR in Next.js Server Components. These are the only SWR imports allowed in Server Components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { unstable_serialize } from 'swr' // ✅ Available in server components\nimport { unstable_serialize as infinite_unstable_serialize } from 'swr/infinite' // ✅ Available in server components\n```\n\n----------------------------------------\n\nTITLE: Programmatic Prefetching with SWR\nDESCRIPTION: Example showing how to programmatically prefetch data using SWR's preload API before component rendering.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.zh-CN.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport useSWR, { preload } from 'swr'\n\nconst fetcher = (url) => fetch(url).then((res) => res.json())\n\npreload('/api/user', fetcher)\n\nfunction User() {\n  const { data } = useSWR('/api/user', fetcher)\n  ...\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false)\n  return (\n    <div>\n      <button onClick={() => setShow(true)}>Show User</button>\n      {show ? <User /> : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dependent Data Fetching with Multiple useSWR Hooks\nDESCRIPTION: Shows how to use the result from one useSWR hook as an input to another, creating a dependency chain between data fetching operations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.fr-FR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = useSWR(['/api/user', token], fetchWithToken)\n\n// ...et ensuite le passer en argument à un autre hook useSWR\nconst { data: orders } = useSWR(user ? ['/api/orders', user] : null, fetchWithUser)\n```\n\n----------------------------------------\n\nTITLE: SWR Config Hook Usage\nDESCRIPTION: Example of using the new useSWRConfig hook to access global configurations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Foo () {\n  const { refreshInterval, cache, mutate, ...restConfig } = useSWRConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SWR Key Serialization APIs in Next.js Server Components\nDESCRIPTION: Demonstrates how to import SWR's key serialization APIs in Next.js Server Components, which are the only SWR APIs available in RSCs.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { unstable_serialize } from 'swr' // ✅ Disponível em server components\nimport { unstable_serialize as infinite_unstable_serialize } from 'swr/infinite' // ✅ Disponível em server components\n```\n\n----------------------------------------\n\nTITLE: Embedding SWR Subscription CodeSandbox Demo\nDESCRIPTION: An iframe component that embeds a CodeSandbox demo showing SWR subscription functionality. The demo is configured with specific styling and security sandbox permissions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/subscription.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-subscription-example-o0m1pg?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Subscription\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Resetting SWR Cache Between Test Cases in Jest\nDESCRIPTION: This example shows how to reset the SWR cache between test cases when testing a React application with Jest. It wraps the App component with SWRConfig and provides a new Map instance as the cache for each test case.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.es-ES.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ndescribe('test suite', async () => {\n  it('test case', async () => {\n    render(\n      <SWRConfig value={{ provider: () => new Map() }}>\n        <App/>\n      </SWRConfig>\n    )\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing All Cache Data with SWR in JavaScript\nDESCRIPTION: This snippet shows how to use SWR's mutate function with a filter function to clear all cache data, which can be useful for scenarios like user logout.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst clearCache = () => mutate(\n  () => true,\n  undefined,\n  { revalidate: false }\n)\n\n// ...clear cache on logout\nclearCache()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Provider in SWRConfig\nDESCRIPTION: Exemple de configuration d'un fournisseur de cache personnalisé dans SWRConfig pour gérer le stockage des données SWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/global-configuration.fr-FR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: () => new Map() }}>\n  <Dashboard />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Embedding SWR Subscription Demo in CodeSandbox\nDESCRIPTION: React/JSX code for embedding a CodeSandbox iframe that demonstrates SWR subscription functionality. The iframe is styled with dark theme and includes necessary security permissions and sandbox attributes.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/subscription.zh-CN.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-subscription-example-o0m1pg?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Subscription\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Immutable Mode Usage\nDESCRIPTION: Demonstrates using the new useSWRImmutable hook for data that never changes.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.en-US.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRImmutable from 'swr/immutable'\n\n// ...\n\nuseSWRImmutable(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Automatic Rollback for Failed Mutations in SWR\nDESCRIPTION: Shows how to implement automatic error handling for optimistic updates with SWR, using rollbackOnError to revert to the previous state if the mutation fails.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Exibir dados */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('Novo Item'), {\n      optimisticData: [...data, 'Novo Item'],\n      populateCache: true,\n      revalidate: false,\n      rollbackOnError: true,\n    })\n  }}>\n    Adicionar novo item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Example for SWR Optimistic UI\nDESCRIPTION: This snippet embeds a CodeSandbox example demonstrating Optimistic UI techniques using SWR. The iframe is configured to display in full-screen with specific styling and permissions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/optimistic-ui.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-basic-forked-gry7m0?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Optimistic UI\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Renaming SWRConfig.default in SWR 2.0\nDESCRIPTION: This diff shows the renaming of SWRConfig.default to SWRConfig.defaultValue in SWR 2.0 for accessing the default SWR configuration.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- SWRConfig.default\n+ SWRConfig.defaultValue\n```\n\n----------------------------------------\n\nTITLE: Incorrect Way to Pass Multiple Arguments to Fetcher\nDESCRIPTION: Shows an incorrect approach to passing multiple arguments to the fetcher function. This approach will cause issues when the token changes because SWR will still use the same cache key.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/arguments.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', url => fetchWithToken(url, token))\n```\n\n----------------------------------------\n\nTITLE: SWR Middleware Types\nDESCRIPTION: Example of typing custom middleware in SWR using TypeScript type definitions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.es-ES.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Middleware, SWRHook } from 'swr'\n\nconst swrMiddleware: Middleware = (useSWRNext: SWRHook) => (key, fetcher, config) => {\n  // ...\n  return useSWRNext(key, fetcher, config)\n}\n```\n\n----------------------------------------\n\nTITLE: Utilisation de useSWRInfinite avec TypeScript\nDESCRIPTION: Exemple d'utilisation de useSWRInfinite avec inférence de type automatique ou spécification explicite des types.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.fr-FR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SWRInfiniteKeyLoader } from 'swr/infinite'\n\nconst getKey: SWRInfiniteKeyLoader = (index, previousPageData) => {\n  // ...\n}\n\nconst { data } = useSWRInfinite(getKey, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Resetting SWR Cache Between Test Cases\nDESCRIPTION: Example showing how to reset the SWR cache between test cases by wrapping the application with an empty Map cache provider in Jest tests.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/cache.en-US.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ndescribe('test suite', async () => {\n  it('test case', async () => {\n    render(\n      <SWRConfig value={{ provider: () => new Map() }}>\n        <App/>\n      </SWRConfig>\n    )\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Migration - Import Path Updates\nDESCRIPTION: Migration guide showing required changes for useSWRInfinite imports.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- import { useSWRInfinite } from 'swr'\n+ import useSWRInfinite from 'swr/infinite'\n\n- import { SWRInfiniteConfiguration, SWRInfiniteResponse } from 'swr'\n+ import { SWRInfiniteConfiguration, SWRInfiniteResponse } from 'swr/infinite'\n```\n\n----------------------------------------\n\nTITLE: Configuring iframe for SWR Next.js SSR Demo\nDESCRIPTION: React iframe configuration to embed a CodeSandbox demonstration of SWR with Next.js SSR. Includes styling and security settings for proper embedding.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/ssr.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-0huort?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installation de SWR via gestionnaires de paquets\nDESCRIPTION: Commandes pour installer SWR dans un projet React en utilisant pnpm, npm ou yarn.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/getting-started.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add swr\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i swr\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add swr\n```\n\n----------------------------------------\n\nTITLE: Définition de types de middleware pour SWR en TypeScript\nDESCRIPTION: Exemple de définition de types pour un middleware personnalisé SWR, utilisant les types Middleware et SWRHook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.fr-FR.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Middleware, SWRHook } from 'swr'\n\nconst swrMiddleware: Middleware = (useSWRNext: SWRHook) => (key, fetcher, config) => {\n  // ...\n  return useSWRNext(key, fetcher, config)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Middleware Types in SWR\nDESCRIPTION: Demonstrates how to add TypeScript types to custom middleware in SWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/typescript.ja.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Middleware, SWRHook } from 'swr'\n\nconst swrMiddleware: Middleware = (useSWRNext: SWRHook) => (key, fetcher, config) => {\n  // ...\n  return useSWRNext(key, fetcher, config)\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Authentication CodeSandbox in JSX\nDESCRIPTION: JSX code for embedding a CodeSandbox demo that showcases SWR authentication functionality. The iframe is styled with specific dimensions and appearance settings, and includes necessary security permissions through sandbox attributes.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/auth.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-auth-vl653w?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Authentication\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for Next.js SSR with SWR\nDESCRIPTION: This code snippet embeds a CodeSandbox iframe demonstrating SWR usage in a Next.js server-side rendered application. It sets the iframe's properties including source, style, title, and security attributes.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/ssr.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-0huort?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: SWR State Management Example\nDESCRIPTION: Shows how SWR manages different states during data fetching lifecycle including loading, error, and success states.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const { data, error, isLoading, isValidating } = useSWR('/api', fetcher)\n  console.log(data, error, isLoading, isValidating)\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Global Settings in React Native\nDESCRIPTION: Basic example of wrapping an app with SWRConfig for global configuration settings.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/react-native.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={{\n    /* ... */\n  }}\n>\n  <App>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR Subscription Example in HTML\nDESCRIPTION: This code snippet embeds a CodeSandbox example demonstrating SWR subscription functionality. The iframe is configured with specific styling and permissions to provide a seamless viewing experience.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/subscription.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-subscription-example-o0m1pg?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Abonnement\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect SWR Import in Next.js Server Components\nDESCRIPTION: Shows an example of an incorrect SWR import in Server Components, which is not allowed and will cause an error.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.fr-FR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWR from 'swr' // ❌ This is not available in server components\n```\n\n----------------------------------------\n\nTITLE: Préchargement HTML avec rel=\"preload\"\nDESCRIPTION: Utilisation de la balise link avec rel=\"preload\" pour précharger les données de premier niveau avant que JavaScript ne se charge.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"/api/data\" as=\"fetch\" crossorigin=\"anonymous\">\n```\n\n----------------------------------------\n\nTITLE: Updating Global Mutate Import to Hook-Based Usage in React\nDESCRIPTION: Demonstrates the recommended way to use the mutate function in SWR 1.0 by obtaining it from the useSWRConfig hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- import { mutate } from 'swr'\n+ import { useSWRConfig } from 'swr'\n\n\n  function Foo () {\n+   const { mutate } = useSWRConfig()\n\n    return <button onClick={() => mutate('key')}>\n      Mutate Key\n    </button>\n  }\n```\n\n----------------------------------------\n\nTITLE: Extending SWR Configuration with Function Values\nDESCRIPTION: Demonstrates how to use SWRConfig with a function value to extend configuration settings from parent components, allowing flexible configuration in large codebases.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={parentConfig => ({\n    dedupingInterval: parentConfig.dedupingInterval * 5,\n    refreshInterval: 100,\n  })}\n>\n  <Page />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Changing revalidate to mutate in SWR React Hooks\nDESCRIPTION: Migration guide demonstrating how to replace the deprecated revalidate method with mutate in SWR 1.0.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- const { revalidate } = useSWR(key, fetcher, options)\n+ const { mutate } = useSWR(key, fetcher, options)\n\n\n  // ...\n\n\n- revalidate()\n+ mutate()\n```\n\n----------------------------------------\n\nTITLE: Embedding SWR Subscription CodeSandbox Example\nDESCRIPTION: iframe element that embeds an interactive CodeSandbox demonstration of SWR subscriptions. The embed includes custom styling and security settings for proper integration.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/subscription.ko.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-subscription-example-o0m1pg?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Subscription\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect SWR Import in Next.js Server Components\nDESCRIPTION: Shows an example of an incorrect SWR import in a server component, which is not allowed.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWR from 'swr' // ❌ Isso não está disponível em components\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR Subscription Example in HTML/JavaScript\nDESCRIPTION: This code snippet embeds a CodeSandbox example demonstrating SWR subscription functionality. It uses an iframe with specific styling and permissions to display the interactive example within the page.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/subscription.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-subscription-example-o0m1pg?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Subscription\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Migration Guide - Fetcher Arguments Update\nDESCRIPTION: Shows the required changes for fetcher function arguments in SWR 2.0, where the key is now passed as a single argument instead of multiple arguments.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- useSWR([1, 2, 3], (a, b, c) => {\n+ useSWR([1, 2, 3], ([a, b, c]) => {\n  assert(a === 1)\n  assert(b === 2)\n  assert(c === 3)\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming initialData to fallbackData in SWR React Hooks\nDESCRIPTION: Migration guide showing how to update the initialData option to fallbackData in SWR 1.0.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- useSWR(key, fetcher, { initialData: ... })\n+ useSWR(key, fetcher, { fallbackData: ... })\n```\n\n----------------------------------------\n\nTITLE: Using SWR Provider in Next.js Server Component\nDESCRIPTION: Demonstrates how to use the SWR provider component in a Next.js server component page.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.pt-BR.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// This is still a server component\nimport { SWRProvider } from './swr-provider'\nexport default function Page() {\n  return (\n    <SWRProvider>\n      <h1>ola SWR</h1>\n    </SWRProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SWR Serialization APIs in Next.js Server Components\nDESCRIPTION: Demonstrates how to import key serialization APIs from SWR in Next.js Server Components. These are the only SWR APIs available in React Server Components.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { unstable_serialize } from 'swr' // ✅ Available in server components\nimport { unstable_serialize as infinite_unstable_serialize } from 'swr/infinite' // ✅ Available in server components\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR with Next.js SSR Example\nDESCRIPTION: This code snippet embeds a CodeSandbox iframe demonstrating the usage of SWR with Next.js Server-Side Rendering. The embedded sandbox is configured with specific styling and permissions to showcase the implementation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/ssr.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-0huort?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Subscribe Function Implementation\nDESCRIPTION: Example implementation of a subscribe function that handles basic real-time data updates.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/subscription.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction subscribe(key, { next }) {\n  const sub = remote.subscribe(key, (err, data) => next(err, data))\n  return () => sub.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR Subscription Example in JSX\nDESCRIPTION: This snippet embeds a CodeSandbox iframe to demonstrate SWR subscription functionality. It sets various attributes for the iframe, including styling, permissions, and sandbox options to ensure proper functionality and security.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/subscription.ja.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-subscription-example-o0m1pg?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Subscription\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Migration Guide: Cache Interface Update\nDESCRIPTION: Changes required for custom cache implementation, showing the addition of required keys() method to the Cache interface.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\ninterface Cache<Data> {\n  get(key: string): Data | undefined\n  set(key: string, value: Data): void\n  delete(key: string): void\n+ keys(): IterableIterator<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Revalidation after Mutation in SWR\nDESCRIPTION: Example showing how to disable automatic revalidation after a mutation by setting the revalidate option to false, useful when the server response already contains the latest data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('New Item'), {\n      optimisticData: [...data, 'New Item'],\n      populateCache: true,\n      revalidate: false,\n    })\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Data Fetching with SWR in JavaScript\nDESCRIPTION: This code shows how to implement dependent data fetching where one SWR request depends on data from another. The second request for projects only executes after user data is successfully loaded, avoiding waterfall requests while maintaining proper sequencing.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/conditional-fetching.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyProjects () {\n  const { data: user } = useSWR('/api/user')\n  const { data: projects } = useSWR(() => '/api/projects?uid=' + user.id)\n\n  // Quando passamos uma função, SWR usará o valor de retorno\n  // como `key`. Se a função lança ou retorna um valor falsy,\n  // SWR saberá que algumas dependências não estão prontas.\n  // No caso, `user.id` lança quando `user` não está carregado.\n\n  if (!projects) return 'carregando...'\n  return 'Você possui ' + projects.length + ' projetos'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating useSWRInfinite Import in React\nDESCRIPTION: Migration guide showing how to update the import statement for useSWRInfinite in SWR 1.0.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v1.es-ES.mdx#2025-04-19_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- import { useSWRInfinite } from 'swr'\n+ import useSWRInfinite from 'swr/infinite'\n```\n\n----------------------------------------\n\nTITLE: Embedding SWR Demo CodeSandbox in Next.js\nDESCRIPTION: React JSX code for embedding a CodeSandbox iframe demonstrating SWR server-side rendering implementation in Next.js. The iframe includes specific styling and security configurations.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/ssr.zh-CN.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-0huort?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Event-based Prefetching in React\nDESCRIPTION: Demonstrates how to use preload in React effects and event handlers for optimized data loading.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.zh-CN.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App({ userId }) {\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    preload('/api/user?id=' + userId, fetcher)\n  }, [userId])\n\n  return (\n    <div>\n      <button\n        onClick={() => setShow(true)}\n        onHover={() => preload('/api/user?id=' + userId, fetcher)}\n      >\n        Show User\n      </button>\n      {show ? <User /> : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR Subscription Example\nDESCRIPTION: This snippet embeds a CodeSandbox example demonstrating SWR subscription functionality. It uses an iframe with specific styling and permissions to showcase the example in a dark theme.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/subscription.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-subscription-example-o0m1pg?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Subscription\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Migration Guide: Cache Structure Changes\nDESCRIPTION: Examples showing the changes in internal cache structure and how to properly access and modify cache data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- assert(cache.get(key) === data)\n+ assert(cache.get(key) === { data, error, isValidating })\n\n// getter\n- cache.get(key)\n+ cache.get(key)?.data\n\n// setter\n- cache.set(key, data)\n+ cache.set(key, { ...cache.get(key), data })\n```\n\n----------------------------------------\n\nTITLE: Migration Guide - Cache Structure Changes\nDESCRIPTION: Shows the changes in cache internal structure where data is now stored as an object containing all current states.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- assert(cache.get(key) === data)\n+ assert(cache.get(key) === { data, error, isValidating })\n\n// getter\n- cache.get(key)\n+ cache.get(key)?.data\n\n// setter\n- cache.set(key, data)\n+ cache.set(key, { ...cache.get(key), data })\n```\n\n----------------------------------------\n\nTITLE: Deferred Data Loading with useSWRMutation\nDESCRIPTION: Demonstrates using useSWRMutation to defer data loading until needed\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.en-US.mdx#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport useSWRMutation from 'swr/mutation'\n\nconst fetcher = url => fetch(url).then(res => res.json())\n\nconst Page = () => {\n  const [show, setShow] = useState(false)\n  // data is undefined until trigger is called\n  const { data: user, trigger } = useSWRMutation('/api/user', fetcher);\n\n  return (\n    <div>\n      <button onClick={() => {\n        trigger();\n        setShow(true);\n      }}>Show User</button>\n      {show && user ? <div>{user.name}</div> : null}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding SWR Authentication CodeSandbox Example\nDESCRIPTION: React iframe component embedding a CodeSandbox demo that showcases SWR authentication implementation. The iframe includes security settings and styling properties for proper display.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/auth.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-auth-vl653w?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Authentification\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering BlogIndex Component in JSX\nDESCRIPTION: Imports the BlogIndex component from the components directory and renders it on the page.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.pt-BR.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport BlogIndex from '../components/blog-index'\n\n<BlogIndex/>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR Optimistic UI Demo in HTML\nDESCRIPTION: This code snippet embeds a CodeSandbox example demonstrating SWR's optimistic UI capabilities. It sets up an iframe with specific styling and permissions to showcase the SWR implementation in a React environment.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/optimistic-ui.fr-FR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-basic-forked-gry7m0?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - UI Optimiste\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Mutate with useSWRConfig\nDESCRIPTION: Shows how to access the global mutate function using the useSWRConfig hook.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/mutation.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSWRConfig } from \"swr\"\n\nfunction App() {\n  const { mutate } = useSWRConfig()\n  mutate(key, data, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import of SWR in Next.js Server Components\nDESCRIPTION: Shows an example of attempting to import useSWR in a Server Component, which is not allowed as it's a client-side API.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWR from 'swr' // ❌ This is not available in server components\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Blog Page Frontmatter in Markdown\nDESCRIPTION: Sets the page title to 'Blog' and disables searchability for the SWR blog page using YAML frontmatter in Markdown.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.pt-BR.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Blog\nsearchable: false\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from nextra-theme-docs in JSX\nDESCRIPTION: This snippet imports the Callout component from the nextra-theme-docs package. It's likely used for creating informational callouts in the documentation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/devtools.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra-theme-docs'\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JSX\nDESCRIPTION: Imports the Callout component from the nextra-theme-docs package for use in documentation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/devtools.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra-theme-docs'\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR Infinite Loading in React\nDESCRIPTION: This code snippet embeds a CodeSandbox example demonstrating infinite loading with SWR. It uses an iframe to display the interactive example, with custom styling and sandbox permissions for security.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/infinite-loading.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-infinite-fxn6ln?file=/src/App.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Infinite Loading\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom App Component with Vercel Analytics in Next.js\nDESCRIPTION: This code defines a custom App component for a Next.js application. It imports global styles and wraps the main Component with Vercel Analytics. This setup ensures analytics are applied across all pages of the SWR documentation site.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/_app.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../styles.css\";\nimport { Analytics } from \"@vercel/analytics/react\";\n\nexport default function Nextra({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <Analytics />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Demo in React JSX\nDESCRIPTION: Embeds a CodeSandbox demo showing basic SWR usage with custom styling and security configurations. The iframe is configured with specific dimensions, styling, and sandbox permissions for secure embedding.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/basic.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-basic-2s1itw?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Basic Usage\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Demo for Next.js SSR with SWR\nDESCRIPTION: An iframe component that embeds a CodeSandbox demonstration showing SWR implementation with Next.js SSR. The sandbox is configured with specific styling and security parameters.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/ssr.ja.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-0huort?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Data Fetching with SWR\nDESCRIPTION: Shows how to implement dependent data fetching where one request depends on data from another. Uses a projects fetching example that depends on user data.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/conditional-fetching.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyProjects () {\n  const { data: user } = useSWR('/api/user')\n  const { data: projects } = useSWR(() => '/api/projects?uid=' + user.id)\n  // When passing a function, SWR will use the return\n  // value as `key`. If the function throws or returns\n  // falsy, SWR will know that some dependencies are not\n  // ready. In this case `user.id` throws when `user`\n  // isn't loaded.\n\n  if (!projects) return 'loading...'\n  return 'You have ' + projects.length + ' projects'\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR Error Handling Example in React\nDESCRIPTION: This code snippet embeds a CodeSandbox example demonstrating error handling in SWR. It sets up an iframe with specific styling and permissions to showcase the error handling functionality.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/error-handling.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-states-7njdkp?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Error Handling\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: SWR Suspense Mode Prefetching\nDESCRIPTION: Illustrates how to use preload with SWR's Suspense mode to prevent waterfall effects in data fetching.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.en-US.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { preload } from 'swr'\n\n// should call before rendering\npreload('/api/user', fetcher);\npreload('/api/movies', fetcher);\n\nconst Page = () => {\n  // The below useSWR hooks will suspend the rendering, but the requests to `/api/user` and `/api/movies` have started by `preload` already,\n  // so the waterfall problem doesn't happen.\n  const { data: user } = useSWR('/api/user', fetcher, { suspense: true });\n  const { data: movies } = useSWR('/api/movies', fetcher, { suspense: true });\n  return (\n    <div>\n      <User user={user} />\n      <Movies movies={movies} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Console Output\nDESCRIPTION: Shows the reduced console output when only consuming the data state from SWR.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/advanced/performance.en-US.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nundefined // => hydration / initial render\nData      // => end retrying, get the data\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR Subscription Example in JSX\nDESCRIPTION: This snippet embeds a CodeSandbox example demonstrating SWR subscription functionality. It uses an iframe with specific styling and permissions to showcase the example in a dark theme.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/subscription.ru.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-subscription-example-o0m1pg?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Subscription\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating SWR Provider Client Component\nDESCRIPTION: Implementation of a Client Component wrapper for SWRConfig provider configuration.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/with-nextjs.zh-CN.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { SWRConfig } from 'swr'\nexport const SWRProvider = ({ children }) => {\n  return <SWRConfig>{children}</SWRConfig>\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering SWR Blog Title in JSX\nDESCRIPTION: Creates a large, centered, and bold title for the SWR Blog using JSX and Tailwind CSS classes. This heading is styled for responsive design across different screen sizes.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.ja.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<h1 className=\"text-4xl tracking-tighter text-center font-extrabold md:text-5xl mt-8 pb-6\">SWR Blog</h1>\n```\n\n----------------------------------------\n\nTITLE: Rendering BlogIndex Component in JSX\nDESCRIPTION: Renders the imported BlogIndex component. This component will display the actual content of the blog, such as a list of blog posts or a blog post grid.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.ja.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<BlogIndex/>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Demo for SWR Optimistic UI\nDESCRIPTION: An iframe element that embeds a CodeSandbox demonstration of SWR's optimistic UI capabilities. The sandbox includes full configurations for security and device permissions.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/optimistic-ui.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-basic-forked-gry7m0?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Optimistic UI\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering SWR Blog Title in JSX\nDESCRIPTION: Renders the main title for the SWR blog page using a heading element with specific CSS classes for styling.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.es-ES.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<h1 className=\"text-4xl tracking-tighter text-center font-extrabold md:text-5xl mt-8 pb-6\">SWR Blog</h1>\n```\n\n----------------------------------------\n\nTITLE: Updating Global Mutate Usage in SWR 2.0\nDESCRIPTION: This diff illustrates the change in how global mutate is used in SWR 2.0. Instead of passing a function that returns a key, you now directly pass the key to mutate.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- mutate(() => '/api/item') // a function to return a key\n+ mutate('/api/item')       // to mutate the key, directly pass it\n```\n\n----------------------------------------\n\nTITLE: Renaming InfiniteFetcher Type in SWR 2.0\nDESCRIPTION: This diff illustrates the renaming of the InfiniteFetcher type to SWRInfiniteFetcher in SWR 2.0 for improved clarity and consistency.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.ko.mdx#2025-04-19_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- import type { InfiniteFetcher } from 'swr/infinite'\n+ import type { SWRInfiniteFetcher } from 'swr/infinite'\n```\n\n----------------------------------------\n\nTITLE: HTML Preload Tag Implementation\nDESCRIPTION: Using HTML rel=preload tag to prefetch data before JavaScript loads, placed in the HTML head section.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/docs/prefetching.zh-CN.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"/api/data\" as=\"fetch\" crossorigin=\"anonymous\">\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Blog Page Metadata in Markdown\nDESCRIPTION: Sets the page title and searchable property for the SWR blog page using YAML front matter in Markdown.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.es-ES.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Blog\nsearchable: false\n---\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering BlogIndex Component in Markdown\nDESCRIPTION: This snippet imports the BlogIndex component from the components directory and renders it on the page. The file also includes frontmatter with title and searchable properties, as well as a styled h1 heading.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.en-US.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport BlogIndex from '../components/blog-index'\n\n<BlogIndex/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering BlogIndex Component in JSX\nDESCRIPTION: Imports the BlogIndex component from the components directory and renders it on the page.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.es-ES.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport BlogIndex from '../components/blog-index'\n\n<BlogIndex/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Mutation with useSWR\nDESCRIPTION: This code snippet demonstrates a basic approach to mutating data using SWR. It retrieves a todo list with useSWR and implements an \"Add New Item\" button that triggers the addNewTodo API call and then refreshes the data with mutate().\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.en-US.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Display data */}</ul>\n\n  <button onClick={async () => {\n    await addNewTodo('New Item')\n    mutate()\n  }}>\n    Add New Item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Demo for SWR Optimistic UI\nDESCRIPTION: React JSX code for embedding a CodeSandbox demonstration of SWR's Optimistic UI features. The iframe is configured with specific styling and security permissions for optimal display.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/examples/optimistic-ui.zh-CN.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-basic-forked-gry7m0?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Optimistic UI\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering SWR Blog Title in JSX\nDESCRIPTION: Creates a centered, large, bold title for the SWR blog using JSX and Tailwind CSS classes.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<h1 className=\"text-4xl tracking-tighter text-center font-extrabold md:text-5xl mt-8 pb-6\">SWR Blog</h1>\n```\n\n----------------------------------------\n\nTITLE: Basic Data Mutation with SWR in React\nDESCRIPTION: Shows how to implement a basic data mutation pattern with SWR by fetching a list of todos and adding a new item by calling an API and then triggering a manual revalidation.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Exibir dados */}</ul>\n\n  <button onClick={async () => {\n    await addNewTodo('Novo Item')\n    mutate()\n  }}>\n    Adicionar novo item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Populating Cache with Mutation Response in SWR\nDESCRIPTION: Shows how to update the SWR cache with the response from a mutation using the populateCache option, avoiding an additional revalidation by using the mutation response directly.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.pt-BR.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate, data } = useSWR('/api/todos')\n\nreturn <>\n  <ul>{/* Exibir dados */}</ul>\n\n  <button onClick={() => {\n    mutate(addNewTodo('Novo Item'), {\n      optimisticData: [...data, 'Novo Item'],\n      populateCache: true,\n    })\n  }}>\n    Adicionar novo item\n  </button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Migration Guide: Updating Fetcher Arguments\nDESCRIPTION: Migration example showing how to update fetcher function implementation to handle the new single argument pattern instead of multiple arguments.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog/swr-v2.es-ES.mdx#2025-04-19_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- useSWR([1, 2, 3], (a, b, c) => {\n+ useSWR([1, 2, 3], ([a, b, c]) => {\n  assert(a === 1)\n  assert(b === 2)\n  assert(c === 3)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Running SWR Website Locally\nDESCRIPTION: Commands to set up and start the local development server for the SWR website. After running these commands, the site will be available at localhost:3000.\nSOURCE: https://github.com/vercel/swr-site/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Importing BlogIndex Component in JSX\nDESCRIPTION: Imports the BlogIndex component from the components directory. This component is likely responsible for rendering the list or grid of blog posts.\nSOURCE: https://github.com/vercel/swr-site/blob/main/pages/blog.ja.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport BlogIndex from '../components/blog-index'\n```"
  }
]