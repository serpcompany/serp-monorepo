[
  {
    "owner": "puppeteer",
    "repo": "puppeteer",
    "content": "TITLE: Basic Puppeteer Usage Example in TypeScript\nDESCRIPTION: This example demonstrates how to use Puppeteer to launch a browser, navigate to a web page, interact with elements, and extract information. It includes launching a browser, opening a page, setting viewport size, filling a search box, clicking on a result, and extracting text content.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n// Or import puppeteer from 'puppeteer-core';\n\n// Launch the browser and open a new blank page\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\n\n// Navigate the page to a URL.\nawait page.goto('https://developer.chrome.com/');\n\n// Set screen size.\nawait page.setViewport({width: 1080, height: 1024});\n\n// Type into search box.\nawait page.locator('.devsite-search-field').fill('automate beyond recorder');\n\n// Wait and click on first result.\nawait page.locator('.devsite-result-item-link').click();\n\n// Locate the full title with a unique string.\nconst textSelector = await page\n  .locator('text/Customize and automate')\n  .waitHandle();\nconst fullTitle = await textSelector?.evaluate(el => el.textContent);\n\n// Print the full title.\nconsole.log('The title of this blog post is \"%s\".', fullTitle);\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Logging DevTools Protocol Traffic in Puppeteer (Bash)\nDESCRIPTION: Shows various ways to log DevTools protocol traffic for debugging Puppeteer. These commands enable verbose logging, prevent truncation of long messages, filter network messages, and exclude protocol messages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Basic verbose logging\nenv DEBUG=\"puppeteer:*\" node script.js\n\n# Prevent truncating of long messages\nenv DEBUG=\"puppeteer:*\" env DEBUG_MAX_STRING_LENGTH=null node script.js\n\n# Protocol traffic can be rather noisy. This example filters out all Network domain messages\nenv DEBUG=\"puppeteer:*\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\"Network'\n\n# Filter out all protocol messages but keep all other logging\nenv DEBUG=\"puppeteer:*,-puppeteer:protocol:*\" node script.js\n```\n\n----------------------------------------\n\nTITLE: Creating and Using BrowserContext in TypeScript\nDESCRIPTION: Demonstrates how to create a new browser context, open a page, navigate to a URL, and close the context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new browser context\nconst context = await browser.createBrowserContext();\n// Create a new page inside context.\nconst page = await context.newPage();\n// ... do stuff with page ...\nawait page.goto('https://example.com');\n// Dispose context once it's no longer needed.\nawait context.close();\n```\n\n----------------------------------------\n\nTITLE: Automating Web Interactions with Puppeteer in TypeScript\nDESCRIPTION: This example demonstrates how to use Puppeteer to automate web interactions. It launches a browser, navigates to a webpage, interacts with elements, and extracts information. The script performs actions such as setting viewport size, filling a search box, clicking on search results, and retrieving text content.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n// Or import puppeteer from 'puppeteer-core';\n\n// Launch the browser and open a new blank page\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\n\n// Navigate the page to a URL.\nawait page.goto('https://developer.chrome.com/');\n\n// Set screen size.\nawait page.setViewport({width: 1080, height: 1024});\n\n// Type into search box.\nawait page.locator('.devsite-search-field').fill('automate beyond recorder');\n\n// Wait and click on first result.\nawait page.locator('.devsite-result-item-link').click();\n\n// Locate the full title with a unique string.\nconst textSelector = await page\n  .locator('text/Customize and automate')\n  .waitHandle();\nconst fullTitle = await textSelector?.evaluate(el => el.textContent);\n\n// Print the full title.\nconsole.log('The title of this blog post is \"%s\".', fullTitle);\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Managing Browser Contexts in Puppeteer\nDESCRIPTION: Demonstrates creating and managing isolated browser contexts for separate automation tasks, including creating multiple pages and closing contexts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/browser-management.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\nconst context = await browser.createBrowserContext();\n\nconst page1 = await context.newPage();\nconst page2 = await context.newPage();\n\nawait context.close();\n```\n\n----------------------------------------\n\nTITLE: Using Page.emulate to Emulate iPhone in Puppeteer\nDESCRIPTION: This example demonstrates how to use the Page.emulate method to emulate an iPhone 15 Pro. It imports KnownDevices from Puppeteer, launches a browser, creates a new page, emulates the iPhone, navigates to Google, and then closes the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulate.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {KnownDevices} from 'puppeteer';\nconst iPhone = KnownDevices['iPhone 15 Pro'];\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.emulate(iPhone);\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript and CSS Coverage in Puppeteer\nDESCRIPTION: This example demonstrates how to use JavaScript and CSS coverage to calculate the percentage of initially executed code on a web page. It includes starting coverage, navigating to a page, stopping coverage, and calculating used bytes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.coverage.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Enable both JavaScript and CSS coverage\nawait Promise.all([\n  page.coverage.startJSCoverage(),\n  page.coverage.startCSSCoverage(),\n]);\n// Navigate to page\nawait page.goto('https://example.com');\n// Disable both JavaScript and CSS coverage\nconst [jsCoverage, cssCoverage] = await Promise.all([\n  page.coverage.stopJSCoverage(),\n  page.coverage.stopCSSCoverage(),\n]);\nlet totalBytes = 0;\nlet usedBytes = 0;\nconst coverage = [...jsCoverage, ...cssCoverage];\nfor (const entry of coverage) {\n  totalBytes += entry.text.length;\n  for (const range of entry.ranges) usedBytes += range.end - range.start - 1;\n}\nconsole.log(`Bytes used: ${(usedBytes / totalBytes) * 100}%`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Interception to Block Image Requests (TypeScript)\nDESCRIPTION: This example demonstrates how to use setRequestInterception to create a naive request interceptor that aborts all image requests ending with .png or .jpg. It shows the setup of Puppeteer, enabling request interception, and handling intercepted requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setrequestinterception.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.setRequestInterception(true);\n  page.on('request', interceptedRequest => {\n    if (\n      interceptedRequest.url().endsWith('.png') ||\n      interceptedRequest.url().endsWith('.jpg')\n    )\n      interceptedRequest.abort();\n    else interceptedRequest.continue();\n  });\n  await page.goto('https://example.com');\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Improving TypeScript Experience with Page.evaluate()\nDESCRIPTION: This example illustrates how to leverage TypeScript's type inference by passing the function directly to Page.evaluate(), resulting in better type checking and autocompletion.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluate.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst aHandle = await page.evaluate(() => 2);\n```\n\n----------------------------------------\n\nTITLE: Automating Browser Actions with Puppeteer Launch in TypeScript\nDESCRIPTION: This TypeScript example showcases a common workflow for using Puppeteer in Node.js. It imports the library, uses an asynchronous IIFE (Immediately Invoked Function Expression) to launch a browser instance, creates a new page, navigates the page to 'https://www.google.com', and finally closes the browser instance. This illustrates the basic steps for browser automation tasks.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Managing Event Listeners in Puppeteer\nDESCRIPTION: Demonstrates how to add and remove event listeners for page requests using Puppeteer's EventEmitter methods.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nfunction logRequest(interceptedRequest) {\n  console.log('A request was made:', interceptedRequest.url());\n}\npage.on('request', logRequest);\n// Sometime later...\npage.off('request', logRequest);\n```\n\n----------------------------------------\n\nTITLE: Using Frame.waitForNavigation with Page Navigation in TypeScript\nDESCRIPTION: This example demonstrates how to use the waitForNavigation method in conjunction with a click action that triggers navigation. It uses Promise.all to wait for both the navigation and the click action to complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitfornavigation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [response] = await Promise.all([\n  // The navigation promise resolves after navigation has finished\n  frame.waitForNavigation(),\n  // Clicking the link will indirectly cause a navigation\n  frame.click('a.my-link'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser with Puppeteer in TypeScript\nDESCRIPTION: This snippet demonstrates how to launch a browser instance using Puppeteer and create a new page. It's the typical starting point for Puppeteer automation scripts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\nconst page = await browser.newPage();\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Running Browser with Puppeteer in TypeScript\nDESCRIPTION: This snippet shows how to connect to an already running browser instance using its WebSocket endpoint URL. It also demonstrates how to create a new page and disconnect from the browser without closing it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.connect({\n  browserWSEndpoint: 'ws://127.0.0.1:9222/...',\n});\n\nconst page = await browser.newPage();\n\nbrowser.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Using Frame.select() for Single and Multiple Selection in Puppeteer\nDESCRIPTION: Examples demonstrating how to use the Frame.select() method for both single and multiple selection scenarios in dropdown elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.select.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nframe.select('select#colors', 'blue'); // single selection\nframe.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n```\n\n----------------------------------------\n\nTITLE: Getting Cookies with Puppeteer in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve cookies from the browser's default context. It launches a browser, creates a new page, navigates to a website, sets a cookie using script evaluation, and then prints all available cookies.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\nconst page = await browser.newPage();\n\nawait page.goto('https://example.com');\n\n// In this example, we set a cookie using script evaluation.\n// Cookies can be set by the page/server in various ways.\nawait page.evaluate(() => {\n  document.cookie = 'myCookie = MyCookieValue';\n});\n\nconsole.log(await browser.cookies()); // print available cookies.\n```\n\n----------------------------------------\n\nTITLE: Basic Puppeteer Browser Automation Example\nDESCRIPTION: Demonstrates a complete example of using Puppeteer to automate browser tasks including launching a browser, navigating to a website, interacting with elements, and extracting content from the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n// Or import puppeteer from 'puppeteer-core';\n\n// Launch the browser and open a new blank page\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\n\n// Navigate the page to a URL.\nawait page.goto('https://developer.chrome.com/');\n\n// Set screen size.\nawait page.setViewport({width: 1080, height: 1024});\n\n// Type into search box.\nawait page.locator('.devsite-search-field').fill('automate beyond recorder');\n\n// Wait and click on first result.\nawait page.locator('.devsite-result-item-link').click();\n\n// Locate the full title with a unique string.\nconst textSelector = await page\n  .locator('text/Customize and automate')\n  .waitHandle();\nconst fullTitle = await textSelector?.evaluate(el => el.textContent);\n\n// Print the full title.\nconsole.log('The title of this blog post is \"%s\".', fullTitle);\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Testing Chrome Extension Background Page with Puppeteer\nDESCRIPTION: This code demonstrates how to launch a browser with a specific Chrome extension loaded and get a handle to its background page for testing. It uses Puppeteer to launch Chrome with the extension and waits for the background page to be available.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/chrome-extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\nimport path from 'path';\n\nconst pathToExtension = path.join(process.cwd(), 'my-extension');\nconst browser = await puppeteer.launch({\n  args: [\n    `--disable-extensions-except=${pathToExtension}`,\n    `--load-extension=${pathToExtension}`,\n  ],\n});\nconst backgroundPageTarget = await browser.waitForTarget(\n  target => target.type() === 'background_page',\n);\nconst backgroundPage = await backgroundPageTarget.page();\n// Test the background page as you would any other page.\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating a Page in Puppeteer\nDESCRIPTION: Demonstrates how to launch a browser, create a new page, navigate to a URL, take a screenshot, and close the browser using Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  await page.screenshot({path: 'screenshot.png'});\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Page.waitForSelector Across Page Navigations in Puppeteer\nDESCRIPTION: Example demonstrating how to use the waitForSelector method to wait for an image element to appear across multiple page navigations. The method returns a promise that resolves when the selector is found.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforselector.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  let currentURL;\n  page\n    .waitForSelector('img')\n    .then(() => console.log('First URL with image: ' + currentURL));\n  for (currentURL of [\n    'https://example.com',\n    'https://google.com',\n    'https://bbc.com',\n  ]) {\n    await page.goto(currentURL);\n  }\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Filling an Input Element Using Locators in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element matching the CSS selector 'input' using `page.locator()` and fills it with the specified 'value'. Puppeteer automatically detects the input type (e.g., `<input>`, `<select>`) and waits for the element to be ready (in viewport, visible, enabled, stable bounding box) before filling. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 'input' is a CSS selector.\nawait page.locator('input').fill('value');\n```\n\n----------------------------------------\n\nTITLE: Retrieving ElementHandle from Locator in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element matching the CSS selector 'button' using `page.locator()` and retrieves its corresponding `ElementHandle` using `.waitHandle()`. This handle (`buttonHandle`) can then be used with lower-level ElementHandle APIs, such as `.click()`, bypassing further locator checks. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst buttonHandle = await page.locator('button').waitHandle();\nawait buttonHandle.click();\n```\n\n----------------------------------------\n\nTITLE: Clicking an Element Using Locators in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element matching the CSS selector 'button' using `page.locator()` and performs a click action. Puppeteer automatically waits for the element to be present in the viewport, visible, enabled, and have a stable bounding box before clicking. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 'button' is a CSS selector.\nawait page.locator('button').click();\n```\n\n----------------------------------------\n\nTITLE: Defining Locator.fill() Method in TypeScript\nDESCRIPTION: This snippet defines the fill() method for the Locator class in Puppeteer. It fills out an input element identified by the locator with a provided value, supporting various input types including contenteditable, select, textarea, and input elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.fill.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  fill<ElementType extends Element>(\n    this: Locator<ElementType>,\n    value: string,\n    options?: Readonly<ActionOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Evaluation in Puppeteer\nDESCRIPTION: Demonstrates the basic setup and execution of JavaScript in a Puppeteer-controlled page context. Shows how to launch browser, create page, and evaluate simple JavaScript expressions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import puppeteer\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  // Launch the browser\n  const browser = await puppeteer.launch();\n\n  // Create a page\n  const page = await browser.newPage();\n\n  // Go to your site\n  await page.goto('YOUR_SITE');\n\n  // Evaluate JavaScript\n  const three = await page.evaluate(() => {\n    return 1 + 2;\n  });\n\n  console.log(three);\n\n  // Close browser.\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Logging Pending Protocol Calls for Async Debugging\nDESCRIPTION: Accesses Puppeteer's debug information to list pending protocol errors. Useful for diagnosing issues with asynchronous calls that aren't being resolved properly.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/debugging.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(browser.debugInfo.pendingProtocolErrors);\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Network Request Using Page.waitForRequest - TypeScript\nDESCRIPTION: Shows how to use Page.waitForRequest() in TypeScript to await specific network requests either by URL string or by providing a predicate function. Demonstrates resolving to the matched HTTPRequest and checking the response. This snippet depends on Puppeteer, an active browser page context, and assumes asynchronous execution with await.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforrequest.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst firstRequest = await page.waitForRequest('https://example.com/resource');\nconst finalRequest = await page.waitForRequest(\n  request => request.url() === 'https://example.com',\n);\nreturn finalRequest.response()?.ok();\n```\n\n----------------------------------------\n\nTITLE: Capturing Full-Page Screenshot with Puppeteer in TypeScript\nDESCRIPTION: This snippet demonstrates how to launch a browser, navigate to a webpage, and capture a full-page screenshot using Puppeteer. It uses the Page.screenshot() method to save the screenshot as a PNG file.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/screenshots.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto('https://news.ycombinator.com', {\n  waitUntil: 'networkidle2',\n});\nawait page.screenshot({\n  path: 'hn.png',\n});\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Generating PDF from Web Page using Puppeteer in TypeScript\nDESCRIPTION: Example of using Puppeteer to navigate to Hacker News and generate a PDF of the page. The code launches a browser, creates a new page, waits for network activity to settle, and saves the page content as a PDF file named 'hn.pdf'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/pdf-generation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto('https://news.ycombinator.com', {\n  waitUntil: 'networkidle2',\n});\n// Saves the PDF to hn.pdf.\nawait page.pdf({\n  path: 'hn.pdf',\n});\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer with npm/yarn\nDESCRIPTION: Shows how to install Puppeteer using npm or yarn. The first command installs Puppeteer with a compatible Chrome browser, while the second installs only the library without downloading Chrome.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i puppeteer # Downloads compatible Chrome during installation.\nnpm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Query Handlers in Puppeteer\nDESCRIPTION: Shows how to create and register custom selector handlers in Puppeteer, allowing for application-specific selector logic like finding React components by ID.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nPuppeteer.registerCustomQueryHandler('react-component', {\n  queryOne: (elementOrDocument, selector) => {\n    // Dummy example just delegates to querySelector but you can find your\n    // React component because this callback runs in the page context.\n    return elementOrDocument.querySelector(`[id=\"${CSS.escape(selector)}\"]`);\n  },\n  queryAll: (elementOrDocument, selector) => {\n    // Dummy example just delegates to querySelector but you can find your\n    // React component because this callback runs in the page context.\n    return elementOrDocument.querySelectorAll(`[id=\"${CSS.escape(selector)}\"]`);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Page.waitForSelector Across Navigations in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to use `page.waitForSelector()` to wait for an element (an 'img' tag in this case) across multiple page navigations. It launches a Puppeteer browser, creates a new page, and sets up a promise that resolves when an image is found. The code then iterates through a list of URLs, navigating to each one. The console logs the URL of the page where the image was first detected. This illustrates the method's ability to persist waiting across `page.goto()` calls.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforselector.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport puppeteer from 'puppeteer';\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  let currentURL;\n  page\n    .waitForSelector('img')\n    .then(() => console.log('First URL with image: ' + currentURL));\n  for (currentURL of [\n    'https://example.com',\n    'https://google.com',\n    'https://bbc.com',\n  ]) {\n    await page.goto(currentURL);\n  }\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Text Selectors in Puppeteer\nDESCRIPTION: Demonstrates how to use text selectors in Puppeteer via the '-p-text' syntax to select elements containing specific text, including handling special characters and text within shadow DOM.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Click a button inside a div element that has Checkout as the inner text.\nawait page.locator('div ::-p-text(Checkout)').click();\n// You need to escape CSS selector syntax such '(', ')' if it is part of the your search text ('Checkout (2 items)').\nawait page.locator(':scope >>> ::-p-text(Checkout \\\\(2 items\\\\))').click();\n// or use quotes escaping any quotes that are part of the search text ('He said: \"Hello\"').\nawait page.locator(':scope >>> ::-p-text(\"He said: \\\\\"Hello\\\\\"\")').click();\n```\n\n----------------------------------------\n\nTITLE: Waiting for Navigation and Clicking Link with Puppeteer (TypeScript)\nDESCRIPTION: Demonstrates using Promise.all to wait for page navigation triggered by a user action, such as clicking a link, in Puppeteer. The first promise, page.waitForNavigation(), resolves after the navigation event is complete; the second triggers navigation by clicking an element. This pattern ensures the script awaits both initiation and completion of the navigation, preventing race conditions in automation scripts. The response variable captures the main HTTP response after navigation completes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitfornavigation.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst [response] = await Promise.all([\n  page.waitForNavigation(), // The promise resolves after navigation has finished\n  page.click('a.my-link'), // Clicking the link will indirectly cause a navigation\n]);\n```\n\n----------------------------------------\n\nTITLE: Launching Browser with Puppeteer in TypeScript\nDESCRIPTION: Demonstrates how to launch a new browser instance and create a new page using Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/browser-management.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\nconst page = await browser.newPage();\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle with Puppeteer in TypeScript\nDESCRIPTION: This example demonstrates how to use ElementHandle in a Puppeteer script. It shows launching a browser, navigating to a page, selecting an element, and interacting with it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  const hrefElement = await page.$('a');\n  await hrefElement.click();\n  // ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Legacy Request Interception Handler in Puppeteer\nDESCRIPTION: Basic request interception handler that aborts image requests and continues all others using the legacy mode.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  if (request.isInterceptResolutionHandled()) return;\n  if (\n    interceptedRequest.url().endsWith('.png') ||\n    interceptedRequest.url().endsWith('.jpg')\n  )\n    interceptedRequest.abort();\n  else interceptedRequest.continue();\n});\n```\n\n----------------------------------------\n\nTITLE: Returning DOM Nodes with evaluateHandle in Puppeteer\nDESCRIPTION: Shows how to properly return DOM nodes using evaluateHandle method, which returns the element as a reference rather than attempting to serialize it, resulting in an ElementHandle object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/javascript-execution.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = await page.evaluateHandle(() => {\n  return document.body;\n});\nconsole.log(body instanceof ElementHandle); // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Network Request Monitoring in Puppeteer TypeScript\nDESCRIPTION: Sets up event listeners on a Puppeteer page instance to log all network request and response URLs. Shows how to capture both outgoing requests and incoming responses using the 'request' and 'response' events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-logging.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = await browser.newPage();\npage.on('request', request => {\n  console.log(request.url());\n});\n\npage.on('response', response => {\n  console.log(response.url());\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Image Request Interception in Puppeteer\nDESCRIPTION: Demonstrates a basic request interceptor that blocks all PNG and JPG image requests while allowing other requests to continue. Shows initialization of Puppeteer, enabling request interception, and handling intercepted requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.setRequestInterception(true);\n  page.on('request', interceptedRequest => {\n    if (interceptedRequest.isInterceptResolutionHandled()) return;\n    if (\n      interceptedRequest.url().endsWith('.png') ||\n      interceptedRequest.url().endsWith('.jpg')\n    )\n      interceptedRequest.abort();\n    else interceptedRequest.continue();\n  });\n  await page.goto('https://example.com');\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using asynchronous pageFunction with Puppeteer's waitForFunction\nDESCRIPTION: This example demonstrates how to use an asynchronous pageFunction with waitForFunction. It fetches data from the GitHub API, displays an avatar image, waits for 3 seconds, and then removes the image.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst username = 'github-username';\nawait page.waitForFunction(\n  async username => {\n    const githubResponse = await fetch(\n      `https://api.github.com/users/${username}`,\n    );\n    const githubUser = await githubResponse.json();\n    // show the avatar\n    const img = document.createElement('img');\n    img.src = githubUser.avatar_url;\n    // wait 3 seconds\n    await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n    img.remove();\n  },\n  {},\n  username,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Viewport with Puppeteer in Typescript\nDESCRIPTION: Demonstrates how to use the `page.setViewport` method in Puppeteer with Typescript. It first creates a new page using `browser.newPage()`, then sets its viewport dimensions (width, height) and device scale factor using `page.setViewport` before navigating to a specific URL with `page.goto`. This is often done before navigation as many websites don't expect viewport changes after loading.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setviewport.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst page = await browser.newPage();\nawait page.setViewport({\n  width: 640,\n  height: 480,\n  deviceScaleFactor: 1,\n});\nawait page.goto('https://example.com');\n```\n```\n\n----------------------------------------\n\nTITLE: Generating PDF from Web Page using Puppeteer in TypeScript\nDESCRIPTION: This code demonstrates how to use Puppeteer to launch a browser, navigate to Hacker News, and save the page as a PDF file. The script waits for network activity to become idle before generating the PDF and includes automatic font loading.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/pdf-generation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto('https://news.ycombinator.com', {\n  waitUntil: 'networkidle2',\n});\n// Saves the PDF to hn.pdf.\nawait page.pdf({\n  path: 'hn.pdf',\n});\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Page.click Method Signature in TypeScript\nDESCRIPTION: Definition of the click method in the Page class, showing its parameters and return type. It accepts a selector string and optional click options and returns a Promise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Website Search and Content Extraction with Puppeteer in TypeScript\nDESCRIPTION: This example demonstrates core Puppeteer functionality by launching a browser, navigating to Chrome's developer website, performing a search, clicking a result, and extracting text content. It showcases browser initialization, page navigation, viewport configuration, element interaction, and content extraction.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  // Launch the browser and open a new blank page\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  // Navigate the page to a URL\n  await page.goto('https://developer.chrome.com/');\n\n  // Set screen size\n  await page.setViewport({width: 1080, height: 1024});\n\n  // Type into search box\n  await page.type('.devsite-search-field', 'automate beyond recorder');\n\n  // Wait and click on first result\n  const searchResultSelector = '.devsite-result-item-link';\n  await page.waitForSelector(searchResultSelector);\n  await page.click(searchResultSelector);\n\n  // Locate the full title with a unique string\n  const textSelector = await page.waitForSelector(\n    'text/Customize and automate',\n  );\n  const fullTitle = await textSelector?.evaluate(el => el.textContent);\n\n  // Print the full title\n  console.log('The title of this blog post is \"%s\".', fullTitle);\n\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using KnownDevices for device emulation in Puppeteer with TypeScript\nDESCRIPTION: This example demonstrates how to use the KnownDevices variable to emulate an iPhone 15 Pro in Puppeteer. It shows importing KnownDevices, selecting a specific device, launching a browser, creating a new page, applying the device emulation, and navigating to a website.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.knowndevices.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {KnownDevices} from 'puppeteer';\nconst iPhone = KnownDevices['iPhone 15 Pro'];\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.emulate(iPhone);\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining Page.evaluate() Method Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the Page.evaluate() method in Puppeteer. It defines the method's parameters and return type, allowing for generic types to be used for function parameters and return values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Web Search and Content Extraction with Puppeteer in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use Puppeteer to automate a web search on developer.chrome.com, click on the first result, and extract the title of the blog post. It showcases browser launching, page navigation, element interaction, and text extraction.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  // Launch the browser and open a new blank page\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  // Navigate the page to a URL\n  await page.goto('https://developer.chrome.com/');\n\n  // Set screen size\n  await page.setViewport({width: 1080, height: 1024});\n\n  // Type into search box\n  await page.type('.devsite-search-field', 'automate beyond recorder');\n\n  // Wait and click on first result\n  const searchResultSelector = '.devsite-result-item-link';\n  await page.waitForSelector(searchResultSelector);\n  await page.click(searchResultSelector);\n\n  // Locate the full title with a unique string\n  const textSelector = await page.waitForSelector(\n    'text/Customize and automate',\n  );\n  const fullTitle = await textSelector?.evaluate(el => el.textContent);\n\n  // Print the full title\n  console.log('The title of this blog post is \"%s\".', fullTitle);\n\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Example of Using HTTPRequest.continue to Modify Headers\nDESCRIPTION: Demonstrates how to use request interception to modify HTTP headers before continuing the request. This example enables request interception, listens for request events, and modifies the headers by adding a new header and removing an existing one.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.continue.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.setRequestInterception(true);\npage.on('request', request => {\n  // Override headers\n  const headers = Object.assign({}, request.headers(), {\n    foo: 'bar', // set \"foo\" header\n    origin: undefined, // remove \"origin\" header\n  });\n  request.continue({headers});\n});\n```\n\n----------------------------------------\n\nTITLE: Using Page.$$eval() to Count Divs and Get Option Text\nDESCRIPTION: This example demonstrates how to use Page.$$eval() to count the number of divs on a page and get the text content of all elements matching a specific selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.__eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// get the amount of divs on the page\nconst divCount = await page.$$eval('div', divs => divs.length);\n\n// get the text content of all the `.options` elements:\nconst options = await page.$$eval('div > span.options', options => {\n  return options.map(option => option.textContent);\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshot in Puppeteer\nDESCRIPTION: The screenshot method captures a screenshot of the page. It automatically waits for completion to prevent interference with other operations like creating new pages or closing the current page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\npage.screenshot(options)\n```\n\n----------------------------------------\n\nTITLE: Launching Puppeteer in Non-Headless Mode\nDESCRIPTION: Launches Puppeteer with headless mode disabled to allow visual inspection of browser activity. This helps with understanding what's happening during test execution.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({headless: false});\n```\n\n----------------------------------------\n\nTITLE: Using HTTPRequest.continue to Modify Request Headers in TypeScript\nDESCRIPTION: This example demonstrates how to use the HTTPRequest.continue method to modify request headers. It shows enabling request interception, listening for request events, and overriding headers before continuing the request.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.continue.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.setRequestInterception(true);\npage.on('request', request => {\n  // Override headers\n  const headers = Object.assign({}, request.headers(), {\n    foo: 'bar', // set \"foo\" header\n    origin: undefined, // remove \"origin\" header\n  });\n  request.continue({headers});\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Browser Contexts with Puppeteer in TypeScript\nDESCRIPTION: This snippet illustrates how to create a new browser context, open multiple pages within it, and then close the entire context. Browser contexts are useful for isolating automation tasks and managing resources efficiently.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\nconst context = await browser.createBrowserContext();\n\nconst page1 = await context.newPage();\nconst page2 = await context.newPage();\n\nawait context.close();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Evaluation with String in Puppeteer\nDESCRIPTION: Shows how to evaluate JavaScript by providing the function body as a string instead of a function. This approach is less type-safe but can be useful in certain scenarios.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/javascript-execution.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Evaluate JavaScript\nconst three = await page.evaluate(`\n    1 + 2\n`);\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping a Trace with Puppeteer (TypeScript)\nDESCRIPTION: This example demonstrates starting a Chrome DevTools performance trace on a page using the Puppeteer Tracing API. The workflow involves calling tracing.start with a path to store the trace, navigating to a URL, and then stopping the trace to write results. Dependencies include an initialized Puppeteer browser and Page object. The primary parameter is an options object specifying the 'path' to the JSON trace file. Input is page navigation and output is a saved trace file at the designated path. Only one trace may be active per browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.tracing.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nawait page.tracing.start({path: 'trace.json'});\nawait page.goto('https://www.google.com');\nawait page.tracing.stop();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using ElementHandle in Puppeteer\nDESCRIPTION: Example demonstrating how to create an ElementHandle using Page.$() method, and interact with it by clicking on a link element. The example shows the complete workflow from launching the browser to interacting with page elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  const hrefElement = await page.$('a');\n  await hrefElement.click();\n  // ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Page in Puppeteer\nDESCRIPTION: Example demonstrating how to create a new page, navigate to a URL, and take a screenshot using Puppeteer's Page class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  await page.screenshot({path: 'screenshot.png'});\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browser using Puppeteer in Browser Environment with TypeScript\nDESCRIPTION: Demonstrates how to import the browser-specific entrypoint from puppeteer-core and connect to an existing browser instance via WebSocket. The example shows basic browser interaction including checking page count and properly disconnecting.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/running-puppeteer-in-the-browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';\n\nconst browser = await puppeteer.connect({\n  browserWSEndpoint: wsUrl,\n});\n\nalert('Browser has ' + (await browser.pages()).length + ' pages');\n\nbrowser.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Configurable Priority Implementation\nDESCRIPTION: Enhanced implementation with a configuration function that allows users to set custom priority levels while maintaining backward compatibility.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Defaults to undefined which preserves Legacy Mode behavior\nlet _priority = undefined;\n\n// Export a module configuration function\nexport const setInterceptResolutionConfig = (priority = 0) =>\n  (_priority = priority);\n\n/**\n * Note that this handler uses `DEFAULT_INTERCEPT_RESOLUTION_PRIORITY` to \"pass\" on this request. It is important to use\n * the default priority when your handler has no opinion on the request and the intent is to continue() by default.\n */\npage.on('request', interceptedRequest => {\n  if (request.isInterceptResolutionHandled()) return;\n  if (\n    interceptedRequest.url().endsWith('.png') ||\n    interceptedRequest.url().endsWith('.jpg')\n  )\n    interceptedRequest.abort('failed', _priority);\n  else\n    interceptedRequest.continue(\n      interceptedRequest.continueRequestOverrides(),\n      DEFAULT_INTERCEPT_RESOLUTION_PRIORITY, // Unopinionated continuation\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Closing a Browser with Puppeteer in TypeScript\nDESCRIPTION: This code shows how to gracefully close a browser instance after launching it and creating a new page. It's important for properly ending Puppeteer sessions and freeing resources.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\nconst page = await browser.newPage();\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Testing Chrome Extension Service Worker with Puppeteer\nDESCRIPTION: This code shows how to test a Chrome Manifest V3 extension's background service worker using Puppeteer. It launches Chrome with the extension, waits for the service worker to be available, and demonstrates how to open and test the extension's popup.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/chrome-extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\nimport path from 'path';\n\nconst pathToExtension = path.join(process.cwd(), 'my-extension');\nconst browser = await puppeteer.launch({\n  args: [\n    `--disable-extensions-except=${pathToExtension}`,\n    `--load-extension=${pathToExtension}`,\n  ],\n});\n\nconst workerTarget = await browser.waitForTarget(\n  // Assumes that there is only one service worker created by the extension and its URL ends with background.js.\n  target =>\n    target.type() === 'service_worker' &&\n    target.url().endsWith('background.js'),\n);\n\nconst worker = await workerTarget.worker();\n\n// Open a popup (available for Canary channels).\nawait worker.evaluate('chrome.action.openPopup();');\n\nconst popupTarget = await browser.waitForTarget(\n  // Assumes that there is only one page with the URL ending with popup.html and that is the popup created by the extension.\n  target => target.type() === 'page' && target.url().endsWith('popup.html'),\n);\n\nconst popupPage = popupTarget.asPage();\n\n// Test the popup page as you would any other page.\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Autofilling Forms with ElementHandle in Puppeteer\nDESCRIPTION: Demonstrates how to use the autofill method to populate credit card information in a form. This works with Chrome in new headless and headful modes only and currently supports only credit card information.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Select an input on the credit card form.\nconst name = await page.waitForSelector('form #name');\n// Trigger autofill with the desired data.\nawait name.autofill({\n  creditCard: {\n    number: '4444444444444444',\n    name: 'John Smith',\n    expiryMonth: '01',\n    expiryYear: '2030',\n    cvc: '123',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Frame.waitForSelector Method Signature in TypeScript\nDESCRIPTION: TypeScript method signature for the Frame.waitForSelector method. This defines the method that waits for an element matching the given selector to appear in a frame, returning a Promise that resolves to an ElementHandle or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforselector.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  waitForSelector<Selector extends string>(\n    selector: Selector,\n    options?: WaitForSelectorOptions,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Browser Process Logs in Puppeteer (TypeScript)\nDESCRIPTION: Shows how to enable logging of browser process output in Puppeteer by setting the dumpio option to true. This is useful for debugging browser crashes or launch issues.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  dumpio: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Full Page Screenshots with Puppeteer in TypeScript\nDESCRIPTION: This snippet demonstrates how to launch a browser, navigate to a webpage, and capture a full-page screenshot. It uses the Page.screenshot() method to save the image to a file named 'hn.png' after waiting for network activity to complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/screenshots.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto('https://news.ycombinator.com', {\n  waitUntil: 'networkidle2',\n});\nawait page.screenshot({\n  path: 'hn.png',\n});\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Monitoring WebWorker Lifecycle Example in TypeScript\nDESCRIPTION: Example demonstrating how to listen for worker creation and destruction events, and how to list all current workers on a page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.webworker.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('workercreated', worker =>\n  console.log('Worker created: ' + worker.url()),\n);\npage.on('workerdestroyed', worker =>\n  console.log('Worker destroyed: ' + worker.url()),\n);\n\nconsole.log('Current workers:');\nfor (const worker of page.workers()) {\n  console.log('  ' + worker.url());\n}\n```\n\n----------------------------------------\n\nTITLE: Emulating CSS Media Features with Page.emulateMediaFeatures in TypeScript\nDESCRIPTION: This example demonstrates how to use the Page.emulateMediaFeatures() method to emulate various CSS media features such as 'prefers-color-scheme', 'prefers-reduced-motion', and 'color-gamut'. It shows how to set these features and verify them using matchMedia() in page.evaluate() calls.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatemediafeatures.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.emulateMediaFeatures([\n  {name: 'prefers-color-scheme', value: 'dark'},\n]);\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n// → false\n\nawait page.emulateMediaFeatures([\n  {name: 'prefers-reduced-motion', value: 'reduce'},\n]);\nawait page.evaluate(\n  () => matchMedia('(prefers-reduced-motion: reduce)').matches,\n);\n// → true\nawait page.evaluate(\n  () => matchMedia('(prefers-reduced-motion: no-preference)').matches,\n);\n// → false\n\nawait page.emulateMediaFeatures([\n  {name: 'prefers-color-scheme', value: 'dark'},\n  {name: 'prefers-reduced-motion', value: 'reduce'},\n]);\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n// → false\nawait page.evaluate(\n  () => matchMedia('(prefers-reduced-motion: reduce)').matches,\n);\n// → true\nawait page.evaluate(\n  () => matchMedia('(prefers-reduced-motion: no-preference)').matches,\n);\n// → false\n\nawait page.emulateMediaFeatures([{name: 'color-gamut', value: 'p3'}]);\nawait page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(color-gamut: p3)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);\n// → false\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Component Custom Query Handler in Puppeteer\nDESCRIPTION: Shows how to implement a custom query handler for Vue components that traverses the DOM to find elements based on Vue's internal component naming.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nPuppeteer.registerCustomQueryHandler('vue', {\n  queryOne: (element, name) => {\n    const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT);\n    do {\n      const currentNode = walker.currentNode;\n      if (\n        currentNode.__vnode?.ctx?.type?.name.toLowerCase() ===\n        name.toLocaleLowerCase()\n      ) {\n        return currentNode;\n      }\n    } while (walker.nextNode());\n\n    return null;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Chrome Extension Service Worker with Puppeteer (Manifest V3)\nDESCRIPTION: Code for launching a browser with a Chrome extension loaded and accessing its background service worker for testing. This approach works for Manifest V3 extensions and demonstrates how to test popup functionality.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/chrome-extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\nimport path from 'path';\n\nconst pathToExtension = path.join(process.cwd(), 'my-extension');\nconst browser = await puppeteer.launch({\n  args: [\n    `--disable-extensions-except=${pathToExtension}`,\n    `--load-extension=${pathToExtension}`,\n  ],\n});\n\nconst workerTarget = await browser.waitForTarget(\n  // Assumes that there is only one service worker created by the extension and its URL ends with background.js.\n  target =>\n    target.type() === 'service_worker' &&\n    target.url().endsWith('background.js'),\n);\n\nconst worker = await workerTarget.worker();\n\n// Open a popup (available for Canary channels).\nawait worker.evaluate('chrome.action.openPopup();');\n\nconst popupTarget = await browser.waitForTarget(\n  // Assumes that there is only one page with the URL ending with popup.html and that is the popup created by the extension.\n  target => target.type() === 'page' && target.url().endsWith('popup.html'),\n);\n\nconst popupPage = popupTarget.asPage();\n\n// Test the popup page as you would any other page.\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Connecting Puppeteer to Chrome Extension Tab\nDESCRIPTION: Example showing how to connect Puppeteer to a Chrome extension tab using ExtensionTransport. Demonstrates creating a tab, establishing a connection, and performing basic page operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/running-puppeteer-in-extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  connect,\n  ExtensionTransport,\n} from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';\n\n// Create a tab or find a tab to attach to.\nconst tab = await chrome.tabs.create({\n  url,\n});\n// Connect Puppeteer using the ExtensionTransport.connectTab.\nconst browser = await connect({\n  transport: await ExtensionTransport.connectTab(tab.id),\n});\n// You will have a single page on the browser object, which corresponds\n// to the tab you connected the transport to.\nconst [page] = await browser.pages();\n// Perform the usual operations with Puppeteer page.\nconsole.log(await page.evaluate('document.title'));\nbrowser.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Reading Files from Node.js in Browser Context with Puppeteer\nDESCRIPTION: Example showing how to expose a file reading function to the browser using Puppeteer's exposeFunction. The function uses Node.js fs module to read files that can then be accessed from browser JavaScript.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.exposefunction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\nimport fs from 'node:fs';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  page.on('console', msg => console.log(msg.text()));\n  await page.exposeFunction('readfile', async filePath => {\n    return new Promise((resolve, reject) => {\n      fs.readFile(filePath, 'utf8', (err, text) => {\n        if (err) reject(err);\n        else resolve(text);\n      });\n    });\n  });\n  await page.evaluate(async () => {\n    // use window.readfile to read contents of a file\n    const content = await window.readfile('/etc/hosts');\n    console.log(content);\n  });\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Launching Default Headless Mode in Puppeteer\nDESCRIPTION: Demonstrates two equivalent ways to launch Chrome in the default headless mode. The headless mode runs Chrome without a visible UI.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/headless-modes.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch();\n// Equivalent to\nconst browser = await puppeteer.launch({headless: true});\n```\n\n----------------------------------------\n\nTITLE: Handling Navigation after Page Click in Puppeteer (TypeScript)\nDESCRIPTION: Demonstrates the correct pattern to handle navigation triggered by a `page.click()` action in Puppeteer. It uses `Promise.all` to concurrently wait for both the navigation event (`page.waitForNavigation`) and the click action to complete, thus avoiding potential race conditions. The `response` variable will contain the result of the navigation once both promises resolve.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst [response] = await Promise.all([\n  page.waitForNavigation(waitOptions),\n  page.click(selector, clickOptions),\n]);\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Cookies in Puppeteer with TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve cookies from the browser's default context. It navigates to a page, sets a cookie via script evaluation, and then prints all available cookies using the browser.cookies() method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\nconst page = await browser.newPage();\n\nawait page.goto('https://example.com');\n\n// In this example, we set a cookie using script evaluation.\n// Cookies can be set by the page/server in various ways.\nawait page.evaluate(() => {\n  document.cookie = 'myCookie = MyCookieValue';\n});\n\nconsole.log(await browser.cookies()); // print available cookies.\n```\n\n----------------------------------------\n\nTITLE: Capital Letter Input Example using Keyboard API\nDESCRIPTION: Example showing how to press a capital 'A' by using Shift key combination with keyboard actions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.keyboard.down('Shift');\nawait page.keyboard.press('KeyA');\nawait page.keyboard.up('Shift');\n```\n\n----------------------------------------\n\nTITLE: Creating an MD5 Hash Function in Browser using Puppeteer\nDESCRIPTION: Example of using page.exposeFunction to add an MD5 hashing function to the browser context. The function uses Node.js crypto module to calculate MD5 hashes that can be called from the browser's JavaScript.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.exposefunction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\nimport crypto from 'crypto';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  page.on('console', msg => console.log(msg.text()));\n  await page.exposeFunction('md5', text =>\n    crypto.createHash('md5').update(text).digest('hex'),\n  );\n  await page.evaluate(async () => {\n    // use window.md5 to compute hashes\n    const myString = 'PUPPETEER';\n    const myHash = await window.md5(myString);\n    console.log(`md5 of ${myString} is ${myHash}`);\n  });\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Launching Firefox and Chrome with WebDriver BiDi in Puppeteer\nDESCRIPTION: This code snippet demonstrates how to launch Firefox and Chrome browsers using Puppeteer with WebDriver BiDi protocol. Firefox uses WebDriver BiDi by default, while Chrome requires explicit configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/webdriver-bidi.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst firefoxBrowser = await puppeteer.launch({\n  browser: 'firefox', // WebDriver BiDi is used by default.\n});\nconst page = await firefoxBrowser.newPage();\n...\nawait firefoxBrowser.close();\n\nconst chromeBrowser = await puppeteer.launch({\n  browser: 'chrome',\n  protocol: 'webDriverBiDi', // CDP would be used by default for Chrome.\n});\nconst page = await chromeBrowser.newPage();\n...\nawait chromeBrowser.close();\n```\n\n----------------------------------------\n\nTITLE: Basic Puppeteer Test Structure in Angular\nDESCRIPTION: TypeScript code showing the basic structure of a Puppeteer test in an Angular project. It demonstrates how to set up browser hooks and interact with page elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Testing framework specific imports\n\nimport {setupBrowserHooks, getBrowserState} from './utils';\n\ndescribe('<Test Name>', function () {\n  setupBrowserHooks();\n  it('is running', async function () {\n    const {page} = getBrowserState();\n    // Query elements\n    await page\n      .locator('my-component')\n      // Click on the element once found\n      .click();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Page.goto Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.goto() method in Puppeteer. It takes a URL string and optional GoToOptions, returning a Promise that resolves to an HTTPResponse or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.goto.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  goto(url: string, options?: GoToOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PuppeteerNode.launch Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the launch() method of the PuppeteerNode class. It takes an optional LaunchOptions parameter and returns a Promise resolving to a Browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.launch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  launch(options?: LaunchOptions): Promise<Browser>;\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Request Interception Handlers\nDESCRIPTION: Demonstrates how to safely implement asynchronous request handlers with proper resolution status checking before and after async operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n\n  return new Promise(resolve => {\n    setTimeout(() => {\n      if (interceptedRequest.isInterceptResolutionHandled()) {\n        resolve();\n        return;\n      }\n      interceptedRequest.continue();\n      resolve();\n    }, 500);\n  });\n});\npage.on('request', async interceptedRequest => {\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n\n  await someLongAsyncOperation();\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n  interceptedRequest.continue();\n});\n```\n\n----------------------------------------\n\nTITLE: Page.type Usage Examples in TypeScript\nDESCRIPTION: Examples showing how to use Page.type() method with and without delay options. Demonstrates both instant typing and slower typing that simulates user behavior.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.type('#mytextarea', 'Hello');\n// Types instantly\nawait page.type('#mytextarea', 'World', {delay: 100});\n// Types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Logging Network Requests and Responses with Puppeteer in TypeScript\nDESCRIPTION: This code snippet shows how to set up event listeners for network requests and responses in Puppeteer. It logs the URL of each request and response to the console.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-logging.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = await browser.newPage();\npage.on('request', request => {\n  console.log(request.url());\n});\n\npage.on('response', response => {\n  console.log(response.url());\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Puppeteer in TypeScript\nDESCRIPTION: This example shows how to directly set cookies in the browser's storage using Puppeteer. It launches a browser and sets two cookies for the localhost domain with specific attributes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/cookies.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\n// Sets two cookies for the localhost domain.\nawait browser.setCookie(\n  {\n    name: 'cookie1',\n    value: '1',\n    domain: 'localhost',\n    path: '/',\n    sameParty: false,\n    expires: -1,\n    httpOnly: false,\n    secure: false,\n    sourceScheme: 'NonSecure',\n  },\n  {\n    name: 'cookie2',\n    value: '2',\n    domain: 'localhost',\n    path: '/',\n    sameParty: false,\n    expires: -1,\n    httpOnly: false,\n    secure: false,\n    sourceScheme: 'NonSecure',\n  },\n);\n\nconsole.log(await browser.cookies()); // print available cookies.\n```\n\n----------------------------------------\n\nTITLE: Correct Pattern for Click and Navigation in Puppeteer\nDESCRIPTION: Demonstrates the proper way to handle click events that trigger navigation to avoid race conditions. Uses Promise.all to wait for both the navigation and click events to complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.click.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [response] = await Promise.all([\n  page.waitForNavigation(waitOptions),\n  frame.click(selector, clickOptions),\n]);\n```\n\n----------------------------------------\n\nTITLE: Example of Using JavaScript and CSS Coverage in Puppeteer\nDESCRIPTION: A complete example demonstrating how to enable JS and CSS coverage, navigate to a page, gather coverage data, and calculate the percentage of executed code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Enable both JavaScript and CSS coverage\nawait Promise.all([\n  page.coverage.startJSCoverage(),\n  page.coverage.startCSSCoverage(),\n]);\n// Navigate to page\nawait page.goto('https://example.com');\n// Disable both JavaScript and CSS coverage\nconst [jsCoverage, cssCoverage] = await Promise.all([\n  page.coverage.stopJSCoverage(),\n  page.coverage.stopCSSCoverage(),\n]);\nlet totalBytes = 0;\nlet usedBytes = 0;\nconst coverage = [...jsCoverage, ...cssCoverage];\nfor (const entry of coverage) {\n  totalBytes += entry.text.length;\n  for (const range of entry.ranges) usedBytes += range.end - range.start - 1;\n}\nconsole.log(`Bytes used: ${(usedBytes / totalBytes) * 100}%`);\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.$$eval Method in TypeScript\nDESCRIPTION: This TypeScript example shows how to use the ElementHandle.$$eval method to select elements within a feed and extract their text content. It demonstrates selecting the feed, then querying for tweets within it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.__eval.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst feedHandle = await page.$('.feed');\nexpect(\n  await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)),\n).toEqual(['Hello!', 'Hi!']);\n```\n\n----------------------------------------\n\nTITLE: Using waitForSelector for Element Handling in Puppeteer (TypeScript)\nDESCRIPTION: Demonstrates the basic workflow using the lower-level `page.waitForSelector()` API in Puppeteer. It launches a browser, creates a page, navigates, waits for an element matching 'div > .class-name' to appear, retrieves its `ElementHandle`, performs a click, explicitly disposes of the handle using `element.dispose()` to prevent memory leaks, and closes the browser. This method requires manual handling and disposal compared to locators. Requires the `puppeteer` library.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Import puppeteer\nimport puppeteer from 'puppeteer';\n\n// Launch the browser.\nconst browser = await puppeteer.launch();\n\n// Create a page.\nconst page = await browser.newPage();\n\n// Go to your site.\nawait page.goto('YOUR_SITE');\n\n// Query for an element handle.\nconst element = await page.waitForSelector('div > .class-name');\n\n// Do something with element...\nawait element.click(); // Just an example.\n\n// Dispose of handle.\nawait element.dispose();\n\n// Close browser.\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to waitForFunction in Puppeteer\nDESCRIPTION: Example showing how to pass arguments from Node.js to the predicate function of waitForFunction. This demonstrates waiting for a specific selector to appear in the DOM by passing the selector as an argument.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforfunction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst selector = '.foo';\nawait frame.waitForFunction(\n  selector => !!document.querySelector(selector),\n  {}, // empty options object\n  selector,\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Click Navigation in Puppeteer\nDESCRIPTION: Pattern for handling click events that trigger navigation, using Promise.all to avoid race conditions between click and navigation events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst [response] = await Promise.all([\n  page.waitForNavigation(waitOptions),\n  page.click(selector, clickOptions),\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Page.$eval() in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates basic applications of `page.$eval()`. It retrieves the `value` of an element with ID 'search', the `href` of a 'link[rel=preload]' element, and the `outerHTML` of an element with class 'main-container'. The `pageFunction` in each case accesses a specific property of the selected element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page._eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchValue = await page.$eval('#search', el => el.value);\nconst preloadHref = await page.$eval('link[rel=preload]', el => el.href);\nconst html = await page.$eval('.main-container', el => el.outerHTML);\n```\n\n----------------------------------------\n\nTITLE: Fulfilling Requests with 404 Responses Example in TypeScript\nDESCRIPTION: A practical example showing how to enable request interception and fulfill all requests with custom 404 responses. This demonstrates setting status, contentType, and body properties in the response object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.respond.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.setRequestInterception(true);\npage.on('request', request => {\n  request.respond({\n    status: 404,\n    contentType: 'text/plain',\n    body: 'Not Found!',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Promises from evaluate in Puppeteer\nDESCRIPTION: Demonstrates that promises returned from evaluate are automatically awaited. This allows for asynchronous operations within the page context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/javascript-execution.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => {\n  // wait for 100ms.\n  return new Promise(resolve => setTimeout(resolve, 100));\n});\n// Execution continues here once the Promise created in the page context resolves.\n```\n\n----------------------------------------\n\nTITLE: Using Page.emulateNetworkConditions with PredefinedNetworkConditions in TypeScript\nDESCRIPTION: This example demonstrates how to use the Page.emulateNetworkConditions method with a predefined network condition (Slow 3G). It shows the process of launching a browser, creating a new page, applying network conditions, and navigating to a URL.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatenetworkconditions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PredefinedNetworkConditions} from 'puppeteer';\nconst slow3G = PredefinedNetworkConditions['Slow 3G'];\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.emulateNetworkConditions(slow3G);\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Frame.waitForNavigation with Promise.all Pattern\nDESCRIPTION: Demonstrates the recommended pattern for using waitForNavigation with Promise.all to ensure the navigation promise resolves after an action (clicking a link) that triggers navigation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.waitfornavigation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [response] = await Promise.all([\n  // The navigation promise resolves after navigation has finished\n  frame.waitForNavigation(),\n  // Clicking the link will indirectly cause a navigation\n  frame.click('a.my-link'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Browser Process Logs with dumpio Option\nDESCRIPTION: Launches Puppeteer with the dumpio option set to true, which forwards the browser process logs to Node's standard I/O. Useful for diagnosing browser crashes or launch issues.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/debugging.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  dumpio: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Puppeteer to Chrome Extension Tab\nDESCRIPTION: Demonstrates how to create a connection between Puppeteer and a Chrome extension tab using ExtensionTransport. Shows the process of creating a tab, establishing a connection, and performing basic page operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/running-puppeteer-in-extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  connect,\n  ExtensionTransport,\n} from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';\n\n// Create a tab or find a tab to attach to.\nconst tab = await chrome.tabs.create({\n  url,\n});\n// Connect Puppeteer using the ExtensionTransport.connectTab.\nconst browser = await connect({\n  transport: await ExtensionTransport.connectTab(tab.id),\n});\n// You will have a single page on the browser object, which corresponds\n// to the tab you connected the transport to.\nconst [page] = await browser.pages();\n// Perform the usual operations with Puppeteer page.\nconsole.log(await page.evaluate('document.title'));\nbrowser.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Waiting for Dynamic Element Appearance Using Function Locator in Puppeteer (TypeScript)\nDESCRIPTION: Defines a Puppeteer locator using a JavaScript function that sets up a `MutationObserver`. The locator waits until the observer detects an `HTMLCanvasElement` being added to the document. The `.wait()` call resolves once the promise within the function locator resolves with the target element. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait page\n  .locator(() => {\n    let resolve!: (node: HTMLCanvasElement) => void;\n    const promise = new Promise(res => {\n      return (resolve = res);\n    });\n    const observer = new MutationObserver(records => {\n      for (const record of records) {\n        if (record.target instanceof HTMLCanvasElement) {\n          resolve(record.target);\n        }\n      }\n    });\n    observer.observe(document);\n    return promise;\n  })\n  .wait();\n```\n\n----------------------------------------\n\nTITLE: Network Request Interception in Puppeteer\nDESCRIPTION: Enables request interception for modifying network requests. When enabled, requests will stall until they are continued, responded to, or aborted.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsetRequestInterception(value)\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers in Puppeteer\nDESCRIPTION: Method to set extra HTTP headers that will be sent with every request the page initiates. Headers are case-insensitive and their order is not guaranteed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsetExtraHTTPHeaders(headers)\n```\n\n----------------------------------------\n\nTITLE: Using Page.waitForFrame with a Predicate Function in TypeScript\nDESCRIPTION: This example demonstrates how to use `page.waitForFrame` with an asynchronous predicate function in TypeScript. The function checks if a frame's underlying element has a `name` attribute equal to 'test'. It waits until such a frame appears and assigns it to the `frame` variable.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforframe.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst frame = await page.waitForFrame(async frame => {\n  const frameElement = await frame.frameElement();\n  if (!frameElement) {\n    return false;\n  }\n  const name = await frameElement.evaluate(el => el.getAttribute('name'));\n  return name === 'test';\n});\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Puppeteer in TypeScript\nDESCRIPTION: Demonstrates how to upload files in Puppeteer by locating a file input element and using the ElementHandle.uploadFile method. The code waits for a file input element to be available on the page and then triggers the file upload with a local file path.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/files.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileElement = await page.waitForSelector('input[type=file]');\nawait fileElement.uploadFile(['./path-to-local-file']);\n```\n\n----------------------------------------\n\nTITLE: Evaluating a Promise-Returning Function with Page.evaluate()\nDESCRIPTION: This example demonstrates how to use Page.evaluate() to run a function that returns a Promise. The method waits for the promise to resolve and returns its value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluate.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await frame.evaluate(() => {\n  return Promise.resolve(8 * 7);\n});\nconsole.log(result); // prints \"56\"\n```\n\n----------------------------------------\n\nTITLE: Browser Disconnection and Reconnection Example\nDESCRIPTION: Shows how to disconnect from a browser instance and reconnect to it using the WebSocket endpoint.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n// Store the endpoint to be able to reconnect to the browser.\nconst browserWSEndpoint = browser.wsEndpoint();\n// Disconnect puppeteer from the browser.\nawait browser.disconnect();\n\n// Use the endpoint to reestablish a connection\nconst browser2 = await puppeteer.connect({browserWSEndpoint});\n// Close the browser.\nawait browser2.close();\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Responding to Requests with Puppeteer in TypeScript\nDESCRIPTION: This example demonstrates how to use HTTPRequest.respond() to intercept all requests and respond with a 404 status. It requires enabling request interception with Page.setRequestInterception().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.respond.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.setRequestInterception(true);\npage.on('request', request => {\n  request.respond({\n    status: 404,\n    contentType: 'text/plain',\n    body: 'Not Found!',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Functions to Browser Context in Puppeteer\nDESCRIPTION: The exposeFunction method adds a function to the page's window object, allowing it to be called from the browser context. The function executes in Node.js and returns a Promise resolving to its return value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\npage.exposeFunction(name, puppeteerFunction)\n```\n\n----------------------------------------\n\nTITLE: Handling Click and Navigation in Puppeteer\nDESCRIPTION: Demonstrates the correct pattern for clicking an element and waiting for navigation to complete in Puppeteer. This approach prevents race conditions between click events and navigation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [response] = await Promise.all([\n  page.waitForNavigation(waitOptions),\n  frame.click(selector, clickOptions),\n]);\n```\n\n----------------------------------------\n\nTITLE: Pattern for Click and Wait for Navigation in Puppeteer\nDESCRIPTION: The correct pattern for handling a click that triggers navigation, using Promise.all to avoid race conditions between the click and navigation events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [response] = await Promise.all([\n  page.waitForNavigation(waitOptions),\n  frame.click(selector, clickOptions),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Page.emulateIdleState in Puppeteer\nDESCRIPTION: Example demonstrating how to set and clear idle state emulation in Puppeteer. First sets specific idle state values, then clears the emulation by calling the method with no arguments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulateidlestate.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// set idle emulation\nawait page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});\n\n// do some checks here\n...\n\n// clear idle emulation\nawait page.emulateIdleState();\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using Puppeteer ElementHandle\nDESCRIPTION: Demonstrates how to upload files in Puppeteer by locating a file input element and using the uploadFile method. The code waits for a file input element to be present on the page and then triggers a file upload with a local file path.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/files.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileElement = await page.waitForSelector('input[type=file]');\nawait fileElement.uploadFile(['./path-to-local-file']);\n```\n\n----------------------------------------\n\nTITLE: Mouse Movement Pattern Example in Puppeteer\nDESCRIPTION: Example showing how to use page.mouse to trace a square pattern by moving the mouse cursor and simulating button presses.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using 'page.mouse' to trace a 100x100 square.\nawait page.mouse.move(0, 0);\nawait page.mouse.down();\nawait page.mouse.move(0, 100);\nawait page.mouse.move(100, 100);\nawait page.mouse.move(100, 0);\nawait page.mouse.move(0, 0);\nawait page.mouse.up();\n```\n\n----------------------------------------\n\nTITLE: Overriding Navigator.languages Property Using Page.evaluateOnNewDocument in JavaScript\nDESCRIPTION: This example demonstrates how to use Page.evaluateOnNewDocument to override the navigator.languages property before the page loads. It includes both the preload script and the Puppeteer script to evaluate it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluateonnewdocument.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// preload.js\n\n// overwrite the `languages` property to use a custom getter\nObject.defineProperty(navigator, 'languages', {\n  get: function () {\n    return ['en-US', 'en', 'bn'];\n  },\n});\n\n// In your puppeteer script, assuming the preload.js file is\n// in same folder of our script.\nconst preloadFile = fs.readFileSync('./preload.js', 'utf8');\nawait page.evaluateOnNewDocument(preloadFile);\n```\n\n----------------------------------------\n\nTITLE: Basic ElementHandle.type Usage Example\nDESCRIPTION: Shows two examples of using ElementHandle.type(): one types text instantly, while the second uses a delay parameter to simulate slower typing like a real user would do.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait elementHandle.type('Hello'); // Types instantly\nawait elementHandle.type('World', {delay: 100}); // Types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Capturing Element Screenshots with Puppeteer in TypeScript\nDESCRIPTION: This snippet shows how to capture a screenshot of a specific DOM element using ElementHandle.screenshot(). It waits for a div element to appear on the page and then takes a screenshot of just that element, saving it to 'div.png'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/screenshots.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileElement = await page.waitForSelector('div');\nawait fileElement.screenshot({\n  path: 'div.png',\n});\n```\n\n----------------------------------------\n\nTITLE: Geolocation Control in Puppeteer\nDESCRIPTION: Sets the page's geolocation. Requires appropriate permissions to be set using BrowserContext.overridePermissions().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsetGeolocation(options)\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Page.waitForFunction in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to pass arguments from the Node.js environment to the function evaluated by `page.waitForFunction` in the browser context. It waits until an element matching the provided `selector` exists in the DOM. It assumes a `page` object from Puppeteer is already instantiated.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst selector = '.foo';\nawait page.waitForFunction(\n  selector => !!document.querySelector(selector),\n  {},\n  selector,\n);\n```\n\n----------------------------------------\n\nTITLE: Launching Puppeteer in Non-Headless Mode (TypeScript)\nDESCRIPTION: Demonstrates how to launch Puppeteer with headless mode disabled for visual debugging. This allows you to see what the browser is displaying during test execution.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({headless: false});\n```\n\n----------------------------------------\n\nTITLE: Generating PDF of Page in Puppeteer\nDESCRIPTION: The pdf method generates a PDF of the page using the 'print' CSS media type. It allows customization through options and can be modified to use 'screen' media type by calling page.emulateMediaType('screen') before pdf generation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\npage.pdf(options)\n```\n\n----------------------------------------\n\nTITLE: Using Browser.waitForTarget to Find a New Window Target in TypeScript\nDESCRIPTION: This example demonstrates how to use the Browser.waitForTarget method to find a target for a page opened via window.open. It waits for a target with a specific URL to appear.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.waitfortarget.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => window.open('https://www.example.com/'));\nconst newWindowTarget = await browser.waitForTarget(\n  target => target.url() === 'https://www.example.com/',\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Click and Navigation in Puppeteer\nDESCRIPTION: This code demonstrates the correct pattern for clicking an element and waiting for navigation in Puppeteer. It uses Promise.all to handle potential race conditions between the click and navigation events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.click.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [response] = await Promise.all([\n  page.waitForNavigation(waitOptions),\n  page.click(selector, clickOptions),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Browser Context Example\nDESCRIPTION: Example showing how to create a new browser context, open a page within it, navigate to a URL, and properly close the context when finished.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new browser context\nconst context = await browser.createBrowserContext();\n// Create a new page inside context.\nconst page = await context.newPage();\n// ... do stuff with page ...\nawait page.goto('https://example.com');\n// Dispose context once it's no longer needed.\nawait context.close();\n```\n\n----------------------------------------\n\nTITLE: Capturing Element-Specific Screenshot with Puppeteer in TypeScript\nDESCRIPTION: This snippet shows how to capture a screenshot of a specific element on a webpage using Puppeteer. It uses the ElementHandle.screenshot() method to save the screenshot of a div element as a PNG file.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/screenshots.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileElement = await page.waitForSelector('div');\nawait fileElement.screenshot({\n  path: 'div.png',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Puppeteer Tracing API\nDESCRIPTION: Example showing how to start and stop a trace recording while navigating to a webpage. The trace is saved to a JSON file that can be opened in Chrome DevTools or timeline viewer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.tracing.start({path: 'trace.json'});\nawait page.goto('https://www.google.com');\nawait page.tracing.stop();\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Multiple Request Handlers in Puppeteer\nDESCRIPTION: Demonstrates implementing multiple asynchronous request handlers with proper resolution checking to prevent race conditions and handle timing issues.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n\n  return new Promise(resolve => {\n    setTimeout(() => {\n      if (interceptedRequest.isInterceptResolutionHandled()) {\n        resolve();\n        return;\n      }\n      interceptedRequest.continue();\n      resolve();\n    }, 500);\n  });\n});\npage.on('request', async interceptedRequest => {\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n\n  await someLongAsyncOperation();\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n  interceptedRequest.continue();\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Configurable Cooperative Intercept Handler in Puppeteer\nDESCRIPTION: Fine-grained control implementation that allows separate configuration of abort and continue priorities through a typed configuration interface. Provides maximum flexibility while maintaining backward compatibility.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InterceptResolutionConfig {\n  abortPriority?: number;\n  continuePriority?: number;\n}\n\n// This approach supports multiple priorities based on situational\n// differences. You could, for example, create a config that\n// allowed separate priorities for PNG vs JPG.\nconst DEFAULT_CONFIG: InterceptResolutionConfig = {\n  abortPriority: undefined, // Default to Legacy Mode\n  continuePriority: undefined, // Default to Legacy Mode\n};\n\n// Defaults to undefined which preserves Legacy Mode behavior\nlet _config: Partial<InterceptResolutionConfig> = {};\n\nexport const setInterceptResolutionConfig = (\n  config: InterceptResolutionConfig,\n) => (_config = {...DEFAULT_CONFIG, ...config});\n\npage.on('request', interceptedRequest => {\n  if (request.isInterceptResolutionHandled()) return;\n  if (\n    interceptedRequest.url().endsWith('.png') ||\n    interceptedRequest.url().endsWith('.jpg')\n  ) {\n    interceptedRequest.abort('failed', _config.abortPriority);\n  } else {\n    // Here we use a custom-configured priority to allow for Opinionated\n    // continuation.\n    // We would only want to allow this if we had a very clear reason why\n    // some use cases required Opinionated continuation.\n    interceptedRequest.continue(\n      interceptedRequest.continueRequestOverrides(),\n      _config.continuePriority, // Why would we ever want priority!==0 here?\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Default Headless Browser in Puppeteer\nDESCRIPTION: Demonstrates the default browser launch which uses the new headless mode. Shows both explicit and implicit headless configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/headless-modes.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch();\n// Equivalent to\nconst browser = await puppeteer.launch({headless: true});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Visibility Using Locators in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element matching the CSS selector '.loading' using `page.locator()` and waits for it to become visible or hidden in the DOM using `.wait()`. This is useful when needing to ensure an element's state without performing an interaction. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// '.loading' is a CSS selector.\nawait page.locator('.loading').wait();\n```\n\n----------------------------------------\n\nTITLE: Running Puppeteer Scripts in Docker\nDESCRIPTION: Command to run a Puppeteer script inside a Docker container. It requires the SYS_ADMIN capability since the browser runs in sandbox mode, and uses the --init flag to properly manage processes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/docker.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i --init --cap-add=SYS_ADMIN --rm ghcr.io/puppeteer/puppeteer:latest node -e \"$(cat path/to/script.js)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Permissions in Puppeteer\nDESCRIPTION: Shows how to configure browser permissions for specific domains using the default browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/browser-management.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\nconst context = browser.defaultBrowserContext();\n\nawait context.overridePermissions('https://html5demos.com', ['geolocation']);\n```\n\n----------------------------------------\n\nTITLE: Tracing a Square Using Mouse Movements in Puppeteer\nDESCRIPTION: Example of using page.mouse to trace a 100x100 square. This demonstrates basic mouse movement and button press operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using 'page.mouse' to trace a 100x100 square.\nawait page.mouse.move(0, 0);\nawait page.mouse.down();\nawait page.mouse.move(0, 100);\nawait page.mouse.move(100, 100);\nawait page.mouse.move(100, 0);\nawait page.mouse.move(0, 0);\nawait page.mouse.up();\n```\n\n----------------------------------------\n\nTITLE: Form Input and Submission with ElementHandle\nDESCRIPTION: An example demonstrating how to type text into an input field and then submit the form by pressing Enter. This combines ElementHandle.type() with ElementHandle.press() methods.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.type.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst elementHandle = await page.$('input');\nawait elementHandle.type('some text');\nawait elementHandle.press('Enter');\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Browser Page Example\nDESCRIPTION: Demonstrates how to launch a browser, create a new page, navigate to a URL, and close the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto('https://example.com');\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Event Handling for HTTP Requests in Puppeteer\nDESCRIPTION: Example showing how to listen for the 'request' event emitted by a Puppeteer page object. This pattern can be used to intercept and process HTTP requests made by the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npage.on('request', request => ...)\n```\n\n----------------------------------------\n\nTITLE: Defining Page.evaluate() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the Page.evaluate() method. It defines the method's generic types and parameters, allowing for flexible function evaluation in the page context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ARIA Selectors in Puppeteer\nDESCRIPTION: Shows how to use ARIA selectors in Puppeteer via the '-p-aria' syntax to find elements using their computed accessible name and role, which is useful for accessibility-focused testing.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.locator('::-p-aria(Submit)').click();\nawait page.locator('::-p-aria([name=\"Click me\"][role=\"button\"])').click();\n```\n\n----------------------------------------\n\nTITLE: Finding and Logging the Focused Node in TypeScript\nDESCRIPTION: Example demonstrating how to capture the accessibility tree, find the focused node using a recursive function, and log its name. This shows how to traverse the accessibility tree returned by snapshot().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.accessibility.snapshot.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst snapshot = await page.accessibility.snapshot();\nconst node = findFocusedNode(snapshot);\nconsole.log(node && node.name);\n\nfunction findFocusedNode(node) {\n  if (node.focused) return node;\n  for (const child of node.children || []) {\n    const foundNode = findFocusedNode(child);\n    return foundNode;\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Specific HTTP Responses with Puppeteer in TypeScript\nDESCRIPTION: These snippets demonstrate using the Page.waitForResponse method to pause execution until a specific HTTP response is received. Dependencies include the Puppeteer library with a page instance already initialized. The examples cover matching responses by static URL string, synchronous predicate based on URL and status, and an asynchronous predicate evaluating response contents. The key parameter is urlOrPredicate, which accepts either a URL string or a function (sync/async) for advanced response filtering, and each call returns a Promise resolving to the HTTPResponse object. The snippets highlight how to work with various methods on the HTTPResponse and manage asynchronous browser events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforresponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstResponse = await page.waitForResponse(\n  'https://example.com/resource',\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst finalResponse = await page.waitForResponse(\n  response =>\n    response.url() === 'https://example.com' && response.status() === 200,\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst finalResponse = await page.waitForResponse(async response => {\n  return (await response.text()).includes('<html>');\n});\nreturn finalResponse.ok();\n```\n\n----------------------------------------\n\nTITLE: Passing ElementHandle as Argument to Page.evaluate()\nDESCRIPTION: This snippet demonstrates how to pass ElementHandle instances (including JSHandles) as arguments to the pageFunction in Page.evaluate(). It retrieves the innerHTML of a body element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluate.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bodyHandle = await page.$('body');\nconst html = await page.evaluate(body => body.innerHTML, bodyHandle);\nawait bodyHandle.dispose();\n```\n\n----------------------------------------\n\nTITLE: Dumping Frame Tree Example in TypeScript\nDESCRIPTION: A complete example showing how to navigate to a page and recursively dump its frame tree structure. This demonstrates traversing frame hierarchies using mainFrame() and childFrames() methods.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://www.google.com/chrome/browser/canary.html');\n  dumpFrameTree(page.mainFrame(), '');\n  await browser.close();\n\n  function dumpFrameTree(frame, indent) {\n    console.log(indent + frame.url());\n    for (const child of frame.childFrames()) {\n      dumpFrameTree(child, indent + '  ');\n    }\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Emulating Network Conditions with PredefinedNetworkConditions in Puppeteer (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates launching a Puppeteer browser, creating a page, and then sequentially emulating different network conditions ('Slow 3G', 'Fast 3G', 'Slow 4G', 'Fast 4G') using the `PredefinedNetworkConditions` object and the `page.emulateNetworkConditions()` method before navigating to a URL. It showcases how to switch between different predefined network profiles within a single script.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.predefinednetworkconditions.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {PredefinedNetworkConditions} from 'puppeteer';\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 3G']);\n  await page.goto('https://www.google.com');\n  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 3G']);\n  await page.goto('https://www.google.com');\n  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 4G']); // alias to Fast 3G.\n  await page.goto('https://www.google.com');\n  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 4G']);\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Exposing an MD5 Hashing Function using Puppeteer in TypeScript\nDESCRIPTION: This example demonstrates using `page.exposeFunction` to add a function named `md5` to the page's `window` object. This exposed function utilizes the Node.js `crypto` module to compute the MD5 hash of a given string. The example then uses `page.evaluate` to call `window.md5` from within the browser context and logs the computed hash. It requires the `puppeteer` and `crypto` modules.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.exposefunction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport puppeteer from 'puppeteer';\nimport crypto from 'crypto';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  page.on('console', msg => console.log(msg.text()));\n  await page.exposeFunction('md5', text =>\n    crypto.createHash('md5').update(text).digest('hex'),\n  );\n  await page.evaluate(async () => {\n    // use window.md5 to compute hashes\n    const myString = 'PUPPETEER';\n    const myHash = await window.md5(myString);\n    console.log(`md5 of ${myString} is ${myHash}`);\n  });\n  await browser.close();\n})();\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Untrusted Click Events in Puppeteer\nDESCRIPTION: Demonstrates how to generate an untrusted click event by evaluating JavaScript code directly in the page context. This approach bypasses Puppeteer's trusted event generation to manually trigger a button click.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => {\n  document.querySelector('button[type=submit]').click();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Page.waitForNavigation with Page Interactions in TypeScript\nDESCRIPTION: An example showing how to use Page.waitForNavigation with Promise.all to handle navigation triggered by clicking a link. This pattern ensures the code waits for navigation to complete before continuing execution.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfornavigation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [response] = await Promise.all([\n  page.waitForNavigation(), // The promise resolves after navigation has finished\n  page.click('a.my-link'), // Clicking the link will indirectly cause a navigation\n]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies with Puppeteer in TypeScript\nDESCRIPTION: This snippet illustrates how to delete specific cookies from the browser's storage using Puppeteer. It launches a browser and deletes two cookies for the localhost domain with specified attributes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/cookies.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\n// Deletes two cookies for the localhost domain.\nawait browser.deleteCookie(\n  {\n    name: 'cookie1',\n    value: '1',\n    domain: 'localhost',\n    path: '/',\n    sameParty: false,\n    expires: -1,\n    httpOnly: false,\n    secure: false,\n    sourceScheme: 'NonSecure',\n  },\n  {\n    name: 'cookie2',\n    value: '2',\n    domain: 'localhost',\n    path: '/',\n    sameParty: false,\n    expires: -1,\n    httpOnly: false,\n    secure: false,\n    sourceScheme: 'NonSecure',\n  },\n);\n\nconsole.log(await browser.cookies()); // print available cookies.\n```\n\n----------------------------------------\n\nTITLE: Using Page.setCookie() Method Example\nDESCRIPTION: Example demonstrating how to use the Page.setCookie() method to set multiple cookies for a page, passing cookie objects as parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setcookie.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.setCookie(cookieObject1, cookieObject2);\n```\n\n----------------------------------------\n\nTITLE: Request Handlers with InterceptResolutionState in Puppeteer\nDESCRIPTION: Shows advanced implementation using interceptResolutionState for finer-grained control over request interception handling and resolution status checking.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  const {action} = interceptedRequest.interceptResolutionState();\n  if (action === InterceptResolutionAction.AlreadyHandled) return;\n\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const {action} = interceptedRequest.interceptResolutionState();\n      if (action === InterceptResolutionAction.AlreadyHandled) {\n        resolve();\n        return;\n      }\n      interceptedRequest.continue();\n      resolve();\n    }, 500);\n  });\n});\npage.on('request', async interceptedRequest => {\n  if (\n    interceptedRequest.interceptResolutionState().action ===\n    InterceptResolutionAction.AlreadyHandled\n  )\n    return;\n\n  await someLongAsyncOperation();\n  if (\n    interceptedRequest.interceptResolutionState().action ===\n    InterceptResolutionAction.AlreadyHandled\n  )\n    return;\n  interceptedRequest.continue();\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Text Input Using ElementHandle in Puppeteer\nDESCRIPTION: Sends keyboard events to type text into an element. Generates keydown, keypress/input, and keyup events for each character. The element must be focused first.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nelementHandle.type(text, options)\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard.type Method in Puppeteer\nDESCRIPTION: This example demonstrates how to use the Keyboard.type method in Puppeteer. It shows typing text instantly and with a delay to simulate user input.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.keyboard.type('Hello'); // Types instantly\nawait page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Text Selection Example using Keyboard API\nDESCRIPTION: Example demonstrating how to use keyboard actions to type text, select part of it using Shift key, and delete the selection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.keyboard.type('Hello World!');\nawait page.keyboard.press('ArrowLeft');\n\nawait page.keyboard.down('Shift');\nfor (let i = 0; i < ' World'.length; i++)\n  await page.keyboard.press('ArrowLeft');\nawait page.keyboard.up('Shift');\n\nawait page.keyboard.press('Backspace');\n// Result text will end up saying 'Hello!'\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies in Puppeteer with TypeScript\nDESCRIPTION: This snippet demonstrates how to delete cookies from the browser's storage using the Browser.deleteCookie() method. It removes two specific cookies from the localhost domain by providing their detailed configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/cookies.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\n// Deletes two cookies for the localhost domain.\nawait browser.deleteCookie(\n  {\n    name: 'cookie1',\n    value: '1',\n    domain: 'localhost',\n    path: '/',\n    sameParty: false,\n    expires: -1,\n    httpOnly: false,\n    secure: false,\n    sourceScheme: 'NonSecure',\n  },\n  {\n    name: 'cookie2',\n    value: '2',\n    domain: 'localhost',\n    path: '/',\n    sameParty: false,\n    expires: -1,\n    httpOnly: false,\n    secure: false,\n    sourceScheme: 'NonSecure',\n  },\n);\n\nconsole.log(await browser.cookies()); // print available cookies.\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Puppeteer with TypeScript\nDESCRIPTION: This snippet shows how to directly write cookies into the browser's storage using Puppeteer. It creates two cookies for the localhost domain, specifying various cookie properties like name, value, domain, and security settings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/cookies.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\n// Sets two cookies for the localhost domain.\nawait browser.setCookie(\n  {\n    name: 'cookie1',\n    value: '1',\n    domain: 'localhost',\n    path: '/',\n    sameParty: false,\n    expires: -1,\n    httpOnly: false,\n    secure: false,\n    sourceScheme: 'NonSecure',\n  },\n  {\n    name: 'cookie2',\n    value: '2',\n    domain: 'localhost',\n    path: '/',\n    sameParty: false,\n    expires: -1,\n    httpOnly: false,\n    secure: false,\n    sourceScheme: 'NonSecure',\n  },\n);\n\nconsole.log(await browser.cookies()); // print available cookies.\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer via NPM/Yarn\nDESCRIPTION: Command to install Puppeteer in a project using npm or yarn package managers. This installation automatically downloads Chrome for Testing browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i puppeteer\n```\n\n----------------------------------------\n\nTITLE: Basic Puppeteer E2E Test Structure\nDESCRIPTION: TypeScript code demonstrating the basic structure of a Puppeteer E2E test, including setup and element interaction.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Testing framework specific imports\n\nimport {setupBrowserHooks, getBrowserState} from './utils';\n\ndescribe('<Test Name>', function () {\n  setupBrowserHooks();\n  it('is running', async function () {\n    const {page} = getBrowserState();\n    // Query elements\n    await page\n      .locator('my-component')\n      // Click on the element once found\n      .click();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle with Page.evaluate()\nDESCRIPTION: This snippet demonstrates how to pass ElementHandle instances (including JSHandles) as arguments to the pageFunction in Page.evaluate(). It shows how to evaluate a function that uses the passed handle and then dispose of it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bodyHandle = await page.$('body');\nconst html = await page.evaluate(body => body.innerHTML, bodyHandle);\nawait bodyHandle.dispose();\n```\n\n----------------------------------------\n\nTITLE: ElementHandle Screenshot Base64 Implementation\nDESCRIPTION: Implementation of the screenshot method that returns a base64-encoded string representation of the element screenshot. The method scrolls the element into view if needed and throws an error if the element is detached from DOM.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.screenshot.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  screenshot(\n    options: Readonly<ScreenshotOptions> & {\n      encoding: 'base64';\n    },\n  ): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ElementHandle.type Method in TypeScript\nDESCRIPTION: Examples showing how to use the ElementHandle.type() method with and without delay options. The first call types instantly while the second demonstrates typing with a delay to simulate human-like typing.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait elementHandle.type('Hello'); // Types instantly\nawait elementHandle.type('World', {delay: 100}); // Types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Using Page.emulate() Method with Puppeteer in TypeScript\nDESCRIPTION: This example demonstrates how to use the Page.emulate() method to emulate an iPhone 15 Pro. It imports the KnownDevices from Puppeteer, launches a browser, creates a new page, emulates the device, navigates to Google, and then closes the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulate.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {KnownDevices} from 'puppeteer';\nconst iPhone = KnownDevices['iPhone 15 Pro'];\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.emulate(iPhone);\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Browser Page Example\nDESCRIPTION: Example showing how to launch a browser, create a new page, navigate to a URL, and close the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto('https://example.com');\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Generating Untrusted Click Events in Puppeteer with Page Evaluation\nDESCRIPTION: This snippet demonstrates how to generate an untrusted click event in Puppeteer by using page.evaluate() to execute client-side JavaScript. Unlike Puppeteer's built-in click methods which generate trusted events, this approach simulates a programmatic click that doesn't include accompanying mouse events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => {\n  document.querySelector('button[type=submit]').click();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mouse.wheel for Zooming into an Element in Puppeteer\nDESCRIPTION: An example that demonstrates using the mouse.wheel method to zoom into an element on a webpage. The code first navigates to a page, finds an element, moves the mouse to the center of the element, and then simulates a wheel event to zoom in.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.wheel.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.goto(\n  'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366',\n);\n\nconst elem = await page.$('div');\nconst boundingBox = await elem.boundingBox();\nawait page.mouse.move(\n  boundingBox.x + boundingBox.width / 2,\n  boundingBox.y + boundingBox.height / 2,\n);\n\nawait page.mouse.wheel({deltaY: -100});\n```\n\n----------------------------------------\n\nTITLE: Illustrating Cooperative Intercept Mode with Respond Winning in Puppeteer\nDESCRIPTION: This example demonstrates Cooperative Intercept Mode where all handlers specify a priority. The respond() operation wins due to its high priority and tiebreaker rules.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Final outcome: cooperative respond() @ 15\npage.setRequestInterception(true);\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to abort at priority 10\n  request.abort('failed', 10);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to continue at priority 15\n  request.continue(request.continueRequestOverrides(), 15);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to respond at priority 15\n  request.respond(request.responseForRequest(), 15);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to respond at priority 12\n  request.respond(request.responseForRequest(), 12);\n});\npage.on('request', request => {\n  // { action: InterceptResolutionAction.Respond, priority: 15 }, because respond @ 15 > continue @ 15 > respond @ 12 > abort @ 10\n  console.log(request.interceptResolutionState());\n});\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard.sendCharacter Method in Puppeteer\nDESCRIPTION: This example demonstrates how to use the sendCharacter method to input a Chinese character into a page using Puppeteer. It sends the character '嗨' (hello) to the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.sendcharacter.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.keyboard.sendCharacter('嗨');\n```\n\n----------------------------------------\n\nTITLE: Launching Browsers with WebDriver BiDi Protocol in Puppeteer\nDESCRIPTION: This example demonstrates how to launch Firefox (which uses WebDriver BiDi by default) and Chrome (which requires explicit protocol specification) with WebDriver BiDi support in Puppeteer. The code shows the complete process from initialization to browser closure.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/webdriver-bidi.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst firefoxBrowser = await puppeteer.launch({\n  browser: 'firefox', // WebDriver BiDi is used by default.\n});\nconst page = await firefoxBrowser.newPage();\n...\nawait firefoxBrowser.close();\n\nconst chromeBrowser = await puppeteer.launch({\n  browser: 'chrome',\n  protocol: 'webDriverBiDi', // CDP would be used by default for Chrome.\n});\nconst page = await chromeBrowser.newPage();\n...\nawait chromeBrowser.close();\n```\n\n----------------------------------------\n\nTITLE: Synchronous Multiple Request Handlers in Puppeteer\nDESCRIPTION: Shows how to implement multiple synchronous request handlers that work together safely by checking the resolution status before handling requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n  interceptedRequest.continue();\n});\n\npage.on('request', interceptedRequest => {\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n  interceptedRequest.abort();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Page.waitForFileChooser in Puppeteer\nDESCRIPTION: This example demonstrates how to use the waitForFileChooser method in conjunction with a click event to handle a file upload. It waits for the file chooser, clicks a button to trigger it, and then accepts a specific file.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfilechooser.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [fileChooser] = await Promise.all([\n  page.waitForFileChooser(),\n  page.click('#upload-file-button'),\n  // some button that triggers file selection\n]);\nawait fileChooser.accept(['/tmp/myfile.pdf']);\n```\n\n----------------------------------------\n\nTITLE: Waiting for File Chooser and Selecting a File in Puppeteer (TypeScript)\nDESCRIPTION: Demonstrates how to use page.waitForFileChooser in conjunction with an action (like clicking an upload button) that triggers a file selection dialog in Puppeteer. It shows awaiting the file chooser event and programmatically selecting a file using the accept method. Requires Puppeteer as a dependency, and expects a valid file path string as input.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforfilechooser.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst [fileChooser] = await Promise.all([\\n  page.waitForFileChooser(),\\n  page.click('#upload-file-button'),\\n  // some button that triggers file selection\\n]);\\nawait fileChooser.accept(['/tmp/myfile.pdf']);\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer via npm\nDESCRIPTION: This snippet shows how to install Puppeteer using npm. It provides two options: installing Puppeteer with a compatible Chrome browser, or installing Puppeteer-core as a library without downloading Chrome.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i puppeteer # Downloads compatible Chrome during installation.\nnpm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.\n```\n\n----------------------------------------\n\nTITLE: Typing and Form Submission with ElementHandle in TypeScript\nDESCRIPTION: A complete example showing how to select an input element, type text into it, and then submit the form by pressing the Enter key using the ElementHandle.press() method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.type.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst elementHandle = await page.$('input');\nawait elementHandle.type('some text');\nawait elementHandle.press('Enter');\n```\n\n----------------------------------------\n\nTITLE: Viewport Management in Puppeteer\nDESCRIPTION: Sets the viewport size of the page. Should be called before page navigation as many websites don't handle viewport changes well. Each page can have its own viewport size.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsetViewport(viewport)\n```\n\n----------------------------------------\n\nTITLE: Copying Selected Content to Clipboard in Puppeteer\nDESCRIPTION: Example of copying selected content to the clipboard and reading it back. This demonstrates clipboard operations in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The clipboard api does not allow you to copy, unless the tab is focused.\nawait page.bringToFront();\nawait page.evaluate(() => {\n  // Copy the selected content to the clipboard\n  document.execCommand('copy');\n  // Obtain the content of the clipboard as a string\n  return navigator.clipboard.readText();\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript and Returning a Handle in Puppeteer\nDESCRIPTION: This example demonstrates how to use Page.evaluateHandle to evaluate a string of JavaScript code within a page and return a handle to the document object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst aHandle = await page.evaluateHandle('document');\n```\n\n----------------------------------------\n\nTITLE: Credit Card Autofill Example in Puppeteer\nDESCRIPTION: A code example demonstrating how to use the autofill method to populate credit card information in a form. The example selects an input element and then triggers autofill with sample credit card data.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.autofill.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Select an input on the credit card form.\nconst name = await page.waitForSelector('form #name');\n// Trigger autofill with the desired data.\nawait name.autofill({\n  creditCard: {\n    number: '4444444444444444',\n    name: 'John Smith',\n    expiryMonth: '01',\n    expiryYear: '2030',\n    cvc: '123',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Browser Process with Puppeteer in TypeScript\nDESCRIPTION: Function signature for launching a browser process. Takes LaunchOptions as parameter and returns a Process object. This is the core function for initializing a new browser instance in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.launch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function launch(opts: LaunchOptions): Process;\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser.newPage() Method in TypeScript\nDESCRIPTION: TypeScript signature for the Browser.newPage() method which creates a new page in the default browser context. The method returns a Promise that resolves to a Page object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.newpage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract newPage(): Promise<Page>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Slow-Mo in Puppeteer (TypeScript)\nDESCRIPTION: Shows how to use the slowMo option to slow down Puppeteer operations, making it easier to observe what's happening during test execution. This example slows down operations by 250ms.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  headless: false,\n  slowMo: 250, // slow down by 250ms\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Puppeteer with Custom Chrome Path in TypeScript\nDESCRIPTION: This snippet demonstrates how to launch Puppeteer with a custom Chrome executable path. It's useful when you want to use a different version of Chrome or Chromium with Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});\n```\n\n----------------------------------------\n\nTITLE: Defining Page.tap Method in Puppeteer (TypeScript)\nDESCRIPTION: This snippet defines the tap method for the Page class in TypeScript. The method takes a string selector as input, finds the corresponding element (using standard CSS or Puppeteer-specific selectors), scrolls it into view if necessary, and simulates a tap action via the touchscreen API. The method returns a Promise that resolves when the tap action completes or throws an error if the selector doesn't match any element. Dependencies include Puppeteer, support for async/await, and correct element selectors.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.tap.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  tap(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Intercept Handler in Puppeteer\nDESCRIPTION: Example of a legacy request interception handler that aborts image requests and continues other requests without using Cooperative Intercept Mode.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  if (request.isInterceptResolutionHandled()) return;\n  if (\n    interceptedRequest.url().endsWith('.png') ||\n    interceptedRequest.url().endsWith('.jpg')\n  )\n    interceptedRequest.abort();\n  else interceptedRequest.continue();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic String Evaluation Example with Page.evaluateHandle\nDESCRIPTION: A simple example showing how to evaluate a string expression with page.evaluateHandle to get a handle to the document object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst aHandle = await page.evaluateHandle('document');\n```\n\n----------------------------------------\n\nTITLE: Scrolling an Element Using Locators in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element matching the CSS selector 'div' using `page.locator()` and scrolls it using simulated mouse wheel events. The `scrollLeft` (10px) and `scrollTop` (20px) options specify the horizontal and vertical scroll amounts. Puppeteer waits for the element to be ready (in viewport, visible, stable bounding box) before scrolling. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Scroll the div element by 10px horizontally\n// and by 20 px vertically.\nawait page.locator('div').scroll({\n  scrollLeft: 10,\n  scrollTop: 20,\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Browser in Puppeteer\nDESCRIPTION: Demonstrates how to connect to an existing browser instance using WebSocket endpoint and manage the connection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/browser-management.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.connect({\n  browserWSEndpoint: 'ws://127.0.0.1:9222/...'\n});\n\nconst page = await browser.newPage();\n\nbrowser.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Using Frame.waitForSelector in Puppeteer with TypeScript\nDESCRIPTION: This example demonstrates how to use the Frame.waitForSelector method in a Puppeteer script. It launches a browser, creates a new page, and waits for an 'img' selector to appear while navigating through different URLs.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.waitforselector.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  let currentURL;\n  page\n    .mainFrame()\n    .waitForSelector('img')\n    .then(() => console.log('First URL with image: ' + currentURL));\n\n  for (currentURL of [\n    'https://example.com',\n    'https://google.com',\n    'https://bbc.com',\n  ]) {\n    await page.goto(currentURL);\n  }\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Handling Page Request Events in Puppeteer\nDESCRIPTION: Example of registering an event handler for page requests in Puppeteer. When a request occurs, the handler receives an HTTPRequest instance representing the request.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', request => ...)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Page.waitForDevicePrompt in TypeScript\nDESCRIPTION: An example demonstrating how to use the waitForDevicePrompt method to handle device selection. It shows waiting for a device prompt while clicking a button, then selecting a specific device based on its name.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfordeviceprompt.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [devicePrompt] = Promise.all([\n  page.waitForDevicePrompt(),\n  page.click('#connect-bluetooth'),\n]);\nawait devicePrompt.select(\n  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),\n);\n```\n\n----------------------------------------\n\nTITLE: Exposing a File Reading Function using Puppeteer in TypeScript\nDESCRIPTION: This example demonstrates using `page.exposeFunction` to add an asynchronous function named `readfile` to the page's `window` object. This function uses the Node.js `fs` module to read the content of a specified file path asynchronously. The example then calls `window.readfile` from the browser context using `page.evaluate` to read `/etc/hosts` and logs its content. It depends on the `puppeteer` and `fs` modules.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.exposefunction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport puppeteer from 'puppeteer';\nimport fs from 'node:fs';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  page.on('console', msg => console.log(msg.text()));\n  await page.exposeFunction('readfile', async filePath => {\n    return new Promise((resolve, reject) => {\n      fs.readFile(filePath, 'utf8', (err, text) => {\n        if (err) reject(err);\n        else resolve(text);\n      });\n    });\n  });\n  await page.evaluate(async () => {\n    // use window.readfile to read contents of a file\n    const content = await window.readfile('/etc/hosts');\n    console.log(content);\n  });\n  await browser.close();\n})();\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Page.waitForSelector Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the `Page.waitForSelector()` method within the Puppeteer `Page` class. It defines the method's parameters: `selector` (a string representing the element to wait for) and optional `options` (of type `WaitForSelectorOptions`). The method returns a Promise that resolves to an `ElementHandle` for the found node, or `null`.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforselector.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForSelector<Selector extends string>(\n    selector: Selector,\n    options?: WaitForSelectorOptions,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.$$eval to Extract Text from Multiple Elements in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to use ElementHandle.$$eval to select multiple elements and extract their text content. It selects the 'feed' element, then queries for all 'tweet' elements within it, mapping their inner text to an array.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.__eval.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst feedHandle = await page.$('.feed');\nexpect(\n  await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)),\n).toEqual(['Hello!', 'Hi!']);\n```\n\n----------------------------------------\n\nTITLE: Basic Page.$$eval Usage Examples\nDESCRIPTION: Examples showing how to use Page.$$eval to count div elements and extract text content from multiple elements matching a selector. These demonstrate the typical use cases for this method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// get the amount of divs on the page\nconst divCount = await page.$$eval('div', divs => divs.length);\n\n// get the text content of all the `.options` elements:\nconst options = await page.$$eval('div > span.options', options => {\n  return options.map(option => option.textContent);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Browser Context in Puppeteer\nDESCRIPTION: Example of creating an isolated browser context in Puppeteer. This demonstrates launching a browser, creating a new context, opening a page within that context, and navigating to a website.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.createbrowsercontext.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n// Create a new browser context.\nconst context = await browser.createBrowserContext();\n// Create a new page in a pristine context.\nconst page = await context.newPage();\n// Do stuff\nawait page.goto('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Querying and Counting Map Objects Using Page.queryObjects in Puppeteer\nDESCRIPTION: This example demonstrates how to use Page.queryObjects to find all Map instances in the JavaScript heap. It creates a Map object, gets a handle to the Map prototype, queries all Map instances, and counts them.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.queryobjects.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a Map object\nawait page.evaluate(() => (window.map = new Map()));\n// Get a handle to the Map object prototype\nconst mapPrototype = await page.evaluateHandle(() => Map.prototype);\n// Query all map instances into an array\nconst mapInstances = await page.queryObjects(mapPrototype);\n// Count amount of map objects in heap\nconst count = await page.evaluate(maps => maps.length, mapInstances);\nawait mapInstances.dispose();\nawait mapPrototype.dispose();\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport in Puppeteer\nDESCRIPTION: Example of setting a custom viewport for a page in Puppeteer. This code creates a new page, sets its viewport to 640x480 pixels with a device scale factor of 1, and then navigates to a website.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setviewport.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = await browser.newPage();\nawait page.setViewport({\n  width: 640,\n  height: 480,\n  deviceScaleFactor: 1,\n});\nawait page.goto('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Defining PDFOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface declaration for PDFOptions which defines all configurable options for PDF generation in Puppeteer. This interface is used with the Page.pdf() method to customize PDF output.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.pdfoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PDFOptions\n```\n\n----------------------------------------\n\nTITLE: Navigating to URL in Puppeteer\nDESCRIPTION: The goto method navigates the page to a given URL. It handles various scenarios like navigation to about:blank or same URL with different hash. In headless mode, it doesn't throw errors for valid HTTP status codes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\npage.goto(url, options)\n```\n\n----------------------------------------\n\nTITLE: Enabling DevTools for Debugging in Puppeteer (TypeScript)\nDESCRIPTION: Demonstrates how to enable DevTools for debugging by setting the devtools option to true when launching Puppeteer. This allows for interactive debugging in the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({devtools: true});\n```\n\n----------------------------------------\n\nTITLE: String-based JavaScript Evaluation\nDESCRIPTION: Shows how to evaluate JavaScript by providing the function body as a string. Important for understanding type limitations in string-based evaluation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Evaluate JavaScript\nconst three = await page.evaluate(`\n    1 + 2\n`);\n```\n\n----------------------------------------\n\nTITLE: Overriding Navigator Properties Using evaluateOnNewDocument in Puppeteer\nDESCRIPTION: Example showing how to use evaluateOnNewDocument to override the navigator.languages property before a page loads. It demonstrates creating a preload script and injecting it into the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluateonnewdocument.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// preload.js\n\n// overwrite the `languages` property to use a custom getter\nObject.defineProperty(navigator, 'languages', {\n  get: function () {\n    return ['en-US', 'en', 'bn'];\n  },\n});\n\n// In your puppeteer script, assuming the preload.js file is\n// in same folder of our script.\nconst preloadFile = fs.readFileSync('./preload.js', 'utf8');\nawait page.evaluateOnNewDocument(preloadFile);\n```\n\n----------------------------------------\n\nTITLE: Defining PuppeteerNode.connect Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the PuppeteerNode.connect method. It takes ConnectOptions as a parameter and returns a Promise that resolves to a Browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.connect.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  connect(options: ConnectOptions): Promise<Browser>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of JSHandle in Puppeteer\nDESCRIPTION: This example demonstrates how to create a JSHandle that references the window object in the browser using page.evaluateHandle().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst windowHandle = await page.evaluateHandle(() => window);\n```\n\n----------------------------------------\n\nTITLE: Using a Registered Custom Query Handler in Puppeteer (JavaScript)\nDESCRIPTION: Demonstrates importing Puppeteer and registering a custom query handler named 'text', then using it with page.$. This workflow requires the puppeteer package and valid implementation of the query handler. 'registerCustomQueryHandler' is called statically on Puppeteer, and custom selectors must be prefixed with the handler's name. The example is meant for ESModules and asynchronous JavaScript contexts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteer.registercustomqueryhandler.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Puppeteer}, puppeteer from 'puppeteer';\n\nPuppeteer.registerCustomQueryHandler('text', { … });\nconst aHandle = await page.$('text/…');\n```\n\n----------------------------------------\n\nTITLE: Returning DOM Nodes with evaluate in Puppeteer\nDESCRIPTION: Demonstrates the limitation of returning complex objects like DOM nodes with the standard evaluate method. The DOM node gets serialized to an empty object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/javascript-execution.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = await page.evaluate(() => {\n  return document.body;\n});\nconsole.log(body); // {}, unexpected!\n```\n\n----------------------------------------\n\nTITLE: Using Page.waitForFunction to Monitor Viewport Changes in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to use `page.waitForFunction` to wait until a condition within the browser context becomes true. Specifically, it waits until the `window.innerWidth` is less than 100 pixels after resizing the viewport. It requires the Puppeteer library.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  const watchDog = page.waitForFunction('window.innerWidth < 100');\n  await page.setViewport({width: 50, height: 50});\n  await watchDog;\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Launching Puppeteer with Shared Memory Fix in Docker (TypeScript)\nDESCRIPTION: Configuration to launch Puppeteer with the '--disable-dev-shm-usage' flag to avoid Chrome crashes in Docker containers with limited shared memory.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  args: ['--disable-dev-shm-usage'],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Evaluation in Puppeteer\nDESCRIPTION: Demonstrates the basic workflow of launching a browser with Puppeteer, navigating to a page, and evaluating JavaScript within the page context. Shows how to return primitive values from the evaluated function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/javascript-execution.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import puppeteer\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  // Launch the browser\n  const browser = await puppeteer.launch();\n\n  // Create a page\n  const page = await browser.newPage();\n\n  // Go to your site\n  await page.goto('YOUR_SITE');\n\n  // Evaluate JavaScript\n  const three = await page.evaluate(() => {\n    return 1 + 2;\n  });\n\n  console.log(three);\n\n  // Close browser.\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: DOM Element Evaluation with ElementHandle\nDESCRIPTION: Shows the correct way to handle DOM elements using evaluateHandle, returning an ElementHandle instance that can be properly manipulated.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = await page.evaluateHandle(() => {\n  return document.body;\n});\nconsole.log(body instanceof ElementHandle); // true\n```\n\n----------------------------------------\n\nTITLE: Using waitForResponse in Puppeteer\nDESCRIPTION: Examples of using the waitForResponse method in different scenarios: waiting for a specific URL, waiting for a response with specific URL and status code, and waiting for a response containing specific text content.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforresponse.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstResponse = await page.waitForResponse(\n  'https://example.com/resource',\n);\nconst finalResponse = await page.waitForResponse(\n  response =>\n    response.url() === 'https://example.com' && response.status() === 200,\n);\nconst finalResponse = await page.waitForResponse(async response => {\n  return (await response.text()).includes('<html>');\n});\nreturn finalResponse.ok();\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Output in Puppeteer (TypeScript)\nDESCRIPTION: Illustrates how to capture and log console output from the browser to Node.js. This is useful for debugging client-side code running in the browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('console', msg => console.log('PAGE LOG:', msg.text()));\n\nawait page.evaluate(() => console.log(`url is ${location.href}`));\n```\n\n----------------------------------------\n\nTITLE: Using Browser.createBrowserContext() in Puppeteer\nDESCRIPTION: This example demonstrates how to use the createBrowserContext() method in Puppeteer. It launches a browser, creates a new browser context, opens a new page in that context, and navigates to a website.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.createbrowsercontext.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n// Create a new browser context.\nconst context = await browser.createBrowserContext();\n// Create a new page in a pristine context.\nconst page = await context.newPage();\n// Do stuff\nawait page.goto('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Using Puppeteer's Slow Motion Option\nDESCRIPTION: Slows down Puppeteer operations by a specified number of milliseconds to make interactions more visible. This example adds a 250ms delay to each operation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  headless: false,\n  slowMo: 250, // slow down by 250ms\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Executable Path using PuppeteerNode in TypeScript\nDESCRIPTION: Specifies the PuppeteerNode class method executablePath that returns the default Chrome executable path as a string without requiring any parameters. Depends on Puppeteer and is utilized when the user wants to launch the default installed Chrome version. No arguments are needed; the method simplifies retrieving the standard executable path to the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.executablepath.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  executablePath(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Clipboard Permissions in Puppeteer\nDESCRIPTION: Example of setting clipboard read and write permissions for a specific origin. This is necessary for accessing the clipboard API.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait browser\n  .defaultBrowserContext()\n  .overridePermissions('<your origin>', ['clipboard-read', 'clipboard-write']);\n```\n\n----------------------------------------\n\nTITLE: Using FileChooser to Handle File Selection in Puppeteer\nDESCRIPTION: Example showing how to wait for a file chooser dialog, trigger it with a button click, and then accept a file selection with a specific path.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.filechooser.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [fileChooser] = await Promise.all([\n  page.waitForFileChooser(),\n  page.click('#upload-file-button'), // some button that triggers file selection\n]);\nawait fileChooser.accept(['/tmp/myfile.pdf']);\n```\n\n----------------------------------------\n\nTITLE: Basic Cooperative Intercept Mode Implementation in Puppeteer\nDESCRIPTION: Simple upgrade to use Cooperative Intercept Mode by adding priority parameters to the abort() and continue() methods with a default priority of 0.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  if (request.isInterceptResolutionHandled()) return;\n  if (\n    interceptedRequest.url().endsWith('.png') ||\n    interceptedRequest.url().endsWith('.jpg')\n  )\n    interceptedRequest.abort('failed', 0);\n  else\n    interceptedRequest.continue(\n      interceptedRequest.continueRequestOverrides(),\n      0,\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome Headless Shell in Puppeteer\nDESCRIPTION: Shows how to launch Chrome in the chrome-headless-shell mode, which offers better performance for automation tasks but doesn't provide complete Chrome features.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/headless-modes.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({headless: 'shell'});\n```\n\n----------------------------------------\n\nTITLE: Autofilling Credit Card Form Example - Puppeteer TypeScript\nDESCRIPTION: Demonstrates how to use ElementHandle.autofill() to populate credit card form fields automatically. This functionality is currently limited to Chrome browser in new headless and headful modes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Select an input on the credit card form.\nconst name = await page.waitForSelector('form #name');\n// Trigger autofill with the desired data.\nawait name.autofill({\n  creditCard: {\n    number: '4444444444444444',\n    name: 'John Smith',\n    expiryMonth: '01',\n    expiryYear: '2030',\n    cvc: '123',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using emulateVisionDeficiency with Puppeteer to Capture Simulated Vision Screenshots\nDESCRIPTION: A complete example that demonstrates how to use the emulateVisionDeficiency method to simulate different vision deficiencies and capture screenshots. The example simulates achromatopsia, deuteranopia, blurred vision, and reduced contrast.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatevisiondeficiency.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://v8.dev/blog/10-years');\n\n  await page.emulateVisionDeficiency('achromatopsia');\n  await page.screenshot({path: 'achromatopsia.png'});\n\n  await page.emulateVisionDeficiency('deuteranopia');\n  await page.screenshot({path: 'deuteranopia.png'});\n\n  await page.emulateVisionDeficiency('blurredVision');\n  await page.screenshot({path: 'blurred-vision.png'});\n\n  await page.emulateVisionDeficiency('reducedContrast');\n  await page.screenshot({path: 'reduced-contrast.png'});\n\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Getting Element Properties with Puppeteer in Angular\nDESCRIPTION: TypeScript code demonstrating how to retrieve element properties using Puppeteer's locator API in an Angular E2E test.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Testing framework specific imports\n\nimport {setupBrowserHooks, getBrowserState} from './utils';\n\ndescribe('<Test Name>', function () {\n  setupBrowserHooks();\n  it('is running', async function () {\n    const {page} = getBrowserState();\n    // Query elements\n    const elementText = await page\n      .locator('.my-component')\n      .map(button => button.innerText)\n      // Wait for element to show up\n      .wait();\n\n    // Assert via assertion library\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators by Element Properties in Puppeteer (TypeScript)\nDESCRIPTION: Selects elements matching the CSS selector 'button' using `page.locator()`, then applies a filter using a JavaScript function (`.filter()`) to find the specific button whose `innerText` property is exactly 'My button'. Finally, it clicks the filtered element. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait page\n  .locator('button')\n  .filter(button => button.innerText === 'My button')\n  .click();\n```\n\n----------------------------------------\n\nTITLE: Defining Page.click() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.click() method. It defines the method as part of the Page class, taking a selector string and optional ClickOptions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CDPSession for Animation Control\nDESCRIPTION: Example demonstrating how to create a CDP session, enable animation tracking, listen for animation events, and modify animation playback rate.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = await page.createCDPSession();\nawait client.send('Animation.enable');\nclient.on('Animation.animationCreated', () =>\n  console.log('Animation created!'),\n);\nconst response = await client.send('Animation.getPlaybackRate');\nconsole.log('playback rate is ' + response.playbackRate);\nawait client.send('Animation.setPlaybackRate', {\n  playbackRate: response.playbackRate / 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Page.select() for Single and Multiple Selections in Puppeteer\nDESCRIPTION: This example demonstrates how to use the Page.select() method for both single and multiple selections in a <select> element. It shows selecting a single option 'blue' and multiple options 'red', 'green', and 'blue'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.select.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.select('select#colors', 'blue'); // single selection\npage.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n```\n\n----------------------------------------\n\nTITLE: Listening to Locator Action Events in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element using `page.locator('button')` and attaches an event listener using `.on(LocatorEvent.Action, ...)`. The provided callback function (`() => { willClick = true; }`) will be executed just before the `.click()` action is performed, indicating preconditions have been met and the action is about to occur. Requires a Puppeteer `Page` instance (`page`) and `LocatorEvent` enum/object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlet willClick = false;\nawait page\n  .locator('button')\n  .on(LocatorEvent.Action, () => {\n    willClick = true;\n  })\n  .click();\n```\n\n----------------------------------------\n\nTITLE: Using Custom React Component Selectors in Puppeteer\nDESCRIPTION: Demonstrates how to use custom React component selectors that have been registered with Puppeteer, both standalone and in combination with other selectors.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.locator('::-p-react-component(MyComponent)').click();\n// OR used in conjunction with other selectors.\nawait page.locator('.side-bar ::-p-react-component(MyComponent)').click();\n```\n\n----------------------------------------\n\nTITLE: Recording a Page Using Puppeteer in JavaScript\nDESCRIPTION: This example demonstrates how to use the Page.screencast() method to record a page. It launches a browser, creates a new page, navigates to a website, starts recording, performs some actions, and then stops the recording.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.screencast.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n// Launch a browser\nconst browser = await puppeteer.launch();\n\n// Create a new page\nconst page = await browser.newPage();\n\n// Go to your site.\nawait page.goto(\"https://www.example.com\");\n\n// Start recording.\nconst recorder = await page.screencast({path: 'recording.webm'});\n\n// Do something.\n\n// Stop recording.\nawait recorder.stop();\n\nbrowser.close();\n```\n\n----------------------------------------\n\nTITLE: Using BrowserContext.overridePermissions Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the overridePermissions method in the default browser context. It overrides the 'geolocation' permission for the 'https://html5demos.com' origin.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.overridepermissions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst context = browser.defaultBrowserContext();\nawait context.overridePermissions('https://html5demos.com', ['geolocation']);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Page.emulateMediaType in Puppeteer\nDESCRIPTION: Demonstrates how to use the emulateMediaType method to change the CSS media type between 'screen', 'print' and null (disabled). The example shows how to verify the changes using matchMedia evaluations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatemediatype.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => matchMedia('screen').matches);\n// → true\nawait page.evaluate(() => matchMedia('print').matches);\n// → false\n\nawait page.emulateMediaType('print');\nawait page.evaluate(() => matchMedia('screen').matches);\n// → false\nawait page.evaluate(() => matchMedia('print').matches);\n// → true\n\nawait page.emulateMediaType(null);\nawait page.evaluate(() => matchMedia('screen').matches);\n// → true\nawait page.evaluate(() => matchMedia('print').matches);\n// → false\n```\n\n----------------------------------------\n\nTITLE: Defining the CustomQueryHandler Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for CustomQueryHandler in Puppeteer, which defines optional methods for querying DOM nodes. It includes queryAll for searching multiple matching nodes and queryOne for finding a single matching node using custom selectors.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.customqueryhandler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CustomQueryHandler\n```\n\n----------------------------------------\n\nTITLE: Evaluating a Promise-Returning Function with Page.evaluate()\nDESCRIPTION: This example demonstrates how to use Page.evaluate() with a function that returns a Promise. The method waits for the promise to resolve and returns its value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await frame.evaluate(() => {\n  return Promise.resolve(8 * 7);\n});\nconsole.log(result); // prints \"56\"\n```\n\n----------------------------------------\n\nTITLE: Defining Cookie Interface in TypeScript with Puppeteer\nDESCRIPTION: TypeScript interface definition for Cookie objects in Puppeteer. The interface extends CookieData and provides a comprehensive structure for representing browser cookies with standard and browser-specific properties.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Cookie extends CookieData\n```\n\n----------------------------------------\n\nTITLE: Handling Navigation with Frame Click in TypeScript\nDESCRIPTION: Example showing the correct pattern for handling navigation events triggered by frame.click() using Promise.all to avoid race conditions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.click.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [response] = await Promise.all([\n  page.waitForNavigation(waitOptions),\n  frame.click(selector, clickOptions),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Mouse.wheel() to Zoom into an Element with Puppeteer\nDESCRIPTION: This example demonstrates how to use the Mouse.wheel() method to zoom into an element on a web page. It navigates to a specific URL, finds an element, moves the mouse to the center of the element, and then simulates a wheel event to zoom in.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.wheel.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.goto(\n  'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366',\n);\n\nconst elem = await page.$('div');\nconst boundingBox = await elem.boundingBox();\nawait page.mouse.move(\n  boundingBox.x + boundingBox.width / 2,\n  boundingBox.y + boundingBox.height / 2,\n);\n\nawait page.mouse.wheel({deltaY: -100});\n```\n\n----------------------------------------\n\nTITLE: Using Frame.$eval to Extract Element Value\nDESCRIPTION: Example of using Frame.$eval to extract the value from a search input element within a frame. The method queries for the element with ID 'search' and returns its value property.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame._eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchValue = await frame.$eval('#search', el => el.value);\n```\n\n----------------------------------------\n\nTITLE: Handling WebWorker Lifecycle Events in Puppeteer\nDESCRIPTION: This example demonstrates how to listen for WebWorker creation and destruction events, and how to log current workers on a page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('workercreated', worker =>\n  console.log('Worker created: ' + worker.url()),\n);\npage.on('workerdestroyed', worker =>\n  console.log('Worker destroyed: ' + worker.url()),\n);\n\nconsole.log('Current workers:');\nfor (const worker of page.workers()) {\n  console.log('  ' + worker.url());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vue Component Selectors in Puppeteer\nDESCRIPTION: Demonstrates how to use a custom Vue component selector after registering a Vue-specific query handler.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = await page.$('::-p-vue(MyComponent)');\n```\n\n----------------------------------------\n\nTITLE: Code Linting and Formatting\nDESCRIPTION: Commands for checking and formatting code according to project style guidelines.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Capturing Browser Console Output in Node.js\nDESCRIPTION: Listens for console events from the page and logs them to the Node.js environment. This allows monitoring console output from code running in the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('console', msg => console.log('PAGE LOG:', msg.text()));\n\nawait page.evaluate(() => console.log(`url is ${location.href}`));\n```\n\n----------------------------------------\n\nTITLE: Declaring the PDFOptions Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the structure of the `PDFOptions` interface. This interface is used to pass configuration options to the `Page.pdf()` method in Puppeteer for customizing PDF output.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.pdfoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface PDFOptions\n```\n```\n\n----------------------------------------\n\nTITLE: Argument Passing in Evaluate Function\nDESCRIPTION: Shows how to pass arguments to the evaluate function, supporting both primitive values and JSHandle instances.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst three = await page.evaluate(\n  (a, b) => {\n    return a + b; // 1 + 2\n  },\n  1,\n  2\n);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Device Prompts and Selecting Devices with Puppeteer - TypeScript\nDESCRIPTION: Shows typical usage of page.waitForDevicePrompt() in concert with an element click to handle WebBluetooth device requests. Utilizes Promise.all to run the wait and trigger concurrently; subsequently uses select and waitForDevice to filter and select a device by name. Assumes Puppeteer context, a Page instance named page, and a clickable element with id 'connect-bluetooth'; returns a DeviceRequestPrompt for further interaction.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitfordeviceprompt.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst [devicePrompt] = Promise.all([\n  page.waitForDevicePrompt(),\n  page.click('#connect-bluetooth'),\n]);\nawait devicePrompt.select(\n  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Chromium Dependencies on Amazon Linux EC2 Instance\nDESCRIPTION: Bash commands to install Chromium and its dependencies on an EC2 instance running Amazon Linux for CI/CD pipelines.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsudo amazon-linux-extras install epel -y\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y chromium\n```\n\n----------------------------------------\n\nTITLE: Using Debugger in Client-Side Code with Puppeteer (TypeScript)\nDESCRIPTION: Shows how to add a debugger statement in client-side code evaluated by Puppeteer. This causes the browser to stop at the debugger statement when in debug mode.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => {\n  debugger;\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browser Instance with Puppeteer in TypeScript\nDESCRIPTION: Function signature for Puppeteer's connect method that takes ConnectOptions and returns a Promise resolving to a Browser instance. Used to establish connections to existing browser instances.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connect.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconnect: (options: PuppeteerCore.ConnectOptions) => Promise<PuppeteerCore.Browser>;\n```\n\n----------------------------------------\n\nTITLE: Using Page.select() for Single and Multiple Selections in Puppeteer\nDESCRIPTION: This example demonstrates how to use the Page.select() method for both single and multiple selections in a Puppeteer script. It shows selecting a single option and multiple options from a select element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.select.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.select('select#colors', 'blue'); // single selection\npage.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Puppeteer Browser Bundle\nDESCRIPTION: Shows a Rollup configuration for bundling a Puppeteer browser application. The config sets up proper ESM output, handles external dependencies, and uses the node-resolve plugin configured for browser environments with specific resolution constraints.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/running-puppeteer-in-the-browser.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {nodeResolve} from '@rollup/plugin-node-resolve';\n\nexport default {\n  input: 'main.mjs',\n  output: {\n    format: 'esm',\n    dir: 'out',\n  },\n  // If you do not need to use WebDriver BiDi protocol,\n  // exclude chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js to minimize the bundle size.\n  external: ['chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js'],\n  plugins: [\n    nodeResolve({\n      // Indicate that we target a browser environment.\n      browser: true,\n      // Exclude any dependencies except for puppeteer-core.\n      // `npm install puppeteer-core` # To install puppeteer-core if needed.\n      resolveOnly: ['puppeteer-core'],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Press Method in Puppeteer TypeScript\nDESCRIPTION: Abstract class definition for the Keyboard press method that simulates pressing and releasing a key. Accepts a key input and optional parameters for customizing the press behavior including text input, delay timing, and keyboard commands.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.press.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract press(\n    key: KeyInput,\n    options?: Readonly<KeyPressOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer via NPM\nDESCRIPTION: Command to install Puppeteer in a project. This will automatically download Chrome for Testing and chrome-headless-shell binary.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i puppeteer\n```\n\n----------------------------------------\n\nTITLE: Request Interception with Resolution State Checking\nDESCRIPTION: Advanced example showing how to use interceptResolutionState for more detailed control over request interception handling.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  const {action} = interceptedRequest.interceptResolutionState();\n  if (action === InterceptResolutionAction.AlreadyHandled) return;\n\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const {action} = interceptedRequest.interceptResolutionState();\n      if (action === InterceptResolutionAction.AlreadyHandled) {\n        resolve();\n        return;\n      }\n      interceptedRequest.continue();\n      resolve();\n    }, 500);\n  });\n});\npage.on('request', async interceptedRequest => {\n  if (\n    interceptedRequest.interceptResolutionState().action ===\n    InterceptResolutionAction.AlreadyHandled\n  )\n    return;\n\n  await someLongAsyncOperation();\n  if (\n    interceptedRequest.interceptResolutionState().action ===\n    InterceptResolutionAction.AlreadyHandled\n  )\n    return;\n  interceptedRequest.continue();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding External Stylesheet with Page.addStyleTag() in Puppeteer (TypeScript)\nDESCRIPTION: This method adds a <link> tag to include an external stylesheet in the page. It returns a Promise resolving to an ElementHandle of the injected HTMLLinkElement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.addstyletag.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  addStyleTag(\n    options: FrameAddStyleTagOptions,\n  ): Promise<ElementHandle<HTMLLinkElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page.emulateNetworkConditions with Predefined Network Conditions in TypeScript\nDESCRIPTION: This example demonstrates how to use the Page.emulateNetworkConditions method with predefined network conditions. It imports PredefinedNetworkConditions, launches a browser, creates a new page, applies 'Slow 3G' network conditions, and navigates to a website.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatenetworkconditions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PredefinedNetworkConditions} from 'puppeteer';\nconst slow3G = PredefinedNetworkConditions['Slow 3G'];\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.emulateNetworkConditions(slow3G);\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Logging DevTools Protocol Traffic for Debugging\nDESCRIPTION: Sets environment variables to enable verbose logging of Puppeteer's DevTools protocol traffic. Includes examples for basic logging, preventing message truncation, and filtering messages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/debugging.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Basic verbose logging\nenv DEBUG=\"puppeteer:*\" node script.js\n\n# Prevent truncating of long messages\nenv DEBUG=\"puppeteer:*\" env DEBUG_MAX_STRING_LENGTH=null node script.js\n\n# Protocol traffic can be rather noisy. This example filters out all Network domain messages\nenv DEBUG=\"puppeteer:*\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\"Network'\n\n# Filter out all protocol messages but keep all other logging\nenv DEBUG=\"puppeteer:*,-puppeteer:protocol:*\" node script.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Context Permissions with Puppeteer in TypeScript\nDESCRIPTION: This code demonstrates how to override permissions for a specific domain in the default browser context. It's useful for testing scenarios that require specific browser permissions, such as geolocation access.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\nconst context = browser.defaultBrowserContext();\n\nawait context.overridePermissions('https://html5demos.com', ['geolocation']);\n```\n\n----------------------------------------\n\nTITLE: Simulating Various Vision Deficiencies with Puppeteer in TypeScript\nDESCRIPTION: This example demonstrates how to use the `page.emulateVisionDeficiency()` method in Puppeteer to simulate different vision impairments on a webpage. It launches a browser, navigates to a URL, applies various deficiency types ('achromatopsia', 'deuteranopia', 'blurredVision', 'reducedContrast'), takes a screenshot after each emulation, and finally closes the browser. It requires the 'puppeteer' library.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatevisiondeficiency.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://v8.dev/blog/10-years');\n\n  await page.emulateVisionDeficiency('achromatopsia');\n  await page.screenshot({path: 'achromatopsia.png'});\n\n  await page.emulateVisionDeficiency('deuteranopia');\n  await page.screenshot({path: 'deuteranopia.png'});\n\n  await page.emulateVisionDeficiency('blurredVision');\n  await page.screenshot({path: 'blurred-vision.png'});\n\n  await page.emulateVisionDeficiency('reducedContrast');\n  await page.screenshot({path: 'reduced-contrast.png'});\n\n  await browser.close();\n})();\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Image Request Blocking with Puppeteer\nDESCRIPTION: Demonstrates a basic request interceptor that blocks all PNG and JPG image requests while allowing other requests to continue. Shows initialization of Puppeteer, enabling request interception, and handling intercepted requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.setRequestInterception(true);\n  page.on('request', interceptedRequest => {\n    if (interceptedRequest.isInterceptResolutionHandled()) return;\n    if (\n      interceptedRequest.url().endsWith('.png') ||\n      interceptedRequest.url().endsWith('.jpg')\n    )\n      interceptedRequest.abort();\n    else interceptedRequest.continue();\n  });\n  await page.goto('https://example.com');\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Optimizing TypeScript Experience with Page.evaluate()\nDESCRIPTION: This example illustrates how to get the best TypeScript experience by passing the type of pageFunction as a generic to Page.evaluate().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst aHandle = await page.evaluate(() => 2);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cooperative Intercept Mode with Priority Ties and Action Precedence\nDESCRIPTION: Example showing Cooperative Intercept Mode with multiple handlers at different priorities. When respond() and continue() have the same priority (15), respond() wins due to the tiebreaker rule where respond() has precedence over continue().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Final outcome: cooperative respond() @ 15\npage.setRequestInterception(true);\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to abort at priority 10\n  request.abort('failed', 10);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to continue at priority 15\n  request.continue(request.continueRequestOverrides(), 15);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to respond at priority 15\n  request.respond(request.responseForRequest(), 15);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to respond at priority 12\n  request.respond(request.responseForRequest(), 12);\n});\npage.on('request', request => {\n  // { action: InterceptResolutionAction.Respond, priority: 15 }, because respond @ 15 > continue @ 15 > respond @ 12 > abort @ 10\n  console.log(request.interceptResolutionState());\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.click Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet shows the TypeScript signature of the ElementHandle.click() method in Puppeteer. The method scrolls an element into view if needed and uses Page.mouse to click in the center of the element. It throws an error if the element is detached from the DOM.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  click(\n    this: ElementHandle<Element>,\n    options?: Readonly<ClickOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Finding Target for Opened Page\nDESCRIPTION: Demonstrates how to use waitForTarget to find a target for a page opened using window.open() by matching its URL.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.waitfortarget.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => window.open('https://www.example.com/'));\nconst newWindowTarget = await browserContext.waitForTarget(\n  target => target.url() === 'https://www.example.com/'\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Page.emulateMediaType Usage in TypeScript\nDESCRIPTION: This example demonstrates how to use the emulateMediaType method to change the CSS media type of a page. It shows the effect on matchMedia results for 'screen' and 'print' media types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatemediatype.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => matchMedia('screen').matches);\n// → true\nawait page.evaluate(() => matchMedia('print').matches);\n// → false\n\nawait page.emulateMediaType('print');\nawait page.evaluate(() => matchMedia('screen').matches);\n// → false\nawait page.evaluate(() => matchMedia('print').matches);\n// → true\n\nawait page.emulateMediaType(null);\nawait page.evaluate(() => matchMedia('screen').matches);\n// → true\nawait page.evaluate(() => matchMedia('print').matches);\n// → false\n```\n\n----------------------------------------\n\nTITLE: Using Page.screenshot() with base64 encoding in TypeScript\nDESCRIPTION: Signature for Page.screenshot() method that returns a base64-encoded string. This version requires the 'encoding' option to be set to 'base64' and accepts various screenshot configuration options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.screenshot.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  screenshot(\n    options: Readonly<ScreenshotOptions> & {\n      encoding: 'base64';\n    },\n  ): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser Context Retrieval in Puppeteer TypeScript\nDESCRIPTION: Abstract class definition for the Browser class showing the browserContexts() method signature. This method returns an array of BrowserContext objects representing all open browser contexts in the browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.browsercontexts.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract browserContexts(): BrowserContext[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using XPath Selectors in Puppeteer\nDESCRIPTION: Demonstrates how to use XPath selectors in Puppeteer via the '-p-xpath' syntax to query elements using the browser's native Document.evaluate functionality.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Runs the `//h2` as the XPath expression.\nconst element = await page.waitForSelector('::-p-xpath(//h2)');\n```\n\n----------------------------------------\n\nTITLE: Dumping Frame Tree Structure with Puppeteer\nDESCRIPTION: Example that demonstrates how to navigate to a webpage and recursively dump the frame tree structure, displaying the URL of each frame with proper indentation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://www.google.com/chrome/browser/canary.html');\n  dumpFrameTree(page.mainFrame(), '');\n  await browser.close();\n\n  function dumpFrameTree(frame, indent) {\n    console.log(indent + frame.url());\n    for (const child of frame.childFrames()) {\n      dumpFrameTree(child, indent + '  ');\n    }\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Functions with Page.waitForFunction in TypeScript\nDESCRIPTION: This TypeScript example illustrates using an asynchronous function as the `pageFunction` argument for `page.waitForFunction`. The function fetches user data from the GitHub API, displays an avatar image temporarily, waits for 3 seconds, and then removes the image. It demonstrates passing a `username` variable from Node.js to the browser context. It assumes a `page` object from Puppeteer is available.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst username = 'github-username';\nawait page.waitForFunction(\n  async username => {\n    const githubResponse = await fetch(\n      `https://api.github.com/users/${username}`,\n    );\n    const githubUser = await githubResponse.json();\n    // show the avatar\n    const img = document.createElement('img');\n    img.src = githubUser.avatar_url;\n    // wait 3 seconds\n    await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n    img.remove();\n  },\n  {},\n  username,\n);\n```\n\n----------------------------------------\n\nTITLE: Pulling Puppeteer Docker Images\nDESCRIPTION: Commands to pull Puppeteer Docker images from GitHub Container Registry. The first command pulls the latest version, while the second pulls a specific version (16.1.0).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/puppeteer/puppeteer:latest # pulls the latest\ndocker pull ghcr.io/puppeteer/puppeteer:16.1.0 # pulls the image that contains Puppeteer v16.1.0\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Styles with Page.addStyleTag() in Puppeteer (TypeScript)\nDESCRIPTION: This method adds a <style> tag with inline CSS to the page. It returns a Promise resolving to an ElementHandle of the injected HTMLStyleElement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.addstyletag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  addStyleTag(\n    options: Omit<FrameAddStyleTagOptions, 'url'>,\n  ): Promise<ElementHandle<HTMLStyleElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Legacy Mode Request Interception with Immediate Abort\nDESCRIPTION: Example showing how Legacy Mode prevails when a handler omits the priority parameter, causing the request to be aborted immediately without reaching subsequent handlers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Final outcome: immediate abort()\npage.setRequestInterception(true);\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Legacy Mode: interception is aborted immediately.\n  request.abort('failed');\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n  // Control will never reach this point because the request was already aborted in Legacy Mode\n\n  // Cooperative Intercept Mode: votes for continue at priority 0.\n  request.continue({}, 0);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Navigation Events with Page.click in TypeScript\nDESCRIPTION: Example demonstrating the proper pattern for using click() when it triggers navigation, avoiding race conditions by using Promise.all to wait for both the navigation and click operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.click.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [response] = await Promise.all([\n  page.waitForNavigation(waitOptions),\n  page.click(selector, clickOptions),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer Cache Directory with Environment Variables\nDESCRIPTION: Example showing how to set custom cache directory for Puppeteer browser installation using environment variables.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPUPPETEER_CACHE_DIR=$(pwd) npm install puppeteer\nPUPPETEER_CACHE_DIR=$(pwd) node <script-path>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Puppeteer.registerCustomQueryHandler\nDESCRIPTION: A basic example showing how to import Puppeteer, register a custom query handler named 'text', and then use it to select an element on a page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.registercustomqueryhandler.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Puppeteer}, puppeteer from 'puppeteer';\n\nPuppeteer.registerCustomQueryHandler('text', { … });\nconst aHandle = await page.$('text/…');\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation with Page.setGeolocation in TypeScript\nDESCRIPTION: This example demonstrates how to use the Page.setGeolocation method to set the geolocation of a page. It sets the latitude to 59.95 and longitude to 30.31667.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setgeolocation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.setGeolocation({latitude: 59.95, longitude: 30.31667});\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard.type Method in Puppeteer\nDESCRIPTION: This example demonstrates how to use the Keyboard.type method in Puppeteer. It shows typing text instantly and with a delay to simulate user input.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.keyboard.type('Hello'); // Types instantly\nawait page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Request Event Handler Example\nDESCRIPTION: Example showing how to attach an event handler for page requests in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', request => ...)\n```\n\n----------------------------------------\n\nTITLE: Defining the executablePath Function Signature in TypeScript for Puppeteer\nDESCRIPTION: The TypeScript signature for executablePath, which provides three overloaded function signatures to retrieve Chrome executable paths. It can accept a Chrome release channel, launch options, or no parameters to return the path as a string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.executablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutablePath: {\n    (channel: PuppeteerCore.ChromeReleaseChannel): string;\n    (options: PuppeteerCore.LaunchOptions): string;\n    (): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Puppeteer Script with Node.js Debugger (Bash)\nDESCRIPTION: Demonstrates how to run a Puppeteer script with the Node.js debugger enabled. This allows for debugging server-side code in conjunction with the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk path/to/script.js\n```\n\n----------------------------------------\n\nTITLE: Observing Viewport Changes with waitForFunction in Puppeteer\nDESCRIPTION: Example demonstrating how to use waitForFunction to detect viewport size changes in Puppeteer. The function waits until the window's inner width becomes less than 100 pixels, triggered by setting the viewport to 50x50.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.waitforfunction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');\n  page.setViewport({width: 50, height: 50});\n  await watchDog;\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Page.setCookie() Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the Page.setCookie() method to set multiple cookies on a page. It takes multiple cookie objects as arguments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setcookie.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.setCookie(cookieObject1, cookieObject2);\n```\n\n----------------------------------------\n\nTITLE: Defining the Viewport Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `Viewport` interface. This interface is used in Puppeteer to specify the properties of the browser viewport, such as its dimensions (`width`, `height`), device scale factor, touch event support, mobile emulation, and orientation. The surrounding table details each property, its type, description, and default value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.viewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Viewport\n```\n\n----------------------------------------\n\nTITLE: Defining LaunchOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the LaunchOptions interface, which extends ConnectOptions and specifies various configuration options for launching a browser instance in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.launchoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LaunchOptions extends ConnectOptions\n```\n\n----------------------------------------\n\nTITLE: Handling Page Request Events in Puppeteer\nDESCRIPTION: Example showing how to listen for and handle HTTP request events emitted by a Puppeteer page. Demonstrates attaching an event listener for the 'request' event.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/index.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npage.on('request', request => ...)\n```\n\n----------------------------------------\n\nTITLE: Finding and Logging the Focused Node in Accessibility Tree\nDESCRIPTION: Example demonstrating how to find the focused node in the accessibility tree and log its name, using a recursive helper function to traverse the tree structure.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.accessibility.snapshot.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst snapshot = await page.accessibility.snapshot();\nconst node = findFocusedNode(snapshot);\nconsole.log(node && node.name);\n\nfunction findFocusedNode(node) {\n  if (node.focused) return node;\n  for (const child of node.children || []) {\n    const foundNode = findFocusedNode(child);\n    return foundNode;\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Running Puppeteer in Docker\nDESCRIPTION: Complete Dockerfile for setting up a Node.js environment with Chrome for Testing installed. This configures all necessary dependencies, creates a non-privileged user, and sets up the environment for running Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:14-slim\n\n# Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)\n# Note: this installs the necessary libs to make the bundled version of Chrome for Testing that Puppeteer\n# installs, work.\nRUN apt-get update \\\n    && apt-get install -y wget gnupg \\\n    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n    && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\\n    && apt-get update \\\n    && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \\\n      --no-install-recommends \\\n    && rm -rf /var/lib/apt/lists/*\n\n# If running Docker >= 1.13.0 use docker run's --init arg to reap zombie processes, otherwise\n# uncomment the following lines to have `dumb-init` as PID 1\n# ADD https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_x86_64 /usr/local/bin/dumb-init\n# RUN chmod +x /usr/local/bin/dumb-init\n# ENTRYPOINT [\"dumb-init\", \"--\"]\n\n# Uncomment to skip the Chrome for Testing download when installing puppeteer. If you do,\n# you'll need to launch puppeteer with:\n#     browser.launch({executablePath: 'google-chrome-stable'})\n# ENV PUPPETEER_SKIP_DOWNLOAD true\n\n# Install puppeteer so it's available in the container.\nRUN npm init -y &&  \\\n    npm i puppeteer \\\n    # Add user so we don't need --no-sandbox.\n    # same layer as npm install to keep re-chowned files from using up several hundred MBs more space\n    && groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \\\n    && mkdir -p /home/pptruser/Downloads \\\n    && chown -R pptruser:pptruser /home/pptruser \\\n    && chown -R pptruser:pptruser /node_modules \\\n    && chown -R pptruser:pptruser /package.json \\\n    && chown -R pptruser:pptruser /package-lock.json\n\n# Run everything after as non-privileged user.\nUSER pptruser\n\nCMD [\"google-chrome-stable\"]\n```\n\n----------------------------------------\n\nTITLE: Text Selection Example Using Keyboard API\nDESCRIPTION: Demonstrates how to use keyboard APIs to type text, hold down Shift key for selection, and delete text. Shows combination of type(), press(), down() and up() methods.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.keyboard.type('Hello World!');\nawait page.keyboard.press('ArrowLeft');\n\nawait page.keyboard.down('Shift');\nfor (let i = 0; i < ' World'.length; i++)\n  await page.keyboard.press('ArrowLeft');\nawait page.keyboard.up('Shift');\n\nawait page.keyboard.press('Backspace');\n// Result text will end up saying 'Hello!'\n```\n\n----------------------------------------\n\nTITLE: Passing JSHandle as Arguments with Page.evaluateHandle\nDESCRIPTION: Example showing how to pass JSHandle instances as arguments to page.evaluateHandle, retrieve inner HTML content, and properly dispose of handles.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst aHandle = await page.evaluateHandle(() => document.body);\nconst resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\nconsole.log(await resultHandle.jsonValue());\nawait resultHandle.dispose();\n```\n\n----------------------------------------\n\nTITLE: Example of Clearing Permission Overrides in Default Browser Context\nDESCRIPTION: An example demonstrating how to clear permission overrides in the default browser context. It first gets the default browser context, overrides the clipboard-read permission for example.com, and then clears all permission overrides.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.clearpermissionoverrides.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst context = browser.defaultBrowserContext();\ncontext.overridePermissions('https://example.com', ['clipboard-read']);\n// do stuff ..\ncontext.clearPermissionOverrides();\n```\n\n----------------------------------------\n\nTITLE: Changing Puppeteer's Default Cache Directory in JavaScript\nDESCRIPTION: This configuration file example shows how to change Puppeteer's default cache directory. It uses the path module to join the current directory with a custom cache path, solving issues related to packaging and relocation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {join} = require('path');\n\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  // Changes the cache location for Puppeteer.\n  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the focus Method in Frame Class (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature of the focus() method in Puppeteer's Frame class. It allows focusing on the first element that matches a specified CSS selector within a frame.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.focus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  focus(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.select() Method for Single and Multiple Selections\nDESCRIPTION: This example demonstrates how to use the ElementHandle.select() method for both single and multiple selections. It shows selecting a single option 'blue' and multiple options 'red', 'green', and 'blue'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.select.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhandle.select('blue'); // single selection\nhandle.select('red', 'green', 'blue'); // multiple selections\n```\n\n----------------------------------------\n\nTITLE: Finding a Target for a Page Opened with window.open in Puppeteer\nDESCRIPTION: An example demonstrating how to use the waitForTarget method to find a target for a page opened via window.open. The code opens a new window and then waits for a target matching the specific URL.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.waitfortarget.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => window.open('https://www.example.com/'));\nconst newWindowTarget = await browserContext.waitForTarget(\n  target => target.url() === 'https://www.example.com/',\n);\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Puppeteer Docker Container\nDESCRIPTION: Shell commands for building a Docker image for Puppeteer and running a script within the container with proper security permissions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t puppeteer-chrome-linux .\n```\n\nLANGUAGE: bash\nCODE:\n```\n docker run -i --init --rm --cap-add=SYS_ADMIN \\\n   --name puppeteer-chrome puppeteer-chrome-linux \\\n   node -e \"`cat yourscript.js`\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Open Pages in Puppeteer Browser Instance\nDESCRIPTION: TypeScript signature for the Browser.pages() method which returns a Promise that resolves to an array of Page objects. This method gets all open pages across all browser contexts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.pages.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  pages(): Promise<Page[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Event Handling Example\nDESCRIPTION: Shows how to subscribe to page load events using the Page class's event emitter functionality.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npage.once('load', () => console.log('Page loaded!'));\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Tracing in Puppeteer TypeScript\nDESCRIPTION: Method signature for starting a trace in Puppeteer. Takes optional TracingOptions parameter and returns a Promise. Only one trace can be active at a time per browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracing.start.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Tracing {\n  start(options?: TracingOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Workaround for Transpilation Issues with Puppeteer's evaluate() Method (TypeScript)\nDESCRIPTION: Example of using string templates instead of functions in page.evaluate() to avoid issues with JavaScript transpilers like Babel or TypeScript.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(`(async() => {\n   console.log('1');\n})()`);\n```\n\n----------------------------------------\n\nTITLE: Clipboard Permission Configuration in Puppeteer\nDESCRIPTION: Example showing how to configure clipboard API permissions in the browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait browser\n  .defaultBrowserContext()\n  .overridePermissions('<your origin>', ['clipboard-read', 'clipboard-write']);\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer Angular Schematic\nDESCRIPTION: Command to add Puppeteer-based e2e tests to an Angular project using ng add\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add @puppeteer/ng-schematics\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser Instance from Page in Puppeteer (TypeScript)\nDESCRIPTION: This code snippet defines the browser() method in the Page class. It returns the Browser instance that the page belongs to. This method is useful for accessing browser-level operations from within a page context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract browser(): Browser;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Unpacking Browser in Puppeteer\nDESCRIPTION: Downloads and unpacks a browser archive based on InstallOptions. Returns an InstalledBrowser instance that can be used for browser automation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.install.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function install(\n  options: InstallOptions & {\n    unpack?: true;\n  },\n): Promise<InstalledBrowser>;\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshot as Base64 String in Puppeteer\nDESCRIPTION: This method captures a screenshot of a page and returns it as a base64-encoded string. It takes options to configure the screenshot behavior, including the encoding set to 'base64'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.screenshot.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  screenshot(\n    options: Readonly<ScreenshotOptions> & {\n      encoding: 'base64';\n    },\n  ): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Puppeteer's Cache Directory Location\nDESCRIPTION: Configuration file example showing how to change Puppeteer's default cache directory. Useful for solving issues with build processes or when moving installations to new locations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {join} = require('path');\n\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  // Changes the cache location for Puppeteer.\n  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),\n};\n```\n\n----------------------------------------\n\nTITLE: Browser Class Definition in TypeScript\nDESCRIPTION: Abstract class definition for Browser that extends EventEmitter with BrowserEvents.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Browser extends EventEmitter<BrowserEvents>\n```\n\n----------------------------------------\n\nTITLE: Using redirectChain with Single Redirect Example\nDESCRIPTION: Example demonstrating how to use the redirectChain method to inspect redirects for a request. This example shows a page with a single redirect and how to access the original URL.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await page.goto('http://example.com');\nconst chain = response.request().redirectChain();\nconsole.log(chain.length); // 1\nconsole.log(chain[0].url()); // 'http://example.com'\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Page Events\nDESCRIPTION: Demonstrates how to subscribe and unsubscribe from page request events using EventEmitter methods.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction logRequest(interceptedRequest) {\n  console.log('A request was made:', interceptedRequest.url());\n}\npage.on('request', logRequest);\n// Sometime later...\npage.off('request', logRequest);\n```\n\n----------------------------------------\n\nTITLE: Migrated Puppeteer E2E Test Example\nDESCRIPTION: TypeScript code demonstrating a complete E2E test migrated from Protractor to Puppeteer, including page navigation, element interaction, and assertions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {setupBrowserHooks, getBrowserState} from './utils';\n\ndescribe('Puppeteer Demo', function () {\n  setupBrowserHooks();\n  it('should add one and two', function () {\n    const {page} = getBrowserState();\n    await page.goto('https://juliemr.github.io/protractor-demo/');\n\n    await page.locator('.form-inline > input:nth-child(1)').fill('1');\n    await page.locator('.form-inline > input:nth-child(2)').fill('2');\n    await page.locator('#gobutton').fill('2');\n\n    const result = await page\n      .locator('.table tbody td:last-of-type')\n      .map(header => header.innerText)\n      .wait();\n\n    expect(result).toEqual('3');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Page Load Event in Puppeteer\nDESCRIPTION: Shows how to listen for a single 'load' event on a page and log a message when it occurs.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\npage.once('load', () => console.log('Page loaded!'));\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.waitForSelector in Puppeteer\nDESCRIPTION: Example demonstrating how to use the waitForSelector method to detect when an image appears on various websites. The code navigates through different URLs and logs when the first image is found on any of the pages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.waitforselector.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  let currentURL;\n  page\n    .mainFrame()\n    .waitForSelector('img')\n    .then(() => console.log('First URL with image: ' + currentURL));\n\n  for (currentURL of [\n    'https://example.com',\n    'https://google.com',\n    'https://bbc.com',\n  ]) {\n    await page.goto(currentURL);\n  }\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Selector-based Page.locator in TypeScript\nDESCRIPTION: Method signature for creating a locator using a selector string. The method accepts a selector parameter and returns a Locator instance typed with NodeFor<Selector>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.locator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  locator<Selector extends string>(\n    selector: Selector,\n  ): Locator<NodeFor<Selector>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the PuppeteerNode.launch Method Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet presents the class signature for `PuppeteerNode`, specifically highlighting the `launch` method. The method takes an optional `options` parameter conforming to the `LaunchOptions` interface and asynchronously returns a `Promise` that resolves to a `Browser` object, representing the launched browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.launch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass PuppeteerNode {\n  launch(options?: LaunchOptions): Promise<Browser>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running @puppeteer/browsers CLI with npx\nDESCRIPTION: Demonstrates how to use npx to run the @puppeteer/browsers CLI, including accessing help documentation for various commands.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/browsers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @puppeteer/browsers --help\nnpx @puppeteer/browsers install --help\nnpx @puppeteer/browsers launch --help\nnpx @puppeteer/browsers clear --help\nnpx @puppeteer/browsers list --help\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.$eval Method in Puppeteer\nDESCRIPTION: Example demonstrating how to use the ElementHandle.$eval method to extract text content from nested elements within a tweet element. The example shows retrieving like and retweet counts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle._eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tweetHandle = await page.$('.tweet');\nexpect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\nexpect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n```\n\n----------------------------------------\n\nTITLE: Adding Debugger to Server-Side Code in Puppeteer (TypeScript)\nDESCRIPTION: Illustrates how to add a debugger statement to server-side code in Puppeteer for debugging. This example shows a debugger statement before a page.click() action.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndebugger;\nawait page.click('a[target=_blank]');\n```\n\n----------------------------------------\n\nTITLE: Defining the Page.exposeFunction Method Signature in TypeScript\nDESCRIPTION: Provides the abstract TypeScript definition for `Page.exposeFunction` within the `Page` class. It specifies the method takes a `name` (string) for the function on the window object and a `pptrFunction` (Node.js function or an object with a default export) to be executed. The method returns a `Promise<void>`.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.exposefunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Page {\n  abstract exposeFunction(\n    name: string,\n    pptrFunction:\n      | Function\n      | {\n          default: Function;\n        },\n  ): Promise<void>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for Puppeteer's Configuration. This interface includes properties for controlling installation and runtime behavior, such as browser selection, cache location, and logging levels.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Configuration\n```\n\n----------------------------------------\n\nTITLE: LaunchOptions Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for LaunchOptions used in Puppeteer to configure browser launch parameters. It specifies all available configuration options when starting a browser instance programmatically.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.launchoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LaunchOptions\n```\n\n----------------------------------------\n\nTITLE: Defining LaunchOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for LaunchOptions, which extends ConnectOptions and provides configuration parameters for launching browser instances in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.launchoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LaunchOptions extends ConnectOptions\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer with npm\nDESCRIPTION: This snippet shows how to install Puppeteer using npm. It provides two options: installing Puppeteer with a compatible Chrome browser, or installing Puppeteer-core as a library without downloading Chrome.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i puppeteer # Downloads compatible Chrome during installation.\nnpm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.\n```\n\n----------------------------------------\n\nTITLE: Defining the Page.$$ Method Signature in Puppeteer (TypeScript)\nDESCRIPTION: This TypeScript code snippet presents the method signature for `Page.$$()` within the Puppeteer `Page` class. The method takes a generic `Selector` string and optional `QueryOptions` as input. It asynchronously returns a Promise resolving to an array of `ElementHandle` objects, specifically typed using the `NodeFor` utility type based on the provided selector, representing all matching DOM elements. If no elements match, the promise resolves to an empty array.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.__.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Page {\n  $$<Selector extends string>(\n    selector: Selector,\n    options?: QueryOptions,\n  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Frame.$$eval to Count Div Elements\nDESCRIPTION: A usage example of Frame.$$eval that counts the number of div elements in a frame. It queries all div elements and returns their count using a simple JavaScript function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.__eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst divsCounts = await frame.$$eval('div', divs => divs.length);\n```\n\n----------------------------------------\n\nTITLE: Selecting Content Between Nodes in Puppeteer\nDESCRIPTION: Example of selecting all content between two nodes using document.createRange() and getSelection(). This demonstrates how to perform text selection operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(\n  (from, to) => {\n    const selection = from.getRootNode().getSelection();\n    const range = document.createRange();\n    range.setStartBefore(from);\n    range.setEndAfter(to);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  },\n  fromJSHandle,\n  toJSHandle\n);\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle.evaluate() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the evaluate() method for the JSHandle class. It uses generic types to allow flexible function parameters and return types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.evaluate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Single Redirect Chain in Puppeteer\nDESCRIPTION: Example showing how to access the redirect chain for a page navigation that includes one redirect from HTTP to HTTPS.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.redirectchain.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await page.goto('http://example.com');\nconst chain = response.request().redirectChain();\nconsole.log(chain.length); // 1\nconsole.log(chain[0].url()); // 'http://example.com'\n```\n\n----------------------------------------\n\nTITLE: Frame.click Method Definition in TypeScript\nDESCRIPTION: The TypeScript class signature for the Frame.click method, showing its parameters and return type. It accepts a selector string and optional click configuration options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Redirect Chain for a Single Redirect in TypeScript\nDESCRIPTION: This example demonstrates how to use the redirectChain() method when a website has a single redirect. It shows how to access the length of the chain and the URL of the first request in the chain.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.redirectchain.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await page.goto('http://example.com');\nconst chain = response.request().redirectChain();\nconsole.log(chain.length); // 1\nconsole.log(chain[0].url()); // 'http://example.com'\n```\n\n----------------------------------------\n\nTITLE: Testing Chrome Extension Background Page with Puppeteer (Manifest V2)\nDESCRIPTION: Code for launching a browser with a Chrome extension loaded and accessing its background page for testing. This approach works for Manifest V2 extensions that use background pages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/chrome-extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\nimport path from 'path';\n\nconst pathToExtension = path.join(process.cwd(), 'my-extension');\nconst browser = await puppeteer.launch({\n  args: [\n    `--disable-extensions-except=${pathToExtension}`,\n    `--load-extension=${pathToExtension}`,\n  ],\n});\nconst backgroundPageTarget = await browser.waitForTarget(\n  target => target.type() === 'background_page',\n);\nconst backgroundPage = await backgroundPageTarget.page();\n// Test the background page as you would any other page.\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Defining Page.waitForRequest Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.waitForRequest method. It takes a URL or predicate function and optional timeout options, returning a Promise that resolves to an HTTPRequest object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForRequest(\n    urlOrPredicate: string | AwaitablePredicate<HTTPRequest>,\n    options?: WaitTimeoutOptions,\n  ): Promise<HTTPRequest>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.select for Single and Multiple Selections\nDESCRIPTION: Examples demonstrating how to use the ElementHandle.select method for both single selection and multiple selections in a dropdown element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.select.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhandle.select('blue'); // single selection\nhandle.select('red', 'green', 'blue'); // multiple selections\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.continue Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the HTTPRequest.continue method. It takes optional parameters for request overrides and priority, and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.continue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  continue(\n    overrides?: ContinueRequestOverrides,\n    priority?: number,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting ElementHandle from Page.evaluateHandle\nDESCRIPTION: Example demonstrating that page.evaluateHandle can return an ElementHandle when the function returns a reference to a DOM element, allowing direct interaction with the element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst button = await page.evaluateHandle(() =>\n  document.querySelector('button'),\n);\n// can call `click` because `button` is an `ElementHandle`\nawait button.click();\n```\n\n----------------------------------------\n\nTITLE: Dumping the Entire Accessibility Tree with Puppeteer\nDESCRIPTION: Example showing how to capture and log the complete accessibility tree of a page using the accessibility.snapshot() method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.accessibility.snapshot.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst snapshot = await page.accessibility.snapshot();\nconsole.log(snapshot);\n```\n\n----------------------------------------\n\nTITLE: Setting Puppeteer Cache Directory in Bash\nDESCRIPTION: Sets the Puppeteer cache directory to the current working directory for installation and script execution.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPUPPETEER_CACHE_DIR=$(pwd) npm install puppeteer\nPUPPETEER_CACHE_DIR=$(pwd) node <script-path>\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.cookies() Method in Typescript\nDESCRIPTION: Method signature for Browser.cookies() which returns a Promise resolving to an array of Cookie objects from the default browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  cookies(): Promise<Cookie[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Response Buffer in Puppeteer TypeScript\nDESCRIPTION: HTTPResponse class method that returns a Promise resolving to a Buffer containing the response body. Note that the browser may re-encode the buffer based on HTTP headers or other heuristics, which could lead to incorrect encoding if the browser fails to detect the proper encoding.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.buffer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  buffer(): Promise<Buffer>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Usage Example in Puppeteer\nDESCRIPTION: Demonstrates how to handle dialog events in Puppeteer, including launching a browser, creating a new page, setting up a dialog event listener, and handling an alert dialog.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  page.on('dialog', async dialog => {\n    console.log(dialog.message());\n    await dialog.dismiss();\n    await browser.close();\n  });\n  page.evaluate(() => alert('1'));\n})();\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Configuration for Google App Engine and Cloud Functions (TypeScript)\nDESCRIPTION: Configuration file (.puppeteerrc.cjs) that overrides the default Puppeteer cache directory for Google App Engine and Cloud Functions environments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst {join} = require('path');\n\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  cacheDirectory: join(__dirname, 'node_modules', '.puppeteer_cache'),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Screencast Recording in Puppeteer\nDESCRIPTION: Complete example demonstrating how to launch a browser, create a page, start recording, and stop the recording. The recording is saved in WebM format using VP9 codec\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.screencast.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n// Launch a browser\nconst browser = await puppeteer.launch();\n\n// Create a new page\nconst page = await browser.newPage();\n\n// Go to your site.\nawait page.goto(\"https://www.example.com\");\n\n// Start recording.\nconst recorder = await page.screencast({path: 'recording.webm'});\n\n// Do something.\n\n// Stop recording.\nawait recorder.stop();\n\nbrowser.close();\n```\n\n----------------------------------------\n\nTITLE: Dumping the Entire Accessibility Tree in TypeScript\nDESCRIPTION: Example showing how to capture and log the entire accessibility tree of a page using the accessibility.snapshot() method in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.accessibility.snapshot.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst snapshot = await page.accessibility.snapshot();\nconsole.log(snapshot);\n```\n\n----------------------------------------\n\nTITLE: Using PredefinedNetworkConditions with Puppeteer in TypeScript\nDESCRIPTION: This example demonstrates how to use PredefinedNetworkConditions with Puppeteer. It shows launching a browser, creating a new page, and applying different network conditions before navigating to a website. The script cycles through all four predefined network conditions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.predefinednetworkconditions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PredefinedNetworkConditions} from 'puppeteer';\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 3G']);\n  await page.goto('https://www.google.com');\n  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 3G']);\n  await page.goto('https://www.google.com');\n  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 4G']); // alias to Fast 3G.\n  await page.goto('https://www.google.com');\n  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 4G']);\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Locator.click Method in TypeScript\nDESCRIPTION: TypeScript class method definition for clicking located elements in Puppeteer. The method accepts optional click configuration options and returns a Promise that resolves when the click is complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  click<ElementType extends Element>(\n    this: Locator<ElementType>,\n    options?: Readonly<LocatorClickOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setCookie() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.setCookie() method. It takes an array of CookieParam objects as arguments and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setcookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setCookie(...cookies: CookieParam[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Installation Examples\nDESCRIPTION: Demonstrates various commands for installing different browser versions and drivers using the CLI.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/index.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Download the latest available Chrome for Testing binary corresponding to the Stable channel.\nnpx @puppeteer/browsers install chrome@stable\n\n# Download a specific Chrome for Testing version.\nnpx @puppeteer/browsers install chrome@116.0.5793.0\n\n# Download the latest Chrome for Testing version for the given milestone.\nnpx @puppeteer/browsers install chrome@117\n\n# Download the latest available ChromeDriver version corresponding to the Canary channel.\nnpx @puppeteer/browsers install chromedriver@canary\n\n# Download a specific ChromeDriver version.\nnpx @puppeteer/browsers install chromedriver@116.0.5793.0\n\n# On Ubuntu/Debian and only for Chrome, install the browser and required system dependencies.\n# If the browser version has already been installed, the command\n# will still attempt to install system dependencies.\n# Requires root privileges.\nnpx puppeteer browsers install chrome --install-deps\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard.sendCharacter Method Example\nDESCRIPTION: Example showing how to use the sendCharacter method to send a Chinese character. Demonstrates practical usage of the method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.sendcharacter.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.keyboard.sendCharacter('嗨');\n```\n\n----------------------------------------\n\nTITLE: Finding and Extracting Text from a Named iframe\nDESCRIPTION: Example showing how to find a specific iframe by its name attribute, then extract text content from an element within that frame using a CSS selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst frames = page.frames();\nlet frame = null;\nfor (const currentFrame of frames) {\n  const frameElement = await currentFrame.frameElement();\n  const name = await frameElement.evaluate(el => el.getAttribute('name'));\n  if (name === 'myframe') {\n    frame = currentFrame;\n    break;\n  }\n}\nif (frame) {\n  const text = await frame.$eval('.selector', element => element.textContent);\n  console.log(text);\n} else {\n  console.error('Frame with name \"myframe\" not found.');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateMediaFeatures Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript class definition for the Page class, including the emulateMediaFeatures method signature. The method takes an optional array of MediaFeature objects and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatemediafeatures.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateMediaFeatures(features?: MediaFeature[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.pdf() Method Signature in TypeScript\nDESCRIPTION: Defines the signature of the pdf() method in the Page class. It accepts optional PDFOptions and returns a Promise resolving to a Uint8Array containing the PDF data.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.pdf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract pdf(options?: PDFOptions): Promise<Uint8Array>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using DeviceRequestPrompt with Bluetooth Device in Puppeteer\nDESCRIPTION: Example of how to use the DeviceRequestPrompt class to wait for and respond to a Bluetooth device connection prompt. It demonstrates waiting for the prompt, finding a specific device by name, and selecting it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.devicerequestprompt.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [devicePrompt] = Promise.all([\n  page.waitForDevicePrompt(),\n  page.click('#connect-bluetooth'),\n]);\nawait devicePrompt.select(\n  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Page.evaluate() with a String Argument\nDESCRIPTION: This snippet shows how to pass a string instead of a function to Page.evaluate(). While functions are recommended for better debugging and TypeScript support, strings can be used for simple evaluations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst aHandle = await page.evaluate('1 + 2');\n```\n\n----------------------------------------\n\nTITLE: Browser Disconnect and Reconnect Example\nDESCRIPTION: Example demonstrating how to disconnect from a browser instance and reconnect using the WebSocket endpoint.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n// Store the endpoint to be able to reconnect to the browser.\nconst browserWSEndpoint = browser.wsEndpoint();\n// Disconnect puppeteer from the browser.\nawait browser.disconnect();\n\n// Use the endpoint to reestablish a connection\nconst browser2 = await puppeteer.connect({browserWSEndpoint});\n// Close the browser.\nawait browser2.close();\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration for Puppeteer Chrome Extension\nDESCRIPTION: Configuration setup for bundling Puppeteer code for Chrome extensions using Rollup. Includes necessary plugins and settings for browser targeting and dependency resolution.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/running-puppeteer-in-extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {nodeResolve} from '@rollup/plugin-node-resolve';\n\nexport default {\n  input: 'main.mjs',\n  output: {\n    format: 'esm',\n    dir: 'out',\n  },\n  // If you do not need to use WebDriver BiDi protocol,\n  // exclude chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js to minimize the bundle size.\n  external: ['chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js'],\n  plugins: [\n    nodeResolve({\n      // Indicate that we target a browser environment.\n      browser: true,\n      // Exclude any dependencies except for puppeteer-core.\n      // `npm install puppeteer-core` # To install puppeteer-core if needed.\n      resolveOnly: ['puppeteer-core'],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Launching Browser Instance with Puppeteer in TypeScript\nDESCRIPTION: Function signature for launching a new browser instance using Puppeteer. It accepts optional launch options and returns a Promise that resolves to a Browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.launch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlaunch: (options?: PuppeteerCore.LaunchOptions) => Promise<PuppeteerCore.Browser>;\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.setContent() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the setContent() method in the Frame class. It takes an HTML string and optional WaitForOptions, and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.setcontent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract setContent(html: string, options?: WaitForOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Various Chrome and ChromeDriver Versions\nDESCRIPTION: Provides examples of installing different versions of Chrome for Testing and ChromeDriver, including specific versions, latest versions for channels, and installing with system dependencies.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/browsers/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @puppeteer/browsers install chrome@stable\nnpx @puppeteer/browsers install chrome@116.0.5793.0\nnpx @puppeteer/browsers install chrome@117\nnpx @puppeteer/browsers install chromedriver@canary\nnpx @puppeteer/browsers install chromedriver@116.0.5793.0\nnpx puppeteer browsers install chrome --install-deps\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Puppeteer Browser Build in JavaScript\nDESCRIPTION: This code snippet shows a Rollup configuration for building a browser-compatible version of a Puppeteer application. It uses the node-resolve plugin to handle dependencies and targets the browser environment.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/running-puppeteer-in-the-browser.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {nodeResolve} from '@rollup/plugin-node-resolve';\n\nexport default {\n  input: 'main.mjs',\n  output: {\n    format: 'esm',\n    dir: 'out',\n  },\n  // If you do not need to use WebDriver BiDi protocol,\n  // exclude chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js to minimize the bundle size.\n  external: ['chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js'],\n  plugins: [\n    nodeResolve({\n      // Indicate that we target a browser environment.\n      browser: true,\n      // Exclude any dependencies except for puppeteer-core.\n      // `npm install puppeteer-core` # To install puppeteer-core if needed.\n      resolveOnly: ['puppeteer-core'],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Page.type Method Definition in TypeScript\nDESCRIPTION: TypeScript class definition showing the signature of the Page.type method. The method takes a selector string, text to type, and optional keyboard type options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  type(\n    selector: string,\n    text: string,\n    options?: Readonly<KeyboardTypeOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Executable Path with Launch Options using PuppeteerNode in TypeScript\nDESCRIPTION: Declares the PuppeteerNode class method executablePath that takes LaunchOptions and returns the default path to the Chrome executable as a string. Requires Puppeteer and the LaunchOptions interface or type. The 'options' parameter allows customized configuration like headless mode or custom args affecting which Chrome binary is chosen. Used to get the launchable executable path based on user-supplied options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.executablepath.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  executablePath(options: LaunchOptions): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining defaultArgs API in PuppeteerNode Class (TypeScript)\nDESCRIPTION: This snippet provides the TypeScript class declaration and method signature for defaultArgs inside PuppeteerNode, showing that the method returns an array of strings representing browser launch arguments and optionally accepts a LaunchOptions parameter for customization. Requires the PuppeteerNode class and, optionally, a LaunchOptions interface. Inputs: an optional options object for browser configuration. Output: a string array of default launch arguments. This declaration does not include implementation logic or constraints, and is written to clarify method signature for consumers of the Puppeteer API.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.defaultargs.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  defaultArgs(options?: LaunchOptions): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: DOM Element Evaluation with Regular Evaluate\nDESCRIPTION: Demonstrates the limitations of returning DOM elements using regular evaluate method, showing how object serialization can lead to unexpected results.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = await page.evaluate(() => {\n  return document.body;\n});\nconsole.log(body); // {}, unexpected!\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.waitForSelector Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.waitForSelector method. It waits for an element matching the given selector to appear in the current element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.waitforselector.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  waitForSelector<Selector extends string>(\n    selector: Selector,\n    options?: WaitForSelectorOptions,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying ElementHandle Type in TypeScript with Page.evaluateHandle\nDESCRIPTION: This snippet shows how to use TypeScript generics to specify that Page.evaluateHandle will return an ElementHandle instead of a JSHandle.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst button = await page.evaluateHandle<ElementHandle>(...);\n```\n\n----------------------------------------\n\nTITLE: Frame.type() Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Frame.type() method, which takes a selector, text to type, and optional keyboard typing options. The method returns a Promise that resolves when typing is complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  type(\n    selector: string,\n    text: string,\n    options?: Readonly<KeyboardTypeOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Frame.type() Method in Puppeteer\nDESCRIPTION: Examples demonstrating how to use the Frame.type() method in Puppeteer to type text into an element. The first example types immediately, while the second uses a delay parameter to simulate more realistic user typing.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait frame.type('#mytextarea', 'Hello'); // Types instantly\nawait frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Defining Page.waitForFrame method signature in TypeScript\nDESCRIPTION: TypeScript class definition showing the waitForFrame method signature in the Page class. This method waits for a frame matching given conditions and returns a Promise resolving to the Frame object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforframe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForFrame(\n    urlOrPredicate: string | ((frame: Frame) => Awaitable<boolean>),\n    options?: WaitTimeoutOptions,\n  ): Promise<Frame>;\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserContextOptions Interface Definition in TypeScript\nDESCRIPTION: Defines the TypeScript interface for BrowserContextOptions in Puppeteer. This interface specifies configuration options for browser contexts, including download behavior and proxy settings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontextoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BrowserContextOptions\n```\n\n----------------------------------------\n\nTITLE: Optimized Puppeteer Implementation in Google Cloud Run (JavaScript)\nDESCRIPTION: An improved Express app implementation for Google Cloud Run that launches Puppeteer before sending the response, ensuring efficient CPU usage.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/test-puppeteer', (req, res) => {\n  puppeteer.launch().then(browser => {\n    // A second later...\n    res.json({\n      jobId: 123,\n      acknowledged: true,\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WaitForOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the WaitForOptions interface used in Puppeteer. It includes properties for configuring wait operations such as timeout, abort signal, and lifecycle events to wait for.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waitforoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitForOptions\n```\n\n----------------------------------------\n\nTITLE: Pressing Uppercase A Using Keyboard API\nDESCRIPTION: Shows how to simulate pressing an uppercase 'A' by using the Shift modifier key with keyboard down(), press(), and up() methods.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.keyboard.down('Shift');\nawait page.keyboard.press('KeyA');\nawait page.keyboard.up('Shift');\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for Puppeteer\nDESCRIPTION: Basic .travis.yml configuration for running Puppeteer tests on Travis CI. It specifies Node.js as the language, sets up the xvfb service for non-headless Chrome, and runs tests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\nnode_js: node\nservices: xvfb\nscript:\n  - npm test\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Interacting with ElementHandle in Puppeteer\nDESCRIPTION: This example demonstrates how Page.evaluateHandle can return an ElementHandle when the pageFunction returns a reference to an element. It shows how to retrieve a button element and click it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst button = await page.evaluateHandle(() =>\n  document.querySelector('button')\n);\n// can call `click` because `button` is an `ElementHandle`\nawait button.click();\n```\n\n----------------------------------------\n\nTITLE: Frame.goto Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Frame.goto() method which navigates a frame to a URL. It accepts a URL string and optional configuration for waiting behavior, returning a Promise that resolves to an HTTPResponse object or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.goto.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract goto(\n    url: string,\n    options?: GoToOptions,\n  ): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPRequest.respond Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the HTTPRequest.respond method, which takes a partial ResponseForRequest object and an optional priority parameter to fulfill an intercepted HTTP request.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.respond.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  respond(\n    response: Partial<ResponseForRequest>,\n    priority?: number,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for ConnectOptions which contains configuration properties for connecting to browser instances in Puppeteer. This interface specifies options like viewport settings, timeout values, and connection endpoints.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connectoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConnectOptions\n```\n\n----------------------------------------\n\nTITLE: Waiting for Elements Using ElementHandle in Puppeteer\nDESCRIPTION: Waits for an element matching the given selector to appear within the current element's subtree. Does not work across page navigations or if parent element is detached.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nelementHandle.waitForSelector(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Defining Page.hover Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the hover method signature that takes a selector string parameter and returns a Promise. The method hovers over the first element matching the provided selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.hover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  hover(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining tap Method for Puppeteer Touchscreen - TypeScript\nDESCRIPTION: Defines the tap method in the Touchscreen class, which dispatches a touchstart and touchend event at specified (x, y) coordinates. This asynchronous TypeScript function returns a Promise that resolves when the event dispatching is complete. Dependencies include Puppeteer library context and requires numerical x and y parameters specifying tap location; no value is returned (Promise<void>), and it is limited to browser-controlled environments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.touchscreen.tap.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Touchscreen {\n  tap(x: number, y: number): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTML Content with Page.content() in Puppeteer (TypeScript)\nDESCRIPTION: Definition of the content() method in the Page class, which returns a Promise that resolves to a string containing the full HTML content of the page, including the DOCTYPE declaration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.content.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  content(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing arguments to Page.waitForFunction in Puppeteer\nDESCRIPTION: This example shows how to pass arguments from Node.js to the pageFunction. It waits for an element with the specified selector to appear in the page by checking if document.querySelector returns a non-null value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst selector = '.foo';\nawait page.waitForFunction(\n  selector => !!document.querySelector(selector),\n  {},\n  selector,\n);\n```\n\n----------------------------------------\n\nTITLE: Page.$eval with Explicit TypeScript Element Type\nDESCRIPTION: Example showing how to provide an explicit type for the element parameter in the evaluation function when using TypeScript. This is necessary when accessing properties that are not available on the base Element type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._eval.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// if you don't provide HTMLInputElement here, TS will error\n// as `value` is not on `Element`\nconst searchValue = await page.$eval(\n  '#search',\n  (el: HTMLInputElement) => el.value,\n);\n```\n\n----------------------------------------\n\nTITLE: Type Signature for Page.$eval() in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `Page.$eval()` method within the `Page` class. It accepts a selector, a page function (or its string representation), and optional arguments. The method is generic, allowing specification of the selector type, parameter types, and the function type, returning a Promise that resolves to the awaited return value of the page function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page._eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  $eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<\n      NodeFor<Selector>,\n      Params\n    >,\n  >(\n    selector: Selector,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Frame Name or ID in Puppeteer\nDESCRIPTION: Shows how to get the name or ID of a frame element using Puppeteer. This method is recommended as a replacement for the deprecated frame.name() function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = await frame.frameElement();\nconst nameOrId = await element.evaluate(frame => frame.name ?? frame.id);\n```\n\n----------------------------------------\n\nTITLE: TypeScript signature of Page.waitForFunction method in Puppeteer\nDESCRIPTION: The method signature defines how to use the waitForFunction method of the Page class. It waits for the provided function to return a truthy value when evaluated in the page's context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForFunction<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    options?: FrameWaitForFunctionOptions,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSHandle as an Argument in Page.evaluateHandle\nDESCRIPTION: This example shows how to pass a JSHandle instance as an argument to the pageFunction in Page.evaluateHandle, retrieve the innerHTML of the body, and log the result.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst aHandle = await page.evaluateHandle(() => document.body);\nconst resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\nconsole.log(await resultHandle.jsonValue());\nawait resultHandle.dispose();\n```\n\n----------------------------------------\n\nTITLE: Logging Pending Protocol Calls in Puppeteer (TypeScript)\nDESCRIPTION: Demonstrates how to log pending protocol calls in Puppeteer using the debugInfo interface. This is useful for identifying unresolved async calls.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(browser.debugInfo.pendingProtocolErrors);\n```\n\n----------------------------------------\n\nTITLE: Page.emulateVisionDeficiency Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Page.emulateVisionDeficiency method which allows simulation of vision deficiencies on a page. The method takes an optional type parameter that specifies the vision deficiency to simulate.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatevisiondeficiency.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateVisionDeficiency(\n    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type'],\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Cooperative Intercept Handler in Puppeteer\nDESCRIPTION: More robust implementation with a configuration function that allows users to explicitly enable Cooperative Intercept Mode and specify a custom priority. Maintains backward compatibility with Legacy Mode.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Defaults to undefined which preserves Legacy Mode behavior\nlet _priority = undefined;\n\n// Export a module configuration function\nexport const setInterceptResolutionConfig = (priority = 0) =>\n  (_priority = priority);\n\n/**\n * Note that this handler uses `DEFAULT_INTERCEPT_RESOLUTION_PRIORITY` to \"pass\" on this request. It is important to use\n * the default priority when your handler has no opinion on the request and the intent is to continue() by default.\n */\npage.on('request', interceptedRequest => {\n  if (request.isInterceptResolutionHandled()) return;\n  if (\n    interceptedRequest.url().endsWith('.png') ||\n    interceptedRequest.url().endsWith('.jpg')\n  )\n    interceptedRequest.abort('failed', _priority);\n  else\n    interceptedRequest.continue(\n      interceptedRequest.continueRequestOverrides(),\n      DEFAULT_INTERCEPT_RESOLUTION_PRIORITY, // Unopinionated continuation\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Frame.type() Method in Puppeteer\nDESCRIPTION: This example demonstrates how to use the Frame.type() method to type text into a textarea element. It shows two cases: typing instantly and typing with a delay to simulate user input.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait frame.type('#mytextarea', 'Hello'); // Types instantly\nawait frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.click Method Signature in TypeScript for Puppeteer\nDESCRIPTION: Defines the signature of the click method for the ElementHandle class in Puppeteer. This method scrolls the element into view if needed and uses Page.mouse to click in the center of the element. It throws an error if the element is detached from DOM.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  click(\n    this: ElementHandle<Element>,\n    options?: Readonly<ClickOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Puppeteer with Custom Chrome Path in TypeScript\nDESCRIPTION: Demonstrates how to initialize Puppeteer with a specific Chrome or Chromium executable path instead of using the default bundled browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.touchStart Method in TypeScript\nDESCRIPTION: This snippet defines the touchStart method for the ElementHandle class. The method scrolls the element into view if needed and starts a touch in the center of the element. It returns a Promise that resolves to a TouchHandle representing the started touch.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.touchstart.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  touchStart(this: ElementHandle<Element>): Promise<TouchHandle>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.authenticate() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.authenticate() method in the Page class. It takes a Credentials object or null as a parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.authenticate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract authenticate(credentials: Credentials | null): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomQueryHandler Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure for custom query handlers in Puppeteer. It includes two optional methods: queryAll for retrieving multiple nodes and queryOne for retrieving a single node based on a selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.customqueryhandler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CustomQueryHandler\n```\n\n----------------------------------------\n\nTITLE: Example of Clearing Permission Overrides in Puppeteer\nDESCRIPTION: A practical example showing how to clear permission overrides in Puppeteer's default browser context. First, it overrides the clipboard-read permission for a specific domain, then clears all permission overrides after completing operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.clearpermissionoverrides.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst context = browser.defaultBrowserContext();\ncontext.overridePermissions('https://example.com', ['clipboard-read']);\n// do stuff ..\ncontext.clearPermissionOverrides();\n```\n\n----------------------------------------\n\nTITLE: Defining Page.queryObjects Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.queryObjects method. It takes a JSHandle of a prototype and returns a Promise resolving to a JSHandle of an array of objects with that prototype.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.queryobjects.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract queryObjects<Prototype>(\n    prototypeHandle: JSHandle<Prototype>,\n  ): Promise<JSHandle<Prototype[]>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Method Signature for Page.evaluateHandle in Puppeteer TypeScript\nDESCRIPTION: The TypeScript signature for the Page.evaluateHandle method, which allows executing JavaScript in the page context and returns handles to page objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Method Signature for Page.setViewport in Puppeteer\nDESCRIPTION: TypeScript signature for the Page.setViewport method, which takes a Viewport object or null and returns a Promise that resolves when the viewport has been set.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setviewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setViewport(viewport: Viewport | null): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Browser Instance in Puppeteer\nDESCRIPTION: Shows how to properly close a browser instance after usage to free up system resources.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/browser-management.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch();\n\nconst page = await browser.newPage();\n\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Defining PuppeteerNode.connect Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the `PuppeteerNode.connect` method. The method is part of the `PuppeteerNode` class and is designed to attach Puppeteer to an existing browser instance. It takes a `ConnectOptions` object as input for configuration and returns a `Promise` that resolves to a `Browser` object, representing the connected browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.connect.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass PuppeteerNode {\n  connect(options: ConnectOptions): Promise<Browser>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Requests with Puppeteer\nDESCRIPTION: Example showing how to listen for failed requests and log the URL along with the error message using the requestfailed event.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.failure.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('requestfailed', request => {\n  console.log(request.url() + ' ' + request.failure().errorText);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Locator Actions in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element matching the CSS selector 'button' using `page.locator()` and sets a specific timeout of 3000 milliseconds (3 seconds) for the subsequent `.click()` action using `.setTimeout()`. If the element is not found or preconditions are not met within this time, a `TimeoutError` will be thrown, overriding any default page timeout. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Time out after 3 sec.\nawait page.locator('button').setTimeout(3000).click();\n```\n\n----------------------------------------\n\nTITLE: Hovering Over an Element Using Locators in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element matching the CSS selector 'div' using `page.locator()` and simulates hovering the mouse cursor over it. Puppeteer automatically waits for the element to be in the viewport, visible, and have a stable bounding box before hovering. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.locator('div').hover();\n```\n\n----------------------------------------\n\nTITLE: Page.exposeFunction Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Page.exposeFunction method, which defines how to expose a Node.js function to the browser context. It takes a name parameter and a function to be executed in the Node.js context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.exposefunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract exposeFunction(\n    name: string,\n    pptrFunction:\n      | Function\n      | {\n          default: Function;\n        },\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.$eval Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the ElementHandle.$eval method, which runs a function on the first element matching a selector within the current element. This method supports generic typing for selector matching, function parameters, and return values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle._eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  $eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<\n      NodeFor<Selector>,\n      Params\n    >,\n  >(\n    selector: Selector,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Lifecycle Events with TypeScript Union Types - TypeScript\nDESCRIPTION: Defines the ProtocolLifeCycleEvent type as a union of string literals representing page lifecycle events such as 'load', 'DOMContentLoaded', 'networkIdle', and 'networkAlmostIdle'. There are no runtime dependencies, but TypeScript must be used for type enforcement. Inputs and outputs are limited to these event strings for strict type control in Puppeteer interfaces and method parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.protocollifecycleevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ProtocolLifeCycleEvent =\n  | 'load'\n  | 'DOMContentLoaded'\n  | 'networkIdle'\n  | 'networkAlmostIdle';\n```\n\n----------------------------------------\n\nTITLE: Typing Text into Elements with Puppeteer ElementHandle\nDESCRIPTION: Method for typing text into DOM elements by simulating keyboard events. Generates keydown, keypress/input, and keyup events for each character. Special keys must be handled separately using ElementHandle.press().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype(text, options)\n```\n\n----------------------------------------\n\nTITLE: Page.tap() Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the tap() method in the Page class. It takes a selector string as input and returns a Promise that resolves when the tap action is completed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.tap.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  tap(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame Click Method Signature in TypeScript\nDESCRIPTION: TypeScript class definition showing the Frame.click() method signature which accepts a selector string and optional click options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadBehavior Interface in TypeScript\nDESCRIPTION: This snippet defines the DownloadBehavior interface, which is used to configure download settings in Puppeteer. It includes two properties: downloadPath for specifying the default save location, and policy for controlling download behavior.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.downloadbehavior.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DownloadBehavior\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.waitForSelector Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature of the waitForSelector method in the ElementHandle class. This method waits for an element matching the given selector to appear within the current element and returns a Promise that resolves to the matching element handle or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.waitforselector.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  waitForSelector<Selector extends string>(\n    selector: Selector,\n    options?: WaitForSelectorOptions,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Frame.$$eval Usage Example in TypeScript\nDESCRIPTION: Simple example showing how to use Frame.$$eval to count the number of div elements in a frame. The method queries all div elements and returns their count.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.__eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst divsCounts = await frame.$$eval('div', divs => divs.length);\n```\n\n----------------------------------------\n\nTITLE: Declaring Page.waitForNavigation Method in Puppeteer (TypeScript)\nDESCRIPTION: Declares the waitForNavigation method for the Page class in Puppeteer. This method optionally accepts navigation parameters via the WaitForOptions interface and returns a Promise that resolves to an HTTPResponse or null. The returned value depends on the navigation type, such as main resource loads or History API usage, and accounts for redirects and anchor changes. This declaration provides the necessary typing for TypeScript consumers of Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitfornavigation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForNavigation(options?: WaitForOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Frame.$eval to Retrieve Input Value in TypeScript\nDESCRIPTION: This example demonstrates how to use the Frame.$eval method to retrieve the value of a search input element. It selects the element with the ID 'search' and returns its value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame._eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchValue = await frame.$eval('#search', el => el.value);\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.hover Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the hover() method in the ElementHandle class. The method scrolls the element into view if needed, then uses Page.mouse to hover over the center of the element. It throws an error if the element is detached from the DOM.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.hover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  hover(this: ElementHandle<Element>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookies in BrowserContext with Puppeteer in TypeScript\nDESCRIPTION: This code defines the abstract cookies() method in the BrowserContext class that retrieves all cookies from the browser context. The method returns a Promise that resolves to an array of Cookie objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract cookies(): Promise<Cookie[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer to Download Multiple Browsers in JavaScript\nDESCRIPTION: This configuration file example shows how to set up Puppeteer to download both Chrome and Firefox browsers. It uses the Configuration interface to specify download options for each browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  // Download Chrome (default `skipDownload: false`).\n  chrome: {\n    skipDownload: false,\n  },\n  // Download Firefox (default `skipDownload: true`).\n  firefox: {\n    skipDownload: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PredefinedNetworkConditions in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the PredefinedNetworkConditions variable. It defines a readonly object with four network condition presets: Slow 3G, Fast 3G, Slow 4G, and Fast 4G.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.predefinednetworkconditions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPredefinedNetworkConditions: Readonly<{\n  'Slow 3G': NetworkConditions;\n  'Fast 3G': NetworkConditions;\n  'Slow 4G': NetworkConditions;\n  'Fast 4G': NetworkConditions;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration Pattern\nDESCRIPTION: Comprehensive implementation with granular control over different types of interception priorities using a detailed configuration interface.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InterceptResolutionConfig {\n  abortPriority?: number;\n  continuePriority?: number;\n}\n\nconst DEFAULT_CONFIG: InterceptResolutionConfig = {\n  abortPriority: undefined, // Default to Legacy Mode\n  continuePriority: undefined, // Default to Legacy Mode\n};\n\nlet _config: Partial<InterceptResolutionConfig> = {};\n\nexport const setInterceptResolutionConfig = (\n  config: InterceptResolutionConfig,\n) => (_config = {...DEFAULT_CONFIG, ...config});\n\npage.on('request', interceptedRequest => {\n  if (request.isInterceptResolutionHandled()) return;\n  if (\n    interceptedRequest.url().endsWith('.png') ||\n    interceptedRequest.url().endsWith('.jpg')\n  ) {\n    interceptedRequest.abort('failed', _config.abortPriority);\n  } else {\n    interceptedRequest.continue(\n      interceptedRequest.continueRequestOverrides(),\n      _config.continuePriority,\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating Typing with Page.type() in TypeScript\nDESCRIPTION: Demonstrates using the `page.type()` method in Puppeteer with TypeScript. The first example types 'Hello' instantly into the element with ID 'mytextarea'. The second example types 'World' into the same element but introduces a 100ms delay between each key press, simulating more realistic user input.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nawait page.type('#mytextarea', 'Hello');\n// Types instantly\nawait page.type('#mytextarea', 'World', {delay: 100});\n// Types slower, like a user\n```\n```\n\n----------------------------------------\n\nTITLE: Defining KeyInput Type for Keyboard Operations in Puppeteer\nDESCRIPTION: This TypeScript code defines the KeyInput type, which is a union of string literals representing all valid keys that can be used in Puppeteer's keyboard functions. It includes standard keyboard keys, function keys, numpad keys, and special characters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyinput.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KeyInput =\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'Power'\n  | 'Eject'\n  | 'Abort'\n  | 'Help'\n  | 'Backspace'\n  | 'Tab'\n  | 'Numpad5'\n  | 'NumpadEnter'\n  | 'Enter'\n  | '\\r'\n  | '\\n'\n  | 'ShiftLeft'\n  | 'ShiftRight'\n  | 'ControlLeft'\n  | 'ControlRight'\n  | 'AltLeft'\n  | 'AltRight'\n  | 'Pause'\n  | 'CapsLock'\n  | 'Escape'\n  | 'Convert'\n  | 'NonConvert'\n  | 'Space'\n  | 'Numpad9'\n  | 'PageUp'\n  | 'Numpad3'\n  | 'PageDown'\n  | 'End'\n  | 'Numpad1'\n  | 'Home'\n  | 'Numpad7'\n  | 'ArrowLeft'\n  | 'Numpad4'\n  | 'Numpad8'\n  | 'ArrowUp'\n  | 'ArrowRight'\n  | 'Numpad6'\n  | 'Numpad2'\n  | 'ArrowDown'\n  | 'Select'\n  | 'Open'\n  | 'PrintScreen'\n  | 'Insert'\n  | 'Numpad0'\n  | 'Delete'\n  | 'NumpadDecimal'\n  | 'Digit0'\n  | 'Digit1'\n  | 'Digit2'\n  | 'Digit3'\n  | 'Digit4'\n  | 'Digit5'\n  | 'Digit6'\n  | 'Digit7'\n  | 'Digit8'\n  | 'Digit9'\n  | 'KeyA'\n  | 'KeyB'\n  | 'KeyC'\n  | 'KeyD'\n  | 'KeyE'\n  | 'KeyF'\n  | 'KeyG'\n  | 'KeyH'\n  | 'KeyI'\n  | 'KeyJ'\n  | 'KeyK'\n  | 'KeyL'\n  | 'KeyM'\n  | 'KeyN'\n  | 'KeyO'\n  | 'KeyP'\n  | 'KeyQ'\n  | 'KeyR'\n  | 'KeyS'\n  | 'KeyT'\n  | 'KeyU'\n  | 'KeyV'\n  | 'KeyW'\n  | 'KeyX'\n  | 'KeyY'\n  | 'KeyZ'\n  | 'MetaLeft'\n  | 'MetaRight'\n  | 'ContextMenu'\n  | 'NumpadMultiply'\n  | 'NumpadAdd'\n  | 'NumpadSubtract'\n  | 'NumpadDivide'\n  | 'F1'\n  | 'F2'\n  | 'F3'\n  | 'F4'\n  | 'F5'\n  | 'F6'\n  | 'F7'\n  | 'F8'\n  | 'F9'\n  | 'F10'\n  | 'F11'\n  | 'F12'\n  | 'F13'\n  | 'F14'\n  | 'F15'\n  | 'F16'\n  | 'F17'\n  | 'F18'\n  | 'F19'\n  | 'F20'\n  | 'F21'\n  | 'F22'\n  | 'F23'\n  | 'F24'\n  | 'NumLock'\n  | 'ScrollLock'\n  | 'AudioVolumeMute'\n  | 'AudioVolumeDown'\n  | 'AudioVolumeUp'\n  | 'MediaTrackNext'\n  | 'MediaTrackPrevious'\n  | 'MediaStop'\n  | 'MediaPlayPause'\n  | 'Semicolon'\n  | 'Equal'\n  | 'NumpadEqual'\n  | 'Comma'\n  | 'Minus'\n  | 'Period'\n  | 'Slash'\n  | 'Backquote'\n  | 'BracketLeft'\n  | 'Backslash'\n  | 'BracketRight'\n  | 'Quote'\n  | 'AltGraph'\n  | 'Props'\n  | 'Cancel'\n  | 'Clear'\n  | 'Shift'\n  | 'Control'\n  | 'Alt'\n  | 'Accept'\n  | 'ModeChange'\n  | ' '\n  | 'Print'\n  | 'Execute'\n  | '\\u0000'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'g'\n  | 'h'\n  | 'i'\n  | 'j'\n  | 'k'\n  | 'l'\n  | 'm'\n  | 'n'\n  | 'o'\n  | 'p'\n  | 'q'\n  | 'r'\n  | 's'\n  | 't'\n  | 'u'\n  | 'v'\n  | 'w'\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'Meta'\n  | '*'\n  | '+'\n  | '-'\n  | '/'\n  | ';'\n  | '='\n  | ','\n  | '.'\n  | '`'\n  | '['\n  | '\\\\'\n  | ']'\n  | \"'\"\n  | 'Attn'\n  | 'CrSel'\n  | 'ExSel'\n  | 'EraseEof'\n  | 'Play'\n  | 'ZoomOut'\n  | ')'\n  | '!'\n  | '@'\n  | '#'\n  | '$'\n  | '%'\n  | '^'\n  | '&'\n  | '('\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F'\n  | 'G'\n  | 'H'\n  | 'I'\n  | 'J'\n  | 'K'\n  | 'L'\n  | 'M'\n  | 'N'\n  | 'O'\n  | 'P'\n  | 'Q'\n  | 'R'\n  | 'S'\n  | 'T'\n  | 'U'\n  | 'V'\n  | 'W'\n  | 'X'\n  | 'Y'\n  | 'Z'\n  | ':'\n  | '<'\n  | '_'\n  | '>'\n  | '?'\n  | '~'\n  | '{'\n  | '|'\n  | '}'\n  | '\"'\n  | 'SoftLeft'\n  | 'SoftRight'\n  | 'Camera'\n  | 'Call'\n  | 'EndCall'\n  | 'VolumeDown'\n  | 'VolumeUp';\n```\n\n----------------------------------------\n\nTITLE: Getting Frame Name or ID in Puppeteer\nDESCRIPTION: Alternative approach to getting a frame's name or ID attribute by accessing the frame element and evaluating its properties.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = await frame.frameElement();\nconst nameOrId = await element.evaluate(frame => frame.name ?? frame.id);\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateNetworkConditions Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the Page.emulateNetworkConditions method. It takes a NetworkConditions object or null as a parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatenetworkconditions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateNetworkConditions(\n    networkConditions: NetworkConditions | null,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Page.$() Method in Puppeteer with TypeScript\nDESCRIPTION: TypeScript signature for the Page.$() method in Puppeteer. This method returns a Promise that resolves to an ElementHandle of the found element or null if no element is found matching the selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  $<Selector extends string>(\n    selector: Selector,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Hidden Check in Puppeteer TypeScript\nDESCRIPTION: TypeScript class method definition for ElementHandle.isHidden() that returns a Promise resolving to a boolean indicating whether an element is hidden. An element is considered hidden if it has no computed styles, empty bounding client rect, or visibility set to hidden/collapse.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.ishidden.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  isHidden(): Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Puppeteer connect() Method\nDESCRIPTION: Defines the TypeScript signature for the connect() function, which takes ConnectOptions and returns a Promise resolving to a Browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connect.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconnect: (options: PuppeteerCore.ConnectOptions) =>\n  Promise<PuppeteerCore.Browser>;\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Page.$eval Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Page.$eval method, showing its generic type parameters and function arguments. It accepts a selector, a function to evaluate, and optional additional arguments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  $eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<\n      NodeFor<Selector>,\n      Params\n    >,\n  >(\n    selector: Selector,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting JavaScript Coverage in Puppeteer\nDESCRIPTION: Method signature for the startJSCoverage() method which enables JavaScript code coverage analysis. It accepts optional configuration parameters to control coverage behavior including reset on navigation, reporting of anonymous scripts, and block coverage tracking.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.coverage.startjscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Coverage {\n  startJSCoverage(options?: JSCoverageOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding style content using Page.addStyleTag in Puppeteer\nDESCRIPTION: This signature allows adding a <style> tag with CSS content directly to the page. It returns a Promise that resolves to an ElementHandle for the created HTMLStyleElement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.addstyletag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  addStyleTag(\n    options: Omit<FrameAddStyleTagOptions, 'url'>,\n  ): Promise<ElementHandle<HTMLStyleElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.pdf() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.pdf() method in Puppeteer. It generates a PDF of the page with the 'print' CSS media type and returns a Promise resolving to a Uint8Array.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.pdf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract pdf(options?: PDFOptions): Promise<Uint8Array>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.goto Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.goto() method. It takes a URL string and optional GoToOptions, returning a Promise that resolves to an HTTPResponse or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.goto.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  goto(url: string, options?: GoToOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.title() Method in Puppeteer TypeScript\nDESCRIPTION: This code snippet defines the title() method for the Page class in Puppeteer. It returns a Promise that resolves to a string containing the page's title. This method is a shortcut for accessing the title of the main frame of the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.title.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  title(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.waitForNetworkIdle Method in TypeScript\nDESCRIPTION: TypeScript method signature for the Page.waitForNetworkIdle method, which waits for the network to be idle. The method accepts optional WaitForNetworkIdleOptions parameters to configure waiting behavior and returns a Promise that resolves once the network is idle.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfornetworkidle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForNetworkIdle(options?: WaitForNetworkIdleOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Clipboard Operations in Puppeteer\nDESCRIPTION: Example showing how to interact with the clipboard API to copy selected content.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The clipboard api does not allow you to copy, unless the tab is focused.\nawait page.bringToFront();\nawait page.evaluate(() => {\n  // Copy the selected content to the clipboard\n  document.execCommand('copy');\n  // Obtain the content of the clipboard as a string\n  return navigator.clipboard.readText();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.dragAndDrop Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the dragAndDrop method within the ElementHandle class. This method takes a target ElementHandle and optional options object with a delay parameter. The method is used to perform drag and drop operations from one element to another.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.draganddrop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  dragAndDrop(\n    this: ElementHandle<Element>,\n    target: ElementHandle<Node>,\n    options?: {\n      delay: number;\n    },\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Headful Mode in Puppeteer\nDESCRIPTION: Demonstrates how to launch Chrome with a visible UI (headful mode) by setting the headless option to false.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/headless-modes.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({headless: false});\n```\n\n----------------------------------------\n\nTITLE: Defining hover() Method for Locator Class in TypeScript\nDESCRIPTION: This code snippet defines the hover() method for the Locator class in Puppeteer. The method is used to hover over a located element. It takes an optional ActionOptions parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.hover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  hover<ElementType extends Element>(\n    this: Locator<ElementType>,\n    options?: Readonly<ActionOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Page.$eval in Puppeteer\nDESCRIPTION: Examples of basic Page.$eval usage to extract values from elements on a page. This example shows how to get the value of a search input, the href of a preload link, and the HTML content of a container element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchValue = await page.$eval('#search', el => el.value);\nconst preloadHref = await page.$eval('link[rel=preload]', el => el.href);\nconst html = await page.$eval('.main-container', el => el.outerHTML);\n```\n\n----------------------------------------\n\nTITLE: Browser Class Definition in TypeScript\nDESCRIPTION: Abstract class declaration for Browser that extends EventEmitter with BrowserEvents type parameter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Browser extends EventEmitter<BrowserEvents>\n```\n\n----------------------------------------\n\nTITLE: Creating New Page in Browser Context using TypeScript\nDESCRIPTION: Abstract method definition for creating a new Page instance within a BrowserContext. The method returns a Promise that resolves to a Page object, allowing for asynchronous page creation in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.newpage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract newPage(): Promise<Page>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for Puppeteer's Metrics object. Contains optional numeric properties for tracking various performance metrics including JavaScript heap usage, DOM metrics, layout calculations, and timing measurements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Metrics {\n  Documents?: number;\n  Frames?: number;\n  JSEventListeners?: number;\n  JSHeapTotalSize?: number;\n  JSHeapUsedSize?: number;\n  LayoutCount?: number;\n  LayoutDuration?: number;\n  Nodes?: number;\n  RecalcStyleCount?: number;\n  RecalcStyleDuration?: number;\n  ScriptDuration?: number;\n  TaskDuration?: number;\n  Timestamp?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Puppeteer with Chrome\nDESCRIPTION: Complete Dockerfile setup for running Puppeteer with Chrome for Testing, including necessary dependencies and security configurations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:14-slim\n\nRUN apt-get update \\\n    && apt-get install -y wget gnupg \\\n    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n    && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\\n    && apt-get update \\\n    && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \\\n      --no-install-recommends \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN npm init -y &&  \\\n    npm i puppeteer \\\n    && groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \\\n    && mkdir -p /home/pptruser/Downloads \\\n    && chown -R pptruser:pptruser /home/pptruser \\\n    && chown -R pptruser:pptruser /node_modules \\\n    && chown -R pptruser:pptruser /package.json \\\n    && chown -R pptruser:pptruser /package-lock.json\n\nUSER pptruser\n\nCMD [\"google-chrome-stable\"]\n```\n\n----------------------------------------\n\nTITLE: Defining the Page.title Method Signature (TypeScript)\nDESCRIPTION: Defines the signature for the `Page.title()` method within the `Page` class in Puppeteer. This asynchronous method takes no arguments and returns a Promise that resolves to the string value of the page's title. It's a convenience method for accessing the title via the main frame.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.title.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  title(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing isIntersectingViewport Method in ElementHandle Class for Puppeteer in TypeScript\nDESCRIPTION: Method signature for isIntersectingViewport which resolves to true if the element is visible in the current viewport. It takes an optional threshold parameter between 0 and 1, defaulting to 1, which determines the intersection threshold for visibility.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.isintersectingviewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  isIntersectingViewport(\n    this: ElementHandle<Element>,\n    options?: {\n      threshold?: number;\n    },\n  ): Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GoToOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for GoToOptions that extends WaitForOptions. It includes optional properties for controlling referrer and referrer policy during page navigation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.gotooptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GoToOptions extends WaitForOptions\n```\n\n----------------------------------------\n\nTITLE: Starting Tracing in Puppeteer using TypeScript\nDESCRIPTION: This TypeScript signature defines the `start` method within the `Tracing` class in Puppeteer. It initiates a performance trace for the current page. It accepts an optional `options` object of type `TracingOptions` to configure the trace and returns a Promise that resolves when the trace has successfully started. Only one trace can be active per browser at any given time.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.tracing.start.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Tracing {\n  start(options?: TracingOptions): Promise<void>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Page.emulateIdleState Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the Page.emulateIdleState method to set and clear idle emulation. It first sets the idle state with custom values, then clears the emulation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulateidlestate.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// set idle emulation\nawait page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});\n\n// do some checks here\n...\n\n// clear idle emulation\nawait page.emulateIdleState();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ElementHandle Usage with TypeScript\nDESCRIPTION: Shows how to create and use an ElementHandle to interact with DOM elements on a webpage using Puppeteer. The example demonstrates launching a browser, navigating to a page, selecting an element, and clicking it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  const hrefElement = await page.$('a');\n  await hrefElement.click();\n  // ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Page.$$eval() with Explicit Type for pageFunction Argument\nDESCRIPTION: This example shows how to provide an explicit type for the first argument of the pageFunction when using Page.$$eval() in TypeScript.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.__eval.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.$$eval('input', elements => {\n  return elements.map(e => e.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Page URL in Puppeteer (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows the signature for the `Page.url()` method within the Puppeteer `Page` class. It returns the current URL of the page's main frame as a string. This method requires no parameters and is noted as a shortcut for accessing `page.mainFrame().url()`.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Page {\n  url(): string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining InterceptResolutionAction Enum in TypeScript\nDESCRIPTION: Declaration of an enumeration that defines possible resolution actions for intercepted network requests in Puppeteer. The enum includes actions like Abort, Continue, Respond, and other control states.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.interceptresolutionaction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum InterceptResolutionAction\n```\n\n----------------------------------------\n\nTITLE: Defining AutofillData Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for AutofillData, which exposes a creditCard property with fields for card number, name, expiry dates, and security code. This interface is referenced in Puppeteer's implementation of Chrome DevTools Protocol's Autofill module.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.autofilldata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AutofillData\n```\n\n----------------------------------------\n\nTITLE: Using JSHandle.getProperties to Access DOM Elements\nDESCRIPTION: Example demonstrating how to use getProperties to retrieve and filter element handles from document.body.children. Shows iterating through properties and converting handles to elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.getproperties.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst listHandle = await page.evaluateHandle(() => document.body.children);\nconst properties = await listHandle.getProperties();\nconst children = [];\nfor (const property of properties.values()) {\n  const element = property.asElement();\n  if (element) {\n    children.push(element);\n  }\n}\nchildren; // holds elementHandles to all children of document.body\n```\n\n----------------------------------------\n\nTITLE: Frame.$eval TypeScript Method Signature\nDESCRIPTION: TypeScript definition for the Frame.$eval method, which runs a function on the first element matching a selector in a frame and returns the result as a Promise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame._eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  $eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<\n      NodeFor<Selector>,\n      Params\n    >,\n  >(\n    selector: Selector,\n    pageFunction: string | Func,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.waitForSelector in Puppeteer\nDESCRIPTION: This example demonstrates how to use the ElementHandle.waitForSelector method in a Puppeteer script. It waits for an 'img' element to appear on different web pages and logs the URL when found.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.waitforselector.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  let currentURL;\n  page\n    .mainFrame()\n    .waitForSelector('img')\n    .then(() => console.log('First URL with image: ' + currentURL));\n\n  for (currentURL of [\n    'https://example.com',\n    'https://google.com',\n    'https://bbc.com',\n  ]) {\n    await page.goto(currentURL);\n  }\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Finding and Interacting with a Specific Frame in TypeScript\nDESCRIPTION: An example showing how to find a specific iframe by its name attribute and then select elements within it using the frame's $eval method. This demonstrates how to target elements in nested frames.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst frames = page.frames();\nlet frame = null;\nfor (const currentFrame of frames) {\n  const frameElement = await currentFrame.frameElement();\n  const name = await frameElement.evaluate(el => el.getAttribute('name'));\n  if (name === 'myframe') {\n    frame = currentFrame;\n    break;\n  }\n}\nif (frame) {\n  const text = await frame.$eval('.selector', element => element.textContent);\n  console.log(text);\n} else {\n  console.error('Frame with name \"myframe\" not found.');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the focus() method in the Frame class (TypeScript)\nDESCRIPTION: TypeScript signature for the focus() method in Puppeteer's Frame class. This method focuses the first element matching a selector and returns a Promise that resolves when complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.focus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  focus(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser Context from Page in Puppeteer (TypeScript)\nDESCRIPTION: This code snippet defines the browserContext() method on the Page class in Puppeteer. It returns the BrowserContext object that the page belongs to.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.browsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract browserContext(): BrowserContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Elements in Page.$$eval with TypeScript\nDESCRIPTION: Example showing how to provide explicit typing for the elements parameter when using Page.$$eval with TypeScript. This demonstrates how to handle type inference when working with input elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__eval.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.$$eval('input', elements => {\n  return elements.map(e => e.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing CDP Session Method in Puppeteer TypeScript\nDESCRIPTION: Abstract method definition for creating a Chrome DevTools Protocol session attached to a page. Returns a Promise that resolves to a CDPSession object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.createcdpsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract createCDPSession(): Promise<CDPSession>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.waitForSelector Method Signature in TypeScript\nDESCRIPTION: TypeScript class definition for the Page.waitForSelector method. This method waits for a selector to appear in the page and returns a Promise that resolves to an ElementHandle or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforselector.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForSelector<Selector extends string>(\n    selector: Selector,\n    options?: WaitForSelectorOptions,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Frame Elements with Puppeteer in TypeScript\nDESCRIPTION: TypeScript class definition showing the Frame.$$ method signature. The method accepts a selector string and optional query options, returning a Promise that resolves to an array of ElementHandle objects matching the selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.__.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  $$<Selector extends string>(\n    selector: Selector,\n    options?: QueryOptions,\n  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page.queryObjects() to Find Map Instances in Puppeteer\nDESCRIPTION: This example demonstrates how to use the Page.queryObjects() method to find all Map instances in the page's JavaScript heap. It creates a Map object, gets a handle to the Map prototype, queries for all Map instances, and counts them.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.queryobjects.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Create a Map object\nawait page.evaluate(() => (window.map = new Map()));\n// Get a handle to the Map object prototype\nconst mapPrototype = await page.evaluateHandle(() => Map.prototype);\n// Query all map instances into an array\nconst mapInstances = await page.queryObjects(mapPrototype);\n// Count amount of map objects in heap\nconst count = await page.evaluate(maps => maps.length, mapInstances);\nawait mapInstances.dispose();\nawait mapPrototype.dispose();\n```\n\n----------------------------------------\n\nTITLE: Defining Page.select() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.select() method in the Page class. It takes a selector string and variable number of string values, returning a Promise of selected string values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.select.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  select(selector: string, ...values: string[]): Promise<string[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining waitForRequest Signature in Puppeteer API - TypeScript\nDESCRIPTION: Declares the TypeScript method signature for the Page.waitForRequest() Puppeteer API function. This definition outlines how consumers can wait for a network request matching a URL or predicate function, with optional timeout configuration, and receive an HTTPRequest promise. Requires Puppeteer type definitions and assumes knowledge of AwaitablePredicate and WaitTimeoutOptions types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForRequest(\n    urlOrPredicate: string | AwaitablePredicate<HTTPRequest>,\n    options?: WaitTimeoutOptions,\n  ): Promise<HTTPRequest>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.dragAndDrop Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the dragAndDrop method for the Mouse class in Puppeteer. It takes start and target points, along with optional delay settings, to perform a sequence of drag, dragenter, dragover, and drop actions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.draganddrop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract dragAndDrop(\n    start: Point,\n    target: Point,\n    options?: {\n      delay?: number;\n    },\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSHandle.getProperties to Extract Element Handles\nDESCRIPTION: Example demonstrating how to use getProperties() to retrieve child elements from document.body. It evaluates a handle to document.body.children, gets all its properties, and filters for element handles.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.getproperties.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst listHandle = await page.evaluateHandle(() => document.body.children);\nconst properties = await listHandle.getProperties();\nconst children = [];\nfor (const property of properties.values()) {\n  const element = property.asElement();\n  if (element) {\n    children.push(element);\n  }\n}\nchildren; // holds elementHandles to all children of document.body\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame.evaluateHandle Method in TypeScript\nDESCRIPTION: TypeScript signature for the Frame.evaluateHandle method that evaluates JavaScript within a frame context and returns a JSHandle. This method accepts a function or string to be evaluated and additional arguments to pass to the function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.evaluatehandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer to Handle Docker Shared Memory Limitations\nDESCRIPTION: Launch configuration for Puppeteer to work around Docker's shared memory limitations using the --disable-dev-shm-usage flag.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  args: ['--disable-dev-shm-usage'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining setExtraHTTPHeaders Method in Page Class (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript definition of the setExtraHTTPHeaders method in the Page class. It sets extra HTTP headers to be sent with every request the page initiates. The method takes a Record of string key-value pairs representing the headers and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setextrahttpheaders.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setExtraHTTPHeaders(headers: Record<string, string>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the PageEvent Enum in Puppeteer (TypeScript)\nDESCRIPTION: This TypeScript code snippet declares the `PageEvent` enum. This enum defines constant string values representing the various events that can be emitted by a Puppeteer `Page` instance, such as page closure ('close'), console messages ('console'), DOM loading ('domcontentloaded'), requests ('request'), errors ('error'), and many others listed in the accompanying table. These constants are typically used when attaching event listeners to a `Page` object using methods like `page.on(PageEvent.Load, handler)`.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.pageevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare const enum PageEvent\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.screenshot() Method Returning Uint8Array in TypeScript\nDESCRIPTION: Defines the signature for the ElementHandle.screenshot() method that returns a Uint8Array. This version accepts an optional options parameter without requiring the encoding property to be set.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.screenshot.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  screenshot(options?: Readonly<ScreenshotOptions>): Promise<Uint8Array>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ElementHandle.boxModel() Method in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature of the boxModel() method in the ElementHandle class. The method returns a Promise that resolves to either a BoxModel object or null when the element is not part of the layout (e.g., has display: none).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.boxmodel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  boxModel(): Promise<BoxModel | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocatorClickOptions Type in TypeScript\nDESCRIPTION: Type definition that extends ClickOptions and ActionOptions interfaces to provide configuration options for click operations in Puppeteer's Locator API.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locatorclickoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LocatorClickOptions = ClickOptions & ActionOptions;\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation in Puppeteer Example\nDESCRIPTION: A code example demonstrating how to set a page's geolocation using the setGeolocation method. The example sets the location to Saint Petersburg, Russia by providing latitude and longitude coordinates.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setgeolocation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.setGeolocation({latitude: 59.95, longitude: 30.31667});\n```\n\n----------------------------------------\n\nTITLE: Adding HTMLLinkElement to Frame in Puppeteer (TypeScript)\nDESCRIPTION: This method adds an HTMLLinkElement to the frame with the desired URL. It returns a Promise that resolves to an ElementHandle of the loaded link element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.addstyletag.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  addStyleTag(\n    options: FrameAddStyleTagOptions,\n  ): Promise<ElementHandle<HTMLLinkElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DevTools for Browser Debugging\nDESCRIPTION: Launches Puppeteer with DevTools enabled to allow direct debugging in the browser. This setting automatically opens the DevTools panel in the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/debugging.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({devtools: true});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Query Handler in Puppeteer (TypeScript)\nDESCRIPTION: Defines the static registerCustomQueryHandler method on the Puppeteer class, allowing users to register a custom query handler under a specified name. This method is essential for extending Puppeteer's selector capabilities via custom logic. Both parameters are required: the 'name' (string) and 'queryHandler' (of type CustomQueryHandler), and the handler name is constrained to latin letters only. No value is returned.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteer.registercustomqueryhandler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Puppeteer {\n  static registerCustomQueryHandler(\n    name: string,\n    queryHandler: CustomQueryHandler,\n  ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Response Body as Text in Puppeteer TypeScript\nDESCRIPTION: Method signature for the text() method of the HTTPResponse class. This method retrieves the response body and returns it as a UTF-8 text representation. It returns a Promise that resolves to a string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.text.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  text(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserContext.waitForTarget Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the waitForTarget method in the BrowserContext class. It accepts a predicate function that evaluates targets and optional configuration options, returning a Promise that resolves to the matching Target.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.waitfortarget.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  waitForTarget(\n    predicate: (x: Target) => boolean | Promise<boolean>,\n    options?: WaitForTargetOptions,\n  ): Promise<Target>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.focus() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.focus() method. It takes a selector string as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.focus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  focus(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.select() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.select() method. It takes variable number of string arguments and returns a Promise resolving to an array of strings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.select.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  select(...values: string[]): Promise<string[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Locator.setWaitForEnabled Method in TypeScript\nDESCRIPTION: TypeScript implementation of the setWaitForEnabled method in the Locator class. This method creates a new locator instance by cloning the current one and configures whether to wait for input elements to become enabled before performing actions like click and fill.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.setwaitforenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setWaitForEnabled<NodeType extends Node>(\n    this: Locator<NodeType>,\n    value: boolean,\n  ): Locator<NodeType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to an Existing Browser Instance with Puppeteer in TypeScript\nDESCRIPTION: This method attaches Puppeteer to an existing browser instance. It accepts ConnectOptions as a parameter and returns a Promise that resolves to a Browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.connect.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Puppeteer {\n  connect(options: ConnectOptions): Promise<Browser>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.isIntersectingViewport Method in TypeScript\nDESCRIPTION: Method signature for checking if an element is intersecting the viewport. It accepts an optional threshold parameter that determines the degree of intersection required (from 0 to 1). For SVG elements, it checks if the parent SVG owner element is in the viewport, addressing a Chrome bug (crbug.com/963246).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.isintersectingviewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  isIntersectingViewport(\n    this: ElementHandle<Element>,\n    options?: {\n      threshold?: number;\n    },\n  ): Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page.$$eval() with Generic Type for Return Value Inference\nDESCRIPTION: This example demonstrates how to use a generic type to help the TypeScript compiler infer the return type of Page.$$eval() when it's unable to do so automatically.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.__eval.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst allInputValues = await page.$$eval('input', elements =>\n  elements.map(e => e.textContent),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard.up Method in TypeScript\nDESCRIPTION: Abstract method definition for handling keyboard key release events in Puppeteer. Takes a KeyInput parameter representing the key to release and returns a Promise that resolves when the key up event is dispatched.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.up.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract up(key: KeyInput): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.hover() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the hover() method for the Frame class in Puppeteer. It takes a selector string as a parameter and returns a Promise that resolves to void. The method hovers the pointer over the center of the first element matching the provided selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.hover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  hover(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Page.setContent Method in TypeScript\nDESCRIPTION: TypeScript method signature for Page.setContent that sets HTML content of a page. Takes HTML string as required parameter and optional WaitForOptions. Returns a Promise that resolves when content is set.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setcontent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  setContent(html: string, options?: WaitForOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Taking a Screenshot with Null Viewport in JavaScript\nDESCRIPTION: This code snippet fixes an issue where taking a screenshot with a null viewport was not possible. It allows screenshots to be taken without specifying a viewport.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntaking a screenshot with null viewport should be possible\n```\n\n----------------------------------------\n\nTITLE: Redirect Chain Example - No Redirects\nDESCRIPTION: Example showing how to check the redirect chain for a request with no redirects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await page.goto('https://google.com');\nconst chain = response.request().redirectChain();\nconsole.log(chain.length); // 0\n```\n\n----------------------------------------\n\nTITLE: Defining Page.$$eval Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Page.$$eval method that accepts a selector, a function to run in the page context, and optional arguments. The method is generic, allowing for type-safe operations on elements matching the selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  $$eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<\n      Array<NodeFor<Selector>>,\n      Params\n    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,\n  >(\n    selector: Selector,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.evaluate() Method Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the Frame.evaluate() method. It uses generic types to allow flexible parameter and return types, and accepts a function or string to be evaluated in the frame's context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.evaluate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Frame.$$eval Method Signature in TypeScript\nDESCRIPTION: TypeScript class definition showing the Frame.$$eval method signature. The method is generic and accepts a selector, page function, and optional arguments to evaluate elements matching the selector within a frame.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.__eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  $$eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<\n      Array<NodeFor<Selector>>,\n      Params\n    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,\n  >(\n    selector: Selector,\n    pageFunction: string | Func,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Viewport Size Change with waitForFunction in Puppeteer\nDESCRIPTION: Example demonstrating how to use waitForFunction to observe viewport size changes. It creates a watchdog that resolves when the window's inner width becomes less than 100 pixels, then changes the viewport to trigger this condition.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforfunction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');\n  page.setViewport({width: 50, height: 50});\n  await watchDog;\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Focusing Elements with Puppeteer Page Class in TypeScript\nDESCRIPTION: This snippet defines the signature for the Page.focus() method in Puppeteer. It enables developers to await focusing a DOM element matching the given selector, which can take various forms (CSS, Puppeteer-specific prefixes, text, ARIA, XPath, and shadow DOM selectors). Dependencies include the Puppeteer library and a valid browser page context. The method expects a single string selector as input, and returns a promise that resolves upon successful focusing or rejects if no matching element is found.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.focus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  focus(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame Class Signature in TypeScript\nDESCRIPTION: The TypeScript declaration for the Frame class, which extends EventEmitter with FrameEvents type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Frame extends EventEmitter<FrameEvents>\n```\n\n----------------------------------------\n\nTITLE: Defining the Puppeteer.connect() Method Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet shows the signature for the `Puppeteer.connect()` method. It belongs to the `Puppeteer` class, takes a `ConnectOptions` object as input, and returns a `Promise` that resolves to a `Browser` object, enabling interaction with an existing browser instance. Dependencies include the `Puppeteer` class, `ConnectOptions` type, and `Browser` type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteer.connect.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Puppeteer {\n  connect(options: ConnectOptions): Promise<Browser>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: SerializedAXNode Interface Declaration in TypeScript\nDESCRIPTION: TypeScript interface definition for SerializedAXNode that represents accessibility properties of a DOM node. This interface contains properties for handling various accessibility attributes like role, name, description, and state information.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.serializedaxnode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SerializedAXNode\n```\n\n----------------------------------------\n\nTITLE: Example of using Page.waitForFrame with a predicate function\nDESCRIPTION: Example showing how to use the waitForFrame method with a predicate function that checks for a frame with a specific name attribute. The example demonstrates how to access the frame element and evaluate its attributes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforframe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst frame = await page.waitForFrame(async frame => {\n  const frameElement = await frame.frameElement();\n  if (!frameElement) {\n    return false;\n  }\n  const name = await frameElement.evaluate(el => el.getAttribute('name'));\n  return name === 'test';\n});\n```\n\n----------------------------------------\n\nTITLE: WebWorker.evaluate Method Signature in TypeScript\nDESCRIPTION: Typescript definition of the evaluate() method in the WebWorker class. This method allows execution of functions within a web worker context and returns the result as a Promise. It supports generic type parameters for function parameters and return types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.webworker.evaluate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebWorker {\n  evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(func: Func | string, ...args: Params): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser Enum in TypeScript with Puppeteer\nDESCRIPTION: TypeScript enum declaration for the Browser type in Puppeteer. This enum defines the supported browser types that can be used with Puppeteer for browser automation, including Chrome, Chrome Driver, Chrome Headless Shell, Chromium, and Firefox.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum Browser\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.clickablePoint Method in TypeScript\nDESCRIPTION: TypeScript signature for the clickablePoint method that returns the middle point within an element unless a specific offset is provided. The method returns a Promise resolving to a Point object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.clickablepoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  clickablePoint(offset?: Offset): Promise<Point>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPResponse Content Retrieval in TypeScript\nDESCRIPTION: Abstract method definition for retrieving HTTP response body content as a Uint8Array buffer. The method is asynchronous and returns a Promise. Note that the returned buffer may be subject to browser re-encoding based on HTTP headers or other heuristics.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.content.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract content(): Promise<Uint8Array>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadPolicy Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the DownloadPolicy type as a union of string literals. It specifies four possible values for download policies: 'deny', 'allow', 'allowAndName', and 'default'. This type is likely used to configure how Puppeteer handles file downloads during automation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.downloadpolicy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DownloadPolicy = 'deny' | 'allow' | 'allowAndName' | 'default';\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateNetworkConditions Method Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the Page.emulateNetworkConditions method. It takes a NetworkConditions object or null as a parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatenetworkconditions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateNetworkConditions(\n    networkConditions: NetworkConditions | null,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContext.newPage Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the newPage method within the BrowserContext class. The method creates a new Page instance within the current browser context and returns a Promise resolving to that Page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.newpage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract newPage(): Promise<Page>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing focus() Method in ElementHandle Class for Puppeteer\nDESCRIPTION: This code snippet shows the signature of the focus() method in the ElementHandle class. The method returns a Promise that resolves when the element receives focus, mimicking the browser's native focus() functionality.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.focus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  focus(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FrameWaitForFunctionOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for configuring wait behavior when executing functions in Puppeteer frames. Includes optional properties for polling strategy, abort signal, and timeout duration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.framewaitforfunctionoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FrameWaitForFunctionOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.boundingBox Method in TypeScript\nDESCRIPTION: Method signature for boundingBox() which returns a Promise resolving to either a BoundingBox object containing element coordinates or null if the element is not part of the layout (e.g. has display: none).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.boundingbox.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  boundingBox(): Promise<BoundingBox | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit Return Type for Page.$eval() in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to specify the expected return type of `page.$eval()` using its generic type parameter (`page.$eval<string>(...)`). While the compiler can often infer the return type, this approach provides explicit control and clarity, ensuring the `searchValue` constant is correctly typed as `string`.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page._eval.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The compiler can infer the return type in this case, but if it can't\n// or if you want to be more explicit, provide it as the generic type.\nconst searchValue = await page.$eval<string>(\n  '#search',\n  (el: HTMLInputElement) => el.value,\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browser using Puppeteer in TypeScript\nDESCRIPTION: This snippet demonstrates how to import Puppeteer's browser-specific entrypoint and connect to a browser instance using a WebSocket URL. It also shows how to count open pages and disconnect from the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/running-puppeteer-in-the-browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';\n\nconst browser = await puppeteer.connect({\n  browserWSEndpoint: wsUrl,\n});\n\nalert('Browser has ' + (await browser.pages()).length + ' pages');\n\nbrowser.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Finding a target for a page opened with window.open in Puppeteer\nDESCRIPTION: Example demonstrating how to use Browser.waitForTarget() to locate a target for a page opened via window.open. The code opens a new window and then waits for a target matching the specific URL to appear.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.waitfortarget.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => window.open('https://www.example.com/'));\nconst newWindowTarget = await browser.waitForTarget(\n  target => target.url() === 'https://www.example.com/',\n);\n```\n\n----------------------------------------\n\nTITLE: Signature for Frame.waitForFunction Method in TypeScript\nDESCRIPTION: TypeScript signature definition for the Frame.waitForFunction method, which allows waiting for a function to evaluate to a truthy value in a frame context. It accepts a function or string to evaluate, options to configure polling and timeout, and arguments to pass to the function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.waitforfunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  waitForFunction<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    options?: FrameWaitForFunctionOptions,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.$$eval() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.$$eval() method, including its generic types and parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.__eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  $$eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<\n      Array<NodeFor<Selector>>,\n      Params\n    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,\n  >(\n    selector: Selector,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.move Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Mouse.move method, which moves the mouse cursor to specified x and y coordinates. It accepts optional configuration options and returns a Promise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.move.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract move(\n    x: number,\n    y: number,\n    options?: Readonly<MouseMoveOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing a Specific Puppeteer Test using Mocha in TypeScript\nDESCRIPTION: Illustrates how to use Mocha's `it.only` function to exclusively run a single test case within a suite. This example shows an asynchronous test function that uses `getTestState` to access the test server and Puppeteer page, navigates to an empty page, and asserts that the response is successful using the `expect` library.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  ...\n  it.only('should work', async function() {\n    const {server, page} = await getTestState();\n    const response = await page.goto(server.EMPTY_PAGE);\n    expect(response.ok).toBe(true);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining executablePath Variable Type Signatures in TypeScript for Puppeteer\nDESCRIPTION: Defines the TypeScript signature for the executablePath variable which returns the path to Chrome's executable. It supports three different call signatures: one accepting a Chrome release channel, one accepting launch options, and one with no parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.executablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutablePath: {\n    (channel: PuppeteerCore.ChromeReleaseChannel): string;\n    (options: PuppeteerCore.LaunchOptions): string;\n    (): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Mouse.dragAndDrop Method in TypeScript\nDESCRIPTION: This code snippet defines the dragAndDrop method in the Mouse class. It performs a drag, dragenter, dragover, and drop sequence. The method takes start and target points, and an optional options object with a delay parameter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.draganddrop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract dragAndDrop(\n    start: Point,\n    target: Point,\n    options?: {\n      delay?: number;\n    },\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using DeviceRequestPrompt with Bluetooth Device Selection\nDESCRIPTION: Example showing how to wait for a device prompt, handle device selection, and filter devices by name using the DeviceRequestPrompt class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [devicePrompt] = Promise.all([\n  page.waitForDevicePrompt(),\n  page.click('#connect-bluetooth'),\n]);\nawait devicePrompt.select(\n  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuration Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for Puppeteer's Configuration object. This interface encapsulates all configuration options used to customize Puppeteer's behavior during installation and runtime.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Configuration\n```\n\n----------------------------------------\n\nTITLE: Explicitly Typing the Element Argument in Page.$eval() with TypeScript\nDESCRIPTION: This TypeScript example illustrates the necessity of providing an explicit type for the element argument passed to the `pageFunction` in `page.$eval()`. By specifying `el: HTMLInputElement`, it allows accessing the `value` property, which is not available on the default `Element` type, thus preventing potential TypeScript compilation errors.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page._eval.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// if you don't provide HTMLInputElement here, TS will error\n// as `value` is not on `Element`\nconst searchValue = await page.$eval(\n  '#search',\n  (el: HTMLInputElement) => el.value,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Locator.wait() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Locator.wait() method. It takes an optional parameter of type Readonly<ActionOptions> and returns a Promise of type T.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.wait.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  wait(options?: Readonly<ActionOptions>): Promise<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.type() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Frame.type() method. It takes a selector, text, and optional typing options as parameters and returns a Promise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  type(\n    selector: string,\n    text: string,\n    options?: Readonly<KeyboardTypeOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Puppeteer Tests via npm\nDESCRIPTION: Builds the `@puppeteer-test/test` workspace and then runs all applicable Puppeteer unit tests. This command ensures that any local code changes are compiled before the test suite is executed. It's noted as important when testing local modifications.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build --workspace=@puppeteer-test/test && npm test\n```\n\n----------------------------------------\n\nTITLE: Pulling Puppeteer Docker Images\nDESCRIPTION: Commands to pull Puppeteer Docker images from the GitHub Container Registry. Shows how to pull the latest version and a specific version.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/puppeteer/puppeteer:latest # pulls the latest\ndocker pull ghcr.io/puppeteer/puppeteer:16.1.0 # pulls the image that contains Puppeteer v16.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining the WaitForSelectorOptions Interface Signature (TypeScript)\nDESCRIPTION: This TypeScript code snippet declares the `WaitForSelectorOptions` interface used within the Puppeteer library. This interface defines the structure for the options object passed to methods like `page.waitForSelector()`, allowing customization of waiting behavior, including visibility checks (`visible`, `hidden`), timeouts (`timeout`), and cancellation (`signal`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.waitforselectoroptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitForSelectorOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Page.frames() Method in TypeScript\nDESCRIPTION: This code snippet defines the frames() method within the Page class. The method returns an array of Frame objects, representing all frames attached to the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.frames.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract frames(): Frame[];\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.$ Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the ElementHandle.$() method, which queries the current element for an element matching the given selector. It returns a Promise resolving to either an ElementHandle for the matching element or null if no match is found.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle._.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  $<Selector extends string>(\n    selector: Selector,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Properties with Puppeteer\nDESCRIPTION: TypeScript code showing how to retrieve properties of elements using Puppeteer in E2E tests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Testing framework specific imports\n\nimport {setupBrowserHooks, getBrowserState} from './utils';\n\ndescribe('<Test Name>', function () {\n  setupBrowserHooks();\n  it('is running', async function () {\n    const {page} = getBrowserState();\n    // Query elements\n    const elementText = await page\n      .locator('.my-component')\n      .map(button => button.innerText)\n      // Wait for element to show up\n      .wait();\n\n    // Assert via assertion library\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Method Signature for Page.waitForDevicePrompt in TypeScript\nDESCRIPTION: The TypeScript signature for the waitForDevicePrompt method in the Page class. This method accepts optional timeout options and returns a Promise that resolves to a DeviceRequestPrompt object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfordeviceprompt.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract waitForDevicePrompt(\n    options?: WaitTimeoutOptions,\n  ): Promise<DeviceRequestPrompt>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WaitForSelectorOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the WaitForSelectorOptions interface used in Puppeteer for configuring selector waiting behavior. It includes optional properties for controlling visibility, timeout, and cancellation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waitforselectoroptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitForSelectorOptions\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.$$ Method Signature in TypeScript\nDESCRIPTION: The signature of the ElementHandle.$$ method in Puppeteer. This method allows querying the current element for all elements matching a given CSS or Puppeteer-specific selector, returning an array of element handles.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.__.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  $$<Selector extends string>(\n    selector: Selector,\n    options?: QueryOptions,\n  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserTag Enum in TypeScript for Puppeteer\nDESCRIPTION: A TypeScript enum declaration for BrowserTag that defines various browser release channels such as beta, canary, dev, and stable. This enum is used in Puppeteer to specify browser versions when working with browser automation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.browsertag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum BrowserTag\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.scrollIntoView Method in TypeScript\nDESCRIPTION: This code snippet defines the scrollIntoView method for the ElementHandle class. The method scrolls the element into view using either the automation protocol client or by calling element.scrollIntoView. It takes no parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.scrollintoview.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  scrollIntoView(this: ElementHandle<Element>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard.down() Method Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the Keyboard.down() method. It takes a key input and optional key down options, and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.down.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract down(\n    key: KeyInput,\n    options?: Readonly<KeyDownOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame.hover Method in Puppeteer\nDESCRIPTION: TypeScript class method signature for hovering over an element in a frame. The method takes a CSS selector string as input and returns a Promise that resolves when the hover action is complete. It will throw an exception if no matching element is found.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.hover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  hover(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.hover() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.hover() method. It takes a selector string as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.hover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  hover(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContext.pages Method in TypeScript\nDESCRIPTION: Abstract method definition for retrieving all open pages within a browser context. Returns a Promise resolving to an array of Page objects. Non-visible pages like background_page are not included in the results.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.pages.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract pages(): Promise<Page[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.toElement Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the toElement method in ElementHandle class, showing how it can convert handles to specific HTML or SVG element types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.toelement.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  toElement<K extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap>(\n    tagName: K,\n  ): Promise<HandleFor<ElementFor<K>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.removeExposedFunction Method in TypeScript\nDESCRIPTION: This code snippet defines the removeExposedFunction method in the Page class. The method removes a previously added function from the page's window object that was exposed using Page.exposeFunction().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.removeexposedfunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract removeExposedFunction(name: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining setVisibility Method for Locator Class in TypeScript\nDESCRIPTION: This code snippet defines the setVisibility method for the Locator class. It creates a new locator instance by cloning the current locator with the visibility property changed to the specified value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.setvisibility.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setVisibility<NodeType extends Node>(\n    this: Locator<NodeType>,\n    visibility: VisibilityOption,\n  ): Locator<NodeType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenshotClip Interface in TypeScript\nDESCRIPTION: This TypeScript snippet defines the ScreenshotClip interface as an extension of the BoundingBox interface, specifying the shape for input objects that describe rectangular screenshot clips in Puppeteer. It introduces an optional 'scale' property (defaulting to 1) that allows users to scale the captured area. Requires the BoundingBox interface, which must be imported from the Puppeteer module; the main parameters inherit from BoundingBox, with the key addition of 'scale'. Output objects implementing ScreenshotClip are meant for use in Puppeteer methods that accept area cropping details.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.screenshotclip.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScreenshotClip extends BoundingBox\n\n```\n\n----------------------------------------\n\nTITLE: Basic Puppeteer Test Structure\nDESCRIPTION: Example showing basic structure of a Puppeteer test including browser setup and element interaction\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Testing framework specific imports\n\nimport {setupBrowserHooks, getBrowserState} from './utils';\n\ndescribe('<Test Name>', function () {\n  setupBrowserHooks();\n  it('is running', async function () {\n    const {page} = getBrowserState();\n    // Query elements\n    await page\n      .locator('my-component')\n      // Click on the element once found\n      .click();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Page.evaluateHandle Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the Page.evaluateHandle method. It defines the method's generic types, parameters, and return type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page.$$ Method in Puppeteer TypeScript\nDESCRIPTION: Method signature for Page.$$ which finds multiple elements on a page using selectors. Returns a Promise resolving to an array of ElementHandle objects. If no elements match the selector, returns an empty array. This is a shortcut for Page.mainFrame().$$(selector).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  $$<Selector extends string>(\n    selector: Selector,\n    options?: QueryOptions,\n  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocatorClickOptions Type in TypeScript for Puppeteer\nDESCRIPTION: This code defines the LocatorClickOptions type which combines ClickOptions and ActionOptions through a union type. This type is used to configure click operations on elements selected by Locators in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locatorclickoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LocatorClickOptions = ClickOptions & ActionOptions;\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.securityDetails() Method in TypeScript\nDESCRIPTION: This code snippet defines the securityDetails() method for the HTTPResponse class. It returns a SecurityDetails object if the response was received over a secure connection, or null otherwise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.securitydetails.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract securityDetails(): SecurityDetails | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Target.page Method in TypeScript\nDESCRIPTION: Defines the page() method on the Target class that returns a Promise resolving to either a Page object or null. This method is used to access the Page instance associated with a target, but will return null for targets that are not of type page, webview, or background_page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.page.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  page(): Promise<Page | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Browser Process in Puppeteer with TypeScript\nDESCRIPTION: Function signature for launching a browser process in Puppeteer. Takes LaunchOptions as input parameter and returns a Process object. Used to initiate a new browser instance with specified configuration options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.launch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function launch(opts: LaunchOptions): Process;\n```\n\n----------------------------------------\n\nTITLE: Text Selection Implementation in Puppeteer\nDESCRIPTION: Example demonstrating how to select content between nodes using document.getSelection() and range functionality.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(\n  (from, to) => {\n    const selection = from.getRootNode().getSelection();\n    const range = document.createRange();\n    range.setStartBefore(from);\n    range.setEndAfter(to);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  },\n  fromJSHandle,\n  toJSHandle\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature of KnownDevices in Puppeteer\nDESCRIPTION: Defines the TypeScript signature for the KnownDevices variable, which is a readonly record of device names mapped to Device configuration objects. It includes an extensive list of mobile devices and their landscape orientations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.knowndevices.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nKnownDevices: Readonly<\n  Record<\n    | 'Blackberry PlayBook'\n    | 'Blackberry PlayBook landscape'\n    | 'BlackBerry Z30'\n    | 'BlackBerry Z30 landscape'\n    | 'Galaxy Note 3'\n    | 'Galaxy Note 3 landscape'\n    | 'Galaxy Note II'\n    | 'Galaxy Note II landscape'\n    | 'Galaxy S III'\n    | 'Galaxy S III landscape'\n    | 'Galaxy S5'\n    | 'Galaxy S5 landscape'\n    | 'Galaxy S8'\n    | 'Galaxy S8 landscape'\n    | 'Galaxy S9+'\n    | 'Galaxy S9+ landscape'\n    | 'Galaxy Tab S4'\n    | 'Galaxy Tab S4 landscape'\n    | 'iPad'\n    | 'iPad landscape'\n    | 'iPad (gen 6)'\n    | 'iPad (gen 6) landscape'\n    | 'iPad (gen 7)'\n    | 'iPad (gen 7) landscape'\n    | 'iPad Mini'\n    | 'iPad Mini landscape'\n    | 'iPad Pro'\n    | 'iPad Pro landscape'\n    | 'iPad Pro 11'\n    | 'iPad Pro 11 landscape'\n    | 'iPhone 4'\n    | 'iPhone 4 landscape'\n    | 'iPhone 5'\n    | 'iPhone 5 landscape'\n    | 'iPhone 6'\n    | 'iPhone 6 landscape'\n    | 'iPhone 6 Plus'\n    | 'iPhone 6 Plus landscape'\n    | 'iPhone 7'\n    | 'iPhone 7 landscape'\n    | 'iPhone 7 Plus'\n    | 'iPhone 7 Plus landscape'\n    | 'iPhone 8'\n    | 'iPhone 8 landscape'\n    | 'iPhone 8 Plus'\n    | 'iPhone 8 Plus landscape'\n    | 'iPhone SE'\n    | 'iPhone SE landscape'\n    | 'iPhone X'\n    | 'iPhone X landscape'\n    | 'iPhone XR'\n    | 'iPhone XR landscape'\n    | 'iPhone 11'\n    | 'iPhone 11 landscape'\n    | 'iPhone 11 Pro'\n    | 'iPhone 11 Pro landscape'\n    | 'iPhone 11 Pro Max'\n    | 'iPhone 11 Pro Max landscape'\n    | 'iPhone 12'\n    | 'iPhone 12 landscape'\n    | 'iPhone 12 Pro'\n    | 'iPhone 12 Pro landscape'\n    | 'iPhone 12 Pro Max'\n    | 'iPhone 12 Pro Max landscape'\n    | 'iPhone 12 Mini'\n    | 'iPhone 12 Mini landscape'\n    | 'iPhone 13'\n    | 'iPhone 13 landscape'\n    | 'iPhone 13 Pro'\n    | 'iPhone 13 Pro landscape'\n    | 'iPhone 13 Pro Max'\n    | 'iPhone 13 Pro Max landscape'\n    | 'iPhone 13 Mini'\n    | 'iPhone 13 Mini landscape'\n    | 'iPhone 14'\n    | 'iPhone 14 landscape'\n    | 'iPhone 14 Plus'\n    | 'iPhone 14 Plus landscape'\n    | 'iPhone 14 Pro'\n    | 'iPhone 14 Pro landscape'\n    | 'iPhone 14 Pro Max'\n    | 'iPhone 14 Pro Max landscape'\n    | 'iPhone 15'\n    | 'iPhone 15 landscape'\n    | 'iPhone 15 Plus'\n    | 'iPhone 15 Plus landscape'\n    | 'iPhone 15 Pro'\n    | 'iPhone 15 Pro landscape'\n    | 'iPhone 15 Pro Max'\n    | 'iPhone 15 Pro Max landscape'\n    | 'JioPhone 2'\n    | 'JioPhone 2 landscape'\n    | 'Kindle Fire HDX'\n    | 'Kindle Fire HDX landscape'\n    | 'LG Optimus L70'\n    | 'LG Optimus L70 landscape'\n    | 'Microsoft Lumia 550'\n    | 'Microsoft Lumia 950'\n    | 'Microsoft Lumia 950 landscape'\n    | 'Nexus 10'\n    | 'Nexus 10 landscape'\n    | 'Nexus 4'\n    | 'Nexus 4 landscape'\n    | 'Nexus 5'\n    | 'Nexus 5 landscape'\n    | 'Nexus 5X'\n    | 'Nexus 5X landscape'\n    | 'Nexus 6'\n    | 'Nexus 6 landscape'\n    | 'Nexus 6P'\n    | 'Nexus 6P landscape'\n    | 'Nexus 7'\n    | 'Nexus 7 landscape'\n    | 'Nokia Lumia 520'\n    | 'Nokia Lumia 520 landscape'\n    | 'Nokia N9'\n    | 'Nokia N9 landscape'\n    | 'Pixel 2'\n    | 'Pixel 2 landscape'\n    | 'Pixel 2 XL'\n    | 'Pixel 2 XL landscape'\n    | 'Pixel 3'\n    | 'Pixel 3 landscape'\n    | 'Pixel 4'\n    | 'Pixel 4 landscape'\n    | 'Pixel 4a (5G)'\n    | 'Pixel 4a (5G) landscape'\n    | 'Pixel 5'\n    | 'Pixel 5 landscape'\n    | 'Moto G4'\n    | 'Moto G4 landscape',\n    Device\n  >\n>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cooperative Intercept Mode with Priority-Based Continue Decision\nDESCRIPTION: Example showing Cooperative Intercept Mode where all handlers specify a priority. The continue() call wins because it has a higher priority (5) than the abort() call (0).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Final outcome: cooperative continue() @ 5\npage.setRequestInterception(true);\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to abort at priority 10\n  request.abort('failed', 0);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to continue at priority 5\n  request.continue(request.continueRequestOverrides(), 5);\n});\npage.on('request', request => {\n  // { action: InterceptResolutionAction.Continue, priority: 5 }, because continue @ 5 > abort @ 0\n  console.log(request.interceptResolutionState());\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Targets from BrowserContext in Puppeteer\nDESCRIPTION: Method signature for BrowserContext.targets() which returns an array of Target objects. This method is used to get all active targets that exist within the current browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.targets.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract targets(): Target[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Browser.newPage() Method in TypeScript\nDESCRIPTION: TypeScript class method signature for creating a new page in the default browser context. The method returns a Promise that resolves to a Page object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.newpage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract newPage(): Promise<Page>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.click Method in Puppeteer TypeScript API\nDESCRIPTION: TypeScript signature for the Mouse.click() method which allows simulating mouse clicks at specific coordinates. The method takes x and y coordinates along with optional configuration options and returns a Promise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract click(\n    x: number,\n    y: number,\n    options?: Readonly<MouseClickOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookies from Default Browser Context in Puppeteer using TypeScript\nDESCRIPTION: Method signature for Browser.cookies() which returns a Promise resolving to an array of Cookie objects from the default browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  cookies(): Promise<Cookie[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame.childFrames Method in TypeScript with Puppeteer\nDESCRIPTION: The childFrames() method provides access to all child frames of the current frame. It returns an array of Frame objects that can be used to interact with subframes in a web page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.childframes.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract childFrames(): Frame[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Locators with Selectors in Puppeteer (TypeScript)\nDESCRIPTION: This code snippet shows the signature for creating a locator with a selector in Puppeteer's Frame class. It accepts a selector string and returns a Locator object typed with NodeFor<Selector>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.locator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  locator<Selector extends string>(\n    selector: Selector,\n  ): Locator<NodeFor<Selector>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining setUserAgent Method for Page Class in TypeScript\nDESCRIPTION: This code snippet defines the setUserAgent method for the Page class in Puppeteer. It allows setting a specific user agent for the page, with an optional user agent metadata parameter. The method returns a Promise that resolves when the user agent is set.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setuseragent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setUserAgent(\n    userAgent: string,\n    userAgentMetadata?: Protocol.Emulation.UserAgentMetadata,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Redirect Chain for a Non-Redirecting Website in TypeScript\nDESCRIPTION: This example shows how to use the redirectChain() method for a website without any redirects. It demonstrates that the chain length will be zero in such cases.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.redirectchain.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await page.goto('https://google.com');\nconst chain = response.request().redirectChain();\nconsole.log(chain.length); // 0\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setGeolocation Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.setGeolocation method. It takes GeolocationOptions as a parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setgeolocation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setGeolocation(options: GeolocationOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Class in TypeScript\nDESCRIPTION: Abstract class definition for Dialog in Puppeteer. This class is used to handle dialog events dispatched by the Page object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.dialog.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Dialog\n```\n\n----------------------------------------\n\nTITLE: Implementing ElementHandle.tap() Method in Puppeteer\nDESCRIPTION: TypeScript signature for the ElementHandle.tap() method which scrolls an element into view and simulates a touch tap in the center of the element. The method returns a Promise that resolves to void and throws an error if the element is detached from the DOM.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.tap.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  tap(this: ElementHandle<Element>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using ElementHandle in Puppeteer\nDESCRIPTION: Sets file paths as values for input elements. Works with file input elements. Paths can be relative (resolved against CWD) or absolute (required for remote Chrome).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nelementHandle.uploadFile(paths)\n```\n\n----------------------------------------\n\nTITLE: Frame.waitForNavigation Method Signature in TypeScript\nDESCRIPTION: Defines the class method signature for waitForNavigation in the Frame class, which waits for frame navigation and returns a Promise that resolves to an HTTPResponse or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.waitfornavigation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract waitForNavigation(\n    options?: WaitForOptions,\n  ): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer to Download Multiple Browsers\nDESCRIPTION: Configuration file example showing how to set up Puppeteer to download both Chrome and Firefox browsers. Demonstrates the multi-browser support available since v23.0.0.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  // Download Chrome (default `skipDownload: false`).\n  chrome: {\n    skipDownload: false,\n  },\n  // Download Firefox (default `skipDownload: true`).\n  firefox: {\n    skipDownload: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.contentFrame Generic Method in TypeScript\nDESCRIPTION: This is the more general signature of the contentFrame method that can be called on any ElementHandle. It returns a Promise that resolves to either a Frame object or null if no frame is associated with the element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.contentframe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract contentFrame(): Promise<Frame | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HTMLLinkElement to a Frame in Puppeteer (TypeScript)\nDESCRIPTION: Method signature for adding a link element pointing to an external stylesheet to a frame. This overload takes complete FrameAddStyleTagOptions including a URL and returns a Promise that resolves to an ElementHandle for the created HTMLLinkElement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.addstyletag.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  addStyleTag(\n    options: FrameAddStyleTagOptions,\n  ): Promise<ElementHandle<HTMLLinkElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Visibility Check in Puppeteer TypeScript\nDESCRIPTION: TypeScript class method definition for checking if an element is visible in the DOM. Returns a Promise that resolves to a boolean indicating whether the element meets all visibility criteria including computed styles, non-empty bounding client rect, and appropriate visibility property value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.isvisible.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  isVisible(): Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: JSHandle Class Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the JSHandle class, which is an abstract class that can represent any JavaScript object in the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class JSHandle<T = unknown>\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Puppeteer Locator in TypeScript\nDESCRIPTION: Method signature for setTimeout in the Locator class. This method clones the current locator and sets a new timeout value for locator actions. A timeout value of 0 disables the timeout completely. If not specified, uses Page.getDefaultTimeout() as the default value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.settimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setTimeout(timeout: number): Locator<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Page.authenticate Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the authenticate() method in Puppeteer's Page class. This method accepts credentials for HTTP authentication or null to disable authentication.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.authenticate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract authenticate(credentials: Credentials | null): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining removeScriptToEvaluateOnNewDocument Method in TypeScript\nDESCRIPTION: This code snippet defines the removeScriptToEvaluateOnNewDocument method in the Page class. It takes a string identifier as a parameter and returns a Promise that resolves to void. The method is used to remove scripts that were previously injected into the page using Page.evaluateOnNewDocument.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.removescripttoevaluateonnewdocument.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract removeScriptToEvaluateOnNewDocument(\n    identifier: string,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CSSCoverage Class in TypeScript\nDESCRIPTION: TypeScript class declaration for the CSSCoverage class that provides CSS coverage analysis functionality in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.csscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CSSCoverage\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.type Method Signature in TypeScript\nDESCRIPTION: The TypeScript class signature for the ElementHandle.type() method in Puppeteer. This method types text into an element after focusing it, sending appropriate keyboard events for each character.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  type(text: string, options?: Readonly<KeyboardTypeOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CDPSession for Animation Control\nDESCRIPTION: Example demonstrating how to create a CDP session, enable animation tracking, listen for animation events, and modify playback rate using Chrome DevTools Protocol commands.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsession.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = await page.createCDPSession();\nawait client.send('Animation.enable');\nclient.on('Animation.animationCreated', () =>\n  console.log('Animation created!'),\n);\nconst response = await client.send('Animation.getPlaybackRate');\nconsole.log('playback rate is ' + response.playbackRate);\nawait client.send('Animation.setPlaybackRate', {\n  playbackRate: response.playbackRate / 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Page Class Signature in TypeScript\nDESCRIPTION: Declares the abstract Page class that extends EventEmitter with PageEvents. This class is the core of Puppeteer's page manipulation functionality.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Page extends EventEmitter<PageEvents>\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.$eval Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the Frame.$eval method in TypeScript. It specifies the method's generic types, parameters, and return type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame._eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  $eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<\n      NodeFor<Selector>,\n      Params\n    >,\n  >(\n    selector: Selector,\n    pageFunction: string | Func,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping CSS Coverage Tracking in Puppeteer with TypeScript\nDESCRIPTION: Method signature for stopping CSS coverage analysis in Puppeteer. Returns a Promise that resolves to an array of CoverageEntry objects containing CSS coverage data.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.csscoverage.stop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CSSCoverage {\n  stop(): Promise<CoverageEntry[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Mouse.dragEnter Method Signature in TypeScript\nDESCRIPTION: Defines the signature of the dragEnter method in the Mouse class that dispatches a dragenter event. The method takes a target point and drag data as parameters and returns a Promise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.dragenter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract dragEnter(\n    target: Point,\n    data: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Headless Mode in Puppeteer\nDESCRIPTION: Adds support for Chrome's new headless mode in Puppeteer. This allows running Chrome in headless mode with improved functionality compared to the old headless implementation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport chrome headless mode\n```\n\n----------------------------------------\n\nTITLE: TypeScript Generic Usage with Page.evaluateHandle\nDESCRIPTION: Example showing how to use TypeScript generics with page.evaluateHandle to correctly type the return value as an ElementHandle when you know that's what will be returned.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst button = await page.evaluateHandle<ElementHandle>(...);\n```\n\n----------------------------------------\n\nTITLE: Launching Browser Instance with Puppeteer in TypeScript\nDESCRIPTION: Method signature for launching a new browser instance using Puppeteer's BrowserLauncher class. The method accepts optional LaunchOptions and returns a Promise that resolves to a Browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browserlauncher.launch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserLauncher {\n  launch(options?: LaunchOptions): Promise<Browser>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Events in Puppeteer\nDESCRIPTION: Example of using Puppeteer to launch a browser, create a new page, and handle dialog events. The script logs the dialog message and dismisses it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.dialog.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  page.on('dialog', async dialog => {\n    console.log(dialog.message());\n    await dialog.dismiss();\n    await browser.close();\n  });\n  page.evaluate(() => alert('1'));\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining JSCoverageOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for JSCoverageOptions, which provides a set of configurable options for JavaScript coverage in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverageoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface JSCoverageOptions\n```\n\n----------------------------------------\n\nTITLE: Basic Cooperative Intercept Mode Implementation\nDESCRIPTION: Updated request interception handler using cooperative mode with explicit priority levels for abort and continue operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  if (request.isInterceptResolutionHandled()) return;\n  if (\n    interceptedRequest.url().endsWith('.png') ||\n    interceptedRequest.url().endsWith('.jpg')\n  )\n    interceptedRequest.abort('failed', 0);\n  else\n    interceptedRequest.continue(\n      interceptedRequest.continueRequestOverrides(),\n      0,\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.page Method Signature in TypeScript\nDESCRIPTION: TypeScript class definition showing the Frame.page() method signature. This method returns the Page object associated with the frame and is defined as an abstract method in the Frame class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.page.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract page(): Page;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.content() Method in Puppeteer using TypeScript\nDESCRIPTION: This code snippet defines the content() method for the Frame class in Puppeteer. The method returns a Promise that resolves to a string containing the full HTML contents of the frame, including the DOCTYPE.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.content.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  content(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the workers() Method in Puppeteer Page Class - TypeScript\nDESCRIPTION: Defines an abstract workers() method within the Puppeteer Page class, which returns an array of WebWorker instances associated with the current page. Requires the Puppeteer library and knowledge of both the Page and WebWorker types. This method does not include any ServiceWorkers in its return array, only dedicated WebWorkers. The method is abstract and must be implemented in subclasses; it returns a list of WebWorker objects representing running worker threads. No parameters are required, and the output is always an array of WebWorker objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.workers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract workers(): WebWorker[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Reload Method in Puppeteer TypeScript\nDESCRIPTION: Abstract method definition for reloading a page in Puppeteer. The method accepts optional WaitForOptions and returns a Promise that resolves to either an HTTPResponse object or null. The response represents the main resource response, and in cases of multiple redirects, it provides the response of the last redirect.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.reload.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract reload(options?: WaitForOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserContext.clearPermissionOverrides Method Definition in TypeScript\nDESCRIPTION: The TypeScript definition of the clearPermissionOverrides method in the BrowserContext class. This method clears all permission overrides that have been set for a browser context and returns a Promise that resolves when completed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.clearpermissionoverrides.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract clearPermissionOverrides(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connection.send() Method Signature in TypeScript\nDESCRIPTION: TypeScript signature for the Connection.send() method, which enables sending commands to the browser using the DevTools Protocol. The method is generic, accepting a method name, optional parameters, and command options, and returns a promise that resolves with the command's return value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connection.send.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    params?: ProtocolMapping.Commands[T]['paramsType'][0],\n    options?: CommandOptions,\n  ): Promise<ProtocolMapping.Commands[T]['returnType']>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.screencast() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.screencast() method. It takes an optional ScreencastOptions parameter and returns a Promise that resolves to a ScreenRecorder object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.screencast.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  screencast(options?: Readonly<ScreencastOptions>): Promise<ScreenRecorder>;\n}\n```\n\n----------------------------------------\n\nTITLE: Page.waitForNavigation Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Page.waitForNavigation method, which returns a Promise that resolves to an HTTPResponse object or null after navigation completes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfornavigation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForNavigation(options?: WaitForOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Page.waitForFunction Method Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the signature for the `waitForFunction` method within the `Page` class of the Puppeteer library. It specifies the generic types for parameters and the return type, which is a Promise resolving to a Handle for the awaited return type of the evaluated function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForFunction<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    options?: FrameWaitForFunctionOptions,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pierce Selectors in Puppeteer\nDESCRIPTION: Demonstrates how to use pierce selectors in Puppeteer to match elements across all shadow roots in a document, including the equivalent deep combinator approach.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.locator('pierce/div').click();\n// Same query as the pierce/ one using deep combinators.\nawait page.locator('& >>> div').click();\n```\n\n----------------------------------------\n\nTITLE: Defining MouseButton Enum in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the MouseButton enum as a readonly object with string values representing different mouse buttons. It includes Left, Right, Middle, Back, and Forward buttons.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mousebutton.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nMouseButton: Readonly<{\n  Left: 'left';\n  Right: 'right';\n  Middle: 'middle';\n  Back: 'back';\n  Forward: 'forward';\n}>;\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.fromCache() Method in TypeScript\nDESCRIPTION: This code snippet defines the fromCache() method for the HTTPResponse class. The method returns a boolean value indicating whether the response was served from either the browser's disk cache or memory cache.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.fromcache.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract fromCache(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.uploadFile Method Signature in TypeScript\nDESCRIPTION: Defines the method signature for uploadFile() in the ElementHandle class. This method accepts file paths as parameters and sets them as the value of an HTML input element. It requires that the ElementHandle references an HTMLInputElement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.uploadfile.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract uploadFile(\n    this: ElementHandle<HTMLInputElement>,\n    ...paths: string[]\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting HTTP Requests in Puppeteer TypeScript\nDESCRIPTION: Method signature for aborting HTTP requests in Puppeteer. Requires request interception to be enabled via Page.setRequestInterception(). Takes optional errorCode and priority parameters to control the abortion behavior.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.abort.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abort(errorCode?: ErrorCode, priority?: number): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Touchscreen.touchStart Method in TypeScript\nDESCRIPTION: This snippet defines the touchStart method for the Touchscreen class. The method takes x and y coordinates as parameters and returns a Promise resolving to a TouchHandle.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.touchstart.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Touchscreen {\n  abstract touchStart(x: number, y: number): Promise<TouchHandle>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.viewport Method - Puppeteer TypeScript\nDESCRIPTION: Abstract class definition for the Page.viewport() method that returns the current viewport settings. The method returns either the viewport configured through Page.setViewport() or the default viewport specified in ConnectOptions.defaultViewport.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.viewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract viewport(): Viewport | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.addScriptTag Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.addScriptTag method. It takes FrameAddScriptTagOptions as a parameter and returns a Promise resolving to an ElementHandle of an HTMLScriptElement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.addscripttag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  addScriptTag(\n    options: FrameAddScriptTagOptions,\n  ): Promise<ElementHandle<HTMLScriptElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSCoverage.stop Method in TypeScript\nDESCRIPTION: Declaration of the stop() method in the JSCoverage class that ends JavaScript coverage collection. When called, it returns a Promise that resolves to an array of JSCoverageEntry objects containing collected coverage information.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverage.stop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSCoverage {\n  stop(): Promise<JSCoverageEntry[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: GeolocationOptions Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for GeolocationOptions used in Puppeteer to set browser geolocation coordinates. It includes properties for latitude, longitude, and an optional accuracy value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.geolocationoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GeolocationOptions\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Puppeteer ElementHandle\nDESCRIPTION: Sets file paths as values for input elements. Works with both absolute and relative paths (resolved against CWD), but requires absolute paths when connecting to remote Chrome environments. Does not validate file existence.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuploadFile(this, paths)\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Response JSON Parsing in TypeScript with Puppeteer\nDESCRIPTION: Defines the json() method on the HTTPResponse class that returns a Promise resolving to the JSON representation of the response body. The method will throw an error if the response body cannot be parsed using JSON.parse.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.json.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  json(): Promise<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChromeSettings Interface in TypeScript\nDESCRIPTION: Defines the interface for Chrome browser settings in Puppeteer. It includes optional properties for controlling browser downloads, specifying versions, and configuring download URLs.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.chromesettings.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChromeSettings\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContextEvents Interface in TypeScript\nDESCRIPTION: This snippet defines the BrowserContextEvents interface, which extends Record<EventType, unknown>. It includes properties for targetchanged, targetcreated, and targetdestroyed events, all of type Target.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontextevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BrowserContextEvents extends Record<EventType, unknown> {\n  targetchanged: Target;\n  targetcreated: Target;\n  targetdestroyed: Target;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.uploadFile Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the uploadFile method of the ElementHandle class. It sets the value of an input element to given file paths.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.uploadfile.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract uploadFile(\n    this: ElementHandle<HTMLInputElement>,\n    ...paths: string[]\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.evaluateHandle Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the Frame.evaluateHandle method. It takes a pageFunction (which can be a function or string) and additional arguments, and returns a Promise that resolves to a HandleFor object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.evaluatehandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Browser with Puppeteer Core in TypeScript\nDESCRIPTION: Function signature for launching a new browser instance with Puppeteer. Takes optional LaunchOptions parameter and returns a Promise that resolves to a Browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.launch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlaunch: (options?: PuppeteerCore.LaunchOptions) => Promise<PuppeteerCore.Browser>;\n```\n\n----------------------------------------\n\nTITLE: Converting ElementHandle to Specific Element Type in Puppeteer\nDESCRIPTION: Example showing how to convert a general ElementHandle to a specific element type (HTMLAnchorElement) using the toElement method. The original handle should not be disposed as it will be the same underlying handle.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.toelement.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst element: ElementHandle<Element> = await page.$('.class-name-of-anchor');\n// DO NOT DISPOSE `element`, this will be always be the same handle.\nconst anchor: ElementHandle<HTMLAnchorElement> = await element.toElement('a');\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Type in TypeScript for Puppeteer\nDESCRIPTION: Defines the Predicate type which represents a function that tests a value of type 'From' and returns either a type predicate or a boolean (or Promise<boolean>). This type is used throughout Puppeteer for conditional logic and filtering operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.predicate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Predicate<From, To extends From = From> =\n  | ((value: From) => value is To)\n  | ((value: From) => Awaitable<boolean>);\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Requests with Puppeteer\nDESCRIPTION: Example showing how to listen for failed requests using the 'requestfailed' event and log the URL along with the error message using the failure() method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.failure.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('requestfailed', request => {\n  console.log(request.url() + ' ' + request.failure().errorText);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContext.close Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the signature of the close() method on the BrowserContext abstract class. The method returns a Promise that resolves to void and is used to close a browser context and all associated pages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract close(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateTimezone Method in TypeScript\nDESCRIPTION: Abstract method signature for the emulateTimezone method in the Page class, which allows changing the timezone of a page. It accepts an optional timezone ID parameter and returns a Promise that resolves when the timezone has been emulated.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatetimezone.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateTimezone(timezoneId?: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.tap() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the tap() method for the Frame class in Puppeteer. It takes a selector string as a parameter and returns a Promise that resolves to void. The method taps the first element that matches the provided selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.tap.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  tap(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Open Pages in a Browser with Puppeteer\nDESCRIPTION: Method signature for Browser.pages() which returns a Promise resolving to an array of Page objects. This method gets all open pages across all browser contexts in a Puppeteer browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.pages.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  pages(): Promise<Page[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Element onto Another Element in Puppeteer (TypeScript)\nDESCRIPTION: This method allows dropping one element onto another. It takes an ElementHandle as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.drop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  drop(\n    this: ElementHandle<Element>,\n    element: ElementHandle<Element>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie in Browser Context - TypeScript\nDESCRIPTION: Abstract method declaration for setting cookies in a browser context. Takes an array of CookieData objects as parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.setcookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract setCookie(...cookies: CookieData[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog.accept Method in Puppeteer's Dialog Class\nDESCRIPTION: Method signature for accepting browser dialogs in Puppeteer. The method returns a Promise that resolves when the dialog has been accepted. An optional promptText parameter can be provided which will be entered in the dialog prompt, but only has an effect when the dialog type is 'prompt'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.accept.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  accept(promptText?: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Legacy Mode Prevailing with Immediate Continue in Puppeteer\nDESCRIPTION: This example demonstrates how Legacy Mode takes precedence when at least one handler doesn't specify a priority. The request is continued immediately.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Final outcome: immediate continue()\npage.setRequestInterception(true);\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to abort at priority 0.\n  request.abort('failed', 0);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Control reaches this point because the request was cooperatively aborted which postpones resolution.\n\n  // { action: InterceptResolutionAction.Abort, priority: 0 }, because abort @ 0 is the current winning resolution\n  console.log(request.interceptResolutionState());\n\n  // Legacy Mode: intercept continues immediately.\n  request.continue({});\n});\npage.on('request', request => {\n  // { action: InterceptResolutionAction.AlreadyHandled }, because continue in Legacy Mode was called\n  console.log(request.interceptResolutionState());\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Page Viewport Settings with Puppeteer in TypeScript\nDESCRIPTION: Defines the abstract viewport() method on the Page class in TypeScript for Puppeteer. The method returns either an object describing the current viewport or null if no viewport is set. This signature requires Puppeteer dependencies, expects invocation through a Page object, and forms part of browser automation scripts that dynamically inspect viewport state.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.viewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract viewport(): Viewport | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser Enum in TypeScript for Puppeteer\nDESCRIPTION: TypeScript enumeration that defines the supported browser types in Puppeteer. This enum includes values for Chrome, ChromeDriver, Chrome Headless Shell, Chromium, and Firefox browsers, allowing type-safe browser selection in Puppeteer automation scripts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum Browser\n```\n\n----------------------------------------\n\nTITLE: Defining Target.page() Method in Puppeteer with TypeScript\nDESCRIPTION: This TypeScript code snippet defines the signature for the Target.page() method within the Target class in Puppeteer. The method asynchronously returns a Promise resolving to a Page instance or null, depending on the Target's type. The method is used to safely access a Page object only when the Target represents a supported page-like context; otherwise, it returns null, which users should handle appropriately. The snippet presumes access to the Page class and Puppeteer types, with usage scenarios in browser automation and target management.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.page.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  page(): Promise<Page | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser.version() Method in TypeScript\nDESCRIPTION: TypeScript class signature for the Browser.version() method that returns a Promise containing a string representation of the browser's name and version. The method is abstract, indicating it must be implemented by derived classes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.version.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract version(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locator Wait Method in TypeScript\nDESCRIPTION: Implementation signature of the wait() method in the Locator class. This method waits for the locator to retrieve a serialized value from the page and returns a Promise of type T. It accepts an optional parameter of type ActionOptions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.wait.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  wait(options?: Readonly<ActionOptions>): Promise<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard.press() Method in TypeScript\nDESCRIPTION: Abstract TypeScript class definition for the Keyboard.press() method, which is a shortcut for Keyboard.down() and Keyboard.up(). The method accepts a key parameter and optional configuration for handling text input, delay, and keyboard commands.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.press.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract press(\n    key: KeyInput,\n    options?: Readonly<KeyPressOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.targets() Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the Browser.targets() method signature which returns an array of Target objects. This method retrieves all active targets across all browser contexts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.targets.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract targets(): Target[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Puppeteer.registerCustomQueryHandler Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the static method that registers a custom query handler with a name and handler implementation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.registercustomqueryhandler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Puppeteer {\n  static registerCustomQueryHandler(\n    name: string,\n    queryHandler: CustomQueryHandler,\n  ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.response() Method in TypeScript\nDESCRIPTION: This code snippet defines the response() method for the HTTPRequest class in TypeScript. The method returns either an HTTPResponse object or null if the response has not been received yet.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.response.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract response(): HTTPResponse | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookies from BrowserContext in TypeScript\nDESCRIPTION: Abstract method definition for retrieving all cookies from a Puppeteer browser context. Returns a Promise that resolves to an array of Cookie objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract cookies(): Promise<Cookie[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Events in TypeScript with Puppeteer\nDESCRIPTION: TypeScript class method definition for simulating touch events at specified coordinates. The method takes x and y coordinates as numbers and returns a Promise that resolves when the touch events have been dispatched.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.tap.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Touchscreen {\n  tap(x: number, y: number): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining setBypassServiceWorker Method in Page Class (TypeScript)\nDESCRIPTION: This code snippet defines the setBypassServiceWorker method in the Page class. It takes a boolean parameter to determine whether to bypass the service worker and load from the network. The method returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setbypassserviceworker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setBypassServiceWorker(bypass: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.metrics() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.metrics() method. It returns a Promise that resolves to a Metrics object containing various performance metrics of the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract metrics(): Promise<Metrics>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.wheel() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Mouse.wheel() method in the Mouse class. It takes an optional MouseWheelOptions parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.wheel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract wheel(options?: Readonly<MouseWheelOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClickOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for ClickOptions in Puppeteer. This interface extends MouseClickOptions and adds an optional offset property for specifying the clickable point relative to the top-left corner of an element's border box.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.clickoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ClickOptions extends MouseClickOptions\n```\n\n----------------------------------------\n\nTITLE: Using Frame.select for Single and Multiple Selections\nDESCRIPTION: Examples demonstrating how to use Frame.select() for both single and multiple selections in a <select> element. Shows syntax for selecting one value and multiple values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.select.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nframe.select('select#colors', 'blue'); // single selection\nframe.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n```\n\n----------------------------------------\n\nTITLE: Defining Page.close() Method in TypeScript\nDESCRIPTION: This code snippet defines the close() method for the Page class in Puppeteer. The method takes an optional options parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract close(options?: {runBeforeUnload?: boolean}): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Accessibility.snapshot Method Signature in TypeScript\nDESCRIPTION: TypeScript signature for the Accessibility.snapshot method which captures the current state of the page's accessibility tree, returning a Promise that resolves to a SerializedAXNode or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.accessibility.snapshot.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Accessibility {\n  snapshot(options?: SnapshotOptions): Promise<SerializedAXNode | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PuppeteerNode Class in TypeScript\nDESCRIPTION: Declaration of the PuppeteerNode class, which extends the Puppeteer class and is used for Node-specific browser management in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class PuppeteerNode extends Puppeteer\n```\n\n----------------------------------------\n\nTITLE: Defining Page.$() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.$() method. It takes a selector as a parameter and returns a Promise that resolves to an ElementHandle or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page._.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  $<Selector extends string>(\n    selector: Selector,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserPlatform Enum in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the BrowserPlatform enum, which includes various platform-architecture combinations used for browser downloads. It includes options for Linux, macOS, and Windows systems, with both x86 and ARM architectures where applicable.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.browserplatform.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum BrowserPlatform\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.select() Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the select() method in the Frame class, which allows selection of values in <select> elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.select.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  select(selector: string, ...values: string[]): Promise<string[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JSHandle for Window Object in TypeScript\nDESCRIPTION: This example demonstrates how to create a JSHandle for the window object using Page.evaluateHandle(). It shows a common use case for JSHandle in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst windowHandle = await page.evaluateHandle(() => window);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Legacy Mode Request Interception with Immediate Continue\nDESCRIPTION: Example showing how Legacy Mode prevails when any handler omits priority, even if earlier handlers use Cooperative Mode. The request is continued immediately when a handler calls continue() without a priority.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Final outcome: immediate continue()\npage.setRequestInterception(true);\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to abort at priority 0.\n  request.abort('failed', 0);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Control reaches this point because the request was cooperatively aborted which postpones resolution.\n\n  // { action: InterceptResolutionAction.Abort, priority: 0 }, because abort @ 0 is the current winning resolution\n  console.log(request.interceptResolutionState());\n\n  // Legacy Mode: intercept continues immediately.\n  request.continue({});\n});\npage.on('request', request => {\n  // { action: InterceptResolutionAction.AlreadyHandled }, because continue in Legacy Mode was called\n  console.log(request.interceptResolutionState());\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulate Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.emulate method. It takes a Device object as a parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  emulate(device: Device): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.boundingBox Method Signature in TypeScript\nDESCRIPTION: Defines the signature of the boundingBox() method in the ElementHandle class. This method returns a Promise that resolves to either a BoundingBox object containing the element's position and dimensions relative to the main frame, or null if the element is not part of the layout.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.boundingbox.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  boundingBox(): Promise<BoundingBox | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.setCookie() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Browser.setCookie() method. It sets cookies in the default BrowserContext and accepts an array of CookieData objects as parameters, returning a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.setcookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  setCookie(...cookies: CookieData[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Locator Race Method in TypeScript\nDESCRIPTION: Static method implementation for racing multiple locators to find elements in parallel. The method takes an array of locators and returns a new Locator that resolves to the first successful match while ensuring only one element receives the action.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.race.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  static race<Locators extends readonly unknown[] | []>(\n    locators: Locators,\n  ): Locator<AwaitedLocator<Locators[number]>>;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.press Method Signature in TypeScript\nDESCRIPTION: Defines the ElementHandle.press method signature which takes a key input and optional press options. This method focuses an element and then simulates pressing and releasing a specified keyboard key.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.press.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  press(key: KeyInput, options?: Readonly<KeyPressOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Browser.waitForTarget method signature in TypeScript\nDESCRIPTION: TypeScript interface definition for the waitForTarget method in the Browser class. This method accepts a predicate function to match a target and optional configuration options, returning a Promise that resolves to the matching Target.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.waitfortarget.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  waitForTarget(\n    predicate: (x: Target) => boolean | Promise<boolean>,\n    options?: WaitForTargetOptions,\n  ): Promise<Target>;\n}\n```\n\n----------------------------------------\n\nTITLE: Browser.createBrowserContext Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the createBrowserContext method in the Browser class. This method creates a new browser context that doesn't share cookies or cache with other browser contexts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.createbrowsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract createBrowserContext(\n    options?: BrowserContextOptions,\n  ): Promise<BrowserContext>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.createPDFStream() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the createPDFStream() method in the Page class. It generates a PDF of the page with the 'print' CSS media type and returns a Promise that resolves to a ReadableStream of Uint8Array.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.createpdfstream.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract createPDFStream(\n    options?: PDFOptions,\n  ): Promise<ReadableStream<Uint8Array>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateMediaType Method Signature in TypeScript\nDESCRIPTION: This snippet defines the signature of the emulateMediaType method in the Page class. It takes an optional string parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatemediatype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateMediaType(type?: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserContext.waitForTarget Method Signature\nDESCRIPTION: TypeScript class method signature showing the waitForTarget method which accepts a predicate function and optional options, returning a Promise that resolves to a Target.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.waitfortarget.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  waitForTarget(\n    predicate: (x: Target) => boolean | Promise<boolean>,\n    options?: WaitForTargetOptions,\n  ): Promise<Target>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page.goForward Method in Puppeteer TypeScript\nDESCRIPTION: This code snippet defines the signature of the goForward() method in the Page class of Puppeteer. The method navigates to the next page in history and accepts optional WaitForOptions parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.goforward.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract goForward(options?: WaitForOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.wsEndpoint() Method in TypeScript\nDESCRIPTION: This code snippet defines the wsEndpoint() method in the Browser class. The method returns a string representing the WebSocket URL to connect to the browser. This URL is typically used with Puppeteer.connect() for remote browser connections.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.wsendpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract wsEndpoint(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: FileChooser.accept Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the FileChooser.accept method that takes an array of file paths and returns a Promise that resolves when the file chooser is accepted.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.filechooser.accept.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileChooser {\n  accept(paths: string[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CookieSourceScheme Type in TypeScript\nDESCRIPTION: Defines a type representing the source scheme of the origin that originally set a cookie. The type has three possible values: 'Unset' (allows emulating legacy cookie scope), 'NonSecure', and 'Secure'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cookiesourcescheme.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CookieSourceScheme = 'Unset' | 'NonSecure' | 'Secure';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Response Buffer in Puppeteer TypeScript\nDESCRIPTION: Method signature for HTTPResponse.buffer() that returns a Promise resolving to a Buffer containing the response body. Note that the returned buffer may be re-encoded by the browser based on HTTP headers or heuristics, potentially leading to incorrect encoding if browser detection fails.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.buffer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  buffer(): Promise<Buffer>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Page.evaluateOnNewDocument Method Signature in TypeScript\nDESCRIPTION: TypeScript signature for the evaluateOnNewDocument method in the Page class. The method accepts a function or string to be evaluated in the browser context along with optional parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluateonnewdocument.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract evaluateOnNewDocument<\n    Params extends unknown[],\n    Func extends (...args: Params) => unknown = (...args: Params) => unknown,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<NewDocumentScriptEvaluation>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.dragOver Method in Puppeteer TypeScript API\nDESCRIPTION: Abstract method definition for dragOver in the Mouse class. It takes a target point and drag data as parameters and returns a Promise that resolves to void. This method is used to simulate dragging over elements in browser automation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.dragover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract dragOver(\n    target: Point,\n    data: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.goBack() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.goBack() method. It takes an optional WaitForOptions parameter and returns a Promise that resolves to an HTTPResponse or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.goback.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract goBack(options?: WaitForOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setCacheEnabled() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.setCacheEnabled() method. It is an abstract method in the Page class that takes an optional boolean parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setcacheenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setCacheEnabled(enabled?: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the hover method in Puppeteer's Locator class\nDESCRIPTION: Defines the hover method for the Locator class in Puppeteer. This method allows hovering over a located element with optional action options. It returns a Promise that resolves when the hover action completes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.hover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  hover<ElementType extends Element>(\n    this: Locator<ElementType>,\n    options?: Readonly<ActionOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP and HTTPS Test Servers with Puppeteer TestServer in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize both an HTTP and an HTTPS test server using the `@pptr/testserver` package. It utilizes `TestServer.create` and `TestServer.createHTTPS` respectively, specifying the root directory (`__dirname`) and ports (8000, 8001). A basic route `/hello` is set for the HTTP server to respond with 'Hello, world!'. The code uses an async IIFE (Immediately Invoked Function Expression) pattern.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/testserver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst {TestServer} = require('@pptr/testserver');\n\n(async(() => {\n  const httpServer = await TestServer.create(__dirname, 8000),\n  const httpsServer = await TestServer.createHTTPS(__dirname, 8001)\n  httpServer.setRoute('/hello', (req, res) => {\n    res.end('Hello, world!');\n  });\n  console.log('HTTP and HTTPS servers are running!');\n})();\n```\n```\n\n----------------------------------------\n\nTITLE: Defining SerializedAXNode.elementHandle() Method in TypeScript\nDESCRIPTION: This code snippet defines the elementHandle() method for the SerializedAXNode interface. The method returns a Promise that resolves to an ElementHandle or null. It's used to get an ElementHandle for the AXNode if available, with a note that it might return an error if the underlying DOM element has been disposed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.serializedaxnode.elementhandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SerializedAXNode {\n  elementHandle(): Promise<ElementHandle | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Intercept Resolution Status in Puppeteer (TypeScript)\nDESCRIPTION: This method is part of the HTTPRequest class in Puppeteer. It returns a boolean value indicating whether the intercept resolution for the request has already been handled. This can be useful for managing request interception and avoiding duplicate handling.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.isinterceptresolutionhandled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  isInterceptResolutionHandled(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Metrics in Puppeteer using TypeScript\nDESCRIPTION: Definition of the Page.metrics() method that returns a Promise resolving to a Metrics object. This method allows accessing various browser performance metrics like heap usage, document count, and execution durations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract metrics(): Promise<Metrics>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame Title Getter in TypeScript\nDESCRIPTION: TypeScript class definition showing the Frame.title() method signature which retrieves the frame's title asynchronously. Returns a Promise that resolves to a string containing the frame's title.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.title.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  title(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Locator.map Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the map() method signature in the Locator class. The method takes a mapper function that transforms elements from type T to type To and returns a new Locator instance of the target type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.map.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  map<To>(mapper: Mapper<T, To>): Locator<To>;\n}\n```\n\n----------------------------------------\n\nTITLE: Page.$eval with Explicit TypeScript Return Type\nDESCRIPTION: Example demonstrating how to explicitly specify the return type of Page.$eval using TypeScript generics. This is useful when the compiler cannot infer the return type or when you want to be more explicit about what is being returned.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._eval.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The compiler can infer the return type in this case, but if it can't\n// or if you want to be more explicit, provide it as the generic type.\nconst searchValue = await page.$eval<string>(\n  '#search',\n  (el: HTMLInputElement) => el.value,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ConsoleMessage.location() Method in TypeScript\nDESCRIPTION: This code snippet defines the location() method for the ConsoleMessage class in Puppeteer. The method returns a ConsoleMessageLocation object, which represents the location of the console message.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.location.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  location(): ConsoleMessageLocation;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebWorker.close() Method in TypeScript\nDESCRIPTION: Method signature for the close() method in the WebWorker class. This method terminates a web worker and returns a Promise that resolves when the worker has been closed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.webworker.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebWorker {\n  close(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.$$eval Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the ElementHandle.$$eval method. It defines the method's generic types and parameters, including the selector, pageFunction, and additional arguments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.__eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  $$eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<\n      Array<NodeFor<Selector>>,\n      Params\n    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,\n  >(\n    selector: Selector,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining setWaitForStableBoundingBox Method for Locator Class in TypeScript\nDESCRIPTION: This code snippet defines the setWaitForStableBoundingBox method for the Locator class. It creates a new locator instance by cloning the current one and specifies whether to wait for the element's bounding box to stabilize between animation frames.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.setwaitforstableboundingbox.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setWaitForStableBoundingBox<ElementType extends Element>(\n    this: Locator<ElementType>,\n    value: boolean,\n  ): Locator<ElementType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Credentials Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for credential objects containing username and password properties. Used for authentication purposes in Puppeteer operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Credentials\n```\n\n----------------------------------------\n\nTITLE: Defining the Target.type() Method Signature in Puppeteer (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the abstract signature for the `type()` method within the `Target` class of the Puppeteer library. This method must be implemented by subclasses to return the specific `TargetType` (e.g., 'page', 'service_worker') of the target instance. It has no parameters and returns a value of type `TargetType`.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Target {\n  abstract type(): TargetType;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Response to JSON in Puppeteer TypeScript\nDESCRIPTION: Method signature for converting HTTP response body to JSON format. Returns a Promise that resolves to the JSON representation of the response body. Will throw an error if the response body cannot be parsed using JSON.parse.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.json.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  json(): Promise<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.url() Method in Typescript for Puppeteer\nDESCRIPTION: This code snippet defines the url() method in the Frame class. It is an abstract method that returns a string representing the frame's URL.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Browser Instance from Target - Puppeteer - TypeScript\nDESCRIPTION: Defines the abstract browser method within the Target class in TypeScript, which must be implemented to return the Browser instance associated with a specific target. Requires Puppeteer as a dependency. Returns a Browser object when invoked on a Target-derived class. Input is implicit (the class instance), and the output is the associated Browser instance. The method is abstract and does not provide an implementation, so subclasses must implement the logic.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract browser(): Browser;\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog.accept Method Definition in TypeScript\nDESCRIPTION: Defines the accept() method in the Dialog class that handles accepting browser dialogs. The method takes an optional promptText parameter for prompt dialogs and returns a Promise that resolves when the dialog is accepted.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.dialog.accept.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  accept(promptText?: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.drag Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.drag() method. It takes a target parameter which can be either a Point or another ElementHandle, and returns a Promise that resolves to either DragData or void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.drag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  drag(\n    this: ElementHandle<Element>,\n    target: Point | ElementHandle<Element>,\n  ): Promise<Protocol.Input.DragData | void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LaunchOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the LaunchOptions interface in TypeScript. It specifies the structure for configuring browser launch options in Puppeteer, including various optional and required properties.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.launchoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LaunchOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Page.content() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the content() method for the Page class in Puppeteer. The method returns a Promise that resolves to a string containing the full HTML contents of the page, including the DOCTYPE declaration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.content.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  content(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining createProfile Function in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the createProfile function in TypeScript for Puppeteer. It takes a Browser instance and ProfileOptions as parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.createprofile.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createProfile(\n  browser: Browser,\n  opts: ProfileOptions,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Locator.race() Method in TypeScript\nDESCRIPTION: This code snippet defines the static race() method on the Locator class. It creates a race between multiple locators to locate elements in parallel, ensuring only a single element receives the action.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.race.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  static race<Locators extends readonly unknown[] | []>(\n    locators: Locators,\n  ): Locator<AwaitedLocator<Locators[number]>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser.process() Method in Typescript\nDESCRIPTION: Abstract method definition for retrieving the ChildProcess associated with a Browser instance. Returns null if the browser was connected to via Puppeteer.connect().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.process.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract process(): ChildProcess | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Locator.scroll Method Definition in TypeScript\nDESCRIPTION: Defines the scroll method on the Locator class that enables scrolling of located DOM elements. The method takes optional scroll options and returns a Promise that resolves when the scroll operation is complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.scroll.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  scroll<ElementType extends Element>(\n    this: Locator<ElementType>,\n    options?: Readonly<LocatorScrollOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring UnsupportedOperation Class in Puppeteer - TypeScript\nDESCRIPTION: Defines the UnsupportedOperation class, which extends PuppeteerError, to represent errors when unsupported methods are called within Puppeteer's protocol abstraction. This declaration requires PuppeteerError to be defined or imported. The class is designed to be thrown by methods that are not available for the selected protocol, and its use ensures that such errors can be programmatically distinguished from other error types. Input: None; Output: class type definition.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.unsupportedoperation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class UnsupportedOperation extends PuppeteerError\n```\n\n----------------------------------------\n\nTITLE: Defining setRequestInterception Method in Page Class (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript signature for the setRequestInterception method in the Page class. It takes a boolean parameter to enable or disable request interception and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setrequestinterception.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setRequestInterception(value: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContext Class in TypeScript\nDESCRIPTION: Declares the abstract BrowserContext class that extends EventEmitter with BrowserContextEvents.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class BrowserContext extends EventEmitter<BrowserContextEvents>\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.drop Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the abstract drop method in the Mouse class. It takes a target point and drag data as parameters, and returns a Promise that resolves to void. The method performs a dragenter, dragover, and drop sequence.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.drop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract drop(target: Point, data: Protocol.Input.DragData): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser.isConnected Method in TypeScript for Puppeteer\nDESCRIPTION: TypeScript implementation of the isConnected() method in the Browser class that returns a boolean indicating whether Puppeteer is connected to the browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.isconnected.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  isConnected(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Page.emulateIdleState Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Page.emulateIdleState method, which accepts an optional overrides object with isUserActive and isScreenUnlocked boolean properties.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulateidlestate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateIdleState(overrides?: {\n    isUserActive: boolean;\n    isScreenUnlocked: boolean;\n  }): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining setDefaultTimeout Method in Page Class (TypeScript)\nDESCRIPTION: This code snippet defines the setDefaultTimeout method in the Page class. It takes a timeout parameter of type number and returns void. The method is used to set the default maximum time for operations on the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setdefaulttimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setDefaultTimeout(timeout: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Page.frames() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the frames() method within the Page class. It returns an array of Frame objects, representing all frames attached to the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.frames.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract frames(): Frame[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Node.js Debugger with Puppeteer\nDESCRIPTION: Demonstrates how to add a debugger statement in server-side code and run it with the Node.js inspector. This allows debugging the Node.js code that controls Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/debugging.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndebugger;\nawait page.click('a[target=_blank]');\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk path/to/script.js\n```\n\n----------------------------------------\n\nTITLE: Method Signature for Browser.deleteCookie in TypeScript\nDESCRIPTION: The TypeScript signature for the deleteCookie method in the Browser class. It takes one or more Cookie objects as arguments and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.deletecookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  deleteCookie(...cookies: Cookie[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MouseClickOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for MouseClickOptions that extends MouseOptions, providing configuration options for mouse click operations in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouseclickoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MouseClickOptions extends MouseOptions\n```\n\n----------------------------------------\n\nTITLE: Defining setEnsureElementIsInTheViewport Method for Locator Class in TypeScript\nDESCRIPTION: This code snippet defines the setEnsureElementIsInTheViewport method for the Locator class. It creates a new locator instance by cloning the current one and specifies whether the locator should scroll the element into viewport if it's not already visible.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.setensureelementisintheviewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setEnsureElementIsInTheViewport<ElementType extends Element>(\n    this: Locator<ElementType>,\n    value: boolean,\n  ): Locator<ElementType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding stylesheet link using Page.addStyleTag in Puppeteer\nDESCRIPTION: This signature allows adding a <link> tag that references an external stylesheet. It returns a Promise that resolves to an ElementHandle for the created HTMLLinkElement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.addstyletag.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  addStyleTag(\n    options: FrameAddStyleTagOptions,\n  ): Promise<ElementHandle<HTMLLinkElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.isVisible() Method in TypeScript\nDESCRIPTION: This snippet defines the isVisible() method for the ElementHandle class. The method returns a Promise that resolves to a boolean indicating whether the element is visible based on specific criteria.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.isvisible.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  isVisible(): Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.tap() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the tap() method in the Frame class. The method takes a selector string as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.tap.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  tap(selector: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TargetType Enum in TypeScript - Puppeteer\nDESCRIPTION: TypeScript enumeration that defines the various types of targets that can be controlled via Puppeteer. Includes target types such as background pages, browser instances, service workers, shared workers, webviews, and other general targets.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.targettype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum TargetType\n```\n\n----------------------------------------\n\nTITLE: Generating Single E2E Test File with Puppeteer Angular Schematic\nDESCRIPTION: Command to create a single end-to-end test file using the Puppeteer Angular Schematic.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng generate @puppeteer/ng-schematics:e2e \"<TestName>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request URL in Puppeteer using HTTPRequest.url()\nDESCRIPTION: This code snippet shows the signature of the url() method in the HTTPRequest class. The method is defined as abstract and returns a string representing the URL of the HTTP request.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page.screenshot() with binary output in TypeScript\nDESCRIPTION: Signature for Page.screenshot() method that returns a Uint8Array containing the binary image data. This overload makes the options parameter optional, allowing for simple screenshot capturing without configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.screenshot.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  screenshot(options?: Readonly<ScreenshotOptions>): Promise<Uint8Array>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Web Worker URL - TypeScript\nDESCRIPTION: Method signature for getting the URL of a web worker instance. This method is part of the WebWorker class and returns the string URL associated with the web worker.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebWorker {\n  url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ElementHandle.clickablePoint() Method in TypeScript\nDESCRIPTION: The method signature for ElementHandle.clickablePoint() which returns a Promise resolving to the clickable Point of an element. It optionally accepts an Offset parameter to adjust the point location from the element's center.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.clickablepoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  clickablePoint(offset?: Offset): Promise<Point>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.addScriptTag Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Frame.addScriptTag method. It takes FrameAddScriptTagOptions as a parameter and returns a Promise resolving to an ElementHandle of an HTMLScriptElement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.addscripttag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  addScriptTag(\n    options: FrameAddScriptTagOptions,\n  ): Promise<ElementHandle<HTMLScriptElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for FrameAddStyleTagOptions in TypeScript\nDESCRIPTION: Defines the FrameAddStyleTagOptions interface which specifies the options for adding a style tag to a frame in Puppeteer. It provides different ways to inject CSS: through raw content, a file path, or a URL.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frameaddstyletagoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FrameAddStyleTagOptions\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog.dismiss Method in Puppeteer TypeScript\nDESCRIPTION: The Dialog.dismiss() method implementation in the Dialog class. It returns a Promise that resolves once the dialog has been dismissed, allowing automated handling of browser dialogs during Puppeteer automation scripts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.dismiss.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  dismiss(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSCoverage.stop() Method in TypeScript\nDESCRIPTION: This code snippet defines the stop() method for the JSCoverage class in Puppeteer. The method returns a Promise that resolves to an array of JSCoverageEntry objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jscoverage.stop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSCoverage {\n  stop(): Promise<JSCoverageEntry[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.initiator Method in TypeScript\nDESCRIPTION: Abstract method declaration for retrieving the initiator of a network request. Returns either a Protocol.Network.Initiator object or undefined, providing information about what triggered the HTTP request.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.initiator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract initiator(): Protocol.Network.Initiator | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the User Agent in Puppeteer TypeScript API\nDESCRIPTION: Defines the abstract setUserAgent method within the Page class in Puppeteer, enabling users to set a custom user agent string and optionally provide user agent metadata. Depends on the Protocol.Emulation.UserAgentMetadata type from the Puppeteer Protocol. The method receives the userAgent as a string and userAgentMetadata as an optional parameter and returns a promise that resolves upon successfully applying the settings. Inputs must adhere to correct types, and no immediate output is produced aside from the promise completion.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setuseragent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setUserAgent(\n    userAgent: string,\n    userAgentMetadata?: Protocol.Emulation.UserAgentMetadata,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.type Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature of the ElementHandle.type() method, showing the class structure, method definition, parameters, and return type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  type(text: string, options?: Readonly<KeyboardTypeOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Browser.targets() Method in TypeScript\nDESCRIPTION: Abstract method declaration for the targets() method in the Browser class, which returns an array of Target objects representing all active targets across all browser contexts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.targets.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract targets(): Target[];\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for ElementHandle.$$eval Example\nDESCRIPTION: This HTML snippet demonstrates the structure used in the ElementHandle.$$eval example. It shows a feed container with two tweet elements, which will be targeted by the method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.__eval.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"feed\">\n  <div class=\"tweet\">Hello!</div>\n  <div class=\"tweet\">Hi!</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining the Page.type() Method Signature in TypeScript\nDESCRIPTION: Provides the TypeScript signature for the `Page.type()` method within the `Page` class. It accepts a selector string, the text to type, and optional KeyboardTypeOptions, returning a Promise that resolves when typing is complete. This signature defines the structure and types expected by the method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Page {\n  type(\n    selector: string,\n    text: string,\n    options?: Readonly<KeyboardTypeOptions>,\n  ): Promise<void>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Locator.scroll Method in TypeScript Puppeteer\nDESCRIPTION: TypeScript class method definition for scrolling elements in Puppeteer. The method accepts optional scroll options and returns a Promise that resolves when the scroll operation is complete. It can be used with any element type through generic parameter ElementType.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.scroll.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  scroll<ElementType extends Element>(\n    this: Locator<ElementType>,\n    options?: Readonly<LocatorScrollOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KeyPressOptions Type in TypeScript for Puppeteer\nDESCRIPTION: This code defines the KeyPressOptions type as an intersection of KeyDownOptions and KeyboardTypeOptions, combining properties from both interfaces for use in keyboard press operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keypressoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KeyPressOptions = KeyDownOptions & KeyboardTypeOptions;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Executable Path for a Chrome Release Channel using PuppeteerNode in TypeScript\nDESCRIPTION: Defines the PuppeteerNode class method executablePath that accepts a ChromeReleaseChannel parameter and returns the default executable path for the specified Chrome release channel. Requires Puppeteer and the definition of the ChromeReleaseChannel enum or type. Parameter 'channel' determines which release channel's executable will be queried, and the method returns a string path to that binary. Used for launching a specific channel of Chrome with Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.executablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  executablePath(channel: ChromeReleaseChannel): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TracingOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the TracingOptions interface in TypeScript for use within Puppeteer's tracing subsystem. It specifies three optional properties: categories (an array of strings representing trace category names), path (a string specifying the output trace file location), and screenshots (a boolean indicating whether screenshots should be included in the trace). There are no required external dependencies. This interface is meant to be passed as an options object to tracing functions, with all properties being optional.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.tracingoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TracingOptions\n```\n\n----------------------------------------\n\nTITLE: Resolving Browser Build ID in TypeScript\nDESCRIPTION: Function declaration for resolving a browser build ID based on browser type, platform, and tag. Returns a Promise that resolves to a string containing the build ID.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.resolvebuildid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function resolveBuildId(\n  browser: Browser,\n  platform: BrowserPlatform,\n  tag: string | BrowserTag,\n): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.waitForTarget Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Browser.waitForTarget method. It takes a predicate function and optional options, returning a Promise that resolves to a Target.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.waitfortarget.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  waitForTarget(\n    predicate: (x: Target) => boolean | Promise<boolean>,\n    options?: WaitForTargetOptions,\n  ): Promise<Target>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebWorker.evaluateHandle Method in TypeScript\nDESCRIPTION: Method signature for evaluateHandle in the WebWorker class that evaluates a function in a web worker context and returns a handle to the result. The method accepts a function or string to evaluate and optional parameters to pass to that function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.webworker.evaluatehandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebWorker {\n  evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    func: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Signature Definition for Page.emulateMediaType Method in TypeScript\nDESCRIPTION: Defines the method signature for the Page.emulateMediaType method in the Page class. The method allows changing the CSS media type with an optional string parameter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatemediatype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateMediaType(type?: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Puppeteer Usage in Google Cloud Run\nDESCRIPTION: Improved Puppeteer implementation in Google Cloud Run that responds after browser launch to ensure CPU remains active during processing.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/test-puppeteer', (req, res) => {\n  puppeteer.launch().then(browser => {\n    // A second later...\n    res.json({\n      jobId: 123,\n      acknowledged: true,\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.reset() Method in TypeScript\nDESCRIPTION: This code snippet defines the abstract reset() method in the Mouse class. The method resets the mouse to its default state with no buttons pressed and position at (0,0). It returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.reset.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract reset(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse Abstract Class - TypeScript\nDESCRIPTION: TypeScript declaration for the abstract HTTPResponse class. This class is internal and should not be instantiated directly or extended by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class HTTPResponse\n```\n\n----------------------------------------\n\nTITLE: DeviceRequestPrompt.select TypeScript Method Signature\nDESCRIPTION: The TypeScript signature for the DeviceRequestPrompt.select method, which takes a DeviceRequestPromptDevice parameter and returns a Promise that resolves to void after selecting the device in the prompt.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.select.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DeviceRequestPrompt {\n  select(device: DeviceRequestPromptDevice): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining stopJSCoverage Method in Coverage Class (TypeScript)\nDESCRIPTION: This code snippet defines the stopJSCoverage() method in the Coverage class. It returns a Promise that resolves to an array of JSCoverageEntry objects. The method is used to stop JavaScript coverage and retrieve coverage reports for all scripts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.stopjscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Coverage {\n  stopJSCoverage(): Promise<JSCoverageEntry[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EventEmitter.off Method in TypeScript\nDESCRIPTION: The TypeScript definition of the EventEmitter.off() method, which removes an event listener. It takes the event type and an optional handler function as parameters and returns the EventEmitter instance for method chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.eventemitter.off.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  off<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    handler?: Handler<EventsWithWildcard<Events>[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadPolicy Type in TypeScript\nDESCRIPTION: TypeScript type definition that specifies the allowed download policy values in Puppeteer. The policy can be set to deny all downloads, allow downloads, allow downloads with naming capability, or use default browser behavior.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.downloadpolicy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DownloadPolicy = 'deny' | 'allow' | 'allowAndName' | 'default';\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserLauncher.launch Method in TypeScript\nDESCRIPTION: Method signature for the BrowserLauncher.launch method, which takes optional LaunchOptions and returns a Promise that resolves to a Browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserlauncher.launch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserLauncher {\n  launch(options?: LaunchOptions): Promise<Browser>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using EventEmitter.removeAllListeners in TypeScript with Puppeteer\nDESCRIPTION: Method signature for removing all listeners from an EventEmitter. When called without arguments, it removes all listeners for all events. When called with an event type argument, it removes only listeners for that specific event.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.removealllisteners.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  removeAllListeners(type?: keyof EventsWithWildcard<Events>): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Class Definition in TypeScript\nDESCRIPTION: Abstract class definition for the Page class that extends EventEmitter with PageEvents type parameter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Page extends EventEmitter<PageEvents>\n```\n\n----------------------------------------\n\nTITLE: HTTPRequest.continue Method Signature in TypeScript\nDESCRIPTION: The method signature for HTTPRequest.continue() method, which allows continuing intercepted network requests with optional overrides and priority parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.continue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  continue(\n    overrides?: ContinueRequestOverrides,\n    priority?: number,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Class Definition in TypeScript\nDESCRIPTION: Abstract class definition for Puppeteer's Keyboard class that provides keyboard automation capabilities.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Keyboard\n```\n\n----------------------------------------\n\nTITLE: HTTPRequest Class Definition in TypeScript\nDESCRIPTION: Abstract class definition for HTTPRequest that represents HTTP requests sent by a page in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class HTTPRequest\n```\n\n----------------------------------------\n\nTITLE: Adding HTMLStyleElement to Frame in Puppeteer (TypeScript)\nDESCRIPTION: This method adds an HTMLStyleElement to the frame with the desired URL. It returns a Promise that resolves to an ElementHandle of the loaded style element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.addstyletag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  addStyleTag(\n    options: Omit<FrameAddStyleTagOptions, 'url'>,\n  ): Promise<ElementHandle<HTMLStyleElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard.type Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Keyboard.type method. It takes a text string and optional KeyboardTypeOptions, returning a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract type(\n    text: string,\n    options?: Readonly<KeyboardTypeOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.finalizeInterceptions Method in TypeScript\nDESCRIPTION: This code snippet defines the finalizeInterceptions method in the HTTPRequest class. The method returns a Promise that resolves to void, indicating it performs asynchronous operations without returning a value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.finalizeinterceptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  finalizeInterceptions(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Execution with Puppeteer in TypeScript\nDESCRIPTION: Defines the abstract setJavaScriptEnabled method within the Puppeteer Page class, allowing users to enable or disable JavaScript execution on a browser page. Requires Puppeteer as a dependency and is defined in TypeScript, targeting automated browser control scenarios. The method takes a single boolean parameter, 'enabled', and returns a Promise<void>. Note that updates to this setting take effect only on the next page navigation and do not affect scripts already executed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setjavascriptenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setJavaScriptEnabled(enabled: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle Class Signature in TypeScript\nDESCRIPTION: Declaration of the ElementHandle class that extends JSHandle to represent DOM elements in a page. The class is parameterized with a generic type that defaults to Element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class ElementHandle<ElementType extends Node = Element> extends JSHandle<ElementType>\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTTP Headers in Puppeteer TypeScript API\nDESCRIPTION: Abstract method definition for retrieving HTTP response headers. Returns a Record object containing header names as keys (in lowercase) and their corresponding values as strings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.headers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract headers(): Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Mouse.wheel Method Signature in Puppeteer TypeScript API\nDESCRIPTION: The TypeScript signature for the Mouse.wheel method in Puppeteer. This method dispatches a mousewheel event and takes an optional MouseWheelOptions parameter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.wheel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract wheel(options?: Readonly<MouseWheelOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.up Method Signature in TypeScript for Puppeteer\nDESCRIPTION: TypeScript definition for the Mouse.up() method in Puppeteer's Mouse class. This method releases the mouse button and accepts an optional MouseOptions parameter. It returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.up.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract up(options?: Readonly<MouseOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FrameAddScriptTagOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the available options when adding a script tag to a frame in Puppeteer. Provides options for injecting JavaScript through direct content, file path, or URL, along with configuration for script ID and type attributes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frameaddscripttagoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FrameAddScriptTagOptions\n```\n\n----------------------------------------\n\nTITLE: Implementing setWaitForEnabled Method in TypeScript Locator Class\nDESCRIPTION: Defines a method that creates a new locator instance by cloning the current one and configuring whether to wait for input elements to become enabled before actions like click and fill. The method accepts a boolean parameter and returns a new Locator instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.setwaitforenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setWaitForEnabled<NodeType extends Node>(\n    this: Locator<NodeType>,\n    value: boolean,\n  ): Locator<NodeType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommandOptions Interface in TypeScript\nDESCRIPTION: Declares a TypeScript interface CommandOptions that includes a timeout property of type number. This interface is likely used to configure command execution options in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.commandoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CommandOptions\n```\n\n----------------------------------------\n\nTITLE: Frame.$() Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Frame.$() method which queries a frame for an element matching a given selector. It returns a Promise that resolves to either an ElementHandle of the matching element or null if no element is found.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame._.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  $<Selector extends string>(\n    selector: Selector,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Elements in Puppeteer using ElementHandle.drop\nDESCRIPTION: This method allows dropping one element onto another in Puppeteer. It takes an ElementHandle as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.drop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  drop(\n    this: ElementHandle<Element>,\n    element: ElementHandle<Element>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ElementHandle.toElement Method in Puppeteer\nDESCRIPTION: An example showing how to convert a generic Element handle to a specific HTMLAnchorElement handle using the toElement method. The original handle doesn't need to be disposed as they are the same underlying handle.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.toelement.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst element: ElementHandle<Element> = await page.$('.class-name-of-anchor');\n// DO NOT DISPOSE `element`, this will be always be the same handle.\nconst anchor: ElementHandle<HTMLAnchorElement> = await element.toElement('a');\n```\n\n----------------------------------------\n\nTITLE: Defining EventEmitter Class in TypeScript for Puppeteer\nDESCRIPTION: TypeScript declaration for the EventEmitter class that implements CommonEventEmitter interface. This class enables event handling functionality for Puppeteer classes, allowing them to fire events and handle event listeners.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.eventemitter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class EventEmitter<Events extends Record<EventType, unknown>> implements CommonEventEmitter<EventsWithWildcard<Events>>\n```\n\n----------------------------------------\n\nTITLE: Defining the WaitForTargetOptions Interface in TypeScript\nDESCRIPTION: Defines the `WaitForTargetOptions` interface in TypeScript for the Puppeteer library. This interface specifies optional configuration parameters for functions that wait for a browser target. It includes `signal`, an optional AbortSignal to cancel the wait, and `timeout`, an optional number representing the maximum wait time in milliseconds (defaulting to 30,000ms), where 0 disables the timeout.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.waitfortargetoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitForTargetOptions\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.respond Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the HTTPRequest.respond() method. It takes a partial ResponseForRequest object and an optional priority number, returning a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.respond.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  respond(\n    response: Partial<ResponseForRequest>,\n    priority?: number,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CookieData Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the CookieData interface used for setting cookies in Puppeteer. It includes properties for various cookie attributes such as name, value, domain, expiration, and security settings. Some properties are optional and may have browser-specific support.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cookiedata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CookieData\n```\n\n----------------------------------------\n\nTITLE: Defining computeExecutablePath Function Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet declares the signature for the `computeExecutablePath` function. It takes an `options` object adhering to the `ComputeExecutablePathOptions` interface (defined elsewhere) and returns a string representing the path to the browser executable. This function is used internally by Puppeteer to locate the appropriate browser binary.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.computeexecutablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function computeExecutablePath(\\n  options: ComputeExecutablePathOptions,\\n): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.parentFrame() Method in TypeScript Puppeteer\nDESCRIPTION: Abstract method signature for the parentFrame() method within the Frame class. This method returns the parent frame if one exists, or null if the frame is detached or is the main frame.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.parentframe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract parentFrame(): Frame | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locator.waitHandle() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the waitHandle() method of the Locator class. The method waits for the locator to get a handle from the page and returns a Promise resolving to a HandleFor<T>. It optionally accepts an ActionOptions parameter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.waithandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  waitHandle(options?: Readonly<ActionOptions>): Promise<HandleFor<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining setBypassCSP Method for Page Class in TypeScript\nDESCRIPTION: This code snippet defines the setBypassCSP method for the Page class in Puppeteer. The method takes a boolean parameter to enable or disable bypassing of the page's Content-Security-Policy and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setbypasscsp.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setBypassCSP(enabled: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateMediaFeatures Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.emulateMediaFeatures method. It takes an optional array of MediaFeature objects and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatemediafeatures.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateMediaFeatures(features?: MediaFeature[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Configuration for Google App Engine and Cloud Functions\nDESCRIPTION: Configuration file for Puppeteer to properly cache browser binaries when deployed to Google App Engine or Cloud Functions environments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst {join} = require('path');\n\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  cacheDirectory: join(__dirname, 'node_modules', '.puppeteer_cache'),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.touchEnd Method in Typescript\nDESCRIPTION: Method signature for the touchEnd method of the ElementHandle class. This method simulates ending a touch gesture on an element and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.touchend.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  touchEnd(this: ElementHandle<Element>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GoToOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the GoToOptions interface which extends WaitForOptions. It includes optional properties for referer and referrerPolicy, which take precedence over the corresponding headers set by page.setExtraHTTPHeaders().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.gotooptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GoToOptions extends WaitForOptions\n```\n\n----------------------------------------\n\nTITLE: Defining HandleFor Generic Type in TypeScript\nDESCRIPTION: Defines a conditional type that returns ElementHandle<T> if T extends Node, otherwise returns JSHandle<T>. This type is used to properly type handle instances based on whether they represent DOM elements or other JavaScript objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.handlefor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HandleFor<T> = T extends Node ? ElementHandle<T> : JSHandle<T>;\n```\n\n----------------------------------------\n\nTITLE: Locator.waitHandle Method Definition in TypeScript\nDESCRIPTION: The signature of the waitHandle method in the Locator class that waits for the locator to get a handle from the page. It accepts optional ActionOptions and returns a Promise resolving to HandleFor<T>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.waithandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  waitHandle(options?: Readonly<ActionOptions>): Promise<HandleFor<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.createBrowserContext() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the createBrowserContext() method in the Browser class. It creates a new browser context with optional BrowserContextOptions and returns a Promise resolving to a BrowserContext object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.createbrowsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract createBrowserContext(\n    options?: BrowserContextOptions,\n  ): Promise<BrowserContext>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setJavaScriptEnabled Method Signature in TypeScript\nDESCRIPTION: TypeScript signature of the setJavaScriptEnabled method in the Page class. This method enables or disables JavaScript execution on a page and returns a Promise that resolves when the operation completes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setjavascriptenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setJavaScriptEnabled(enabled: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Frame Class Signature in TypeScript\nDESCRIPTION: The TypeScript declaration of the Frame class, showing it extends EventEmitter with FrameEvents type parameter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Frame extends EventEmitter<FrameEvents>\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.method Type Signature in TypeScript\nDESCRIPTION: Abstract class definition for HTTPRequest that declares the method() function which returns the HTTP method (GET, POST, etc.) used in a request as a string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.method.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract method(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.evaluateOnNewDocument Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.evaluateOnNewDocument method. It defines the method's parameters and return type, using generic types for flexibility.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluateonnewdocument.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract evaluateOnNewDocument<\n    Params extends unknown[],\n    Func extends (...args: Params) => unknown = (...args: Params) => unknown,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<NewDocumentScriptEvaluation>;\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Screen Recording in Puppeteer using TypeScript\nDESCRIPTION: This code snippet defines the stop() method for the ScreenRecorder class in Puppeteer. The method is asynchronous and returns a Promise that resolves to void, indicating the completion of stopping the screen recording.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screenrecorder.stop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ScreenRecorder {\n  stop(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locator.filter() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the Locator.filter() method. It creates an expectation that is evaluated against located values and retries if expectations do not match.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.filter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  filter<S extends T>(predicate: Predicate<T, S>): Locator<S>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Touch Handle Move Method with Puppeteer in TypeScript\nDESCRIPTION: This TypeScript interface snippet defines the move method on TouchHandle, which asynchronously dispatches a touchMove event to simulate moving a touch point to the given x and y screen coordinates. It requires no dependencies beyond TypeScript and Puppeteer types where TouchHandle is implemented. Parameters x and y control the move's horizontal and vertical targets; the method returns a Promise resolved on event dispatch completion. Intended primarily for automated browser event simulation; no values are returned upon completion.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.touchhandle.move.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TouchHandle {\n  move(x: number, y: number): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Device Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for Device in Puppeteer. This interface is used to specify device emulation properties when automating browsers, containing userAgent string and viewport configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.device.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Device\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.timing() Method in TypeScript\nDESCRIPTION: This code snippet defines the abstract timing() method in the HTTPResponse class. The method returns timing information related to the response as a Protocol.Network.ResourceTiming object or null if not available.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.timing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract timing(): Protocol.Network.ResourceTiming | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.evaluate() Method in TypeScript for Puppeteer\nDESCRIPTION: TypeScript class definition for the Frame.evaluate() method in Puppeteer. This method evaluates JavaScript code within the context of a specific frame, accepting a function or string to execute along with parameters, and returns a Promise with the result.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.evaluate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KeyInput Type for Puppeteer Keyboard Functions in TypeScript\nDESCRIPTION: This code snippet defines the KeyInput type, which is a union of string literals representing all valid keys that can be passed to Puppeteer's keyboard input functions, such as keyboard.press. It includes a wide range of keys from basic alphanumeric characters to special function and control keys.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyinput.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KeyInput =\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'Power'\n  | 'Eject'\n  | 'Abort'\n  | 'Help'\n  | 'Backspace'\n  | 'Tab'\n  | 'Numpad5'\n  | 'NumpadEnter'\n  | 'Enter'\n  | '\\r'\n  | '\\n'\n  | 'ShiftLeft'\n  | 'ShiftRight'\n  | 'ControlLeft'\n  | 'ControlRight'\n  | 'AltLeft'\n  | 'AltRight'\n  | 'Pause'\n  | 'CapsLock'\n  | 'Escape'\n  | 'Convert'\n  | 'NonConvert'\n  | 'Space'\n  | 'Numpad9'\n  | 'PageUp'\n  | 'Numpad3'\n  | 'PageDown'\n  | 'End'\n  | 'Numpad1'\n  | 'Home'\n  | 'Numpad7'\n  | 'ArrowLeft'\n  | 'Numpad4'\n  | 'Numpad8'\n  | 'ArrowUp'\n  | 'ArrowRight'\n  | 'Numpad6'\n  | 'Numpad2'\n  | 'ArrowDown'\n  | 'Select'\n  | 'Open'\n  | 'PrintScreen'\n  | 'Insert'\n  | 'Numpad0'\n  | 'Delete'\n  | 'NumpadDecimal'\n  | 'Digit0'\n  | 'Digit1'\n  | 'Digit2'\n  | 'Digit3'\n  | 'Digit4'\n  | 'Digit5'\n  | 'Digit6'\n  | 'Digit7'\n  | 'Digit8'\n  | 'Digit9'\n  | 'KeyA'\n  | 'KeyB'\n  | 'KeyC'\n  | 'KeyD'\n  | 'KeyE'\n  | 'KeyF'\n  | 'KeyG'\n  | 'KeyH'\n  | 'KeyI'\n  | 'KeyJ'\n  | 'KeyK'\n  | 'KeyL'\n  | 'KeyM'\n  | 'KeyN'\n  | 'KeyO'\n  | 'KeyP'\n  | 'KeyQ'\n  | 'KeyR'\n  | 'KeyS'\n  | 'KeyT'\n  | 'KeyU'\n  | 'KeyV'\n  | 'KeyW'\n  | 'KeyX'\n  | 'KeyY'\n  | 'KeyZ'\n  | 'MetaLeft'\n  | 'MetaRight'\n  | 'ContextMenu'\n  | 'NumpadMultiply'\n  | 'NumpadAdd'\n  | 'NumpadSubtract'\n  | 'NumpadDivide'\n  | 'F1'\n  | 'F2'\n  | 'F3'\n  | 'F4'\n  | 'F5'\n  | 'F6'\n  | 'F7'\n  | 'F8'\n  | 'F9'\n  | 'F10'\n  | 'F11'\n  | 'F12'\n  | 'F13'\n  | 'F14'\n  | 'F15'\n  | 'F16'\n  | 'F17'\n  | 'F18'\n  | 'F19'\n  | 'F20'\n  | 'F21'\n  | 'F22'\n  | 'F23'\n  | 'F24'\n  | 'NumLock'\n  | 'ScrollLock'\n  | 'AudioVolumeMute'\n  | 'AudioVolumeDown'\n  | 'AudioVolumeUp'\n  | 'MediaTrackNext'\n  | 'MediaTrackPrevious'\n  | 'MediaStop'\n  | 'MediaPlayPause'\n  | 'Semicolon'\n  | 'Equal'\n  | 'NumpadEqual'\n  | 'Comma'\n  | 'Minus'\n  | 'Period'\n  | 'Slash'\n  | 'Backquote'\n  | 'BracketLeft'\n  | 'Backslash'\n  | 'BracketRight'\n  | 'Quote'\n  | 'AltGraph'\n  | 'Props'\n  | 'Cancel'\n  | 'Clear'\n  | 'Shift'\n  | 'Control'\n  | 'Alt'\n  | 'Accept'\n  | 'ModeChange'\n  | ' '\n  | 'Print'\n  | 'Execute'\n  | '\\u0000'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'g'\n  | 'h'\n  | 'i'\n  | 'j'\n  | 'k'\n  | 'l'\n  | 'm'\n  | 'n'\n  | 'o'\n  | 'p'\n  | 'q'\n  | 'r'\n  | 's'\n  | 't'\n  | 'u'\n  | 'v'\n  | 'w'\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'Meta'\n  | '*'\n  | '+'\n  | '-'\n  | '/'\n  | ';'\n  | '='\n  | ','\n  | '.'\n  | '`'\n  | '['\n  | '\\\\'\n  | ']'\n  | \"'\"\n  | 'Attn'\n  | 'CrSel'\n  | 'ExSel'\n  | 'EraseEof'\n  | 'Play'\n  | 'ZoomOut'\n  | ')'\n  | '!'\n  | '@'\n  | '#'\n  | '$'\n  | '%'\n  | '^'\n  | '&'\n  | '('\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F'\n  | 'G'\n  | 'H'\n  | 'I'\n  | 'J'\n  | 'K'\n  | 'L'\n  | 'M'\n  | 'N'\n  | 'O'\n  | 'P'\n  | 'Q'\n  | 'R'\n  | 'S'\n  | 'T'\n  | 'U'\n  | 'V'\n  | 'W'\n  | 'X'\n  | 'Y'\n  | 'Z'\n  | ':'\n  | '<'\n  | '_'\n  | '>'\n  | '?'\n  | '~'\n  | '{'\n  | '|'\n  | '}'\n  | '\"'\n  | 'SoftLeft'\n  | 'SoftRight'\n  | 'Camera'\n  | 'Call'\n  | 'EndCall'\n  | 'VolumeDown'\n  | 'VolumeUp';\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Response Success with Puppeteer's HTTPResponse.ok() Method\nDESCRIPTION: This snippet defines the ok() method on the HTTPResponse class in Puppeteer. It returns a boolean value indicating whether the response was successful, with a status code in the range of 200-299.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.ok.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  ok(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.autofill Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript class definition for the ElementHandle class, including the autofill method signature. The method takes AutofillData as a parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.autofill.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract autofill(data: AutofillData): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.waitForSelector Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Frame.waitForSelector method. It specifies the method parameters and return type, which is a Promise resolving to an ElementHandle or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.waitforselector.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  waitForSelector<Selector extends string>(\n    selector: Selector,\n    options?: WaitForSelectorOptions,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility.snapshot Method in TypeScript\nDESCRIPTION: TypeScript class definition for the Accessibility.snapshot method, which captures the current state of the accessibility tree and returns a representation of the root accessible node.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.accessibility.snapshot.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Accessibility {\n  snapshot(options?: SnapshotOptions): Promise<SerializedAXNode | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserContext Class Definition in TypeScript\nDESCRIPTION: Abstract class definition for BrowserContext that extends EventEmitter to handle browser context events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class BrowserContext extends EventEmitter<BrowserContextEvents>\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateIdleState Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.emulateIdleState method. It takes an optional overrides object with isUserActive and isScreenUnlocked boolean properties, and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulateidlestate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateIdleState(overrides?: {\n    isUserActive: boolean;\n    isScreenUnlocked: boolean;\n  }): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContext.deleteCookie Method in TypeScript\nDESCRIPTION: Method signature for deleting cookies in a browser context. Takes a spread array of Cookie objects as parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.deletecookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  deleteCookie(...cookies: Cookie[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Version Comparator Function in TypeScript\nDESCRIPTION: TypeScript function declaration for getVersionComparator that returns a comparison function for browser versions. The function takes a browser parameter and returns a comparator function that accepts two version strings and returns a number indicating their relative order.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.getversioncomparator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getVersionComparator(\n  browser: Browser,\n): (a: string, b: string) => number;\n```\n\n----------------------------------------\n\nTITLE: DeviceRequestPrompt Class Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the DeviceRequestPrompt class exported by Puppeteer. This class is used to interact with device request prompts in a browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.devicerequestprompt.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DeviceRequestPrompt\n```\n\n----------------------------------------\n\nTITLE: Implementing FileChooser Accept Method in TypeScript - Puppeteer\nDESCRIPTION: TypeScript class definition for the FileChooser.accept() method that handles file selection. The method takes an array of file paths as input and returns a Promise<void>. Files paths can be absolute or relative to the current working directory, though absolute paths are required for remote Chrome environments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.accept.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileChooser {\n  accept(paths: string[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Elements with Puppeteer ElementHandle\nDESCRIPTION: Waits for an element matching a specified selector to appear within the current element's subtree. Limited to the current navigation context and requires the element to remain attached to the DOM.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nwaitForSelector(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Checking Service Worker Bypass Status in Puppeteer TypeScript\nDESCRIPTION: Abstract method definition for checking whether service workers are being bypassed on a page. Returns a boolean value indicating if service workers are currently being bypassed (true) or not (false).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.isserviceworkerbypassed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract isServiceWorkerBypassed(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame Navigation Method in TypeScript - Puppeteer\nDESCRIPTION: TypeScript class method definition for Frame.goto() that handles navigation to a specified URL. The method accepts a URL string and optional configuration parameters, returning a Promise that resolves to either an HTTPResponse object or null for same-URL navigations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.goto.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract goto(\n    url: string,\n    options?: GoToOptions,\n  ): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateCPUThrottling Method in TypeScript\nDESCRIPTION: This code snippet defines the emulateCPUThrottling method in the Page class. It takes a factor parameter to set the CPU slowdown and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatecputhrottling.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateCPUThrottling(factor: number | null): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NodeFor Type in TypeScript for Selector Parsing\nDESCRIPTION: Defines a TypeScript type alias called NodeFor that maps complex CSS selector strings to their parsed representation. It uses the ParseSelector generic type to convert selector strings into corresponding TypeScript types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.nodefor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NodeFor<ComplexSelector extends string> =\n  ParseSelector<ComplexSelector>;\n```\n\n----------------------------------------\n\nTITLE: Defining CDPSession Connection Method in TypeScript\nDESCRIPTION: Abstract method definition that returns the underlying connection for a CDP session. The method can return either a Connection object or undefined if no connection exists.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.connection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CDPSession {\n  abstract connection(): Connection | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CDP Session in Puppeteer TypeScript\nDESCRIPTION: Method signature showing how to retrieve a CDP session by its ID from a Connection instance. Returns either a CDPSession object or null if no session exists with the given ID.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connection.session.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  session(sessionId: string): CDPSession | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locator.click() Method in TypeScript\nDESCRIPTION: This code snippet defines the click() method for the Locator class in Puppeteer. It allows clicking on a located element with optional click options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  click<ElementType extends Element>(\n    this: Locator<ElementType>,\n    options?: Readonly<LocatorClickOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Moveable.move Method in TypeScript for Puppeteer\nDESCRIPTION: The interface definition for the Moveable.move() method which moves a resource when it is being used. The method returns the instance itself, allowing for method chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.moveable.move.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Moveable {\n  move(): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Frame.$() Method Signature in TypeScript\nDESCRIPTION: Defines the signature of the Frame.$() method, which takes a selector string and returns a promise that resolves to an ElementHandle of the matching node or null if no match is found. The method uses generic types to provide proper type inference based on the selector used.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame._.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  $<Selector extends string>(\n    selector: Selector,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setOfflineMode Method in TypeScript\nDESCRIPTION: This code snippet defines the setOfflineMode method in the Page class. It takes a boolean parameter to enable or disable offline mode and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setofflinemode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setOfflineMode(enabled: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the HTTPRequest.frame() Method Signature in TypeScript\nDESCRIPTION: Abstract method signature for HTTPRequest.frame() that returns the Frame that initiated the request or null for error pages. This is part of Puppeteer's HTTP request handling API.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.frame.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract frame(): Frame | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.reload() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the reload() method for the Page class in Puppeteer. It accepts optional WaitForOptions and returns a Promise that resolves to an HTTPResponse or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.reload.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract reload(options?: WaitForOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Navigation Requests in Puppeteer TypeScript\nDESCRIPTION: Abstract method implementation that determines whether the current HTTP request is responsible for driving frame navigation. Returns a boolean indicating if the request is a navigation request.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.isnavigationrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract isNavigationRequest(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.url Method in TypeScript\nDESCRIPTION: The abstract method definition for retrieving a frame's URL in the Frame class. This method returns the current URL of the frame as a string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Frame HTML Content with Puppeteer in TypeScript\nDESCRIPTION: This code snippet defines the signature of the content() method in the Frame class. It returns a Promise that resolves to a string containing the full HTML contents of the frame, including the DOCTYPE declaration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.content.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  content(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPRequest.abort Method Signature in TypeScript\nDESCRIPTION: The method signature for the abort() method in the HTTPRequest class. It allows aborting requests with an optional error code and priority parameter for cooperative handling.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.abort.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abort(errorCode?: ErrorCode, priority?: number): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the TouchHandle.end() Method Signature in TypeScript\nDESCRIPTION: This TypeScript interface snippet defines the `end()` method signature within the `TouchHandle` interface provided by the Puppeteer library. The method is asynchronous (`Promise<void>`), takes no arguments, and is used to dispatch a `touchend` event, simulating the release of a touch point on a touch-enabled surface.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.touchhandle.end.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ninterface TouchHandle {\n  end(): Promise<void>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining emulateCPUThrottling Method in Puppeteer's Page Class (TypeScript)\nDESCRIPTION: This code snippet defines the emulateCPUThrottling method in the Page class. It takes a number or null as a parameter to set the CPU throttling factor and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatecputhrottling.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateCPUThrottling(factor: number | null): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the `puppeteer` variable type in TypeScript\nDESCRIPTION: This TypeScript snippet declares the type signature for the `puppeteer` variable. It specifies that the variable is an instance of the `PuppeteerCore.PuppeteerNode` type, indicating it represents the main Puppeteer Node.js interface. This definition is crucial for type checking and IntelliSense in development environments using TypeScript.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npuppeteer: PuppeteerCore.PuppeteerNode;\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setBypassCSP Method Signature in TypeScript\nDESCRIPTION: TypeScript signature for the Page.setBypassCSP method which toggles bypassing of a page's Content-Security-Policy. The method takes a boolean parameter to enable or disable CSP bypassing and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setbypasscsp.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setBypassCSP(enabled: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContext.deleteCookie Method in TypeScript\nDESCRIPTION: TypeScript class definition for the BrowserContext.deleteCookie method which removes specified cookies from the browser context. It accepts one or more Cookie objects as parameters and returns a Promise that resolves when the cookies are deleted.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.deletecookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  deleteCookie(...cookies: Cookie[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.focus() Method in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the focus() method of the ElementHandle class. The method returns a Promise that resolves to void, indicating it's an asynchronous operation that doesn't return a value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.focus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  focus(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.frame() Method in TypeScript\nDESCRIPTION: This code snippet defines the abstract frame() method in the HTTPResponse class. The method returns either a Frame object or null, representing the frame that initiated the response or null for error pages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.frame.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract frame(): Frame | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlattenHandle Utility Type in TypeScript\nDESCRIPTION: A TypeScript utility type that extracts the inner type U from a HandleOr<U> type. It uses conditional type inference to unwrap the inner type from the HandleOr wrapper, returning 'never' if the input type doesn't match the expected pattern.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.flattenhandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FlattenHandle<T> = T extends HandleOr<infer U> ? U : never;\n```\n\n----------------------------------------\n\nTITLE: JSHandle.evaluate TypeScript Method Signature\nDESCRIPTION: The TypeScript signature for the evaluate method in the JSHandle class. This method runs a function with the current handle as its first argument and returns a promise with the result of the function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.evaluate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle Screenshot Binary Implementation\nDESCRIPTION: Implementation of the screenshot method that returns a Uint8Array containing the binary data of the screenshot. Takes optional screenshot options as parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.screenshot.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  screenshot(options?: Readonly<ScreenshotOptions>): Promise<Uint8Array>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer Browsers via CLI\nDESCRIPTION: This bash command demonstrates how to use the Puppeteer CLI to install browsers based on the current configuration. It's useful after updating the configuration file to download new browsers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx puppeteer browsers install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dialog Message in Puppeteer with TypeScript\nDESCRIPTION: Method signature for Dialog.message() which returns the text content of a dialog box. This method belongs to the Dialog class in Puppeteer and returns the message as a string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.dialog.message.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  message(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for computeSystemExecutablePath in Puppeteer\nDESCRIPTION: Defines the TypeScript function signature for computeSystemExecutablePath which takes SystemOptions as a parameter and returns a string containing the path to the Chrome executable.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.computesystemexecutablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function computeSystemExecutablePath(\n  options: SystemOptions,\n): string;\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.timing Method in TypeScript\nDESCRIPTION: Abstract method definition for retrieving timing information related to network responses. Returns a Protocol.Network.ResourceTiming object or null, providing detailed timing metrics for network requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.timing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract timing(): Protocol.Network.ResourceTiming | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the WaitForOptions Interface in Puppeteer (TypeScript)\nDESCRIPTION: This TypeScript code snippet declares the `WaitForOptions` interface. This interface is used to configure various wait operations in Puppeteer, specifying options such as the maximum timeout duration (`timeout`), conditions for considering the wait successful (`waitUntil`), and an optional `AbortSignal` (`signal`) for cancellation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.waitforoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitForOptions\n```\n\n----------------------------------------\n\nTITLE: Defining the PuppeteerNode.trimCache Method Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the signature for the `trimCache` method within the `PuppeteerNode` class. The method takes no arguments and returns a Promise that resolves to void when the cache trimming operation is complete. It's used to clear old browser binaries from the Puppeteer cache based on the current configuration or default revisions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.trimcache.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass PuppeteerNode {\n  trimCache(): Promise<void>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Page.target Method in TypeScript for Puppeteer\nDESCRIPTION: TypeScript class method signature for the Page.target() method that returns a Target object. This method is marked as obsolete and developers are recommended to use Page.createCDPSession() directly instead.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.target.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract target(): Target;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the setEnsureElementIsInTheViewport Method in Puppeteer's Locator Class\nDESCRIPTION: Method signature for setEnsureElementIsInTheViewport, which creates a new locator instance by cloning the current one and specifying whether the element should be scrolled into viewport if not already visible. The default value is true.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.setensureelementisintheviewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setEnsureElementIsInTheViewport<ElementType extends Element>(\n    this: Locator<ElementType>,\n    value: boolean,\n  ): Locator<ElementType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UninstallOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for UninstallOptions that specifies the configuration parameters needed when uninstalling a browser. Includes properties for browser type, build ID, cache directory location, and optional platform specification.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.uninstalloptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UninstallOptions\n```\n\n----------------------------------------\n\nTITLE: Defining PageEvents Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for PageEvents that extends Record<EventType, unknown>, representing the objects received by callback functions for various page events in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.pageevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PageEvents extends Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: Launching Puppeteer and Ignoring Default Arguments in TypeScript\nDESCRIPTION: This TypeScript example demonstrates using the `puppeteer.launch()` method with specific configuration options. It shows how to use the `ignoreDefaultArgs` property within the options object to prevent Puppeteer from adding the default `--mute-audio` command-line argument when launching the browser instance. The launched browser instance is asynchronously obtained and stored in the `browser` variable.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.launch.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nconst browser = await puppeteer.launch({\n  ignoreDefaultArgs: ['--mute-audio'],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining PuppeteerNode.trimCache Method in TypeScript\nDESCRIPTION: This code snippet defines the trimCache method for the PuppeteerNode class. The method removes non-current Firefox and Chrome binaries from the cache directory based on the Puppeteer configuration. It returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.trimcache.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  trimCache(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TargetFilterCallback Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the TargetFilterCallback type as a function that takes a Target object as input and returns a boolean. It is used for filtering targets in Puppeteer operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.targetfiltercallback.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TargetFilterCallback = (target: Target) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining WaitTimeoutOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for WaitTimeoutOptions that specifies configuration options for wait operations in Puppeteer. Includes optional properties for abort signal and timeout duration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waittimeoutoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitTimeoutOptions\n```\n\n----------------------------------------\n\nTITLE: Implementing EventEmitter.emit Method in TypeScript\nDESCRIPTION: Method signature for emitting events and calling associated listeners. Takes an event type and event data as parameters, returns boolean indicating if any listeners were called. Uses generic types for type-safe event handling.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.eventemitter.emit.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  emit<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    event: EventsWithWildcard<Events>[Key],\n  ): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Device Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for Device in Puppeteer. This interface includes properties for setting the userAgent string and viewport configurations needed for device emulation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.device.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Device\n```\n\n----------------------------------------\n\nTITLE: Retrieving Console Message Location in TypeScript with Puppeteer\nDESCRIPTION: This method retrieves the location of a console message in Puppeteer. It returns a ConsoleMessageLocation object that contains information about where the console message originated from.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.consolemessage.location.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  location(): ConsoleMessageLocation;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.cookies() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.cookies() method. It returns a Promise that resolves to an array of Cookie objects. The method can optionally take a variable number of URL strings as parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract cookies(...urls: string[]): Promise<Cookie[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Value from Dialog in TypeScript\nDESCRIPTION: This method returns the default value of a prompt dialog, or an empty string if the dialog is not a prompt. It's part of the Dialog class in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.defaultvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  defaultValue(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.close() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the close() method for the Page class in Puppeteer. It accepts an optional options parameter with a runBeforeUnload property and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract close(options?: {runBeforeUnload?: boolean}): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPRequest Intercept Resolution Method in TypeScript\nDESCRIPTION: Method signature for retrieving the interception resolution state of an HTTP request. Returns an InterceptResolutionState object containing the action (abort, respond, continue, disabled, none, or already-handled) and optional priority number.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.interceptresolutionstate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  interceptResolutionState(): InterceptResolutionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locator.filter() Method Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the filter() method of the Locator class. The method creates an expectation that is evaluated against located values and retries if expectations don't match.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.filter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  filter<S extends T>(predicate: Predicate<T, S>): Locator<S>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.setContent Method in TypeScript\nDESCRIPTION: Abstract method definition for setting HTML content in a frame. Takes HTML markup as a string parameter and optional WaitForOptions configuration. Returns a Promise that resolves when content is set successfully.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.setcontent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract setContent(html: string, options?: WaitForOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Constructor in TypeScript\nDESCRIPTION: This code snippet defines the constructor for the CLI class in Puppeteer. It accepts optional parameters for configuration and a readline interface. The constructor can be called with either a string or an object containing various configuration options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli._constructor_.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CLI {\n  constructor(\n    opts?:\n      | string\n      | {\n          cachePath?: string;\n          scriptName?: string;\n          prefixCommand?: {\n            cmd: string;\n            description: string;\n          };\n          allowCachePathOverride?: boolean;\n          pinnedBrowsers?: Partial<\n            Record<\n              Browser,\n              {\n                buildId: string;\n                skipDownload: boolean;\n              }\n            >\n          >;\n        },\n    rl?: readline.Interface,\n  );\n```\n\n----------------------------------------\n\nTITLE: DeviceRequestPrompt Select Method Definition in TypeScript\nDESCRIPTION: Method signature for selecting a device from a device request prompt. Takes a DeviceRequestPromptDevice parameter and returns a Promise that resolves to void when the selection is complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.devicerequestprompt.select.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DeviceRequestPrompt {\n  select(device: DeviceRequestPromptDevice): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateVisionDeficiency Method Signature in TypeScript\nDESCRIPTION: This snippet presents the TypeScript signature for the `emulateVisionDeficiency` method within the Puppeteer `Page` class. It shows that the method accepts an optional `type` parameter (specifying the vision deficiency) and returns a Promise that resolves when the emulation is applied.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatevisiondeficiency.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Page {\n  abstract emulateVisionDeficiency(\n    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type'],\n  ): Promise<void>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Console Message Types in TypeScript for Puppeteer\nDESCRIPTION: A TypeScript type definition that enumerates all possible console message types supported by Puppeteer. Includes standard logging levels (log, debug, info, error, warn) and special console operations like grouping, profiling, and timing.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessagetype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ConsoleMessageType =\n  | 'log'\n  | 'debug'\n  | 'info'\n  | 'error'\n  | 'warn'\n  | 'dir'\n  | 'dirxml'\n  | 'table'\n  | 'trace'\n  | 'clear'\n  | 'startGroup'\n  | 'startGroupCollapsed'\n  | 'endGroup'\n  | 'assert'\n  | 'profile'\n  | 'profileEnd'\n  | 'count'\n  | 'timeEnd'\n  | 'verbose';\n```\n\n----------------------------------------\n\nTITLE: Defining setBypassServiceWorker Method in Page Class (TypeScript)\nDESCRIPTION: This code snippet defines the setBypassServiceWorker method in the Page class. It takes a boolean parameter to determine whether to bypass the service worker and load from the network. The method returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setbypassserviceworker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setBypassServiceWorker(bypass: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: FileChooser Class Declaration\nDESCRIPTION: TypeScript class declaration for the FileChooser class that handles file selection dialogs.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class FileChooser\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard.down() Method in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the Keyboard.down() method. It takes a key input and optional key down options, and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.down.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract down(\n    key: KeyInput,\n    options?: Readonly<KeyDownOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Worker Instance with Puppeteer TypeScript\nDESCRIPTION: Defines the signature of the worker() method on the Target class in Puppeteer. This asynchronous method returns a Promise resolving to either a WebWorker object if the target represents a \"service_worker\" or \"shared_worker\", or null if it does not. Requires Puppeteer types and expects to be used in scripts that handle Chrome DevTools Protocol targets and workers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.worker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  worker(): Promise<WebWorker | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MouseWheelOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the MouseWheelOptions interface used in Puppeteer. It includes two optional properties: deltaX and deltaY, both of type number, which represent the horizontal and vertical scroll values respectively.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mousewheeloptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MouseWheelOptions {\n  deltaX?: number;\n  deltaY?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dialog Message in Puppeteer TypeScript\nDESCRIPTION: Method signature for the Dialog.message() function that returns the text message displayed in a browser dialog. This is a getter method that returns the message as a string value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.message.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  message(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.target() Method in TypeScript\nDESCRIPTION: The abstract method signature for Browser.target() that returns the target associated with the default browser context. This method is part of the Browser class and returns a Target object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.target.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract target(): Target;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the HTTPResponse.request Method in TypeScript\nDESCRIPTION: This code defines the abstract request() method in the HTTPResponse class that returns the matching HTTPRequest object associated with the response.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.request.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract request(): HTTPRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Puppeteer LifeCycleEvent Type - TypeScript\nDESCRIPTION: Defines the 'PuppeteerLifeCycleEvent' type as a union of specific string literals corresponding to common page lifecycle events in Puppeteer: 'load', 'domcontentloaded', 'networkidle0', and 'networkidle2'. Each option is documented to clarify the condition under which the event is triggered. No external dependencies are required. Intended for use where strongly typed event values can help guide Puppeteer workflow automation, ensuring only valid event names are passed. Inputs and expected outputs are limited to the defined string literals; using unsupported values will result in type errors. No runtime logic is included—this is strictly for compile-time type checking.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteerlifecycleevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PuppeteerLifeCycleEvent =\n  /**\n   * Waits for the 'load' event.\n   */\n  | 'load'\n  /**\n   * Waits for the 'DOMContentLoaded' event.\n   */\n  | 'domcontentloaded'\n  /**\n   * Waits till there are no more than 0 network connections for at least `500`\n   * ms.\n   */\n  | 'networkidle0'\n  /**\n   * Waits till there are no more than 2 network connections for at least `500`\n   * ms.\n   */\n  | 'networkidle2';\n```\n\n----------------------------------------\n\nTITLE: Method Signature for Process.waitForLineOutput in TypeScript\nDESCRIPTION: Defines the signature of the waitForLineOutput method within the Process class. This method accepts a regex pattern to match against process output and an optional timeout value, returning a Promise that resolves to the matched string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.process.waitforlineoutput.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  waitForLineOutput(regex: RegExp, timeout?: number): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the Abstract Target Class - TypeScript\nDESCRIPTION: Declares an abstract TypeScript class named Target, representing a Chrome DevTools Protocol (CDP) target, such as a browser page, frame, or worker. The class is designed as an internal API and should not be instantiated directly by third-party code nor extended outside Puppeteer's scope. Dependencies include Puppeteer's type system and general TypeScript capabilities. The class signature provides the base for concrete implementations and includes multiple documented methods for type checking, session management, and contextual queries. No input/output behavior is defined in this signature declaration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Target\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.reset() Method in TypeScript\nDESCRIPTION: This code snippet defines the abstract reset() method in the Mouse class. The method resets the mouse to its default state with no buttons pressed and position at (0,0). It returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.reset.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract reset(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getDownloadUrl Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the getDownloadUrl function. It takes parameters for browser, platform, buildId, and an optional baseUrl, returning a URL object for downloading the browser binary archive.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.getdownloadurl.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getDownloadUrl(\n  browser: Browser,\n  platform: BrowserPlatform,\n  buildId: string,\n  baseUrl?: string,\n): URL;\n```\n\n----------------------------------------\n\nTITLE: Defining the emit Method in CommonEventEmitter Interface using TypeScript\nDESCRIPTION: TypeScript interface definition for the emit method in CommonEventEmitter. This method emits events of a specific type with associated event data and returns a boolean indicating whether the event had listeners.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.commoneventemitter.emit.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  emit<Key extends keyof Events>(type: Key, event: Events[Key]): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Acceleration for Chrome Headless Shell\nDESCRIPTION: Launches Chrome headless shell with GPU acceleration enabled.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  headless: 'shell',\n  args: ['--enable-gpu'],\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Dialog Type in Puppeteer TypeScript\nDESCRIPTION: Method signature for retrieving the type of a dialog in Puppeteer. Returns a Protocol.Page.DialogType value indicating the type of the current dialog instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.dialog.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  type(): Protocol.Page.DialogType;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Emission in TypeScript EventEmitter\nDESCRIPTION: Method signature for emitting events in an EventEmitter class. Takes an event type and event data as parameters, returns a boolean indicating if there were any listeners. Uses generic types for type-safe event handling.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.emit.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  emit<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    event: EventsWithWildcard<Events>[Key],\n  ): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContext.setCookie() Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the abstract setCookie method within the BrowserContext class. This method sets cookies in the browser context and accepts multiple CookieData objects as parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.setcookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract setCookie(...cookies: CookieData[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.$$eval Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.$$eval method. It defines the method's generic types and parameters, allowing for type-safe evaluation of elements matching a selector.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.__eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  $$eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<\n      Array<NodeFor<Selector>>,\n      Params\n    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,\n  >(\n    selector: Selector,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenRecorder Class in TypeScript\nDESCRIPTION: Class declaration for ScreenRecorder that extends the PassThrough class. This class is marked as internal and should not be instantiated directly by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screenrecorder.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ScreenRecorder extends PassThrough\n```\n\n----------------------------------------\n\nTITLE: Defining Page.bringToFront Method in TypeScript\nDESCRIPTION: This code snippet defines the bringToFront() method in the Page class. The method is asynchronous and returns a Promise that resolves to void. It is used to bring the page to the front, activating its tab in the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.bringtofront.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract bringToFront(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardTypeOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies configuration options for keyboard typing operations in Puppeteer. Includes an optional delay property of type number to control the time between keystrokes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboardtypeoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyboardTypeOptions\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPRequest.headers method in TypeScript for Puppeteer\nDESCRIPTION: Abstract method definition for retrieving HTTP headers associated with a request. This method returns all header names in lowercase as a Record<string, string> object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.headers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract headers(): Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.bringToFront Method in TypeScript\nDESCRIPTION: This code snippet defines the bringToFront method for the Page class in Puppeteer. The method is asynchronous and returns a Promise that resolves to void. It is used to bring a page to the front, effectively activating its tab in the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.bringtofront.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract bringToFront(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.select Method Signature in TypeScript\nDESCRIPTION: TypeScript class definition showing the signature of the select() method in the Frame class. The method accepts a selector string and variable number of value strings to select.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.select.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  select(selector: string, ...values: string[]): Promise<string[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser.wsEndpoint Method in TypeScript\nDESCRIPTION: Abstract method definition for retrieving the WebSocket endpoint URL of a browser instance. The method returns a string in the format 'ws://HOST:PORT/devtools/browser/<id>' which can be used with Puppeteer.connect() to connect to an existing browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.wsendpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract wsEndpoint(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring DeviceRequestPrompt Class in TypeScript\nDESCRIPTION: TypeScript class declaration for DeviceRequestPrompt, which is used to handle device request prompts in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DeviceRequestPrompt\n```\n\n----------------------------------------\n\nTITLE: Declaring PageEvent Enum in TypeScript\nDESCRIPTION: Declaration of the PageEvent enum which contains all possible events a Puppeteer page instance can emit. This enum is used to type-safely reference page events in Puppeteer code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.pageevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare const enum PageEvent\n```\n\n----------------------------------------\n\nTITLE: Defining computeSystemExecutablePath Function in TypeScript\nDESCRIPTION: This function takes SystemOptions as a parameter and returns a string representing the path to the Chrome executable. It checks known installation locations and throws an error if Chrome is not found at the expected path.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.computesystemexecutablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function computeSystemExecutablePath(\n  options: SystemOptions,\n): string;\n```\n\n----------------------------------------\n\nTITLE: Defining MouseOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the MouseOptions interface in TypeScript. It specifies the structure for mouse event options in Puppeteer, including the button to be pressed and the click count.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouseoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MouseOptions\n```\n\n----------------------------------------\n\nTITLE: Defining the Touchscreen.touchStart Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet shows the abstract method signature for `Touchscreen.touchStart`. It requires 'x' and 'y' coordinates (numbers) as input to specify the touch position and returns a Promise that resolves to a `TouchHandle` object, representing the started touch point. This abstract method declaration defines the contract for implementing the dispatch of a `touchstart` event in concrete subclasses.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.touchscreen.touchstart.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Touchscreen {\n  abstract touchStart(x: number, y: number): Promise<TouchHandle>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining JSCoverageEntry Interface in TypeScript\nDESCRIPTION: This code snippet defines the JSCoverageEntry interface, which extends the CoverageEntry interface. It includes an optional property 'rawScriptCoverage' of type Protocol.Profiler.ScriptCoverage, representing raw V8 script coverage entry.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jscoverageentry.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface JSCoverageEntry extends CoverageEntry {\n  rawScriptCoverage?: Protocol.Profiler.ScriptCoverage;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Certificate Issuer with SecurityDetails - Puppeteer - TypeScript\nDESCRIPTION: Defines a method issuer() within the SecurityDetails class in Puppeteer that returns the name of the SSL certificate issuer. No external dependencies are required beyond Puppeteer. The method takes no parameters and returns a string corresponding to the issuer's name. The primary output is the issuer name as a string, and this method should be invoked within contexts where a SecurityDetails instance is available.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.securitydetails.issuer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecurityDetails {\n  issuer(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Coverage.startJSCoverage Method Signature in TypeScript\nDESCRIPTION: Defines the TypeScript method signature for the startJSCoverage method that initiates JavaScript coverage tracking. The method accepts optional JSCoverageOptions and returns a Promise that resolves when coverage starts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.startjscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Coverage {\n  startJSCoverage(options?: JSCoverageOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.move() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the abstract move() method in the Mouse class. It takes x and y coordinates as required parameters and an optional MouseMoveOptions object. The method returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.move.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract move(\n    x: number,\n    y: number,\n    options?: Readonly<MouseMoveOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.dragOver() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the dragOver() method in the Mouse class. It takes a target point and drag data as parameters, and returns a Promise that resolves to void. The method is used to dispatch a 'dragover' event in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.dragover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract dragOver(\n    target: Point,\n    data: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDPSessionEvents Interface in TypeScript\nDESCRIPTION: Interface definition for CDPSessionEvents that extends CDPEvents and Record<EventType, unknown>. Includes properties for session attachment and detachment events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsessionevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CDPSessionEvents extends CDPEvents, Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setContent() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.setContent() method. It takes an HTML string and optional WaitForOptions, and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setcontent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  setContent(html: string, options?: WaitForOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebWorker.evaluateHandle() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the evaluateHandle() method for the WebWorker class. It uses generic types to handle various function parameters and return types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.evaluatehandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebWorker {\n  evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    func: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the MouseButton Enum in Typescript for Puppeteer\nDESCRIPTION: This TypeScript snippet defines a readonly MouseButton enum that contains string constants for the five standard mouse buttons: Left, Right, Middle, Back, and Forward. These values can be used in Puppeteer's mouse interaction methods.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mousebutton.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nMouseButton: Readonly<{\n  Left: 'left';\n  Right: 'right';\n  Middle: 'middle';\n  Back: 'back';\n  Forward: 'forward';\n}>;\n```\n\n----------------------------------------\n\nTITLE: Dismissing Dialogs using Dialog.dismiss() in Puppeteer (TypeScript)\nDESCRIPTION: The Dialog.dismiss() method is used to dismiss dialogs in Puppeteer. It returns a Promise that resolves once the dialog has been dismissed. This method is part of the Dialog class in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.dialog.dismiss.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  dismiss(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser.defaultBrowserContext Method in TypeScript\nDESCRIPTION: Abstract method definition for getting the default browser context in Puppeteer's Browser class. This method returns a BrowserContext instance that cannot be closed as noted in the remarks.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.defaultbrowsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract defaultBrowserContext(): BrowserContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Service Worker Bypass Status in Puppeteer (TypeScript)\nDESCRIPTION: The isServiceWorkerBypassed() method is part of the Page class in Puppeteer. It returns a boolean value indicating whether service workers are being bypassed (true) or not (false). This method can be useful for debugging or verifying the behavior of service workers in automated browser tests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.isserviceworkerbypassed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract isServiceWorkerBypassed(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Process.kill Method in TypeScript\nDESCRIPTION: A TypeScript class method definition for Process.kill(). This method is used to terminate a process and returns void, meaning it doesn't return any value after execution.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.process.kill.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  kill(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.postData() Method in TypeScript\nDESCRIPTION: This code snippet defines the postData() method for the HTTPRequest class. The method returns the request's post body as a string if it exists, or undefined if there is no post body.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.postdata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract postData(): string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EventEmitter.once Method in TypeScript\nDESCRIPTION: Defines the once() method signature for EventEmitter class. This method registers a one-time event listener that automatically removes itself after being triggered once. Takes an event type and handler function as parameters, returns the EventEmitter instance for method chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.eventemitter.once.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  once<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    handler: Handler<EventsWithWildcard<Events>[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring WebDriver BiDi WebSocket Endpoint Regex in TypeScript\nDESCRIPTION: Defines a constant regular expression pattern used to match WebDriver BiDi WebSocket endpoints. This is a TypeScript type declaration showing the constant is of type RegExp.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.webdriver_bidi_websocket_endpoint_regex.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nWEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX: RegExp;\n```\n\n----------------------------------------\n\nTITLE: Defining ChromeReleaseChannel Enum in TypeScript\nDESCRIPTION: This code snippet defines an enumeration that represents the different release channels available for Chrome. It includes STABLE, BETA, DEV, and CANARY channels which can be used when launching or connecting to Chrome instances in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.chromereleasechannel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum ChromeReleaseChannel\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTTP Response Status Code in Puppeteer (TypeScript)\nDESCRIPTION: This code snippet defines the abstract status() method in the HTTPResponse class. It returns the status code of an HTTP response as a number, such as 200 for a successful request.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.status.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract status(): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring DeviceRequestPromptDevice Class in TypeScript for Puppeteer\nDESCRIPTION: TypeScript declaration for the DeviceRequestPromptDevice class in Puppeteer. This class represents a device in a request prompt and contains properties for device id and name.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.devicerequestpromptdevice.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DeviceRequestPromptDevice\n```\n\n----------------------------------------\n\nTITLE: Checking Drag Interception Status in Puppeteer (TypeScript)\nDESCRIPTION: This method, now obsolete, returns a boolean indicating whether drag events are being intercepted. It is part of the Page class in Puppeteer. Users are advised to use new drag APIs on ElementHandle or Page.mouse instead.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.isdraginterceptionenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract isDragInterceptionEnabled(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Coverage Class Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Coverage class export declaration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.coverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Coverage\n```\n\n----------------------------------------\n\nTITLE: Defining Page.url Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the Page.url() method signature. The method returns a string containing the page's current URL. This is implemented as a shortcut to access the URL of the page's main frame.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SecurityDetails.validFrom() Method in TypeScript\nDESCRIPTION: This code snippet defines the validFrom() method in the SecurityDetails class. The method returns a number representing the Unix timestamp marking the start of the certificate's validity.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.validfrom.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecurityDetails {\n  validFrom(): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setViewport Method Signature in Typescript\nDESCRIPTION: Provides the Typescript signature for the abstract `setViewport` method within the Puppeteer `Page` class. It accepts a `Viewport` object or `null` as input to define the page dimensions and returns a Promise that resolves when the viewport is set. Setting viewport to `null` resets it to the default.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setviewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Page {\n  abstract setViewport(viewport: Viewport | null): Promise<void>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the WaitForNetworkIdleOptions Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `WaitForNetworkIdleOptions` interface, which extends the `WaitTimeoutOptions` interface. It provides configuration options for waiting for network idleness in Puppeteer, specifically defining optional properties `concurrency` (maximum concurrent connections considered inactive, default 0) and `idleTime` (duration in milliseconds the network must be idle, default 500).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.waitfornetworkidleoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitForNetworkIdleOptions extends WaitTimeoutOptions\n```\n\n----------------------------------------\n\nTITLE: Defining CSSCoverage Class in TypeScript\nDESCRIPTION: This snippet defines the CSSCoverage class exported by Puppeteer. It includes the class signature, indicating that it's a TypeScript declaration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CSSCoverage\n```\n\n----------------------------------------\n\nTITLE: Implementing ElementHandle.isHidden Method in Typescript\nDESCRIPTION: This code shows the signature of the isHidden method in the ElementHandle class. The method returns a Promise resolving to a boolean indicating whether the element is hidden based on computed styles, bounding client rect, and visibility properties.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.ishidden.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  isHidden(): Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Navigation Request in Puppeteer using TypeScript\nDESCRIPTION: This method is part of the HTTPRequest class in Puppeteer. It returns a boolean value indicating whether the request is the driver of the current frame's navigation. This is useful for identifying primary navigation requests versus other types of requests made during page loading.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.isnavigationrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract isNavigationRequest(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.close method signature in Typescript\nDESCRIPTION: The abstract method signature for Browser.close() that returns a Promise resolving to void. This method closes the browser instance and all associated pages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract close(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-based Locator in Puppeteer\nDESCRIPTION: Class definition for the function-based Frame.locator() method. This implementation creates a locator from a function that returns an Awaitable value, allowing for custom element location logic.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.locator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Locators with Functions in Puppeteer (TypeScript)\nDESCRIPTION: This code snippet shows the signature for creating a locator with a function in Puppeteer's Frame class. It accepts a function that returns an Awaitable value and returns a Locator object typed with the return type of the function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.locator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser.disconnect Method in TypeScript with Puppeteer\nDESCRIPTION: This code snippet shows the TypeScript signature for the disconnect() method in the Browser class. It's an abstract method that returns a Promise resolving to void, used to disconnect Puppeteer from the browser while leaving the process running.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.disconnect.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract disconnect(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileChooser.isMultiple Method in TypeScript\nDESCRIPTION: Method signature for the isMultiple() function in the FileChooser class. Returns a boolean indicating whether multiple file selection is allowed for the file input element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.filechooser.ismultiple.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileChooser {\n  isMultiple(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SecurityDetails.validTo Method Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the signature for the `validTo()` method within the `SecurityDetails` class in Puppeteer. The method requires no parameters and is designed to return a number representing the Unix timestamp when the security certificate's validity period ends.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.securitydetails.validto.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass SecurityDetails {\n  validTo(): number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: CSSCoverageOptions Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for CSSCoverageOptions, which is used to configure CSS coverage tracking in Puppeteer. It currently contains a single optional property to control whether coverage should reset on navigation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.csscoverageoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CSSCoverageOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.press Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.press method. It takes a key input and optional press options, returning a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.press.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  press(key: KeyInput, options?: Readonly<KeyPressOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.content Method in TypeScript\nDESCRIPTION: Abstract method definition for retrieving response body content as a Uint8Array buffer. The method returns a Promise that resolves to the response body. Note that the returned buffer may be re-encoded by the browser based on HTTP headers or heuristics, potentially leading to incorrect encoding.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.content.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract content(): Promise<Uint8Array>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring touchMove Method in Puppeteer Touchscreen - TypeScript\nDESCRIPTION: This TypeScript snippet defines the touchMove method within the Touchscreen class in Puppeteer. The method takes two numeric parameters, x and y, which specify the horizontal and vertical coordinates for the touch move event, respectively. It returns a Promise that resolves when the dispatch has completed; the method may not trigger an actual event for every invocation due to browser optimizations such as event throttling. The snippet requires Puppeteer with touch emulation capabilities and TypeScript for type checking.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.touchscreen.touchmove.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Touchscreen {\n  touchMove(x: number, y: number): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle.evaluateHandle Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the evaluateHandle method for the JSHandle class. It uses generic types to handle various function parameters and return types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.evaluatehandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard.up() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Keyboard.up() method. It takes a KeyInput parameter and returns a Promise<void>. The method is part of the abstract Keyboard class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.up.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract up(key: KeyInput): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving URL from HTTPResponse in TypeScript\nDESCRIPTION: Abstract method definition for retrieving the URL of an HTTP response. This method is implemented by HTTPResponse class and returns the string URL of the response.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the setDefaultTimeout method in Puppeteer's Page class\nDESCRIPTION: TypeScript signature for the setDefaultTimeout method that allows setting a default timeout for all operations on a page. The method takes a timeout parameter specified in milliseconds and returns void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setdefaulttimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setDefaultTimeout(timeout: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebWorkers in Puppeteer using Page.workers() method\nDESCRIPTION: This snippet shows the signature of the Page.workers() method in Puppeteer. It returns an array of WebWorker objects associated with the page. The method is part of the Page class and does not include ServiceWorkers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.workers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract workers(): WebWorker[];\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching POST Data from HTTP Request in Puppeteer (TypeScript)\nDESCRIPTION: This method fetches the POST data for an HTTP request from the browser. It is an abstract method in the HTTPRequest class, returning a Promise that resolves to either a string containing the POST data or undefined if no data is available.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.fetchpostdata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract fetchPostData(): Promise<string | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.fromServiceWorker Method in TypeScript\nDESCRIPTION: This code snippet defines the fromServiceWorker() method in the HTTPResponse class. The method returns a boolean indicating whether the response was served by a service worker.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.fromserviceworker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract fromServiceWorker(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceType Method in HTTPRequest Class\nDESCRIPTION: Abstract method definition for retrieving the resource type of an HTTP request. The method returns a ResourceType enum value indicating how the rendering engine categorized the requested resource.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.resourcetype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract resourceType(): ResourceType;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EventEmitter.off Method in TypeScript\nDESCRIPTION: TypeScript class method definition for EventEmitter's off() method, which removes event listeners. The method takes an event type and an optional handler function, returning the EventEmitter instance to allow method chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.off.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  off<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    handler?: Handler<EventsWithWildcard<Events>[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target URL Retrieval in Puppeteer (TypeScript)\nDESCRIPTION: This snippet defines the abstract url method within the Target class, which when implemented, returns the URL of a specific browser target in Puppeteer. No external dependencies beyond Puppeteer and TypeScript are required. The method is abstract, meaning concrete subclasses must implement it to return a string representing the target's URL; no parameters are required and it does not handle errors or perform network requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Process Class Definition in TypeScript\nDESCRIPTION: TypeScript declaration for the Process class export in Puppeteer. This defines the class signature that is used to manage browser processes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.process.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Process\n```\n\n----------------------------------------\n\nTITLE: Defining Offline Mode Control with Puppeteer API in TypeScript\nDESCRIPTION: Defines an abstract class method in TypeScript for enabling or disabling offline mode on a Puppeteer Page. This method, setOfflineMode, takes a boolean parameter enabled and returns a Promise that resolves to void. The snippet relies on the Puppeteer API and serves as a contract for implementations; it does not itself implement any logic but describes how clients or extensions should provide the method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setofflinemode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setOfflineMode(enabled: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Point Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a Point type that contains x and y coordinate properties as numbers. Used in Puppeteer for representing 2D coordinates.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.point.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Point\n```\n\n----------------------------------------\n\nTITLE: Defining LocatorScrollOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the LocatorScrollOptions interface, which extends ActionOptions. It includes optional properties for scrollLeft and scrollTop to control scroll positioning.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locatorscrolloptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LocatorScrollOptions extends ActionOptions\n{\n    scrollLeft?: number;\n    scrollTop?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter.on Method Signature in TypeScript\nDESCRIPTION: This TypeScript interface definition shows the on() method signature for the CommonEventEmitter interface. The method registers an event handler for a specific event type and returns the event emitter instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.on.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): this;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.screenshot() Method Returning Base64 String in TypeScript\nDESCRIPTION: Defines the signature for the ElementHandle.screenshot() method that returns a base64 encoded string. This version requires the options parameter with encoding explicitly set to 'base64'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.screenshot.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  screenshot(\n    options: Readonly<ScreenshotOptions> & {\n      encoding: 'base64';\n    },\n  ): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Certificate Subject Name - TypeScript\nDESCRIPTION: Method signature for getting the name of the subject to which the certificate was issued. Returns a string containing the subject name from the certificate details.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.subjectname.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecurityDetails {\n  subjectName(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard.type Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Keyboard.type method. It takes a text string and optional KeyboardTypeOptions, returning a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract type(\n    text: string,\n    options?: Readonly<KeyboardTypeOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkConditions Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the NetworkConditions interface in TypeScript for Puppeteer. It includes properties for download speed, latency, and upload speed, all of which are numbers representing bytes per second or milliseconds.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.networkconditions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NetworkConditions {\n  download: number;\n  latency: number;\n  upload: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConsoleMessage Class Signature in TypeScript\nDESCRIPTION: TypeScript declaration for the ConsoleMessage class in Puppeteer. This class is used to represent console messages dispatched by a page through the 'console' event.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ConsoleMessage\n```\n\n----------------------------------------\n\nTITLE: Defining Page.queryObjects() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.queryObjects() method in the Page class. It takes a JSHandle of a prototype and returns a Promise resolving to a JSHandle of an array of objects with that prototype.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.queryobjects.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract queryObjects<Prototype>(\n    prototypeHandle: JSHandle<Prototype>,\n  ): Promise<JSHandle<Prototype[]>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Timeout in Puppeteer Page Class\nDESCRIPTION: The abstract method signature for getDefaultTimeout() in the Page class. This method returns the maximum time in milliseconds configured as the default timeout for the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.getdefaulttimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract getDefaultTimeout(): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if HTTP Request Intercept Resolution is Handled in Puppeteer\nDESCRIPTION: This method determines whether the intercept resolution for an HTTP request has already been handled. It returns true if the resolution is already handled, and false otherwise. This is useful when implementing request interception logic.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.isinterceptresolutionhandled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  isInterceptResolutionHandled(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Process.close() Method Signature in TypeScript\nDESCRIPTION: Defines the close() method in the Process class which returns a Promise that resolves to void. This method is used to close a process in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.process.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  close(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Geolocation Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature of the Page.setGeolocation method, which defines how to set a page's geolocation in Puppeteer. It accepts a GeolocationOptions object and returns a Promise that resolves when the operation completes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setgeolocation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setGeolocation(options: GeolocationOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.request() Method in TypeScript\nDESCRIPTION: This code snippet defines the abstract request() method in the HTTPResponse class. The method returns a matching HTTPRequest object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.request.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract request(): HTTPRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: EventEmitter.listenerCount Method Implementation in TypeScript\nDESCRIPTION: Method signature for the EventEmitter.listenerCount() method that gets the number of listeners for a given event type. It accepts an event name and returns the count of listeners for that event as a number.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.listenercount.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  listenerCount(type: keyof EventsWithWildcard<Events>): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementScreenshotOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for ElementScreenshotOptions that extends ScreenshotOptions. It includes an optional scrollIntoView property which defaults to true when taking screenshots of elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementscreenshotoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ElementScreenshotOptions extends ScreenshotOptions\n```\n\n----------------------------------------\n\nTITLE: Mouse.drop Method Signature in Puppeteer\nDESCRIPTION: The abstract method signature for the Mouse.drop method in Puppeteer. It takes a target point and drag data as parameters and returns a Promise that resolves to void. This method performs dragenter, dragover, and drop operations in sequence.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.drop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract drop(target: Point, data: Protocol.Input.DragData): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser Instance from BrowserContext in Puppeteer TypeScript\nDESCRIPTION: Abstract method signature for retrieving the Browser instance associated with a BrowserContext. This method allows accessing the parent Browser object from a BrowserContext instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract browser(): Browser;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.hover() method signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the hover() method for the ElementHandle class. The method takes no parameters and returns a Promise<void>. It is designed to scroll the element into view if needed and then hover over its center using the Page.mouse API.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.hover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  hover(this: ElementHandle<Element>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulateTimezone() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the emulateTimezone() method in the Page class. The method takes an optional timezoneId parameter of type string and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.emulatetimezone.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract emulateTimezone(timezoneId?: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the AwaitableIterable Type in TypeScript\nDESCRIPTION: Creates a union type that represents either a synchronous Iterable<T> or an asynchronous AsyncIterable<T>. This allows Puppeteer functions to accept both regular iterables and promise-based async iterables for more flexible API design.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.awaitableiterable.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AwaitableIterable<T> = Iterable<T> | AsyncIterable<T>;\n```\n\n----------------------------------------\n\nTITLE: Defining Page.emulate() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.emulate() method. It takes a Device object as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  emulate(device: Device): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EventEmitter.removeAllListeners Method in TypeScript\nDESCRIPTION: Method signature for removeAllListeners() in the EventEmitter class. It accepts an optional event type parameter and returns the instance for method chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.eventemitter.removealllisteners.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  removeAllListeners(type?: keyof EventsWithWildcard<Events>): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Typed Property from JSHandle in TypeScript\nDESCRIPTION: This signature allows for type-safe property access from a JSHandle object. It accepts a property name and returns a Promise that resolves to a HandleFor wrapper containing the property value with proper type inference.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.getproperty.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  getProperty<K extends keyof T>(\n    propertyName: HandleOr<K>,\n  ): Promise<HandleFor<T[K]>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter.once() Method Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the CommonEventEmitter.once() method. It registers a handler that will be invoked only once when the specified event type is emitted. The method is generic, allowing type-safe event handling based on the Events type parameter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.once.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  once<Key extends keyof Events>(\n    type: Key,\n    handler: Handler<Events[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BoxModel Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for BoxModel in Puppeteer. This interface represents the CSS box model of a DOM element with properties for border, content, margin, padding dimensions as well as width and height.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.boxmodel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BoxModel\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.browserContexts Method in TypeScript\nDESCRIPTION: Abstract method signature for browserContexts() in the Browser class that returns an array of BrowserContext objects. In a newly-created browser, this will return a single instance of BrowserContext.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.browsercontexts.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract browserContexts(): BrowserContext[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the HTTPRequest.fetchPostData Method in TypeScript\nDESCRIPTION: Abstract method signature for fetchPostData() in the HTTPRequest class. This method retrieves the POST data for an HTTP request from the browser and returns a Promise that resolves to either a string containing the POST data or undefined.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.fetchpostdata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract fetchPostData(): Promise<string | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Target Type Method in Puppeteer TypeScript\nDESCRIPTION: Abstract method definition for Target.type() that returns the type of target being interacted with in Puppeteer. This method is part of the Target class and returns a TargetType enum value that identifies what kind of target is being handled.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract type(): TargetType;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the statusText method in HTTPResponse class in TypeScript\nDESCRIPTION: This code snippet defines the signature of the statusText method which returns the status text of an HTTP response (e.g., 'OK' for a success). The method is declared as abstract in the HTTPResponse class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.statustext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract statusText(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser Close Method in TypeScript\nDESCRIPTION: Abstract method definition for closing a browser instance in Puppeteer. The method returns a Promise that resolves when the browser and all its associated pages have been closed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract close(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener Binding in TypeScript with EventEmitter.on\nDESCRIPTION: This code snippet shows the TypeScript definition of the EventEmitter.on method. It binds an event listener function to fire when a specific event occurs, supporting event types that can be either strings or symbols.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.on.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  on<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    handler: Handler<EventsWithWildcard<Events>[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TargetFilterCallback Type Alias in TypeScript\nDESCRIPTION: This TypeScript code defines the `TargetFilterCallback` type alias. It specifies the signature for a function that accepts a Puppeteer `Target` object as an argument and must return a boolean. This type is commonly used in Puppeteer functions that need to filter targets based on certain criteria. The function implementation should return `true` to keep the target and `false` to discard it. It depends on the `Target` type defined elsewhere in the Puppeteer library (referenced as `./puppeteer.target.md`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.targetfiltercallback.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TargetFilterCallback = (target: Target) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining EvaluateFuncWith Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the EvaluateFuncWith type, which is a generic function type used for evaluation in Puppeteer. It takes two type parameters V and T, and returns an Awaitable<unknown>. The function parameters include V and the spread of InnerParams<T>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.evaluatefuncwith.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EvaluateFuncWith<V, T extends unknown[]> = (\n  ...params: [V, ...InnerParams<T>]\n) => Awaitable<unknown>;\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Usage with npx\nDESCRIPTION: Shows how to run the CLI using npx to access help documentation and basic commands.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @puppeteer/browsers --help\n```\n\n----------------------------------------\n\nTITLE: Defining the Point Interface in TypeScript\nDESCRIPTION: This TypeScript code snippet declares the `Point` interface. It specifies that an object of type `Point` must have `x` and `y` properties, both of type `number`. This interface is used to represent 2D coordinates, commonly used in UI automation tasks like clicking or positioning elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.point.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Point\n```\n\n----------------------------------------\n\nTITLE: Defining the Page.setExtraHTTPHeaders method signature in TypeScript\nDESCRIPTION: The TypeScript signature of the setExtraHTTPHeaders method in the Page class. It takes a record of string key-value pairs representing HTTP headers and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setextrahttpheaders.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setExtraHTTPHeaders(headers: Record<string, string>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.down() Method in TypeScript\nDESCRIPTION: The method signature for the Mouse.down() method in Puppeteer's Mouse class. It accepts an optional MouseOptions object parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.down.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract down(options?: Readonly<MouseOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalNetworkConditions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for InternalNetworkConditions which extends the NetworkConditions interface in Puppeteer. It adds the offline boolean property to the base interface.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.internalnetworkconditions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InternalNetworkConditions extends NetworkConditions\n```\n\n----------------------------------------\n\nTITLE: Keyboard Class Declaration in TypeScript\nDESCRIPTION: Abstract class declaration for Puppeteer's Keyboard implementation. This class is marked as internal and should not be instantiated directly.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Keyboard\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setCacheEnabled Method in TypeScript\nDESCRIPTION: This code snippet defines the setCacheEnabled method for the Page class in Puppeteer. The method toggles ignoring cache for each request based on the enabled state, with caching enabled by default. It takes an optional boolean parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setcacheenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setCacheEnabled(enabled?: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connection.url() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the url() method for the Connection class in Puppeteer. The method takes no parameters and returns a string representing the URL of the connection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the isClosed method in Puppeteer's Page class\nDESCRIPTION: Abstract method signature for the isClosed() method in the Page class. This method returns a boolean value that indicates whether the page has been closed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.isclosed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract isClosed(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target Class Signature in TypeScript\nDESCRIPTION: This snippet defines the abstract Target class in TypeScript. It represents a CDP target that can be debugged, such as a frame, page, or worker.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Target\n```\n\n----------------------------------------\n\nTITLE: CDPSession.send() Method Signature in TypeScript\nDESCRIPTION: Defines the abstract send() method in the CDPSession class which enables sending commands to the Chrome DevTools Protocol. The method is generic and typed to work with the protocol mapping to ensure type safety for commands, parameters, and return values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsession.send.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CDPSession {\n  abstract send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    params?: ProtocolMapping.Commands[T]['paramsType'][0],\n    options?: CommandOptions,\n  ): Promise<ProtocolMapping.Commands[T]['returnType']>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stack Trace Locations from Console Messages in Puppeteer\nDESCRIPTION: The stackTrace() method returns an array of ConsoleMessageLocation objects that represent the stack trace of a console message in Puppeteer. This method is part of the ConsoleMessage class and can be used for debugging purposes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.consolemessage.stacktrace.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  stackTrace(): ConsoleMessageLocation[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPRequest.interceptResolutionState Method in TypeScript\nDESCRIPTION: Method signature for interceptResolutionState() that returns an InterceptResolutionState object containing the current resolution action (abort, respond, continue, disabled, none, or already-handled) and optional priority number.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.interceptresolutionstate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  interceptResolutionState(): InterceptResolutionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target.worker() Method in TypeScript\nDESCRIPTION: Defines the worker() method on the Target class. This method returns a Promise that resolves to either a WebWorker object or null, depending on the target type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.worker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  worker(): Promise<WebWorker | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CookiePriority Type in TypeScript\nDESCRIPTION: Defines a TypeScript type representing cookie priority levels following the IETF draft specification at https://tools.ietf.org/html/draft-west-cookie-priority-00. The type allows for three possible string values: 'Low', 'Medium', or 'High'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiepriority.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CookiePriority = 'Low' | 'Medium' | 'High';\n```\n\n----------------------------------------\n\nTITLE: CSSCoverage.start Method Implementation in TypeScript\nDESCRIPTION: The signature for the CSSCoverage.start method which begins collecting CSS coverage information. It accepts an optional options object that can include a resetOnNavigation flag. The method returns a Promise that resolves when coverage collection has started.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.csscoverage.start.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CSSCoverage {\n  start(options?: {resetOnNavigation?: boolean}): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.redirectChain Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the redirectChain() method in the HTTPRequest class. It returns an array of HTTPRequest objects representing the chain of redirects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.redirectchain.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract redirectChain(): HTTPRequest[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle.getProperties Method Signature\nDESCRIPTION: TypeScript class definition showing the signature of the getProperties method that returns a Promise of a Map containing string keys and JSHandle values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.getproperties.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  getProperties(): Promise<Map<string, JSHandle>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPResponse.fromCache Method in TypeScript\nDESCRIPTION: This code snippet defines the fromCache method signature in the HTTPResponse class. The method returns a boolean indicating whether the response was served from the browser's disk or memory cache.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.fromcache.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract fromCache(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing hasPostData Method in TypeScript\nDESCRIPTION: Abstract method definition for checking if an HTTP request contains POST data. Returns a boolean indicating whether the request has POST data, though the actual data might need to be accessed through postData() or fetchPostData() methods if it's too long or not readily available in decoded form.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.haspostdata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract hasPostData(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BoundingBox Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for BoundingBox that extends Point interface and includes width and height properties for representing element dimensions in pixels.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.boundingbox.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BoundingBox extends Point\n```\n\n----------------------------------------\n\nTITLE: Defining JSCoverage.start() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the start() method in the JSCoverage class. It includes optional parameters for configuring JavaScript coverage collection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jscoverage.start.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSCoverage {\n  start(options?: {\n    resetOnNavigation?: boolean;\n    reportAnonymousScripts?: boolean;\n    includeRawScriptCoverage?: boolean;\n    useBlockCoverage?: boolean;\n  }): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.securityDetails Method in TypeScript\nDESCRIPTION: This code snippet defines the securityDetails method for the HTTPResponse class. The method returns either a SecurityDetails object or null, depending on whether the response was received over a secure connection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.securitydetails.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract securityDetails(): SecurityDetails | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tracing.stop Method in TypeScript\nDESCRIPTION: Defines the stop() method signature for the Tracing class that ends a trace session. Returns a Promise that resolves to a Uint8Array containing the trace data, or undefined if no trace data is available.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracing.stop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Tracing {\n  stop(): Promise<Uint8Array | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connection.fromSession Static Method in TypeScript\nDESCRIPTION: Static method signature for creating a Connection from a CDPSession. The method takes a CDPSession parameter and returns either a Connection instance or undefined.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connection.fromsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  static fromSession(session: CDPSession): Connection | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SecurityDetails.validFrom() Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet shows the signature for the `validFrom()` method within the `SecurityDetails` class. The method takes no parameters and returns a `number` representing the Unix timestamp when the associated SSL certificate's validity period begins. It's used to check the start date of a certificate's validity.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.securitydetails.validfrom.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass SecurityDetails {\n  validFrom(): number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Canceling a Device Request Prompt in TypeScript with Puppeteer\nDESCRIPTION: This code shows the signature of the cancel method in the DeviceRequestPrompt class. The method is used to cancel a device request prompt (such as USB, Bluetooth, or other device access requests) and returns a Promise that resolves to void once the prompt is canceled.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.devicerequestprompt.cancel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DeviceRequestPrompt {\n  cancel(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SupportedBrowser Type in TypeScript for Puppeteer\nDESCRIPTION: This snippet defines the SupportedBrowser type as a union of string literals 'chrome' and 'firefox'. It represents the browsers that are officially supported by Puppeteer for automation and testing purposes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.supportedbrowser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SupportedBrowser = 'chrome' | 'firefox';\n```\n\n----------------------------------------\n\nTITLE: Launching Puppeteer with Custom Arguments in TypeScript\nDESCRIPTION: This example demonstrates how to use the launch() method with custom options. It shows how to filter out the '--mute-audio' argument from the default launch arguments using the ignoreDefaultArgs option.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.launch.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  ignoreDefaultArgs: ['--mute-audio'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CookieSameSite Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the CookieSameSite type as a union of three string literals: 'Strict', 'Lax', and 'None'. It represents the possible values for a cookie's 'SameSite' attribute as described in the IETF draft for first-party cookies.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiesamesite.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CookieSameSite = 'Strict' | 'Lax' | 'None';\n```\n\n----------------------------------------\n\nTITLE: Defining the TouchHandle Interface in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the `TouchHandle` interface. This interface provides the structure for objects that allow programmatic manipulation of touch events, exposing methods like `end()` and `move()` to dispatch corresponding touch events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.touchhandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TouchHandle\n```\n\n----------------------------------------\n\nTITLE: Defining Offset Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the Offset interface in TypeScript for Puppeteer. The interface includes two number properties: x and y, representing the x and y offsets for a clickable point relative to the top-left corner of the border box.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.offset.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Offset\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setDefaultNavigationTimeout Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the setDefaultNavigationTimeout method in the Page class. It takes a single parameter 'timeout' of type number and returns void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setdefaultnavigationtimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setDefaultNavigationTimeout(timeout: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target Class with createCDPSession Method in TypeScript\nDESCRIPTION: Abstract class definition for Target that includes the createCDPSession method. This method creates and returns a Promise that resolves to a Chrome DevTools Protocol session (CDPSession) attached to the target.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.createcdpsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract createCDPSession(): Promise<CDPSession>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getInstalledBrowsers Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the getInstalledBrowsers function. It takes a GetInstalledBrowsersOptions object as a parameter and returns a Promise that resolves to an array of InstalledBrowser objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.getinstalledbrowsers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getInstalledBrowsers(\n  options: GetInstalledBrowsersOptions,\n): Promise<InstalledBrowser[]>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser Instance for Page in Puppeteer (TypeScript)\nDESCRIPTION: This code snippet defines the Page.browser() method in the Page class. It returns a Browser instance, allowing access to the browser that the page belongs to. This method is abstract, indicating it must be implemented by concrete subclasses.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract browser(): Browser;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame.isDetached Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet shows the signature for the Frame.isDetached() method which returns a boolean value indicating whether a frame has been detached from its parent. This method is marked as obsolete and users are recommended to use the `detached` getter property instead.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.isdetached.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  isDetached(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.touchMove Method Signature in TypeScript\nDESCRIPTION: The method signature for ElementHandle.touchMove which moves a touch point to the center of the element. It can accept an optional TouchHandle parameter to specify which touch to move, defaulting to the first active touch if not provided.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.touchmove.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  touchMove(this: ElementHandle<Element>, touch?: TouchHandle): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target.browser() Method in TypeScript\nDESCRIPTION: This code snippet defines the browser() method in the Target class. The method returns a Browser object, allowing access to the browser instance associated with the target.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract browser(): Browser;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining stopJSCoverage Method in Coverage Class (TypeScript)\nDESCRIPTION: This code snippet defines the stopJSCoverage() method in the Coverage class. It returns a Promise that resolves to an array of JSCoverageEntry objects. This method is used to stop JavaScript coverage and retrieve coverage reports for all scripts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.coverage.stopjscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Coverage {\n  stopJSCoverage(): Promise<JSCoverageEntry[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser User Agent - TypeScript Implementation\nDESCRIPTION: Abstract class method declaration for retrieving the browser's original user agent string. Returns a Promise that resolves to a string containing the user agent value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.useragent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract userAgent(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Worker Response Check in TypeScript\nDESCRIPTION: Abstract method definition that returns a boolean indicating whether the HTTP response was served by a service worker. This method is part of the HTTPResponse class in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.fromserviceworker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract fromServiceWorker(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContext.targets Method - TypeScript\nDESCRIPTION: Abstract method definition for retrieving all active targets within a browser context. Returns an array of Target objects representing active pages, service workers, or other targetable entities.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.targets.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract targets(): Target[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CookieParam Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for CookieParam used to set cookies in Puppeteer's page-level cookies API. This interface includes properties for cookie name, value, domain, expiration, and various security and browser-specific settings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cookieparam.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CookieParam\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Coverage Stop Method in Puppeteer\nDESCRIPTION: TypeScript class definition showing the stopCSSCoverage method that returns a Promise resolving to an array of CSS coverage entries. The method stops CSS coverage recording and collects coverage data, though it excludes dynamically injected style tags without sourceURLs.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.coverage.stopcsscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Coverage {\n  stopCSSCoverage(): Promise<CoverageEntry[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TouchHandle.move Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the TouchHandle.move() method that dispatches touchMove events. The method takes x and y coordinates as parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchhandle.move.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TouchHandle {\n  move(x: number, y: number): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserLauncher.executablePath abstract method in TypeScript\nDESCRIPTION: Declaration of the abstract executablePath method in the BrowserLauncher class. This method returns the path to a browser executable based on an optional Chrome release channel and validation flag.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserlauncher.executablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserLauncher {\n  abstract executablePath(\n    channel?: ChromeReleaseChannel,\n    validatePath?: boolean,\n  ): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing RemoteObject in Puppeteer's JSHandle Class (TypeScript)\nDESCRIPTION: This code snippet defines the remoteObject method in the JSHandle class. It returns a Protocol.Runtime.RemoteObject, which provides access to the underlying remote object backing the handle.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.remoteobject.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract remoteObject(): Protocol.Runtime.RemoteObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.response Method in TypeScript\nDESCRIPTION: Abstract method definition for retrieving the HTTP response associated with a request. The method returns either an HTTPResponse object if the response has been received, or null if the response hasn't arrived yet.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.response.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract response(): HTTPResponse | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.select() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.select() method in the Page class. It specifies the method parameters and return type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.select.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  select(selector: string, ...values: string[]): Promise<string[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPResponse.ok Method in TypeScript\nDESCRIPTION: Method signature for the ok() function in the HTTPResponse class that returns a boolean indicating if the HTTP response status code is in the successful range (200-299).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.ok.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  ok(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPRequest.hasPostData Method in TypeScript\nDESCRIPTION: Abstract method definition for checking if an HTTP request contains POST data. Returns true when the request has POST data, even if the data might not be immediately accessible through postData() due to size or encoding limitations. In such cases, fetchPostData() should be used instead.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.haspostdata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract hasPostData(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FirefoxSettings Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for FirefoxSettings which provides configuration options for Firefox browser instances in Puppeteer. This interface includes optional properties for controlling download behavior and browser version selection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.firefoxsettings.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirefoxSettings\n```\n\n----------------------------------------\n\nTITLE: Defining the childFrames() Method in the Frame Class in TypeScript\nDESCRIPTION: This code snippet shows the method signature for childFrames() in the Frame abstract class. The method returns an array of Frame objects, representing all child frames of the current frame.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.childframes.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract childFrames(): Frame[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame.page() Method in TypeScript\nDESCRIPTION: Abstract method definition for retrieving the Page object associated with a Frame. This method is part of the Frame class and returns a reference to the containing Page instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.page.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract page(): Page;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Transport Closing Method in TypeScript for Puppeteer\nDESCRIPTION: This code defines the close() method signature in the ExtensionTransport class. The method closes the extension transport connection and doesn't return any value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.extensiontransport.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExtensionTransport {\n  close(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.removeScriptToEvaluateOnNewDocument Method in TypeScript\nDESCRIPTION: This code snippet defines the removeScriptToEvaluateOnNewDocument method within the Page class. It takes a string identifier as a parameter and returns a Promise<void>. The method is used to remove a script that was previously injected into the page using Page.evaluateOnNewDocument.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.removescripttoevaluateonnewdocument.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract removeScriptToEvaluateOnNewDocument(\n    identifier: string,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Connection URL in Puppeteer with TypeScript\nDESCRIPTION: TypeScript signature for the Connection.url() method that returns the current connection URL as a string. This method belongs to the Connection class in Puppeteer and provides access to the URL the connection is using.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connection.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.autofill Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the ElementHandle.autofill method, which takes AutofillData as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.autofill.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract autofill(data: AutofillData): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Console Arguments with ConsoleMessage.args() in TypeScript\nDESCRIPTION: Method signature for the ConsoleMessage.args() method that returns an array of JSHandle objects representing arguments passed to a console message. This allows access to console arguments when capturing browser console output in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.args.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  args(): JSHandle[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Request Method Getter - TypeScript\nDESCRIPTION: Abstract class definition for HTTPRequest that includes a method() function which returns the HTTP method being used (GET, POST, etc.) as a string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.method.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract method(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Subject Name from SecurityDetails - TypeScript\nDESCRIPTION: Provides the TypeScript class signature for the subjectName() method in the SecurityDetails class, used within puppeteer to return the subject name on an SSL certificate. Requires puppeteer as a dependency and assumes the class context. The call returns a string representing the certificate subject, with no input parameters and a simple TypeScript method signature.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.securitydetails.subjectname.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecurityDetails {\n  subjectName(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Smoke Tests for Puppeteer Angular Schematic\nDESCRIPTION: Command to execute the smoke tests for the schematic, which creates fresh Angular installations and tests the schematic integration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode tools/smoke.mjs\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Intercept Resolution Priority in Typescript\nDESCRIPTION: Defines a constant that sets the baseline priority level (0) for cooperative request interception in Puppeteer. This value serves as the default resolution priority when handling intercepted network requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.default_intercept_resolution_priority.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;\n```\n\n----------------------------------------\n\nTITLE: Defining Page.waitForFrame Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the `Page.waitForFrame` method within the Puppeteer `Page` class. It accepts either a URL string or a predicate function (`urlOrPredicate`) to identify the target frame, and optional `WaitTimeoutOptions`. It returns a Promise that resolves to the found `Frame` object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforframe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForFrame(\n    urlOrPredicate: string | ((frame: Frame) => Awaitable<boolean>),\n    options?: WaitTimeoutOptions,\n  ): Promise<Frame>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.createPDFStream Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.createPDFStream method. It takes optional PDFOptions and returns a Promise resolving to a ReadableStream of Uint8Array.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.createpdfstream.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract createPDFStream(\n    options?: PDFOptions,\n  ): Promise<ReadableStream<Uint8Array>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.process() Method in TypeScript\nDESCRIPTION: Abstract method declaration for Browser.process() that returns the associated Node.js ChildProcess instance or null when connected to an existing browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.process.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract process(): ChildProcess | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the ProfileOptions interface used in Puppeteer. It contains two properties: path (a string) and preferences (a Record of string keys and unknown values).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.profileoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ProfileOptions {\n  path: string;\n  preferences: Record<string, unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.isClosed() Method in TypeScript\nDESCRIPTION: This code snippet defines the isClosed() method in the Page class. It is an abstract method that returns a boolean value indicating whether the page has been closed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.isclosed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract isClosed(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: EventEmitter.listenerCount Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the listenerCount method in the EventEmitter class. This method returns the number of listeners for a given event type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.eventemitter.listenercount.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  listenerCount(type: keyof EventsWithWildcard<Events>): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDPSessionEvent Namespace in TypeScript\nDESCRIPTION: TypeScript declaration for the CDPSessionEvent namespace in Puppeteer. This namespace encapsulates the events that can be emitted by the CDPSession class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsessionevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare namespace CDPSessionEvent\n```\n\n----------------------------------------\n\nTITLE: Initializing a Process Instance with TypeScript in Puppeteer\nDESCRIPTION: Constructor signature for creating a new Process instance in Puppeteer. The constructor accepts a LaunchOptions object as its parameter to configure the process.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.process._constructor_.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  constructor(opts: LaunchOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Request Prompt Filtering in TypeScript with Puppeteer\nDESCRIPTION: Method signature for waitForDevice that takes a filter function and optional timeout options to find a matching device in a device request prompt. Returns a Promise resolving to the matched DeviceRequestPromptDevice.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.devicerequestprompt.waitfordevice.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DeviceRequestPrompt {\n  waitForDevice(\n    filter: (device: DeviceRequestPromptDevice) => boolean,\n    options?: WaitTimeoutOptions,\n  ): Promise<DeviceRequestPromptDevice>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JavaScript Status with Page.isJavaScriptEnabled in TypeScript\nDESCRIPTION: Method signature for isJavaScriptEnabled in the Page class which returns a boolean value indicating whether JavaScript is enabled on the current page. Returns true if JavaScript is enabled, false otherwise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.isjavascriptenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract isJavaScriptEnabled(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dialog Type in Puppeteer with TypeScript\nDESCRIPTION: This method returns the type of a dialog in Puppeteer. It's a member of the Dialog class and returns a Protocol.Page.DialogType value, which represents the specific type of browser dialog (such as alert, confirm, prompt, etc.).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  type(): Protocol.Page.DialogType;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardTypeOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for KeyboardTypeOptions, which provides configuration options when typing with Puppeteer's keyboard API. It includes an optional 'delay' property of type number that can be used to control the typing speed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboardtypeoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyboardTypeOptions\n```\n\n----------------------------------------\n\nTITLE: Defining JSCoverage.start Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the JSCoverage.start method, which initiates JavaScript coverage analysis. The method accepts optional configuration parameters to control how coverage is collected and reported.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverage.start.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSCoverage {\n  start(options?: {\n    resetOnNavigation?: boolean;\n    reportAnonymousScripts?: boolean;\n    includeRawScriptCoverage?: boolean;\n    useBlockCoverage?: boolean;\n  }): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Untyped Property from JSHandle in TypeScript\nDESCRIPTION: This overloaded version of getProperty() accepts a string parameter for the property name and returns a Promise that resolves to a JSHandle<unknown>. This version is used when the property type is not known at compile time.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.getproperty.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  getProperty(propertyName: string): Promise<JSHandle<unknown>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ExtensionTransport.connectTab static method in TypeScript\nDESCRIPTION: This code snippet defines the static connectTab method on the ExtensionTransport class. The method accepts a tab ID as a parameter and returns a Promise that resolves to an ExtensionTransport instance, allowing for communication with a specific browser tab.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.extensiontransport.connecttab.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExtensionTransport {\n  static connectTab(tabId: number): Promise<ExtensionTransport>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.isDragInterceptionEnabled Method in TypeScript\nDESCRIPTION: This code snippet defines the isDragInterceptionEnabled method in the Page class. It returns a boolean indicating whether drag events are being intercepted.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.isdraginterceptionenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract isDragInterceptionEnabled(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WaitTimeoutOptions Interface in Puppeteer (TypeScript)\nDESCRIPTION: This snippet defines the WaitTimeoutOptions interface, utilized for configuring optional timeout-related parameters in Puppeteer wait operations. Users can specify an AbortSignal to allow cancellation and set a maximum timeout duration in milliseconds, with a default of 30,000ms that can be overridden using Page.setDefaultTimeout(). Dependencies include TypeScript for interface typing, and values such as signal and timeout support fine-grained control over asynchronous wait behaviors. Inputs are an optional signal (AbortSignal) and timeout (number), enabling robust handling for long-running browser operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.waittimeoutoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitTimeoutOptions\n```\n\n----------------------------------------\n\nTITLE: Defining CSSCoverageOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for CSS coverage configuration options. Includes an optional resetOnNavigation property that determines if coverage data should be reset when navigating between pages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverageoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CSSCoverageOptions\n```\n\n----------------------------------------\n\nTITLE: TypeScript ElementHandle contentFrame Method for IFrames\nDESCRIPTION: Method signature for getting the frame associated with an HTMLIFrameElement. Returns a Promise that resolves to a Frame object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.contentframe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract contentFrame(this: ElementHandle<HTMLIFrameElement>): Promise<Frame>;\n}\n```\n\n----------------------------------------\n\nTITLE: Connection.createSession Method Signature in Typescript\nDESCRIPTION: Method signature for createSession in the Connection class, which creates a new CDP session for a target. The method takes targetInfo of type Protocol.Target.TargetInfo and returns a Promise that resolves to a CDPSession object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connection.createsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  createSession(targetInfo: Protocol.Target.TargetInfo): Promise<CDPSession>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the writeMetadata Method Signature in InstalledBrowser Class\nDESCRIPTION: This code snippet shows the signature of the writeMetadata method in the InstalledBrowser class. The method takes a Metadata object as a parameter and returns void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.installedbrowser.writemetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass InstalledBrowser {\n  writeMetadata(metadata: Metadata): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring TouchError Exception with Puppeteer TypeScript\nDESCRIPTION: Declares the TouchError class, which extends PuppeteerError, in TypeScript for the Puppeteer automation framework. This class is intended to represent errors thrown when a touch event is referenced that does not exist, enhancing error specificity during touch interactions. No imports or initialization code are present; it is assumed to be integrated within the Puppeteer codebase where PuppeteerError is already defined and available. This declaration provides the structural type for usage throughout the codebase where such touch errors are programmatically identified.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.toucherror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TouchError extends PuppeteerError\n```\n\n----------------------------------------\n\nTITLE: BrowserLauncher.executablePath Method Signature in TypeScript\nDESCRIPTION: Defines the abstract executablePath method in the BrowserLauncher class which returns the string path to a browser executable. It accepts optional parameters for specifying a Chrome release channel and whether to validate the path.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browserlauncher.executablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserLauncher {\n  abstract executablePath(\n    channel?: ChromeReleaseChannel,\n    validatePath?: boolean,\n  ): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Connection.createSession Method Signature in Typescript\nDESCRIPTION: Defines the method signature for createSession in the Connection class. This method creates a CDP (Chrome DevTools Protocol) session for a given target and returns a Promise that resolves to a CDPSession object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.createsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  createSession(targetInfo: Protocol.Target.TargetInfo): Promise<CDPSession>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConsoleMessage.type Method in TypeScript\nDESCRIPTION: Defines the type() method on the ConsoleMessage class that returns a ConsoleMessageType value indicating the type of console message. This method helps identify the category of console output (e.g., log, error, warning, etc.).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  type(): ConsoleMessageType;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.statusText() Method in TypeScript\nDESCRIPTION: This code snippet defines the abstract statusText() method within the HTTPResponse class. The method returns a string representing the status text of the HTTP response, typically 'OK' for successful requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.statustext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract statusText(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Class Signature Definition in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the Connection class, showing that it extends EventEmitter with CDPSessionEvents as the generic parameter type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Connection extends EventEmitter<CDPSessionEvents>\n```\n\n----------------------------------------\n\nTITLE: Element Property Access Example\nDESCRIPTION: Example showing how to access element properties using Puppeteer\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Testing framework specific imports\n\nimport {setupBrowserHooks, getBrowserState} from './utils';\n\ndescribe('<Test Name>', function () {\n  setupBrowserHooks();\n  it('is running', async function () {\n    const {page} = getBrowserState();\n    // Query elements\n    const elementText = await page\n      .locator('.my-component')\n      .map(button => button.innerText)\n      // Wait for element to show up\n      .wait();\n\n    // Assert via assertion library\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CDPSessionEvents Interface in TypeScript for Puppeteer\nDESCRIPTION: This code defines the CDPSessionEvents interface that extends both CDPEvents and Record<EventType, unknown>. It is used to type events related to CDP sessions in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsessionevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CDPSessionEvents extends CDPEvents, Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining Request Interception Method in Puppeteer API (TypeScript)\nDESCRIPTION: This snippet presents the abstract TypeScript class signature for the Page.setRequestInterception method, specifying its required boolean parameter and the void Promise it returns. The method enables or disables network request interception on a Puppeteer Page, which is a prerequisite for advanced request aborting, continuation, or response modification workflows. No implementation logic is shown; this outlines the API surface for further extension or implementation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setrequestinterception.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setRequestInterception(value: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.deleteCookie Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the deprecated Page.deleteCookie() method. It takes an array of DeleteCookiesRequest objects as parameters and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.deletecookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract deleteCookie(...cookies: DeleteCookiesRequest[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser.version() Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the abstract version() method in the Browser class that returns a Promise resolving to a string containing the browser name and version.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.version.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract version(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InnerParams Generic Type in TypeScript\nDESCRIPTION: Defines a TypeScript type called InnerParams that takes a generic array type T and applies the FlattenHandle type to each element in the array. This is used internally by Puppeteer for parameter handling.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.innerparams.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InnerParams<T extends unknown[]> = {\n  [K in keyof T]: FlattenHandle<T[K]>;\n};\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.toElement Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature of the toElement method in the ElementHandle class. This method converts the current element handle to a handle for a specific HTML or SVG element type based on the provided tag name.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.toelement.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  toElement<K extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap>(\n    tagName: K,\n  ): Promise<HandleFor<ElementFor<K>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.dragOver Method Signature in TypeScript\nDESCRIPTION: The signature for the obsolete ElementHandle.dragOver() method that was used to perform a dragover operation on an element. This method takes an optional Protocol.Input.DragData parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.dragover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  dragOver(\n    this: ElementHandle<Element>,\n    data?: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CSSCoverage Class Constructor in TypeScript\nDESCRIPTION: Constructor for the CSSCoverage class that takes a Chrome DevTools Protocol session as a parameter. This class is used for analyzing CSS coverage in web pages through Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.csscoverage._constructor_.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CSSCoverage {\n  constructor(client: CDPSession);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.url() Method in TypeScript\nDESCRIPTION: This code snippet defines the url() method in the HTTPResponse class. The method is declared as abstract and returns a string representing the URL of the response.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MouseWheelOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the MouseWheelOptions interface used in Puppeteer. It includes two optional properties: deltaX and deltaY, both of type number, which represent the horizontal and vertical scroll amounts respectively.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mousewheeloptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MouseWheelOptions {\n  deltaX?: number;\n  deltaY?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target.asPage() Method in TypeScript\nDESCRIPTION: This code snippet defines the asPage() method in the Target class. It returns a Promise that resolves to a Page object. This method is useful for forcefully creating a page for any type of target, especially when dealing with CDP targets of type 'other'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.aspage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract asPage(): Promise<Page>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WaitForNetworkIdleOptions Interface in TypeScript\nDESCRIPTION: Interface definition for configuring network idle wait behavior in Puppeteer. Extends WaitTimeoutOptions and includes properties for controlling concurrent connections and idle time thresholds.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waitfornetworkidleoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitForNetworkIdleOptions extends WaitTimeoutOptions\n```\n\n----------------------------------------\n\nTITLE: BrowserContext.clearPermissionOverrides Method Signature in TypeScript\nDESCRIPTION: The method signature for the clearPermissionOverrides method in the BrowserContext class. This abstract method returns a Promise that resolves to void when all permission overrides for the browser context have been cleared.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.clearpermissionoverrides.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract clearPermissionOverrides(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SupportedWebDriverCapability Type in TypeScript\nDESCRIPTION: This code snippet defines the SupportedWebDriverCapability type as a subset of Session.CapabilityRequest, excluding 'unhandledPromptBehavior' and 'acceptInsecureCerts' properties. It uses TypeScript's Exclude utility type to create this new type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.supportedwebdrivercapability.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SupportedWebDriverCapability = Exclude<\n  Session.CapabilityRequest,\n  'unhandledPromptBehavior' | 'acceptInsecureCerts'\n>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Selector-based Locator in Puppeteer\nDESCRIPTION: Class definition for the selector-based Frame.locator() method. This implementation creates a locator for a given CSS selector or Puppeteer-specific selector, supporting various selector types including text, ARIA, and XPath.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.locator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  locator<Selector extends string>(\n    selector: Selector,\n  ): Locator<NodeFor<Selector>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle.remoteObject Method in TypeScript\nDESCRIPTION: Abstract method declaration for retrieving the Protocol.Runtime.RemoteObject that backs a JSHandle. This method is essential for accessing the underlying remote object representation in the Chrome DevTools Protocol.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.remoteobject.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract remoteObject(): Protocol.Runtime.RemoteObject;\n}\n```\n\n----------------------------------------\n\nTITLE: ExtensionTransport.connectTab Method Signature in TypeScript\nDESCRIPTION: The method signature for the static connectTab method of the ExtensionTransport class, which establishes a connection to a specific browser tab identified by its tab ID.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.extensiontransport.connecttab.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExtensionTransport {\n  static connectTab(tabId: number): Promise<ExtensionTransport>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSCoverageEntry Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for JSCoverageEntry that extends CoverageEntry and includes an optional rawScriptCoverage property for V8 script coverage data.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverageentry.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface JSCoverageEntry extends CoverageEntry\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.headers() Method in TypeScript\nDESCRIPTION: This code snippet defines the abstract headers() method in the HTTPRequest class. It returns an object containing HTTP headers associated with the request, where all header names are in lowercase.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.headers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract headers(): Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EvaluateFunc Generic Type in TypeScript for Puppeteer\nDESCRIPTION: Type definition for EvaluateFunc that represents functions which can be evaluated in the browser context. It accepts variable parameters via InnerParams generic type and returns an Awaitable unknown value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.evaluatefunc.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EvaluateFunc<T extends unknown[]> = (\n  ...params: InnerParams<T>\n) => Awaitable<unknown>;\n```\n\n----------------------------------------\n\nTITLE: Defining PredefinedNetworkConditions Type Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the structure for the `PredefinedNetworkConditions` variable in Puppeteer. It specifies a read-only object where keys represent predefined network speed names (like 'Slow 3G', 'Fast 3G') and values are of the `NetworkConditions` type, used for network emulation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.predefinednetworkconditions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPredefinedNetworkConditions: Readonly<{\n  'Slow 3G': NetworkConditions;\n  'Fast 3G': NetworkConditions;\n  'Slow 4G': NetworkConditions;\n  'Fast 4G': NetworkConditions;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Defining Certificate SAN Extraction in Puppeteer with TypeScript\nDESCRIPTION: This TypeScript snippet defines the SecurityDetails class with the subjectAlternativeNames() method, which returns an array of strings representing the subject alternative names of a certificate. It is part of Puppeteer's certificate API and requires that the SecurityDetails object contains valid certificate information. The method has no parameters and outputs a string array; it is intended for internal framework usage or for users needing to inspect certificate SANs in automation scenarios.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.securitydetails.subjectalternativenames.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecurityDetails {\n  subjectAlternativeNames(): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CDPSession.detach Method in TypeScript\nDESCRIPTION: Defines the abstract detach method within the CDPSession class. This method detaches the CDP session from its target, after which the session object won't emit events and can't be used to send messages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.detach.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CDPSession {\n  abstract detach(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.waitForNetworkIdle Method Signature (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows the signature for the `Page.waitForNetworkIdle` method within the Puppeteer `Page` class. It accepts an optional `options` object of type `WaitForNetworkIdleOptions` to customize behavior like timeout and idle time. The method returns a Promise that resolves when the network becomes idle according to the specified criteria.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitfornetworkidle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Page {\n  waitForNetworkIdle(options?: WaitForNetworkIdleOptions): Promise<void>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter.on Method Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the CommonEventEmitter's 'on' method. This method allows registering event handlers for specific event types, using generics to ensure type safety. It returns the instance for method chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.commoneventemitter.on.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Frame.isDetached Method Signature in TypeScript\nDESCRIPTION: The signature for the Frame.isDetached() method that returns a boolean indicating whether the frame has been detached from its parent. This method is marked as obsolete and users should use the `detached` getter instead.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.isdetached.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  isDetached(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Executable Path with Launch Options\nDESCRIPTION: Method to get the default executable path based on provided launch options. Takes LaunchOptions parameter and returns a string path.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.executablepath.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  executablePath(options: LaunchOptions): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Target Opener Method in TypeScript\nDESCRIPTION: Abstract method definition for retrieving the opener (parent) target of a current target. Returns undefined for top-level targets and a Target instance for targets opened by another target.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.opener.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract opener(): Target | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the HTTPResponse.remoteAddress Method in TypeScript\nDESCRIPTION: Abstract method definition within the HTTPResponse class that returns connection information for the remote server. The method returns a RemoteAddress object containing IP address and port information.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.remoteaddress.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract remoteAddress(): RemoteAddress;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.initiator() Method in TypeScript\nDESCRIPTION: This code snippet defines the initiator() method in the HTTPRequest class. The method returns the initiator of the request, which is of type Protocol.Network.Initiator or undefined.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.initiator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract initiator(): Protocol.Network.Initiator | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.frame Method in TypeScript\nDESCRIPTION: Abstract method declaration for retrieving the Frame instance that initiated an HTTP request. Returns null when navigating to error pages. Part of the HTTPRequest class implementation in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.frame.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract frame(): Frame | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Quad Type in TypeScript for Puppeteer\nDESCRIPTION: Declares the Quad type as an array of four Point objects. This type is used to represent quadrilateral shapes in Puppeteer, likely for tasks involving element positioning or layout calculations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.quad.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Quad = [Point, Point, Point, Point];\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.enqueueInterceptAction Method in TypeScript\nDESCRIPTION: Method signature for enqueueInterceptAction that adds an async request handler to the processing queue. The handlers are not executed in any specific order but will resolve before request interception finalization.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.enqueueinterceptaction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  enqueueInterceptAction(\n    pendingHandler: () => void | PromiseLike<unknown>,\n  ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ComputeExecutablePathOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: This snippet defines the ComputeExecutablePathOptions interface used in Puppeteer to specify options for computing the executable path of a browser. It includes properties for the browser type, build ID, cache directory, and platform.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComputeExecutablePathOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.dragAndDrop Method in TypeScript\nDESCRIPTION: TypeScript class method signature for dragAndDrop functionality in Puppeteer's ElementHandle class. The method takes a target ElementHandle and optional delay configuration, returning a Promise that resolves when the drag and drop operation completes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.draganddrop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  dragAndDrop(\n    this: ElementHandle<Element>,\n    target: ElementHandle<Node>,\n    options?: {\n      delay: number;\n    },\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring waitForFileChooser in Puppeteer Page class (TypeScript)\nDESCRIPTION: Defines the abstract waitForFileChooser method in the Page class, which returns a promise resolving to a FileChooser object. It optionally takes a WaitTimeoutOptions parameter to control the waiting behavior. This declaration is for library consumers implementing or extending the Page class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitforfilechooser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\\n  abstract waitForFileChooser(\\n    options?: WaitTimeoutOptions,\\n  ): Promise<FileChooser>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.disconnect Method in TypeScript\nDESCRIPTION: The TypeScript signature for the Browser.disconnect() method which disconnects Puppeteer from a browser while leaving the process running. The method returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.disconnect.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract disconnect(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InstalledBrowser.readMetadata() Method in TypeScript\nDESCRIPTION: This snippet defines the readMetadata() method for the InstalledBrowser class. The method returns a Metadata object and takes no parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.installedbrowser.readmetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass InstalledBrowser {\n  readMetadata(): Metadata;\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.select Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the ElementHandle.select method that allows selecting options in a select element and returns a Promise with an array of selected values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.select.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  select(...values: string[]): Promise<string[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target.browserContext Method in TypeScript\nDESCRIPTION: Abstract method definition for retrieving the browser context associated with a target. The method returns a BrowserContext instance that represents the context in which the target operates.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.browsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract browserContext(): BrowserContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Connection Class Constructor in TypeScript\nDESCRIPTION: Constructor signature for the Connection class that manages connections in Puppeteer. It takes parameters for the connection URL, transport method, optional delay, timeout duration, and error handling configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connection._constructor_.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  constructor(\n    url: string,\n    transport: ConnectionTransport,\n    delay?: number,\n    timeout?: number,\n    rawErrors?: boolean,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining writeMetadata Method Signature in InstalledBrowser Class - TypeScript\nDESCRIPTION: Method signature for writing metadata to an installed browser instance. Takes a Metadata parameter and returns void. This method is part of the InstalledBrowser class in Puppeteer's API.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.installedbrowser.writemetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass InstalledBrowser {\n  writeMetadata(metadata: Metadata): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionTransport Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ConnectionTransport which serves as a communication transport layer in Puppeteer. It includes optional event handlers (onclose and onmessage) and methods for sending messages and closing the connection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connectiontransport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConnectionTransport\n```\n\n----------------------------------------\n\nTITLE: Retrieving ContinueRequestOverrides from HTTPRequest in Puppeteer\nDESCRIPTION: Method signature for continueRequestOverrides() in the HTTPRequest class. This method returns a ContinueRequestOverrides object that contains modifications to be applied when a request interception is allowed to continue without being aborted or responded to.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.continuerequestoverrides.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  continueRequestOverrides(): ContinueRequestOverrides;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.title Method in TypeScript - Puppeteer\nDESCRIPTION: TypeScript class definition showing the title() method signature in the Frame class. The method returns a Promise that resolves to a string containing the frame's title.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.title.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  title(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring SecurityDetails Class in TypeScript\nDESCRIPTION: Type declaration for the SecurityDetails class that represents security details of secure responses. This class provides methods to access certificate information and security protocols.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class SecurityDetails\n```\n\n----------------------------------------\n\nTITLE: Defining the Offset Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for Offset in Puppeteer. It contains x and y number properties that represent coordinates relative to the top-left corner of an element's border box for clickable point positioning.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.offset.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Offset\n```\n\n----------------------------------------\n\nTITLE: Creating Locator with Function in Puppeteer (TypeScript)\nDESCRIPTION: This snippet demonstrates the signature for creating a locator using a function. The function can return an Awaitable value, and the method returns a Locator object for the specified return type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.locator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FrameAddStyleTagOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the FrameAddStyleTagOptions interface in TypeScript. It specifies the optional properties for adding style tags to frames in Puppeteer, including content, path, and URL of CSS files.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frameaddstyletagoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FrameAddStyleTagOptions\n```\n\n----------------------------------------\n\nTITLE: Defining the BrowserLauncher Abstract Class in TypeScript\nDESCRIPTION: The TypeScript signature for the BrowserLauncher abstract class, which serves as the base class for browser launchers in Puppeteer. This class is marked as internal and shouldn't be instantiated directly by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browserlauncher.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class BrowserLauncher\n```\n\n----------------------------------------\n\nTITLE: Defining AwaitablePredicate Type in TypeScript\nDESCRIPTION: Defines the AwaitablePredicate generic type which represents a predicate function that accepts a value of type T and returns either a boolean or a Promise resolving to a boolean. This type is used for functions that need to wait for a condition to be true.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.awaitablepredicate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AwaitablePredicate<T> = (value: T) => Awaitable<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Defining the uninstall() Function in TypeScript\nDESCRIPTION: TypeScript function signature for the uninstall() function in Puppeteer. This function is used to remove previously installed browser binaries and takes an UninstallOptions object as its parameter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.uninstall.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function uninstall(options: UninstallOptions): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Page.removeExposedFunction in TypeScript\nDESCRIPTION: Abstract class method definition for removing an exposed function from a page's window object. Takes a name parameter to identify which function to remove and returns a Promise that resolves when the function is removed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.removeexposedfunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract removeExposedFunction(name: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter.listenerCount Method Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the listenerCount method that returns the number of listeners for a specified event. The method takes an event parameter of type keyof Events and returns a number.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.listenercount.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  listenerCount(event: keyof Events): number;\n}\n```\n\n----------------------------------------\n\nTITLE: WebWorker Class Signature in TypeScript\nDESCRIPTION: The TypeScript class signature for the WebWorker class in Puppeteer, which extends EventEmitter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.webworker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class WebWorker extends EventEmitter<Record<EventType, unknown>>\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.dragEnter() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the dragEnter() method in the Mouse class. It takes a target point and drag data as parameters and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.dragenter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract dragEnter(\n    target: Point,\n    data: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EvaluateFunc Generic Type in TypeScript\nDESCRIPTION: Defines the EvaluateFunc type which represents a function that accepts variable parameters and returns an Awaitable value. This type is used for functions that will be evaluated in the browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.evaluatefunc.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EvaluateFunc<T extends unknown[]> = (\n  ...params: InnerParams<T>\n) => Awaitable<unknown>;\n```\n\n----------------------------------------\n\nTITLE: Defining resolveBuildId Function in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the resolveBuildId function, which takes a Browser, BrowserPlatform, and a tag (string or BrowserTag) as parameters. It returns a Promise that resolves to a string, likely representing a build identifier.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.resolvebuildid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function resolveBuildId(\n  browser: Browser,\n  platform: BrowserPlatform,\n  tag: string | BrowserTag,\n): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Mapper Type in TypeScript\nDESCRIPTION: Defines a generic Mapper type that takes two type parameters (From and To) and represents a function that transforms a value from the 'From' type to the 'To' type. The transformation can be either synchronous or asynchronous using the Awaitable type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mapper.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Mapper<From, To> = (value: From) => Awaitable<To>;\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserEvents Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the BrowserEvents interface in Puppeteer, which extends Record<EventType, unknown>. It's used to type the events that can be emitted by a Browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browserevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BrowserEvents extends Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalNetworkConditions Interface in TypeScript\nDESCRIPTION: Interface definition that extends NetworkConditions to provide internal network condition controls in Puppeteer. Includes an offline property of type boolean.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.internalnetworkconditions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InternalNetworkConditions extends NetworkConditions\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.postData Method in TypeScript\nDESCRIPTION: Abstract method declaration for retrieving post body data from an HTTP request. The method returns either a string containing the post data or undefined if no post data exists.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.postdata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract postData(): string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SessionAttached Event Constant in Typescript\nDESCRIPTION: This constant defines the 'sessionattached' event name that's used for handling CDP session attachment events in Puppeteer. It's a string literal type that ensures type safety when working with CDP session events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsessionevent.sessionattached.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSessionAttached: 'sessionattached';\n```\n\n----------------------------------------\n\nTITLE: Defining CDP WebSocket Endpoint Regex in TypeScript\nDESCRIPTION: This code snippet declares a constant variable named CDP_WEBSOCKET_ENDPOINT_REGEX of type RegExp. It is likely used for parsing or validating WebSocket URLs in the context of Chrome DevTools Protocol communication.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cdp_websocket_endpoint_regex.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nCDP_WEBSOCKET_ENDPOINT_REGEX: RegExp;\n```\n\n----------------------------------------\n\nTITLE: Defining the LocatorEvents Interface in TypeScript\nDESCRIPTION: Defines the LocatorEvents interface which extends Record<EventType, unknown>. This interface likely serves as a typing mechanism for events that can be triggered by Puppeteer locators.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locatorevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LocatorEvents extends Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: Frame.$$eval Method Signature in TypeScript\nDESCRIPTION: The TypeScript declaration of the Frame.$$eval method, which runs a function on elements matching a selector in a frame. It accepts a selector, a function to execute, and optional arguments, returning a promise that resolves to the function's result.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.__eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  $$eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<\n      Array<NodeFor<Selector>>,\n      Params\n    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,\n  >(\n    selector: Selector,\n    pageFunction: string | Func,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CookieData Interface in TypeScript\nDESCRIPTION: This snippet defines the CookieData interface with its properties. It includes various fields for setting cookie attributes such as domain, expiration, HTTP-only flag, name, partition key, path, priority, and more.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiedata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CookieData\n```\n\n----------------------------------------\n\nTITLE: Retrieving BrowserContext from Page in Puppeteer\nDESCRIPTION: Abstract method definition in the Page class that returns the browser context the page belongs to. This method allows accessing the parent BrowserContext object from any Page instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.browsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract browserContext(): BrowserContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtensionTransport Class in TypeScript\nDESCRIPTION: Class declaration for ExtensionTransport that implements the ConnectionTransport interface. The class provides functionality for establishing connections through chrome.debugger API in browser extensions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.extensiontransport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ExtensionTransport implements ConnectionTransport\n```\n\n----------------------------------------\n\nTITLE: Fetching Untyped Property from JSHandle in TypeScript\nDESCRIPTION: This simpler signature fetches a property by name without type constraints. It accepts a string property name and returns a Promise that resolves to a JSHandle containing the property value with an unknown type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.getproperty.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  getProperty(propertyName: string): Promise<JSHandle<unknown>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser Download URL in TypeScript\nDESCRIPTION: This function generates a URL for downloading a browser binary archive. It takes parameters for browser type, platform, build ID, and an optional base URL to construct the download link.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.getdownloadurl.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getDownloadUrl(\n  browser: Browser,\n  platform: BrowserPlatform,\n  buildId: string,\n  baseUrl?: string,\n): URL;\n```\n\n----------------------------------------\n\nTITLE: Initializing the CLI Class Constructor in TypeScript\nDESCRIPTION: Declaration of the CLI class constructor that accepts configuration options and a readline interface. The options can include cache path settings, script name, prefix commands, and browser configurations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.cli._constructor_.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CLI {\n  constructor(\n    opts?:\n      | string\n      | {\n          cachePath?: string;\n          scriptName?: string;\n          prefixCommand?: {\n            cmd: string;\n            description: string;\n          };\n          allowCachePathOverride?: boolean;\n          pinnedBrowsers?: Partial<\n            Record<\n              Browser,\n              {\n                buildId: string;\n                skipDownload: boolean;\n              }\n            >\n          >;\n        },\n    rl?: readline.Interface,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.down() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the abstract down() method in the Mouse class. It takes an optional Readonly<MouseOptions> parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.down.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract down(options?: Readonly<MouseOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Cookie Partition Keys from Puppeteer to CDP Format in TypeScript\nDESCRIPTION: This function converts cookie partition keys from Puppeteer's format to Chrome DevTools Protocol (CDP) format. It accepts a partition key that can be a CookiePartitionKey object, a string, or undefined, and returns a Protocol.Network.CookiePartitionKey object or undefined.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.convertcookiespartitionkeyfrompuppeteertocdp.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function convertCookiesPartitionKeyFromPuppeteerToCdp(\n  partitionKey: CookiePartitionKey | string | undefined,\n): Protocol.Network.CookiePartitionKey | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining startCSSCoverage Method in Coverage Class (TypeScript)\nDESCRIPTION: This snippet shows the signature of the startCSSCoverage method in the Coverage class. It takes an optional CSSCoverageOptions parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.startcsscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Coverage {\n  startCSSCoverage(options?: CSSCoverageOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Profiles with createProfile Function in TypeScript\nDESCRIPTION: Function signature for createProfile which creates profiles for Puppeteer browsers. It accepts a Browser instance and ProfileOptions as parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.createprofile.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createProfile(\n  browser: Browser,\n  opts: ProfileOptions,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Get Default Executable Path\nDESCRIPTION: Method to retrieve the default executable path without any parameters. Returns a string representing the path.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.executablepath.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  executablePath(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Awaitable Type in TypeScript for Puppeteer\nDESCRIPTION: Type definition for Awaitable which represents either a direct value or a promise-like object that resolves to that value. This type is used throughout Puppeteer to allow API functions to handle both synchronous values and promises.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.awaitable.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Awaitable<T> = T | PromiseLike<T>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript ElementHandle Generic contentFrame Method\nDESCRIPTION: Generic method signature for getting a frame associated with any element. Returns a Promise that resolves to either a Frame object or null if no frame is associated.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.contentframe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract contentFrame(): Promise<Frame | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FrameWaitForFunctionOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the FrameWaitForFunctionOptions interface in TypeScript. It specifies the structure for options that can be passed to the waitForFunction method in Puppeteer's Frame class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.framewaitforfunctionoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FrameWaitForFunctionOptions\n```\n\n----------------------------------------\n\nTITLE: Defining JSCoverageOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the JSCoverageOptions interface in TypeScript. It includes four optional boolean properties that configure various aspects of JavaScript coverage in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jscoverageoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface JSCoverageOptions {\n  includeRawScriptCoverage?: boolean;\n  reportAnonymousScripts?: boolean;\n  resetOnNavigation?: boolean;\n  useBlockCoverage?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Query Handler Names Signature in Puppeteer (TypeScript)\nDESCRIPTION: Defines the static method signature for `Puppeteer.customQueryHandlerNames` within the Puppeteer class. This method takes no arguments and is intended to return an array of strings, where each string represents the name of a registered custom query handler.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteer.customqueryhandlernames.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Puppeteer {\n  static customQueryHandlerNames(): string[];\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.text Method in TypeScript\nDESCRIPTION: Type definition for the HTTPResponse.text() method that returns a Promise resolving to a string containing the UTF-8 text representation of the response body.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.text.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  text(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorCode Type Enumeration in TypeScript\nDESCRIPTION: Defines a union type of string literals representing various error conditions that can occur during browser automation. Includes network errors, connection issues, access problems, and general failures.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.errorcode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ErrorCode =\n  | 'aborted'\n  | 'accessdenied'\n  | 'addressunreachable'\n  | 'blockedbyclient'\n  | 'blockedbyresponse'\n  | 'connectionaborted'\n  | 'connectionclosed'\n  | 'connectionfailed'\n  | 'connectionrefused'\n  | 'connectionreset'\n  | 'internetdisconnected'\n  | 'namenotresolved'\n  | 'timedout'\n  | 'failed';\n```\n\n----------------------------------------\n\nTITLE: Defining ChromeHeadlessShellSettings Interface in TypeScript\nDESCRIPTION: The TypeScript interface definition for ChromeHeadlessShellSettings, which contains configuration options for ChromeHeadlessShell in Puppeteer. This interface allows customization of browser downloads and version selection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.chromeheadlessshellsettings.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChromeHeadlessShellSettings\n```\n\n----------------------------------------\n\nTITLE: Defining GeolocationOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for geolocation options. Includes properties for latitude (-90 to 90), longitude (-180 to 180), and optional accuracy value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.geolocationoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GeolocationOptions\n```\n\n----------------------------------------\n\nTITLE: Defining LocatorEvent Enum in TypeScript\nDESCRIPTION: Declaration of the LocatorEvent enum in TypeScript which defines all events that a locator instance may emit. Currently contains only the 'Action' event that signals when a locator is about to perform an action on located elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locatorevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum LocatorEvent\n```\n\n----------------------------------------\n\nTITLE: Page.getDefaultNavigationTimeout Method Signature in TypeScript\nDESCRIPTION: The method signature for getDefaultNavigationTimeout in the Page abstract class. This method returns the current default navigation timeout value in milliseconds that will be used for navigation operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.getdefaultnavigationtimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract getDefaultNavigationTimeout(): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session ID using CDPSession Class Method\nDESCRIPTION: Abstract method declaration for retrieving the unique identifier of a Chrome DevTools Protocol session. Returns a string containing the session ID.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsession.id.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CDPSession {\n  abstract id(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenshotClip Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the ScreenshotClip interface, which extends the BoundingBox interface. It includes an optional 'scale' property of type number with a default value of 1.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screenshotclip.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScreenshotClip extends BoundingBox\n```\n\n----------------------------------------\n\nTITLE: JSHandle.getProperties Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the JSHandle.getProperties() method which returns a Promise that resolves to a Map of string keys and JSHandle values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.getproperties.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  getProperties(): Promise<Map<string, JSHandle>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract Page.target Method in Puppeteer (TypeScript)\nDESCRIPTION: Defines the TypeScript signature for the abstract target() method on the Page class in Puppeteer. The method returns a Target object and is marked as abstract, requiring inheriting classes to implement its logic. There are no functional details or parameters in this snippet—only the class interface definition is present—providing necessary information for extending or implementing the Page class in TypeScript.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.target.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract target(): Target;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle Class in TypeScript\nDESCRIPTION: This snippet defines the abstract JSHandle class with a generic type parameter. It represents a reference to a JavaScript object and is used to prevent garbage collection of the referenced object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class JSHandle<T = unknown>\n```\n\n----------------------------------------\n\nTITLE: Example of Empty Redirect Chain in Puppeteer\nDESCRIPTION: Example demonstrating a case where there are no redirects in the page navigation, resulting in an empty redirect chain.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.redirectchain.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await page.goto('https://google.com');\nconst chain = response.request().redirectChain();\nconsole.log(chain.length); // 0\n```\n\n----------------------------------------\n\nTITLE: Defining InstallOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration that specifies the configuration options available when installing browsers through Puppeteer. Includes properties for controlling download location, browser selection, build identification, caching, and installation behavior.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.installoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InstallOptions\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest Class in TypeScript\nDESCRIPTION: Abstract class declaration for HTTPRequest in Puppeteer. This represents HTTP requests sent by a page and provides methods to interact with these requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class HTTPRequest\n```\n\n----------------------------------------\n\nTITLE: Accessing the Main Frame in Puppeteer with TypeScript\nDESCRIPTION: This code snippet shows the signature of the mainFrame() method in the Page class. The method provides access to the primary frame of a page and returns a Frame object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.mainframe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract mainFrame(): Frame;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseForRequest Interface in TypeScript\nDESCRIPTION: This code snippet defines the ResponseForRequest interface in TypeScript. It includes properties for body, contentType, headers, and status, which are used to construct a response for a request in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.responseforrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ResponseForRequest\n```\n\n----------------------------------------\n\nTITLE: Coverage.startCSSCoverage Method Signature in TypeScript\nDESCRIPTION: Defines the signature of the startCSSCoverage method in the Coverage class. This method starts tracking CSS coverage information and accepts optional configuration parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.coverage.startcsscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Coverage {\n  startCSSCoverage(options?: CSSCoverageOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ElementHandle.backendNodeId Method in TypeScript\nDESCRIPTION: This code snippet defines the backendNodeId() method in the ElementHandle class. The method is asynchronous and returns a Promise that resolves to a number representing the DOM.BackendNodeId for the element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.backendnodeid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract backendNodeId(): Promise<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileChooser.isMultiple Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the isMultiple() method signature in the FileChooser class. The method returns a boolean indicating whether multiple file selection is allowed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.ismultiple.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileChooser {\n  isMultiple(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-based Page.locator in TypeScript\nDESCRIPTION: Method signature for creating a locator using a function. The method accepts a function that returns an Awaitable value and returns a Locator instance typed with the function's return type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.locator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteCookiesRequest Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for DeleteCookiesRequest that specifies the structure for cookie deletion requests in Puppeteer. It includes properties like name (required), domain, path, url, and partitionKey (optional) which allow for targeted cookie deletion.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.deletecookiesrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DeleteCookiesRequest\n```\n\n----------------------------------------\n\nTITLE: Defining KeyDownOptions Interface in TypeScript\nDESCRIPTION: Interface definition for KeyDownOptions containing deprecated properties 'commands' and 'text'. Both properties are automatically handled by the system and should not be used.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keydownoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyDownOptions\n```\n\n----------------------------------------\n\nTITLE: Defining CSSCoverage.stop Method in TypeScript\nDESCRIPTION: TypeScript class method definition for stopping CSS coverage analysis and returning an array of coverage entries. The method is asynchronous and returns a Promise containing an array of CoverageEntry objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverage.stop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CSSCoverage {\n  stop(): Promise<CoverageEntry[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for canDownload in TypeScript\nDESCRIPTION: Defines the canDownload function signature which accepts InstallOptions and returns a Promise resolving to a boolean indicating whether download is possible.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.candownload.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function canDownload(options: InstallOptions): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Defining CDPSessionEvent.SessionDetached Constant in TypeScript\nDESCRIPTION: TypeScript definition for the CDPSessionEvent.SessionDetached constant. This variable holds the string literal 'sessiondetached' which is used as an event name for when a Chrome DevTools Protocol session has been detached.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsessionevent.sessiondetached.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSessionDetached: 'sessiondetached';\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Class Signature in TypeScript\nDESCRIPTION: Declares the CLI class export in TypeScript. This class likely handles command-line interface operations for the Puppeteer project.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CLI\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.$eval Method Signature in TypeScript\nDESCRIPTION: TypeScript signature for the ElementHandle.$eval method that runs a function on the first element matching a given selector within the current element. The method accepts a selector, a function to execute, and optional arguments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle._eval.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  $eval<\n    Selector extends string,\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<\n      NodeFor<Selector>,\n      Params\n    >,\n  >(\n    selector: Selector,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: EventEmitter.on Method Implementation in TypeScript\nDESCRIPTION: The TypeScript signature for the EventEmitter.on() method, which binds an event listener to fire when a specific event occurs. It accepts an event type and a handler function, and returns the EventEmitter instance for method chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.eventemitter.on.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  on<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    handler: Handler<EventsWithWildcard<Events>[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DebugInfo Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for DebugInfo in Puppeteer. The interface contains a pendingProtocolErrors property which is an array of Error objects used for tracking pending protocol errors.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.debuginfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DebugInfo\n```\n\n----------------------------------------\n\nTITLE: Defining the RemoteAddress Interface Signature in TypeScript\nDESCRIPTION: This TypeScript snippet declares the signature for the `RemoteAddress` interface. This interface is intended to model a network address, typically containing an IP address and a port number, as detailed in the properties section following this definition.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.remoteaddress.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RemoteAddress\n```\n\n----------------------------------------\n\nTITLE: Defining CDP Websocket Endpoint Regex in TypeScript\nDESCRIPTION: Declaration of a regular expression constant used to match Chrome DevTools Protocol (CDP) websocket endpoints. This regex is likely used within Puppeteer to validate or extract websocket URLs for CDP connections.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.cdp_websocket_endpoint_regex.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nCDP_WEBSOCKET_ENDPOINT_REGEX: RegExp;\n```\n\n----------------------------------------\n\nTITLE: Defining CoverageEntry Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CoverageEntry in Puppeteer. This interface is used to represent a single entry in a coverage report with properties for tracking covered ranges, content text, and the URL of the resource.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.coverageentry.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CoverageEntry\n```\n\n----------------------------------------\n\nTITLE: Defining CLI.run Method Signature in TypeScript\nDESCRIPTION: The method signature for the run() method in Puppeteer's CLI class that takes an array of string arguments and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.cli.run.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CLI {\n  run(argv: string[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDPSession Class in TypeScript\nDESCRIPTION: Abstract class definition for CDPSession that extends EventEmitter to handle Chrome DevTools Protocol events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class CDPSession extends EventEmitter<CDPSessionEvents>\n```\n\n----------------------------------------\n\nTITLE: Dispatching touchEnd Event with Puppeteer Touchscreen API - TypeScript\nDESCRIPTION: This TypeScript snippet defines the touchEnd method as part of the Puppeteer Touchscreen class, outlining its asynchronous signature. It is used to programmatically dispatch a touchend event on the first active touch point in an automation scenario. The method returns a Promise that resolves when the event has been dispatched, and requires Puppeteer as a dependency within a Node.js environment.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.touchscreen.touchend.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Touchscreen {\n  touchEnd(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MouseMoveOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the MouseMoveOptions interface for Puppeteer. It includes a single optional property 'steps' of type number, which determines the number of movements to make from the current mouse position to the new one.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mousemoveoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MouseMoveOptions\n{\n  steps?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TracingOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the TracingOptions interface used in Puppeteer. It includes optional properties for categories, path, and screenshots.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracingoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TracingOptions\n```\n\n----------------------------------------\n\nTITLE: Defining TimeoutError Class in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the TimeoutError class, which extends PuppeteerError. It is used to represent timeout errors in Puppeteer operations such as page.waitForSelector or puppeteer.launch.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.timeouterror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TimeoutError extends PuppeteerError\n```\n\n----------------------------------------\n\nTITLE: Defining Tracing Class in TypeScript\nDESCRIPTION: Class signature for the Tracing class that exposes the tracing audit interface in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Tracing\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPRequest responseForRequest Method in TypeScript\nDESCRIPTION: Method signature for the responseForRequest() function in the HTTPRequest class. This method returns the ResponseForRequest object that will be used if request interception is allowed to proceed without being aborted.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.responseforrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  responseForRequest(): Partial<ResponseForRequest> | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetInstalledBrowsersOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure for browser installation options. Contains a single property 'cacheDir' of type string that defines the root path of the cache directory.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.getinstalledbrowsersoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetInstalledBrowsersOptions\n```\n\n----------------------------------------\n\nTITLE: Declaring the Abstract Touchscreen Class in Puppeteer (TypeScript)\nDESCRIPTION: This snippet defines the abstract Touchscreen class, providing the structure for touchscreen event simulation in Puppeteer. The abstract declaration indicates that it cannot be instantiated directly and is designed for internal use within the Puppeteer framework. Consumers should interact with this class via provided API methods, not by subclassing or directly constructing instances. No dependencies are explicitly mentioned, but the class is presumed to be part of the Puppeteer codebase and relies on its internal event-handling mechanisms. Key methods (not shown here) would include handling of tap, touchstart, touchend, and touchmove events. No input/output is directly shown in this snippet. The constructor is internal and should not be accessed by external code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.touchscreen.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Touchscreen\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.continueRequestOverrides Method in TypeScript\nDESCRIPTION: Method signature for continueRequestOverrides() which returns ContinueRequestOverrides. This method is used to get the override settings that will be applied when an intercepted request is allowed to continue without being aborted or responded to.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.continuerequestoverrides.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  continueRequestOverrides(): ContinueRequestOverrides;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.redirectChain Method in TypeScript\nDESCRIPTION: Abstract class definition for the HTTPRequest redirectChain method that returns an array of HTTPRequest objects representing the redirect chain.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.redirectchain.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract redirectChain(): HTTPRequest[];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the `createCDPSession` Method in Puppeteer Target (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the abstract method signature for `createCDPSession` within the Puppeteer `Target` class. It indicates that any class extending `Target` must provide an implementation that returns a Promise resolving to a `CDPSession` object, which allows for low-level interaction with the target using the Chrome DevTools Protocol.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.createcdpsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Target {\n  abstract createCDPSession(): Promise<CDPSession>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: HTTPRequest.abortErrorReason Method Signature in TypeScript\nDESCRIPTION: Defines the signature of the abortErrorReason method in the HTTPRequest class that returns the most recent reason for aborting a network request. The method returns a Protocol.Network.ErrorReason value or null if no abort reason exists.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.aborterrorreason.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abortErrorReason(): Protocol.Network.ErrorReason | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.url() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the url() method in the HTTPRequest class. The method returns a string representing the URL of the request.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Moveable Interface in TypeScript\nDESCRIPTION: Defines the Moveable interface which provides functionality for moving resources. The interface includes a move() method that can be used when 'using' the resource.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.moveable.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Moveable\n```\n\n----------------------------------------\n\nTITLE: Defining CommandOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CommandOptions which specifies configuration options for commands in Puppeteer. It contains a single property 'timeout' of type number.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commandoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CommandOptions\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Run Method in TypeScript\nDESCRIPTION: Signature for the 'run' method of the CLI class. It takes an 'argv' parameter, likely for processing command-line arguments. The return type and full implementation details are not provided in this snippet.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrun(argv)\n```\n\n----------------------------------------\n\nTITLE: Implementing JSHandle.asElement Method in TypeScript with Puppeteer\nDESCRIPTION: Declaration of the asElement() method in the JSHandle class. This method returns either null or the handle itself if the handle is an instance of ElementHandle, which represents a DOM element in the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.aselement.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract asElement(): ElementHandle<Node> | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChromeSettings Interface in TypeScript\nDESCRIPTION: Interface declaration for ChromeSettings that specifies Chrome browser configuration options including downloadBaseUrl for browser downloads, skipDownload flag to prevent browser download during installation, and version specification for browser compatibility.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.chromesettings.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChromeSettings\n```\n\n----------------------------------------\n\nTITLE: Defining ClickOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the ClickOptions interface, which extends MouseClickOptions. It includes an optional 'offset' property of type Offset, representing the clickable point offset relative to the top-left corner of the border box.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.clickoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ClickOptions extends MouseClickOptions\n```\n\n----------------------------------------\n\nTITLE: Declaring the computeExecutablePath Function in TypeScript\nDESCRIPTION: Function signature for computeExecutablePath which computes the path to a browser executable based on provided options. It takes ComputeExecutablePathOptions as input and returns a string representing the path.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.computeexecutablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function computeExecutablePath(\n  options: ComputeExecutablePathOptions,\n): string;\n```\n\n----------------------------------------\n\nTITLE: Declaring EventEmitter Class in TypeScript\nDESCRIPTION: This snippet defines the EventEmitter class signature in TypeScript. It extends Record<EventType, unknown> and implements CommonEventEmitter with EventsWithWildcard.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class EventEmitter<Events extends Record<EventType, unknown>> implements CommonEventEmitter<EventsWithWildcard<Events>>\n```\n\n----------------------------------------\n\nTITLE: Defining HandleOr Type in TypeScript for Puppeteer\nDESCRIPTION: This snippet defines the HandleOr type as a union of HandleFor<T>, JSHandle<T>, and T. It allows for flexible typing in Puppeteer's API, enabling functions to accept either handle types or direct values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.handleor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HandleOr<T> = HandleFor<T> | JSHandle<T> | T;\n```\n\n----------------------------------------\n\nTITLE: Declaring ProtocolError Class in TypeScript\nDESCRIPTION: Defines the ProtocolError class that extends PuppeteerError. The class includes readonly properties for error codes and original error messages to handle protocol-level errors in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.protocolerror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ProtocolError extends PuppeteerError\n```\n\n----------------------------------------\n\nTITLE: Defining KnownDevices variable in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the KnownDevices variable as a readonly record of device names mapped to Device objects. It includes a wide range of devices from various manufacturers, including both portrait and landscape orientations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.knowndevices.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nKnownDevices: Readonly<\n  Record<\n    | 'Blackberry PlayBook'\n    | 'Blackberry PlayBook landscape'\n    | 'BlackBerry Z30'\n    | 'BlackBerry Z30 landscape'\n    | 'Galaxy Note 3'\n    | 'Galaxy Note 3 landscape'\n    | 'Galaxy Note II'\n    | 'Galaxy Note II landscape'\n    | 'Galaxy S III'\n    | 'Galaxy S III landscape'\n    | 'Galaxy S5'\n    | 'Galaxy S5 landscape'\n    | 'Galaxy S8'\n    | 'Galaxy S8 landscape'\n    | 'Galaxy S9+'\n    | 'Galaxy S9+ landscape'\n    | 'Galaxy Tab S4'\n    | 'Galaxy Tab S4 landscape'\n    | 'iPad'\n    | 'iPad landscape'\n    | 'iPad (gen 6)'\n    | 'iPad (gen 6) landscape'\n    | 'iPad (gen 7)'\n    | 'iPad (gen 7) landscape'\n    | 'iPad Mini'\n    | 'iPad Mini landscape'\n    | 'iPad Pro'\n    | 'iPad Pro landscape'\n    | 'iPad Pro 11'\n    | 'iPad Pro 11 landscape'\n    | 'iPhone 4'\n    | 'iPhone 4 landscape'\n    | 'iPhone 5'\n    | 'iPhone 5 landscape'\n    | 'iPhone 6'\n    | 'iPhone 6 landscape'\n    | 'iPhone 6 Plus'\n    | 'iPhone 6 Plus landscape'\n    | 'iPhone 7'\n    | 'iPhone 7 landscape'\n    | 'iPhone 7 Plus'\n    | 'iPhone 7 Plus landscape'\n    | 'iPhone 8'\n    | 'iPhone 8 landscape'\n    | 'iPhone 8 Plus'\n    | 'iPhone 8 Plus landscape'\n    | 'iPhone SE'\n    | 'iPhone SE landscape'\n    | 'iPhone X'\n    | 'iPhone X landscape'\n    | 'iPhone XR'\n    | 'iPhone XR landscape'\n    | 'iPhone 11'\n    | 'iPhone 11 landscape'\n    | 'iPhone 11 Pro'\n    | 'iPhone 11 Pro landscape'\n    | 'iPhone 11 Pro Max'\n    | 'iPhone 11 Pro Max landscape'\n    | 'iPhone 12'\n    | 'iPhone 12 landscape'\n    | 'iPhone 12 Pro'\n    | 'iPhone 12 Pro landscape'\n    | 'iPhone 12 Pro Max'\n    | 'iPhone 12 Pro Max landscape'\n    | 'iPhone 12 Mini'\n    | 'iPhone 12 Mini landscape'\n    | 'iPhone 13'\n    | 'iPhone 13 landscape'\n    | 'iPhone 13 Pro'\n    | 'iPhone 13 Pro landscape'\n    | 'iPhone 13 Pro Max'\n    | 'iPhone 13 Pro Max landscape'\n    | 'iPhone 13 Mini'\n    | 'iPhone 13 Mini landscape'\n    | 'iPhone 14'\n    | 'iPhone 14 landscape'\n    | 'iPhone 14 Plus'\n    | 'iPhone 14 Plus landscape'\n    | 'iPhone 14 Pro'\n    | 'iPhone 14 Pro landscape'\n    | 'iPhone 14 Pro Max'\n    | 'iPhone 14 Pro Max landscape'\n    | 'iPhone 15'\n    | 'iPhone 15 landscape'\n    | 'iPhone 15 Plus'\n    | 'iPhone 15 Plus landscape'\n    | 'iPhone 15 Pro'\n    | 'iPhone 15 Pro landscape'\n    | 'iPhone 15 Pro Max'\n    | 'iPhone 15 Pro Max landscape'\n    | 'JioPhone 2'\n    | 'JioPhone 2 landscape'\n    | 'Kindle Fire HDX'\n    | 'Kindle Fire HDX landscape'\n    | 'LG Optimus L70'\n    | 'LG Optimus L70 landscape'\n    | 'Microsoft Lumia 550'\n    | 'Microsoft Lumia 950'\n    | 'Microsoft Lumia 950 landscape'\n    | 'Nexus 10'\n    | 'Nexus 10 landscape'\n    | 'Nexus 4'\n    | 'Nexus 4 landscape'\n    | 'Nexus 5'\n    | 'Nexus 5 landscape'\n    | 'Nexus 5X'\n    | 'Nexus 5X landscape'\n    | 'Nexus 6'\n    | 'Nexus 6 landscape'\n    | 'Nexus 6P'\n    | 'Nexus 6P landscape'\n    | 'Nexus 7'\n    | 'Nexus 7 landscape'\n    | 'Nokia Lumia 520'\n    | 'Nokia Lumia 520 landscape'\n    | 'Nokia N9'\n    | 'Nokia N9 landscape'\n    | 'Pixel 2'\n    | 'Pixel 2 landscape'\n    | 'Pixel 2 XL'\n    | 'Pixel 2 XL landscape'\n    | 'Pixel 3'\n    | 'Pixel 3 landscape'\n    | 'Pixel 4'\n    | 'Pixel 4 landscape'\n    | 'Pixel 4a (5G)'\n    | 'Pixel 4a (5G) landscape'\n    | 'Pixel 5'\n    | 'Pixel 5 landscape'\n    | 'Moto G4'\n    | 'Moto G4 landscape',\n    Device\n  >\n>;\n```\n\n----------------------------------------\n\nTITLE: Defining ChromeReleaseChannel Type in TypeScript\nDESCRIPTION: TypeScript type definition specifying the valid Chrome release channels that can be used in Puppeteer. Includes 'chrome' (stable), 'chrome-beta', 'chrome-canary', and 'chrome-dev' as possible values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.chromereleasechannel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ChromeReleaseChannel =\n  | 'chrome'\n  | 'chrome-beta'\n  | 'chrome-canary'\n  | 'chrome-dev';\n```\n\n----------------------------------------\n\nTITLE: Defining close() Method in ConnectionTransport Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the close() method in the ConnectionTransport interface. This method is used to close a connection transport and doesn't return any value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connectiontransport.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionTransport {\n  close(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MouseOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the MouseOptions interface in TypeScript for Puppeteer. It includes optional properties for button selection and click count, with the latter being deprecated.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouseoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MouseOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Process.hasClosed() Method in TypeScript\nDESCRIPTION: This code snippet defines the hasClosed() method in the Process class. The method returns a Promise that resolves to void, indicating when the process has closed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.hasclosed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  hasClosed(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse Class in TypeScript\nDESCRIPTION: This snippet defines the abstract HTTPResponse class in TypeScript. It represents responses received by the Page class in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class HTTPResponse\n```\n\n----------------------------------------\n\nTITLE: Getting Default Timeout Value with Puppeteer Page API in TypeScript\nDESCRIPTION: This code defines the abstract 'getDefaultTimeout' method inside the Puppeteer Page class, which returns the current maximum default timeout in milliseconds as a number. The method is intended as part of the Page API for querying timeout settings in Puppeteer-controlled browser automation. No external dependencies aside from Puppeteer are required, no parameters are needed, and the output is always a number representing milliseconds; the method is expected to be implemented by subclasses.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.getdefaulttimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract getDefaultTimeout(): number;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining InstallOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InstallOptions interface, which is used to specify various options for installing browsers in Puppeteer. It includes properties for controlling the download source, browser type, build identification, caching, and platform-specific settings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.installoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InstallOptions\n```\n\n----------------------------------------\n\nTITLE: Defining BoxModel Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the BoxModel interface in TypeScript for Puppeteer. It includes properties for border, content, margin, padding, width, and height, which represent different aspects of an element's box model.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.boxmodel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BoxModel {\n  border: Quad;\n  content: Quad;\n  height: number;\n  margin: Quad;\n  padding: Quad;\n  width: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HTMLStyleElement to a Frame in Puppeteer (TypeScript)\nDESCRIPTION: Method signature for adding an inline style element to a frame. This overload takes options without a URL property and returns a Promise that resolves to an ElementHandle for the created HTMLStyleElement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.addstyletag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  addStyleTag(\n    options: Omit<FrameAddStyleTagOptions, 'url'>,\n  ): Promise<ElementHandle<HTMLStyleElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setDragInterception Method in TypeScript\nDESCRIPTION: Abstract class definition for the Page class showing the setDragInterception method signature. The method takes a boolean parameter to enable/disable drag interception and returns a Promise<void>. This API is now obsolete and should not be used.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setdraginterception.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setDragInterception(enabled: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TouchError Class in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the TouchError class, which extends PuppeteerError. It is thrown when an attempt is made to move or end a touch that does not exist in Puppeteer operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.toucherror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TouchError extends PuppeteerError\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse.drag method in Puppeteer's Mouse class\nDESCRIPTION: Abstract method declaration for the drag functionality in Puppeteer's Mouse class. It takes starting and target points as parameters and returns a Promise containing drag data from the browser's input protocol.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.drag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract drag(start: Point, target: Point): Promise<Protocol.Input.DragData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Touchscreen.touchEnd in TypeScript\nDESCRIPTION: Method signature for touchEnd() that dispatches a touchend event on the first active touch. Returns a Promise that resolves when the event has been dispatched.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.touchend.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Touchscreen {\n  touchEnd(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative approach for accessing frame name in Puppeteer\nDESCRIPTION: The recommended alternative approach to get a frame's name or id attribute, instead of using the deprecated Frame.name() method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.name.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = await frame.frameElement();\nconst nameOrId = await element.evaluate(frame => frame.name ?? frame.id);\n```\n\n----------------------------------------\n\nTITLE: Implementing EventEmitter.once Method in TypeScript\nDESCRIPTION: Class method signature for EventEmitter.once() which registers a one-time event listener. The listener automatically removes itself after being triggered once, unlike the 'on' method which remains active until explicitly removed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.once.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventEmitter {\n  once<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    handler: Handler<EventsWithWildcard<Events>[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring HTTPRequest ResourceType Method in TypeScript\nDESCRIPTION: Abstract class definition showing the resourceType method signature which returns a ResourceType enum value indicating how the rendering engine perceives the requested resource.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.resourcetype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract resourceType(): ResourceType;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard.sendCharacter Method in TypeScript\nDESCRIPTION: Abstract class definition for the Keyboard class showing the sendCharacter method signature. The method takes a single character string parameter and returns a Promise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keyboard.sendcharacter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract sendCharacter(char: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.waitForFileChooser Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.waitForFileChooser method. It takes an optional WaitTimeoutOptions parameter and returns a Promise resolving to a FileChooser object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfilechooser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract waitForFileChooser(\n    options?: WaitTimeoutOptions,\n  ): Promise<FileChooser>;\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserContext.overridePermissions Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the overridePermissions method in the BrowserContext class. This method allows granting specific permissions to a given origin within a browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.overridepermissions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract overridePermissions(\n    origin: string,\n    permissions: Permission[],\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDPEvents Type in TypeScript for Puppeteer\nDESCRIPTION: This type definition creates a mapping of Chrome DevTools Protocol event names to their corresponding payload types. It uses a mapped type to iterate over all properties in ProtocolMapping.Events and extracts the first element of each event's tuple type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CDPEvents = {\n  [Property in keyof ProtocolMapping.Events]: ProtocolMapping.Events[Property][0];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadBehavior Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for controlling download behavior in Puppeteer. It includes optional downloadPath property for specifying where files should be saved and a required policy property to determine how download requests should be handled.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.downloadbehavior.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DownloadBehavior\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest Failure Method in TypeScript\nDESCRIPTION: Abstract class definition showing the failure() method signature that returns either an error object with errorText or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.failure.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract failure(): {\n    errorText: string;\n  } | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Browser Platform in Typescript with Puppeteer\nDESCRIPTION: A function that detects and returns the current browser platform. The function returns a BrowserPlatform type when the platform is successfully detected, or undefined if the platform cannot be determined.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.detectbrowserplatform.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function detectBrowserPlatform(): BrowserPlatform | undefined;\n```\n\n----------------------------------------\n\nTITLE: FirefoxSettings Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for FirefoxSettings, which provides configuration options for Firefox when used with Puppeteer. This interface allows users to customize Firefox browser download and installation behavior.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.firefoxsettings.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirefoxSettings\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteCookiesRequest Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for DeleteCookiesRequest, which specifies the structure of cookie deletion requests in Puppeteer. It includes required and optional properties for targeting specific cookies based on name, domain, path, URL, and partition key.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.deletecookiesrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DeleteCookiesRequest\n```\n\n----------------------------------------\n\nTITLE: Defining WebDriver BiDi WebSocket Endpoint Regex Pattern in TypeScript\nDESCRIPTION: Declaration of a constant regular expression pattern used to validate or match WebDriver BiDi websocket endpoint URLs. This is a TypeScript type definition showing the constant's signature.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.webdriver_bidi_websocket_endpoint_regex.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nWEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX: RegExp;\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle.dispose Method in TypeScript\nDESCRIPTION: Abstract method declaration for disposing JSHandle objects. This method releases the referenced object for garbage collection and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.dispose.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract dispose(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for ProfileOptions in Puppeteer. This interface is used to configure browser profile settings, containing properties for the profile path and preferences.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.profileoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ProfileOptions\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserLauncher.defaultArgs Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the abstract defaultArgs method in the BrowserLauncher class. It takes a LaunchOptions object as parameter and returns an array of strings representing command-line arguments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserlauncher.defaultargs.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserLauncher {\n  abstract defaultArgs(object: LaunchOptions): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTML Structure for ElementHandle.$$eval Demonstration\nDESCRIPTION: This HTML snippet demonstrates the structure used in the JavaScript example to show how ElementHandle.$$eval works. It contains a 'feed' div with two 'tweet' divs inside.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.__eval.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"feed\">\n  <div class=\"tweet\">Hello!</div>\n  <div class=\"tweet\">Hi!</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining the PaperFormat Type Alias in TypeScript\nDESCRIPTION: Defines the `PaperFormat` type as a union of string literals derived from `LowerCasePaperFormat`. This allows specifying standard paper sizes (e.g., 'letter', 'Letter', 'LETTER', 'a4', 'A4', 'A4') for PDF generation in Puppeteer. It leverages TypeScript's utility types `Uppercase`, `Capitalize`, and `LowerCase` for flexibility in casing.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.paperformat.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PaperFormat =\n  | Uppercase<LowerCasePaperFormat>\n  | Capitalize<LowerCasePaperFormat>\n  | LowerCasePaperFormat;\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.dragOver Method in TypeScript\nDESCRIPTION: Class method signature for ElementHandle.dragOver, which takes an optional DragData parameter. This method is marked as obsolete as dragover events are now automatically performed during dragging operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.dragover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  dragOver(\n    this: ElementHandle<Element>,\n    data?: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the PuppeteerNode Class Extension in TypeScript\nDESCRIPTION: This TypeScript code snippet declares the `PuppeteerNode` class, which extends the base `Puppeteer` class. It signifies that `PuppeteerNode` inherits properties and methods from `Puppeteer` while adding Node.js specific functionalities like browser fetching and downloading. This class is intended for internal use within the Puppeteer library structure for Node.js environments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteernode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class PuppeteerNode extends Puppeteer\n```\n\n----------------------------------------\n\nTITLE: Defining FileChooser.cancel Method in TypeScript\nDESCRIPTION: TypeScript class definition for the FileChooser.cancel method that closes a file chooser dialog without selecting any files. The method returns a Promise that resolves to void when the operation completes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.filechooser.cancel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileChooser {\n  cancel(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ScreencastOptions Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `ScreencastOptions` used in Puppeteer to specify configuration settings for screencasting. It lists optional properties such as `colors`, `crop`, `delay`, `ffmpegPath`, `format`, `fps`, `loop`, `path`, `quality`, `scale`, and `speed` with their corresponding types and descriptions, allowing customization of the screencast output.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.screencastoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScreencastOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ChromeReleaseChannel Type in TypeScript for Puppeteer\nDESCRIPTION: This type definition specifies the valid Chrome release channels that can be used with Puppeteer. It includes 'chrome' (stable), 'chrome-beta', 'chrome-canary', and 'chrome-dev' as string literal options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.chromereleasechannel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ChromeReleaseChannel =\n  | 'chrome'\n  | 'chrome-beta'\n  | 'chrome-canary'\n  | 'chrome-dev';\n```\n\n----------------------------------------\n\nTITLE: Uninstall Function Signature in TypeScript\nDESCRIPTION: Function signature for uninstalling browser instances in Puppeteer. Takes UninstallOptions as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.uninstall.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function uninstall(options: UninstallOptions): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Frame.$$ Method Signature in TypeScript for Puppeteer\nDESCRIPTION: The TypeScript signature for the Frame.$$ method in Puppeteer. This method returns a promise that resolves to an array of ElementHandle instances pointing to elements matching the given selector. It supports various selector formats including CSS, text, ARIA, and XPath selectors.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.__.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  $$<Selector extends string>(\n    selector: Selector,\n    options?: QueryOptions,\n  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BrowserContext.close() method in TypeScript\nDESCRIPTION: Defines the abstract close() method in the BrowserContext class which closes the browser context and all associated pages. Returns a Promise that resolves when the context has been closed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract close(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connection.send Method in TypeScript\nDESCRIPTION: TypeScript class method definition for Connection.send that handles protocol command sending in Puppeteer. The method is generic and accepts a command method, optional parameters, and command options, returning a Promise of the command's return type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.send.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    params?: ProtocolMapping.Commands[T]['paramsType'][0],\n    options?: CommandOptions,\n  ): Promise<ProtocolMapping.Commands[T]['returnType']>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionTransport.close Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the close() method on the ConnectionTransport interface. This method is used to terminate transport connections and returns void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connectiontransport.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionTransport {\n  close(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect Chain Example - Single Redirect\nDESCRIPTION: Example demonstrating how to access the redirect chain for a request with a single redirect.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await page.goto('http://example.com');\nconst chain = response.request().redirectChain();\nconsole.log(chain.length); // 1\nconsole.log(chain[0].url()); // 'http://example.com'\n```\n\n----------------------------------------\n\nTITLE: Defining setTimeout Method for Locator Class in TypeScript\nDESCRIPTION: This code snippet defines the setTimeout method for the Locator class. It creates a new locator instance by cloning the current one and setting a total timeout for locator actions. The method takes a number parameter for the timeout value, with 0 disabling the timeout. It returns a new Locator instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.settimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setTimeout(timeout: number): Locator<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActionOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ActionOptions which provides configuration options for locator actions in Puppeteer. It includes an optional AbortSignal property that allows aborting the locator action.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.actionoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ActionOptions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dialog Default Value in Puppeteer with TypeScript\nDESCRIPTION: This method allows retrieving the default value of a prompt dialog in Puppeteer. It returns a string representing the default value if the dialog is a prompt, or an empty string if the dialog is another type (alert, confirm, etc.).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.dialog.defaultvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dialog {\n  defaultValue(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Headful Chrome in Puppeteer\nDESCRIPTION: Demonstrates how to launch Chrome in headful mode (with GUI) by setting headless option to false.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/headless-modes.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({headless: false});\n```\n\n----------------------------------------\n\nTITLE: Implementing CDPSession.send Method in TypeScript\nDESCRIPTION: Abstract method signature for sending Chrome DevTools Protocol commands. Takes a method name, optional parameters specific to the command, and optional command options, and returns a promise with the command result.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.send.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CDPSession {\n  abstract send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    params?: ProtocolMapping.Commands[T]['paramsType'][0],\n    options?: CommandOptions,\n  ): Promise<ProtocolMapping.Commands[T]['returnType']>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActionResult Type in TypeScript for Puppeteer\nDESCRIPTION: Defines the ActionResult type as a string union type with three possible values that control how intercepted network requests are handled: 'continue' allows the request to proceed normally, 'abort' cancels the request, and 'respond' provides a custom response.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.actionresult.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ActionResult = 'continue' | 'abort' | 'respond';\n```\n\n----------------------------------------\n\nTITLE: Defining ScreencastOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for configuring screencast recordings in Puppeteer. Includes options for video format, quality, dimensions, frame rate, and other recording parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screencastoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScreencastOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Process.hasClosed Method Signature in TypeScript\nDESCRIPTION: TypeScript signature for the hasClosed() method in the Process class. This method returns a Promise that resolves when the process has closed, allowing for asynchronous detection of process termination.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.process.hasclosed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  hasClosed(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using redirectChain with No Redirects Example\nDESCRIPTION: Example showing how to use the redirectChain method for a page with no redirects. The chain array will be empty in this case.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await page.goto('https://google.com');\nconst chain = response.request().redirectChain();\nconsole.log(chain.length); // 0\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter.emit() Method Signature in TypeScript\nDESCRIPTION: This snippet defines the emit() method signature for the CommonEventEmitter interface. It takes a generic type parameter Key extending keyof Events, a type parameter of that key, and an event of the corresponding type from the Events object. The method returns a boolean value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.emit.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  emit<Key extends keyof Events>(type: Key, event: Events[Key]): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Browsers Type in TypeScript\nDESCRIPTION: Defines the SupportedBrowser type alias, limiting allowable strings to either \\'chrome\\' or \\'firefox\\'. This type enforces which browsers are supported by Puppeteer when performing automation tasks. There are no external dependencies. This type should be used as a constraint wherever a supported browser is to be specified, ensuring only recognized values are accepted.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.supportedbrowser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SupportedBrowser = 'chrome' | 'firefox';\n```\n\n----------------------------------------\n\nTITLE: Cancelling Device Request Prompts in Puppeteer with TypeScript\nDESCRIPTION: Method signature for cancelling a device request prompt in Puppeteer. The cancel method returns a Promise that resolves to void when the prompt is successfully cancelled.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.cancel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DeviceRequestPrompt {\n  cancel(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Touchscreen Abstract Class in TypeScript\nDESCRIPTION: Abstract class declaration for the Touchscreen functionality in Puppeteer. This class is marked as internal and should not be instantiated directly or extended by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Touchscreen\n```\n\n----------------------------------------\n\nTITLE: Implementing JSHandle.toString Method in TypeScript\nDESCRIPTION: This code snippet shows the abstract method signature for the toString() method in the JSHandle class. It returns a string representation of the JSHandle, which is useful for debugging purposes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.tostring.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UninstallOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the UninstallOptions interface in TypeScript. It specifies the structure for options used when uninstalling a browser in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.uninstalloptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UninstallOptions\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for Page.$$eval in TypeScript\nDESCRIPTION: Example showing how the compiler infers the return type from the provided page function. This demonstrates extracting text content from all input elements on a page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__eval.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst allInputValues = await page.$$eval('input', elements =>\n  elements.map(e => e.textContent),\n);\n```\n\n----------------------------------------\n\nTITLE: MediaFeature Interface Definition in TypeScript for Puppeteer\nDESCRIPTION: The TypeScript interface definition for MediaFeature in Puppeteer. This interface is used to emulate media features in a browser environment, with properties for the feature name and value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mediafeature.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MediaFeature\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.contentFrame Method for HTMLIFrameElement in TypeScript\nDESCRIPTION: This signature is specifically for HTMLIFrameElement instances. It resolves the frame associated with the iframe element and always returns a Promise that resolves to a Frame object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.contentframe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract contentFrame(this: ElementHandle<HTMLIFrameElement>): Promise<Frame>;\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Session Method Definition in TypeScript\nDESCRIPTION: Defines the session() method signature within the Connection class. It takes a sessionId parameter and returns either a CDPSession object or null. Used to retrieve an existing CDP session by its identifier.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.session.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  session(sessionId: string): CDPSession | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Alternative to Frame.name in Puppeteer (TypeScript)\nDESCRIPTION: The recommended alternative approach to the obsolete Frame.name() method. This code retrieves a frame's name or id attribute by first accessing the frame element and then evaluating its properties.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.name.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = await frame.frameElement();\nconst nameOrId = await element.evaluate(frame => frame.name ?? frame.id);\n```\n\n----------------------------------------\n\nTITLE: Defining KeyPressOptions Type in TypeScript for Puppeteer\nDESCRIPTION: Type definition that combines KeyDownOptions and KeyboardTypeOptions interfaces to provide comprehensive options for keyboard press events in Puppeteer. This type is used to configure keyboard press behavior in automated browser interactions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keypressoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KeyPressOptions = KeyDownOptions & KeyboardTypeOptions;\n```\n\n----------------------------------------\n\nTITLE: Implementing ElementHandle.touchStart Method in TypeScript for Puppeteer\nDESCRIPTION: Method signature for the touchStart functionality in the ElementHandle class. This method scrolls the element into view if needed and initiates a touch event in the center of the element, returning a Promise that resolves to a TouchHandle object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.touchstart.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  touchStart(this: ElementHandle<Element>): Promise<TouchHandle>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining defaultArgs Function Signature in TypeScript\nDESCRIPTION: The function signature for defaultArgs which takes optional LaunchOptions and returns an array of strings representing command line arguments for Chrome/Chromium.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.defaultargs.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultArgs: (options?: PuppeteerCore.LaunchOptions) => string[]\n```\n\n----------------------------------------\n\nTITLE: ElementScreenshotOptions Interface Definition in TypeScript\nDESCRIPTION: Defines the ElementScreenshotOptions interface that extends ScreenshotOptions. This interface is used to configure element screenshot behavior in Puppeteer with an optional scrollIntoView property that defaults to true.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementscreenshotoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ElementScreenshotOptions extends ScreenshotOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseForRequest Structure - TypeScript Interface\nDESCRIPTION: This snippet declares the ResponseForRequest interface in TypeScript, which is required to specify custom response data when fulfilling intercepted requests with Puppeteer. The interface defines optional and required properties such as the body (string or Uint8Array), contentType (string), headers (object supporting arrays for multivalued headers), and the response status code (number). Dependencies include TypeScript language features and understanding of Puppeteer request/response interception mechanisms. Input fields accept standard response values and support flexible header formats; the structure ensures type safety and predictable response fulfillment workflows.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.responseforrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ResponseForRequest\n\n```\n\n----------------------------------------\n\nTITLE: Defining ConsoleMessageType TypeScript Union Type for Puppeteer\nDESCRIPTION: Defines a TypeScript union type that represents all supported console message types in Puppeteer. This type is used to categorize console messages captured during browser automation, such as logs, errors, warnings, and other console API calls.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.consolemessagetype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ConsoleMessageType =\n  | 'log'\n  | 'debug'\n  | 'info'\n  | 'error'\n  | 'warn'\n  | 'dir'\n  | 'dirxml'\n  | 'table'\n  | 'trace'\n  | 'clear'\n  | 'startGroup'\n  | 'startGroupCollapsed'\n  | 'endGroup'\n  | 'assert'\n  | 'profile'\n  | 'profileEnd'\n  | 'count'\n  | 'timeEnd'\n  | 'verbose';\n```\n\n----------------------------------------\n\nTITLE: Defining AwaitedLocator Generic Type in TypeScript\nDESCRIPTION: A TypeScript type definition that extracts the element type S from a Locator<S>. This utility type uses conditional type inference to get the type parameter from the Locator generic type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.awaitedlocator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AwaitedLocator<T> = T extends Locator<infer S> ? S : never;\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle.jsonValue Method in TypeScript\nDESCRIPTION: Abstract method definition for JSHandle class that returns a Promise containing the serialized representation of a JavaScript object. The method throws an error if the object contains circular references and notably does not invoke any toJSON methods on the object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.jsonvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract jsonValue(): Promise<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Browser Context in Puppeteer with TypeScript\nDESCRIPTION: Abstract method signature for retrieving the default browser context. The method returns a BrowserContext instance that cannot be closed, as noted in the remarks section.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.defaultbrowsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract defaultBrowserContext(): BrowserContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Locator.clone Method in Puppeteer TypeScript\nDESCRIPTION: The signature for the clone method in the Locator class. This method creates a copy of the current Locator instance and returns a new instance of the same type T.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.clone.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  clone(): Locator<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency version notation in Markdown\nDESCRIPTION: Markdown notation showing version dependencies being updated for @puppeteer/browsers package\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- dependencies\n    - @puppeteer/browsers bumped from 1.9.0 to 1.9.1\n```\n\n----------------------------------------\n\nTITLE: Inefficient Puppeteer Implementation in Google Cloud Run (JavaScript)\nDESCRIPTION: An example of an inefficient Express app implementation in Google Cloud Run where Puppeteer is launched after the response is sent, causing significant slowdowns due to CPU being disabled.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\n\nconst app = express();\n\napp.post('/test-puppeteer', (req, res) => {\n  res.json({\n    jobId: 123,\n    acknowledged: true,\n  });\n\n  puppeteer.launch().then(browser => {\n    // 2 minutes later...\n  });\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.drag() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the abstract drag() method in the Mouse class. It takes start and target points as parameters and returns a Promise resolving to DragData.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.drag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract drag(start: Point, target: Point): Promise<Protocol.Input.DragData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Signature for Frame.frameElement() method in Puppeteer\nDESCRIPTION: Defines the frameElement() method signature in the Frame class. This method returns a Promise that resolves to either a HandleFor<HTMLIFrameElement> or null, representing the frame element associated with the current frame.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.frameelement.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  frameElement(): Promise<HandleFor<HTMLIFrameElement> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Web Worker URL in Puppeteer TypeScript\nDESCRIPTION: Method signature for the url() method of the WebWorker class, which returns the URL of the web worker as a string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.webworker.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebWorker {\n  url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Puppeteer Docker Container\nDESCRIPTION: Command to run the Puppeteer Docker container with necessary system capabilities. Uses --cap-add=SYS_ADMIN for Chrome sandbox security and executes a smoke test script.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i --init --rm --cap-add=SYS_ADMIN --name puppeteer-chrome puppeteer-chrome-linux node -e \"`cat test/smoke-test.js`\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Click Method in TypeScript\nDESCRIPTION: Abstract class definition for Mouse class with click method that handles mouse click operations. The method takes x and y coordinates for position and optional configuration options. Returns a Promise that resolves when the click operation is complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.click.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract click(\n    x: number,\n    y: number,\n    options?: Readonly<MouseClickOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaperFormat Type in TypeScript\nDESCRIPTION: TypeScript type definition for PaperFormat in Puppeteer, which represents all valid paper format types when printing a PDF. The type accepts uppercase, capitalized, or lowercase format names.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.paperformat.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PaperFormat =\n  | Uppercase<LowerCasePaperFormat>\n  | Capitalize<LowerCasePaperFormat>\n  | LowerCasePaperFormat;\n```\n\n----------------------------------------\n\nTITLE: Defining HandleOr Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the HandleOr type, which is a union type that can be either HandleFor<T>, JSHandle<T>, or T itself. It provides flexibility in handling different types of values or handles in Puppeteer operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.handleor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HandleOr<T> = HandleFor<T> | JSHandle<T> | T;\n```\n\n----------------------------------------\n\nTITLE: Implementing BrowserContext.browser Method in TypeScript\nDESCRIPTION: Abstract method declaration for retrieving the Browser instance associated with a BrowserContext. This method is part of the BrowserContext class and returns the Browser object that contains this context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.browser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract browser(): Browser;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediaFeature Interface in TypeScript\nDESCRIPTION: This snippet defines the MediaFeature interface in TypeScript. It represents a media feature that can be emulated, containing two properties: 'name' for the feature name and 'value' for the feature value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mediafeature.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MediaFeature\n```\n\n----------------------------------------\n\nTITLE: Defining BoundingBox Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for BoundingBox that extends the Point interface. It includes properties for width and height of elements in pixels.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.boundingbox.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BoundingBox extends Point\n```\n\n----------------------------------------\n\nTITLE: Defining waitForDevicePrompt in Puppeteer API - TypeScript\nDESCRIPTION: Defines the abstract waitForDevicePrompt method as part of the Page class within Puppeteer. This method returns a promise resolving to a DeviceRequestPrompt and can accept an optional WaitTimeoutOptions parameter to specify timing behavior. Requires the Puppeteer types for Page, DeviceRequestPrompt, and WaitTimeoutOptions; intended for extending browser automation capabilities around device requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.waitfordeviceprompt.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract waitForDevicePrompt(\n    options?: WaitTimeoutOptions,\n  ): Promise<DeviceRequestPrompt>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining setWaitForStableBoundingBox Method for Locator Class in TypeScript\nDESCRIPTION: This code snippet defines the setWaitForStableBoundingBox method for the Locator class. It creates a new locator instance by cloning the current one and specifies whether to wait for the element's bounding box to stabilize between animation frames.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.setwaitforstableboundingbox.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setWaitForStableBoundingBox<ElementType extends Element>(\n    this: Locator<ElementType>,\n    value: boolean,\n  ): Locator<ElementType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PuppeteerNode.defaultArgs() Method in TypeScript\nDESCRIPTION: This code snippet defines the defaultArgs() method for the PuppeteerNode class. It accepts an optional LaunchOptions parameter and returns an array of strings representing the default arguments for launching a browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.defaultargs.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  defaultArgs(options?: LaunchOptions): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Back and Forward Mouse Buttons in Puppeteer\nDESCRIPTION: Implements support for 'back' and 'forward' mouse buttons in Puppeteer, allowing simulation of these additional mouse buttons commonly used for navigation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd `back` and `forward` mouse buttons\n```\n\n----------------------------------------\n\nTITLE: Defining Page.screencast TypeScript Method Signature\nDESCRIPTION: TypeScript class definition showing the screencast method signature that accepts optional ScreencastOptions and returns a Promise of ScreenRecorder\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.screencast.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  screencast(options?: Readonly<ScreencastOptions>): Promise<ScreenRecorder>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CookiePartitionKey Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CookiePartitionKey in Puppeteer, which represents cookie partition information in Chrome. This interface includes properties for the source origin and cross-site ancestor status.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiepartitionkey.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CookiePartitionKey\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subject Alternative Names in Puppeteer (TypeScript)\nDESCRIPTION: This method is part of the SecurityDetails class and returns an array of strings representing the subject alternative names (SANs) of a certificate. SANs are additional hostnames that the certificate is valid for, beyond the primary domain name.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.subjectalternativenames.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecurityDetails {\n  subjectAlternativeNames(): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Process Class in Puppeteer (TypeScript)\nDESCRIPTION: This code snippet defines the constructor for the Process class in Puppeteer. It takes LaunchOptions as a parameter to initialize a new Process instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process._constructor_.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  constructor(opts: LaunchOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Function with Coverage Analysis in JavaScript\nDESCRIPTION: A JavaScript function 'foo' containing various execution paths including conditional statements, ternary operators, and unused code. The function is designed to test code coverage reporting by having both executed and unexecuted paths.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/golden-chrome/jscoverage-involved.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\nfunction foo() {\n  if (1 > 2)\n    console.log(1);\n  if (1 < 2)\n    console.log(2);\n  let x = 1 > 2 ? 'foo' : 'bar';\n  let y = 1 < 2 ? 'foo' : 'bar';\n  let p = {a:1 > 2?function(){console.log('unused');}:function(){console.log('unused');}};\n  let z = () => {};\n  let q = () => {};\n  q();\n}\n\nfoo();\n\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.dragEnter Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the dragEnter method for the ElementHandle class. The method is asynchronous and takes an optional DragData parameter. It is marked as obsolete and should not be used.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.dragenter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  dragEnter(\n    this: ElementHandle<Element>,\n    data?: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EventsWithWildcard Generic Type in TypeScript\nDESCRIPTION: A TypeScript type definition that extends an Events record to include wildcard event handling. The type takes a generic parameter Events and adds a '*' key that can hold any of the event types from the original record.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventswithwildcard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EventsWithWildcard<Events extends Record<EventType, unknown>> =\n  Events & {\n    '*': Events[keyof Events];\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Supported WebDriver Capabilities Interface in TypeScript\nDESCRIPTION: Defines a TypeScript interface named SupportedWebDriverCapabilities, used to declare optional WebDriver BiDi capability properties ('alwaysMatch' and 'firstMatch') that can be set by users or higher-level tools in a Puppeteer context. Relies on the SupportedWebDriverCapability type for the shape of individual capabilities, which must be imported from './puppeteer.supportedwebdrivercapability.md'. Both properties are optional; 'alwaysMatch' represents a single capability configuration, and 'firstMatch' is an array of such configurations. The interface does not enforce any default values, and serves as a schema for populating Capabilities when integrating with the WebDriver protocol.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.supportedwebdrivercapabilities.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SupportedWebDriverCapabilities\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines a union type 'Permission' that includes various browser permissions. It's used in Puppeteer to specify which permissions to grant or deny when controlling a browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.permission.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Permission =\n  | 'accelerometer'\n  | 'ambient-light-sensor'\n  | 'background-sync'\n  | 'camera'\n  | 'clipboard-read'\n  | 'clipboard-sanitized-write'\n  | 'clipboard-write'\n  | 'geolocation'\n  | 'gyroscope'\n  | 'idle-detection'\n  | 'keyboard-lock'\n  | 'magnetometer'\n  | 'microphone'\n  | 'midi-sysex'\n  | 'midi'\n  | 'notifications'\n  | 'payment-handler'\n  | 'persistent-storage'\n  | 'pointer-lock';\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContextEvent Enum in TypeScript\nDESCRIPTION: TypeScript enumeration that defines the possible events that can be emitted by a browser context in Puppeteer. Includes events for target changes, creation, and destruction within the browser context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontextevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare const enum BrowserContextEvent\n```\n\n----------------------------------------\n\nTITLE: Defining CookieParam Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for cookie parameters used in Puppeteer's page-level cookies API. Specifies required and optional properties for setting cookies, including domain, expiration, security flags, and other cookie attributes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookieparam.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CookieParam\n```\n\n----------------------------------------\n\nTITLE: Defining createCDPSession Method in Page Class (TypeScript)\nDESCRIPTION: This snippet defines the createCDPSession method in the Page class. It returns a Promise that resolves to a CDPSession object, allowing interaction with the Chrome DevTools Protocol for the page.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.createcdpsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract createCDPSession(): Promise<CDPSession>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stack Trace Information from Console Messages in Puppeteer (TypeScript)\nDESCRIPTION: This method allows access to the stack trace information of console messages in Puppeteer. It returns an array of ConsoleMessageLocation objects that represent the locations on the stack when the console message was generated.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.stacktrace.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  stackTrace(): ConsoleMessageLocation[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimeoutError Class in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the TimeoutError class which extends the built-in Error class. It is used to represent timeout-related errors in the Puppeteer project. The class is exported for use in other parts of the project.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.timeouterror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TimeoutError extends Error\n```\n\n----------------------------------------\n\nTITLE: Creating Entrypoint for Vendored Package (TypeScript)\nDESCRIPTION: This TypeScript code snippet serves as a template for an `index.ts` file within a specific vendored package's directory inside `third_party`. It re-exports all named exports (`export *`) and the default export (`export {default as default}`) from the actual package ('your-package'). This structure allows other parts of the Puppeteer codebase to import the dependency using a relative path to this entrypoint, thus avoiding reliance on Node.js module resolution mechanisms and facilitating use in non-Node environments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/third_party/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport * from 'your-package';\nexport {default as default} from 'your-package';\n```\n\n----------------------------------------\n\nTITLE: Workaround for Transpilation Issues with Puppeteer's evaluate()\nDESCRIPTION: Alternative approach to using evaluate() with async functions when code transpilation causes compatibility issues with Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(`(async() => {\n   console.log('1');\n})()`);\n```\n\n----------------------------------------\n\nTITLE: Declaring Frame.frameElement() Method in TypeScript\nDESCRIPTION: TypeScript class method signature for retrieving the HTMLIFrameElement handle associated with a Puppeteer Frame. Returns a Promise that resolves to either a HandleFor<HTMLIFrameElement> or null if no frame element exists.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.frameelement.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  frameElement(): Promise<HandleFor<HTMLIFrameElement> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse Class in TypeScript for Puppeteer\nDESCRIPTION: Abstract class definition for the Mouse class in Puppeteer. This class operates in main-frame CSS pixels relative to the top-left corner of the viewport.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Mouse\n```\n\n----------------------------------------\n\nTITLE: Running Puppeteer Docker Container\nDESCRIPTION: Command to run a Puppeteer Docker container with necessary capabilities and execute a Node.js script. Requires SYS_ADMIN capability for sandbox mode.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/docker.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i --init --cap-add=SYS_ADMIN --rm ghcr.io/puppeteer/puppeteer:latest node -e \"$(cat path/to/script.js)\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Predicate Type Alias in TypeScript\nDESCRIPTION: This TypeScript code defines a type alias named `Predicate`. It represents a function that accepts a value of type `From` and returns either a type predicate (`value is To`, where `To` extends `From`) or an `Awaitable<boolean>` (a boolean or a Promise resolving to a boolean). This allows for both synchronous and asynchronous condition checking or type refinement.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.predicate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Predicate<From, To extends From = From> =\n  | ((value: From) => value is To)\n  | ((value: From) => Awaitable<boolean>);\n```\n\n----------------------------------------\n\nTITLE: Defining ElementFor Utility Type in TypeScript for Puppeteer\nDESCRIPTION: A TypeScript utility type that maps HTML or SVG element tag names to their corresponding element types. It uses conditional types to check if the tag name belongs to HTMLElementTagNameMap or SVGElementTagNameMap and returns the appropriate element type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementfor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ElementFor<\n  TagName extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap,\n> = TagName extends keyof HTMLElementTagNameMap\n  ? HTMLElementTagNameMap[TagName]\n  : TagName extends keyof SVGElementTagNameMap\n    ? SVGElementTagNameMap[TagName]\n    : never;\n```\n\n----------------------------------------\n\nTITLE: Defining SessionAttached event constant in TypeScript\nDESCRIPTION: This code defines a constant string 'sessionattached' as a named export for CDPSessionEvent. This constant is used to represent the event emitted when a CDP session is attached.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsessionevent.sessionattached.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSessionAttached: 'sessionattached';\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.target Method in TypeScript\nDESCRIPTION: Abstract method definition for retrieving the target associated with the default browser context. The method returns a Target object and is implemented as part of the Browser class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.target.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract target(): Target;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterceptResolutionState Interface in TypeScript\nDESCRIPTION: This code snippet defines the InterceptResolutionState interface in TypeScript. It includes two properties: 'action' of type InterceptResolutionAction, and an optional 'priority' of type number.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.interceptresolutionstate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterceptResolutionState\n```\n\n----------------------------------------\n\nTITLE: Defining SecurityDetails.validTo Method in TypeScript\nDESCRIPTION: TypeScript class method definition that returns a Unix timestamp indicating when a security certificate's validity period ends. The method returns a number representing the expiration timestamp.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.validto.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecurityDetails {\n  validTo(): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Feature: Screenshot API Enhancement\nDESCRIPTION: Updated screenshot functionality to support captureBeyondViewport option and improved clipping behavior.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated page.screenshot() behavior\n// Now supports captureBeyondViewport and handles clip dimensions differently\n```\n\n----------------------------------------\n\nTITLE: Defining Moveable Interface in TypeScript\nDESCRIPTION: This code snippet defines the Moveable interface in TypeScript. It includes a single method 'move()' which is used to move resources when they are being used.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.moveable.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Moveable\n```\n\n----------------------------------------\n\nTITLE: Defining PuppeteerLifeCycleEvent Type in TypeScript\nDESCRIPTION: Defines a TypeScript type that specifies four possible lifecycle events for Puppeteer page navigation: 'load' for window load event, 'domcontentloaded' for DOM ready state, 'networkidle0' for complete network idle, and 'networkidle2' for near-network idle state with up to 2 connections.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteerlifecycleevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PuppeteerLifeCycleEvent =\n  /**\n   * Waits for the 'load' event.\n   */\n  | 'load'\n  /**\n   * Waits for the 'DOMContentLoaded' event.\n   */\n  | 'domcontentloaded'\n  /**\n   * Waits till there are no more than 0 network connections for at least `500`\n   * ms.\n   */\n  | 'networkidle0'\n  /**\n   * Waits till there are no more than 2 network connections for at least `500`\n   * ms.\n   */\n  | 'networkidle2';\n```\n\n----------------------------------------\n\nTITLE: Defining CDPSession.id Method in TypeScript\nDESCRIPTION: Abstract class definition showing the id() method signature for CDPSession class. The method returns the unique identifier string for the current CDP session.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.id.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CDPSession {\n  abstract id(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementFor Generic Type in TypeScript\nDESCRIPTION: This generic type maps HTML and SVG element tag names to their corresponding DOM element types. It uses conditional types to check if the tag name is a key in HTMLElementTagNameMap or SVGElementTagNameMap and returns the appropriate element type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementfor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ElementFor<\n  TagName extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap,\n> = TagName extends keyof HTMLElementTagNameMap\n  ? HTMLElementTagNameMap[TagName]\n  : TagName extends keyof SVGElementTagNameMap\n    ? SVGElementTagNameMap[TagName]\n    : never;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Console Message Type in Puppeteer with TypeScript\nDESCRIPTION: Method signature for the ConsoleMessage.type() method that returns the type of a console message. It returns a ConsoleMessageType enumeration value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.consolemessage.type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  type(): ConsoleMessageType;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.boxModel() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the boxModel() method of the ElementHandle class. The method returns a Promise that resolves to either a BoxModel object or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.boxmodel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  boxModel(): Promise<BoxModel | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Class Definition in TypeScript\nDESCRIPTION: Abstract class definition for Dialog in Puppeteer. This class is internal and should not be instantiated directly or extended by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Dialog\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration for Puppeteer Chrome Extension\nDESCRIPTION: Rollup configuration setup for building a Chrome extension with Puppeteer support. Includes necessary plugins and settings for browser targeting and dependency resolution.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/running-puppeteer-in-extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {nodeResolve} from '@rollup/plugin-node-resolve';\n\nexport default {\n  input: 'main.mjs',\n  output: {\n    format: 'esm',\n    dir: 'out',\n  },\n  // If you do not need to use WebDriver BiDi protocol,\n  // exclude chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js to minimize the bundle size.\n  external: ['chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js'],\n  plugins: [\n    nodeResolve({\n      // Indicate that we target a browser environment.\n      browser: true,\n      // Exclude any dependencies except for puppeteer-core.\n      // `npm install puppeteer-core` # To install puppeteer-core if needed.\n      resolveOnly: ['puppeteer-core'],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Class Signature in Typescript for Puppeteer\nDESCRIPTION: TypeScript signature declaration for the CLI class in Puppeteer, which provides command-line interface functionality for the browser automation library.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.cli.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CLI\n```\n\n----------------------------------------\n\nTITLE: CSS Content Being Analyzed for Coverage in Puppeteer\nDESCRIPTION: The CSS content that Puppeteer is analyzing for coverage. It includes various CSS features like charset declaration, namespace, font-face definition, element styling, and media queries.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/golden-chrome/csscoverage-involved.txt#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@charset \"utf-8\";\n@namespace svg url(http://www.w3.org/2000/svg);\n@font-face {\n  font-family: \"Example Font\";\n  src: url(\"./Dosis-Regular.ttf\");\n}\n\n#fluffy {\n  border: 1px solid black;\n  z-index: 1;\n  /* -webkit-disabled-property: rgb(1, 2, 3) */\n  -lol-cats: \"dogs\" /* non-existing property */\n}\n\n@media (min-width: 1px) {\n  span {\n    -webkit-border-radius: 10px;\n    font-family: \"Example Font\";\n    animation: 1s identifier;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining trimCache Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for trimCache, an asynchronous function that handles cache trimming operations and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.trimcache.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntrimCache: () => Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Declaring DebugInfo Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for DebugInfo in Puppeteer, which contains an array of pending protocol errors.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.debuginfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DebugInfo\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SnapshotOptions that specifies configuration parameters for accessibility snapshots. It includes options for iframe inclusion, node filtering, and root element selection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.snapshotoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SnapshotOptions\n```\n\n----------------------------------------\n\nTITLE: Defining NewDocumentScriptEvaluation Interface in TypeScript\nDESCRIPTION: This snippet defines the NewDocumentScriptEvaluation interface in TypeScript. It includes a single property 'identifier' of type string. This interface is likely used for script evaluation in new documents within the Puppeteer framework.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.newdocumentscriptevaluation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NewDocumentScriptEvaluation\n{\n    identifier: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Management Commands\nDESCRIPTION: Commands for managing browser installations including listing and clearing installed browsers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @puppeteer/browsers clear\nnpx @puppeteer/browsers list\n```\n\n----------------------------------------\n\nTITLE: Defining LowerCasePaperFormat Type in TypeScript for Puppeteer\nDESCRIPTION: TypeScript type definition that enumerates all supported paper formats in lowercase. This type is used when configuring page printing or PDF generation in Puppeteer, allowing developers to specify standard paper sizes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.lowercasepaperformat.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LowerCasePaperFormat =\n  | 'letter'\n  | 'legal'\n  | 'tabloid'\n  | 'ledger'\n  | 'a0'\n  | 'a1'\n  | 'a2'\n  | 'a3'\n  | 'a4'\n  | 'a5'\n  | 'a6';\n```\n\n----------------------------------------\n\nTITLE: Defining MouseMoveOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface declaration for MouseMoveOptions in Puppeteer. This interface allows configuration of mouse movement behavior, particularly the number of intermediate steps when moving the mouse from one position to another.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mousemoveoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MouseMoveOptions\n```\n\n----------------------------------------\n\nTITLE: Defining the frame() Method in HTTPResponse Class in TypeScript\nDESCRIPTION: This code snippet defines the abstract frame() method within the HTTPResponse class. The method returns the Frame that initiated the HTTP response, or null when navigating to error pages.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.frame.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract frame(): Frame | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Version Control Commands (Markdown)\nDESCRIPTION: Git commit hashes and version control references for Puppeteer changes\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[f00a94a](https://github.com/puppeteer/puppeteer/commit/f00a94a809d38ee1c2c8cfc8597c66db9f3d243d)\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse.up() Method in TypeScript\nDESCRIPTION: This code snippet defines the abstract up() method in the Mouse class. It takes an optional Readonly<MouseOptions> parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouse.up.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mouse {\n  abstract up(options?: Readonly<MouseOptions>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Security Protocol with SecurityDetails Class - TypeScript\nDESCRIPTION: Method definition for getting the security protocol (e.g. 'TLS 1.2') from a SecurityDetails instance. Returns a string representing the protocol version being used for the secure connection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.protocol.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecurityDetails {\n  protocol(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Connection Instance in Puppeteer (TypeScript)\nDESCRIPTION: The constructor signature for creating a new Connection instance in Puppeteer. It takes a URL, transport object, and optional parameters for delay, timeout, and error handling preferences.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection._constructor_.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  constructor(\n    url: string,\n    transport: ConnectionTransport,\n    delay?: number,\n    timeout?: number,\n    rawErrors?: boolean,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome without Disabling Extensions\nDESCRIPTION: Launches Chrome without the default --disable-extensions flag to work around policy restrictions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  ignoreDefaultArgs: ['--disable-extensions'],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Request Wait Filter in TypeScript\nDESCRIPTION: Method signature for waitForDevice which resolves to the first device matching a provided filter function. Takes a filter function and optional timeout options as parameters and returns a Promise resolving to a DeviceRequestPromptDevice.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.waitfordevice.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DeviceRequestPrompt {\n  waitForDevice(\n    filter: (device: DeviceRequestPromptDevice) => boolean,\n    options?: WaitTimeoutOptions,\n  ): Promise<DeviceRequestPromptDevice>;\n}\n```\n\n----------------------------------------\n\nTITLE: SystemOptions Interface Definition in TypeScript\nDESCRIPTION: Defines the SystemOptions interface which contains configuration properties for browser system operations in Puppeteer. The interface includes properties for specifying the browser type, release channel, and platform.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.systemoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SystemOptions\n```\n\n----------------------------------------\n\nTITLE: Get Executable Path by Chrome Release Channel\nDESCRIPTION: Method to retrieve the default executable path for a specified Chrome release channel. Takes a ChromeReleaseChannel parameter and returns a string path.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.executablepath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PuppeteerNode {\n  executablePath(channel: ChromeReleaseChannel): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContextOptions Interface in TypeScript\nDESCRIPTION: The TypeScript interface definition for BrowserContextOptions, which specifies configuration options for Puppeteer browser contexts. It includes optional properties for controlling download behavior and proxy settings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontextoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BrowserContextOptions\n```\n\n----------------------------------------\n\nTITLE: Defining CoverageEntry Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for CoverageEntry, which represents one entry of a coverage report in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverageentry.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CoverageEntry\n```\n\n----------------------------------------\n\nTITLE: Defining ActionOptions Interface in TypeScript\nDESCRIPTION: Interface definition for ActionOptions that specifies configuration options for Puppeteer actions. Currently includes an optional signal property of type AbortSignal that can be used to abort locator actions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.actionoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ActionOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard.sendCharacter Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the sendCharacter method in the Keyboard class. It takes a single string parameter and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.sendcharacter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Keyboard {\n  abstract sendCharacter(char: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.enqueueInterceptAction Method in TypeScript\nDESCRIPTION: This code snippet shows the signature of the enqueueInterceptAction method in the HTTPRequest class. The method takes a pendingHandler parameter that can be a function returning void or a Promise-like object. This method is used to add async request handlers to the processing queue for request interception.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.enqueueinterceptaction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  enqueueInterceptAction(\n    pendingHandler: () => void | PromiseLike<unknown>,\n  ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EventType Type in TypeScript for Puppeteer\nDESCRIPTION: Declares a TypeScript type alias 'EventType' that can be either a string or symbol. This type is commonly used for event handling and identification in the Puppeteer framework.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.eventtype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EventType = string | symbol;\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Union Type in TypeScript for Puppeteer\nDESCRIPTION: This TypeScript snippet defines the Permission type as a union of string literals, each representing a common browser permission such as 'camera', 'geolocation', or 'microphone'. There are no dependencies besides TypeScript itself and it serves as a strongly-typed list for Puppeteer methods that need to check or specify permissions. The exported type ensures that only the listed permission labels are accepted as values, reducing runtime errors and supporting IDE autocompletion for valid permission names.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.permission.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Permission =\n  | 'accelerometer'\n  | 'ambient-light-sensor'\n  | 'background-sync'\n  | 'camera'\n  | 'clipboard-read'\n  | 'clipboard-sanitized-write'\n  | 'clipboard-write'\n  | 'geolocation'\n  | 'gyroscope'\n  | 'idle-detection'\n  | 'keyboard-lock'\n  | 'magnetometer'\n  | 'microphone'\n  | 'midi-sysex'\n  | 'midi'\n  | 'notifications'\n  | 'payment-handler'\n  | 'persistent-storage'\n  | 'pointer-lock';\n```\n\n----------------------------------------\n\nTITLE: Defining AwaitableIterable Type in TypeScript\nDESCRIPTION: Type definition that creates a union type between Iterable<T> and AsyncIterable<T>, allowing for both synchronous and asynchronous iteration patterns to be used interchangeably.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.awaitableiterable.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AwaitableIterable<T> = Iterable<T> | AsyncIterable<T>;\n```\n\n----------------------------------------\n\nTITLE: Adding Changelog Entry for Puppeteer Main Package\nDESCRIPTION: Markdown template for adding a new version entry to the main Puppeteer package changelog, used when release-please automation fails\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/contributing.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/v{PREVIOUS_VERSION}...v{NEW_VERSION}) ({CURRENT_DATE})\n```\n\n----------------------------------------\n\nTITLE: ChromeHeadlessShellSettings Interface Definition in TypeScript\nDESCRIPTION: Defines the TypeScript interface for ChromeHeadlessShellSettings used to configure Chrome Headless Shell in Puppeteer. This interface includes optional properties for controlling download behavior, browser version selection, and download source URLs.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.chromeheadlessshellsettings.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChromeHeadlessShellSettings\n```\n\n----------------------------------------\n\nTITLE: Fixing Types in Connection.ts for Strict Mode TypeScript\nDESCRIPTION: Adjusts types in Connection.ts to be compatible with strict mode TypeScript, addressing issue #6769.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Modified types in Connection.ts\n// Specific code changes not provided in the release notes\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Declaration for Puppeteer canDownload\nDESCRIPTION: Function signature that declares the canDownload method which takes InstallOptions as a parameter and returns a Promise resolving to a boolean value. This function likely checks if browser downloads are possible given the provided installation options.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.candownload.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function canDownload(options: InstallOptions): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Declaring DeviceRequestPromptDevice Class in TypeScript\nDESCRIPTION: TypeScript class declaration for DeviceRequestPromptDevice, which represents a device in a request prompt. This class is intended for internal use as noted in the remarks.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestpromptdevice.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DeviceRequestPromptDevice\n```\n\n----------------------------------------\n\nTITLE: Declaring SecurityDetails Class in TypeScript\nDESCRIPTION: Declares the SecurityDetails class as part of Puppeteer's API, representing security details received from HTTPS responses. This class is not intended to be instantiated directly by consumers; instead, instances are provided by Puppeteer. The class contains methods to retrieve certificate issuer, protocol, subject names, alternative names, and certificate validity timestamps. There are no required imports for the declaration. All methods are instance methods. Direct use of the constructor or subclassing is not supported.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.securitydetails.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class SecurityDetails\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Configuration for Puppeteer\nDESCRIPTION: GitLab CI configuration with necessary system dependencies for running Chrome headless browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nbefore_script:\n  - apt-get update\n  - apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release xdg-utils wget\n```\n\n----------------------------------------\n\nTITLE: Defining ProtocolLifeCycleEvent Type in TypeScript for Puppeteer\nDESCRIPTION: Defines the ProtocolLifeCycleEvent type which represents the various lifecycle events that can be monitored in Puppeteer. It includes page load completion, DOM content loaded, network idle (no activity), and network almost idle states.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.protocollifecycleevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ProtocolLifeCycleEvent =\n  | 'load'\n  | 'DOMContentLoaded'\n  | 'networkIdle'\n  | 'networkAlmostIdle';\n```\n\n----------------------------------------\n\nTITLE: Defining InnerParams Generic Type in TypeScript\nDESCRIPTION: A generic type definition that maps over array elements T and applies FlattenHandle transformation to each element. Uses mapped type syntax to create a new type with transformed elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.innerparams.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InnerParams<T extends unknown[]> = {\n  [K in keyof T]: FlattenHandle<T[K]>;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring makeProgressCallback Function Signature in TypeScript\nDESCRIPTION: The makeProgressCallback function takes a Browser instance and a buildId string, and returns a Promise that resolves to a callback function. The callback function tracks download progress by taking downloaded bytes and total bytes as parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.makeprogresscallback.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function makeProgressCallback(\n  browser: Browser,\n  buildId: string,\n): Promise<(downloadedBytes: number, totalBytes: number) => void>;\n```\n\n----------------------------------------\n\nTITLE: Defining FileFormat Type in TypeScript for Puppeteer\nDESCRIPTION: Defines a TypeScript type alias named FileFormat that can only accept one of three specific string values: 'gif', 'webm', or 'mp4'. This type is used in Puppeteer to specify valid media formats for operations like recording or saving.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.fileformat.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FileFormat = 'gif' | 'webm' | 'mp4';\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.waitForNavigation Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the waitForNavigation method in the Frame class. It takes an optional WaitForOptions parameter and returns a Promise that resolves to an HTTPResponse or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitfornavigation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract waitForNavigation(\n    options?: WaitForOptions,\n  ): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Select Element Fix in Puppeteer\nDESCRIPTION: Fix for parsing empty options in select elements in version 14.4.0\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<select></select>\n```\n\n----------------------------------------\n\nTITLE: Defining Target.opener() with Puppeteer in TypeScript\nDESCRIPTION: This TypeScript snippet defines the abstract opener() method within the Target class for Puppeteer, used to retrieve the Target instance that opened the current one or undefined for top-level targets. The method is designed to indicate target relationships, providing either a Target reference or undefined depending on context. No external dependencies are required besides Puppeteer, and it outputs either another Target or undefined. The class is abstract and meant to be extended.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.opener.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract opener(): Target | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring PuppeteerError Base Class in TypeScript\nDESCRIPTION: Defines the base error class that all Puppeteer-specific errors inherit from. The class extends the standard Error class and is marked as internal, meaning it should not be directly instantiated or extended by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteererror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class PuppeteerError extends Error\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.$() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.$() method. It takes a selector string and returns a Promise that resolves to an ElementHandle of the matching element or null if no match is found.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle._.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  $<Selector extends string>(\n    selector: Selector,\n  ): Promise<ElementHandle<NodeFor<Selector>> | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Version Selection\nDESCRIPTION: Shows different ways to specify and run particular versions of the package using npx.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Always install and use the latest version from the registry.\nnpx @puppeteer/browsers@latest --help\n# Always use a specifc version.\nnpx @puppeteer/browsers@2.4.1 --help\n# Always install the latest version and automatically confirm the installation.\nnpx --yes @puppeteer/browsers@latest --help\n```\n\n----------------------------------------\n\nTITLE: Defining the ScreenRecorder.stop() Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet shows the class definition for `ScreenRecorder` focusing on the `stop()` method. This method is called to terminate the screen recording process initiated earlier. It returns a Promise which resolves once the stopping operation is complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.screenrecorder.stop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass ScreenRecorder {\n  stop(): Promise<void>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TimeoutError Class in TypeScript\nDESCRIPTION: Declares a TimeoutError class that extends the built-in Error class. The class constructor is marked as internal and should not be directly instantiated or extended by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.timeouterror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TimeoutError extends Error\n```\n\n----------------------------------------\n\nTITLE: CLI Version Specification\nDESCRIPTION: Examples demonstrating how to specify and use different versions of @puppeteer/browsers with npx.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Always install and use the latest version from the registry.\nnpx @puppeteer/browsers@latest --help\n# Always use a specifc version.\nnpx @puppeteer/browsers@2.4.1 --help\n# Always install the latest version and automatically confirm the installation.\nnpx --yes @puppeteer/browsers@latest --help\n```\n\n----------------------------------------\n\nTITLE: Defining CookiePartitionKey Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CookiePartitionKey in Puppeteer. This interface represents a cookie partition key in Chrome, containing properties for sourceOrigin and an optional hasCrossSiteAncestor flag.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cookiepartitionkey.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CookiePartitionKey\n```\n\n----------------------------------------\n\nTITLE: Defining CookiePriority Type in TypeScript\nDESCRIPTION: Defines a union type for cookie priority levels that can be 'Low', 'Medium', or 'High'. This type follows the cookie priority specification from tools.ietf.org/html/draft-west-cookie-priority-00.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cookiepriority.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CookiePriority = 'Low' | 'Medium' | 'High';\n```\n\n----------------------------------------\n\nTITLE: Defining RemoteAddress Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the RemoteAddress interface, which represents a remote network address. It includes optional properties for IP address (string) and port number (number).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.remoteaddress.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RemoteAddress {\n  ip?: string;\n  port?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting PageEvents Interface for Puppeteer (TypeScript)\nDESCRIPTION: Defines the PageEvents interface as a mapping from EventType keys to unknown values, extending the Record utility type in TypeScript. This structure ensures type safety for all page events emitted within Puppeteer, allowing strongly-typed callbacks and improved IDE support when writing automation and browser scripts. Dependencies include the EventType type and relevant Puppeteer type imports for detailed event payloads. It is intended for use wherever Puppeteer event callback object shapes need to be specified.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.pageevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PageEvents extends Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining ActionResult Type in TypeScript\nDESCRIPTION: Defines the ActionResult type which is used to specify the action to take when intercepting network requests in Puppeteer. It can have three possible values: 'continue', 'abort', or 'respond'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.actionresult.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ActionResult = 'continue' | 'abort' | 'respond';\n```\n\n----------------------------------------\n\nTITLE: Defining WebWorker.close() Method in TypeScript\nDESCRIPTION: This code snippet defines the close() method for the WebWorker class. The method returns a Promise that resolves to void, indicating the asynchronous nature of closing a web worker.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebWorker {\n  close(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Mouse Class Declaration in TypeScript\nDESCRIPTION: Abstract class declaration for the Mouse class in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Mouse\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Handler Type in TypeScript\nDESCRIPTION: Defines a generic Handler type that represents an event handler function. The type accepts a generic parameter T (defaulting to unknown) and declares a function that takes an event of type T and returns void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.handler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Handler<T = unknown> = (event: T) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContextEvents Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for BrowserContextEvents which extends Record<EventType, unknown> and provides type definitions for browser context events in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontextevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BrowserContextEvents extends Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for CSS Coverage in Puppeteer\nDESCRIPTION: A JSON structure representing CSS coverage data collected by Puppeteer. It includes the URL of the page being analyzed, ranges of CSS that were used (with start and end indices), and the full CSS text content that was analyzed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/golden-chrome/csscoverage-involved.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"url\": \"http://localhost:<PORT>/csscoverage/involved.html\",\n    \"ranges\": [\n      {\n        \"start\": 149,\n        \"end\": 297\n      },\n      {\n        \"start\": 306,\n        \"end\": 323\n      },\n      {\n        \"start\": 327,\n        \"end\": 433\n      }\n    ],\n    \"text\": \"\\n@charset \\\"utf-8\\\";\\n@namespace svg url(http://www.w3.org/2000/svg);\\n@font-face {\\n  font-family: \\\"Example Font\\\";\\n  src: url(\\\"./Dosis-Regular.ttf\\\");\\n}\\n\\n#fluffy {\\n  border: 1px solid black;\\n  z-index: 1;\\n  /* -webkit-disabled-property: rgb(1, 2, 3) */\\n  -lol-cats: \\\"dogs\\\" /* non-existing property */\\n}\\n\\n@media (min-width: 1px) {\\n  span {\\n    -webkit-border-radius: 10px;\\n    font-family: \\\"Example Font\\\";\\n    animation: 1s identifier;\\n  }\\n}\\n\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Drag Functionality in Puppeteer TypeScript\nDESCRIPTION: TypeScript class method signature for dragging an element to a target point or element. Returns a Promise that resolves to optional drag data when drag interception is enabled.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.drag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  drag(\n    this: ElementHandle<Element>,\n    target: Point | ElementHandle<Element>,\n  ): Promise<Protocol.Input.DragData | void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSHandle.toString method in TypeScript\nDESCRIPTION: The abstract toString method declared in the JSHandle class returns a string representation of the JSHandle object. This method is useful during debugging as it helps visualize the state of JSHandle objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.tostring.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Chromium Dependencies on Amazon Linux EC2 (Bash)\nDESCRIPTION: Bash commands to install Chromium and its dependencies on an Amazon Linux EC2 instance for running Puppeteer tests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo amazon-linux-extras install epel -y\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y chromium\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorCode Type Enum in TypeScript for Puppeteer\nDESCRIPTION: This TypeScript declaration defines the ErrorCode type as a union of string literals representing various network and connection error states that can occur during Puppeteer operations. It includes common errors like timeouts, connection failures, and access restrictions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.errorcode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ErrorCode =\n  | 'aborted'\n  | 'accessdenied'\n  | 'addressunreachable'\n  | 'blockedbyclient'\n  | 'blockedbyresponse'\n  | 'connectionaborted'\n  | 'connectionclosed'\n  | 'connectionfailed'\n  | 'connectionrefused'\n  | 'connectionreset'\n  | 'internetdisconnected'\n  | 'namenotresolved'\n  | 'timedout'\n  | 'failed';\n```\n\n----------------------------------------\n\nTITLE: Running Tests Using Mocha Runner in Bash\nDESCRIPTION: Command to build and run all tests with the Mocha Runner.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run test\n```\n\n----------------------------------------\n\nTITLE: Process Class Declaration\nDESCRIPTION: TypeScript declaration of the Process class export which is used to manage browser processes in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Process\n```\n\n----------------------------------------\n\nTITLE: HTTPRequest.responseForRequest Method Signature in TypeScript\nDESCRIPTION: The signature of the responseForRequest() method in the HTTPRequest class. This method returns the ResponseForRequest object that would be used if interception is allowed to respond and abort() is not called.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.responseforrequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  responseForRequest(): Partial<ResponseForRequest> | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChromeReleaseChannel Enum in TypeScript\nDESCRIPTION: Enumeration that defines the available Chrome release channels including beta, canary, dev, and stable versions. This enum is used in Puppeteer to specify which Chrome release channel to use when launching the browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.chromereleasechannel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum ChromeReleaseChannel\n```\n\n----------------------------------------\n\nTITLE: Running Puppeteer Tests with a Custom Browser Executable via npm\nDESCRIPTION: Executes Puppeteer tests using a specified browser executable path provided via the `BINARY` environment variable. This example targets the `test:chrome:headless` npm script, but the comment indicates it can also be used with `test:firefox` or similar scripts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nBINARY=<path-to-executable> npm run test:chrome:headless # Or npm run test:firefox\n```\n\n----------------------------------------\n\nTITLE: Defining FrameEvents Interface in TypeScript\nDESCRIPTION: Declares the FrameEvents interface that extends Record<EventType, unknown> to define frame event types in Puppeteer. This interface is used for type-safe event handling in frame-related operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frameevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FrameEvents extends Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining the VisibilityOption Type Alias in TypeScript\nDESCRIPTION: This TypeScript code defines the `VisibilityOption` type alias. It restricts the possible values to the strings 'hidden', 'visible', or the value `null`. This type is used in Puppeteer functions to specify the desired visibility state of an element before proceeding with an action, allowing for waiting until an element is visible, hidden, or skipping the visibility check entirely.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.visibilityoption.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VisibilityOption = 'hidden' | 'visible' | null;\n```\n\n----------------------------------------\n\nTITLE: Using Frame.waitForSelector with Multiple Page Navigations in Puppeteer\nDESCRIPTION: Example demonstrating how to use Frame.waitForSelector to wait for an image element across multiple page navigations. The method works asynchronously while the script navigates through different URLs.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforselector.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  let currentURL;\n  page\n    .mainFrame()\n    .waitForSelector('img')\n    .then(() => console.log('First URL with image: ' + currentURL));\n\n  for (currentURL of [\n    'https://example.com',\n    'https://google.com',\n    'https://bbc.com',\n  ]) {\n    await page.goto(currentURL);\n  }\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Workspace Dependency Updates\nDESCRIPTION: Shows version changes for puppeteer-core workspace dependency.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* The following workspace dependencies were updated\n  * dependencies\n    * puppeteer-core bumped from 18.2.0 to ^18.2.1\n```\n\n----------------------------------------\n\nTITLE: Defining FileChooser.cancel Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript class definition for the FileChooser class with the cancel method. The cancel method is asynchronous and returns a Promise that resolves to void. It is used to close a file chooser without selecting any files.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.cancel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileChooser {\n  cancel(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProtocolType Union Type in TypeScript for Puppeteer\nDESCRIPTION: This code defines the ProtocolType type as a union of two string literals that specify the available protocols for browser automation in Puppeteer: 'cdp' (Chrome DevTools Protocol) and 'webDriverBiDi' (WebDriver BiDirectional Protocol).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.protocoltype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ProtocolType = 'cdp' | 'webDriverBiDi';\n```\n\n----------------------------------------\n\nTITLE: Defining Process.close Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the close() method signature within the Process class. The method returns a Promise that resolves to void, indicating an asynchronous operation that completes without returning a value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  close(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates\nDESCRIPTION: Lists core dependency updates showing version bumps for puppeteer-core package.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* The following workspace dependencies were updated\n  * dependencies\n    * puppeteer-core bumped from 18.2.1 to ^19.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenshotOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ScreenshotOptions that specifies all possible configuration parameters for taking screenshots in Puppeteer. It includes options for viewport capture, image encoding, quality settings, and file output configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screenshotoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScreenshotOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ExperimentsConfiguration Type in TypeScript\nDESCRIPTION: Defines a TypeScript type alias for experimental configurations in Puppeteer. Currently represented as an empty Record type that accepts string keys but no values, indicating a placeholder for future experimental features.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.experimentsconfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ExperimentsConfiguration = Record<string, never>;\n```\n\n----------------------------------------\n\nTITLE: Update TextQuerySelector Cache Implementation\nDESCRIPTION: Implementation of cache updates for TextQuerySelector when subtree changes occur.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n4206e76c3e4647ea6290f16127764d1a2f337dcf\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Mapper Type in TypeScript\nDESCRIPTION: Defines a generic type Mapper that takes two type parameters 'From' and 'To', representing a function that transforms a value from one type to another. The function can return either the target type directly or a Promise of the target type through the Awaitable wrapper.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mapper.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Mapper<From, To> = (value: From) => Awaitable<To>;\n```\n\n----------------------------------------\n\nTITLE: Declaring the ProtocolError Class Extending PuppeteerError (TypeScript)\nDESCRIPTION: This TypeScript code snippet declares the `ProtocolError` class, specifying that it extends the base `PuppeteerError`. It serves as the foundation for representing errors encountered during DevTools protocol interactions within Puppeteer. The declaration itself doesn't show implementation but establishes its place in the error hierarchy and indicates its intended use for protocol-level errors.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.protocolerror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport declare class ProtocolError extends PuppeteerError\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Puppeteer Core Variable Type in TypeScript\nDESCRIPTION: Type signature defining the puppeteer variable as an instance of PuppeteerCore.PuppeteerNode, which provides the main interface for browser automation and control.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npuppeteer: PuppeteerCore.PuppeteerNode;\n```\n\n----------------------------------------\n\nTITLE: Defining SupportedWebDriverCapabilities Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for WebDriver BiDi capabilities configuration. The interface includes optional properties for alwaysMatch and firstMatch capabilities that extend the SupportedWebDriverCapability type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.supportedwebdrivercapabilities.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SupportedWebDriverCapabilities\n```\n\n----------------------------------------\n\nTITLE: Retrieving Console Message Text in Puppeteer with TypeScript\nDESCRIPTION: The text() method belongs to the ConsoleMessage class in Puppeteer and returns the string content of a console message. This method takes no parameters and returns the full text of the console message as a string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.text.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  text(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the Metrics interface in TypeScript for Puppeteer. It includes optional numeric properties for various performance metrics such as document count, frame count, heap sizes, layout information, and timing data.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Metrics {\n  Documents?: number;\n  Frames?: number;\n  JSEventListeners?: number;\n  JSHeapTotalSize?: number;\n  JSHeapUsedSize?: number;\n  LayoutCount?: number;\n  LayoutDuration?: number;\n  Nodes?: number;\n  RecalcStyleCount?: number;\n  RecalcStyleDuration?: number;\n  ScriptDuration?: number;\n  TaskDuration?: number;\n  Timestamp?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtensionTransport.send Method in TypeScript\nDESCRIPTION: Definition of the send method within the ExtensionTransport class. The method accepts a string message parameter and returns void, used for sending messages in extension transport functionality.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.extensiontransport.send.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExtensionTransport {\n  send(message: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EventType Type in TypeScript for Puppeteer\nDESCRIPTION: A TypeScript type definition that specifies EventType as either a string or symbol. This type is used throughout Puppeteer for event handling and dispatching.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventtype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EventType = string | symbol;\n```\n\n----------------------------------------\n\nTITLE: Retrieving DOM.BackendNodeId with ElementHandle in TypeScript\nDESCRIPTION: This method returns a Promise that resolves to a numeric DOM.BackendNodeId for an element when connected using Chrome DevTools Protocol. The method is part of the ElementHandle abstract class in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.backendnodeid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  abstract backendNodeId(): Promise<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CircleCI for Puppeteer\nDESCRIPTION: CircleCI configuration using a NodeJS Docker image with environment setup for Puppeteer testing.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndocker:\n  - image: circleci/node:14\n    environment:\n      NODE_ENV: development\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContextEvent Enum in TypeScript\nDESCRIPTION: This snippet declares the BrowserContextEvent enum, which contains event types for browser context changes in Puppeteer. It includes events for target changes, creation, and destruction.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontextevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare const enum BrowserContextEvent\n```\n\n----------------------------------------\n\nTITLE: CLI Help Commands\nDESCRIPTION: Demonstrates various help command options for different CLI functionalities.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @puppeteer/browsers --help # help for all commands\nnpx @puppeteer/browsers install --help # help for the install command\nnpx @puppeteer/browsers launch --help # help for the launch command\nnpx @puppeteer/browsers clear --help # help for the clear command\nnpx @puppeteer/browsers list --help # help for the list command\n```\n\n----------------------------------------\n\nTITLE: Defining ComputeExecutablePathOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for ComputeExecutablePathOptions that specifies configuration options for computing browser executable paths. Includes properties for browser selection, build identification, cache directory configuration, and platform specification.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComputeExecutablePathOptions\n```\n\n----------------------------------------\n\nTITLE: Defining SupportedWebDriverCapability Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `SupportedWebDriverCapability` type. It leverages the `Exclude` utility type to create a subset of the `Session.CapabilityRequest` type, specifically removing the 'unhandledPromptBehavior' and 'acceptInsecureCerts' capabilities. This type is intended for use within the Puppeteer library to specify the WebDriver capabilities it supports.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.supportedwebdrivercapability.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SupportedWebDriverCapability = Exclude<\\n  Session.CapabilityRequest,\\n  'unhandledPromptBehavior' | 'acceptInsecureCerts'\\n>;\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Command to execute the E2E tests in an Angular project\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retry Count for Debugging in Bash\nDESCRIPTION: Command to control the number of test retries when debugging flaky tests by setting multiple environment variables.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPUPPETEER_DEFLAKE_RETRIES=1000 PUPPETEER_DEFLAKE_TESTS=\"[navigation.spec] *\" npm run test:chrome:headless\n```\n\n----------------------------------------\n\nTITLE: Defining CDP Session Detached Event Constant in TypeScript\nDESCRIPTION: This constant defines the string value for the SessionDetached event in Puppeteer's CDP session. When a CDP session is detached, this event is emitted with the value 'sessiondetached'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsessionevent.sessiondetached.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSessionDetached: 'sessiondetached';\n```\n\n----------------------------------------\n\nTITLE: Defining LocatorScrollOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the LocatorScrollOptions interface, which extends ActionOptions and includes optional properties for scrollLeft and scrollTop. These properties allow for precise control of scrolling behavior in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locatorscrolloptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LocatorScrollOptions extends ActionOptions {\n  scrollLeft?: number;\n  scrollTop?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL in TypeScript\nDESCRIPTION: TypeScript code to set the base URL for E2E tests\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseUrl = 'http://localhost:8080';\n```\n\n----------------------------------------\n\nTITLE: Defining ProtocolType Enumeration in TypeScript\nDESCRIPTION: This snippet defines the ProtocolType type as a string literal union, allowing only 'cdp' or 'webDriverBiDi' as valid values. It serves as an internal contract to ensure that protocol-specific logic in Puppeteer only receives supported protocol identifiers. There are no external dependencies, and this type is intended for use in type annotations and API parameter validation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.protocoltype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ProtocolType = 'cdp' | 'webDriverBiDi';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Commands for installing project dependencies, with optional Firefox browser download\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# Or to download Firefox by default\nPUPPETEER_BROWSER=firefox npm install\n```\n\n----------------------------------------\n\nTITLE: Emulating Media Features with Puppeteer in TypeScript\nDESCRIPTION: This comprehensive example demonstrates how to use Page.emulateMediaFeatures() to emulate various CSS media features such as color scheme, reduced motion, and color gamut. It includes multiple scenarios and verification using matchMedia.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatemediafeatures.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.emulateMediaFeatures([\n  {name: 'prefers-color-scheme', value: 'dark'},\n]);\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n// → false\n\nawait page.emulateMediaFeatures([\n  {name: 'prefers-reduced-motion', value: 'reduce'},\n]);\nawait page.evaluate(\n  () => matchMedia('(prefers-reduced-motion: reduce)').matches,\n);\n// → true\nawait page.evaluate(\n  () => matchMedia('(prefers-reduced-motion: no-preference)').matches,\n);\n// → false\n\nawait page.emulateMediaFeatures([\n  {name: 'prefers-color-scheme', value: 'dark'},\n  {name: 'prefers-reduced-motion', value: 'reduce'},\n]);\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n// → false\nawait page.evaluate(\n  () => matchMedia('(prefers-reduced-motion: reduce)').matches,\n);\n// → true\nawait page.evaluate(\n  () => matchMedia('(prefers-reduced-motion: no-preference)').matches,\n);\n// → false\n\nawait page.emulateMediaFeatures([{name: 'color-gamut', value: 'p3'}]);\nawait page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(color-gamut: p3)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);\n// → false\n```\n\n----------------------------------------\n\nTITLE: Code Style Checks\nDESCRIPTION: Commands for checking and formatting code according to project style guidelines\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/contributing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Defining the HTTPRequest.finalizeInterceptions Method in TypeScript\nDESCRIPTION: The TypeScript signature for the finalizeInterceptions method in the HTTPRequest class. This method awaits pending interception handlers and then determines how to fulfill the request interception, returning a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.finalizeinterceptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  finalizeInterceptions(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Event Handler Type in TypeScript\nDESCRIPTION: Declares a generic type Handler that takes an event parameter of type T (defaulting to unknown) and returns void. This type is used for creating event handler functions throughout Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.handler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Handler<T = unknown> = (event: T) => void;\n```\n\n----------------------------------------\n\nTITLE: Declaring detectBrowserPlatform Function in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the signature of the detectBrowserPlatform function. It takes no parameters and returns either a BrowserPlatform object or undefined. This function is likely used to determine the current browser platform in a Puppeteer automation context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.detectbrowserplatform.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function detectBrowserPlatform(): BrowserPlatform | undefined;\n```\n\n----------------------------------------\n\nTITLE: Implementing Element.waitForSelector in JavaScript\nDESCRIPTION: Adds a new method Element.waitForSelector to wait for a selector to appear in the DOM.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// New Element.waitForSelector method\nasync function waitForSelector(selector) {\n  // Implementation details not provided in the release notes\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Browser Archive Without Unpacking in Puppeteer (TypeScript)\nDESCRIPTION: This function downloads a browser archive according to the provided InstallOptions without unpacking it. It returns a Promise that resolves to a string representing the absolute path to the downloaded archive.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.install.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function install(\n  options: InstallOptions & {\n    unpack: false;\n  },\n): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome without Sandbox\nDESCRIPTION: Launches Chrome with sandbox disabled (not recommended for untrusted content).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  args: ['--no-sandbox', '--disable-setuid-sandbox'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CookieSameSite Type in TypeScript\nDESCRIPTION: TypeScript type definition that specifies the allowed values for a cookie's SameSite attribute. The type allows three possible string literals: 'Strict', 'Lax', or 'None', following the IETF draft specification for first-party cookies.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cookiesamesite.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CookieSameSite = 'Strict' | 'Lax' | 'None';\n```\n\n----------------------------------------\n\nTITLE: Declaring the PuppeteerError Class in TypeScript\nDESCRIPTION: This TypeScript code snippet declares the `PuppeteerError` class, establishing it as the base class for all errors originating from the Puppeteer library. It extends the standard JavaScript `Error` class. The surrounding documentation emphasizes that this class's constructor is internal and not intended for direct use or extension in external code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteererror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport declare class PuppeteerError extends Error\n```\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserLauncher.defaultArgs Method in TypeScript\nDESCRIPTION: Abstract method definition that takes LaunchOptions object parameter and returns an array of strings representing browser launch arguments. This method needs to be implemented by concrete browser launcher classes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browserlauncher.defaultargs.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserLauncher {\n  abstract defaultArgs(object: LaunchOptions): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Awaitable Type in TypeScript\nDESCRIPTION: This snippet defines the Awaitable type, which is a union type that can be either of type T or a PromiseLike<T>. This allows for flexibility in handling both synchronous and asynchronous values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.awaitable.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Awaitable<T> = T | PromiseLike<T>;\n```\n\n----------------------------------------\n\nTITLE: ConsoleMessage.text() Method Definition in TypeScript\nDESCRIPTION: Type definition for the text() method of the ConsoleMessage class. This method returns the text content of a console message as a string value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.consolemessage.text.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  text(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: ContinueRequestOverrides Interface Declaration in TypeScript\nDESCRIPTION: TypeScript interface definition for ContinueRequestOverrides, which is used to specify properties that can be modified when continuing an intercepted request in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.continuerequestoverrides.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ContinueRequestOverrides\n```\n\n----------------------------------------\n\nTITLE: Frame.name Method Signature in Puppeteer (TypeScript)\nDESCRIPTION: The class signature for the Frame.name() method in Puppeteer. This method returns the frame's name attribute as a string, as specified in the HTML tag.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.name.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  name(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Default Browser Context with Puppeteer in TypeScript\nDESCRIPTION: Method signature for Browser.setCookie() which sets cookies in the default BrowserContext. It accepts multiple CookieData objects as parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.setcookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  setCookie(...cookies: CookieData[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Browser Revision Update Script with Node.js\nDESCRIPTION: Command for running the browser revision update script using Node.js with the experimental fetch flag enabled, as the script relies on the fetch API.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode --experimental-fetch tools/update_browser_revision.mjs\n```\n\n----------------------------------------\n\nTITLE: Obsolete Element Drop Method in Puppeteer (TypeScript)\nDESCRIPTION: This is an obsolete version of the drop method that is no longer supported. It optionally takes a Protocol.Input.DragData parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.drop.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  drop(\n    this: ElementHandle<Element>,\n    data?: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Puppeteer Website\nDESCRIPTION: Command to generate static website content into the build directory, which can then be served using any static contents hosting service.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Displaying Chrome System Package Requirements for openSUSE/Fedora Linux\nDESCRIPTION: This URL points to a JSON file containing the required system packages for Chrome on openSUSE/Fedora Linux systems with x64 architecture.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/system-requirements.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://source.chromium.org/chromium/chromium/src/+/main:chrome/installer/linux/rpm/dist_package_provides.json\n```\n\n----------------------------------------\n\nTITLE: Cloning Puppeteer Repository\nDESCRIPTION: Instructions for cloning the Puppeteer repository from GitHub to begin development.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/puppeteer/puppeteer\ncd puppeteer\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Puppeteer Chrome Linux\nDESCRIPTION: Command to build a Docker image for running Puppeteer with Chrome on Linux. The image is tagged as 'puppeteer-chrome-linux'.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t puppeteer-chrome-linux .\n```\n\n----------------------------------------\n\nTITLE: Defining ExperimentsConfiguration Type in TypeScript\nDESCRIPTION: Defines the ExperimentsConfiguration type as a Record with string keys and never values, effectively creating an empty object type. This is likely used as a placeholder for future experimental options in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.experimentsconfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ExperimentsConfiguration = Record<string, never>;\n```\n\n----------------------------------------\n\nTITLE: Updating Base URL for E2E Tests\nDESCRIPTION: TypeScript code to update the base URL in the E2E test utility file to match the custom port configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseUrl = 'http://localhost:8080';\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Puppeteer Website\nDESCRIPTION: Command to start a local development server that opens a browser window and reflects changes live without server restarts.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer Browsers via CLI\nDESCRIPTION: Command to install browsers based on the current Puppeteer configuration. Used after updating configuration files to apply download option changes.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx puppeteer browsers install\n```\n\n----------------------------------------\n\nTITLE: Displaying Chrome System Package Requirements for Debian/Ubuntu Linux\nDESCRIPTION: This URL points to a JSON file containing the required system packages for Chrome on Debian/Ubuntu Linux systems with x64 architecture.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/system-requirements.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://source.chromium.org/chromium/chromium/src/+/main:chrome/installer/linux/debian/dist_package_versions.json\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Link (Markdown)\nDESCRIPTION: GitHub version comparison URL showing changes between Puppeteer versions\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[22.0.0](https://github.com/puppeteer/puppeteer/compare/puppeteer-v21.11.0...puppeteer-v22.0.0)\n```\n\n----------------------------------------\n\nTITLE: Running Smoke Tests\nDESCRIPTION: Command to execute smoke tests for integration testing\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode tools/smoke.mjs\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for an event emitter that handles generic event types. The interface uses a generic parameter Events that extends Record<EventType, unknown> to allow type-safe event handling.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CommonEventEmitter<Events extends Record<EventType, unknown>>\n```\n\n----------------------------------------\n\nTITLE: Building Packages\nDESCRIPTION: Commands for building all packages and individual package builds including watch mode\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/contributing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run build --workspace <package>\nnpm run build --watch --workspace <package>\n```\n\n----------------------------------------\n\nTITLE: Defining Target.url Abstract Method in TypeScript\nDESCRIPTION: Abstract method signature for retrieving the URL of a Target instance. Returns a string representing the target's URL.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract url(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser Version Comparator in TypeScript\nDESCRIPTION: Function signature for getVersionComparator that returns a comparison function for browser version strings. Takes a Browser parameter and returns a function that compares two version strings, returning a numeric value indicating their relative order.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.getversioncomparator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getVersionComparator(\n  browser: Browser,\n): (a: string, b: string) => number;\n```\n\n----------------------------------------\n\nTITLE: Defining SerializedAXNode Interface with elementHandle Method - Puppeteer - TypeScript\nDESCRIPTION: Defines the SerializedAXNode interface with an asynchronous method elementHandle that returns a Promise resolving to an ElementHandle or null. This method is used to retrieve an ElementHandle associated with the accessibility node, which enables automation scripts to interact with elements via Puppeteer. Dependencies include Puppeteer and its ElementHandle class; errors may occur if the underlying DOM element is disposed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.serializedaxnode.elementhandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SerializedAXNode {\n  elementHandle(): Promise<ElementHandle | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dependencies Update - @puppeteer/browsers Version Bump\nDESCRIPTION: Workspace dependency update bumping @puppeteer/browsers package version from 1.0.0 to 1.0.1\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- The following workspace dependencies were updated\n  - dependencies\n    - @puppeteer/browsers bumped from 1.0.0 to 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining InterceptResolutionAction Enum in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the InterceptResolutionAction enum used in Puppeteer for specifying how to handle intercepted network requests. It includes actions such as abort, continue, respond, and others.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.interceptresolutionaction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum InterceptResolutionAction\n```\n\n----------------------------------------\n\nTITLE: Configuring Chrome Setuid Sandbox on Linux\nDESCRIPTION: Sets up the Chrome setuid sandbox on Linux systems for improved security.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# cd to Puppeteer cache directory (adjust the path if using a different cache directory).\ncd ~/.cache/puppeteer/chrome/linux-<version>/chrome-linux64/\nsudo chown root:root chrome_sandbox\nsudo chmod 4755 chrome_sandbox\n# copy sandbox executable to a shared location\nsudo cp -p chrome_sandbox /usr/local/sbin/chrome-devel-sandbox\n# export CHROME_DEVEL_SANDBOX env variable\nexport CHROME_DEVEL_SANDBOX=/usr/local/sbin/chrome-devel-sandbox\n```\n\n----------------------------------------\n\nTITLE: Declaring FileChooser Class Signature in TypeScript\nDESCRIPTION: TypeScript signature declaration for the FileChooser class in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.filechooser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class FileChooser\n```\n\n----------------------------------------\n\nTITLE: Importing Puppeteer Core\nDESCRIPTION: Code example showing how to import the puppeteer-core package, which is used when connecting to remote browsers or managing browsers manually without automatic Chrome download.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer-core';\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionTransport Interface with send Method in TypeScript\nDESCRIPTION: TypeScript interface definition for ConnectionTransport with the send method that takes a message string parameter and returns void. This interface is part of Puppeteer's communication transport layer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connectiontransport.send.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionTransport {\n  send(message: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter.listenerCount Method Signature in TypeScript\nDESCRIPTION: TypeScript interface definition for the listenerCount method on the CommonEventEmitter interface. This method returns the count of listeners registered for a specific event type, taking an event name as parameter and returning a number.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.commoneventemitter.listenercount.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  listenerCount(event: keyof Events): number;\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Help Commands\nDESCRIPTION: Shows various help command options available in the CLI for different operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @puppeteer/browsers --help # help for all commands\nnpx @puppeteer/browsers install --help # help for the install command\nnpx @puppeteer/browsers launch --help # help for the launch command\nnpx @puppeteer/browsers clear --help # help for the clear command\nnpx @puppeteer/browsers list --help # help for the list command\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle Class in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle class. It extends JSHandle and is generic over the type of element it represents.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class ElementHandle<ElementType extends Node = Element> extends JSHandle<ElementType>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 22.0.0\nDESCRIPTION: Changelog markdown documenting breaking changes, new features, bug fixes and other updates for Puppeteer version 22.0.0\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [22.0.0](https://github.com/puppeteer/puppeteer/compare/puppeteer-v21.11.0...puppeteer-v22.0.0) (2024-02-05)\n\n### ⚠ BREAKING CHANGES\n\n- rename createIncognitoBrowserContext to createBrowserContext\n- enable the new-headless mode by default\n- remove networkConditions in favor of PredefinedNetworkConditions\n- use ReadableStreams\n- remove duplicate type names\n- remove add/removeEventListener in favor of on/off\n- make console warn level compatible with WebDriver BiDi\n- remove InterceptResolutionStrategy\n- remove devices in favor of KnownDevices\n- remove `$x` and `waitForXpath`\n- remove waitForTimeout\n- generate accessible PDFs by default\n- remove `error` const, change CustomError to PuppeteerError\n- remove viewport resizing from ElementHandle.screenshot\n- remove PUPPETEER_DOWNLOAD_PATH in favor of PUPPETEER_CACHE_DIR\n- BiDi cookies\n- drop support for node16\n```\n\n----------------------------------------\n\nTITLE: Skipping a Specific Puppeteer Test using Mocha in TypeScript\nDESCRIPTION: Shows how to use Mocha's `it.skip` function to prevent a specific test case from running. The test logic remains but will be ignored by the test runner. This example structure mirrors a typical test using `getTestState` and performing a page navigation and assertion.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n  ...\n  it.skip('should work', async function({server, page}) {\n    const {server, page} = await getTestState();\n    const response = await page.goto(server.EMPTY_PAGE);\n    expect(response.ok).toBe(true);\n  });\n```\n\n----------------------------------------\n\nTITLE: Specifying @puppeteer/browsers Version with npx\nDESCRIPTION: Shows how to use specific versions of @puppeteer/browsers when running with npx, including using the latest version and a specific version.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/browsers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @puppeteer/browsers@latest --help\nnpx @puppeteer/browsers@2.4.1 --help\nnpx --yes @puppeteer/browsers@latest --help\n```\n\n----------------------------------------\n\nTITLE: Defining KeyDownOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for KeyDownOptions which contains deprecated properties. The interface includes optional properties 'commands' and 'text' which are both marked as deprecated and should not be used as they are automatically handled by the system.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.keydownoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyDownOptions\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Changelog Version Updates\nDESCRIPTION: Version comparison links and change summaries written in markdown format tracking Puppeteer updates from v18.2.1 down to v16.1.1\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## [18.2.1](https://github.com/puppeteer/puppeteer/compare/v18.2.0...v18.2.1) (2022-10-06)\n\n### Bug Fixes\n\n- add README to package during prepack ([#9057](https://github.com/puppeteer/puppeteer/issues/9057)) ([9374e23])\n- waitForRequest works with async predicate ([#9058](https://github.com/puppeteer/puppeteer/issues/9058)) ([8f6b2c9])\n\n### Dependencies\n\n- The following workspace dependencies were updated\n  - dependencies\n    - puppeteer-core bumped from 18.2.0 to ^18.2.1\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Puppeteer Angular Schematic\nDESCRIPTION: Command to run the unit test suite for the schematic, which verifies correct file creation and package.json updates.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Legacy Mode Prevailing with Immediate Abort in Puppeteer\nDESCRIPTION: This example shows how Legacy Mode takes precedence when at least one handler omits the priority when resolving the intercept. The request is aborted immediately.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Final outcome: immediate abort()\npage.setRequestInterception(true);\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Legacy Mode: interception is aborted immediately.\n  request.abort('failed');\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n  // Control will never reach this point because the request was already aborted in Legacy Mode\n\n  // Cooperative Intercept Mode: votes for continue at priority 0.\n  request.continue({}, 0);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI Docker Image for Puppeteer\nDESCRIPTION: CircleCI config snippet showing how to set up a Node.js Docker image for Puppeteer testing with the proper environment variables.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndocker:\n  - image: circleci/node:14 # Use your desired version\n    environment:\n      NODE_ENV: development # Only needed if puppeteer is in `devDependencies`\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Debugger Statement in Client Code\nDESCRIPTION: Inserts a debugger statement in client code evaluated in the browser. This causes the browser to pause execution at that point when DevTools is open.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/debugging.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => {\n  debugger;\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Single Test File\nDESCRIPTION: Command to create a single E2E test file using the Puppeteer schematic\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng generate @puppeteer/ng-schematics:e2e \"<TestName>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Sandbox Permissions on Windows\nDESCRIPTION: Uses icacls to set necessary permissions for Chrome's sandbox on Windows.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nicacls \"%USERPROFILE%/.cache/puppeteer/chrome\" /grant *S-1-15-2-1:(OI)(CI)(RX)\n```\n\n----------------------------------------\n\nTITLE: Using Page.evaluate() with a String Expression\nDESCRIPTION: This snippet shows how to pass a string expression to Page.evaluate() instead of a function. While functions are recommended for better debugging and TypeScript support, string expressions are also supported.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.evaluate.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst aHandle = await page.evaluate('1 + 2');\n```\n\n----------------------------------------\n\nTITLE: Defining EvaluateFuncWith Generic Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the EvaluateFuncWith type, which is a generic function type taking two type parameters V and T. It returns an Awaitable<unknown> and uses spread parameters combining V with InnerParams<T>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.evaluatefuncwith.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EvaluateFuncWith<V, T extends unknown[]> = (\n  ...params: [V, ...InnerParams<T>]\n) => Awaitable<unknown>;\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Usage with npx\nDESCRIPTION: Examples showing how to run the CLI using npx to access help documentation and manage browser installations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This will install and run the @puppeteer/browsers package.\n# If it is already installed in the current directory, the installed\nversion will be used.\nnpx @puppeteer/browsers --help\n```\n\n----------------------------------------\n\nTITLE: Defining SystemOptions Interface in TypeScript\nDESCRIPTION: Declares a TypeScript interface for system-level browser configuration options. It includes properties for specifying the browser type, Chrome release channel, and optional platform settings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.systemoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SystemOptions\n```\n\n----------------------------------------\n\nTITLE: Defining AwaitedLocator Utility Type in TypeScript\nDESCRIPTION: A TypeScript utility type that extracts the element type from a Locator. It uses conditional types with the infer keyword to determine the type parameter S from a Locator<S> and returns that type or never if the input is not a Locator.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.awaitedlocator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AwaitedLocator<T> = T extends Locator<infer S> ? S : never;\n```\n\n----------------------------------------\n\nTITLE: Declaring asPage Method in Puppeteer Target Class - TypeScript\nDESCRIPTION: Defines the asPage method as an abstract function in the Target class, allowing the creation of a Page instance from any target type. This method returns a Promise that resolves to a Page object, making it possible to handle nonstandard or 'other' CDP targets as conventional Page instances in Puppeteer. Requires Puppeteer's Page type and TypeScript environment; asPage should be implemented by subclasses, and its usage is primarily for developers needing access to low-level or atypical browser targets.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.aspage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract asPage(): Promise<Page>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConsoleMessageLocation Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface declaration for ConsoleMessageLocation, which represents the location information of console messages in Puppeteer. It includes optional properties for column number, line number, and URL of the resource.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessagelocation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConsoleMessageLocation\n```\n\n----------------------------------------\n\nTITLE: Defining clearCustomQueryHandlers Static Method in Puppeteer Class\nDESCRIPTION: This snippet shows the TypeScript definition of the clearCustomQueryHandlers static method in the Puppeteer class. The method takes no parameters and returns void, indicating it performs the action of unregistering all custom query handlers without returning any value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.clearcustomqueryhandlers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Puppeteer {\n  static clearCustomQueryHandlers(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatting for Secondary Packages CHANGELOG\nDESCRIPTION: Example markdown formatting for creating version headers in CHANGELOG files for secondary Puppeteer packages, showing the required format with package folder names and version numbers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/{PACKAGE_FOLDER_NAME}-v{PREVIOUS_VERSION}...{PACKAGE_FOLDER_NAME}-v{NEW_VERSION}) ({CURRENT_DATE})\n```\n\n----------------------------------------\n\nTITLE: Debugging Flaky Tests with Environment Variables in Bash\nDESCRIPTION: Command to debug flaky tests using environment variables, allowing tests matching a specific pattern to be wrapped with debugging utilities.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPUPPETEER_DEFLAKE_TESTS=\"[navigation.spec] navigation Page.goto should navigate to empty page with networkidle0\" npm run test:chrome:headless\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Sandbox Permissions\nDESCRIPTION: PowerShell command to set correct permissions for Chrome sandbox on Windows.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nicacls \"%USERPROFILE%/.cache/puppeteer/chrome\" /grant *S-1-15-2-1:(OI)(CI)(RX)\n```\n\n----------------------------------------\n\nTITLE: Connection Class Definition in TypeScript\nDESCRIPTION: Defines the Connection class that extends EventEmitter with CDPSessionEvents. This class handles the core connection functionality for Puppeteer's CDP implementation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Connection extends EventEmitter<CDPSessionEvents>\n```\n\n----------------------------------------\n\nTITLE: Exporting Puppeteer Methods\nDESCRIPTION: Exports various Puppeteer methods, making them available for external use. This change improves the module's API accessibility.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport puppeteer methods\n```\n\n----------------------------------------\n\nTITLE: Stopping a Trace with Puppeteer Tracing in TypeScript\nDESCRIPTION: Defines the stop() method within the Tracing class in TypeScript, a key part of Puppeteer's tracing API. The method stops an active trace started with start(), returning a Promise that resolves to either a Uint8Array buffer containing the trace data or undefined if no data is available. No parameters are required; ensure tracing was previously started before invoking stop().\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.tracing.stop.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Tracing {\n  stop(): Promise<Uint8Array | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VisibilityOption Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the VisibilityOption type used in Puppeteer. It can be set to 'hidden' to wait for an element to be hidden, 'visible' to wait for an element to be visible, or null to disable visibility checks.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.visibilityoption.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VisibilityOption = 'hidden' | 'visible' | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Locator.setVisibility() Method in TypeScript\nDESCRIPTION: TypeScript implementation of the setVisibility() method in the Locator class. This method clones the current locator with the visibility property changed to the specified value and returns a new locator instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.setvisibility.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  setVisibility<NodeType extends Node>(\n    this: Locator<NodeType>,\n    visibility: VisibilityOption,\n  ): Locator<NodeType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancement: Network Emulation API\nDESCRIPTION: Addition of page.emulateNetworkConditions API for network condition emulation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// New API: page.emulateNetworkConditions()\n// Used for emulating different network conditions during testing\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome Without Sandbox\nDESCRIPTION: Configuration to launch Chrome without sandbox (not recommended for untrusted content).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  args: ['--no-sandbox', '--disable-setuid-sandbox'],\n});\n```\n\n----------------------------------------\n\nTITLE: Commit Reference Link\nDESCRIPTION: Markdown link reference for a specific commit ID with issue number\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#9983](https://github.com/puppeteer/puppeteer/issues/9983)\n```\n\n----------------------------------------\n\nTITLE: Deploying Puppeteer Website Without SSH\nDESCRIPTION: Command to build and deploy the website using GitHub username for authentication. This is useful for pushing to the gh-pages branch when using GitHub Pages for hosting.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Running All Puppeteer Tests via npm\nDESCRIPTION: Executes all relevant Puppeteer unit tests for the current platform using the npm script defined in the project's `package.json`. This command typically invokes the Mocha test runner configured for the project.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Exposing RemoteObject Getter in JavaScript\nDESCRIPTION: This code snippet exposes a getter for RemoteObject to provide access to remote object properties.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexpose a RemoteObject getter\n```\n\n----------------------------------------\n\nTITLE: Building Packages\nDESCRIPTION: Commands for building all packages in the Puppeteer project.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Puppeteer Tests in Headful Chrome via npm\nDESCRIPTION: Executes Puppeteer tests specifically using the Chrome browser in headful (non-headless) mode via a predefined npm script (`test:chrome:headful`). This is useful for debugging tests visually.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:chrome:headful\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command for executing unit tests using Node test runner (requires Node 20+).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run unit\n```\n\n----------------------------------------\n\nTITLE: Defining CookieSourceScheme Type in TypeScript for Puppeteer\nDESCRIPTION: Defines a TypeScript type that represents the source scheme of the origin that originally set a cookie. The type includes 'Unset' (for emulating legacy cookie scope), 'NonSecure', and 'Secure' as possible values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiesourcescheme.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CookieSourceScheme = 'Unset' | 'NonSecure' | 'Secure';\n```\n\n----------------------------------------\n\nTITLE: Generating a Single E2E Test File with Puppeteer Schematic\nDESCRIPTION: Command to create a single E2E test file using the Puppeteer Angular Schematic. Replace \"<TestName>\" with your desired test name.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng generate @puppeteer/ng-schematics:e2e \"<TestName>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Locator Class in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the abstract Locator class in TypeScript for Puppeteer. It extends the EventEmitter class and includes various properties and methods for element interaction.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Locator<T> extends EventEmitter<LocatorEvents>\n```\n\n----------------------------------------\n\nTITLE: Defining CDPSessionEvent namespace in TypeScript\nDESCRIPTION: TypeScript declaration for the CDPSessionEvent namespace which contains event types for CDPSession class in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsessionevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare namespace CDPSessionEvent\n```\n\n----------------------------------------\n\nTITLE: Defining the Accessibility Class Signature in TypeScript\nDESCRIPTION: The TypeScript declaration for the Accessibility class in Puppeteer that provides methods for accessing the browser's accessibility tree.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.accessibility.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Accessibility\n```\n\n----------------------------------------\n\nTITLE: Exporting ResourceType Alias with Lowercase Utility - TypeScript\nDESCRIPTION: Defines and exports the ResourceType type as a lowercase variant of Protocol.Network.ResourceType for use throughout the Puppeteer project. The definition uses TypeScript's Lowercase utility type to ensure the type is always a lowercase string form of the browser protocol's resource type. There are no runtime dependencies, but this type depends on the existence of Protocol.Network.ResourceType and the TypeScript built-in Lowercase utility.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.resourcetype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResourceType = Lowercase<Protocol.Network.ResourceType>;\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Prefixed Selector Syntax in Puppeteer\nDESCRIPTION: Shows the legacy prefixed selector syntax for various selector types in Puppeteer, which is maintained for backward compatibility but not recommended for new code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Same as ::-p-text(\"My text\").\nawait page.locator('text/My text').click();\n// Same as ::-p-xpath(//h2).\nawait page.locator('xpath///h2').click();\n// Same as ::-p-aria(My label).\nawait page.locator('aria/My label').click();\n\nawait page.locator('pierce/div').click();\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands for running the test suite and cleaning artifacts\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/contributing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\nnpm run clean\nnpm run clean --workspace <package>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Puppeteer Examples\nDESCRIPTION: This command installs the necessary package dependencies for running Puppeteer examples.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Protractor Example Test\nDESCRIPTION: Sample test written using Protractor for comparison purposes\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('Protractor Demo', function () {\n  it('should add one and two', function () {\n    browser.get('https://juliemr.github.io/protractor-demo/');\n    element(by.model('first')).sendKeys(1);\n    element(by.model('second')).sendKeys(2);\n\n    element(by.id('gobutton')).click();\n\n    expect(element(by.binding('latest')).getText()).toEqual('3');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining NewDocumentScriptEvaluation Interface in TypeScript\nDESCRIPTION: This code snippet defines the NewDocumentScriptEvaluation interface in TypeScript. It includes a single property 'identifier' of type string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.newdocumentscriptevaluation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NewDocumentScriptEvaluation\n{\n    identifier: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Single Package\nDESCRIPTION: Commands for building individual packages and watching for changes during development.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build --workspace <package>\nnpm run build --watch --workspace <package>\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Migration Example\nDESCRIPTION: Equivalent test converted from Protractor to Puppeteer\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {setupBrowserHooks, getBrowserState} from './utils';\n\ndescribe('Puppeteer Demo', function () {\n  setupBrowserHooks();\n  it('should add one and two', function () {\n    const {page} = getBrowserState();\n    await page.goto('https://juliemr.github.io/protractor-demo/');\n\n    await page.locator('.form-inline > input:nth-child(1)').fill('1');\n    await page.locator('.form-inline > input:nth-child(2)').fill('2');\n    await page.locator('#gobutton').fill('2');\n\n    const result = await page\n      .locator('.table tbody td:last-of-type')\n      .map(header => header.innerText)\n      .wait();\n\n    expect(result).toEqual('3');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Running Puppeteer on Alpine Linux\nDESCRIPTION: Dockerfile example for running Puppeteer on Alpine Linux. This approach uses the system's Chromium package rather than downloading Chrome, and configures a non-privileged user for security.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\n\n# Installs Chromium (100) package.\nRUN apk add --no-cache \\\n      chromium \\\n      nss \\\n      freetype \\\n      harfbuzz \\\n      ca-certificates \\\n      ttf-freefont \\\n      nodejs \\\n      yarn\n\n...\n\n# Tell Puppeteer to skip installing Chrome. We'll be using the installed package.\nENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser\n\n# Puppeteer v13.5.0 works with Chromium 100.\nRUN yarn add puppeteer@13.5.0\n\n# Add user so we don't need --no-sandbox.\nRUN addgroup -S pptruser && adduser -S -G pptruser pptruser \\\n    && mkdir -p /home/pptruser/Downloads /app \\\n    && chown -R pptruser:pptruser /home/pptruser \\\n    && chown -R pptruser:pptruser /app\n\n# Run everything after as non-privileged user.\nUSER pptruser\n\n...\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTPS-First Mode in Chrome\nDESCRIPTION: Configuration to disable Chrome's HttpsFirstBalancedModeAutoEnable feature to prevent net::ERR_BLOCKED_BY_CLIENT errors.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  args: ['--disable-features=HttpsFirstBalancedModeAutoEnable'],\n});\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: TypeScript Generic Type Definition\nDESCRIPTION: Fix for the generic type definition of _isClosedPromise in the common module.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// From commit 122f074f92f47a7b9aa08091851e51a07632d23b\n// Fix generic type of _isClosedPromise\n```\n\n----------------------------------------\n\nTITLE: Version Link Reference\nDESCRIPTION: Markdown link reference for version comparison between v19.8.3 and v19.8.4\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[19.8.4](https://github.com/puppeteer/puppeteer/compare/puppeteer-core-v19.8.3...puppeteer-core-v19.8.4)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Reference\nDESCRIPTION: Release note entry documenting bug fixes with issue references and commit hashes\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **a11y:** query only unignored nodes ([#12224](https://github.com/puppeteer/puppeteer/issues/12224)) ([e20cd64](https://github.com/puppeteer/puppeteer/commit/e20cd64fff374c4113777912c193f4a5d7d04297))\n```\n\n----------------------------------------\n\nTITLE: GitlabCI Configuration for Puppeteer\nDESCRIPTION: Required package dependencies to install in the GitlabCI pipeline before_script section to support running headless Chrome in the GitlabCI Docker environment.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nbefore_script:\n  - apt-get update\n  - apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2\n    libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libgconf-2-4\n    libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0\n    libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1\n    libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1\n    libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release\n    xdg-utils wget\n```\n\n----------------------------------------\n\nTITLE: Inefficient Puppeteer Usage in Google Cloud Run\nDESCRIPTION: Example of inefficient Puppeteer implementation in Google Cloud Run that causes slow execution because CPU is disabled after HTTP response is sent.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\n\nconst app = express();\n\napp.post('/test-puppeteer', (req, res) => {\n  res.json({\n    jobId: 123,\n    acknowledged: true,\n  });\n\n  puppeteer.launch().then(browser => {\n    // 2 minutes later...\n  });\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Markdown Version Compatibility Table\nDESCRIPTION: A markdown table displaying version mappings between Puppeteer releases and compatible browser versions. Includes links to API documentation for each Puppeteer version along with corresponding Chrome for Testing and Firefox browser versions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/supported-browsers.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Puppeteer                                                                                              | Chrome                                                                                     | Firefox                                                   |\n| ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ | --------------------------------------------------------- |\n| [Puppeteer v24.7.0](https://github.com/puppeteer/puppeteer/blob/puppeteer-v24.7.0/docs/api/index.md)   | [Chrome for Testing](https://developer.chrome.com/blog/chrome-for-testing/) 135.0.7049.95  | [Firefox](https://www.mozilla.org/en-US/firefox/) 137.0.2 |\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Runner Self-Tests in Bash\nDESCRIPTION: Command to run tests for the Mocha Runner itself using npm.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle.asElement() Method in TypeScript\nDESCRIPTION: This code snippet defines the asElement() method in the JSHandle class. The method returns either null or an ElementHandle<Node> if the handle is an instance of ElementHandle.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.aselement.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract asElement(): ElementHandle<Node> | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Atomic XPath Query Implementation\nDESCRIPTION: Ensures XPath queries are executed atomically to prevent race conditions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n6098bab2ba68276c85a974e17c9fe3bdac8c4c58\n```\n\n----------------------------------------\n\nTITLE: Declaring the Tracing Class in Puppeteer (TypeScript)\nDESCRIPTION: This code snippet declares the Tracing class using TypeScript export and declare keywords, setting up its interface for external usage. It does not contain method implementation but shows class exposure as part of a public API. No dependencies are illustrated in this declaration. Input and output are not present as this is a type/interface declaration, and third-party code should not instantiate or extend this class directly.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.tracing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Tracing\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserEvents Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the BrowserEvents interface, which extends Record<EventType, unknown>. It includes four properties related to browser events: disconnected, targetchanged, targetcreated, and targetdestroyed.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BrowserEvents extends Record<EventType, unknown> {\n  disconnected: undefined;\n  targetchanged: Target;\n  targetcreated: Target;\n  targetdestroyed: Target;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocatorEvent Enum in TypeScript for Puppeteer\nDESCRIPTION: This code snippet declares the LocatorEvent enum in TypeScript. It defines the 'Action' event which is emitted before a locator performs an action on located elements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locatorevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum LocatorEvent\n```\n\n----------------------------------------\n\nTITLE: Defining ConsoleMessageLocation Interface in TypeScript\nDESCRIPTION: This snippet defines the ConsoleMessageLocation interface in TypeScript. The interface contains optional properties for tracking the source location of console messages, including columnNumber, lineNumber, and url.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.consolemessagelocation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConsoleMessageLocation\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command for executing all test suites in the project.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining Locator.map Method in TypeScript\nDESCRIPTION: TypeScript method signature for the Locator.map() method which takes a mapper function to transform a Locator of type T to a Locator of type To.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.map.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  map<To>(mapper: Mapper<T, To>): Locator<To>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer Angular Schematic via Angular CLI\nDESCRIPTION: Command to add Puppeteer-based e2e tests to an Angular project using the Angular CLI. This will add the schematic as a dependency to the project.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add @puppeteer/ng-schematics\n```\n\n----------------------------------------\n\nTITLE: Defining Page.mainFrame() Method in TypeScript\nDESCRIPTION: This code snippet defines the mainFrame() method within the Page class. The method returns the page's main frame, which is of type Frame.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.mainframe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract mainFrame(): Frame;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling HttpsFirstBalancedModeAutoEnable in Chrome with Puppeteer\nDESCRIPTION: Launches Chrome with a feature disabled to prevent net::ERR_BLOCKED_BY_CLIENT errors for HTTP URLs.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  args: ['--disable-features=HttpsFirstBalancedModeAutoEnable'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Port in Angular JSON for E2E Tests\nDESCRIPTION: JSON configuration to set a custom port for E2E tests in angular.json, avoiding conflicts with the development server. The port setting is added to the e2e or puppeteer configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"e2e\": {\n    \"builder\": \"@puppeteer/ng-schematics:puppeteer\",\n    \"options\": {\n      \"commands\": [...],\n      \"devServerTarget\": \"sandbox:serve\",\n      \"testRunner\": \"<TestRunner>\",\n      \"port\": 8080\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Puppeteer v1.12.2 Browser Compatibility in Markdown\nDESCRIPTION: A markdown table entry showing browser compatibility for Puppeteer v1.12.2. The table indicates this version supports Chromium 73.0.3679.0 but does not support Firefox.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/supported-browsers.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| [Puppeteer v1.12.2](https://github.com/puppeteer/puppeteer/blob/v1.12.2/docs/api.md)                   | Chromium 73.0.3679.0                                                                       | Firefox not supported                                     |\n```\n\n----------------------------------------\n\nTITLE: Using Content Box for OOPIF Offset Calculations\nDESCRIPTION: Modifies the calculation of offsets for Out-of-Process iframes (OOPIFs) to use the content box.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated OOPIF offset calculations\n// Specific code changes not provided in the release notes\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Port for E2E Tests in Angular JSON\nDESCRIPTION: JSON configuration to specify a custom port for running E2E tests, avoiding conflicts with the development server.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"e2e\": {\n    \"builder\": \"@puppeteer/ng-schematics:puppeteer\",\n    \"options\": {\n      \"commands\": [...],\n      \"devServerTarget\": \"sandbox:serve\",\n      \"testRunner\": \"<TestRunner>\",\n      \"port\": 8080\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Browser Frame Management\nDESCRIPTION: Fixes an issue with frame tree synchronization and event processing to ensure proper frame handling.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nd63f0cfc61e8ba2233eee8b2f3b99d8619a0acaf\n```\n\n----------------------------------------\n\nTITLE: Defining SerializedAXNode Interface in TypeScript\nDESCRIPTION: This code snippet defines the SerializedAXNode interface in TypeScript, encapsulating all relevant accessibility properties for a node as used by Puppeteer. It specifies optional and required fields such as name, role, value, states (checked, pressed, selected), ARIA-specific attributes, and relationships (children). The intended use is to serialize or transfer accessibility node state. Dependencies include TypeScript and Puppeteer; expected inputs are object literals conforming to this structure, with no complex constraints other than the type requirements.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.serializedaxnode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SerializedAXNode\n\n```\n\n----------------------------------------\n\nTITLE: Defining InterceptResolutionState Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for InterceptResolutionState which contains an action property of type InterceptResolutionAction and an optional priority property of type number.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.interceptresolutionstate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterceptResolutionState\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute the schematic's unit test suite\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Defining Quad Tuple Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias 'Quad' as a tuple consisting of four 'Point' objects. Used within Puppeteer to precisely represent geometric quads, such as bounding boxes or polygon areas. Requires the 'Point' type to be previously declared or imported; the snippet relies on TypeScript type system with no runtime impact. Input is implied as any code referencing 'Quad', and the output is improved type safety for four-point groupings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.quad.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Quad = [Point, Point, Point, Point];\n```\n\n----------------------------------------\n\nTITLE: Updating node-fetch Package in package.json\nDESCRIPTION: Updates the node-fetch package in package.json to fix a bug.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Update in package.json\n\"dependencies\": {\n  \"node-fetch\": \"<updated-version>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Puppeteer Website Using SSH\nDESCRIPTION: Command to build and deploy the website when using SSH for GitHub authentication.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Enabling Chrome Extensions\nDESCRIPTION: Configuration to allow Chrome extensions by removing the default --disable-extensions argument.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  ignoreDefaultArgs: ['--disable-extensions'],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Puppeteer Angular Schematic\nDESCRIPTION: Command to execute the unit test suite for the Puppeteer Angular Schematic, which verifies correct file creation and package.json updates.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Downloading Browser Archive in Puppeteer\nDESCRIPTION: Downloads a browser archive without unpacking it based on InstallOptions. Returns the absolute path to the downloaded archive as a string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.install.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function install(\n  options: InstallOptions & {\n    unpack: false;\n  },\n): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Defining Puppeteer.clearCustomQueryHandlers Method Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet shows the class definition and static method signature for `Puppeteer.clearCustomQueryHandlers()`. This method is part of the `Puppeteer` class, takes no parameters, and returns `void`. Its purpose is to unregister all previously added custom query handlers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteer.clearcustomqueryhandlers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass Puppeteer {\n  static clearCustomQueryHandlers(): void;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: ConsoleMessage Class Signature in TypeScript\nDESCRIPTION: TypeScript signature for the ConsoleMessage class in Puppeteer. This class handles console messages dispatched by a page via the 'console' event. Note that the constructor is marked as internal and should not be called directly by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.consolemessage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ConsoleMessage\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Puppeteer in Angular\nDESCRIPTION: Command to execute the Puppeteer E2E tests in an Angular project after installing the schematics.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Defining SecurityDetails.issuer() Method in TypeScript\nDESCRIPTION: This code snippet defines the issuer() method in the SecurityDetails class. The method returns a string representing the name of the issuer of the certificate.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.issuer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SecurityDetails {\n  issuer(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionTransport.send Interface Method in TypeScript\nDESCRIPTION: This code snippet defines the send method on the ConnectionTransport interface, which is used to transmit messages as strings within the Puppeteer framework. The method takes a string message parameter and doesn't return a value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connectiontransport.send.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionTransport {\n  send(message: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter.once Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the signature for the once() method on CommonEventEmitter. The method takes an event type and handler function as parameters, and returns the instance itself. The handler is called only once when the specified event occurs.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.commoneventemitter.once.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  once<Key extends keyof Events>(\n    type: Key,\n    handler: Handler<Events[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the removeAllListeners method signature in TypeScript\nDESCRIPTION: TypeScript interface definition for the removeAllListeners method of the CommonEventEmitter interface. This method removes all listeners for a specific event or all events if no event is specified, and returns the instance for chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.commoneventemitter.removealllisteners.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  removeAllListeners(event?: keyof Events): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InstalledBrowser Class in TypeScript\nDESCRIPTION: This snippet defines the InstalledBrowser class exported by the module. It includes a remark that the constructor is marked as internal and should not be called directly by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.installedbrowser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class InstalledBrowser\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.scrollIntoView Method Definition in TypeScript\nDESCRIPTION: Defines the scrollIntoView method for the ElementHandle class, which scrolls an element into view using either the automation protocol client or by calling element.scrollIntoView. The method takes no parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.scrollintoview.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  scrollIntoView(this: ElementHandle<Element>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Content in Puppeteer\nDESCRIPTION: The setContent method sets the HTML content of the page. It allows specifying options for the operation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\npage.setContent(html, options)\n```\n\n----------------------------------------\n\nTITLE: Frame.name() method signature in Puppeteer\nDESCRIPTION: The TypeScript signature of the Frame.name() method, which returns a string representing the frame's name attribute.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.name.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  name(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Locator Preconditions in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element using `page.locator('button')` and configures its behavior before clicking. It disables checks for the element being in the viewport, visibility (`setVisibility(null)`), enabled state, and stable bounding box by chaining methods like `.setEnsureElementIsInTheViewport(false)`. This allows clicking the element without waiting for these standard preconditions. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Clicks on a button without waiting for any preconditions.\nawait page\n  .locator('button')\n  .setEnsureElementIsInTheViewport(false)\n  .setVisibility(null)\n  .setWaitForEnabled(false)\n  .setWaitForStableBoundingBox(false)\n  .click();\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Changelog Entry\nDESCRIPTION: Markdown changelog entries documenting bug fixes and feature changes across Puppeteer versions 14.4.1 through 16.1.0.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- custom sessions should not emit targetcreated events ([#8788](https://github.com/puppeteer/puppeteer/issues/8788)) ([3fad05d](https://github.com/puppeteer/puppeteer/commit/3fad05d333b79f41a7b58582c4ca493200bb5a79)), closes [#8787](https://github.com/puppeteer/puppeteer/issues/8787)\n- deprecate `ExecutionContext` ([#8792](https://github.com/puppeteer/puppeteer/issues/8792)) ([b5da718](https://github.com/puppeteer/puppeteer/commit/b5da718e2e4a2004a36cf23cad555e1fc3b50333))\n- deprecate `root` in `WaitForSelectorOptions` ([#8795](https://github.com/puppeteer/puppeteer/issues/8795)) ([65a5ce8](https://github.com/puppeteer/puppeteer/commit/65a5ce8464c56fcc55e5ac3ed490f31311bbe32a))\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Puppeteer Custom Query Handler in TypeScript\nDESCRIPTION: Shows the TypeScript signature for the static `Puppeteer.unregisterCustomQueryHandler` method. This method takes the string `name` of the custom query handler to be removed and returns `void`. It is used to undo the registration performed by `Puppeteer.registerCustomQueryHandler`.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.puppeteer.unregistercustomqueryhandler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Puppeteer {\n  static unregisterCustomQueryHandler(name: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Class Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Accessibility class in Puppeteer. The class is exported and declared, indicating it's part of the public API.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.accessibility.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Accessibility\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Puppeteer Angular Schematic\nDESCRIPTION: Command to execute end-to-end tests after installing the Puppeteer Angular Schematic.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Defining FileFormat Type in TypeScript for Puppeteer\nDESCRIPTION: TypeScript type definition that specifies the supported file formats in Puppeteer. This type allows only three string literal values: 'gif', 'webm', and 'mp4', which are commonly used for video recording and media exports.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.fileformat.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FileFormat = 'gif' | 'webm' | 'mp4';\n```\n\n----------------------------------------\n\nTITLE: Defining EventsWithWildcard Generic Type in TypeScript\nDESCRIPTION: A TypeScript type definition that extends an Events record type to include wildcard event handling. It takes a generic parameter Events that must extend Record<EventType, unknown> and adds a '*' key that can handle any of the event types defined in the Events type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.eventswithwildcard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EventsWithWildcard<Events extends Record<EventType, unknown>> =\n  Events & {\n    '*': Events[keyof Events];\n  };\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection from CDPSession in Puppeteer (TypeScript)\nDESCRIPTION: Abstract method signature for the connection() method in the CDPSession class, which returns the underlying Connection object for the session if one exists.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsession.connection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CDPSession {\n  abstract connection(): Connection | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InstalledBrowser Class Signature in TypeScript\nDESCRIPTION: The TypeScript class declaration for InstalledBrowser, which is marked as internal and should not be instantiated directly or extended by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.installedbrowser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class InstalledBrowser\n```\n\n----------------------------------------\n\nTITLE: Debugging Test Patterns with Environment Variables in Bash\nDESCRIPTION: Command to debug all tests matching a pattern using environment variables.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPUPPETEER_DEFLAKE_TESTS=\"[navigation.spec] *\" npm run test:chrome:headless\n```\n\n----------------------------------------\n\nTITLE: ConsoleMessage.args Method Signature in Typescript\nDESCRIPTION: The signature of the ConsoleMessage.args() method that returns an array of JSHandle objects representing arguments passed to the console.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.consolemessage.args.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConsoleMessage {\n  args(): JSHandle[];\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Puppeteer Repository\nDESCRIPTION: Instructions for cloning the Puppeteer repository to start contributing\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/puppeteer/puppeteer\ncd puppeteer\n```\n\n----------------------------------------\n\nTITLE: Defining CDPEvents Type Mapping for Chrome DevTools Protocol in TypeScript\nDESCRIPTION: This type definition maps all properties in the ProtocolMapping.Events interface to their corresponding event types. It uses TypeScript's mapped type syntax to create a type that represents all possible CDP events with their appropriate payload types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CDPEvents = {\n  [Property in keyof ProtocolMapping.Events]: ProtocolMapping.Events[Property][0];\n};\n```\n\n----------------------------------------\n\nTITLE: Starting dbus Service in Docker Container\nDESCRIPTION: Command to start the dbus service within a Docker container. This can be useful to avoid warnings in the browser console when running in headless mode.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/docker.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo service dbus start\n```\n\n----------------------------------------\n\nTITLE: Defining NodeFor Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the NodeFor type, which is a generic type that takes a ComplexSelector string as a type parameter. It uses the ParseSelector utility type to process the complex selector string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.nodefor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NodeFor<ComplexSelector extends string> =\n  ParseSelector<ComplexSelector>;\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CommonEventEmitter that implements event handling capabilities. It's a generic interface that accepts an Events type parameter which is a record mapping event types to their respective payloads.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.commoneventemitter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CommonEventEmitter<Events extends Record<EventType, unknown>>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration of JSCoverage Class in Puppeteer\nDESCRIPTION: The TypeScript signature for the JSCoverage class in Puppeteer. This class is used for JavaScript code coverage functionality but is marked as internal, meaning third-party code should not instantiate it directly.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class JSCoverage\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_INTERCEPT_RESOLUTION_PRIORITY Constant in TypeScript\nDESCRIPTION: This snippet defines the DEFAULT_INTERCEPT_RESOLUTION_PRIORITY constant with a value of 0. It represents the default priority for cooperative request interception resolution in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.default_intercept_resolution_priority.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;\n```\n\n----------------------------------------\n\nTITLE: Implementing touchEnd Method in ElementHandle Class in TypeScript\nDESCRIPTION: Method signature for touchEnd in the ElementHandle class, which simulates ending a touch event on an element. The method is bound to the ElementHandle instance and returns a Promise that resolves when the touch end event is complete.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.touchend.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  touchEnd(this: ElementHandle<Element>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CDPSession.detach Method in TypeScript\nDESCRIPTION: Defines the detach method signature for the CDPSession class. This method detaches the CDP session from its target, preventing further communication and event emission.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.cdpsession.detach.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CDPSession {\n  abstract detach(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Port in Angular JSON\nDESCRIPTION: JSON configuration to specify a custom port for E2E tests in angular.json\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"e2e\": {\n    \"builder\": \"@puppeteer/ng-schematics:puppeteer\",\n    \"options\": {\n      \"commands\": [...],\n      \"devServerTarget\": \"sandbox:serve\",\n      \"testRunner\": \"<TestRunner>\",\n      \"port\": 8080\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sandbox Smoke Tests for Puppeteer Angular Schematic\nDESCRIPTION: Command to execute smoke tests for the Puppeteer Angular Schematic, creating fresh Angular installations and running initial e2e tests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode tools/smoke.mjs\n```\n\n----------------------------------------\n\nTITLE: Defining FrameAddScriptTagOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for configuring script tag injection in Puppeteer frames. Includes options for inline content, file paths, URLs, script type, and element ID.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frameaddscripttagoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FrameAddScriptTagOptions\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer Cache Directory with Configuration File\nDESCRIPTION: Example configuration file (.puppeteerrc.cjs) for setting custom browser cache directory.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {join} = require('path');\n\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring BrowserEvent Enum in TypeScript\nDESCRIPTION: TypeScript enum declaration for browser events in Puppeteer. Defines the possible events that can be emitted by a browser instance including disconnected, targetchanged, targetcreated, and targetdestroyed events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browserevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare const enum BrowserEvent\n```\n\n----------------------------------------\n\nTITLE: Defining JSCoverage Class Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the JSCoverage class in TypeScript. It is exported as a class declaration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class JSCoverage\n```\n\n----------------------------------------\n\nTITLE: Defining ExtensionTransport Class in TypeScript\nDESCRIPTION: Declaration of the ExtensionTransport class which implements ConnectionTransport interface. This class enables connections through chrome.debugger API when Puppeteer runs as an extension.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.extensiontransport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ExtensionTransport implements ConnectionTransport\n```\n\n----------------------------------------\n\nTITLE: Constructing CLI Instance in TypeScript\nDESCRIPTION: Signature for the CLI class constructor. It takes 'opts' and 'rl' as parameters, though their types are not specified in this snippet. This constructor initializes a new instance of the CLI class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(constructor)(opts, rl)\n```\n\n----------------------------------------\n\nTITLE: Defining CSSCoverage.start() Method in TypeScript\nDESCRIPTION: This code snippet defines the start() method for the CSSCoverage class in Puppeteer. It takes an optional options parameter with a resetOnNavigation property and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverage.start.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CSSCoverage {\n  start(options?: {resetOnNavigation?: boolean}): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Obsolete ElementHandle.drop Method in Puppeteer\nDESCRIPTION: This is an obsolete version of the ElementHandle.drop method that is no longer supported. It optionally accepts a Protocol.Input.DragData parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.drop.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  drop(\n    this: ElementHandle<Element>,\n    data?: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for Puppeteer\nDESCRIPTION: Basic Travis CI configuration for running Puppeteer tests with xvfb service for non-headless Chrome testing.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\nnode_js: node\nservices: xvfb\nscript:\n  - npm test\n```\n\n----------------------------------------\n\nTITLE: Declaring the ScreenRecorder Class with PassThrough - TypeScript\nDESCRIPTION: This code snippet declares a TypeScript class named ScreenRecorder, extending Node.js's PassThrough stream, likely to facilitate screen recording data transfer as a stream. As indicated, the constructor is for internal use and should not be called directly by third-party code. The class serves as a base to supply additional screen recording and streaming methods, with dependencies on the PassThrough class (typically imported from 'stream').\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.screenrecorder.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ScreenRecorder extends PassThrough\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtensionTransport.close Method in TypeScript\nDESCRIPTION: The close() method in the ExtensionTransport class is used to terminate a transport connection. It takes no parameters and returns void, indicating it's a simple termination method without return values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.extensiontransport.close.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExtensionTransport {\n  close(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the GetInstalledBrowsersOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for GetInstalledBrowsersOptions which is used to configure browser installation settings. This interface contains a single property 'cacheDir' that specifies the path to the root cache directory for installed browsers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.getinstalledbrowsersoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetInstalledBrowsersOptions\n```\n\n----------------------------------------\n\nTITLE: Fetching Typed Property from JSHandle in TypeScript\nDESCRIPTION: This method fetches a single property from the referenced object. It uses generic types to ensure type safety when accessing properties. The method returns a Promise that resolves to a HandleFor<T[K]> type.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.getproperty.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  getProperty<K extends keyof T>(\n    propertyName: HandleOr<K>,\n  ): Promise<HandleFor<T[K]>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebWorker Class in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the WebWorker class, which extends EventEmitter.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class WebWorker extends EventEmitter<Record<EventType, unknown>>\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter.off Method Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the off() method of CommonEventEmitter. The method removes event listeners for specified event types, with an optional handler parameter. Returns the instance itself for method chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.off.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  off<Key extends keyof Events>(\n    type: Key,\n    handler?: Handler<Events[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TouchHandle Interface in TypeScript\nDESCRIPTION: This code snippet defines the TouchHandle interface in TypeScript. The interface exposes methods to manipulate touches that have been started.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchhandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TouchHandle\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Commands for installing project dependencies, with an option to download Firefox browser by default.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# Or to download Firefox by default\nPUPPETEER_BROWSER=firefox npm install\n```\n\n----------------------------------------\n\nTITLE: Adding Changelog Entry for Puppeteer Sub-packages\nDESCRIPTION: Markdown template for adding a new version entry to Puppeteer sub-package changelogs, used when release-please automation fails\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/contributing.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/{PACKAGE_FOLDER_NAME}-v{PREVIOUS_VERSION}...{PACKAGE_FOLDER_NAME}-v{NEW_VERSION}) ({CURRENT_DATE})\n```\n\n----------------------------------------\n\nTITLE: Test Expectation Configuration in JSON\nDESCRIPTION: Example of a test expectation configuration in TestExpectations.json that defines which tests to skip based on test ID patterns, platforms, and parameters.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"testIdPattern\": \"[accessibility.spec]\",\n  \"platforms\": [\"darwin\", \"win32\", \"linux\"],\n  \"parameters\": [\"firefox\"],\n  \"expectations\": [\"SKIP\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommonEventEmitter.removeAllListeners Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the removeAllListeners method that removes all listeners for either a specific event or all events. The method takes an optional event parameter and returns the instance itself.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.removealllisteners.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  removeAllListeners(event?: keyof Events): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Locator Element to a Value in Puppeteer (TypeScript)\nDESCRIPTION: Selects an element matching the CSS selector 'button' using `page.locator()`. It then uses the `.map()` function to execute a JavaScript function in the browser context on the element, returning the negated value of its `disabled` property (true if enabled). The `.wait()` call resolves with this resulting boolean value. Requires a Puppeteer `Page` instance (`page`).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst enabled = await page\n  .locator('button')\n  .map(button => !button.disabled)\n  .wait();\n```\n\n----------------------------------------\n\nTITLE: Declaring browserContext() in Target Class - Puppeteer - TypeScript\nDESCRIPTION: Defines the abstract browserContext() method within the Target class in TypeScript for Puppeteer. The method returns a BrowserContext object and must be implemented by derived classes to provide access to the associated browser context. Dependencies include the Puppeteer TypeScript definitions, and BrowserContext must be imported or in scope. No parameters are required, and the method returns a BrowserContext instance representing the specific context of the target. This declaration is an interface and does not contain implementation logic.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.target.browsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Target {\n  abstract browserContext(): BrowserContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the trimCache Function Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the signature for the `trimCache` function. It indicates that the function takes no arguments and returns a Promise that resolves to `void`, signifying an asynchronous operation with no return value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.trimcache.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntrimCache: () => Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Method Definition for CommonEventEmitter.off in Puppeteer\nDESCRIPTION: Defines the signature for the off() method on CommonEventEmitter interface. This method removes event listeners for specific event types, with an optional handler parameter to remove specific handlers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.commoneventemitter.off.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonEventEmitter {\n  off<Key extends keyof Events>(\n    type: Key,\n    handler?: Handler<Events[Key]>,\n  ): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDPSession Class in TypeScript\nDESCRIPTION: Abstract class definition for CDPSession that extends EventEmitter to handle Chrome DevTools Protocol events and methods.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class CDPSession extends EventEmitter<CDPSessionEvents>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Puppeteer Website\nDESCRIPTION: Command to install the necessary npm dependencies for the Puppeteer documentation website built with Docusaurus 3.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPResponse.status Method in TypeScript\nDESCRIPTION: This code snippet defines the status method in the HTTPResponse class which returns the numerical HTTP status code of a response (e.g., 200 for success). The method is abstract and must be implemented by subclasses.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.status.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract status(): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the fromSession Static Method in Connection Class - TypeScript\nDESCRIPTION: TypeScript signature for the static fromSession method in the Connection class. This method takes a CDPSession object as input and returns either a Connection instance or undefined if no connection is associated with the session.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.fromsession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  static fromSession(session: CDPSession): Connection | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Node-like Environments in Puppeteer\nDESCRIPTION: Adds support for Node-like environments in Puppeteer, expanding its compatibility beyond just Node.js environments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport node-like environments\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.abortErrorReason Method in TypeScript\nDESCRIPTION: Method signature for retrieving the most recent abort error reason from an HTTP request. Returns either a Protocol.Network.ErrorReason or null if no abort reason exists.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.aborterrorreason.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abortErrorReason(): Protocol.Network.ErrorReason | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Moveable.move() Method in TypeScript\nDESCRIPTION: This code snippet defines the move() method for the Moveable interface. The method takes no parameters and returns the instance of the object (this), allowing for method chaining.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.moveable.move.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Moveable {\n  move(): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SecurityDetails.protocol Method Signature (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the method signature for `protocol()` within the `SecurityDetails` class. This method requires no arguments and returns a string representing the security protocol used, such as 'TLS 1.2'. It's part of the Puppeteer API for accessing security information related to network requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.securitydetails.protocol.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass SecurityDetails {\n  protocol(): string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining LowerCasePaperFormat Type in TypeScript for Puppeteer\nDESCRIPTION: This snippet defines a TypeScript type called LowerCasePaperFormat. It represents a union of string literals for different paper formats, including standard US sizes (letter, legal, tabloid, ledger) and A-series paper sizes (A0 to A6). This type is likely used in Puppeteer for specifying page sizes when working with PDFs or printing.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.lowercasepaperformat.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LowerCasePaperFormat =\n  | 'letter'\n  | 'legal'\n  | 'tabloid'\n  | 'ledger'\n  | 'a0'\n  | 'a1'\n  | 'a2'\n  | 'a3'\n  | 'a4'\n  | 'a5'\n  | 'a6';\n```\n\n----------------------------------------\n\nTITLE: Converting Cookie Partition Keys TypeScript Function Signature\nDESCRIPTION: Function signature for converting cookie partition keys between Puppeteer and CDP formats. Takes a CookiePartitionKey, string, or undefined as input and returns a Protocol.Network.CookiePartitionKey or undefined.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.convertcookiespartitionkeyfrompuppeteertocdp.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function convertCookiesPartitionKeyFromPuppeteerToCdp(\n  partitionKey: CookiePartitionKey | string | undefined,\n): Protocol.Network.CookiePartitionKey | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining the QueryOptions Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `QueryOptions` interface within the Puppeteer library. This interface is used to specify options for element querying methods, allowing customization of query behavior.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.queryoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QueryOptions\n```\n\n----------------------------------------\n\nTITLE: Chrome version notation in Markdown\nDESCRIPTION: Markdown notation showing Chrome browser version update for Puppeteer\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- roll to Chrome 119.0.6045.105 (r1204232)\n```\n\n----------------------------------------\n\nTITLE: Version Update Markdown\nDESCRIPTION: Release notes entry showing dependencies updated between puppeteer versions\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Dependencies\n\n- The following workspace dependencies were updated\n  - dependencies\n    - puppeteer-core bumped from 22.6.3 to 22.6.4\n```\n\n----------------------------------------\n\nTITLE: Defining AwaitablePredicate Type in TypeScript\nDESCRIPTION: Defines the AwaitablePredicate generic type that represents a function accepting a value of type T and returning an Awaitable boolean. This type is used for condition checking in Puppeteer's waiting operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.awaitablepredicate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AwaitablePredicate<T> = (value: T) => Awaitable<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the ConnectOptions interface, which includes various optional properties for configuring browser connections in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connectoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConnectOptions\n```\n\n----------------------------------------\n\nTITLE: Implementing WebWorker.evaluate Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the evaluate method signature for WebWorker class. The method accepts a function or string to evaluate and variable parameters, returning a promise of the function's result. It uses generic types for type safety of parameters and return values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.evaluate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebWorker {\n  evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(func: Func | string, ...args: Params): Promise<Awaited<ReturnType<Func>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining defaultArgs Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the defaultArgs function that accepts optional PuppeteerCore.LaunchOptions and returns an array of strings representing Chrome command line arguments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.defaultargs.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultArgs: (options?: PuppeteerCore.LaunchOptions) => string[]\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotOptions Interface in Puppeteer (TypeScript)\nDESCRIPTION: This snippet defines the SnapshotOptions interface in TypeScript, which configures how accessibility tree snapshots are created in Puppeteer. The interface includes optional boolean properties 'includeIframes' (whether to include accessibility trees from iframes) and 'interestingOnly' (whether to prune uninteresting nodes), plus an optional 'root' parameter specifying the root node (of type ElementHandle<Node>) for the tree snapshot. Expected inputs are configuration objects matching this interface, and using it requires Puppeteer with compatible TypeScript types; the snippet is intended as a type definition and does not execute by itself.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.snapshotoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SnapshotOptions\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Emulation with KnownDevices in Puppeteer\nDESCRIPTION: Demonstrates how to use the KnownDevices variable to emulate an iPhone 15 Pro device in a Puppeteer session. The example imports KnownDevices, selects a specific device profile, and uses it with the page.emulate() method.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.knowndevices.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {KnownDevices} from 'puppeteer';\nconst iPhone = KnownDevices['iPhone 15 Pro'];\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.emulate(iPhone);\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining PDFMargin Interface in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the PDFMargin interface used in Puppeteer for specifying PDF margins. It includes optional properties for top, bottom, left, and right margins, each accepting either a string or number value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.pdfmargin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PDFMargin {\n  bottom?: string | number;\n  left?: string | number;\n  right?: string | number;\n  top?: string | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Custom Query Handler in Puppeteer (TypeScript)\nDESCRIPTION: This code snippet shows the signature of the unregisterCustomQueryHandler static method in the Puppeteer class. It takes a string parameter 'name' and returns void, used to unregister a custom query handler for a given name.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.unregistercustomqueryhandler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Puppeteer {\n  static unregisterCustomQueryHandler(name: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring TimeoutError Class Extending PuppeteerError in TypeScript\nDESCRIPTION: This TypeScript code snippet declares the TimeoutError class, which extends the custom PuppeteerError base class. It is designed to be thrown when specific Puppeteer operations, like page.waitForSelector or puppeteer.launch, exceed their allotted timeout period. This class requires the PuppeteerError class to be available in the module scope and does not directly define additional methods or properties in this declaration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.timeouterror.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TimeoutError extends PuppeteerError\n```\n\n----------------------------------------\n\nTITLE: Defining AutofillData Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for AutofillData that contains credit card information structure. The interface is used for automating form filling with credit card details including card number, name, expiry date, and CVC.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.autofilldata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AutofillData\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserTag Enum in TypeScript for Puppeteer\nDESCRIPTION: This code snippet declares the BrowserTag enum, which contains various release channels for browsers. It includes options like beta, canary, dev, stable, and others. This enum is exported for use in other parts of the Puppeteer library.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.browsertag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum BrowserTag\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.tap Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the ElementHandle.tap() method, which returns a Promise that resolves to void. This method taps an element by scrolling it into view if needed and then using Touchscreen.tap() to tap in the center of the element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.tap.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  tap(this: ElementHandle<Element>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserPlatform Enum in TypeScript\nDESCRIPTION: Declaration of the BrowserPlatform enum which defines platform identifiers for browser downloads in Puppeteer. The enum contains values for various operating systems and architectures including Linux, Linux ARM, Mac, Mac ARM, Windows 32-bit, and Windows 64-bit.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.browserplatform.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum BrowserPlatform\n```\n\n----------------------------------------\n\nTITLE: Defining WaitForTargetOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the WaitForTargetOptions interface in TypeScript. It includes two optional properties: 'signal' of type AbortSignal for cancelling a waitFor call, and 'timeout' of type number for setting the maximum wait time in milliseconds.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waitfortargetoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WaitForTargetOptions\n```\n\n----------------------------------------\n\nTITLE: Defining MouseClickOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the MouseClickOptions interface, which extends MouseOptions. It includes two optional properties: count for specifying the number of clicks, and delay for setting a delay between mouse press and release.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.mouseclickoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MouseClickOptions extends MouseOptions\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.dragEnter Method Signature in Typescript\nDESCRIPTION: Type definition for the deprecated dragEnter method of ElementHandle class. The method accepts an optional DragData parameter and returns a Promise<void>. This API is marked as obsolete as dragenter events are now automatically handled during drag operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.dragenter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  dragEnter(\n    this: ElementHandle<Element>,\n    data?: Protocol.Input.DragData,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: getInstalledBrowsers Function Definition in TypeScript\nDESCRIPTION: Function declaration for getInstalledBrowsers which returns a Promise containing an array of InstalledBrowser objects. It takes a GetInstalledBrowsersOptions parameter and provides metadata about browsers installed in the cache directory.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.getinstalledbrowsers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getInstalledBrowsers(\n  options: GetInstalledBrowsersOptions,\n): Promise<InstalledBrowser[]>;\n```\n\n----------------------------------------\n\nTITLE: Implementing readMetadata Method in InstalledBrowser Class (TypeScript)\nDESCRIPTION: Definition of the readMetadata method within the InstalledBrowser class that returns Metadata. This method is used to retrieve metadata associated with an installed browser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/browsers.installedbrowser.readmetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass InstalledBrowser {\n  readMetadata(): Metadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HandleFor Conditional Type in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the HandleFor type, which returns ElementHandle<T> if T extends Node, otherwise JSHandle<T>. It's used to provide type-safe handle references in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.handlefor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HandleFor<T> = T extends Node ? ElementHandle<T> : JSHandle<T>;\n```\n\n----------------------------------------\n\nTITLE: Defining the Page.cookies() Method Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the Page.cookies() method in Puppeteer. It is defined as an abstract method in the Page class that accepts variable URL parameters and returns a Promise of Cookie arrays.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract cookies(...urls: string[]): Promise<Cookie[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlattenHandle Generic Type in TypeScript\nDESCRIPTION: A TypeScript utility type that extracts the underlying type U from a HandleOr<U> type. If T extends HandleOr<U>, it returns U, otherwise never. This is used for type inference in Puppeteer's handle system.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.flattenhandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FlattenHandle<T> = T extends HandleOr<infer U> ? U : never;\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to waitForFunction in Puppeteer\nDESCRIPTION: Example showing how to pass Node.js variables as arguments to the waitForFunction predicate in Puppeteer. This pattern allows referencing external variables like selectors inside the browser context function.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.frame.waitforfunction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst selector = '.foo';\nawait frame.waitForFunction(\n  selector => !!document.querySelector(selector),\n  {}, // empty options object\n  selector,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserContext.overridePermissions Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the overridePermissions method in the BrowserContext class. It takes an origin string and an array of Permission objects as parameters, and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.overridepermissions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract overridePermissions(\n    origin: string,\n    permissions: Permission[],\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Page.waitForResponse Method Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the waitForResponse method in the Page class. It accepts a URL string or predicate function and optional timeout options, returning a Promise that resolves to an HTTPResponse.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforresponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  waitForResponse(\n    urlOrPredicate: string | AwaitablePredicate<HTTPResponse>,\n    options?: WaitTimeoutOptions,\n  ): Promise<HTTPResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CLI.run Method in TypeScript\nDESCRIPTION: Method signature for the CLI.run() method that takes an array of string arguments and returns a Promise resolving to void. This is likely used for processing command line arguments in Puppeteer's CLI interface.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli.run.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CLI {\n  run(argv: string[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Locator with Selector in Puppeteer (TypeScript)\nDESCRIPTION: This snippet shows the signature for creating a locator using a selector string. It returns a Locator object that can be used for various page interactions.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.locator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  locator<Selector extends string>(\n    selector: Selector,\n  ): Locator<NodeFor<Selector>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page.goBack() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the Page.goBack() method. It's an abstract method in the Page class that takes optional WaitForOptions and returns a Promise resolving to an HTTPResponse or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.goback.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract goBack(options?: WaitForOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle.dispose Method in TypeScript\nDESCRIPTION: This code snippet defines the dispose() method in the JSHandle class. The method is abstract and returns a Promise<void>. It is used to release the object referenced by the handle for garbage collection.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.dispose.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract dispose(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Protractor Test for Migration Reference\nDESCRIPTION: TypeScript code showing a sample Protractor test for calculator functionality, provided as a reference for migration to Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('Protractor Demo', function () {\n  it('should add one and two', function () {\n    browser.get('https://juliemr.github.io/protractor-demo/');\n    element(by.model('first')).sendKeys(1);\n    element(by.model('second')).sendKeys(2);\n\n    element(by.id('gobutton')).click();\n\n    expect(element(by.binding('latest')).getText()).toEqual('3');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Connection.dispose() Method Signature in TypeScript\nDESCRIPTION: The signature of the dispose() method in the Connection class. This method cleans up resources when a connection is no longer needed and returns void, indicating it doesn't return any value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connection.dispose.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  dispose(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Unpacking Browser Archive in Puppeteer (TypeScript)\nDESCRIPTION: This function downloads and unpacks a browser archive according to the provided InstallOptions. It returns a Promise that resolves to an InstalledBrowser instance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.install.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function install(\n  options: InstallOptions & {\n    unpack?: true;\n  },\n): Promise<InstalledBrowser>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Query Handler Names in Puppeteer TypeScript\nDESCRIPTION: Static method that returns an array of strings containing the names of all registered custom query handlers in Puppeteer. The method requires no parameters and returns a string array.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.customqueryhandlernames.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Puppeteer {\n  static customQueryHandlerNames(): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatting for Puppeteer CHANGELOG\nDESCRIPTION: Example markdown formatting for creating version headers in the Puppeteer package CHANGELOG, showing the required format with version numbers and comparison links.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/v{PREVIOUS_VERSION}...v{NEW_VERSION}) ({CURRENT_DATE})`\n```\n\n----------------------------------------\n\nTITLE: Defining UnsupportedOperation Error Class in TypeScript - Puppeteer\nDESCRIPTION: TypeScript class declaration for UnsupportedOperation error that extends PuppeteerError. This class is thrown when attempting to execute operations not supported by the current protocol version or implementation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.unsupportedoperation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class UnsupportedOperation extends PuppeteerError\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setDragInterception Method in TypeScript\nDESCRIPTION: This code snippet defines the setDragInterception method in the Page class. The method takes a boolean parameter to enable or disable drag interception and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setdraginterception.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setDragInterception(enabled: boolean): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browser.userAgent Method in TypeScript\nDESCRIPTION: TypeScript declaration for the Browser.userAgent() method which returns a Promise resolving to a string containing the browser's original user agent. This method is declared as abstract in the Browser class.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.useragent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  abstract userAgent(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QueryOptions Interface in TypeScript for Puppeteer\nDESCRIPTION: This snippet defines the QueryOptions interface used in Puppeteer for configuring element queries. It includes a single property 'isolate' which determines whether the query should run in isolation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.queryoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QueryOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ContinueRequestOverrides Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface definition for ContinueRequestOverrides, which is used to modify properties of intercepted HTTP requests in Puppeteer. It contains optional properties for customizing headers, method, postData, and URL.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.continuerequestoverrides.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ContinueRequestOverrides\n```\n\n----------------------------------------\n\nTITLE: Updating Base URL in E2E Test Utilities\nDESCRIPTION: TypeScript code to update the baseUrl in the E2E test utilities file to match the custom port configured in angular.json.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseUrl = 'http://localhost:8080';\n```\n\n----------------------------------------\n\nTITLE: Initializing Progress Callback Function in Puppeteer TypeScript\nDESCRIPTION: Function signature for creating a progress callback that monitors download progress. Takes a Browser instance and buildId string as parameters and returns a callback function that receives downloadedBytes and totalBytes as numbers.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.makeprogresscallback.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function makeProgressCallback(\n  browser: Browser,\n  buildId: string,\n): (downloadedBytes: number, totalBytes: number) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining JSHandle.jsonValue Method in TypeScript\nDESCRIPTION: This code snippet defines the jsonValue() method in the JSHandle class. It returns a Promise that resolves to a serializable representation of the referenced object.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.jsonvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  abstract jsonValue(): Promise<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkConditions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for NetworkConditions that allows configuring network simulation parameters. Includes properties for download speed (bytes/s), upload speed (bytes/s), and latency (ms).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.networkconditions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NetworkConditions\n```\n\n----------------------------------------\n\nTITLE: Locator Class Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the Locator abstract class which extends EventEmitter with LocatorEvents generic type. It serves as the base class for all locator implementations in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Locator<T> extends EventEmitter<LocatorEvents>\n```\n\n----------------------------------------\n\nTITLE: Defining Page.deleteCookie() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.deleteCookie() method. It takes an array of DeleteCookiesRequest objects as parameters and returns a Promise<void>.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.deletecookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract deleteCookie(...cookies: DeleteCookiesRequest[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing and Listing Installed Browsers\nDESCRIPTION: Demonstrates how to clear all installed browsers and list all currently installed browsers using the @puppeteer/browsers CLI.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/browsers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @puppeteer/browsers clear\nnpx @puppeteer/browsers list\n```\n\n----------------------------------------\n\nTITLE: Defining Process.kill() Method in TypeScript for Puppeteer\nDESCRIPTION: This code snippet defines the kill() method for the Process class in Puppeteer. The method is used to terminate a process and doesn't take any parameters or return any value.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.kill.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  kill(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cookie Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Cookie object in Puppeteer. It extends the CookieData interface and represents a browser cookie with all its associated properties.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Cookie extends CookieData\n```\n\n----------------------------------------\n\nTITLE: Connection.dispose Method Signature in TypeScript\nDESCRIPTION: The method signature for dispose in the Connection class, which is used to clean up resources. The method takes no parameters and returns void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.dispose.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection {\n  dispose(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Coverage Class Signature Definition in TypeScript\nDESCRIPTION: The TypeScript declaration for the Coverage class in Puppeteer, which provides methods to gather information about JS and CSS usage.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Coverage\n```\n\n----------------------------------------\n\nTITLE: Defining FrameEvents Interface in TypeScript\nDESCRIPTION: Defines the FrameEvents interface which extends Record<EventType, unknown>. This interface is used to type frame-related events in the Puppeteer framework.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frameevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FrameEvents extends Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer Angular Schematic with ng add\nDESCRIPTION: Command to add Puppeteer Angular Schematic to an existing Angular project using the Angular CLI. This will install the schematic as a project dependency.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add @puppeteer/ng-schematics\n```\n\n----------------------------------------\n\nTITLE: Running Individual Puppeteer Example\nDESCRIPTION: This command demonstrates how to run a specific Puppeteer example (search.js) with the correct Node.js path configuration.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/examples/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNODE_PATH=../ node examples/search.js\n```\n\n----------------------------------------\n\nTITLE: Starting dbus Service in Docker Container\nDESCRIPTION: Command to start the dbus service in the Docker container before launching a Puppeteer application. This helps prevent warnings in the browser console when running in headless mode.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/docker.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo service dbus start\n```\n\n----------------------------------------\n\nTITLE: Defining Page.setCookie() Method in TypeScript\nDESCRIPTION: TypeScript class definition for the Page.setCookie() method which accepts cookie parameters and returns a Promise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setcookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setCookie(...cookies: CookieParam[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Fetch.requestPaused Events in JavaScript\nDESCRIPTION: Improves handling of multiple or duplicate Fetch.requestPaused events to address issues #7475, #6696, and #7225.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Enhanced handling of Fetch.requestPaused events\n// Specific code changes not provided in the release notes\n```\n\n----------------------------------------\n\nTITLE: Importing Puppeteer-core in TypeScript\nDESCRIPTION: Example of importing the puppeteer-core package when working with remote browsers or managing browsers manually.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer-core';\n```\n\n----------------------------------------\n\nTITLE: Building Puppeteer for Examples\nDESCRIPTION: This command builds a version of Puppeteer specifically for use with the provided examples.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Fixing Types in Browser.ts for Strict Mode TypeScript\nDESCRIPTION: Modifies types in Browser.ts to be compatible with strict mode TypeScript, addressing issue #6769.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Modified types in Browser.ts\n// Specific code changes not provided in the release notes\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome Headless Shell in Puppeteer\nDESCRIPTION: Shows how to launch the chrome-headless-shell version which offers better performance for automation tasks but with limited Chrome features.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/headless-modes.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({headless: 'shell'});\n```\n\n----------------------------------------\n\nTITLE: Dependencies Update - puppeteer-core Version Bump\nDESCRIPTION: Workspace dependency update bumping puppeteer-core package version from 20.0.0 to 20.1.0\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- The following workspace dependencies were updated\n  - dependencies\n    - puppeteer-core bumped from 20.0.0 to 20.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Page.getDefaultNavigationTimeout Method in TypeScript\nDESCRIPTION: This code snippet defines the getDefaultNavigationTimeout() method in the Page class. The method returns the maximum navigation time in milliseconds as a number.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.getdefaultnavigationtimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract getDefaultNavigationTimeout(): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer Cache Directory in JavaScript\nDESCRIPTION: Creates a Puppeteer configuration file to set a custom cache directory.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {join} = require('path');\n\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Navigation Timeout in Puppeteer TypeScript\nDESCRIPTION: Abstract class method definition for setting the default navigation timeout for page operations in Puppeteer. The method takes a timeout parameter in milliseconds and applies it to all navigation-related operations.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setdefaultnavigationtimeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract setDefaultNavigationTimeout(timeout: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Suite in Bash\nDESCRIPTION: Command to run a specific test suite (chrome-headless) using the --test-suite argument.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run test -- --test-suite chrome-headless\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserLauncher Abstract Class in TypeScript\nDESCRIPTION: Declaration of the abstract BrowserLauncher class that serves as a base for browser instance creation and management. This class is marked as internal and should not be instantiated or extended by third-party code.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserlauncher.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class BrowserLauncher\n```\n\n----------------------------------------\n\nTITLE: Process.waitForLineOutput Method Signature in TypeScript\nDESCRIPTION: Method signature for waiting for line output that matches a regular expression pattern. Takes a required RegExp parameter and an optional timeout parameter, returning a Promise that resolves to the matched string.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.waitforlineoutput.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Process {\n  waitForLineOutput(regex: RegExp, timeout?: number): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Dynamic Imports in JavaScript\nDESCRIPTION: This code snippet implements caching for dynamic imports to improve performance.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ncache dynamic imports\n```\n\n----------------------------------------\n\nTITLE: Cleaning Artifacts\nDESCRIPTION: Commands for removing stale generated artifacts from the project.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run clean\n# or specify the package\nnpm run clean --workspace <package>\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command for running unit tests using Node test runner (requires Node 20+)\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/contributing.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run unit\n```\n\n----------------------------------------\n\nTITLE: Defining Locator Clone Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the clone() method signature for the Locator class. The method returns a new Locator instance of the same type T.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locator.clone.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  clone(): Locator<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame.addScriptTag Method in TypeScript\nDESCRIPTION: Defines the addScriptTag method signature in the Frame class. The method accepts FrameAddScriptTagOptions and returns a Promise resolving to an ElementHandle of the injected script element.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.addscripttag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  addScriptTag(\n    options: FrameAddScriptTagOptions,\n  ): Promise<ElementHandle<HTMLScriptElement>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the PDFMargin Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `PDFMargin` interface. It specifies optional properties `top`, `bottom`, `left`, and `right` which accept either a string (e.g., '1cm', '1in') or a number (interpreted as pixels) to set the margins for PDF generation in Puppeteer. These properties control the spacing between the page content and the edges of the generated PDF document.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.pdfmargin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PDFMargin\n```\n\n----------------------------------------\n\nTITLE: Using overridePermissions to Grant Geolocation Permission in Puppeteer\nDESCRIPTION: An example showing how to override permissions in the default browser context. This snippet demonstrates granting geolocation permission to a specific website.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.overridepermissions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst context = browser.defaultBrowserContext();\nawait context.overridePermissions('https://html5demos.com', ['geolocation']);\n```\n\n----------------------------------------\n\nTITLE: Fixing Page Scroll Into View Method in JavaScript\nDESCRIPTION: This code snippet fixes the page.#scrollIntoViewIfNeeded method to correctly scroll elements into view.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfix page.#scrollIntoViewIfNeeded method\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserEvent Enum in TypeScript for Puppeteer\nDESCRIPTION: Declaration of the BrowserEvent enum which defines all events that a browser instance may emit, including disconnected, targetchanged, targetcreated, and targetdestroyed events.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare const enum BrowserEvent\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU in Chrome Headless Shell\nDESCRIPTION: Configuration to enable GPU acceleration when using chrome-headless-shell.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst browser = await puppeteer.launch({\n  headless: 'shell',\n  args: ['--enable-gpu'],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pages from BrowserContext in TypeScript\nDESCRIPTION: Abstract method definition for retrieving all open pages within a browser context. Returns a Promise that resolves to an array of Page objects. Non-visible pages like background_page are not included in the results.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browsercontext.pages.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserContext {\n  abstract pages(): Promise<Page[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an ElementHandle in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an ElementHandle using Page.$() and interact with it. It shows launching a browser, creating a page, navigating to a URL, selecting an element, and clicking it.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  const hrefElement = await page.$('a');\n  await hrefElement.click();\n  // ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Page.waitForRequest Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the Page.waitForRequest method in TypeScript. It shows waiting for a specific URL and using a predicate function to match a request, then checking if the response was successful.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforrequest.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstRequest = await page.waitForRequest('https://example.com/resource');\nconst finalRequest = await page.waitForRequest(\n  request => request.url() === 'https://example.com',\n);\nreturn finalRequest.response()?.ok();\n```\n\n----------------------------------------\n\nTITLE: Defining Page.goForward() Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Page.goForward() method. It takes an optional WaitForOptions parameter and returns a Promise that resolves to an HTTPResponse or null.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.goforward.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract goForward(options?: WaitForOptions): Promise<HTTPResponse | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.autofill for Credit Card Form in Puppeteer\nDESCRIPTION: This example demonstrates how to use the autofill method to fill a credit card form. It selects an input field, then calls autofill with credit card information. This functionality is currently supported only in Chrome (new headless and headful modes).\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.elementhandle.autofill.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Select an input on the credit card form.\nconst name = await page.waitForSelector('form #name');\n// Trigger autofill with the desired data.\nawait name.autofill({\n  creditCard: {\n    number: '4444444444444444',\n    name: 'John Smith',\n    expiryMonth: '01',\n    expiryYear: '2030',\n    cvc: '123',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Promise Evaluation in Puppeteer\nDESCRIPTION: Demonstrates how Puppeteer automatically handles promises returned from evaluate calls, waiting for their resolution before continuing execution.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.evaluate(() => {\n  // wait for 100ms.\n  return new Promise(resolve => setTimeout(resolve, 100));\n});\n// Execution continues here once the Promise created in the page context resolves.\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser.isConnected Method in TypeScript\nDESCRIPTION: Definition of the isConnected() method in the Browser class, which returns a boolean value indicating whether Puppeteer is connected to the browser instance. This method is now deprecated and users should use the Browser.connected property instead.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.isconnected.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  isConnected(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Alpine-based Dockerfile for Puppeteer\nDESCRIPTION: Dockerfile configuration for running Puppeteer on Alpine Linux with Chromium browser.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/troubleshooting.md#2025-04-22_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\n\nRUN apk add --no-cache \\\n      chromium \\\n      nss \\\n      freetype \\\n      harfbuzz \\\n      ca-certificates \\\n      ttf-freefont \\\n      nodejs \\\n      yarn\n\nENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser\n\nRUN yarn add puppeteer@13.5.0\n\nRUN addgroup -S pptruser && adduser -S -G pptruser pptruser \\\n    && mkdir -p /home/pptruser/Downloads /app \\\n    && chown -R pptruser:pptruser /home/pptruser \\\n    && chown -R pptruser:pptruser /app\n\nUSER pptruser\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.headers() Method in TypeScript\nDESCRIPTION: This code snippet defines the abstract headers() method in the HTTPResponse class. The method returns an object containing HTTP headers associated with the response, where all header names are in lower-case.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.headers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract headers(): Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceType Type in TypeScript\nDESCRIPTION: Defines a TypeScript type alias that represents HTTP resource types. It uses the Protocol.Network.ResourceType type and converts it to lowercase for consistency.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.resourcetype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResourceType = Lowercase<Protocol.Network.ResourceType>;\n```\n\n----------------------------------------\n\nTITLE: Initializing CSSCoverage Class in Puppeteer (TypeScript)\nDESCRIPTION: The constructor for the CSSCoverage class in Puppeteer. It takes a CDPSession object as a parameter. This class is likely used for measuring CSS coverage in web pages during Puppeteer automation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverage._constructor_.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CSSCoverage {\n  constructor(client: CDPSession);\n}\n```\n\n----------------------------------------\n\nTITLE: Migrated Puppeteer Test from Protractor\nDESCRIPTION: TypeScript code demonstrating how to migrate a Protractor test to Puppeteer. This example shows the equivalent implementation of the calculator test using Puppeteer's API.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/ng-schematics.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {setupBrowserHooks, getBrowserState} from './utils';\n\ndescribe('Puppeteer Demo', function () {\n  setupBrowserHooks();\n  it('should add one and two', function () {\n    const {page} = getBrowserState();\n    await page.goto('https://juliemr.github.io/protractor-demo/');\n\n    await page.locator('.form-inline > input:nth-child(1)').fill('1');\n    await page.locator('.form-inline > input:nth-child(2)').fill('2');\n    await page.locator('#gobutton').fill('2');\n\n    const result = await page\n      .locator('.table tbody td:last-of-type')\n      .map(header => header.innerText)\n      .wait();\n\n    expect(result).toEqual('3');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring TargetType Enum in TypeScript\nDESCRIPTION: This TypeScript code snippet declares the `TargetType` enum. This enum is used within Puppeteer to categorize the different types of targets that can be discovered and interacted with, such as pages, service workers, background pages, shared workers, webviews, the browser itself, or other types.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.targettype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum TargetType\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandle.touchMove Method in TypeScript\nDESCRIPTION: Method signature for touchMove() that handles touch movement on an element. The method scrolls the element into view if needed and moves the touch point to the element's center. It accepts an optional TouchHandle parameter and returns a Promise.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.touchmove.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  touchMove(this: ElementHandle<Element>, touch?: TouchHandle): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Coverage.stopCSSCoverage method in Puppeteer with TypeScript\nDESCRIPTION: Method signature for Coverage.stopCSSCoverage() which returns a Promise resolving to an array of CSS coverage reports. This method is used to stop CSS coverage measurement and retrieve coverage data.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.stopcsscoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Coverage {\n  stopCSSCoverage(): Promise<CoverageEntry[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TouchHandle.end() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the end() method for the TouchHandle interface. The method returns a Promise that resolves to void, indicating the completion of the touchend event dispatch.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchhandle.end.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TouchHandle {\n  end(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Frame.waitForFunction Method in TypeScript\nDESCRIPTION: TypeScript class definition for the Frame.waitForFunction method, which allows waiting for a function to evaluate to a truthy value in the frame context. The method accepts a function or string to evaluate, optional configuration, and additional arguments.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforfunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  waitForFunction<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    options?: FrameWaitForFunctionOptions,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ExtensionTransport.send Method in TypeScript\nDESCRIPTION: Method signature for the send() method of the ExtensionTransport class which handles sending string messages. The method accepts a single string parameter named 'message' and returns void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.extensiontransport.send.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExtensionTransport {\n  send(message: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: DOM Traversal Conditional Logic\nDESCRIPTION: Fix for node comparison logic when currentNode and root are the same in version 14.1.0\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nif (currentNode === root) {\n  // Do not include in result\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Touchscreen.touchMove Method in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the touchMove method of the Touchscreen class. The method takes x and y coordinates as parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.touchmove.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Touchscreen {\n  touchMove(x: number, y: number): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPResponse.remoteAddress() Method in TypeScript\nDESCRIPTION: This code snippet defines the remoteAddress() method in the HTTPResponse class. The method returns a RemoteAddress object, which represents the IP address and port number used to connect to the remote server.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httpresponse.remoteaddress.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPResponse {\n  abstract remoteAddress(): RemoteAddress;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionTransport Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ConnectionTransport in Puppeteer. This interface specifies the contract for transport layers used for communication in Puppeteer.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.connectiontransport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConnectionTransport\n```\n\n----------------------------------------\n\nTITLE: Using Puppeteer for Browser Automation in TypeScript\nDESCRIPTION: Example of using Puppeteer to launch a browser, create a new page, navigate to a URL, and perform actions. This demonstrates the typical usage of PuppeteerNode in a Node.js environment.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://www.google.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to evaluate Function in Puppeteer\nDESCRIPTION: Shows how to pass arguments to the function being evaluated in the page context. Arguments can be primitive values or JSHandle references.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/javascript-execution.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst three = await page.evaluate(\n  (a, b) => {\n    return a + b; // 1 + 2\n  },\n  1,\n  2,\n);\n```\n\n----------------------------------------\n\nTITLE: Synchronous Request Interception Handlers\nDESCRIPTION: Shows how multiple synchronous request handlers can work together safely by checking the interception resolution status before attempting to handle the request.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npage.on('request', interceptedRequest => {\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n  interceptedRequest.continue();\n});\n\npage.on('request', interceptedRequest => {\n  if (interceptedRequest.isInterceptResolutionHandled()) return;\n  interceptedRequest.abort();\n});\n```\n\n----------------------------------------\n\nTITLE: ElementHandle.$$ Method Signature in TypeScript\nDESCRIPTION: This code defines the signature of the $$ method in the ElementHandle class. The method queries the current element for all elements matching the given selector and returns an array of ElementHandle objects.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.__.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElementHandle {\n  $$<Selector extends string>(\n    selector: Selector,\n    options?: QueryOptions,\n  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for viewport size change with Puppeteer's waitForFunction\nDESCRIPTION: This example demonstrates how Page.waitForFunction can be used to observe a viewport size change. It creates a watchdog that resolves when the window inner width becomes less than 100 pixels.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  const watchDog = page.waitForFunction('window.innerWidth < 100');\n  await page.setViewport({width: 50, height: 50});\n  await watchDog;\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Browser Installation Examples\nDESCRIPTION: Various examples showing how to install specific browser versions and drivers using the CLI.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/browsers-api/index.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Download the latest available Chrome for Testing binary corresponding to the Stable channel.\nnpx @puppeteer/browsers install chrome@stable\n\n# Download a specific Chrome for Testing version.\nnpx @puppeteer/browsers install chrome@116.0.5793.0\n\n# Download the latest Chrome for Testing version for the given milestone.\nnpx @puppeteer/browsers install chrome@117\n\n# Download the latest available ChromeDriver version corresponding to the Canary channel.\nnpx @puppeteer/browsers install chromedriver@canary\n\n# Download a specific ChromeDriver version.\nnpx @puppeteer/browsers install chromedriver@116.0.5793.0\n\n# On Ubuntu/Debian and only for Chrome, install the browser and required system dependencies.\n# If the browser version has already been installed, the command\n# will still attempt to install system dependencies.\n# Requires root privileges.\nnpx puppeteer browsers install chrome --install-deps\n```\n\n----------------------------------------\n\nTITLE: Declaring isJavaScriptEnabled Method in Page Class (TypeScript)\nDESCRIPTION: This snippet defines the isJavaScriptEnabled method in the Page class. It returns a boolean value indicating whether JavaScript is enabled on the page. The method is declared as abstract, suggesting it should be implemented by subclasses.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.isjavascriptenabled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  abstract isJavaScriptEnabled(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Credentials Interface in TypeScript for Puppeteer\nDESCRIPTION: TypeScript interface declaration for Credentials in Puppeteer. This interface defines the structure for authentication credentials with username and password properties, which are both strings.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Credentials\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest.failure Method in TypeScript\nDESCRIPTION: Abstract class definition showing the signature of the failure() method which returns either null or an object containing error text for failed requests.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.httprequest.failure.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HTTPRequest {\n  abstract failure(): {\n    errorText: string;\n  } | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSHandle.evaluateHandle Method in TypeScript\nDESCRIPTION: TypeScript class definition showing the evaluateHandle method signature in the JSHandle class. The method evaluates a given function with the current handle as its first argument and returns a Promise of a HandleFor type containing the function's result.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.jshandle.evaluatehandle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JSHandle {\n  evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.$eval to Extract Text Content from Elements\nDESCRIPTION: Example demonstrating how to use ElementHandle.$eval to extract text content from nested elements within a tweet element. The example queries for elements with .like and .retweets classes and retrieves their innerText values.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle._eval.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tweetHandle = await page.$('.tweet');\nexpect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\nexpect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n```\n\n----------------------------------------\n\nTITLE: Defining Viewport Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Viewport configuration in Puppeteer. Includes properties for controlling viewport dimensions, device scale factor, touch support, mobile emulation, and orientation.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.viewport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Viewport\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshot as Uint8Array in Puppeteer\nDESCRIPTION: This overload of the screenshot method captures a screenshot of a page and returns it as a Uint8Array. It optionally takes screenshot options to configure the behavior.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.screenshot.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Page {\n  screenshot(options?: Readonly<ScreenshotOptions>): Promise<Uint8Array>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Locator.fill() Method in Puppeteer\nDESCRIPTION: This code snippet shows the TypeScript signature for the Locator.fill() method in Puppeteer. The method accepts a value string to fill into the element and optional action options. It works with contenteditable elements, select dropdowns, textareas, and input fields.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.fill.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Locator {\n  fill<ElementType extends Element>(\n    this: Locator<ElementType>,\n    value: string,\n    options?: Readonly<ActionOptions>,\n  ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocatorEvents Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for LocatorEvents that extends Record<EventType, unknown>. The interface defines event handling types for Puppeteer locators.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.locatorevents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LocatorEvents extends Record<EventType, unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining the ScreenshotOptions Interface in TypeScript\nDESCRIPTION: This TypeScript interface declaration defines the structure for the options object passed to Puppeteer's screenshot methods. It specifies optional properties like `path` for saving the image, `type` for image format ('png', 'jpeg', 'webp'), `quality` for lossy formats, `fullPage` for capturing the entire scrollable page, `clip` for a specific region, `encoding` ('binary' or 'base64'), and several others to fine-tune the screenshot process.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.screenshotoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface ScreenshotOptions\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Frame.parentFrame() Method in TypeScript\nDESCRIPTION: This code snippet defines the parentFrame() method in the Frame class. The method returns the parent frame of the current frame, or null for detached and main frames.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.parentframe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Frame {\n  abstract parentFrame(): Frame | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cooperative Intercept Mode with Continue Winning in Puppeteer\nDESCRIPTION: This example shows Cooperative Intercept Mode in action where all handlers specify a priority. The continue() operation wins due to its higher priority.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/guides/network-interception.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Final outcome: cooperative continue() @ 5\npage.setRequestInterception(true);\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to abort at priority 10\n  request.abort('failed', 0);\n});\npage.on('request', request => {\n  if (request.isInterceptResolutionHandled()) return;\n\n  // Cooperative Intercept Mode: votes to continue at priority 5\n  request.continue(request.continueRequestOverrides(), 5);\n});\npage.on('request', request => {\n  // { action: InterceptResolutionAction.Continue, priority: 5 }, because continue @ 5 > abort @ 0\n  console.log(request.interceptResolutionState());\n});\n```\n\n----------------------------------------\n\nTITLE: Aborting Image Requests Using Request Interception in Puppeteer (TypeScript)\nDESCRIPTION: This example demonstrates how to enable network request interception in Puppeteer and configure an event handler to abort all HTTP requests for .png and .jpg images while continuing all others. It imports the puppeteer dependency, creates a browser and page, sets up interception, listens for 'request' events, and finally performs navigation and cleanup. Key parameters include the interception flag (value: true) and event logic for filtering requests based on file extensions. Inputs are URLs being loaded on the page; as outputs, image requests are blocked and other requests continue. The approach is limited to naïve file extension filtering and assumes a trusted execution context.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.page.setrequestinterception.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport puppeteer from 'puppeteer';\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.setRequestInterception(true);\n  page.on('request', interceptedRequest => {\n    if (\n      interceptedRequest.url().endsWith('.png') ||\n      interceptedRequest.url().endsWith('.jpg')\n    )\n      interceptedRequest.abort();\n    else interceptedRequest.continue();\n  });\n  await page.goto('https://example.com');\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Browser.deleteCookie Method Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the Browser.deleteCookie method that removes cookies from the default BrowserContext. The method accepts multiple Cookie objects as parameters and returns a Promise that resolves to void.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.7.0/api/puppeteer.browser.deletecookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Browser {\n  deleteCookie(...cookies: Cookie[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: File Selection Example with FileChooser\nDESCRIPTION: Example showing how to wait for a file chooser dialog and select a file. Uses Promise.all to handle both waiting for the file chooser and triggering the file selection dialog.\nSOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [fileChooser] = await Promise.all([\n  page.waitForFileChooser(),\n  page.click('#upload-file-button'), // some button that triggers file selection\n]);\nawait fileChooser.accept(['/tmp/myfile.pdf']);\n```"
  }
]