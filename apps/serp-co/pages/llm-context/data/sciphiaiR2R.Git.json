[
  {
    "owner": "sciphi-ai",
    "repo": "r2r.git",
    "content": "TITLE: Executing a RAG Query with R2R using JavaScript\nDESCRIPTION: Performs a Retrieval-Augmented Generation (RAG) query using the R2R client's `rag` method. It combines retrieval (vector search, hybrid search, KG search based on flags) with generation using a specified model (`gpt-4o`) to answer the query based on the retrieved context. Various parameters control the search and generation behavior.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/sdk/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ragResult = await client.rag({\n  query: \"Who was Raskolnikov?\",\n  use_vector_search: true,\n  filters: {},\n  search_limit: 10,\n  use_hybrid_search: false,\n  use_kg_search: false,\n  kg_generation_config: {},\n  rag_generation_config: {\n    model: \"gpt-4o\",\n    temperature: 0.0,\n    stream: false,\n  },\n});\nconsole.log(ragResult);\n```\n\n----------------------------------------\n\nTITLE: Querying Using Retrieval-Augmented Generation via SciPhi R2R Client in Python\nDESCRIPTION: This code snippet demonstrates how to perform a retrieval-augmented generation (RAG) query using the SciPhi R2R API client. It assumes you have an initialized client and at least one ingested document. The 'query' parameter specifies the user's question and the function returns a response with results including a completion field that is printed. This workflow supports real-time querying of the ingested knowledge base for contextual, generated answers.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/hello_r2r.ipynb#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nprint(\"Performing RAG...\")\nrag_response = client.retrieval.rag(\n    query=\"What is the nature of the soul?\",\n)\n\nprint(rag_response[\"results\"][\"completion\"])\n```\n\n----------------------------------------\n\nTITLE: Streaming a RAG Response from R2R using JavaScript\nDESCRIPTION: Executes a RAG query similar to the standard RAG example, but sets `stream: true` in the `rag_generation_config`. This causes the `rag` method to return a `ReadableStream`. The code then demonstrates how to read chunks from the stream asynchronously and decode them to display the response as it arrives.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/sdk/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst streamingRagResult = await client.rag({\n  query: \"Who was Raskolnikov?\",\n  rag_generation_config: {\n    stream: true,\n  },\n});\n\nif (streamingRagResult instanceof ReadableStream) {\n  const reader = streamingRagResult.getReader();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    console.log(new TextDecoder().decode(value));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching R2R using Python\nDESCRIPTION: This snippet demonstrates how to perform basic search, Retrieval-Augmented Generation (RAG), and Deep Research RAG agent operations using the R2R Python client.  It requires the `r2r` library to be installed and a client to be initialized. The parameters are determined by the function. The output is the result of the retrieval and generation process.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Basic search\nresults = client.retrieval.search(query=\"What is DeepSeek R1?\")\n\n# RAG with citations\nresponse = client.retrieval.rag(query=\"What is DeepSeek R1?\")\n\n# Deep Research RAG Agent\nresponse = client.retrieval.agent(\n  message={\"role\":\"user\", \"content\": \"What does deepseek r1 imply? Think about market, societal implications, and more.\"},\n  rag_generation_config={\n    \"model\"=\"anthropic/claude-3-7-sonnet-20250219\",\n    \"extended_thinking\": True,\n    \"thinking_budget\": 4096,\n    \"temperature\": 1,\n    \"top_p\": None,\n    \"max_tokens_to_sample\": 16000,\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Basic RAG Operations in Python\nDESCRIPTION: Core examples of using R2R for basic search, RAG with citations, and Deep Research RAG Agent capabilities in Python. Shows how to initialize queries and configure advanced parameters for the agent.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Basic search\nresults = client.retrieval.search(query=\"What is DeepSeek R1?\")\n\n# RAG with citations\nresponse = client.retrieval.rag(query=\"What is DeepSeek R1?\")\n\n# Deep Research RAG Agent\nresponse = client.retrieval.agent(\n  message={\"role\":\"user\", \"content\": \"What does deepseek r1 imply? Think about market, societal implications, and more.\"},\n  rag_generation_config={\n    \"model\"=\"anthropic/claude-3-7-sonnet-20250219\",\n    \"extended_thinking\": True,\n    \"thinking_budget\": 4096,\n    \"temperature\": 1,\n    \"top_p\": None,\n    \"max_tokens_to_sample\": 16000,\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SciPhi R2R Client in Python\nDESCRIPTION: This snippet demonstrates how to set up the authentication for SciPhi's R2R API using the R2R_API_KEY environment variable and create an instance of R2RClient. It requires the 'r2r' package to be installed and assumes you have obtained an API key from SciPhi Cloud or are running a local R2R instance. The R2R_API_KEY should be set in the environment before instantiating the client, and the client can then be used to interact with the R2R API. Only supports usage in environments where environment variables can be set programmatically.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/hello_r2r.ipynb#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport os\n\nfrom r2r import R2RClient\n\n# Create an account at SciPhi Cloud https://app.sciphi.ai and set an R2R_API_KEY environment variable\n# or set the base URL to your instance. E.g. R2RClient(\"http://localhost:7272\")\nos.environ[\"R2R_API_KEY\"] = \"your-api-key\"\n\n# Create a client\nclient = R2RClient()\n```\n\n----------------------------------------\n\nTITLE: Performing a Basic Search with R2R using JavaScript\nDESCRIPTION: Executes a search query against the ingested documents using the R2R client's `search` method. It takes the search query string as input and returns relevant results. Assumes the client is initialized, logged in, and data has been ingested.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/sdk/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst searchResult = await client.search(\"Who was Raskolnikov?\");\nconsole.log(searchResult);\n```\n\n----------------------------------------\n\nTITLE: Ingesting Files into R2R using JavaScript\nDESCRIPTION: Uploads and processes local files using the R2R client's `ingestFiles` method. It takes an array of file objects (each with `path` and `name`) and optional metadata and user IDs for each file. Assumes the client is initialized and logged in.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/sdk/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst files = [\n  { path: \"examples/data/raskolnikov.txt\", name: \"raskolnikov.txt\" },\n  { path: \"examples/data/karamozov.txt\", name: \"karamozov.txt\" },\n];\n\nconst ingestResult = await client.ingestFiles(files, {\n  metadatas: [{ title: \"raskolnikov.txt\" }, { title: \"karamozov.txt\" }],\n  user_ids: [\n    \"123e4567-e89b-12d3-a456-426614174000\",\n    \"123e4567-e89b-12d3-a456-426614174000\",\n  ],\n});\nconsole.log(ingestResult);\n```\n\n----------------------------------------\n\nTITLE: Logging into the R2R Server using JavaScript\nDESCRIPTION: Authenticates the client with the R2R server using provided email and password credentials. This is typically required before performing most operations like ingestion or search. Assumes a client instance (`client`) has already been initialized.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/sdk/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst EMAIL = \"admin@example.com\";\nconst PASSWORD = \"change_me_immediately\";\nconsole.log(\"Logging in...\");\nawait client.login(EMAIL, PASSWORD);\n```\n\n----------------------------------------\n\nTITLE: Document operations in Python\nDESCRIPTION: This snippet shows how to create a sample document or ingest your own, and also how to list existing documents, using the R2R Python client. It uses the `create_sample` and `list` methods of the `documents` module. The output is the creation of sample documents and the listing of all documents.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Ingest sample or your own document\nclient.documents.create_sample(hi_res=True)\n# client.documents.create(file_path=\"/path/to/file\")\n\n# List documents\nclient.documents.list()\n```\n\n----------------------------------------\n\nTITLE: Performing Document Operations in R2R\nDESCRIPTION: Python code demonstrating how to ingest sample documents or your own files, and how to list documents in your R2R collection. Shows basic document management functionality.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Ingest sample or your own document\nclient.documents.create_sample(hi_res=True)\n# client.documents.create(file_path=\"/path/to/file\")\n\n# List documents\nclient.documents.list()\n```\n\n----------------------------------------\n\nTITLE: Initializing the R2R Client in JavaScript\nDESCRIPTION: Imports the `r2rClient` class from the `r2r-js` package and instantiates a new client connected to the specified R2R server endpoint (defaulting to `http://localhost:7272` in this example). Requires the `r2r-js` package to be installed.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/sdk/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { r2rClient } = require(\"r2r-js\");\n\nconst client = new r2rClient(\"http://localhost:7272\");\n```\n\n----------------------------------------\n\nTITLE: Initializing R2R client using Python\nDESCRIPTION: This snippet demonstrates how to initialize the R2R client in Python, essential for interacting with the R2R API. The `R2RClient` class from the `r2r` module is used for this. `base_url` can be specified for self-hosted instances. The output is a client object, which can be used for the next commands.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom r2r import R2RClient\nclient = R2RClient()  # Use base_url=... for self-hosted\n```\n\n----------------------------------------\n\nTITLE: Initializing R2R client instance in Python\nDESCRIPTION: This snippet creates an instance of the R2RClient class, connecting to a server running locally on port 7272. The client instance acts as the interface for sending commands and queries to the R2R service. The URL parameter specifies the base endpoint.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/sdk/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = R2RClient(\"http://localhost:7272\")\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up R2R SDK\nDESCRIPTION: Commands for installing R2R SDK in Python or JavaScript and configuring the API key environment variable. Shows the initial setup required before using the client.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install SDK\npip install r2r  # Python\n# or\nnpm i r2r-js    # JavaScript\n\n# Setup API key\nexport R2R_API_KEY=pk_..sk_...  # Get from SciPhi Cloud dashboard\n```\n\n----------------------------------------\n\nTITLE: Initializing R2R Client in Python and JavaScript\nDESCRIPTION: Code examples showing how to initialize the R2R client in both Python and JavaScript. The client allows access to all R2R functionality including document operations and retrieval functions.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom r2r import R2RClient\nclient = R2RClient()  # Use base_url=... for self-hosted\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { r2rClient } = require('r2r-js');\nconst client = new r2rClient();  // Use baseURL=... for self-hosted\n```\n\n----------------------------------------\n\nTITLE: Installing R2R SDK using Bash\nDESCRIPTION: This snippet shows how to install the R2R Python package and set up the API key in the environment variables for R2R.  This is a prerequisite to interacting with the R2R API. The API key is required to authenticate with the R2R service. The output allows you to run the next commands.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Quick install and run in light mode\npip install r2r\nexport OPENAI_API_KEY=sk-...\npython -m r2r.serve\n\n# Or run in full mode with Docker\n# git clone git@github.com:SciPhi-AI/R2R.git && cd R2R\n# export R2R_CONFIG_NAME=full OPENAI_API_KEY=sk-...\n# docker compose -f compose.full.yaml --profile postgres up -d\n```\n\n----------------------------------------\n\nTITLE: Installing the R2R JavaScript Client via npm\nDESCRIPTION: Installs the `r2r-js` package using the Node Package Manager (npm). This command should be run in a terminal within a Node.js project directory.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/sdk/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install r2r-js\n```\n\n----------------------------------------\n\nTITLE: Importing R2RClient class in Python\nDESCRIPTION: This snippet shows how to import the R2RClient class from the r2r SDK package. It is the starting point for using the SDK in any Python script. Importing is required before initializing or calling client methods.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/sdk/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom r2r import R2RClient\n```\n\n----------------------------------------\n\nTITLE: Installing R2R Python SDK using pip\nDESCRIPTION: This snippet demonstrates how to install the R2R SDK Python package via pip. It requires a functioning Python environment with pip installed. This is a prerequisite to using the SDK. The command downloads and installs the r2r package, enabling access to the R2R client libraries.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/sdk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install r2r\n```\n\n----------------------------------------\n\nTITLE: Installing the R2R JavaScript SDK using npm (Bash)\nDESCRIPTION: Installs the R2R JavaScript SDK package using the Node Package Manager (npm). Requires Node.js and npm to be installed, along with a prior R2R installation. This command downloads and installs the `r2r-js` package and its dependencies.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install r2r-js\n```\n\n----------------------------------------\n\nTITLE: Importing the R2R Client in JavaScript (CommonJS)\nDESCRIPTION: Imports the `r2rClient` class from the installed `r2r-js` package using the CommonJS `require` syntax. This makes the client constructor available for creating client instances in the JavaScript application.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { r2rClient } = require('r2r-js');\n```\n\n----------------------------------------\n\nTITLE: Initializing R2R client using Javascript\nDESCRIPTION: This snippet shows how to initialize the R2R client in JavaScript, essential for interacting with the R2R API. The `r2rClient` is imported from the `r2r-js` module. `baseURL` can be set for self-hosted instances. The output is a client object, which can be used for the next commands.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { r2rClient } = require('r2r-js');\nconst client = new r2rClient();  // Use baseURL=... for self-hosted\n```\n\n----------------------------------------\n\nTITLE: Setting up R2R SDK using Bash\nDESCRIPTION: This snippet shows how to install the R2R Python package and the environment variable for the API key. It's a prerequisite to interact with the R2R API. The API key is necessary for authenticating with the R2R service. The output is to set up the next commands.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install SDK\npip install r2r  # Python\n# or\nnpm i r2r-js    # JavaScript\n\n# Setup API key\nexport R2R_API_KEY=pk_..sk_...  # Get from SciPhi Cloud dashboard\n```\n\n----------------------------------------\n\nTITLE: Self-Hosting R2R with Docker and CLI\nDESCRIPTION: Installation commands for self-hosting R2R using pip for light mode or Docker for full mode. Shows environment variable configuration for API keys and deployment options.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Quick install and run in light mode\npip install r2r\nexport OPENAI_API_KEY=sk-...\npython -m r2r.serve\n\n# Or run in full mode with Docker\n# git clone git@github.com:SciPhi-AI/R2R.git && cd R2R\n# export R2R_CONFIG_NAME=full OPENAI_API_KEY=sk-...\n# docker compose -f compose.full.yaml --profile postgres up -d\n```\n\n----------------------------------------\n\nTITLE: User registration and login using R2R Python SDK\nDESCRIPTION: This snippet covers optional user authentication workflows. Users can register with an email and password, then verify their email with a code, and finally log in. Authentication restricts document access to the authenticated user. It requires calling register(), optionally verify_email(), and login() methods on the client instance. Proper credential management and secure handling of verification codes are prerequisites.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/sdk/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.register(\"me@email.com\", \"my_password\")\n# client.verify_email(\"me@email.com\", \"my_verification_code\")\nclient.login(\"me@email.com\", \"my_password\")\n```\n\n----------------------------------------\n\nTITLE: Checking R2R Server Health in JavaScript\nDESCRIPTION: Calls the asynchronous `health()` method on the initialized R2R client instance to verify the status of the R2R server. Returns a promise that resolves with the health status object (e.g., `{\"status\":\"ok\"}`) if the server is responsive and healthy.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst healthResponse = await client.health();\n// {\"status\":\"ok\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing the R2R Client in JavaScript\nDESCRIPTION: Creates a new instance of the `r2rClient` by calling its constructor with the base URL of the running R2R server. This client instance is used for all subsequent interactions with the R2R API. Ensure the R2R server is running at the specified address (e.g., 'http://localhost:7272').\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst client = new r2rClient('http://localhost:7272');\n```\n\n----------------------------------------\n\nTITLE: Ingesting a Remote Text File with SciPhi R2R Client in Python\nDESCRIPTION: This snippet shows how to download a text document from a remote GitHub URL, temporarily store the content to a file, and ingest it into the SciPhi R2R system using the client's document ingestion API. Dependencies include the 'requests' and 'r2r' Python packages. The ingestion requires a valid client instance and a file path to the text file; upon success, the response from the ingestion API is printed. The workflow also cleans up the temporary file after ingestion, and is suitable for ingesting documents not present locally.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/hello_r2r.ipynb#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nimport tempfile\n\nimport requests\n\n# Download the content from GitHub\nurl = \"https://raw.githubusercontent.com/SciPhi-AI/R2R/refs/heads/main/py/core/examples/data/aristotle.txt\"\nresponse = requests.get(url)\n\n# Create a temporary file to store the content\nwith tempfile.NamedTemporaryFile(\n    delete=False, mode=\"w\", suffix=\".txt\"\n) as temp_file:\n    temp_file.write(response.text)\n    temp_path = temp_file.name\n\n# Ingest the file\ningestion_response = client.documents.create(file_path=temp_path)\nprint(ingestion_response)\n\n# Clean up the temporary file\nos.unlink(temp_path)\n```\n\n----------------------------------------\n\nTITLE: Checking R2R service health status in Python\nDESCRIPTION: This snippet calls the health() method on the R2R client instance to verify the service's health status. It returns a response indicating if the server is running correctly. This check helps ensure that the service endpoint is available before other operations.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/sdk/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhealth_response = client.health()\n# {\"status\":\"ok\"}\n```\n\n----------------------------------------\n\nTITLE: Logging into R2R in JavaScript\nDESCRIPTION: Authenticates a user by calling the `login` method on the client instance with the user's email and password. Successful authentication scopes subsequent API calls made with this client instance to the user's accessible documents. Optional registration and email verification steps are shown commented out.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/js/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// client.register(\"me@email.com\", \"my_password\"),\n// client.verify_email(\"me@email.com\", \"my_verification_code\")\nclient.login(\"me@email.com\", \"my_password\")\n```\n\n----------------------------------------\n\nTITLE: Python Code Block Documentation\nDESCRIPTION: A Python code snippet that calls the function 'python.code' with the argument 'hooray'. It illustrates embedding Python code within documentation or a code-extract context, emphasizing readability and context clarity.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/supported_file_types/rst.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython.code('hooray')\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Definition with Special Characters\nDESCRIPTION: A JavaScript function named 'ƒ' with parameters 'ɑ' and 'β', demonstrating use of Unicode characters in function names and parameters. It serves as an example of code syntax and Unicode support in JavaScript.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/supported_file_types/rst.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ƒ(ɑ, β) {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Code Block\nDESCRIPTION: Demonstrates how to create a pre-formatted code block in Markdown by indenting each line with at least four spaces or one tab.  The content within the block is treated literally, and ampersands and angle brackets are automatically converted to HTML entities.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/supported_file_types/md.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n    This is a code block.\n```\n\n----------------------------------------\n\nTITLE: Code Block with AppleScript\nDESCRIPTION: Illustrates a code block containing AppleScript code. The entire block is indented to be recognized as a code block within the Markdown document.  Within code blocks, Markdown syntax is ignored.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/supported_file_types/md.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n    tell application \"Foo\"\n        beep\n    end tell\n```\n\n----------------------------------------\n\nTITLE: HTML Code Example in Markdown\nDESCRIPTION: Demonstrates how to include HTML source code within a Markdown document by using a code block. Markdown automatically encodes ampersands and angle brackets, making it easier to include code snippets.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/supported_file_types/md.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n    <div class=\"footer\">\n        &copy; 2004 Foo Corporation\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Inline Code Span\nDESCRIPTION: Shows how to indicate a span of code within a normal paragraph using backtick quotes.  Unlike pre-formatted code blocks, inline code spans are used for short code snippets within sentences.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/supported_file_types/md.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\nUse the `printf()` function.\n```\n\n----------------------------------------\n\nTITLE: Code Block Example with Backticks\nDESCRIPTION: Illustrates the use of triple backticks to create a code block. This method is equivalent to indenting with spaces or tabs, providing an alternative way to define code blocks in Markdown.\nSOURCE: https://github.com/sciphi-ai/r2r.git/blob/main/py/core/examples/supported_file_types/md.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n```\ntell application \"Foo\"\n    beep\nend tell\n```\n```"
  }
]