[
  {
    "owner": "mjmlio",
    "repo": "mjml",
    "content": "TITLE: Creating a Basic Responsive Email with MJML\nDESCRIPTION: A simple MJML example that demonstrates the core structure of an email template with image, divider, and text components. This showcases MJML's semantic approach to email design using tags like mj-body, mj-section, mj-column, mj-image, mj-divider, and mj-text.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/guide.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-image width=\"100px\" src=\"https://mjml.io/assets/img/logo-small.png\"></mj-image>\n        <mj-divider border-color=\"#F45E43\"></mj-divider>\n        <mj-text font-size=\"20px\" color=\"#F45E43\" font-family=\"helvetica\">Hello World</mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Basic MJML Email Template Structure\nDESCRIPTION: Defines the basic skeleton of an email template with 6 sections including company header, image header, introduction text, 2-column layout, icons, and social section.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/basic.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mjml>\n  <mj-body>\n\n    <!-- Company Header -->\n    <mj-section background-color=\"#f0f0f0\"></mj-section>\n\n    <!-- Image Header -->\n    <mj-section background-color=\"#f0f0f0\"></mj-section>\n\n    <!-- Introduction Text -->\n    <mj-section background-color=\"#fafafa\"></mj-section>\n\n    <!-- 2 columns section -->\n    <mj-section background-color=\"white\"></mj-section>\n\n    <!-- Icons -->\n    <mj-section background-color=\"#fbfbfb\"></mj-section>\n\n    <!-- Social icons -->\n    <mj-section background-color=\"#f0f0f0\"></mj-section>\n\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Converting MJML to HTML in Node.js\nDESCRIPTION: JavaScript code showing how to use MJML within a Node.js application to convert MJML strings into responsive HTML. Demonstrates importing the mjml2html function and basic usage patterns.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/install.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport mjml2html from 'mjml'\n\n/*\n  Compile an mjml string\n*/\nconst htmlOutput = mjml2html(`\n  <mjml>\n    <mj-body>\n      <mj-section>\n        <mj-column>\n          <mj-text>\n            Hello World!\n          </mj-text>\n        </mj-column>\n      </mj-section>\n    </mj-body>\n  </mjml>\n`, options)\n\n/*\n  Print the responsive HTML generated and MJML errors if any\n*/\nconsole.log(htmlOutput)\n```\n\n----------------------------------------\n\nTITLE: MJML to HTML Conversion in Node.js\nDESCRIPTION: Example of using MJML within Node.js to convert MJML markup to responsive HTML with configuration options\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport mjml2html from 'mjml'\n\n/*\n  Compile an mjml string\n*/\nconst htmlOutput = mjml2html(`\n  <mjml>\n    <mj-body>\n      <mj-section>\n        <mj-column>\n          <mj-text>\n            Hello World!\n          </mj-text>\n        </mj-column>\n      </mj-section>\n    </mj-body>\n  </mjml>\n`, options)\n\n\n/*\n  Print the responsive HTML generated and MJML errors if any\n*/\nconsole.log(htmlOutput)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic MJML Email Template Structure with Auto-Sized Columns\nDESCRIPTION: Demonstrates the basic structure of an MJML email template with two auto-sized columns. The columns will automatically divide the available space (default 600px) equally.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/getting_started.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <!-- First column content -->\n      </mj-column>\n      <mj-column>\n        <!-- Second column content -->\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: MJML Node.js Integration\nDESCRIPTION: Example of using MJML within Node.js to compile MJML markup to HTML with configuration options\nSOURCE: https://github.com/mjmlio/mjml/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport mjml2html from 'mjml'\n\n/*\n  Compile an mjml string\n*/\nconst htmlOutput = mjml2html(`\n  <mjml>\n    <mj-body>\n      <mj-section>\n        <mj-column>\n          <mj-text>\n            Hello World!\n          </mj-text>\n        </mj-column>\n      </mj-section>\n    </mj-body>\n  </mjml>\n`, options)\n\n\n/*\n  Print the responsive HTML generated and MJML errors if any\n*/\nconsole.log(htmlOutput)\n```\n\n----------------------------------------\n\nTITLE: Converting MJML to HTML with mjml2html\nDESCRIPTION: Basic example of importing and using the mjml2html function to convert MJML code to HTML. This demonstrates the core functionality of converting MJML templates to responsive HTML that can be used in emails.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-core/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport mjml2html from 'mjml'\n\nconsole.log(mjml2html(`code`))\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Email Layout with MJML mj-group\nDESCRIPTION: Example demonstrates how to create a two-column layout that maintains side-by-side positioning on mobile devices using mj-group. The layout includes images and text content with responsive design considerations.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-group/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-group>\n        <mj-column>\n          <mj-image width=\"137px\" height=\"185px\" padding=\"0\"    src=\"https://mjml.io/assets/img/easy-and-quick.png\" />\n          <mj-text align=\"center\">\n            <h2>Easy and quick</h2>\n            <p>Write less code, save time and code more efficiently with MJML's semantic syntax.</p>\n          </mj-text>\n        </mj-column>\n        <mj-column>\n          <mj-image width=\"166px\" height=\"185px\" padding=\"0\" src=\"https://mjml.io/assets/img/responsive.png\" />\n          <mj-text align=\"center\">\n            <h2>Responsive</h2>\n            <p>MJML is responsive by design on most-popular email clients, even Outlook.</p>\n          </mj-text>\n        </mj-column>\n      </mj-group>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Configuring MJML Components with mj-attributes\nDESCRIPTION: This example demonstrates how to use mj-attributes to override default component settings, create reusable classes, and set global attributes. It shows component-specific styling for mj-text, two custom classes ('blue' and 'big'), and global font-family setting.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-head-attributes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-head>\n    <mj-attributes>\n      <mj-text padding=\"0\" />\n      <mj-class name=\"blue\" color=\"blue\" />\n      <mj-class name=\"big\" font-size=\"20px\" />\n      <mj-all font-family=\"Arial\" />\n    </mj-attributes>\n  </mj-head>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-text mj-class=\"blue big\">\n          Hello World!\n        </mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Using mj-style with CSS Classes in MJML\nDESCRIPTION: This example demonstrates how to use the mj-style tag to define CSS styles and apply them to MJML components. It shows three different styling approaches: standard CSS classes, inline styles, and MJML class definitions, each applied to mj-text components.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-head-style/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-head>\n    <mj-attributes>\n      <mj-class name=\"mjclass\" color=\"green\" font-size=\"30px\" />\n    </mj-attributes>\n    <mj-style inline=\"inline\">\n      .blue-text div {\n        color: blue !important;\n      }\n    </mj-style>\n    <mj-style>\n      .red-text div {\n        color: red !important;\n        text-decoration: underline !important;\n      }\n    </mj-style>\n  </mj-head>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-text css-class=\"red-text\">I'm red and underlined</mj-text>\n        <mj-text css-class=\"blue-text\">I'm blue because of inline</mj-text>\n        <mj-text mj-class=\"mjclass\">I'm green</mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Installing MJML via NPM\nDESCRIPTION: Command to install MJML using Node Package Manager (NPM) for use with NodeJS or CLI\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mjml\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Media Links with MJML\nDESCRIPTION: Example showing how to implement social media links using mj-social component with multiple social network elements including Facebook, Google, Twitter and X. The snippet demonstrates horizontal layout with customized font and icon sizes.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-social/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-social font-size=\"15px\" icon-size=\"30px\" mode=\"horizontal\">\n          <mj-social-element name=\"facebook\" href=\"https://mjml.io/\">\n            Facebook\n          </mj-social-element>\n          <mj-social-element name=\"google\" href=\"https://mjml.io/\">\n            Google\n          </mj-social-element>\n          <mj-social-element name=\"twitter\" href=\"https://mjml.io/\">\n            Twitter\n          </mj-social-element>\n          <mj-social-element name=\"x\" href=\"https://mjml.io/\">\n            X\n          </mj-social-element>\n        </mj-social>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Converting MJML to HTML with mjml-browser in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the mjml-browser package to convert MJML markup to HTML on the client side. It imports the mjml2html function and applies it to MJML content with optional configuration parameters.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-browser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar mjml2html = require('mjml-browser')\n\nvar result = mjml2html(mjml, options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Column Layout in MJML\nDESCRIPTION: Example of creating a two-column layout within an MJML email template. Shows the basic structure of using mj-column components inside an mj-section for responsive column organization.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-column/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <!-- Your first column -->\n      </mj-column>\n      <mj-column>\n        <!-- Your second column -->\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed-Height Hero Component in MJML\nDESCRIPTION: Example of implementing a hero section with fixed height of 469px. The component includes a background image, text overlay, and a call-to-action button. Uses fixed-height mode with specific dimensions for both the container and background image.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-hero/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-hero\n      mode=\"fixed-height\"\n      height=\"469px\"\n      background-width=\"600px\"\n      background-height=\"469px\"\n      background-url=\n          \"https://cloud.githubusercontent.com/assets/1830348/15354890/1442159a-1cf0-11e6-92b1-b861dadf1750.jpg\"\n      background-color=\"#2a3448\"\n      padding=\"100px 0px\">\n      <mj-text\n        padding=\"20px\"\n        color=\"#ffffff\"\n        font-family=\"Helvetica\"\n        align=\"center\"\n        font-size=\"45px\"\n        line-height=\"45px\"\n        font-weight=\"900\">\n        GO TO SPACE\n      </mj-text>\n      <mj-button href=\"https://mjml.io/\" align=\"center\">\n        ORDER YOUR TICKET NOW\n      </mj-button>\n    </mj-hero>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: MJML Image Header with Background\nDESCRIPTION: Implements a full-width image header section with background image, slogan text, and a promotional button.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/basic.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Image Header -->\n  <mj-section background-url=\"https://1.bp.blogspot.com/-TPrfhxbYpDY/Uh3Refzk02I/AAAAAAAALw8/5sUJ0UUGYuw/s1600/New+York+in+The+1960's+-+70's+(2).jpg\"\n              background-size=\"cover\"\n              background-repeat=\"no-repeat\">\n\n    <mj-column width=\"600px\">\n\t<mj-text  align=\"center\"\n                  color=\"#fff\"\n                  font-size=\"40px\"\n                  font-family=\"Helvetica Neue\">\n\t  Slogan here\n\t</mj-text>\n\n      <mj-button background-color=\"#F63A4D\"\n                 href=\"#\">\n      \tPromotion\n      </mj-button>\n\n    </mj-column>\n\n  </mj-section>\n```\n\n----------------------------------------\n\nTITLE: Compiling MJML File Using CLI\nDESCRIPTION: Command line interface usage to compile MJML file to HTML output\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmjml input.mjml -o output.html\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Button in MJML\nDESCRIPTION: This snippet demonstrates how to create a basic button in MJML with custom font family, background color, and text color. The button displays the text 'Don't click me!' and is centered within a column section.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-button/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-button font-family=\"Helvetica\" background-color=\"#f45e43\" color=\"white\">\n          Don't click me!\n         </mj-button>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Layouts with mj-wrapper in MJML\nDESCRIPTION: This snippet demonstrates how to use the mj-wrapper component to create nested layouts with shared borders and backgrounds. It includes two sections within the wrapper, each with different border styles and content.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-wrapper/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-wrapper border=\"1px solid #000000\" padding=\"50px 30px\">\n      <mj-section border-top=\"1px solid #aaaaaa\" border-left=\"1px solid #aaaaaa\" border-right=\"1px solid #aaaaaa\" padding=\"20px\">\n        <mj-column>\n          <mj-image padding=\"0\" src=\"https://placeholdit.imgix.net/~text?&w=350&h=150\" />\n        </mj-column>\n      </mj-section>\n      <mj-section border-left=\"1px solid #aaaaaa\" border-right=\"1px solid #aaaaaa\" padding=\"20px\" border-bottom=\"1px solid #aaaaaa\">\n        <mj-column border=\"1px solid #dddddd\">\n          <mj-text padding=\"20px\"> First line of text </mj-text>\n          <mj-divider border-width=\"1px\" border-style=\"dashed\" border-color=\"lightgrey\" padding=\"0 20px\" />\n          <mj-text padding=\"20px\"> Second line of text </mj-text>\n        </mj-column>\n      </mj-section>\n    </mj-wrapper>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: MJML Browser Implementation\nDESCRIPTION: Example of using MJML in browser-side JavaScript to compile MJML markup to HTML\nSOURCE: https://github.com/mjmlio/mjml/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar mjml2html = require('mjml-browser')\n\n/*\n  Compile a mjml string\n*/\nvar htmlOutput = mjml2html(`\n  <mjml>\n    <mj-body>\n      <mj-section>\n        <mj-column>\n          <mj-text>\n            Hello World!\n          </mj-text>\n        </mj-column>\n      </mj-section>\n    </mj-body>\n  </mjml>\n`, options)\n\n\n/*\n  Print the responsive HTML generated and MJML errors if any\n*/\nconsole.log(htmlOutput)\n```\n\n----------------------------------------\n\nTITLE: MJML Introduction Text Section\nDESCRIPTION: Creates an introduction section with styled title, body text, and call-to-action button in a single column.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/basic.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Intro text -->\n  <mj-section background-color=\"#fafafa\">\n    \t<mj-column width=\"400px\">\n\n          <mj-text font-style=\"italic\"\n                   font-size=\"20px\"\n                   font-family=\"Helvetica Neue\"\n                   color=\"#626262\">My Awesome Text</mj-text>\n\n      \t\t<mj-text color=\"#525252\">\n          \t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Proin rutrum enim eget magna efficitur, eu semper augue semper. Aliquam erat volutpat. Cras id dui lectus. Vestibulum sed finibus lectus, sit amet suscipit nibh. Proin nec commodo purus. Sed eget nulla elit. Nulla aliquet mollis faucibus.\n          </mj-text>\n\n        \t<mj-button background-color=\"#F45E43\"\n                     href=\"#\">Learn more</mj-button>\n\n    </mj-column>\n  </mj-section>\n```\n\n----------------------------------------\n\nTITLE: Creating Image Carousel in MJML\nDESCRIPTION: Example showing how to implement a basic image carousel using the mj-carousel component. The carousel contains three images and is wrapped in a column and section structure. Each image is defined using the mj-carousel-image component with source URLs.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-carousel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-carousel>\n          <mj-carousel-image src=\"https://www.mailjet.com/wp-content/uploads/2016/11/ecommerce-guide.jpg\" />\n          <mj-carousel-image src=\"https://www.mailjet.com/wp-content/uploads/2016/09/3@1x.png\" />\n          <mj-carousel-image src=\"https://www.mailjet.com/wp-content/uploads/2016/09/1@1x.png\" />\n        </mj-carousel>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Comparing MJML Button Component to Generated HTML\nDESCRIPTION: This snippet demonstrates the simplicity of using an MJML button component compared to the complex HTML it generates. It shows how MJML abstracts away the intricate HTML structure required for email-responsive designs.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/components_1.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- MJML -->\n<mj-button href=\"#\">\n    Hello There!\n</mj-button>\n\n<!-- HTML -->\n<table cellpadding=\"0\" cellspacing=\"0\" style=\"border:none;border-radius:3px;\" align=\"center\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"background-color:#414141;border-radius:3px;color:#ffffff;cursor:auto;\" align=\"center\" valign=\"middle\" bgcolor=\"#414141\">\n\t\t\t\t<a class=\"mj-content\" href=\"#\" style=\"display:inline-block;text-decoration:none;background-color:#414141;border:1px solid #414141;border-radius:3px;color:#ffffff;font-size:13px;font-weight:bold;padding:15px 30px;\" target=\"_blank\">\n\t\t\t\t\tHello There!\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: MJML CLI Usage Example\nDESCRIPTION: Command line example showing how to compile MJML file to HTML output\nSOURCE: https://github.com/mjmlio/mjml/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmjml input.mjml -o output.html\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML Attributes with mj-html-attributes in MJML\nDESCRIPTION: Demonstrates how to add custom HTML attributes to specific elements in an MJML template using CSS selectors. The example shows adding a data-id attribute to a div element within a custom-classed text component. The selector '.custom div' targets the inner div of an mj-text element with class 'custom'.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-head-html-attributes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-head>\n    <mj-html-attributes>\n      <mj-selector path=\".custom div\">\n        <mj-html-attribute name=\"data-id\">42</mj-html-attribute>\n      </mj-selector>\n    </mj-html-attributes>\n  </mj-head>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-text css-class=\"custom\">\n          Hello World!\n        </mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Accordion in MJML\nDESCRIPTION: Complete example demonstrating how to use the mj-accordion component in MJML. The example shows the structure with collapsible elements, customized icons, and styling attributes. This creates a responsive accordion that stacks content in tabs for better mobile readability.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-accordion/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-head>\n    <mj-attributes>\n      <mj-accordion border=\"none\" padding=\"1px\" />\n      <mj-accordion-element icon-wrapped-url=\"https://i.imgur.com/Xvw0vjq.png\" icon-unwrapped-url=\"https://i.imgur.com/KKHenWa.png\" icon-height=\"24px\" icon-width=\"24px\" />\n      <mj-accordion-title font-family=\"Roboto, Open Sans, Helvetica, Arial, sans-serif\" background-color=\"#fff\" color=\"#031017\" padding=\"15px\" font-size=\"18px\" />\n      <mj-accordion-text font-family=\"Open Sans, Helvetica, Arial, sans-serif\" background-color=\"#fafafa\" padding=\"15px\" color=\"#505050\" font-size=\"14px\" />\n    </mj-attributes>\n  </mj-head>\n\n  <mj-body>\n    <mj-section padding=\"20px\" background-color=\"#ffffff\">\n      <mj-column background-color=\"#dededd\">\n        <mj-accordion>\n          <mj-accordion-element>\n            <mj-accordion-title>Why use an accordion?</mj-accordion-title>\n            <mj-accordion-text>\n              <span style=\"line-height:20px\">\n                Because emails with a lot of content are most of the time a very bad experience on mobile, mj-accordion comes handy when you want to deliver a lot of information in a concise way.\n              </span>\n            </mj-accordion-text>\n          </mj-accordion-element>\n          <mj-accordion-element>\n            <mj-accordion-title>How it works</mj-accordion-title>\n            <mj-accordion-text>\n              <span style=\"line-height:20px\">\n                Content is stacked into tabs and users can expand them at will. If responsive styles are not supported (mostly on desktop clients), tabs are then expanded and your content is readable at once.\n              </span>\n            </mj-accordion-text>\n          </mj-accordion-element>\n        </mj-accordion>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Initializing MJML Email Template with mj-body Component\nDESCRIPTION: This snippet demonstrates the basic structure of an MJML email template using the mj-body component. The mj-body element serves as the container for all email content.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-body/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <!-- Your email goes here -->\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Using mj-image Component in MJML\nDESCRIPTION: Example demonstrating how to use the mj-image component within an MJML email template. Shows basic structure with an image of 300px width using an external source URL.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-image/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-image width=\"300px\" src=\"https://www.online-image-editor.com//styles/2014/images/example_image.png\" />\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Navigation Menu with MJML Navbar\nDESCRIPTION: Example showing how to create a responsive navigation menu using mj-navbar component with hamburger functionality for mobile devices. The navbar includes multiple navigation links with custom styling and mobile-friendly features.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-navbar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section background-color=\"#ef6451\">\n      <mj-column>\n        <mj-navbar base-url=\"https://mjml.io\" hamburger=\"hamburger\" ico-color=\"#ffffff\">\n            <mj-navbar-link href=\"/gettings-started-onboard\" color=\"#ffffff\">Getting started</mj-navbar-link>\n            <mj-navbar-link href=\"/try-it-live\" color=\"#ffffff\">Try it live</mj-navbar-link>\n            <mj-navbar-link href=\"/templates\" color=\"#ffffff\">Templates</mj-navbar-link>\n            <mj-navbar-link href=\"/components\" color=\"#ffffff\">Components</mj-navbar-link>\n        </mj-navbar>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Including External MJML Files in MJML Templates\nDESCRIPTION: Demonstrates how to create a separate header file and include it in the main MJML template. The header.mjml file contains a simple section with text, and the main.mjml file imports it using the mj-include tag.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/components_2.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- header.mjml -->\n<mj-section>\n  <mj-column>\n    <mj-text>This is a header</mj-text>\n  </mj-column>\n</mj-section>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- main.mjml -->\n<mjml>\n  <mj-body>\n    <mj-include path=\"./header.mjml\" />\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: MJML Icons Section\nDESCRIPTION: Creates a three-column layout for displaying icon images with equal spacing.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/basic.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Icons -->\n<mj-section background-color=\"#fbfbfb\">\n  <mj-column>\n    <mj-image width=\"100px\" src=\"https://191n.mj.am/img/191n/3s/x0l.png\" />\n  </mj-column>\n  <mj-column>\n    <mj-image width=\"100px\" src=\"https://191n.mj.am/img/191n/3s/x01.png\" />\n  </mj-column>\n  <mj-column>\n    <mj-image width=\"100px\" src=\"https://191n.mj.am/img/191n/3s/x0s.png\" />\n  </mj-column>\n</mj-section>\n```\n\n----------------------------------------\n\nTITLE: Converting MJML JSON to HTML using mjml2html in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the mjml2html function to convert an MJML structure defined as a JSON object into HTML. It includes a complete MJML email template with sections, columns, images, dividers, and text elements.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/using_mjml_in_json.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar mjml2html = require('mjml')\n\nconsole.log(mjml2html({\n    tagName: 'mjml',\n    attributes: {},\n    children: [{\n        tagName: 'mj-body',\n        attributes: {},\n        children: [{\n            tagName: 'mj-section',\n            attributes: {},\n            children: [{\n                tagName: 'mj-column',\n                attributes: {},\n                children: [{\n                    tagName: 'mj-image',\n                    attributes: {\n                        'width': '100px',\n                        'src': '/assets/img/logo-small.png'\n                    }\n                },\n                {\n                    tagName: 'mj-divider',\n                    attributes: {\n                        'border-color' : '#F46E43'\n                    }\n                }, \n                {\n                    tagName: 'mj-text',\n                    attributes: {\n                        'font-size': '20px',\n                        'color': '#F45E43',\n                        'font-family': 'Helvetica'\n                    },\n                    content: 'Hello World'\n                }]\n            }]\n        }]\n    }]\n}))\n```\n\n----------------------------------------\n\nTITLE: MJML Social Media Section\nDESCRIPTION: Implements a social media sharing section with Facebook integration using the mj-social component.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/basic.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<mj-section background-color=\"#e7e7e7\">\n  <mj-column>\n    <mj-social>\n      <mj-social-element name=\"facebook\">Share</mj-social-element>\n    </mj-social>\n  </mj-column>\n</mj-section>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Horizontal Divider in MJML\nDESCRIPTION: Example showing how to implement a customized horizontal divider using the mj-divider component. The example demonstrates setting custom border width, style, and color properties.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-divider/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-divider border-width=\"1px\" border-style=\"dashed\" border-color=\"lightgrey\" />\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating mj-text Usage in MJML\nDESCRIPTION: This snippet shows how to use the mj-text component within an MJML template. It demonstrates setting font family and color, as well as including HTML elements like headings and paragraphs.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-text/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-text font-family=\"Helvetica\" color=\"#F45E43\">\n          <h1>Title</h1>\n\n          <p>Paragraph</p>\n          <p style=\"font-family:Comic Sans Ms\">Another paragraph</p>\n        </mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Setting Responsive Breakpoint in MJML\nDESCRIPTION: This example shows how to use the mj-breakpoint tag within the mj-head section to define a custom responsive breakpoint. In this case, the layout will switch between desktop and mobile views at 320px width.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-head-breakpoint/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-head>\n    <mj-breakpoint width=\"320px\" />\n  </mj-head>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-text>\n          Hello World!\n        </mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Custom Social Element Implementation in MJML\nDESCRIPTION: Example of implementing a custom social network element with custom background color and icon. This approach allows adding unsupported networks or creating custom social elements.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-social/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mj-social-element href=\"url\" background-color=\"#FF00FF\" src=\"path-to-your-icon\">\n  Optional label\n</mj-social-element>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluid-Height Hero Component in MJML\nDESCRIPTION: Example of implementing a hero section with fluid height. The component uses the same background image and content structure but adapts its height based on content. Background dimensions are specified while allowing flexible container height.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-hero/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-hero\n      mode=\"fluid-height\"\n      background-width=\"600px\"\n      background-height=\"469px\"\n      background-url=\n          \"https://cloud.githubusercontent.com/assets/1830348/15354890/1442159a-1cf0-11e6-92b1-b861dadf1750.jpg\"\n      background-color=\"#2a3448\"\n      padding=\"100px 0px\">\n      <mj-text\n        padding=\"20px\"\n        color=\"#ffffff\"\n        font-family=\"Helvetica\"\n        align=\"center\"\n        font-size=\"45px\"\n        line-height=\"45px\"\n        font-weight=\"900\">\n        GO TO SPACE\n      </mj-text>\n      <mj-button href=\"https://mjml.io/\" align=\"center\">\n        ORDER YOUR TICKET NOW\n      </mj-button>\n    </mj-hero>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Chart.js Bar Chart Configuration Example in MJML\nDESCRIPTION: This example shows the Chart.js configuration object for rendering a simple bar chart through the mj-chartjs component. The chart displays quarterly user data with custom styling.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/mjml-chartjs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n          type: 'bar',\n          data: {\n            labels: ['Q1', 'Q2', 'Q3', 'Q4'],\n            datasets: [{\n              label: 'Users',\n              data: [50, 60, 70, 180],\n              backgroundColor: 'rgb(75, 192, 192)',\n            }]\n          }\n        }\n        \n```\n\n----------------------------------------\n\nTITLE: Including CSS Files in MJML Templates\nDESCRIPTION: Shows how to include external CSS files in MJML using the mj-include component with the type=\"css\" attribute. Demonstrates both regular CSS inclusion and inline CSS inclusion using the css-inline=\"inline\" attribute.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/components_2.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- main.mjml -->\n  <mj-include path=\"./styles.css\" type=\"css\" />\n  <mj-include path=\"./inline-styles.css\" type=\"css\" css-inline=\"inline\" />\n```\n\n----------------------------------------\n\nTITLE: Installing MJML with NPM\nDESCRIPTION: Command to install MJML package using NPM package manager to use with NodeJS or Command Line Interface.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mjml\n```\n\n----------------------------------------\n\nTITLE: Compiling MJML to HTML with CLI\nDESCRIPTION: Basic command-line usage for compiling an MJML file to HTML output. This command takes an input MJML file and generates the corresponding HTML file.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/install.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmjml input.mjml -o output.html\n```\n\n----------------------------------------\n\nTITLE: Creating a Full-Width Section Row in MJML\nDESCRIPTION: This example demonstrates how to create a basic section component with a full-width background in MJML. The mj-section is set with a red background color and the full-width attribute to extend the background across the entire email width (100% instead of the default 600px).\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-section/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section full-width=\"full-width\" background-color=\"red\">\n      <!-- Your columns go here -->\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Including HTML Files in MJML Templates\nDESCRIPTION: Demonstrates how to include external HTML files in MJML templates using the mj-include component with the type=\"html\" attribute. The HTML content is inserted in the same way as mj-raw components.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/components_2.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- main.mjml -->\n  <mj-include path=\"./partial.html\" type=\"html\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom Font in MJML\nDESCRIPTION: This snippet demonstrates how to import a custom font (Raleway) using the mj-font component in the mj-head section, and then use it in the mj-text component. The href attribute points to a hosted CSS file containing the @font-face declaration.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-head-font/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n   <mj-head>\n     <mj-font name=\"Raleway\"\n       href=\"https://fonts.googleapis.com/css?family=Raleway\" />\n   </mj-head>\n   <mj-body>\n     <mj-section>\n       <mj-column>\n         <mj-text font-family=\"Raleway, Arial\">\n           Hello World!\n         </mj-text>\n       </mj-column>\n      </mj-section>\n   </mj-body>\n </mjml>\n```\n\n----------------------------------------\n\nTITLE: Installing MJML with NPM\nDESCRIPTION: Command to install MJML package using NPM package manager\nSOURCE: https://github.com/mjmlio/mjml/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mjml\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with mj-table Component in MJML\nDESCRIPTION: This example demonstrates how to use the mj-table component to create a styled table in an MJML email template. The table shows programming languages by year and their influences, with custom styling for borders and padding.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-table/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-table>\n          <tr style=\"border-bottom:1px solid #ecedee;text-align:left;padding:15px 0;\">\n            <th style=\"padding: 0 15px 0 0;\">Year</th>\n            <th style=\"padding: 0 15px;\">Language</th>\n            <th style=\"padding: 0 0 0 15px;\">Inspired from</th>\n          </tr>\n          <tr>\n            <td style=\"padding: 0 15px 0 0;\">1995</td>\n            <td style=\"padding: 0 15px;\">PHP</td>\n            <td style=\"padding: 0 0 0 15px;\">C, Shell Unix</td>\n          </tr>\n          <tr>\n            <td style=\"padding: 0 15px 0 0;\">1995</td>\n            <td style=\"padding: 0 15px;\">JavaScript</td>\n            <td style=\"padding: 0 0 0 15px;\">Scheme, Self</td>\n          </tr>\n        </mj-table>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Basic MJML Rendering\nDESCRIPTION: Convert MJML file to HTML using the simple command\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmjml input.mjml\n```\n\n----------------------------------------\n\nTITLE: MJML Two-Column Section\nDESCRIPTION: Implements a two-column layout with an image on the left and formatted text content on the right.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/basic.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Side image -->\n<mj-section background-color=\"white\">\n\n  <!-- Left image -->\n  <mj-column>\n    <mj-image width=\"200px\"\n              src=\"https://designspell.files.wordpress.com/2012/01/sciolino-paris-bw.jpg\" />\n  </mj-column>\n\n  <!-- right paragraph -->\n  <mj-column>\n    <mj-text font-style=\"italic\"\n             font-size=\"20px\"\n             font-family=\"Helvetica Neue\"\n             color=\"#626262\">\n        Find amazing places\n      </mj-text>\n\n      <mj-text color=\"#525252\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin rutrum enim eget magna efficitur, eu semper augue semper. Aliquam erat volutpat. Cras id dui lectus. Vestibulum sed finibus lectus.</mj-text>\n\n  </mj-column>\n</mj-section>\n```\n\n----------------------------------------\n\nTITLE: Installing MJML Package\nDESCRIPTION: Install MJML locally in a project folder using npm\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mjml\n```\n\n----------------------------------------\n\nTITLE: Creating MJML Email Template with Manual Column Sizing\nDESCRIPTION: Shows how to create an MJML email template with manually specified column widths. The first column is set to 200px and the second to 400px using the width attribute.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/getting_started.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column width=\"200px\">\n        <!-- First column content -->\n      </mj-column>\n      <mj-column width=\"400px\">\n        <!-- Second column content -->\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Image in HTML\nDESCRIPTION: Example of the QR code output as rendered using the QuickChart QR code API with a sample text 'mjml is easy!'\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/mjml-qr-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\" >\n  <img src=\"https://quickchart.io/qr?text=mjml is easy!\" alt=\"mj-qr-code demo\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Validating MJML in JavaScript with Strict Level\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the mjml2html function with a 'strict' validation level. It shows the structure of the options parameter and mentions the MJMLValidationError exception.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-validator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmjml2html(inputMJML, { validationLevel: 'strict' })\n```\n\n----------------------------------------\n\nTITLE: Basic mj-raw Usage in MJML\nDESCRIPTION: Demonstrates the basic structure for including raw HTML content within an MJML template using the mj-raw component.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-raw/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-raw>\n      <!-- Your content goes here -->\n    </mj-raw>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Installing mjml-core Package via npm\nDESCRIPTION: Command to install the mjml-core package using npm. This installs the core MJML library which provides functionality for parsing and rendering MJML templates.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save mjml-core\n```\n\n----------------------------------------\n\nTITLE: Using mj-spacer Component in MJML\nDESCRIPTION: This snippet demonstrates how to use the mj-spacer component within an MJML email template. It shows a spacer with a height of 50px between two text elements.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-spacer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-text>A first line of text</mj-text>\n        <mj-spacer height=\"50px\" />\n        <mj-text>A second line of text</mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Configuring MJML Community Components\nDESCRIPTION: JSON configuration file (.mjmlconfig) setup for registering community components in an MJML project. The config specifies package paths for custom components that will be available in MJML templates.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/community-components.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"component-name/path-to-js-file\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: MJML Company Header Section\nDESCRIPTION: Creates a centered company header with styled text in a single column layout.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/basic.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Company Header -->\n<mj-section background-color=\"#f0f0f0\">\n  <mj-column>\n    <mj-text  align=\"center\"\n\t      font-style=\"italic\"\n              font-size=\"20px\"\n              color=\"#626262\">\n      My Company\n    </mj-text>\n  </mj-column>\n</mj-section>\n```\n\n----------------------------------------\n\nTITLE: MJML Watch Mode\nDESCRIPTION: Watch for changes in MJML file and automatically re-render\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmjml -w input.mjml\n\n# or\n\nmjml --watch input.mjml\n```\n\n----------------------------------------\n\nTITLE: Setting Document Title in MJML\nDESCRIPTION: Example of how to define a document title using the mj-title component within an MJML email template. The title is set within the mj-head section and demonstrates basic MJML structure including body content.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-head-title/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-head>\n    <mj-title>Hello MJML</mj-title>\n  </mj-head>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-text>\n          Hello World!\n        </mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: MJML Config Options\nDESCRIPTION: Set configuration options for MJML rendering\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmjml input.mjml --config.optionName value\n\n# or\n\nmjml input.mjml -c.optionName value\n```\n\n----------------------------------------\n\nTITLE: Using mj-preview Tag in MJML Document\nDESCRIPTION: This example demonstrates how to implement the mj-preview tag within an MJML document. The preview tag is placed in the mj-head section and sets 'Hello MJML' as the preview text that will be displayed in the recipient's inbox before they open the email.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-head-preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-head>\n    <mj-preview>Hello MJML</mj-preview>\n  </mj-head>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-text>\n          Hello World!           \n        </mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: MJML Output Formatting\nDESCRIPTION: Configure HTML output beautification and minification\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$> mjml input.mjml --config.beautify true --config.minify false\n```\n\n----------------------------------------\n\nTITLE: Template Engine Integration with mj-raw\nDESCRIPTION: Shows how to use mj-raw with template engine syntax while avoiding minification issues using htmlmin:ignore tags.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-raw/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-raw>\n      <!-- htmlmin:ignore -->{% if foo < 5 %}<!-- htmlmin:ignore -->\n    </mj-raw>\n      <!-- Some mjml section -->\n    <mj-raw>\n      {% endif %}\n    </mj-raw>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: MJML Components Introduction\nDESCRIPTION: Introduces the concept of standard MJML body components as built-in tools for template creation.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/body_components.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Standard Body components\\n\\nMJML comes out of the box with a set of standard components to help you build easily your first templates without having to reinvent the wheel.\n```\n\n----------------------------------------\n\nTITLE: MJML Output to stdout\nDESCRIPTION: Render MJML and output to standard output instead of file\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmjml -s input.mjml\n\n# or\n\nmjml --stdout input.mjml\n```\n\n----------------------------------------\n\nTITLE: Validating MJML Template in CLI\nDESCRIPTION: This command uses the MJML CLI to validate a template file without rendering it. It uses the --validate option to perform validation only.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmjml --validate template.mjml\n```\n\n----------------------------------------\n\nTITLE: Setting up MJML Development Environment\nDESCRIPTION: Commands to clone MJML repository and set up local development environment using yarn\nSOURCE: https://github.com/mjmlio/mjml/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mjmlio/mjml.git && cd mjml\nyarn\nyarn build\n```\n\n----------------------------------------\n\nTITLE: MJML Minification Options\nDESCRIPTION: Configure detailed minification settings for output HTML\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$> mjml input.mjml --config.minifyOptions='{\"minifyCSS\": true, \"removeEmptyAttributes\": false}'\n```\n\n----------------------------------------\n\nTITLE: MJML Validation\nDESCRIPTION: Validate MJML file syntax and structure\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$> mjml -v input.mjml\n```\n\n----------------------------------------\n\nTITLE: File Start Position with mj-raw\nDESCRIPTION: Demonstrates how to add content at the beginning of the generated HTML file using mj-raw with the position attribute set to file-start.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-raw/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mjml>\n  <mj-raw position=\"file-start\">This will be added at the beginning of the file</mj-raw>\n  <mj-body>\n    <!-- Your content goes here -->\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Validating MJML with Skip Level in CLI\nDESCRIPTION: This command uses the MJML CLI to render a template file without performing validation. It sets the validation level to 'skip' using the --config.validationLevel option.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmjml --config.validationLevel=skip template.mjml\n```\n\n----------------------------------------\n\nTITLE: Importing mj-chart Component in MJML\nDESCRIPTION: Shows how to import and use the mj-chart component in an MJML email template. The component is available on Github and NPM.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/mjml-chart.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## mj-chart\n\nThanks to [image-charts](https://image-charts.com/) for their contribution with this component. It's available on [Github](https://github.com/image-charts/mjml-charts) and [NPM](https://www.npmjs.com/package/mjml-chart).\n\n<p style=\"text-align: center;\" >\n  <img src=\"https://puu.sh/tjIVp/cd01defdac.png\" alt=\"mj-chart demo\" />\n</p>\n\nDisplays charts as images in your email.\n```\n\n----------------------------------------\n\nTITLE: MJML Output to File\nDESCRIPTION: Render MJML and save output to specified HTML file\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmjml input.mjml -o my-email.html\n\n# or\n\nmjml input.mjml --output my-email.html\n```\n\n----------------------------------------\n\nTITLE: MJML Include Path Override\nDESCRIPTION: Set base path for mj-include relative paths\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$> mjml ./my-project/input.mjml --config.filePath ./my-partials/\n```\n\n----------------------------------------\n\nTITLE: Setting MJML Validation Mode\nDESCRIPTION: Configure validation mode for MJML rendering\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmjml -l skip -r input.mjml\n```\n\n----------------------------------------\n\nTITLE: MJML Preserve Tags\nDESCRIPTION: Preserve specific tags during CSS inlining process\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$> mjml input.mjml --config.juicePreserveTags='{\"myTag\": { \"start\": \"<#\", \"end\": \"</#\" }}'\n```\n\n----------------------------------------\n\nTITLE: Using MJML Core Preset in JavaScript\nDESCRIPTION: Example showing how to import and use the mjml-preset-core package with mjml2html converter. The preset is passed as an option to enable core components.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-preset-core/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport mjml2html from 'mjml-core'\nimport presetCore from 'mjml-preset-core'\n\nconsole.log(mjml2html(`code`, { presets: [presetCore] }))\n```\n\n----------------------------------------\n\nTITLE: Bug Report Template in Markdown\nDESCRIPTION: A template for submitting bug reports to the MJML project. It includes sections for describing the problem, reproduction steps, expected behavior, observed behavior, screenshots, MJML version, and affected email clients.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n      [Short description of problem here]\n\n      **Reproduction Steps:**\n\n      1. [First Step]\n      2. [Second Step]\n      3. [Other Steps...]\n\n      **Expected behavior:**\n\n      [Describe expected behavior here]\n\n      **Observed behavior:**\n\n      [Describe observed behavior here]\n\n      **Screenshots and GIFs**\n\n      ![Screenshots and GIFs which follow reproduction steps to demonstrate the problem](url)\n\n      **MJML version:**\n\n      [Enter MJML version here]\n\n      **Email clients the bug is seen on:**\n\n      [Enter email clients names and versions here]\n```\n\n----------------------------------------\n\nTITLE: MJML Juice Options\nDESCRIPTION: Configure CSS inlining options using juice library\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$> mjml input.mjml --config.juiceOptions='{\"preserveImportant\": true}'\n```\n\n----------------------------------------\n\nTITLE: MJML Error Stack Display\nDESCRIPTION: Enable error stack trace logging\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$> mjml input.mjml --config.stack true\n```\n\n----------------------------------------\n\nTITLE: MJML3 to MJML4 Migration\nDESCRIPTION: Migrate MJML version 3 files to version 4 format\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$> mjml -m input.mjml -o result.mjml\n```\n\n----------------------------------------\n\nTITLE: Setting up MJML Development Environment\nDESCRIPTION: Commands to clone the MJML repository and set up a development environment using yarn. This allows for making changes to MJML and creating merge requests.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mjmlio/mjml.git && cd mjml\nyarn\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running MJML with Full Path\nDESCRIPTION: Execute MJML using the full node_modules path\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/mjml input.mjml\n```\n\n----------------------------------------\n\nTITLE: Adding MJML to PATH\nDESCRIPTION: Add node_modules/.bin to PATH for easier MJML execution\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$PATH:./node_modules/.bin\"\n```\n\n----------------------------------------\n\nTITLE: Installing MJML Core Preset Package\nDESCRIPTION: Command to install the mjml-preset-core package using npm package manager\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-preset-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save mjml-preset-core\n```\n\n----------------------------------------\n\nTITLE: Installing MJML Migration Tool via NPM\nDESCRIPTION: Instructions for installing the mjml-migrate tool either by cloning the repository or through NPM package manager.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-migrate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mjml-migrate\n```\n\n----------------------------------------\n\nTITLE: Using MJML Migration Tool Command\nDESCRIPTION: Command syntax for migrating MJML templates, requiring input and output file parameters.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/packages/mjml-migrate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmigrate <input> <output>\n```\n\n----------------------------------------\n\nTITLE: Using mjml-msobutton Component in MJML\nDESCRIPTION: Demonstrates how to use the mjml-msobutton component in an MJML template. The mso-proof attribute is set to true to activate the bulletproof mode for Outlook compatibility.\nSOURCE: https://github.com/mjmlio/mjml/blob/master/doc/mjml-mso-button.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<mj-msobutton mso-proof=\"true\">Click !</mj-msobutton>\n```"
  }
]