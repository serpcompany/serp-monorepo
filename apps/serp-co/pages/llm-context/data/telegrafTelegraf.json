[
  {
    "owner": "telegraf",
    "repo": "telegraf",
    "content": "TITLE: Basic Telegraf Bot Setup in JavaScript\nDESCRIPTION: Demonstrates how to create a simple Telegram bot using Telegraf.js. The bot responds to /start and /help commands, sticker messages, and the word 'hi'.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Telegraf } = require('telegraf')\nconst { message } = require('telegraf/filters')\n\nconst bot = new Telegraf(process.env.BOT_TOKEN)\nbot.start((ctx) => ctx.reply('Welcome'))\nbot.help((ctx) => ctx.reply('Send me a sticker'))\nbot.on(message('sticker'), (ctx) => ctx.reply('👍'))\nbot.hears('hi', (ctx) => ctx.reply('Hey there'))\nbot.launch()\n\n// Enable graceful stop\nprocess.once('SIGINT', () => bot.stop('SIGINT'))\nprocess.once('SIGTERM', () => bot.stop('SIGTERM'))\n```\n\n----------------------------------------\n\nTITLE: Middleware Implementation in Telegraf\nDESCRIPTION: Shows how to implement middleware in Telegraf with timing functionality and graceful shutdown handling. Demonstrates the use of next() for middleware chaining.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Telegraf } from 'telegraf';\nimport { message } from 'telegraf/filters';\n\nconst bot = new Telegraf(process.env.BOT_TOKEN);\n\nbot.use(async (ctx, next) => {\n  console.time(`Processing update ${ctx.update.update_id}`);\n  await next() // runs next middleware\n  // runs after next middleware finishes\n  console.timeEnd(`Processing update ${ctx.update.update_id}`);\n})\n\nbot.on(message('text'), (ctx) => ctx.reply('Hello World'));\nbot.launch();\n\n// Enable graceful stop\nprocess.once('SIGINT', () => bot.stop('SIGINT'));\nprocess.once('SIGTERM', () => bot.stop('SIGTERM'));\n```\n\n----------------------------------------\n\nTITLE: Telegraf Context Shorthand Methods Example\nDESCRIPTION: Demonstrates the use of Telegraf's context shorthand methods for various bot actions like leaving a chat, replying to messages, and answering callback queries.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Telegraf } from 'telegraf'\nimport { message } from 'telegraf/filters'\n\nconst bot = new Telegraf(process.env.BOT_TOKEN)\n\nbot.command('quit', async (ctx) => {\n  // Explicit usage\n  await ctx.telegram.leaveChat(ctx.message.chat.id)\n\n  // Using context shortcut\n  await ctx.leaveChat()\n})\n\nbot.on(message('text'), async (ctx) => {\n  // Explicit usage\n  await ctx.telegram.sendMessage(ctx.message.chat.id, `Hello ${ctx.state.role}`)\n\n  // Using context shortcut\n  await ctx.reply(`Hello ${ctx.state.role}`)\n})\n\nbot.on('callback_query', async (ctx) => {\n  // Explicit usage\n  await ctx.telegram.answerCbQuery(ctx.callbackQuery.id)\n\n  // Using context shortcut\n  await ctx.answerCbQuery()\n})\n\nbot.on('inline_query', async (ctx) => {\n  const result = []\n  // Explicit usage\n  await ctx.telegram.answerInlineQuery(ctx.inlineQuery.id, result)\n\n  // Using context shortcut\n  await ctx.answerInlineQuery(result)\n})\n\nbot.launch()\n\n// Enable graceful stop\nprocess.once('SIGINT', () => bot.stop('SIGINT'))\nprocess.once('SIGTERM', () => bot.stop('SIGTERM'))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Telegraf Webhooks in TypeScript\nDESCRIPTION: Shows how to set up webhooks for a Telegraf bot in TypeScript, including configuration options for domain, port, path, and secret token.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Telegraf } from \"telegraf\";\nimport { message } from 'telegraf/filters';\n\nconst bot = new Telegraf(token);\n\nbot.on(message(\"text\"), ctx => ctx.reply(\"Hello\"));\n\n// Start webhook via launch method (preferred)\nbot.launch({\n  webhook: {\n    // Public domain for webhook; e.g.: example.com\n    domain: webhookDomain,\n\n    // Port to listen on; e.g.: 8080\n    port: port,\n\n    // Optional path to listen for.\n    // `bot.secretPathComponent()` will be used by default\n    path: webhookPath,\n\n    // Optional secret to be sent back in a header for security.\n    // e.g.: `crypto.randomBytes(64).toString(\"hex\")`\n    secretToken: randomAlphaNumericString,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: File Handling Operations in Telegraf\nDESCRIPTION: Demonstrates various methods of sending files using Telegraf bot, including sending existing files, local files, streams, buffers, and URLs.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbot.on('message', async (ctx) => {\n  // resend existing file by file_id\n  await ctx.replyWithSticker('123123jkbhj6b')\n\n  // send file\n  await ctx.replyWithVideo(Input.fromLocalFile('/path/to/video.mp4'))\n\n  // send stream\n  await ctx.replyWithVideo(\n    Input.fromReadableStream(fs.createReadStream('/path/to/video.mp4'))\n  )\n\n  // send buffer\n  await ctx.replyWithVoice(Input.fromBuffer(Buffer.alloc()))\n\n  // send url via Telegram server\n  await ctx.replyWithPhoto(Input.fromURL('https://picsum.photos/200/300/'))\n\n  // pipe url content\n  await ctx.replyWithPhoto(\n    Input.fromURLStream('https://picsum.photos/200/300/?random', 'kitten.jpg')\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Session Handlers in Telegraf\nDESCRIPTION: Demonstrates how to set up multiple session handlers with different storage backends and custom properties. Shows both default in-memory session and Redis-backed session configuration.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.13.0.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbot.use(session()); // creates ctx.session backed by an in-memory store\n\nbot.use(session({\n  property: \"chatSession\",\n  getSessionKey: ctx => ctx.chat && String(ctx.chat.id),\n  store: Redis({ url: \"redis://127.0.0.1:6379\" });\n})); // creates ctx.chatSession backed by a Redis store\n```\n\n----------------------------------------\n\nTITLE: TypeScript Context Extension in Telegraf\nDESCRIPTION: Example of extending Telegraf's Context type with custom properties using TypeScript interfaces and generics.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context, Telegraf } from 'telegraf'\n\n// Define your own context type\ninterface MyContext extends Context {\n  myProp?: string\n  myOtherProp?: number\n}\n\n// Create your bot and tell it about your context type\nconst bot = new Telegraf<MyContext>('SECRET TOKEN')\n\n// Register middleware and launch your bot as usual\nbot.use((ctx, next) => {\n  // Yay, `myProp` is now available here as `string | undefined`!\n  ctx.myProp = ctx.chat?.first_name?.toUpperCase()\n  return next()\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Telegraf with HTTP Server\nDESCRIPTION: Demonstrates how to integrate a Telegraf bot with an existing HTTP server using createWebhook().\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from \"http\";\n\ncreateServer(await bot.createWebhook({ domain: \"example.com\" })).listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Integrating Telegraf with HTTPS Server\nDESCRIPTION: Shows how to integrate a Telegraf bot with an existing HTTPS server using createWebhook().\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from \"https\";\n\ncreateServer(tlsOptions, await bot.createWebhook({ domain: \"example.com\" })).listen(8443);\n```\n\n----------------------------------------\n\nTITLE: Using Telegraf Filters for Message Handling\nDESCRIPTION: Demonstrates how to use the new filters feature to handle specific types of updates like text messages, channel posts, and callback queries.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.11.0.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// import our filters\nimport { message, editedMessage, channelPost, editedChannelPost, callbackQuery } from \"telegraf/filters\";\n// you can also use require, like this:\n// const { message, editedMessage, channelPost, editedChannelPost, callbackQuery } = require(\"telegraf/filters\");\n\nconst bot = new Telegraf(token);\n\nbot.on(message(\"text\"), ctx => {\n  // this is a text message update\n  // ctx.message.text\n});\n\nbot.on(channelPost(\"video\"), ctx => {\n  // this is a video channel post update\n  // ctx.channelPost.video\n});\n\nbot.on(callbackQuery(\"game_short_name\"), ctx => {\n  // this is a video channel post update\n  // ctx.callbackQuery.game_short_name\n});\n```\n\n----------------------------------------\n\nTITLE: Using ctx.msg to Access Messages in Any Update Type in Telegraf\nDESCRIPTION: Demonstrates how to use the ctx.msg shorthand to access message objects from various update types, with isAccessible and has utility methods.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.use((ctx) => {\n  // finds one of:\n  // ctx.message ?? ctx.editedMessage ?? ctx.callbackQuery?.message ?? ctx.channelPost ?? ctx.editedChannelPost\n  const msg = ctx.msg;\n});\n```\n\n----------------------------------------\n\nTITLE: Using ctx.entities Method to Extract Message Entities in Telegraf\nDESCRIPTION: Shows how to use the ctx.entities method to extract entities from message text, with options to filter by entity type.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.on(\"text\", (ctx) => {\n  // fetch all entities\n  const entities = ctx.entities();\n  // fetch all command entities\n  const commandEntities = ctx.entities(\"bot_command\");\n  // fetch all mentions and text mentions\n  const mentions = ctx.entities(\"mention\", \"text_mention\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using ctx.text to Extract Text from Different Message Types in Telegraf\nDESCRIPTION: Demonstrates how to use the ctx.text property to access text content from different types of messages, including captions for media messages.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.on(message(\"text\"), (ctx) => {\n  // fetch the text from the update\n  const text = ctx.text;\n});\n\nbot.on(message(\"photo\"), (ctx) => {\n  // fetch the caption from the photo\n  const caption = ctx.text;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Input Helpers in Telegraf for File Handling\nDESCRIPTION: Demonstrates how to use the new Input helpers to create InputFile objects from different sources such as local files, buffers, and URLs. This provides a cleaner abstraction for handling file inputs when sending media to Telegram.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.10.0.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Telegraf, Input } from \"telegraf\";\nconst bot = new Telegraf(token);\n\nbot.telegram.sendVideo(chatId, Input.fromLocalFile(\"../assets/cats.mp4\"));\n\nbot.telegram.sendDocument(chatId, Input.fromBuffer(buf));\n\nbot.command(\"cat\", ctx => {\n  ctx.sendPhoto(Input.fromURL(\"https://funny-cats.example/cats.jpg\"))\n});\n```\n\n----------------------------------------\n\nTITLE: Using Formatting Helpers in Telegraf for Text Styling\nDESCRIPTION: Shows how to use the new formatting helpers to style text without manual escaping. The example demonstrates bold, italic, mention, and link formatting using template literals with the fmt function.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.10.0.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { fmt, bold, italics, mention } from \"telegraf/format\";\n\nctx.reply(fmt`\nGround control to ${mention(\"Major Tom\", 10000000)}\n${bold`Lock your Soyuz hatch`} and ${italic`put your helmet on`}\n— ${link(\"David Bowie\", \"https://en.wikipedia.org/wiki/David_Bowie\")}\n`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Session in Telegraf\nDESCRIPTION: Demonstrates the new way to set up default session values using the defaultSession parameter instead of a separate middleware. This approach is cleaner and more efficient for initializing session data.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.12.0.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 🤢 Old way\nbot.use(session());\nbot.use((ctx, next) => {\n  ctx.session ??= { count: 0 };\n  return next();\n});\n\n// 😁 New way ✅\nbot.use(session({ defaultSession: () => ({ count: 0 }) }));\n```\n\n----------------------------------------\n\nTITLE: RegExp Command Matching in Telegraf\nDESCRIPTION: Shows how to use regular expressions for command matching, allowing for case-insensitive command handling. This feature allows more flexible command definitions compared to the traditional string-based approach.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.12.0.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbot.command(\"hello\", ctx => ctx.reply(\"You sent a case-sensitive /hello\"));\nbot.command(/^hello$/i, ctx => ctx.reply(\"You sent a case-insensitive /hELLo\"));\n```\n\n----------------------------------------\n\nTITLE: Using Join Fmt Helper in Telegraf\nDESCRIPTION: Demonstrates the new join fmt helper for combining dynamic arrays into a single FmtString. This example shows how to create a formatted list of bold text items separated by newlines.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.12.0.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fmt, bold, join } from \"telegraf/format\";\n\n// elsewhere\nbot.command(\"/fruits\", async ctx => {\n  const array = [\"Oranges\", \"Apples\", \"Grapes\"];\n  const fruitList = join(array.map(fruit => bold(fruit)), \"\\n\");\n  const msg = fmt`Fruits to buy:\\n${fruitList}`;\n  await ctx.sendMessage(msg);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Composer.reaction for Handling Emoji Reactions in Telegraf\nDESCRIPTION: Shows how to listen for the addition and removal of emoji reactions using Composer.reaction. The handler can detect both standard emoji and custom emoji reactions identified by their IDs.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.reaction(\"👍\", (ctx) => {\n  // user added a 👍 reaction\n});\n\n// prefix with - to listen to reaction removal\nbot.reaction(\"-👍\", (ctx) => {\n  // user removed a 👍 reaction\n});\n```\n\n----------------------------------------\n\nTITLE: Working with ctx.reactions Smart Object in Telegraf\nDESCRIPTION: Demonstrates how to use the ctx.reactions smart object to inspect and manage message reactions. Shows checking for specific reactions, accessing reaction counts, and converting reaction objects to arrays.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.on(\"message_reaction\", async (ctx) => {\n  // remember that ctx.reactions is a smart object, but not an array\n\n  // message has a 👍 reaction\n  ctx.reactions.has(\"👍\");\n\n  // message has a reaction with the given custom emoji ID\n  ctx.reactions.has(\"5368742036629364794\");\n\n  // number of reactions from this user on the message\n  ctx.reaction.count;\n\n  // indexed access is allowed:\n  const first = ctx.reactions[0];\n\n  // the 👍 emoji was added in this update\n  if (ctx.reactions.added.has(\"👍\")) {\n    // user added a 👍 reaction\n    await User.updateOne({ id: ctx.from.id }, { $inc: { likes: 1 } });\n  }\n\n  // the 👍 emoji was removed in this update\n  if (ctx.reactions.removed.has(\"👍\")) {\n    // user removed a 👍 reaction\n    await User.updateOne({ id: ctx.from.id }, { $inc: { likes: -1 } });\n  };\n\n  // to copy any of these smart objects into an array, call the `toArray` method\n  const reactions = ctx.reactions.toArray();\n  const added = ctx.reactions.added.toArray();\n  const removed = ctx.reactions.removed.toArray();\n});\n```\n\n----------------------------------------\n\nTITLE: Command Argument Parsing in Telegraf\nDESCRIPTION: Shows how to access parsed command arguments using ctx.args, ctx.command, and ctx.payload in command handlers. Demonstrates the new command parsing functionality.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.13.0.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// User sends /warn --delete \"Offtopic chat\"\n\nbot.command(\"warn\", async ctx => {\n  ctx.args; // [ \"--delete\", \"Offtopic chat\" ]\n\n  ctx.command; // [ \"warn\" ]\n  ctx.payload; // \"--delete \\\"Offtopic chat\\\"\"\n});\n```\n\n----------------------------------------\n\nTITLE: Mixed Filter Arrays in Telegraf\nDESCRIPTION: Demonstrates how to use arrays of mixed update types and filters for both bot.on and ctx.has methods.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.11.0.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// match a message update or a callbackQuery with data present\nbot.on([\"message\", callbackQuery(\"data\")], handler);\n\nif (ctx.has([\"message\", callbackQuery(\"data\")])) {\n  // ctx.update is a message update or a callbackQuery with data present\n};\n```\n\n----------------------------------------\n\nTITLE: Using ctx.has Filter Method in Telegraf\nDESCRIPTION: Shows how to use the new ctx.has method to filter updates within a handler, allowing for more granular control over update processing.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.11.0.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// handles all updates\nbot.use(ctx => {\n  if (ctx.has(message(\"text\"))) {\n    // handles only text messages\n    // ctx.message.text;\n  } else {\n    // handles all other messages\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling with bot.launch in Telegraf\nDESCRIPTION: Shows how to catch and handle polling errors when using bot.launch method in both promise and async/await syntax.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.11.0.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbot.launch().catch(e => {\n  // polling has errored\n});\n\n// You an also use await and try/catch if you're using ESM\n```\n\n----------------------------------------\n\nTITLE: Using anyOf and allOf Filter Combinators in Telegraf (TypeScript)\nDESCRIPTION: Demonstrates how to use the new 'anyOf' and 'allOf' filter combinators in Telegraf v4.14.0. These combinators allow for more complex filtering of updates based on multiple conditions.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.15.0.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { anyOf, allOf } from \"telegraf/filters\";\n\n// must match all filters\nbot.on(allOf(message(), isGroup), ctx => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Emoji Reactions in Telegraf\nDESCRIPTION: Demonstrates how to listen for the addition and removal of custom emoji reactions using their unique IDs with Composer.reaction.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.reaction(\"5368742036629364794\", (ctx) => {\n  // user added a reaction with the given custom emoji ID\n});\n\nbot.reaction(\"-5368742036629364794\", (ctx) => {\n  // user removed a reaction with the given custom emoji ID\n});\n```\n\n----------------------------------------\n\nTITLE: Using ctx.react to Add Emoji Reactions in Telegraf\nDESCRIPTION: Shows how to add an emoji reaction to a message using the ctx.react method.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.on(\"text\", async (ctx) => {\n  await ctx.react(\"👍\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Emoji Reactions with ctx.react in Telegraf\nDESCRIPTION: Demonstrates how to add a custom emoji reaction to a message using its ID with the ctx.react method.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.on(\"text\", async (ctx) => {\n  await ctx.react(\"5368742036629364794\");\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Fragments from Message Entities in Telegraf\nDESCRIPTION: Shows how to access the actual text fragments that entities represent using the entity.fragment property.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.on(\"text\", (ctx) => {\n  const entities = ctx.entities(\"bold\");\n  for (const entity of entities) {\n    // the text that is bold\n    const boldText = entity.fragment;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using ctx.msg.isAccessible and ctx.msg.has Methods in Telegraf\nDESCRIPTION: Shows how to check if a message is accessible and if it contains specific properties using the isAccessible and has methods on the ctx.msg object.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (ctx.msg.isAccessible()) {\n  // msg is accessible, not deleted or otherwise unavailable\n  // this is a type-guard based on the runtime check for msg.date === 0\n}\n\nif (ctx.msg.has(\"text\")) {\n  // ctx.msg.text exists\n}\n```\n\n----------------------------------------\n\nTITLE: Using ctx.msgId to Access Message IDs in Telegraf\nDESCRIPTION: Shows how to use the ctx.msgId shorthand to access message IDs from various update types, including those that don't contain a full message object.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.use((ctx) => {\n  // finds one of:\n  // ctx.msg.message_id ?? ctx.messageReaction.message_id ?? ctx.messageReactionCount.message_id\n  const msgId = ctx.msgId;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Launch Callback in Telegraf Bot\nDESCRIPTION: Demonstrates how to use the onLaunch callback with bot.launch to execute code when the bot starts successfully.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.launch(() => console.log(\"Bot is starting!\"));\n```\n\n----------------------------------------\n\nTITLE: Using Launch Callback with Options in Telegraf Bot\nDESCRIPTION: Shows how to use the onLaunch callback with bot.launch while also providing launch options like dropPendingUpdates.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.16.0.md#2025-04-19_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.launch({ dropPendingUpdates: true }, () => console.log(\"Bot is starting!\"));\n```\n\n----------------------------------------\n\nTITLE: Alternative Telegraf Bot Setup in JavaScript\nDESCRIPTION: Shows an alternative way to set up a Telegram bot using Telegraf.js, demonstrating the use of command handlers and the Telegraf.reply method.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Telegraf } = require('telegraf')\n\nconst bot = new Telegraf(process.env.BOT_TOKEN)\nbot.command('oldschool', (ctx) => ctx.reply('Hello'))\nbot.command('hipster', Telegraf.reply('λ'))\nbot.launch()\n\n// Enable graceful stop\nprocess.once('SIGINT', () => bot.stop('SIGINT'))\nprocess.once('SIGTERM', () => bot.stop('SIGTERM'))\n```\n\n----------------------------------------\n\nTITLE: Updated Start Command Payload Access\nDESCRIPTION: Shows the migration from deprecated ctx.startPayload to the new ctx.payload property in start command handlers.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.13.0.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbot.start(ctx => {\n- console.log(ctx.startPayload);\n+ console.log(ctx.payload);\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Usage of Args Parser Utility\nDESCRIPTION: Demonstrates how to use the argsParser utility function directly for parsing command arguments outside of command handlers.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.13.0.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { argsParser } from \"telegraf/utils\";\n\n// do not include the /command part!\nargsParser('--delete \"Offtopic chat\"'); // [ \"--delete\", \"Offtopic chat\" ]\n```\n\n----------------------------------------\n\nTITLE: Importing Telegraf Types\nDESCRIPTION: Shows how to import types from the new @telegraf/types package through Telegraf without additional dependencies.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.13.0.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Update } from \"telegraf/types\";\n```\n\n----------------------------------------\n\nTITLE: Using Formatting Helpers with Photo Captions in Telegraf\nDESCRIPTION: Demonstrates how to use the formatting helpers with photo captions, showing that the formatting system works seamlessly with media captions as well as regular text messages.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.10.0.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nctx.replyWithPhoto(\n  file.id,\n  { caption: fmt`${bold`File name:`} ${file.name}` },\n);\n```\n\n----------------------------------------\n\nTITLE: Using fmt Template Literal with Mixed Types in TypeScript\nDESCRIPTION: Demonstrates the enhanced fmt template literal functionality that now accepts any type instead of just strings. The example shows usage with numeric variables and nested template literals using the bold function.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.10.1.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfmt`${bold`Analytics`}\nCurrent pro users: ${total}\nAvailable redeem codes: ${codesCount}`\n```\n\n----------------------------------------\n\nTITLE: Importing Convenience Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to import Telegraf's convenience types, such as the Extra* parameter types, which are now exported experimentally.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.9.0.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Convenience } from \"telegraf/types\"\n```\n\n----------------------------------------\n\nTITLE: Importing New Middleware in TypeScript\nDESCRIPTION: This code shows how to import the new useNewReplies middleware, which changes the behavior of Context::reply* methods to reply to the context message.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/release-notes/4.9.0.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNewReplies } from telegraf/future\n```\n\n----------------------------------------\n\nTITLE: Installing Telegraf.js via npm\nDESCRIPTION: Command to install Telegraf.js using npm package manager.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shellscript\nCODE:\n```\n$ npm install telegraf\n```\n\n----------------------------------------\n\nTITLE: Installing Telegraf.js via yarn\nDESCRIPTION: Command to install Telegraf.js using yarn package manager.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shellscript\nCODE:\n```\n$ yarn add telegraf\n```\n\n----------------------------------------\n\nTITLE: Installing Telegraf.js via pnpm\nDESCRIPTION: Command to install Telegraf.js using pnpm package manager.\nSOURCE: https://github.com/telegraf/telegraf/blob/v4/README.md#2025-04-19_snippet_4\n\nLANGUAGE: shellscript\nCODE:\n```\n$ pnpm add telegraf\n```"
  }
]