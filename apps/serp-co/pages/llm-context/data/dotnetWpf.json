[
  {
    "owner": "dotnet",
    "repo": "wpf",
    "content": "TITLE: Enabling Fluent theme via ResourceDictionary in App.xaml (XML)\nDESCRIPTION: This XML snippet demonstrates how to enable the Fluent theme for the entire WPF application by including the Fluent theme ResourceDictionary in the App.xaml file.  This approach applies the Fluent theme to all windows within the application.  The `Source` attribute specifies the location of the `Fluent.xaml` file within the `PresentationFramework.Fluent` assembly.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Application \n    x:Class=\"YourSampleApplication.App\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"clr-namespace:YourSampleApplication\">\n    <Application.Resources>\n        <ResourceDictionary Source=\"pack://application:,,,/PresentationFramework.Fluent;component/Themes/Fluent.xaml\" />\n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Enabling Fluent Light/Dark Mode via ResourceDictionary (XML)\nDESCRIPTION: These XML snippets demonstrate how to enable either the Fluent Light or Dark theme by including the corresponding ResourceDictionary in either App.xaml or Window.xaml. These snippets override the system theme.  Including `Fluent.Light.xaml` forces the Light theme, while `Fluent.Dark.xaml` forces the Dark theme.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <!-- For Fluent Light mode -->\n    <ResourceDictionary Source=\"pack://application:,,,/PresentationFramework.Fluent;component/Themes/Fluent.Light.xaml\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n    <!-- For Fluent Dark mode -->\n    <ResourceDictionary Source=\"pack://application:,,,/PresentationFramework.Fluent;component/Themes/Fluent.Dark.xaml\" />\n```\n\n----------------------------------------\n\nTITLE: Defining ToolTipService Keyboard Focus Properties in WPF (C#)\nDESCRIPTION: This snippet demonstrates the addition of the ShowsToolTipOnKeyboardFocusProperty dependency property in the ToolTipService class, along with associated getter and setter methods to control whether keyboard focus causes a tooltip to display. Requires System.Windows.DependencyObject and DependencyProperty. Inputs are a DependencyObject for the context and an optional boolean specifying the desired behavior. The property can be accessed or set using the static GetShowsToolTipOnKeyboardFocus and SetShowsToolTipOnKeyboardFocus methods.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/tooltip.md#_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nclass ToolTipService\n{\n    public static DependencyProperty ShowsToolTipOnKeyboardFocusProperty;\n    public static bool? GetShowsToolTipOnKeyboardFocus(DependencyObject d);\n    public static void SetShowsToolTipOnKeyboardFocus(DependencyObject d, bool? value);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Fluent theme via ResourceDictionary in Window.xaml (XML)\nDESCRIPTION: This XML snippet demonstrates how to enable the Fluent theme for a specific WPF window by including the Fluent theme ResourceDictionary in the Window's XAML file. This allows applying the Fluent theme to individual windows. The `Source` attribute specifies the location of the `Fluent.xaml` file within the `PresentationFramework.Fluent` assembly.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Window\n    x:Class=\"YourSampleApplication.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:local=\"clr-namespace:YourSampleApplication\"\n    mc:Ignorable=\"d\"\n    Title=\"MainWindow\" Height=\"450\" Width=\"800\">\n    <Window.Resources>\n        <ResourceDictionary Source=\"pack://application:,,,/PresentationFramework.Fluent;component/Themes/Fluent.xaml\" />\n    </Window.Resources>\n    <Grid>\n\n    </Grid>\n</Window>\n```\n\n----------------------------------------\n\nTITLE: Publishing Self-Contained .NET Application (CLI)\nDESCRIPTION: Publishes a .NET application as self-contained using the `dotnet publish` command. The `-r <rid>` specifies the runtime identifier (e.g., `win-x86`, `win-x64`), which is necessary for architecture-dependent WPF applications. `--self-contained` bundles the required .NET runtime, making the application runnable without a global .NET installation.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_4\n\nLANGUAGE: dotnet-cli\nCODE:\n```\ndotnet publish -r <rid> --self-contained\n```\n\n----------------------------------------\n\nTITLE: Assigning Package Name for MSBuild Project\nDESCRIPTION: This MSBuild snippet, typically found in Packaging.props, demonstrates how to configure which package an assembly project belongs to. It sets the PackageName property conditionally based on the project's name (MSBuildProjectName), directing the packaging process.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/packaging.md#_snippet_0\n\nLANGUAGE: MSBuild\nCODE:\n```\n<PackageName Condition=\"'$(MSBuildProjectName)'=='WpfGfx'\">$(DncEngTransportPackageName)</PackageName>\n```\n\n----------------------------------------\n\nTITLE: Defining HeadingLevelProperty Field in C#\nDESCRIPTION: This C# code defines a static read-only `DependencyProperty` field named `HeadingLevelProperty` within the `AutomationProperties` class. This field identifies the attached property used to get or set the heading level of an element. It is used by UI Automation for accessibility purposes.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly System.Windows.DependencyProperty HeadingLevelProperty;\n```\n\n----------------------------------------\n\nTITLE: List of Redistributed DLLs\nDESCRIPTION: Lists the two external runtime assemblies, `vcruntime140.dll` and `d3dcompiler_47.dll`, that are redistributed with WPF for .NET Core to ensure application functionality without requiring separate installations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/redistributables.md#_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n- vcruntime140.dll\n- d3dcompiler_47.dll\n```\n\n----------------------------------------\n\nTITLE: Displaying WPF DRT Test Results (Console)\nDESCRIPTION: Shows the typical console output after running the WPF DRTs using `build.cmd -test`, summarizing the number of tests processed and their results (Passed, Failed, Ignored). This helps users interpret the outcome of their test runs and identify if analysis or debugging is needed.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  A total of 1 test Infos were processed, with the following results.\n   Passed: 1\n   Failed (need to analyze): 0\n   Failed (with BugIDs): 0\n   Ignore: 0\n\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationEventArgs Class in C#\nDESCRIPTION: This C# code defines the `NotificationEventArgs` class, which inherits from `AutomationEventArgs`. This class provides data for the `NotificationEvent`, including the notification kind, processing order, display string, and activity ID. It's used to pass event-specific information to event handlers.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class NotificationEventArgs : AutomationEventArgs\n```\n\n----------------------------------------\n\nTITLE: Configuring WPF Assembly References for API Change Testing in MSBuild Project File (XML)\nDESCRIPTION: This XML snippet demonstrates how to update a .NET MSBuild project file to reference locally built WPF assembly binaries for testing API changes. It shows property groups to define the repository root, build configuration, output folder, self-contained publishing flag, and runtime identifier, as well as item groups to include DLL references and native binaries from local packaging paths. This setup ensures the test app uses the newer locally built assemblies instead of installed ones, facilitating debugging and testing of API changes.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n    <!-- Change this value based on where your local repo is located -->\n    <WpfRepoRoot>d:\\dev\\src\\dotnet\\wpf</WpfRepoRoot>\n    <!-- Change based on which assemblies you build (Release/Debug) -->\n    <WpfConfig>Debug</WpfConfig>\n    <WpfOuputFolder>Microsoft.DotNet.Wpf.GitHub.Debug</WpfOuputFolder>\n    <!-- Publishing a self-contained app ensures our binaries are used. -->\n    <SelfContained>true</SelfContained>\n    <!-- The runtime identifier needs to match the architecture you built WPF assemblies for. -->\n    <RuntimeIdentifier>win-x86</RuntimeIdentifier>\n  </PropertyGroup>\n  <ItemGroup>\n    <Reference Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\$(WpfConfig)\\$(WpfOuputFolder)\\lib\\net6.0\\*.dll\" />\n    <ReferenceCopyLocalPaths Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\$(WpfConfig)\\$(WpfOuputFolder)\\lib\\$(RuntimeIdentifier)\\*.dll\" />\n    <ReferenceCopyLocalPaths Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\$(WpfConfig)\\$(WpfOuputFolder)\\runtimes\\$(RuntimeIdentifier)\\native\\*.dll\" />\n  </ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing ShowsToolTipOnKeyboardFocus Property in ToolTip (C#)\nDESCRIPTION: This snippet adds a nullable boolean property ShowsToolTipOnKeyboardFocus to the ToolTip class, allowing instance-level configuration of whether the tooltip should show on keyboard input focus. This API is part of the modern WPF toolset and is dependent on the context being a ToolTip control. Set or get this property to enable or disable keyboard-triggered tooltip display for individual tooltips.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/tooltip.md#_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nclass ToolTip\n{\n    public bool? ShowsToolTipOnKeyboardFocus { get; set; }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining ToolTip.ShowsToolTipOnKeyboardFocus Property in C#\nDESCRIPTION: Defines the `ShowsToolTipOnKeyboardFocus` property for the `ToolTip` class as a nullable boolean (`bool?`). This property, when set on a ToolTip element, contributes to determining whether the tooltip appears when its parent element acquires keyboard focus, working in conjunction with the corresponding attached property (`ToolTipService.ShowsToolTipOnKeyboardFocus`) on the parent.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/tooltip.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    public bool? ShowsToolTipOnKeyboardFocus { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Using SystemColors AccentColor Brushes in WPF XAML\nDESCRIPTION: Demonstrates how to refer to WPF SystemColors accent color brushes directly in XAML using DynamicResource and StaticResource references, enabling customization of UI elements without Fluent theme. Dependencies include WPF framework and system resource keys related to accent colors. Inputs are resource keys; outputs are brushes applied to Border backgrounds for consistent accent theming.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<StackPanel Orientation=\"Horizontal\" Height=\"50\">\n    <StackPanel.Resources>\n        <Style TargetType=\"Border\">\n            <Setter Property=\"Height\" Value=\"50\" />\n            <Setter Property=\"Width\" Value=\"30\" />\n        </Style>\n    </StackPanel.Resources>\n    <Border CornerRadius=\"2 0 0 2\" Background=\"{DynamicResource {x:Static SystemColors.AccentColorDark3BrushKey}}\" />\n    <Border Background=\"{DynamicResource {x:Static SystemColors.AccentColorDark2BrushKey}}\" />\n    <Border Background=\"{DynamicResource {x:Static SystemColors.AccentColorDark1BrushKey}}\" />\n    <Border Background=\"{DynamicResource {x:Static SystemColors.AccentColorBrushKey}}\" />\n    <Border Background=\"{DynamicResource {x:Static SystemColors.AccentColorLight1BrushKey}}\" />\n    <Border Background=\"{DynamicResource {x:Static SystemColors.AccentColorLight2BrushKey}}\" />\n    <Border CornerRadius=\"0 2 2 0\" Background=\"{DynamicResource {x:Static SystemColors.AccentColorLight3BrushKey}}\" />\n</StackPanel>\n```\n\n----------------------------------------\n\nTITLE: T4 Template Incorrect Multi-line Code Block Example\nDESCRIPTION: Shows the incorrect way to format multi-line code blocks in T4 templates, where the opening and closing tags are not on separate lines.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/codegen.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<# string helloWorld = \" Hello World \";\n   helloWorld = helloWorld.Trim(); #>\n<#= hellowWorld #>\n```\n\n----------------------------------------\n\nTITLE: Defining AutomationNotificationProcessing Enum in C#\nDESCRIPTION: This C# code defines the `AutomationNotificationProcessing` enum. This enum specifies the order in which notifications should be processed, allowing developers to prioritize or manage how notifications are presented to the user. Values include options for processing all notifications, only the most recent, or handling current notifications before others.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic enum AutomationNotificationProcessing\n{\n    ImportantAll,\n    ImportantMostRecent,\n    All,\n    MostRecent,\n    CurrentThenMostRecent\n}\n```\n\n----------------------------------------\n\nTITLE: Resource IDs for PresentationBuildTasks (WPF Localization)\nDESCRIPTION: Lists resource ID constants and their string values for the WPF PresentationBuildTasks component. These values were previously stored in .resx files and are now defined as constants, primarily used for identifying localized strings related to build tasks.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/localization_untranslated_strings.md#_snippet_0\n\nLANGUAGE: Markdown Table\nCODE:\n```\n| ResourceID | Value |\n| --------------|------------- |\n| FileClassifierTask | \"FileClassifier\" |\n| GetWinFXPathTask | \"GetWinFXPath\" |\n| MarkupCompilePass1Task | \"MarkupCompilePass1\" |\n| MarkupCompilePass2Task | \"MarkupCompilePass2\" |\n| MergeLocalizationDirectivesTask | \"MergeLocalizationDirectives\" |\n| ResourcesGeneratorTask | \"ResourcesGenerator\" |\n| UidManagerTask | \"UidManager\" |\n| UpdateManifestForBrowserApplicationTask | \"UpdateManifestForBrowserApplication\" |\n```\n\n----------------------------------------\n\nTITLE: Fixing RuntimeIdentifier Error by Adding PlatformTarget Property in .csproj File (XML)\nDESCRIPTION: This XML snippet shows how to fix the common build error NETSDK1083 related to an unrecognized RuntimeIdentifier by adding a PlatformTarget property to your .csproj file. Setting the PlatformTarget value (e.g., x86) explicitly matches the architecture used by the WPF binaries, ensuring proper assembly resolution and build success when targeting WPF applications with specific runtime architectures.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n  <OutputType>WinExe</OutputType>\n  <TargetFramework>net6.0-windows</TargetFramework>\n  <UseWPF>true</UseWPF>\n  <PlatformTarget>x86</PlatformTarget>\n</PropertyGroup>\n\n<PropertyGroup>\n  <WpfRepoRoot>C:\\wpf</WpfRepoRoot>\n</PropertyGroup>\n<Import Project=\"$(WpfRepoRoot)\\eng\\wpf-debug.targets\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring the ActiveTextPositionChangedEvent Field in AutomationElementIdentifiers (C#)\nDESCRIPTION: Declares a public, static, read-only field that identifies a specific AutomationEvent used within the UI Automation infrastructure for text position changes. This field should be used by UI Automation providers to raise or reference the 'active text position changed' event. It requires a reference to UIAutomationTypes.dll. The field's value is of type AutomationEvent and is intended to be unique within the automation event schema.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_42\n\nLANGUAGE: c#\nCODE:\n```\npublic static readonly AutomationEvent ActiveTextPositionChangedEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayString Property in C#\nDESCRIPTION: This C# code defines the `DisplayString` property within the `NotificationEventArgs` class. This property gets the display string of the notification, which is a string describing the event. It's a read-only property, providing access to the display string associated with the event.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic string DisplayString { get; }\n```\n\n----------------------------------------\n\nTITLE: Getting AutomationProperties.IsDialog\nDESCRIPTION: This method, `GetIsDialog`, retrieves the `IsDialog` attached property for a specified `DependencyObject`.  The `element` parameter specifies the `DependencyObject` and the return value is a `Boolean`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\npublic static bool GetIsDialog(System.Windows.DependencyObject element);\n```\n\n----------------------------------------\n\nTITLE: Overriding IsDialogCore in WindowAutomationPeer\nDESCRIPTION: This method overrides `IsDialogCore` to provide the dialog status for a window. It is called by `IsDialog()` and returns a `Boolean`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nprotected override bool IsDialogCore();\n```\n\n----------------------------------------\n\nTITLE: Setting ThemeMode in code-behind (C#)\nDESCRIPTION: This C# snippet demonstrates how to set the `ThemeMode` property from code-behind after suppressing the WPF0001 warning.  It shows setting the theme on both the Application and Window levels using the `ThemeMode` enum values. The ThemeMode API is experimental and may be subject to change.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n    // Sets Fluent theme on Application level\n    Application.Current.ThemeMode = ThemeMode.Light;\n\n    // Sets Fluent theme on one Window\n    window.ThemeMode = ThemeMode.System;\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a New WPF Application with .NET CLI\nDESCRIPTION: This command sequence creates a new WPF application using the .NET CLI, navigates to the project directory, and runs the application. It demonstrates the basic workflow for starting a new WPF project on .NET.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/getting-started.md#_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ndotnet new wpf -o MyWPFApp\ncd MyWPFApp\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Setting Microsoft.WindowsDesktop.App Runtime Version in *.runtimeconfig.json for Non-Source Builds (JSON)\nDESCRIPTION: This JSON snippet configures the runtime options for a .NET Core application to specify the exact version of Microsoft.WindowsDesktop.App shared runtime to use at execution time, especially useful if you cannot build from source. Modifying the runtimeconfig.json file located alongside the executable overrides the default runtime version selection to the specified preview build. This helps test application behavior against specific runtime versions without rebuilding.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"runtimeOptions\": {\n    \"tfm\": \"netcoreapp3.0\",\n    \"framework\": {\n      \"name\": \"Microsoft.WindowsDesktop.App\",\n      \"version\": \"3.0.0-preview5-27619-18\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Automation-Related Enums, Properties, and Methods in System.Windows.Automation (C#)\nDESCRIPTION: Declares several enums defining heading levels and notification types for automation (AutomationHeadingLevel, AutomationNotificationKind, AutomationNotificationProcessing), static properties/methods within AutomationProperties, as well as event and property fields within AutomationElement and AutomationElementIdentifiers. These API signatures define the new automation events, accessibility properties, and event argument structures, supporting richer UI Automation integration. Requires UIAutomationTypes.dll and correct understanding of dependency properties and event schema.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_46\n\nLANGUAGE: c#\nCODE:\n```\nnamespace System.Windows.Automation\n{\n    public enum AutomationHeadingLevel\n    {\n        None,\n        Level1, \n        Level2, \n        Level3, \n        Level4, \n        Level5, \n        Level6, \n        Level7, \n        Level8, \n        Level9 \n    }\n\n    public enum AutomationNotificationKind\n    {\n        ItemAdded, \n        ItemRemoved, \n        ActionCompleted, \n        ActionAborted, \n        Other\n    }\n\n    public enum AutomationNotificationProcessing\n    {\n        ImportantAll,\n        ImportantMostRecent,\n        All,\n        MostRecent,\n        CurrentThenMostRecent\n    }\n\n    public class AutomationProperties\n    {\n        public static readonly DependencyProperty HeadingLevelProperty;\n        public static AutomationHeadingLevel GetHeadingLevel(DependencyObject element);\n        public static void SetHeadingLevel(DependencyObject element, AutomationHeadingLevel value);\n\n        public static readonly DependencyProperty IsDialogProperty;\n        public static bool GetHeadingLevel(DependencyObject element);\n        public static void SetIsDialog(DependencyObject element, bool value);\n   }\n\n   public class AutomationElement\n   {\n       public static readonly AutomationProperty HeadingLevelProperty;\n       public static readonly AutomationProperty IsDialogProperty;\n       public static readonly AutomationEvent NotificationEvent;\n       public static readonly AutomationEvent ActiveTextPositionChangedEvent;\n   }\n\n   public class AutomationElementIdentifiers\n   {\n       public static readonly AutomationProperty HeadingLevelProperty;\n       public static readonly AutomationProperty IsDialogProperty;\n       public static readonly AutomationEvent NotificationEvent;\n       public static readonly AutomationEvent ActiveTextPositionChangedEvent;\n   }\n\n   public sealed class NotificationEventArgs : AutomationEventArgs\n   {\n       public NotificationEventArgs(\n                AutomationNotificationKind notificationKind,\n                AutomationNotificationProcessing notificationProcessing,\n                string displayString,\n                string activityId);\n        public AutomationNotificationKind NotificationKind { get; }\n        public AutomationNotificationProcessing NotificationProcessing { get; }\n        public string DisplayString { get; }\n        public string ActivityId { get; }\n   }\n\n   public sealed class ActiveTextPositionChangedEventArgs : AutomationEventArgs\n   {\n        public ActiveTextPositionChangedEventArgs(\n                ITextRangeProvider textRange);\n        public ITextRangeProvider TextRange { get; }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding IsDialogCore in AutomationPeer\nDESCRIPTION: This code defines a virtual method, `IsDialogCore`, which is called by `IsDialog()`. It needs to be overridden in a derived class to provide the dialog status. The method returns a `Boolean`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nprotected virtual bool IsDialogCore();\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationKind Property in C#\nDESCRIPTION: This C# code defines the `NotificationKind` property within the `NotificationEventArgs` class. This property gets the type of notification, represented by a value from the `AutomationNotificationKind` enum. It's a read-only property, providing access to the notification type associated with the event.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic AutomationNotificationKind NotificationKind { get; }\n```\n\n----------------------------------------\n\nTITLE: Getting the TextRange Property from ActiveTextPositionChangedEventArgs (C#)\nDESCRIPTION: This property getter returns the associated ITextRangeProvider where the text change occurred. It enables both event listeners and handlers to access detailed information about the affected text segment during an event. If the property is null, the entire document or provider is implied. Requires types defined in UIAutomationTypes.dll and is accessed via an event argument instance.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_45\n\nLANGUAGE: c#\nCODE:\n```\npublic ITextRangeProvider TextRange { get; }\n```\n\n----------------------------------------\n\nTITLE: Overriding GetHeadingLevelCore in AutomationPeer\nDESCRIPTION: This code defines a virtual method `GetHeadingLevelCore` that must be overridden in a derived class.  It is called by `GetHeadingLevel()` to retrieve the heading level.  The method does not take any parameters and returns an `AutomationHeadingLevel`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nprotected virtual AutomationHeadingLevel GetHeadingLevelCore();\n```\n\n----------------------------------------\n\nTITLE: Setting ThemeMode on Application in App.xaml (XML)\nDESCRIPTION: This XML snippet shows how to set the `ThemeMode` property on the `Application` object in App.xaml. This enables the Fluent theme at the application level and can be set to `Dark`, `Light`, `System`, or `None`. Requires .NET 9.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Application \n    x:Class=\"YourSampleApplication.App\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"clr-namespace:YourSampleApplication\"\n    ThemeMode=\"Dark\">\n    <Application.Resources>\n    \n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Customizing Command Line Argument Parsing with Attributes in C#\nDESCRIPTION: Shows how to customize command line argument parsing by adding the DefaultCommandLineArgument attribute to a string array field, allowing omission of explicit argument names for that field on the command line. This snippet modifies the WCArguments class so that files can be passed positionally without /files: prefixes. It relies on Utilities.Utility supporting the DefaultCommandLineArgument attribute to control parsing behavior for a single field. The Main method remains the same, using ParseCommandLineArguments and CommandLineArgumentsUsage. Input arguments like '/lines foo bar' set lines to true and files to ['foo', 'bar'].\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/WpfGfx/codegen/mcg/main/cmdline/readme.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nclass WCArguments\n{\n    public bool lines;\n    public bool words;\n    public bool chars;\n    [Utilities.Utility.DefaultCommandLineArgument]\n    public string[] files;\n}\n\nclass WC\n{\n    static void Main(string[] args)\n    {\n        WCArguments parsedArgs = new WCArguments();\n        if (!Utilities.Utility.ParseCommandLineArguments(args, parsedArgs)) \n        {\n            // error encountered in arguments. Display usage message\n            System.Console.Write(Utilities.Utility.CommandLineArgumentsUsage(typeof(WCArguments)));\n        }\n        else\n        {\n            // insert application code here\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ActiveTextPositionChangedEventArgs Class for UI Automation Events (C#)\nDESCRIPTION: This sealed class represents the event data for an ActiveTextPositionChangedEvent, inheriting from AutomationEventArgs. The class provides context for the event, most commonly used by UI Automation providers or custom frameworks responding to text position changes in controls. Consumers must ensure they pass/handle only valid AutomationEventArgs-derived objects. Requires references to UIAutomationTypes.dll and related event argument definitions.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_43\n\nLANGUAGE: c#\nCODE:\n```\npublic sealed class ActiveTextPositionChangedEventArgs : AutomationEventArgs\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample App for WPF Debugging (XML)\nDESCRIPTION: Shows the necessary XML lines to add to a sample application's `.csproj` or `.vbproj` file. This configuration imports the `wpf-debug.targets` file from the local WPF repository, which helps the sample application use the locally built WPF assemblies instead of the installed ones, enabling debugging. It requires defining the `WpfRepoRoot` property pointing to the local repository path.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n    <PropertyGroup>\n      <OutputType>WinExe</OutputType>\n      <TargetFramework>net6.0-windows</TargetFramework>\n      <UseWPF>true</UseWPF>\n    </PropertyGroup>\n\n    <PropertyGroup>\n      <WpfRepoRoot>C:\\wpf</WpfRepoRoot>\n    </PropertyGroup>\n    <Import Project=\"$(WpfRepoRoot)\\eng\\wpf-debug.targets\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring IsDialogProperty (AutomationElementIdentifiers)\nDESCRIPTION: This code defines a static read-only field, `IsDialogProperty`, of type `AutomationProperty` within the `AutomationElementIdentifiers` class. It identifies the `IsDialog` property for use by UI Automation providers. UI Automation client applications should use the equivalent field from `AutomationElement`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly System.Windows.Automation.AutomationProperty IsDialogProperty;\n```\n\n----------------------------------------\n\nTITLE: Defining SetHeadingLevel Method in C#\nDESCRIPTION: This C# code defines the `SetHeadingLevel` method within the `AutomationProperties` class. This method sets the value of the `HeadingLevel` attached property for a given `DependencyObject`. This allows setting the heading level for UI elements during automation, influencing how assistive technologies interpret the UI structure.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic static void SetHeadingLevel(System.Windows.DependencyObject element, System.Windows.Automation.AutomationHeadingLevel value);\n```\n\n----------------------------------------\n\nTITLE: Extending AutomationEvents Enum and Peer Classes in System.Windows.Automation.Peers (C#)\nDESCRIPTION: Adds Notification and ActiveTextPositionChanged enumeration values to AutomationEvents and introduces new or overridden methods and properties for event raising and querying heading/dialog status in peer classes. These definitions enable peer implementers to handle new automation events and properties consistently, per WPF and UIA guidelines. Libraries required include UIAutomationTypes.dll and appropriate peer base classes from the WPF framework.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_47\n\nLANGUAGE: c#\nCODE:\n```\nnamespace System.Windows.Automation.Peers\n{\n    public enum AutomationEvents\n    {\n        (... previously defined values...),\n        Notification = 19,\n        ActiveTextPositionChanged = 20,\n    }\n\n    public class AutomationPeer\n    {\n        public AutomationHeadingLevel GetHeadingLevel();\n        protected virtual AutomationHeadingLevel GetHeadingLevelCore();\n\n        public bool IsDialog();\n        protected virtual bool IsDialogCore();\n\n        public void RaiseNotificationEvent(\n                      AutomationNotificationKind notificationKind,\n                      AutomationNotificationProcessing notificationProcessing,\n                      string displayString,\n                      string activityId);\n    }\n\n    public class ContentElementAutomationPeer\n    {\n        protected override AutomationHeadingLevel GetHeadingLevelCore();\n        protected override bool IsDialogCore();\n    }\n\n    public class UIElementAutomationPeer\n    {\n        protected override AutomationHeadingLevel GetHeadingLevelCore();\n        protected override bool IsDialogCore();\n    }\n\n    public class UIElement3DAutomationPeer\n    {\n        protected override AutomationHeadingLevel GetHeadingLevelCore();\n        protected override bool IsDialogCore();\n     }\n\n    public class DataGridCellItemAutomationPeer\n    {\n        protected override AutomationHeadingLevel GetHeadingLevelCore();\n        protected override bool IsDialogCore();\n    }\n\n    public class DateTimeAutomationPeer\n    {\n        protected override AutomationHeadingLevel GetHeadingLevelCore();\n        protected override bool IsDialogCore();\n    }\n\n    public class ItemAutomationPeer\n    {\n        protected override AutomationHeadingLevel GetHeadingLevelCore();\n        protected override bool IsDialogCore();\n    }\n\n    public class WindowAutomationPeer\n    {\n        protected override bool IsDialogCore();\n    }\n\n    public class ContentTextAutomationPeer\n    {\n        public virtual void RaiseActiveTextPositionChangedEvent(\n                    TextPointer rangeStart,\n                    TextPointer rangeEnd);\n    }\n\n    public class TextAutomationPeer\n    {\n        public virtual void RaiseActiveTextPositionChangedEvent(\n                    TextPointer rangeStart,\n                    TextPointer rangeEnd);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HeadingLevelProperty Field in AutomationElement C#\nDESCRIPTION: This C# code defines a static read-only `AutomationProperty` field named `HeadingLevelProperty` within the `AutomationElement` class. This identifier is for use by UI Automation client applications. UI Automation providers should use the equivalent field from AutomationElementIdentifiers.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly System.Windows.Automation.AutomationProperty HeadingLevelProperty;\n```\n\n----------------------------------------\n\nTITLE: Defining RaiseNotificationEvent Method in C#\nDESCRIPTION: This C# code defines the `RaiseNotificationEvent` method within the `AutomationPeer` class. This method is used to initiate a notification event that can be handled by UI Automation clients. It accepts parameters for the notification kind, processing order, display string, and activity ID.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void RaiseNotificationEvent(AutomationNotificationKind notificationKind, AutomationNotificationProcessing notificationProcessing, string displayString, string activityId);\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationEvent Field in AutomationElementIdentifiers C#\nDESCRIPTION: This C# code defines a static read-only `AutomationEvent` field named `NotificationEvent` within the `AutomationElementIdentifiers` class. This field identifies an event raised to notify an element and is intended for use by UI Automation providers. It is the provider-side equivalent to `AutomationElement.NotificationEvent`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly AutomationEvent NotificationEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationEventArgs Constructor in C#\nDESCRIPTION: This C# code defines the constructor for the `NotificationEventArgs` class. The constructor initializes a new instance of the class, taking parameters for the notification kind, processing order, display string, and activity ID, and assigning them to the corresponding properties of the class.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic NotificationEventArgs(\n                AutomationNotificationKind notificationKind,\n                AutomationNotificationProcessing notificationProcessing,\n                string displayString,\n                string activityId);\n```\n\n----------------------------------------\n\nTITLE: Raising ActiveTextPositionChangedEvent in TextAutomationPeer\nDESCRIPTION: This method raises an ActiveTextPositionChanged event within the context of a `TextAutomationPeer`.  It takes two `TextPointer` arguments, `rangeStart` and `rangeEnd`, which denote the start and end of the changed text range.  The text pointers must be valid for the peer's owner or null for start or end of the content.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual void RaiseActiveTextPositionChangedEvent(TextPointer rangeStart, TextPointer rangeEnd);\n```\n\n----------------------------------------\n\nTITLE: Navigation Commands Key Display Strings in WPF\nDESCRIPTION: Display string definitions for navigation command key bindings in WPF applications. These strings represent the human-readable formats of keyboard combinations for navigation actions.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_6\n\nLANGUAGE: INI\nCODE:\n```\nBrowseBackKeyDisplayString=Alt+Left;Backspace\nBrowseForwardKeyDisplayString=Alt+Right;Shift+Backspace\nBrowseHomeKeyDisplayString=Alt+Home;BrowserHome\nBrowseStopKeyDisplayString=Alt+Esc;BrowserStop\nRefreshKeyDisplayString=F5\nFavoritesKeyDisplayString=Ctrl+I\nSearchKeyDisplayString=F3\nIncreaseZoomKeyDisplayString=\nDecreaseZoomKeyDisplayString=\nZoomKeyDisplayString=\nNextPageKeyDisplayString=\nPreviousPageKeyDisplayString=\nFirstPageKeyDisplayString=\nLastPageKeyDisplayString=\nGoToPageKeyDisplayString=\nNavigateJournalKeyDisplayString=\n```\n\n----------------------------------------\n\nTITLE: Getting IsDialog from AutomationPeer\nDESCRIPTION: This method, `IsDialog`, gets a value indicating whether an element associated with an automation peer is a dialog window. The method returns a `Boolean`. The method may throw an `InvalidOperationException` if a public call is already in progress.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\npublic bool IsDialog();\n```\n\n----------------------------------------\n\nTITLE: Overriding GetHeadingLevelCore in ContentElementAutomationPeer\nDESCRIPTION: This method overrides `GetHeadingLevelCore` to provide the heading level for a `ContentElement`. The method is called by `GetHeadingLevel()` and returns an `AutomationHeadingLevel`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nprotected override AutomationHeadingLevel GetHeadingLevelCore();\n```\n\n----------------------------------------\n\nTITLE: Setting ThemeMode on Window in Window.xaml (XML)\nDESCRIPTION: This XML snippet shows how to set the `ThemeMode` property on a `Window` object in its XAML file. This enables the Fluent theme for that specific window and can be set to `Dark`, `Light`, `System`, or `None`.  Window-level `ThemeMode` overrides application-level `ThemeMode`. Requires .NET 9.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Window\n    x:Class=\"YourSampleApplication.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:local=\"clr-namespace:YourSampleApplication\"\n    mc:Ignorable=\"d\"\n    Title=\"MainWindow\" Height=\"450\" Width=\"800\" ThemeMode=\"Dark\">\n    \n</Window>\n```\n\n----------------------------------------\n\nTITLE: Defining AutomationHeadingLevel Enum in C#\nDESCRIPTION: This C# code defines the `AutomationHeadingLevel` enum, used to specify the heading level of an element for automation purposes. The enum includes values for `None` and levels 1 through 9, allowing assistive technologies to navigate the UI based on heading structure.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic enum AutomationHeadingLevel\n{\n    None,\n    Level1, \n    Level2, \n    Level3, \n    Level4, \n    Level5, \n    Level6, \n    Level7, \n    Level8, \n    Level9 \n}\n```\n\n----------------------------------------\n\nTITLE: Overriding IsDialogCore in UIElementAutomationPeer\nDESCRIPTION: This method overrides `IsDialogCore` to provide the dialog status for a `UIElement`. It is called by `IsDialog()` and returns a `Boolean`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nprotected override bool IsDialogCore();\n```\n\n----------------------------------------\n\nTITLE: Defining WClientArrange V1 and Data Classes C#\nDESCRIPTION: Defines `TWClientArrange_V1` and related class `ArrangeData_V1` to capture arrangement events within WPF. `ArrangeData_V1` captures detailed information about element arrangement, including its top, left, width, and height.  Uses attributes like `Dynamic`, `Description`, `EventType`, and `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientArrange\") : amended,\n guid(\"{4b0ef3d1-0cbb-4847-b98f-16408e7e83f3}\"),\n EventVersion(0),\n DisplayName(\"WClientArrange\") : amended\n]\nclass TWClientArrange_V1:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"ArrangeData\") : amended,\n EventType{11, 12},\n EventTypeName{  \"WClientArrangeElementBegin\", \"WClientArrangeElementEnd\"} : amended\n]\nclass ArrangeData_V1:TWClientArrange_V1\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n    [WmiDataId(2),\n     Description(\"Top\") : amended,\n     read]\n     real64 Top;\n    [WmiDataId(3),\n     Description(\"Left\") : amended,\n     read]\n     real64 Left;\n    [WmiDataId(4),\n     Description(\"Width\") : amended,\n     read]\n     real64 Width;\n    [WmiDataId(5),\n     Description(\"Height\") : amended,\n     read]\n     real64 Height;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WClientMeasure V1 and Data Classes C#\nDESCRIPTION: Defines `TWClientMeasure_V1` and related classes (`MeasureData_V1`, `LayoutAborted_V1`), representing measurement events within the WPF framework. These events capture measure-related data, including element dimensions (width, height), and provide information about layout aborts.  `MeasureData_V1` includes data fields, and `LayoutAborted_V1` captures the loop duration. Uses attributes like `Dynamic`, `Description`, `EventType`, `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientMeasure\") : amended,\n guid(\"{3005e67b-129c-4ced-bcaa-91d7d73b1544}\"),\n EventVersion(0),\n DisplayName(\"WClientMeasure\") : amended\n]\nclass TWClientMeasure_V1:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"MeasureData\") : amended,\n EventType{11, 12},\n EventTypeName{  \"WClientMeasureElementBegin\", \"WClientMeasureElementEnd\"} : amended\n]\nclass MeasureData_V1:TWClientMeasure_V1\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n    [WmiDataId(2),\n     Description(\"Width\") : amended,\n     read]\n     real64 Width;\n    [WmiDataId(3),\n     Description(\"Height\") : amended,\n     read]\n     real64 Height;\n};\n\n[Dynamic,\n Description(\"LayoutAborted\") : amended,\n EventType(10),\n EventTypeName(  \"WClientMeasureAbort\") : amended\n]\nclass LayoutAborted_V1:TWClientMeasure_V1\n{\n    [WmiDataId(1),\n     Description(\"LoopDurationMS\") : amended,\n     read]\n     sint32 LoopDurationMS;\n    [WmiDataId(2),\n     Description(\"loopCounter\") : amended,\n     read]\n     sint32 loopCounter;\n};\n```\n\n----------------------------------------\n\nTITLE: WebRequest/Response String Constants\nDESCRIPTION: Strings for handling errors and status in web request/response operations, such as flush support, seek origin, read/write support, timeout errors, and cache policies, used for network communication error handling.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nFlushNotSupported=Stream does not support Flush.\nOffsetNegative=Offset must be non-negative.\nIOBufferOverflow=A read or write operation references a location outside the bounds of the buffer provided.\nReadCountNegative=Count of bytes to read cannot be negative.\nSeekOriginInvalid=SeekOrigin value is not valid.\nSetLengthNotSupported=Stream does not support SetLength.\nWriteNotSupported=Stream does not support writing.\nWebResponseFailure=Error processing WebResponse.\nWebResponseCloseFailure=Error closing the WebResponse.\nWebRequestTimeout=WebRequest timed out. Response did not arrive before the specified Timeout period elapsed.\nPackWebRequestCachePolicyIllegal=Cache policy is not valid.\nWebResponsePartNotFound=Requested PackagePart not found in target resource.\nUriSchemeMismatch=This factory supports only URIs with the '{0}' scheme.\nUriMustBeAbsolute=URI must be absolute. Relative URIs are not supported.\n```\n\n----------------------------------------\n\nTITLE: Transformations and Geometry Classes\nDESCRIPTION: Classes such as RotateTransform, ScaleTransform, SkewTransform, and MatrixTransform provide geometric transformations. Geometry classes like PathGeometry, RectangleGeometry, and StreamGeometry define shape representations and manipulation tools for WPF visuals.\nSOURCE: https://github.com/dotnet/wpf/blob/main/eng/WpfArcadeSdk/tools/WPF_Generated_Files.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: RotateTransform.cs */\n// Applies rotation transformations to visual elements.\npublic class RotateTransform { /* properties and methods */ }\n```\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: PathGeometry.cs */\n// Represents complex shape outlines composed of figures and segments.\npublic class PathGeometry { /* properties and methods */ }\n```\n\n----------------------------------------\n\nTITLE: Defining Template Event Class with Result Property for DRX Stream in C++\nDESCRIPTION: Defines Template_30_V0 class subclassing TWClientDRXReadStream_V0 representing a DRX stream event with a Result field. It includes attributes for dynamic event declaration, a specific event type and name, and identifies Result as a signed 32-bit integer data member used for storing result status or code information.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_29\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  \n Description(\"Template_30\") : amended,  \n EventType(2),  \n EventTypeName(  \"WClientDRXReadStreamEnd\") : amended\n]\nclass Template_30_V0:TWClientDRXReadStream_V0\n{\n    [WmiDataId(1),\n     Description(\"Result\") : amended,\n     read]\n     sint32 Result;\n};\n```\n\n----------------------------------------\n\nTITLE: Progressivity and Byte Range Download Errors\nDESCRIPTION: Error messages related to HTTP byte range downloader state, including disposal, support limits, invalid ranges, and request states, to facilitate error handling during media or data streaming operations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nByteRangeDownloaderDisposed=Cannot access a disposed HTTP byte range downloader.\nByteRangeRequestIsNotSupported=Server does not support byte range request.\nByteRangeDownloaderErroredOut=Byte range request failed.\nInvalidScheme=HTTP byte range downloader can support only HTTP or HTTPS schemes.\nInvalidByteRanges=Byte ranges are not valid in '{0}'.\nInvalidTempFileName=Cannot have empty name of a temporary file.\nRequestAlreadyStarted=The operation is not allowed after the first request is made.\nInvalidEventHandle=The event handle is not usable.\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationEvent Field in C#\nDESCRIPTION: This C# code defines a static read-only `AutomationEvent` field named `NotificationEvent` within the `AutomationElement` class. This field identifies an event that is raised to notify an element, and is used by UI Automation client applications to subscribe to notification events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly AutomationEvent NotificationEvent;\n```\n\n----------------------------------------\n\nTITLE: Running Specific WPF DRT for Debugging (CMD)\nDESCRIPTION: Executes the `RunDrts.cmd` script from the test output directory to run a specific WPF DRT (identified by `/name`) with the `/debugtests` flag. This opens a separate command window where the user can attach a debugger or launch the test executable manually for debugging purposes. Requires navigating to the correct test directory.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n$(RepoRoot)\\artifacts\\test\\$(Configuration)\\$(Platform)\\Test\\RunDrts.cmd /name=DrtXaml /debugtests\n```\n\n----------------------------------------\n\nTITLE: WPF DataBinding Trace Configuration\nDESCRIPTION: Defines trace information for the System.Windows.Data namespace, specifically for data binding operations. Includes various error and warning messages related to binding expressions, converters, and data contexts.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\n[System.Windows.Data,DataBinding,TraceData]\nCannotCreateDefaultValueConverter=,FORMAT,{\"Cannot create default converter to perform '{2}' conversions between types '{0}' and '{1}'. Consider using Converter property of Binding.\"}\nNoMentor=,,{\"Cannot find governing FrameworkElement or FrameworkContentElement for target element.\"}\nNoDataContext=,,{\"Cannot find element that provides DataContext.\"}\nNoSource=,FORMAT,{\"Cannot find source for binding with reference '{0}'.\"}\nBadValueAtTransfer=,,{\"Value produced by BindingExpression is not valid for target property.\", \"Value\"}\nBadConverterForTransfer=,FORMAT,{\"'{0}' converter failed to convert value '{1}' (type '{2}'); fallback value will be used, if available.\"}\nBadConverterForUpdate=,FORMAT,{\"ConvertBack cannot convert value '{0}' (type '{1}').\"}\nWorkerUpdateFailed=,,{\"Cannot save value from target back to source.\"}\nRequiresExplicitCulture=,,{\"Binding for property cannot use the target element's Language for conversion; if a culture is required, ConverterCulture must be explicitly specified on the Binding.\", \"Property\"}\nNoValueToTransfer=,,{\"Cannot retrieve value using the binding and no valid fallback value exists; using default instead.\"}\nFallbackConversionFailed=,FORMAT,{\"Fallback value '{0}' (type '{1}') cannot be converted for use in '{2}' (type '{3}').\"}\nTargetNullValueConversionFailed=,FORMAT,{\"TargetNullValue '{0}' (type '{1}') cannot be converted for use in '{2}' (type '{3}').\"}\nBindingGroupNameMatchFailed=,FORMAT,{\"No BindingGroup found with name matching '{0}'.\"}\n```\n\n----------------------------------------\n\nTITLE: Calling Basic Trace Method (C#)\nDESCRIPTION: Demonstrates how to invoke a generated trace method for a basic, non-formatted message. It calls the static `Trace` method on the generated `TraceClass`, providing the event type (`TraceEventType.Error`), the basic message identifier (`TraceClass.TraceBasic`), and variable arguments (`data1`, `data2`) that correspond to the parameters defined in the configuration.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/WindowsBase/AvTraceMessages.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTraceClass.Trace(TraceEventType.Error, TraceClass.TraceBasic, data1, data2 );\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Versions of Microsoft.WindowsDesktop.App Runtime using PowerShell Script\nDESCRIPTION: This PowerShell script automates downloading and executing the official dotnet-install.ps1 script to install specific versions of the Microsoft.WindowsDesktop.App runtime for Windows desktop applications. It installs both 64-bit and 32-bit versions into their respective directories. The script requires network access to the .NET install script URL and environmental variables for temporary and program files paths. The provided version can be changed to test different runtime builds or use \"Latest\" to install the newest available runtime.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n$dotnet_install = \"$env:TEMP\\dotnet-install.ps1\"\n$x64InstallDir  = \"$env:ProgramFiles\\dotnet\"\n$x86InstallDir  = \"${env:ProgramFiles(x86)}\\dotnet\"\n\nInvoke-WebRequest https://dot.net/v1/dotnet-install.ps1 -OutFile $dotnet_install\n\n.$dotnet_install -Channel master -Version 3.0.0-preview5-27619-18 -Runtime windowsdesktop -Architecture x64 -InstallDir $x64InstallDir\n.$dotnet_install -Channel master -Version 3.0.0-preview5-27619-18 -Runtime windowsdesktop -Architecture x86 -InstallDir $x86InstallDir\n```\n\n----------------------------------------\n\nTITLE: DeferringWriter Dependency and Error Handling Messages in C#\nDESCRIPTION: Provides error messages related to deferred loading and dependency management within XAML processing, such as missing dependencies, unexpected close calls, and missing collection items.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nDependsOnMissing='{0}'.'{1}' Depends on '{0}'.{1}', which was not set.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCloseInsideTemplate=Close called while inside a deferred load section.\n```\n\nLANGUAGE: C#\nCODE:\n```\nUnexpectedClose=Unexpected close of XAML Node Stream.\n```\n\nLANGUAGE: C#\nCODE:\n```\nTemplateNotCollected=Deferred load section was not collected in '{0}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nDeferredPropertyNotCollected=Deferred member was not collected in '{0}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMissingCase=Missing case '{0}' in DeferringWriter'{1}' method.\n```\n\n----------------------------------------\n\nTITLE: Animation Error Messages in WPF\nDESCRIPTION: Error messages for animation operations within the WPF framework. These cover type mismatches, invalid values, animation prohibitions, and other constraints when using the animation subsystem.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_12\n\nLANGUAGE: Resource\nCODE:\n```\nAnimation_AnimationTimelineTypeMismatch=AnimationTimeline of type '{0}' cannot be used to animate the '{1}' property of type '{2}'.\nAnimation_CalculatedValueIsInvalidForProperty=The animation(s) applied to the '{0}' property calculate a current value of '{1}', which is not a valid value for the property.\nIAnimatable_CantAnimateSealedDO=Cannot animate the '{0}' property on '{1}' because the object is sealed or frozen.\nAnimation_ChildTypeMismatch=One of the animations in the timeline is a '{0}' and cannot be used to animate a property of type '{1}'.\nAnimation_DependencyPropertyIsNotAnimatable='{0}' property is not animatable on '{1}' class because the IsAnimationProhibited flag has been set on the UIPropertyMetadata used to associate the property with the class.\nAnimation_KeySpline_InvalidValue=Cannot set '{0}' to '{1}'. KeySpline values must be between 0.0 and 1.0.\nAnimation_KeyTime_LessThanZero=Cannot create a KeyTime with the value '{0}' because it is less than zero.\nAnimation_KeyTime_InvalidPercentValue='{0}' is not a valid Percent value for a KeyTime. The Percent value must be a number from 0.0 to 1.0.\nAnimation_NoAnimationsSpecified='{0}' value is not valid because it contains no animations.\nAnimation_Exception=Cannot animate the '{0}' property on a '{1}' using a '{2}'. For details see the inner exception.\nAnimation_ReturnedUnsetValueInstance=A '{0}' on the '{1}' property of a '{2}' returned a current value of UnsetValue.Instance, which is not valid.\nAnimation_UnrecognizedHandoffBehavior=The HandoffBehavior value is not valid.\n```\n\n----------------------------------------\n\nTITLE: Defining TouchDownReported Event and Touch ID Template - WPF Diagnostics MOF\nDESCRIPTION: Defines the TouchDownReported event and a corresponding ID32 template class, encoding a single signed 32-bit identifier. Used for reporting touch-down interactions in WPF tracing. This follows a recurring pattern where an event base class is paired with a template containing event-specific data fields. Dependencies: WMI event attributes, Microsoft_Windows_WPF inheritance. Expected input is the identifier of the reported touch, outputting a data instance for trace consumers. Identical template and pattern apply to TouchMoveReported, TouchUpReported, ManipulationReportFrame, and ManipulationEventRaised.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_80\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"ID32Template\") : amended,\n EventType(0),\n EventTypeName(  \"TouchDownReported\") : amended\n]\nclass ID32Template_V0:TTouchDownReported_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WClientCreateIRT Event and Data Template - MOF\nDESCRIPTION: Declares the CreateIRT_V0 class for the WClientCreateIRT event, with fields for resource and parent resource pointers, as well as a Reason field (with enumerated values depending on context). Used for tracing WPF infrastructure resource trees. Dependencies: WMI pointer annotation, enumeration of possible 'Reason' values. Inputs: pointer addresses and reason; outputs: event instance exported to WMI consumers.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_89\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"CreateIRT\") : amended,\n EventType(0),\n EventTypeName(  \"WClientCreateIRT\") : amended\n]\nclass CreateIRT_V0:TWClientCreateIRT_V0\n{\n    [WmiDataId(1),\n     Description(\"ResourcePtr\") : amended,\n     pointer,\n     read]\n     pointer ResourcePtr;\n    [WmiDataId(2),\n     Description(\"ParentResourcePtr\") : amended,\n     pointer,\n     read]\n     pointer ParentResourcePtr;\n    [WmiDataId(3),\n     Description(\"Reason\") : amended,\n\n    Values{    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n```\n\n----------------------------------------\n\nTITLE: Defining WPF Device State Checking Event Classes in WMI\nDESCRIPTION: Defines WMI event classes for tracking device state checks in WPF. These classes contain window handle and HRESULT code information for diagnosing device-related issues.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_3\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"WClientUceCheckDeviceState\") : amended,\n guid(\"{76601d6d-c6d4-4e8d-ac6e-3f9b4f1745e0}\"),\n EventVersion(2),\n DisplayName(\"WClientUceCheckDeviceState\") : amended\n]\nclass TWClientUceCheckDeviceState_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"Template_15\") : amended,\n EventType(0),\n EventTypeName(  \"WClientUceCheckDeviceStateInfo\") : amended\n]\nclass Template_15_V0:TWClientUceCheckDeviceState_V0\n{\n    [WmiDataId(1),\n     Description(\"hwnd\") : amended,\n     pointer,\n     read]\n     pointer hwnd;\n    [WmiDataId(2),\n     Description(\"hr\") : amended,\n     read]\n     uint32 hr;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Save XPS Events for ETW in C++\nDESCRIPTION: Defines ETW event classes associated with saving XPS (XML Paper Specification) documents in WPF. TWClientDRXSaveXps_V0 acts as the main provider class with identification metadata. The Begin and End subclasses represent start and completion of the save process, enabling granular event tracing related to XPS generation. Requires the Microsoft_Windows_WPF ETW provider. Used to monitor save operations for debugging or performance.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_44\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXSaveXps\") : amended, guid(\"{ba0320d5-2294-4067-8b19-ef9cddad4b1a}\"), EventVersion(2), DisplayName(\"WClientDRXSaveXps\") : amended]\nclass TWClientDRXSaveXps_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXSaveXpsBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXSaveXpsBegin\") : amended]\nclass WClientDRXSaveXpsBegin_V0:TWClientDRXSaveXps_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXSaveXpsEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXSaveXpsEnd\") : amended]\nclass WClientDRXSaveXpsEnd_V0:TWClientDRXSaveXps_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WClientInterlockedRender Event, Begin and End Templates - MOF\nDESCRIPTION: Defines the WClientInterlockedRender event with base and two derived template classes: WClientInterlockedRenderBegin_V0 and WClientInterlockedRenderEnd_V0. These classes demarcate the start and end of a WPF interlocked rendering sequence. Each template inherits from TWClientInterlockedRender_V0, tagged by distinct EventType values. There are no data payload fields in the templates, only event classification. Used in WMI-based tracing of rendering lifecycles. Inputs: event occurrence; outputs: template event markers.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_82\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"WClientInterlockedRenderBegin\") : amended,\n EventType(1),\n EventTypeName(\"WClientInterlockedRenderBegin\") : amended\n]\nclass WClientInterlockedRenderBegin_V0:TWClientInterlockedRender_V0\n{\n\n};\n\n[Dynamic,\n Description(\"WClientInterlockedRenderEnd\") : amended,\n EventType(2),\n EventTypeName(\"WClientInterlockedRenderEnd\") : amended\n]\nclass WClientInterlockedRenderEnd_V0:TWClientInterlockedRender_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WClientParseXamlBamlInfo Event Template - MOF\nDESCRIPTION: Declares a template for the WClientParseXamlBamlInfo class, encoding a performance element ID (signed 64-bit) and line position (integers). Used in reporting parsing locations or errors within XAML/BAML for telemetry or debugging. Relies on MOF integer types and WMI attributes. Inputs are perf element ID, line number, and position; outputs: WMI event record. No complex dependencies.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_88\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"WClientParseXamlBamlInfoTemplate\") : amended,\n EventType(0),\n EventTypeName(  \"WClientParseXamlBamlInfo\") : amended\n]\nclass WClientParseXamlBamlInfoTemplate_V0:TWClientParseXamlBamlInfo_V0\n{\n    [WmiDataId(1),\n     Description(\"PerfElementID\") : amended,\n     read]\n     sint64 PerfElementID;\n    [WmiDataId(2),\n     Description(\"LineNumber\") : amended,\n     read]\n     sint32 LineNumber;\n    [WmiDataId(3),\n     Description(\"LinePosition\") : amended,\n     read]\n     sint32 LinePosition;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DeserializeAnnotation WPF Event Classes in C++\nDESCRIPTION: Introduces TDeserializeAnnotation_V0 and associated event classes for handling the deserialization of annotations in WPF, including Begin and End steps. Event attributes provide identification and facilitate analysis of deserialization timing and errors within event logs.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_66\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"DeserializeAnnotation\") : amended,\n guid(\"{2e32c255-d6db-4de7-9e62-9586377778d5}\"),\n EventVersion(2),\n DisplayName(\"DeserializeAnnotation\") : amended\n]\nclass TDeserializeAnnotation_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"DeserializeAnnotationBegin\") : amended,\n EventType(1),\n EventTypeName(\"DeserializeAnnotationBegin\") : amended\n]\nclass DeserializeAnnotationBegin_V0:TDeserializeAnnotation_V0\n{\n\n};\n\n[Dynamic,\n Description(\"DeserializeAnnotationEnd\") : amended,\n EventType(2),\n EventTypeName(\"DeserializeAnnotationEnd\") : amended\n]\nclass DeserializeAnnotationEnd_V0:TDeserializeAnnotation_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WPF Client UI Commit Channel Event - MOF DSL\nDESCRIPTION: Defines 'TWClientUICommitChannel_V0' as the base class for commit channel-related diagnostics, associating the class with a GUID and display metadata. No data fields are included at this level, but it is used for further specialization.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_19\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\nDescription(\"WClientUICommitChannel\") : amended,\nguid(\"{f9c0372e-60bd-46c9-bc64-94fe5fd31fe4}\"),\nEventVersion(2),\nDisplayName(\"WClientUICommitChannel\") : amended\n]\nclass TWClientUICommitChannel_V0:Microsoft_Windows_WPF\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: WPF Host Event Class Definitions\nDESCRIPTION: Defines multiple classes representing specific WPF host events, such as startup, navigation, menu merging, UI activation, and resource loading. Each class inherits from TWpfHostUm__V0 and is annotated with dynamic description, event type, and name metadata; some include additional properties with WmiDataId and description attributes.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nclass WpfHostUm_StartingCLREnd_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_IHlinkTargetNavigateEnd_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_InitDocHostStart_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_InitDocHostEnd_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_MergingMenusStart_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_MergingMenusEnd_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_UIActivationStart_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_UIActivationEnd_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_LoadingResourceDLLStart_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_ProgressPageShown_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_AdHocProfile1Start_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_AdHocProfile1End_V0:TWpfHostUm__V0\n{\n\n};\n\nclass WpfHostUm_AdHocProfile2End_V0:TWpfHostUm__V0\n{\n\n};\n\nclass TWpfHost__V0:Microsoft_Windows_WPF\n{\n}\n\nclass Template_49_V0:TWpfHost__V0\n{\n    [WmiDataId(1), Description(\"Path\"), StringTermination(\"NullTerminated\"), format(\"w\"), read]\n    string Path;\n    [WmiDataId(2), Description(\"AppId\"), StringTermination(\"NullTerminated\"), format(\"w\"), read]\n    string AppId;\n}\n\nclass Template_50_V0:TWpfHost__V0\n{\n    [WmiDataId(1), Description(\"ExitCode\"), read]\n    uint32 ExitCode;\n}\n\nclass Template_51_V0:TWpfHost__V0\n{\n    [WmiDataId(1), Description(\"Direct\"), read]\n    sint8 Direct;\n}\n\nclass URITemplate_V0:TWpfHost__V0\n{\n    [WmiDataId(1), Description(\"URI\"), StringTermination(\"NullTerminated\"), format(\"w\"), read]\n    string URI;\n}\n\nclass Template_53_V0:TWpfHost__V0\n{\n    [WmiDataId(1), Description(\"AttemptDownload\"), read]\n    sint8 AttemptDownload;\n}\n\nclass Template_54_V0:TWpfHost__V0\n{\n    [WmiDataId(1), Description(\"Page\"), StringTermination(\"NullTerminated\"), format(\"w\"), read]\n    string Page;\n}\n\nclass Template_55_V0:TWpfHost__V0\n{\n    [WmiDataId(1), Description(\"Bytes\"), read]\n    uint32 Bytes;\n    [WmiDataId(2), Description(\"Total\"), read]\n    uint32 Total;\n}\n\nclass WpfHost_DocObjHostCreated_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_XappLauncherAppStartup_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_DocObjHostRunApplicationStart_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_DocObjHostRunApplicationEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_ClickOnceActivationEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_InitAppProxyStart_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_InitAppProxyEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_AppProxyCtor_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_RootBrowserWindowSetupStart_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_RootBrowserWindowSetupEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_AppProxyRunStart_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_AppProxyRunEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_AppDomainManagerCctor_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_ApplicationActivatorCreateInstanceEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_DetermineApplicationTrustStart_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_DetermineApplicationTrustEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_FirstTimeActivation_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_GetDownloadPageEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_DownloadDeplManifestStart_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_DownloadDeplManifestEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_AssertAppRequirementsStart_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_AssertAppRequirementsEnd_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_DownloadApplicationStart_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_DownloadApplicationEnd_V0:TWpfHost__V0\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Serialization Events for ETW in C++\nDESCRIPTION: Represents WPF serialization event tracing classes with ETW. The TWClientDRXSerialization_V0 is the main event provider, with Begin and End subclasses marking serialization process boundaries. These declarations help track serialization operations in diagnostics and performance monitoring for WPF applications. Dependent on the Microsoft_Windows_WPF ETW provider.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_47\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXSerialization\") : amended, guid(\"{0527276c-d3f4-4293-b88c-ecdf7cac4430}\"), EventVersion(2), DisplayName(\"WClientDRXSerialization\") : amended]\nclass TWClientDRXSerialization_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXSerializationBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXSerializationBegin\") : amended]\nclass WClientDRXSerializationBegin_V0:TWClientDRXSerialization_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXSerializationEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXSerializationEnd\") : amended]\nclass WClientDRXSerializationEnd_V0:TWClientDRXSerialization_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: TriggerAction Error Messages\nDESCRIPTION: These error messages pertain to issues within the TriggerAction objects in WPF. They provide specific explanations regarding the relationship between trigger actions and triggers and their valid states.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_0\n\nLANGUAGE: N/A\nCODE:\n```\nTriggerActionMustBelongToASingleTrigger=TriggerAction object must be associated with one and only one trigger object.\nTriggerActionAlreadySealed=TriggerAction is already sealed.\nTriggersSupportsEventTriggersOnly=Triggers collection members must be of type EventTrigger.\nHandlerTypeIllegal=Handler type is not valid.\nUnexpectedValueTypeForDataTrigger='{0}' ValueType is not valid for DataTrigger.\nUnexpectedValueTypeForCondition='{0}' ValueType is not valid for Condition.\nConditionCannotUseBothPropertyAndBinding=Condition cannot use both Property and Binding.\nCannotHaveOverridesDefaultStyleInThemeStyle=Cannot set OverridesDefaultStyle property in the default Style.\nCannotHavePropertyInStyle='{0}' property cannot be set in the current element's Style.\nCannotHavePropertyInTemplate='{0}' property cannot be set in the current element's Template.\nCannotHaveEventHandlersInThemeStyle=Cannot set event handlers within a theme Style.\nStyleTargetTypeMismatchWithElement='{0}' TargetType does not match type of element '{1}'.\nStyleTriggersCannotTargetTheTemplate=Cannot set TargetName property on a Setter within Style.Setters or Style.Triggers section. TargetName applies only to a Setter in Template.Triggers section.\nCannotModifyLogicalChildrenDuringTreeWalk=Cannot modify the logical children for this node at this time because a tree walk is in progress.\nEventTriggerBadAction=EventTrigger cannot have action of type '{0}'. It must be a TriggerAction.\nSourceNameNotSupportedForDataTriggers=Cannot specify SourceName property for a DataTrigger or MultiDataTrigger.\nTriggerOnStyleNotAllowedToHaveSource=Style has no child nodes so Trigger cannot specify source node name '{0}'.\n```\n\n----------------------------------------\n\nTITLE: Defining CompileScene and UIResponse Event Classes C#\nDESCRIPTION: Defines classes for compiling the scene (`WClientCompileScene`) and processing UI responses. Includes a base class `TWClientCompileScene_V0`, supporting the `PerfElementID_V0` and `WClientCompileSceneEnd_V0` classes. `PerfElementID_V0` captures the ID. Uses attributes like `Dynamic`, `Description`, `EventType`, and `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientCompileScene\") : amended,\n guid(\"{af36fcb5-58e5-48d0-88d0-d8f4dcb56a12}\"),\n EventVersion(2),\n DisplayName(\"WClientCompileScene\") : amended\n]\nclass TWClientCompileScene_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"PerfElementID\") : amended,\n EventType(1),\n EventTypeName(  \"WClientCompileSceneBegin\") : amended\n]\nclass PerfElementID_V0:TWClientCompileScene_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n};\n\n[Dynamic,\n Description(\"WClientCompileSceneEnd\") : amended,\n EventType(2),\n EventTypeName(\"WClientCompileSceneEnd\") : amended\n]\nclass WClientCompileSceneEnd_V0:TWClientCompileScene_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Grid Error Messages\nDESCRIPTION: These error messages point to incorrect grid parameters and read-only states.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_11\n\nLANGUAGE: N/A\nCODE:\n```\nGrid_UnexpectedParameterType=Parameter of unexpected type '{0}'. Expected type is '{1}'.\nGridCollection_CannotModifyReadOnly=Cannot modify '{0}' in read-only state.\n```\n\n----------------------------------------\n\nTITLE: Declaring Serialization, Release, and Rasterization Instrumentation – pseudo-C++\nDESCRIPTION: Declares classes for start/end events in tree serialization, writer release, and rasterization phases (e.g., 'WClientDRXSerializeTreeStart_V0', 'WClientDRXRasterEnd_V0'). These classes inherit from respective base event classes tied to serialization and raster phases for WPF. Used for diagnostics to trace resource lock, transformation, and data preparation points.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_75\n\nLANGUAGE: pseudo-C++\nCODE:\n```\nclass WClientDRXSerializeTreeStart_V0:WClientDRXSerializeTree_V0\n{\n\n};\n\nclass WClientDRXSerializeTreeEnd_V0:WClientDRXSerializeTree_V0\n{\n\n};\n\nclass WClientDRXRasterStart_V0:WClientDRXRaster_V0\n{\n\n};\n\nclass WClientDRXRasterEnd_V0:WClientDRXRaster_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WPF UCE Present Event Classes in WMI\nDESCRIPTION: Defines WMI event classes for tracking presentation operations in WPF. These classes capture presentation begin/end events with identifiers and timing information.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_1\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"WClientUcePresent\") : amended,\n guid(\"{4c48d6ef-ac14-4d84-ba37-49a94ba8d2af}\"),\n EventVersion(2),\n DisplayName(\"WClientUcePresent\") : amended\n]\nclass TWClientUcePresent_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"Template_12\") : amended,\n EventType{1, 2},\n EventTypeName{  \"WClientUcePresentBegin\", \"WClientUcePresentEnd\"} : amended\n]\nclass Template_12_V0:TWClientUcePresent_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     uint64 Id;\n    [WmiDataId(2),\n     Description(\"QPCCurrentTime\") : amended,\n     read]\n     uint64 QPCCurrentTime;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Line Down Event Class with VerticalOffset Property in C++\nDESCRIPTION: Template_33_V0 inherits from TWClientDRXLineDown_V0 and represents a 'LineDown' event in the WPF telemetry system. It contains a single data property VerticalOffset (signed 32-bit integer) describing the vertical scroll offset related to the event occurrence.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_33\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"Template_33\") : amended,\n EventType(0),\n EventTypeName(  \"WClientDRXLineDown\") : amended\n]\nclass Template_33_V0:TWClientDRXLineDown_V0\n{\n    [WmiDataId(1),\n     Description(\"VerticalOffset\") : amended,\n     read]\n     sint32 VerticalOffset;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring a WPF Event Host Command Start/End Classes – pseudo-C++\nDESCRIPTION: Defines 'WpfHost_UpdateBrowserCommandsStart_V0' and 'WpfHost_UpdateBrowserCommandsEnd_V0' classes for instrumenting browser command lifecycle events in the WPF host. Each inherits from 'TWpfHost__V0' and is decorated with dynamic event metadata. Intended for use in diagnostic event-pipelines; no custom fields or parameters.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_72\n\nLANGUAGE: pseudo-C++\nCODE:\n```\nclass WpfHost_UpdateBrowserCommandsStart_V0:TWpfHost__V0\n{\n\n};\n\nclass WpfHost_UpdateBrowserCommandsEnd_V0:TWpfHost__V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Expression, Markup Extension, and Style Value Error Messages\nDESCRIPTION: These error messages highlight invalid values being used within certain contexts. The errors point to invalid trigger conditions and style settings.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_3\n\nLANGUAGE: N/A\nCODE:\n```\nConditionValueOfMarkupExtensionNotSupported='{0}' is not a valid trigger condition.\nConditionValueOfExpressionNotSupported=Expression type is not a valid trigger condition.\nSetterValueOfMarkupExtensionNotSupported='{0}' is not valid for Setter.Value. The only supported MarkupExtension types are DynamicResourceExtension and BindingBase or derived types.\nStyleValueOfExpressionNotSupported=Expression type is not a valid Style value.\n```\n\n----------------------------------------\n\nTITLE: Defining RoutedEvent Traces\nDESCRIPTION: This section defines trace messages related to routed events within the System.Windows namespace.  It specifies the trace name, area, and wrapper class, followed by individual trace details. These trace details include a trace ID, a flag for format strings, and an array containing the base message and its parameters. This information is intended for use by a code generator to create tracing methods.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/AvTraceMessages.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[System.Windows.RoutedEvent,RoutedEvent,TraceRoutedEvent]\nRaiseEvent=,,{\"Raise RoutedEvent\", \"RoutedEvent\", \"Element\", \"RoutedEventArgs\", \"Handled\"}\nReRaiseEventAs=,,{\"Raise RoutedEvent\", \"RoutedEvent\", \"Element\", \"RoutedEventArgs\", \"Handled\"}\nHandleEvent=,,{ \"RoutedEvent has set Handled\", \"Handled\", \"EventOwnerType\", \"EventName\", \"RoutedEventArgs\" }\nInvokeHandlers=,,{ \"InvokeHandlers\", \"Element\", \"RoutedEventArgs\", \"Handled\" }\n[end]\n```\n\n----------------------------------------\n\nTITLE: Setting AutomationProperties.IsDialog\nDESCRIPTION: This method, `SetIsDialog`, sets the `IsDialog` attached property for a specified `DependencyObject`. The `element` parameter is the `DependencyObject` and the `value` parameter, a `Boolean`, determines whether the element is considered a dialog window.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic static void SetIsDialog(System.Windows.DependencyObject element, bool value);\n```\n\n----------------------------------------\n\nTITLE: WPF Data Binding Trace Configuration Example\nDESCRIPTION: Demonstrates a trace configuration example with both basic messages and format strings. Shows how the generated trace class would be used in code.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\n[System.Windows,Area,TraceClass]\nTraceBasic=,,{\"basic msg\", \"data1\", \"data2\"}\nTraceFormat=,FORMAT,{\"{0} is doing something to {1}.\", \"data1\", \"data2\"}\n[end]\n```\n\n----------------------------------------\n\nTITLE: Defining TouchMoveReported, TouchUpReported, ManipulationReportFrame, and ManipulationEventRaised Event Templates - MOF\nDESCRIPTION: Implements the same ID32Template_V0 template class structure for each distinct WPF event (TouchMoveReported, TouchUpReported, ManipulationReportFrame, and ManipulationEventRaised), providing a consistent means of reporting integer identifiers per event. These templates inherit from their respective event base classes, supporting WMI client consumption. Inputs are event-dependent IDs, output is the corresponding template instance. The pattern is reusable for event families sharing an integer identifier payload.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_81\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"ID32Template\") : amended,\n EventType(0),\n EventTypeName(  \"TouchMoveReported\") : amended\n]\nclass ID32Template_V0:TTouchMoveReported_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n};\n\n[Dynamic,\n Description(\"ID32Template\") : amended,\n EventType(0),\n EventTypeName(  \"TouchUpReported\") : amended\n]\nclass ID32Template_V0:TTouchUpReported_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n};\n\n[Dynamic,\n Description(\"ID32Template\") : amended,\n EventType(0),\n EventTypeName(  \"ManipulationReportFrame\") : amended\n]\nclass ID32Template_V0:TManipulationReportFrame_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n};\n\n[Dynamic,\n Description(\"ID32Template\") : amended,\n EventType(0),\n EventTypeName(  \"ManipulationEventRaised\") : amended\n]\nclass ID32Template_V0:TManipulationEventRaised_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n};\n```\n\n----------------------------------------\n\nTITLE: Extended Trace Messages for DataSourceProvider in WPF\nDESCRIPTION: Format strings for tracing data source queries and XML operations, including query start, completion, and XML source loading. These assist debugging data retrieval and XML handling in WPF applications.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_6\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Begin query ({1})\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Query finished ({1}) with data {2} and error {3}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Update result (on UI thread) with data {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Request download ({1}) from {2}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Load document from stream\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Load inline document\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Build XmlNode collection\n```\n\n----------------------------------------\n\nTITLE: Defining GetAnnotationByLoc WPF Event Classes in C++\nDESCRIPTION: Models WPF eventing for retrieving annotations based on location with TGetAnnotationByLoc_V0 and its Begin/End event subclasses. Each is clearly labeled for WMI consumers and contributes to annotation location query diagnostics.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_63\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"GetAnnotationByLoc\") : amended,\n guid(\"{741a41bc-8ecd-43d1-a7f1-d2faca7362ef}\"),\n EventVersion(2),\n DisplayName(\"GetAnnotationByLoc\") : amended\n]\nclass TGetAnnotationByLoc_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"GetAnnotationByLocBegin\") : amended,\n EventType(1),\n EventTypeName(\"GetAnnotationByLocBegin\") : amended\n]\nclass GetAnnotationByLocBegin_V0:TGetAnnotationByLoc_V0\n{\n\n};\n\n[Dynamic,\n Description(\"GetAnnotationByLocEnd\") : amended,\n EventType(2),\n EventTypeName(\"GetAnnotationByLocEnd\") : amended\n]\nclass GetAnnotationByLocEnd_V0:TGetAnnotationByLoc_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing ToolTipService.ShowsToolTipOnKeyboardFocus Accessors\nDESCRIPTION: Placeholder indicating that the `ToolTipService.ShowsToolTipOnKeyboardFocus` attached property is accessed via standard Get/Set attached property methods (`GetShowsToolTipOnKeyboardFocus` and `SetShowsToolTipOnKeyboardFocus`). This property controls whether a parent element shows its tooltip upon receiving keyboard focus, potentially overriding the setting on the ToolTip element itself.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/tooltip.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsee GetShowsToolTipOnKeyboardFocus, and SetShowsToolTipOnKeyboardFocus\n```\n\n----------------------------------------\n\nTITLE: MePullParser Validation and Token Handling in C#\nDESCRIPTION: Contains validation error messages for markup extension tokens, constructor arguments, and property syntax during markup parsing. Includes messages for unexpected tokens, missing commas, and syntax errors.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nUnexpectedTokenAfterME=Unexpected token after end of markup extension.\n```\n\nLANGUAGE: C#\nCODE:\n```\nWhitespaceAfterME=White space is not allowed after end of markup extension.\n```\n\nLANGUAGE: C#\nCODE:\n```\nUnexpectedToken=Unexpected token '{0}' in rule: '{1}', in '{2}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoConstructorWithNArugments=A Constructor for '{0}' with '{1}' arguments was not found.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMissingComma1=Unexpected equals sign '=' following '{0}'. Check for a missing comma separator.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMissingComma2=Unexpected equals sign '=' following '{0}'='{1}'. Check for a missing comma separator.\n```\n\n----------------------------------------\n\nTITLE: Declaring Data Template for Commit Channel Event - MOF DSL\nDESCRIPTION: Establishes 'ID32Template_V0' for storing a single signed 32-bit 'Id' value pertinent to the WPF commit channel operation. This supports correlation of commit events through unique identifiers.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_20\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\nDescription(\"ID32Template\") : amended,\nEventType(0),\nEventTypeName(  \"WClientUICommitChannel\") : amended\n]\nclass ID32Template_V0:TWClientUICommitChannel_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WPF Layout Event Classes in WMI\nDESCRIPTION: Defines WMI event classes for tracking layout operations in WPF. These classes track layout processing events including begin/end, exceptions, invalidation, and automation event firing.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_5\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"WClientLayout\") : amended,\n guid(\"{a3edb710-21fc-4f91-97f4-ac2b0df1c20f}\"),\n EventVersion(3),\n DisplayName(\"WClientLayout\") : amended\n]\nclass TWClientLayout_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"LayoutSourceTemplate\") : amended,\n EventType(1),\n EventTypeName(  \"WClientLayoutBegin\") : amended\n]\nclass LayoutSourceTemplate_V0:TWClientLayout_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n    [WmiDataId(2),\n     Description(\"source\") : amended,\n\n    Values{    \"(null)\",\n    \"(null)\",\n    \"(null)\"\n    }:amended,\n\n    ValueMap{    \"0\", \n    \"1\", \n    \"2\"\n    }\n    ]\n     uint32  source;\n\n};\n```\n\n----------------------------------------\n\nTITLE: TypeReflector Validation and Collection Type Analysis in C#\nDESCRIPTION: Provides error messages for unknown attributes and properties during reflection, and enforces constraints such as 'UsableDuringInitialization' attribute and collection type validation for XAML.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nUnknownAttributeProperty=['{0}'('{1}')] on '{2}' is not a known property.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNotDeclaringTypeAttributeProperty=['{0}'('{1}')] on '{2}' is not a property declared on this type.\n```\n\nLANGUAGE: C#\nCODE:\n```\nUsableDuringInitializationOnME=Error with type '{0}'. MarkupExtensions cannot use the 'UsableDuringInitialization' attribute.\n```\n\nLANGUAGE: C#\nCODE:\n```\nTooManyAttributesOnType=Error with type '{0}'.  It has more than one '{1}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMissingPropertyCaseClrType=Missing case in ClrType 'Member' lookup.\n```\n\nLANGUAGE: C#\nCODE:\n```\nUnhandledBoolTypeBit=Unhandled BoolTypeBit.\n```\n\nLANGUAGE: C#\nCODE:\n```\nAmbiguousCollectionItemType=Cannot determine the item type of collection type '{0}' because it has more than one Add method or ICollection<T> implementation. To make this collection type usable in XAML, add a public Add(object) method, implement System.Collections.IList or a single System.Collections.Generic.ICollection<T>.\n```\n\nLANGUAGE: C#\nCODE:\n```\nAmbiguousDictionaryItemType=Cannot determine the item type of dictionary type '{0}' because it has more than one Add method or IDictionary<K,V> implementation. To make this dictionary type usable in XAML, add a public Add(object,object) method, implement System.Collections.IDictionary or a single System.Collections.Generic.IDictionary<K,V>.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMarkupExtensionWithDuplicateArity=Cannot determine the positional parameters for type '{0}' because it has more than one constructor overload with '{1}' parameters. To make this markup extension usable in XAML, remove the duplicate constructor overload(s) or set XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity to true.\n```\n\n----------------------------------------\n\nTITLE: XamlContext Namespace Resolution Error in C#\nDESCRIPTION: Detects when a namespace prefix does not map to any known namespace, assisting in identifying missing or incorrect namespace declarations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nPrefixNotFound=Prefix '{0}' does not map to a namespace.\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Save Page Events for ETW in C++\nDESCRIPTION: Defines classes for tracing the save operation of a page within WPF via ETW. The TWClientDRXSavePage_V0 class contains event provider metadata and is subclassed by Begin and End event classes to bracket the save action's start and finish. These ETW events assist diagnostics related to page saving within WPF apps. They rely on the Microsoft_Windows_WPF provider framework.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_46\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXSavePage\") : amended, guid(\"{b0e3e78b-9ac7-473c-8903-b5d212399e3b}\"), EventVersion(2), DisplayName(\"WClientDRXSavePage\") : amended]\nclass TWClientDRXSavePage_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXSavePageBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXSavePageBegin\") : amended]\nclass WClientDRXSavePageBegin_V0:TWClientDRXSavePage_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXSavePageEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXSavePageEnd\") : amended]\nclass WClientDRXSavePageEnd_V0:TWClientDRXSavePage_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: ObjectWriterContext Error and Namespace Management in C#\nDESCRIPTION: Handles errors related to namespace resolution, name scope, and missing services during object writing in XAML. Provides messages for unresolved namespaces, missing services, and invalid object references.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nNamespaceNotFound=Namespace '{0}' was not found in scope.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNameScopeOnRootInstance=Cannot attach NameScope to null root instance.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMissingNameResolver=Service provider is missing the INameResolver service.\n```\n\nLANGUAGE: C#\nCODE:\n```\nObjectNotTcOrMe=Argument should be a Type Converter, Markup Extension or Null.\n```\n\nLANGUAGE: C#\nCODE:\n```\nSimpleFixupsMustHaveOneName=Directly Assignable Fixups must only have one name.\n```\n\n----------------------------------------\n\nTITLE: Error messages for XAML Node Stream validation in C#\nDESCRIPTION: Defines error messages related to XAML node stream validation, such as missing members, incorrect order, or unexpected tokens. These messages help identify syntax and structural errors during XAML parsing.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nNoPropertyInCurrentFrame_V=XAML Node Stream: Value of '{0}' requires a StartMember after StartObject '{1}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoPropertyInCurrentFrame_V_noType=XAML Node Stream: Value of '{0}' must follow a StartObject and StartMember.\n```\n\nLANGUAGE: C#\nCODE:\n```\nOpenPropertyInCurrentFrame_EO=XAML Node Stream: Missing EndMember for '{0}.{1}' before EndObject.\n```\n\nLANGUAGE: C#\nCODE:\n```\nOpenPropertyInCurrentFrame_SM=XAML Node Stream: Missing EndMember for '{0}.{1}' before StartMember '{2}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoTypeInCurrentFrame_SM=XAML Node Stream: Missing StartObject before StartMember '{0}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoTypeInCurrentFrame_EO=XAML Node Stream: Missing CurrentObject before EndObject.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoPropertyInCurrentFrame_EM=XAML Node Stream: Missing StartMember on Type '{0}' before EndMember.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoPropertyInCurrentFrame_EM_noType=XAML Node Stream: EndMember must follow StartObject and StartMember.\n```\n\nLANGUAGE: C#\nCODE:\n```\nValueMustBeFollowedByEndMember=XAML Node Stream: Value nodes must be followed by EndMember.\n```\n\nLANGUAGE: C#\nCODE:\n```\nDictionaryFirstChanceException=Dictionary of type '{0}' cannot add key '{1}'. A TypeConverter will convert the key to type '{2}'. To avoid seeing this error, override System.Collections.IDictionary.Add and perform the conversion there.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCannotSetBaseUri=BaseUri can only be set once at the root node (XamlXmlReader may provide a default at the root node).\n```\n\n----------------------------------------\n\nTITLE: Media Commands Key Bindings in WPF\nDESCRIPTION: Key binding definitions for media commands in WPF applications. These settings define the keyboard shortcuts that trigger media-related actions, with most bindings left empty for custom configuration.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_3\n\nLANGUAGE: INI\nCODE:\n```\nMediaPlayKey=\nMediaPauseKey=\nMediaStopKey=\nMediaRecordKey=\nMediaNextTrackKey=\nMediaPreviousTrackKey=\nMediaFastForwardKey=\nMediaRewindKey=\nMediaChannelUpKey=\nMediaChannelDownKey=\nMediaSelectKey=\nMediaTogglePlayPauseKey=\nMediaIncreaseVolumeKey=\nMediaDecreaseVolumeKey=\nMediaMuteVolumeKey=\nMediaIncreaseTrebleKey=\nMediaDecreaseTrebleKey=\nMediaIncreaseBassKey=\nMediaDecreaseBassKey=\nMediaBoostBassKey=\nMediaIncreaseMicrophoneVolumeKey=\nMediaDecreaseMicrophoneVolumeKey=\nMediaMuteMicrophoneVolumeKey=\nMediaToggleMicrophoneOnOffKey=\n```\n\n----------------------------------------\n\nTITLE: XamlNodeList Write and Read Validation in C#\nDESCRIPTION: Checks for proper lifecycle management of XAML writers and readers, preventing operations on closed or active writers.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nCloseXamlWriterBeforeReading=Must close XamlWriter before reading from XamlNodeList.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCannotWriteClosedWriter=Cannot write on a closed XamlWriter.\n```\n\nLANGUAGE: C#\nCODE:\n```\nWriterIsClosed=An attempt was made to write to a XamlWriter that has had its Closed method called.\n```\n\n----------------------------------------\n\nTITLE: ClrObjectRuntime Utility Error Messages in C#\nDESCRIPTION: Contains various error messages related to runtime object creation, method invocation, property access, and collection handling during XAML object runtime processing.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nDirectiveGetter=Directive getter is not implemented.\n```\n\nLANGUAGE: C#\nCODE:\n```\nBadMethod=Bad method '{0}' on '{1}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCannotResolveTypeForFactoryMethod=Cannot resolve type '{0}' for method '{1}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCannotCreateBadType=Cannot create an instance of '{0}' because XamlType is not valid.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCannotCreateBadEventDelegate=Cannot create an instance of '{0}' because XamlType is not valid.\n```\n\nLANGUAGE: C#\nCODE:\n```\nAttachableEventNotImplemented=Attachable events are not implemented.\n```\n\nLANGUAGE: C#\nCODE:\n```\nListNotIList=List collection is not an IList.\n```\n\nLANGUAGE: C#\nCODE:\n```\nArrayAddNotImplemented=Array Add method is not implemented.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoAddMethodFound=No Add methods found on type '{0}' for a value of type '{1}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMissingTypeConverter=Creating from text without a TypeConverter is not allowed.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCantSetReadonlyProperty=Cannot set read-only property '{0}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCantGetWriteonlyProperty=Cannot get write-only property '{0}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nXmlDataNull=The value for XmlData property '{0}' is null or not IXmlSerializable.\n```\n\nLANGUAGE: C#\nCODE:\n```\nXmlValueNotReader=The value for XmlData property '{0}' is not an XmlReader.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNameNotFound=Name resolution failure. '{0}' was not found.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMustHaveName=Reference must have a Name to resolve.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMethodInvocation=The invocation of a method '{0}' that matches the specified binding constraints threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nGetValue=Get property '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nSetValue=Set property '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nAddCollection=Add value to collection of type '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nAddDictionary=Add value to dictionary of type '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nSetConnectionId=Set connectionId threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nInitializationGuard=Initialization of '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nSetUriBase=Setting xml:base on '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nProvideValue=Provide value on '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nSetXmlInstance=Setting xml instance on '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nGetConverterInstance=Getting instance of '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nDeferredLoad=Deferred load threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nDeferredSave=Save of deferred-load content threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nFactoryReturnedNull=The factory method '{0}' that matches the specified binding constraints returned null.\n```\n\nLANGUAGE: C#\nCODE:\n```\nConstructorInvocation=The invocation of the constructor on type '{0}' that matches the specified binding constraints threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoDefaultConstructor=No default constructor found for type '{0}'. You can use the Arguments or FactoryMethod directives to construct this type.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoConstructor=No matching constructor found on type '{0}'. You can use the Arguments or FactoryMethod directives to construct this type.\n```\n\nLANGUAGE: C#\nCODE:\n```\nDeferringLoaderInstanceNull=Cannot get a XamlDeferringLoader from XamlValueConverter '{0}' because its ConverterInstance property is null.\n```\n\nLANGUAGE: C#\nCODE:\n```\nTypeConverterFailed2=Failed to convert '{0}' to type '{1}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCanConvertFromFailed=Failed to check convertibility from type '{0}' using '{1}'. This generally indicates an incorrectly implemented TypeConverter.\n```\n\nLANGUAGE: C#\nCODE:\n```\nCanConvertToFailed=Failed to check convertibility to type '{0}' using '{1}'. This generally indicates an incorrectly implemented TypeConverter.\n```\n\nLANGUAGE: C#\nCODE:\n```\nShouldSerializeFailed=ShouldSerialize check failed for member '{0}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nGetItemsReturnedNull=XamlTypeInvoker.GetItems returned null for type '{0}'. This generally indicates an incorrectly implemented collection type.\n```\n\nLANGUAGE: C#\nCODE:\n```\nGetItemsException=Retrieving items in collection or dictionary of type '{0}' threw an exception.\n```\n\nLANGUAGE: C#\nCODE:\n```\nAPSException=Enumerating attached properties on object '{0}' threw an exception.\n```\n\n----------------------------------------\n\nTITLE: Defining WPF UCE Render Event Classes in WMI\nDESCRIPTION: Defines WMI event classes for tracking WPF rendering operations. These classes capture rendering begin/end events with identifiers for performance monitoring and diagnostics.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_0\n\nLANGUAGE: MOF\nCODE:\n```\nclass Template_10_V0:TWClientUceRender_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     uint64 Id;\n};\n```\n\n----------------------------------------\n\nTITLE: Storyboard Error Messages\nDESCRIPTION: These error messages address issues related to Storyboard animations in WPF. The errors detail problems like type mismatches, name scope resolutions, and frozen object animation.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_1\n\nLANGUAGE: N/A\nCODE:\n```\nStoryboard_AnimationMismatch='{0}' animation object cannot be used to animate property '{1}' because it is of incompatible type '{2}'.\nStoryboard_BeginStoryboardNameNotFound='{0}' object Name found but it is not a BeginStoryboard object.\nStoryboard_BeginStoryboardNameRequired=BeginStoryboardName required to find the target of this action.\nStoryboard_BeginStoryboardNoStoryboard='{0}' BeginStoryboard does not have an associated Storyboard object.\nStoryboard_ComplexPathNotSupported=Cannot automatically create animation clone for frozen property values on '{0}' objects. Only FrameworkElement and FrameworkContentElement (or derived) types are supported.\nStoryboard_ImmutableTargetNotSupported=Cannot animate '{0}' on an immutable object instance.\nStoryboard_MediaElementNotFound='{0}' element of Name found but it is not a MediaElement.\nStoryboard_MediaElementRequired=MediaTimeline must be attached to a MediaElement, or have a TargetName that references a MediaElement.\nStoryboard_NameNotFound='{0}' name cannot be found in the name scope of '{1}'.\nStoryboard_NoNameScope=No applicable name scope exists to resolve the name '{0}'.\nStoryboard_NeverApplied=Cannot perform action because the specified Storyboard was not applied to this object for interactive control.\nStoryboard_PropertyPathEmpty=TargetProperty path cannot be empty.\nStoryboard_PropertyPathFrozenCheckFailed='{0}' property value in the path '{1}' points to immutable instance of '{2}'.\nStoryboard_PropertyPathSealedCheckFailed='{0}' property value in the path '{1}' is on an immutable instance of '{2}'.\nStoryboard_PropertyPathIncludesNonAnimatableProperty='{0}' Storyboard.TargetProperty path contains nonanimatable property '{1}'.\nStoryboard_PropertyPathMustPointToDependencyObject='{0}' property does not point to a DependencyObject in path '{1}'.\nStoryboard_PropertyPathMustPointToDependencyProperty='{0}' Storyboard.TargetProperty path does not point to a DependencyProperty.\nStoryboard_PropertyPathObjectNotFound='{0}' property value not found in property path '{1}'.\nStoryboard_PropertyPathPropertyNotFound=Cannot resolve all property references in the property path '{0}'. Verify that applicable objects support the properties.\nStoryboard_PropertyPathUnresolved='{0}' property path cannot be resolved to an animatable property.\nStoryboard_StoryboardReferenceRequired=Must have a Storyboard object reference before this trigger action can execute.\nStoryboard_TargetNameNotDependencyObject='{0}' target object Name found but the object is not a valid target type.\nStoryboard_TargetNameNotAllowedInStyle=A Storyboard tree in a Style cannot specify a TargetName. Remove TargetName '{0}'.\nStoryboard_TargetPropertyRequired=Must specify TargetProperty for '{0}'.\nStoryboard_UnableToFreeze=Cannot freeze this Storyboard timeline tree for use across threads.\nStoryboard_UnrecognizedHandoffBehavior=HandoffBehavior value is not valid.\nStoryboard_UnrecognizedTimeSeekOrigin=TimeSeekOrigin value is not valid.\nStoryboard_NoTarget=No target was specified for '{0}'.\n```\n\n----------------------------------------\n\nTITLE: Defining Page Loaded Event Class with PageNumber Property in C++\nDESCRIPTION: Declares Template_32_V0 inherited from TWClientDRXPageLoaded_V0 representing a page loaded event in the WPF framework. It includes metadata to mark it as a dynamic event and a single data member PageNumber indicating which page was loaded, using a signed 32-bit integer.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_32\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"Template_32\") : amended,\n EventType(0),\n EventTypeName(  \"WClientDRXPageLoaded\") : amended\n]\nclass Template_32_V0:TWClientDRXPageLoaded_V0\n{\n    [WmiDataId(1),\n     Description(\"PageNumber\") : amended,\n     read]\n     sint32 PageNumber;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Begin/End Automation Event C# Class\nDESCRIPTION: Defines two classes, `WClientLayoutFireAutomationEventsBegin_V2` and `WClientLayoutFireAutomationEventsEnd_V2`, used to represent the beginning and end of layout fire automation events.  These classes derive from `TWClientLayout_V2`, indicating a hierarchical relationship. They are marked as `Dynamic` and are intended for event tracing, but the specific attributes applied to them are inherited and not fully defined in the provided context.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nclass WClientLayoutFireAutomationEventsBegin_V2:TWClientLayout_V2\n{\n\n};\n\n[Dynamic,\n Description(\"WClientLayoutFireAutomationEventsEnd\") : amended,\n EventType(16),\n EventTypeName(\"WClientLayoutFireAutomationEventsEnd\") : amended\n]\nclass WClientLayoutFireAutomationEventsEnd_V2:TWClientLayout_V2\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WClientCreateVisual, InputMessage, and Render Classes C#\nDESCRIPTION: Defines base classes and supporting classes for tracking visual creation (`WClientCreateVisual`), input messages (`WClientInputMessage`), and render handling. It provides classes to capture information related to the creation of visual elements including HWND, and data regarding input messages including HWND, Msg, WParam, and LParam. Uses attributes like `Dynamic`, `Description`, `EventType`, and `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientCreateVisual\") : amended,\n guid(\"{2dbecf62-51ea-493a-8dd0-4bee1ccbe8aa}\"),\n EventVersion(2),\n DisplayName(\"WClientCreateVisual\") : amended\n]\nclass TWClientCreateVisual_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"Template_18\") : amended,\n EventType(0),\n EventTypeName(  \"WClientCreateVisual\") : amended\n]\nclass Template_18_V0:TWClientCreateVisual_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n    [WmiDataId(2),\n     Description(\"HWND\") : amended,\n     read]\n     sint64 HWND;\n};\n\n[Dynamic,\n Description(\"WClientInputMessage\") : amended,\n guid(\"{4ac79bac-7dfb-4402-a910-fdafe16f29b2}\"),\n EventVersion(2),\n DisplayName(\"WClientInputMessage\") : amended\n]\nclass TWClientInputMessage_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"Template_19\") : amended,\n EventType(0),\n EventTypeName(  \"WClientInputMessage\") : amended\n]\nclass Template_19_V0:TWClientInputMessage_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n    [WmiDataId(2),\n     Description(\"HWND\") : amended,\n     read]\n     sint64 HWND;\n    [WmiDataId(3),\n     Description(\"Msg\") : amended,\n     read]\n     sint32 Msg;\n    [WmiDataId(4),\n     Description(\"WParam\") : amended,\n     read]\n     sint32 WParam;\n    [WmiDataId(5),\n     Description(\"LParam\") : amended,\n     read]\n     sint32 LParam;\n};\n```\n\n----------------------------------------\n\nTITLE: Modeling WPF Render Scheduling Event Data - MOF DSL\nDESCRIPTION: Provides the 'Template_24_V0' class, derived from 'TWClientScheduleRender_V0', holding a single 'RenderDelay' signed integer to indicate render scheduling latency. This supports performance tracing of the WPF rendering pipeline, capturing delays at scheduling points.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_22\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\nDescription(\"Template_24\") : amended,\nEventType(0),\nEventTypeName(  \"WClientScheduleRender\") : amended\n]\nclass Template_24_V0:TWClientScheduleRender_V0\n{\n    [WmiDataId(1),\n     Description(\"RenderDelay\") : amended,\n     read]\n     sint32 RenderDelay;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Zoom Event Class with Zoom Property in C++\nDESCRIPTION: Template_35_V0 inherits from TWClientDRXZoom_V0, representing zoom level changes in the WPF framework. The class includes a zoom level integer property named Zoom, providing telemetry on user zoom interactions within the UI rendering pipeline.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_36\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"Template_35\") : amended,\n EventType(0),\n EventTypeName(  \"WClientDRXZoom\") : amended\n]\nclass Template_35_V0:TWClientDRXZoom_V0\n{\n    [WmiDataId(1),\n     Description(\"Zoom\") : amended,\n     read]\n     sint32 Zoom;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WPF ParseXaml Event Schema and URITemplate - MOF DSL\nDESCRIPTION: Describes 'TWClientParseXaml_V0' and the extended 'URITemplate_V0' capturing the URI being parsed. Supports both begin and end event types, listing a 'string URI' field with null-termination and wide-character format. Useful for tracking XAML parsing operations and associating them with specific sources.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_21\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\nDescription(\"WClientParseXaml\") : amended,\nguid(\"{3164257a-c9be-4c36-9d8f-09b18ac880a6}\"),\nEventVersion(0),\nDisplayName(\"WClientParseXaml\") : amended\n]\nclass TWClientParseXaml_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\nDescription(\"URITemplate\") : amended,\nEventType{1, 2},\nEventTypeName{  \"WClientParseXamlBegin\", \"WClientParseXamlEnd\"} : amended\n]\nclass URITemplate_V0:TWClientParseXaml_V0\n{\n    [WmiDataId(1),\n     Description(\"URI\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string URI;\n};\n```\n\n----------------------------------------\n\nTITLE: Data Transfer Error Messages in WPF\nDESCRIPTION: Error messages related to data transfer operations in WPF, particularly for drag and drop functionality. These cover scope validation, OLE registration, data format validation, and file drop path constraints.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_17\n\nLANGUAGE: Resource\nCODE:\n```\nScopeMustBeUIElementOrContent=The scope must be a UIElement or ContentElement.\nOleRegisterDragDropFailure=OleRegisterDragDrop failed with return code '{0}' and window handle '{1}'.\nOleRevokeDragDropFailure=OleRevokeDragDrop failed with return code '{0}' and window handle '{1}'.\nDragDrop_DragDropEffectsInvalid='{0}' DragDropEffects is not valid.\nDragDrop_DragActionInvalid='{0}' DragAction is not valid.\nDataObject_DataFormatNotPresentOnDataObject='{0}' data format is not present on DataObject.\nDataObject_DataObjectMustHaveAtLeastOneFormat=Data object must have at least one format.\nDataObject_CannotSetDataOnAFozenOLEDataDbject=Cannot SetData on a frozen OLE data object.\nDataObject_NotImplementedEnumFormatEtc='{0}' dwDirection parameter value is not supported.\nDataObject_FileDropListIsEmpty='{0}' must contain at least one file drop path.\nDataObject_FileDropListHasInvalidFileDropPath='{0}' file drop path is not valid.\nDataObject_EmptyFormatNotAllowed=Empty string is not a valid value for parameter 'format'.\n```\n\n----------------------------------------\n\nTITLE: Defining TWClientPotentialIRTResource ETW Event Class (MOF)\nDESCRIPTION: Defines the `TWClientPotentialIRTResource_V0` class for a WPF ETW event, identified by GUID `{4055bbd6-ba41-4bd0-bc0d-6b67965229be}`. This class represents events related to potential Implicit Remoting Technology (IRT) resources within WPF applications and inherits base properties from `Microsoft_Windows_WPF`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_90\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"WClientPotentialIRTResource\") : amended,\n guid(\"{4055bbd6-ba41-4bd0-bc0d-6b67965229be}\"),\n EventVersion(0),\n DisplayName(\"WClientPotentialIRTResource\") : amended\n]\nclass TWClientPotentialIRTResource_V0:Microsoft_Windows_WPF\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding GetHeadingLevelCore in ItemAutomationPeer\nDESCRIPTION: This method overrides `GetHeadingLevelCore` to provide the heading level for an element associated with the automation peer. It's called by `GetHeadingLevel()` and returns an `AutomationHeadingLevel`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nprotected override AutomationHeadingLevel GetHeadingLevelCore();\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteTextNote WPF Event Classes in C++\nDESCRIPTION: Provides a WMI event class TDeleteTextNote_V0 and related Begin/End subclasses to represent the deletion of text notes in WPF. Each class is annotated with appropriate event and metadata attributes, following a consistent eventing model. Utilized for tracking text note deletion and its lifecycle within WPF annotation systems.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_55\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"DeleteTextNote\") : amended,\n guid(\"{7626a2f9-9a61-43a3-b7cc-bb84c2493aa7}\"),\n EventVersion(2),\n DisplayName(\"DeleteTextNote\") : amended\n]\nclass TDeleteTextNote_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"DeleteTextNoteBegin\") : amended,\n EventType(1),\n EventTypeName(\"DeleteTextNoteBegin\") : amended\n]\nclass DeleteTextNoteBegin_V0:TDeleteTextNote_V0\n{\n\n};\n\n[Dynamic,\n Description(\"DeleteTextNoteEnd\") : amended,\n EventType(2),\n EventTypeName(\"DeleteTextNoteEnd\") : amended\n]\nclass DeleteTextNoteEnd_V0:TDeleteTextNote_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Navigation Commands Key Bindings in WPF\nDESCRIPTION: Key binding definitions for navigation commands in WPF applications. These settings define the keyboard shortcuts that trigger navigation-related actions, with some having multiple alternative key combinations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_5\n\nLANGUAGE: INI\nCODE:\n```\nBrowseBackKey=Alt+Left;Backspace\nBrowseForwardKey=Alt+Right;Shift+Backspace\nBrowseHomeKey=Alt+Home;BrowserHome\nBrowseStopKey=Alt+Esc;BrowserStop\nRefreshKey=F5\nFavoritesKey=Ctrl+I\nSearchKey=F3\nIncreaseZoomKey=\nDecreaseZoomKey=\nZoomKey=\nNextPageKey=\nPreviousPageKey=\nFirstPageKey=\nLastPageKey=\nGoToPageKey=\nNavigateJournalKey=\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Document End Events for ETW in C++\nDESCRIPTION: Defines event classes to represent the end of a document lifecycle in Windows Presentation Foundation using ETW. The base class TWClientDRXEndDoc_V0 contains metadata for the document end event provider. Subclasses specify Begin and End event types for detailed event tracing. This helps in monitoring WPF document end events with precise timestamps and event details. These declarations depend on the Microsoft_Windows_WPF provider infrastructure for ETW.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_38\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXEndDoc\") : amended, guid(\"{743dd3cf-bbce-4e69-a4db-85226ec6a445}\"), EventVersion(2), DisplayName(\"WClientDRXEndDoc\") : amended]\nclass TWClientDRXEndDoc_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXEndDocBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXEndDocBegin\") : amended]\nclass WClientDRXEndDocBegin_V0:TWClientDRXEndDoc_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXEndDocEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXEndDocEnd\") : amended]\nclass WClientDRXEndDocEnd_V0:TWClientDRXEndDoc_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Page Start Events for ETW in C++\nDESCRIPTION: Specifies classes to track the start of individual pages in WPF event tracing using ETW. The TWClientDRXStartPage_V0 class acts as the base provider with identifying metadata, while the Begin and End specialized classes define event phases for detailed monitoring of page rendering operations. This structure supports capturing event timing and context related to page starts in WPF applications. It requires integration with the Microsoft_Windows_WPF ETW provider framework.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_39\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXStartPage\") : amended, guid(\"{5303d552-28ab-4dac-8bcd-0f7d5675a157}\"), EventVersion(2), DisplayName(\"WClientDRXStartPage\") : amended]\nclass TWClientDRXStartPage_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXStartPageBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXStartPageBegin\") : amended]\nclass WClientDRXStartPageBegin_V0:TWClientDRXStartPage_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXStartPageEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXStartPageEnd\") : amended]\nclass WClientDRXStartPageEnd_V0:TWClientDRXStartPage_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Assembly Name Template for Annotation Resources in C++\nDESCRIPTION: Defines AssemblyNameTemplate_V0, a class for storing annotation resource assembly names in the context of WPF and WMI eventing. Inherits from TWClientResourceBamlAssembly_V0 and contains a string parameter AssemblyName, annotated with attributes describing field semantics. Used with WMI to facilitate review and tracking of resource use during annotation processing.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_53\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"AssemblyNameTemplate\") : amended,\n EventType(0),\n EventTypeName(  \"WClientResourceBamlAssembly\") : amended\n]\nclass AssemblyNameTemplate_V0:TWClientResourceBamlAssembly_V0\n{\n    [WmiDataId(1),\n     Description(\"AssemblyName\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string AssemblyName;\n};\n```\n\n----------------------------------------\n\nTITLE: Package Store and URI Validation Strings\nDESCRIPTION: Contains string constants for package management error messages, such as duplicate packages, disallowed URIs, and schema validation errors, used during package loading or validation operations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nPackageAlreadyExists=A package with the same URI is already in the package store.\nNotAllowedPackageUri=The package URI is not allowed in the package store.\nInnerRequestNotAllowed=InnerRequest not available for preloaded packages.\nSchemaInvalidForTransport=Cannot resolve current inner request URI schema. Bypass cache only for resolvable schema types such as http, ftp, or file.\nResourceNotFoundUnderCacheOnlyPolicy=Current CachePolicy is CacheOnly but the requested resource does not exist in the cache.\nSeekNegative=Cannot set seek pointer to a negative position.\n```\n\n----------------------------------------\n\nTITLE: Declaring a Simple WPF Event Host Navigation Class – pseudo-C++\nDESCRIPTION: Defines a fundamental event class 'WpfHost_XappLauncherAppNavigated_V0' for tracking navigation actions in the WPF host. This class inherits from 'TWpfHost__V0', acts as a data carrier for event collection and has no fields. Dependencies: must be used within a WPF host diagnostic infrastructure; requires the 'TWpfHost__V0' base. No input or output data is explicitly defined at this version.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_71\n\nLANGUAGE: pseudo-C++\nCODE:\n```\nclass WpfHost_XappLauncherAppNavigated_V0:TWpfHost__V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AutomationNotificationKind Enum in C#\nDESCRIPTION: This C# code defines the `AutomationNotificationKind` enum, which is used to specify the type of notification being raised. The enum includes values for item added, item removed, action completed, action aborted, and other notification types. It's used as a parameter in the `RaiseNotificationEvent` method.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic enum AutomationNotificationKind\n{\n    ItemAdded, \n    ItemRemoved, \n    ActionCompleted, \n    ActionAborted, \n    Other\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding GetHeadingLevelCore in UIElementAutomationPeer\nDESCRIPTION: This method overrides `GetHeadingLevelCore` to provide the heading level for a `UIElement`. The method is called by `GetHeadingLevel()` and returns an `AutomationHeadingLevel`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nprotected override AutomationHeadingLevel GetHeadingLevelCore();\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Font Conversion Events for ETW in C++\nDESCRIPTION: Defines event classes for tracing font conversion operations within WPF applications via ETW. The TWClientDRXConvertFont_V0 base class describes the font conversion provider, and its Begin and End event subtypes delineate the phases of font conversion. These classes enable detailed monitoring of font resource processing in WPF diagnostics. Requires Microsoft_Windows_WPF ETW provider support.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_42\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXConvertFont\") : amended, guid(\"{88fc2d42-b1de-4588-8c3b-dc5bec03a9ac}\"), EventVersion(2), DisplayName(\"WClientDRXConvertFont\") : amended]\nclass TWClientDRXConvertFont_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXConvertFontBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXConvertFontBegin\") : amended]\nclass WClientDRXConvertFontBegin_V0:TWClientDRXConvertFont_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXConvertFontEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXConvertFontEnd\") : amended]\nclass WClientDRXConvertFontEnd_V0:TWClientDRXConvertFont_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SerializeAnnotation WPF Event Classes in C++\nDESCRIPTION: Declares TSerializeAnnotation_V0 and its event subclasses (Begin/End) for modeling the serialization process of annotation objects in WPF via WMI. These classes help capture the serialization lifecycle by providing trace points at the start and end of the process.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_65\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"SerializeAnnotation\") : amended,\n guid(\"{0148924b-5bea-43e9-b3ed-399ca13b35eb}\"),\n EventVersion(2),\n DisplayName(\"SerializeAnnotation\") : amended\n]\nclass TSerializeAnnotation_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"SerializeAnnotationBegin\") : amended,\n EventType(1),\n EventTypeName(\"SerializeAnnotationBegin\") : amended\n]\nclass SerializeAnnotationBegin_V0:TSerializeAnnotation_V0\n{\n\n};\n\n[Dynamic,\n Description(\"SerializeAnnotationEnd\") : amended,\n EventType(2),\n EventTypeName(\"SerializeAnnotationEnd\") : amended\n]\nclass SerializeAnnotationEnd_V0:TSerializeAnnotation_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Accessibility and UI Automation Strings\nDESCRIPTION: Error messages related to focus setting, automation timeouts, UI shutdown, and provider validation, used for accessibility testing and automation feedback.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nSetFocusFailed=The target element cannot receive focus.\nAutomationTimeout=Timeout occurred while attempting to access UI. The application might be busy or unresponsive.\nAutomationDispatcherShutdown=Automation client cannot access UI because application is shutting down.\nTextProvider_InvalidChild='{0}' parameter value is not a valid child element of the text provider.\nTextRangeProvider_InvalidRangeProvider='{0}' parameter value is not a valid ITextRangeProvider.\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Document Start Events for ETW in C++\nDESCRIPTION: Defines classes representing the start of a document in WPF event tracing using ETW. The base class TWClientDRXStartDoc_V0 is an ETW event provider class that includes metadata attributes like GUID and event version. Derived classes define the specific beginning and ending event types of the document start phase, facilitating detailed tracing of document lifecycle events within WPF. Dependencies include the Microsoft_Windows_WPF ETW provider infrastructure. Inputs and outputs correspond to event system data consumption and generation.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_37\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXStartDoc\") : amended, guid(\"{f3fba666-fa0f-4487-b846-9f204811bf3d}\"), EventVersion(2), DisplayName(\"WClientDRXStartDoc\") : amended]\nclass TWClientDRXStartDoc_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXStartDocBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXStartDocBegin\") : amended]\nclass WClientDRXStartDocBegin_V0:TWClientDRXStartDoc_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXStartDocEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXStartDocEnd\") : amended]\nclass WClientDRXStartDocEnd_V0:TWClientDRXStartDoc_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Formatted Trace Method (C#)\nDESCRIPTION: Illustrates how to invoke a generated trace method for a message requiring string formatting. It calls the static `Trace` method, passing the event type, the result of calling a generated formatting method (`TraceClass.TraceFormat`) with formatting arguments (`arg1`, `arg2`), and additional trace data arguments (`data1`, `data2`). The formatting method presumably prepares the message string before the main `Trace` call.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/WindowsBase/AvTraceMessages.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nTraceClass.Trace(TraceEventType.Error, TraceClass.TraceFormat( arg1, arg2 ), data1, data2 );\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Visual Cache Event Allocation – pseudo-C++\nDESCRIPTION: Represents the 'VisualCacheTemplate_V0' class for tracking allocations in the WPF visual cache. Declares four fields: 'uX', 'uY', 'uWidth', and 'uHeight', all unsigned integers. Designed for diagnostics and performance analysis around cache utilization and layout geometry. Requires that event collection infrastructure supports the declared data types.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_77\n\nLANGUAGE: pseudo-C++\nCODE:\n```\nclass VisualCacheTemplate_V0:TVisualCacheAlloc_V0\n{\n    uint32 uX;\n    uint32 uY;\n    uint32 uWidth;\n    uint32 uHeight;\n};\n```\n\n----------------------------------------\n\nTITLE: Timing Error Messages in WPF\nDESCRIPTION: Error messages related to timing operations in WPF animations and timelines. These cover validation of timing parameters, timeline hierarchies, seek operations, and slip behavior constraints.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_13\n\nLANGUAGE: Resource\nCODE:\n```\nTiming_ChildMustBeTimeline=A child of a Timeline in \"XAML\" must also be a Timeline or a class that derives from Timeline.\nTiming_CreateClockMustReturnNewClock=The {0}.CreateClock method returned a pre-existing object, rather than a new object inheriting from TimelineClock.\nTiming_DifferentThreads=The specified timeline belongs to a different thread than this timeline.\nTiming_EnumeratorInvalidated=The enumeration is no longer valid because the collection it enumerates has changed.\nTiming_EnumeratorOutOfRange=The enumerator is out of range.\nTiming_InvalidArgAccelAndDecel=Property value must be between 0.0 and 1.0.\nTiming_AccelAndDecelGreaterThanOne=The sum of AccelerationRatio and DecelerationRatio must be less than or equal to one.\nTiming_InvalidArgFiniteNonNegative=Property value must be finite and greater than or equal to zero.\nTiming_InvalidArgFinitePositive=Property value must be finite and greater than zero.\nTiming_InvalidArgNonNegative=Property value must be greater than or equal to zero or indefinite.\nTiming_InvalidArgPositive=Property value must be greater than zero or indefinite.\nTiming_NoTextChildren=Timeline objects cannot have text objects as children.\nTiming_NotTimeSpan=Unable to return a TimeSpan property value for a Duration value of '{0}'. Check the HasTimeSpan property before requesting the TimeSpan property value from a Duration.\nTiming_OperationEnqueuedOutOfOrder=A timing operation has been not been queued in the appropriate order.\nTiming_RepeatBehaviorInvalidIterationCount='{0}' is not a valid IterationCount value for a RepeatBehavior structure. An IterationCount value must represent a number that is greater than or equal to zero but not infinite.\nTiming_RepeatBehaviorInvalidRepeatDuration='{0}' is not a valid RepeatDuration value for a RepeatBehavior structure. A RepeatDuration value must be a TimeSpan value greater than or equal to zero ticks.\nTiming_RepeatBehaviorNotIterationCount='{0}' RepeatBehavior does not represent an iteration count and does not have an IterationCount value.\nTiming_RepeatBehaviorNotRepeatDuration='{0}' RepeatBehavior does not represent a repeat duration and does not have a RepeatDuration value.\nTiming_SeekDestinationAmbiguousDueToSlip=The ClockController.Seek method was called with arguments that describe a seek destination that seeks a child with Slip but no defined duration. It is unclear if we are seeking the child or seeking past the child's duration.\nTiming_SeekDestinationIndefinite=The ClockController.Seek method was called using TimeSeekOrigin.Duration as the seekOrigin parameter for a Clock that has a duration of Forever. Clocks that have duration of Forever must use TimeSeekOrigin.BeginTime.\nTiming_SeekDestinationNegative=The ClockController.Seek method was called with arguments that describe a seek destination with a negative value. The seek destination must be a time greater than or equal to zero.\nTiming_SkipToFillDestinationIndefinite=Cannot call the ClockController.SkipToFill method for a Clock that has a Duration or RepeatDuration of Forever, because this Clock will never reach its fill period.\nTiming_SlipBehavior_SlipOnlyOnSimpleTimelines=SlipBehavior.Slip is supported only on root ParallelTimelines that do not reverse, accelerate, decelerate, or have a RepeatBehavior specified as a Duration.\nTiming_SlipBehavior_SyncOnlyWithSimpleParents=Clocks with CanSlip cannot have parents or ancestors with AutoReverse, AccelerationRatio, or DecelerationRatio.\nTiming_CanSlipOnlyOnSimpleTimelines=CanSlip is supported only on timelines without AutoReverse, AccelerationRatio, or DecelerationRatio.\n```\n\n----------------------------------------\n\nTITLE: Defining Page Jump Event Class with PageNumber and FirstVisiblePage Properties in C++\nDESCRIPTION: Template_34_V0 class extends TWClientDRXPageJump_V0 to model a page jump event in WPF telemetry. It includes two integer data members: PageNumber indicating the target page of the jump and FirstVisiblePage indicating the first visible page post jump, for detailed UI state tracking.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_35\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"Template_34\") : amended,\n EventType(0),\n EventTypeName(  \"WClientDRXPageJump\") : amended\n]\nclass Template_34_V0:TWClientDRXPageJump_V0\n{\n    [WmiDataId(1),\n     Description(\"PageNumber\") : amended,\n     read]\n     sint32 PageNumber;\n    [WmiDataId(2),\n     Description(\"FirstVisiblePage\") : amended,\n     read]\n     sint32 FirstVisiblePage;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateSNCWithAnnotation WPF Event Classes in C++\nDESCRIPTION: Displays TUpdateSNCWithAnnotation_V0 and its subordinate Begin/End event types, supporting tracking of operations that sync SNC with annotation content in WPF systems. All classes use a consistent event pattern and relevant metadata attributes for WMI monitoring.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_68\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"UpdateSNCWithAnnotation\") : amended,\n guid(\"{59c337ce-9cc2-4a86-9bfa-061fe954086b}\"),\n EventVersion(2),\n DisplayName(\"UpdateSNCWithAnnotation\") : amended\n]\nclass TUpdateSNCWithAnnotation_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"UpdateSNCWithAnnotationBegin\") : amended,\n EventType(1),\n EventTypeName(\"UpdateSNCWithAnnotationBegin\") : amended\n]\nclass UpdateSNCWithAnnotationBegin_V0:TUpdateSNCWithAnnotation_V0\n{\n\n};\n\n[Dynamic,\n Description(\"UpdateSNCWithAnnotationEnd\") : amended,\n EventType(2),\n EventTypeName(\"UpdateSNCWithAnnotationEnd\") : amended\n]\nclass UpdateSNCWithAnnotationEnd_V0:TUpdateSNCWithAnnotation_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unexpected Software Fallback Event with Reason – pseudo-C++\nDESCRIPTION: Implements the GfxSoftwareFallback event class, which inherits from 'TUnexpectedSoftwareFallback_V0' and exposes a 'Reason' property of type 'uint32' with enumerated value mapping. Used to record and transmit fallback reasons for software rendering in the WPF graphics subsystem. Requires integration with event tracing systems to map reason codes to diagnostic messages.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_76\n\nLANGUAGE: pseudo-C++\nCODE:\n```\nclass GfxSoftwareFallback_V0:TUnexpectedSoftwareFallback_V0\n{\n    uint32  Reason;\n};\n```\n\n----------------------------------------\n\nTITLE: XamlWriter Utility Placeholder\nDESCRIPTION: Placeholder for XamlWriter related utilities or exception messages, currently undefined in provided snippets.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Declaring WPF Load Primitive Events for ETW in C++\nDESCRIPTION: Specifies event classes for loading primitive graphics elements in WPF. The TWClientDRXLoadPrimitive_V0 class serves as the main event source with appropriate metadata. Subclasses WClientDRXLoadPrimitiveBegin_V0 and WClientDRXLoadPrimitiveEnd_V0 mark the phases for detailed ETW tracking of primitive loading. Integrates with Microsoft_Windows_WPF ETW event schema to help diagnose rendering operations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_45\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXLoadPrimitive\") : amended, guid(\"{d0b70c99-450e-4872-a2d4-fbfb1dc797fa}\"), EventVersion(2), DisplayName(\"WClientDRXLoadPrimitive\") : amended]\nclass TWClientDRXLoadPrimitive_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXLoadPrimitiveBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXLoadPrimitiveBegin\") : amended]\nclass WClientDRXLoadPrimitiveBegin_V0:TWClientDRXLoadPrimitive_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXLoadPrimitiveEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXLoadPrimitiveEnd\") : amended]\nclass WClientDRXLoadPrimitiveEnd_V0:TWClientDRXLoadPrimitive_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Visualizing API Review Workflow with Mermaid Sequence Diagram\nDESCRIPTION: This snippet provides a Mermaid syntax sequence diagram that models the interaction flow in the .NET WPF API review process. It outlines participants such as the Requester, WPF Owners, and the API review board (FXDC), displaying the sequential steps of issue filing, ownership assignment, discussion, labeling, review, and the resulting outcomes including approval, requests for more work, or rejection. The diagram serves as a visual guide to understand the roles and communication during API review.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/project/api-review-process.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant R as Requester\n    participant O as WPF Owners\n    participant F as API review board <br> (FXDC)\n    R ->> O: Files issue under dotnet/wpf\n    note over O: Assigns owner\n    \n    note over R, O: Discussion\n\n    O ->> F: Label api-ready-for-review\n    \n    note over F: Performs review\n\n    alt is accepted\n        F ->> R: Label api-approved\n    else is work needed\n        F ->> O: Label api-needs-work\n    else is rejected\n        F ->> R: Issue is closed\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining CreateHighlight WPF Event Classes in C++\nDESCRIPTION: Specifies TCreateHighlight_V0 and its Begin/End subclasses for representing highlight creation operations in WPF through WMI. The event classes are structured with unique GUIDs, descriptive metadata, and structured inheritance, facilitating fine-grained monitoring of highlight state changes.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_57\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"CreateHighlight\") : amended,\n guid(\"{c2a5edb8-ac73-41ef-a943-a8a49fa284b1}\"),\n EventVersion(2),\n DisplayName(\"CreateHighlight\") : amended\n]\nclass TCreateHighlight_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"CreateHighlightBegin\") : amended,\n EventType(1),\n EventTypeName(\"CreateHighlightBegin\") : amended\n]\nclass CreateHighlightBegin_V0:TCreateHighlight_V0\n{\n\n};\n\n[Dynamic,\n Description(\"CreateHighlightEnd\") : amended,\n EventType(2),\n EventTypeName(\"CreateHighlightEnd\") : amended\n]\nclass CreateHighlightEnd_V0:TCreateHighlight_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AnimRenderHandler Event Classes C#\nDESCRIPTION: Defines event classes related to animation rendering within WPF applications. Includes base class `TWClientAnimRenderHandler_V0`, `WClientAnimRenderHandlerEnd_V0` and `PerfElementID_V0` classes. `PerfElementID_V0` captures the ID during the beginning of animation render operations.  Uses attributes like `Dynamic`, `Description`, `EventType`, and `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientAnimRenderHandler\") : amended,\n guid(\"{521c1c8d-faaa-435b-ad8c-1d64442bfd70}\"),\n EventVersion(2),\n DisplayName(\"WClientAnimRenderHandler\") : amended\n]\nclass TWClientAnimRenderHandler_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"PerfElementID\") : amended,\n EventType(1),\n EventTypeName(  \"WClientAnimRenderHandlerBegin\") : amended\n]\nclass PerfElementID_V0:TWClientAnimRenderHandler_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n};\n\n[Dynamic,\n Description(\"WClientAnimRenderHandlerEnd\") : amended,\n EventType(2),\n EventTypeName(\"WClientAnimRenderHandlerEnd\") : amended\n]\nclass WClientAnimRenderHandlerEnd_V0:TWClientAnimRenderHandler_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AnnotationTextChanged WPF Event Classes in C++\nDESCRIPTION: Adds TAnnotationTextChanged_V0 for representing events related to changes in annotation text in WPF annotation management. It is assigned a unique GUID, event version, and display name, facilitating monitoring of annotation content changes. No Begin/End sub-events are apparent in the provided segment.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_69\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"AnnotationTextChanged\") : amended,\n guid(\"{8bb912b9-39dd-4208-ad62-be66fe5b7ba5}\"),\n EventVersion(2),\n DisplayName(\"AnnotationTextChanged\") : amended\n]\nclass TAnnotationTextChanged_V0:Microsoft_Windows_WPF\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CreateOrAddResourceOnChannel Event and Payload Template - MOF\nDESCRIPTION: Declares the CreateOrAddResourceOnChannel event along with its data template. The template defines a 64-bit integer Performance Element Id, a pointer to a rendering channel, a 32-bit resource handle, and a 32-bit resource type. It enables detailed telemetry regarding resource creation or addition events on WPF rendering channels. Dependencies: WMI, pointer typing. Inputs: identifiers and pointers; output: structured event notification for resource tracking.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_83\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"CreateOrAddOnChnl\") : amended,\n EventType(0),\n EventTypeName(  \"CreateOrAddResourceOnChannel\") : amended\n]\nclass CreateOrAddOnChnl_V0:TCreateOrAddResourceOnChannel_V0\n{\n    [WmiDataId(1),\n     Description(\"PerfEltId\") : amended,\n     read]\n     sint64 PerfEltId;\n    [WmiDataId(2),\n     Description(\"ChannelPtr\") : amended,\n     pointer,\n     read]\n     pointer ChannelPtr;\n    [WmiDataId(3),\n     Description(\"ResourceHandle\") : amended,\n     read]\n     uint32 ResourceHandle;\n    [WmiDataId(4),\n     Description(\"ResourceType\") : amended,\n     read]\n     uint32 ResourceType;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Page Down Event Class with VerticalOffset Property in C++\nDESCRIPTION: Defines Template_33_V0 derived from TWClientDRXPageDown_V0 representing a page down scrolling event. It contains a VerticalOffset field as a signed 32-bit integer indicating the new vertical offset after the page down operation within the UI.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_34\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"Template_33\") : amended,\n EventType(0),\n EventTypeName(  \"WClientDRXPageDown\") : amended\n]\nclass Template_33_V0:TWClientDRXPageDown_V0\n{\n    [WmiDataId(1),\n     Description(\"VerticalOffset\") : amended,\n     read]\n     sint32 VerticalOffset;\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Arguments Using Utilities.Utility in C#\nDESCRIPTION: Demonstrates defining a class with boolean and string array fields representing command line options and using Utilities.Utility.ParseCommandLineArguments to populate an instance from the raw arguments array. The snippet shows error handling by displaying usage instructions when parsing fails. It supports arguments such as /lines, /words, /chars, and /files. Dependencies include the Utilities.Utility class with ParseCommandLineArguments and CommandLineArgumentsUsage methods. Inputs are string[] args representing command line arguments; outputs are the populated WCArguments instance or usage messages upon error.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/WpfGfx/codegen/mcg/main/cmdline/readme.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclass WCArguments\n{\n    public bool lines;\n    public bool words;\n    public bool chars;\n    public string[] files;\n}\n\nclass WC\n{\n    static void Main(string[] args)\n    {\n        WCArguments parsedArgs = new WCArguments();\n        if (!Utilities.Utility.ParseCommandLineArguments(args, parsedArgs)) \n        {\n            // error encountered in arguments. Display usage message\n            System.Console.Write(Utilities.Utility.CommandLineArgumentsUsage(typeof(WCArguments)));\n        }\n        else\n        {\n            // insert application code here\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Resource Cache Events (Value, Null, Miss) for ETW in C++\nDESCRIPTION: Defines three ETW event classes for tracing the WPF resource cache states: cache hit with value (WClientResourceCacheValue_V0), cache miss (WClientResourceCacheMiss_V0), and null cache entries (WClientResourceCacheNull_V0). Each class includes an event provider with identifying metadata and event type 0, supporting diagnostic tracing of resource cache behavior in WPF applications. Syntax and structure require Microsoft_Windows_WPF provider integration.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_50\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientResourceCacheValue\") : amended, guid(\"{3b253e2d-72a5-489e-8c65-56c1e6c859b5}\"), EventVersion(2), DisplayName(\"WClientResourceCacheValue\") : amended]\nclass TWClientResourceCacheValue_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientResourceCacheValue\") : amended, EventType(0), EventTypeName(\"WClientResourceCacheValue\") : amended]\nclass WClientResourceCacheValue_V0:TWClientResourceCacheValue_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientResourceCacheNull\") : amended, guid(\"{7866a65b-2f38-43b6-abd2-df433bbca073}\"), EventVersion(2), DisplayName(\"WClientResourceCacheNull\") : amended]\nclass TWClientResourceCacheNull_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientResourceCacheNull\") : amended, EventType(0), EventTypeName(\"WClientResourceCacheNull\") : amended]\nclass WClientResourceCacheNull_V0:TWClientResourceCacheNull_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientResourceCacheMiss\") : amended, guid(\"{0420755f-d416-4f15-939f-3e2cd3fcea23}\"), EventVersion(2), DisplayName(\"WClientResourceCacheMiss\") : amended]\nclass TWClientResourceCacheMiss_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientResourceCacheMiss\") : amended, EventType(0), EventTypeName(\"WClientResourceCacheMiss\") : amended]\nclass WClientResourceCacheMiss_V0:TWClientResourceCacheMiss_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: DLL Renaming Convention\nDESCRIPTION: Illustrates the renaming pattern applied to the redistributed DLLs. A `_cor3` suffix is added to avoid conflicts with potentially different versions of the same DLLs that might be deployed by the application itself.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/redistributables.md#_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\n- vcruntime140.dll -> renamed to vcruntime140_cor3.dll \n- d3dcompiler_47.dll -> renamed to d3dcompiler_47_cor3.dll\n```\n\n----------------------------------------\n\nTITLE: Getting Heading Level from AutomationPeer\nDESCRIPTION: This method, `GetHeadingLevel`, retrieves the heading level of an element associated with an automation peer.  It is a public method that does not take any parameters and returns an `AutomationHeadingLevel`.  It may throw an `InvalidOperationException` if a public call is already in progress.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic AutomationHeadingLevel GetHeadingLevel();\n```\n\n----------------------------------------\n\nTITLE: Defining CreateChannel Event and Template for Channel Pointers - MOF\nDESCRIPTION: Creates a template for the CreateChannel event that provides both a pointer to the created rendering channel and its 32-bit handle. Enables consumers to track WPF channel instantiation events. The two fields are marked for pointer and integer marshalling under WMI. Inputs: pointer and handle at channel creation; outputs: corresponding event instance to WMI. Requires pointer support on the platform.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_85\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"CreateChannel\") : amended,\n EventType(0),\n EventTypeName(  \"CreateChannel\") : amended\n]\nclass CreateChannel_V0:TCreateChannel_V0\n{\n    [WmiDataId(1),\n     Description(\"ChannelPtr\") : amended,\n     pointer,\n     read]\n     pointer ChannelPtr;\n    [WmiDataId(2),\n     Description(\"ChannelHandle\") : amended,\n     read]\n     uint32 ChannelHandle;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ReleaseOnChannel Event with Channel and Resource Handles - MOF\nDESCRIPTION: Defines a template for ReleaseOnChannel events containing a channel pointer and resource handle. Used for diagnostic tracing of resource release events in WPF, ensuring precise correlation to both channel and resource. Input fields are annotated for pointer and integer marshalling via WMI. Dependencies include WMI type system and event attributes. Expected input: channel and resource IDs; outputs: trace event data. Limited to platforms with pointer support.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_86\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"ReleaseOnChannel\") : amended,\n EventType(0),\n EventTypeName(  \"ReleaseOnChannel\") : amended\n]\nclass ReleaseOnChannel_V0:TReleaseOnChannel_V0\n{\n    [WmiDataId(1),\n     Description(\"ChannelPtr\") : amended,\n     pointer,\n     read]\n     pointer ChannelPtr;\n    [WmiDataId(2),\n     Description(\"ResourceHandle\") : amended,\n     read]\n     uint32 ResourceHandle;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PerfElementInfo and PerfElementName Templates for WPF Elements - MOF\nDESCRIPTION: Declares two templates (PerfElementInfo_V0 and PerfElementName_V0) for WPF element identification and metadata capture, including fields for ID (64-bit signed), type string, and additional data or name string, plus an AssemblyID integer. These allow WPF tracing infrastructure to associate IDs with strongly typed, null-terminated string metadata using Unicode (format \"w\"). Dependencies: MOF string termination and format attributes, proper string encoding. Inputs: element metadata at instrumentation points; outputs: corresponding event records.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_87\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"PerfElementInfo\") : amended,\n EventType(0),\n EventTypeName(  \"PerfElementIDAssignment\") : amended\n]\nclass PerfElementInfo_V0:TWPFName_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n    [WmiDataId(2),\n     Description(\"Type\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string Type;\n    [WmiDataId(3),\n     Description(\"Data\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string Data;\n    [WmiDataId(4),\n     Description(\"AssemblyID\") : amended,\n     read]\n     sint64 AssemblyID;\n};\n\n[Dynamic,\n Description(\"PerfElementName\") : amended,\n EventType(10),\n EventTypeName(  \"PerfElementIDName\") : amended\n]\nclass PerfElementName_V0:TWPFName_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n    [WmiDataId(2),\n     Description(\"Type\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string Type;\n    [WmiDataId(3),\n     Description(\"Name\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string Name;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WClientDRXGetStream Event Class and Its Begin/End Variants in C++\nDESCRIPTION: Declares TWClientDRXGetStream_V0 as a dynamic WPF event class with associated GUID and version info. This base event is extended by WClientDRXGetStreamBegin_V0 and WClientDRXGetStreamEnd_V0 classes representing start and end sub-events respectively, each tagged with event types and names. These classes encapsulate the lifecycle of the 'GetStream' operation within WPF telemetry events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_30\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"WClientDRXGetStream\") : amended,\n guid(\"{3f4510eb-9ee8-4b80-9ec7-775efeb1ba72}\"),\n EventVersion(2),\n DisplayName(\"WClientDRXGetStream\") : amended\n]\nclass TWClientDRXGetStream_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"WClientDRXGetStreamBegin\") : amended,\n EventType(1),\n EventTypeName(\"WClientDRXGetStreamBegin\") : amended\n]\nclass WClientDRXGetStreamBegin_V0:TWClientDRXGetStream_V0\n{\n\n};\n\n[Dynamic,\n Description(\"WClientDRXGetStreamEnd\") : amended,\n EventType(2),\n EventTypeName(\"WClientDRXGetStreamEnd\") : amended\n]\nclass WClientDRXGetStreamEnd_V0:TWClientDRXGetStream_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Data Template for WPF Client UI Response - MOF DSL\nDESCRIPTION: Defines 'Template_22_V0' inheriting from 'TWClientUIResponse_V0', specifying data fields 'ContextID' and 'ResponseID' as signed 32-bit integers for WPF UI response events. These properties enable tooling to capture contextual and response information during diagnostics.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_18\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\nDescription(\"Template_22\") : amended,\nEventType(0),\nEventTypeName(  \"WClientUIResponse\") : amended\n]\nclass Template_22_V0:TWClientUIResponse_V0\n{\n    [WmiDataId(1),\n     Description(\"ContextID\") : amended,\n     read]\n     sint32 ContextID;\n    [WmiDataId(2),\n     Description(\"ResponseID\") : amended,\n     read]\n     sint32 ResponseID;\n};\n```\n\n----------------------------------------\n\nTITLE: Arcade Pipeline Template Folder and File Structure (Text Representation)\nDESCRIPTION: This text snippet describes the hierarchical folder and file structure of the Arcade pipeline templates. It categorizes files into 'shim', 'logic', and 'redirect' types, clarifying their roles in pipeline template management. Shims serve as intermediaries setting parameter values like is1ESPipeline, logic files contain the main template logic, and redirects forward references between template sets. The structure spans 'job', 'jobs', 'post-build', 'steps', and 'variables' folders across both 'templates' and 'templates-official' directories, highlighting the template layering and override strategy. This organization underpins the maintainability and flexibility of pipeline templates in various usage contexts.\nSOURCE: https://github.com/dotnet/wpf/blob/main/eng/common/template-guidance.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\neng\\common\\\n    [templates || templates-official]\\\n        job\\\n            job.yml                          (shim + artifact publishing logic)\n            onelocbuild.yml                  (shim)\n            publish-build-assets.yml         (shim)\n            source-build.yml                 (shim)\n            source-index-stage1.yml          (shim)\n        jobs\\\n            codeql-build.yml                 (shim)\n            jobs.yml                         (shim)\n            source-build.yml                 (shim)\n        post-build\\\n            post-build.yml                   (shim)\n            common-variabls.yml              (shim)\n            setup-maestro-vars.yml           (shim)\n        steps\\\n            publish-build-artifacts.yml      (logic)\n            publish-pipeline-artifacts.yml   (logic)\n            component-governance.yml         (shim)\n            generate-sbom.yml                (shim)\n            publish-logs.yml                 (shim)\n            retain-build.yml                 (shim)\n            send-to-helix.yml                (shim)\n            source-build.yml                 (shim)\n        variables\\\n            pool-providers.yml               (logic + redirect) # templates/variables/pool-providers.yml will redirect to templates-official/variables/pool-providers.yml if you are running in the internal project\n            sdl-variables.yml                (logic)\n    core-templates\\\n        job\\\n            job.yml                          (logic)\n            onelocbuild.yml                  (logic)\n            publish-build-assets.yml         (logic)\n            source-build.yml                 (logic)\n            source-index-stage1.yml          (logic)\n        jobs\\\n            codeql-build.yml                 (logic)\n            jobs.yml                         (logic)\n            source-build.yml                 (logic)\n        post-build\\\n            common-variabls.yml              (logic)\n            post-build.yml                   (logic)\n            setup-maestro-vars.yml           (logic)\n        steps\\\n            component-governance.yml         (logic)\n            generate-sbom.yml                (logic)\n            publish-build-artifacts.yml      (redirect)\n            publish-logs.yml                 (logic)\n            publish-pipeline-artifacts.yml   (redirect)\n            retain-build.yml                 (logic)\n            send-to-helix.yml                (logic)\n            source-build.yml                 (logic)\n        variables\\\n            pool-providers.yml               (redirect)\n```\n\n----------------------------------------\n\nTITLE: Raising ActiveTextPositionChangedEvent\nDESCRIPTION: This method raises the `ActiveTextPositionChangedEvent`. It takes two `TextPointer` parameters, `rangeStart` and `rangeEnd`, to define the changed range.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual void RaiseActiveTextPositionChangedEvent(TextPointer rangeStart, TextPointer rangeEnd);\n```\n\n----------------------------------------\n\nTITLE: ClrProperty Setter Validation in C#\nDESCRIPTION: Indicates properties that are write-only or without getters, which are invalid in XAML property specifications. Ensures property accessibility compliance.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nSetOnlyProperty='{0}'.'{1}' is a property without a getter and is not a valid XAML property.\n```\n\n----------------------------------------\n\nTITLE: Capturing Message String Data for Visual Tree Parsing - MOF DSL\nDESCRIPTION: Defines 'MessageStringTemplate_V0', used to capture null-terminated wide-character string messages related to the visual tree parsing end event in WPF. The template supports correlation and debugging by providing contextual string-based data.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_23\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\nDescription(\"MessageStringTemplate\") : amended,\nEventType(2),\nEventTypeName(  \"WClientParseInstVisTreeEnd\") : amended\n]\nclass MessageStringTemplate_V0:TWClientParseInstVisTree_V0\n{\n    [WmiDataId(1),\n     Description(\"Message\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string Message;\n};\n```\n\n----------------------------------------\n\nTITLE: Model Tree Error Messages\nDESCRIPTION: These error messages describe issues pertaining to the model tree in WPF, providing explanations related to re-parenting, parent-child relationships, and cycles in the tree.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_4\n\nLANGUAGE: N/A\nCODE:\n```\nReparentModelChildIllegal=Element already has a logical parent. It must be detached from the old parent before it is attached to a new one.\nCannotBeSelfParent=Element cannot be its own parent.\nLogicalTreeLoop=Logical tree depth exceeded while traversing the tree. This could indicate a cycle in the tree.\nHasLogicalParent=Specified element is already the logical child of another element. Disconnect it first.\n```\n\n----------------------------------------\n\nTITLE: Overriding GetHeadingLevelCore in DataGridCellItemAutomationPeer\nDESCRIPTION: This method overrides `GetHeadingLevelCore` to provide the heading level for an element associated with the automation peer. It's called by `GetHeadingLevel()` and returns an `AutomationHeadingLevel`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nprotected override AutomationHeadingLevel GetHeadingLevelCore();\n```\n\n----------------------------------------\n\nTITLE: Initializing ActiveTextPositionChangedEventArgs with ITextRangeProvider (C#)\nDESCRIPTION: Constructor for the ActiveTextPositionChangedEventArgs class, accepting an ITextRangeProvider instance to specify the location of the text change. Used by event raisers to instantiate an event argument carrying text range information. Consumers must provide a valid ITextRangeProvider, or pass null to indicate the event applies to the entire provider content. Requires UIAutomationTypes.dll and an appropriate implementation of ITextRangeProvider.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_44\n\nLANGUAGE: c#\nCODE:\n```\npublic ActiveTextPositionChangedEventArgs(ITextRangeProvider textRange);\n```\n\n----------------------------------------\n\nTITLE: Formatting CollectionChanged Warning Message in WPF\nDESCRIPTION: This snippet defines a format string for logging warnings when a collection is modified without raising CollectionChanged events, indicating incomplete support for observable collections in WPF. It is meant to be used in diagnostics to inform developers of unsupported collection modifications.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_3\n\nLANGUAGE: FORMAT\nCODE:\n```\nCollection of type '{0}' has been changed without raising a CollectionChanged event.  Support for this is incomplete and inconsistent, and will be removed completely in a future version of WPF.  Consider either (a) implementing INotifyCollectionChanged, or (b) avoiding changes to this type of collection.\n```\n\n----------------------------------------\n\nTITLE: Declaring HeadingLevelProperty Field in WPF\nDESCRIPTION: This snippet declares a static read-only field `HeadingLevelProperty` of type `AutomationProperty`.  It identifies the `HeadingLevel` property for use with UI automation providers. UI Automation client applications should use the equivalent field from `AutomationElement`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly System.Windows.Automation.AutomationProperty HeadingLevelProperty;\n```\n\n----------------------------------------\n\nTITLE: Defining WPF Application Constructor and Run Events - MOF DSL\nDESCRIPTION: Establishes event classes and template structures for logging application construction ('WClientAppCtor') and application run ('WClientAppRun') events. Each is associated with identifiers, metadata, and inter-class inheritance to capture different phases in the application lifecycle for diagnostics.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_26\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\nDescription(\"WClientAppCtor\") : amended,\nguid(\"{f9f048c6-2011-4d0a-812a-23a4a4d801f5}\"),\nEventVersion(2),\nDisplayName(\"WClientAppCtor\") : amended\n]\nclass TWClientAppCtor_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\nDescription(\"WClientAppCtor\") : amended,\nEventType(0),\nEventTypeName(\"WClientAppCtor\") : amended\n]\nclass WClientAppCtor_V0:TWClientAppCtor_V0\n{\n\n};\n\n[Dynamic,\nDescription(\"WClientAppRun\") : amended,\nguid(\"{08a719d6-ea79-4abc-9799-38eded602133}\"),\nEventVersion(2),\nDisplayName(\"WClientAppRun\") : amended\n]\nclass TWClientAppRun_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\nDescription(\"WClientAppRun\") : amended,\nEventType(0),\nEventTypeName(\"WClientAppRun\") : amended\n]\nclass WClientAppRun_V0:TWClientAppRun_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteAnnotation WPF Event Classes in C++\nDESCRIPTION: Introduces TDeleteAnnotation_V0 as the event base and corresponding Begin/End classes for deletion operations on annotations in WPF. The dual-format event model helps to delineate event boundaries, assisting WMI event monitoring and debugging of annotation deletion operations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_61\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"DeleteAnnotation\") : amended,\n guid(\"{4d832230-952a-4464-80af-aab2ac861703}\"),\n EventVersion(2),\n DisplayName(\"DeleteAnnotation\") : amended\n]\nclass TDeleteAnnotation_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"DeleteAnnotationBegin\") : amended,\n EventType(1),\n EventTypeName(\"DeleteAnnotationBegin\") : amended\n]\nclass DeleteAnnotationBegin_V0:TDeleteAnnotation_V0\n{\n\n};\n\n[Dynamic,\n Description(\"DeleteAnnotationEnd\") : amended,\n EventType(2),\n EventTypeName(\"DeleteAnnotationEnd\") : amended\n]\nclass DeleteAnnotationEnd_V0:TDeleteAnnotation_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Resource IDs for PresentationCore (WPF Localization)\nDESCRIPTION: Lists resource ID constants and their string values for the WPF PresentationCore component. These constants represent various keyboard shortcuts, commands, and internal messages, used for localization and command mapping within the core WPF framework.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/localization_untranslated_strings.md#_snippet_1\n\nLANGUAGE: Markdown Table\nCODE:\n```\n| ResourceID | Value |\n| --------------|------------- |\n| BrowseBackKey | \"Alt+Left;Backspace\" |\n| BrowseForwardKey | \"Alt+Right;Shift+Backspace\" |\n| BrowseHomeKey | \"Alt+Home;BrowserHome\" |\n| BrowseStopKey | \"Alt+Esc;BrowserStop\" |\n| ContextMenuKey | \"Shift+F10;Apps\" |\n| CopyKey | \"Ctrl+C;Ctrl+Insert\" |\n| CutKey | \"Ctrl+X;Shift+Delete\" |\n| DeleteKey | \"Del\" |\n| ExtendSelectionDownKey | \"Shift+Down\" |\n| ExtendSelectionLeftKey | \"Shift+Left\" |\n| ExtendSelectionRightKey | \"Shift+Right\" |\n| ExtendSelectionUpKey | \"Shift+Up\" |\n| FindKey | \"Ctrl+F\" |\n| HelpKey | \"F1\" |\n| HwndTarget_HardwareNotSupportDueToProtocolMismatch | \"Due to protocol mismatch hardware support is not available.\" |\n| MoveDownKey | \"Down\" |\n| MoveFocusBackKey | \"Ctrl+Left\" |\n| MoveFocusDownKey | \"Ctrl+Down\" |\n| MoveFocusForwardKey | \"Ctrl+Right\" |\n| MoveFocusPageDownKey | \"Ctrl+PageDown\" |\n| MoveFocusPageUpKey | \"Ctrl+PageUp\" |\n| MoveFocusUpKey | \"Ctrl+Up\" |\n| MoveLeftKey | \"Left\" |\n| MoveRightKey | \"Right\" |\n| MoveToEndKey | \"End\" |\n| MoveToHomeKey | \"Home\" |\n| MoveToPageDownKey | \"PageDown\" |\n| MoveToPageUpKey | \"PageUp\" |\n| MoveUpKey | \"Up\" |\n| NewKey | \"Ctrl+N\" |\n| OpenKey | \"Ctrl+O\" |\n| PasteKey | \"Ctrl+V;Shift+Insert\" |\n| PrintKey | \"Ctrl+P\" |\n| PrintPreviewKey | \"Ctrl+F2\" |\n| PropertiesKey | \"F4\" |\n| RedoKey | \"Ctrl+Y\" |\n| ReplaceKey | \"Ctrl+H\" |\n| SaveKey | \"Ctrl+S\" |\n| ScrollPageDownKey | \"PageDown\" |\n| ScrollPageUpKey | \"PageUp\" |\n| SelectAllKey | \"Ctrl+A\" |\n| SelectToEndKey | \"Shift+End\" |\n| SelectToHomeKey | \"Shift+Home\" |\n| SelectToPageDownKey | \"Shift+PageDown\" |\n| SelectToPageUpKey | \"Shift+PageUp\" |\n| StopKey | \"Esc\" |\n| UndoKey | \"Ctrl+Z\" |\n```\n\n----------------------------------------\n\nTITLE: Defining GetHeadingLevel Method in C#\nDESCRIPTION: This C# code defines the `GetHeadingLevel` method within the `AutomationProperties` class. This method gets the value of the `HeadingLevel` attached property for a given `DependencyObject`. This allows querying the heading level for UI elements during automation.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.Windows.Automation.AutomationHeadingLevel GetHeadingLevel(System.Windows.DependencyObject element);\n```\n\n----------------------------------------\n\nTITLE: Importing T4 Template Targets in SDK-style Project\nDESCRIPTION: Example of how to properly import T4 template targets in an SDK-style project. This shows the correct sequence of imports to ensure the TransformAll target runs before the Build target.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/codegen.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\n<Import Project=\"$(WpfCodeGenDir)AvTrace\\GenTraceSources.targets\" />\n<Import Project=\"$(WpfCodeGenDir)AvTrace\\GenAvMessages.targets\" />\n<Import Project=\"$(WpfCodeGenDir)DesignTimeTextTemplating.targets\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding GetHeadingLevelCore in DateTimeAutomationPeer\nDESCRIPTION: This method overrides `GetHeadingLevelCore` to provide the heading level for an element associated with the automation peer. It's called by `GetHeadingLevel()` and returns an `AutomationHeadingLevel`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nprotected override AutomationHeadingLevel GetHeadingLevelCore();\n```\n\n----------------------------------------\n\nTITLE: Collection and Converter Classes for Media Geometries\nDESCRIPTION: These snippets include collection classes like Int32Collection, PathFigureCollection, and PointCollection, along with their converters to facilitate XAML serialization and deserialization. They enable grouping multiple geometries and control conversion between string or XAML representations, vital for resource definitions and media manipulations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/eng/WpfArcadeSdk/tools/WPF_Generated_Files.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: Int32Collection.cs */\n// Implements a collection of integers, useful for indices or parameter lists in geometry.\npublic class Int32Collection { /* collection implementation */ }\n```\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: PathFigureCollectionConverter.cs */\n// Converts PathFigure collections to and from XAML or string representations.\npublic class PathFigureCollectionConverter { /* converter logic */ }\n```\n\n----------------------------------------\n\nTITLE: Defining TPenThreadPoolThreadAcquisition ETW Event Class (MOF)\nDESCRIPTION: Defines the `TPenThreadPoolThreadAcquisition_V0` class for a WPF ETW event, identified by GUID `{6c325c36-4d5f-4328-b1c6-e164796dfe2b}`. This class represents events related to thread acquisition within the WPF Pen Thread Pool and inherits base properties from `Microsoft_Windows_WPF`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_92\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"PenThreadPoolThreadAcquisition\") : amended,\n guid(\"{6c325c36-4d5f-4328-b1c6-e164796dfe2b}\"),\n EventVersion(0),\n DisplayName(\"PenThreadPoolThreadAcquisition\") : amended\n]\nclass TPenThreadPoolThreadAcquisition_V0:Microsoft_Windows_WPF\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: XamlBackgroundReader Initialization and Thread Management in C#\nDESCRIPTION: Provides error messages related to updating schema context and thread state during background reading of XAML, including uninitialized schemas and concurrent thread starts.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nSchemaContextNotInitialized=SchemaContext on writer must be initialized before accessing the reader.\n```\n\nLANGUAGE: C#\nCODE:\n```\nThreadAlreadyStarted=Thread is already started.\n```\n\n----------------------------------------\n\nTITLE: Specifying Microsoft.WindowsDesktop.App Runtime Version in Project File for Testing (XML)\nDESCRIPTION: This XML snippet shows how to specify a particular version of the Microsoft.WindowsDesktop.App shared runtime in a .NET project file to test against different runtime versions built from source. It defines a property for the desired runtime version and updates the FrameworkReference for Microsoft.WindowsDesktop.App to use that version. This allows precise control over the runtime version the app binds to during build and execution.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n    <MicrosoftWindowsDesktopAppVersion>3.0.0-preview5-27619-18</MicrosoftWindowsDesktopAppVersion>\n </PropertyGroup>\n <ItemGroup>\n   <FrameworkReference Update=\"Microsoft.WindowsDesktop.App\">\n      <TargetingPackVersion>$(MicrosoftWindowsDesktopAppVersion)</TargetingPackVersion>\n   </FrameworkReference>\n </ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Build Orchestration Files\nDESCRIPTION: Specifies the build system files (MSBuild props/targets) and source directory involved in managing the renaming of DLL import tables, copying the renamed assemblies, and packaging them correctly within the WPF build process.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/redistributables.md#_snippet_2\n\nLANGUAGE: Plain Text\nCODE:\n```\neng\\WpfArcadeSdk\\Redist.props\neng\\WpfArcadeSdk\\Redist.targets\nsrc\\Microsoft.DotNet.Wpf\\redist\\**\\*\n```\n\n----------------------------------------\n\nTITLE: Defining GetAnnotations WPF Event Classes in C++\nDESCRIPTION: Establishes the TGetAnnotations_V0 WMI event class and its Begin/End subclasses to handle operations for retrieving multiple annotation objects in WPF. All classes utilize standardized event annotation for tracing and diagnostics.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_64\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"GetAnnotations\") : amended,\n guid(\"{cd9f6017-7e64-4c61-b9ed-5c2fc8c4d849}\"),\n EventVersion(2),\n DisplayName(\"GetAnnotations\") : amended\n]\nclass TGetAnnotations_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"GetAnnotationsBegin\") : amended,\n EventType(1),\n EventTypeName(\"GetAnnotationsBegin\") : amended\n]\nclass GetAnnotationsBegin_V0:TGetAnnotations_V0\n{\n\n};\n\n[Dynamic,\n Description(\"GetAnnotationsEnd\") : amended,\n EventType(2),\n EventTypeName(\"GetAnnotationsEnd\") : amended\n]\nclass GetAnnotationsEnd_V0:TGetAnnotations_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Accent Color Brushes Definitions (XML)\nDESCRIPTION: These are the accent color brush definitions from Fluent's color resource dictionaries, that are referred to by DynamicResource extension to customize existing control styles, and write new styles. They can be found in Light.xaml, Dark.xaml, and HC.xaml files.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n    <!-- Accent Color Brushes defined in Fluent color resource dictionaries  -->\n    <SolidColorBrush x:Key=\"AccentTextFillColorPrimaryBrush\" Color=\"{StaticResource SystemAccentColorLight3}\" />\n    <SolidColorBrush x:Key=\"AccentTextFillColorSecondaryBrush\" Color=\"{StaticResource SystemAccentColorLight3}\" />\n    <SolidColorBrush x:Key=\"AccentTextFillColorTertiaryBrush\" Color=\"{StaticResource SystemAccentColorLight2}\" />\n    <SolidColorBrush x:Key=\"AccentTextFillColorDisabledBrush\" Color=\"{StaticResource AccentTextFillColorDisabled}\" />\n    \n    <SolidColorBrush x:Key=\"TextOnAccentFillColorSelectedTextBrush\" Color=\"{StaticResource TextOnAccentFillColorSelectedText}\" />\n    <SolidColorBrush x:Key=\"TextOnAccentFillColorPrimaryBrush\" Color=\"{StaticResource TextOnAccentFillColorPrimary}\" />\n    <SolidColorBrush x:Key=\"TextOnAccentFillColorSecondaryBrush\" Color=\"{StaticResource TextOnAccentFillColorSecondary}\" />\n    <SolidColorBrush x:Key=\"TextOnAccentFillColorDisabledBrush\" Color=\"{StaticResource TextOnAccentFillColorDisabled}\" />\n    \n    <SolidColorBrush x:Key=\"AccentFillColorSelectedTextBackgroundBrush\" Color=\"{StaticResource SystemAccentColor}\" />\n    <SolidColorBrush x:Key=\"AccentFillColorDefaultBrush\" Color=\"{StaticResource SystemAccentColorLight2}\" />\n    <SolidColorBrush x:Key=\"AccentFillColorSecondaryBrush\" Opacity=\"0.9\" Color=\"{StaticResource SystemAccentColorLight2}\" />\n    <SolidColorBrush x:Key=\"AccentFillColorTertiaryBrush\" Opacity=\"0.8\" Color=\"{StaticResource SystemAccentColorLight2}\" />\n    <SolidColorBrush x:Key=\"AccentFillColorDisabledBrush\" Color=\"{StaticResource AccentFillColorDisabled}\" />\n\n    <SolidColorBrush x:Key=\"SystemFillColorAttentionBrush\" Color=\"{StaticResource SystemAccentColor}\" />    \n \n```\n\n----------------------------------------\n\nTITLE: Declaring IsDialogProperty Field\nDESCRIPTION: This snippet declares a static read-only field `IsDialogProperty` of type `DependencyProperty`.  It identifies the `IsDialog` attached property.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly System.Windows.DependencyProperty IsDialogProperty;\n```\n\n----------------------------------------\n\nTITLE: Modifying Project Reference for C++/CLI\nDESCRIPTION: This snippet demonstrates how to modify the ProjectReference element when referencing a C++/CLI project from a C# project to avoid build issues. The key is to undefine the TargetFramework and TargetFrameworks properties to ensure consistent build behavior. This prevents the C++/CLI project from being built twice, which causes problems due to simultaneous writes to PDB files. The project is referencing the PresentationCoreCpp.vcxproj in PresentationCore directory.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/C++-notes.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ProjectReference Include=\"$(WpfSourceDir)PresentationCore\\CPP\\PresentationCoreCpp.vcxproj\">\n      <UndefineProperties>TargetFramework;TargetFrameworks</UndefineProperties>\n     </ProjectReference>\n```\n\n----------------------------------------\n\nTITLE: Defining WPF Annotation Baml Assembly Event Classes in C++\nDESCRIPTION: Declares the TWClientResourceBamlAssembly_V0 class, used for logging or tracking Baml assembly events in WPF annotation handling. It is attributed with Dynamic, Description, a unique GUID, EventVersion, and DisplayName properties. Intended for use within the WMI framework and as a base class for related event types, facilitating diagnostics of assembly resource operations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_52\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"WClientResourceBamlAssembly\") : amended,\n guid(\"{19df4373-6680-4a04-8c77-d2f6809ca703}\"),\n EventVersion(2),\n DisplayName(\"WClientResourceBamlAssembly\") : amended\n]\nclass TWClientResourceBamlAssembly_V0:Microsoft_Windows_WPF\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: T4 Template Multi-line Code Block Example\nDESCRIPTION: Demonstrates the correct way to format multi-line code blocks in T4 templates with the <# and #> tags on separate lines for better readability.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/codegen.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<#\n    string helloWorld = \" Hello World \";\n    hellowWorld = helloWorld.Trim();\n#>\n<#= hellowWorld #>\n```\n\n----------------------------------------\n\nTITLE: Events Error Messages in WPF\nDESCRIPTION: Error messages related to WPF's routed event system. These cover validation of event arguments, handler registration, event routing constraints, and visual tree manipulation during event processing.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_14\n\nLANGUAGE: Resource\nCODE:\n```\nSourceNotSet=Must set Source in RoutedEventArgs before building event route or invoking handlers.\nMismatched_RoutedEvent=RoutedEvent in RoutedEventArgs and EventRoute are mismatched.\nHandlerTypeIllegal=Handler type is mismatched.\nDuplicateEventName=RoutedEvent Name '{0}' for OwnerType '{1}' already used.\nTreeLoop=Potential cycle in tree found while building the event route.\nRoutedEventArgsMustHaveRoutedEvent=Every RoutedEventArgs must have a non-null RoutedEvent associated with it.\nClassTypeIllegal=Class handlers can be registered only for UIElement or ContentElement and their subtypes.\nTooManyRoutedEvents=RoutedEvent/EventPrivateKey limit exceeded. Routed events or EventPrivateKey for CLR events are typically static class members registered with field initializers or static constructors. In this case, routed events or EventPrivateKeys might be getting initialized in instance constructors, causing the limit to be exceeded.\nCannotModifyVisualChildrenDuringTreeWalk=Cannot modify the Visual children for this node because a tree walk is in progress.\nRoutedEventCannotChangeWhileRouting=Cannot change the RoutedEvent property while the RoutedEvent is being routed.\n```\n\n----------------------------------------\n\nTITLE: Defining Counter Event Class for DRX Stream with Count Property in C++\nDESCRIPTION: Defines Counter_V0 class derived from TWClientDRXReadStream_V0 representing a counter event with an integer Count property. The class includes annotations for dynamic events and metadata such as event type, event type name, and a WMI data identifier for the Count field, which corresponds to a signed 32-bit integer representing the counter value.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_28\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  \n Description(\"Counter\") : amended,  \n EventType(1),  \n EventTypeName(  \"WClientDRXReadStreamBegin\") : amended\n]\nclass Counter_V0:TWClientDRXReadStream_V0\n{\n    [WmiDataId(1),\n     Description(\"Count\") : amended,\n     read]\n     sint32 Count;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Forwarding Provider Interfaces in System.Windows.Automation.Provider (C#)\nDESCRIPTION: Declaration stubs for provider-side automation interfaces IRawElementProviderSimple, ITextRangeProvider, and the ProviderOptions enum. These are type-forwarded from UIAutomationProvider.dll to UIAutomationTypes.dll, ensuring compatibility and allowing existing providers to leverage new contracts without recompilation. No implementation changes are present, only referencing requirements for appropriate DLLs.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_48\n\nLANGUAGE: c#\nCODE:\n```\nnamespace System.Windows.Automation.Provider\n{\n    // These three types have been type-forwarded (with no\n    // other changes) from UIAutomationProvider.dll to\n    // UIAutomationTypes.dll\n    public interface IRawElementProviderSimple;\n    public interface ITextRangeProvider;\n    enum ProviderOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Fluent Theme Backdrop via Application Configuration\nDESCRIPTION: Provides instructions for disabling backdrop effects in WPF applications by setting a runtime switch in project file or runtime configuration. The switch 'Switch.System.Windows.Appearance.DisableFluentThemeWindowBackdrop' can be set to true to prevent backdrop application, useful for compatibility or troubleshooting scenarios.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup>\n    <RuntimeHostConfigurationOption Include=\"Switch.System.Windows.Appearance.DisableFluentThemeWindowBackdrop\" Value=\"True\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining LoadAnnotations WPF Event Classes in C++\nDESCRIPTION: Establishes TLoadAnnotations_V0 and accompanying Begin/End event subtypes for modeling the loading of annotations within WPF environments. All classes are flagged for dynamic WMI event generation and meticulously annotated for identification by event consumers.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_59\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"LoadAnnotations\") : amended,\n guid(\"{cf3a283e-c004-4e7d-b3b9-cc9b582a4a5f}\"),\n EventVersion(2),\n DisplayName(\"LoadAnnotations\") : amended\n]\nclass TLoadAnnotations_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"LoadAnnotationsBegin\") : amended,\n EventType(1),\n EventTypeName(\"LoadAnnotationsBegin\") : amended\n]\nclass LoadAnnotationsBegin_V0:TLoadAnnotations_V0\n{\n\n};\n\n[Dynamic,\n Description(\"LoadAnnotationsEnd\") : amended,\n EventType(2),\n EventTypeName(\"LoadAnnotationsEnd\") : amended\n]\nclass LoadAnnotationsEnd_V0:TLoadAnnotations_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Tracking Time Tick Events in the WPF Time Manager - MOF DSL\nDESCRIPTION: Describes the 'TimeTick_V0' class, recording a signed 64-bit 'TickTime' for diagnostic purposes on time manager tick events. This enables performance analysis and detailed tracing of timing operations during WPF runtimes.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_25\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\nDescription(\"TimeTick\") : amended,\nEventType(1),\nEventTypeName(  \"WClientTimeManagerTickBegin\") : amended\n]\nclass TimeTick_V0:TWClientTimeManagerTick_V0\n{\n    [WmiDataId(1),\n     Description(\"TickTime\") : amended,\n     read]\n     sint64 TickTime;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring IsDialogProperty (AutomationElement)\nDESCRIPTION: This code defines a static read-only field, `IsDialogProperty`, of type `AutomationProperty` within the `AutomationElement` class. It identifies the `IsDialog` property.  UI Automation client applications can use this.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly System.Windows.Automation.AutomationProperty IsDialogProperty;\n```\n\n----------------------------------------\n\nTITLE: AttributeUsageAttribute Changes in System.Xaml for WPF Compatibility\nDESCRIPTION: This snippet documents modifications to the AttributeUsageAttribute on various attributes within the System.Xaml assembly, highlighting differences between the contract and implementation. These changes affect how attributes can be applied, their allowance for multiple instances, inheritance behaviors, and specific target usage during runtime.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/ApiCompat/Baselines/System.Xaml-ref.baseline.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=true, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=true, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.AmbientAttribute' changed from '[AttributeUsageAttribute(196, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.ComponentModel.DesignerSerializationVisibilityAttribute' changed from '[DesignerSerializationVisibilityAttribute(2)]' in the contract to '[DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.ConstructorArgumentAttribute' changed from '[AttributeUsageAttribute(128, AllowMultiple=false, Inherited=false)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Property, AllowMultiple=false, Inherited=false)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.ContentPropertyAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=false, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.ContentWrapperAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=true, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=true, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.DependsOnAttribute' changed from '[AttributeUsageAttribute(192, AllowMultiple=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.DictionaryKeyPropertyAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=false, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.MarkupExtensionBracketCharactersAttribute' changed from '[AttributeUsageAttribute(128, AllowMultiple=true, Inherited=false)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Property, AllowMultiple=true, Inherited=false)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.MarkupExtensionReturnTypeAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=false, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.NameScopePropertyAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=false, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.RootNamespaceAttribute' changed from '[AttributeUsageAttribute(1)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Assembly)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.RuntimeNamePropertyAttribute' changed from '[AttributeUsageAttribute(4)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.ComponentModel.TypeConverterAttribute' exists on 'System.Windows.Markup.StaticExtension' in the contract but not in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.TrimSurroundingWhitespaceAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=false, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false, Inherited=true)]' in the implementation.\nCannotRemoveAttribute : Attribute 'System.ComponentModel.TypeConverterAttribute' exists on 'System.Windows.Markup.TypeExtension' in the contract but not in the implementation.\nCannotChangeAttribute : Attribute 'System.ComponentModel.DesignerSerializationVisibilityAttribute' on 'System.Windows.Markup.TypeExtension.TypeName' changed from '[DesignerSerializationVisibilityAttribute(0)]' in the contract to '[DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.UidPropertyAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=false)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.UsableDuringInitializationAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=false, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.WhitespaceSignificantCollectionAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=false, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.XamlDeferLoadAttribute' changed from '[AttributeUsageAttribute(132, AllowMultiple=false, Inherited=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class | AttributeTargets.Property, AllowMultiple=false, Inherited=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.XamlSetMarkupExtensionAttribute' changed from '[AttributeUsageAttribute(4, Inherited=true, AllowMultiple=false)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, Inherited=true, AllowMultiple=false)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.XamlSetTypeConverterAttribute' changed from '[AttributeUsageAttribute(4, Inherited=true, AllowMultiple=false)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, Inherited=true, AllowMultiple=false)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.XmlLangPropertyAttribute' changed from '[AttributeUsageAttribute(4, AllowMultiple=false)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.XmlnsCompatibleWithAttribute' changed from '[AttributeUsageAttribute(1, AllowMultiple=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Assembly, AllowMultiple=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.XmlnsDefinitionAttribute' changed from '[AttributeUsageAttribute(1, AllowMultiple=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Assembly, AllowMultiple=true)]' in the implementation.\nCannotChangeAttribute : Attribute 'System.AttributeUsageAttribute' on 'System.Windows.Markup.XmlnsPrefixAttribute' changed from '[AttributeUsageAttribute(1, AllowMultiple=true)]' in the contract to '[AttributeUsageAttribute(AttributeTargets.Assembly, AllowMultiple=true)]' in the implementation.\n```\n\n----------------------------------------\n\nTITLE: Media Error Messages and Status Strings in WPF\nDESCRIPTION: Contains error messages and status indicators related to media file operations such as access denial, file not found, unsupported formats, and media control states. These strings are used for user feedback and exception handling in media components.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMedia_LogonFailure=Access was denied on the media file.\nMedia_FileNotFound=Cannot find the media file.\nMedia_DownloadFailed=Media file download failed.\nMedia_FileFormatNotSupported=Installed codecs do not support the media file format.\nMedia_PlaylistFormatNotSupported=Unrecognized playlist file format.\nMedia_NotAllowedWhileTimingEngineInControl=Cannot perform this operation while a clock is assigned to the media player.\nMedia_UnknownMediaExecption=An unknown media error occurred.\nMedia_PlayerIsClosed=No operations are valid on a closed media player except open and close.\nMedia_UnknownChannelType=Channel type is not recognized.\nMedia_PackURIsAreNotSupported=Only site-of-origin pack URIs are supported for media.\n```\n\n----------------------------------------\n\nTITLE: Disabling Fluent Theme Backdrop via Runtime Configuration JSON\nDESCRIPTION: Shows how to add a configuration property in runtime config files to disable Fluent theme backdrop. Setting the property 'Switch.System.Windows.Appearance.DisableFluentThemeWindowBackdrop' to true ensures the backdrop is not applied during application runtime, providing control over theme effects.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"runtimeOptions\": {\n    \"tfm\": \"net9.0\",\n    \"frameworks\": [\n        // specifications...   \n    ],\n    \"configProperties\": {\n      \"Switch.System.Windows.Appearance.DisableFluentThemeWindowBackdrop\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 3D Media and Transformations\nDESCRIPTION: This section includes autogenerated classes for 3D geometric objects, cameras, transforms, lights, and materials, such as Geometry3D, Model3D, Camera, DiffuseMaterial, and Light. These classes facilitate 3D scene construction, transformations, and rendering within WPF applications.\nSOURCE: https://github.com/dotnet/wpf/blob/main/eng/WpfArcadeSdk/tools/WPF_Generated_Files.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: Geometry3D.cs */\n// Defines 3D geometric shapes for rendering in 3D scenes.\npublic class Geometry3D { /* properties and methods */ }\n```\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: Camera.cs */\n// Represents camera perspectives in 3D space for scene viewing.\npublic class Camera { /* properties and methods */ }\n```\n\n----------------------------------------\n\nTITLE: Overriding IsDialogCore in DateTimeAutomationPeer\nDESCRIPTION: This method overrides `IsDialogCore` to provide the dialog status for an element. It is called by `IsDialog()` and returns a `Boolean`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nprotected override bool IsDialogCore();\n```\n\n----------------------------------------\n\nTITLE: ResourceDictionary Trace Messages\nDESCRIPTION: Format strings for tracing resource addition, lookup, and deferred creation within ResourceDictionary instances, aiding in resource management and debugging in WPF.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_8\n\nLANGUAGE: FORMAT\nCODE:\n```\nResource has been added to ResourceDictionary\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nDelayed creation of resource\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nFound resource item on an element\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nFound resource item in a style\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nFound resource item in a template\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nFound resource item in a theme style\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nFound resource item in application\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nFound resource item in theme\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nResource not found\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nNew resource dictionary set\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nSearching for resource\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nDeferred resource has been added to ResourceDictionary\n```\n\n----------------------------------------\n\nTITLE: Overriding IsDialogCore in UIElement3DAutomationPeer\nDESCRIPTION: This method overrides `IsDialogCore` to provide the dialog status for a `UIElement3D`. It is called by `IsDialog()` and returns a `Boolean`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nprotected override bool IsDialogCore();\n```\n\n----------------------------------------\n\nTITLE: Capturing Info String for WPF Client String Events - MOF DSL\nDESCRIPTION: Implements 'InfoStringTemplate_V0', which records a null-terminated info message as part of various client string events. Supports event types representing begin, end, and single string events, enhancing diagnostics through flexible information tracking.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_24\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\nDescription(\"InfoStringTemplate\") : amended,\nEventType{0, 1, 2},\nEventTypeName{  \"WClientString\", \"WClientStringBegin\", \"WClientStringEnd\"} : amended\n]\nclass InfoStringTemplate_V0:TWClientString_V0\n{\n    [WmiDataId(1),\n     Description(\"Info\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string Info;\n};\n```\n\n----------------------------------------\n\nTITLE: Layout Error Messages\nDESCRIPTION: These error messages concern the layout system in WPF. The errors point to parameter validation issues during object construction.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_6\n\nLANGUAGE: N/A\nCODE:\n```\nInvalidCtorParameterNoNaN='{0}' parameter cannot be NaN.\nInvalidCtorParameterNoInfinity='{0}' parameter cannot be Infinity.\nInvalidCtorParameterNoNegative='{0}' parameter cannot be negative.\nInvalidCtorParameterUnknownGridUnitType='{0}' parameter is not valid. Valid values are GridUnitType.Auto, GridUnitType.Pixel, or GridUnitType.Star.\nInvalidCtorParameterUnknownFigureUnitType='{0}' parameter is not valid. Valid values are FigureUnitType.Auto, FigureUnitType.Pixel, FigureUnitType.Column, FigureUnitType.Content, or FigureUnitType.Page.\nInvalidCtorParameterUnknownVirtualizationCacheLengthUnitType='{0}' parameter is not valid. Valid values are VirtualizationCacheUnitType.Item or VirtualizationCacheUnitType.Pixel.\nInvalidItemContainer='{0}' can only host a '{1}' or a '{2}'. '{3}' is an invalid container.\n```\n\n----------------------------------------\n\nTITLE: Brushes, Gradients, and Rendering Data Structures\nDESCRIPTION: This set includes classes like LinearGradientBrush, RadialGradientBrush, and SolidColorBrush, which define various brush styles for fills and strokes. It also includes RenderData classes that encapsulate rendering state and data, essential for custom drawing and visual effects.\nSOURCE: https://github.com/dotnet/wpf/blob/main/eng/WpfArcadeSdk/tools/WPF_Generated_Files.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: RadialGradientBrush.cs */\n// Implements a radial gradient brush for smooth color transitions.\npublic class RadialGradientBrush { /* properties and methods */ }\n```\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: RenderData.cs */\n// Encapsulates rendering state information for custom rendering operations.\npublic class RenderData { /* properties and methods */ }\n```\n\n----------------------------------------\n\nTITLE: 3D Error Messages in WPF\nDESCRIPTION: Error messages related to WPF's 3D functionality. These cover matrix operations, size constraints, quaternion validation, and Viewport2DVisual3D material requirements for interactive 3D content.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_16\n\nLANGUAGE: Resource\nCODE:\n```\nHitTest_Singular=Hit testing with a singular MatrixCamera is not supported.\nMatrix3D_NotInvertible=Cannot invert the matrix, because the matrix is not invertible.\nSize3D_DimensionCannotBeNegative=Cannot set a negative dimension.\nSize3D_CannotModifyEmptySize=Cannot modify this property on the Empty Size3D.\nRect3D_CannotModifyEmptyRect=Cannot modify this property on the Empty Rect3D.\nRect3D_CannotCallMethod=Cannot call the method.\nQuaternion_ZeroAxisSpecified=Zero axis of rotation specified.\nViewport2DVisual3D_MaterialGroupIsInteractiveMaterial=MaterialGroup cannot be an interactive Material (IsVisualHostMaterial is true).\nViewport2DVisual3D_MultipleInteractiveMaterials=Viewport2DVisual3D supports only one interactive Material.\n```\n\n----------------------------------------\n\nTITLE: Declaring ActiveTextPositionChangedEvent Field\nDESCRIPTION: This snippet declares a static read-only field `ActiveTextPositionChangedEvent` of type `AutomationEvent`. It identifies an event that is raised when the position changes within a text element.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly AutomationEvent ActiveTextPositionChangedEvent;\n```\n\n----------------------------------------\n\nTITLE: D3DImage Error Messages in WPF\nDESCRIPTION: Error messages related to D3DImage functionality, primarily concerning back buffer validation and device requirements. These messages are displayed when Direct3D image operations fail due to invalid configuration or resource issues.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_11\n\nLANGUAGE: Resource\nCODE:\n```\nD3DImage_MustHaveBackBuffer=Cannot call this method without a back buffer.\nD3DImage_SurfaceTooBig=Back buffer's size is too large.\nD3DImage_InvalidUsage=Back buffer's usage does not meet the requirements for the resource type.\nD3DImage_InvalidPool=Back buffer's pool does not meet the requirements for the resource type.\nD3DImage_InvalidDevice=Back buffer's device is not valid.\nD3DImage_AARequires9Ex=An antialiased back buffer requires a IDirect3DDevice9Ex device.\n```\n\n----------------------------------------\n\nTITLE: Backdrop Support in WPF via DWM Integration\nDESCRIPTION: Explains how WPF lacks native Acrylic and Mica materials and instead uses Desktop Window Manager (DWM) APIs, specifically DwmSetWindowAttribute and DwmExtendFrameIntoClientArea, to simulate backdrop effects like Mica. Describes dependency on Windows DWM APIs and highlights the absence of API support for theme switching, emphasizing current limitations and intended future developments.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: PTS (Page Text Service) Error Messages\nDESCRIPTION: These error messages describe errors specific to the Page Text Service. The errors range from general formatting failures to invalid object handles and tree modifications.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_9\n\nLANGUAGE: N/A\nCODE:\n```\nPTSError=Page formatting engine did not complete formatting operation. Error code: '{0}'.\nPTSInvalidHandle=No object associated with unmanaged object handle or type mismatch.\nIllegalTreeChangeDetected=Document tree or properties were modified during measure or arrange.\nIllegalTreeChangeDetectedPostAction=Document tree or properties were modified during measure or arrange.\nFormatRestrictionsExceeded=Page dimensions exceed maximum allowed value of 3.579 million pixels.\n```\n\n----------------------------------------\n\nTITLE: Defining MediaRender Event Classes C#\nDESCRIPTION: Defines event classes to track media rendering within WPF applications. Includes base class `TWClientMediaRender_V0` with supporting class `Template_20_V0`. The latter class is for the beginning of the media render and contains the Id and the expected present time from QPC. Uses attributes like `Dynamic`, `Description`, `EventType`, and `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientMediaRender\") : amended,\n guid(\"{6827e447-0e0e-4b5e-ae81-b79a00ec8349}\"),\n EventVersion(2),\n DisplayName(\"WClientMediaRender\") : amended\n]\nclass TWClientMediaRender_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"Template_20\") : amended,\n EventType(1),\n EventTypeName(  \"WClientMediaRenderBegin\") : amended\n]\nclass Template_20_V0:TWClientMediaRender_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n    [WmiDataId(2),\n     Description(\"QPCExpectedPresentTime\") : amended,\n     read]\n     sint64 QPCExpectedPresentTime;\n};\n\n[Dynamic,\n Description(\"WClientMediaRenderEnd\") : amended,\n EventType(2),\n EventTypeName(\"WClientMediaRenderEnd\") : amended\n]\nclass WClientMediaRenderEnd_V0:TWClientMediaRender_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Copying Local WPF Binaries to Test Host (PowerShell)\nDESCRIPTION: Executes the `copy-wpf.ps1` PowerShell script with the `-testhost` parameter. This copies the locally built WPF assemblies to the specified directory, which is intended to be a custom test host installation of the .NET SDK/Runtime. This method allows testing against a specific local runtime environment without affecting the default system installation.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\neng\\copy-wpf.ps1 -testhost -destination \"c:\\testhost\\x86\"\n```\n\n----------------------------------------\n\nTITLE: Overriding GetHeadingLevelCore in UIElement3DAutomationPeer\nDESCRIPTION: This method overrides `GetHeadingLevelCore` to provide the heading level for a `UIElement3D`. The method is called by `GetHeadingLevel()` and returns an `AutomationHeadingLevel`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nprotected override AutomationHeadingLevel GetHeadingLevelCore();\n```\n\n----------------------------------------\n\nTITLE: Media Error Messages in WPF\nDESCRIPTION: Error messages related to media resource handling in WPF. These cover stream state validation, Windows Media Player version requirements, URI specification, and video acceleration hardware constraints.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_19\n\nLANGUAGE: Resource\nCODE:\n```\nMedia_UninitializedResource=Accessed an uninitialized media resource.\nMedia_StreamClosed=Cannot access the stream after it is closed.\nMedia_InvalidArgument=Value does not fall within the expected range.\nMedia_InvalidWmpVersion=Windows Media Player version 10 or later is required.\nMedia_UriNotSpecified=Must specify URI.\nMedia_InsufficientVideoResources=There are insufficient video resources available for video or audio playback.\nMedia_HardwareVideoAccelerationNotAvailable=Display driver must support video acceleration for video or audio playback.\n```\n\n----------------------------------------\n\nTITLE: Defining ActivityId Property in C#\nDESCRIPTION: This C# code defines the `ActivityId` property within the `NotificationEventArgs` class. This property gets the activity ID string of the notification, which is a unique non-localized string used to identify an action or group of actions. It's a read-only property, providing access to the activity ID associated with the event.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic string ActivityId { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationProcessing Property in C#\nDESCRIPTION: This C# code defines the `NotificationProcessing` property within the `NotificationEventArgs` class. This property gets the order in which the notification should be processed, represented by a value from the `AutomationNotificationProcessing` enum. It's a read-only property, providing access to the processing order associated with the event.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic AutomationNotificationProcessing NotificationProcessing { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Traces\nDESCRIPTION: This section defines trace messages related to animations within the System.Windows.Media.Animation namespace. It describes trace names, areas, and wrapper classes, followed by specific trace details for various animation events, such as starting, pausing, removing, resuming, and stopping storyboards, and also validation failures and successes.  The code is meant for use by a trace wrapper generator. The output will be trace calls with structured data.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/AvTraceMessages.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[System.Windows.Media.Animation,Animation,TraceAnimation]\nStoryboardBegin=,,{\"Storyboard has begun\", \"Storyboard\", \"StoryboardName\", \"TargetElement\", \"NameScope\"}\nStoryboardPause=,,{\"Storyboard has been paused\", \"Storyboard\", \"StoryboardName\", \"TargetElement\"}\nStoryboardRemove=,,{\"Storyboard has been removed\", \"Storyboard\", \"StoryboardName\", \"TargetElement\"}\nStoryboardResume=,,{\"Storyboard has been resumed\", \"Storyboard\", \"StoryboardName\", \"TargetElement\"}\nStoryboardStop=,,{\"Storyboard has been stopped\", \"Storyboard\", \"StoryboardName\", \"TargetElement\"}\nStoryboardNotApplied=,,{\"Unable to perform action because the specified Storyboard was never applied to this object for interactive control.\", \"Action\", \"Storyboard\", \"TargetElement\"}\nAnimateStorageValidationFailed=,,{\"Animated property failed validation. Animated value not set.\", \"AnimationStorage\", \"AnimatedValue\", \"AnimatedObject\", \"AnimatedProperty\"}\nAnimateStorageValidationNoLongerFailing=,,{\"Animated property no longer failing validation.\", \"AnimationStorage\", \"AnimatedValue\", \"AnimatedObject\", \"AnimatedProperty\"}\n[end]\n```\n\n----------------------------------------\n\nTITLE: Shell Integration and Taskbar Diagnostic Messages\nDESCRIPTION: Provides trace logs for Windows shell features such as taskbar updates, taskbar timeout, and explorer process detection, useful for diagnosing shell integration issues in WPF.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_11\n\nLANGUAGE: FORMAT\nCODE:\n```\nShell integration features are not being applied because the host OS does not support the feature.\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nCommunication with Explorer timed out while trying to update the taskbar item for the window.\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nMaking another attempt to update the taskbar.\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nHalting attempts at Shell integration with the taskbar because it appears that Explorer is not running.\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nThe native ITaskbarList3 interface failed a method call with error {0}.\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nFailed to apply items to the JumpList because the native interfaces failed.\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nRejecting the category {0} from the jump list because this application is not registered for file types contained in the list.  JumpPath items will be removed and the operation will be retried.\n```\n\n----------------------------------------\n\nTITLE: DocumentPaginator Error Messages\nDESCRIPTION: These error messages describe problems related to DocumentPaginator in WPF. They identify errors such as invalid page numbers, content positions and formatting.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_8\n\nLANGUAGE: N/A\nCODE:\n```\nIDPNegativePageNumber=Page number cannot be negative.\nIDPInvalidContentPosition=ContentPosition does not exist within this element's tree.\nFlowDocumentFormattingReentrancy=Cannot make new formatting requests during page formatting.\nFlowDocumentInvalidContnetChange=Content changed during page formatting.\n```\n\n----------------------------------------\n\nTITLE: Access Key and Input Method Validation Strings in WPF\nDESCRIPTION: Strings for validating and error reporting in input key management and input method conversions, including checks for Unicode characters, conversion modes, sentence modes, and input languages readiness.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nAccessKeyManager_NotAUnicodeCharacter='{0}' is not a single Unicode character.\nInputMethod_InvalidConversionMode='{0}' is not a valid ImeConversionMode.\nInputMethod_InvalidSentenceMode='{0}' is not a valid ImeSentenceMode.\nInputLanguageManager_NotReadyToChangeCurrentLanguage=InputLanguageManager is not ready to change the current input languages.\n```\n\n----------------------------------------\n\nTITLE: Text Composition State Management Strings\nDESCRIPTION: Strings indicating the state of text composition processes, such as started, not started, finished, and invalid input manager references, used for debugging or user feedback in text input components.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nTextCompositionManager_TextCompositionHasStarted='{0}' has already started.\nTextCompositionManager_TextCompositionNotStarted='{0}' has not yet started.\nTextCompositionManager_TextCompositionHasDone='{0}' has already finished.\nTextCompositionManager_NoInputManager='{0}' does not have a valid InputManager.\n```\n\n----------------------------------------\n\nTITLE: Suppressing WPF0001 warning in project file (XML)\nDESCRIPTION: This XML snippet demonstrates how to suppress the WPF0001 warning in the application's project file. This is necessary to use the experimental `ThemeMode` property in code-behind without generating a warning.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <NoWarn>$(NoWarn);WPF0001</NoWarn>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Serialization Classes for WPF 3D Components\nDESCRIPTION: Includes serializer classes such as Matrix3DValueSerializer, Point3DValueSerializer, and QuaternionValueSerializer that facilitate XML or XAML serialization and deserialization of 3D transformation and geometric data, enabling resource loading and design-time support.\nSOURCE: https://github.com/dotnet/wpf/blob/main/eng/WpfArcadeSdk/tools/WPF_Generated_Files.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: Matrix3DValueSerializer.cs */\n// Handles XML serialization of Matrix3D objects for XAML resources.\npublic class Matrix3DValueSerializer { /* serializer logic */ }\n```\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: Point3DValueSerializer.cs */\n// Serializes and deserializes Point3D objects for resource persistence.\npublic class Point3DValueSerializer { /* serializer logic */ }\n```\n\n----------------------------------------\n\nTITLE: Declaring Missing Properties in C# Enum\nDESCRIPTION: Code snippet showing the five missing automation properties that need to be added to match the numeric values of the enum with the Windows property IDs.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/report-on-adding-new-property.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst long UIA_IsSelectionPattern2AvailablePropertyId = 30168;\nconst long UIA_Selection2FirstSelectedItemPropertyId = 30169;\nconst long UIA_Selection2LastSelectedItemPropertyId = 30170;\nconst long UIA_Selection2CurrentSelectedItemPropertyId = 30171;\nconst long UIA_Selection2ItemCountPropertyId = 30172;\n```\n\n----------------------------------------\n\nTITLE: Thickness, VirtualizationCacheLength, and CornerRadius Error Messages\nDESCRIPTION: These error messages are related to parsing of string values to Thickness, VirtualizationCacheLength, and CornerRadius structures and invalid string formats.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_5\n\nLANGUAGE: N/A\nCODE:\n```\nInvalidStringThickness='{0}' value is not valid. It must contain one, two, or four delimited Lengths.\nInvalidStringVirtualizationCacheLength='{0}' value is not valid. It must contain one or two delimited Lengths.\nInvalidStringCornerRadius='{0}' value is not valid. It must contain one or four delimited Lengths.\n```\n\n----------------------------------------\n\nTITLE: XamlScanner Unexpected Tokens and Member Validation in C#\nDESCRIPTION: Detects unhandled attribute kinds, unknown types or members, internal members, and invalid member names during scanning XAML, ensuring structural correctness.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nAttributeUnhandledKind=An unhandled scanner attribute was encountered.\n```\n\nLANGUAGE: C#\nCODE:\n```\nUnknownType=Unknown type '{0}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nUnknownMember=Unknown member '{0}' on '{1}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nUnknownMemberSimple=Unknown member '{0}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nUnknownMemberOnUnknownType=Unknown member '{0}' on unknown type '{1}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMemberIsInternal=Member '{0}' on type '{1}' is internal.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoAttributeUsage='{0}' is not allowed in attribute usage.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNoElementUsage='{0}' is not allowed in element usage.\n```\n\nLANGUAGE: C#\nCODE:\n```\nInvalidXamlMemberName='{0}' is not a valid XAML member name.\n```\n\nLANGUAGE: C#\nCODE:\n```\nParentlessPropertyElement=The property element '{0}' is not contained by an object element.\n```\n\n----------------------------------------\n\nTITLE: Text Related Error Messages\nDESCRIPTION: These error messages concern the text and document formatting related to WPF applications. The errors point to concurrency and formatting issues and re-entrancy.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_7\n\nLANGUAGE: N/A\nCODE:\n```\nMeasureReentrancyInvalid=Cannot call method while measure is in progress.\nArrangeReentrancyInvalid=Cannot call method while arrange is in progress.\nTextContainerChangingReentrancyInvalid=Cannot call method while text container is changing.\n```\n\n----------------------------------------\n\nTITLE: Defining WClientArrange Event Classes C#\nDESCRIPTION: Defines classes related to the arrange phase of WPF layout. Includes a base class `TWClientArrange_V0`, and classes `Counter_V0`, `PerfElementID_V0`, and `LayoutAborted_V0` to capture arrange events.  The `Counter_V0` class stores count, `PerfElementID_V0` stores an ID, and `LayoutAborted_V0` captures timing data like `LoopDurationMS`. Uses attributes like `Dynamic`, `Description`, `EventType`, and `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientArrange\") : amended,\n guid(\"{4b0ef3d1-0cbb-4847-b98f-16408e7e83f3}\"),\n EventVersion(2),\n DisplayName(\"WClientArrange\") : amended\n]\nclass TWClientArrange_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"Counter\") : amended,\n EventType(2),\n EventTypeName(  \"WClientArrangeEnd\") : amended\n]\nclass Counter_V0:TWClientArrange_V0\n{\n    [WmiDataId(1),\n     Description(\"Count\") : amended,\n     read]\n     sint32 Count;\n};\n\n[Dynamic,\n Description(\"PerfElementID\") : amended,\n EventType(1),\n EventTypeName(  \"WClientArrangeBegin\") : amended\n]\nclass PerfElementID_V0:TWClientArrange_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n};\n\n[Dynamic,\n Description(\"LayoutAborted\") : amended,\n EventType(10),\n EventTypeName(  \"WClientArrangeAbort\") : amended\n]\nclass LayoutAborted_V0:TWClientArrange_V0\n{\n    [WmiDataId(1),\n     Description(\"LoopDurationMS\") : amended,\n     read]\n     sint32 LoopDurationMS;\n    [WmiDataId(2),\n     Description(\"loopCounter\") : amended,\n     read]\n     sint32 loopCounter;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WClientMeasure Event Classes C#\nDESCRIPTION: Defines `TWClientMeasure_V0` and related classes (`Counter_V0`, `PerfElementID_V0`) representing measurement events within the WPF framework.  `TWClientMeasure_V0` is a base class, while `Counter_V0` and `PerfElementID_V0` provide data specific to the start and end of measure operations.  They use attributes like `Dynamic`, `Description`, `EventType`, and `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientMeasure\") : amended,\n guid(\"{3005e67b-129c-4ced-bcaa-91d7d73b1544}\"),\n EventVersion(2),\n DisplayName(\"WClientMeasure\") : amended\n]\nclass TWClientMeasure_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"Counter\") : amended,\n EventType(2),\n EventTypeName(  \"WClientMeasureEnd\") : amended\n]\nclass Counter_V0:TWClientMeasure_V0\n{\n    [WmiDataId(1),\n     Description(\"Count\") : amended,\n     read]\n     sint32 Count;\n};\n\n[Dynamic,\n Description(\"PerfElementID\") : amended,\n EventType(1),\n EventTypeName(  \"WClientMeasureBegin\") : amended\n]\nclass PerfElementID_V0:TWClientMeasure_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n};\n```\n\n----------------------------------------\n\nTITLE: MeScanner Token Validation Messages in C#\nDESCRIPTION: Provides validation messages for markup extension token syntax, including quote placement, unclosed quotes, and malformed property names.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nQuoteCharactersOutOfPlace=Quote characters ' or \" are only allowed at the start of values.\n```\n\nLANGUAGE: C#\nCODE:\n```\nUnclosedQuote=Unclosed quoted value.\n```\n\nLANGUAGE: C#\nCODE:\n```\nMalformedPropertyName=Cannot parse the malformed property name '{0}'.\n```\n\n----------------------------------------\n\nTITLE: T4 Template Incorrect Helper Function Definition\nDESCRIPTION: Demonstrates the incorrect way to define helper functions in T4 templates, with unnecessary indentation and without the Output prefix.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/codegen.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n<#+ void FooFunction() { #>\n        bool GetFoo()\n        {\n            ...\n        }           \n<#+ } #>\n```\n\n----------------------------------------\n\nTITLE: Defining WPF Dispatcher Event Classes in WMI\nDESCRIPTION: Defines WMI event classes for tracking dispatcher operations in WPF. These classes track dispatcher message processing with priority levels, operation descriptions, and message IDs.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_4\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"WClientUIContextDispatch\") : amended,\n guid(\"{2481a374-999f-4ad2-9f22-6b7c8e2a5db0}\"),\n EventVersion(3),\n DisplayName(\"WClientUIContextDispatch\") : amended\n]\nclass TWClientUIContextDispatch_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"DispatcherMessage\") : amended,\n EventType(1),\n EventTypeName(  \"WClientUIContextDispatchBegin\") : amended\n]\nclass DispatcherMessage_V0:TWClientUIContextDispatch_V0\n{\n    [WmiDataId(1),\n     Description(\"Priority\") : amended,\n\n    Values{    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\",\n    \"(null)\"\n    }:amended,\n\n    ValueMap{    \"0\", \n    \"1\", \n    \"2\", \n    \"3\", \n    \"4\", \n    \"5\", \n    \"6\", \n    \"7\", \n    \"8\", \n    \"9\", \n    \"10\"\n    }\n    ]\n     uint32  Priority;\n\n    [WmiDataId(2),\n     Description(\"Operation\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string Operation;\n    [WmiDataId(3),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n};\n```\n\n----------------------------------------\n\nTITLE: Markup Extension and Object Initialization Trace Messages\nDESCRIPTION: Logs creation, addition, and initialization of markup extension objects, arrays, dictionaries, and other XAML elements, critical for debugging XAML parsing and object construction.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_9\n\nLANGUAGE: FORMAT\nCODE:\n```\nAdd value to IAddChild\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nAdd value to an array property\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nAdd value to a dictionary property\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nAdd value to a collection property\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nStart initialization of object (ISupportInitialize.BeginInit)\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nCreate MarkupExtension\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nCreate object\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nEnd initialization of object (ISupportInitialize.EndInit)\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nLoad xaml/baml\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nConvert constructor parameter\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nConverted a MarkupExtension\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nSet property value to the ContentProperty\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nSet property value\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nA xaml exception has been thrown\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nConverted value\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nType conversion failed, using fallback\n```\n\n----------------------------------------\n\nTITLE: Defining WPF Client UI Response Event - MOF DSL\nDESCRIPTION: Declares the 'TWClientUIResponse_V0' class as a WPF diagnostic event with a unique GUID, version, and display name. This class provides the base structure for client UI response event logging in ETW/WMI. It does not contain data fields itself but serves as a parent for related event template classes.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_17\n\nLANGUAGE: MOF\nCODE:\n```\n[\nguid(\"{ab29585b-4794-4465-91e6-9df5861c88c5}\"),\nEventVersion(2),\nDisplayName(\"WClientUIResponse\") : amended\n]\nclass TWClientUIResponse_V0:Microsoft_Windows_WPF\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Input Scope and Text Composition Validation Strings\nDESCRIPTION: Contains validation messages for input scope names and null result texts in text composition scenarios to ensure proper input handling.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nInputScope_InvalidInputScopeName='{0}' is not a valid InputScopeName.\nTextComposition_NullResultText=Result text cannot be null.\n```\n\n----------------------------------------\n\nTITLE: Overriding IsDialogCore in ContentElementAutomationPeer\nDESCRIPTION: This method overrides `IsDialogCore` to provide the dialog status for a `ContentElement`.  It is called by `IsDialog()` and returns a `Boolean`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nprotected override bool IsDialogCore();\n```\n\n----------------------------------------\n\nTITLE: Defining WPF UCE Response Event Classes in WMI\nDESCRIPTION: Defines WMI event classes for tracking response events in WPF. Includes response event classes with identifiers for monitoring system responsiveness.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_2\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"WClientUceResponse\") : amended,\n guid(\"{4c253b24-7230-4fa1-9748-ac4c59cf288c}\"),\n EventVersion(2),\n DisplayName(\"WClientUceResponse\") : amended\n]\nclass TWClientUceResponse_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"Template_13\") : amended,\n EventType(0),\n EventTypeName(  \"WClientUceResponse\") : amended\n]\nclass Template_13_V0:TWClientUceResponse_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     uint32 Id;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding IsDialogCore in DataGridCellItemAutomationPeer\nDESCRIPTION: This method overrides `IsDialogCore` to provide the dialog status for an element. It is called by `IsDialog()` and returns a `Boolean`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nprotected override bool IsDialogCore();\n```\n\n----------------------------------------\n\nTITLE: Overriding IsDialogCore in ItemAutomationPeer\nDESCRIPTION: This method overrides `IsDialogCore` to provide the dialog status for an element. It is called by `IsDialog()` and returns a `Boolean`.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/specs/AutomationUpdate.md#_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nprotected override bool IsDialogCore();\n```\n\n----------------------------------------\n\nTITLE: Defining Page Visibility Event Class with First and Last Visible Pages in C++\nDESCRIPTION: Defines Template_31_V0 class as a subclass of TWClientDRXPageVisible_V0 representing the event for page visibility changes. It includes dynamic annotations and event metadata and declares two signed 32-bit integer properties FirstVisiblePage and LastVisiblePage indicating the first and last pages currently visible in the WPF UI.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_31\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"Template_31\") : amended,\n EventType(0),\n EventTypeName(  \"WClientDRXPageVisible\") : amended\n]\nclass Template_31_V0:TWClientDRXPageVisible_V0\n{\n    [WmiDataId(1),\n     Description(\"FirstVisiblePage\") : amended,\n     read]\n     sint32 FirstVisiblePage;\n    [WmiDataId(2),\n     Description(\"LastVisiblePage\") : amended,\n     read]\n     sint32 LastVisiblePage;\n};\n```\n\n----------------------------------------\n\nTITLE: DeobfuscatingStream String Validation\nDESCRIPTION: Error string indicating invalid part name in deobfuscating stream operations, ensuring the part name corresponds to its content type.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nInvalidPartName=The part name does not correspond to its content type.\n```\n\n----------------------------------------\n\nTITLE: Page Formatting Trace Messages in WPF\nDESCRIPTION: These snippets log errors and context during page formatting processes, helping diagnose issues in document layout and rendering.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_7\n\nLANGUAGE: FORMAT\nCODE:\n```\nFormatting page\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nError. Page formatting engine could not complete the formatting operation.\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Commit Page Events for ETW in C++\nDESCRIPTION: Provides classes for tracing the commit phase of pages in WPF using ETW. The TWClientDRXCommitPage_V0 class and its Begin and End derivatives enable detailed capture of commit operations in the page lifecycle. This enables diagnostic and performance analysis of page commits within WPF applications. These classes depend on the Microsoft_Windows_WPF ETW provider model.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_41\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXCommitPage\") : amended, guid(\"{7d7ee18d-aea5-493f-9ef2-bbdb36fcaa78}\"), EventVersion(2), DisplayName(\"WClientDRXCommitPage\") : amended]\nclass TWClientDRXCommitPage_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXCommitPageBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXCommitPageBegin\") : amended]\nclass WClientDRXCommitPageBegin_V0:TWClientDRXCommitPage_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXCommitPageEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXCommitPageEnd\") : amended]\nclass WClientDRXCommitPageEnd_V0:TWClientDRXCommitPage_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Image Conversion Events for ETW in C++\nDESCRIPTION: Provides event classes representing image conversion phases in WPF applications using ETW. TWClientDRXConvertImage_V0 is the base class with metadata for the conversion event provider. The Begin and End classes enable detailed tracing of image resource conversion. Dependencies include the Microsoft_Windows_WPF provider. Inputs are traced event data and outputs logging information.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_43\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXConvertImage\") : amended, guid(\"{17fddfdc-a1be-43b3-b2ee-f5e89b7b1b26}\"), EventVersion(2), DisplayName(\"WClientDRXConvertImage\") : amended]\nclass TWClientDRXConvertImage_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXConvertImageBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXConvertImageBegin\") : amended]\nclass WClientDRXConvertImageBegin_V0:TWClientDRXConvertImage_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXConvertImageEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXConvertImageEnd\") : amended]\nclass WClientDRXConvertImageEnd_V0:TWClientDRXConvertImage_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Property Parent Check Event with Data Fields in C++\nDESCRIPTION: Defines an ETW event class for checking WPF property parent status with additional data fields. The TWClientPropParentCheck_V0 provider class is extended by Template_37_V0 which includes a signed 32-bit integer Id and a w-string TypeAndName (null-terminated), representing the property identifier and combined type and name string, respectively. This approach enables detailed property diagnostics within WPF event tracing requiring Microsoft_Windows_WPF integration.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_48\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientPropParentCheck\") : amended, guid(\"{831bea07-5a2c-434c-8ef8-7eba41c881fb}\"), EventVersion(2), DisplayName(\"WClientPropParentCheck\") : amended]\nclass TWClientPropParentCheck_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"Template_37\") : amended, EventType(0), EventTypeName(  \"WClientPropParentCheck\") : amended]\nclass Template_37_V0:TWClientPropParentCheck_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n    [WmiDataId(2),\n     Description(\"TypeAndName\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string TypeAndName;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Annotation Resource Key Templates in C++\nDESCRIPTION: Defines a WMI-compatible class, KeyStringTemplate_V0, for representing annotation resource keys in WPF, inheriting from TWClientResourceStock_V0. The class has a single string property 'Key' with several attributes specifying WMI data id, description, string termination, and format. Requires WMI infrastructure and proper inclusion of attribute definitions used in the declaration. Input is not expected directly; the class is utilized by WMI consumers for querying annotation resource metadata.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_51\n\nLANGUAGE: C++\nCODE:\n```\nclass KeyStringTemplate_V0:TWClientResourceStock_V0\n{\n    [WmiDataId(1),\n     Description(\"Key\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string Key;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAnnotationWithSNC WPF Event Classes in C++\nDESCRIPTION: Provides TUpdateAnnotationWithSNC_V0 as a WMI event base and its Begin/End derivatives for tracking updates to annotation objects with SNC (possibly Serial Number Change) in WPF. Instrumented for event tracing and annotated for reliable discovery by consumers.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_67\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"UpdateAnnotationWithSNC\") : amended,\n guid(\"{205e0a58-3c7d-495d-b3ed-18c3fb38923f}\"),\n EventVersion(2),\n DisplayName(\"UpdateAnnotationWithSNC\") : amended\n]\nclass TUpdateAnnotationWithSNC_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"UpdateAnnotationWithSNCBegin\") : amended,\n EventType(1),\n EventTypeName(\"UpdateAnnotationWithSNCBegin\") : amended\n]\nclass UpdateAnnotationWithSNCBegin_V0:TUpdateAnnotationWithSNC_V0\n{\n\n};\n\n[Dynamic,\n Description(\"UpdateAnnotationWithSNCEnd\") : amended,\n EventType(2),\n EventTypeName(\"UpdateAnnotationWithSNCEnd\") : amended\n]\nclass UpdateAnnotationWithSNCEnd_V0:TUpdateAnnotationWithSNC_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GetAnnotationById WPF Event Classes in C++\nDESCRIPTION: Provides WMI event classes for retrieving annotations by identifier, based on TGetAnnotationById_V0. Includes Begin and End variants for granular tracing. Event and class attributes facilitate correct mapping and consumer recognition in WPF processing.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_62\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"GetAnnotationById\") : amended,\n guid(\"{3d27753f-eb8a-4e75-9d5b-82fba55cded1}\"),\n EventVersion(2),\n DisplayName(\"GetAnnotationById\") : amended\n]\nclass TGetAnnotationById_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"GetAnnotationByIdBegin\") : amended,\n EventType(1),\n EventTypeName(\"GetAnnotationByIdBegin\") : amended\n]\nclass GetAnnotationByIdBegin_V0:TGetAnnotationById_V0\n{\n\n};\n\n[Dynamic,\n Description(\"GetAnnotationByIdEnd\") : amended,\n EventType(2),\n EventTypeName(\"GetAnnotationByIdEnd\") : amended\n]\nclass GetAnnotationByIdEnd_V0:TGetAnnotationById_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CreateWpfGfxResource Event and Data Template - MOF\nDESCRIPTION: Defines CreateWpfGfxResource event and its template with properties for the resource pointer, channel handle, resource handle, and resource type (unsigned 32-bit integers and pointer). This event provides diagnostic information for newly created WPF graphics resources. Inherits from TCreateWpfGfxResource_V0 and leverages WMI pointer annotations. Inputs: pointers and handles at resource creation; outputs: event records for consumers. Prerequisites: appropriate WMI infrastructure and type support.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_84\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"CreateWpfGfxResource\") : amended,\n EventType(0),\n EventTypeName(  \"CreateWpfGfxResource\") : amended\n]\nclass CreateWpfGfxResource_V0:TCreateWpfGfxResource_V0\n{\n    [WmiDataId(1),\n     Description(\"ResourcePtr\") : amended,\n     pointer,\n     read]\n     pointer ResourcePtr;\n    [WmiDataId(2),\n     Description(\"ChannelHandle\") : amended,\n     read]\n     uint32 ChannelHandle;\n    [WmiDataId(3),\n     Description(\"ResourceHandle\") : amended,\n     read]\n     uint32 ResourceHandle;\n    [WmiDataId(4),\n     Description(\"ResourceType\") : amended,\n     read]\n     uint32 ResourceType;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PtrTemplate ETW Event Data Template (MOF)\nDESCRIPTION: Defines the `PtrTemplate_V0` class, acting as a data template for the `WClientPotentialIRTResource` event type (`TWClientPotentialIRTResource_V0`). It specifies a single data field, `Pointer`, representing a pointer value associated with the event.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_91\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"PtrTemplate\") : amended,\n EventType(0),\n EventTypeName(  \"WClientPotentialIRTResource\") : amended\n]\nclass PtrTemplate_V0:TWClientPotentialIRTResource_V0\n{\n    [WmiDataId(1),\n     Description(\"Pointer\") : amended,\n     pointer,\n     read]\n     pointer Pointer;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ID32Template ETW Event Data Template (MOF)\nDESCRIPTION: Defines the `ID32Template_V0` class, acting as a data template for the `PenThreadPoolThreadAcquisition` event type (`TPenThreadPoolThreadAcquisition_V0`). It specifies a single data field, `Id`, representing a 32-bit signed integer identifier associated with the event.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_93\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"ID32Template\") : amended,\n EventType(0),\n EventTypeName(  \"PenThreadPoolThreadAcquisition\") : amended\n]\nclass ID32Template_V0:TPenThreadPoolThreadAcquisition_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n};\n```\n\n----------------------------------------\n\nTITLE: WPF Exception and Resource String Definitions\nDESCRIPTION: A comprehensive collection of localized string resources for error messages, keyboard shortcuts, and command text labels used throughout the WPF framework. These strings are accessed by the framework to display appropriate error messages and UI text.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_0\n\nLANGUAGE: Resource\nCODE:\n```\n;\n; US-EN Exception String Table\n; Default Resource (used for English and non-represented locales)\n;\n\n\n; Dispatcher\n\n; Source\nHwndSourceDisposed=Cannot access a disposed HwndSource.\nNullHwnd=Hwnd of zero is not valid.\nUsesPerPixelOpacityIsObsolete=UsesPerPixelOpacity is obsolete and should not be set when using UsesPerPixelTransparency\n\n; General\nGeneral_BadType=The object passed to '{0}' is not a valid type.\nGeneral_Expected_Type=Expected object of type '{0}'.\nGeneral_ObjectIsReadOnly=The object is marked 'Read Only'.\n\n; Collection\nCollectionNumberOfElementsShouldBeEqualTo=The number of elements in this collection should equal '{0}'.\nCollectionNumberOfElementsMustBeGreaterThanZero=The number of elements in this collection must be greater than zero.\nCollectionIsFixedSize=This collection is fixed size.\nCollectionDuplicateKey='{0}' key already exists in the collection.\n```\n\n----------------------------------------\n\nTITLE: Copying Local WPF Binaries to Published App (PowerShell)\nDESCRIPTION: Executes the `copy-wpf.ps1` PowerShell script found in the `eng` folder of the WPF repository. This script copies the locally built WPF assemblies to the specified destination directory (`-destination`), which should be the publish location of a self-contained test application. This allows the published app to use the locally built framework binaries.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\neng\\copy-wpf.ps1 -destination \"c:\\mysampleproj\"\n```\n\n----------------------------------------\n\nTITLE: Text Layout Error Messages in WPF\nDESCRIPTION: Error message strings for text layout and formatting operations in WPF. These messages provide specific information about parameter validation errors, font configuration issues, and text formatting constraints.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_8\n\nLANGUAGE: INI\nCODE:\n```\nParameterValueCannotBeNaN=The parameter value must be a number.\nParameterValueMustBeGreaterThanZero='{0}' parameter value must be greater than zero.\nGlyphIndexOutOfRange='{0}' glyph index is not valid for the specified font.\nCodePointOutOfRange='{0}' character is outside the Unicode code point range.\nSidewaysRTLTextIsNotSupported=Sideways right to left text is not supported.\nGlyphTypefaceNotRecorded=Glyph typeface URI does not point to a previously recorded glyph typeface.\nCompileFeatureSet_InvalidTypographyProperties=Typography properties are not valid.\nFaceIndexValidOnlyForTTC=Nonzero font face index values are valid only for TrueType collections (.ttc).\nFaceIndexMustBePositiveOrZero=Font face index must be greater than or equal to zero.\nUriNotAbsolute=URI must be absolute.\nUriMustBeFileOrPack=Font family Uri should have either file:// or pack://application: scheme.\nInvalidAbsoluteUriInFontFamilyName=An absolute URI in a font family name must have file:// scheme.\nNullBaseUriParam='{0}' parameter cannot be null unless '{1}' is an absolute URI.\nClusterMapFirstEntryMustBeZero=The first element in the cluster map must equal zero.\nClusterMapEntriesShouldNotDecrease=A cluster map entry must be greater than or equal to a previous entry.\nClusterMapEntryShouldPointWithinGlyphIndices=A cluster map entry must point to a valid glyph indices element.\nInvalidTextDecorationCollectionString=The requested TextDecorationCollection string is not valid: '{0}'.\nTextLineHasBeenDisposed=Text line was previously disposed.\nTextBreakpointHasBeenDisposed=Text breakpoint was previously disposed.\nTextPenaltyModuleHasBeenDisposed=Text penalty module was previously disposed.\nTextObjectMetrics_WidthOutOfRange=The return value of TextEmbeddedObject.Format contains an out-of-range value for the Width property.\nSpecificNumberCultureRequired=The CultureInfo object used for number substitution must be a specific culture, not a neutral culture or InvariantCulture.\nTextRunPropertiesCannotBeNull=The Properties member of this text run cannot be null.\nGlyphCoordinateTooBig= advanceWidths and glyphOffsets constitute coordinate too large for glyph at index '{0}'. For renderingEmSize '{1}' the values cannot exceed '{2}'.\nGlyphAreaTooBig=Values for advanceWidths and glyphOffsets constitute too large of a GlyphRun. The area of its bounding box, measured in renderingEmSize squares, is '{0}' but it cannot exceed '{1}'.\nTooManyGlyphRuns=Too many glyph runs in the scene to render.\nPropertyValueCannotBeNaN='{0}' property value cannot be NaN.\nPropertyMustBeGreaterThanZero='{0}' property value must be greater than zero.\nPropertyOfClassMustBeGreaterThanZero='{0}' property of the '{1}' class must be greater than zero.\nPropertyOfClassCannotBeGreaterThan='{0}' property of the '{1}' class must be less than or equal to '{2}'.\nPropertyOfClassCannotBeNull='{0}' property of the '{1}' class cannot be null.\nPropertyCannotBeNegative='{0}' property value must be greater than or equal to zero.\nTextFormatterReentranceProhibited=Cannot reenter Text formatting engine during optimal paragraph formatting.\nCurrentDispatcherNotFound=Current dispatcher cannot be found.\nInitializationIncomplete=The operation fails because the object is not fully initialized.\nOnlyOneInitialization=The object is already initialized and cannot be initialized again.\nInInitialization=The object is already being initialized.\nNotInInitialization=The object is not being initialized.\n```\n\n----------------------------------------\n\nTITLE: Keyboard Navigation Display Strings in WPF\nDESCRIPTION: Definition of display strings for keyboard navigation shortcuts in WPF applications. These strings represent the human-readable formats of keyboard combinations for navigation actions.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\nScrollPageLeftKeyDisplayString=\nScrollPageRightKeyDisplayString=\nScrollByLineKeyDisplayString=\nMoveLeftKeyDisplayString=Left\nMoveRightKeyDisplayString=Right\nMoveUpKeyDisplayString=Up\nMoveDownKeyDisplayString=Down\nExtendSelectionUpKeyDisplayString=Shift+Up\nExtendSelectionDownKeyDisplayString=Shift+Down\nExtendSelectionLeftKeyDisplayString=Shift+Left\nExtendSelectionRightKeyDisplayString=Shift+Right\nMoveToHomeKeyDisplayString=Home\nMoveToEndKeyDisplayString=End\nMoveToPageUpKeyDisplayString=PageUp\nMoveToPageDownKeyDisplayString=PageDown\nSelectToHomeKeyDisplayString=Shift+Home\nSelectToEndKeyDisplayString=Shift+End\nSelectToPageDownKeyDisplayString=Shift+PageDown\nSelectToPageUpKeyDisplayString=Shift+PageUp\nMoveFocusUpKeyDisplayString=Ctrl+Up\nMoveFocusDownKeyDisplayString=Ctrl+Down\nMoveFocusBackKeyDisplayString=Ctrl+Left\nMoveFocusForwardKeyDisplayString=Ctrl+Right\nMoveFocusPageUpKeyDisplayString=Ctrl+PageUp\nMoveFocusPageDownKeyDisplayString=Ctrl+PageDown\n```\n\n----------------------------------------\n\nTITLE: File and Directory Error Messages\nDESCRIPTION: Standard messages for file access exceptions, including not found, access denied, IO errors, and path length issues, used in exception handling during file operations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nFileNotFoundExceptionWithFileName=Cannot find file '{0}'.\nDirectoryNotFoundExceptionWithFileName=Cannot find a part of the path '{0}'.\nUnauthorizedAccessExceptionWithFileName=Access denied to the path '{0}'.\nIOExceptionWithFileName=I/O error when opening file '{0}'.\nPathTooLongExceptionWithFileName='{0}' file name is longer than the system-defined maximum length.\n```\n\n----------------------------------------\n\nTITLE: Copying Local WPF Binaries to Specific Test Host Version (PowerShell)\nDESCRIPTION: Executes `copy-wpf.ps1` with the `-testhost` parameter and an additional `-version` parameter. This allows specifying a particular version of the `Microsoft.WindowsDesktop.App` shared runtime within the test host destination directory to target for copying the locally built WPF assemblies, useful when the test host contains multiple runtime versions.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\neng\\copy-wpf.ps1 -testhost -destination \"c:\\testhost\\x86\" -version \"3.0.0-preview6-27728-04\"\n```\n\n----------------------------------------\n\nTITLE: Navigation Commands Text Labels in WPF\nDESCRIPTION: Text labels for navigation-related commands in WPF applications. These labels are used in the UI to represent various navigation control actions.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_7\n\nLANGUAGE: INI\nCODE:\n```\nBrowseBackText=Back\nBrowseForwardText=Forward\nBrowseHomeText=Home\nBrowseStopText=Stop\nRefreshText=Refresh\nFavoritesText=Favorites\nSearchText=Search\nIncreaseZoomText=Increase Zoom\nDecreaseZoomText=Decrease Zoom\nZoomText=Zoom\nNextPageText=Next Page\nPreviousPageText=Previous Page\nFirstPageText=First Page\nLastPageText=Last Page\nGoToPageText=Go To Page\nNavigateJournalText=Navigate Journal\n```\n\n----------------------------------------\n\nTITLE: ReaderBaseDelegate Schema Context Validation in C#\nDESCRIPTION: Ensures that the schema context is not null when accessed, preventing null reference errors during XAML reader operations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nSchemaContextNull=SchemaContext cannot be null.\n```\n\n----------------------------------------\n\nTITLE: XamlName Validation Error in C#\nDESCRIPTION: Detects invalid XAML type names containing invalid characters such as periods, which are not permitted in type names.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nTypeNameCannotHavePeriod=Type name '{0}' cannot have a dot '.'.\n```\n\n----------------------------------------\n\nTITLE: XaslType Reflection and Property Implementation Checks in C#\nDESCRIPTION: Provides messages for unimplemented sorting, missing attachable members, and unimplemented properties during reflection.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nXaslTypePropertiesNotImplemented=Need to implement public/internal sorting.\n```\n\nLANGUAGE: C#\nCODE:\n```\nAttachableMemberNotFound=Attachable member '{0}' was not found.\n```\n\nLANGUAGE: C#\nCODE:\n```\nPropertyNotImplemented='{0}' is not implemented.\n```\n\n----------------------------------------\n\nTITLE: Opening WPF DRT Executable in Visual Studio (CMD)\nDESCRIPTION: Launches Visual Studio (specifically the 2019 Preview version in the example) and loads the specified DRT executable (e.g., `DrtXaml.exe`). This command is typically run from the separate command window opened by `RunDrts.cmd /debugtests`. It is the first step to configure debugging within Visual Studio.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n\"%ProgramFiles%\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\devenv.exe\" DrtXaml.exe\n```\n\n----------------------------------------\n\nTITLE: Template Error Messages\nDESCRIPTION: These error messages are related to Templates in WPF, providing explanations about issues that arise during template usage. They cover areas such as BAML record support, target type mismatches, and the valid use of templates.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_2\n\nLANGUAGE: N/A\nCODE:\n```\nTemplateInvalidBamlRecord=BAML Records of type '{0}' are not supported in Templates.\nTemplateTargetTypeMismatch='{0}' ControlTemplate TargetType does not match templated type '{1}'.\nTemplateNotTargetType=This Template does not support setting the TargetType. Set the DataType instead.\nMustNotTemplateUnassociatedControl=ControlTemplate must be associated with a Control by setting the Control.Template property before it is used to template that Control.\nUnsupportedTriggerInTemplate='{0}' type trigger is not valid in a Template.\nTemplateFindNameInInvalidElement=This operation is valid only on elements that have this template applied.\nTemplateContentSetTwice=Template's TemplateContent property can only be set once.\nElementMustBelongToTemplate=Element must belong to a FrameworkTemplate instance.\n```\n\n----------------------------------------\n\nTITLE: Initializing XmlSchemaSet from Resources in WPF C#\nDESCRIPTION: This C# code snippet demonstrates how to initialize an `XmlSchemaSet` object and load schemas from embedded resources within a WPF application.  It retrieves schema files ('rdkey.xsd' and 's0schema.xsd') as byte arrays from a resource manager. It then uses these byte arrays to create `XmlTextReader` objects and adds them to the `XmlSchemaSet`.  The `Compile()` method validates the schemas, and finally, resources are released.  It requires the XML schemas to be added as embedded resources in the project and a reference to System.Xml.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/ReachFramework/Resources/documentation.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n        private XmlSchemaSet GetXmlSchemaSet()\n        {\n            ResourceManager resourceManager = new ResourceManager( \"Schemas_S0\", Assembly.GetExecutingAssembly());\n            byte [] rdkey = (byte[])resourceManager.GetObject(\"rdkey.xsd\");\n            byte [] s0 = (byte[])resourceManager.GetObject(\"s0schema.xsd\");\n\n\t\t\tXmlSchemaSet xss = new XmlSchemaSet();\n\n\t\t\txss.Add(null, new XmlTextReader(new MemoryStream(rdkey)));\n\t\t\txss.Add(null, new XmlTextReader(new MemoryStream(s0)));\n\t\t\txss.Compile();\n\n\t\t\tresourceManager.ReleaseAllResources();\n\t\t\t\n\t\t\treturn xss;\n        }\n```\n\n----------------------------------------\n\nTITLE: Extending 1ES Official Arcade Pipeline Template in YAML\nDESCRIPTION: This YAML snippet illustrates how to extend the MicroBuild 1ES official Arcade pipeline template to define stages and jobs with parameters. It demonstrates configuring a build stage that publishes multiple artifacts via outputs directed to the Build.ArtifactStagingDirectory. This method helps to reduce redundant security scan injections by consolidating publish artifact outputs using the outputParentDirectory feature of 1ES templates. The snippet includes job steps that create and copy build outputs to the artifact staging directory for publishing. Prerequisites include referencing the correct 1ES template and placing artifacts in the staging directory. Inputs include the template parameters such as stages and jobs arrays. The output is an orchestrated pipeline run with 1ES-compliant artifact publishing.\nSOURCE: https://github.com/dotnet/wpf/blob/main/eng/common/template-guidance.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# azure-pipelines.yml\nextends:\n  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate\n  parameters:\n    stages:\n    - stage: build\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          # 1ES makes use of outputs to reduce security task injection overhead\n          templateContext:\n            outputs:\n            - output: pipelineArtifact\n              displayName: 'Publish logs from source'\n              continueOnError: true\n              condition: always()\n              targetPath: $(Build.ArtifactStagingDirectory)/artifacts/log\n              artifactName: Logs\n          jobs:\n          - job: Windows\n            steps:\n            - script: echo \"friendly neighborhood\" > artifacts/marvel/spiderman.txt\n          # copy build outputs to artifact staging directory for publishing\n          - task: CopyFiles@2\n              displayName: Gather build output\n              inputs:\n                SourceFolder: '$(Build.SourcesDirectory)/artifacts/marvel'\n                Contents: '**'\n                TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/marvel'\n```\n\n----------------------------------------\n\nTITLE: Resource IDs for PresentationFramework (WPF Localization)\nDESCRIPTION: Lists resource ID constants and their string values for the WPF PresentationFramework component. These constants include keyboard shortcuts for text editing, formatting, table manipulation, and other UI actions, used for localization and command mapping within the WPF application framework.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/localization_untranslated_strings.md#_snippet_2\n\nLANGUAGE: Markdown Table\nCODE:\n```\n| ResourceID | Value |\n| --------------|------------- |\n| InkCanvasDeselectKey | \"Esc\" |\n| KeyAlignCenter | \"Ctrl+E\" |\n| KeyAlignLeft | \"Ctrl+L\" |\n| KeyAlignRight | \"Ctrl+R\" |\n| KeyAltUndo | \"Alt+Backspace\" |\n| KeyApplyDoubleSpace | \"Ctrl+2\" |\n| KeyApplyOneAndAHalfSpace | \"Ctrl+5\" |\n| KeyApplySingleSpace | \"Ctrl+1\" |\n| KeyBackspace | \"Backspace\" |\n| KeyCopy | \"Ctrl+C\" |\n| KeyCopyFormat | \"Ctrl+Shift+C\" |\n| KeyCtrlInsert | \"Ctrl+Insert\" |\n| KeyCut | \"Ctrl+X\" |\n| KeyDecreaseFontSize | \"Ctrl+OemOpenBrackets\" |\n| KeyDecreaseIndentation | \"Ctrl+Shift+T\" |\n| KeyDelete | \"Delete\" |\n| KeyDeleteNextWord | \"Ctrl+Delete\" |\n| KeyDeletePreviousWord | \"Ctrl+Backspace\" |\n| KeyEnterLineBreak | \"Shift+Enter\" |\n| KeyEnterParagraphBreak | \"Enter\" |\n| KeyIncreaseFontSize | \"Ctrl+OemCloseBrackets\" |\n| KeyInsertColumns | \"Alt+Ctrl+Shift+C\" |\n| KeyInsertRows | \"Alt+Ctrl+Shift+R\" |\n| KeyInsertTable | \"Alt+Ctrl+Shift+T\" |\n| KeyMergeCells | \"Alt+Ctrl+Shift+M\" |\n| KeyMoveDownByLine | \"Down\" |\n| KeyMoveDownByPage | \"PageDown\" |\n| KeyMoveDownByParagraph | \"Ctrl+Down\" |\n| KeyMoveLeftByCharacter | \"Left\" |\n| KeyMoveLeftByWord | \"Ctrl+Left\" |\n| KeyMoveRightByCharacter | \"Right\" |\n| KeyMoveRightByWord | \"Ctrl+Right\" |\n| KeyMoveToColumnEnd | \"Alt+PageDown\" |\n| KeyMoveToColumnStart | \"Alt+PageUp\" |\n| KeyMoveToDocumentEnd | \"Ctrl+End\" |\n| KeyMoveToDocumentStart | \"Ctrl+Home\" |\n| KeyMoveToLineEnd | \"End\" |\n| KeyMoveToLineStart | \"Home\" |\n| KeyMoveToWindowBottom | \"Alt+Ctrl+PageDown\" |\n| KeyMoveToWindowTop | \"Alt+Ctrl+PageUp\" |\n| KeyMoveUpByLine | \"Up\" |\n| KeyMoveUpByPage | \"PageUp\" |\n| KeyMoveUpByParagraph | \"Ctrl+Up\" |\n| KeyPasteFormat | \"Ctrl+Shift+V\" |\n| KeyRedo | \"Ctrl+Y\" |\n| KeyRemoveListMarkers | \"Ctrl+Shift+R\" |\n| KeyResetFormat | \"Ctrl+Space\" |\n| KeySelectDownByLine | \"Shift+Down\" |\n| KeySelectDownByPage | \"Shift+PageDown\" |\n| KeySelectDownByParagraph | \"Ctrl+Shift+Down\" |\n| KeySelectLeftByCharacter | \"Shift+Left\" |\n| KeySelectLeftByWord | \"Ctrl+Shift+Left\" |\n| KeySelectRightByCharacter | \"Shift+Right\" |\n| KeySelectRightByWord | \"Ctrl+Shift+Right\" |\n| KeySelectToColumnEnd | \"Alt+Shift+PageDown\" |\n| KeySelectToColumnStart | \"Alt+Shift+PageUp\" |\n| KeySelectToDocumentEnd | \"Ctrl+Shift+End\" |\n| KeySelectToDocumentStart | \"Ctrl+Shift+Home\" |\n| KeySelectToLineEnd | \"Shift+End\" |\n| KeySelectToLineStart | \"Shift+Home\" |\n| KeySelectToWindowBottom | \"Alt+Ctrl+Shift+PageDown\" |\n| KeySelectToWindowTop | \"Alt+Ctrl+Shift+PageUp\" |\n| KeySelectUpByLine | \"Shift+Up\" |\n| KeySelectUpByPage | \"Shift+PageUp\" |\n| KeySelectUpByParagraph | \"Ctrl+Shift+Up\" |\n| KeyShiftBackspace | \"Shift+Backspace\" |\n| KeyShiftDelete | \"Shift+Delete\" |\n| KeyShiftInsert | \"Shift+Insert\" |\n| KeyShiftSpace | \"Shift+Space\" |\n| KeySpace | \"Space\" |\n| KeySplitCell | \"Alt+Ctrl+Shift+S\" |\n| KeySwitchViewingMode | \"Ctrl+M\" |\n| KeyTabBackward | \"Shift+Tab\" |\n| KeyTabForward | \"Tab\" |\n| KeyToggleBullets | \"Ctrl+Shift+L\" |\n| KeyToggleInsert | \"Insert\" |\n| KeyToggleNumbering | \"Ctrl+Shift+N\" |\n| KeyToggleSubscript | \"Ctrl+OemPlus\" |\n| KeyToggleSuperscript | \"Ctrl+Shift+OemPlus\" |\n| KeyToggleUnderline | \"Ctrl+U\" |\n| KeyUndo | \"Ctrl+Z\" |\n| ListBoxSelectAllKey | \"Ctrl+A\" |\n| SwitchViewingMode | \"_Switch ViewingMode\" |\n| ToStringFormatString_Control | \"{0}: {1}\" |\n| ToStringFormatString_GridView | \"{0} Columns.Count:{1}\" |\n| ZoomPercentageConverterStringFormat | \"{0:0.##}%\" |\n```\n\n----------------------------------------\n\nTITLE: Class Definitions for Media Drawing and Source in C#\nDESCRIPTION: These snippets define classes such as ImageDrawing, ImageSource, and VideoDrawing that represent various drawable media elements in WPF. They depend on WPF media and imaging namespaces and function as data containers for rendering media content. Typically, they include properties like source, rectangles, and transformations to render visual media within WPF applications.\nSOURCE: https://github.com/dotnet/wpf/blob/main/eng/WpfArcadeSdk/tools/WPF_Generated_Files.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: ImageDrawing.cs */\n// Defines an ImageDrawing class for rendering images within WPF visuals.\npublic class ImageDrawing { /* properties and methods */ }\n```\n\nLANGUAGE: C#\nCODE:\n```\n/* Sample: ImageSource.cs */\n// Represents the source of an image, such as BitmapImage, for use in media objects.\npublic class ImageSource { /* properties and methods */ }\n```\n\n----------------------------------------\n\nTITLE: Configuring Automated Branch Merge - JSON\nDESCRIPTION: This JSON snippet defines the configuration for an automated branch merging process. It specifies the source branch (key name), the target branch to merge into via the 'MergeToBranch' property, and additional command-line switches via 'ExtraSwitches' for the merge operation.\nSOURCE: https://github.com/dotnet/wpf/blob/main/github-merge-flow.jsonc.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"merge-flow-configurations\": {\n        \n        // Automate merging runtime release/9.0-rc2 branch back to release/9.0\n        \"release/9.0-rc2\":{\n            \"MergeToBranch\": \"release/9.0\",\n            \"ExtraSwitches\": \"-QuietComments\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Csp Tests using build.cmd\nDESCRIPTION: This command executes the Csp tests. It uses the build.cmd script and specifies the project file containing the unit tests. The -projects option tells build.cmd to build the specified project. It is assumed that build.cmd is available at the root of the WPF repository, and the specified project file contains the necessary tests for Csp.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/WpfGfx/tools/csp/README.md#_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nbuild.cmd -projects \"src\\Microsoft.DotNet.Wpf\\src\\WpfGfx\\tools\\csp\\RunUnitTests.proj\"\n```\n\n----------------------------------------\n\nTITLE: Ongoing Development and Community Feedback for Fluent Theme\nDESCRIPTION: Discusses current issues and future work planned for Fluent theme features in .NET 10, encouraging community involvement through feedback, discussions, and pull requests. Advises to run the ThemeGenerator.Fluent.ps1 script when submitting PRs for theme resource generation.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/docs/using-fluent.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: T4 Template Proper Conditional Block Formatting\nDESCRIPTION: Shows the recommended way to format conditional blocks in T4 templates, with each control statement on a single line with its brackets.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/codegen.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n<# if (WriteAsFunction()){ #>\nbool GetFoo()\n{\n    ...\n}\n<# } else { #>\nbool Foo\n{\n    get {...}\n}\n<# } #>\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Host Environment Variables (Console)\nDESCRIPTION: Shows the console output generated by the `copy-wpf.ps1` script when the `-testhost` flag is used. It confirms that the `DOTNET_ROOT(x86)` (or `DOTNET_ROOT` for x64) and `DOTNET_MULTILEVEL_LOOKUP` environment variables are being set, which are crucial for the .NET host to find the assemblies in the test host location instead of the default installation.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/developer-guide.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n** Setting env:DOTNET_ROOT(x86) to c:\\testhost\\x86 **\n** Setting env:DOTNET_MULTILEVEL_LOOKUP to 0 **\n```\n\n----------------------------------------\n\nTITLE: XamlException Position Reporting in C#\nDESCRIPTION: Reports line number and position information for errors encountered during XAML parsing to aid debugging.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nLineNumberAndPosition='{0}' Line number '{1}' and line position '{2}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nLineNumberOnly='{0}' Line number '{1}'.\n```\n\n----------------------------------------\n\nTITLE: HwndHost Embedding Restriction Message\nDESCRIPTION: Logs a warning when an HwndHost is embedded in a 3D scene, which is unsupported in WPF interop scenarios.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_10\n\nLANGUAGE: FORMAT\nCODE:\n```\nAn HwndHost may not be embedded in a 3D scene.\n```\n\n----------------------------------------\n\nTITLE: Extended Trace Messages for Binding in WPF\nDESCRIPTION: Collection of format strings used for extended tracing of data binding operations, including expression creation, context resolution, and event handling. Facilitates detailed diagnostics of WPF binding behaviors during development and debugging.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_5\n\nLANGUAGE: FORMAT\nCODE:\n```\nCreated {0} for {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\nCreated {0} for {1} within {2}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n  Path: {0}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n  XPath: {0}  Path: {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Default mode resolved to {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Default update trigger resolved to {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Attach to {1}.{2} (hash={3})\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Detach\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Use Framework mentor {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Resolve source deferred\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: {1} requires tree context\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Resolving source {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Path '{1}' requires namespace information\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Framework mentor not found\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Found data context element: {1} ({2})\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: DataContext is null\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n  RelativeSource.{0} found {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n    Lookup ancestor of type {0}:  queried {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n    Lookup name {0}:  queried {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n    Lookup name {0}:  queried template of {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Use View from {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Use Data from {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Activate with root item {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Deactivate\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - got raw value {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - converted DBNull to {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - user's converter produced {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - null-value conversion produced {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - implicit converter produced {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - string formatting produced {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - string formatting failed, using format '{1}'\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - value {1} is not valid for target\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - using fallback/default value {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - using final value {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Update - got raw value {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Update - {1} failed\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Update - user's converter produced {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Update - implicit converter produced {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Update - using final value {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Got {1} event from {2}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Got PropertyChanged event from {1} for {2}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue '{1}' from child {2} - {3}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: One or more children have not resolved sources\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: TransferValue - got raw value {1}: {2}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Update - multiconverter produced value {1}: {2}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: GetValue at level {1} from {2} using {3}: {4}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: SetValue at level {1} to {2} using {3}: {4}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Replace item at level {1} with {2}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Replace item at level {1} with {2}, using accessor {3}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}:   Item at level {1} has same type - reuse accessor {2}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}:   Item at level {1} is null - no accessor\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}:   At level {1} - for {2}.{3} found accessor {4}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}:   At level {1} - for {2}[{3}] found accessor {4}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Context for XML binding set to {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Building collection from {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: Synchronizing collection with {1}\n```\n\nLANGUAGE: FORMAT\nCODE:\n```\n{0}: SelectNodes at {1} using XPath {2}: {3}\n```\n\n----------------------------------------\n\nTITLE: Defining Trace Configuration Format in WPF\nDESCRIPTION: Explains the format and structure of the trace configuration file used to generate wrapper classes for WPF tracing. Includes section headers, trace IDs, and message templates.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[TraceName,TraceArea,WrapperClassName]\nTrace1=1,,{\"Base message 1\",\"Param1\",\"Param2\"}\nTrace2=,,{\"Base message 2\",\"Param1\",\"Param2\"}\nTrace3=AUTO,,{\"Base message 3\",\"InParam1\",\"InParam2\"}\nTrace4=PREVIOUS,,{\"Base message 4\",\"OutParam1\",\"OutParam2\"}\nTrace5=,FORMAT,{\"{0} is broken\",\"Param1\",\"Param2\"}\n[end]\n```\n\n----------------------------------------\n\nTITLE: Media Commands Key Display Strings in WPF\nDESCRIPTION: Display string definitions for media command key bindings in WPF applications. These strings represent the human-readable formats of keyboard combinations for media-related actions, with most left blank for custom configuration.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_4\n\nLANGUAGE: INI\nCODE:\n```\nMediaPlayKeyDisplayString=\nMediaPauseKeyDisplayString=\nMediaStopKeyDisplayString=\nMediaRecordKeyDisplayString=\nMediaNextTrackKeyDisplayString=\nMediaPreviousTrackKeyDisplayString=\nMediaFastForwardKeyDisplayString=\nMediaRewindKeyDisplayString=\nMediaChannelUpKeyDisplayString=\nMediaChannelDownKeyDisplayString=\nMediaSelectKeyDisplayString=\nMediaTogglePlayPauseKeyDisplayString=\nMediaIncreaseVolumeKeyDisplayString=\nMediaDecreaseVolumeKeyDisplayString=\nMediaMuteVolumeKeyDisplayString=\nMediaIncreaseTrebleKeyDisplayString=\nMediaDecreaseTrebleKeyDisplayString=\nMediaIncreaseBassKeyDisplayString=\nMediaDecreaseBassKeyDisplayString=\nMediaBoostBassKeyDisplayString=\nMediaIncreaseMicrophoneVolumeKeyDisplayString=\nMediaDecreaseMicrophoneVolumeKeyDisplayString=\nMediaMuteMicrophoneVolumeKeyDisplayString=\nMediaToggleMicrophoneOnOffKeyDisplayString=\n```\n\n----------------------------------------\n\nTITLE: Media Commands Text Labels in WPF\nDESCRIPTION: Text labels for media-related commands in WPF applications. These labels are used in the UI to represent various media control actions.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\nMediaPlayText=Play\nMediaPauseText=Pause\nMediaStopText=Stop\nMediaRecordText=Record\nMediaNextTrackText=Next Track\nMediaPreviousTrackText=Previous Track\nMediaFastForwardText=Fast Forward\nMediaRewindText=Rewind\nMediaChannelUpText=Channel Up\nMediaChannelDownText=Channel Down\nMediaSelectText=Select\nMediaTogglePlayPauseText=Toggle Play Pause\nMediaIncreaseVolumeText=Increase Volume\nMediaDecreaseVolumeText=Decrease Volume\nMediaMuteVolumeText=Mute Volume\nMediaIncreaseTrebleText=Increase Treble\nMediaDecreaseTrebleText=Decrease Treble\nMediaIncreaseBassText=Increase Bass\nMediaDecreaseBassText=Decrease Bass\nMediaBoostBassText=Boost Bass\nMediaIncreaseMicrophoneVolumeText=Increase Microphone Volume\nMediaDecreaseMicrophoneVolumeText=Decrease Microphone Volume\nMediaMuteMicrophoneVolumeText=Mute Microphone Volume\nMediaToggleMicrophoneOnOffText=Toggle Microphone OnOff\n```\n\n----------------------------------------\n\nTITLE: XamlPullParser Exception Messages in C#\nDESCRIPTION: Provides error messages for unexpected node types and element rule violations during parsing XAML, aiding debugging and validation of XAML structure.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/System.Xaml/Resources/ExceptionStringTable.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nUnexpectedNodeType=Unexpected '{0}' in parse rule '{1}'.\n```\n\nLANGUAGE: C#\nCODE:\n```\nElementRuleException=Element ::= . EmptyElement | ( StartElement ElementBody ).\n```\n\nLANGUAGE: C#\nCODE:\n```\nEmptyElementRuleException=EmptyElement ::= . EMPTYELEMENT DIRECTIVE* ATTRIBUTE*.\n```\n\nLANGUAGE: C#\nCODE:\n```\nEmptyPropertyElementRuleException=EmptyPropertyElement ::= EMPTYPROPERTYELEMENT.\n```\n\nLANGUAGE: C#\nCODE:\n```\nStartElementRuleException=StartElement ::= . ELEMENT DIRECTIVE*.\n```\n\nLANGUAGE: C#\nCODE:\n```\nElementBodyRuleException=ElementBody ::= ATTRIBUTE* ( PropertyElement | Content )* . ENDTAG.\n```\n\nLANGUAGE: C#\nCODE:\n```\nNonemptyPropertyElementRuleException=NonemptyPropertyElement ::= . PROPERTYELEMENT Content? ENDTAG.\n```\n\nLANGUAGE: C#\nCODE:\n```\nPropertyElementRuleException=PropertyElement ::= EmptyPropertyElement | NonemptyPropertyElement\n```\n\n----------------------------------------\n\nTITLE: Common DataGrid Sorting Error Message in WPF\nDESCRIPTION: Provides a format string for an error message when sorting on a DataGrid column is unsupported or fails, with '{0}' representing the specific sort criterion. Used in debugging or user feedback for data grid sorting.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/AvTraceMessages.txt#_snippet_4\n\nLANGUAGE: FORMAT\nCODE:\n```\nCannot sort by '{0}'\n```\n\n----------------------------------------\n\nTITLE: TextFlow Error Messages\nDESCRIPTION: These error messages explain issues within TextFlow operations and TextContainer object within WPF. The errors cover the type of child elements and the state of the hyphenator.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/ExceptionStringTable.txt#_snippet_10\n\nLANGUAGE: N/A\nCODE:\n```\nTextPanelIllegalParaTypeForIAddChild='{0}' parameter of unexpected type '{1}'. Expected type is UIElement or FrameworkContentElement.\nTextContainerDoesNotContainElement=Text Container does not exist or does not contain the specified element.\nHyphenatorDisposed=Hyphenator is called after it has been disposed.\n```\n\n----------------------------------------\n\nTITLE: Color Error Messages in WPF\nDESCRIPTION: Error messages related to color context operations in WPF. These cover validation of color dimensions, context compatibility, and color space requirements for specific operations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_15\n\nLANGUAGE: Resource\nCODE:\n```\nColor_DimensionMismatch=Color context dimensions mismatch.\nColor_ColorContextTypeMismatch=Color context types mismatch.\nColor_ColorContextNotsRGB_or_scRGB=Color context must be sRGB or scRGB for this operation.\nColor_NullColorContext=Color context is null.\nColorContext_FileTooLarge=File is too large to be a valid ColorContext.\n```\n\n----------------------------------------\n\nTITLE: Composite Font Error Messages in WPF\nDESCRIPTION: Error message strings related to composite font configuration and validation in WPF. These messages provide information about XML parsing errors, font family configuration issues, and character metrics validation problems.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_9\n\nLANGUAGE: INI\nCODE:\n```\nCompositeFontUnknownElement='{0}' element in XML namespace '{1}' not recognized. Note that element names are case sensitive.\nCompositeFontUnknownAttribute='{0}' attribute in XML namespace '{1}' not recognized. Note that attribute names are case sensitive.\nCompositeFontMissingElement=Missing required element '{0}'.\nCompositeFontMissingAttribute=Missing required attribute '{0}'.\nCompositeFontAttributeValue1=Invalid value for {0} attribute.\nCompositeFontAttributeValue2=Invalid value for {0} attribute: {1}\nCompositeFontInvalidUnicodeRange=Unicode range is not valid.\nCompositeFontSignificantWhitespace=The composite font contains significant whitespace where none is expected.\nCompositeFont_TooManyFamilyMaps=The FontFamily cannot hold any more FamilyMaps.\nCompositeFont_DuplicateTypeface=A FontFamily cannot have more than one FamilyTypeface with the same Style, Weight, and Stretch.\nFamilyMap_TargetNotSet=Cannot add FamilyMap because Target property is not set.\nCharacterMetrics_MissingRequiredField=The Metrics property of CharacterMetrics is missing a required field.\nCharacterMetrics_TooManyFields=The Metrics property of CharacterMetrics has too many fields.\nCharacterMetrics_NegativeHorizontalAdvance=CharacterMetrics is not valid. The horizontal advance (defined as the sum of BlackBoxWidth, LeftSideBearing, and RightSideBearing) cannot be negative.\nCharacterMetrics_NegativeVerticalAdvance=CharacterMetrics is not valid. The vertical advance (defined as the sum of BlackBoxHeight, TopSideBearing, and BottomSideBearing) cannot be negative.\nFontFamily_ReadOnly=A named FontFamily object cannot be modified.\nFamilyCollection_CannotFindCompositeFontsLocation=Cannot load system composite fonts. Location not found.\n```\n\n----------------------------------------\n\nTITLE: Visual System Error Messages in WPF\nDESCRIPTION: Error message related to the WPF visual system and component compatibility. This message specifically addresses version mismatches between critical DLLs in the WPF rendering pipeline.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_10\n\nLANGUAGE: INI\nCODE:\n```\nMilErr_UnsupportedVersion=Mismatched versions of PresentationCore.dll, Milcore.dll, WindowsCodecs.dll, or D3d9.dll. Check that these DLLs come from the same source.\n```\n\n----------------------------------------\n\nTITLE: Animation Effects Error Messages in WPF\nDESCRIPTION: Error messages related to animation effects in WPF. These cover validation of animation effect collections and their attachment to visual elements.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_18\n\nLANGUAGE: Resource\nCODE:\n```\nAnimEffect_CollectionInUse=This AnimationEffectCollection is already being used by another UIElement.\nAnimEffect_NoVisual=This AnimationEffect is not attached to a Visual.\nAnimEffect_AlreadyAttached=This AnimationEffect is already attached to a UIElement.\n```\n\n----------------------------------------\n\nTITLE: Tablet and Gesture Recognition Error Strings\nDESCRIPTION: Strings for exceptions related to tablet input, extended properties, strokes, rendering, GUID validation, and gesture recognition, supporting debugging and validation.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nEventArgIsNull=Event arguments must be non-null.\nInvalidDrawingAttributesHeight=Height must be greater than or equal to DrawingAttributes.MinHeight and less than or equal to DrawingAttribute.MaxHeight.\nInvalidDrawingAttributesWidth=Width must be greater than or equal to DrawingAttributes.MinWidth and less than or equal to DrawingAttribute.MaxWidth.\nEPExists=ExtendedProperty is already part of the ExtendedPropertyCollection.\nEPNotFound=Property not set.\nEPGuidNotFound=The GUID is not part of the ExtendedPropertyCollection.\nValueNotValidForGuid=Value is not valid for the specified GUID.\nCannotBothBeNull='{0}' and '{1}' cannot both be null.\nInvalid_isfData_Length=The length of the ISF data must be greater than zero.\nInvalidRemovedStroke=The stroke being removed does not exist in the current collection.\nStrokeIsDuplicated=A duplicate stroke cannot be added to StrokeCollection.\nInvalidReplacedStroke=The stroke being replaced does not exist in the current collection.\nEmptyScToReplaceWith=The replacement StrokeCollection cannot be empty.\nEmptyScToReplace=Collection cannot be empty.\nStrokesNotContiguously=The strokes being replaced must exist contiguously in the current StrokeCollection.\nCollectionEnumerationError=Collection was modified during enumeration.\nInvalidDiameter=The value is out of range.\nEmptyArray=Empty arrays are not a valid argument value.\nSCEraseShape=Erasing Shape cannot be null.\nSCErasePath=Path of erasing stroke cannot be null.\nSCDataChanged=The Strokes have changed.\nStrokeCollectionIsReadOnly=The specified StrokeCollection is read-only.\nEmptyArrayNotAllowedAsArgument=The array cannot be empty.\nVisualCannotBeDetached=Specified Visual cannot be detached.\nEndHitTestingCalled=EndHitTesting has already been called on the IncrementalHitTester.\nCannotAttachVisualTwice=Cannot attach a Visual that is already attached.\nUnknownStroke=Unrecognized Stroke in PropertyDataChangedEventArgs.Owner.\nUnknownStroke1=Unrecognized Stroke in Stroke.Invalidated event arguments.\nUnknownStroke3=Unrecognized Stroke in StrokeCollectionChangedEventArgs.Removed.\nUnexpectedStroke=Unexpected Stroke in PropertyDataChangedEventArgs.Owner.\nDuplicateStrokeAdded=Duplicate Stroke in StrokeCollectionChangedEventArgs.Added.\nInvalidGuid=GUID cannot be empty.\nInvalidValueType=Value must be of type '{0}'.\nInvalidValueType1=Value must be of type '{0}' or '{1}'.\nInvalidSttValue=Translation is not valid.\nInvalidValueOfType=Invalid value '{0}' for type '{1}'.\nInitializingCompressorFailed=Cannot initialize compressor.\nDecompressPacketDataFailed=Decompression of packet data failed.\nDecompressPropertyFailed=Decompression of property data failed.\nInvalidEpInIsf=Extended property data type is not valid.\nEmptyDataToLoad=No data to load.\nIsfOperationFailed=InkSerializedFormat operation failed.\nInvalidStream=Stream is not valid.\nInvalidDataTypeForExtendedProperty=Property data must be a non-reference variant compatible type.\nMatrixNotInvertible=The specified Matrix must be invertible.\nInvalidSizeSpecified=The specified size is less than the information decoded in the ISF stream.\nInvalidDataInISF=The specified data is invalid, see inner exception for details.\nInvalidBufferLength=Maximum buffer length must be within actual buffer length.\nEndOfStreamReached=End of stream reached.\nCountOfBitsOutOfRange=Count must be less than or equal to bits per byte and greater than zero.\nCountOfBitsGreatThanRemainingBits=Count must be less than or equal to remaining number of bits in stream.\nConstructorRecursion=Possible constructor recursion detected.\nInvalidMatrixContainsNaN=NaN is not a valid value for Matrix member.\nInvalidMatrixContainsInfinity=Infinity member value is not valid in Matrix.\nGestureRecognizerNotAvailable=No gesture recognizer is available on the system.\nApplicationGestureArrayLengthIsZero=The ApplicationGesture array must contain at least one member.\nAllGesturesMustExistAlone=If AllGestures is specified, it must be the only ApplicationGesture in the ApplicationGesture array.\nApplicationGestureIsInvalid=The specified ApplicationGesture is not valid.\nDuplicateApplicationGestureFound=Duplicate ApplicationGesture values are not allowed.\n```\n\n----------------------------------------\n\nTITLE: Serialization and OLE Context Strings\nDESCRIPTION: Strings for validation and error messages in serialization processes and OleServices context initialization, including null event args, initialization failures, and thread apartment enforcement.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationCore/Resources/ExceptionStringTable.txt#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nNonWhiteSpaceInAddText=Text content is not allowed on this element. Cannot add the text '{0}'.\nOleServicesContext_oleInitializeFailure=OleInitialize failed for '{0}'.\nOleServicesContext_ThreadMustBeSTA=Current thread must be set to single thread apartment (STA) mode before OLE calls can be made.\n```\n\n----------------------------------------\n\nTITLE: T4 Template Proper Helper Function Definition\nDESCRIPTION: Shows the correct way to define helper functions in T4 templates with the Output prefix and without extra indentation for better reusability.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/codegen.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n<#+ void OutputFooFunction() { #>\nbool GetFoo()\n{\n    ...\n}\n<#+ } #>\n```\n\n----------------------------------------\n\nTITLE: T4 Template Incorrect Conditional Block Formatting\nDESCRIPTION: Demonstrates the incorrect way to format conditional blocks in T4 templates, with control structures spread across multiple lines.\nSOURCE: https://github.com/dotnet/wpf/blob/main/Documentation/codegen.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n<#\nif (WriteAsFunction())\n{ \n#>\nbool GetFoo()\n{\n    ...\n}\n<#\n}\nelse\n{\n#>\nbool Foo\n{\n    get {...}\n}\n<#\n}\n#>\n```\n\n----------------------------------------\n\nTITLE: Defining AddAnnotation WPF Event Classes in C++\nDESCRIPTION: Declares event classes for tracking the addition of annotation objects in WPF, including TAddAnnotation_V0, AddAnnotationBegin_V0, and AddAnnotationEnd_V0. Leverages a consistent class hierarchy with event type attributes, enabling system monitoring of annotation creation phases.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_60\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"AddAnnotation\") : amended,\n guid(\"{8f4b2faa-24d6-4ee2-9935-bbf845f758a2}\"),\n EventVersion(2),\n DisplayName(\"AddAnnotation\") : amended\n]\nclass TAddAnnotation_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"AddAnnotationBegin\") : amended,\n EventType(1),\n EventTypeName(\"AddAnnotationBegin\") : amended\n]\nclass AddAnnotationBegin_V0:TAddAnnotation_V0\n{\n\n};\n\n[Dynamic,\n Description(\"AddAnnotationEnd\") : amended,\n EventType(2),\n EventTypeName(\"AddAnnotationEnd\") : amended\n]\nclass AddAnnotationEnd_V0:TAddAnnotation_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ClearHighlight WPF Event Classes in C++\nDESCRIPTION: Introduces TClearHighlight_V0 and its Begin/End event subclasses for managing highlight clearing operations within WPF. Attributes detail GUIDs, event versions, and display names, while the event pattern enables end-to-end monitoring and traceability of highlight lifecycle operations.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_58\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"ClearHighlight\") : amended,\n guid(\"{e1a59147-d28d-4c5f-b980-691be2fd4208}\"),\n EventVersion(2),\n DisplayName(\"ClearHighlight\") : amended\n]\nclass TClearHighlight_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"ClearHighlightBegin\") : amended,\n EventType(1),\n EventTypeName(\"ClearHighlightBegin\") : amended\n]\nclass ClearHighlightBegin_V0:TClearHighlight_V0\n{\n\n};\n\n[Dynamic,\n Description(\"ClearHighlightEnd\") : amended,\n EventType(2),\n EventTypeName(\"ClearHighlightEnd\") : amended\n]\nclass ClearHighlightEnd_V0:TClearHighlight_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteInkNote WPF Event Classes in C++\nDESCRIPTION: Declares TDeleteInkNote_V0 and associated Begin/End event classes, modeling deletion of ink notes in WPF through WMI eventing. Classes are decorated for dynamic event handling and annotated with GUIDs, display names, and event types, supporting ink-based annotation management.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_56\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"DeleteInkNote\") : amended,\n guid(\"{bf7e2a93-9d6a-453e-badb-3f8f60075cf2}\"),\n EventVersion(2),\n DisplayName(\"DeleteInkNote\") : amended\n]\nclass TDeleteInkNote_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"DeleteInkNoteBegin\") : amended,\n EventType(1),\n EventTypeName(\"DeleteInkNoteBegin\") : amended\n]\nclass DeleteInkNoteBegin_V0:TDeleteInkNote_V0\n{\n\n};\n\n[Dynamic,\n Description(\"DeleteInkNoteEnd\") : amended,\n EventType(2),\n EventTypeName(\"DeleteInkNoteEnd\") : amended\n]\nclass DeleteInkNoteEnd_V0:TDeleteInkNote_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CreateStickyNote WPF Event Classes in C++\nDESCRIPTION: Establishes a WMI event base class, TCreateStickyNote_V0, and two derived classes for the Begin and End events of creating a sticky note in WPF. All are decorated with event metadata, including GUIDs, event types, display names, and dynamic attributes. They form a pattern modeling lifecycle events for sticky note creation, supporting accurate diagnostics and event tracing in WPF systems.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_54\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,\n Description(\"CreateStickyNote\") : amended,\n guid(\"{e3dbffac-1e92-4f48-a65a-c290bd5f5f15}\"),\n EventVersion(2),\n DisplayName(\"CreateStickyNote\") : amended\n]\nclass TCreateStickyNote_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"CreateStickyNoteBegin\") : amended,\n EventType(1),\n EventTypeName(\"CreateStickyNoteBegin\") : amended\n]\nclass CreateStickyNoteBegin_V0:TCreateStickyNote_V0\n{\n\n};\n\n[Dynamic,\n Description(\"CreateStickyNoteEnd\") : amended,\n EventType(2),\n EventTypeName(\"CreateStickyNoteEnd\") : amended\n]\nclass CreateStickyNoteEnd_V0:TCreateStickyNote_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining StylusEventQueued Event and ID Template - WPF Diagnostics MOF\nDESCRIPTION: Declares the StylusEventQueued event along with a template for conveying a single stylus identifier as a signed 32-bit integer. The ID32Template_V0 subclass (attached to TStylusEventQueued_V0 base) is designed for stylus event telemetry and is reused for other ID-based events. Dependencies include the Microsoft_Windows_WPF class hierarchy and WMI attribute annotations. Input is a stylus ID, output is the event instance for WMI clients. The template can be extended for other events by inheritance.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_79\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"ID32Template\") : amended,\n EventType(0),\n EventTypeName(  \"StylusEventQueued\") : amended\n]\nclass ID32Template_V0:TStylusEventQueued_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint32 Id;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Event Templates with Payload – pseudo-C++\nDESCRIPTION: Models navigation-related payload templates, such as 'URITemplate_V0' and 'Template_56_V0', which inherit from 'TNavigation_V0'. 'URITemplate_V0' provides a single 'URI' string property, while 'Template_56_V0' provides 'NavigationMode' and 'UriOrObject' fields. Used to relay structured navigation data to diagnostics listeners; requires compliance with WMI data conventions and 'TNavigation_V0' class hierarchy.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_73\n\nLANGUAGE: pseudo-C++\nCODE:\n```\nclass URITemplate_V0:TNavigation_V0\n{\n    string URI;\n};\n\nclass Template_56_V0:TNavigation_V0\n{\n    string NavigationMode;\n    string UriOrObject;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Resource Find Events with Key Parameter in C++\nDESCRIPTION: Declares ETW classes used to trace resource lookup in WPF. The TWClientResourceFind_V0 is the base event provider. KeyStringTemplate_V0 extends this class adding a null-terminated wide string field 'Key' representing the resource identifier being looked up. Begin and End event types are represented to allow detailed diagnostics of resource find operations. Requires Microsoft_Windows_WPF ETW provider support.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_49\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientResourceFind\") : amended, guid(\"{228d90d5-7e19-4480-9e56-3af2e90f8da6}\"), EventVersion(2), DisplayName(\"WClientResourceFind\") : amended]\nclass TWClientResourceFind_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"KeyStringTemplate\") : amended, EventType(1), EventTypeName(  \"WClientResourceFindBegin\") : amended]\nclass KeyStringTemplate_V0:TWClientResourceFind_V0\n{\n    [WmiDataId(1),\n     Description(\"Key\") : amended,\n     StringTermination(\"NullTerminated\"),\n     format(\"w\"),\n     read]\n     string Key;\n};\n\n[Dynamic,  Description(\"WClientResourceFindEnd\") : amended, EventType(2), EventTypeName(\"WClientResourceFindEnd\") : amended]\nclass WClientResourceFindEnd_V0:TWClientResourceFind_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining VisualCacheUpdate Event and Template in WPF Diagnostics - MOF\nDESCRIPTION: Declares the VisualCacheUpdate event and corresponding template for WPF telemetry using MOF syntax. The TVisualCacheUpdate_V0 class acts as a marker event, while the VisualCacheTemplate_V0 subclass specifies a payload of four unsigned 32-bit integers representing X/Y coordinates and Width/Height dimensions. Dependencies: Microsoft_Windows_WPF as base class and WMI attributes; all fields are annotated for WMI ingestion. Inputs include event context and X/Y/Width/Height data, outputting class instances to event consumers. Intended for WMI tracing and internal diagnostics.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_78\n\nLANGUAGE: MOF\nCODE:\n```\n[Dynamic,\n Description(\"VisualCacheTemplate\") : amended,\n EventType(0),\n EventTypeName(  \"VisualCacheUpdate\") : amended\n]\nclass VisualCacheTemplate_V0:TVisualCacheUpdate_V0\n{\n    [WmiDataId(1),\n     Description(\"uX\") : amended,\n     read]\n     uint32 uX;\n    [WmiDataId(2),\n     Description(\"uY\") : amended,\n     read]\n     uint32 uY;\n    [WmiDataId(3),\n     Description(\"uWidth\") : amended,\n     read]\n     uint32 uWidth;\n    [WmiDataId(4),\n     Description(\"uHeight\") : amended,\n     read]\n     uint32 uHeight;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RenderHandler Event Classes C#\nDESCRIPTION: Defines event classes related to render handling within WPF applications. Includes base class `TWClientRenderHandler_V0`, `WClientRenderHandlerEnd_V0` and `PerfElementID_V0` classes. `PerfElementID_V0` captures the ID during the beginning of render operations.  Uses attributes like `Dynamic`, `Description`, `EventType`, and `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientRenderHandler\") : amended,\n guid(\"{7723d8b7-488b-4f80-b089-46a4c6aca1c4}\"),\n EventVersion(2),\n DisplayName(\"WClientRenderHandler\") : amended\n]\nclass TWClientRenderHandler_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"PerfElementID\") : amended,\n EventType(1),\n EventTypeName(  \"WClientRenderHandlerBegin\") : amended\n]\nclass PerfElementID_V0:TWClientRenderHandler_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n};\n\n[Dynamic,\n Description(\"WClientRenderHandlerEnd\") : amended,\n EventType(2),\n EventTypeName(\"WClientRenderHandlerEnd\") : amended\n]\nclass WClientRenderHandlerEnd_V0:TWClientRenderHandler_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PostRender, QPCFrequency, and PrecomputeScene Event Classes C#\nDESCRIPTION: Defines classes for post-render events (`WClientPostRender`), querying the QPC frequency (`WClientQPCFrequency`), and precompute scene operations. Includes a base class `TWClientPostRender_V0`, `TWClientQPCFrequency_V0`, and `TWClientPrecomputeScene_V0`. The `Template_21_V0` class stores QPCFrequency and QPCCurrentTime during QPC frequency events. Uses attributes like `Dynamic`, `Description`, `EventType`, and `EventTypeName` along with `WmiDataId` to describe event metadata and data fields within the events.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[Dynamic,\n Description(\"WClientPostRender\") : amended,\n guid(\"{fb69cd45-c00d-4c23-9765-69c00344b2c5}\"),\n EventVersion(2),\n DisplayName(\"WClientPostRender\") : amended\n]\nclass TWClientPostRender_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"WClientPostRender\") : amended,\n EventType(0),\n EventTypeName(\"WClientPostRender\") : amended\n]\nclass WClientPostRender_V0:TWClientPostRender_V0\n{\n\n};\n\n[Dynamic,\n Description(\"WClientQPCFrequency\") : amended,\n guid(\"{30ee0097-084c-408b-9038-73bed0479873}\"),\n EventVersion(2),\n DisplayName(\"WClientQPCFrequency\") : amended\n]\nclass TWClientQPCFrequency_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"Template_21\") : amended,\n EventType(0),\n EventTypeName(  \"WClientQPCFrequency\") : amended\n]\nclass Template_21_V0:TWClientQPCFrequency_V0\n{\n    [WmiDataId(1),\n     Description(\"QPCFrequency\") : amended,\n     read]\n     sint64 QPCFrequency;\n    [WmiDataId(2),\n     Description(\"QPCCurrentTime\") : amended,\n     read]\n     sint64 QPCCurrentTime;\n};\n\n[Dynamic,\n Description(\"WClientPrecomputeScene\") : amended,\n guid(\"{3331420f-7a3b-42b6-8dfe-aabf472801da}\"),\n EventVersion(2),\n DisplayName(\"WClientPrecomputeScene\") : amended\n]\nclass TWClientPrecomputeScene_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,\n Description(\"PerfElementID\") : amended,\n EventType(1),\n EventTypeName(  \"WClientPrecomputeSceneBegin\") : amended\n]\nclass PerfElementID_V0:TWClientPrecomputeScene_V0\n{\n    [WmiDataId(1),\n     Description(\"Id\") : amended,\n     read]\n     sint64 Id;\n};\n\n[Dynamic,\n Description(\"WClientPrecomputeSceneEnd\") : amended,\n EventType(2),\n EventTypeName(\"WClientPrecomputeSceneEnd\") : amended\n]\nclass WClientPrecomputeSceneEnd_V0:TWClientPrecomputeScene_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring WPF Page End Events for ETW in C++\nDESCRIPTION: Defines event classes related to the end of page rendering in WPF ETW tracing. The TWClientDRXEndPage_V0 base class includes identifying metadata and the Begin and End event subtypes enable fine-grained tracing of page completion events. This aids diagnostic tools in analyzing page lifecycle and performance metrics in WPF applications. These classes depend on the Microsoft_Windows_WPF ETW infrastructure.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_40\n\nLANGUAGE: C++\nCODE:\n```\n[Dynamic,  Description(\"WClientDRXEndPage\") : amended, guid(\"{e20fddf4-17a6-4e5f-8693-3dd7cb049422}\"), EventVersion(2), DisplayName(\"WClientDRXEndPage\") : amended]\nclass TWClientDRXEndPage_V0:Microsoft_Windows_WPF\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXEndPageBegin\") : amended, EventType(1), EventTypeName(\"WClientDRXEndPageBegin\") : amended]\nclass WClientDRXEndPageBegin_V0:TWClientDRXEndPage_V0\n{\n\n};\n\n[Dynamic,  Description(\"WClientDRXEndPageEnd\") : amended, EventType(2), EventTypeName(\"WClientDRXEndPageEnd\") : amended]\nclass WClientDRXEndPageEnd_V0:TWClientDRXEndPage_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Render and Flush Event Instrumentation Structures – pseudo-C++\nDESCRIPTION: Represents WPF rendering instrumentation points such as 'PerfElementID_V0', with a field 'Id' of type 'sint64', and start/stop event classes for rendering and flush-page lifecycle. Each structure is associated with a specific GUID and may contribute to performance tracing. Dependencies include inheritance from rendering base types and decorated with event version metadata.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_74\n\nLANGUAGE: pseudo-C++\nCODE:\n```\nclass PerfElementID_V0:TWClientOnRender_V0\n{\n    sint64 Id;\n};\n\nclass WClientDRXFlushPageStart_V0:WClientDRXFlushPage_V0\n{\n\n};\n\nclass WClientDRXFlushPageStop_V0:WClientDRXFlushPage_V0\n{\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Base WPF DRX Stream Event Class in C++\nDESCRIPTION: Declares the base class TWClientDRXReadStream_V0 inheriting from Microsoft_Windows_WPF. It serves as the foundational event class for various DRX stream-related telemetry events, enabling structured inheritance and extension for more specific event types.\nSOURCE: https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/Tracing/native/wpf-etw.mof.txt#_snippet_27\n\nLANGUAGE: C++\nCODE:\n```\nclass TWClientDRXReadStream_V0:Microsoft_Windows_WPF\n{\n\n};\n```"
  }
]