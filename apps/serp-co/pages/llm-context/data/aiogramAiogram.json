[
  {
    "owner": "aiogram",
    "repo": "aiogram",
    "content": "TITLE: Custom Web Framework Integration with aiogram Webhook\nDESCRIPTION: A code snippet showing how to handle webhook updates in a custom web framework by manually parsing JSON and feeding the update to the aiogram dispatcher.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/webhook.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nupdate = Update.model_validate(await request.json(), context={\"bot\": bot})\nawait dispatcher.feed_update(update)\n```\n\n----------------------------------------\n\nTITLE: Registering Scene in Scene Registry with aiogram\nDESCRIPTION: Function that creates a dispatcher and registers the QuizScene in the SceneRegistry. This demonstrates how to make scenes available for use in your bot application.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_dispatcher():\n    \"\"\"Create a dispatcher\"\"\"\n    dp = Dispatcher()\n    dp.include_router(router)\n\n    # Register the scene\n    dp.scenes.add(QuizScene)\n\n    return dp\n```\n\n----------------------------------------\n\nTITLE: Handling Message Reactions in aiogram\nDESCRIPTION: Example of handling message reaction updates in a Telegram bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@router.message_reaction()\nasync def message_reaction_handler(message_reaction: types.MessageReactionUpdated) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Dispatcher with Message Handler in Aiogram\nDESCRIPTION: This snippet demonstrates how to initialize a Dispatcher instance and set up a basic message handler. The handler receives a message object and responds by sending the same text back to the user who sent the message.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dispatcher.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndp = Dispatcher()\n\n@dp.message()\nasync def message_handler(message: types.Message) -> None:\n    await SendMessage(chat_id=message.from_user.id, text=message.text)\n```\n\n----------------------------------------\n\nTITLE: Handling WebApp Data in aiohttp Request Handler (Python)\nDESCRIPTION: This code snippet demonstrates how to safely parse and validate WebApp initialization data from a POST request in an aiohttp request handler. It uses the safe_parse_webapp_init_data function from aiogram.utils.web_app to verify the data's authenticity.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/web_app.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.utils.web_app import safe_parse_webapp_init_data\nfrom aiohttp.web_request import Request\nfrom aiohttp.web_response import json_response\n\nasync def check_data_handler(request: Request):\n    bot: Bot = request.app[\"bot\"]\n\n    data = await request.post()  # application/x-www-form-urlencoded\n    try:\n        data = safe_parse_webapp_init_data(token=bot.token, init_data=data[\"_auth\"])\n    except ValueError:\n        return json_response({\"ok\": False, \"err\": \"Unauthorized\"}, status=401)\n    return json_response({\"ok\": True, \"data\": data.user.dict()})\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Flag Implementation in Aiogram\nDESCRIPTION: Demonstrates how to implement rate limiting using flags decorator with specific rate and key parameters.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import flags\n\n@flags.rate_limit(rate=2, key=\"something\")\nasync def my_handler(message: Message)\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Bot with Long-polling in Aiogram (Python)\nDESCRIPTION: This code snippet demonstrates how to create a basic echo bot using Aiogram's long-polling method. It includes setting up the bot, dispatcher, and message handler. The bot responds by echoing back any message it receives.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/long_polling.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../examples/echo_bot.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-based Middleware in aiogram\nDESCRIPTION: Demonstrates how to create a function-based middleware that manages database transactions for all updates. The middleware is applied to the outer scope of the update processing pipeline.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/middlewares.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@dispatcher.update.outer_middleware()\nasync def database_transaction_middleware(\n    handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],\n    event: Update,\n    data: Dict[str, Any]\n) -> Any:\n    async with database.transaction():\n        return await handler(event, data)\n```\n\n----------------------------------------\n\nTITLE: Complete Quiz Scene Example in Python with aiogram\nDESCRIPTION: The complete implementation of a quiz bot using aiogram's Scenes feature. This provides a full working example that can be used as a reference for implementing scene-based interactions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Quiz Example\n```\n\n----------------------------------------\n\nTITLE: Echo Bot Webhook Implementation with aiohttp and Nginx\nDESCRIPTION: A complete example of a Telegram echo bot using webhooks with aiogram and aiohttp behind an Nginx reverse proxy. The example demonstrates how to set up the webhook, configure the request handler, and process updates.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/webhook.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../examples/echo_bot_webhook.py\n```\n\n----------------------------------------\n\nTITLE: Using InlineKeyboardBuilder to Send a Message with Markup in Aiogram\nDESCRIPTION: This snippet demonstrates how to use the generated markup from InlineKeyboardBuilder to send a message with an inline keyboard.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait message.answer(\"Some text here\", reply_markup=builder.as_markup())\n```\n\n----------------------------------------\n\nTITLE: Initializing Router in aiogram\nDESCRIPTION: Example of importing and initializing a Router instance and registering a basic message handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import Router\nfrom aiogram.types import Message\n\nmy_router = Router(name=__name__)\n\n@my_router.message()\nasync def message_handler(message: Message) -> Any:\n    await message.answer('Hello from my router!')\n```\n\n----------------------------------------\n\nTITLE: Processing Unknown Bot Response Handler\nDESCRIPTION: Handles unknown responses to liking bots question\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def process_unknown_write_bots(message: types.Message):\n    \"\"\"If user not answer yes/no.\"\"\"\n    return await message.reply(\"I don't understand you :(\")\n```\n\n----------------------------------------\n\nTITLE: Handling Message Events in aiogram\nDESCRIPTION: Example of handling regular messages in a Telegram bot with a Router instance. Uses the message decorator to register an asynchronous handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@router.message()\nasync def message_handler(message: types.Message) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Installing Aiogram from PyPI\nDESCRIPTION: Installs or upgrades Aiogram package using pip package manager from PyPI repository.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/install.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U aiogram\n```\n\n----------------------------------------\n\nTITLE: Processing Name State Handler\nDESCRIPTION: Handles the name input state, stores the user's name, and transitions to the like_bots state\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def process_name(message: types.Message, state: FSMContext):\n    \"\"\"Process user name.\"\"\"\n    async with state.proxy() as data:\n        data['name'] = message.text\n\n    await Form.next()\n    await message.reply(\"Do you like to write bots?\")\n```\n\n----------------------------------------\n\nTITLE: Using Class-based Middleware with Router\nDESCRIPTION: Shows how to apply a class-based middleware to a router in aiogram, registering it specifically for message events.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/middlewares.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrouter = Router()\nrouter.message.middleware(CounterMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handlers in Aiogram\nDESCRIPTION: This code demonstrates how to set up error handlers in Aiogram at the router level. It shows two approaches: one for handling a specific exception type with parameter extraction, and another as a general catch-all error handler that logs critical errors.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/errors.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@router.error(ExceptionTypeFilter(MyCustomException), F.update.message.as_(\"message\"))\nasync def handle_my_custom_exception(event: ErrorEvent, message: Message):\n    # do something with error\n    await message.answer(\"Oops, something went wrong!\")\n\n\n@router.error()\nasync def error_handler(event: ErrorEvent):\n    logger.critical(\"Critical error caused by %s\", event.exception, exc_info=True)\n    # do something with error\n    ...\n```\n\n----------------------------------------\n\nTITLE: Handling Chosen Inline Results in aiogram\nDESCRIPTION: Example of handling chosen inline results in a Telegram bot using the chosen_inline_result decorator.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@router.chosen_inline_result()\nasync def chosen_inline_result_handler(chosen_inline_result: types.ChosenInlineResult) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Basic F Object Usage\nDESCRIPTION: Shows how F can be used to create simple attribute chains for filtering messages.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nF.photo  # lambda message: message.photo\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat Action Sender Parameters - Python\nDESCRIPTION: Shows how to customize the ChatActionSender configuration including initial sleep time, action type, and interval using flags.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/chat_action.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@router.message(...)\n@flags.chat_action(initial_sleep=2, action=\"upload_document\", interval=3)\nasync def my_handler(message: Message): ...\n```\n\n----------------------------------------\n\nTITLE: Serializing Python object to Telegram object using pydantic in aiogram\nDESCRIPTION: Demonstrates how to convert a Python dictionary to a Telegram Message object using pydantic's model_validate method. This is the basic approach for serializing data to Telegram objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/serialization.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmessage_data = { ... }  # Some message data as dict\nmessage = Message.model_validate(message_data)\n```\n\n----------------------------------------\n\nTITLE: Filtering Messages with MagicData Using F-Expressions\nDESCRIPTION: Example showing how to filter messages using MagicData filter to check if user ID matches admin ID from config.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@router.message(magic_data=F.event.from_user.id == F.config.admin_id)\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom API Server for aiogram Bot in Python\nDESCRIPTION: This code snippet shows how to initialize a Bot instance with a custom API server using AiohttpSession and TelegramAPIServer. It's useful for scenarios where you want to use a self-hosted API server instead of the default Telegram servers.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/custom_server.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsession = AiohttpSession(\n    api=TelegramAPIServer.from_base('http://localhost:8082')\n)\nbot = Bot(..., session=session)\n```\n\n----------------------------------------\n\nTITLE: I18n Configuration Setup\nDESCRIPTION: Code snippet showing how to initialize the I18n configuration with path, default locale, and domain settings.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ni18n = I18n(path=\"locales\", default_locale=\"en\", domain=\"messages\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Dispatcher with Custom Dependencies - Python\nDESCRIPTION: Demonstrates how to initialize a Dispatcher with custom named arguments and start polling with additional context data.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def main() -> None:\n    dp = Dispatcher(..., foo=42)\n    return await dp.start_polling(\n        bot, bar=\"Bazz\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Custom Middleware Data Type Implementation - Python\nDESCRIPTION: Example showing how to implement custom middleware data types with proper type hints using MiddlewareData as base class.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.dispatcher.middlewares.data import MiddlewareData\n\n\nclass MyMiddlewareData(MiddlewareData, total=False):\n    my_custom_value: int\n\n\nclass MyMessageMiddleware(BaseMiddleware):\n    async def __call__(\n        self,\n        handler: Callable[[Message, MyMiddlewareData], Awaitable[Any]],\n        event: Message,\n        data: MyMiddlewareData,\n    ) -> Any:\n        bot = data[\"bot\"]  # <-- IDE will show you that data has `bot` key and its type is `Bot`\n\n        data[\"my_custom_value\"] = bot.id * 42  # <-- IDE will show you that you can set `my_custom_value` key with int value and warn you if you try to set it with other type\n        return await handler(event, data)\n```\n\n----------------------------------------\n\nTITLE: Attaching Another Builder to InlineKeyboardBuilder in Aiogram\nDESCRIPTION: This snippet demonstrates how to attach another InlineKeyboardBuilder instance to the current one, allowing for combining multiple builders.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nanother_builder = InlineKeyboardBuilder(...)...  # Another builder with some buttons\nbuilder.attach(another_builder)\n```\n\n----------------------------------------\n\nTITLE: Initializing AiohttpSession with Bot in Python\nDESCRIPTION: Demonstrates how to create an AiohttpSession instance and use it with a Bot. This basic usage example shows the integration of AiohttpSession with aiogram's Bot class.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/aiohttp.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import Bot\nfrom aiogram.client.session.aiohttp import AiohttpSession\n\nsession = AiohttpSession()\nbot = Bot('42:token', session=session)\n```\n\n----------------------------------------\n\nTITLE: Handling Shipping Queries in aiogram\nDESCRIPTION: Example of handling shipping queries in a Telegram bot for payment features.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@router.shipping_query()\nasync def shipping_query_handler(shipping_query: types.ShippingQuery) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Handling Callback Queries with Filters\nDESCRIPTION: Example of handling callback queries using callback data filters and accessing callback data fields\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@router.callback_query(MyCallback.filter(F.foo == \"demo\"))\nasync def my_callback_foo(query: CallbackQuery, callback_data: MyCallback):\n    await query.answer(...)\n    ...\n    print(\"bar =\", callback_data.bar)\n```\n\n----------------------------------------\n\nTITLE: Complex Admin Actions with CallbackData and Enums\nDESCRIPTION: Advanced example showing how to use CallbackData with enums for admin actions and handling different callback types\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Action(str, Enum):\n    ban = \"ban\"\n    kick = \"kick\"\n    warn = \"warn\"\n\nclass AdminAction(CallbackData, prefix=\"adm\"):\n    action: Action\n    chat_id: int\n    user_id: int\n\n...\n# Inside handler\nbuilder = InlineKeyboardBuilder()\nfor action in Action:\n    builder.button(\n        text=action.value.title(),\n        callback_data=AdminAction(action=action, chat_id=chat_id, user_id=user_id),\n    )\nawait bot.send_message(\n    chat_id=admins_chat,\n    text=f\"What do you want to do with {html.quote(name)}\",\n    reply_markup=builder.as_markup(),\n)\n...\n\n@router.callback_query(AdminAction.filter(F.action == Action.ban))\nasync def ban_user(query: CallbackQuery, callback_data: AdminAction, bot: Bot):\n    await bot.ban_chat_member(\n        chat_id=callback_data.chat_id,\n        user_id=callback_data.user_id,\n        ...\n    )\n```\n\n----------------------------------------\n\nTITLE: Sending Media Group as Bot Method\nDESCRIPTION: Example of sending a media group using the direct bot method approach. Returns a list of Message objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_media_group.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: list[Message] = await bot.send_media_group(...)\n```\n\n----------------------------------------\n\nTITLE: Implementing ChatMemberHandler in Python for Aiogram\nDESCRIPTION: This snippet demonstrates how to create a custom handler for chat member updates using the ChatMemberHandler class. It shows the usage of router decorators for both chat_member and my_chat_member events.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/chat_member.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.handlers import ChatMemberHandler\n\n...\n\n@router.chat_member()\n@router.my_chat_member()\nclass MyHandler(ChatMemberHandler):\n    async def handle(self) -> Any: ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Message Formatting in Python using Aiogram\nDESCRIPTION: Illustrates an advanced scenario of message formatting using various Aiogram formatting functions. This example creates a complex message structure with marked sections, key-value pairs, and hashtags.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/formatting.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncontent = as_list(\n    as_marked_section(\n        Bold(\"Success:\"),\n        \"Test 1\",\n        \"Test 3\",\n        \"Test 4\",\n        marker=\"✅ \",\n    ),\n    as_marked_section(\n        Bold(\"Failed:\"),\n        \"Test 2\",\n        marker=\"❌ \",\n    ),\n    as_marked_section(\n        Bold(\"Summary:\"),\n        as_key_value(\"Total\", 4),\n        as_key_value(\"Success\", 3),\n        as_key_value(\"Failed\", 1),\n        marker=\"  \",\n    ),\n    HashTag(\"#test\"),\n    sep=\"\\n\\n\",\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Dictionary-style Dependencies - Python\nDESCRIPTION: Example of setting dependencies on a Dispatcher instance using dictionary-style assignment.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndp = Dispatcher(...)\ndp[\"eggs\"] = Spam()\n```\n\n----------------------------------------\n\nTITLE: Including Routers in a Dispatcher in Aiogram\nDESCRIPTION: This example shows how to create a Dispatcher instance and include a Router in it. This pattern is useful for organizing handlers into separate modules or logical groups.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dispatcher.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndp = Dispatcher()\nrouter1 = Router()\ndp.include_router(router1)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Routers - Module 1\nDESCRIPTION: Example of creating a router in one module that can be imported and nested in another module's router.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nrouter2 = Router()\n\n@router2.message()\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing ErrorHandler Class in Python for Aiogram\nDESCRIPTION: This snippet demonstrates how to create a custom error handler using the ErrorHandler class from Aiogram. It shows how to log unexpected exceptions with their names and messages.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/error.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.handlers import ErrorHandler\n\n...\n\n@router.errors()\nclass MyHandler(ErrorHandler):\n    async def handle(self) -> Any:\n        log.exception(\n            \"Cause unexpected exception %s: %s\",\n            self.exception_name,\n            self.exception_message\n        )\n```\n\n----------------------------------------\n\nTITLE: Starting Conversation Handler\nDESCRIPTION: Handles the /start command and initiates the conversation by setting the state to Form.name\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def command_start(message: types.Message):\n    \"\"\"This handler will be called when user sends `/start` command.\"\"\"\n    await Form.name.set()\n    await message.reply(\"Hi there! What's your name?\")\n```\n\n----------------------------------------\n\nTITLE: Exit Handler for Quiz Scene in Python with aiogram\nDESCRIPTION: Handler that displays quiz results when a user exits the scene. This shows how to calculate and display scores and implements the on_exit scene hook.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@on.message.exit()\nasync def on_exit(self, message: Message):\n    \"\"\"Exit from the scene\"\"\"\n    # Get user ID\n    user_id = message.from_user.id\n    \n    # Calculate score\n    score = 0\n    for question_index, answer_index in self.answers[user_id].items():\n        if answer_index == QUESTIONS[question_index].correct_answer:\n            score += 1\n    \n    # Calculate percentage\n    percentage = score / len(QUESTIONS) * 100\n    \n    # Send results\n    await message.answer(\n        f\"Quiz completed!\\n\\n\"\n        f\"Your score: {score}/{len(QUESTIONS)} ({percentage:.1f}%)\\n\\n\"\n        f\"Want to try again? Use /quiz command.\"\n    )\n    \n    # Clear answers\n    del self.answers[user_id]\n```\n\n----------------------------------------\n\nTITLE: Implementing Flag Decorator in Python Aiogram\nDESCRIPTION: Example of using chat_action flag decorator to mark a message handler. Shows basic flag implementation using the @flags decorator syntax.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import flags\n\n@flags.chat_action\nasync def my_handler(message: Message)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Text Filter in Python\nDESCRIPTION: Demonstrates how to create a custom filter that checks for specific text in messages. The example shows a synchronous filter implementation that checks if text is in uppercase.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.filters import BaseFilter\nfrom aiogram.types import Message\n\n\nclass MyFilter(BaseFilter):  # filters should be inherited from aiogram.filters.BaseFilter\n    key = 'text'  # This is just a field to store some data\n\n    def __init__(self, text: str) -> None:  # When creating the filter, we save the passed values\n        self.text = text\n\n    async def __call__(self, message: Message) -> bool:  # The __call__ method will be called when checking the filter\n        # This is a very complicated algorithm\n        return message.text and message.text.upper() == self.text.upper()\n```\n\n----------------------------------------\n\nTITLE: Creating CallbackData Class in Python\nDESCRIPTION: Shows how to create a basic callback data class with string and integer fields using the CallbackData base class\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCallback(CallbackData, prefix=\"my\"):\n    foo: str\n    bar: int\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Handler with aiogram in Python\nDESCRIPTION: Example showing how to create a custom message handler class by extending the MessageHandler base class. This handler responds to messages with a text response sent to the same chat ID from which the message was received.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/message.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.handlers import MessageHandler\n\n...\n\n@router.message()\nclass MyHandler(MessageHandler):\n    async def handle(self) -> Any:\n        return SendMessage(chat_id=self.chat.id, text=\"PASS\")\n```\n\n----------------------------------------\n\nTITLE: Unknown Message Handler for Quiz Scene in Python with aiogram\nDESCRIPTION: Handler that responds to any unrecognized messages within the quiz scene, prompting the user to use the provided buttons. This demonstrates handling unexpected inputs in a scene.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@on.message()\nasync def unknown_message(self, message: Message, state: FSMContext):\n    \"\"\"Handle unknown message\"\"\"\n    # Get current question index\n    state_data = await state.get_data()\n    current_question = state_data.get(\"current_question\", 0)\n    \n    # Get question\n    question = QUESTIONS[current_question]\n    \n    # Create a keyboard with answer options\n    builder = InlineKeyboardBuilder()\n    for i, option in enumerate(question.options):\n        builder.button(text=option, callback_data=f\"answer:{i}\")\n    \n    # Add navigation buttons\n    builder.button(text=\"⬅️ Back\", callback_data=\"back\")\n    builder.button(text=\"❌ Exit\", callback_data=\"exit\")\n    \n    # Adjust layout: options in rows, navigation buttons in one row\n    builder.adjust(1, repeat=True)\n    \n    # Send question to the user\n    await message.answer(\n        f\"Please use the buttons below to answer the question.\\n\\n\"\n        f\"Question {current_question + 1}/{len(QUESTIONS)}:\\n\\n{question.text}\",\n        reply_markup=builder.as_markup(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Implementation in Python\nDESCRIPTION: Example showing how to implement basic message translation using gettext in an aiogram handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import html\nfrom aiogram.utils.i18n import gettext as _\n\nasync def my_handler(message: Message) -> None:\n    await message.answer(\n        _(\"Hello, {name}!\").format(\n            name=html.quote(message.from_user.full_name)\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Handling User Leave and Join Events with aiogram Filters\nDESCRIPTION: This code snippet demonstrates how to use aiogram filters to handle user leave and join events in a chat. It uses the ChatMemberUpdatedFilter with predefined status groups IS_MEMBER and IS_NOT_MEMBER to detect when a user leaves or joins the chat.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/chat_member_updated.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.filters import IS_MEMBER, IS_NOT_MEMBER\n\n@router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))\nasync def on_user_leave(event: ChatMemberUpdated): ...\n\n@router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))\nasync def on_user_join(event: ChatMemberUpdated): ...\n```\n\n----------------------------------------\n\nTITLE: Using EditUserStarSubscription as a Reply in a Webhook Handler in Python\nDESCRIPTION: Demonstrates how to use the EditUserStarSubscription class as a direct return value in a webhook handler. This pattern is useful for immediate responses in webhook-based bots.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_user_star_subscription.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn EditUserStarSubscription(...)\n```\n\n----------------------------------------\n\nTITLE: Using FSInputFile for Local File Uploads in Python\nDESCRIPTION: Demonstrates how to create FSInputFile instances for uploading local files, with optional custom filename specification\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/upload_file.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncat = FSInputFile(\"cat.png\")\nagenda = FSInputFile(\"my-document.pdf\", filename=\"agenda-2019-11-19.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Generating Inline Keyboard with Dynamic Buttons in Python using Aiogram\nDESCRIPTION: This snippet demonstrates how to create an inline keyboard with 10 buttons using InlineKeyboardBuilder. It iterates through a range to generate buttons with dynamic text and callback data.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbuilder = InlineKeyboardBuilder()\n\nfor index in range(1, 11):\n    builder.button(text=f\"Set {index}\", callback_data=f\"set:{index}\")\n```\n\n----------------------------------------\n\nTITLE: Registering ChatActionMiddleware - Python\nDESCRIPTION: Shows how to register the ChatActionMiddleware for message events in an aiogram router or dispatcher.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/chat_action.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n<router or dispatcher>.message.middleware(ChatActionMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Creating Encoded Deep Link in Aiogram\nDESCRIPTION: Shows how to create an encoded start link by setting the encode parameter to True. This encodes the payload as base64, which can be useful for hiding the actual content of the parameter or passing complex data.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/deep_linking.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.utils.deep_linking import create_start_link\n\nlink = await create_start_link(bot, 'foo', encode=True)\n# result: 'https://t.me/MyBot?start=Zm9v'\n```\n\n----------------------------------------\n\nTITLE: Sending Poll as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the send_poll method directly on a bot object. It returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_poll.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_poll(...)\n```\n\n----------------------------------------\n\nTITLE: Capturing Filter Results as Handler Arguments\nDESCRIPTION: Shows how to use the as_ method to capture filter results as handler arguments in aiogram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import F\n\n...\n\n@router.message(F.text.regexp(r\"^(\\d+)$\").as_(\"digits\"))\nasync def any_digits_handler(message: Message, digits: Match[str]):\n    await message.answer(html.quote(str(digits)))\n```\n\n----------------------------------------\n\nTITLE: Equivalent HTML Formatting in Python for Telegram Bot\nDESCRIPTION: Shows the equivalent HTML formatting method for sending a formatted message in a Telegram bot. This example demonstrates the manual approach without using Aiogram's formatting tools.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/formatting.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait message.answer(\n    text=f\"Hello, <b>{html.quote(message.from_user.full_name)}</b>!\",\n    parse_mode=ParseMode.HTML\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Animation Using SendAnimation Object\nDESCRIPTION: Object-oriented approach to send an animation using the SendAnimation class with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_animation.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendAnimation(...))\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Command Variants in aiogram\nDESCRIPTION: Example of handling multiple command variants with the Command filter. This matches both the exact 'item' command and commands matching the pattern 'item_<number>'.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/command.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCommand(\"item\", re.compile(r\"item_(\\d+)\"))\n```\n\n----------------------------------------\n\nTITLE: String Manipulations with Magic Filters\nDESCRIPTION: Demonstrates string case conversion and length checks with magic filters.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nF.text.lower() == 'test'  # lambda message: message.text.lower() == 'test'\nF.text.upper().in_({'FOO', 'BAR'})  # lambda message: message.text.upper() in {'FOO', 'BAR'}\nF.text.len() == 5  # lambda message: len(message.text) == 5\n```\n\n----------------------------------------\n\nTITLE: Implementing PreCheckoutQuery Handler in Python using aiogram\nDESCRIPTION: Example showing how to create a pre-checkout query handler by subclassing PreCheckoutQueryHandler. The handler includes a handle method that processes pre-checkout queries from Telegram payments.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/pre_checkout_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.handlers import PreCheckoutQueryHandler\n\n...\n\n@router.pre_checkout_query()\nclass MyHandler(PreCheckoutQueryHandler):\n    async def handle(self) -> Any: ...\n```\n\n----------------------------------------\n\nTITLE: Using SendDocument as Object with Specific Bot in Python\nDESCRIPTION: This example shows how to use the SendDocument method as an object with a specific bot instance. It requires importing SendDocument from aiogram.methods.send_document or aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_document.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendDocument(...))\n```\n\n----------------------------------------\n\nTITLE: Handling Callback Queries in aiogram\nDESCRIPTION: Example of handling callback queries (e.g., inline keyboard button presses) in a Telegram bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@router.callback_query()\nasync def callback_query_handler(callback_query: types.CallbackQuery) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Implementing a Poll Handler with aiogram\nDESCRIPTION: A basic example showing how to implement a poll handler in aiogram by subclassing PollHandler. The example demonstrates registering the handler with a router and implementing the required handle method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/poll.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.handlers import PollHandler\n\n...\n\n@router.poll()\nclass MyHandler(PollHandler):\n    async def handle(self) -> Any: ...\n```\n\n----------------------------------------\n\nTITLE: Using BufferedInputFile for Memory Buffer Uploads in Python\nDESCRIPTION: Demonstrates creating a BufferedInputFile instance for uploading text content from a memory buffer\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/upload_file.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntext_file = BufferedInputFile(b\"Hello, world!\", filename=\"file.txt\")\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization (Version 3.x)\nDESCRIPTION: Handler demonstrating how to convert a Message object to JSON in aiogram 3.x using the new serialization utility\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(message: Message) -> None:\n    message_json = json.dumps(deserialize_telegram_object_to_python(message))\n    print(message_json)\n    # {\"id\": 42, ...}\n    print(type(message_json))\n    # <class 'str'>\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Flag Implementation in Aiogram\nDESCRIPTION: Implementation of a Command filter class that updates handler flags by appending commands to the flags dictionary.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Command(Filter):\n    ...\n\n    def update_handler_flags(self, flags: Dict[str, Any]) -> None:\n        commands = flags.setdefault(\"commands\", [])\n        commands.append(self)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Keyboard Layout in Aiogram's InlineKeyboardBuilder\nDESCRIPTION: This code shows how to adjust the layout of buttons in an inline keyboard. It sets the first row to have 3 buttons and subsequent rows to have 2 buttons each.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbuilder.adjust(3, 2)\n```\n\n----------------------------------------\n\nTITLE: Using SendPhoto in Webhook Handler\nDESCRIPTION: Implementation of SendPhoto method as a direct return in a webhook handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_photo.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendPhoto(...)\n```\n\n----------------------------------------\n\nTITLE: Plural Forms Translation Implementation\nDESCRIPTION: Example showing how to handle plural forms in translations using gettext with singular and plural variants.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import html\nfrom aiogram.utils.i18n import gettext as _\n\nasync def my_handler(message: Message) -> None:\n    try:\n        n = int(message.text)\n    except ValueError:\n        n = 1\n    await message.answer(\n        _(\"You ordered {n} piece.\", \"You ordered {n} pieces.\",n).format(n)\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing ShippingQueryHandler in Python using aiogram\nDESCRIPTION: Demonstrates basic implementation of a shipping query handler by subclassing ShippingQueryHandler. The handler includes a handle method that processes shipping queries and returns Any type.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/shipping_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.handlers import ShippingQueryHandler\n\n...\n\n@router.shipping_query()\nclass MyHandler(ShippingQueryHandler):\n    async def handle(self) -> Any: ...\n```\n\n----------------------------------------\n\nTITLE: Using ForwardMessages as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the forward_messages method directly on a bot object. It returns a list of MessageId objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_messages.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: list[MessageId] = await bot.forward_messages(...)\n```\n\n----------------------------------------\n\nTITLE: Using BotCommand Object as Command Reference in aiogram\nDESCRIPTION: Example of using a BotCommand object with the Command filter. This approach allows specifying both the command and its description.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/command.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCommand(BotCommand(command=\"command\", description=\"My awesome command\"))\n```\n\n----------------------------------------\n\nTITLE: Using ChatActionSender with Context Manager - Python\nDESCRIPTION: Example showing how to use ChatActionSender.typing() as a context manager to show typing status while performing long operations.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/chat_action.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):\n    # Do something...\n    # Perform some long calculations\n    await message.answer(result)\n```\n\n----------------------------------------\n\nTITLE: Scene Entry Point Handler in Python with aiogram\nDESCRIPTION: Handler that is triggered when a user enters the quiz scene. It initializes the quiz state and sends the first question to the user. This demonstrates the on_enter hook pattern for scenes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@on.message.enter()\nasync def on_enter(self, message: Message):\n    \"\"\"Entry point for the scene\"\"\"\n    # Get user ID\n    user_id = message.from_user.id\n    \n    # Initialize quiz state\n    current_question = 0\n    self.answers[user_id] = {}\n    \n    # Get first question\n    question = QUESTIONS[current_question]\n    \n    # Create a keyboard with answer options\n    builder = InlineKeyboardBuilder()\n    for i, option in enumerate(question.options):\n        builder.button(text=option, callback_data=f\"answer:{i}\")\n    \n    # Add navigation buttons\n    builder.button(text=\"⬅️ Back\", callback_data=\"back\")\n    builder.button(text=\"❌ Exit\", callback_data=\"exit\")\n    \n    # Adjust layout: options in rows, navigation buttons in one row\n    builder.adjust(1, repeat=True)\n    \n    # Send question to the user\n    await message.answer(\n        f\"Question {current_question + 1}/{len(QUESTIONS)}:\\n\\n{question.text}\",\n        reply_markup=builder.as_markup(),\n    )\n    \n    # Save current question in the wizard state\n    await self.wizard.update_data(current_question=current_question)\n    \n    # If all questions are answered, exit the scene\n    if current_question >= len(QUESTIONS):\n        await self.wizard.exit()\n```\n\n----------------------------------------\n\nTITLE: Sending Media Group as Webhook Response\nDESCRIPTION: Example of returning a SendMediaGroup object directly in a webhook handler for response processing.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_media_group.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendMediaGroup(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Media Groups with aiogram\nDESCRIPTION: This snippet shows how to send a media group using the bot.send_media_group method with the constructed media group. It demonstrates passing the built media group as the media parameter to the send_media_group method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/media_group.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait bot.send_media_group(chat_id=chat_id, media=media_group.build())\n```\n\n----------------------------------------\n\nTITLE: Processing Raw Telegram Updates in Aiogram\nDESCRIPTION: This code shows how to handle raw update dictionaries from Telegram. The feed_raw_update method is used when receiving raw JSON/dictionary data instead of structured Update objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dispatcher.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import Bot, Dispatcher\n\nasync def update_handler(raw_update: dict[str, Any], bot: Bot, dispatcher: Dispatcher):\n  result = await dp.feed_raw_update(bot, raw_update)\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageLiveLocation as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the EditMessageLiveLocation method as a reply in a webhook handler. It directly returns the method call.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_live_location.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn EditMessageLiveLocation(...)\n```\n\n----------------------------------------\n\nTITLE: String Start/End Checks with Magic Filters\nDESCRIPTION: Shows how to use startswith and endswith methods for text attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nF.text.startswith('foo')  # lambda message: message.text.startswith('foo')\nF.text.endswith('bar')  # lambda message: message.text.startswith('bar')\n```\n\n----------------------------------------\n\nTITLE: Installing aiogram with i18n Support\nDESCRIPTION: Shows how to install aiogram with optional i18n dependencies for translation functionality\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install aiogram[i18n]\n```\n\n----------------------------------------\n\nTITLE: Using forwardMessage as a bot method in Python\nDESCRIPTION: Example of using the forward_message method directly from a bot instance. This method forwards a message from one chat to another and returns the forwarded Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.forward_message(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages as Bot Method in Python\nDESCRIPTION: Demonstrates how to use the send_message method directly on a bot instance. This is the most straightforward way to send a message using aiogram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_message(...)\n```\n\n----------------------------------------\n\nTITLE: Using GetChat as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the getChat method directly on a bot object. It returns a ChatFullInfo object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatFullInfo = await bot.get_chat(...)\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware Using Register Method in Python\nDESCRIPTION: Demonstrates how to register a client session middleware using the register method. The example shows registering RequestLogging middleware while ignoring GetUpdates method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/middleware.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbot.session.middleware(RequestLogging(ignore_methods=[GetUpdates]))\n```\n\n----------------------------------------\n\nTITLE: Back Button Handler for Quiz Scene in Python with aiogram\nDESCRIPTION: Handler that allows users to return to the previous question when they click the back button. This shows how to implement navigation between steps in a scene.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@on.callback_query(F.data == \"back\")\nasync def back(self, callback_query: CallbackQuery, state: FSMContext):\n    \"\"\"Go back to the previous question\"\"\"\n    # Get current question index\n    state_data = await state.get_data()\n    current_question = state_data.get(\"current_question\", 0)\n    \n    # Check if we can go back\n    if current_question <= 0:\n        await callback_query.answer(\"This is the first question!\")\n        return\n    \n    # Move to the previous question\n    current_question -= 1\n    \n    # Get previous question\n    question = QUESTIONS[current_question]\n    \n    # Create a keyboard with answer options\n    builder = InlineKeyboardBuilder()\n    for i, option in enumerate(question.options):\n        builder.button(text=option, callback_data=f\"answer:{i}\")\n    \n    # Add navigation buttons\n    builder.button(text=\"⬅️ Back\", callback_data=\"back\")\n    builder.button(text=\"❌ Exit\", callback_data=\"exit\")\n    \n    # Adjust layout: options in rows, navigation buttons in one row\n    builder.adjust(1, repeat=True)\n    \n    # Send question to the user\n    await callback_query.message.edit_text(\n        f\"Question {current_question + 1}/{len(QUESTIONS)}:\\n\\n{question.text}\",\n        reply_markup=builder.as_markup(),\n    )\n    \n    # Save current question in the wizard state\n    await self.wizard.update_data(current_question=current_question)\n```\n\n----------------------------------------\n\nTITLE: Basic Message Formatting in Python using Aiogram\nDESCRIPTION: Demonstrates how to construct and send a formatted message using Aiogram's Text and Bold elements. This approach simplifies message formatting compared to using HTML markup directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/formatting.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncontent = Text(\"Hello, \", Bold(message.from_user.full_name), \"!\")\nawait message.answer(**content.as_kwargs())\n```\n\n----------------------------------------\n\nTITLE: Membership Tests with Magic Filters\nDESCRIPTION: Shows how to check if a value is in a collection using either the in_ method or the matmul operator.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nF.from_user.id.in_({42, 1000, 123123})  # lambda query: query.from_user.id in {42, 1000, 123123}\nF.data.in_({'foo', 'bar', 'baz'})  # lambda query: query.data in {'foo', 'bar', 'baz'}\n```\n\n----------------------------------------\n\nTITLE: Importing FSInputFile for File System Uploads in Python\nDESCRIPTION: Shows how to import the FSInputFile class for uploading files from the local file system\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/upload_file.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.types import FSInputFile\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-based Middleware in aiogram\nDESCRIPTION: Demonstrates how to create a class-based middleware that counts events. The middleware inherits from BaseMiddleware and implements the __call__ method to process events, adding a counter to the data dictionary.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/middlewares.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import BaseMiddleware\nfrom aiogram.types import Message\n\n\nclass CounterMiddleware(BaseMiddleware):\n    def __init__(self) -> None:\n        self.counter = 0\n\n    async def __call__(\n        self,\n        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],\n        event: Message,\n        data: Dict[str, Any]\n    ) -> Any:\n        self.counter += 1\n        data['counter'] = self.counter\n        return await handler(event, data)\n```\n\n----------------------------------------\n\nTITLE: Combining Filters with AND/OR Operations\nDESCRIPTION: Shows how to combine multiple filter conditions using bitwise AND and OR operators.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n(F.from_user.id == 42) & (F.text == 'admin')\nF.text.startswith('a') | F.text.endswith('b')\n(F.from_user.id.in_({42, 777, 911})) & (F.text.startswith('!') | F.text.startswith('/')) & F.text.contains('ban')\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Callback Answer Configuration Techniques\nDESCRIPTION: Advanced example showing how to combine global middleware configuration with handler-specific flags and dynamic modifications for flexible callback responses.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/callback_answer.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.callback_query.middleware(CallbackAnswerMiddleware(pre=True, text=\"🤔\"))\n\n@router.callback_query(<filters>)\n@flags.callback_answer(pre=False, cache_time=30)\nasync def my_handler(query: CallbackQuery):\n    ...\n    if <everything is ok>:\n        callback_answer.text = \"All is ok\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Conversation Summary Handler\nDESCRIPTION: Shows a summary of all collected information from the conversation\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def show_summary(message: types.Message, state: FSMContext):\n    async with state.proxy() as data:\n        await message.reply(\n            md.text(\n                md.text('Name:', data['name']),\n                md.text('Do you like to write bots?', data['like_write_bots']),\n                md.text('Programming language:', data['language']),\n                sep='\\n',\n            )\n        )\n```\n\n----------------------------------------\n\nTITLE: Downloading File to BytesIO - Python Aiogram\nDESCRIPTION: Demonstrates downloading a file to a default BytesIO object when no destination is specified.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult: io.BytesIO = await bot.download_file(file_path)\n```\n\n----------------------------------------\n\nTITLE: Using MagicData Filter with aiogram\nDESCRIPTION: Example of using the MagicData filter to check if the user ID matches an admin ID in configuration. This requires the config to be passed from middleware.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_data.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMagicData(F.event.from_user.id == F.config.admin_id)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Handler with BaseHandler in Python\nDESCRIPTION: Demonstrates how to create a custom handler class that inherits from BaseHandler. The example shows overriding the handle method to respond to a message event.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/base.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyHandler(BaseHandler[Message]):\n    async def handle(self) -> Any:\n         await self.event.answer(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Returning SendPoll as Webhook Reply in Python Handler\nDESCRIPTION: This snippet illustrates how to use SendPoll as a reply in a webhook handler. It directly returns the SendPoll object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_poll.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendPoll(...)\n```\n\n----------------------------------------\n\nTITLE: Contains Operation with Magic Filters\nDESCRIPTION: Demonstrates how to check if a string contains a substring.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nF.text.contains('foo')  # lambda message: 'foo' in message.text\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in aiogram Router\nDESCRIPTION: Example of handling errors that occur in other handlers using the errors decorator.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@router.errors()\nasync def error_handler(exception: types.ErrorEvent) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Sending Audio as Webhook Response\nDESCRIPTION: Using SendAudio as a direct return value in a webhook handler to send audio messages.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_audio.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendAudio(...)\n```\n\n----------------------------------------\n\nTITLE: Filtering Single Command in aiogram\nDESCRIPTION: Example of filtering a single command variant in aiogram using the Command filter. This is used to handle the 'start' command from users.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/command.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCommand(\"start\")\n```\n\n----------------------------------------\n\nTITLE: Sending Video Using Bot Method\nDESCRIPTION: Direct method to send a video using the bot instance. Returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_video(...)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using MediaGroupBuilder in Python\nDESCRIPTION: This snippet demonstrates how to create a MediaGroupBuilder object with a caption, add different types of media to it, and prepare it for sending. It shows both dedicated methods and the dynamic add method for adding media with different types.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/media_group.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmedia_group = MediaGroupBuilder(caption=\"Media group caption\")\n\n# Add photo\nmedia_group.add_photo(media=\"https://picsum.photos/200/300\")\n# Dynamically add photo with known type without using separate method\nmedia_group.add(type=\"photo\", media=\"https://picsum.photos/200/300\")\n# ... or video\nmedia_group.add(type=\"video\", media=FSInputFile(\"media/video.mp4\"))\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageText as a reply in a webhook handler in Python\nDESCRIPTION: Returning an EditMessageText object directly from a handler to respond to a webhook. This approach is used when setting up handlers for webhook responses.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_text.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn EditMessageText(...)\n```\n\n----------------------------------------\n\nTITLE: Decoding Deep Link Payload in Aiogram\nDESCRIPTION: Demonstrates how to handle and decode a deep link payload in a message handler. This uses the CommandStart filter with deep_link=True to detect start commands with parameters, and the decode_payload function to convert the encoded parameter back to its original form.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/deep_linking.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.utils.deep_linking import decode_payload\nfrom aiogram.filters import CommandStart, CommandObject\nfrom aiogram.types import Message\n\n@router.message(CommandStart(deep_link=True))\nasync def handler(message: Message, command: CommandObject):\n    args = command.args\n    payload = decode_payload(args)\n    await message.answer(f\"Your payload: {payload}\")\n```\n\n----------------------------------------\n\nTITLE: Getting Bot Commands Using Method Object\nDESCRIPTION: Shows how to retrieve bot commands using the GetMyCommands class method object with a specific bot instance. Returns a list of BotCommand objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_commands.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: list[BotCommand] = await bot(GetMyCommands(...))\n```\n\n----------------------------------------\n\nTITLE: Using URLInputFile for Remote File Uploads in Python\nDESCRIPTION: Demonstrates creating a URLInputFile instance for uploading an image from a URL with custom filename\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/upload_file.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimage = URLInputFile(\n    \"https://www.python.org/static/community_logos/python-powered-h-140x182.png\",\n    filename=\"python-logo.png\"\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Inline Queries in aiogram\nDESCRIPTION: Example of handling inline queries in a Telegram bot using the inline_query decorator.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@router.inline_query()\nasync def inline_query_handler(inline_query: types.InlineQuery) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Handling Commands Intended for Other Bots in aiogram\nDESCRIPTION: Using the Command filter with ignore_mention parameter to handle commands in public chats that might be intended for other bots.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/command.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCommand(\"command\", ignore_mention=True)\n```\n\n----------------------------------------\n\nTITLE: Sending Sticker as Object Method in Python\nDESCRIPTION: This snippet shows how to use the SendSticker method as an object. It requires importing the SendSticker class from aiogram.methods.send_sticker or its alias.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_sticker.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendSticker(...))\n```\n\n----------------------------------------\n\nTITLE: Setting Up CallbackAnswerMiddleware in Python\nDESCRIPTION: Basic implementation of the CallbackAnswerMiddleware to automatically answer all callback queries after handler processing.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/callback_answer.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.callback_query.middleware(CallbackAnswerMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Handling Chat Member Updates in aiogram\nDESCRIPTION: Example of handling updates to other members' status in chats.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@router.chat_member()\nasync def chat_member_handler(chat_member: types.ChatMemberUpdated) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Using ReadBusinessMessage with Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the ReadBusinessMessage method with a specific bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/read_business_message.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(ReadBusinessMessage(...))\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Parse Mode with Markdown in aiogram\nDESCRIPTION: This code demonstrates how to override the default parse mode by explicitly providing a different parse mode (MARKDOWN_V2) in the method call, which takes precedence over the default configuration.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/defaults.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait bot.send_message(chat_id, text, parse_mode=ParseMode.MARKDOWN_V2)\n```\n\n----------------------------------------\n\nTITLE: Initializing Bot with Default HTML Parse Mode in aiogram\nDESCRIPTION: This snippet demonstrates how to initialize a Bot instance with default HTML parse mode using DefaultBotProperties. This configuration applies the HTML parse mode to all messages sent by the bot, eliminating the need to specify it in each request.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/defaults.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbot = Bot(\n    token=...,\n    default=DefaultBotProperties(\n        parse_mode=ParseMode.HTML,\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Returning SendVenue as Webhook Reply in Python Handler\nDESCRIPTION: This snippet demonstrates how to use SendVenue as a reply in a webhook handler. It directly returns the SendVenue object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_venue.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendVenue(...)\n```\n\n----------------------------------------\n\nTITLE: Practical Usage Examples in aiogram\nDESCRIPTION: Shows common usage patterns for magic filters in aiogram route handlers.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@router.message(F.text == 'hello')\n@router.inline_query(F.data == 'button:1')\n@router.message(F.text.startswith('foo'))\n@router.message(F.content_type.in_({'text', 'sticker'}))\n@router.message(F.text.regexp(r'\\d+'))\n\n...\n\n# Many others cases when you will need to check any of available event attribute\n```\n\n----------------------------------------\n\nTITLE: Using getChatMember as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the getChatMember method directly as a bot method. It returns a ResultChatMemberUnion object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_member.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ResultChatMemberUnion = await bot.get_chat_member(...)\n```\n\n----------------------------------------\n\nTITLE: Using PostStory in Webhook Handler\nDESCRIPTION: Demonstrates how to return a PostStory object directly in a webhook handler, useful for responding to incoming updates with a story post.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/post_story.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn PostStory(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Deep Link in Aiogram\nDESCRIPTION: Demonstrates how to create a basic start link for Telegram bot deep linking using the create_start_link utility function. This generates a URL that, when clicked, will start the bot with the specified payload parameter.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/deep_linking.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.utils.deep_linking import create_start_link\n\nlink = await create_start_link(bot, 'foo')\n\n# result: 'https://t.me/MyBot?start=foo'\n```\n\n----------------------------------------\n\nTITLE: Sending Media Group Using Method Object\nDESCRIPTION: Example of sending a media group by creating a SendMediaGroup object and passing it to the bot instance. Returns a list of Message objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_media_group.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: list[Message] = await bot(SendMediaGroup(...))\n```\n\n----------------------------------------\n\nTITLE: Exit Button Handler for Quiz Scene in Python with aiogram\nDESCRIPTION: Handler that exits the quiz when the user clicks the exit button. This demonstrates how to implement an early exit from a scene via a callback query.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@on.callback_query(F.data == \"exit\")\nasync def exit(self, callback_query: CallbackQuery):\n    \"\"\"Exit from the quiz\"\"\"\n    await callback_query.message.edit_text(\"Exiting the quiz...\")\n    await self.wizard.exit()\n```\n\n----------------------------------------\n\nTITLE: Answer Handler for Quiz Scene in Python with aiogram\nDESCRIPTION: Handler that processes the user's answer to a quiz question, saves it, and advances to the next question. This shows how to handle callback queries within a scene.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@on.callback_query(F.data.startswith(\"answer:\"))\nasync def answer(self, callback_query: CallbackQuery, state: FSMContext):\n    \"\"\"Process answer\"\"\"\n    # Get user ID\n    user_id = callback_query.from_user.id\n    \n    # Get current question index\n    state_data = await state.get_data()\n    current_question = state_data.get(\"current_question\", 0)\n    \n    # Get answer index\n    answer_index = int(callback_query.data.split(\":\")[1])\n    \n    # Save answer\n    self.answers[user_id][current_question] = answer_index\n    \n    # Move to the next question\n    current_question += 1\n    \n    # Check if all questions are answered\n    if current_question >= len(QUESTIONS):\n        await callback_query.message.edit_text(\n            \"That's all! Let's see your results...\"\n        )\n        await self.wizard.exit()\n        return\n    \n    # Get next question\n    question = QUESTIONS[current_question]\n    \n    # Create a keyboard with answer options\n    builder = InlineKeyboardBuilder()\n    for i, option in enumerate(question.options):\n        builder.button(text=option, callback_data=f\"answer:{i}\")\n    \n    # Add navigation buttons\n    builder.button(text=\"⬅️ Back\", callback_data=\"back\")\n    builder.button(text=\"❌ Exit\", callback_data=\"exit\")\n    \n    # Adjust layout: options in rows, navigation buttons in one row\n    builder.adjust(1, repeat=True)\n    \n    # Send question to the user\n    await callback_query.message.edit_text(\n        f\"Question {current_question + 1}/{len(QUESTIONS)}:\\n\\n{question.text}\",\n        reply_markup=builder.as_markup(),\n    )\n    \n    # Save current question in the wizard state\n    await self.wizard.update_data(current_question=current_question)\n```\n\n----------------------------------------\n\nTITLE: Registering Start Command Handler in Python with aiogram\nDESCRIPTION: Command handler that initiates the quiz game when a user sends the /quiz command to the bot. This snippet demonstrates how to start a scene from a command handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@router.message(Command(\"quiz\"))\nasync def cmd_quiz(message: Message, scenes: ScenesManager):\n    await scenes.enter(QuizScene)\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Black and isort\nDESCRIPTION: Formats the code according to Black code style and sorts imports using isort\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nblack aiogram tests examples\nisort aiogram tests examples\n```\n\n----------------------------------------\n\nTITLE: Handling Telegram Updates with Aiogram Dispatcher\nDESCRIPTION: This snippet demonstrates how to handle Telegram Update objects by feeding them to the dispatcher. The feed_update method is used to process structured Update objects received from Telegram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dispatcher.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import Bot, Dispatcher\n\nasync def update_handler(update: Update, bot: Bot, dispatcher: Dispatcher):\n  result = await dp.feed_update(bot, update)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Transition in Aiogram Python\nDESCRIPTION: This code defines a custom Scene class with a message handler that triggers a transition to another scene. It uses the @on.message decorator to handle messages starting with a rocket emoji, and then calls the wizard.goto() method to transition to AnotherScene with a parameter.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nclass MyScene(Scene, state=\"my_scene\"):\n    ...\n\n    @on.message(F.text.startswith(\"🚀\"))\n    async def on_message(self, message: Message):\n        # Direct control over when and how to transition\n        await self.wizard.goto(AnotherScene, value=message.text)\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing InlineQueryHandler in aiogram\nDESCRIPTION: Shows how to create a custom inline query handler by subclassing InlineQueryHandler and registering it with a router. The handle method needs to be implemented to process inline queries.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/inline_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.handlers import InlineQueryHandler\n\n...\n\n@router.inline_query()\nclass MyHandler(InlineQueryHandler):\n    async def handle(self) -> Any: ...\n```\n\n----------------------------------------\n\nTITLE: Using exportChatInviteLink as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the exportChatInviteLink method directly as a bot method. It returns a string representing the exported chat invite link.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/export_chat_invite_link.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: str = await bot.export_chat_invite_link(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Chat Join Requests in aiogram\nDESCRIPTION: Example of handling chat join requests in a Telegram bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@router.chat_join_request()\nasync def chat_join_request_handler(chat_join_request: types.ChatJoinRequest) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: ChatMember Group Membership Checks\nDESCRIPTION: Illustrates the transition from using method-based checks to isinstance() checks with predefined groups for determining chat member roles and permissions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Version 2.x\n\nif chat_member.is_chat_admin():\n    print(\"ChatMember is chat admin\")\n\nif chat_member.is_chat_member():\n    print(\"ChatMember is in the chat\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Version 3.x\n\nfrom aiogram.utils.chat_member import ADMINS, MEMBERS\n\nif isinstance(chat_member, ADMINS):\n    print(\"ChatMember is chat admin\")\n\nif isinstance(chat_member, MEMBERS):\n    print(\"ChatMember is in the chat\")\n```\n\n----------------------------------------\n\nTITLE: Handling Chat Boost Updates in aiogram\nDESCRIPTION: Example of handling chat boost updates in a Telegram bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@router.chat_boost()\nasync def chat_boost_handler(chat_boost: types.ChatBoostUpdated) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Sending Dice as Webhook Response\nDESCRIPTION: Using SendDice as a direct return value in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_dice.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendDice(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Message Reaction Count Updates in aiogram\nDESCRIPTION: Example of handling message reaction count updates in a Telegram bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@router.message_reaction_count()\nasync def message_reaction_count_handler(message_reaction_count: types.MessageReactionCountUpdated) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Handling Edited Messages in aiogram\nDESCRIPTION: Example of handling edited messages in a Telegram bot using the edited_message decorator to register an asynchronous handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@router.edited_message()\nasync def edited_message_handler(edited_message: types.Message) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageText as an object with a specific bot in Python\nDESCRIPTION: Using the EditMessageText method as an object passed to a bot instance. This requires importing the EditMessageText class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_text.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot(EditMessageText(...))\n```\n\n----------------------------------------\n\nTITLE: Scene Configuration with Custom Resolver in Python\nDESCRIPTION: Example showing how to configure a Scene class with a custom attributes resolver to control handler registration order. Uses inspect_members_resolver for backward compatibility.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.utils.class_attrs_resolver import inspect_members_resolver\n\nclass MyScene(Scene, attrs_resolver=inspect_members_resolver):\n```\n\n----------------------------------------\n\nTITLE: Using ForwardMessage as a webhook reply in Python\nDESCRIPTION: Example of returning a ForwardMessage object directly from a handler function when using webhooks. This pattern allows for immediate forwarding of messages as part of the webhook response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_message.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn ForwardMessage(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring AiohttpSession with Proxy Authorization using BasicAuth in Python\nDESCRIPTION: Illustrates how to set up an AiohttpSession with proxy authorization using aiohttp's BasicAuth. This example shows a more advanced proxy configuration with explicit authentication.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/aiohttp.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import BasicAuth\nfrom aiogram.client.session.aiohttp import AiohttpSession\n\nauth = BasicAuth(login=\"user\", password=\"password\")\nsession = AiohttpSession(proxy=(\"protocol://host:port\", auth))\n```\n\n----------------------------------------\n\nTITLE: Babel Compilation Command\nDESCRIPTION: Command for compiling translation files using Babel.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npybabel compile -d locales -D messages\n```\n\n----------------------------------------\n\nTITLE: Configuring AiohttpSession with Proxy Chains in Python\nDESCRIPTION: Demonstrates how to set up an AiohttpSession with multiple proxies in a chain. This advanced example shows how to configure proxy chains with different authentication methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/aiohttp.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import BasicAuth\nfrom aiogram.client.session.aiohttp import AiohttpSession\n\nauth = BasicAuth(login=\"user\", password=\"password\")\nsession = AiohttpSession(\n    proxy={\n        \"protocol0://host0:port0\",\n        \"protocol1://user:password@host1:port1\",\n        (\"protocol2://host2:port2\", auth),\n    }  # can be any iterable if not set\n)\n```\n\n----------------------------------------\n\nTITLE: Using deleteMyCommands as a Direct Bot Method\nDESCRIPTION: Shows how to call the deleteMyCommands method directly from a bot instance. This approach is the most straightforward way to delete bot commands.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_my_commands.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_my_commands(...)\n```\n\n----------------------------------------\n\nTITLE: Returning SendMessage in Webhook Handler in Python\nDESCRIPTION: Illustrates how to use SendMessage as a return value in a webhook handler. This is useful when you want to respond to a webhook event by sending a message.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_message.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendMessage(...)\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Dependencies with pip\nDESCRIPTION: Commands for installing Babel either directly or as an aiogram extra dependency for internationalization support.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install Babel\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install aiogram[i18n]\n```\n\n----------------------------------------\n\nTITLE: Binding serialized Telegram object to Bot instance in aiogram\nDESCRIPTION: Shows how to serialize a Python dictionary to a Telegram Message object while binding it to a specific Bot instance using the context parameter. This allows the message object to use the associated bot for operations.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/serialization.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmessage_data = { ... }  # Some message data as dict\nmessage = Message.model_validate(message_data, context={\"bot\": bot})\n```\n\n----------------------------------------\n\nTITLE: Using reopenForumTopic as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the reopenForumTopic method directly as a bot method. It returns a boolean value indicating the success of the operation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.reopen_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Updates in aiogram Dispatcher\nDESCRIPTION: Example of handling raw Update objects at the dispatcher level, which is only available for the root Router.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@dispatcher.update()\nasync def message_handler(update: types.Update) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Defining FSM States with Form Class\nDESCRIPTION: Defines the states for a conversation flow using aiogram's State class. States include name, like_bots, and language.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Form(StatesGroup):\n    name = State()  # Will be represented in storage as 'Form:name'\n    like_bots = State()  # Will be represented in storage as 'Form:like_bots'\n    language = State()  # Will be represented in storage as 'Form:language'\n```\n\n----------------------------------------\n\nTITLE: Returning CreateForumTopic in a Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use CreateForumTopic as a return value in a webhook handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_forum_topic.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn CreateForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: Using AnswerCallbackQuery as an Object with a Specific Bot in Python\nDESCRIPTION: Example of creating an AnswerCallbackQuery object and executing it with a bot instance. This approach separates the method definition from its execution.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_callback_query.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(AnswerCallbackQuery(...))\n```\n\n----------------------------------------\n\nTITLE: Using AnswerWebAppQuery with Specific Bot Instance\nDESCRIPTION: Shows how to use the AnswerWebAppQuery method as an object with a specific bot instance. Requires importing AnswerWebAppQuery from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_web_app_query.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: SentWebAppMessage = await bot(AnswerWebAppQuery(...))\n```\n\n----------------------------------------\n\nTITLE: Using createChatInviteLink as a bot method in Python\nDESCRIPTION: This snippet demonstrates how to use createChatInviteLink as a direct method on a bot instance. It returns a ChatInviteLink object with the created invite link data.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_invite_link.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatInviteLink = await bot.create_chat_invite_link(...)\n```\n\n----------------------------------------\n\nTITLE: Using CallbackData with InlineKeyboardButton\nDESCRIPTION: Shows how to use callback data with Telegram's inline keyboard buttons\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nInlineKeyboardButton(\n    text=\"demo\",\n    callback_data=MyCallback(foo=\"demo\", bar=\"42\").pack()  # value should be packed to string\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing FSMContext in Message Handler - Python\nDESCRIPTION: Example showing how to access FSMContext in a message handler by specifying it as a parameter along with Message and Bot objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@router.message(ProfileCompletion.add_photo, F.photo)\nasync def add_photo(\n    message: types.Message, bot: Bot, state: FSMContext\n) -> Any:\n    ... # do something with photo\n```\n\n----------------------------------------\n\nTITLE: Handling Python Dispatcher Instance\nDESCRIPTION: Example showing incorrect and correct ways to create a Dispatcher instance outside of coroutines in Python 3.8-3.9\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndp = Dispatcher()\n\ndef main():\n    ...\n    dp.run_polling(...)\n\nmain()\n```\n\nLANGUAGE: python\nCODE:\n```\nrouter = Router()\n\nasync def main():\n    dp = Dispatcher()\n    dp.include_router(router)\n    ...\n    dp.start_polling(...)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Photo Using Bot Method\nDESCRIPTION: Shows how to set a chat photo using the direct bot method approach which returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_chat_photo(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Custom MessageEntity in aiogram\nDESCRIPTION: This code shows how to send a message with custom MessageEntity objects instead of using parse modes. It disables the parse mode explicitly and provides formatted text via the entities parameter.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/defaults.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawait bot.send_message(\n    chat_id=chat_id,\n    text=text,\n    entities=[MessageEntity(type='bold', offset=0, length=4)],\n    parse_mode=None\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Functions with Magic Filters\nDESCRIPTION: Shows how to use custom functions for more complex filtering logic.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nF.chat.func(lambda chat: chat.id == -42)  # lambda message: (lambda chat: chat.id == -42)(message.chat)\n```\n\n----------------------------------------\n\nTITLE: Using GetMyShortDescription as an Object with a Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the GetMyShortDescription method as an object with a specific bot instance. It includes import statements and returns a BotShortDescription object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_short_description.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.get_my_short_description import GetMyShortDescription\n# alias: from aiogram.methods import GetMyShortDescription\n\nresult: BotShortDescription = await bot(GetMyShortDescription(...))\n```\n\n----------------------------------------\n\nTITLE: Handling Pre-Checkout Queries in aiogram\nDESCRIPTION: Example of handling pre-checkout queries in a Telegram bot for payment features.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@router.pre_checkout_query()\nasync def pre_checkout_query_handler(pre_checkout_query: types.PreCheckoutQuery) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Sending Audio Using Bot Method\nDESCRIPTION: Direct method to send audio using the bot instance. Returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_audio.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_audio(...)\n```\n\n----------------------------------------\n\nTITLE: Function-Based Session Middleware Implementation in Python\nDESCRIPTION: Example of a function-based middleware implementation with error handling. Shows how to process requests both before and after they are made.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/middleware.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def __call__(\n    self,\n    make_request: NextRequestMiddlewareType[TelegramType],\n    bot: \"Bot\",\n    method: TelegramMethod[TelegramType],\n) -> Response[TelegramType]:\n    try:\n        # do something with request\n        return await make_request(bot, method)\n    finally:\n        # do something after request\n```\n\n----------------------------------------\n\nTITLE: Sending Sticker as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the send_sticker method directly on a bot object. It returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_sticker.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_sticker(...)\n```\n\n----------------------------------------\n\nTITLE: Processing Programming Language Handler\nDESCRIPTION: Handles the programming language input and stores it in state context\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def process_language(message: types.Message, state: FSMContext):\n    async with state.proxy() as data:\n        data['language'] = message.text\n        markup = types.ReplyKeyboardRemove()\n\n        await bot.send_message(\n            message.chat.id,\n            md.text(\n                md.text('Hi! Nice to meet you,', md.bold(data['name'])),\n                md.text('Do you like to write bots?', data['like_write_bots']),\n                md.text('Your programming language is:', data['language']),\n                sep='\\n',\n            ),\n            reply_markup=markup,\n            parse_mode=ParseMode.MARKDOWN,\n        )\n\n    await state.finish()\n```\n\n----------------------------------------\n\nTITLE: Using DeleteChatPhoto as a Webhook Reply in Python\nDESCRIPTION: Returning a DeleteChatPhoto object directly from a handler to be used as a response to a webhook. This allows for a more declarative approach in webhook handlers.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_chat_photo.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteChatPhoto(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Document as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the send_document method directly on a bot instance. It returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_document.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_document(...)\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Telegram Webhook Reverse Proxy\nDESCRIPTION: Nginx configuration for setting up a reverse proxy to forward Telegram webhook requests to a local aiohttp server. This configuration handles proper header forwarding and proxy settings.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/webhook.rst#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /webhook {\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_redirect off;\n    proxy_buffering off;\n    proxy_pass http://127.0.0.1:8080;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CopyMessage as a Webhook Reply in Python\nDESCRIPTION: Demonstrates how to return a CopyMessage object directly from a handler function when using webhooks. This can be used to efficiently respond to incoming updates.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_message.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn CopyMessage(...)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Modifying Callback Answers Inside Handlers\nDESCRIPTION: Shows how to modify callback answer attributes within a handler based on execution conditions, allowing for dynamic responses.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/callback_answer.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@router.callback_query(<filters>)\nasync def my_handler(query: CallbackQuery, callback_answer: CallbackAnswer):\n    ...\n    if <everything is ok>:\n        callback_answer.text = \"All is ok\"\n    else:\n        callback_answer.text = \"Something wrong\"\n        callback_answer.cache_time = 10\n```\n\n----------------------------------------\n\nTITLE: Using approveChatJoinRequest as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the approveChatJoinRequest method directly on a bot object. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/approve_chat_join_request.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.approve_chat_join_request(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetMessageReaction in Webhook Handler\nDESCRIPTION: Implementation of SetMessageReaction as a reply in a webhook handler. Returns the SetMessageReaction object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_message_reaction.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetMessageReaction(...)\n```\n\n----------------------------------------\n\nTITLE: Using SendPhoto as Bot Method\nDESCRIPTION: Direct usage of the send_photo method through the bot instance to send a photo message.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_photo(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Video as Webhook Response\nDESCRIPTION: Returns a SendVideo object as a response in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendVideo(...)\n```\n\n----------------------------------------\n\nTITLE: Getting File Path - Python Aiogram\nDESCRIPTION: Shows how to get the file_path using the getFile method with the previously obtained file_id.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfile = await bot.get_file(file_id)\nfile_path = file.file_path\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Description Using Method Object\nDESCRIPTION: Creates and executes a SetChatDescription object with a specific bot instance. Used when more control over the method execution is needed.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_description.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetChatDescription(...))\n```\n\n----------------------------------------\n\nTITLE: Lazy Translation Implementation\nDESCRIPTION: Example of using lazy gettext for translations in filters where the language is not known at definition time.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import F\nfrom aiogram.utils.i18n import lazy_gettext as __\n\n@router.message(F.text == __(\"My menu entry\"))\n...\n```\n\n----------------------------------------\n\nTITLE: Using DeleteMessages as a bot method in aiogram\nDESCRIPTION: Example of calling the delete_messages method directly on a bot instance. This is the most straightforward way to delete messages in a Telegram bot using aiogram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_messages.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_messages(...)\n```\n\n----------------------------------------\n\nTITLE: Using AnswerInlineQuery as an Object with a Specific Bot in Python\nDESCRIPTION: This example shows how to use the AnswerInlineQuery method as an object with a specific bot instance. It requires importing the AnswerInlineQuery class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_inline_query.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(AnswerInlineQuery(...))\n```\n\n----------------------------------------\n\nTITLE: Using Flags to Customize Callback Answers for Specific Handlers\nDESCRIPTION: Demonstrates how to use the flags decorator to customize callback answer parameters for individual handlers, setting custom text and cache time.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/callback_answer.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@router.callback_query(<filters>)\n@flags.callback_answer(text=\"Thanks\", cache_time=30)\nasync def my_handler(query: CallbackQuery):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageLiveLocation as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the edit_message_live_location method directly on a bot instance. It returns a Union of Message or bool.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_live_location.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot.edit_message_live_location(...)\n```\n\n----------------------------------------\n\nTITLE: Bot Execution Code in Python with aiogram\nDESCRIPTION: Code that creates and runs the aiogram bot with the implemented scenes. This demonstrates how to initialize and start a bot with scene support.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    \"\"\"Entry point\"\"\"\n    # Initialize Bot instance with a default parse mode which will be passed to all API calls\n    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)\n    # And the run events dispatching\n    await bot.delete_webhook(drop_pending_updates=True)\n    await dp.start_polling(bot, skip_updates=True)\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO, stream=sys.stdout)\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using SetUserEmojiStatus as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the SetUserEmojiStatus method as a reply in a webhook handler. It directly returns the SetUserEmojiStatus object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_user_emoji_status.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetUserEmojiStatus(...)\n```\n\n----------------------------------------\n\nTITLE: Handler Registration with Flags in Aiogram\nDESCRIPTION: Shows how to set multiple flags during handler registration using the router.message method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@router.message(..., flags={'chat_action': 'typing', 'rate_limit': {'rate': 5}})\n```\n\n----------------------------------------\n\nTITLE: Object Creation from Dictionary (Version 2.x)\nDESCRIPTION: Example showing how to create a Telegram Message object from a dictionary in aiogram 2.x\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmessage_dict = {\"id\": 42, ...}\nmessage_obj = Message.to_object(message_dict)\nprint(message_obj)\n# id=42 name='n' ...\nprint(type(message_obj))\n# <class 'aiogram.types.message.Message'>\n```\n\n----------------------------------------\n\nTITLE: Using AnswerInlineQuery as a Reply in a Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use AnswerInlineQuery as a direct return value in a webhook handler. This approach is useful for responding to inline queries in webhook-based bots.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_inline_query.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn AnswerInlineQuery(...)\n```\n\n----------------------------------------\n\nTITLE: Unpinning Messages Using Bot Method\nDESCRIPTION: Direct method call on bot instance to unpin a chat message. Returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_chat_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.unpin_chat_message(...)\n```\n\n----------------------------------------\n\nTITLE: Downloading File to Disk - Python Aiogram\nDESCRIPTION: Example of downloading a file to disk by specifying a file name or path as the destination.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait bot.download_file(file_path, \"text.txt\")\n```\n\n----------------------------------------\n\nTITLE: Using stopPoll as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the stopPoll method directly on a bot object. It returns a Poll object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/stop_poll.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Poll = await bot.stop_poll(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Posts in aiogram\nDESCRIPTION: Example of handling channel posts in a Telegram bot using the channel_post decorator to register an asynchronous handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@router.channel_post()\nasync def channel_post_handler(channel_post: types.Message) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Using SendMessage as Object in Python\nDESCRIPTION: Shows how to use the SendMessage class as an object. This approach allows for more flexibility and can be useful in certain scenarios, such as when you need to create the message object separately from sending it.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_message.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendMessage(...))\n```\n\n----------------------------------------\n\nTITLE: Sending Location as Webhook Response\nDESCRIPTION: Demonstrates how to return a SendLocation object directly in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_location.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendLocation(...)\n```\n\n----------------------------------------\n\nTITLE: Using GetUpdates as Object with Bot Instance\nDESCRIPTION: Shows how to use the GetUpdates method as an object with a specific bot instance. This approach requires importing the GetUpdates class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_updates.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: list[Update] = await bot(GetUpdates(...))\n```\n\n----------------------------------------\n\nTITLE: Using DeleteStory as Object with Specific Bot\nDESCRIPTION: Example of using DeleteStory class as an object with a specific bot instance. Requires importing DeleteStory from aiogram.methods.delete_story or aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_story.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteStory(...))\n```\n\n----------------------------------------\n\nTITLE: Implementing a ChosenInlineResultHandler in Python with aiogram\nDESCRIPTION: This snippet demonstrates how to create a handler for chosen inline results using class-based approach in aiogram. The handler is registered with the router's chosen_inline_result decorator and implements a handle method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/chosen_inline_result.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.handlers import ChosenInlineResultHandler\n\n...\n\n@router.chosen_inline_result()\nclass MyHandler(ChosenInlineResultHandler):\n    async def handle(self) -> Any: ...\n```\n\n----------------------------------------\n\nTITLE: Using GetMe as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the get_me method directly on a bot instance. It returns a User object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_me.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: User = await bot.get_me(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring AiohttpSession with Proxy for Bot in Python\nDESCRIPTION: Shows how to set up an AiohttpSession with a proxy and use it with a Bot. This example demonstrates the basic proxy configuration for AiohttpSession.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/aiohttp.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import Bot\nfrom aiogram.client.session.aiohttp import AiohttpSession\n\nsession = AiohttpSession(proxy=\"protocol://host:port/\")\nbot = Bot(token=\"bot token\", session=session)\n```\n\n----------------------------------------\n\nTITLE: Using getStickerSet as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the getStickerSet method directly as a bot method. It returns a StickerSet object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_sticker_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: StickerSet = await bot.get_sticker_set(...)\n```\n\n----------------------------------------\n\nTITLE: Using answerInlineQuery as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the answerInlineQuery method directly on a bot instance. It returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_inline_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.answer_inline_query(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Bot Description Using Direct Method\nDESCRIPTION: Demonstrates how to set a bot's description using the direct bot method approach in Aiogram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_description.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_my_description(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageText as a bot method in Python\nDESCRIPTION: Direct usage of the edit_message_text method on a bot instance. This approach returns either a Message object or a boolean value depending on the context.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_text.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot.edit_message_text(...)\n```\n\n----------------------------------------\n\nTITLE: Echo Bot Webhook Implementation with SSL (No Reverse Proxy)\nDESCRIPTION: Example of a Telegram bot using webhooks with aiogram and aiohttp with direct SSL support without a reverse proxy. This example also demonstrates using a self-signed certificate.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/webhook.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../examples/echo_bot_webhook_ssl.py\n```\n\n----------------------------------------\n\nTITLE: Using SendVoice Method as Object in Python\nDESCRIPTION: This snippet shows how to use the SendVoice method as an object. It can be imported directly or as an alias and used with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_voice.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendVoice(...))\n```\n\n----------------------------------------\n\nTITLE: Defining Questions for Quiz Scene in Python\nDESCRIPTION: Code snippet that defines the data models for questions and answers in a quiz bot example. This shows how to structure questions with correct answers and options for a quiz implementation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Questions list\nQUESTIONS = [\n    Question(\n        \"What is Python?\",\n        [\n            \"A programming language\",\n            \"A snake\",\n            \"A movie\",\n            \"A game\",\n        ],\n        0,\n    ),\n    Question(\n        \"When was the first version of Python released?\",\n        [\n            \"1991\",\n            \"2000\",\n            \"1989\",\n            \"2005\",\n        ],\n        0,\n    ),\n    Question(\n        \"Who created Python?\",\n        [\n            \"Guido van Rossum\",\n            \"Linus Torvalds\",\n            \"Bill Gates\",\n            \"Steve Jobs\",\n        ],\n        0,\n    ),\n    Question(\n        \"What symbol is used for single-line comments in Python?\",\n        [\n            \"#\",\n            \"//\",\n            \"/* */\",\n            \"--\",\n        ],\n        0,\n    ),\n    Question(\n        \"Which of these data types is mutable in Python?\",\n        [\n            \"List\",\n            \"Tuple\",\n            \"String\",\n            \"None of these\",\n        ],\n        0,\n    ),\n    Question(\n        \"What is the correct file extension for Python files?\",\n        [\n            \".py\",\n            \".pyth\",\n            \".pt\",\n            \".p\",\n        ],\n        0,\n    ),\n    Question(\n        \"What does the 'self' keyword represent in a Python class?\",\n        [\n            \"Instance of the class\",\n            \"Class itself\",\n            \"Parent class\",\n            \"Module\",\n        ],\n        0,\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Using HideGeneralForumTopic as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the HideGeneralForumTopic class as a reply in a webhook handler. It directly returns the HideGeneralForumTopic instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/hide_general_forum_topic.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn HideGeneralForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteMessage as an Object with Specific Bot\nDESCRIPTION: Example of creating a DeleteMessage object and passing it to the bot instance. This approach allows for more flexibility when constructing the delete message request.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_message.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteMessage(...))\n```\n\n----------------------------------------\n\nTITLE: Sending Contact as Webhook Response\nDESCRIPTION: Example of returning a SendContact object as a response in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_contact.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendContact(...)\n```\n\n----------------------------------------\n\nTITLE: Getting File ID from Message - Python Aiogram\nDESCRIPTION: Demonstrates how to obtain the file_id from a document message received by the bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfile_id = message.document.file_id\n```\n\n----------------------------------------\n\nTITLE: Using CreateForumTopic with a Specific Bot in Python\nDESCRIPTION: This example shows how to use the CreateForumTopic method with a specific bot instance. It returns a ForumTopic object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: ForumTopic = await bot(CreateForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Closing General Forum Topic Using Method Object\nDESCRIPTION: Object-oriented approach to close a general forum topic by creating a CloseGeneralForumTopic instance and executing it with the bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_general_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(CloseGeneralForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Unpinning Messages Using UnpinChatMessage Object\nDESCRIPTION: Object-oriented approach using UnpinChatMessage class instance with a specific bot. Returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_chat_message.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(UnpinChatMessage(...))\n```\n\n----------------------------------------\n\nTITLE: Using GetUpdates as Bot Method\nDESCRIPTION: Demonstrates how to call getUpdates directly as a bot method to retrieve updates from Telegram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_updates.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: list[Update] = await bot.get_updates(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteMessage as a Reply to Webhook in Handler\nDESCRIPTION: Example of returning a DeleteMessage object directly from a handler, which will be sent as a reply to a webhook. This is useful in webhook-based bot implementations.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_message.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteMessage(...)\n```\n\n----------------------------------------\n\nTITLE: Using GetMe as Object with Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the GetMe method as an object, imported from aiogram.methods. It is called using the bot instance and returns a User object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_me.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: User = await bot(GetMe(...))\n```\n\n----------------------------------------\n\nTITLE: Using postStory as Bot Method\nDESCRIPTION: Demonstrates how to post a story directly using the bot instance method. Returns a Story object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/post_story.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Story = await bot.post_story(...)\n```\n\n----------------------------------------\n\nTITLE: Using ban_chat_member as a Bot Method in Python\nDESCRIPTION: Demonstrates how to use the ban_chat_member method directly from a bot instance. This is the most straightforward approach to ban a user from a chat.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_member.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.ban_chat_member(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetWebhook as Object with Specific Bot\nDESCRIPTION: Demonstrates using SetWebhook as an object with a specific bot instance. The method requires importing SetWebhook from aiogram.methods.set_webhook or aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_webhook.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetWebhook(...))\n```\n\n----------------------------------------\n\nTITLE: Handling My Chat Member Updates in aiogram\nDESCRIPTION: Example of handling updates to the bot's member status in chats.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@router.my_chat_member()\nasync def my_chat_member_handler(my_chat_member: types.ChatMemberUpdated) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Creates a virtual environment for isolated Python development using venv module\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Using RestrictChatMember as Bot Method\nDESCRIPTION: Example of using restrict_chat_member directly as a bot method. Returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/restrict_chat_member.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.restrict_chat_member(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteChatStickerSet as a Webhook Reply in Handler\nDESCRIPTION: Demonstrates returning the DeleteChatStickerSet object directly from a handler function when using webhooks. This approach is useful for responding to Telegram updates with method calls.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_chat_sticker_set.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteChatStickerSet(...)\n```\n\n----------------------------------------\n\nTITLE: Pin Message Using PinChatMessage Object - Python Aiogram\nDESCRIPTION: Example of pinning a chat message by creating and executing a PinChatMessage object with a specific bot instance. Shows the import statements and usage pattern.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/pin_chat_message.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(PinChatMessage(...))\n```\n\n----------------------------------------\n\nTITLE: Downloading File to Custom Binary I/O Object - Python Aiogram\nDESCRIPTION: Shows how to download a file to a custom binary I/O object and handle the result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_object = MyBinaryIO()\nresult: MyBinaryIO = await bot.download_file(file_path, my_object)\n# print(result is my_object)  # True\n```\n\n----------------------------------------\n\nTITLE: Using setBusinessAccountBio as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the setBusinessAccountBio method directly on a bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_bio.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_business_account_bio(...)\n```\n\n----------------------------------------\n\nTITLE: Using ForwardMessages with Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the ForwardMessages method with a specific bot instance. It returns a list of MessageId objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_messages.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: list[MessageId] = await bot(ForwardMessages(...))\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Title in Webhook Handler\nDESCRIPTION: Implementation for setting chat title within a webhook handler by returning a SetChatTitle object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_title.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetChatTitle(...)\n```\n\n----------------------------------------\n\nTITLE: Using Gift Premium Subscription as Bot Method\nDESCRIPTION: Demonstrates how to call the gift_premium_subscription method directly on a bot instance. Returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/gift_premium_subscription.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.gift_premium_subscription(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteForumTopic as Webhook Reply in Python\nDESCRIPTION: This snippet demonstrates how to use the DeleteForumTopic method as a reply in a webhook handler. It returns the DeleteForumTopic object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_forum_topic.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: Using CloseForumTopic as Webhook Response\nDESCRIPTION: Implementation of CloseForumTopic as a return value in a webhook handler. Used for responding to webhook events.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn CloseForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteMessage as a Bot Method\nDESCRIPTION: Example of using the delete_message method directly on the bot instance. This is the simplest way to delete a message in Telegram using aiogram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_message(...)\n```\n\n----------------------------------------\n\nTITLE: Installing Aiogram Development Build from GitHub\nDESCRIPTION: Installs the development version (3.x) of Aiogram directly from GitHub repository using pip.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/install.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install https://github.com/aiogram/aiogram/archive/refs/heads/dev-3.x.zip\n```\n\n----------------------------------------\n\nTITLE: Installing aiogram Development Dependencies (Windows)\nDESCRIPTION: Installs aiogram and all development dependencies in editable mode on Windows\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[dev,test,docs,fast,redis,mongo,proxy,i18n]\n```\n\n----------------------------------------\n\nTITLE: Sending Contact Using Bot Method\nDESCRIPTION: Example of sending a contact message directly using the bot instance's method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_contact.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_contact(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Bot Description in Webhook Handler\nDESCRIPTION: Demonstrates how to set a bot's description as a reply within a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_description.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetMyDescription(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageCaption as a Bot Method\nDESCRIPTION: This snippet demonstrates how to edit a message caption by calling the method directly on the bot instance. This is the most straightforward approach to update a message's caption.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_caption.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot.edit_message_caption(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageReplyMarkup as Bot Method\nDESCRIPTION: Demonstrates how to edit message reply markup using the direct bot method approach. Returns either a Message object or boolean value.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_reply_markup.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot.edit_message_reply_markup(...)\n```\n\n----------------------------------------\n\nTITLE: Simplified File Download - Python Aiogram\nDESCRIPTION: Shows the simplified download method using file_id or Downloadable object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndocument = message.document\nawait bot.download(document)\n```\n\n----------------------------------------\n\nTITLE: Using EditForumTopic as a Webhook Reply in a Handler in Python\nDESCRIPTION: This snippet illustrates how to use the EditForumTopic method as a reply in a webhook handler. It directly returns the EditForumTopic object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn EditForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: Importing BufferedInputFile for Buffer Uploads in Python\nDESCRIPTION: Shows how to import the BufferedInputFile class for uploading files from memory buffers\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/upload_file.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.types import BufferedInputFile\n```\n\n----------------------------------------\n\nTITLE: Sending Invoice Using Bot Method\nDESCRIPTION: Example of sending an invoice using the direct bot method approach.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_invoice.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_invoice(...)\n```\n\n----------------------------------------\n\nTITLE: Returning CreateChatInviteLink as a webhook response in Python\nDESCRIPTION: This snippet demonstrates how to return the CreateChatInviteLink method as a response in a webhook handler. This approach is used when implementing handlers that need to respond with Telegram API methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_invite_link.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn CreateChatInviteLink(...)\n```\n\n----------------------------------------\n\nTITLE: Using SavePreparedInlineMessage in Webhook Handler\nDESCRIPTION: Example of returning SavePreparedInlineMessage directly in a webhook handler response. This approach is used when responding to webhook updates.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/save_prepared_inline_message.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SavePreparedInlineMessage(...)\n```\n\n----------------------------------------\n\nTITLE: Using GetCustomEmojiStickers as a Bot Method\nDESCRIPTION: Example of using the get_custom_emoji_stickers method directly on a bot instance to retrieve custom emoji stickers.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_custom_emoji_stickers.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: list[Sticker] = await bot.get_custom_emoji_stickers(...)\n```\n\n----------------------------------------\n\nTITLE: Command Collection Utility with Flags in Aiogram\nDESCRIPTION: Utility function that collects all registered commands with their descriptions by checking command flags in handlers and sub-routers.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef collect_commands(router: Router) -> Generator[Tuple[Command, str], None, None]:\n    for handler in router.message.handlers:\n        if \"commands\" not in handler.flags:  # ignore all handler without commands\n            continue\n        # the Command filter adds the flag with list of commands attached to the handler\n        for command in handler.flags[\"commands\"]:\n            yield command, handler.callback.__doc__ or \"\"\n    # Recursively extract commands from nested routers\n    for sub_router in router.sub_routers:\n        yield from collect_commands(sub_router)\n```\n\n----------------------------------------\n\nTITLE: Using SetMyCommands with Specific Bot in Python\nDESCRIPTION: This example shows how to use the SetMyCommands object with a specific bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_commands.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetMyCommands(...))\n```\n\n----------------------------------------\n\nTITLE: Using getChatAdministrators as a bot method in Python\nDESCRIPTION: Shows how to call getChatAdministrators directly as a method of the bot object. This approach is the most straightforward way to get a list of administrators in a chat.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_administrators.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: list[ResultChatMemberUnion] = await bot.get_chat_administrators(...)\n```\n\n----------------------------------------\n\nTITLE: Using deleteForumTopic as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the deleteForumTopic method directly on a bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetUserEmojiStatus with Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the SetUserEmojiStatus method with a specific bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_user_emoji_status.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetUserEmojiStatus(...))\n```\n\n----------------------------------------\n\nTITLE: Using answerCallbackQuery as a Bot Method in Python\nDESCRIPTION: Example of calling the answer_callback_query method directly on a bot instance. This method notifies users that their callback button press was received.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_callback_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.answer_callback_query(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetStickerSetTitle as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use SetStickerSetTitle as a reply in a webhook handler. It directly returns the SetStickerSetTitle object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_title.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetStickerSetTitle(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteMessages as an object with a specific bot in aiogram\nDESCRIPTION: Example of using the DeleteMessages class as an object and passing it to a bot instance. This approach allows for more flexibility when working with the method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_messages.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteMessages(...))\n```\n\n----------------------------------------\n\nTITLE: Using SendGame as Reply in Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use the SendGame method as a reply in a webhook handler. It returns the SendGame object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_game.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendGame(...)\n```\n\n----------------------------------------\n\nTITLE: Using SendGame as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the SendGame method directly as a bot method. It returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_game.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_game(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Dice Using Bot Method\nDESCRIPTION: Basic usage of sendDice method directly through the bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_dice.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_dice(...)\n```\n\n----------------------------------------\n\nTITLE: Using createForumTopic as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the createForumTopic method directly on a bot instance. It returns a ForumTopic object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ForumTopic = await bot.create_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: Importing SetStickerSetTitle Method in Python\nDESCRIPTION: This snippet shows how to import the SetStickerSetTitle method from Aiogram. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_title.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_sticker_set_title import SetStickerSetTitle\n# alias: from aiogram.methods import SetStickerSetTitle\n```\n\n----------------------------------------\n\nTITLE: Disabling Parse Mode for a Specific Message in aiogram\nDESCRIPTION: This snippet shows how to disable parse mode for a specific message by setting it to None, even when a default parse mode is configured. This is useful for sending plain text messages.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/defaults.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait bot.send_message(chat_id, text, parse_mode=None)\n```\n\n----------------------------------------\n\nTITLE: Using ApproveChatJoinRequest as a Reply in a Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use ApproveChatJoinRequest as a reply within a webhook handler. It returns the ApproveChatJoinRequest object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/approve_chat_join_request.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn ApproveChatJoinRequest(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageReplyMarkup as Object with Specific Bot\nDESCRIPTION: Shows how to edit message reply markup using the object-oriented approach by calling the method directly on the bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_reply_markup.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot(EditMessageReplyMarkup(...))\n```\n\n----------------------------------------\n\nTITLE: Using SendPhoto Method as Object\nDESCRIPTION: Example of using SendPhoto by calling it through the bot instance as a method object. Requires importing SendPhoto from aiogram.methods.send_photo or aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_photo.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendPhoto(...))\n```\n\n----------------------------------------\n\nTITLE: Using BanChatMember as an Object with a Specific Bot in Python\nDESCRIPTION: Shows how to use the BanChatMember method as an object with a specific bot instance. This allows for more flexibility when organizing code.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_member.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(BanChatMember(...))\n```\n\n----------------------------------------\n\nTITLE: Using CopyMessage as a Bot Method in Python\nDESCRIPTION: Demonstrates how to use copy_message as a direct method on a bot instance. This approach is the most straightforward way to copy a message from one chat to another.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: MessageId = await bot.copy_message(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditForumTopic as an Object with a Specific Bot in Python\nDESCRIPTION: This example shows how to use the EditForumTopic method as an object, passing it to a specific bot instance. It requires importing the EditForumTopic class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(EditForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Using SetWebhook as Bot Method\nDESCRIPTION: Shows how to use setWebhook as a direct bot method. Returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_webhook.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_webhook(...)\n```\n\n----------------------------------------\n\nTITLE: Using setStickerMaskPosition as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the setStickerMaskPosition method directly on a bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_mask_position.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_sticker_mask_position(...)\n```\n\n----------------------------------------\n\nTITLE: Using CreateInvoiceLink as an Object with a Specific Bot\nDESCRIPTION: Demonstrates how to use the CreateInvoiceLink method as an object passed to a bot instance to generate a payment invoice link.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_invoice_link.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: str = await bot(CreateInvoiceLink(...))\n```\n\n----------------------------------------\n\nTITLE: Sending Sticker as Webhook Reply in Python\nDESCRIPTION: This snippet demonstrates how to use the SendSticker method as a reply in a webhook handler. It returns the SendSticker object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_sticker.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendSticker(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring FSM Strategy for Forum Topics in Python\nDESCRIPTION: Example code showing how to configure FSM (Finite State Machine) strategy in the Dispatcher to support forum topics\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.fsm.strategy import FSMStrategy\n...\ndispatcher = Dispatcher(\n    fsm_strategy=FSMStrategy.USER_IN_TOPIC,\n    storage=...,  # Any persistent storage\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Animation as Webhook Response\nDESCRIPTION: Method to return a SendAnimation object directly in a webhook handler for immediate response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_animation.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendAnimation(...)\n```\n\n----------------------------------------\n\nTITLE: Using CallbackData Pack and Unpack Methods\nDESCRIPTION: Demonstrates how to pack and unpack callback data using the created callback class\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncb1 = MyCallback(foo=\"demo\", bar=42)\ncb1.pack()  # returns 'my:demo:42'\ncb1.unpack('my:demo:42')  # returns <MyCallback(foo=\"demo\", bar=42)>\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageReplyMarkup in Webhook Handler\nDESCRIPTION: Demonstrates how to use EditMessageReplyMarkup as a return value in webhook handlers for immediate response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_reply_markup.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn EditMessageReplyMarkup(...)\n```\n\n----------------------------------------\n\nTITLE: Using CopyMessage as an Object with a Specific Bot in Python\nDESCRIPTION: Shows how to import and use the CopyMessage class as an object passed to a bot instance. This approach allows for more flexibility when working with the message copying functionality.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_message.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: MessageId = await bot(CopyMessage(...))\n```\n\n----------------------------------------\n\nTITLE: Transfer Stars as Webhook Handler Response\nDESCRIPTION: Shows how to return a TransferBusinessAccountStars object as a response in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_business_account_stars.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn TransferBusinessAccountStars(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Default Parameters for CallbackAnswerMiddleware\nDESCRIPTION: Example showing how to initialize the middleware with custom default parameters to respond with 'OK' before handler execution.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/callback_answer.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.callback_query.middleware(CallbackAnswerMiddleware(pre=True, text=\"OK\"))\n```\n\n----------------------------------------\n\nTITLE: Cancel Conversation Handler\nDESCRIPTION: Handles conversation cancellation through command or text input\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def cancel_handler(message: types.Message, state: FSMContext):\n    \"\"\"Allow user to cancel action via /cancel command.\"\"\"\n    current_state = await state.get_state()\n    if current_state is None:\n        return\n\n    await state.finish()\n    await message.reply('Cancelled.', reply_markup=types.ReplyKeyboardRemove())\n```\n\n----------------------------------------\n\nTITLE: Middleware Implementation with Flags in Aiogram\nDESCRIPTION: Example of a middleware that checks for typing flag and implements chat action sender based on the flag's presence.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def my_middleware(handler, event, data):\n    typing = get_flag(data, \"typing\")  # Check that handler marked with `typing` flag\n    if not typing:\n        return await handler(event, data)\n\n    async with ChatActionSender.typing(chat_id=event.chat.id):\n        return await handler(event, data)\n```\n\n----------------------------------------\n\nTITLE: Using SendPaidMedia in Webhook Handler\nDESCRIPTION: Implementation of SendPaidMedia as a direct return in a webhook handler for sending paid media content.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_paid_media.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendPaidMedia(...)\n```\n\n----------------------------------------\n\nTITLE: Using createChatSubscriptionInviteLink as a Bot Method in Python\nDESCRIPTION: Creates a subscription invite link for a chat using the bot's direct method approach. Returns a ChatInviteLink object containing the generated invite link and its properties.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_subscription_invite_link.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatInviteLink = await bot.create_chat_subscription_invite_link(...)\n```\n\n----------------------------------------\n\nTITLE: Using stopMessageLiveLocation as Bot Method in Python\nDESCRIPTION: Example of using the stopMessageLiveLocation method directly on a bot instance. This method returns a Union of Message or bool.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/stop_message_live_location.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot.stop_message_live_location(...)\n```\n\n----------------------------------------\n\nTITLE: GetStarTransactions - Direct Bot Method\nDESCRIPTION: Example of calling get_star_transactions() directly as a bot method to retrieve star transactions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_star_transactions.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: StarTransactions = await bot.get_star_transactions(...)\n```\n\n----------------------------------------\n\nTITLE: Using unhideGeneralForumTopic as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the unhideGeneralForumTopic method directly on a bot instance. It returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unhide_general_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.unhide_general_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditForumTopic as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the edit_forum_topic method directly on a bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.edit_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Audio Using SendAudio Object\nDESCRIPTION: Object-oriented approach to send audio using the SendAudio class with a specific bot instance. Returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_audio.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendAudio(...))\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Default Parse Mode in aiogram\nDESCRIPTION: This snippet shows how to send a message without specifying the parse mode parameter, which will use the default parse mode (HTML in this example) configured in the Bot initialization.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/defaults.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait bot.send_message(chat_id, text)\n```\n\n----------------------------------------\n\nTITLE: Using getUserProfilePhotos as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the getUserProfilePhotos method directly as a bot method. It returns a UserProfilePhotos object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_user_profile_photos.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: UserProfilePhotos = await bot.get_user_profile_photos(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteStickerSet as webhook response in Python\nDESCRIPTION: Example of returning a DeleteStickerSet object directly from a handler for webhook responses. This is useful when implementing webhook handlers.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_set.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteStickerSet(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteChatStickerSet as a Bot Method\nDESCRIPTION: Demonstrates how to call delete_chat_sticker_set directly as a method on the bot object. This approach is the most straightforward way to use this functionality.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_chat_sticker_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_chat_sticker_set(...)\n```\n\n----------------------------------------\n\nTITLE: Processing Negative Bot Response Handler\nDESCRIPTION: Handles negative response to liking bots and completes the conversation\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def process_dont_like_write_bots(message: types.Message, state: FSMContext):\n    if message.text.lower() not in ['no', 'nope', 'nah', 'нет']:\n        await message.reply('Please use yes/no buttons')\n        return\n    await state.finish()\n    await message.reply('Not bad not terrible.\\nSee you!')\n```\n\n----------------------------------------\n\nTITLE: Using Edit Message Media with Specific Bot Instance\nDESCRIPTION: Example of editing message media by calling the EditMessageMedia class directly with a bot instance. Requires importing EditMessageMedia from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_media.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot(EditMessageMedia(...))\n```\n\n----------------------------------------\n\nTITLE: Getting Bot Commands Using Direct Method\nDESCRIPTION: Demonstrates how to retrieve bot commands using the direct bot method approach. Returns a list of BotCommand objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_commands.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: list[BotCommand] = await bot.get_my_commands(...)\n```\n\n----------------------------------------\n\nTITLE: Using ForwardMessage as an object with a specific bot in Python\nDESCRIPTION: Example of creating a ForwardMessage object and executing it with a specific bot. This approach allows more flexibility when working with multiple bots or complex forwarding scenarios.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_message.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(ForwardMessage(...))\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageCaption as a Webhook Reply in Handler\nDESCRIPTION: This snippet demonstrates how to return the EditMessageCaption object directly from a handler function when using webhooks. This approach allows responding to Telegram updates in a webhook-compatible way.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_caption.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn EditMessageCaption(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditStory as a bot method in aiogram\nDESCRIPTION: Example showing how to edit a story by calling the edit_story method directly on a bot instance. This returns a Story object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_story.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Story = await bot.edit_story(...)\n```\n\n----------------------------------------\n\nTITLE: Returning SendVoice as Webhook Reply in Python Handler\nDESCRIPTION: This snippet demonstrates how to use the SendVoice method as a return value in a webhook handler. This approach is used for replying to incoming updates.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_voice.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendVoice(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Contact Using SendContact Object\nDESCRIPTION: Example of sending a contact message using the SendContact class instance with a specific bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_contact.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendContact(...))\n```\n\n----------------------------------------\n\nTITLE: Using EditChatInviteLink as a Reply in a Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use the EditChatInviteLink method as a reply in a webhook handler. It returns the EditChatInviteLink object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_invite_link.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn EditChatInviteLink(...)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ExportChatInviteLink as an Object in Python\nDESCRIPTION: This snippet shows how to import the ExportChatInviteLink class and use it with a specific bot instance. It demonstrates two import methods and how to call the method with a bot object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/export_chat_invite_link.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.export_chat_invite_link import ExportChatInviteLink\n# or\nfrom aiogram.methods import ExportChatInviteLink\n\nresult: str = await bot(ExportChatInviteLink(...))\n```\n\n----------------------------------------\n\nTITLE: Using ReopenForumTopic with a Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the ReopenForumTopic method with a specific bot instance. It returns a boolean result indicating the success of reopening the forum topic.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(ReopenForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Sending Video Using SendVideo Object\nDESCRIPTION: Object-oriented approach to send a video using the SendVideo class with a specific bot instance. Returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendVideo(...))\n```\n\n----------------------------------------\n\nTITLE: Sending Venue as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the send_venue method directly on a bot object. It returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_venue.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_venue(...)\n```\n\n----------------------------------------\n\nTITLE: Direct Bot Method Usage\nDESCRIPTION: Demonstrates how to send a chat action directly using the bot instance. Returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_chat_action.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.send_chat_action(...)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using UnpinAllChatMessages as an Object in Python\nDESCRIPTION: This snippet shows how to import the UnpinAllChatMessages class and use it as an object with a specific bot. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_chat_messages.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(UnpinAllChatMessages(...))\n```\n\n----------------------------------------\n\nTITLE: Using setMyDefaultAdministratorRights as Bot Method\nDESCRIPTION: Direct method call on the bot instance to set default administrator rights.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_default_administrator_rights.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_my_default_administrator_rights(...)\n```\n\n----------------------------------------\n\nTITLE: Basic Bot Method Usage - Python\nDESCRIPTION: Simple example of verifying a user directly using the bot instance\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_user.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.verify_user(...)\n```\n\n----------------------------------------\n\nTITLE: Context Variable Example - Python\nDESCRIPTION: Code example showing usage of aiogram's context variables system.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\naiogram.utils.context\n```\n\n----------------------------------------\n\nTITLE: Combining Filters in Aiogram v3\nDESCRIPTION: Example showing how to combine filters using and/or operations in Aiogram v3. Demonstrates combining Text and Command filters, using & for AND, and ~ for NOT operations.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nText(text=\"demo\") | Command(commands=[\"demo\"])\nMyFilter() & AnotherFilter()\n~StateFilter(state='my-state')\n```\n\n----------------------------------------\n\nTITLE: Setting Bot Name Using SetMyName Object with Specific Bot\nDESCRIPTION: Shows how to set a bot's name using the SetMyName class with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_name.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetMyName(...))\n```\n\n----------------------------------------\n\nTITLE: Sending Dice Using SendDice Class\nDESCRIPTION: Object-oriented approach using the SendDice class with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_dice.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendDice(...))\n```\n\n----------------------------------------\n\nTITLE: Using BanChatSenderChat as Reply in Webhook Handler in Python\nDESCRIPTION: Demonstrates how to use the BanChatSenderChat method as a reply in a webhook handler. This approach directly returns the method object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_sender_chat.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn BanChatSenderChat(...)\n```\n\n----------------------------------------\n\nTITLE: Using unban_chat_member as Bot Method\nDESCRIPTION: Direct method call on bot instance to unban a chat member. Returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_member.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.unban_chat_member(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Animation Using Bot Method\nDESCRIPTION: Direct method to send an animation using the bot instance, returning a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_animation.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_animation(...)\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matching with Magic Filters\nDESCRIPTION: Demonstrates how to use regular expressions to match text patterns.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nF.text.regexp(r'Hello, .+')  # lambda message: re.match(r'Hello, .+', message.text)\n```\n\n----------------------------------------\n\nTITLE: Using SetMyShortDescription as Object with Specific Bot in Python\nDESCRIPTION: This example shows how to use the SetMyShortDescription method as an object, passing it to a specific bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_short_description.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetMyShortDescription(...))\n```\n\n----------------------------------------\n\nTITLE: Using deleteChatPhoto as a Bot Method in Python\nDESCRIPTION: Direct usage of the deleteChatPhoto method from a bot instance. This approach calls the method directly on the bot object and returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_chat_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_chat_photo(...)\n```\n\n----------------------------------------\n\nTITLE: Using SendPoll as Object with Specific Bot in Python\nDESCRIPTION: This example shows how to use the SendPoll method as an object with a specific bot. It requires importing SendPoll from aiogram.methods.send_poll or as an alias from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_poll.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendPoll(...))\n```\n\n----------------------------------------\n\nTITLE: Using UnpinAllForumTopicMessages as Webhook Reply\nDESCRIPTION: Example showing how to use UnpinAllForumTopicMessages as a direct return value in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_forum_topic_messages.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn UnpinAllForumTopicMessages(...)\n```\n\n----------------------------------------\n\nTITLE: Using AnswerShippingQuery as Object with Specific Bot\nDESCRIPTION: Object-oriented approach using the AnswerShippingQuery class with a bot instance. Requires importing the AnswerShippingQuery class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_shipping_query.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(AnswerShippingQuery(...))\n```\n\n----------------------------------------\n\nTITLE: Using Edit Message Media in Webhook Handler\nDESCRIPTION: Example of using EditMessageMedia as a direct return value in a webhook handler. This approach is used when responding to webhook updates.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_media.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn EditMessageMedia(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Invoice Using SendInvoice Object with Specific Bot\nDESCRIPTION: Demonstrates how to send an invoice using the SendInvoice class with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_invoice.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendInvoice(...))\n```\n\n----------------------------------------\n\nTITLE: Pin Message Using Bot Method - Python Aiogram\nDESCRIPTION: Example of pinning a chat message using the direct bot method call. Returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/pin_chat_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.pin_chat_message(...)\n```\n\n----------------------------------------\n\nTITLE: Using Close Method with Specific Bot in Python\nDESCRIPTION: Demonstrates how to use the Close method as an object with a specific bot instance. The method returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(Close(...))\n```\n\n----------------------------------------\n\nTITLE: Using SendVenue as Object with Specific Bot in Python\nDESCRIPTION: This example shows how to use the SendVenue method as an object with a specific bot. It requires importing SendVenue from aiogram.methods.send_venue or aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_venue.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendVenue(...))\n```\n\n----------------------------------------\n\nTITLE: Using GetGameHighScores as an Object with a Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the GetGameHighScores method as an object, passing it to a specific bot instance. It requires importing the GetGameHighScores class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_game_high_scores.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: list[GameHighScore] = await bot(GetGameHighScores(...))\n```\n\n----------------------------------------\n\nTITLE: Using AddStickerToSet as Bot Method\nDESCRIPTION: Shows how to call addStickerToSet directly as a bot method. Returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/add_sticker_to_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.add_sticker_to_set(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Invoice as Webhook Response\nDESCRIPTION: Shows how to return a SendInvoice object as a response in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_invoice.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendInvoice(...)\n```\n\n----------------------------------------\n\nTITLE: Using LeaveChat as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the leave_chat method directly on a bot object. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/leave_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.leave_chat(...)\n```\n\n----------------------------------------\n\nTITLE: Using RevokeChatInviteLink as Bot Method\nDESCRIPTION: Direct method call on the bot instance to revoke a chat invite link. Returns a ChatInviteLink object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/revoke_chat_invite_link.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatInviteLink = await bot.revoke_chat_invite_link(...)\n```\n\n----------------------------------------\n\nTITLE: Using AnswerShippingQuery as Bot Method\nDESCRIPTION: Direct method call on the bot instance to answer a shipping query.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_shipping_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.answer_shipping_query(...)\n```\n\n----------------------------------------\n\nTITLE: Using AnswerPreCheckoutQuery as a Webhook Reply in Python\nDESCRIPTION: Example of returning an AnswerPreCheckoutQuery object directly from a handler for webhook responses. This approach is useful in webhook-based bot implementations.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_pre_checkout_query.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn AnswerPreCheckoutQuery(...)\n```\n\n----------------------------------------\n\nTITLE: Using setStickerEmojiList in Webhook Handler\nDESCRIPTION: Implementation as a return value in a webhook handler function, using the SetStickerEmojiList class.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_emoji_list.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetStickerEmojiList(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Description Using Bot Method\nDESCRIPTION: Direct method to set a chat description using the bot instance. Returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_description.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_chat_description(...)\n```\n\n----------------------------------------\n\nTITLE: Using CallbackData with Keyboard Builder\nDESCRIPTION: Shows how to use callback data with the keyboard builder utility\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbuilder = InlineKeyboardBuilder()\nbuilder.button(\n    text=\"demo\",\n    callback_data=MyCallback(foo=\"demo\", bar=\"42\")  # Value can be not packed to string inplace, because builder knows what to do with callback instance\n)\n```\n\n----------------------------------------\n\nTITLE: Using uploadStickerFile as Object\nDESCRIPTION: Example demonstrating how to upload a sticker file using the UploadStickerFile class as an object with a specific bot instance. Shows both the import statements and usage pattern.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upload_sticker_file.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: File = await bot(UploadStickerFile(...))\n```\n\n----------------------------------------\n\nTITLE: Using SetMessageReaction as Object with Specific Bot\nDESCRIPTION: Object-oriented approach using SetMessageReaction class with a specific bot instance. Requires importing the SetMessageReaction class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_message_reaction.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetMessageReaction(...))\n```\n\n----------------------------------------\n\nTITLE: Importing UnbanChatSenderChat Method in Python\nDESCRIPTION: This snippet shows two ways to import the UnbanChatSenderChat method from the aiogram library. It can be imported directly or as an alias.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_sender_chat.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.unban_chat_sender_chat import UnbanChatSenderChat\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import UnbanChatSenderChat\n```\n\n----------------------------------------\n\nTITLE: Using getChatMemberCount as bot method in Python\nDESCRIPTION: Example of using getChatMemberCount as a direct method on a bot instance. This approach is straightforward and returns the count of members in a chat as an integer.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_member_count.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: int = await bot.get_chat_member_count(...)\n```\n\n----------------------------------------\n\nTITLE: Using ReadBusinessMessage as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the ReadBusinessMessage method as a reply in a webhook handler. It returns the ReadBusinessMessage object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/read_business_message.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn ReadBusinessMessage(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Bot Name Using Direct Method\nDESCRIPTION: Demonstrates how to set a bot's name using the direct method call on the bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_name.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_my_name(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountGiftSettings with Specific Bot Instance\nDESCRIPTION: Shows how to use SetBusinessAccountGiftSettings method by passing it to a bot instance\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_gift_settings.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetBusinessAccountGiftSettings(...))\n```\n\n----------------------------------------\n\nTITLE: Using setStickerPositionInSet as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the setStickerPositionInSet method directly as a bot method. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_position_in_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_sticker_position_in_set(...)\n```\n\n----------------------------------------\n\nTITLE: Using setMyCommands as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the setMyCommands method directly on a bot object. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_commands.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_my_commands(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Explicit Parse Mode in aiogram\nDESCRIPTION: This code shows the traditional approach of specifying the parse mode directly in the send_message method call. This is the method that would be used without default properties configured.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/defaults.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait bot.send_message(chat_id, text, parse_mode=ParseMode.HTML)\n```\n\n----------------------------------------\n\nTITLE: Using AnswerShippingQuery in Webhook Handler\nDESCRIPTION: Using AnswerShippingQuery as a direct return value in a webhook handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_shipping_query.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn AnswerShippingQuery(...)\n```\n\n----------------------------------------\n\nTITLE: Using GetGameHighScores as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the get_game_high_scores method directly on a bot object. It returns a list of GameHighScore objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_game_high_scores.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: list[GameHighScore] = await bot.get_game_high_scores(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Description in Webhook Handler\nDESCRIPTION: Returns a SetChatDescription object directly in a webhook handler, allowing the framework to execute it automatically.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_description.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetChatDescription(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Photo Using Method Object\nDESCRIPTION: Demonstrates setting a chat photo using the SetChatPhoto method object, showing both import options and implementation with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_photo.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetChatPhoto(...))\n```\n\n----------------------------------------\n\nTITLE: Using GetBusinessConnection as separate object with specific bot in Python\nDESCRIPTION: This snippet shows how to use the GetBusinessConnection method as a separate object by importing it and then passing it to a bot instance. This approach provides more flexibility in constructing API requests.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_connection.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: BusinessConnection = await bot(GetBusinessConnection(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring AiohttpSession with Proxy Authorization in URL in Python\nDESCRIPTION: Shows how to set up an AiohttpSession with proxy authorization included in the URL. This example demonstrates a simpler way to include proxy credentials.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/aiohttp.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsession = AiohttpSession(proxy=\"protocol://user:password@host:port\")\n```\n\n----------------------------------------\n\nTITLE: Using ApproveChatJoinRequest as an Object with a Specific Bot in Python\nDESCRIPTION: This example shows how to use the ApproveChatJoinRequest method as an object with a specific bot. It requires importing the ApproveChatJoinRequest class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/approve_chat_join_request.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(ApproveChatJoinRequest(...))\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiz Scene Class in Python with aiogram\nDESCRIPTION: Definition of the QuizScene class that extends Scene. This shows how to initialize a scene with a specific name and sets up the starting point for handling quiz interactions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass QuizScene(Scene, name=\"quiz\"):\n    \"\"\"Quiz scene\"\"\"\n\n    # Store answers in the scene using a dictionary that maps question index to the answer index\n    answers: ClassVar[dict[int, int]] = defaultdict(dict)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhook Info as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the get_webhook_info method directly on a bot instance to retrieve webhook information. It returns a WebhookInfo object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_webhook_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: WebhookInfo = await bot.get_webhook_info(...)\n```\n\n----------------------------------------\n\nTITLE: Using StopMessageLiveLocation as Webhook Reply in Python\nDESCRIPTION: Example of using StopMessageLiveLocation as a reply in a webhook handler. This approach is useful for sending responses directly from webhook handlers.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/stop_message_live_location.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn StopMessageLiveLocation(...)\n```\n\n----------------------------------------\n\nTITLE: Using RestrictChatMember in Webhook Handler\nDESCRIPTION: Example demonstrating how to return RestrictChatMember object directly from a webhook handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/restrict_chat_member.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn RestrictChatMember(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageLiveLocation with Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the EditMessageLiveLocation method with a specific bot instance. It returns a Union of Message or bool.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_live_location.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot(EditMessageLiveLocation(...))\n```\n\n----------------------------------------\n\nTITLE: Using Edit Message Media as Bot Method\nDESCRIPTION: Example of editing message media using the direct bot method approach. Returns a Union of Message or boolean.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_media.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot.edit_message_media(...)\n```\n\n----------------------------------------\n\nTITLE: Importing SetUserEmojiStatus Method in Python\nDESCRIPTION: This snippet shows how to import the SetUserEmojiStatus method for use as an object. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_user_emoji_status.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_user_emoji_status import SetUserEmojiStatus\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import SetUserEmojiStatus\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Permissions Using Direct Bot Method\nDESCRIPTION: Example of setting chat permissions using the direct bot method approach. This is the simplest way to set chat permissions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_permissions.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_chat_permissions(...)\n```\n\n----------------------------------------\n\nTITLE: Accessing new Message fields in Python\nDESCRIPTION: Example of accessing the new boost_added, sender_boost_count, and reply_to_story fields added to the Message class in this release.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nboost_added = message.boost_added\nsender_boost_count = message.sender_boost_count\nreply_to_story = message.reply_to_story\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Title Using SetChatTitle Object\nDESCRIPTION: Object-oriented approach to set a chat title by creating a SetChatTitle instance and executing it with a bot instance. Requires importing the SetChatTitle class.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_title.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetChatTitle(...))\n```\n\n----------------------------------------\n\nTITLE: Using ConvertGiftToStars as a Bot Method\nDESCRIPTION: Example of calling the convert_gift_to_stars method directly on a bot instance. This approach is the most straightforward way to use the method and returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/convert_gift_to_stars.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.convert_gift_to_stars(...)\n```\n\n----------------------------------------\n\nTITLE: Using CreateChatInviteLink as an object with a specific bot in Python\nDESCRIPTION: This example shows how to use the CreateChatInviteLink method by importing it as an object and passing it to a bot instance. This approach allows for more flexibility in constructing the method call.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_invite_link.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatInviteLink = await bot(CreateChatInviteLink(...))\n```\n\n----------------------------------------\n\nTITLE: Using copyMessages as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the copyMessages method directly as a bot method. It returns a list of MessageId objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_messages.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: list[MessageId] = await bot.copy_messages(...)\n```\n\n----------------------------------------\n\nTITLE: Using getUserProfilePhotos as Object Method in Python\nDESCRIPTION: This snippet shows how to use the getUserProfilePhotos method as an object. It includes import statements and demonstrates usage with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_user_profile_photos.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.get_user_profile_photos import GetUserProfilePhotos\nfrom aiogram.methods import GetUserProfilePhotos\n\nresult: UserProfilePhotos = await bot(GetUserProfilePhotos(...))\n```\n\n----------------------------------------\n\nTITLE: Importing and Using EditChatInviteLink as an Object in Python\nDESCRIPTION: This snippet shows how to import the EditChatInviteLink method and use it with a specific bot. It also demonstrates an alternative import alias.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_invite_link.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.edit_chat_invite_link import EditChatInviteLink\n# alias: from aiogram.methods import EditChatInviteLink\n\nresult: ChatInviteLink = await bot(EditChatInviteLink(...))\n```\n\n----------------------------------------\n\nTITLE: Using DeclineChatJoinRequest as an object with a specific bot in Python\nDESCRIPTION: This snippet shows how to use the DeclineChatJoinRequest class as an object and pass it to a bot instance. This approach allows for more flexibility when building complex requests.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/decline_chat_join_request.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeclineChatJoinRequest(...))\n```\n\n----------------------------------------\n\nTITLE: Using PromoteChatMember as a Reply in a Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use the PromoteChatMember method as a reply in a webhook handler. It returns the PromoteChatMember object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/promote_chat_member.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn PromoteChatMember(...)\n```\n\n----------------------------------------\n\nTITLE: Unpinning Messages in Webhook Handler\nDESCRIPTION: Using UnpinChatMessage as a direct return value in a webhook handler for asynchronous processing.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_chat_message.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn UnpinChatMessage(...)\n```\n\n----------------------------------------\n\nTITLE: Webhook Handler Response - Python\nDESCRIPTION: Example demonstrating how to use VerifyUser as a webhook handler response\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_user.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn VerifyUser(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Edited Channel Posts in aiogram\nDESCRIPTION: Example of handling edited channel posts in a Telegram bot using the edited_channel_post decorator.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@router.edited_channel_post()\nasync def edited_channel_post_handler(edited_channel_post: types.Message) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Using GetAvailableGifts as an Object with a Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the GetAvailableGifts method as an object with a specific bot instance. It returns a Gifts object containing the available gifts.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_available_gifts.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: Gifts = await bot(GetAvailableGifts(...))\n```\n\n----------------------------------------\n\nTITLE: Using answerWebAppQuery as Bot Method\nDESCRIPTION: Example of using answerWebAppQuery directly as a bot method to respond to web app queries. Returns a SentWebAppMessage object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_web_app_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: SentWebAppMessage = await bot.answer_web_app_query(...)\n```\n\n----------------------------------------\n\nTITLE: Importing ReopenForumTopic Method in Python\nDESCRIPTION: This snippet shows how to import the ReopenForumTopic method from the aiogram library. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.reopen_forum_topic import ReopenForumTopic\nfrom aiogram.methods import ReopenForumTopic\n```\n\n----------------------------------------\n\nTITLE: Using PostStory as Object with Specific Bot\nDESCRIPTION: Shows how to post a story using the PostStory class directly with a bot instance. This approach provides more flexibility and control over the story posting process.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/post_story.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Story = await bot(PostStory(...))\n```\n\n----------------------------------------\n\nTITLE: Using SavePreparedInlineMessage as Bot Method\nDESCRIPTION: Example of calling save_prepared_inline_message directly on a bot instance. Returns a PreparedInlineMessage object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/save_prepared_inline_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: PreparedInlineMessage = await bot.save_prepared_inline_message(...)\n```\n\n----------------------------------------\n\nTITLE: Using PromoteChatMember as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the promote_chat_member method directly on a bot object. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/promote_chat_member.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.promote_chat_member(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Bot Description Using SetMyDescription Object\nDESCRIPTION: Shows how to set a bot's description using the SetMyDescription object with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_description.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetMyDescription(...))\n```\n\n----------------------------------------\n\nTITLE: Using SendGift as Bot Method\nDESCRIPTION: Demonstrates how to call the send_gift method directly on a bot instance. Returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_gift.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.send_gift(...)\n```\n\n----------------------------------------\n\nTITLE: Using unpinAllChatMessages as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the unpinAllChatMessages method directly as a bot method. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_chat_messages.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.unpin_all_chat_messages(...)\n```\n\n----------------------------------------\n\nTITLE: Returning SendDocument in Webhook Handler in Python\nDESCRIPTION: This snippet illustrates how to use SendDocument as a return value in a webhook handler. This approach is useful for responding to incoming updates in a webhook setup.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_document.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendDocument(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Passport Data Errors Using Object Method\nDESCRIPTION: Object-oriented approach to set passport data errors by creating an instance of SetPassportDataErrors and executing it through the bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_passport_data_errors.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetPassportDataErrors(...))\n```\n\n----------------------------------------\n\nTITLE: Using CreateNewStickerSet as an Object with a Specific Bot\nDESCRIPTION: This snippet shows how to import the CreateNewStickerSet class and use it with a specific bot instance using the bot's call method. The method returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_new_sticker_set.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(CreateNewStickerSet(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for Aiogram Chat Module in reStructuredText\nDESCRIPTION: This code snippet configures the autodoc extension to generate documentation for the aiogram.types.chat module. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.chat\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using GetChatMemberCount as object in Python\nDESCRIPTION: Example of using GetChatMemberCount as an object with a specific bot. This approach requires importing the GetChatMemberCount class from aiogram.methods and passing it to the bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_member_count.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: int = await bot(GetChatMemberCount(...))\n```\n\n----------------------------------------\n\nTITLE: Getting Bot Name Using Direct Method\nDESCRIPTION: Example of retrieving bot name using the direct bot method approach. Returns a BotName object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_name.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: BotName = await bot.get_my_name(...)\n```\n\n----------------------------------------\n\nTITLE: Customizing Chat Action Type with Flags - Python\nDESCRIPTION: Demonstrates how to modify the chat action type for a specific handler using the flags decorator.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/chat_action.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@router.message(...)\n@flags.chat_action(\"sticker\")\nasync def my_handler(message: Message): ...\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Sticker Set Using Bot Method\nDESCRIPTION: Direct method to set a chat sticker set using the bot instance. Returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_sticker_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_chat_sticker_set(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetMyDefaultAdministratorRights with Specific Bot\nDESCRIPTION: Object-oriented approach using the SetMyDefaultAdministratorRights class with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_default_administrator_rights.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetMyDefaultAdministratorRights(...))\n```\n\n----------------------------------------\n\nTITLE: Using CreateNewStickerSet as a Webhook Response\nDESCRIPTION: This pattern demonstrates returning a CreateNewStickerSet object directly from a handler function when used with webhooks. This allows responding to Telegram without awaiting the result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_new_sticker_set.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn CreateNewStickerSet(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteBusinessMessages in Webhook Handler\nDESCRIPTION: Shows how to use DeleteBusinessMessages as a return value in a webhook handler for asynchronous processing.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_business_messages.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteBusinessMessages(...)\n```\n\n----------------------------------------\n\nTITLE: Using getChatMember as Object Method in Python\nDESCRIPTION: This snippet shows how to use the GetChatMember method as an object. It requires importing the method from aiogram.methods.get_chat_member or using an alias from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_member.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: ResultChatMemberUnion = await bot(GetChatMember(...))\n```\n\n----------------------------------------\n\nTITLE: Using hideGeneralForumTopic as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the hideGeneralForumTopic method directly on a bot instance. It returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/hide_general_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.hide_general_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: Using getBusinessConnection as bot method in Python\nDESCRIPTION: This snippet demonstrates how to call the getBusinessConnection method directly on a bot instance. It returns a BusinessConnection object containing information about the bot's business connection.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_connection.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: BusinessConnection = await bot.get_business_connection(...)\n```\n\n----------------------------------------\n\nTITLE: Importing ReopenGeneralForumTopic Class in Python\nDESCRIPTION: This snippet shows how to import the ReopenGeneralForumTopic class from the aiogram.methods module. It provides two ways to import: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_general_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.reopen_general_forum_topic import ReopenGeneralForumTopic\n# alias:\nfrom aiogram.methods import ReopenGeneralForumTopic\n```\n\n----------------------------------------\n\nTITLE: Using CloseForumTopic as Object with Specific Bot\nDESCRIPTION: Object-oriented approach using CloseForumTopic class with a specific bot instance. Requires importing CloseForumTopic from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(CloseForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for aiogram Document Module\nDESCRIPTION: This reStructuredText snippet configures Sphinx autodoc to generate documentation for the aiogram.types.document module. It includes all members, orders them by source, includes undocumented members, and excludes model configuration and fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/document.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n########\nDocument\n########\n\n\n.. automodule:: aiogram.types.document\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sending Voice Message as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the send_voice method directly on a bot object. It returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_voice.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_voice(...)\n```\n\n----------------------------------------\n\nTITLE: Using TransferGift as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the transfer_gift method directly on a bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_gift.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.transfer_gift(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetGameScore as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use SetGameScore as a reply in a webhook handler. It returns the SetGameScore object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_game_score.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetGameScore(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteChatPhoto as an Object with Specific Bot in Python\nDESCRIPTION: Usage of DeleteChatPhoto as an object passed to a bot instance. This approach creates a DeleteChatPhoto object and passes it to the bot for execution.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_chat_photo.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteChatPhoto(...))\n```\n\n----------------------------------------\n\nTITLE: Using DeleteWebhook as Object with Bot Instance in Python\nDESCRIPTION: Example of using the DeleteWebhook class with a specific bot instance. This approach involves importing the DeleteWebhook class and passing it to the bot object as a callable.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_webhook.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteWebhook(...))\n```\n\n----------------------------------------\n\nTITLE: Using VerifyChat as an Object with a Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the VerifyChat method as an object with a specific bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_chat.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(VerifyChat(...))\n```\n\n----------------------------------------\n\nTITLE: Using deleteStickerFromSet as Bot Method in Python\nDESCRIPTION: Example of calling the delete_sticker_from_set method directly on a bot instance. This method returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_from_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_sticker_from_set(...)\n```\n\n----------------------------------------\n\nTITLE: Using editChatSubscriptionInviteLink as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the editChatSubscriptionInviteLink method directly on a bot instance. It returns a ChatInviteLink object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_subscription_invite_link.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatInviteLink = await bot.edit_chat_subscription_invite_link(...)\n```\n\n----------------------------------------\n\nTITLE: Using answerPreCheckoutQuery as Bot Method in Python\nDESCRIPTION: Example of using answerPreCheckoutQuery directly as a bot method. This is the simplest way to answer a pre-checkout query and returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_pre_checkout_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.answer_pre_checkout_query(...)\n```\n\n----------------------------------------\n\nTITLE: Closing General Forum Topic in Webhook Handler\nDESCRIPTION: Usage pattern for closing a general forum topic when responding to a webhook in a handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_general_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn CloseGeneralForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Redis and MongoDB\nDESCRIPTION: Executes tests with Redis and MongoDB storage backends\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npytest --redis redis://<host>:<port>/<db> --mongo mongodb://<user>:<password>@<host>:<port> tests\n```\n\n----------------------------------------\n\nTITLE: Using RemoveChatVerification as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the remove_chat_verification method directly on a bot instance. It returns a boolean result indicating success or failure of the operation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_chat_verification.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.remove_chat_verification(...)\n```\n\n----------------------------------------\n\nTITLE: Using RemoveUserVerification as Bot Method\nDESCRIPTION: Shows how to call remove_user_verification directly as a bot method, which returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_user_verification.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.remove_user_verification(...)\n```\n\n----------------------------------------\n\nTITLE: Importing EditChatSubscriptionInviteLink in Python\nDESCRIPTION: This snippet shows two ways to import the EditChatSubscriptionInviteLink class from the aiogram library. It can be imported directly or using an alias.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_subscription_invite_link.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.edit_chat_subscription_invite_link import EditChatSubscriptionInviteLink\nfrom aiogram.methods import EditChatSubscriptionInviteLink\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhook Info Using GetWebhookInfo Class in Python\nDESCRIPTION: This snippet shows how to use the GetWebhookInfo class to retrieve webhook information with a specific bot instance. It imports the necessary class and executes it using the bot object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_webhook_info.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: WebhookInfo = await bot(GetWebhookInfo(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for GiftInfo in aiogram\nDESCRIPTION: This snippet configures Sphinx's automodule directive to generate documentation for the GiftInfo module in aiogram. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/gift_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.gift_info\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sending Location Using SendLocation Object\nDESCRIPTION: Shows how to send a location using the SendLocation class with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_location.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendLocation(...))\n```\n\n----------------------------------------\n\nTITLE: Using SetStickerPositionInSet as a Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the SetStickerPositionInSet method as a reply in a webhook handler. It returns the method call directly, which will be processed by the framework.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_position_in_set.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetStickerPositionInSet(...)\n```\n\n----------------------------------------\n\nTITLE: Importing Close Method as Object in Python\nDESCRIPTION: Shows how to import the Close method as an object. Two import options are provided: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.close import Close\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import Close\n```\n\n----------------------------------------\n\nTITLE: Using SetGameScore with Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the SetGameScore method with a specific bot instance. It returns a Union of Message or boolean.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_game_score.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot(SetGameScore(...))\n```\n\n----------------------------------------\n\nTITLE: Using GetChat as Object with Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the GetChat method as an object with a specific bot. It requires importing the GetChat class from aiogram.methods.get_chat or aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatFullInfo = await bot(GetChat(...))\n```\n\n----------------------------------------\n\nTITLE: Using SetUserEmojiStatus as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the SetUserEmojiStatus method directly as a bot method. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_user_emoji_status.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_user_emoji_status(...)\n```\n\n----------------------------------------\n\nTITLE: Using Gift Premium Subscription as Object with Specific Bot\nDESCRIPTION: Shows how to use the GiftPremiumSubscription class with a bot instance using the call syntax. Requires importing the GiftPremiumSubscription class.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/gift_premium_subscription.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(GiftPremiumSubscription(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for Aiogram Gifts Module\nDESCRIPTION: This reStructuredText directive configures Sphinx autodoc to generate documentation for the aiogram.types.gifts module. It includes all members, orders them by source, includes undocumented members, and excludes specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/gifts.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.gifts\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using LogOut as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the logOut method directly on a bot object. It returns a boolean result indicating the success of the operation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/log_out.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.log_out(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountBio as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the SetBusinessAccountBio method as a reply in a webhook handler. It returns the SetBusinessAccountBio object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_bio.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetBusinessAccountBio(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetMessageReaction as Bot Method\nDESCRIPTION: Direct usage of setMessageReaction method through the bot instance. Returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_message_reaction.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_message_reaction(...)\n```\n\n----------------------------------------\n\nTITLE: Using ReplaceStickerInSet as a Webhook Reply in Python\nDESCRIPTION: This snippet illustrates how to use the ReplaceStickerInSet method as a reply in a webhook handler. It directly returns the ReplaceStickerInSet object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/replace_sticker_in_set.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn ReplaceStickerInSet(...)\n```\n\n----------------------------------------\n\nTITLE: Using CopyMessages with Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the CopyMessages method with a specific bot instance. It returns a list of MessageId objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_messages.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: list[MessageId] = await bot(CopyMessages(...))\n```\n\n----------------------------------------\n\nTITLE: Using banChatSenderChat as Bot Method in Python\nDESCRIPTION: Demonstrates how to use the banChatSenderChat method directly with a bot object. This method returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_sender_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.ban_chat_sender_chat(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditUserStarSubscription as an Object with a Specific Bot in Python\nDESCRIPTION: Shows how to use the EditUserStarSubscription class with a bot instance by passing it as an argument to the bot. This approach also returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_user_star_subscription.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(EditUserStarSubscription(...))\n```\n\n----------------------------------------\n\nTITLE: Handling Commands with Regular Expressions in aiogram\nDESCRIPTION: Using regular expressions with Command filter to handle dynamic commands that follow a pattern. This example matches commands like 'item_1', 'item_2', etc.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/command.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCommand(re.compile(r\"item_(\\d+)\"))\n```\n\n----------------------------------------\n\nTITLE: Using RevokeChatInviteLink in Webhook Handler\nDESCRIPTION: Implementation for webhook handlers where the RevokeChatInviteLink object is returned directly to be processed by the framework.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/revoke_chat_invite_link.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn RevokeChatInviteLink(...)\n```\n\n----------------------------------------\n\nTITLE: Using BanChatSenderChat as Object with Specific Bot in Python\nDESCRIPTION: Shows how to use the BanChatSenderChat method as an object with a specific bot. This approach uses the method by passing it to the bot object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_sender_chat.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(BanChatSenderChat(...))\n```\n\n----------------------------------------\n\nTITLE: Using RevokeChatInviteLink as Object\nDESCRIPTION: Object-oriented approach to revoke a chat invite link by creating a RevokeChatInviteLink instance and passing it to the bot. Returns a ChatInviteLink object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/revoke_chat_invite_link.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatInviteLink = await bot(RevokeChatInviteLink(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for GiveawayWinners in RST\nDESCRIPTION: This RST code configures Sphinx's automodule directive to generate documentation for the GiveawayWinners class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/giveaway_winners.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.giveaway_winners\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using SendPaidMedia as Object with Specific Bot\nDESCRIPTION: Object-oriented approach to send paid media by creating a SendPaidMedia instance and passing it to the bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_paid_media.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendPaidMedia(...))\n```\n\n----------------------------------------\n\nTITLE: Using LogOut as a Reply in a Webhook Handler in Python\nDESCRIPTION: This snippet illustrates how to use the LogOut method as a reply in a webhook handler. It simply returns the LogOut object, which can be processed by the Aiogram framework.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/log_out.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn LogOut(...)\n```\n\n----------------------------------------\n\nTITLE: Using getUserChatBoosts as an Object with a Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the GetUserChatBoosts method as an object with a specific bot instance. It returns a UserChatBoosts object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_user_chat_boosts.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: UserChatBoosts = await bot(GetUserChatBoosts(...))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bot Description Using Method Object\nDESCRIPTION: Shows how to get a bot's description using the GetMyDescription method object. Requires importing GetMyDescription from aiogram.methods and returns a BotDescription object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_description.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: BotDescription = await bot(GetMyDescription(...))\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountName as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the SetBusinessAccountName method directly as a bot method. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_name.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_business_account_name(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Bot Name as Webhook Handler Response\nDESCRIPTION: Demonstrates how to use SetMyName as a response in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_name.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetMyName(...)\n```\n\n----------------------------------------\n\nTITLE: Using setGameScore as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the setGameScore method directly as a bot method. It returns a Union of Message or boolean.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_game_score.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot.set_game_score(...)\n```\n\n----------------------------------------\n\nTITLE: Inverting Filter Results with Magic Filters\nDESCRIPTION: Demonstrates how to invert any operation result using the bitwise inversion operator.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n~F.text  # lambda message: not message.text\n~F.text.startswith('spam')  # lambda message: not message.text.startswith('spam')\n```\n\n----------------------------------------\n\nTITLE: Getting Bot Name Using Object Method\nDESCRIPTION: Example of retrieving bot name using the GetMyName class object approach. This method requires importing the GetMyName class and passing it to the bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_name.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: BotName = await bot(GetMyName(...))\n```\n\n----------------------------------------\n\nTITLE: Importing MagicData in aiogram\nDESCRIPTION: Shows how to import the MagicData filter class in aiogram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_data.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.filters import MagicData\n```\n\n----------------------------------------\n\nTITLE: Installing Aiogram from Arch Linux Repository\nDESCRIPTION: Installs Aiogram using Arch Linux package manager pacman. Note that this package may be outdated compared to PyPI version.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/install.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npacman -S python-aiogram\n```\n\n----------------------------------------\n\nTITLE: Using AnswerPreCheckoutQuery as an Object with a Specific Bot in Python\nDESCRIPTION: Example of using the AnswerPreCheckoutQuery class as an object with a specific bot instance. This approach allows for more flexibility when organizing code.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_pre_checkout_query.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(AnswerPreCheckoutQuery(...))\n```\n\n----------------------------------------\n\nTITLE: Using EditStory as an object with a specific bot in aiogram\nDESCRIPTION: Example showing how to edit a story by passing an EditStory object to a bot instance. This approach provides an alternative syntax for the same functionality.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_story.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Story = await bot(EditStory(...))\n```\n\n----------------------------------------\n\nTITLE: Documenting DefaultKeyBuilder Class in Python\nDESCRIPTION: Autodocumentation for the DefaultKeyBuilder class from aiogram.fsm.storage.base module, including all members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#2025-04-17_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: aiogram.fsm.storage.base.DefaultKeyBuilder\n    :members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Using GetForumTopicIconStickers as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the get_forum_topic_icon_stickers method directly on a bot instance. It returns a list of Sticker objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_forum_topic_icon_stickers.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: list[Sticker] = await bot.get_forum_topic_icon_stickers(...)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for InputMediaAnimation\nDESCRIPTION: ReStructuredText documentation configuration for the InputMediaAnimation module that specifies documentation generation parameters including member ordering and exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_media_animation.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n###################\nInputMediaAnimation\n###################\n\n\n.. automodule:: aiogram.types.input_media_animation\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountUsername as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the SetBusinessAccountUsername method directly as a bot method. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_username.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_business_account_username(...)\n```\n\n----------------------------------------\n\nTITLE: Importing SetStickerKeywords Class in Python\nDESCRIPTION: This snippet shows how to import the SetStickerKeywords class from the aiogram library. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_keywords.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_sticker_keywords import SetStickerKeywords\nfrom aiogram.methods import SetStickerKeywords\n```\n\n----------------------------------------\n\nTITLE: Using RefundStarPayment as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the RefundStarPayment method directly as a bot method. It returns a boolean result indicating the success of the operation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/refund_star_payment.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.refund_star_payment(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Video Note as Bot Method in Python\nDESCRIPTION: Demonstrates how to use the send_video_note method directly on a bot instance. This is the simplest way to send a video note using aiogram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video_note.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_video_note(...)\n```\n\n----------------------------------------\n\nTITLE: Using StopPoll as Object with Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the StopPoll method as an object with a specific bot. It requires importing StopPoll from aiogram.methods.stop_poll or aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/stop_poll.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Poll = await bot(StopPoll(...))\n```\n\n----------------------------------------\n\nTITLE: Using GetBusinessAccountStarBalance as an Object in Python\nDESCRIPTION: This snippet shows how to use the GetBusinessAccountStarBalance method as an object. It includes import statements and demonstrates usage with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_account_star_balance.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.get_business_account_star_balance import GetBusinessAccountStarBalance\n# alias: from aiogram.methods import GetBusinessAccountStarBalance\n\nresult: StarAmount = await bot(GetBusinessAccountStarBalance(...))\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation for InputProfilePhoto in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the InputProfilePhoto module. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_profile_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.input_profile_photo\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using setStickerEmojiList as Object Method\nDESCRIPTION: Implementation using the SetStickerEmojiList class directly with a specific bot instance. Returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_emoji_list.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetStickerEmojiList(...))\n```\n\n----------------------------------------\n\nTITLE: Using GetAvailableGifts as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the get_available_gifts method directly on a bot instance. It returns a Gifts object containing the available gifts.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_available_gifts.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Gifts = await bot.get_available_gifts(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Location Using Bot Method\nDESCRIPTION: Demonstrates how to send a location directly using the bot instance method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_location.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_location(...)\n```\n\n----------------------------------------\n\nTITLE: Using UnbanChatMember as Object\nDESCRIPTION: Object-oriented approach using the UnbanChatMember class with a specific bot instance. This method provides more flexibility and reusability.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_member.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(UnbanChatMember(...))\n```\n\n----------------------------------------\n\nTITLE: Using RemoveUserVerification with Specific Bot Instance\nDESCRIPTION: Demonstrates how to use the RemoveUserVerification class with a specific bot instance by passing it as a method call, returning a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_user_verification.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(RemoveUserVerification(...))\n```\n\n----------------------------------------\n\nTITLE: Using ReopenForumTopic as a Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the ReopenForumTopic method as a reply in a webhook handler. It returns the ReopenForumTopic object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_forum_topic.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn ReopenForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteBusinessMessages as Bot Method\nDESCRIPTION: Example showing how to call deleteBusinessMessages directly as a bot method. Returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_business_messages.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_business_messages(...)\n```\n\n----------------------------------------\n\nTITLE: Requirements File References - Python\nDESCRIPTION: References to project dependency files.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nrequirements.txt\ndev_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using Gift Premium Subscription as Webhook Reply\nDESCRIPTION: Demonstrates how to return a GiftPremiumSubscription object directly in a webhook handler response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/gift_premium_subscription.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn GiftPremiumSubscription(...)\n```\n\n----------------------------------------\n\nTITLE: Using CopyMessages as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the CopyMessages method as a reply in a webhook handler. It returns the CopyMessages object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_messages.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn CopyMessages(...)\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Verification Method - Python\nDESCRIPTION: Example showing how to verify a user using VerifyUser class instance with a specific bot\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_user.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(VerifyUser(...))\n```\n\n----------------------------------------\n\nTITLE: RST Auto-Documentation Directive for InputStoryContentPhoto\nDESCRIPTION: Sphinx documentation configuration directive for the InputStoryContentPhoto module, specifying to include all members sorted by source, including undocumented members but excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_story_content_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.input_story_content_photo\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Title Using Bot Method\nDESCRIPTION: Direct method to set a chat title using the bot instance. Returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_title.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_chat_title(...)\n```\n\n----------------------------------------\n\nTITLE: Generating ContentType Enum Documentation using Sphinx\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the ContentType enum in the aiogram.enums.content_type module. It includes all members, orders them by source, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/content_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.enums.content_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Using UnpinAllForumTopicMessages as Bot Method\nDESCRIPTION: Example showing how to use the unpin_all_forum_topic_messages method directly on a bot instance. Returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_forum_topic_messages.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.unpin_all_forum_topic_messages(...)\n```\n\n----------------------------------------\n\nTITLE: Using LeaveChat as Object with Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the LeaveChat method as an object with a specific bot. It requires importing LeaveChat from aiogram.methods.leave_chat or aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/leave_chat.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(LeaveChat(...))\n```\n\n----------------------------------------\n\nTITLE: Using DeleteBusinessMessages with Specific Bot Instance\nDESCRIPTION: Demonstrates how to use DeleteBusinessMessages by passing it to a bot instance. This approach uses the object-oriented implementation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_business_messages.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteBusinessMessages(...))\n```\n\n----------------------------------------\n\nTITLE: Using GetBusinessAccountGifts as Bot Method\nDESCRIPTION: Example showing how to call getBusinessAccountGifts directly as a bot method. Returns an OwnedGifts object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_account_gifts.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: OwnedGifts = await bot.get_business_account_gifts(...)\n```\n\n----------------------------------------\n\nTITLE: Using UnpinAllChatMessages as a Reply in a Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use the UnpinAllChatMessages method as a reply within a webhook handler. It returns the UnpinAllChatMessages object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_chat_messages.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn UnpinAllChatMessages(...)\n```\n\n----------------------------------------\n\nTITLE: Using setStickerEmojiList as Bot Method\nDESCRIPTION: Direct usage of setStickerEmojiList method through the bot instance. Returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_emoji_list.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_sticker_emoji_list(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetMyShortDescription as Webhook Reply in Python Handler\nDESCRIPTION: This snippet demonstrates how to use the SetMyShortDescription method as a reply in a webhook handler. It returns the SetMyShortDescription object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_short_description.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetMyShortDescription(...)\n```\n\n----------------------------------------\n\nTITLE: Documenting BaseStorage Class in Python\nDESCRIPTION: Autodocumentation for the BaseStorage class from aiogram.fsm.storage.base module, including all members for custom storage implementation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#2025-04-17_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: aiogram.fsm.storage.base.BaseStorage\n    :members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountUsername as Webhook Reply in Python\nDESCRIPTION: This snippet demonstrates how to use SetBusinessAccountUsername as a reply in a webhook handler. It directly returns the SetBusinessAccountUsername object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_username.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetBusinessAccountUsername(...)\n```\n\n----------------------------------------\n\nTITLE: Returning SendVideoNote Object in Webhook Handler in Python\nDESCRIPTION: Demonstrates how to return a SendVideoNote object directly from a webhook handler. This is useful for asynchronous responses in webhook-based bots.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video_note.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendVideoNote(...)\n```\n\n----------------------------------------\n\nTITLE: Using CreateChatSubscriptionInviteLink as an Object with a Specific Bot in Python\nDESCRIPTION: Creates a subscription invite link by passing the CreateChatSubscriptionInviteLink method object to a bot instance. This approach allows more flexibility when working with multiple bots.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_subscription_invite_link.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatInviteLink = await bot(CreateChatSubscriptionInviteLink(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for MessageId in aiogram\nDESCRIPTION: This snippet configures Sphinx's automodule directive to generate documentation for the MessageId class in aiogram. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_id.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.message_id\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using declineChatJoinRequest as bot method in Python\nDESCRIPTION: This snippet demonstrates how to call the decline_chat_join_request method directly from a bot instance. The method returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/decline_chat_join_request.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.decline_chat_join_request(...)\n```\n\n----------------------------------------\n\nTITLE: Documenting EncryptedPassportElement Enum in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the EncryptedPassportElement enum. It includes all members, orders them by source, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/encrypted_passport_element.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.enums.encrypted_passport_element\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Using PromoteChatMember as an Object with a Specific Bot in Python\nDESCRIPTION: This example shows how to use the PromoteChatMember method as an object with a specific bot. It requires importing the PromoteChatMember class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/promote_chat_member.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(PromoteChatMember(...))\n```\n\n----------------------------------------\n\nTITLE: Importing URLInputFile for URL Uploads in Python\nDESCRIPTION: Shows how to import the URLInputFile class for uploading files from URLs\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/upload_file.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.types import URLInputFile\n```\n\n----------------------------------------\n\nTITLE: Using EditGeneralForumTopic with a Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the EditGeneralForumTopic class with a specific bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_general_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(EditGeneralForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Using LeaveChat as Reply in Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use the LeaveChat method as a reply in a webhook handler. It returns the LeaveChat object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/leave_chat.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn LeaveChat(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for ReactionTypeCustomEmoji in aiogram\nDESCRIPTION: Sphinx autodoc directive for the ReactionTypeCustomEmoji class in aiogram. The configuration excludes model_config and model_fields from documentation while including all other members ordered by their appearance in the source code.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/reaction_type_custom_emoji.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.reaction_type_custom_emoji\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using DeleteForumTopic with Specific Bot in Python\nDESCRIPTION: This example shows how to use the DeleteForumTopic method with a specific bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Using delete_sticker_set as bot method in Python\nDESCRIPTION: Example of directly using the delete_sticker_set method with a bot instance. Returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_sticker_set(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Video Note Using SendVideoNote Object in Python\nDESCRIPTION: Shows how to use the SendVideoNote class as an object to send a video note. This method allows for more flexibility and can be used with specific bot instances.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video_note.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendVideoNote(...))\n```\n\n----------------------------------------\n\nTITLE: Setting Business Profile Photo Using Bot Method\nDESCRIPTION: Direct method call using the bot instance to set a business account profile photo.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_profile_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_business_account_profile_photo(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetChatMenuButton with Specific Bot Instance\nDESCRIPTION: Shows how to use SetChatMenuButton by calling it on a specific bot instance after importing the method. Returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_menu_button.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetChatMenuButton(...))\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Sticker Set Using SetChatStickerSet Object\nDESCRIPTION: Object-oriented approach to set a chat sticker set by creating a SetChatStickerSet instance and executing it with a bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_sticker_set.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetChatStickerSet(...))\n```\n\n----------------------------------------\n\nTITLE: Documenting RedisStorage Class in Python\nDESCRIPTION: Autodocumentation for the RedisStorage class from aiogram.fsm.storage.redis module, covering __init__ and from_url methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: aiogram.fsm.storage.redis.RedisStorage\n    :members: __init__, from_url\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Using RemoveBusinessAccountProfilePhoto as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the RemoveBusinessAccountProfilePhoto method as a reply in a webhook handler. It returns the method object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_business_account_profile_photo.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn RemoveBusinessAccountProfilePhoto(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditStory as a reply to a Webhook in aiogram handlers\nDESCRIPTION: Example showing how to return an EditStory object directly from a handler, which will be used as a reply to a webhook request.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_story.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn EditStory(...)\n```\n\n----------------------------------------\n\nTITLE: Using GetCustomEmojiStickers as an Object with Specific Bot\nDESCRIPTION: Example of using the GetCustomEmojiStickers method as an object passed to a bot instance, with required imports.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_custom_emoji_stickers.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: list[Sticker] = await bot(GetCustomEmojiStickers(...))\n```\n\n----------------------------------------\n\nTITLE: Using deleteWebhook as Bot Method in Python\nDESCRIPTION: Example of calling the deleteWebhook method directly on a bot instance. This method returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_webhook.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_webhook(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for ShippingAddress Module in RST\nDESCRIPTION: RST directive that configures how the documentation for the aiogram.types.shipping_address module should be automatically generated, including which members to include and exclude.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/shipping_address.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.shipping_address\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using UnbanChatSenderChat Method with Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the UnbanChatSenderChat method with a specific bot instance. It returns a boolean indicating the success of the operation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_sender_chat.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(UnbanChatSenderChat(...))\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for TopicIconColor Enumeration\nDESCRIPTION: Sphinx directives to automatically generate documentation for the TopicIconColor enumeration in the aiogram.enums.topic_icon_color module. The configuration includes all members, orders them by source order, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/topic_icon_color.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.enums.topic_icon_color\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Getting Full Command from Message with Caption in Python\nDESCRIPTION: Fixed the Message.get_full_command method for messages with captions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Fixed for messages with captions\nMessage.get_full_command()\n```\n\n----------------------------------------\n\nTITLE: Using RemoveChatVerification with Specific Bot in Python\nDESCRIPTION: This example shows how to use the RemoveChatVerification method with a specific bot instance. It's called using the bot's call method and returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_chat_verification.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(RemoveChatVerification(...))\n```\n\n----------------------------------------\n\nTITLE: Using SetStickerKeywords with Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the SetStickerKeywords method with a specific bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_keywords.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetStickerKeywords(...))\n```\n\n----------------------------------------\n\nTITLE: Using DeclineChatJoinRequest as a webhook response in Python\nDESCRIPTION: This snippet demonstrates how to use the DeclineChatJoinRequest method as a return value in a webhook handler. This approach allows for efficient response handling in webhook-based bots.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/decline_chat_join_request.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeclineChatJoinRequest(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditChatSubscriptionInviteLink as a Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the EditChatSubscriptionInviteLink method as a reply in a webhook handler. It directly returns the method call.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_subscription_invite_link.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn EditChatSubscriptionInviteLink(...)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bot Description Using Direct Method\nDESCRIPTION: Demonstrates how to get a bot's description using the direct bot method approach. Returns a BotDescription object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_description.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: BotDescription = await bot.get_my_description(...)\n```\n\n----------------------------------------\n\nTITLE: Using UnhideGeneralForumTopic with a Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the UnhideGeneralForumTopic class with a specific bot instance. It returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unhide_general_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(UnhideGeneralForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Documenting KeyBuilder Class in Python\nDESCRIPTION: Autodocumentation for the KeyBuilder class from aiogram.fsm.storage.base module, including all members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: aiogram.fsm.storage.base.KeyBuilder\n    :members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Using Close Method as Webhook Reply in Python\nDESCRIPTION: Shows how to use the Close method as a reply in a webhook handler. This usage is typically for returning the Close method directly from a handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn Close(...)\n```\n\n----------------------------------------\n\nTITLE: Using UnhideGeneralForumTopic as a Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use UnhideGeneralForumTopic as a reply in a webhook handler. It returns the UnhideGeneralForumTopic object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unhide_general_forum_topic.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn UnhideGeneralForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: Building Translated Documentation\nDESCRIPTION: Builds the documentation for a specific language with live preview\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-autobuild --watch aiogram/ docs/ docs/_build/ -D language=<language_code>\n```\n\n----------------------------------------\n\nTITLE: Using VerifyChat as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the VerifyChat method directly as a bot method. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.verify_chat(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for UniqueGiftBackdrop in RST\nDESCRIPTION: This snippet configures Sphinx to auto-document the UniqueGiftBackdrop class from the aiogram.types.unique_gift_backdrop module. It includes all members, sorts them by source order, and includes undocumented members while excluding model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/unique_gift_backdrop.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##################\nUniqueGiftBackdrop\n##################\n\n\n.. automodule:: aiogram.types.unique_gift_backdrop\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Advanced Formatting in Telegram Bot\nDESCRIPTION: Shows the HTML representation of the advanced formatting example. This is the actual HTML that would be sent to Telegram to render the formatted message.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/formatting.rst#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<b>Success:</b>\n✅ Test 1\n✅ Test 3\n✅ Test 4\n\n<b>Failed:</b>\n❌ Test 2\n\n<b>Summary:</b>\n  <b>Total:</b> 4\n  <b>Success:</b> 3\n  <b>Failed:</b> 1\n\n#test\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for InputStoryContentType enumeration in reStructuredText\nDESCRIPTION: Sphinx documentation configuration for the InputStoryContentType enumeration in the aiogram.enums.input_story_content_type module. It uses the automodule directive to automatically generate API documentation for all members, including undocumented ones, ordered by their appearance in the source code.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/input_story_content_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.enums.input_story_content_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Using getChatMenuButton as a bot method in Python\nDESCRIPTION: This snippet demonstrates how to call the getChatMenuButton method directly on a bot instance. The method returns menu button settings as ResultMenuButtonUnion.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_menu_button.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ResultMenuButtonUnion = await bot.get_chat_menu_button(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Removed Chat Boost Updates in aiogram\nDESCRIPTION: Example of handling removed chat boost updates in a Telegram bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@router.removed_chat_boost()\nasync def removed_chat_boost_handler(removed_chat_boost: types.ChatBoostRemoved) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Fixing HTML Text Decorations for pre Tag in Python\nDESCRIPTION: Fixed HTML text decorations for the pre tag.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# Fixed HTML decoration\n\"<pre>code</pre>\"\n```\n\n----------------------------------------\n\nTITLE: Using RemoveChatVerification as Webhook Reply in Python\nDESCRIPTION: This snippet demonstrates how to use RemoveChatVerification as a reply in a webhook handler. It directly returns the RemoveChatVerification object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_chat_verification.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn RemoveChatVerification(...)\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive that auto-documents the video_chat_participants_invited module from aiogram.types package, showing all members ordered by source appearance and including undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/video_chat_participants_invited.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.video_chat_participants_invited\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using DeleteChatStickerSet as an Object with Specific Bot\nDESCRIPTION: Shows how to use the DeleteChatStickerSet as a method object passed to the bot instance. This approach allows for more flexibility when organizing code and handling multiple API calls.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_chat_sticker_set.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteChatStickerSet(...))\n```\n\n----------------------------------------\n\nTITLE: Using BanChatMember as a Reply in Webhook Handler in Python\nDESCRIPTION: Demonstrates how to use BanChatMember method as a direct return value in a webhook handler. This is useful for responding to updates in webhook mode.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_member.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn BanChatMember(...)\n```\n\n----------------------------------------\n\nTITLE: Importing Bot class in Python from aiogram\nDESCRIPTION: Shows how to import the Bot class from the aiogram package. This is the first step required to create a bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/bot.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import Bot\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountGiftSettings in Webhook Handler\nDESCRIPTION: Demonstrates how to return SetBusinessAccountGiftSettings as a response in a webhook handler\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_gift_settings.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetBusinessAccountGiftSettings(...)\n```\n\n----------------------------------------\n\nTITLE: Using getMyShortDescription as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the getMyShortDescription method directly on a bot instance. It returns a BotShortDescription object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_short_description.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: BotShortDescription = await bot.get_my_short_description(...)\n```\n\n----------------------------------------\n\nTITLE: Using TransferGift as Webhook Reply in Python Handler\nDESCRIPTION: This snippet illustrates how to use the TransferGift method as a reply in a webhook handler. It directly returns the TransferGift object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_gift.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn TransferGift(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for PassportElementErrorTranslationFiles\nDESCRIPTION: Sphinx configuration directive to automatically generate documentation for the passport element error translation files module with specific member ordering and exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/passport_element_error_translation_files.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.passport_element_error_translation_files\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Object Creation from Dictionary (Version 3.x)\nDESCRIPTION: Example showing how to create a Telegram Message object from a dictionary in aiogram 3.x using pydantic validation\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage_dict = {\"id\": 42, ...}\nmessage_obj = Message.model_validate(message_dict)\nprint(message_obj)\n# id=42 name='n' ...\nprint(type(message_obj))\n# <class 'aiogram.types.message.Message'>\n```\n\n----------------------------------------\n\nTITLE: Using ForwardMessages as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use ForwardMessages as a reply in a webhook handler. It returns the ForwardMessages object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_messages.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn ForwardMessages(...)\n```\n\n----------------------------------------\n\nTITLE: Using ConvertGiftToStars as an Object with Specific Bot\nDESCRIPTION: Example showing how to use the ConvertGiftToStars class as an object and pass it to a bot instance for execution. This approach allows for more flexibility when constructing the method call.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/convert_gift_to_stars.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(ConvertGiftToStars(...))\n```\n\n----------------------------------------\n\nTITLE: Using SendGift in Webhook Handler\nDESCRIPTION: Demonstrates how to return a SendGift object directly from a webhook handler for reply purposes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_gift.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendGift(...)\n```\n\n----------------------------------------\n\nTITLE: Documenting MenuButtonType Enumeration with Sphinx in reStructuredText\nDESCRIPTION: This code snippet uses Sphinx documentation directives to automatically generate API documentation for the MenuButtonType enumeration in the aiogram framework. It includes all members in source order and displays undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/menu_button_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##############\nMenuButtonType\n##############\n\n\n.. automodule:: aiogram.enums.menu_button_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Importing SetGameScore Class in Python\nDESCRIPTION: This snippet shows how to import the SetGameScore class from the aiogram library. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_game_score.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_game_score import SetGameScore\n# alias:\nfrom aiogram.methods import SetGameScore\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for BotCommandScopeChatMember\nDESCRIPTION: RST directives for configuring Sphinx documentation autogeneration for the BotCommandScopeChatMember class, including member ordering and exclusion settings.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/bot_command_scope_chat_member.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.bot_command_scope_chat_member\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Accessing new Chat fields in Python\nDESCRIPTION: Example of accessing the new unrestrict_boost_count and custom_emoji_sticker_set_name fields added to the Chat class in this release.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nunrestrict_boost_count = chat.unrestrict_boost_count\ncustom_emoji_set = chat.custom_emoji_sticker_set_name\n```\n\n----------------------------------------\n\nTITLE: Using SendPaidMedia as Bot Method\nDESCRIPTION: Direct usage of send_paid_media method through the bot instance to send paid media content.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_paid_media.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot.send_paid_media(...)\n```\n\n----------------------------------------\n\nTITLE: Using StopPoll as Reply in Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use the StopPoll method as a reply in a webhook handler. It directly returns the StopPoll object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/stop_poll.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn StopPoll(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Business Profile Photo in Webhook Handler\nDESCRIPTION: Returning the SetBusinessAccountProfilePhoto object directly in a webhook handler response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_profile_photo.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetBusinessAccountProfilePhoto(...)\n```\n\n----------------------------------------\n\nTITLE: Importing ForwardMessages Class in Python\nDESCRIPTION: This snippet shows how to import the ForwardMessages class from the aiogram.methods module. It provides two ways to import: the full path and an alias.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_messages.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.forward_messages import ForwardMessages\n# alias:\nfrom aiogram.methods import ForwardMessages\n```\n\n----------------------------------------\n\nTITLE: Using upgradeGift as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the upgradeGift method directly on a bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upgrade_gift.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.upgrade_gift(...)\n```\n\n----------------------------------------\n\nTITLE: Using UnpinAllForumTopicMessages as Object with Specific Bot\nDESCRIPTION: Example demonstrating how to use UnpinAllForumTopicMessages by passing it to a bot instance. The method returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_forum_topic_messages.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(UnpinAllForumTopicMessages(...))\n```\n\n----------------------------------------\n\nTITLE: RST Directive for InlineQueryResultCachedPhoto Documentation\nDESCRIPTION: Sphinx RST directive to auto-generate documentation for the InlineQueryResultCachedPhoto module, including all members except model_config and model_fields, ordered by source appearance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_cached_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_cached_photo\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Exception Class Names - Python\nDESCRIPTION: Custom exception classes for error handling.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nChatIdIsEmpty\nNotEnoughRightsToRestrict\n```\n\n----------------------------------------\n\nTITLE: Using ExportChatInviteLink as a Webhook Reply in Python\nDESCRIPTION: This snippet demonstrates how to use the ExportChatInviteLink method as a reply in a webhook handler. It returns the ExportChatInviteLink object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/export_chat_invite_link.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn ExportChatInviteLink(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetMyShortDescription as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the SetMyShortDescription method directly on a bot object. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_short_description.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_my_short_description(...)\n```\n\n----------------------------------------\n\nTITLE: Documenting FSMStrategy Class with Sphinx in reStructuredText\nDESCRIPTION: A Sphinx autoclass directive that generates documentation for the FSMStrategy enumeration class, including all of its members. This directive instructs the documentation generator to pull class documentation from the aiogram.fsm.strategy.FSMStrategy source code.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/strategy.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: aiogram.fsm.strategy.FSMStrategy\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Direct API Example Include\nDESCRIPTION: RST directive to include example of direct Bot API usage without dispatcher\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/index.rst#2025-04-17_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: ../examples/without_dispatcher.py\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ForumTopicReopened Class in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the ForumTopicReopened class. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/forum_topic_reopened.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.forum_topic_reopened\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing EditMessageLiveLocation Method in Python\nDESCRIPTION: This snippet shows two ways to import the EditMessageLiveLocation method: directly from its module or as an alias from the aiogram.methods package.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_live_location.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.edit_message_live_location import EditMessageLiveLocation\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import EditMessageLiveLocation\n```\n\n----------------------------------------\n\nTITLE: Using UnbanChatMember in Webhook Handler\nDESCRIPTION: Implementation for webhook handlers where the method is returned directly. Useful for webhook-based bot implementations.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_member.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn UnbanChatMember(...)\n```\n\n----------------------------------------\n\nTITLE: Importing ReadBusinessMessage in Python\nDESCRIPTION: This snippet shows how to import the ReadBusinessMessage method. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/read_business_message.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.read_business_message import ReadBusinessMessage\n# alias:\nfrom aiogram.methods import ReadBusinessMessage\n```\n\n----------------------------------------\n\nTITLE: Using ReopenGeneralForumTopic with Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the ReopenGeneralForumTopic class with a specific bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_general_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(ReopenGeneralForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Admin Rights Using Bot Method\nDESCRIPTION: Example of retrieving default administrator rights using the direct bot method approach. Returns ChatAdministratorRights object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_default_administrator_rights.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatAdministratorRights = await bot.get_my_default_administrator_rights(...)\n```\n\n----------------------------------------\n\nTITLE: Using Direct Bot Method in Python\nDESCRIPTION: Demonstrates how to set a chat administrator's custom title using the direct bot method call, which returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_administrator_custom_title.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_chat_administrator_custom_title(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetChatMenuButton in Webhook Handler\nDESCRIPTION: Demonstrates how to use SetChatMenuButton as a return value in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_menu_button.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetChatMenuButton(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditChatInviteLink as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the edit_chat_invite_link method directly on a bot object. It returns a ChatInviteLink object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_invite_link.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatInviteLink = await bot.edit_chat_invite_link(...)\n```\n\n----------------------------------------\n\nTITLE: Using Bot as Context Manager in Python\nDESCRIPTION: Demonstrates the new context manager interface for the Bot class, allowing direct use of 'async with Bot(...)' instead of 'async with Bot(...).context()'.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with Bot(...) as bot:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using editGeneralForumTopic as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the editGeneralForumTopic method directly as a bot method. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_general_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.edit_general_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: Attaching Existing Markup to InlineKeyboardBuilder in Aiogram\nDESCRIPTION: This code shows how to attach an existing InlineKeyboardMarkup to an InlineKeyboardBuilder instance using the from_markup method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmarkup = InlineKeyboardMarkup(inline_keyboard=[...])  # Some markup\nbuilder.attach(InlineKeyboardBuilder.from_markup(markup))\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ChatLocation Class in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the ChatLocation class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_location.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.chat_location\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Setting Passport Data Errors Using Bot Method\nDESCRIPTION: Direct method to set passport data errors using the bot instance. Returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_passport_data_errors.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_passport_data_errors(...)\n```\n\n----------------------------------------\n\nTITLE: Using getUserChatBoosts as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the getUserChatBoosts method directly on a bot object. It returns a UserChatBoosts object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_user_chat_boosts.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: UserChatBoosts = await bot.get_user_chat_boosts(...)\n```\n\n----------------------------------------\n\nTITLE: Using removeBusinessAccountProfilePhoto as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the removeBusinessAccountProfilePhoto method directly as a bot method. It returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_business_account_profile_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.remove_business_account_profile_photo(...)\n```\n\n----------------------------------------\n\nTITLE: Using SendGame as Object with Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the SendGame method as an object with a specific bot instance. It returns a Message object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_game.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Message = await bot(SendGame(...))\n```\n\n----------------------------------------\n\nTITLE: Babel Update Command\nDESCRIPTION: Command for updating existing translation files with new messages using Babel.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npybabel update -d locales -D messages -i locales/messages.pot\n```\n\n----------------------------------------\n\nTITLE: Generating RST Documentation for Giveaway Module\nDESCRIPTION: RST configuration block that automatically generates documentation for the aiogram.types.giveaway module. It includes all members ordered by source, including undocumented members, while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/giveaway.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n########\nGiveaway\n########\n\n\n.. automodule:: aiogram.types.giveaway\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documentation Table of Contents\nDESCRIPTION: RST toctree directive defining documentation structure and hierarchy\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/index.rst#2025-04-17_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n\n    install\n    migration_2_to_3\n    api/index\n    dispatcher/index\n    utils/index\n    changelog\n    contributing\n```\n\n----------------------------------------\n\nTITLE: Using UnpinAllGeneralForumTopicMessages as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the UnpinAllGeneralForumTopicMessages method directly as a bot method. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_general_forum_topic_messages.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.unpin_all_general_forum_topic_messages(...)\n```\n\n----------------------------------------\n\nTITLE: Using EditChatSubscriptionInviteLink with a Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the EditChatSubscriptionInviteLink method with a specific bot instance. It returns a ChatInviteLink object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_subscription_invite_link.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatInviteLink = await bot(EditChatSubscriptionInviteLink(...))\n```\n\n----------------------------------------\n\nTITLE: Using DeleteStickerSet class with specific bot in Python\nDESCRIPTION: Example showing how to use the DeleteStickerSet class with a specific bot instance. This approach passes the DeleteStickerSet object to the bot directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_set.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteStickerSet(...))\n```\n\n----------------------------------------\n\nTITLE: Message Serialization in Aiogram\nDESCRIPTION: Demonstrates the transition from to_python() method to deserialize_telegram_object_to_python() function for converting message objects to Python dictionaries.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessage_dict = message.to_python()\nprint(message_dict)\n# {\"id\": 42, ...}\nprint(type(message_dict))\n# <class 'dict'>\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(message: Message) -> None:\n    # Version 3.x\n    message_dict = deserialize_telegram_object_to_python(message)\n    print(message_dict)\n    # {\"id\": 42, ...}\n    print(type(message_dict))\n    # <class 'dict'>\n```\n\n----------------------------------------\n\nTITLE: Using ReopenGeneralForumTopic as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the ReopenGeneralForumTopic class as a reply in a webhook handler. It returns the ReopenGeneralForumTopic object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_general_forum_topic.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn ReopenGeneralForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountUsername with Specific Bot in Python\nDESCRIPTION: This example shows how to use the SetBusinessAccountUsername method with a specific bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_username.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetBusinessAccountUsername(...))\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Autodoc Configuration for Birthdate Module\nDESCRIPTION: Sphinx/ReStructuredText directive to automatically generate documentation for the aiogram.types.birthdate module. It includes all members ordered by source, includes undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/birthdate.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n#########\nBirthdate\n#########\n\n\n.. automodule:: aiogram.types.birthdate\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSession Class from aiogram\nDESCRIPTION: This code snippet shows how to import the BaseSession class from the aiogram library. It is used as a base class for all client sessions in aiogram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/base.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.client.session.base import BaseSession\n```\n\n----------------------------------------\n\nTITLE: Using getBusinessAccountStarBalance as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the getBusinessAccountStarBalance method directly on a bot instance. It returns a StarAmount object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_account_star_balance.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: StarAmount = await bot.get_business_account_star_balance(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Thumbnail Using Direct Bot Method\nDESCRIPTION: Demonstrates how to set a custom emoji sticker set thumbnail using the direct bot method approach.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_custom_emoji_sticker_set_thumbnail.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_custom_emoji_sticker_set_thumbnail(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for GiveawayCreated Module in Python\nDESCRIPTION: This code snippet configures Sphinx autodoc to generate documentation for the GiveawayCreated module. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/giveaway_created.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.giveaway_created\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Config for InputTextMessageContent\nDESCRIPTION: Sphinx documentation configuration block for automatically generating documentation from the aiogram.types.input_text_message_content module. Configures member ordering, inclusion of undocumented members, and exclusion of specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_text_message_content.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.input_text_message_content\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Installing aiogram Development Dependencies (Linux/macOS)\nDESCRIPTION: Installs aiogram and all development dependencies in editable mode on Linux/macOS\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\"[dev,test,docs,fast,redis,mongo,proxy,i18n]\"\n```\n\n----------------------------------------\n\nTITLE: Babel Language Initialization Command\nDESCRIPTION: Command for initializing a new language for translation using Babel.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npybabel init -i locales/messages.pot -d locales -D messages -l en\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for aiogram MessageEntity\nDESCRIPTION: This snippet configures Sphinx to auto-generate documentation for the MessageEntity class in the aiogram.types.message_entity module. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_entity.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.message_entity\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TransferGift as Object in Python\nDESCRIPTION: This snippet shows how to import the TransferGift method and use it with a specific bot instance. It demonstrates two import styles and returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_gift.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.transfer_gift import TransferGift\n# alias: from aiogram.methods import TransferGift\n\nresult: bool = await bot(TransferGift(...))\n```\n\n----------------------------------------\n\nTITLE: Importing SetStickerPositionInSet Class in Python\nDESCRIPTION: This snippet shows how to import the SetStickerPositionInSet class from the aiogram library. It provides two import options: a specific import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_position_in_set.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_sticker_position_in_set import SetStickerPositionInSet\nfrom aiogram.methods import SetStickerPositionInSet\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware Using Decorator in Python\nDESCRIPTION: Shows how to register a client session middleware using a decorator approach. The middleware function receives the request maker, bot instance, and method as parameters.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/middleware.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@bot.session.middleware()\nasync def my_middleware(\n    make_request: NextRequestMiddlewareType[TelegramType],\n    bot: \"Bot\",\n    method: TelegramMethod[TelegramType],\n) -> Response[TelegramType]:\n    # do something with request\n    return await make_request(bot, method)\n```\n\n----------------------------------------\n\nTITLE: Using closeForumTopic as Bot Method\nDESCRIPTION: Direct usage of closeForumTopic method through the bot instance. Returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.close_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: Using createNewStickerSet as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to call the createNewStickerSet method directly on a bot instance. The method returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_new_sticker_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.create_new_sticker_set(...)\n```\n\n----------------------------------------\n\nTITLE: ChatMember Resolution Changes\nDESCRIPTION: Shows the change from using ChatMember.resolve to ChatMemberAdapter.validate_python for resolving chat member objects from dictionary data.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Version 2.x\nfrom aiogram.types import ChatMember\n\nchat_member = ChatMember.resolve(**dict_data)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Version 3.x\nfrom aiogram.utils.chat_member import ChatMemberAdapter\n\nchat_member = ChatMemberAdapter.validate_python(dict_data)\n```\n\n----------------------------------------\n\nTITLE: Using Close Method as Bot Method in Python\nDESCRIPTION: Demonstrates how to use the 'close' method directly on a bot instance. This method returns a boolean value.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.close(...)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using StopMessageLiveLocation as Object in Python\nDESCRIPTION: Example of importing the StopMessageLiveLocation class and using it with a specific bot instance. This approach allows for more flexibility in method usage.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/stop_message_live_location.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.stop_message_live_location import StopMessageLiveLocation\n\nresult: Union[Message, bool] = await bot(StopMessageLiveLocation(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for ExternalReplyInfo Documentation\nDESCRIPTION: RST directive configuration that sets up automatic documentation generation for the external_reply_info module, including all members sorted by source order while excluding model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/external_reply_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.external_reply_info\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization (Version 2.x)\nDESCRIPTION: Handler demonstrating how to convert a Message object to JSON in aiogram 2.x\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(message: Message) -> None:\n    message_json = message.as_json()\n    print(message_json)\n    # {\"id\": 42, ...}\n    print(type(message_json))\n    # <class 'str'>\n```\n\n----------------------------------------\n\nTITLE: Webhook Handler Implementation\nDESCRIPTION: Demonstrates using SendChatAction as a return value in a webhook handler. This approach is used when responding to webhook updates.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_chat_action.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SendChatAction(...)\n```\n\n----------------------------------------\n\nTITLE: Documenting MongoStorage Class in Python\nDESCRIPTION: Autodocumentation for the MongoStorage class from aiogram.fsm.storage.mongo module, focusing on __init__ and from_url methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#2025-04-17_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: aiogram.fsm.storage.mongo.MongoStorage\n    :members: __init__, from_url\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountName with Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the SetBusinessAccountName method with a specific bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_name.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetBusinessAccountName(...))\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PreparedInlineMessage in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the PreparedInlineMessage class in the aiogram.types.prepared_inline_message module. It includes all members, orders them by source, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/prepared_inline_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.prepared_inline_message\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for StarAmount\nDESCRIPTION: Sphinx documentation configuration block that sets up automatic documentation generation for the aiogram.types.star_amount module. Configures member ordering, inclusion of undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/star_amount.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.star_amount\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for ChatInviteLink in Python\nDESCRIPTION: This snippet configures Sphinx's automodule directive to generate documentation for the ChatInviteLink class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_invite_link.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.chat_invite_link\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using SavePreparedInlineMessage with Specific Bot\nDESCRIPTION: Example of using SavePreparedInlineMessage as an object with a specific bot instance. This approach uses the bot's call method to execute the SavePreparedInlineMessage operation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/save_prepared_inline_message.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: PreparedInlineMessage = await bot(SavePreparedInlineMessage(...))\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Executes the test suite using pytest\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest tests\n```\n\n----------------------------------------\n\nTITLE: Using UnpinAllGeneralForumTopicMessages as Webhook Reply in Python Handler\nDESCRIPTION: This snippet demonstrates how to use the UnpinAllGeneralForumTopicMessages method as a reply in a webhook handler. It returns the method object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_general_forum_topic_messages.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn UnpinAllGeneralForumTopicMessages(...)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Index\nDESCRIPTION: Table of contents structure defining the main sections of the Bot API documentation, including bot configuration, sessions, types, methods, enums, and file operations.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    bot\n    session/index\n    types/index\n    methods/index\n    enums/index\n    download_file\n    upload_file\n    defaults\n```\n\n----------------------------------------\n\nTITLE: Using SetWebhook as Webhook Handler Reply\nDESCRIPTION: Shows how to return a SetWebhook object as a response in a webhook handler. This pattern is used when responding to webhook events.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_webhook.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetWebhook(...)\n```\n\n----------------------------------------\n\nTITLE: Importing getUserChatBoosts as an Object in Python\nDESCRIPTION: This snippet shows how to import the GetUserChatBoosts class from the aiogram library. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_user_chat_boosts.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.get_user_chat_boosts import GetUserChatBoosts\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import GetUserChatBoosts\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for aiogram StoryAreaTypeType Enum\nDESCRIPTION: A reStructuredText (rst) directive that configures the documentation generation for the StoryAreaTypeType enum in aiogram. The directive includes all members, orders them by source order, and shows undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/story_area_type_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.story_area_type_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Updating Documentation Translations\nDESCRIPTION: Updates the documentation translation files for a specific language\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nmake gettext\nsphinx-intl update -p _build/gettext -l <language_code>\n```\n\n----------------------------------------\n\nTITLE: Using AnswerWebAppQuery in Webhook Handler\nDESCRIPTION: Demonstrates how to use AnswerWebAppQuery as a direct return value in a webhook handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_web_app_query.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn AnswerWebAppQuery(...)\n```\n\n----------------------------------------\n\nTITLE: Type Annotation in Python\nDESCRIPTION: Code example showing dictionary type annotation updating from Dict[Any, str] to Dict[str, Any]\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata: Dict[str, Any]\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InputMediaVideo Class in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the InputMediaVideo class from the aiogram.types.input_media_video module. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_media_video.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.input_media_video\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for StoryAreaPosition in RST\nDESCRIPTION: This RST code sets up the autodoc extension to document the StoryAreaPosition module from aiogram.types. It includes all members ordered by source, includes undocumented members, and excludes certain model-specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/story_area_position.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.story_area_position\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using UpgradeGift as an Object with a Specific Bot in Python\nDESCRIPTION: This example shows how to use the UpgradeGift method as an object with a specific bot instance. It imports the UpgradeGift class and uses it with the bot's call method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upgrade_gift.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(UpgradeGift(...))\n```\n\n----------------------------------------\n\nTITLE: Using setChatMenuButton as Bot Method in Python\nDESCRIPTION: Demonstrates how to use setChatMenuButton as a direct bot method. Returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_menu_button.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_chat_menu_button(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Invoice Module Documentation in RST\nDESCRIPTION: RST documentation configuration that specifies documentation generation settings for the aiogram.types.invoice module. It includes all members, orders them by source, shows undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/invoice.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.invoice\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing RefundStarPayment Class in Python\nDESCRIPTION: These import statements show how to import the RefundStarPayment class from the aiogram library. Two alternative import methods are provided.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/refund_star_payment.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.refund_star_payment import RefundStarPayment\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import RefundStarPayment\n```\n\n----------------------------------------\n\nTITLE: Dictionary Conversion Handler\nDESCRIPTION: Partial handler definition showing dictionary conversion pattern\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(message: Message) -> None:\n    # Version 2.x\n```\n\n----------------------------------------\n\nTITLE: Babel Message Extraction Commands\nDESCRIPTION: Commands for extracting translatable messages from the codebase using Babel.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npybabel extract --input-dirs=. -o locales/messages.pot\n```\n\nLANGUAGE: bash\nCODE:\n```\npybabel extract -k _:1,1t -k _:1,2 -k __ --input-dirs=. -o locales/messages.pot\n```\n\n----------------------------------------\n\nTITLE: Using SetStickerKeywords as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the SetStickerKeywords method as a reply in a webhook handler. It returns the SetStickerKeywords object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_keywords.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetStickerKeywords(...)\n```\n\n----------------------------------------\n\nTITLE: Using RestrictChatMember as Object\nDESCRIPTION: Example showing how to use RestrictChatMember by instantiating it as an object and passing it to the bot instance. Returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/restrict_chat_member.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(RestrictChatMember(...))\n```\n\n----------------------------------------\n\nTITLE: Importing EditGeneralForumTopic Class in Python\nDESCRIPTION: This snippet shows how to import the EditGeneralForumTopic class from the aiogram library. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_general_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.edit_general_forum_topic import EditGeneralForumTopic\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import EditGeneralForumTopic\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for LoginUrl Class in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the LoginUrl class. It includes all members, orders them by source appearance, and includes undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/login_url.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.login_url\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in I18nMiddleware in Python\nDESCRIPTION: Fixed unused default locale in I18nMiddleware.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Fixed unused default locale\nI18nMiddleware(default_locale='en')\n```\n\n----------------------------------------\n\nTITLE: Using AddStickerToSet as Webhook Response\nDESCRIPTION: Shows how to return AddStickerToSet object directly in a webhook handler for response handling.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/add_sticker_to_set.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn AddStickerToSet(...)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for MenuButtonDefault in aiogram\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the MenuButtonDefault class. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/menu_button_default.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.menu_button_default\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documentation Module Import in RST\nDESCRIPTION: RST directive to auto-document the switch_inline_query_chosen_chat module from aiogram.types, showing all members except model_config and model_fields, ordered by source appearance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/switch_inline_query_chosen_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.switch_inline_query_chosen_chat\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring automodule directive for VideoNote class documentation in restructuredtext\nDESCRIPTION: This restructuredtext directive configures how the documentation for the VideoNote module should be generated. It includes all members, orders them by source order, includes undocumented members, and excludes specific members related to Pydantic model configuration.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/video_note.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.video_note\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using GetForumTopicIconStickers as Object with Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the GetForumTopicIconStickers method as an object with a specific bot instance. It returns a list of Sticker objects.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_forum_topic_icon_stickers.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: list[Sticker] = await bot(GetForumTopicIconStickers(...))\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Documentation for BusinessConnection\nDESCRIPTION: RST documentation configuration to automatically generate API documentation for the BusinessConnection module. Includes all members sorted by source order, includes undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/business_connection.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##################\nBusinessConnection\n##################\n\n\n.. automodule:: aiogram.types.business_connection\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Initializing ChatMember Type Detection in Python\nDESCRIPTION: Added a customizable object serialization mechanism to fix ChatMember type detection.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Fixed via customizable object serialization mechanism\nChatMember()\n```\n\n----------------------------------------\n\nTITLE: Using uploadStickerFile as Bot Method\nDESCRIPTION: Example showing how to upload a sticker file using the direct bot method approach. Returns a File object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upload_sticker_file.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: File = await bot.upload_sticker_file(...)\n```\n\n----------------------------------------\n\nTITLE: Importing SetMyCommands Object in Python\nDESCRIPTION: These import statements show how to import the SetMyCommands object from the aiogram library. Two import methods are provided: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_commands.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_my_commands import SetMyCommands\n# alias: \nfrom aiogram.methods import SetMyCommands\n```\n\n----------------------------------------\n\nTITLE: Importing SetBusinessAccountBio Class in Python\nDESCRIPTION: This snippet shows how to import the SetBusinessAccountBio class from the aiogram library. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_bio.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_business_account_bio import SetBusinessAccountBio\n# alias:\nfrom aiogram.methods import SetBusinessAccountBio\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for ReactionTypePaid Module\nDESCRIPTION: Sphinx documentation configuration directive for the ReactionTypePaid module in aiogram. Sets up the automodule feature to document all members in source order while excluding model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/reaction_type_paid.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.reaction_type_paid\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ChatMemberStatus Enum in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the ChatMemberStatus enum in the aiogram library. It includes all members, orders them by source, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/chat_member_status.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.enums.chat_member_status\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Returning SetStickerSetThumbnail in Webhook Handler\nDESCRIPTION: Demonstrates how to return a SetStickerSetThumbnail object directly in a webhook handler response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_thumbnail.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetStickerSetThumbnail(...)\n```\n\n----------------------------------------\n\nTITLE: Generating MessageOriginChat Documentation with Sphinx\nDESCRIPTION: This reStructuredText code snippet configures Sphinx to automatically generate documentation for the MessageOriginChat class. It includes all members, orders them by source, and includes undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_origin_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.message_origin_chat\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for TransactionPartnerChat in reStructuredText\nDESCRIPTION: This snippet configures Sphinx's automodule directive to generate documentation for the TransactionPartnerChat module. It includes all members, preserves the source order, includes undocumented members, and excludes specific configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/transaction_partner_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.transaction_partner_chat\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using setStickerKeywords as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the setStickerKeywords method directly as a bot method. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_keywords.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_sticker_keywords(...)\n```\n\n----------------------------------------\n\nTITLE: Using Direct Bot Method for Setting Sticker Set Thumbnail\nDESCRIPTION: Demonstrates how to set a sticker set thumbnail using the direct bot method approach. Returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_thumbnail.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_sticker_set_thumbnail(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for SentWebAppMessage class documentation\nDESCRIPTION: This directive configures Sphinx to automatically generate documentation for the SentWebAppMessage class in the aiogram.types.sent_web_app_message module. It includes all members, orders them by source order, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/sent_web_app_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.sent_web_app_message\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Closing General Forum Topic Using Bot Method\nDESCRIPTION: Direct method to close a general forum topic using the bot instance. Returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_general_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.close_general_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for InlineQueryResultAudio\nDESCRIPTION: RestructuredText directive for auto-documenting the InlineQueryResultAudio module from aiogram.types package. Configures documentation to show members in source order and include undocumented members, while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_audio.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n######################\nInlineQueryResultAudio\n######################\n\n\n.. automodule:: aiogram.types.inline_query_result_audio\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting ForumTopicEdited Class in aiogram\nDESCRIPTION: This code snippet uses automodule to generate documentation for the ForumTopicEdited class from the aiogram.types.forum_topic_edited module. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/forum_topic_edited.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.forum_topic_edited\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Unbanning Chat Sender Chat as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the unban_chat_sender_chat method directly on a bot instance. It returns a boolean indicating the success of the operation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_sender_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.unban_chat_sender_chat(...)\n```\n\n----------------------------------------\n\nTITLE: Importing HideGeneralForumTopic Class in Python\nDESCRIPTION: This snippet shows two ways to import the HideGeneralForumTopic class from the aiogram library. It can be imported directly or through an alias.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/hide_general_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.hide_general_forum_topic import HideGeneralForumTopic\nfrom aiogram.methods import HideGeneralForumTopic\n```\n\n----------------------------------------\n\nTITLE: Importing RemoveChatVerification in Python\nDESCRIPTION: These lines show how to import the RemoveChatVerification method. It can be imported directly or through an alias for convenience.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_chat_verification.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.remove_chat_verification import RemoveChatVerification\nfrom aiogram.methods import RemoveChatVerification\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for InputMediaAudio\nDESCRIPTION: Sphinx documentation configuration for the InputMediaAudio module, setting up automatic documentation generation with specific member inclusion/exclusion rules.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_media_audio.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n###############\nInputMediaAudio\n###############\n\n\n.. automodule:: aiogram.types.input_media_audio\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for ChatAction Enumeration in aiogram\nDESCRIPTION: Sets up Sphinx autodoc to generate documentation for the aiogram.enums.chat_action module. The directive includes all members, orders them by source order, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/chat_action.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.enums.chat_action\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Returning ConvertGiftToStars as a Webhook Response\nDESCRIPTION: Example demonstrating how to return the ConvertGiftToStars method as a response in a webhook handler. This approach is useful for responding directly to Telegram's webhook requests.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/convert_gift_to_stars.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn ConvertGiftToStars(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for MessageAutoDeleteTimerChanged in Python\nDESCRIPTION: This code snippet configures Sphinx's autodoc extension to generate documentation for the MessageAutoDeleteTimerChanged class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_auto_delete_timer_changed.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.message_auto_delete_timer_changed\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for TransactionPartnerFragment Module in aiogram\nDESCRIPTION: This restructuredtext snippet configures Sphinx to automatically generate documentation for the TransactionPartnerFragment module. It includes all members, orders them by source, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/transaction_partner_fragment.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.transaction_partner_fragment\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule configuration for RefundedPayment in aiogram\nDESCRIPTION: Sphinx documentation configuration that generates API documentation for the RefundedPayment class from the aiogram.types.refunded_payment module. The configuration specifies to include all members, order them by source order, include undocumented members, and exclude model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/refunded_payment.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.refunded_payment\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using EditUserStarSubscription as a Bot Method in Python\nDESCRIPTION: Demonstrates how to call the edit_user_star_subscription method directly on a bot instance. This method returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_user_star_subscription.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.edit_user_star_subscription(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for InlineQueryResultCachedSticker Module\nDESCRIPTION: This snippet configures Sphinx AutoDoc to generate documentation for the InlineQueryResultCachedSticker module. It specifies to include all members, order them by source, include undocumented members, and exclude specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_cached_sticker.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_cached_sticker\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for WebhookInfo Class using Sphinx\nDESCRIPTION: A Sphinx reStructuredText directive that automatically generates documentation for the WebhookInfo class in the aiogram.types.webhook_info module, showing all members in source order and excluding specific model-related members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/webhook_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.webhook_info\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for aiogram CallbackQueryHandler\nDESCRIPTION: RST directive that configures Sphinx to automatically document the aiogram.handlers.callback_query module. It includes all members, orders them by source appearance, and shows undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/callback_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.handlers.callback_query\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Importing GetAvailableGifts as an Object in Python\nDESCRIPTION: This snippet shows how to import the GetAvailableGifts method as an object. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_available_gifts.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.get_available_gifts import GetAvailableGifts\nfrom aiogram.methods import GetAvailableGifts\n```\n\n----------------------------------------\n\nTITLE: Previous Bot Context Usage in Python\nDESCRIPTION: Shows the previous method of using Bot as a context manager, which required calling the .context() method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync with Bot(...).context() as bot:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Importing InlineQueryResultCachedMpeg4Gif module in Python\nDESCRIPTION: This code snippet shows how to import the InlineQueryResultCachedMpeg4Gif module from the aiogram.types package. The automodule directive is used to automatically generate documentation for all members of the module.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_cached_mpeg4_gif.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_cached_mpeg4_gif\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for ChatType enum in aiogram\nDESCRIPTION: RST directive to configure automatic documentation generation for the ChatType enum in aiogram. It includes all members, orders them by source appearance, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/chat_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.chat_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Using DeleteStickerFromSet as Webhook Response in Python\nDESCRIPTION: Example showing how to return a DeleteStickerFromSet method object as a response to a webhook in a handler function. This approach can be used to directly respond to Telegram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_from_set.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteStickerFromSet(...)\n```\n\n----------------------------------------\n\nTITLE: Using CreateInvoiceLink as a Bot Method\nDESCRIPTION: Shows how to call create_invoice_link() directly on a bot instance to generate a payment invoice link, which returns a string URL.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_invoice_link.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: str = await bot.create_invoice_link(...)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration\nDESCRIPTION: ReStructuredText configuration for auto-documenting the RevenueWithdrawalStatePending module, specifying documentation parameters and exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/revenue_withdrawal_state_pending.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.revenue_withdrawal_state_pending\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for TransactionPartnerOther Module\nDESCRIPTION: RST directive configuration for auto-generating documentation from the aiogram.types.transaction_partner_other module. Includes all members ordered by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/transaction_partner_other.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.transaction_partner_other\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountBio with Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the SetBusinessAccountBio method with a specific bot instance. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_bio.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetBusinessAccountBio(...))\n```\n\n----------------------------------------\n\nTITLE: Using SetStickerSetTitle with Specific Bot in Python\nDESCRIPTION: This code demonstrates how to use the SetStickerSetTitle method with a specific bot instance. It returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_title.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetStickerSetTitle(...))\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ChatMemberLeft in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the ChatMemberLeft class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_member_left.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.chat_member_left\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountGiftSettings as Bot Method\nDESCRIPTION: Demonstrates how to call SetBusinessAccountGiftSettings directly as a bot method\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_gift_settings.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_business_account_gift_settings(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for GiveawayCompleted Class in Python\nDESCRIPTION: This snippet configures Sphinx's autodoc extension to generate documentation for the GiveawayCompleted class. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/giveaway_completed.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.giveaway_completed\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for GameHighScore\nDESCRIPTION: ReStructuredText directive that configures automatic documentation generation for the GameHighScore module. It includes all members, orders them by source, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/game_high_score.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.game_high_score\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using SendGift as Object with Specific Bot\nDESCRIPTION: Shows how to use the SendGift class as an object, passing it to a bot instance. Requires importing SendGift from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_gift.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SendGift(...))\n```\n\n----------------------------------------\n\nTITLE: Importing BaseHandler in Python\nDESCRIPTION: Shows how to import the BaseHandler class from the aiogram.handlers module.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/base.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.handlers import BaseHandler\n```\n\n----------------------------------------\n\nTITLE: Using towncrier for Documentation Integration\nDESCRIPTION: Code reference showing the integration of towncrier for documentation. This is mentioned in the improved documentation section.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntowncrier\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Configuration\nDESCRIPTION: Sphinx/RST configuration for automatically generating documentation from the aiogram.types.copy_text_button module. Includes all members, orders them by source order, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/copy_text_button.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.copy_text_button\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for ChatBoostSourceType enumeration in aiogram\nDESCRIPTION: RST directive for setting up automatic documentation of the ChatBoostSourceType enumeration from the aiogram.enums.chat_boost_source_type module, displaying all members in their original source order and including undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/chat_boost_source_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.chat_boost_source_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Using SetBusinessAccountName as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the SetBusinessAccountName method as a reply in a webhook handler. It directly returns the SetBusinessAccountName object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_name.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetBusinessAccountName(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring RST automodule for UniqueGiftInfo Documentation\nDESCRIPTION: RST directive configuration for automatically generating documentation from the UniqueGiftInfo module. It includes all members, orders them by source appearance, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/unique_gift_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.unique_gift_info\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for OrderInfo Module in Python\nDESCRIPTION: This code snippet configures Sphinx's autodoc extension to generate documentation for the OrderInfo module. It includes all members, orders them by source, includes undocumented members, and excludes specific model-related attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/order_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.order_info\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating ParseMode Enum Documentation with Sphinx\nDESCRIPTION: This snippet configures Sphinx to automatically generate documentation for the ParseMode enumeration in the aiogram.enums.parse_mode module. It includes all members, orders them by source appearance, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/parse_mode.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.enums.parse_mode\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for InputProfilePhotoStatic in Python\nDESCRIPTION: This code snippet configures Sphinx's automodule directive to generate documentation for the InputProfilePhotoStatic module. It includes all members, orders them by source appearance, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_profile_photo_static.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.input_profile_photo_static\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for StoryAreaTypeWeather documentation in RST\nDESCRIPTION: Sphinx directive that automatically generates documentation for the StoryAreaTypeWeather module in aiogram. It includes all members, orders them by source order, shows undocumented members, and excludes model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/story_area_type_weather.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.story_area_type_weather\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for KeyboardButton in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the KeyboardButton class. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/keyboard_button.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.keyboard_button\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for ChatAdministratorRights in Python\nDESCRIPTION: This code snippet configures Sphinx's autodoc extension to generate documentation for the ChatAdministratorRights class in the aiogram.types.chat_administrator_rights module. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_administrator_rights.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.chat_administrator_rights\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for aiogram.types.dice Module\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the aiogram.types.dice module. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/dice.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.dice\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Permissions in Webhook Handler\nDESCRIPTION: Example of setting chat permissions as a webhook response in a handler. This approach is used when responding directly to webhook events.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_permissions.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetChatPermissions(...)\n```\n\n----------------------------------------\n\nTITLE: Documenting UserShared Module with Sphinx\nDESCRIPTION: Sphinx documentation configuration for the aiogram.types.user_shared module. Generates API documentation including all members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/user_shared.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##########\nUserShared\n##########\n\n\n.. automodule:: aiogram.types.user_shared\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using SetStickerMaskPosition as a Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the SetStickerMaskPosition method as a reply in a webhook handler. It directly returns the SetStickerMaskPosition object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_mask_position.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetStickerMaskPosition(...)\n```\n\n----------------------------------------\n\nTITLE: Returning DeleteMyCommands as a Webhook Reply in a Handler\nDESCRIPTION: Shows how to return the DeleteMyCommands object directly from a webhook handler. This approach is useful for webhook-based bots to send the deletion command as a response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_my_commands.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteMyCommands(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for VideoChatScheduled Documentation\nDESCRIPTION: Sphinx directive to automatically generate documentation for the VideoChatScheduled class from the aiogram.types.video_chat_scheduled module. It includes all members sorted by source order, includes undocumented members, and excludes specific model configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/video_chat_scheduled.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.video_chat_scheduled\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Automodule Documentation for KeyboardButtonPollTypeType\nDESCRIPTION: ReStructuredText documentation directive that automatically generates API documentation for the keyboard_button_poll_type_type module in aiogram.enums package. It includes all members and undocumented members, ordered by source appearance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/keyboard_button_poll_type_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.keyboard_button_poll_type_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for InlineQueryResultCachedGif\nDESCRIPTION: This snippet configures Sphinx to automatically generate documentation for the InlineQueryResultCachedGif class. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_cached_gif.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_cached_gif\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for InputMedia\nDESCRIPTION: Sphinx documentation configuration for auto-generating API documentation of the InputMedia types. Includes all members sorted by source order, including undocumented members, while excluding model configuration and fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_media.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##########\nInputMedia\n##########\n\n\n.. automodule:: aiogram.types.input_media\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using ReadBusinessMessage as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the ReadBusinessMessage method directly as a bot method. It returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/read_business_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.read_business_message(...)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InputSticker Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the InputSticker class. It includes all members, orders them by source, includes undocumented members, and excludes specific members related to the model configuration.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_sticker.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.input_sticker\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for EncryptedCredentials Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the EncryptedCredentials module. It includes all members, orders them by source, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/encrypted_credentials.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.encrypted_credentials\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for ChatPermissions Module in Python\nDESCRIPTION: This code snippet configures Sphinx's automodule directive to generate documentation for the ChatPermissions module in the aiogram library. It includes all members, orders them by source, includes undocumented members, and excludes specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_permissions.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.chat_permissions\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Including Change History Files in reStructuredText Documentation\nDESCRIPTION: This snippet demonstrates how to include external reStructuredText files in a documentation page using the include directive. It references two separate files: CHANGES.rst for recent changes and HISTORY.rst for historical changes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/changelog.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _aiogram_changes:\n\n.. include:: ../CHANGES.rst\n\n.. include:: ../HISTORY.rst\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Configuration for InputStoryContent\nDESCRIPTION: RST directive configuration for automatically documenting the InputStoryContent module. Includes all members ordered by source, includes undocumented members, and excludes model configuration and fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_story_content.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.input_story_content\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for TransactionPartnerUserTransactionTypeEnum\nDESCRIPTION: ReStructuredText directive for auto-documenting the transaction_partner_user_transaction_type_enum module from aiogram.enums package. Includes all members and maintains source order with undocumented members included.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/transaction_partner_user_transaction_type_enum.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.transaction_partner_user_transaction_type_enum\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for OwnedGift\nDESCRIPTION: RST documentation configuration block that sets up autodoc parameters for the aiogram.types.owned_gift module. Configures member ordering, inclusion of undocumented members, and exclusion of specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/owned_gift.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.owned_gift\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration\nDESCRIPTION: Sphinx documentation configuration for auto-generating module documentation, including all members, ordering by source, and showing undocumented members while excluding model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_cached_video.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_cached_video\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting StickerType Enum in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the StickerType enum. It includes all members and undocumented members, ordered by source.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/sticker_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.enums.sticker_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for aiogram Update Type\nDESCRIPTION: Sphinx RST configuration block that sets up automatic documentation generation for the aiogram.types.update module. Includes all members ordered by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/update.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.update\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting ReactionTypeEmoji Class in Python for aiogram\nDESCRIPTION: This code snippet uses automodule to generate documentation for the ReactionTypeEmoji class. It includes all members, orders them by source, includes undocumented members, and excludes specific members like model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/reaction_type_emoji.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.reaction_type_emoji\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for PassportElementErrorFrontSide\nDESCRIPTION: Sphinx/RST documentation configuration directives for auto-documenting the PassportElementErrorFrontSide module in aiogram. Uses automodule directive with specific member ordering and exclusion settings.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/passport_element_error_front_side.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.passport_element_error_front_side\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Generation for PhotoSize Module in reStructuredText\nDESCRIPTION: This code configures Sphinx documentation generation for the aiogram.types.photo_size module. It includes all members, orders them by source appearance, includes undocumented members, and excludes specific members related to model configuration.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/photo_size.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.photo_size\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Sticker Set in Webhook Handler\nDESCRIPTION: Implementation for webhook handlers that returns a SetChatStickerSet object directly as a response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_sticker_set.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetChatStickerSet(...)\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment (Linux/macOS)\nDESCRIPTION: Activates the Python virtual environment on Linux or macOS systems\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Using SetMyDefaultAdministratorRights in Webhook Handler\nDESCRIPTION: Returning SetMyDefaultAdministratorRights object directly in a webhook handler response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_default_administrator_rights.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetMyDefaultAdministratorRights(...)\n```\n\n----------------------------------------\n\nTITLE: Using HideGeneralForumTopic with Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the HideGeneralForumTopic class with a specific bot instance. It returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/hide_general_forum_topic.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(HideGeneralForumTopic(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule Documentation for AcceptedGiftTypes\nDESCRIPTION: Sphinx documentation configuration for the accepted_gift_types module. Generates comprehensive API documentation while excluding model configuration and field definitions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/accepted_gift_types.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.accepted_gift_types\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for BotCommandScopeDefault\nDESCRIPTION: Sphinx documentation configuration block that specifies how to auto-document the BotCommandScopeDefault module, including member ordering and exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/bot_command_scope_default.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.bot_command_scope_default\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText automodule for StoryAreaTypeLink documentation\nDESCRIPTION: A reStructuredText directive that automatically generates documentation for the aiogram.types.story_area_type_link module. It includes all members, orders them by source appearance, includes undocumented members, but excludes model_config and model_fields attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/story_area_type_link.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.story_area_type_link\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InputPaidMediaVideo Module in Python\nDESCRIPTION: This code snippet uses Sphinx automodule directives to automatically generate documentation for the InputPaidMediaVideo class in the aiogram.types package. It includes all members, orders them by source, and includes undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_paid_media_video.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.input_paid_media_video\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using GetBusinessAccountGifts as Object\nDESCRIPTION: Example demonstrating how to use GetBusinessAccountGifts as an object with a specific bot instance. Includes import statements and method execution.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_account_gifts.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: OwnedGifts = await bot(GetBusinessAccountGifts(...))\n```\n\n----------------------------------------\n\nTITLE: Importing BotName Module in Python\nDESCRIPTION: This snippet shows how to import the BotName module from aiogram.types. The module contains the BotName class which represents a Telegram bot's name.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/bot_name.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom aiogram.types import bot_name\n```\n\n----------------------------------------\n\nTITLE: Documenting UpdateType Enum in aiogram\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the UpdateType enum in the aiogram.enums.update_type module. It includes all members, orders them by source, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/update_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.enums.update_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for ChatMemberAdministrator\nDESCRIPTION: This snippet configures Sphinx's autodoc extension to generate documentation for the ChatMemberAdministrator class. It includes all members, orders them by source, includes undocumented members, and excludes specific model-related attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_member_administrator.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.chat_member_administrator\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for InlineQueryResultGame\nDESCRIPTION: RST format documentation configuration for the InlineQueryResultGame module, specifying members should be ordered by source and excluding model configuration fields\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_game.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n#####################\nInlineQueryResultGame\n#####################\n\n\n.. automodule:: aiogram.types.inline_query_result_game\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for AffiliateInfo Module\nDESCRIPTION: Sphinx documentation directives for automatically generating documentation from the aiogram.types.affiliate_info module. Configures member ordering, inclusion of undocumented members, and specific member exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/affiliate_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n#############\nAffiliateInfo\n#############\n\n\n.. automodule:: aiogram.types.affiliate_info\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocumentation for aiogram.types.game Module\nDESCRIPTION: This snippet configures Sphinx autodocumentation for the aiogram.types.game module. It includes all members, orders them by source, includes undocumented members, and excludes specific members from documentation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/game.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.game\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for BackgroundFillFreeformGradient\nDESCRIPTION: Sphinx directive to automatically generate documentation for the BackgroundFillFreeformGradient class from the aiogram.types module. Excludes model_config and model_fields members while including all other members sorted by source order.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/background_fill_freeform_gradient.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.background_fill_freeform_gradient\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Auto-generating Documentation for StickerFormat Enums with Sphinx in RestructuredText\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the sticker_format enumerations in Aiogram. It includes all members, orders them by source code order, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/sticker_format.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.enums.sticker_format\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: reST Documentation Directive for InlineKeyboardMarkup\nDESCRIPTION: Sphinx automodule directive configuring the documentation generation for the InlineKeyboardMarkup class, excluding model_config and model_fields while including all other members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_keyboard_markup.rst#2025-04-17_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\n.. automodule:: aiogram.types.inline_keyboard_markup\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for RevenueWithdrawalState in aiogram\nDESCRIPTION: Sphinx documentation configuration for the RevenueWithdrawalState class in aiogram. The directive includes all members, orders them by source order, includes undocumented members, and excludes model_config and model_fields attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/revenue_withdrawal_state.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.revenue_withdrawal_state\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule configuration for ReplyKeyboardMarkup\nDESCRIPTION: Sphinx directive configuration for documenting the ReplyKeyboardMarkup module. Sets options to document all members ordered by source, include undocumented members, and exclude model_config and model_fields properties.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/reply_keyboard_markup.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.reply_keyboard_markup\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for aiogram.types.sticker_set documentation\nDESCRIPTION: This directive configures Sphinx to automatically generate documentation for the aiogram.types.sticker_set module. It includes all members and undocumented members, orders them by source code appearance, and excludes model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/sticker_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.sticker_set\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for CallbackQuery\nDESCRIPTION: RST directives for generating API documentation for the aiogram.types.callback_query module. Configures member ordering, inclusion of undocumented members, and exclusion of specific model fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/callback_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n#############\nCallbackQuery\n#############\n\n\n.. automodule:: aiogram.types.callback_query\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for ChatMemberUpdated module\nDESCRIPTION: RST directive that configures automatic documentation generation for the aiogram.types.chat_member_updated module. It includes all members, orders them by source order, shows undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_member_updated.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.chat_member_updated\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Directive for ReplyKeyboardRemove Documentation\nDESCRIPTION: This reST directive automatically generates documentation for the ReplyKeyboardRemove class from the aiogram.types.reply_keyboard_remove module. The directive includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/reply_keyboard_remove.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.reply_keyboard_remove\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating MessageEntityType Enum Documentation with Sphinx\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the MessageEntityType enum. It includes all members, orders them by source, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/message_entity_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.enums.message_entity_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Using GetChatMenuButton as an object with a bot in Python\nDESCRIPTION: This snippet shows how to use GetChatMenuButton as an object and pass it to a bot instance that's used as a callable. The method requires importing GetChatMenuButton from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_menu_button.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: ResultMenuButtonUnion = await bot(GetChatMenuButton(...))\n```\n\n----------------------------------------\n\nTITLE: Using VerifyChat as a Reply in a Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use the VerifyChat method as a reply in a webhook handler. It directly returns the VerifyChat object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_chat.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn VerifyChat(...)\n```\n\n----------------------------------------\n\nTITLE: Transfer Stars Using Object Method with Specific Bot\nDESCRIPTION: Demonstrates transferring business account stars using the TransferBusinessAccountStars class with a specific bot instance. Returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_business_account_stars.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(TransferBusinessAccountStars(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for InlineQueryResultArticle\nDESCRIPTION: Sphinx configuration directives for generating documentation of the InlineQueryResultArticle module. The configuration includes displaying members in source order and showing undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_article.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_article\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for InputInvoiceMessageContent\nDESCRIPTION: RST directive configuration for documenting the InputInvoiceMessageContent module in aiogram. Specifies member ordering, inclusion of undocumented members, and exclusion of specific model fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_invoice_message_content.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.input_invoice_message_content\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using DeleteMessages as a webhook reply in aiogram handlers\nDESCRIPTION: Example of returning the DeleteMessages object directly from a handler when working with webhooks. This approach is useful for inline responses to Telegram's webhook requests.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_messages.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteMessages(...)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for InputMediaType\nDESCRIPTION: ReStructuredText documentation layout for the InputMediaType enum, configuring automodule to show all members including undocumented ones in source order\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/input_media_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##############\nInputMediaType\n##############\n\n\n.. automodule:: aiogram.enums.input_media_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Direct Bot Method Transfer Stars\nDESCRIPTION: Example of transferring business account stars using the direct bot method approach. Returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_business_account_stars.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.transfer_business_account_stars(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for ChatPhoto in Python\nDESCRIPTION: This code snippet configures Sphinx's automodule directive to generate documentation for the ChatPhoto class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.chat_photo\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for InlineKeyboardButton\nDESCRIPTION: RST configuration to auto-generate documentation for the aiogram.types.inline_keyboard_button module. Includes all members ordered by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_keyboard_button.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.inline_keyboard_button\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for UserProfilePhotos\nDESCRIPTION: RST directive to configure automatic module documentation for the UserProfilePhotos class in aiogram, excluding specific model configuration fields while including all other members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/user_profile_photos.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.user_profile_photos\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for ReactionType documentation in RST\nDESCRIPTION: This RST directive configures Sphinx to automatically generate documentation for the aiogram.types.reaction_type module. It includes all members, orders them by source code order, includes undocumented members, and excludes specific members related to Pydantic model configuration.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/reaction_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n############\nReactionType\n############\n\n\n.. automodule:: aiogram.types.reaction_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using EditMessageCaption as an Object with Specific Bot\nDESCRIPTION: This snippet shows how to use the EditMessageCaption class as an object passed to a bot instance. This approach is useful when you need more control over the method execution.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_caption.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: Union[Message, bool] = await bot(EditMessageCaption(...))\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Configuration\nDESCRIPTION: Sphinx documentation configuration for the InlineQueryResultDocument type, specifying module path and documentation generation parameters.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_document.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n#########################\nInlineQueryResultDocument\n#########################\n\n\n.. automodule:: aiogram.types.inline_query_result_document\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Automodule Documentation Configuration\nDESCRIPTION: RST configuration for automatically generating documentation from the aiogram.types.background_type_wallpaper module. Includes member documentation, preserves source order, includes undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/background_type_wallpaper.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.background_type_wallpaper\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: GetStarTransactions - Object-Oriented Approach\nDESCRIPTION: Example of using GetStarTransactions as an object with a specific bot instance. Requires importing the GetStarTransactions class from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_star_transactions.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: StarTransactions = await bot(GetStarTransactions(...))\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment (Windows CMD)\nDESCRIPTION: Activates the Python virtual environment in Windows Command Prompt\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.\\.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Configuring automodule for TransactionPartnerType Documentation in RST\nDESCRIPTION: RST directive configuration that generates documentation for the TransactionPartnerType enum in the aiogram.enums.transaction_partner_type module. The directive includes all members, orders them by source order, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/transaction_partner_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.transaction_partner_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Message Module Documentation Directive in RST\nDESCRIPTION: RST directive that generates automatic documentation for the aiogram.types.message module. Configures documentation generation to show members in source order, include undocumented members, and exclude model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n#######\nMessage\n#######\n\n\n.. automodule:: aiogram.types.message\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting InputVenueMessageContent Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the InputVenueMessageContent class. It includes all members, orders them by source, and includes undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_venue_message_content.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.input_venue_message_content\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring RST AutoModule Documentation for ChatBoost\nDESCRIPTION: ReStructuredText configuration for automatically generating documentation from the aiogram.types.chat_boost module. It includes all members, orders them by source appearance, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_boost.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n#########\nChatBoost\n#########\n\n\n.. automodule:: aiogram.types.chat_boost\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for ReplyParameters Module\nDESCRIPTION: RST directive for auto-documenting the ReplyParameters module from aiogram.types package. Includes all members ordered by source appearance, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/reply_parameters.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.reply_parameters\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Automodule Documentation Configuration\nDESCRIPTION: Sphinx documentation configuration for the aiogram.types.inline_query module, specifying member ordering, inclusion of undocumented members, and exclusion of specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n###########\nInlineQuery\n###########\n\n\n.. automodule:: aiogram.types.inline_query\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Animation Module Documentation with Sphinx\nDESCRIPTION: This code snippet is a Sphinx directive for auto-generating documentation for the animation module in aiogram. It includes all members, orders them by source, includes undocumented members, and excludes certain configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/animation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.animation\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Setting Business Profile Photo Using Method Object\nDESCRIPTION: Using the SetBusinessAccountProfilePhoto class directly with a bot instance to set a business account profile photo.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_profile_photo.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetBusinessAccountProfilePhoto(...))\n```\n\n----------------------------------------\n\nTITLE: Using SetMyCommands as Webhook Reply in Python\nDESCRIPTION: This snippet demonstrates how to use SetMyCommands as a reply in a webhook handler. It returns the SetMyCommands object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_commands.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn SetMyCommands(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetChatAdministratorCustomTitle as Object\nDESCRIPTION: Shows how to set a chat administrator's custom title by instantiating the SetChatAdministratorCustomTitle class and passing it to the bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_administrator_custom_title.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetChatAdministratorCustomTitle(...))\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Configuration\nDESCRIPTION: Sphinx documentation configuration for the EncryptedPassportElement module, specifying auto-documentation parameters and member organization settings.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/encrypted_passport_element.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n########################\nEncryptedPassportElement\n########################\n\n\n.. automodule:: aiogram.types.encrypted_passport_element\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for InlineQueryResultCachedDocument\nDESCRIPTION: RST directive configuration for automatically generating documentation from the aiogram.types.inline_query_result_cached_document module. Specifies member ordering, inclusion of undocumented members, and exclusion of specific model attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_cached_document.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_cached_document\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using DeleteStory in Webhook Handler\nDESCRIPTION: Example of using DeleteStory class as a webhook handler response. Returns the DeleteStory object directly from the handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_story.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteStory(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Routers - Module 2\nDESCRIPTION: Example of importing a router from another module and including it as a nested router.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom module_2 import router2\n\n\nrouter1 = Router()\nrouter1.include_router(router2)\n```\n\n----------------------------------------\n\nTITLE: Returning DeleteWebhook as Reply to Webhook in Python Handler\nDESCRIPTION: Example of using DeleteWebhook as a return value in a webhook handler. This pattern allows directly returning the method from a handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_webhook.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn DeleteWebhook(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for OwnedGiftType Module\nDESCRIPTION: Sphinx documentation configuration directive for auto-generating OwnedGiftType enumeration documentation. Includes all members, orders them by source order, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/owned_gift_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.owned_gift_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Generating Python Documentation for InputLocationMessageContent in aiogram\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the InputLocationMessageContent class. It includes all members, orders them by source, and includes undocumented members while excluding certain configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_location_message_content.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.input_location_message_content\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for ChatBackground in Python\nDESCRIPTION: This snippet configures the Sphinx automodule directive to generate documentation for the ChatBackground module. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_background.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.chat_background\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for InputMediaDocument\nDESCRIPTION: Sphinx documentation configuration directive for documenting the InputMediaDocument class. Sets up automodule documentation with member ordering by source, including undocumented members and excluding model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_media_document.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n##################\nInputMediaDocument\n##################\n\n\n.. automodule:: aiogram.types.input_media_document\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for BusinessBotRights\nDESCRIPTION: RST directive block that configures Sphinx autodoc module settings for the BusinessBotRights class documentation. Includes all members and undocumented members in source order, while excluding model_config and model_fields properties.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/business_bot_rights.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.business_bot_rights\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for Contact Module\nDESCRIPTION: RST directive for automatically generating documentation from the aiogram.types.contact module. Includes all members ordered by source, including undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/contact.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.contact\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for BotCommandScopeAllChatAdministrators\nDESCRIPTION: ReStructuredText directive for auto-generating module documentation, configured to show members in source order while excluding model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/bot_command_scope_all_chat_administrators.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.bot_command_scope_all_chat_administrators\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for InputContactMessageContent\nDESCRIPTION: Sphinx/RST configuration directives for documenting the InputContactMessageContent module from aiogram.types package. Sets up automodule documentation with member ordering and exclusion settings.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_contact_message_content.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.input_contact_message_content\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using SetStickerMaskPosition with a Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the SetStickerMaskPosition method with a specific bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_mask_position.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetStickerMaskPosition(...))\n```\n\n----------------------------------------\n\nTITLE: Processing Positive Bot Response Handler\nDESCRIPTION: Handles positive response to liking bots and transitions to language state\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def process_like_write_bots(message: types.Message, state: FSMContext):\n    if message.text.lower() not in ['yes', 'yeah', 'yep', 'да']:\n        await message.reply('Please use yes/no buttons')\n        return\n    await Form.next()\n    await message.reply(\"Cool! What programming language did you use to write bots?\")\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation Directive\nDESCRIPTION: Sphinx documentation configuration for the ChatBoostUpdated module, specifying member ordering, inclusion of undocumented members, and exclusion of specific model fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_boost_updated.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.chat_boost_updated\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Audio Module Documentation for aiogram\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the aiogram.types.audio module. It includes all members, orders them by source, and includes undocumented members. The model_config and model_fields are excluded from the documentation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/audio.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.audio\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring automodule Documentation for ShippingOption in RST\nDESCRIPTION: This RST directive configures the automatic documentation generation for the ShippingOption module in aiogram. It includes all members and undocumented members, orders them by source appearance, and excludes model_config and model_fields from the documentation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/shipping_option.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.shipping_option\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineQueryResultVoice Class in Python\nDESCRIPTION: This code snippet uses Python's automodule directive to generate documentation for the InlineQueryResultVoice class. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_voice.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_voice\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for BusinessOpeningHours Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the BusinessOpeningHours module. It includes all members, orders them by source, includes undocumented members, and excludes specific members related to model configuration and fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/business_opening_hours.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.business_opening_hours\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for BusinessLocation module in Python\nDESCRIPTION: This snippet configures Sphinx autodoc to generate documentation for the BusinessLocation module. It includes all members, orders them by source, includes undocumented members, and excludes specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/business_location.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.business_location\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sending Copy of Poll Message in Python\nDESCRIPTION: Fixed the Message.send_copy method for polls.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Fixed for polls\nMessage.send_copy()\n```\n\n----------------------------------------\n\nTITLE: Importing CopyMessages Class in Python\nDESCRIPTION: This snippet shows how to import the CopyMessages class from the aiogram library. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_messages.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.copy_messages import CopyMessages\n# alias: from aiogram.methods import CopyMessages\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for PaidMediaType Enum Documentation\nDESCRIPTION: Sphinx directive configuration for automatically generating documentation for the PaidMediaType enumeration. The directive includes all members, maintains source order, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/paid_media_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.paid_media_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ChatMemberOwner in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the ChatMemberOwner class. It includes all members, orders them by source, includes undocumented members, and excludes specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_member_owner.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.chat_member_owner\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing SetStickerMaskPosition Class in Python\nDESCRIPTION: This snippet shows how to import the SetStickerMaskPosition class from the aiogram.methods module. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_mask_position.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_sticker_mask_position import SetStickerMaskPosition\nfrom aiogram.methods import SetStickerMaskPosition\n```\n\n----------------------------------------\n\nTITLE: Pin Message in Webhook Handler - Python Aiogram\nDESCRIPTION: Example of returning a PinChatMessage object as a response in a webhook handler for asynchronous execution.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/pin_chat_message.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn PinChatMessage(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetStickerPositionInSet with a Specific Bot in Python\nDESCRIPTION: This example demonstrates how to use the SetStickerPositionInSet method with a specific bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_position_in_set.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetStickerPositionInSet(...))\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for VideoChatStarted Class in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate documentation for the VideoChatStarted class. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/video_chat_started.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.video_chat_started\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Documentation for KeyboardButtonPollType\nDESCRIPTION: Sphinx autodoc directive for documenting the keyboard_button_poll_type module from aiogram library. Includes all members, orders them by source, shows undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/keyboard_button_poll_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.keyboard_button_poll_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for WebAppData module in aiogram\nDESCRIPTION: This directive configures Sphinx to automatically document the WebAppData module in aiogram, including all members ordered by source code appearance and undocumented members, while excluding specific model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/web_app_data.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.web_app_data\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation for MessageReactionCountUpdated\nDESCRIPTION: RST directive configuration for auto-generating documentation for the MessageReactionCountUpdated class from aiogram.types. Includes all members and undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_reaction_count_updated.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.message_reaction_count_updated\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for BotCommandScopeChat\nDESCRIPTION: Sphinx documentation configuration block that specifies how to generate documentation for the BotCommandScopeChat module from aiogram.types. It includes all members, preserves source order, shows undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/bot_command_scope_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.bot_command_scope_chat\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Enums in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents in reStructuredText format, listing all available enum types in the aiogram project. It uses the toctree directive to create a hierarchical structure of documents.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    bot_command_scope_type\n    chat_action\n    chat_boost_source_type\n    chat_member_status\n    chat_type\n    content_type\n    currency\n    dice_emoji\n    encrypted_passport_element\n    inline_query_result_type\n    input_media_type\n    input_paid_media_type\n    input_profile_photo_type\n    input_story_content_type\n    keyboard_button_poll_type_type\n    mask_position_point\n    menu_button_type\n    message_entity_type\n    message_origin_type\n    owned_gift_type\n    paid_media_type\n    parse_mode\n    passport_element_error_type\n    poll_type\n    reaction_type_type\n    revenue_withdrawal_state_type\n    sticker_format\n    sticker_type\n    story_area_type_type\n    topic_icon_color\n    transaction_partner_type\n    transaction_partner_user_transaction_type_enum\n    update_type\n```\n\n----------------------------------------\n\nTITLE: Setting Thumbnail as Webhook Reply\nDESCRIPTION: Demonstrates how to set a custom emoji sticker set thumbnail as a reply in a webhook handler.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_custom_emoji_sticker_set_thumbnail.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetCustomEmojiStickerSetThumbnail(...)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Reference for ForumTopicClosed\nDESCRIPTION: ReStructuredText directive for auto-generating module documentation for the ForumTopicClosed class from aiogram.types.forum_topic_closed module. Includes all members and preserves source order while excluding model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/forum_topic_closed.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.forum_topic_closed\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using LogOut as an Object with a Specific Bot in Python\nDESCRIPTION: This example shows how to use the LogOut method as an object with a specific bot. It involves importing the LogOut class and using it with the bot's call method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/log_out.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(LogOut(...))\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for ChatShared\nDESCRIPTION: Sphinx documentation configuration directive that automatically generates documentation for the ChatShared module from aiogram.types.chat_shared, including all members except model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_shared.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.chat_shared\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for ChatBoostRemoved\nDESCRIPTION: Sphinx documentation configuration block that specifies how to generate documentation for the chat_boost_removed module. It includes all members, orders them by source order, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_boost_removed.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.chat_boost_removed\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing InlineQueryResultsButton Module in Python\nDESCRIPTION: This code snippet shows how to import the InlineQueryResultsButton module from the aiogram.types package. It uses Python's automodule directive to generate documentation for all members of the module.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_results_button.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_results_button\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting ChatMemberMember Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the ChatMemberMember class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_member_member.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.chat_member_member\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PassportData\nDESCRIPTION: Sphinx documentation configuration directive for generating documentation from the aiogram.types.passport_data module. Includes members in source order and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/passport_data.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n############\nPassportData\n############\n\n\n.. automodule:: aiogram.types.passport_data\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule directive for TransactionPartnerUser\nDESCRIPTION: A Sphinx directive that automatically generates documentation for the TransactionPartnerUser module, including all members but excluding specific configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/transaction_partner_user.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.transaction_partner_user\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for GeneralForumTopicUnhidden Type\nDESCRIPTION: RST configuration block that sets up autodoc documentation generation for the GeneralForumTopicUnhidden class. Specifies member ordering by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/general_forum_topic_unhidden.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.general_forum_topic_unhidden\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Adding caption_entities Field to InputMedia Base Class in Python\nDESCRIPTION: Added the caption_entities field to the InputMedia base class.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Added field\nclass InputMedia:\n    caption_entities: List[MessageEntity]\n```\n\n----------------------------------------\n\nTITLE: Importing SetBusinessAccountUsername in Python\nDESCRIPTION: These import statements show how to import the SetBusinessAccountUsername method from aiogram. Two import options are provided: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_username.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_business_account_username import SetBusinessAccountUsername\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import SetBusinessAccountUsername\n```\n\n----------------------------------------\n\nTITLE: Setting Thumbnail Using Method Object with Specific Bot\nDESCRIPTION: Shows how to set a custom emoji sticker set thumbnail using the SetCustomEmojiStickerSetThumbnail class with a specific bot instance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_custom_emoji_sticker_set_thumbnail.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetCustomEmojiStickerSetThumbnail(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring RST AutoModule Documentation for ChatMemberRestricted\nDESCRIPTION: Sphinx/RST configuration block that sets up automatic documentation generation for the aiogram.types.chat_member_restricted module. It includes all members, orders them by source order, shows undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_member_restricted.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.chat_member_restricted\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using CreateChatSubscriptionInviteLink as a Webhook Reply in Python\nDESCRIPTION: Returns the CreateChatSubscriptionInviteLink method object directly from a handler function, which can be used to respond to a Webhook request in Telegram bot applications.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_subscription_invite_link.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn CreateChatSubscriptionInviteLink(...)\n```\n\n----------------------------------------\n\nTITLE: Using SetStickerSetThumbnail Object with Specific Bot\nDESCRIPTION: Shows how to set a sticker set thumbnail using the SetStickerSetThumbnail class with a specific bot instance. This approach uses the object-oriented method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_thumbnail.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetStickerSetThumbnail(...))\n```\n\n----------------------------------------\n\nTITLE: RST Automodule Documentation Directive\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the BotCommandScopeAllPrivateChats module, including all members ordered by source appearance while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/bot_command_scope_all_private_chats.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.bot_command_scope_all_private_chats\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for MaskPosition Class\nDESCRIPTION: Sphinx automodule directive configuration for generating documentation of the MaskPosition class from aiogram.types.mask_position module. Includes all members ordered by source, including undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/mask_position.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.mask_position\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for aiogram.types.poll_option module\nDESCRIPTION: Sphinx configuration directives for automatically generating documentation from the aiogram.types.poll_option module. It includes all members in source order, includes undocumented members, and excludes model_config and model_fields attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/poll_option.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.poll_option\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for ChatBoostSourceGiftCode\nDESCRIPTION: Sphinx documentation directive for auto-generating documentation for the ChatBoostSourceGiftCode class from the aiogram.types.chat_boost_source_gift_code module. Includes all members except model_config and model_fields, ordered by source.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_boost_source_gift_code.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.chat_boost_source_gift_code\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for SuccessfulPayment Module\nDESCRIPTION: This RST (reStructuredText) snippet defines the documentation structure for the SuccessfulPayment module in aiogram. It uses automodule directive to generate documentation from docstrings, displaying members in source code order.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/successful_payment.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.successful_payment\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for ChatFullInfo\nDESCRIPTION: Sphinx documentation configuration block that auto-generates API documentation for the chat_full_info module. Includes all members, orders them by source order, shows undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_full_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.chat_full_info\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using AddStickerToSet with Bot Instance\nDESCRIPTION: Demonstrates using the AddStickerToSet method by passing it to a bot instance. Requires importing the AddStickerToSet class.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/add_sticker_to_set.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(AddStickerToSet(...))\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation for BackgroundFill in reStructuredText\nDESCRIPTION: This reStructuredText directive generates documentation for the BackgroundFill module in the aiogram.types package. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/background_fill.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.background_fill\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Handling Polls in aiogram\nDESCRIPTION: Example of handling poll updates in a Telegram bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@router.poll()\nasync def poll_handler(poll: types.Poll) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for VideoChatEnded Documentation\nDESCRIPTION: Sphinx configuration directive that generates documentation for the VideoChatEnded class from the aiogram.types.video_chat_ended module. The configuration specifies to include all members ordered by source and to exclude specific model configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/video_chat_ended.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.video_chat_ended\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for MessageOriginType\nDESCRIPTION: Sphinx documentation configuration directive that automatically generates API documentation for the message_origin_type module, including all members ordered by source appearance and including undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/message_origin_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.message_origin_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for InaccessibleMessage in reStructuredText\nDESCRIPTION: This snippet configures Sphinx's automodule directive to generate documentation for the InaccessibleMessage class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inaccessible_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.inaccessible_message\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for MaybeInaccessibleMessage Module\nDESCRIPTION: RST directive to automatically generate documentation for the MaybeInaccessibleMessage module. It includes all members, orders them by source appearance, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/maybe_inaccessible_message.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.maybe_inaccessible_message\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring RST documentation for PassportElementErrorSelfie\nDESCRIPTION: ReStructuredText configuration for auto-generating module documentation for aiogram's passport element error selfie class. Excludes model_config and model_fields from documentation while including all other members sorted by source order.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/passport_element_error_selfie.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.passport_element_error_selfie\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for MenuButtonWebApp in Python\nDESCRIPTION: This code snippet configures Sphinx's autodoc extension to generate documentation for the MenuButtonWebApp class. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/menu_button_web_app.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.menu_button_web_app\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Redis Storage Update Method\nDESCRIPTION: Code reference showing corrected method name for Redis storage.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nupdate_bucket\n```\n\n----------------------------------------\n\nTITLE: Using RemoveUserVerification in Webhook Handler\nDESCRIPTION: Shows how to return a RemoveUserVerification object directly from a webhook handler for response processing.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_user_verification.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn RemoveUserVerification(...)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for API Types in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents structure for various API types in Aiogram using reStructuredText format. It organizes the types into categories and provides links to individual documentation pages.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    accepted_gift_types\n    animation\n    audio\n    background_fill\n    background_fill_freeform_gradient\n    background_fill_gradient\n    background_fill_solid\n    background_type\n    background_type_chat_theme\n    background_type_fill\n    background_type_pattern\n    background_type_wallpaper\n    birthdate\n    bot_command\n    bot_command_scope\n    bot_command_scope_all_chat_administrators\n    bot_command_scope_all_group_chats\n    bot_command_scope_all_private_chats\n    bot_command_scope_chat\n    bot_command_scope_chat_administrators\n    bot_command_scope_chat_member\n    bot_command_scope_default\n    bot_description\n    bot_name\n    bot_short_description\n    business_bot_rights\n    business_connection\n    business_intro\n    business_location\n    business_messages_deleted\n    business_opening_hours\n    business_opening_hours_interval\n    callback_query\n    chat\n    chat_administrator_rights\n    chat_background\n    chat_boost\n    chat_boost_added\n    chat_boost_removed\n    chat_boost_source\n    chat_boost_source_gift_code\n    chat_boost_source_giveaway\n    chat_boost_source_premium\n    chat_boost_updated\n    chat_full_info\n    chat_invite_link\n    chat_join_request\n    chat_location\n    chat_member\n    chat_member_administrator\n    chat_member_banned\n    chat_member_left\n    chat_member_member\n    chat_member_owner\n    chat_member_restricted\n    chat_member_updated\n    chat_permissions\n    chat_photo\n    chat_shared\n    contact\n    copy_text_button\n    dice\n    document\n    external_reply_info\n    file\n    force_reply\n    forum_topic\n    forum_topic_closed\n    forum_topic_created\n    forum_topic_edited\n    forum_topic_reopened\n    general_forum_topic_hidden\n    general_forum_topic_unhidden\n    gift\n    gift_info\n    gifts\n    giveaway\n    giveaway_completed\n    giveaway_created\n    giveaway_winners\n    inaccessible_message\n    inline_keyboard_button\n    inline_keyboard_markup\n    input_file\n    input_media\n    input_media_animation\n    input_media_audio\n    input_media_document\n    input_media_photo\n    input_media_video\n    input_paid_media\n    input_paid_media_photo\n    input_paid_media_video\n    input_poll_option\n    input_profile_photo\n    input_profile_photo_animated\n    input_profile_photo_static\n    input_story_content\n    input_story_content_photo\n    input_story_content_video\n    keyboard_button\n    keyboard_button_poll_type\n    keyboard_button_request_chat\n    keyboard_button_request_user\n    keyboard_button_request_users\n    link_preview_options\n    location\n    location_address\n    login_url\n    maybe_inaccessible_message\n    menu_button\n    menu_button_commands\n    menu_button_default\n    menu_button_web_app\n    message\n    message_auto_delete_timer_changed\n    message_entity\n    message_id\n    message_origin\n    message_origin_channel\n    message_origin_chat\n    message_origin_hidden_user\n    message_origin_user\n    message_reaction_count_updated\n    message_reaction_updated\n    owned_gift\n    owned_gift_regular\n    owned_gift_unique\n    owned_gifts\n    paid_media\n    paid_media_info\n    paid_media_photo\n    paid_media_preview\n    paid_media_video\n    paid_message_price_changed\n    photo_size\n    poll\n    poll_answer\n    poll_option\n    proximity_alert_triggered\n    reaction_count\n    reaction_type\n    reaction_type_custom_emoji\n    reaction_type_emoji\n    reaction_type_paid\n    reply_keyboard_markup\n    reply_keyboard_remove\n    reply_parameters\n    response_parameters\n    shared_user\n    star_amount\n    story\n    story_area\n    story_area_position\n    story_area_type\n    story_area_type_link\n    story_area_type_location\n    story_area_type_suggested_reaction\n    story_area_type_unique_gift\n    story_area_type_weather\n    switch_inline_query_chosen_chat\n    text_quote\n    unique_gift\n    unique_gift_backdrop\n    unique_gift_backdrop_colors\n    unique_gift_info\n    unique_gift_model\n    unique_gift_symbol\n    user\n    user_chat_boosts\n    user_profile_photos\n    user_shared\n    users_shared\n    venue\n    video\n    video_chat_ended\n    video_chat_participants_invited\n    video_chat_scheduled\n    video_chat_started\n    video_note\n    voice\n    web_app_data\n    web_app_info\n    write_access_allowed\n```\n\n----------------------------------------\n\nTITLE: Using UnpinAllGeneralForumTopicMessages as Object with Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the UnpinAllGeneralForumTopicMessages method as an object with a specific bot instance. It requires importing the method from aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_general_forum_topic_messages.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(UnpinAllGeneralForumTopicMessages(...))\n```\n\n----------------------------------------\n\nTITLE: Using reopenGeneralForumTopic as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the reopenGeneralForumTopic method directly on a bot instance. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_general_forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.reopen_general_forum_topic(...)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for MessageOriginChannel\nDESCRIPTION: ReStructuredText directives for auto-documenting the MessageOriginChannel module, configuring member ordering and exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_origin_channel.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n####################\nMessageOriginChannel\n####################\n\n\n.. automodule:: aiogram.types.message_origin_channel\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for WebAppInfo in aiogram\nDESCRIPTION: This restructuredtext directive sets up automated documentation generation for the WebAppInfo class in aiogram. It includes all members in source order, shows undocumented members, but excludes model_config and model_fields properties.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/web_app_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.web_app_info\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Config for StoryAreaTypeUniqueGift Module\nDESCRIPTION: Sphinx documentation configuration directives for auto-generating documentation from the aiogram.types.story_area_type_unique_gift module. Includes settings for member ordering, undocumented members, and member exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/story_area_type_unique_gift.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.story_area_type_unique_gift\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating ChatJoinRequest Module Documentation with Sphinx\nDESCRIPTION: This ReStructuredText code snippet configures the autodoc extension to generate documentation for the ChatJoinRequest module. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_join_request.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.chat_join_request\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InputMessageContent Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the InputMessageContent module. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_message_content.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.input_message_content\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Python Documentation for aiogram.types.location Module\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the aiogram.types.location module. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/location.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.location\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring ReST Documentation for BusinessOpeningHoursInterval\nDESCRIPTION: ReST documentation configuration that auto-generates API documentation for the BusinessOpeningHoursInterval class from aiogram.types.business_opening_hours_interval module. It includes all members and undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/business_opening_hours_interval.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.business_opening_hours_interval\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for WriteAccessAllowed documentation in RST\nDESCRIPTION: Sphinx directive to automatically generate documentation for the WriteAccessAllowed class from the aiogram.types.write_access_allowed module. The configuration excludes model_config and model_fields members while including all other members ordered by source appearance.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/write_access_allowed.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.write_access_allowed\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting BusinessIntro Module with Sphinx\nDESCRIPTION: Sphinx documentation configuration for the BusinessIntro module using automodule directive. Includes all members ordered by source, including undocumented members, while excluding model configuration and fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/business_intro.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.business_intro\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for InputPaidMediaType in RST\nDESCRIPTION: RST code that configures Sphinx to automatically document the InputPaidMediaType enum from the aiogram.enums.input_paid_media_type module. It instructs Sphinx to include all members, order them as they appear in the source code, and document undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/input_paid_media_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##################\nInputPaidMediaType\n##################\n\n\n.. automodule:: aiogram.enums.input_paid_media_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InlineQueryResultPhoto in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the InlineQueryResultPhoto class. It includes all members, orders them by source, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_photo\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing GetForumTopicIconStickers Method in Python\nDESCRIPTION: This snippet shows how to import the GetForumTopicIconStickers method from the aiogram library. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_forum_topic_icon_stickers.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.get_forum_topic_icon_stickers import GetForumTopicIconStickers\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import GetForumTopicIconStickers\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for BotCommand\nDESCRIPTION: Sphinx documentation configuration directives for auto-documenting the BotCommand class from aiogram.types.bot_command module, excluding model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/bot_command.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.bot_command\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for InputPaidMediaPhoto in reStructuredText\nDESCRIPTION: This snippet configures Sphinx to automatically generate documentation for the InputPaidMediaPhoto module. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_paid_media_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.input_paid_media_photo\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using replaceStickerInSet as a Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the replaceStickerInSet method directly as a bot method. It returns a boolean result indicating success or failure.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/replace_sticker_in_set.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.replace_sticker_in_set(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring module autodocumentation for ProximityAlertTriggered in aiogram\nDESCRIPTION: reStructuredText directive that configures the autodocumentation for the proximity_alert_triggered module, including all members in source order while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/proximity_alert_triggered.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.proximity_alert_triggered\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for RevenueWithdrawalStateSucceeded\nDESCRIPTION: Sphinx documentation configuration for auto-documenting the RevenueWithdrawalStateSucceeded class from aiogram.types module. Includes all members sorted by source order, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/revenue_withdrawal_state_succeeded.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.revenue_withdrawal_state_succeeded\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for InputStoryContentVideo in Python\nDESCRIPTION: This snippet configures Sphinx to automatically generate documentation for the InputStoryContentVideo module in aiogram. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_story_content_video.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.input_story_content_video\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for MessageReactionUpdated in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the MessageReactionUpdated class. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_reaction_updated.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.message_reaction_updated\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ChatMemberBanned Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the ChatMemberBanned class from the aiogram.types.chat_member_banned module. It includes all members, orders them by source, and excludes certain attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_member_banned.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.chat_member_banned\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PaidMediaPreview Module\nDESCRIPTION: RST directive for configuring Sphinx documentation generator for the PaidMediaPreview class from aiogram.types.paid_media_preview module. Includes all members sorted by source order and undocumented members, while excluding model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/paid_media_preview.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.paid_media_preview\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule directive for UniqueGift documentation\nDESCRIPTION: This directive configures Sphinx to automatically generate documentation for the aiogram.types.unique_gift module, including all members ordered by source. It excludes model_config and model_fields members from the documentation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/unique_gift.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.unique_gift\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PaidMediaInfo Module in reStructuredText\nDESCRIPTION: This reStructuredText code snippet sets up the documentation for the PaidMediaInfo module. It uses the automodule directive to automatically generate documentation from the source code, including all members, ordering them by source, and including undocumented members while excluding specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/paid_media_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.paid_media_info\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for BusinessMessagesDeleted Module\nDESCRIPTION: Sphinx documentation directive configuring the autogeneration of documentation for the BusinessMessagesDeleted module. Shows all members ordered by source appearance, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/business_messages_deleted.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.business_messages_deleted\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoDoc Configuration for TransactionPartnerTelegramApi\nDESCRIPTION: RST directive configuring Sphinx documentation generation for the TransactionPartnerTelegramApi module. Includes all members, orders them by source, includes undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/transaction_partner_telegram_api.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.transaction_partner_telegram_api\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for aiogram.types.venue Module\nDESCRIPTION: This reStructuredText directive configures Sphinx to automatically generate documentation for the aiogram.types.venue module. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/venue.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.venue\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using DeleteStickerFromSet as Method Object with Specific Bot in Python\nDESCRIPTION: Example demonstrating how to use the DeleteStickerFromSet method as an object with a specific bot instance. This shows how to import the method class and call it with a bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_from_set.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteStickerFromSet(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Aiogram User Model\nDESCRIPTION: Sphinx configuration directives for auto-generating documentation from the aiogram.types.user module. Settings specify member inclusion/exclusion and ordering.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/user.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.user\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using RefundStarPayment with a Specific Bot in Python\nDESCRIPTION: This code demonstrates how to use the RefundStarPayment method as an object with a specific bot instance. It returns a boolean result indicating the success of the operation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/refund_star_payment.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(RefundStarPayment(...))\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: ReStructuredText documentation template that configures autodoc settings for the PassportElementErrorFile module, specifying member ordering and exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/passport_element_error_file.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n########################\nPassportElementErrorFile\n########################\n\n\n.. automodule:: aiogram.types.passport_element_error_file\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for ChatBoostSource Module\nDESCRIPTION: RST directive for configuring the auto-documentation of the ChatBoostSource module, including all members and ordering them by source order.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_boost_source.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.chat_boost_source\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Automodule Documentation for ForumTopic\nDESCRIPTION: Sphinx documentation configuration for aiogram.types.forum_topic module. Includes all members ordered by source, includes undocumented members, and excludes model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/forum_topic.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.forum_topic\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for ForumTopicCreated\nDESCRIPTION: Sphinx autodoc directive configuration for documenting the ForumTopicCreated class from aiogram.types.forum_topic_created module. Configures member ordering, inclusion of undocumented members, and exclusion of specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/forum_topic_created.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.forum_topic_created\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PassportFile in aiogram\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the PassportFile class in the aiogram.types.passport_file module. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/passport_file.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.passport_file\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for MessageOriginHiddenUser Module\nDESCRIPTION: ReStructuredText documentation configuration that automatically generates API documentation for the MessageOriginHiddenUser module. Excludes model_config and model_fields members while including all other members ordered by source.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_origin_hidden_user.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.message_origin_hidden_user\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for StoryAreaType\nDESCRIPTION: RST directive for configuring automatic documentation generation for the aiogram.types.story_area_type module. Specifies member ordering, inclusion of undocumented members, and exclusion of specific module attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/story_area_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.story_area_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring automodule for ResponseParameters in Aiogram\nDESCRIPTION: A reStructuredText directive that configures automatic documentation generation for the ResponseParameters module, including all members ordered by source, including undocumented members, while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/response_parameters.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.response_parameters\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for TransactionPartnerTelegramAds in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the TransactionPartnerTelegramAds class from the aiogram.types module. It includes all members and undocumented members, ordered by source, while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/transaction_partner_telegram_ads.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.transaction_partner_telegram_ads\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using error update handler with exception filters in aiogram\nDESCRIPTION: This code snippet demonstrates the syntax for error handlers in aiogram that use exception filters. It shows that these filters are specifically designed for use with error-type updates.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/exception.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nerror\n```\n\n----------------------------------------\n\nTITLE: Importing KeyboardButtonRequestUsers Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the KeyboardButtonRequestUsers module from the aiogram.types package. It's used to access functionality related to keyboard button requests for users in Telegram bots.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/keyboard_button_request_users.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom aiogram.types.keyboard_button_request_users import KeyboardButtonRequestUsers\n```\n\n----------------------------------------\n\nTITLE: Returning CreateInvoiceLink as a Webhook Response\nDESCRIPTION: Shows how to return CreateInvoiceLink directly from a handler function when working with webhooks in aiogram.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_invoice_link.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn CreateInvoiceLink(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for TransactionPartner in RST\nDESCRIPTION: Sphinx documentation configuration block that specifies how to auto-document the TransactionPartner module from aiogram.types.transaction_partner. It includes all members except model_config and model_fields, orders members by source, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/transaction_partner.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##################\nTransactionPartner\n##################\n\n\n.. automodule:: aiogram.types.transaction_partner\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule directive for SharedUser documentation\nDESCRIPTION: This RST directive configures Sphinx to automatically generate documentation for the SharedUser module in aiogram.types package. It includes all members, orders them by source order, includes undocumented members, but excludes model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/shared_user.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##########\nSharedUser\n##########\n\n\n.. automodule:: aiogram.types.shared_user\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for UniqueGiftBackdropColors module in aiogram\nDESCRIPTION: Sphinx autodoc directive that automatically documents the members of the aiogram.types.unique_gift_backdrop_colors module. It sorts members by source order, includes undocumented members, and excludes specific members related to model configuration.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/unique_gift_backdrop_colors.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.unique_gift_backdrop_colors\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing InlineQueryResultVenue Module in Python\nDESCRIPTION: This code snippet shows how to import the InlineQueryResultVenue module from the aiogram.types package. The automodule directive is used to automatically generate documentation for the module.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_venue.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_venue\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx documentation for OwnedGifts module\nDESCRIPTION: RST directive configuration for auto-generating documentation of the OwnedGifts class from aiogram.types.owned_gifts module. Includes settings for member ordering, undocumented members, and member exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/owned_gifts.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##########\nOwnedGifts\n##########\n\n\n.. automodule:: aiogram.types.owned_gifts\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InputMediaPhoto Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the InputMediaPhoto class in the aiogram.types.input_media_photo module. It includes all members, orders them by source, and includes undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_media_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.input_media_photo\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using UnbanChatSenderChat as Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the UnbanChatSenderChat method as a reply in a webhook handler. It returns the UnbanChatSenderChat object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_sender_chat.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn UnbanChatSenderChat(...)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for KeyboardButtonRequestUser in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the KeyboardButtonRequestUser class. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/keyboard_button_request_user.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.keyboard_button_request_user\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using AnswerCallbackQuery as a Webhook Response in a Handler\nDESCRIPTION: Example of returning the AnswerCallbackQuery object directly from a handler to be used as a response in a webhook scenario.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_callback_query.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn AnswerCallbackQuery(...)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InlineQueryResultContact Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the InlineQueryResultContact module in the aiogram.types package. It includes all members, orders them by source, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_contact.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_contact\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for BackgroundTypeFill Module\nDESCRIPTION: This reStructuredText directive configures Sphinx to auto-generate documentation for the BackgroundTypeFill module. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/background_type_fill.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.background_type_fill\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for BackgroundFillSolid in Python\nDESCRIPTION: This snippet configures the autodoc extension for the BackgroundFillSolid class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes related to Pydantic models.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/background_fill_solid.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.background_fill_solid\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for PaidMediaPhoto\nDESCRIPTION: Sphinx documentation configuration directives for the PaidMediaPhoto module, specifying member ordering and inclusion/exclusion rules.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/paid_media_photo.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.paid_media_photo\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for UniqueGiftSymbol in reStructuredText\nDESCRIPTION: Sphinx autodoc configuration directive for the UniqueGiftSymbol class from aiogram.types. The directive includes all members, orders them by source, includes undocumented members, and excludes specific members like model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/unique_gift_symbol.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.unique_gift_symbol\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for InputProfilePhotoType\nDESCRIPTION: Sphinx documentation configuration directive that generates API documentation for the InputProfilePhotoType enum module. It includes all members, orders them by source order, and shows undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/input_profile_photo_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.input_profile_photo_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for LabeledPrice Class in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the LabeledPrice class. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/labeled_price.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.labeled_price\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using EditGeneralForumTopic as a Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the EditGeneralForumTopic class as a reply in a webhook handler. It returns the EditGeneralForumTopic object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_general_forum_topic.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn EditGeneralForumTopic(...)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration\nDESCRIPTION: ReStructuredText directive for auto-generating documentation for the InlineQueryResultGif module, specifying member ordering and exclusion rules.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_gif.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_gif\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing DeleteForumTopic Method in Python\nDESCRIPTION: These lines show how to import the DeleteForumTopic method from the aiogram library. Two import options are provided: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.delete_forum_topic import DeleteForumTopic\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import DeleteForumTopic\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for PaidMediaPurchased\nDESCRIPTION: RST directive configuration for automatically generating documentation from the PaidMediaPurchased module docstrings. Includes member ordering by source, undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/paid_media_purchased.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##################\nPaidMediaPurchased\n##################\n\n\n.. automodule:: aiogram.types.paid_media_purchased\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for aiogram.enums.reaction_type_type\nDESCRIPTION: Sphinx directive configuration for automatically documenting the ReactionTypeType enumeration from the aiogram package. The directive includes all members, orders them by source appearance, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/reaction_type_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.enums.reaction_type_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PaidMediaVideo Module\nDESCRIPTION: Sphinx configuration directives to generate documentation for the aiogram.types.paid_media_video module. Includes settings for member ordering, visibility of undocumented members, and exclusion of specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/paid_media_video.rst#2025-04-17_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. automodule:: aiogram.types.paid_media_video\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for OwnedGiftRegular Module using Sphinx\nDESCRIPTION: This reStructuredText snippet uses the Sphinx automodule directive to automatically generate documentation for the OwnedGiftRegular class from the aiogram.types.owned_gift_regular module. It includes all members, orders them by source, includes undocumented members, and excludes specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/owned_gift_regular.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.owned_gift_regular\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Basic RST Include Directive\nDESCRIPTION: RST directive to include main README file content\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../README.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule directive for PollType enum documentation\nDESCRIPTION: Sphinx directive configuration that automatically generates documentation for the aiogram.enums.poll_type module. It includes all members, preserves their source code order, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/poll_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. automodule:: aiogram.enums.poll_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for LinkPreviewOptions\nDESCRIPTION: Sphinx documentation directive that configures automated documentation generation for the LinkPreviewOptions module. It includes all members ordered by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/link_preview_options.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n##################\nLinkPreviewOptions\n##################\n\n\n.. automodule:: aiogram.types.link_preview_options\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using RefundStarPayment as a Webhook Reply in Python\nDESCRIPTION: This snippet shows how to use the RefundStarPayment method as a reply in a webhook handler. It returns the RefundStarPayment object directly.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/refund_star_payment.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn RefundStarPayment(...)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration\nDESCRIPTION: Sphinx documentation configuration for the InlineQueryResultMpeg4Gif module, specifying automodule directives and member inclusion settings.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_mpeg4_gif.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_mpeg4_gif\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for ChatBoostAdded class\nDESCRIPTION: RST directives for configuring Sphinx autodoc module to generate documentation for the ChatBoostAdded class from aiogram.types.chat_boost_added module. Configures member ordering, inclusion of undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_boost_added.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##############\nChatBoostAdded\n##############\n\n\n.. automodule:: aiogram.types.chat_boost_added\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting MemoryStorage Class in Python\nDESCRIPTION: Autodocumentation for the MemoryStorage class from aiogram.fsm.storage.memory module, focusing on the __init__ method.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: aiogram.fsm.storage.memory.MemoryStorage\n    :members: __init__\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Directive\nDESCRIPTION: ReStructuredText directive for generating automated documentation for the ChatBoostSourcePremium module from aiogram.types.chat_boost_source_premium\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_boost_source_premium.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.chat_boost_source_premium\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Block for PaidMessagePriceChanged\nDESCRIPTION: ReStructuredText directive for auto-documenting the PaidMessagePriceChanged module from aiogram.types, excluding specific members and ordering by source.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/paid_message_price_changed.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.paid_message_price_changed\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for MessageOrigin module in Python\nDESCRIPTION: This code snippet configures Sphinx's autodoc extension to generate documentation for the MessageOrigin module in aiogram. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_origin.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.message_origin\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Setting Passport Data Errors in Webhook Handler\nDESCRIPTION: Implementation for setting passport data errors as a webhook response within a handler function.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_passport_data_errors.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetPassportDataErrors(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for StarTransactions in RST\nDESCRIPTION: This RST code configures Sphinx's automodule directive to generate documentation for the aiogram.types.star_transactions module. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/star_transactions.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.star_transactions\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InlineQueryResultCachedAudio in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the InlineQueryResultCachedAudio class from the aiogram.types.inline_query_result_cached_audio module. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_cached_audio.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_cached_audio\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for StarTransaction Module\nDESCRIPTION: Sphinx RST configuration block that sets up automatic documentation generation for the aiogram.types.star_transaction module. Configures member ordering, inclusion of undocumented members, and exclusion of specific model fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/star_transaction.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n###############\nStarTransaction\n###############\n\n\n.. automodule:: aiogram.types.star_transaction\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using UpgradeGift as a Reply in a Webhook Handler in Python\nDESCRIPTION: This snippet demonstrates how to use the UpgradeGift method as a reply within a webhook handler. It directly returns the UpgradeGift object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upgrade_gift.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn UpgradeGift(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for InputFile Module in Python\nDESCRIPTION: This code snippet configures Sphinx's autodoc extension to generate documentation for the InputFile module in aiogram. It includes all members, orders them by source, includes undocumented members, and excludes specific members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_file.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.input_file\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for ChosenInlineResult in Python\nDESCRIPTION: This snippet configures Sphinx's autodoc extension to generate documentation for the ChosenInlineResult class. It includes all members, orders them by source appearance, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chosen_inline_result.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.chosen_inline_result\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring RST AutoModule Documentation for MessageOriginUser\nDESCRIPTION: RST directive configuration for automatically generating documentation from the aiogram.types.message_origin_user module. Includes all members ordered by source, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/message_origin_user.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.message_origin_user\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting PassportElementErrorDataField Class in Python\nDESCRIPTION: This code snippet uses automodule to automatically generate documentation for the PassportElementErrorDataField class. It includes all members, orders them by source, and includes undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/passport_element_error_data_field.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.passport_element_error_data_field\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule Documentation for Gift Type\nDESCRIPTION: Sphinx configuration directives for generating documentation of the aiogram.types.gift module. It includes all members ordered by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/gift.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.gift\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using Magic Filter as_ Operation for Pattern Matching\nDESCRIPTION: Example demonstrating how to use the as_ operation to capture regex matches and photo objects as handler arguments.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import F\n\n@router.message(F.text.regexp(r\"^(\\d+)$\").as_(\"digits\"))\nasync def any_digits_handler(message: Message, digits: Match[str]):\n    await message.answer(html.quote(str(digits)))\n\n\n@router.message(F.photo[-1].as_(\"photo\"))\nasync def download_photos_handler(message: Message, photo: PhotoSize, bot: Bot):\n    content = await bot.download(photo)\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for Voice Module in aiogram\nDESCRIPTION: This RST directive configures the autodoc extension to generate documentation for the aiogram.types.voice module. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/voice.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.voice\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting ChatMember Module with Sphinx RST\nDESCRIPTION: Sphinx reStructuredText markup that configures autodoc for the aiogram.types.chat_member module. Includes all members sorted by source order, includes undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_member.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##########\nChatMember\n##########\n\n\n.. automodule:: aiogram.types.chat_member\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for PreCheckoutQuery\nDESCRIPTION: Sphinx documentation configuration for the PreCheckoutQuery module that enables automatic documentation generation with specific member ordering and inclusion rules.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/pre_checkout_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.pre_checkout_query\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for aiogram.types.inline_query_result\nDESCRIPTION: This snippet configures Sphinx to automatically generate documentation for the inline_query_result module in aiogram. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for OwnedGiftUnique Module\nDESCRIPTION: RST directive configuration for automatically generating documentation from the aiogram.types.owned_gift_unique module. Includes all members ordered by source, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/owned_gift_unique.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.owned_gift_unique\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for ForceReply Documentation\nDESCRIPTION: This code snippet configures Sphinx's automodule directive to generate documentation for the ForceReply class. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/force_reply.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.force_reply\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for BackgroundTypeChatTheme Module\nDESCRIPTION: Sphinx documentation configuration block that specifies how the BackgroundTypeChatTheme module should be documented. It includes all members ordered by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/background_type_chat_theme.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.background_type_chat_theme\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation for InlineQueryResultLocation\nDESCRIPTION: RST directive configuration to auto-generate documentation for the InlineQueryResultLocation module, excluding model configuration fields and ordering members by source order.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_location.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_location\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Sphinx Directive for DiceEmoji Documentation in aiogram\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the aiogram.enums.dice_emoji module. It includes all members, orders them by source appearance, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/dice_emoji.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.dice_emoji\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for PaidMedia Class Documentation\nDESCRIPTION: RST directive that configures automatic documentation generation for the PaidMedia class from aiogram.types.paid_media module. Sets member ordering to source order, includes undocumented members, and excludes model configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/paid_media.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.paid_media\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing UnhideGeneralForumTopic Class in Python\nDESCRIPTION: This snippet shows two ways to import the UnhideGeneralForumTopic class from the aiogram library. It can be imported directly or through an alias.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unhide_general_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.unhide_general_forum_topic import UnhideGeneralForumTopic\n# alias:\nfrom aiogram.methods import UnhideGeneralForumTopic\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for UniqueGiftModel in Sphinx documentation\nDESCRIPTION: This RST directive configures Sphinx's autodoc extension to generate documentation for the aiogram.types.unique_gift_model module, including all members in source order and undocumented members, while excluding model_config and model_fields properties.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/unique_gift_model.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.unique_gift_model\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Live Preview\nDESCRIPTION: Starts a live preview server for the Sphinx documentation\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-autobuild --watch aiogram/ docs/ docs/_build/\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for TextQuote documentation in RST\nDESCRIPTION: A Sphinx directive that configures how the TextQuote module documentation should be generated. It includes all members, orders them by source order, includes undocumented members, and excludes model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/text_quote.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.text_quote\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting BotShortDescription Module with Sphinx\nDESCRIPTION: RST configuration for auto-generating documentation from the aiogram.types.bot_short_description module. Includes all members ordered by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/bot_short_description.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n###################\nBotShortDescription\n###################\n\n\n.. automodule:: aiogram.types.bot_short_description\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Admin Rights Using Object Method\nDESCRIPTION: Example of retrieving default administrator rights using the object-oriented approach by instantiating GetMyDefaultAdministratorRights class. Returns ChatAdministratorRights object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_default_administrator_rights.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: ChatAdministratorRights = await bot(GetMyDefaultAdministratorRights(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for BackgroundTypePattern in Python\nDESCRIPTION: This code snippet configures Sphinx's automodule directive to generate documentation for the BackgroundTypePattern module. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/background_type_pattern.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.background_type_pattern\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing CreateForumTopic Class in Python\nDESCRIPTION: These lines show how to import the CreateForumTopic class from the aiogram.methods module. Two import styles are provided.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_forum_topic.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.create_forum_topic import CreateForumTopic\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import CreateForumTopic\n```\n\n----------------------------------------\n\nTITLE: Configuring automodule for StoryArea documentation in Sphinx\nDESCRIPTION: A Sphinx directive that automatically documents the aiogram.types.story_area module. It includes all members ordered by their appearance in the source, includes undocumented members, and excludes model_config and model_fields attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/story_area.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.story_area\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Method Object Implementation\nDESCRIPTION: Shows how to use SendChatAction as an object with a specific bot instance. Creates a SendChatAction object and executes it through the bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_chat_action.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SendChatAction(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for aiogram Story module\nDESCRIPTION: Sphinx autodoc directive that generates documentation for the aiogram.types.story module. It includes all members, orders them by source order, shows undocumented members, and excludes specific members (model_config and model_fields).\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/story.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.story\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for BotCommandScopeChatAdministrators\nDESCRIPTION: This snippet configures Sphinx's autodoc extension to generate documentation for the BotCommandScopeChatAdministrators class. It specifies which members to include, the order of members, and which members to exclude from the documentation.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/bot_command_scope_chat_administrators.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.bot_command_scope_chat_administrators\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for aiogram.types.video Documentation\nDESCRIPTION: RST directive for Sphinx that automatically generates documentation for the aiogram.types.video module. It includes all members, orders them by source code order, documents undocumented members, and excludes model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/video.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.video\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting StoryAreaTypeSuggestedReaction Module with Sphinx\nDESCRIPTION: Sphinx documentation directive for the StoryAreaTypeSuggestedReaction module, configuring auto-documentation settings while excluding model configuration and fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/story_area_type_suggested_reaction.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.types.story_area_type_suggested_reaction\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Equality Checks with Magic Filters\nDESCRIPTION: Demonstrates how to perform equality checks on message attributes using the F object.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nF.text == 'hello'  # lambda message: message.text == 'hello'\nF.from_user.id == 42  # lambda message: message.from_user.id == 42\nF.text != 'spam'  # lambda message: message.text != 'spam'\n```\n\n----------------------------------------\n\nTITLE: ShippingQuery Documentation Configuration in reStructuredText\nDESCRIPTION: This code specifies the configuration for automatically generating documentation for the ShippingQuery class in aiogram. It includes all members and undocumented members, orders them by source order, and excludes certain model-related members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/shipping_query.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.shipping_query\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting PassportElementErrorReverseSide class in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the PassportElementErrorReverseSide class. It includes all members, orders them by source, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/passport_element_error_reverse_side.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.passport_element_error_reverse_side\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for InlineQueryResultVideo Module\nDESCRIPTION: Sphinx configuration directive for automatically generating documentation from the InlineQueryResultVideo module. Sets member order to follow source code order and includes undocumented members while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/inline_query_result_video.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.inline_query_result_video\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using new KeyboardButtonPollTypeType enum in Python\nDESCRIPTION: Example of using the new KeyboardButtonPollTypeType enum added in this release for the KeyboardButtonPollTypeType.type field.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.types import KeyboardButtonPollTypeType\n\npoll_type = KeyboardButtonPollTypeType.QUIZ\n```\n\n----------------------------------------\n\nTITLE: Documenting BackgroundFillGradient Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the BackgroundFillGradient class. It includes all members, orders them by source, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/background_fill_gradient.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.types.background_fill_gradient\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for aiogram.types.users_shared Module in RST\nDESCRIPTION: This RST directive configures autodoc to generate documentation for the aiogram.types.users_shared module. It includes all members in source order, shows undocumented members, and excludes the model_config and model_fields members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/users_shared.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.users_shared\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Setting up autodoc for aiogram.enums.passport_element_error_type module in reStructuredText\nDESCRIPTION: Configuration for Sphinx autodoc to generate API documentation for the PassportElementErrorType enumeration. The directive includes all members, preserves the source code order, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/passport_element_error_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.enums.passport_element_error_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Importing KeyboardButtonRequestChat Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the KeyboardButtonRequestChat module from the aiogram.types package. It uses the automodule directive to generate documentation for all members of the module.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/keyboard_button_request_chat.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.keyboard_button_request_chat\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for TransactionPartnerAffiliateProgram in ReStructuredText\nDESCRIPTION: This snippet configures Sphinx autodoc to generate documentation for the TransactionPartnerAffiliateProgram module. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/transaction_partner_affiliate_program.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.transaction_partner_affiliate_program\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating CallbackGame Module Documentation with Sphinx\nDESCRIPTION: This reStructuredText snippet configures Sphinx to auto-generate documentation for the CallbackGame module in aiogram. It includes all members, orders them by source, includes undocumented members, and excludes specific attributes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/callback_game.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n############\nCallbackGame\n############\n\n\n.. automodule:: aiogram.types.callback_game\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Generating ChatBoostSourceGiveaway Documentation in RST\nDESCRIPTION: Sphinx automodule directive configuration for generating documentation of the ChatBoostSourceGiveaway class from aiogram.types.chat_boost_source_giveaway module. Includes all members sorted by source order while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/chat_boost_source_giveaway.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.chat_boost_source_giveaway\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting RevenueWithdrawalStateType Enum in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the RevenueWithdrawalStateType enum. It includes all members, orders them by source code order, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/revenue_withdrawal_state_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: aiogram.enums.revenue_withdrawal_state_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation for UserChatBoosts\nDESCRIPTION: Sphinx documentation configuration directives for the UserChatBoosts module. Specifies member ordering, inclusion of undocumented members, and exclusion of specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/user_chat_boosts.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.user_chat_boosts\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment (Windows PowerShell)\nDESCRIPTION: Activates the Python virtual environment in Windows PowerShell\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#2025-04-17_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n.\\.venv\\Scripts\\activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Using DeleteMyCommands as an Object with a Specific Bot\nDESCRIPTION: Demonstrates how to use the DeleteMyCommands class as an object passed to a bot instance. This approach allows for more flexibility when organizing code.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_my_commands.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(DeleteMyCommands(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for Poll Module in Python\nDESCRIPTION: This code snippet configures Sphinx AutoDoc to generate documentation for the Poll module in the aiogram library. It includes all members, orders them by source, includes undocumented members, and excludes specific configuration fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/poll.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: aiogram.types.poll\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Documenting MaskPositionPoint Enum in Python\nDESCRIPTION: This code snippet uses automodule to generate documentation for the MaskPositionPoint enum in the aiogram.enums.mask_position_point module. It includes all members, orders them by source, and includes undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/mask_position_point.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: aiogram.enums.mask_position_point\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for RevenueWithdrawalStateFailed class\nDESCRIPTION: Sphinx configuration directive that automatically generates documentation for the RevenueWithdrawalStateFailed class in the aiogram.types module. It includes all members, orders them by source appearance, includes undocumented members, and excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/revenue_withdrawal_state_failed.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.revenue_withdrawal_state_failed\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using DeleteStory as Bot Method\nDESCRIPTION: Example of using deleteStory as a direct bot method call. Returns a boolean indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_story.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.delete_story(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for GeneralForumTopicHidden\nDESCRIPTION: Sphinx documentation directive to automatically generate documentation for the GeneralForumTopicHidden class, excluding model_config and model_fields members while preserving source order.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/general_forum_topic_hidden.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.general_forum_topic_hidden\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: ChatMember Status Methods\nDESCRIPTION: Example of renamed chat member status check methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nis_chat_member\nis_chat_admin\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Configuration for aiogram.types.file\nDESCRIPTION: RST directive configuration for automatically generating documentation from the aiogram.types.file module. Includes all members ordered by source, including undocumented members, while excluding model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/file.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.file\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Using getStickerSet as Object Method with Specific Bot in Python\nDESCRIPTION: This snippet shows how to use the getStickerSet method as an object with a specific bot instance. It requires importing the GetStickerSet class from aiogram.methods.get_sticker_set or aiogram.methods.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_sticker_set.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: StickerSet = await bot(GetStickerSet(...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for InputPaidMedia\nDESCRIPTION: RST directive for configuring Sphinx autodoc module documentation. Specifies member ordering, inclusion of undocumented members, and exclusion of specific model members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/input_paid_media.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.input_paid_media\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Content Type Class References - Python\nDESCRIPTION: References to content type related classes.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntypes.ContentType\ntypes.ContentTypes\n```\n\n----------------------------------------\n\nTITLE: Configuring BackgroundType Module Documentation in RST\nDESCRIPTION: RST directive configuration for automatically documenting the BackgroundType module from aiogram.types. It includes all members ordered by source, includes undocumented members, but excludes model_config and model_fields.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/background_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.types.background_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Setting up autodocumentation for aiogram Currency Enum in reStructuredText\nDESCRIPTION: Directive to automatically generate documentation for the currency enumeration module in aiogram. The directive includes all members, orders them by source code order, and shows undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/currency.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.currency\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Updating Pattern for GroupDeactivated Exception in Python\nDESCRIPTION: Updated the pattern for the GroupDeactivated exception.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Updated pattern\nGroupDeactivated()\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive for the PassportElementError module that configures member inclusion, ordering, and exclusions.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/types/passport_element_error.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: aiogram.types.passport_element_error\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n    :exclude-members: model_config,model_fields\n```\n\n----------------------------------------\n\nTITLE: Importing RemoveBusinessAccountProfilePhoto Method in Python\nDESCRIPTION: This snippet shows how to import the RemoveBusinessAccountProfilePhoto method from the aiogram library. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_business_account_profile_photo.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.remove_business_account_profile_photo import RemoveBusinessAccountProfilePhoto\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods import RemoveBusinessAccountProfilePhoto\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for InlineQueryResultType Module\nDESCRIPTION: ReStructuredText directive for generating automated documentation of the InlineQueryResultType enum module from aiogram.enums.inline_query_result_type. Includes all members in source order and undocumented members.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/enums/inline_query_result_type.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: aiogram.enums.inline_query_result_type\n    :members:\n    :member-order: bysource\n    :undoc-members: True\n```\n\n----------------------------------------\n\nTITLE: Code Reference in Message.get_full_command()\nDESCRIPTION: Example of code reference from aiogram's change history showing a method call.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nMessage.get_full_command()\n```\n\n----------------------------------------\n\nTITLE: KeyboardButton with Poll Type Helper\nDESCRIPTION: Example showing usage of poll type helper class.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\naiogram.types.PollType\n```\n\n----------------------------------------\n\nTITLE: Using RemoveBusinessAccountProfilePhoto with Specific Bot in Python\nDESCRIPTION: This snippet demonstrates how to use the RemoveBusinessAccountProfilePhoto method with a specific bot instance. It returns a boolean value indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_business_account_profile_photo.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(RemoveBusinessAccountProfilePhoto(...))\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Aiogram Utils in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Utils section of the Aiogram documentation using reStructuredText syntax. It lists various utility modules available in the library.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n=====\nUtils\n=====\n\n.. toctree::\n\n    keyboard\n    i18n\n    chat_action\n    web_app\n    callback_answer\n    formatting\n    media_group\n    deep_linking\n    serialization\n```\n\n----------------------------------------\n\nTITLE: Webhook Handler Initialization with Dependencies - Python\nDESCRIPTION: Shows how to initialize a SimpleRequestHandler for webhooks with custom dependencies.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def main() -> None:\n    dp = Dispatcher(..., foo=42)\n    handler = SimpleRequestHandler(dispatcher=dp, bot=bot, bar=\"Bazz\")\n    ... # starting webhook\n```\n\n----------------------------------------\n\nTITLE: Cleaning MemoryStorage in Python\nDESCRIPTION: Fixed the cleaner for MemoryStorage.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Fixed MemoryStorage cleaner\nMemoryStorage().cleanup()\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ReplaceStickerInSet as an Object in Python\nDESCRIPTION: This snippet shows how to import the ReplaceStickerInSet class and use it with a specific bot instance. It demonstrates two import methods and returns a boolean result.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/replace_sticker_in_set.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.replace_sticker_in_set import ReplaceStickerInSet\n# or\nfrom aiogram.methods import ReplaceStickerInSet\n\nresult: bool = await bot(ReplaceStickerInSet(...))\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Directive\nDESCRIPTION: Defines documentation structure for client session topics using ReStructuredText toctree directive\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    custom_server\n    base\n    aiohttp\n    middleware\n```\n\n----------------------------------------\n\nTITLE: Using GetChatAdministrators as an object with a specific bot in Python\nDESCRIPTION: Demonstrates how to use the GetChatAdministrators class as an object to be passed to the bot. This approach allows for more flexibility in how the request is constructed.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_administrators.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: list[ResultChatMemberUnion] = await bot(GetChatAdministrators(...))\n```\n\n----------------------------------------\n\nTITLE: Handling Poll Answers in aiogram\nDESCRIPTION: Example of handling poll answer updates in a Telegram bot.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@router.poll_answer()\nasync def poll_answer_handler(poll_answer: types.PollAnswer) -> Any: pass\n```\n\n----------------------------------------\n\nTITLE: Importing SetBusinessAccountName as Object in Python\nDESCRIPTION: This snippet shows how to import the SetBusinessAccountName method as an object. It provides two import options: a direct import and an alias import.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_name.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram.methods.set_business_account_name import SetBusinessAccountName\n# alias:\nfrom aiogram.methods import SetBusinessAccountName\n```\n\n----------------------------------------\n\nTITLE: Echo Bot Example Include\nDESCRIPTION: RST directive to include example echo bot implementation file\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: ../examples/echo_bot.py\n```\n\n----------------------------------------\n\nTITLE: Webhook Handler Response\nDESCRIPTION: Demonstrates how to return the SetChatAdministratorCustomTitle object directly in a webhook handler response.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_administrator_custom_title.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn SetChatAdministratorCustomTitle(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Permissions Using Object Method\nDESCRIPTION: Example of setting chat permissions by instantiating the SetChatPermissions object and passing it to the bot instance. This approach allows for more flexibility and object-oriented usage.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_permissions.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot(SetChatPermissions(...))\n```\n\n----------------------------------------\n\nTITLE: Using setStickerSetTitle as Bot Method in Python\nDESCRIPTION: This snippet demonstrates how to use the setStickerSetTitle method directly as a bot method in Aiogram. It returns a boolean result indicating success.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_title.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult: bool = await bot.set_sticker_set_title(...)\n```\n\n----------------------------------------\n\nTITLE: Improving MongoStorage Document Removal in Python\nDESCRIPTION: Improved MongoStorage to remove documents with empty data from the aiogram_data collection to save memory.\nSOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#2025-04-17_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Remove empty documents\nMongoStorage().cleanup()\n```"
  }
]