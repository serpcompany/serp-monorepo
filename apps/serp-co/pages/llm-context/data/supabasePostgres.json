[
  {
    "owner": "supabase",
    "repo": "postgres",
    "content": "TITLE: Running PostgreSQL Server with Nix\nDESCRIPTION: Runs a PostgreSQL server using Nix.  The first argument specifies the PostgreSQL version. Optionally, a second argument can specify the port. By default, it uses port 5435 to avoid conflicts. Requires Nix to be installed.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nnix run .#start-server 15\n```\n\n----------------------------------------\n\nTITLE: Building PostgreSQL 15 with Nix\nDESCRIPTION: This command uses Nix to build a PostgreSQL 15 installation with extensions. It creates a symlink named `result` pointing to the Nix store path containing the built PostgreSQL instance.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/build-postgres.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnix build .#psql_15/bin\n```\n\n----------------------------------------\n\nTITLE: Building C/C++ PostgreSQL Extension with Nix\nDESCRIPTION: This Nix derivation builds a C/C++ PostgreSQL extension. It fetches the source code from GitHub, compiles it using `stdenv.mkDerivation`, and installs the shared object, SQL scripts, and control files into the appropriate directories. The `buildInputs` specifies the postgresql dependency.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/adding-new-package.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, stdenv, fetchFromGitHub, postgresql }:\n\nstdenv.mkDerivation rec {\n  pname = \"pgvector\";\n  version = \"0.7.4\";\n\n  buildInputs = [ postgresql ];\n\n  src = fetchFromGitHub {\n    owner = \"pgvector\";\n    repo = pname;\n    rev = \"refs/tags/v${version}\";\n    hash = \"sha256-qwPaguQUdDHV8q6GDneLq5MuhVroPizpbqt7f08gKJI=\";\n  };\n\n  installPhase = ''\n    mkdir -p $out/{lib,share/postgresql/extension}\n\n    cp *.so      $out/lib\n    cp sql/*.sql $out/share/postgresql/extension\n    cp *.control $out/share/postgresql/extension\n  '';\n\n  meta = with lib; {\n    description = \"Open-source vector similarity search for Postgres\";\n    homepage = \"https://github.com/${src.owner}/${src.repo}\";\n    maintainers = with maintainers; [ olirice ];\n    platforms = postgresql.meta.platforms;\n    license = licenses.postgresql;\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Migration with dbmate\nDESCRIPTION: This command creates a new migration file using dbmate. The `--migrations-dir` option specifies the directory where the migration file should be created.  The `<some message>` portion is the description of the migration.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new migration (make sure to specify the migrations directory)\ndbmate --migrations-dir=\"migrations/db/migrations\" new '<some message>'\n```\n\n----------------------------------------\n\nTITLE: Starting a Local PostgreSQL Server\nDESCRIPTION: This command starts a local PostgreSQL server using Nix.  This is a prerequisite for creating and running migrations. It starts a PostgreSQL 15 server.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Start the database server in another window\nnix run .#start-server 15\n```\n\n----------------------------------------\n\nTITLE: Running Migration Test with Nix\nDESCRIPTION: This command runs a PostgreSQL migration test using Nix. It takes three arguments: the version to upgrade from, the version to upgrade to, and the upgrade mechanism (either pg_dumpall or pg_upgrade).\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/migration-tests.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nnix run .#migration-test <from> <to> [pg_dumpall|pg_upgrade]\n```\n\n----------------------------------------\n\nTITLE: Building PostgreSQL Binaries with Nix\nDESCRIPTION: This command uses Nix to build the PostgreSQL 15 binaries.  It demonstrates how to use nix build command to create a PostgreSQL environment.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/receipt-files.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nnix build .#psql_15/bin\n```\n\n----------------------------------------\n\nTITLE: Building Rust PostgreSQL Extension with Nix and pgrx\nDESCRIPTION: This Nix derivation builds a Rust PostgreSQL extension using `buildPgrxExtension`. It fetches the source code from GitHub, compiles it with `cargo`, and installs the extension. `buildInputs` specifies the postgresql dependency and `nativeBuildInputs` specifies the cargo dependency.  The `previousVersions` attribute is used to ensure update scripts are generated correctly.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/adding-new-package.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, stdenv, fetchFromGitHub, postgresql, buildPgrxExtension_0_11_3, cargo }:\n\nbuildPgrxExtension_0_11_3 rec {\n  pname = \"pg_jsonschema\";\n  version = \"0.3.1\";\n  inherit postgresql;\n\n  src = fetchFromGitHub {\n    owner = \"supabase\";\n    repo = pname;\n    rev = \"v${version}\";\n    hash = \"sha256-YdKpOEiDIz60xE7C+EzpYjBcH0HabnDbtZl23CYls6g=\";\n  };\n\n  nativeBuildInputs = [ cargo ];\n  buildInputs = [ postgresql ];\n  # update the following array when the pg_jsonschema version is updated\n  # required to ensure that extensions update scripts from previous versions are generated\n\n  previousVersions = [\"0.3.0\" \"0.2.0\" \"0.1.4\" \"0.1.4\" \"0.1.2\" \"0.1.1\" \"0.1.0\"];\n  CARGO=\"${cargo}/bin/cargo\";\n  env = lib.optionalAttrs stdenv.isDarwin {\n    POSTGRES_LIB = \"${postgresql}/lib\";\n    RUSTFLAGS = \"-C link-arg=-undefined -C link-arg=dynamic_lookup\";\n  };\n  cargoHash = \"sha256-VcS+efMDppofuFW2zNrhhsbC28By3lYekDFquHPta2g=\";\n\n  # FIXME (aseipp): testsuite tries to write files into /nix/store; we'll have\n  # to fix this a bit later.\n  doCheck = false;\n\n  preBuild = ''\n    echo \"Processing git tags...\"\n    echo '${builtins.concatStringsSep \",\" previousVersions}' | sed 's/,/\\n/g' > git_tags.txt\n  '';\n\n  postInstall = ''\n    echo \"Creating SQL files for previous versions...\"\n    current_version=\"${version}\"\n    sql_file=\"$out/share/postgresql/extension/pg_jsonschema--$current_version.sql\"\n    \n    if [ -f \"$sql_file\" ]; then\n      while read -r previous_version; do\n        if [ \"$(printf '%s\\n' \"$previous_version\" \"$current_version\" | sort -V | head -n1)\" = \"$previous_version\" ] && [ \"$previous_version\" != \"$current_version\" ]; then\n          new_file=\"$out/share/postgresql/extension/pg_jsonschema--$previous_version--$current_version.sql\"\n          echo \"Creating $new_file\"\n          cp \"$sql_file\" \"$new_file\"\n        fi\n      done < git_tags.txt\n    else\n      echo \"Warning: $sql_file not found\"\n    fi\n    rm git_tags.txt\n  '';\n\n\n  meta = with lib; {\n    description = \"JSON Schema Validation for PostgreSQL\";\n    homepage = \"https://github.com/supabase/${pname}\";\n    platforms = postgresql.meta.platforms;\n    license = licenses.postgresql;\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Server from Specific Commit\nDESCRIPTION: Runs a PostgreSQL server build from a specific commit of the repository. Requires Nix, the repository URL, a commit hash, and the desired PostgreSQL version.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nnix run github:supabase/postgres/<some commit hash>#start-server 15\n```\n\n----------------------------------------\n\nTITLE: Cloning Supabase PostgreSQL Repository\nDESCRIPTION: This snippet clones the Supabase PostgreSQL repository from GitHub to a local directory and navigates into the cloned directory.  It's a prerequisite for building PostgreSQL using Nix.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/build-postgres.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supabase/postgres $HOME/supabase-postgres\ncd $HOME/supabase-postgres\n```\n\n----------------------------------------\n\nTITLE: Entering Nix Develop Environment\nDESCRIPTION: This command enters a Nix develop environment, providing a shell with the necessary tools to work with the project. These tools are available in the shell's `$PATH` only while the shell session is active. Once you exit the shell, nix installed tools are removed from your `$PATH`.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/build-postgres.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nnix develop .\n```\n\n----------------------------------------\n\nTITLE: SQL Extension Creation in Postgres\nDESCRIPTION: This SQL command creates the `index_advisor` extension if it doesn't already exist in the Postgres database. It demonstrates the basic syntax for creating extensions within a Postgres environment.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/adding-tests.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\npostgres> CREATE EXTENSION IF NOT EXISTS index_advisor;\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Client with Nix\nDESCRIPTION: Runs a PostgreSQL client using Nix. The example shows starting a server, waiting, and then starting a client. Requires Nix and assumes a PostgreSQL server is running.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nnix run github:supabase/postgres#start-server 15 &\nsleep 5\nnix run github:supabase/postgres#start-client 16\n```\n\n----------------------------------------\n\nTITLE: Updating schema.sql Files for All PostgreSQL Versions\nDESCRIPTION: This command uses the `dbmate-tool` with Nix to update the schema.sql files for all major versions of PostgreSQL.  The schema files are automatically created. It's crucial for maintaining schema consistency across different versions.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# First, stop any running PostgreSQL servers\n# Then from the root of supabase/postgres run:\nnix run .#dbmate-tool -- --version all\n```\n\n----------------------------------------\n\nTITLE: Running Migrations with dbmate\nDESCRIPTION: This command runs the migrations using dbmate. The `--no-dump-schema` option prevents dbmate from dumping the schema after running the migrations. The `--migrations-dir` option specifies the directory where the migration files are located.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndbmate --no-dump-schema --migrations-dir\"migrations/db/migrations\" up\n```\n\n----------------------------------------\n\nTITLE: Allowing direnv to load .envrc\nDESCRIPTION: This command allows direnv to load and execute the `.envrc` file in the current directory. It integrates with Nix directly to populate the shell environment with the tools specified inside of `flake.nix`.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/use-direnv.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ direnv allow\ndirenv: loading ~/work/nix-postgres/.envrc\ndirenv: loading ~/work/nix-postgres/.envrc.recommended\ndirenv: loading https://raw.githubusercontent.com/nix-community/nix-direnv/2.3.0/direnvrc (sha256-Dmd+j63L84wuzgyjITIfSxSD57Tx7v51DMxVZOsiUD8=)\ndirenv: using flake\ndirenv: nix-direnv: renewed cache\ndirenv: export +AR +AS +CC +CONFIG_SHELL +CXX +DETERMINISTIC_BUILD +HOST_PATH +IN_NIX_SHELL +LD +NIX_BINTOOLS +NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu +NIX_BUILD_CORES +NIX_CC +NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu +NIX_CFLAGS_COMPILE +NIX_ENFORCE_NO_NATIVE +NIX_HARDENING_ENABLE +NIX_LDFLAGS +NIX_STORE +NM +OBJCOPY +OBJDUMP +PYTHONHASHSEED +PYTHONNOUSERSITE +PYTHONPATH +RANLIB +READELF +SIZE +SOURCE_DATE_EPOCH +STRINGS +STRIP +_PYTHON_HOST_PLATFORM +_PYTHON_SYSCONFIGDATA_NAME +__structuredAttrs +buildInputs +buildPhase +builder +cmakeFlags +configureFlags +depsBuildBuild +depsBuildBuildPropagated +depsBuildTarget +depsBuildTargetPropagated +depsHostHost +depsHostHostPropagated +depsTargetTarget +depsTargetTargetPropagated +doCheck +doInstallCheck +dontAddDisableDepTrack +mesonFlags +name +nativeBuildInputs +out +outputs +patches +phases +preferLocalBuild +propagatedBuildInputs +propagatedNativeBuildInputs +shell +shellHook +stdenv +strictDeps +system ~PATH ~XDG_DATA_DIRS\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Server from Arbitrary Directory\nDESCRIPTION: Runs a PostgreSQL server using a flake reference from any directory. Requires Nix and a valid flake reference. The first argument specifies the PostgreSQL version.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nnix run github:supabase/postgres#start-server 15\n```\n\n----------------------------------------\n\nTITLE: Connecting to Master PostgreSQL Server\nDESCRIPTION: Connects to a PostgreSQL master server using the `start-postgres-client` command. Requires specifying the PostgreSQL version and port. Assumes the command `start-postgres-client` is available.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ start-postgres-client 15 5435\n```\n\n----------------------------------------\n\nTITLE: dbmate Tool Usage with Nix from Flake URL\nDESCRIPTION: These commands show how to run the `dbmate-tool` using a GitHub flake URL, allowing you to specify a specific branch or tag of the supabase/postgres repository. This is useful for testing migrations against different versions of the codebase.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnix run github:supabase/postgres#dbmate-tool -- --version 15\n\nor\n\nnix run github:supabase/postgres/mybranch#dbmate-tool -- --version 15\n```\n\n----------------------------------------\n\nTITLE: Creating Table on Master Server\nDESCRIPTION: Creates a table named `items` on the master server and populates it with 100 rows. This is used for verifying replication.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate table items as select x::int from generate_series(1,100) x;\n```\n\n----------------------------------------\n\nTITLE: Activating direnv in Bash shell\nDESCRIPTION: This command integrates direnv with the Bash shell.  It adds a hook to the .bashrc file, which automatically loads direnv configurations when a new shell is started.  The `eval` command executes the output of `direnv hook bash`, which sets up the necessary environment variables and functions.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/use-direnv.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\neval \"$(direnv hook bash)\"\n```\n\n----------------------------------------\n\nTITLE: Listing Contents of the Result Directory\nDESCRIPTION: This command lists the top-level directories within the PostgreSQL installation directory pointed to by the `result` symlink. It demonstrates the typical structure of a PostgreSQL installation, including `bin`, `include`, `lib`, and `share` directories.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/build-postgres.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ ls result\nbin  include  lib  share\n```\n\n----------------------------------------\n\nTITLE: Starting the Database Server with Docker Compose\nDESCRIPTION: This command starts the database server using Docker Compose, providing an alternative to using Nix for managing the database server. This is typically part of a development workflow.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Start the database server\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Resolving the Result Symlink (PostgreSQL 16)\nDESCRIPTION: This command, executed after building PostgreSQL 16 with Nix, reads the target of the `result` symlink. It reveals the Nix store path for the PostgreSQL 16 installation, which will be different from the PostgreSQL 15 path due to the version difference and cryptographic hashing.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/build-postgres.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ readlink result\n/nix/store/p7ziflx0000s28bfb213jsghrczknkc4-postgresql-and-plugins-14.8\n```\n\n----------------------------------------\n\nTITLE: Creating a New Migration with dbmate using Docker Compose\nDESCRIPTION: This command creates a new migration file using dbmate within a Docker Compose environment. The `--rm` flag ensures that the dbmate container is removed after the command completes.  The `<some message>` portion is the description of the migration.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# create a new migration\ndocker-compose run --rm dbmate new '<some message>'\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Server Replica\nDESCRIPTION: Starts a PostgreSQL server replica using the `start-postgres-replica` command. Requires specifying the master version, master port, and replica server port. Assumes the command `start-postgres-replica` is available in the environment.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ start-postgres-server 15 5435\n\n$ start-postgres-replica 15 5439\n\n$ start-postgres-replica 15 5440\n```\n\n----------------------------------------\n\nTITLE: Entering Nix Development Environment\nDESCRIPTION: This command enters the Nix development environment for the supabase/postgres project. This environment provides the necessary tools and dependencies for developing and testing migrations, including dbmate.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnix develop\n```\n\n----------------------------------------\n\nTITLE: Upgrading between Arbitrary Versions with Nix\nDESCRIPTION: This example demonstrates how to test migrations between arbitrary versions built by the repository using `nix build` and `nix run`. It compares PostgreSQL 14 to PostgreSQL 14 with an updated extension using `pg_upgrade`.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/migration-tests.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nOLD_GIT_VERSION=...\nNEW_GIT_VERSION=...\n\nnix run github:supabase/nix-postgres#migration-test \\\n  $(nix build \"github:supabase/nix-postgres/$OLD_GIT_VERSION#psql_14/bin\") \\\n  $(nix build \"github:supabase/nix-postgres/$NEW_GIT_VERSION#psql_14/bin\") \\\n  pg_upgrade\n```\n\n----------------------------------------\n\nTITLE: Connecting to Replica PostgreSQL Server\nDESCRIPTION: Connects to a PostgreSQL replica server using the `start-postgres-client` command. Requires specifying the PostgreSQL version and port. Assumes the command `start-postgres-client` is available.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ start-postgres-client 15 5439\n```\n\n----------------------------------------\n\nTITLE: Docker Image Creation (arm64)\nDESCRIPTION: These commands pull, tag, and push a Docker image based on arm64v8/ubuntu for use with ccache during the AMI build process specifically for ARM64 architectures. The image is tagged with a username and pushed to a Docker registry.\nSOURCE: https://github.com/supabase/postgres/blob/develop/ebssurrogate/USAGE.md#_snippet_3\n\nLANGUAGE: Docker\nCODE:\n```\ndocker pull arm64v8/ubuntu\ndocker tag arm64v8/ubuntu:latest <username>/ccache-arm64v8\ndocker push <username>/ccache-arm64v8\n```\n\n----------------------------------------\n\nTITLE: dbmate Tool Usage with Nix\nDESCRIPTION: This snippet shows how to use the `dbmate-tool` with Nix to manage PostgreSQL migrations. It provides options for specifying the PostgreSQL version and port, along with examples of how to run the tool with different configurations.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage: nix run .#dbmate-tool -- [options]\n\nOptions:\n  -v, --version [15|16|orioledb-17|all]  Specify the PostgreSQL version to use (required defaults to --version all)\n  -p, --port PORT                    Specify the port number to use (default: 5435)\n  -h, --help                         Show this help message\n\nDescription:\n  Runs 'dbmate up' against a locally running the version of database you specify. Or 'all' to run against all versions.\n  NOTE: To create a migration, you must run 'nix develop' and then 'dbmate new <migration_name>' to create a new migration file.\n\nExamples:\n  nix run .#dbmate-tool\n  nix run .#dbmate-tool -- --version 15\n  nix run .#dbmate-tool -- --version 16 --port 5433\n```\n\n----------------------------------------\n\nTITLE: Verify Nix Installation\nDESCRIPTION: This command checks the installed version of Nix. It verifies that Nix is correctly installed and accessible in the system's PATH.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-here.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nix --version\nnix (Nix) 2.16.1\n```\n\n----------------------------------------\n\nTITLE: Building Extensions and Postgres Binaries with Docker\nDESCRIPTION: This script builds Docker images for extensions and Postgres binaries. It uses `docker buildx build` with arguments derived from `ansible/vars.yml` to build the extensions image. Then, it extracts the contents of the image into the `ansible/files/extensions` directory.  Similarly, it builds a debian package image, extracts the files to `ansible/files/postgres`\nSOURCE: https://github.com/supabase/postgres/blob/develop/testinfra/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nset -euo pipefail\n# cwd: repo root\n# docker must be running\n\n# build extensions & pg binaries\ndocker buildx build \\\n  $(yq 'to_entries | map(select(.value|type == \"!!str\")) |  map(\" --build-arg \" + .key + \"=\" + .value) | join(\"\")' 'ansible/vars.yml') \\\n  --target=extensions \\\n  --tag=supabase/postgres:extensions \\\n  --platform=linux/arm64 \\\n  --load \\\n  .\nmkdir -p /tmp/extensions ansible/files/extensions\ndocker save supabase/postgres:extensions | tar xv -C /tmp/extensions\nfor layer in /tmp/extensions/*/layer.tar; do\n  tar xvf \"$layer\" -C ansible/files/extensions --strip-components 1\ndone\ndocker buildx build \\\n  --build-arg ubuntu_release=focal \\\n  --build-arg ubuntu_release_no=20.04 \\\n  --build-arg postgresql_major=15 \\\n  --build-arg postgresql_release=15.1 \\\n  --build-arg CPPFLAGS=-mcpu=neoverse-n1 \\\n  --build-arg CFLAGS=-g3\n  --file=docker/Dockerfile \\\n  --target=pg-deb \\\n  --tag=supabase/postgres:deb \\\n  --platform=linux/arm64 \\\n  --load \\\n  .\nmkdir -p /tmp/build ansible/files/postgres\ndocker save supabase/postgres:deb | tar xv -C /tmp/build\nfor layer in /tmp/build/*/layer.tar; do\n  tar xvf \"$layer\" -C ansible/files/postgres --strip-components 1\ndone\n```\n\n----------------------------------------\n\nTITLE: Installing direnv with Nix\nDESCRIPTION: This command installs direnv using Nix package manager. It adds direnv to the user's profile, making it available for use in the shell.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/use-direnv.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix profile install nixpkgs#direnv\n```\n\n----------------------------------------\n\nTITLE: Run Nix Info\nDESCRIPTION: This command retrieves system information using Nix. It provides details about the operating system, Nix version, and channel configurations.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-here.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nix run nixpkgs#nix-info -- -m\n - system: `\"x86_64-linux\"`\n - host os: `Linux 5.15.90.1-microsoft-standard-WSL2, Ubuntu, 22.04.2 LTS (Jammy Jellyfish), nobuild`\n - multi-user?: `yes`\n - sandbox: `yes`\n - version: `nix-env (Nix) 2.16.1`\n - channels(root): `\"nixpkgs\"`\n - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixpkgs`\n```\n\n----------------------------------------\n\nTITLE: Listing Contents of PostgreSQL bin directory\nDESCRIPTION: This command lists the files within the bin directory of the PostgreSQL install located at the result directory.  It shows many binaries available in this directory, and that they are symlinks to the nix store, or executable binaries.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/build-postgres.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ ll result/bin/\ntotal 9928\ndr-xr-xr-x 2 root root    4096 Dec 31  1969 ./\ndr-xr-xr-x 5 root root    4096 Dec 31  1969 ../\nlrwxrwxrwx 1 root root      79 Dec 31  1969 .initdb-wrapped -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/.initdb-wrapped*\n-r-xr-xr-x 1 root root 9829624 Dec 31  1969 .postgres-wrapped*\nlrwxrwxrwx 1 root root      73 Dec 31  1969 clusterdb -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/clusterdb*\nlrwxrwxrwx 1 root root      72 Dec 31  1969 createdb -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/createdb*\nlrwxrwxrwx 1 root root      74 Dec 31  1969 createuser -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/createuser*\nlrwxrwxrwx 1 root root      70 Dec 31  1969 dropdb -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/dropdb*\nlrwxrwxrwx 1 root root      72 Dec 31  1969 dropuser -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/dropuser*\nlrwxrwxrwx 1 root root      68 Dec 31  1969 ecpg -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/ecpg*\nlrwxrwxrwx 1 root root      70 Dec 31  1969 initdb -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/initdb*\nlrwxrwxrwx 1 root root      72 Dec 31  1969 oid2name -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/oid2name*\nlrwxrwxrwx 1 root root      74 Dec 31  1969 pg_amcheck -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_amcheck*\nlrwxrwxrwx 1 root root      81 Dec 31  1969 pg_archivecleanup -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_archivecleanup*\nlrwxrwxrwx 1 root root      77 Dec 31  1969 pg_basebackup -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_basebackup*\nlrwxrwxrwx 1 root root      76 Dec 31  1969 pg_checksums -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_checksums*\n-r-xr-xr-x 1 root root   53432 Dec 31  1969 pg_config*\nlrwxrwxrwx 1 root root      78 Dec 31  1969 pg_controldata -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_controldata*\n-r-xr-xr-x 1 root root   82712 Dec 31  1969 pg_ctl*\nlrwxrwxrwx 1 root root      71 Dec 31  1969 pg_dump -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_dump*\nlrwxrwxrwx 1 root root      74 Dec 31  1969 pg_dumpall -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_dumpall*\nlrwxrwxrwx 1 root root      74 Dec 31  1969 pg_isready -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_isready*\nlrwxrwxrwx 1 root root      77 Dec 31  1969 pg_receivewal -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_receivewal*\nlrwxrwxrwx 1 root root      78 Dec 31  1969 pg_recvlogical -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_recvlogical*\nlrwxrwxrwx 1 root root      73 Dec 31  1969 pg_repack -> /nix/store/bi9i5ns4cqxk235qz3srs9p4x1qfxfna-pg_repack-1.4.8/bin/pg_repack*\nlrwxrwxrwx 1 root root      75 Dec 31  1969 pg_resetwal -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_resetwal*\nlrwxrwxrwx 1 root root      74 Dec 31  1969 pg_restore -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_restore*\nlrwxrwxrwx 1 root root      73 Dec 31  1969 pg_rewind -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_rewind*\nlrwxrwxrwx 1 root root      77 Dec 31  1969 pg_test_fsync -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_test_fsync*\nlrwxrwxrwx 1 root root      78 Dec 31  1969 pg_test_timing -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_test_timing*\nlrwxrwxrwx 1 root root      74 Dec 31  1969 pg_upgrade -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_upgrade*\nlrwxrwxrwx 1 root root      79 Dec 31  1969 pg_verifybackup -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_verifybackup*\nlrwxrwxrwx 1 root root      74 Dec 31  1969 pg_waldump -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pg_waldump*\nlrwxrwxrwx 1 root root      71 Dec 31  1969 pgbench -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/pgbench*\nlrwxrwxrwx 1 root root      71 Dec 31  1969 pgsql2shp -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/pgsql2shp*\nlrwxrwxrwx 1 root root      77 Dec 31  1969 pgsql2shp-3.3.3 -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/pgsql2shp-3.3.3*\nlrwxrwxrwx 1 root root      75 Dec 31  1969 pgtopo_export -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/pgtopo_export*\nlrwxrwxrwx 1 root root      81 Dec 31  1969 pgtopo_export-3.3.3 -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/pgtopo_export-3.3.3*\nlrwxrwxrwx 1 root root      75 Dec 31  1969 pgtopo_import -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/pgtopo_import*\nlrwxrwxrwx 1 root root      81 Dec 31  1969 pgtopo_import-3.3.3 -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/pgtopo_import-3.3.3*\n-r-xr-xr-x 1 root root     286 Dec 31  1969 postgres*\nlrwxrwxrwx 1 root root      74 Dec 31  1969 postmaster -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/postmaster*\nlrwxrwxrwx 1 root root      68 Dec 31  1969 psql -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/psql*\nlrwxrwxrwx 1 root root      74 Dec 31  1969 raster2pgsql -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/raster2pgsql*\nlrwxrwxrwx 1 root root      80 Dec 31  1969 raster2pgsql-3.3.3 -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/raster2pgsql-3.3.3*\nlrwxrwxrwx 1 root root      73 Dec 31  1969 reindexdb -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/reindexdb*\nlrwxrwxrwx 1 root root      71 Dec 31  1969 shp2pgsql -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/shp2pgsql*\nlrwxrwxrwx 1 root root      77 Dec 31  1969 shp2pgsql-3.3.3 -> /nix/store/4wwzd3c136g6j7aqva2gyiqgwy784qjv-postgis-3.3.3/bin/shp2pgsql-3.3.3*\nlrwxrwxrwx 1 root root      72 Dec 31  1969 vacuumdb -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/vacuumdb*\nlrwxrwxrwx 1 root root      72 Dec 31  1969 vacuumlo -> /nix/store/kdjdxnyhpwpvb11da8s99ylqilspcmzl-postgresql-15.3/bin/vacuumlo*\n```\n\n----------------------------------------\n\nTITLE: Listing Contents of Nix Build Result\nDESCRIPTION: This command lists the contents of the 'result' directory after a Nix build. It shows the typical structure of a PostgreSQL installation built with Nix, including binaries, libraries, and the receipt file.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/receipt-files.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naustin@GANON:~/work/nix-postgres$ nix build .#psql_15/bin\naustin@GANON:~/work/nix-postgres$ ls result\nbin  include  lib  receipt.json  share\n```\n\n----------------------------------------\n\nTITLE: Nix Build for pg_regress Flake Check\nDESCRIPTION: This command builds and performs a flake check for pg_regress tests using Nix, targeting a specific Postgres version. The `-L` flag prints logs to stderr for detailed output.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/adding-tests.md#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\nnix build .#checks.aarch64-darwin.psql_15 -L\nnix build .#checks.aarch64-darwin.psql_17 -L\nnix build .#checks.aarch64-darwin.psql_orioledb-17 -L\n```\n\n----------------------------------------\n\nTITLE: Finding direnv executable\nDESCRIPTION: This command locates the direnv executable in the system's PATH.  It confirms that direnv has been successfully installed and provides the path to the executable.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/use-direnv.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ which direnv\n/home/austin/.nix-profile/bin/direnv\n```\n\n----------------------------------------\n\nTITLE: Running Postgres Docker Container\nDESCRIPTION: This command runs a Postgres Docker container from the specified image. The `--rm` flag removes the container after it exits, and the `-it` flags allocate a pseudo-TTY and keep STDIN open, even if not attached.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/docker.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --rm -it ghcr.io/supabase/nix-postgres-15:latest\n```\n\n----------------------------------------\n\nTITLE: Testing a Postgres Extension using pgTAP\nDESCRIPTION: This SQL snippet demonstrates a basic pgTAP test for a Postgres extension. It attempts to create the extension (wrappers with schema 'extensions') within a transaction. The transaction is then rolled back, ensuring no persistent changes. This test verifies that the extension can be successfully enabled.\nSOURCE: https://github.com/supabase/postgres/blob/develop/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\ncreate extension if not exists wrappers with schema \"extensions\";\nROLLBACK;\n```\n\n----------------------------------------\n\nTITLE: Adding a Postgres Extension via Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates adding a Postgres extension (pg_graphql) by downloading a pre-built Debian package.  It defines build arguments for the release version, downloads the package from GitHub releases, and copies it to the 'extensions' stage. Docker layer caching is used to speed up CI builds.\nSOURCE: https://github.com/supabase/postgres/blob/develop/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG pg_graphql_release=1.1.0\n\n####################\n# 19-pg_graphql.yml\n####################\nFROM base as pg_graphql\n# Download package archive\nARG pg_graphql_release\nADD \"https://github.com/supabase/pg_graphql/releases/download/v${pg_graphql_release}/pg_graphql-v${pg_graphql_release}-pg${postgresql_major}-${TARGETARCH}-linux-gnu.deb\" \\\n    /tmp/pg_graphql.deb\n\n####################\n# Collect extension packages\n####################\nFROM scratch as extensions\nCOPY --from=pg_graphql /tmp/*.deb /tmp/\n```\n\n----------------------------------------\n\nTITLE: Copy Regression Output Directory\nDESCRIPTION: This command copies the regression output directory from the Nix store to the current directory. It's used to review the test results before copying the expected output to the expected directory.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/adding-tests.md#_snippet_3\n\nLANGUAGE: Nix\nCODE:\n```\ncp -r /nix/store/2fbrvnnr7iz6yigyf0rb0vxnyqvrgxzp-postgres-15.6-check-harness/regression_output .\n```\n\n----------------------------------------\n\nTITLE: Querying Table on Replica Server\nDESCRIPTION: Queries the `items` table on the replica server to verify that the data has been replicated. It counts the number of rows in the table.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect count(*) from items;\n```\n\n----------------------------------------\n\nTITLE: Building PostgreSQL Checks with Nix\nDESCRIPTION: These commands build the PostgreSQL checks for different versions (15, 17 and orioledb-17) using Nix.  The `-L` flag instructs Nix to follow symlinks during the build process. This is a key part of the testing and validation workflow.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnix build .#checks.aarch64-darwin.psql_15 -L\nnix build .#checks.aarch64-darwin.psql_17 -L\nnix build .#checks.aarch64-darwin.psql_orioledb-17 -L\n```\n\n----------------------------------------\n\nTITLE: AMI Creation with Packer (amd64)\nDESCRIPTION: This command uses Packer to build an Amazon Machine Image (AMI) for an amd64 architecture. It takes several variables as input, including AWS credentials, Docker credentials, and Docker image details.\nSOURCE: https://github.com/supabase/postgres/blob/develop/ebssurrogate/USAGE.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npacker build -var \"aws_access_key=$AWS_ACCESS_KEY_ID\" -var \"aws_secret_key=$AWS_SECRET_ACCESS_KEY\" -var \"region=$AWS_REGION\" \\\n-var \"docker_passwd=$DOCKER_PASSWD\" -var \"docker_user=$DOCKER_USER\" -var \"docker_image=$DOCKER_IMAGE\" -var \"docker_image_tag=$DOCKER_IMAGE_TAG\" \\\namazon-amd64.pkr.hcl\n```\n\n----------------------------------------\n\nTITLE: AMI Creation with Packer (arm64)\nDESCRIPTION: This command uses Packer to build an Amazon Machine Image (AMI) for an arm64 architecture. It takes several variables as input, including AWS credentials, Docker credentials, and Docker image details. The main difference from the amd64 build is the configuration file used: amazon-arm64.pkr.hcl.\nSOURCE: https://github.com/supabase/postgres/blob/develop/ebssurrogate/USAGE.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npacker build -var \"aws_access_key=$AWS_ACCESS_KEY_ID\" -var \"aws_secret_key=$AWS_SECRET_ACCESS_KEY\" -var \"region=$AWS_REGION\" \\\n-var \"docker_passwd=$DOCKER_PASSWD\" -var \"docker_user=$DOCKER_USER\" -var \"docker_image=$DOCKER_IMAGE\" -var \"docker_image_tag=$DOCKER_IMAGE_TAG\" \\\namazon-arm64.pkr.hcl\n```\n\n----------------------------------------\n\nTITLE: Install Deno using Nix\nDESCRIPTION: This command installs the latest version of Deno using nix profile install.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-here.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install nixpkgs#deno\n```\n\n----------------------------------------\n\nTITLE: Install Nix using Determinate Systems Installer\nDESCRIPTION: This command downloads and executes the Nix installer from Determinate Systems. It ensures a secure connection using HTTPS and TLS 1.2.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-here.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --proto '=https' --tlsv1.2 \\\n  -sSf -L https://install.determinate.systems/nix \\\n| sh -s -- install\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Testinfra\nDESCRIPTION: This command installs the necessary Python packages for running Testinfra tests. It uses pip3 to install boto3, docker, ec2instanceconnectcli, pytest, pytest-testinfra, and requests.\nSOURCE: https://github.com/supabase/postgres/blob/develop/testinfra/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip3 install boto3 boto3-stubs[essential] docker ec2instanceconnectcli pytest pytest-testinfra[paramiko,docker] requests\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Status\nDESCRIPTION: Queries the `pg_stat_replication` view to check the replication status of the master server.  It shows the client address and state of the replicas. This query should be executed on the master server.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-client-server.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT client_addr, state\nFROM pg_stat_replication;\n```\n\n----------------------------------------\n\nTITLE: SQL Extension Creation (Generic)\nDESCRIPTION: This SQL command demonstrates the creation of an extension, but the name is not specified in the provided text. It illustrates how extensions are created in the PostgreSQL environment.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/adding-tests.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\npostgres> CREATE EXTENSION  \npostgres> (using postmaster on localhost, port 5432)\n```\n\n----------------------------------------\n\nTITLE: Nix Overlay Example\nDESCRIPTION: This Nix overlay overrides the `gdal` package with a different version named `gdalMinimal`. It showcases how to globally replace an existing package with a modified version, affecting all dependent packages. `final` and `prev` are used to refer to packages in terms of other overlays. No dependencies are required beyond the Nixpkgs framework.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/nix-overlays.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfinal: prev: {\n    gdal = prev.gdalMinimal;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing nerdctl and buildkit on EKS node\nDESCRIPTION: This snippet shows how to install `nerdctl` and `buildkit` on an EKS node as an alternative to `docker.io`, which may interfere with the k8s setup. It downloads the binaries, extracts them, and moves them to `/usr/local/bin/`.\nSOURCE: https://github.com/supabase/postgres/blob/develop/qemu_artifact.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -O https://github.com/containerd/nerdctl/releases/download/v2.0.0/nerdctl-2.0.0-linux-arm64.tar.gz\ntar -xzf nerdctl-2.0.0-linux-arm64.tar.gz\nmv ./nerdctl /usr/local/bin/\ncurl -O -L https://github.com/moby/buildkit/releases/download/v0.17.1/buildkit-v0.17.1.linux-arm64.tar.gz\ntar -xzf buildkit-v0.17.1.linux-arm64.tar.gz\nmv bin/* /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Creating .envrc to source environment configuration\nDESCRIPTION: This command creates a `.envrc` file and adds a line that sources the `.envrc.recommended` file. This allows users to load configurations and setup dependencies defined in `.envrc.recommended`.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/use-direnv.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho \"source_env .envrc.recommended\" >> .envrc\n```\n\n----------------------------------------\n\nTITLE: Running Testinfra Tests with Pytest\nDESCRIPTION: This command runs the Testinfra tests using pytest. It specifies the verbosity level (-vv) and disables capturing of stdout and stderr (-s). AWS credentials are provided through AWS_PROFILE.\nSOURCE: https://github.com/supabase/postgres/blob/develop/testinfra/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# run tests\nAWS_PROFILE=supabase-dev pytest -vv -s testinfra/test_*.py\n```\n\n----------------------------------------\n\nTITLE: Docker Image Creation (amd64)\nDESCRIPTION: These commands pull, tag, and push a Docker image based on Ubuntu for use with ccache during the AMI build process.  The image is tagged with a username and pushed to a Docker registry.\nSOURCE: https://github.com/supabase/postgres/blob/develop/ebssurrogate/USAGE.md#_snippet_2\n\nLANGUAGE: Docker\nCODE:\n```\ndocker pull ubuntu\ndocker tag ubuntu <username>/ccache\ndocker push <username>/ccache\n```\n\n----------------------------------------\n\nTITLE: Nix Build with Rebuild Flag\nDESCRIPTION: These commands force a rebuild of the specified Nix check attributes, bypassing the cache. This ensures that the tests are rerun even if the files haven't been modified.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/adding-tests.md#_snippet_5\n\nLANGUAGE: Nix\nCODE:\n```\nnix build .#checks.x86_64-linux.psql_15 --rebuild\nnix build .#checks.x86_64-linux.psql_16 --rebuild\n```\n\n----------------------------------------\n\nTITLE: Install HTTPie using Nix\nDESCRIPTION: This command installs HTTPie using nix profile install.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-here.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install nixpkgs#httpie\n```\n\n----------------------------------------\n\nTITLE: Building PostgreSQL 16 with Nix\nDESCRIPTION: This command uses Nix to build a PostgreSQL 16 installation with extensions. It's similar to building PostgreSQL 15, but targets version 16.  It also creates a `result` symlink, but to a different Nix store path.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/build-postgres.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nnix build .#psql_16/bin\n```\n\n----------------------------------------\n\nTITLE: direnv blocked error message\nDESCRIPTION: This error message indicates that direnv is blocking the loading of the `.envrc` file due to security reasons.  The user needs to explicitly allow the file to be loaded by running `direnv allow`.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/use-direnv.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"source_env .envrc.recommended\" >> .envrc\ndirenv: error /home/austin/work/nix-postgres/.envrc is blocked. Run `direnv allow` to approve its content\n```\n\n----------------------------------------\n\nTITLE: Building AMI with Packer\nDESCRIPTION: This command uses Packer to build an Amazon Machine Image (AMI). It uses variable files and variables to configure the build, specifying the region, AMI name, and other settings. AWS credentials are set using AWS_PROFILE.\nSOURCE: https://github.com/supabase/postgres/blob/develop/testinfra/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# build AMI\nAWS_PROFILE=supabase-dev packer build \\\n  -var-file=development-arm.vars.pkr.hcl \\\n  -var-file=common.vars.pkr.hcl \\\n  -var \"ansible_arguments=\" \\\n  -var \"postgres-version=ci-ami-test\" \\\n  -var \"region=ap-southeast-1\" \\\n  -var 'ami_regions=[\"ap-southeast-1\"]' \\\n  -var \"force-deregister=true\" \\\n  amazon-arm64.pkr.hcl\n```\n\n----------------------------------------\n\nTITLE: Install ripgrep using Nix\nDESCRIPTION: This command installs ripgrep using nix profile install.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-here.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install nixpkgs#ripgrep\n```\n\n----------------------------------------\n\nTITLE: Running Migrations with dbmate using Docker Compose\nDESCRIPTION: This command runs the migrations using dbmate within a Docker Compose environment. The `--rm` flag ensures that the dbmate container is removed after the command completes.\nSOURCE: https://github.com/supabase/postgres/blob/develop/migrations/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run --rm dbmate up\n```\n\n----------------------------------------\n\nTITLE: Install bat using Nix\nDESCRIPTION: This command installs bat using nix profile install.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/start-here.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install nixpkgs#bat\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL Installation Receipt (JSON)\nDESCRIPTION: This is an example of the `receipt.json` file, which provides metadata about the PostgreSQL installation. It includes lists of extensions, Nixpkgs information, and the PostgreSQL version.  This metadata is intended to provide tooling with enough information to manage and upgrade PostgreSQL installations.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/receipt-files.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extensions\": [\n    {\n      \"name\": \"pgsql-http\",\n      \"version\": \"1.5.0\"\n    },\n    {\n      \"name\": \"pg_plan_filter\",\n      \"version\": \"unstable-2021-09-23\"\n    },\n    {\n      \"name\": \"pg_net\",\n      \"version\": \"0.7.2\"\n    },\n    {\n      \"name\": \"pg_hashids\",\n      \"version\": \"unstable-2022-09-17\"\n    },\n    {\n      \"name\": \"pgsodium\",\n      \"version\": \"3.1.8\"\n    },\n    {\n      \"name\": \"pg_graphql\",\n      \"version\": \"unstable-2023-08-01\"\n    },\n    {\n      \"name\": \"pg_stat_monitor\",\n      \"version\": \"1.0.1\"\n    },\n    {\n      \"name\": \"pg_jsonschema\",\n      \"version\": \"unstable-2023-07-23\"\n    },\n    {\n      \"name\": \"vault\",\n      \"version\": \"0.2.9\"\n    },\n    {\n      \"name\": \"hypopg\",\n      \"version\": \"1.3.1\"\n    },\n    {\n      \"name\": \"pg_tle\",\n      \"version\": \"1.0.4\"\n    },\n    {\n      \"name\": \"supabase-wrappers\",\n      \"version\": \"unstable-2023-07-31\"\n    },\n    {\n      \"name\": \"supautils\",\n      \"version\": \"1.7.3\"\n    }\n  ],\n  \"nixpkgs\": {\n    \"extensions\": [\n      {\n        \"name\": \"postgis\",\n        \"version\": \"3.3.3\"\n      },\n      {\n        \"name\": \"pgrouting\",\n        \"version\": \"3.5.0\"\n      },\n      {\n        \"name\": \"pgtap\",\n        \"version\": \"1.2.0\"\n      },\n      {\n        \"name\": \"pg_cron\",\n        \"version\": \"1.5.2\"\n      },\n      {\n        \"name\": \"pgaudit\",\n        \"version\": \"1.7.0\"\n      },\n      {\n        \"name\": \"pgjwt\",\n        \"version\": \"unstable-2021-11-13\"\n      },\n      {\n        \"name\": \"plpgsql_check\",\n        \"version\": \"2.3.4\"\n      },\n      {\n        \"name\": \"pg-safeupdate\",\n        \"version\": \"1.4\"\n      },\n      {\n        \"name\": \"timescaledb\",\n        \"version\": \"2.11.1\"\n      },\n      {\n        \"name\": \"wal2json\",\n        \"version\": \"2.5\"\n      },\n      {\n        \"name\": \"plv8\",\n        \"version\": \"3.1.5\"\n      },\n      {\n        \"name\": \"rum\",\n        \"version\": \"1.3.13\"\n      },\n      {\n        \"name\": \"pgvector\",\n        \"version\": \"0.4.4\"\n      },\n      {\n        \"name\": \"pg_repack\",\n        \"version\": \"1.4.8\"\n      },\n      {\n        \"name\": \"pgroonga\",\n        \"version\": \"3.0.8\"\n      }\n    ],\n    \"revision\": \"750fc50bfd132a44972aa15bb21937ae26303bc4\"\n  },\n  \"psql-version\": \"15.3\",\n  \"receipt-version\": \"1\",\n  \"revision\": \"vcs=d250647+20230814\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nix Flake Check for pgTAP Tests\nDESCRIPTION: This command performs a flake check using Nix for pgTAP tests. The `-L` flag prints logs to stderr for detailed debugging and output during the test execution.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/adding-tests.md#_snippet_4\n\nLANGUAGE: Nix\nCODE:\n```\nnix flake check -L\n```\n\n----------------------------------------\n\nTITLE: Resolving the Result Symlink\nDESCRIPTION: This command reads the target of the `result` symlink created by the `nix build` command, revealing the full path in the Nix store where the PostgreSQL 15 installation is located. This path is a cryptographic hash of the build contents.\nSOURCE: https://github.com/supabase/postgres/blob/develop/nix/docs/build-postgres.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ readlink result\n/nix/store/ybf48481x033649mgdzk5dyaqv9dppzx-postgresql-and-plugins-15.3\n```\n\n----------------------------------------\n\nTITLE: EBS Surrogate File Tree\nDESCRIPTION: This describes the file structure of the EBS surrogate volume, including configuration files for cloud-init, apt sources, systemd timers, and scripts for bootstrapping the chroot environment and formatting the disk.\nSOURCE: https://github.com/supabase/postgres/blob/develop/ebssurrogate/USAGE.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n$ tree ebssurrogate/\nebssurrogate/\n├── files\n│   ├── 70-ec2-nvme-devices.rules\n│   ├── cloud.cfg\t\t# cloud.cfg for cloud-init\n│   ├── ebsnvme-id\n│   ├── sources-arm64.cfg       # apt/sources.list for arm64\n│   ├── sources.cfg\t\t# apt/sources.list for amd64\n│   ├── vector.timer            # systemd-timer to delay vectore execution\n│   └── zfs-growpart-root.cfg\n└── scripts\n    ├── chroot-bootstrap.sh    # Installs grub and other required packages for build. Configures target AMI  settings\n    └── surrogate-bootstrap.sh # Formats disk and setups chroot environment. Runs Ansible tasks within chrooted environment.\n```"
  }
]