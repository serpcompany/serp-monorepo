[
  {
    "owner": "clockworklabs",
    "repo": "spacetime-docs",
    "content": "TITLE: Implementing PlayerController in Unity with SpacetimeDB\nDESCRIPTION: A Unity MonoBehaviour class that manages player state, circle ownership, and movement updates. Handles player initialization, circle spawning/deletion, and mass calculations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Linq;\nusing SpacetimeDB;\nusing SpacetimeDB.Types;\nusing UnityEngine;\n\npublic class PlayerController : MonoBehaviour\n{\n\tconst int SEND_UPDATES_PER_SEC = 20;\n\tconst float SEND_UPDATES_FREQUENCY = 1f / SEND_UPDATES_PER_SEC;\n\n    public static PlayerController Local { get; private set; }\n\n\tprivate uint PlayerId;\n    private float LastMovementSendTimestamp;\n    private Vector2? LockInputPosition;\n\tprivate List<CircleController> OwnedCircles = new List<CircleController>();\n\n\tpublic string Username => GameManager.Conn.Db.Player.PlayerId.Find(PlayerId).Name;\n\tpublic int NumberOfOwnedCircles => OwnedCircles.Count;\n\tpublic bool IsLocalPlayer => this == Local;\n\n\tpublic void Initialize(Player player)\n    {\n        PlayerId = player.PlayerId;\n        if (player.Identity == GameManager.LocalIdentity)\n        {\n            Local = this;\n        }\n\t}\n\n    private void OnDestroy()\n    {\n        // If we have any circles, destroy them\n        foreach (var circle in OwnedCircles)\n        {\n            if (circle != null)\n            {\n                Destroy(circle.gameObject);\n            }\n        }\n        OwnedCircles.Clear();\n    }\n\n    public void OnCircleSpawned(CircleController circle)\n    {\n        OwnedCircles.Add(circle);\n    }\n\n    public void OnCircleDeleted(CircleController deletedCircle)\n\t{\n\t\t// This means we got eaten\n\t\tif (OwnedCircles.Remove(deletedCircle) && IsLocalPlayer && OwnedCircles.Count == 0)\n\t\t{\n\t\t\t// DeathScreen.Instance.SetVisible(true);\n\t\t}\n\t}\n\n\tpublic uint TotalMass()\n    {\n        return (uint)OwnedCircles\n            .Select(circle => GameManager.Conn.Db.Entity.EntityId.Find(circle.EntityId))\n\t\t\t.Sum(e => e?.Mass ?? 0);\n\t}\n\n    public Vector2? CenterOfMass()\n    {\n        if (OwnedCircles.Count == 0)\n        {\n            return null;\n        }\n        \n        Vector2 totalPos = Vector2.zero;\n        float totalMass = 0;\n        foreach (var circle in OwnedCircles)\n        {\n            var entity = GameManager.Conn.Db.Entity.EntityId.Find(circle.EntityId);\n            var position = circle.transform.position;\n            totalPos += (Vector2)position * entity.Mass;\n            totalMass += entity.Mass;\n        }\n\n        return totalPos / totalMass;\n\t}\n\n\tprivate void OnGUI()\n\t{\n\t\tif (!IsLocalPlayer || !GameManager.IsConnected())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tGUI.Label(new Rect(0, 0, 100, 50), $\"Total Mass: {TotalMass()}\");\n\t}\n\n\t//Automated testing members\n\tprivate bool testInputEnabled;\n\tprivate Vector2 testInput;\n\n\tpublic void SetTestInput(Vector2 input) => testInput = input;\n\tpublic void EnableTestInput() => testInputEnabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Reducers in C# with SpacetimeDB\nDESCRIPTION: This snippet demonstrates how to create a scheduled reducer in SpacetimeDB. It includes the definition of a scheduling table, the scheduled reducer itself, and an initialization reducer to set up recurring and one-time scheduled events.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\npublic static partial class Module\n{\n\n    // First, we declare the table with scheduling information.\n\n    [Table(Name = \"send_message_schedule\", Scheduled = nameof(SendMessage), ScheduledAt = nameof(ScheduledAt))]\n    public partial struct SendMessageSchedule\n    {\n\n        // Mandatory fields:\n\n        [PrimaryKey]\n        [AutoInc]\n        public ulong Id;\n\n        public ScheduleAt ScheduledAt;\n\n        // Custom fields:\n\n        public string Message;\n    }\n\n    // Then, we declare the scheduled reducer.\n    // The first argument of the reducer should be, as always, a `ReducerContext`.\n    // The second argument should be a row of the scheduling information table.\n\n    [Reducer]\n    public static void SendMessage(ReducerContext ctx, SendMessageSchedule schedule)\n    {\n        Log.Info($\"Sending message {schedule.Message}\");\n        // ...\n    }\n\n    // Finally, we want to actually start scheduling reducers.\n    // It's convenient to do this inside the `init` reducer.\n\n    [Reducer(ReducerKind.Init)]\n    public static void Init(ReducerContext ctx)\n    {\n        var currentTime = ctx.Timestamp;\n        var tenSeconds = new TimeDuration { Microseconds = +10_000_000 };\n        var futureTimestamp = currentTime + tenSeconds;\n\n        ctx.Db.send_message_schedule.Insert(new()\n        {\n            Id = 0, // Have [AutoInc] assign an Id.\n            ScheduledAt = new ScheduleAt.Time(futureTimestamp),\n            Message = \"I'm a bot sending a message one time!\"\n        });\n\n        ctx.Db.send_message_schedule.Insert(new()\n        {\n            Id = 0, // Have [AutoInc] assign an Id.\n            ScheduledAt = new ScheduleAt.Interval(tenSeconds),\n            Message = \"I'm a bot sending a message every ten seconds!\"\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Player Management Reducers in C#\nDESCRIPTION: Demonstrates core reducer implementation patterns including player state management, registration, and inventory deletion. Shows proper usage of ReducerContext, database operations, and error handling.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\nusing System;\nusing System.Linq;\n\npublic static partial class Module\n{\n    [Table(Name = \"player_state\", Public = true)] public partial class PlayerState { \n        [PrimaryKey] public Identity PlayerId; \n        [Unique] public string Name = \"\"; \n        public uint Health; public ushort Level; /* ... other fields */ } \n    [Table(Name = \"inventory_item\", Public = true)] public partial class InventoryItem { \n        [PrimaryKey] #[AutoInc] public ulong ItemId; \n        public Identity OwnerId; /* ... other fields */ }\n\n    [Reducer]\n    public static void UpdatePlayerData(ReducerContext ctx, string? newName)\n    {\n        var playerId = ctx.Sender;\n\n        var player = ctx.Db.player_state.PlayerId.Find(playerId);\n        if (player == null)\n        {\n            throw new Exception($\"Player not found: {playerId}\");\n        }\n\n        bool requiresUpdate = false;\n        if (!string.IsNullOrWhiteSpace(newName))\n        {\n             var existing = ctx.Db.player_state.Name.Find(newName); \n             if(existing != null && !existing.PlayerId.Equals(playerId)) {\n                 throw new Exception($\"Name '{newName}' already taken.\");\n             }\n             if (player.Name != newName) {\n            player.Name = newName;\n                requiresUpdate = true;\n        }\n        }\n        \n        if (player.Level < 100) {\n        player.Level += 1;\n            requiresUpdate = true;\n        }\n\n        if (requiresUpdate) {\n        ctx.Db.player_state.PlayerId.Update(player);\n        Log.Info($\"Updated player data for {playerId}\");\n        }\n    }\n\n    [Reducer]\n    public static void RegisterPlayer(ReducerContext ctx, string name)\n    {\n        if (string.IsNullOrWhiteSpace(name)) {\n             throw new ArgumentException(\"Name cannot be empty.\");\n        }\n        Log.Info($\"Attempting to register player: {name} ({ctx.Sender})\");\n\n        if (ctx.Db.player_state.PlayerId.Find(ctx.Sender) != null || ctx.Db.player_state.Name.Find(name) != null)\n        {\n             throw new Exception(\"Player already registered or name taken.\");\n        }\n\n        var newPlayer = new PlayerState\n        {\n            PlayerId = ctx.Sender,\n            Name = name,\n            Health = 100,\n            Level = 1,\n        };\n\n            ctx.Db.player_state.Insert(newPlayer);\n            Log.Info($\"Player registered successfully: {ctx.Sender}\");\n    }\n\n    [Reducer]\n    public static void DeleteMyItems(ReducerContext ctx) \n    {\n        var ownerId = ctx.Sender;\n        int deletedCount = 0;\n\n        var itemsToDelete = ctx.Db.inventory_item.Iter()\n                                  .Where(item => item.OwnerId.Equals(ownerId))\n                                  .ToList();\n        \n        foreach(var item in itemsToDelete)\n        {\n            if (ctx.Db.inventory_item.ItemId.Delete(item.ItemId)) {\n                     deletedCount++;\n                 }\n            }\n        Log.Info($\"Deleted {deletedCount} items for player {ownerId}.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Connection Reducer in Rust\nDESCRIPTION: Defines a reducer that handles client connections by creating or updating user records with online status. Uses ctx.db.user() methods to manage user data with appropriate error handling.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[reducer(client_connected)]\npub fn client_connected(ctx: &ReducerContext) {\n    if let Some(user) = ctx.db.user().identity().find(ctx.sender) {\n        ctx.db.user().identity().update(User { online: true, ..user });\n    } else {\n        ctx.db.user().insert(User {\n            name: None,\n            identity: ctx.sender,\n            online: true,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe to SQL Queries with Spacetime in Rust\nDESCRIPTION: This Rust snippet implements a subscription initiation for all rows in user and message tables, with `on_applied` and `on_error` callbacks to handle subscription application and errors, respectively.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n/// Register subscriptions for all rows of both tables.\nfn subscribe_to_tables(ctx: &DbConnection) {\n    ctx.subscription_builder()\n        .on_applied(on_sub_applied)\n        .on_error(on_sub_error)\n        .subscribe([\"SELECT * FROM user\", \"SELECT * FROM message\"]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Table in SpacetimeDB\nDESCRIPTION: Definition of a public User table with identity as the primary key, storing optional name and online status.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[table(name = user, public)]\npub struct User {\n    #[primary_key]\n    identity: Identity,\n    name: Option<String>,\n    online: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Table in C#\nDESCRIPTION: Demonstrates how to declare a database table in C# using SpacetimeDB attributes. The example defines a 'Player' table with various fields including a primary key and shows how to make it publicly accessible to clients.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Table(Name = \"players\", Public = true)]\npublic partial struct Player\n{\n    [SpacetimeDB.PrimaryKey]\n    uint playerId;\n    string name;\n    uint age;\n    Identity user;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Table in SpacetimeDB C# Module\nDESCRIPTION: Creating a public table to store user information, including identity, name, and online status.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Table(Name = \"user\", Public = true)]\npublic partial class User\n{\n    [PrimaryKey]\n    public Identity Identity;\n    public string? Name;\n    public bool Online;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SpacetimeDB Client Connection in TypeScript\nDESCRIPTION: This snippet sets up the SpacetimeDB connection within a React component, manages connection state and handles events such as connecting and disconnecting from the database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst [connected, setConnected] = useState<boolean>(false);\nconst [identity, setIdentity] = useState<Identity | null>(null);\nconst [conn, setConn] = useState<DbConnection | null>(null);\n\nuseEffect(() => {\n  const subscribeToQueries = (conn: DbConnection, queries: string[]) => {\n    let count = 0;\n    for (const query of queries) {\n      conn\n        ?.subscriptionBuilder()\n        .onApplied(() => {\n          count++;\n          if (count === queries.length) {\n            console.log('SDK client cache initialized.');\n          }\n        })\n        .subscribe(query);\n    }\n  };\n\n  const onConnect = (\n    conn: DbConnection,\n    identity: Identity,\n    token: string\n  ) => {\n    setIdentity(identity);\n    setConnected(true);\n    localStorage.setItem('auth_token', token);\n    console.log(\n      'Connected to SpacetimeDB with identity:',\n      identity.toHexString()\n    );\n    conn.reducers.onSendMessage(() => {\n      console.log('Message sent.');\n    });\n\n    subscribeToQueries(conn, ['SELECT * FROM message', 'SELECT * FROM user']);\n  };\n\n  const onDisconnect = () => {\n    console.log('Disconnected from SpacetimeDB');\n    setConnected(false);\n  };\n\n  const onConnectError = (_ctx: ErrorContext, err: Error) => {\n    console.log('Error connecting to SpacetimeDB:', err);\n  };\n\n  setConn(\n    DbConnection.builder()\n      .withUri('ws://localhost:3000')\n      .withModuleName('quickstart-chat')\n      .withToken(localStorage.getItem('auth_token') || '')\n      .onConnect(onConnect)\n      .onDisconnect(onDisconnect)\n      .onConnectError(onConnectError)\n      .build()\n  );\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Circle Spawning in C# with SpacetimeDB\nDESCRIPTION: C# implementation of player spawning functionality for a multiplayer game, including an EnterGame reducer for player name setting and spawning initial circles with randomized positions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nconst uint START_PLAYER_MASS = 15;\n\n[Reducer]\npublic static void EnterGame(ReducerContext ctx, string name)\n{\n    Log.Info($\"Creating player with name {name}\");\n    var player = ctx.Db.player.identity.Find(ctx.Sender) ?? throw new Exception(\"Player not found\");\n    player.name = name;\n    ctx.Db.player.identity.Update(player);\n    SpawnPlayerInitialCircle(ctx, player.player_id);\n}\n\npublic static Entity SpawnPlayerInitialCircle(ReducerContext ctx, uint player_id)\n{\n    var rng = ctx.Rng;\n    var world_size = (ctx.Db.config.id.Find(0) ?? throw new Exception(\"Config not found\")).world_size;\n    var player_start_radius = MassToRadius(START_PLAYER_MASS);\n    var x = rng.Range(player_start_radius, world_size - player_start_radius);\n    var y = rng.Range(player_start_radius, world_size - player_start_radius);\n    return SpawnCircleAt(\n        ctx,\n        player_id,\n        START_PLAYER_MASS,\n        new DbVector2(x, y),\n        ctx.Timestamp\n    );\n}\n\npublic static Entity SpawnCircleAt(ReducerContext ctx, uint player_id, uint mass, DbVector2 position, SpacetimeDB.Timestamp timestamp)\n{\n    var entity = ctx.Db.entity.Insert(new Entity\n    {\n        position = position,\n        mass = mass,\n    });\n\n    ctx.Db.circle.Insert(new Circle\n    {\n        entity_id = entity.entity_id,\n        player_id = player_id,\n        direction = new DbVector2(0, 1),\n        speed = 0f,\n        last_split_time = timestamp,\n    });\n    return entity;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Player Movement in C#\nDESCRIPTION: A SpacetimeDB scheduled reducer in C# that updates all player circles' positions based on their direction and speed. It calculates proper movement based on mass, prevents circles from moving outside world boundaries, and handles entity updates.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Table(Name = \"move_all_players_timer\", Scheduled = nameof(MoveAllPlayers), ScheduledAt = nameof(scheduled_at))]\npublic partial struct MoveAllPlayersTimer\n{\n    [PrimaryKey, AutoInc]\n    public ulong scheduled_id;\n    public ScheduleAt scheduled_at;\n}\n\nconst uint START_PLAYER_SPEED = 10;\n\npublic static float MassToMaxMoveSpeed(uint mass) => 2f * START_PLAYER_SPEED / (1f + MathF.Sqrt((float)mass / START_PLAYER_MASS));\n\n[Reducer]\npublic static void MoveAllPlayers(ReducerContext ctx, MoveAllPlayersTimer timer)\n{\n    var world_size = (ctx.Db.config.id.Find(0) ?? throw new Exception(\"Config not found\")).world_size;\n\n    var circle_directions = ctx.Db.circle.Iter().Select(c => (c.entity_id, c.direction * c.speed)).ToDictionary();\n\n    // Handle player input\n    foreach (var circle in ctx.Db.circle.Iter())\n    {\n        var check_entity = ctx.Db.entity.entity_id.Find(circle.entity_id);\n        if (check_entity == null)\n        {\n            // This can happen if the circle has been eaten by another circle.\n            continue;\n        }\n        var circle_entity = check_entity.Value;\n        var circle_radius = MassToRadius(circle_entity.mass);\n        var direction = circle_directions[circle.entity_id];\n        var new_pos = circle_entity.position + direction * MassToMaxMoveSpeed(circle_entity.mass);\n        circle_entity.position.x = Math.Clamp(new_pos.x, circle_radius, world_size - circle_radius);\n        circle_entity.position.y = Math.Clamp(new_pos.y, circle_radius, world_size - circle_radius);\n        ctx.Db.entity.entity_id.Update(circle_entity);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reducer in C#\nDESCRIPTION: Shows how to define a reducer function in C# that can be called by clients. This example creates a 'SetPlayerName' reducer that takes a player ID and name parameters, along with a context object for authentication.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/index.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Reducer]\npublic static void SetPlayerName(ReducerContext ctx, uint playerId, string name)\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SpacetimeDB in Rust\nDESCRIPTION: Establishes a connection to the SpacetimeDB database using the DbConnection builder pattern, setting up callbacks and connection parameters.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n/// The URI of the SpacetimeDB instance hosting our chat database and module.\nconst HOST: &str = \"http://localhost:3000\";\n\n/// The database name we chose when we published our module.\nconst DB_NAME: &str = \"quickstart-chat\";\n\n/// Load credentials from a file and connect to the database.\nfn connect_to_db() -> DbConnection {\n    DbConnection::builder()\n        // Register our `on_connect` callback, which will save our auth token.\n        .on_connect(on_connected)\n        // Register our `on_connect_error` callback, which will print a message, then exit the process.\n        .on_connect_error(on_connect_error)\n        // Our `on_disconnect` callback, which will print a message, then exit the process.\n        .on_disconnect(on_disconnected)\n        // If the user has previously connected, we'll have saved a token in the `on_connect` callback.\n        // In that case, we'll load it and pass it to `with_token`,\n        // so we can re-authenticate as the same `Identity`.\n        .with_token(creds_store().load().expect(\"Error loading credentials\"))\n        // Set the database name we chose when we called `spacetime publish`.\n        .with_module_name(DB_NAME)\n        // Set the URI of the SpacetimeDB host that's running our database.\n        .with_uri(HOST)\n        // Finalize configuration and connect!\n        .build()\n        .expect(\"Failed to connect\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Send Message Reducer in SpacetimeDB\nDESCRIPTION: Reducer function for sending messages, validating message text and inserting a new record into the Message table.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[reducer]\n/// Clients invoke this reducer to send messages.\npub fn send_message(ctx: &ReducerContext, text: String) -> Result<(), String> {\n    let text = validate_message(text)?;\n    log::info!(\"{}\", text);\n    ctx.db.message().insert(Message {\n        sender: ctx.sender,\n        text,\n        sent: ctx.timestamp,\n    });\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Table in SpacetimeDB with C#\nDESCRIPTION: This code snippet demonstrates how to declare a table in SpacetimeDB using the `[SpacetimeDB.Table]` attribute on a C# `partial struct`. It showcases defining fields with attributes like `[SpacetimeDB.PrimaryKey]`, `[SpacetimeDB.AutoInc]`, and `[SpacetimeDB.Index.BTree]` for specifying table schema and indexing.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic static partial class Module {\n\n    /// <summary>\n    /// A Person is a row of the table person.\n    /// </summary>\n    [SpacetimeDB.Table(Name = \"person\", Public)]\n    public partial struct Person {\n        [SpacetimeDB.PrimaryKey]\n        [SpacetimeDB.AutoInc]\n        ulong Id;\n        [SpacetimeDB.Index.BTree]\n        string Name;\n    }\n\n    // `Person` is a normal C# struct type.\n    // Operations on a `Person` do not, by themselves, do anything.\n    // The following function does not interact with the database at all.\n    public static void DoNothing() {\n        // Creating a `Person` DOES NOT modify the database.\n        var person = new Person { Id = 0, Name = \"Joe Average\" };\n        // Updating a `Person` DOES NOT modify the database.\n        person.Name = \"Joanna Average\";\n        // Deallocating a `Person` DOES NOT modify the database.\n        person = null;\n    }\n\n    // To interact with the database, you need a `ReducerContext`,\n    // which is provided as the first parameter of any reducer.\n    [SpacetimeDB.Reducer]\n    public static void DoSomething(ReducerContext ctx) {\n        // The following inserts a row into the table:\n        var examplePerson = ctx.Db.person.Insert(new Person { id = 0, name = \"Joe Average\" });\n\n        // `examplePerson` is a COPY of the row stored in the database.\n        // If we update it:\n        examplePerson.name = \"Joanna Average\".to_string();\n        // Our copy is now updated, but the database's copy is UNCHANGED.\n        // To push our change through, we can call `UniqueIndex.Update()`:\n        examplePerson = ctx.Db.person.Id.Update(examplePerson);\n        // Now the database and our copy are in sync again.\n        \n        // We can also delete the row in the database using `UniqueIndex.Delete()`.\n        ctx.Db.person.Id.Delete(examplePerson.Id);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: C# Code Snippet for Unity GameManager Class\nDESCRIPTION: This snippet contains the implementation of the GameManager class used in Unity to manage database connections to the SpacetimeDB server. It includes constants for server URL and module name, event declarations, and methods for connection management and handling subscription events.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GameManager : MonoBehaviour\n{\n    const string SERVER_URL = \"http://127.0.0.1:3000\";\n    const string MODULE_NAME = \"blackholio\";\n\n    public static event Action OnConnected;\n    public static event Action OnSubscriptionApplied;\n\n    public float borderThickness = 2;\n    public Material borderMaterial;\n\n\tpublic static GameManager Instance { get; private set; }\n    public static Identity LocalIdentity { get; private set; }\n    public static DbConnection Conn { get; private set; }\n\n    private void Start()\n    {\n        Instance = this;\n        Application.targetFrameRate = 60;\n\n        // In order to build a connection to SpacetimeDB we need to register\n        // our callbacks and specify a SpacetimeDB server URI and module name.\n        var builder = DbConnection.Builder()\n            .OnConnect(HandleConnect)\n            .OnConnectError(HandleConnectError)\n            .OnDisconnect(HandleDisconnect)\n            .WithUri(SERVER_URL)\n            .WithModuleName(MODULE_NAME);\n\n        // If the user has a SpacetimeDB auth token stored in the Unity PlayerPrefs,\n        // we can use it to authenticate the connection.\n        if (AuthToken.Token != \"\")\n        {\n            builder = builder.WithToken(AuthToken.Token);\n        }\n\n        // Building the connection will establish a connection to the SpacetimeDB\n        // server.\n        Conn = builder.Build();\n    }\n\n    // Called when we connect to SpacetimeDB and receive our client identity\n    void HandleConnect(DbConnection _conn, Identity identity, string token)\n    {\n        Debug.Log(\"Connected.\");\n        AuthToken.SaveToken(token);\n        LocalIdentity = identity;\n\n        OnConnected?.Invoke();\n\n        // Request all tables\n        Conn.SubscriptionBuilder()\n            .OnApplied(HandleSubscriptionApplied)\n            .SubscribeToAllTables();\n    }\n\n    void HandleConnectError(Exception ex)\n    {\n        Debug.LogError($\"Connection error: {ex}\");\n    }\n\n    void HandleDisconnect(DbConnection _conn, Exception ex)\n    {\n        Debug.Log(\"Disconnected.\");\n        if (ex != null)\n        {\n            Debug.LogException(ex);\n        }\n    }\n\n    private void HandleSubscriptionApplied(SubscriptionEventContext ctx)\n    {\n        Debug.Log(\"Subscription applied!\");\n        OnSubscriptionApplied?.Invoke();\n    }\n\n    public static bool IsConnected()\n    {\n        return Conn != null && Conn.IsActive;\n    }\n\n    public void Disconnect()\n    {\n        Conn.Disconnect();\n        Conn = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Updates with OnUpdate Callbacks in SpacetimeDB C#\nDESCRIPTION: The snippet discusses an `OnUpdate` callback to handle state changes of a user, specifically name changes and online status, in SpacetimeDB. It examines the old and new states to provide relevant notifications about status transitions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our `User.OnUpdate` callback:\n/// print a notification about name and status changes.\nvoid User_OnUpdate(EventContext ctx, User oldValue, User newValue)\n{\n    if (oldValue.Name != newValue.Name)\n    {\n        Console.WriteLine($\"{UserNameOrIdentity(oldValue)} renamed to {newValue.Name}\");\n    }\n    if (oldValue.Online != newValue.Online)\n    {\n        if (newValue.Online)\n        {\n            Console.WriteLine($\"{UserNameOrIdentity(newValue)} connected.\");\n        }\n        else\n        {\n            Console.WriteLine($\"{UserNameOrIdentity(newValue)} disconnected.\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row using ITableView.Insert in C#\nDESCRIPTION: This code snippet illustrates the `Insert` method of the `ITableView` interface for inserting a row into a SpacetimeDB table. It shows that the method returns the inserted row with auto-incrementing columns updated and throws an exception if any constraints are violated.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nRow Insert(Row row);\n```\n\n----------------------------------------\n\nTITLE: Calling a Reducer from C# Client\nDESCRIPTION: Demonstrates how to call a reducer from a C# client application. The client code invokes the 'SetPlayerName' reducer with specific parameters that are sent to the database for processing.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/index.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main() {\n   // ...setup code, then...\n   Connection.Reducer.SetPlayerName(57, \"Marceline\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SubscriptionBuilder in Rust\nDESCRIPTION: Rust implementation of the SubscriptionBuilder struct and associated methods for creating and managing database subscriptions. Includes methods for registering callbacks and subscribing to database queries.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub struct SubscriptionBuilder<M: SpacetimeModule> { /* private fields */ }\n\nimpl<M: SpacetimeModule> SubscriptionBuilder<M> {\n    /// Register a callback that runs when the subscription has been applied.\n    /// This callback receives a context containing the current state of the subscription.\n    pub fn on_applied(mut self, callback: impl FnOnce(&M::SubscriptionEventContext) + Send + 'static);\n\n    /// Register a callback to run when the subscription fails.\n    ///\n    /// Note that this callback may run either when attempting to apply the subscription,\n    /// in which case [`Self::on_applied`] will never run,\n    /// or later during the subscription's lifetime if the module's interface changes,\n    /// in which case [`Self::on_applied`] may have already run.\n    pub fn on_error(mut self, callback: impl FnOnce(&M::ErrorContext, crate::Error) + Send + 'static);\n\n    /// Subscribe to a subset of the database via a set of SQL queries.\n    /// Returns a handle which you can use to monitor or drop the subscription later.\n    pub fn subscribe<Queries: IntoQueries>(self, query_sql: Queries) -> M::SubscriptionHandle;\n\n    /// Subscribe to all rows from all tables.\n    ///\n    /// This method is intended as a convenience\n    /// for applications where client-side memory use and network bandwidth are not concerns.\n    /// Applications where these resources are a constraint\n    /// should register more precise queries via [`Self::subscribe`]\n    /// in order to replicate only the subset of data which the client needs to function.\n    pub fn subscribe_to_all_tables(self);\n}\n\n/// Types which specify a list of query strings.\npub trait IntoQueries {\n    fn into_queries(self) -> Box<[Box<str>]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SpacetimeDB module types for C# client\nDESCRIPTION: Uses the spacetime CLI to generate C# interfaces for tables, reducers, and types defined in the server module, making them accessible to the client.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p client/module_bindings\nspacetime generate --lang csharp --out-dir client/module_bindings --project-path server\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB C# Module Skeleton Example\nDESCRIPTION: A skeleton example for a SpacetimeDB C# module. It defines a Person table with auto-incrementing ID, name, and age fields, and two reducers: one to add a person and another to greet all people in the database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static partial class Module\n{\n    [SpacetimeDB.Table]\n    public partial struct Person\n    {\n        [SpacetimeDB.AutoInc]\n        [SpacetimeDB.PrimaryKey]\n        public int Id;\n        public string Name;\n        public int Age;\n    }\n\n    [SpacetimeDB.Reducer]\n    public static void Add(ReducerContext ctx, string name, int age)\n    {\n        var person = ctx.Db.Person.Insert(new Person { Name = name, Age = age });\n        Log.Info($\"Inserted {person.Name} under #{person.Id}\");\n    }\n\n    [SpacetimeDB.Reducer]\n    public static void SayHello(ReducerContext ctx)\n    {\n        foreach (var person in ctx.Db.Person.Iter())\n        {\n            Log.Info($\"Hello, {person.Name}!\");\n        }\n        Log.Info(\"Hello, World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Table in SpacetimeDB\nDESCRIPTION: Definition of a public Message table for storing chat messages with sender identity, timestamp, and text content.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[table(name = message, public)]\npub struct Message {\n    sender: Identity,\n    sent: Timestamp,\n    text: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Reducers in Rust for SpacetimeDB\nDESCRIPTION: Demonstrates the implementation of two basic reducers: set_name for updating a user's name, and send_message for inserting a new message. Includes table definitions, reducer functions, and helper validation methods.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{reducer, ReducerContext, Table, Identity, Timestamp, log};\n\n// Assume User and Message tables are defined as previously\n#[table(name = user, public)]\n#[derive(Clone, Debug)] pub struct User { #[primary_key] identity: Identity, name: Option<String>, online: bool }\n#[table(name = message, public)]\n#[derive(Clone, Debug)] pub struct Message { #[primary_key] #[auto_inc] id: u64, sender: Identity, text: String, sent: Timestamp }\n\n// Example: Basic reducer to set a user's name\n#[reducer]\npub fn set_name(ctx: &ReducerContext, name: String) -> Result<(), String> {\n    let sender_id = ctx.sender;\n    let name = validate_name(name)?; // Use helper for validation\n\n    // Find the user row by primary key\n    if let Some(mut user) = ctx.db.user().identity().find(&sender_id) {\n        // Update the field\n        user.name = Some(name);\n        // Persist the change using the PK index update method\n        ctx.db.user().identity().update(user);\n        log::info!(\"User {} set name\", sender_id);\n        Ok(())\n    } else {\n        Err(format!(\"User not found: {}\", sender_id))\n    }\n}\n\n// Example: Basic reducer to send a message\n#[reducer]\npub fn send_message(ctx: &ReducerContext, text: String) -> Result<(), String> {\n    let text = validate_message(text)?; // Use helper for validation\n    log::info!(\"User {} sent message: {}\", ctx.sender, text);\n\n    // Insert a new row into the Message table\n    // Note: id is auto_inc, so we provide 0. insert() panics on constraint violation.\n    let new_message = Message {\n        id: 0, \n        sender: ctx.sender,\n        text,\n        sent: ctx.timestamp,\n    };\n    ctx.db.message().insert(new_message);\n    // For Result-based error handling on insert, use try_insert() - see below\n\n    Ok(())\n}\n\n// Helper validation functions (example)\nfn validate_name(name: String) -> Result<String, String> {\n    if name.is_empty() { Err(\"Name cannot be empty\".to_string()) } else { Ok(name) }\n}\n\nfn validate_message(text: String) -> Result<String, String> {\n    if text.is_empty() { Err(\"Message cannot be empty\".to_string()) } else { Ok(text) }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Data and Handling Row Callbacks in SpacetimeDB\nDESCRIPTION: Demonstrates accessing locally cached data and registering callbacks for table row changes. This snippet shows how to work with the table cache, register event handlers for insert/update/delete operations, and differentiate between initial data load and live updates.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB.Types; // For EventContext, Event, Reducer\nusing System.Linq;\n\n// In ClientManager or similar class...\nprivate void RegisterEventCallbacks(DbConnection conn)\n{\n    conn.Db.Player.OnInsert += HandlePlayerInsert;\n    conn.Db.Player.OnUpdate += HandlePlayerUpdate;\n    conn.Db.Message.OnInsert += HandleMessageInsert;\n    // Remember to unregister callbacks on disconnect/cleanup: -= HandlePlayerInsert;\n}\n\nprivate void HandlePlayerInsert(EventContext ctx, Player insertedPlayer)\n{\n    // Only react to updates caused by reducers, not initial subscription load\n    if (ctx.Event is not Event<Reducer>.SubscribeApplied)\n    {\n        Console.WriteLine($\"Player joined: {insertedPlayer.Name ?? \"Unknown\"}\");\n    }\n}\n\nprivate void HandlePlayerUpdate(EventContext ctx, Player oldPlayer, Player newPlayer)\n{\n    if (oldPlayer.Name != newPlayer.Name)\n    {\n        Console.WriteLine($\"Player renamed: {oldPlayer.Name ?? \"??\"} -> {newPlayer.Name ?? \"??\"}\");\n    }\n    // ... handle other changes like online status ...\n}\n\nprivate void HandleMessageInsert(EventContext ctx, Message insertedMessage)\n{\n    if (ctx.Event is not Event<Reducer>.SubscribeApplied)\n    {\n        // Find sender name from cache\n        var sender = ctx.Db.Player.FindByPlayerId(insertedMessage.Sender);\n        string senderName = sender?.Name ?? \"Unknown\";\n        Console.WriteLine($\"{senderName}: {insertedMessage.Text}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Table Handle with ITableView Interface\nDESCRIPTION: This code snippet shows how to access a table handle implementing the `ITableView` interface from a `ReducerContext` in SpacetimeDB. It demonstrates using `ctx.Db.{table_name}` to get the table handle, enabling operations like inserting, deleting, and iterating over table rows.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nctx.Db.person\n```\n\n----------------------------------------\n\nTITLE: Implementing CircleController in C# for Unity\nDESCRIPTION: This code defines the CircleController class, which inherits from EntityController. It handles spawning and management of circle game objects, including color assignment and player association.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing SpacetimeDB;\nusing SpacetimeDB.Types;\nusing UnityEngine;\n\npublic class CircleController : EntityController\n{\n\tpublic static Color[] ColorPalette = new[]\n\t{\n        //Yellow\n\t\t(Color)new Color32(175, 159, 49, 255),\n\t\t(Color)new Color32(175, 116, 49, 255),\n        \n        //Purple\n        (Color)new Color32(112, 47, 252, 255),\n\t\t(Color)new Color32(51, 91, 252, 255),\n        \n        //Red\n        (Color)new Color32(176, 54, 54, 255),\n\t\t(Color)new Color32(176, 109, 54, 255),\n\t\t(Color)new Color32(141, 43, 99, 255),\n        \n        //Blue\n        (Color)new Color32(2, 188, 250, 255),\n\t\t(Color)new Color32(7, 50, 251, 255),\n\t\t(Color)new Color32(2, 28, 146, 255),\n\t};\n\n    private PlayerController Owner;\n\n    public void Spawn(Circle circle, PlayerController owner)\n    {\n        base.Spawn(circle.EntityId);\n\t\tSetColor(ColorPalette[circle.PlayerId % ColorPalette.Length]);\n\n        this.Owner = owner;\n        GetComponentInChildren<TMPro.TextMeshProUGUI>().text = owner.Username;\n    }\n\n\tpublic override void OnDelete(EventContext context)\n\t{\n\t\tbase.OnDelete(context);\n        Owner.OnCircleDeleted(this);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic RLS Filter in Rust\nDESCRIPTION: Demonstrates how to create a basic visibility filter in Rust that restricts a client to only see their own account records using SQL and the :sender parameter.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{client_visibility_filter, Filter};\n\n/// A client can only see their account\n#[client_visibility_filter]\nconst ACCOUNT_FILTER: Filter = Filter::Sql(\n    \"SELECT * FROM account WHERE identity = :sender\"\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing OnConnectError callback for connection errors\nDESCRIPTION: Handles connection errors by displaying details about the exception that occurred during the connection attempt.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our `OnConnectError` callback: print the error, then exit the process.\nvoid OnConnectError(Exception e)\n{\n    Console.Write($\"Error while connecting: {e}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Delete Method with Indexed Columns in SpacetimeDB C#\nDESCRIPTION: Shows the Delete method which removes rows matching specified column values or ranges. Returns the count of deleted rows and supports the same bound formats as the Filter method.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\npublic ulong Delete(Column1 bound);\npublic ulong Delete(Bound<Column1> bound);\npublic ulong Delete((Column1, Column2) bound);\npublic ulong Delete((Column1, Bound<Column2>) bound);\npublic ulong Delete((Column1, Column2, Column3) bound);\npublic ulong Delete((Column1, Column2, Bound<Column3>) bound);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Row-Level Security in SpacetimeDB Rust Modules\nDESCRIPTION: Shows how to define row-level security rules using client visibility filters in SpacetimeDB Rust modules. This feature allows controlling which rows of a table are visible to clients based on SQL-like queries.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{client_visibility_filter, Filter, table, Identity};\n\n#[table(name = \"location_state\")]\nstruct LocationState { #[primary_key] entity_id: u64, chunk_index: u32 }\n#[table(name = \"user_state\")]\nstruct UserState { #[primary_key] identity: Identity, entity_id: u64 }\n\n#[client_visibility_filter]\nconst PLAYERS_SEE_ENTITIES_IN_SAME_CHUNK: Filter = Filter::Sql(\"\n    SELECT * FROM LocationState WHERE chunk_index IN (\n        SELECT chunk_index FROM LocationState WHERE entity_id IN (\n            SELECT entity_id FROM UserState WHERE identity = :sender\n        )\n    )\n\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Alliance Reducer in SpacetimeDB Rust\nDESCRIPTION: Defines a reducer function that allows players to choose an alliance for their character. The function finds the player's character and updates it with the chosen alliance while preserving other attributes.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/how-to/incremental-migrations.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer]\nfn choose_alliance(ctx: &ReducerContext, alliance: Alliance) {\n    let character = find_character_for_player(ctx);\n    log::info!(\n        \"Setting alliance of {} to {:?}\",\n        character.nickname,\n        alliance,\n    );\n    update_character(\n        ctx,\n        CharacterV2 {\n            alliance,\n            ..character\n        },\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Player Disconnection in Rust with SpacetimeDB\nDESCRIPTION: Rust reducer that handles player disconnections by removing their circles from the game arena, deleting the relevant entities, and cleaning up player records.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer(client_disconnected)]\npub fn disconnect(ctx: &ReducerContext) -> Result<(), String> {\n    let player = ctx\n        .db\n        .player()\n        .identity()\n        .find(&ctx.sender)\n        .ok_or(\"Player not found\")?;\n    let player_id = player.player_id;\n    ctx.db.logged_out_player().insert(player);\n    ctx.db.player().identity().delete(&ctx.sender);\n\n    // Remove any circles from the arena\n    for circle in ctx.db.circle().player_id().filter(&player_id) {\n        ctx.db.entity().entity_id().delete(&circle.entity_id);\n        ctx.db.circle().entity_id().delete(&circle.entity_id);\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple RLS Rules for a Table in C#\nDESCRIPTION: Shows how to define multiple RLS rules for the same table in C#, allowing different access patterns (personal access and admin access) to be combined with logical OR.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\n#pragma warning disable STDB_UNSTABLE\n\npublic partial class Module\n{\n    /// <summary>\n    /// A client can only see their account.\n    /// </summary>\n    [SpacetimeDB.ClientVisibilityFilter]\n    public static readonly Filter ACCOUNT_FILTER = new Filter.Sql(\n        \"SELECT * FROM account WHERE identity = :sender\"\n    );\n\n    /// <summary>\n    /// An admin can see all accounts.\n    /// </summary>\n    [SpacetimeDB.ClientVisibilityFilter]\n    public static readonly Filter ACCOUNT_FILTER_FOR_ADMINS = new Filter.Sql(\n        \"SELECT account.* FROM account JOIN admin WHERE admin.identity = :sender\"\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Data in TypeScript SpacetimeDB Client\nDESCRIPTION: Demonstrates how to subscribe to SQL queries for receiving data and processing the initial cache. This includes subscribing to tables and handling the initial data load once the subscription is applied.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n// Part of the ChatClient class\nprivate subscribeToTables() {\n    if (!this.conn) return;\n    \n    const queries = [\"SELECT * FROM message\", \"SELECT * FROM user\"];\n\n    console.log(\"Subscribing...\");\n    this.conn\n        .subscriptionBuilder()\n        .onApplied(() => {\n            console.log(`Subscription applied for: ${queries}`);\n            // Initial cache is now populated, process initial data if needed\n            this.processInitialCache(); \n        })\n        .onError((error: Error) => {\n            console.error(`Subscription error:`, error);\n        })\n        .subscribe(queries);\n}\n\nprivate processInitialCache() {\n    if (!this.conn) return;\n    console.log(\"Processing initial cache...\");\n    // Populate userMap from initial cache\n    this.userMap.clear();\n    for (const user of this.conn.db.User.iter()) {\n        this.handleUserInsert(undefined, user); // Pass undefined context for initial load\n    }\n    // Process initial messages, e.g., sort and display\n    const initialMessages = Array.from(this.conn.db.Message.iter());\n    initialMessages.sort((a, b) => a.sent.getTime() - b.sent.getTime());\n    for (const message of initialMessages) {\n        this.handleMessageInsert(undefined, message); // Pass undefined context\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Connection Handler in SpacetimeDB C#\nDESCRIPTION: Reducer function that handles client connections by creating or updating user records. Uses ReducerKind.ClientConnected to track when users come online and manages their status in the database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer(ReducerKind.ClientConnected)]\npublic static void ClientConnected(ReducerContext ctx)\n{\n    Log.Info($\"Connect {ctx.Sender}\");\n    var user = ctx.Db.user.Identity.Find(ctx.Sender);\n\n    if (user is not null)\n    {\n        // If this is a returning user, i.e., we already have a `User` with this `Identity`,\n        // set `Online: true`, but leave `Name` and `Identity` unchanged.\n        user.Online = true;\n        ctx.Db.user.Identity.Update(user);\n    }\n    else\n    {\n        // If this is a new user, create a `User` object for the `Identity`,\n        // which is online, but hasn't set a name.\n        ctx.Db.user.Insert(\n            new User\n            {\n                Name = null,\n                Identity = ctx.Sender,\n                Online = true,\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Database Connection with SpacetimeDB C# SDK\nDESCRIPTION: Demonstrates how to create and configure a database connection using the builder pattern. This snippet shows setting up the connection URI, database name, authentication token, and registering callback handlers for connection events.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\nusing SpacetimeDB.Types;\nusing System;\n\npublic class ClientManager // Example class\n{\n    const string HOST = \"http://localhost:3000\";\n    const string DB_NAME = \"my_database\"; // Or your specific DB name/identity\n    private DbConnection connection;\n\n    public void StartConnecting()\n    {\n        // Initialize token storage (e.g., in AppData)\n        AuthToken.Init(\".my_client_creds\");\n\n        connection = DbConnection.Builder()\n            .WithUri(HOST)\n            .WithModuleName(DB_NAME)\n            .WithToken(AuthToken.Token) // Load token if exists\n            .OnConnect(HandleConnect)\n            .OnConnectError(HandleConnectError)\n            .OnDisconnect(HandleDisconnect)\n            .Build();\n            \n        // Need to call FrameTick regularly - see next section\n    }\n\n    private void HandleConnect(DbConnection conn, Identity identity, string authToken)\n    {\n        Console.WriteLine($\"Connected. Identity: {identity}\");\n        AuthToken.SaveToken(authToken); // Save token for future connections\n\n        // Register other callbacks after connecting\n        RegisterEventCallbacks(conn);\n\n        // Subscribe to data\n        SubscribeToTables(conn);\n    }\n\n    private void HandleConnectError(Exception e)\n    {\n        Console.WriteLine($\"Connection Error: {e.Message}\");\n        // Handle error, e.g., retry or exit\n    }\n\n    private void HandleDisconnect(DbConnection conn, Exception? e)\n    {\n        Console.WriteLine($\"Disconnected. Reason: {(e == null ? \"Requested\" : e.Message)}\");\n        // Handle disconnection\n    }\n    \n    // Placeholder methods - implementations shown in later sections\n    private void RegisterEventCallbacks(DbConnection conn) { /* ... */ }\n    private void SubscribeToTables(DbConnection conn) { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Level-Based Shop Subscriptions in Rust\nDESCRIPTION: Example showing how to handle database subscriptions for shop items and discounts based on player level. Demonstrates subscription creation and cleanup when player level changes.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet conn: DbConnection = connect_to_db();\n\nlet shop_items_subscription = conn\n    .subscription_builder()\n    .on_applied(|ctx| { /* handle applied state */ })\n    .on_error(|error_ctx, error| { /* handle error */ })\n    .subscribe([\n        \"SELECT * FROM shop_items WHERE required_level <= 5\",\n        \"SELECT * FROM shop_discounts WHERE required_level <= 5\",\n    ]);\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet new_shop_items_subscription = conn\n    .subscription_builder()\n    .on_applied(|ctx| { /* handle applied state */ })\n    .on_error(|error_ctx, error| { /* handle error */ })\n    .subscribe([\n        \"SELECT * FROM shop_items WHERE required_level <= 6\",\n        \"SELECT * FROM shop_discounts WHERE required_level <= 6\",\n    ]);\n\nif shop_items_subscription.is_active() {\n    shop_items_subscription\n        .unsubscribe()\n        .expect(\"Unsubscribing from shop_items failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ITableView Interface in SpacetimeDB\nDESCRIPTION: This code defines the `ITableView` interface in SpacetimeDB's internal namespace. This interface is implemented for every table handle generated by the `Table` attribute. It specifies the methods for interacting with a table, such as inserting, deleting, iterating, and counting rows, with `Row` representing the table's row type.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace SpacetimeDB.Internal;\n\npublic interface ITableView<View, Row>\n    where Row : IStructuralReadWrite, new()\n{\n        /* ... */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Reducer in Rust\nDESCRIPTION: Creates a simple debug reducer function that logs the identity of the calling client. Demonstrates basic reducer implementation pattern.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer]\npub fn debug(ctx: &ReducerContext) -> Result<(), String> {\n    log::debug!(\"This reducer was called by {}.\", ctx.sender);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Food Spawning System - C#\nDESCRIPTION: C# implementation of the food spawning system with helper methods for random number generation. Handles food entity creation and positioning.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nconst uint FOOD_MASS_MIN = 2;\nconst uint FOOD_MASS_MAX = 4;\nconst uint TARGET_FOOD_COUNT = 600;\n\npublic static float MassToRadius(uint mass) => MathF.Sqrt(mass);\n\n[Reducer]\npublic static void SpawnFood(ReducerContext ctx, SpawnFoodTimer _timer)\n{\n    if (ctx.Db.player.Count == 0)\n    {\n        return;\n    }\n\n    var world_size = (ctx.Db.config.id.Find(0) ?? throw new Exception(\"Config not found\")).world_size;\n    var rng = ctx.Rng;\n    var food_count = ctx.Db.food.Count;\n    while (food_count < TARGET_FOOD_COUNT)\n    {\n        var food_mass = rng.Range(FOOD_MASS_MIN, FOOD_MASS_MAX);\n        var food_radius = MassToRadius(food_mass);\n        var x = rng.Range(food_radius, world_size - food_radius);\n        var y = rng.Range(food_radius, world_size - food_radius);\n        var entity = ctx.Db.entity.Insert(new Entity()\n        {\n            position = new DbVector2(x, y),\n            mass = food_mass,\n        });\n        ctx.Db.food.Insert(new Food\n        {\n            entity_id = entity.entity_id,\n        });\n        food_count++;\n        Log.Info($\"Spawned food! {entity.entity_id}\");\n    }\n}\n\npublic static float Range(this Random rng, float min, float max) => rng.NextSingle() * (max - min) + min;\n\npublic static uint Range(this Random rng, uint min, uint max) => (uint)rng.NextInt64(min, max);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple RLS Rules for a Table in Rust\nDESCRIPTION: Demonstrates how to define multiple RLS rules for the same table in Rust, allowing different access patterns (personal access and admin access) to be combined with logical OR.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{client_visibility_filter, Filter};\n\n/// A client can only see their account\n#[client_visibility_filter]\nconst ACCOUNT_FILTER: Filter = Filter::Sql(\n    \"SELECT * FROM account WHERE identity = :sender\"\n);\n\n/// An admin can see all accounts\n#[client_visibility_filter]\nconst ACCOUNT_FILTER_FOR_ADMINS: Filter = Filter::Sql(\n    \"SELECT account.* FROM account JOIN admin WHERE admin.identity = :sender\"\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Disconnection Handler in SpacetimeDB C#\nDESCRIPTION: Reducer function that handles client disconnections by updating user online status. Uses ReducerKind.ClientDisconnected to track when users go offline.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer(ReducerKind.ClientDisconnected)]\npublic static void ClientDisconnected(ReducerContext ctx)\n{\n    var user = ctx.Db.user.Identity.Find(ctx.Sender);\n\n    if (user is not null)\n    {\n        // This user should exist, so set `Online: false`.\n        user.Online = false;\n        ctx.Db.user.Identity.Update(user);\n    }\n    else\n    {\n        // User does not exist, log warning\n        Log.Warn(\"Warning: No user found for disconnected client.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Food Spawning System - Rust\nDESCRIPTION: Implements the main food spawning logic including mass calculation, random positioning, and entity creation. Maintains a target count of food entities in the game world.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nconst FOOD_MASS_MIN: u32 = 2;\nconst FOOD_MASS_MAX: u32 = 4;\nconst TARGET_FOOD_COUNT: usize = 600;\n\nfn mass_to_radius(mass: u32) -> f32 {\n    (mass as f32).sqrt()\n}\n\n#[spacetimedb::reducer]\npub fn spawn_food(ctx: &ReducerContext, _timer: SpawnFoodTimer) -> Result<(), String> {\n    if ctx.db.player().count() == 0 {\n        return Ok(());\n    }\n\n    let world_size = ctx\n        .db\n        .config()\n        .id()\n        .find(0)\n        .ok_or(\"Config not found\")?\n        .world_size;\n\n    let mut rng = ctx.rng();\n    let mut food_count = ctx.db.food().count();\n    while food_count < TARGET_FOOD_COUNT as u64 {\n        let food_mass = rng.gen_range(FOOD_MASS_MIN..FOOD_MASS_MAX);\n        let food_radius = mass_to_radius(food_mass);\n        let x = rng.gen_range(food_radius..world_size as f32 - food_radius);\n        let y = rng.gen_range(food_radius..world_size as f32 - food_radius);\n        let entity = ctx.db.entity().try_insert(Entity {\n            entity_id: 0,\n            position: DbVector2 { x, y },\n            mass: food_mass,\n        })?;\n        ctx.db.food().try_insert(Food {\n            entity_id: entity.entity_id,\n        })?;\n        food_count += 1;\n        log::info!(\"Spawned food! {}\", entity.entity_id);\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing V2 Character Management Functions in Rust\nDESCRIPTION: Updates character management functions to work with the new CharacterV2 schema while maintaining compatibility with the original table.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/how-to/incremental-migrations.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer]\nfn create_character(ctx: &ReducerContext, class: Class, nickname: String) {\n    log::info!(\n        \"Creating new level 1 {class:?} named {nickname} for player {}\",\n        ctx.sender,\n    );\n\n    ctx.db.character().insert(Character {\n        player_id: ctx.sender,\n        nickname: nickname.clone(),\n        level: 1,\n        class,\n    });\n\n    ctx.db.character_v2().insert(CharacterV2 {\n        player_id: ctx.sender,\n        nickname,\n        level: 1,\n        class,\n        alliance: Alliance::Neutral,\n    });\n}\n\nfn find_character_for_player(ctx: &ReducerContext) -> CharacterV2 {\n    if let Some(character) = ctx.db.character_v2().player_id().find(ctx.sender) {\n        return character;\n    }\n\n    let old_character = ctx\n        .db\n        .character()\n        .player_id()\n        .find(ctx.sender)\n        .expect(\"Player has not created a character\");\n\n    ctx.db.character_v2().insert(CharacterV2 {\n        player_id: old_character.player_id,\n        nickname: old_character.nickname,\n        level: old_character.level,\n        class: old_character.class,\n        alliance: Alliance::Neutral,\n    })\n}\n\nfn update_character(ctx: &ReducerContext, character: CharacterV2) {\n    ctx.db.character().player_id().update(Character {\n        player_id: character.player_id,\n        nickname: character.nickname.clone(),\n        level: character.level,\n        class: character.class,\n    });\n    ctx.db.character_v2().player_id().update(character);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Game Configuration - Rust\nDESCRIPTION: Creates an init reducer to set up initial game configuration and spawn food timer. Sets world size and configures periodic food spawning every 500ms.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer(init)]\npub fn init(ctx: &ReducerContext) -> Result<(), String> {\n    log::info!(\"Initializing...\");\n    ctx.db.config().try_insert(Config {\n        id: 0,\n        world_size: 1000,\n    })?;\n    ctx.db.spawn_food_timer().try_insert(SpawnFoodTimer {\n        scheduled_id: 0,\n        scheduled_at: ScheduleAt::Interval(Duration::from_millis(500).into()),\n    })?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Client for SpacetimeDB\nDESCRIPTION: Implements a complete client class for connecting to a SpacetimeDB module, handling authentication, connection events, and maintaining client-side state. Includes connection setup, event handling, and placeholder methods for table subscriptions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DbConnection, EventContext, ReducerEventContext, Message, User } from './module_bindings';\nimport { Identity, Status } from '@clockworklabs/spacetimedb-sdk';\n\nconst HOST = \"ws://localhost:3000\";\nconst DB_NAME = \"quickstart-chat\"; \nconst CREDS_KEY = \"auth_token\";\n\nclass ChatClient {\n    public conn: DbConnection | null = null;\n    public identity: Identity | null = null;\n    public connected: boolean = false;\n    // Client-side cache for user lookups\n    private userMap: Map<string, User> = new Map();\n\n    constructor() {\n        // Bind methods to ensure `this` is correct in callbacks\n        this.handleConnect = this.handleConnect.bind(this);\n        this.handleDisconnect = this.handleDisconnect.bind(this);\n        this.handleConnectError = this.handleConnectError.bind(this);\n        this.registerTableCallbacks = this.registerTableCallbacks.bind(this);\n        this.registerReducerCallbacks = this.registerReducerCallbacks.bind(this);\n        this.subscribeToTables = this.subscribeToTables.bind(this);\n        this.handleMessageInsert = this.handleMessageInsert.bind(this);\n        this.handleUserInsert = this.handleUserInsert.bind(this);\n        this.handleUserUpdate = this.handleUserUpdate.bind(this);\n        this.handleUserDelete = this.handleUserDelete.bind(this);\n        this.handleSendMessageResult = this.handleSendMessageResult.bind(this);\n    }\n\n    public connect() {\n        console.log(\"Attempting to connect...\");\n        const token = localStorage.getItem(CREDS_KEY) || null;\n\n        const connectionInstance = DbConnection.builder()\n            .withUri(HOST)\n            .withModuleName(DB_NAME)\n            .withToken(token)\n            .onConnect(this.handleConnect)\n            .onDisconnect(this.handleDisconnect)\n            .onConnectError(this.handleConnectError)\n            .build();\n            \n        this.conn = connectionInstance;\n    }\n\n    private handleConnect(conn: DbConnection, identity: Identity, token: string) {\n        this.identity = identity;\n        this.connected = true;\n        localStorage.setItem(CREDS_KEY, token); // Save new/refreshed token\n        console.log('Connected with identity:', identity.toHexString());\n\n        // Register callbacks and subscribe now that we are connected\n        this.registerTableCallbacks();\n        this.registerReducerCallbacks();\n        this.subscribeToTables();\n    }\n\n    private handleDisconnect() {\n        console.log('Disconnected');\n        this.connected = false;\n        this.identity = null;\n        this.conn = null; \n        this.userMap.clear(); // Clear local cache on disconnect\n    }\n\n    private handleConnectError(err: Error) {\n        console.error('Connection Error:', err);\n        localStorage.removeItem(CREDS_KEY); // Clear potentially invalid token\n        this.conn = null; // Ensure connection is marked as unusable\n    }\n    \n    // Placeholder implementations for callback registration and subscription\n    private registerTableCallbacks() { /* See Section 6 */ }\n    private registerReducerCallbacks() { /* See Section 7 */ }\n    private subscribeToTables() { /* See Section 5 */ }\n    \n    // Placeholder implementations for table callbacks\n    private handleMessageInsert(ctx: EventContext | undefined, message: Message) { /* See Section 6 */ }\n    private handleUserInsert(ctx: EventContext | undefined, user: User) { /* See Section 6 */ }\n    private handleUserUpdate(ctx: EventContext | undefined, oldUser: User, newUser: User) { /* See Section 6 */ }\n    private handleUserDelete(ctx: EventContext, user: User) { /* See Section 6 */ }\n    \n    // Placeholder for reducer callback\n    private handleSendMessageResult(ctx: ReducerEventContext, messageText: string) { /* See Section 7 */ }\n\n    // Public methods for interaction\n    public sendChatMessage(message: string) { /* See Section 7 */ }\n    public setPlayerName(newName: string) { /* See Section 7 */ }\n}\n\n// Example Usage:\n// const client = new ChatClient();\n// client.connect();\n```\n\n----------------------------------------\n\nTITLE: Defining Config Table in C# for SpacetimeDB\nDESCRIPTION: Definition of a Config table in C# for SpacetimeDB that stores game configuration as a singleton, including world size.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// We're using this table as a singleton, so in this table\n// there will only be one element where the `id` is 0.\n[Table(Name = \"config\", Public = true)]\npublic partial struct Config\n{\n    [PrimaryKey]\n    public uint id;\n    public ulong world_size;\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Database Connection in Rust with SpacetimeDB SDK\nDESCRIPTION: Demonstrates how to establish a connection to SpacetimeDB using the DbConnection builder pattern. Includes token management, connection lifecycle callbacks, and error handling.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb_sdk::{identity, DbContext, Identity, credentials};\nuse crate::module_bindings::{DbConnection, connect_event_callbacks, table_update_callbacks};\n\nconst HOST: &str = \"http://localhost:3000\";\nconst DB_NAME: &str = \"my_database\"; // Or your specific DB name/identity\n\nfn connect_to_db() -> DbConnection {\n    // Helper for storing/loading auth token\n    fn creds_store() -> credentials::File {\n        credentials::File::new(\".my_client_creds\") // Unique filename\n    }\n\n    DbConnection::builder()\n        .with_uri(HOST)\n        .with_module_name(DB_NAME)\n        .with_token(creds_store().load().ok()) // Load token if exists\n        .on_connect(|conn, identity, auth_token| {\n            println!(\"Connected. Identity: {}\", identity.to_hex());\n            // Save the token for future connections\n            if let Err(e) = creds_store().save(auth_token) {\n                eprintln!(\"Failed to save auth token: {}\", e);\n            }\n            // Register other callbacks *after* successful connection\n            connect_event_callbacks(conn);\n            table_update_callbacks(conn);\n            // Initiate subscriptions\n            subscribe_to_tables(conn);\n        })\n        .on_connect_error(|err_ctx, err| {\n            eprintln!(\"Connection Error: {}\", err);\n            std::process::exit(1); \n        })\n        .on_disconnect(|err_ctx, maybe_err| {\n            println!(\"Disconnected. Reason: {:?}\", maybe_err);\n            std::process::exit(0);\n        })\n        .build()\n        .expect(\"Failed to connect\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Detection and Food Consumption in C#\nDESCRIPTION: This C# code snippet adds collision detection and food consumption mechanics to the game. It includes an 'IsOverlapping' helper method and a modified 'MoveAllPlayers' reducer that checks for collisions between circles and food entities, updating masses and deleting entities as necessary.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nconst float MINIMUM_SAFE_MASS_RATIO = 0.85f;\n\npublic static bool IsOverlapping(Entity a, Entity b)\n{\n    var dx = a.position.x - b.position.x;\n    var dy = a.position.y - b.position.y;\n    var distance_sq = dx * dx + dy * dy;\n\n    var radius_a = MassToRadius(a.mass);\n    var radius_b = MassToRadius(b.mass);\n    \n    // If the distance between the two circle centers is less than the\n    // maximum radius, then the center of the smaller circle is inside\n    // the larger circle. This gives some leeway for the circles to overlap\n    // before being eaten.\n    var max_radius = radius_a > radius_b ? radius_a: radius_b;\n    return distance_sq <= max_radius * max_radius;\n}\n\n[Reducer]\npublic static void MoveAllPlayers(ReducerContext ctx, MoveAllPlayersTimer timer)\n{\n    var world_size = (ctx.Db.config.id.Find(0) ?? throw new Exception(\"Config not found\")).world_size;\n\n    // Handle player input\n    foreach (var circle in ctx.Db.circle.Iter())\n    {\n        var check_entity = ctx.Db.entity.entity_id.Find(circle.entity_id);\n        if (check_entity == null)\n        {\n            // This can happen if the circle has been eaten by another circle.\n            continue;\n        }\n        var circle_entity = check_entity.Value;\n        var circle_radius = MassToRadius(circle_entity.mass);\n        var direction = circle.direction * circle.speed;\n        var new_pos = circle_entity.position + direction * MassToMaxMoveSpeed(circle_entity.mass);\n        circle_entity.position.x = Math.Clamp(new_pos.x, circle_radius, world_size - circle_radius);\n        circle_entity.position.y = Math.Clamp(new_pos.y, circle_radius, world_size - circle_radius);\n\n        // Check collisions\n        foreach (var entity in ctx.Db.entity.Iter())\n        {\n            if (entity.entity_id == circle_entity.entity_id)\n            {\n                continue;\n            }\n            if (IsOverlapping(circle_entity, entity))\n            {\n                // Check to see if we're overlapping with food\n                if (ctx.Db.food.entity_id.Find(entity.entity_id).HasValue) {\n                    ctx.Db.entity.entity_id.Delete(entity.entity_id);\n                    ctx.Db.food.entity_id.Delete(entity.entity_id);\n                    circle_entity.mass += entity.mass;\n                }\n                \n                // Check to see if we're overlapping with another circle owned by another player\n                var other_circle = ctx.Db.circle.entity_id.Find(entity.entity_id);\n                if (other_circle.HasValue &&\n                    other_circle.Value.player_id != circle.player_id)\n                {\n                    var mass_ratio = (float)entity.mass / circle_entity.mass;\n                    if (mass_ratio < MINIMUM_SAFE_MASS_RATIO)\n                    {\n                        ctx.Db.entity.entity_id.Delete(entity.entity_id);\n                        ctx.Db.circle.entity_id.Delete(entity.entity_id);\n                        circle_entity.mass += entity.mass;\n                    }\n                }\n            }\n        }\n        ctx.Db.entity.entity_id.Update(circle_entity);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Join RLS Rules in C#\nDESCRIPTION: Demonstrates how to implement a visibility filter in C# using a self-join on the player table to restrict client access to players on the same level.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\npublic partial class Module\n{\n    /// <summary>\n    /// A client can only see players on their same level.\n    /// </summary>\n    [SpacetimeDB.ClientVisibilityFilter]\n    public static readonly Filter PLAYER_FILTER = new Filter.Sql(@\"\n        SELECT q.*\n        FROM account a\n        JOIN player p ON u.id = p.id\n        JOIN player q on p.level = q.level\n        WHERE a.identity = :sender\n    \");\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing SpacetimeDB Module\nDESCRIPTION: Command for publishing a SpacetimeDB module to make it accessible to clients.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nspacetime publish --project-path server quickstart-chat\n```\n\n----------------------------------------\n\nTITLE: Defining Inventory, Customers, and Orders in Rust\nDESCRIPTION: This Rust snippet defines database table structures for Inventory, Customers, and Orders using the SpacetimeDB library. Each struct includes primary keys and indexing as per best practices for database design.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\n#[table(\n    name = Inventory,\n    index(name = product_name, btree = [name]),\n    public\n)]\nstruct Inventory {\n    #[primary_key]\n    id: u64,\n    name: String,\n    ..\n}\n\n#[table(\n    name = Customers,\n    public\n)]\nstruct Customers {\n    #[primary_key]\n    id: u64,\n    first_name: String,\n    last_name: String,\n    ..\n}\n\n#[table(\n    name = Orders,\n    public\n)]\nstruct Orders {\n    #[primary_key]\n    id: u64,\n    #[unique]\n    product_id: u64,\n    #[unique]\n    customer_id: u64,\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Callbacks in Rust\nDESCRIPTION: Sets up callbacks for various database events such as user joins, updates, message reception, and error handling for name setting and message sending.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n/// Register all the callbacks our app will use to respond to database events.\nfn register_callbacks(ctx: &DbConnection) {\n    // When a new user joins, print a notification.\n    ctx.db.user().on_insert(on_user_inserted);\n\n    // When a user's status changes, print a notification.\n    ctx.db.user().on_update(on_user_updated);\n\n    // When a new message is received, print it.\n    ctx.db.message().on_insert(on_message_inserted);\n\n    // When we fail to set our name, print a warning.\n    ctx.reducers.on_set_name(on_name_set);\n\n    // When we fail to send a message, print a warning.\n    ctx.reducers.on_send_message(on_message_sent);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Set Name Reducer in SpacetimeDB\nDESCRIPTION: Reducer function that allows clients to set their username after validating the name string and updating the User table.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[reducer]\n/// Clients invoke this reducer to set their user names.\npub fn set_name(ctx: &ReducerContext, name: String) -> Result<(), String> {\n    let name = validate_name(name)?;\n    if let Some(user) = ctx.db.user().identity().find(ctx.sender) {\n        ctx.db.user().identity().update(User { name: Some(name), ..user });\n        Ok(())\n    } else {\n        Err(\"Cannot set name for unknown user\".to_string())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Disconnection Reducer in Rust\nDESCRIPTION: Defines a reducer that handles client disconnections by updating the user's online status to false. Includes warning logging for unexpected disconnections.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[reducer(client_disconnected)]\npub fn identity_disconnected(ctx: &ReducerContext) {\n    if let Some(user) = ctx.db.user().identity().find(ctx.sender) {\n        ctx.db.user().identity().update(User { online: false, ..user });\n    } else {\n        log::warn!(\"Disconnect event for unknown user with identity {:?}\", ctx.sender);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Connection Structure in Rust\nDESCRIPTION: Structure definition for database connection showing RemoteTables access through the db field.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nstruct DbConnection {\n    pub db: RemoteTables,\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Modules to Self-Hosted SpacetimeDB\nDESCRIPTION: Commands to build a SpacetimeDB module locally, securely copy it to the server, and publish it from the server to bypass remote publishing restrictions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nspacetime build\nscp target/wasm32-unknown-unknown/release/spacetime_module.wasm ubuntu@<host>:/home/ubuntu/\nssh ubuntu@<host> spacetime publish -s local --bin-path spacetime_module.wasm <database-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Reducers in SpacetimeDB with C#\nDESCRIPTION: Complete example of implementing scheduled reducers in SpacetimeDB using C#. Shows how to define a schedule table, create a scheduled reducer function, and set up both one-time and periodic task execution in the Init lifecycle reducer.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\nusing System;\n\npublic static partial class Module\n{\n    // 1. Define the table with scheduling information, linking to `SendMessage` reducer.\n    // Specifies that the `ScheduledAt` field holds the schedule info.\n    [Table(Name = \"send_message_schedule\", Scheduled = nameof(SendMessage), ScheduledAt = nameof(ScheduledAt))] \n    public partial struct SendMessageSchedule\n    {\n        // Mandatory fields:\n        [PrimaryKey]\n        [AutoInc]\n        public ulong Id; // Identifier for the scheduled call\n\n        public ScheduleAt ScheduledAt; // Holds the schedule timing\n\n        // Custom fields (arguments for the reducer):\n        public string Message;\n    }\n\n    // 2. Define the scheduled reducer.\n    // It takes the schedule table struct as its second argument.\n    [Reducer]\n    public static void SendMessage(ReducerContext ctx, SendMessageSchedule scheduleArgs)\n    {\n        // Security check!\n        if (!ctx.Sender.Equals(ctx.Identity))\n        {\n            throw new Exception(\"Reducer SendMessage may not be invoked by clients, only via scheduling.\");\n        }\n\n        Log.Info($\"Scheduled SendMessage: {scheduleArgs.Message}\");\n        // ... perform action with scheduleArgs.Message ...\n    }\n\n    // 3. Example of scheduling reducers (e.g., in Init)\n    [Reducer(ReducerKind.Init)]\n    public static void Init(ReducerContext ctx)\n    {\n        // Avoid rescheduling if Init runs again\n        if (ctx.Db.send_message_schedule.Count > 0) {\n             return; \n        }\n\n        var tenSeconds = new TimeDuration { Microseconds = 10_000_000 };\n        var futureTimestamp = ctx.Timestamp + tenSeconds;\n\n        // Schedule a one-off message\n        ctx.Db.send_message_schedule.Insert(new SendMessageSchedule\n        {\n            Id = 0, // Let AutoInc assign ID\n            // Use ScheduleAt.Time for one-off execution at a specific Timestamp\n            ScheduledAt = new ScheduleAt.Time(futureTimestamp), \n            Message = \"I'm a bot sending a message one time!\"\n        });\n        Log.Info(\"Scheduled one-off message.\");\n\n        // Schedule a periodic message (every 10 seconds)\n        ctx.Db.send_message_schedule.Insert(new SendMessageSchedule\n        {\n            Id = 0, // Let AutoInc assign ID\n             // Use ScheduleAt.Interval for periodic execution with a TimeDuration\n            ScheduledAt = new ScheduleAt.Interval(tenSeconds), \n            Message = \"I'm a bot sending a message every 10 seconds!\"\n        });\n        Log.Info(\"Scheduled periodic message.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HandleSubscriptionApplied in Unity C#\nDESCRIPTION: This method handles the subscription applied event, sets up the arena based on the world size from the config table, and calls the enter_game reducer to spawn the player with a default name.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void HandleSubscriptionApplied(SubscriptionEventContext ctx)\n{\n    Debug.Log(\"Subscription applied!\");\n    OnSubscriptionApplied?.Invoke();\n\n    // Once we have the initial subscription sync'd to the client cache\n    // Get the world size from the config table and set up the arena\n    var worldSize = Conn.Db.Config.Id.Find(0).WorldSize;\n    SetupArena(worldSize);\n\n    // Call enter game with the player name 3Blave\n    ctx.Reducers.EnterGame(\"3Blave\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function in Rust\nDESCRIPTION: Defines the main function that connects to the database, registers callbacks, subscribes to tables, and handles user input.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    // Connect to the database\n    let ctx = connect_to_db();\n\n    // Register callbacks to run in response to database events.\n    register_callbacks(&ctx);\n\n    // Subscribe to SQL queries in order to construct a local partial replica of the database.\n    subscribe_to_tables(&ctx);\n\n    // Spawn a thread, where the connection will process messages and invoke callbacks.\n    ctx.run_threaded();\n\n    // Handle CLI input\n    user_input_loop(&ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up database connection with SpacetimeDB\nDESCRIPTION: Establishes a connection to the SpacetimeDB instance using the builder pattern with various configuration options and callback registrations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n/// The URI of the SpacetimeDB instance hosting our chat database and module.\nconst string HOST = \"http://localhost:3000\";\n\n/// The database name we chose when we published our module.\nconst string DBNAME = \"quickstart-chat\";\n\n/// Load credentials from a file and connect to the database.\nDbConnection ConnectToDB()\n{\n    DbConnection? conn = null;\n    conn = DbConnection.Builder()\n        .WithUri(HOST)\n        .WithModuleName(DBNAME)\n        .WithToken(AuthToken.Token)\n        .OnConnect(OnConnected)\n        .OnConnectError(OnConnectError)\n        .OnDisconnect(OnDisconnected)\n        .Build();\n    return conn;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reducer Callbacks and Actions in SpacetimeDB Client\nDESCRIPTION: This code shows how to register callbacks for reducers in a SpacetimeDB application, handle the results of reducer invocations, and implement client methods that invoke reducers. It includes logic to check if a reducer was called by the current client and handle success or failure states.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// Part of the ChatClient class\nprivate registerReducerCallbacks() {\n    if (!this.conn) return;\n\n    this.conn.reducers.onSendMessage(this.handleSendMessageResult);\n    // Register other reducer callbacks if needed\n    // this.conn.reducers.onSetName(this.handleSetNameResult);\n    \n    // Note: Consider returning a cleanup function to unregister\n}\n\nprivate handleSendMessageResult(ctx: ReducerEventContext, messageText: string) {\n    const wasOurCall = ctx.reducerEvent.callerIdentity.isEqual(this.identity);\n    if (!wasOurCall) return; // Only care about our own calls here\n\n    if (ctx.reducerEvent.status === Status.Committed) {\n        console.log(`Our message \"${messageText}\" sent successfully.`);\n    } else if (ctx.reducerEvent.status.isFailed()) {\n        console.error(`Failed to send \"${messageText}\": ${ctx.reducerEvent.status.getFailedMessage()}`);\n    }\n}\n\n// Public methods to be called from application logic\npublic sendChatMessage(message: string) {\n    if (this.conn && this.connected && message.trim()) {\n        this.conn.reducers.sendMessage(message);\n    }\n}\n\npublic setPlayerName(newName: string) {\n    if (this.conn && this.connected && newName.trim()) {\n        this.conn.reducers.setName(newName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reducer Failure Handling for Sending Messages in SpacetimeDB C#\nDESCRIPTION: Implements the `Reducer_OnSendMessageEvent` callback to warn users when their message sending operation fails in SpacetimeDB. Similar to name change handling, this function verifies the failure status and outputs an error message if sending the message fails.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our `OnSendMessageEvent` callback: print a warning if the reducer failed.\nvoid Reducer_OnSendMessageEvent(ReducerEventContext ctx, string text)\n{\n    var e = ctx.Event;\n    if (e.CallerIdentity == local_identity && e.Status is Status.Failed(var error))\n    {\n        Console.Write($\"Failed to send message {text}: {error}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Reducers in Rust for SpacetimeDB\nDESCRIPTION: Shows the implementation of lifecycle reducers including init, client_connected, and client_disconnected. These handle database initialization, client connection, and disconnection events respectively.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{reducer, table, ReducerContext, Table, log};\n\n#[table(name = settings)]\n#[derive(Clone, Debug)]\npub struct Settings {\n    #[primary_key]\n    key: String,\n    value: String,\n}\n\n// Example init reducer: Insert default settings if the table is empty\n#[reducer(init)]\npub fn initialize_database(ctx: &ReducerContext) {\n    log::info!(\n        \"Database Initializing! Module Identity: {}, Timestamp: {}\", \n        ctx.identity(), \n        ctx.timestamp\n    );\n    // Check if settings table is empty\n    if ctx.db.settings().count() == 0 {\n        log::info!(\"Settings table is empty, inserting default values...\");\n        // Insert default settings\n        ctx.db.settings().insert(Settings {\n            key: \"welcome_message\".to_string(),\n            value: \"Hello from SpacetimeDB!\".to_string(),\n        });\n        ctx.db.settings().insert(Settings {\n            key: \"default_score\".to_string(),\n            value: \"0\".to_string(),\n        });\n    } else {\n        log::info!(\"Settings table already contains data.\");\n    }\n}\n\n// Example client_connected reducer\n#[reducer(client_connected)]\npub fn handle_connect(ctx: &ReducerContext) {\n    log::info!(\"Client connected: {}, Connection ID: {:?}\", ctx.sender, ctx.connection_id);\n    // ... setup initial state for ctx.sender ...\n}\n\n// Example client_disconnected reducer\n#[reducer(client_disconnected)]\npub fn handle_disconnect(ctx: &ReducerContext) {\n    log::info!(\"Client disconnected: {}, Connection ID: {:?}\", ctx.sender, ctx.connection_id);\n    // ... cleanup state for ctx.sender ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Reducer in C#\nDESCRIPTION: C# version of the debug reducer that logs the identity of the calling client.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer]\npublic static void Debug(ReducerContext ctx)\n{\n    Log.Info($\"This reducer was called by {ctx.Sender}\");\t  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Trait in Rust for SpacetimeDB SDK\nDESCRIPTION: Defines the Table trait with associated types and methods for interacting with table data in the SpacetimeDB Rust SDK. Includes count, iteration, and callback registration for insert and delete operations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_54\n\nLANGUAGE: rust\nCODE:\n```\ntrait spacetimedb_sdk::Table {\n    type Table::Row;\n    fn count(&self) -> u64;\n    fn iter(&self) -> impl Iterator<Item = Self::Row>;\n    type InsertCallbackId;\n    fn on_insert(&self, callback: impl FnMut(&EventContext, &Self::Row)) -> Self::InsertCallbackId;\n    fn remove_on_insert(&self, callback: Self::InsertCallbackId);\n    type DeleteCallbackId;\n    fn on_delete(&self, callback: impl FnMut(&EventContext, &Self::Row)) -> Self::DeleteCallbackId;\n    fn remove_on_delete(&self, callback: Self::DeleteCallbackId);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Callbacks and Local Cache Management in TypeScript\nDESCRIPTION: This code demonstrates how to register table callbacks to maintain a local cache of data from SpacetimeDB. It includes handlers for insert, update, and delete operations on User and Message tables, with special handling for initial data loads versus live updates.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n// Part of the ChatClient class\nprivate registerTableCallbacks() {\n    if (!this.conn) return;\n\n    this.conn.db.Message.onInsert(this.handleMessageInsert);\n    \n    // User table callbacks update the local userMap\n    this.conn.db.User.onInsert(this.handleUserInsert);\n    this.conn.db.User.onUpdate(this.handleUserUpdate);\n    this.conn.db.User.onDelete(this.handleUserDelete);\n    \n    // Note: In a real app, you might return a cleanup function \n    // to unregister these if the ChatClient is destroyed.\n    // e.g., return () => { this.conn?.db.Message.removeOnInsert(...) };\n}\n\nprivate handleMessageInsert(ctx: EventContext | undefined, message: Message) {\n    const identityStr = message.sender.toHexString();\n    // Look up sender in our local map\n    const sender = this.userMap.get(identityStr);\n    const senderName = sender?.name ?? identityStr.substring(0, 8);\n    \n    if (ctx) { // Live update\n        console.log(`LIVE MSG: ${senderName}: ${message.text}`);\n        // TODO: Update UI (e.g., add to message list)\n    } else { // Initial load (handled in processInitialCache)\n        // console.log(`Initial MSG loaded: ${message.text} from ${senderName}`);\n    }\n}\n\nprivate handleUserInsert(ctx: EventContext | undefined, user: User) {\n    const identityStr = user.identity.toHexString();\n    this.userMap.set(identityStr, user);\n    const name = user.name ?? identityStr.substring(0, 8);\n    if (ctx) { // Live update\n        if (user.online) console.log(`${name} connected.`);\n    } else { // Initial load\n        // console.log(`Loaded user: ${name} (Online: ${user.online})`);\n    }\n    // TODO: Update UI (e.g., user list)\n}\n\nprivate handleUserUpdate(ctx: EventContext | undefined, oldUser: User, newUser: User) {\n    const oldIdentityStr = oldUser.identity.toHexString();\n    const newIdentityStr = newUser.identity.toHexString();\n    if(oldIdentityStr !== newIdentityStr) {\n       this.userMap.delete(oldIdentityStr);\n    }\n    this.userMap.set(newIdentityStr, newUser);\n    \n    const name = newUser.name ?? newIdentityStr.substring(0, 8);\n    if (ctx) { // Live update\n         if (!oldUser.online && newUser.online) console.log(`${name} connected.`);\n         else if (oldUser.online && !newUser.online) console.log(`${name} disconnected.`);\n         else if (oldUser.name !== newUser.name) console.log(`Rename: ${oldUser.name ?? '...'} -> ${name}.`);\n    }\n    // TODO: Update UI (e.g., user list, messages from this user)\n}\n\nprivate handleUserDelete(ctx: EventContext, user: User) {\n     const identityStr = user.identity.toHexString();\n     const name = user.name ?? identityStr.substring(0, 8);\n     this.userMap.delete(identityStr);\n     console.log(`${name} left/deleted.`);\n     // TODO: Update UI\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Scheduled Reducers in SpacetimeDB\nDESCRIPTION: Code snippet demonstrating the security pattern for scheduled reducers, ensuring they can only be executed by the SpacetimeDB scheduler and not directly by clients. This pattern checks the caller's identity against the module's identity.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer] // Assuming linked via [Table(Scheduled=...)]\npublic static void MyScheduledTask(ReducerContext ctx, MyScheduleArgs args)\n{\n    if (!ctx.Sender.Equals(ctx.Identity))\n    {\n        throw new Exception(\"Reducer MyScheduledTask may not be invoked by clients, only via scheduling.\");\n    }\n    // ... Reducer body proceeds only if called by scheduler ...\n    Log.Info(\"Executing scheduled task...\");\n}\n// Define MyScheduleArgs table elsewhere with [Table(Scheduled=nameof(MyScheduledTask), ...)]\npublic partial struct MyScheduleArgs { /* ... fields including ScheduleAt ... */ }\n```\n\n----------------------------------------\n\nTITLE: Basic Table Definitions in SpacetimeDB with C#\nDESCRIPTION: Demonstrates basic table definitions including public and private tables with various field types, primary keys, auto-increment, unique constraints, and indexes. Shows proper usage of attributes and field declarations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\nusing System; // For Nullable types if needed\n\n// Assume Position, PlayerStatus, ItemType are defined as types\n\n// Example Table Definition\n[Table(Name = \"player_state\", Public = true)]\n[Index.BTree(Name = \"idx_level\", Columns = new[] { nameof(Level) })] // Table-level index\npublic partial class PlayerState\n{\n    [PrimaryKey]\n    public Identity PlayerId; // Public field\n    [Unique]\n    public string Name = \"\"; // Public field (initialize to avoid null warnings if needed)\n    public uint Health; // Public field\n    public ushort Level; // Public field\n    public Position Position; // Public field (custom struct type)\n    public PlayerStatus Status; // Public field (custom record type)\n    public Timestamp? LastLogin; // Public field, nullable struct\n}\n\n[Table(Name = \"inventory_item\", Public = true)]\npublic partial class InventoryItem\n{\n    [PrimaryKey]\n    [AutoInc] // Automatically generate IDs\n    public ulong ItemId; // Public field\n    public Identity OwnerId; // Public field\n    [Index.BTree] // Simple index on this field\n    public ItemType ItemType; // Public field\n    public uint Quantity; // Public field\n}\n\n// Example of a private table\n[Table(Name = \"internal_game_data\")] // Public = false is default\npublic partial class InternalGameData\n{\n    [PrimaryKey]\n    public string Key = \"\"; // Public field\n    public string Value = \"\"; // Public field\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SubscriptionHandle in C#\nDESCRIPTION: C# class definition for SubscriptionHandle, providing properties and methods to check subscription status and manage unsubscription operations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n    public class SubscriptionHandle<SubscriptionEventContext, ErrorContext> : ISubscriptionHandle\n        where SubscriptionEventContext : ISubscriptionEventContext\n        where ErrorContext : IErrorContext\n    {\n        /// <summary>\n        /// Whether the subscription has ended.\n        /// </summary>\n        public bool IsEnded;\n\n        /// <summary>\n        /// Whether the subscription is active.\n        /// </summary>\n        public bool IsActive;\n\n        /// <summary>\n        /// Unsubscribe from the query controlled by this subscription handle.\n        /// \n        /// Calling this more than once will result in an exception.\n        /// </summary>\n        public void Unsubscribe();\n\n        /// <summary>\n        /// Unsubscribe from the query controlled by this subscription handle,\n        /// and call onEnded when its rows are removed from the client cache.\n        /// </summary>\n        public void UnsubscribeThen(Action<SubscriptionEventContext>? onEnded);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Player Table with Logged Out State\nDESCRIPTION: Creates a two-table approach for tracking player sessions, with separate tables for active and logged out players\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::table(name = player, public)]\n#[spacetimedb::table(name = logged_out_player)]\n#[derive(Debug, Clone)]\npub struct Player {\n    #[primary_key]\n    identity: Identity,\n    #[unique]\n    #[auto_inc]\n    player_id: u32,\n    name: String,\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[Table(Name = \"player\", Public = true)]\n[Table(Name = \"logged_out_player\")]\npublic partial struct Player\n{\n    [PrimaryKey]\n    public Identity identity;\n    [Unique, AutoInc]\n    public uint player_id;\n    public string name;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reducers in SpacetimeDB C#\nDESCRIPTION: Demonstrates how to create reducer functions in SpacetimeDB using the [SpacetimeDB.Reducer] attribute. Reducers must be static methods that accept a ReducerContext as the first parameter and return void.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npublic static partial class Module {\n    [SpacetimeDB.Reducer]\n    public static void GivePlayerItem(\n        ReducerContext context,\n        ulong PlayerId,\n        ulong ItemId\n    )\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DbConnectionBuilder in TypeScript\nDESCRIPTION: Demonstrates methods available on DbConnectionBuilder for configuring a connection to SpacetimeDB.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass DbConnectionBuilder {\n  public withUri(uri: string): DbConnectionBuilder\n  public withModuleName(name_or_identity: string): DbConnectionBuilder\n  public onConnect(\n    callback: (ctx: DbConnection, identity: Identity, token: string) => void\n  ): DbConnectionBuilder\n  public onConnectError(\n    callback: (ctx: ErrorContext, error: Error) => void\n  ): DbConnectionBuilder\n  public onDisconnect(\n    callback: (ctx: ErrorContext, error: Error | null) => void\n  ): DbConnectionBuilder\n  public withToken(token?: string): DbConnectionBuilder\n  public build(): DbConnection\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SendMessage Reducer in SpacetimeDB C# Module\nDESCRIPTION: Creating a reducer to allow users to send messages, including text validation and message insertion into the database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer]\npublic static void SendMessage(ReducerContext ctx, string text)\n{\n    text = ValidateMessage(text);\n    Log.Info(text);\n    ctx.Db.message.Insert(\n        new Message\n        {\n            Sender = ctx.Sender,\n            Text = text,\n            Sent = ctx.Timestamp,\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Reducers in Rust for SpacetimeDB\nDESCRIPTION: Demonstrates how to create and use scheduled reducers in SpacetimeDB Rust modules. Includes defining a schedule table, creating a scheduled reducer function, and examples of scheduling one-time and periodic reducer calls.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{table, reducer, ReducerContext, Timestamp, TimeDuration, ScheduleAt, Table};\nuse log::debug;\n\n#[table(name = send_message_schedule, scheduled(send_message))] \nstruct SendMessageSchedule {\n    #[primary_key]\n    #[auto_inc]\n    scheduled_id: u64,\n    scheduled_at: ScheduleAt,\n    text: String,\n}\n\n#[reducer]\nfn send_message(ctx: &ReducerContext, args: SendMessageSchedule) -> Result<(), String> {\n    if ctx.sender != ctx.identity() {\n        return Err(\"Reducer `send_message` may not be invoked by clients, only via scheduling.\".into());\n    }\n    let message_to_send = &args.text;\n    log::info!(\"Scheduled SendMessage: {}\", message_to_send);\n    Ok(())\n}\n\n#[reducer(init)]\nfn init(ctx: &ReducerContext) -> Result<(), String> {\n    let current_time = ctx.timestamp;\n    let ten_seconds = TimeDuration::from_micros(10_000_000);\n    let future_timestamp: Timestamp = ctx.timestamp + ten_seconds;\n\n    ctx.db.send_message_schedule().insert(SendMessageSchedule {\n        scheduled_id: 0,\n        text: \"I'm a bot sending a message one time\".to_string(),\n        scheduled_at: future_timestamp.into()\n    });\n    log::info!(\"Scheduled one-off message.\");\n\n    let loop_duration: TimeDuration = ten_seconds;\n    ctx.db.send_message_schedule().insert(SendMessageSchedule {\n        scheduled_id: 0,\n        text: \"I'm a bot sending a message every 10 seconds\".to_string(),\n        scheduled_at: loop_duration.into()\n    });\n    log::info!(\"Scheduled periodic message.\");\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Input Reducer in C#\nDESCRIPTION: A SpacetimeDB reducer in C# that processes player movement input. It updates the direction and speed of all circles owned by the authenticated player, ensuring players can only control their own game entities.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer]\npublic static void UpdatePlayerInput(ReducerContext ctx, DbVector2 direction)\n{\n    var player = ctx.Db.player.identity.Find(ctx.Sender) ?? throw new Exception(\"Player not found\");\t\t\t\t\n    foreach (var c in ctx.Db.circle.player_id.Filter(player.player_id))\n    {\n        var circle = c;\n        circle.direction = direction.Normalized;\n        circle.speed = Math.Clamp(direction.Magnitude, 0f, 1f);\n        ctx.Db.circle.entity_id.Update(circle);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic spacetime Command Usage\nDESCRIPTION: The main spacetime command with its general options and available subcommands. This is the entry point for all spacetime CLI operations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspacetime [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: UniqueIndex Usage in SpacetimeDB Reducer\nDESCRIPTION: Example of using UniqueIndex to find, update, and delete rows based on unique column values in a SpacetimeDB reducer method\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer]\nvoid Demo(ReducerContext ctx) {\n    var idIndex = ctx.Db.user.Id;\n    var exampleUser = idIndex.find(357).unwrap();\n    exampleUser.dog_count += 5;\n    idIndex.update(exampleUser);\n\n    var usernameIndex = ctx.Db.user.Username;\n    usernameIndex.delete(\"Evil Bob\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Data Updates and Row Callbacks in SpacetimeDB\nDESCRIPTION: Implements callback handlers for table updates including insert, update, and delete operations. Shows how to access cached data and handle different types of events.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::module_bindings::{Player, Message, EventContext, Event, DbView};\n\n// Placeholder for where other callbacks are registered\nfn table_update_callbacks(conn: &DbConnection) {\n    conn.db().player().on_insert(handle_player_insert);\n    conn.db().player().on_update(handle_player_update);\n    conn.db().message().on_insert(handle_message_insert);\n}\n\nfn handle_player_insert(ctx: &EventContext, player: &Player) {\n    // Only react to updates caused by reducers, not initial subscription load\n    if let Event::Reducer(_) = ctx.event {\n       println!(\"Player joined: {}\", player.name.as_deref().unwrap_or(\"Unknown\"));\n    }\n}\n\nfn handle_player_update(ctx: &EventContext, old: &Player, new: &Player) {\n    if old.name != new.name {\n        println!(\"Player renamed: {} -> {}\", \n            old.name.as_deref().unwrap_or(\"??\"), \n            new.name.as_deref().unwrap_or(\"??\")\n        );\n    }\n    // ... handle other changes like online status ...\n}\n\nfn handle_message_insert(ctx: &EventContext, message: &Message) {\n    if let Event::Reducer(_) = ctx.event {\n        // Find sender name from cache\n        let sender_name = ctx.db().player().identity().find(&message.sender)\n            .map_or(\"Unknown\".to_string(), |p| p.name.clone().unwrap_or(\"??\".to_string()));\n        println!(\"{}: {}\", sender_name, message.text);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main function for client application\nDESCRIPTION: Defines the Main function that initializes authentication, connects to the database, registers callbacks, and manages threads for processing and user input.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main()\n{\n    // Initialize the `AuthToken` module\n    AuthToken.Init(\".spacetime_csharp_quickstart\");\n    // Builds and connects to the database\n    DbConnection? conn = null;\n    conn = ConnectToDB();\n    // Registers to run in response to database events.\n    RegisterCallbacks(conn);\n    // Declare a threadsafe cancel token to cancel the process loop\n    var cancellationTokenSource = new CancellationTokenSource();\n    // Spawn a thread to call process updates and process commands\n    var thread = new Thread(() => ProcessThread(conn, cancellationTokenSource.Token));\n    thread.Start();\n    // Handles CLI input\n    InputLoop();\n    // This signals the ProcessThread to stop\n    cancellationTokenSource.Cancel();\n    thread.Join();\n}\n```\n\n----------------------------------------\n\nTITLE: Database Connection Builder Finalization\nDESCRIPTION: Method to finalize the connection configuration and attempt to establish the connection.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnectionBuilder {\n    fn build(self) -> Result<DbConnection, spacetimedb_sdk::Error>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Database via ReducerEventContext in C#\nDESCRIPTION: Shows how ReducerEventContext provides access to remote database tables through the Db property.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nclass ReducerEventContext {\n    public RemoteTables Db;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Reducers via ReducerEventContext in C#\nDESCRIPTION: Shows how ReducerEventContext provides access to remote module reducers through the Reducers property.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nclass ReducerEventContext {\n    public RemoteReducers Reducers;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Reducers in SpacetimeDB C#\nDESCRIPTION: Code example showing how to implement the three lifecycle reducers in SpacetimeDB C# modules: Init (called when the module is first loaded), ClientConnected (called when a client connects), and ClientDisconnected (called when a client disconnects).\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer(ReducerKind.Init)]\npublic static void Init(ReducerContext ctx)\n{\n    // Run when the module is first loaded.\n}\n\n[Reducer(ReducerKind.ClientConnected)]\npublic static void ClientConnected(ReducerContext ctx)\n{\n    // Called when a client connects.\n}\n\n[Reducer(ReducerKind.ClientDisconnected)]\npublic static void ClientDisconnected(ReducerContext ctx)\n{\n    // Called when a client connects.\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All Tables in SpacetimeDB C#\nDESCRIPTION: Demonstrates how to modify the `OnConnected` function to subscribe to all tables in the database using `SubscribeToAllTables`. It sets up an `OnApplied` callback to manage subscription applications and potential errors during the process.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our `OnConnect` callback: save our credentials to a file.\nvoid OnConnected(DbConnection conn, Identity identity, string authToken)\n{\n    local_identity = identity;\n    AuthToken.SaveToken(authToken);\n\n    conn.SubscriptionBuilder()\n        .OnApplied(OnSubscriptionApplied)\n        .SubscribeToAllTables();\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Subscriptions by Lifetime in C#\nDESCRIPTION: C# implementation showing how to organize subscriptions based on their lifetime. Demonstrates separation of global and level-specific subscriptions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar conn = ConnectToDB();\n\n// Never need to unsubscribe from global subscriptions\nvar globalSubscriptions = conn\n    .SubscriptionBuilder()\n    .Subscribe(new string[] {\n        // Global messages the client should always display\n        \"SELECT * FROM announcements\",\n        // A description of rewards for in-game achievements\n        \"SELECT * FROM badges\",\n    });\n\n// May unsubscribe to shop_items as player advances\nvar shopSubscription = conn\n    .SubscriptionBuilder()\n    .Subscribe(new string[] {\n        \"SELECT * FROM shop_items WHERE required_level <= 5\"\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Filter Method with Indexed Columns in SpacetimeDB C#\nDESCRIPTION: Demonstrates the Filter method which returns an iterator over rows matching specified column values. It supports filtering by exact values or ranges using Bound<T> for partial or complete column sets in an index.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic IEnumerable<Row> Filter(Column1 bound);\npublic IEnumerable<Row> Filter(Bound<Column1> bound);\npublic IEnumerable<Row> Filter((Column1, Column2) bound);\npublic IEnumerable<Row> Filter((Column1, Bound<Column2>) bound);\npublic IEnumerable<Row> Filter((Column1, Column2, Column3) bound);\npublic IEnumerable<Row> Filter((Column1, Column2, Bound<Column3>) bound);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Input Reducer in Rust\nDESCRIPTION: A SpacetimeDB reducer that handles player movement input. It updates the direction and speed of all circles owned by the player based on input direction. The function ensures players can only move their own circles through authentication.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer]\npub fn update_player_input(ctx: &ReducerContext, direction: DbVector2) -> Result<(), String> {\n    let player = ctx\n        .db\n        .player()\n        .identity()\n        .find(&ctx.sender)\n        .ok_or(\"Player not found\")?;\n    for mut circle in ctx.db.circle().player_id().filter(&player.player_id) {\n        circle.direction = direction.normalized();\n        circle.speed = direction.magnitude().clamp(0.0, 1.0);\n        ctx.db.circle().entity_id().update(circle);\n    }\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Maincloud from TypeScript Client SDK\nDESCRIPTION: TypeScript code snippet to create a DbConnection builder and set the URI for connecting to a SpacetimeDB module deployed on Maincloud.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/maincloud.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nDbConnection.builder()\n    .withUri('https://maincloud.spacetimedb.com')\n```\n\n----------------------------------------\n\nTITLE: Updating GameManager for Maincloud Connection in C#\nDESCRIPTION: This C# code snippet shows how to update the GameManager class to connect to the Maincloud server. It includes constants for the server URL and module name, and a Start method that clears PlayerPrefs before initialization.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nconst string SERVER_URL = \"https://maincloud.spacetimedb.com\";\nconst string MODULE_NAME = \"<your module name>\";\n\n...\n\nprivate void Start()\n{\n    // Clear cached connection data to ensure proper connection\n    PlayerPrefs.DeleteAll();\n    \n    // Continue with initialization\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Database Tables in SpacetimeDB\nDESCRIPTION: Shows how to subscribe to database tables using SQL queries. This code demonstrates setting up a subscription builder with callbacks for successful subscription and error handling, and subscribing to multiple tables with specific queries.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB.Types; // For SubscriptionEventContext, ErrorContext\nusing System.Linq;\n\n// In ClientManager or similar class...\nprivate void SubscribeToTables(DbConnection conn)\n{\n    Console.WriteLine(\"Subscribing to tables...\");\n    conn.SubscriptionBuilder()\n        .OnApplied(OnSubscriptionApplied)\n        .OnError((errCtx, err) => {\n            Console.WriteLine($\"Subscription failed: {err.Message}\");\n        })\n        // Example: Subscribe to all rows from 'Player' and 'Message' tables\n        .Subscribe(new string[] { \"SELECT * FROM Player\", \"SELECT * FROM Message\" });\n}\n\nprivate void OnSubscriptionApplied(SubscriptionEventContext ctx)\n{\n    Console.WriteLine(\"Subscription applied! Initial data received.\");\n    // Example: Print initial messages sorted by time\n    var messages = ctx.Db.Message.Iter().ToList();\n    messages.Sort((a, b) => a.Sent.CompareTo(b.Sent));\n    foreach (var msg in messages)\n    {\n        // PrintMessage(ctx.Db, msg); // Assuming a PrintMessage helper\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom React Hooks for Tables in TypeScript\nDESCRIPTION: These TypeScript functions define custom React hooks to manage real-time updates for messages and users from SpacetimeDB, updating the local state whenever changes occur.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMessages(conn: DbConnection | null): Message[] {\n  const [messages, setMessages] = useState<Message[]>([]);\n\n  useEffect(() => {\n    if (!conn) return;\n    const onInsert = (_ctx: EventContext, message: Message) => {\n      setMessages(prev => [...prev, message]);\n    };\n    conn.db.message.onInsert(onInsert);\n\n    const onDelete = (_ctx: EventContext, message: Message) => {\n      setMessages(prev =>\n        prev.filter(\n          m =>\n            m.text !== message.text &&\n            m.sent !== message.sent &&\n            m.sender !== message.sender\n        )\n      );\n    };\n    conn.db.message.onDelete(onDelete);\n\n    return () => {\n      conn.db.message.removeOnInsert(onInsert);\n      conn.db.message.removeOnDelete(onDelete);\n    };\n  }, [conn]);\n\n  return messages;\n}\n\nfunction useUsers(conn: DbConnection | null): Map<string, User> {\n  const [users, setUsers] = useState<Map<string, User>>(new Map());\n\n  useEffect(() => {\n    if (!conn) return;\n    const onInsert = (_ctx: EventContext, user: User) => {\n      setUsers(prev => new Map(prev.set(user.identity.toHexString(), user)));\n    };\n    conn.db.user.onInsert(onInsert);\n\n    const onUpdate = (_ctx: EventContext, oldUser: User, newUser: User) => {\n      setUsers(prev => {\n        prev.delete(oldUser.identity.toHexString());\n        return new Map(prev.set(newUser.identity.toHexString(), newUser));\n      });\n    };\n    conn.db.user.onUpdate(onUpdate);\n\n    const onDelete = (_ctx: EventContext, user: User) => {\n      setUsers(prev => {\n        prev.delete(user.identity.toHexString());\n        return new Map(prev);\n      });\n    };\n    conn.db.user.onDelete(onDelete);\n\n    return () => {\n      conn.db.user.removeOnInsert(onInsert);\n      conn.db.user.removeOnUpdate(onUpdate);\n      conn.db.user.removeOnDelete(onDelete);\n    };\n  }, [conn]);\n\n  return users;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in SpacetimeDB Rust Modules\nDESCRIPTION: Demonstrates how to define custom types for SpacetimeDB using Rust, including structs and enums with the SpacetimeType derive macro. Shows cross-language naming control and type aliases for database tables and reducer interfaces.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{SpacetimeType, Identity, Timestamp};\n\n// Example Struct\n#[derive(SpacetimeType, Clone, Debug, PartialEq)]\npub struct Position {\n    pub x: i32,\n    pub y: i32,\n}\n\n// Example Enum\n#[derive(SpacetimeType, Clone, Debug, PartialEq)]\npub enum PlayerStatus {\n    Idle,\n    Walking(Position),\n    Fighting(Identity), // Store the identity of the opponent\n}\n\n// Example Enum with Cross-Language Naming Control\n// This enum will appear as `Game.ItemType` in C# bindings.\n#[derive(SpacetimeType, Clone, Debug, PartialEq)]\n#[sats(name = \"Game.ItemType\")]\npub enum ItemType {\n    Weapon,\n    Armor,\n    // This specific variant will be `ConsumableItem` in C# bindings.\n    #[sats(name = \"ConsumableItem\")]\n    Potion,\n}\n\n// Example Type Alias\npub type PlayerScore = u32;\n\n// Advanced: For types with lifetimes or custom binary representations,\n// you can derive `spacetimedb::Deserialize` and use the `bsatn` crate\n// (provided by spacetimedb::spacetimedb_lib) for manual deserialization if needed.\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Validation in SpacetimeDB C# Module\nDESCRIPTION: A helper function to validate message text, currently checking for non-empty messages.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static string ValidateMessage(string text)\n{\n    if (string.IsNullOrEmpty(text))\n    {\n        throw new ArgumentException(\"Messages must not be empty\");\n    }\n    return text;\n}\n```\n\n----------------------------------------\n\nTITLE: ReducerEvent Struct Definition in Rust\nDESCRIPTION: Defines the ReducerEvent struct which contains metadata about a reducer run, including timestamp, status, caller information, energy consumption, and the specific reducer that was executed.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_41\n\nLANGUAGE: rust\nCODE:\n```\nstruct spacetimedb_sdk::ReducerEvent<R> {\n    /// The time at which the reducer was invoked.\n    timestamp: SystemTime,\n\n    /// Whether the reducer committed, was aborted due to insufficient energy, or failed with an error message.\n    status: Status,\n\n    /// The `Identity` of the SpacetimeDB actor which invoked the reducer.\n    caller_identity: Identity,\n\n    /// The `ConnectionId` of the SpacetimeDB actor which invoked the reducer,\n    /// or `None` for scheduled reducers.\n    caller_connection_id: Option<ConnectionId>,\n\n    /// The amount of energy consumed by the reducer run, in eV.\n    /// (Not literal eV, but our SpacetimeDB energy unit eV.)\n    ///\n    /// May be `None` if the module is configured not to broadcast energy consumed.\n    energy_consumed: Option<u128>,\n\n    /// The `Reducer` enum defined by the `module_bindings`, which encodes which reducer ran and its arguments.\n    reducer: R,\n\n    // ...private fields\n}\n```\n\n----------------------------------------\n\nTITLE: Print New Messages with Spacetime in Rust\nDESCRIPTION: This Rust snippet defines the `on_message_inserted` callback to print new messages received, checking the event type to ensure it is from a reducer. The sender's name or identity is fetched using the `identity.find(..)` method.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n/// Our `Message::on_insert` callback: print new messages.\nfn on_message_inserted(ctx: &EventContext, message: &Message) {\n    if let Event::Reducer(_) = ctx.event {\n        print_message(ctx, message)\n    }\n}\n\nfn print_message(ctx: &impl RemoteDbContext, message: &Message) {\n    let sender = ctx\n        .db()\n        .user()\n        .identity()\n        .find(&message.sender.clone())\n        .map(|u| user_name_or_identity(&u))\n        .unwrap_or_else(|| \"unknown\".to_string());\n    println!(\"{}: {}\", sender, message.text);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Credentials in Rust\nDESCRIPTION: Implements functions to save and load credentials for authenticating with SpacetimeDB, using the credentials::File module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn creds_store() -> credentials::File {\n    credentials::File::new(\"quickstart-chat\")\n}\n\n/// Our `on_connect` callback: save our credentials to a file.\nfn on_connected(_ctx: &DbConnection, _identity: Identity, token: &str) {\n    if let Err(e) = creds_store().save(token) {\n        eprintln!(\"Failed to save credentials: {:?}\", e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnConnected callback to save authentication credentials\nDESCRIPTION: Handles successful connections by saving the authentication token locally and storing the client identity for future reference.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our `OnConnected` callback: save our credentials to a file.\nvoid OnConnected(DbConnection conn, Identity identity, string authToken)\n{\n    local_identity = identity;\n    AuthToken.SaveToken(authToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Subscription Usage in C#\nDESCRIPTION: Demonstrates practical usage of the SubscriptionBuilder in C#, showing how to establish a database connection and register a subscription with callbacks.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Establish a database connection\nvar conn = ConnectToDB();\n\n// Register a subscription with the database\nvar userSubscription = conn\n    .SubscriptionBuilder()\n    .OnApplied((ctx) => { /* handle applied state */ })\n    .OnError((errorCtx, error) => { /* handle error */ })\n    .Subscribe(new string[] { \"SELECT * FROM user\", \"SELECT * FROM message\" });\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Insert Callbacks in SpacetimeDB C#\nDESCRIPTION: These C# snippets define and utilize the `User.OnInsert` callback to notify when users come online. They include a utility function `UserNameOrIdentity` to determine the display name and manage rows inserted into a SpacetimeDB table. The callback triggers only for users who are online.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n/// If the user has no set name, use the first 8 characters from their identity.\nstring UserNameOrIdentity(User user) => user.Name ?? user.Identity.ToString()[..8];\n\n/// Our `User.OnInsert` callback: if the user is online, print a notification.\nvoid User_OnInsert(EventContext ctx, User insertedValue)\n{\n    if (insertedValue.Online)\n    {\n        Console.WriteLine($\"{UserNameOrIdentity(insertedValue)} is online\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription SQL Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for subscription SQL queries in SpacetimeDB. This subset is used for replicating and automatically updating subsets of database rows in real-time.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nSELECT projection FROM relation [ WHERE predicate ]\n```\n\n----------------------------------------\n\nTITLE: Creating EntityController Base Class in C#\nDESCRIPTION: This code defines an abstract EntityController class that serves as a base for CircleController and FoodController. It handles entity spawning, updating, and interpolation of position and scale.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_14\n\nLANGUAGE: cs\nCODE:\n```\nusing SpacetimeDB.Types;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Unity.VisualScripting;\nusing UnityEngine;\n\npublic abstract class EntityController : MonoBehaviour\n{\n\tconst float LERP_DURATION_SEC = 0.1f;\n\n\tprivate static readonly int ShaderColorProperty = Shader.PropertyToID(\"_Color\");\n\n\t[DoNotSerialize] public uint EntityId;\n\n\tprotected float LerpTime;\n\tprotected Vector3 LerpStartPosition;\n\tprotected Vector3 LerpTargetPosition;\n\tprotected Vector3 TargetScale;\n\n\tprotected virtual void Spawn(uint entityId)\n\t{\n\t\tEntityId = entityId;\n\n\t\tvar entity = GameManager.Conn.Db.Entity.EntityId.Find(entityId);\n\t\tLerpStartPosition = LerpTargetPosition = transform.position = (Vector2)entity.Position;\n\t\ttransform.localScale = Vector3.one;\n\t\tTargetScale = MassToScale(entity.Mass);\n\t}\n\n\tpublic void SetColor(Color color)\n\t{\n\t\tGetComponent<SpriteRenderer>().material.SetColor(ShaderColorProperty, color);\n\t}\n\n\tpublic virtual void OnEntityUpdated(Entity newVal)\n\t{\n\t\tLerpTime = 0.0f;\n\t\tLerpStartPosition = transform.position;\n\t\tLerpTargetPosition = (Vector2)newVal.Position;\n\t\tTargetScale = MassToScale(newVal.Mass);\n\t}\n\n\tpublic virtual void OnDelete(EventContext context)\n\t{\n\t\tDestroy(gameObject);\n\t}\n\n\tpublic virtual void Update()\n\t{\n\t\t// Interpolate position and scale\n\t\tLerpTime = Mathf.Min(LerpTime + Time.deltaTime, LERP_DURATION_SEC);\n\t\ttransform.position = Vector3.Lerp(LerpStartPosition, LerpTargetPosition, LerpTime / LERP_DURATION_SEC);\n\t\ttransform.localScale = Vector3.Lerp(transform.localScale, TargetScale, Time.deltaTime * 8);\n\t}\n\n\tpublic static Vector3 MassToScale(uint mass)\n\t{\n\t\tvar diameter = MassToDiameter(mass);\n\t\treturn new Vector3(diameter, diameter, 1);\n\t}\n\n\tpublic static float MassToRadius(uint mass) => Mathf.Sqrt(mass);\n\tpublic static float MassToDiameter(uint mass) => MassToRadius(mass) * 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing User Input in Rust for SpacetimeDB Chat Client\nDESCRIPTION: This function reads user input from stdin, processes commands to set names or send messages, and invokes the appropriate reducers. It handles the main interaction loop for the chat client.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nfn user_input_loop(ctx: &DbConnection) {\n    for line in std::io::stdin().lines() {\n        let Ok(line) = line else {\n            panic!(\"Failed to read from stdin.\");\n        };\n        if let Some(name) = line.strip_prefix(\"/name \") {\n            ctx.reducers.set_name(name.to_string()).unwrap();\n        } else {\n            ctx.reducers.send_message(line).unwrap();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Types with SpacetimeDB.Type Attribute in C#\nDESCRIPTION: This snippet shows how to use the [SpacetimeDB.Type] attribute to make custom types self-describing for use in tables and reducers. It includes examples of structs, tagged enums, and a table using these custom types.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\npublic static partial class Module {\n\n    [Type]\n    public partial struct Coord {\n        public int X;\n        public int Y;\n    }\n\n    [Type]\n    public partial struct TankData {\n        public int Ammo;\n        public int LeftTreadHealth;\n        public int RightTreadHealth;\n    }\n\n    [Type]\n    public partial struct TransportData {\n        public int TroopCount;\n    }\n\n    // A type that could be either the data for a Tank or the data for a Transport.\n    // See SpacetimeDB.TaggedEnum docs.\n    [Type]\n    public partial record VehicleData : TaggedEnum<(TankData Tank, TransportData Transport)> {}\n\n    [Table(Name = \"vehicle\")]\n    public partial struct Vehicle {\n        [PrimaryKey]\n        [AutoInc]\n        public uint Id;\n        public Coord Coord;\n        public VehicleData Data;\n    }\n\n    [SpacetimeDB.Reducer]\n    public static void InsertVehicle(ReducerContext ctx, Coord Coord, VehicleData Data) {\n        ctx.Db.vehicle.Insert(new Vehicle { Id = 0, Coord = Coord, Data = Data });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering callbacks for database events\nDESCRIPTION: Sets up event handlers for database operations including user insertion/updates, message insertion, and reducer responses for name setting and message sending.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n/// Register all the callbacks our app will use to respond to database events.\nvoid RegisterCallbacks(DbConnection conn)\n{\n    conn.Db.User.OnInsert += User_OnInsert;\n    conn.Db.User.OnUpdate += User_OnUpdate;\n\n    conn.Db.Message.OnInsert += Message_OnInsert;\n\n    conn.Reducers.OnSetName += Reducer_OnSetNameEvent;\n    conn.Reducers.OnSendMessage += Reducer_OnSendMessageEvent;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-incrementing User IDs in SpacetimeDB\nDESCRIPTION: This example demonstrates how to create a table with an auto-incrementing ID field in SpacetimeDB using the #[auto_inc] attribute. The code includes a reducer function that inserts multiple users and displays the auto-generated IDs.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/appendix.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::table(name = users, public)]\nstruct Users {\n    #[auto_inc]\n    user_id: u64,\n    name: String,\n}\n\n#[spacetimedb::reducer]\npub fn insert_user(ctx: &ReducerContext, count: u8) {\n    for i in 0..count {\n        let name = format!(\"User {}\", i);\n        ctx.db.users().insert(Users { user_id: 0, name });\n    }\n    // Query the table to see the effect of the `[auto_inc]` attribute:\n    for user in ctx.db.users().iter() {\n        log::info!(\"User: {:?}\", user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Character Table Schema in Rust\nDESCRIPTION: Defines the initial Character table structure with basic player attributes including player_id, nickname, level and class. Also includes a Class enum definition.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/how-to/incremental-migrations.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::table(name = character, public)]\npub struct Character {\n    #[primary_key]\n    player_id: Identity,\n    #[unique]\n    nickname: String,\n    level: u32,\n    class: Class,\n}\n\n#[derive(SpacetimeType, Debug, Copy, Clone)]\npub enum Class {\n    Fighter,\n    Caster,\n    Medic,\n}\n```\n\n----------------------------------------\n\nTITLE: EventContext db Field\nDESCRIPTION: Defines the `db` field within the `EventContext` struct. The `db` field of the context provides access to the subscribed view of the remote database's tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\n\"struct EventContext {\\n    pub db: RemoteTables,\n    /* other members */\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Controller in Unity C#\nDESCRIPTION: This script controls the camera movement to follow the player and adjust the zoom based on the player's mass and number of circles. It also handles camera positioning when the player is not connected.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class CameraController : MonoBehaviour\n{\n    public static float WorldSize = 0.0f;\n\n\tprivate void LateUpdate()\n    {\n        var arenaCenterTransform = new Vector3(WorldSize / 2, WorldSize / 2, -10.0f);\n        if (PlayerController.Local == null || !GameManager.IsConnected())\n        {\n            // Set the camera to be in middle of the arena if we are not connected or \n            // there is no local player\n            transform.position = arenaCenterTransform;\n            return;\n        }\n\n        var centerOfMass = PlayerController.Local.CenterOfMass();\n        if (centerOfMass.HasValue)\n        {\n            // Set the camera to be the center of mass of the local player\n            // if the local player has one\n            transform.position = new Vector3\n            {\n                x = centerOfMass.Value.x,\n                y = centerOfMass.Value.y,\n                z = transform.position.z\n            };\n        } else {\n            transform.position = arenaCenterTransform;\n        }\n\n\t\tfloat targetCameraSize = CalculateCameraSize(PlayerController.Local);\n\t\tCamera.main.orthographicSize = Mathf.Lerp(Camera.main.orthographicSize, targetCameraSize, Time.deltaTime * 2);\n\t}\n\n\tprivate float CalculateCameraSize(PlayerController player)\n\t{\n\t\treturn 50f + //Base size\n            Mathf.Min(50, player.TotalMass() / 5) + //Increase camera size with mass\n            Mathf.Min(player.NumberOfOwnedCircles - 1, 1) * 30; //Zoom out when player splits\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Row Operations in SpacetimeDB - Rust Implementation\nDESCRIPTION: Core functions for inserting and deleting rows in SpacetimeDB tables. Includes _insert for adding new rows and _delete_by_col_eq for removing rows based on column equality.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/webassembly-abi/index.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn _insert(\n    table_id: u32,\n    row: *mut u8,\n    row_len: usize\n) -> u16;\n\nfn _delete_by_col_eq(\n    table_id: u32,\n    col_id: u32,\n    value: *const u8,\n    value_len: usize,\n    out: *mut u32\n) -> u16;\n```\n\n----------------------------------------\n\nTITLE: Reducer Scheduling Functions for SpacetimeDB Module ABI\nDESCRIPTION: Defines functions for scheduling and canceling reducers. _schedule_reducer allows scheduling a reducer for asynchronous execution at a specified time, while _cancel_reducer enables canceling a scheduled reducer using its ID.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/webassembly-abi/index.md#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// Schedules a reducer to be called asynchronously at `time`.\n///\n/// The reducer is named as the valid UTF-8 slice `(name, name_len)`,\n/// and is passed the slice `(args, args_len)` as its argument.\n///\n/// A generated schedule id is assigned to the reducer.\n/// This id is written to the pointer `out`.\n///\n/// Errors on any memory access violations,\n/// if `(name, name_len)` does not point to valid UTF-8,\n/// or if the `time` delay exceeds `64^6 - 1` milliseconds from now.\nfn _schedule_reducer(\n    // A pointer to a buffer\n    // with a valid UTF-8 string of `name_len` many bytes.\n    name: *const u8,\n    // The number of bytes in the `name` buffer.\n    name_len: usize,\n    // A pointer to a byte buffer of `args_len` many bytes.\n    args: *const u8,\n    // The number of bytes in the `args` buffer.\n    args_len: usize,\n    // When to call the reducer.\n    time: u64,\n    // The schedule ID is written to this out pointer on a successful call.\n    out: *mut u64,\n);\n\n/// Unschedules a reducer\n/// using the same `id` generated as when it was scheduled.\n///\n/// This assumes that the reducer hasn't already been executed.\nfn _cancel_reducer(id: u64);\n```\n\n----------------------------------------\n\nTITLE: Notify User Updates with Spacetime in Rust\nDESCRIPTION: This Rust snippet implements an `on_update` callback to notify on user updates. It prints messages when a user's name or online status changes. The `user_name_or_identity` function is used to retrieve the name or identity.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n/// Our `User::on_update` callback:\n/// print a notification about name and status changes.\nfn on_user_updated(_ctx: &EventContext, old: &User, new: &User) {\n    if old.name != new.name {\n        println!(\n            \"User {} renamed to {}.\",\n            user_name_or_identity(old),\n            user_name_or_identity(new)\n        );\n    }\n    if old.online && !new.online {\n        println!(\"User {} disconnected.\", user_name_or_identity(new));\n    }\n    if !old.online && new.online {\n        println!(\"User {} connected.\", user_name_or_identity(new));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GameManager Database Synchronization\nDESCRIPTION: Extensions to the GameManager class for handling SpacetimeDB connections and entity synchronization. Includes event handlers for database updates and entity management.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n    public static DbConnection Conn { get; private set; }\n\n    public static Dictionary<uint, EntityController> Entities = new Dictionary<uint, EntityController>();\n\tpublic static Dictionary<uint, PlayerController> Players = new Dictionary<uint, PlayerController>();\n```\n\nLANGUAGE: C#\nCODE:\n```\n    void HandleConnect(DbConnection conn, Identity identity, string token)\n    {\n        Debug.Log(\"Connected.\");\n        AuthToken.SaveToken(token);\n        LocalIdentity = identity;\n\n        conn.Db.Circle.OnInsert += CircleOnInsert;\n        conn.Db.Entity.OnUpdate += EntityOnUpdate;\n        conn.Db.Entity.OnDelete += EntityOnDelete;\n        conn.Db.Food.OnInsert += FoodOnInsert;\n        conn.Db.Player.OnInsert += PlayerOnInsert;\n        conn.Db.Player.OnDelete += PlayerOnDelete;\n\n        OnConnected?.Invoke();\n\n        // Request all tables\n        Conn.SubscriptionBuilder()\n            .OnApplied(HandleSubscriptionApplied)\n            .SubscribeToAllTables();\n    }\n```\n\nLANGUAGE: C#\nCODE:\n```\n    private static void CircleOnInsert(EventContext context, Circle insertedValue)\n    {\n        var player = GetOrCreatePlayer(insertedValue.PlayerId);\n        var entityController = PrefabManager.SpawnCircle(insertedValue, player);\n        Entities.Add(insertedValue.EntityId, entityController);\n    }\n\n    private static void EntityOnUpdate(EventContext context, Entity oldEntity, Entity newEntity)\n    {\n        if (!Entities.TryGetValue(newEntity.EntityId, out var entityController))\n        {\n            return;\n        }\n        entityController.OnEntityUpdated(newEntity);\n    }\n\n    private static void EntityOnDelete(EventContext context, Entity oldEntity)\n    {\n        if (Entities.Remove(oldEntity.EntityId, out var entityController))\n        {\n            entityController.OnDelete(context);\n        }\n    }\n\n    private static void FoodOnInsert(EventContext context, Food insertedValue)\n    {\n        var entityController = PrefabManager.SpawnFood(insertedValue);\n        Entities.Add(insertedValue.EntityId, entityController);\n    }\n\n    private static void PlayerOnInsert(EventContext context, Player insertedPlayer)\n    {\n        GetOrCreatePlayer(insertedPlayer.PlayerId);\n    }\n\n    private static void PlayerOnDelete(EventContext context, Player deletedvalue)\n    {\n        if (Players.Remove(deletedvalue.PlayerId, out var playerController))\n        {\n            GameObject.Destroy(playerController.gameObject);\n        }\n    }\n\n    private static PlayerController GetOrCreatePlayer(uint playerId)\n    {\n        if (!Players.TryGetValue(playerId, out var playerController))\n        {\n            var player = Conn.Db.Player.PlayerId.Find(playerId);\n            playerController = PrefabManager.SpawnPlayer(player);\n            Players.Add(playerId, playerController);\n        }\n\n        return playerController;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Builder Callbacks\nDESCRIPTION: Implementation of subscription builder pattern with callbacks for handling subscription events and errors.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IRemoteDbContext\n{\n    public SubscriptionBuilder SubscriptionBuilder();\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionBuilder\n{\n    public SubscriptionBuilder OnApplied(Action<SubscriptionEventContext> callback);\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionBuilder\n{\n    public SubscriptionBuilder OnError(Action<ErrorContext, Exception> callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Scheduled Reducers in C# with SpacetimeDB\nDESCRIPTION: This snippet shows how to restrict a scheduled reducer to only be called by the scheduler and not by clients. It checks if the caller Identity is the module itself.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer]\npublic static void SendMessage(ReducerContext ctx, SendMessageSchedule schedule)\n{\n    if (ctx.Sender != ctx.Identity)\n    {\n        throw new Exception(\"Reducer SendMessage may not be invoked by clients, only via scheduling.\");\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Data Subscription Management in SpacetimeDB\nDESCRIPTION: Implements data subscription functionality using the subscription builder pattern. Includes subscription setup, event handling, and error management for table queries.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::module_bindings::{SubscriptionEventContext, ErrorContext};\n\nfn subscribe_to_tables(conn: &DbConnection) {\n    println!(\"Subscribing to tables...\");\n    conn.subscription_builder()\n        .on_applied(on_subscription_applied)\n        .on_error(|err_ctx, err| {\n            eprintln!(\"Subscription failed: {}\", err);\n        })\n        // Example: Subscribe to all rows from 'player' and 'message' tables\n        .subscribe(vec![\"SELECT * FROM player\", \"SELECT * FROM message\"]);\n}\n\nfn on_subscription_applied(ctx: &SubscriptionEventContext) {\n    println!(\"Subscription applied! Initial data received.\");\n    // Example: Print initial messages sorted by time\n    let mut messages: Vec<_> = ctx.db().message().iter().collect();\n    messages.sort_by_key(|m| m.sent);\n    for msg in messages {\n        // print_message(ctx.db(), &msg); // Assuming a print_message helper\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnSubscriptionApplied Callback in C#\nDESCRIPTION: This snippet defines the OnSubscriptionApplied callback and a helper function PrintMessagesInOrder. It handles the initial connection and prints all previously sent messages sorted by timestamp.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our `OnSubscriptionApplied` callback:\n/// sort all past messages and print them in timestamp order.\nvoid OnSubscriptionApplied(SubscriptionEventContext ctx)\n{\n    Console.WriteLine(\"Connected\");\n    PrintMessagesInOrder(ctx.Db);\n}\n\nvoid PrintMessagesInOrder(RemoteTables tables)\n{\n    foreach (Message message in tables.Message.Iter().OrderBy(item => item.Sent))\n    {\n        PrintMessage(tables, message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Management Reducers in Rust\nDESCRIPTION: Implements core character management functionality including character creation, lookup, updates, renaming and leveling up.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/how-to/incremental-migrations.md#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer]\nfn create_character(ctx: &ReducerContext, class: Class, nickname: String) {\n    log::info!(\n        \"Creating new level 1 {class:?} named {nickname}\",\n    );\n    ctx.db.character().insert(Character {\n        player_id: ctx.sender,\n        nickname,\n        level: 1,\n        class,\n    });\n}\n\nfn find_character_for_player(ctx: &ReducerContext) -> Character {\n    ctx.db\n        .character()\n        .player_id()\n        .find(ctx.sender)\n        .expect(\"Player has not created a character\")\n}\n\nfn update_character(ctx: &ReducerContext, character: Character) {\n    ctx.db.character().player_id().update(character);\n}\n\n#[spacetimedb::reducer]\nfn rename_character(ctx: &ReducerContext, new_name: String) {\n    let character = find_character_for_player(ctx);\n    log::info!(\n        \"Renaming {} to {}\",\n        character.nickname,\n        new_name,\n    );\n    update_character(\n        ctx,\n        Character {\n            nickname: new_name,\n            ..character\n        },\n    );\n}\n\n#[spacetimedb::reducer]\nfn level_up_character(ctx: &ReducerContext) {\n    let character = find_character_for_player(ctx);\n    log::info!(\n        \"Leveling up {} from {} to {}\",\n        character.nickname,\n        character.level,\n        character.level + 1,\n    );\n    update_character(\n        ctx,\n        Character {\n            level: character.level + 1,\n            ..character\n        },\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Tables in C# for SpacetimeDB\nDESCRIPTION: Definition of game entity tables in C# for SpacetimeDB, including the base Entity table and specialized Circle and Food tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Table(Name = \"entity\", Public = true)]\npublic partial struct Entity\n{\n\t[PrimaryKey, AutoInc] \n\tpublic uint entity_id;\n\tpublic DbVector2 position;\n\tpublic uint mass;\n}\n\n[Table(Name = \"circle\", Public = true)]\npublic partial struct Circle\n{\n    [PrimaryKey]\n    public uint entity_id;\n    [SpacetimeDB.Index.BTree]\n    public uint player_id;\n    public DbVector2 direction;\n    public float speed;\n    public SpacetimeDB.Timestamp last_split_time;\n}\n\n[Table(Name = \"food\", Public = true)]\npublic partial struct Food\n{\n\t[PrimaryKey]\n\tpublic uint entity_id;\n}\n```\n\n----------------------------------------\n\nTITLE: EventContext Reducers Field Implementation\nDESCRIPTION: Definition of the reducers field that provides access to remote module reducers.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventContext {\n  public reducers: RemoteReducers\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector2 Math Utilities in Rust\nDESCRIPTION: A comprehensive math library for 2D vector operations to help with collision calculations and movement in a SpacetimeDB game. The DbVector2 struct provides vector arithmetic, normalization, and magnitude calculations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::SpacetimeType;\n\n// This allows us to store 2D points in tables.\n#[derive(SpacetimeType, Debug, Clone, Copy)]\npub struct DbVector2 {\n    pub x: f32,\n    pub y: f32,\n}\n\nimpl std::ops::Add<&DbVector2> for DbVector2 {\n    type Output = DbVector2;\n\n    fn add(self, other: &DbVector2) -> DbVector2 {\n        DbVector2 {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\n\nimpl std::ops::Add<DbVector2> for DbVector2 {\n    type Output = DbVector2;\n\n    fn add(self, other: DbVector2) -> DbVector2 {\n        DbVector2 {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\n\nimpl std::ops::AddAssign<DbVector2> for DbVector2 {\n    fn add_assign(&mut self, rhs: DbVector2) {\n        self.x += rhs.x;\n        self.y += rhs.y;\n    }\n}\n\nimpl std::iter::Sum<DbVector2> for DbVector2 {\n    fn sum<I: Iterator<Item = DbVector2>>(iter: I) -> Self {\n        let mut r = DbVector2::new(0.0, 0.0);\n        for val in iter {\n            r += val;\n        }\n        r\n    }\n}\n\nimpl std::ops::Sub<&DbVector2> for DbVector2 {\n    type Output = DbVector2;\n\n    fn sub(self, other: &DbVector2) -> DbVector2 {\n        DbVector2 {\n            x: self.x - other.x,\n            y: self.y - other.y,\n        }\n    }\n}\n\nimpl std::ops::Sub<DbVector2> for DbVector2 {\n    type Output = DbVector2;\n\n    fn sub(self, other: DbVector2) -> DbVector2 {\n        DbVector2 {\n            x: self.x - other.x,\n            y: self.y - other.y,\n        }\n    }\n}\n\nimpl std::ops::SubAssign<DbVector2> for DbVector2 {\n    fn sub_assign(&mut self, rhs: DbVector2) {\n        self.x -= rhs.x;\n        self.y -= rhs.y;\n    }\n}\n\nimpl std::ops::Mul<f32> for DbVector2 {\n    type Output = DbVector2;\n\n    fn mul(self, other: f32) -> DbVector2 {\n        DbVector2 {\n            x: self.x * other,\n            y: self.y * other,\n        }\n    }\n}\n\nimpl std::ops::Div<f32> for DbVector2 {\n    type Output = DbVector2;\n\n    fn div(self, other: f32) -> DbVector2 {\n        if other != 0.0 {\n            DbVector2 {\n                x: self.x / other,\n                y: self.y / other,\n            }\n        } else {\n            DbVector2 { x: 0.0, y: 0.0 }\n        }\n    }\n}\n\nimpl DbVector2 {\n    pub fn new(x: f32, y: f32) -> Self {\n        Self { x, y }\n    }\n\n    pub fn sqr_magnitude(&self) -> f32 {\n        self.x * self.x + self.y * self.y\n    }\n\n    pub fn magnitude(&self) -> f32 {\n        (self.x * self.x + self.y * self.y).sqrt()\n    }\n\n    pub fn normalized(self) -> DbVector2 {\n        self / self.magnitude()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Reducer Failures with Spacetime in Rust\nDESCRIPTION: This snippet registers reducer callbacks to handle and print warnings if a reducer operation fails. It specifically defines functions for `set_name` and `send_message` reducers.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n/// Our `on_set_name` callback: print a warning if the reducer failed.\nfn on_name_set(ctx: &ReducerEventContext, name: &String) {\n    if let Status::Failed(err) = &ctx.event.status {\n        eprintln!(\"Failed to change name to {:?}: {}\", name, err);\n    }\n}\n\n/// Our `on_send_message` callback: print a warning if the reducer failed.\nfn on_message_sent(ctx: &ReducerEventContext, text: &String) {\n    if let Status::Failed(err) = &ctx.event.status {\n        eprintln!(\"Failed to send message {:?}: {}\", text, err);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling sendMessage Reducer in TypeScript React Component\nDESCRIPTION: Modifies the onMessageSubmit callback to call the sendMessage reducer from the SpacetimeDB connection. This function is called when submitting a new message in the chat application.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst onMessageSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n  setNewMessage(\"\");\n  conn.reducers.sendMessage(newMessage);\n};\n```\n\n----------------------------------------\n\nTITLE: React Chat Application Component\nDESCRIPTION: Main React component implementing a chat interface with profile management, message display, and message submission functionality using TypeScript.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\n\nexport type PrettyMessage = {\n  senderName: string;\n  text: string;\n};\n\nfunction App() {\n  const [newName, setNewName] = useState('');\n  const [settingName, setSettingName] = useState(false);\n  const [systemMessage, setSystemMessage] = useState('');\n  const [newMessage, setNewMessage] = useState('');\n\n  const prettyMessages: PrettyMessage[] = [];\n\n  const name = '';\n\n  const onSubmitNewName = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setSettingName(false);\n    // TODO: Call `setName` reducer\n  };\n\n  const onMessageSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setNewMessage('');\n    // TODO: Call `sendMessage` reducer\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"profile\">\n        <h1>Profile</h1>\n        {!settingName ? (\n          <>\n            <p>{name}</p>\n            <button\n              onClick={() => {\n                setSettingName(true);\n                setNewName(name);\n              }}\n            >\n              Edit Name\n            </button>\n          </>\n        ) : (\n          <form onSubmit={onSubmitNewName}>\n            <input\n              type=\"text\"\n              value={newName}\n              onChange={e => setNewName(e.target.value)}\n            />\n            <button type=\"submit\">Submit</button>\n          </form>\n        )}\n      </div>\n      <div className=\"message\">\n        <h1>Messages</h1>\n        {prettyMessages.length < 1 && <p>No messages</p>}\n        <div>\n          {prettyMessages.map((message, key) => (\n            <div key={key}>\n              <p>\n                <b>{message.senderName}</b>\n              </p>\n              <p>{message.text}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"system\" style={{ whiteSpace: 'pre-wrap' }}>\n        <h1>System</h1>\n        <div>\n          <p>{systemMessage}</p>\n        </div>\n      </div>\n      <div className=\"new-message\">\n        <form\n          onSubmit={onMessageSubmit}\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            width: '50%',\n            margin: '0 auto',\n          }}\n        >\n          <h3>New Message</h3>\n          <textarea\n            value={newMessage}\n            onChange={e => setNewMessage(e.target.value)}\n          ></textarea>\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating INSERT Statement Usage\nDESCRIPTION: Provides examples of using the INSERT statement to add single and multiple rows to a table.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n-- Inserting one row\nINSERT INTO Inventory (item_id, item_name) VALUES (1, 'health1');\n\n-- Inserting two rows\nINSERT INTO Inventory (item_id, item_name) VALUES (1, 'health1'), (2, 'health2');\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB Server Module Overview - Rust Version\nDESCRIPTION: Summary of concepts learned in the tutorial for Rust implementation, including module configuration, table management, reducers, and physics simulation.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nSo far you've learned how to configure a new Unity project to work with SpacetimeDB, how to develop, build, and publish a SpacetimeDB server module. Within the module, you've learned how to create tables, update tables, and write reducers. You've learned about special reducers like `client_connected` and `init` and how to created scheduled reducers. You learned how we can used scheduled reducers to implement a physics simulation right within your module.\n```\n\n----------------------------------------\n\nTITLE: Defining count Method in TableHandle in TypeScript\nDESCRIPTION: Defines the `count` method for the `TableHandle` class, which returns the number of rows in the client cache that match the subscribed query. This is useful for understanding the dataset size.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nclass TableHandle {\n  public count(): number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a User Table with Unique Identity in C#\nDESCRIPTION: Definition of a User table with a unique Identity field that can be used for lookup operations. The table is marked as public to make it accessible to clients.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\n[Table(Name = \"User\", Public = true)]\npublic partial class User\n{\n    [Unique] // Or [PrimaryKey]\n    public Identity Identity;\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SetName Reducer in SpacetimeDB C# Module\nDESCRIPTION: Creating a reducer to allow users to set their names, including validation and database update logic.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer]\npublic static void SetName(ReducerContext ctx, string name)\n{\n    name = ValidateName(name);\n\n    var user = ctx.Db.user.Identity.Find(ctx.Sender);\n    if (user is not null)\n    {\n        user.Name = name;\n        ctx.Db.user.Identity.Update(user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ReducerEventContext DB Field for Client Cache Access\nDESCRIPTION: Defines the db field in the ReducerEventContext struct which provides access to the subscribed view of the remote database's tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_47\n\nLANGUAGE: rust\nCODE:\n```\nstruct ReducerEventContext {\n    pub db: RemoteTables,\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Status Variant for Reducer Errors\nDESCRIPTION: Represents the Status variant for when a reducer returns an error, panics, or throws an exception. Contains a boxed string with the error message.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_44\n\nLANGUAGE: rust\nCODE:\n```\nspacetimedb_sdk::Status::Failed(Box<str>)\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Connection Lifecycle Reducers in C#\nDESCRIPTION: Example implementation of ClientConnected and ClientDisconnected lifecycle reducers that handle client connection events. These special reducers run automatically when clients connect or disconnect from the SpacetimeDB module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer(ReducerKind.ClientConnected)]\npublic static void HandleConnect(ReducerContext ctx) {\n    Log.Info($\"Client connected: {ctx.Sender}\");\n    // ... setup initial state for ctx.sender ...\n}\n\n[Reducer(ReducerKind.ClientDisconnected)]\npublic static void HandleDisconnect(ReducerContext ctx) {\n    Log.Info($\"Client disconnected: {ctx.Sender}\");\n    // ... cleanup state for ctx.sender ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Level-Based Shop Subscriptions in C#\nDESCRIPTION: C# implementation for handling database subscriptions for shop items and discounts based on player level. Shows subscription management and cleanup process.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar conn = ConnectToDB();\n\nvar shopItemsSubscription = conn\n    .SubscriptionBuilder()\n    .OnApplied((ctx) => { /* handle applied state */ })\n    .OnError((errorCtx, error) => { /* handle error */ })\n    .Subscribe(new string[] {\n        \"SELECT * FROM shop_items WHERE required_level <= 5\",\n        \"SELECT * FROM shop_discounts WHERE required_level <= 5\",\n    });\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar newShopItemsSubscription = conn\n    .SubscriptionBuilder()\n    .OnApplied((ctx) => { /* handle applied state */ })\n    .OnError((errorCtx, error) => { /* handle error */ })\n    .Subscribe(new string[] {\n        \"SELECT * FROM shop_items WHERE required_level <= 6\",\n        \"SELECT * FROM shop_discounts WHERE required_level <= 6\",\n    });\n\nif (shopItemsSubscription.IsActive)\n{\n    shopItemsSubscription.Unsubscribe();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Reducer Callbacks and Invocations in Rust\nDESCRIPTION: Example of registering callbacks for reducer events and invoking reducers in Rust. Shows how to check for failure status and handle errors specific to the current user's reducer calls.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::module_bindings::{ReducerEventContext, Status};\n\n// Placeholder for where other callbacks are registered\nfn connect_event_callbacks(conn: &DbConnection) {\n    conn.reducers().on_set_name(handle_set_name_result); \n    conn.reducers().on_send_message(handle_send_message_result);\n}\n\nfn handle_set_name_result(ctx: &ReducerContext, name: &String) {\n    if let Status::Failed(reason) = &ctx.event.status {\n        // Check if the failure was for *our* call (important in multi-user contexts)\n        if ctx.event.caller_identity == ctx.identity() {\n             eprintln!(\"Error setting name to '{}': {}\", name, reason);\n        }\n    }\n}\n\nfn handle_send_message_result(ctx: &ReducerContext, text: &String) {\n    if let Status::Failed(reason) = &ctx.event.status {\n        if ctx.event.caller_identity == ctx.identity() { // Our call failed\n             eprintln!(\"[Error] Failed to send message '{}': {}\", text, reason);\n        }\n    }\n}\n\n// Example of calling a reducer (e.g., from user input handler)\nfn send_chat_message(conn: &DbConnection, message: String) {\n    if !message.is_empty() {\n        conn.reducers().send_message(message); // Fire-and-forget style\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector2 Math Utilities in C#\nDESCRIPTION: A C# implementation of the DbVector2 struct for 2D vector math operations in SpacetimeDB. It provides vector arithmetic operators, magnitude calculations, and normalization for game physics and movement.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Type]\npublic partial struct DbVector2\n{\n    public float x;\n    public float y;\n\n    public DbVector2(float x, float y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    public float SqrMagnitude => x * x + y * y;\n    public float Magnitude => MathF.Sqrt(SqrMagnitude);\n    public DbVector2 Normalized => this / Magnitude;\n\n    public static DbVector2 operator +(DbVector2 a, DbVector2 b) => new DbVector2(a.x + b.x, a.y + b.y);\n    public static DbVector2 operator -(DbVector2 a, DbVector2 b) => new DbVector2(a.x - b.x, a.y - b.y);\n    public static DbVector2 operator *(DbVector2 a, float b) => new DbVector2(a.x * b, a.y * b);\n    public static DbVector2 operator /(DbVector2 a, float b) => new DbVector2(a.x / b, a.y / b);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid and Invalid Subscription SQL Queries\nDESCRIPTION: Provides examples of valid subscription SQL queries, including single table subscriptions and joins. Also shows an invalid query to illustrate limitations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Subscribe to all rows of a table\nSELECT * FROM Inventory\n\n-- Qualify the `*` projection with the table\nSELECT item.* from Inventory item\n\n-- Subscribe to all customers who have orders totaling more than $1000\nSELECT customer.*\nFROM Customers customer JOIN Orders o ON customer.id = o.customer_id\nWHERE o.amount > 1000\n\n-- INVALID: Must return `Customers` or `Orders`, but not both\nSELECT *\nFROM Customers customer JOIN Orders o ON customer.id = o.customer_id\nWHERE o.amount > 1000\n```\n\n----------------------------------------\n\nTITLE: Implementing Name Validation for User Names\nDESCRIPTION: Helper function to validate user-provided names, currently checking only that the name is not empty.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n/// Takes a name and checks if it's acceptable as a user's name.\nfn validate_name(name: String) -> Result<String, String> {\n    if name.is_empty() {\n        Err(\"Names must not be empty\".to_string())\n    } else {\n        Ok(name)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Update Pattern in Rust\nDESCRIPTION: Shows the recommended pattern for updating subscriptions by creating new ones before removing old ones. Includes handling of overlapping queries.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet conn: DbConnection = connect_to_db();\n\n// Initial subscription: player at level 5.\nlet shop_subscription = conn\n    .subscription_builder()\n    .subscribe([\n        // For displaying the price of shop items in the player's currency of choice\n        \"SELECT * FROM exchange_rates\",\n        \"SELECT * FROM shop_items WHERE required_level <= 5\",\n    ]);\n\n// New subscription: player now at level 6, which overlaps with the previous query.\nlet new_shop_subscription = conn\n    .subscription_builder()\n    .subscribe([\n        // For displaying the price of shop items in the player's currency of choice\n        \"SELECT * FROM exchange_rates\",\n        \"SELECT * FROM shop_items WHERE required_level <= 6\",\n    ]);\n\n// Unsubscribe from the old subscription once the new one is active.\nif shop_subscription.is_active() {\n    shop_subscription.unsubscribe();\n}\n```\n\n----------------------------------------\n\nTITLE: Table Query Operations in SpacetimeDB - Rust Implementation\nDESCRIPTION: Functions for querying table data including table ID lookup, column-based filtering, and row iteration. Implements both filtered and unfiltered iteration capabilities.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/webassembly-abi/index.md#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn _get_table_id(\n    name: *const u8,\n    name_len: usize,\n    out: *mut u32\n) -> u16;\n\nfn _iter_by_col_eq(\n    table_id: u32,\n    col_id: u32,\n    value: *const u8,\n    value_len: usize,\n    out: *mut Buffer\n) -> u16;\n\nfn _iter_start(\n    table_id: u32,\n    out: *mut BufferIter\n) -> u16;\n\nfn _iter_start_filtered(\n    table_id: u32,\n    filter: *const u8,\n    filter_len: usize,\n    out: *mut BufferIter\n) -> u16;\n\nfn _iter_next(\n    iter: ManuallyDrop<BufferIter>,\n    out: *mut Buffer\n) -> u16;\n\nfn _iter_drop(\n    iter: ManuallyDrop<BufferIter>\n) -> u16;\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive RLS Rules in C#\nDESCRIPTION: Shows how to implement recursive RLS rules in C# where visibility filters on one table automatically apply when that table is referenced in rules for other tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\npublic partial class Module\n{\n    /// <summary>\n    /// A client can only see their account.\n    /// </summary>\n    [SpacetimeDB.ClientVisibilityFilter]\n    public static readonly Filter ACCOUNT_FILTER = new Filter.Sql(\n        \"SELECT * FROM account WHERE identity = :sender\"\n    );\n\n    /// <summary>\n    /// An admin can see all accounts.\n    /// </summary>\n    [SpacetimeDB.ClientVisibilityFilter]\n    public static readonly Filter ACCOUNT_FILTER_FOR_ADMINS = new Filter.Sql(\n        \"SELECT account.* FROM account JOIN admin WHERE admin.identity = :sender\"\n    );\n\n    /// <summary>\n    /// Explicitly filtering by client identity in this rule is not necessary,\n    /// since the above RLS rules on `account` will be applied automatically.\n    /// Hence a client can only see their player, but an admin can see all players.\n    /// </summary>\n    [SpacetimeDB.ClientVisibilityFilter]\n    public static readonly Filter PLAYER_FILTER = new Filter.Sql(\n        \"SELECT p.* FROM account a JOIN player p ON a.id = p.id\"\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating C# Types for Unity Client Using Spacetime CLI\nDESCRIPTION: This snippet provides a command to generate C# types from the Spacetime CLI. It outputs the generated files into a specific directory for use in a Unity project. The resulting files include classes for reducers, tables, and types based on the module definitions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nspacetime generate --lang csharp --out-dir ../client-unity/Assets/autogen # you can call this anything, I have chosen `autogen`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UPDATE Statement Usage\nDESCRIPTION: Provides an example of using the UPDATE statement to modify existing rows in a table based on a condition.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n-- Update the item_name for all rows with a specific item_id\nUPDATE Inventory SET item_name = 'new name' WHERE item_id = 1;\n```\n\n----------------------------------------\n\nTITLE: Sorting and Printing Past Messages in Rust with SpacetimeDB\nDESCRIPTION: This function sorts all past messages by timestamp and prints them in order. It's registered as an 'on_applied' callback to handle messages received upon connection.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nfn on_sub_applied(ctx: &SubscriptionEventContext) {\n    let mut messages = ctx.db.message().iter().collect::<Vec<_>>();\n    messages.sort_by_key(|m| m.sent);\n    for message in messages {\n        print_message(ctx, &message);\n    }\n    println!(\"Fully connected and all subscriptions applied.\");\n    println!(\"Use /name to set your name, or type a message!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Player Controller in C#\nDESCRIPTION: Updates the player input on the client-side using C#. It checks local conditions and sends input updates to the server if throttled conditions are met. This relies on user input and pre-defined frequency constraints.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Update()\n{\n    if (!IsLocalPlayer || NumberOfOwnedCircles == 0)\n    {\n        return;\n    }\n\n    if (Input.GetKeyDown(KeyCode.Q))\n    {\n        if (LockInputPosition.HasValue)\n        {\n            LockInputPosition = null;\n        }\n        else\n        {\n            LockInputPosition = (Vector2)Input.mousePosition;\n        }\n    }\n\n    // Throttled input requests\n    if (Time.time - LastMovementSendTimestamp >= SEND_UPDATES_FREQUENCY)\n    {\n        LastMovementSendTimestamp = Time.time;\n\n        var mousePosition = LockInputPosition ?? (Vector2)Input.mousePosition;\n        var screenSize = new Vector2\n        {\n            x = Screen.width,\n            y = Screen.height,\n        };\n        var centerOfScreen = screenSize / 2;\n\n        var direction = (mousePosition - centerOfScreen) / (screenSize.y / 3);\n        if (testInputEnabled) { direction = testInput; }\n        GameManager.Conn.Reducers.UpdatePlayerInput(direction);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Identity from OpenID Claims in Python\nDESCRIPTION: Function that generates a SpacetimeDB identity by hashing OpenID Connect issuer and subject claims using BLAKE3. The function combines the hashed values with specific prefixes and checksums to create a 32-byte identity.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/index.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef identity_from_claims(issuer: str, subject: str) -> [u8; 32]:\n   hash1: [u8; 32] = blake3_hash(issuer + \"|\" + subject)\n   id_hash: [u8; 26] = hash1[:26]\n   checksum_hash: [u8; 32] = blake3_hash([\n      0xC2,\n      0x00,\n      *id_hash\n   ])\n   identity_big_endian_bytes: [u8; 32] = [\n      0xC2, \n      0x00,\n      *checksum_hash[:4],\n      *id_hash\n   ]\n   return identity_big_endian_bytes\n```\n\n----------------------------------------\n\nTITLE: Reducer Event Record Structure - C#\nDESCRIPTION: A record structure that holds metadata about the execution of a reducer, including its timestamp and status, identifying the caller's identity and connection information.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nrecord ReducerEvent<R>(\n    Timestamp Timestamp,\n    Status Status,\n    Identity CallerIdentity,\n    ConnectionId? CallerConnectionId,\n    U128? EnergyConsumed,\n    R Reducer\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Tables in Rust for SpacetimeDB\nDESCRIPTION: Definition of game entity tables in Rust for SpacetimeDB, including the base Entity table and specialized Circle and Food tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::table(name = entity, public)]\n#[derive(Debug, Clone)]\npub struct Entity {\n    // The `auto_inc` attribute indicates to SpacetimeDB that\n    // this value should be determined by SpacetimeDB on insert.\n    #[auto_inc]\n    #[primary_key]\n    pub entity_id: u32,\n    pub position: DbVector2,\n    pub mass: u32,\n}\n\n#[spacetimedb::table(name = circle, public)]\npub struct Circle {\n    #[primary_key]\n    pub entity_id: u32,\n    #[index(btree)]\n    pub player_id: u32,\n    pub direction: DbVector2,\n    pub speed: f32,\n    pub last_split_time: Timestamp,\n}\n\n#[spacetimedb::table(name = food, public)]\npub struct Food {\n    #[primary_key]\n    pub entity_id: u32,\n}\n```\n\n----------------------------------------\n\nTITLE: Notify User Inserts with Spacetime in Rust\nDESCRIPTION: This Rust snippet implements an `on_insert` callback to notify when a user is inserted. It checks if the user is online and prints a notification. The `user_name_or_identity` function is used to get the user's name or identity.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n/// Our `User::on_insert` callback:\n/// if the user is online, print a notification.\nfn on_user_inserted(_ctx: &EventContext, user: &User) {\n    if user.online {\n        println!(\"User {} connected.\", user_name_or_identity(user));\n    }\n}\n\nfn user_name_or_identity(user: &User) -> String {\n    user.name\n        .clone()\n        .unwrap_or_else(|| user.identity.to_hex().to_string())\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Reducers and Handling Callbacks in C#\nDESCRIPTION: Demonstrates how to register event callbacks for reducers, handle reducer results with status checking, and invoke reducer functions in a SpacetimeDB client application.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB.Types;\n\n// In ClientManager or similar class, likely where HandleConnect is...\nprivate void RegisterEventCallbacks(DbConnection conn) // Updated registration point\n{\n    // Table callbacks (from previous section)\n    conn.Db.Player.OnInsert += HandlePlayerInsert;\n    conn.Db.Player.OnUpdate += HandlePlayerUpdate;\n    conn.Db.Message.OnInsert += HandleMessageInsert;\n    \n    // Reducer callbacks\n    Reducer.OnSetName += HandleSetNameResult;\n    Reducer.OnSendMessage += HandleSendMessageResult;\n}\n\nprivate void HandleSetNameResult(ReducerEventContext ctx, string name)\n{\n    // Check if the status is Failed\n    if (ctx.Event.Status is Status.Failed failedStatus)\n    {\n        // Check if the failure was for *our* call\n        if (ctx.Event.CallerIdentity == ctx.Identity) {\n             Console.WriteLine($\"Error setting name to '{name}': {failedStatus.Reason}\");\n        }\n    }\n}\n\nprivate void HandleSendMessageResult(ReducerEventContext ctx, string text)\n{\n    if (ctx.Event.Status is Status.Failed failedStatus)\n    {\n        if (ctx.Event.CallerIdentity == ctx.Identity) { // Our call failed\n             Console.WriteLine($\"[Error] Failed to send message '{text}': {failedStatus.Reason}\");\n        }\n    }\n}\n\n// Example of calling a reducer (e.g., from user input handler)\npublic void SendChatMessage(string message)\n{\n    if (!string.IsNullOrEmpty(message))\n    {\n        Reducer.SendMessage(message); // Static method call\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Tables from One Struct in SpacetimeDB\nDESCRIPTION: This code snippet shows how to define multiple tables using a single Rust struct with multiple #[table] attributes in SpacetimeDB. It includes an example of a reducer function demonstrating interaction with the defined tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{table, Identity, Timestamp, Table}; // Added Table import\n\n// Define the core data structure once\n// Note: #[table] automatically derives SpacetimeType, Serialize, Deserialize\n// Do NOT add #[derive(SpacetimeType)] here.\n#[derive(Clone, Debug)]\n#[table(name = logged_in_players, public)]  // Identifier name\n#[table(name = players_in_lobby, public)]   // Identifier name\npub struct PlayerSessionData {\n    #[primary_key]\n    player_id: Identity,\n    #[unique]\n    #[auto_inc]\n    session_id: u64,\n    last_activity: Timestamp,\n}\n\n// Example Reducer demonstrating interaction\n#[spacetimedb::reducer]\nfn example_reducer(ctx: &spacetimedb::ReducerContext) {\n    // Reducers interact with the specific table handles:\n    let session = PlayerSessionData {\n        player_id: ctx.sender, // Example: Use sender identity\n        session_id: 0, // Assuming auto_inc\n        last_activity: ctx.timestamp,\n    };\n\n    // Insert into the 'logged_in_players' table\n    match ctx.db.logged_in_players().try_insert(session.clone()) {\n        Ok(inserted) => spacetimedb::log::info!(\"Player {} logged in, session {}\", inserted.player_id, inserted.session_id),\n        Err(e) => spacetimedb::log::error!(\"Failed to insert into logged_in_players: {}\", e),\n    }\n\n    // Find a player in the 'players_in_lobby' table by primary key\n    if let Some(lobby_player) = ctx.db.players_in_lobby().player_id().find(&ctx.sender) {\n        spacetimedb::log::info!(\"Player {} found in lobby.\", lobby_player.player_id);\n    }\n\n    // Delete from the 'logged_in_players' table using the PK index\n    ctx.db.logged_in_players().player_id().delete(&ctx.sender);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Validation for Chat Messages\nDESCRIPTION: Helper function to validate message text, currently checking only that the message is not empty.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n/// Takes a message's text and checks if it's acceptable to send.\nfn validate_message(text: String) -> Result<String, String> {\n    if text.is_empty() {\n        Err(\"Messages must not be empty\".to_string())\n    } else {\n        Ok(text)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Maincloud from C# Client SDK\nDESCRIPTION: C# code snippet to create a DbConnection builder and set the URI for connecting to a SpacetimeDB module deployed on Maincloud.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/maincloud.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nDbConnection.Builder()\n    .WithUri(\"https://maincloud.spacetimedb.com\")\n```\n\n----------------------------------------\n\nTITLE: SubscriptionHandle is_ended Method\nDESCRIPTION: Defines the `is_ended` method for the `SubscriptionHandle` struct. This method returns true if the subscription has been terminated due to an unsubscribe call or an error.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\n\"impl SubscriptionHandle {\\n    fn is_ended(&self) -> bool;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Complex JOIN Usage in Query SQL\nDESCRIPTION: Provides an example of a complex query using multiple JOINs, which is supported in the query language but not in subscriptions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n-- Find all customers who ordered a particular product and when they ordered it\nSELECT customer.first_name, customer.last_name, o.date\nFROM Customers customer\nJOIN Orders o ON customer.id = o.customer_id\nJOIN Inventory product ON o.product_id = product.id\nWHERE product.name = {product_name}\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Join RLS Rules in Rust\nDESCRIPTION: Shows how to implement a visibility filter in Rust using a self-join on the player table to restrict client access to players on the same level.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{client_visibility_filter, Filter};\n\n/// A client can only see players on their same level\n#[client_visibility_filter]\nconst PLAYER_FILTER: Filter = Filter::Sql(\"\n    SELECT q.*\n    FROM account a\n    JOIN player p ON u.id = p.id\n    JOIN player q on p.level = q.level\n    WHERE a.identity = :sender\n\");\n```\n\n----------------------------------------\n\nTITLE: Handling SpacetimeDB Subscription in Unity C#\nDESCRIPTION: Unity C# code that handles the SpacetimeDB subscription applied event, retrieving the world size from the config table and setting up the game arena accordingly.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n    private void HandleSubscriptionApplied(SubscriptionEventContext ctx)\n    {\n        Debug.Log(\"Subscription applied!\");\n        OnSubscriptionApplied?.Invoke();\n\n        // Once we have the initial subscription sync'd to the client cache\n        // Get the world size from the config table and set up the arena\n        var worldSize = Conn.Db.Config.Id.Find(0).WorldSize;\n        SetupArena(worldSize);\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling User Connections in TypeScript React Component\nDESCRIPTION: Implements useEffect hook to subscribe to user insertions and updates in the SpacetimeDB. It displays notifications when users connect or disconnect from the chat application.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  if (!conn) return;\n  conn.db.user.onInsert((_ctx, user) => {\n    if (user.online) {\n      const name = user.name || user.identity.toHexString().substring(0, 8);\n      setSystemMessage(prev => prev + `\\n${name} has connected.`);\n    }\n  });\n  conn.db.user.onUpdate((_ctx, oldUser, newUser) => {\n    const name =\n      newUser.name || newUser.identity.toHexString().substring(0, 8);\n    if (oldUser.online === false && newUser.online === true) {\n      setSystemMessage(prev => prev + `\\n${name} has connected.`);\n    } else if (oldUser.online === true && newUser.online === false) {\n      setSystemMessage(prev => prev + `\\n${name} has disconnected.`);\n    }\n  });\n}, [conn]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Sorted Messages with User Names in TypeScript\nDESCRIPTION: This TypeScript code prepares and sorts message data according to their sent timestamp, enhancing the user experience by associating each message with the user's name from the identity.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst prettyMessages: PrettyMessage[] = messages\n  .sort((a, b) => (a.sent > b.sent ? 1 : -1))\n  .map(message => ({\n    senderName:\n      users.get(message.sender.toHexString())?.name ||\n      message.sender.toHexString().substring(0, 8),\n    text: message.text,\n  }));\n```\n\n----------------------------------------\n\nTITLE: Declaring IDbContext Interface\nDESCRIPTION: Generic interface definition for database context operations with type parameters for DbView and RemoteReducers.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IDbContext<DbView, RemoteReducers, ..>\n{\n    /* methods */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Table in SpacetimeDB C# Module\nDESCRIPTION: Creating a public table to store chat messages, including sender identity, timestamp, and message text.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Table(Name = \"message\", Public = true)]\npublic partial class Message\n{\n    public Identity Sender;\n    public Timestamp Sent;\n    public string Text = \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Circle Spawning in Rust with SpacetimeDB\nDESCRIPTION: This Rust code implements player spawning functionality, including an enter_game reducer that sets player names and spawns initial circles, helper functions for circle spawning, and a disconnect handler that removes player circles when they leave.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nconst START_PLAYER_MASS: u32 = 15;\n\n#[spacetimedb::reducer]\npub fn enter_game(ctx: &ReducerContext, name: String) -> Result<(), String> {\n    log::info!(\"Creating player with name {}\", name);\n    let mut player: Player = ctx.db.player().identity().find(ctx.sender).ok_or(\"\")?;\n    let player_id = player.player_id;\n    player.name = name;\n    ctx.db.player().identity().update(player);\n    spawn_player_initial_circle(ctx, player_id)?;\n\n    Ok(())\n}\n\nfn spawn_player_initial_circle(ctx: &ReducerContext, player_id: u32) -> Result<Entity, String> {\n    let mut rng = ctx.rng();\n    let world_size = ctx\n        .db\n        .config()\n        .id()\n        .find(&0)\n        .ok_or(\"Config not found\")?\n        .world_size;\n    let player_start_radius = mass_to_radius(START_PLAYER_MASS);\n    let x = rng.gen_range(player_start_radius..(world_size as f32 - player_start_radius));\n    let y = rng.gen_range(player_start_radius..(world_size as f32 - player_start_radius));\n    spawn_circle_at(\n        ctx,\n        player_id,\n        START_PLAYER_MASS,\n        DbVector2 { x, y },\n        ctx.timestamp,\n    )\n}\n\nfn spawn_circle_at(\n    ctx: &ReducerContext,\n    player_id: u32,\n    mass: u32,\n    position: DbVector2,\n    timestamp: Timestamp,\n) -> Result<Entity, String> {\n    let entity = ctx.db.entity().try_insert(Entity {\n        entity_id: 0,\n        position,\n        mass,\n    })?;\n\n    ctx.db.circle().try_insert(Circle {\n        entity_id: entity.entity_id,\n        player_id,\n        direction: DbVector2 { x: 0.0, y: 1.0 },\n        speed: 0.0,\n        last_split_time: timestamp,\n    })?;\n    Ok(entity)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionEventContext in TypeScript\nDESCRIPTION: Defines the `SubscriptionEventContext` class, which provides access to the remote database's tables and reducers. This class is used in subscription callbacks to manage data responses from the server.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionEventContext {\n  public db: RemoteTables\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Name Validation in SpacetimeDB C# Module\nDESCRIPTION: A helper function to validate user names, currently checking for non-empty names.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static string ValidateName(string name)\n{\n    if (string.IsNullOrEmpty(name))\n    {\n        throw new Exception(\"Names must not be empty\");\n    }\n    return name;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Process Thread for Database Updates in C#\nDESCRIPTION: This snippet defines a ProcessThread function that runs in a separate thread. It continuously processes database updates and user commands until signaled to exit, then closes the database connection.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our separate thread from main, where we can call process updates and process commands without blocking the main thread. \nvoid ProcessThread(DbConnection conn, CancellationToken ct)\n{\n    try\n    {\n        // loop until cancellation token\n        while (!ct.IsCancellationRequested)\n        {\n            conn.FrameTick();\n\n            ProcessCommands(conn.Reducers);\n\n            Thread.Sleep(100);\n        }\n    }\n    finally\n    {\n        conn.Disconnect();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Self-Hosted SpacetimeDB Server to Local CLI\nDESCRIPTION: Command to add your self-hosted SpacetimeDB server to your local SpacetimeDB CLI configuration for easy access.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nspacetime server add self-hosted --url https://example.com\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SELECT Clause Usage in Query SQL\nDESCRIPTION: Provides examples of valid SELECT clause usage in query SQL, including column selection and COUNT aggregation.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- Select the items in my inventory\nSELECT * FROM Inventory;\n\n-- Select the names and prices of the items in my inventory\nSELECT item_name, price FROM Inventory\n\n-- Count the items in my inventory\nSELECT COUNT(*) AS n FROM Inventory\n```\n\n----------------------------------------\n\nTITLE: Implementing TableWithPrimaryKey Trait in Rust for SpacetimeDB SDK\nDESCRIPTION: Defines the TableWithPrimaryKey trait for tables with primary keys in the SpacetimeDB Rust SDK. Includes callback registration for update operations on rows with primary keys.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_55\n\nLANGUAGE: rust\nCODE:\n```\ntrait spacetimedb_sdk::TableWithPrimaryKey {\n    type UpdateCallbackId;\n    fn on_update(&self, callback: impl FnMut(&EventContext, &Self::Row, &Self::Row)) -> Self::UpdateCallbackId;\n    fn remove_on_update(&self, callback: Self::UpdateCallbackId);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDisconnected callback for connection termination\nDESCRIPTION: Handles disconnection events, distinguishing between normal disconnections and abnormal ones caused by errors.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our `OnDisconnect` callback: print a note, then exit the process.\nvoid OnDisconnected(DbConnection conn, Exception? e)\n{\n    if (e != null)\n    {\n        Console.Write($\"Disconnected abnormally: {e}\");\n    }\n    else\n    {\n        Console.Write($\"Disconnected normally.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Player Disconnection in C# with SpacetimeDB\nDESCRIPTION: C# implementation of the disconnect reducer that handles player disconnections by removing their circles from the arena and cleaning up player data.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer(ReducerKind.ClientDisconnected)]\npublic static void Disconnect(ReducerContext ctx)\n{\n    var player = ctx.Db.player.identity.Find(ctx.Sender) ?? throw new Exception(\"Player not found\");\n    // Remove any circles from the arena\n    foreach (var circle in ctx.Db.circle.player_id.Filter(player.player_id))\n    {\n        var entity = ctx.Db.entity.entity_id.Find(circle.entity_id) ?? throw new Exception(\"Could not find circle\");\n        ctx.Db.entity.entity_id.Delete(entity.entity_id);\n        ctx.Db.circle.entity_id.Delete(entity.entity_id);\n    }\n    ctx.Db.logged_out_player.Insert(player);\n    ctx.Db.player.identity.Delete(player.identity);\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Reducers Example in C#\nDESCRIPTION: Illustrates how nested reducers work in C# within the same transaction. This example shows that when a reducer calls another reducer directly, it doesn't create a child transaction, and how error handling affects persistence.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/index.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Reducer]\npublic static void Hello(ReducerContext ctx)\n{\n   if(!World(ctx))\n   {\n      OtherChanges(ctx);\n   }\n}\n\n[SpacetimeDB.Reducer]\npublic static void World(ReducerContext ctx)\n{\n   ClearAllTables(ctx);\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UPDATE Statement Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the UPDATE statement in SpacetimeDB SQL.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_16\n\nLANGUAGE: ebnf\nCODE:\n```\nUPDATE table SET [ '(' assignment { ',' assignment } ')' ] [ WHERE predicate ]\n```\n\n----------------------------------------\n\nTITLE: Creating C# Module Structure for SpacetimeDB\nDESCRIPTION: Basic C# module structure for a SpacetimeDB implementation, importing the SpacetimeDB namespace and defining the Module class.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\npublic static partial class Module\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Module Bindings for SpacetimeDB\nDESCRIPTION: Uses the SpacetimeDB CLI to generate TypeScript interface files for a specific module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p client/src/module_bindings\nspacetime generate --lang typescript \\\n    --out-dir client/src/module_bindings \\\n    --project-path PATH-TO-MODULE-DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Detection and Food Consumption in Rust\nDESCRIPTION: This Rust code snippet adds collision detection and food consumption mechanics to the game. It includes an 'is_overlapping' helper function and a modified 'move_all_players' reducer that checks for collisions between circles and food entities, updating masses and deleting entities as necessary.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nconst MINIMUM_SAFE_MASS_RATIO: f32 = 0.85;\n\nfn is_overlapping(a: &Entity, b: &Entity) -> bool {\n    let dx = a.position.x - b.position.x;\n    let dy = a.position.y - b.position.y;\n    let distance_sq = dx * dx + dy * dy;\n\n    let radius_a = mass_to_radius(a.mass);\n    let radius_b = mass_to_radius(b.mass);\n\n    // If the distance between the two circle centers is less than the \n    // maximum radius, then the center of the smaller circle is inside\n    // the larger circle. This gives some leeway for the circles to overlap\n    // before being eaten.\n    let max_radius = f32::max(radius_a, radius_b);\n    distance_sq <= max_radius * max_radius\n}\n\n#[spacetimedb::reducer]\npub fn move_all_players(ctx: &ReducerContext, _timer: MoveAllPlayersTimer) -> Result<(), String> {\n    let world_size = ctx\n        .db\n        .config()\n        .id()\n        .find(0)\n        .ok_or(\"Config not found\")?\n        .world_size;\n\n    // Handle player input\n    for circle in ctx.db.circle().iter() {\n        let circle_entity = ctx.db.entity().entity_id().find(&circle.entity_id);\n        if !circle_entity.is_some() {\n            // This can happen if a circle is eaten by another circle\n            continue;\n        }\n        let mut circle_entity = circle_entity.unwrap();\n        let circle_radius = mass_to_radius(circle_entity.mass);\n        let direction = circle.direction * circle.speed;\n        let new_pos =\n            circle_entity.position + direction * mass_to_max_move_speed(circle_entity.mass);\n        let min = circle_radius;\n        let max = world_size as f32 - circle_radius;\n        circle_entity.position.x = new_pos.x.clamp(min, max);\n        circle_entity.position.y = new_pos.y.clamp(min, max);\n\n        // Check collisions\n        for entity in ctx.db.entity().iter() {\n            if entity.entity_id == circle_entity.entity_id {\n                continue;\n            }\n            if is_overlapping(&circle_entity, &entity) {\n                // Check to see if we're overlapping with food\n                if ctx.db.food().entity_id().find(&entity.entity_id).is_some() {\n                    ctx.db.entity().entity_id().delete(&entity.entity_id);\n                    ctx.db.food().entity_id().delete(&entity.entity_id);\n                    circle_entity.mass += entity.mass;\n                }\n\n                // Check to see if we're overlapping with another circle owned by another player\n                let other_circle = ctx.db.circle().entity_id().find(&entity.entity_id);\n                if let Some(other_circle) = other_circle {\n                    if other_circle.player_id != circle.player_id {\n                        let mass_ratio = entity.mass as f32 / circle_entity.mass as f32;\n                        if mass_ratio < MINIMUM_SAFE_MASS_RATIO {\n                            ctx.db.entity().entity_id().delete(&entity.entity_id);\n                            ctx.db.circle().entity_id().delete(&entity.entity_id);\n                            circle_entity.mass += entity.mass;\n                        }\n                    }\n                }\n            }\n        }\n        ctx.db.entity().entity_id().update(circle_entity);\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Threaded Connection Processing in Rust\nDESCRIPTION: Method to spawn a background thread for continuous connection processing. The thread sleeps when idle and handles connection state changes.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnection {\n    fn run_threaded(&self) -> std::thread::JoinHandle<()>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Insert Constraint Violations in SpacetimeDB C#\nDESCRIPTION: Shows different approaches to handling database constraint violations in SpacetimeDB reducers, including try-catch pattern for graceful error handling during item insertion.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\nusing System;\n\npublic static partial class Module\n{\n    [Table(Name = \"unique_items\")]\n    public partial class UniqueItem {\n        [PrimaryKey] public string ItemName;\n        public int Value;\n    }\n\n    [Reducer]\n    public static void AddUniqueItemWithCatch(ReducerContext ctx, string name, int value)\n    {\n        var newItem = new UniqueItem { ItemName = name, Value = value };\n        try\n        {\n            ctx.Db.unique_items.Insert(newItem);\n            Log.Info($\"Successfully inserted item: {name}\");\n        }\n        catch (Exception ex)\n        {\n            Log.Error($\"Failed to insert item '{name}': Constraint violation or other error. Details: {ex.Message}\");\n            throw new Exception($\"Item name '{name}' might already exist.\"); \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Connection Builder Interface\nDESCRIPTION: Core method for creating a new database connection builder instance.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnection {\n    fn builder() -> DbConnectionBuilder;\n}\n```\n\n----------------------------------------\n\nTITLE: ReducerContext Class Definition in SpacetimeDB C#\nDESCRIPTION: Shows the class definition for ReducerContext which provides access to the database state and various contextual information during a reducer's execution.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed record ReducerContext : DbContext<Local>, Internal.IReducerContext\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Tables with Rust Structs in SpacetimeDB\nDESCRIPTION: This code snippet demonstrates how to define multiple tables using Rust structs with the #[table] macro in SpacetimeDB. It includes examples of public and private tables, primary keys, auto-increment fields, indexes, and unique constraints.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{table, Identity, Timestamp, SpacetimeType, Table}; // Added Table import\n\n// Assume Position, PlayerStatus, ItemType are defined as types\n\n// Example Table Definition\n#[table(\n    name = player_state, \n    public,\n    // Index definition is included here\n    index(name = idx_level_btree, btree(columns = [level])) \n)]\n#[derive(Clone, Debug)] // No SpacetimeType needed here\npub struct PlayerState {\n    #[primary_key]\n    player_id: Identity,\n    #[unique] // Player names must be unique\n    name: String,\n    conn_id: Option<ConnectionId>, // Nullable field\n    health: u32,\n    level: u16,\n    position: Position, // Custom type field\n    status: PlayerStatus, // Custom enum field\n    last_login: Option<Timestamp>, // Nullable timestamp\n}\n\n#[table(name = inventory_item, public)]\n#[derive(Clone, Debug)]\npub struct InventoryItem {\n    #[primary_key]\n    #[auto_inc] // Automatically generate IDs\n    item_id: u64,\n    owner_id: Identity,\n    #[index(btree)] // Simple index on this field\n    item_type: ItemType,\n    quantity: u32,\n}\n\n// Example of a private table\n#[table(name = internal_game_data)] // No `public` flag\n#[derive(Clone, Debug)]\nstruct InternalGameData {\n    #[primary_key]\n    key: String,\n    value: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Reducer Usage Example in Rust\nDESCRIPTION: Example implementation showing how to call a reducer using the context.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nfn call_say_hello(ctx: &impl RemoteDbContext) {\n    ctx.reducers.say_hello();\n}\n```\n\n----------------------------------------\n\nTITLE: Message Handling Using OnInsert Callback in SpacetimeDB C#\nDESCRIPTION: Defines a `Message.OnInsert` callback function for printing new messages received by a user in SpacetimeDB. It checks the context to ensure only new messages are printed and uses a helper function `PrintMessage` to display the message details.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our `Message.OnInsert` callback: print new messages.\nvoid Message_OnInsert(EventContext ctx, Message insertedValue)\n{\n    // We are filtering out messages inserted during the subscription being applied,\n    // since we will be printing those in the OnSubscriptionApplied callback,\n    // where we will be able to first sort the messages before printing.\n    if (ctx.Event is not Event<Reducer>.SubscribeApplied)\n    {\n        PrintMessage(ctx.Db, insertedValue);\n    }\n}\n\nvoid PrintMessage(RemoteTables tables, Message message)\n{\n    var sender = tables.User.Identity.Find(message.Sender);\n    var senderName = \"unknown\";\n    if (sender != null)\n    {\n        senderName = UserNameOrIdentity(sender);\n    }\n\n    Console.WriteLine($\"{senderName}: {message.Text}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining onInsert Callback in TableHandle in TypeScript\nDESCRIPTION: Defines the `onInsert` callback in the `TableHandle` class for handling row insertions in the client cache. This method allows registration of a callback that can act based on new data entries.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nclass TableHandle {\n  public onInsert(\n    callback: (ctx: EventContext, row: Row) => void\n  ): void;\n\n  public removeOnInsert(\n    callback: (ctx: EventContext, row: Row) => void\n  ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Database URI Configuration Method\nDESCRIPTION: Method to configure the URI for connecting to a SpacetimeDB instance.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnectionBuilder {\n    fn with_uri(self, uri: impl TryInto<Uri>) -> Self;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Reducer from Rust Client\nDESCRIPTION: Demonstrates how to call a reducer from a Rust client application. The client code invokes the 'set_player_name' reducer with specific parameters that are sent to the database for processing.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/index.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n   // ...setup code, then...\n   ctx.reducers.set_player_name(57, \"Marceline\".into());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive RLS Rules in Rust\nDESCRIPTION: Demonstrates how to implement recursive RLS rules in Rust where visibility filters on one table automatically apply when that table is referenced in rules for other tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{client_visibility_filter, Filter};\n\n/// A client can only see their account\n#[client_visibility_filter]\nconst ACCOUNT_FILTER: Filter = Filter::Sql(\n    \"SELECT * FROM account WHERE identity = :sender\"\n);\n\n/// An admin can see all accounts\n#[client_visibility_filter]\nconst ACCOUNT_FILTER_FOR_ADMINS: Filter = Filter::Sql(\n    \"SELECT account.* FROM account JOIN admin WHERE admin.identity = :sender\"\n);\n\n/// Explicitly filtering by client identity in this rule is not necessary,\n/// since the above RLS rules on `account` will be applied automatically.\n/// Hence a client can only see their player, but an admin can see all players.\n#[client_visibility_filter]\nconst PLAYER_FILTER: Filter = Filter::Sql(\n    \"SELECT p.* FROM account a JOIN player p ON a.id = p.id\"\n);\n```\n\n----------------------------------------\n\nTITLE: Managing the SpacetimeDB Connection Update Loop\nDESCRIPTION: Illustrates the manual update loop required by the C# SDK. This snippet shows how to periodically call connection.FrameTick() to process incoming messages and trigger callbacks, with a simple console application example.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\n// Example in a simple console app loop:\npublic void RunUpdateLoop()\n{\n    Console.WriteLine(\"Running update loop...\");\n    bool isRunning = true;\n    while(isRunning && connection != null && connection.IsConnected)\n    {\n        connection.FrameTick(); // Process messages\n        \n        // Check for user input or other app logic...\n        if (Console.KeyAvailable) {\n             var key = Console.ReadKey(true).Key;\n             if (key == ConsoleKey.Escape) isRunning = false;\n             // Handle other input...\n        }\n\n        System.Threading.Thread.Sleep(16); // Avoid busy-waiting\n    }\n    connection?.Disconnect();\n    Console.WriteLine(\"Update loop stopped.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing V2 Character Schema with Alliance in Rust\nDESCRIPTION: Creates a new CharacterV2 table with additional alliance field while maintaining backward compatibility with the original Character table.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/how-to/incremental-migrations.md#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::table(name = character_v2, public)]\nstruct CharacterV2 {\n    #[primary_key]\n    player_id: Identity,\n    nickname: String,\n    level: u32,\n    class: Class,\n    alliance: Alliance,\n}\n\n#[derive(SpacetimeType, Debug, Copy, Clone)]\nenum Alliance {\n    Good,\n    Neutral,\n    Evil,\n}\n```\n\n----------------------------------------\n\nTITLE: Calling setName Reducer in TypeScript React Component\nDESCRIPTION: Updates the onSubmitNewName callback to call the setName reducer from the SpacetimeDB connection. This function is triggered when submitting a new username in the chat application.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst onSubmitNewName = (e: React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n  setSettingName(false);\n  conn.reducers.setName(newName);\n};\n```\n\n----------------------------------------\n\nTITLE: Project Initialization Command Usage\nDESCRIPTION: Command for creating a new SpacetimeDB project with language selection options.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nspacetime init --lang <lang> [project-path]\n```\n\n----------------------------------------\n\nTITLE: Iterating Rows using ITableView.Iter in C#\nDESCRIPTION: This snippet demonstrates the `Iter` method of the `ITableView` interface.  It shows iterating over all rows of the table and takes into account changes made during the current transaction. It also notes that this operation can be slow for large tables, suggesting the use of filtering or finding by index when possible.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nIEnumerable<Row> Iter();\n```\n\n----------------------------------------\n\nTITLE: Nested Reducers Example in Rust\nDESCRIPTION: Illustrates how nested reducers work in Rust within the same transaction. This example shows that when a reducer calls another reducer directly, it doesn't create a child transaction, and how error handling affects persistence.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/index.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer]\npub fn hello(ctx: &spacetimedb::ReducerContext) -> Result<(), String> {\n   if world(ctx).is_err() {\n      other_changes(ctx);\n   }\n}\n\n#[spacetimedb::reducer]\npub fn world(ctx: &spacetimedb::ReducerContext) -> Result<(), String> {\n   clear_all_tables(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB Systemd Service Configuration\nDESCRIPTION: Systemd service unit file that defines how SpacetimeDB should run. It specifies the executable path, working directory, user context, and ensures automatic restart on failure.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=SpacetimeDB Server\nAfter=network.target\n\n[Service]\nExecStart=/stdb/spacetime --root-dir=/stdb start --listen-addr='127.0.0.1:3000'\nRestart=always\nUser=spacetimedb\nWorkingDirectory=/stdb\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Defining a Player Table with BTree Index in C#\nDESCRIPTION: Definition of a Player table with a primary key and a BTree index on the level field. The BTree index enables efficient filtering of players by level.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\n[Table(Name = \"Player\", Public = true)]\npublic partial class Player\n{\n    [PrimaryKey]\n    public Identity id;\n\n    [Index.BTree(Name = \"Level\")]\n    public uint level;\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Defining onDelete Callback in TableHandle in TypeScript\nDESCRIPTION: Defines the `onDelete` callback in the `TableHandle` class for actions performed when a row is deleted from the client cache. The method enables the registration of a callback to respond to data removal.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nclass TableHandle {\n  public onDelete(\n    callback: (ctx: EventContext, row: Row) => void\n  ): void;\n\n  public removeOnDelete(\n    callback: (ctx: EventContext, row: Row) => void\n  ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a SpacetimeDB Database\nDESCRIPTION: Command to delete a SpacetimeDB database. Requires specifying the database name or identity to be deleted.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspacetime delete [OPTIONS] <database>\n```\n\n----------------------------------------\n\nTITLE: Generating SpacetimeDB Client Bindings\nDESCRIPTION: Commands to create type-safe client code based on a module's schema. Generates language-specific bindings for Rust or C# clients to interact with the SpacetimeDB module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# For Rust client (output to src/module_bindings)\nspacetime generate --lang rust --out-dir path/to/client/src/module_bindings --project-path my_server_module\n# For C# client (output to module_bindings directory)\nspacetime generate --lang csharp --out-dir path/to/client/module_bindings --project-path my_server_module\n```\n\n----------------------------------------\n\nTITLE: OnConnect Callback Registration for DbConnectionBuilder\nDESCRIPTION: Method for registering a callback that runs when a connection is successfully established with a SpacetimeDB database, providing the connection object, identity, and access token.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnectionBuilder<DbConnection>\n{\n    public DbConnectionBuilder<DbConnection> OnConnect(Action<DbConnection, Identity, string> callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic RLS Filter in C#\nDESCRIPTION: Shows how to create a basic visibility filter in C# that restricts a client to only see their own account records using SQL and the :sender parameter.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\n#pragma warning disable STDB_UNSTABLE\n\npublic partial class Module\n{\n    /// <summary>\n    /// A client can only see their account.\n    /// </summary>\n    [SpacetimeDB.ClientVisibilityFilter]\n    public static readonly Filter ACCOUNT_FILTER = new Filter.Sql(\n        \"SELECT * FROM account WHERE identity = :sender\"\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DbConnection Class for SpacetimeDB in TypeScript\nDESCRIPTION: Outlines the DbConnection class used to establish and manage a connection to a SpacetimeDB database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass DbConnection {\n  public static builder(): DbConnectionBuilder\n}\n```\n\n----------------------------------------\n\nTITLE: Database Access Example in Rust\nDESCRIPTION: Example implementation showing how to iterate over users using the database context.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nfn print_users(ctx: &impl RemoteDbContext) {\n    for user in ctx.db().user().iter() {\n        println!(\"{}\", user.name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Player Table Structure in C#\nDESCRIPTION: C# implementation of the player table structure with identical functionality to the Rust version, using C# attributes for table configuration.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[Table(Name = \"player\", Public = true)]\npublic partial struct Player\n{\n\t[PrimaryKey]\n\tpublic Identity identity;\n\t[Unique, AutoInc]\n\tpublic uint player_id;\n\tpublic string name;\n}\n```\n\n----------------------------------------\n\nTITLE: ReducerEvent Type Definition\nDESCRIPTION: Detailed type definition for ReducerEvent containing metadata about reducer execution.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReducerEvent<Reducer> = {\n  /**\n   * The time when the reducer started running.\n   */\n  timestamp: Timestamp;\n\n  /**\n   * Whether the reducer committed, was aborted due to insufficient energy, or failed with an error message.\n   */\n  status: UpdateStatus;\n\n  /**\n   * The identity of the caller.\n   * TODO: Revise these to reflect the forthcoming Identity proposal.\n   */\n  callerIdentity: Identity;\n\n  /**\n   * The connection ID of the caller.\n   *\n   * May be `null`, e.g. for scheduled reducers.\n   */\n  callerConnectionId?: ConnectionId;\n\n  /**\n   * The amount of energy consumed by the reducer run, in eV.\n   * (Not literal eV, but our SpacetimeDB energy unit eV.)\n   * May be present or undefined at the implementor's discretion;\n   * future work may determine an interface for module developers\n   * to request this value be published or hidden.\n   */\n  energyConsumed?: bigint;\n\n  /**\n   * The `Reducer` enum defined by the `moduleBindings`, which encodes which reducer ran and its arguments.\n   */\n  reducer: Reducer;\n};\n```\n\n----------------------------------------\n\nTITLE: Build Method for Finalizing DbConnection Configuration\nDESCRIPTION: Method that finalizes the configuration of a DbConnectionBuilder and attempts to open a connection to the SpacetimeDB database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnectionBuilder<DbConnection>\n{\n    public DbConnection Build();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Player Movement in Rust\nDESCRIPTION: A SpacetimeDB scheduled reducer that moves all player circles based on their current direction and speed. It updates entity positions while respecting world boundaries and handles circle collision with world edges.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::table(name = move_all_players_timer, scheduled(move_all_players))]\npub struct MoveAllPlayersTimer {\n    #[primary_key]\n    #[auto_inc]\n    scheduled_id: u64,\n    scheduled_at: spacetimedb::ScheduleAt,\n}\n\nconst START_PLAYER_SPEED: u32 = 10;\n\nfn mass_to_max_move_speed(mass: u32) -> f32 {\n    2.0 * START_PLAYER_SPEED as f32 / (1.0 + (mass as f32 / START_PLAYER_MASS as f32).sqrt())\n}\n\n#[spacetimedb::reducer]\npub fn move_all_players(ctx: &ReducerContext, _timer: MoveAllPlayersTimer) -> Result<(), String> {\n    let world_size = ctx\n        .db\n        .config()\n        .id()\n        .find(0)\n        .ok_or(\"Config not found\")?\n        .world_size;\n\n    // Handle player input\n    for circle in ctx.db.circle().iter() {\n        let circle_entity = ctx.db.entity().entity_id().find(&circle.entity_id);\n        if !circle_entity.is_some() {\n            // This can happen if a circle is eaten by another circle\n            continue;\n        }\n        let mut circle_entity = circle_entity.unwrap();\n        let circle_radius = mass_to_radius(circle_entity.mass);\n        let direction = circle.direction * circle.speed;\n        let new_pos =\n            circle_entity.position + direction * mass_to_max_move_speed(circle_entity.mass);\n        let min = circle_radius;\n        let max = world_size as f32 - circle_radius;\n        circle_entity.position.x = new_pos.x.clamp(min, max);\n        circle_entity.position.y = new_pos.y.clamp(min, max);\n        ctx.db.entity().entity_id().update(circle_entity);\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining iter Method in TableHandle in TypeScript\nDESCRIPTION: Defines the `iter` method for the `TableHandle` class, which provides an iterator for accessing all the subscribed rows in the client cache based on the current query.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nclass TableHandle {\n  public iter(): Iterable<Row>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining onUpdate Callback in TableHandle in TypeScript\nDESCRIPTION: Defines the `onUpdate` callback in the `TableHandle` class, which runs when a row is updated in the client cache. This is relevant for tracking changes to data that is already present.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nclass TableHandle {\n  public onUpdate(\n    callback: (ctx: EventContext, old: Row, new: Row) => void\n  ): void;\n\n  public removeOnUpdate(\n    callback: (ctx: EventContext, old: Row, new: Row) => void\n  ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB C# Module Build and Deployment Commands\nDESCRIPTION: A series of bash commands to set up, build, and deploy a SpacetimeDB C# module. Commands include initializing a project, building it, logging in to SpacetimeDB, and publishing the module to create or update a database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nspacetime init --lang csharp my-project-directory\n```\n\n----------------------------------------\n\nTITLE: Defining Inventory, Customers, and Orders in C#\nDESCRIPTION: This C# snippet provides definitions of Inventory, Customers, and Orders table structures using attributes from the SpacetimeDB library. The attributes denote primary keys and unique constraints essential for database schema design.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Table(Name = \"Inventory\")]\n[SpacetimeDB.Index(Name = \"product_name\", BTree = [\"name\"])]\npublic partial struct Inventory\n{\n    [SpacetimeDB.PrimaryKey]\n    public long id;\n    public string name;\n    ..\n}\n\n[SpacetimeDB.Table(Name = \"Customers\")]\npublic partial struct Customers\n{\n    [SpacetimeDB.PrimaryKey]\n    public long id;\n    public string first_name;\n    public string last_name;\n    ..\n}\n\n[SpacetimeDB.Table(Name = \"Orders\")]\npublic partial struct Orders\n{\n    [SpacetimeDB.PrimaryKey]\n    public long id;\n    [SpacetimeDB.Unique]\n    public long product_id;\n    [SpacetimeDB.Unique]\n    public long customer_id;\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PrefabManager for Unity Game Object Factory\nDESCRIPTION: A singleton manager class that handles the instantiation of game prefabs including circles, food, and players. Provides static methods for spawning various game objects.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nusing SpacetimeDB.Types;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PrefabManager : MonoBehaviour\n{\n\tprivate static PrefabManager Instance;\n\n\tpublic CircleController CirclePrefab;\n\tpublic FoodController FoodPrefab;\n\tpublic PlayerController PlayerPrefab;\n\n\tprivate void Awake()\n\t{\n\t\tInstance = this;\n\t}\n\n\tpublic static CircleController SpawnCircle(Circle circle, PlayerController owner)\n\t{\n\t\tvar entityController = Instantiate(Instance.CirclePrefab);\n\t\tentityController.name = $\"Circle - {circle.EntityId}\";\n\t\tentityController.Spawn(circle, owner);\n\t\towner.OnCircleSpawned(entityController);\n\t\treturn entityController;\n\t}\n\n\tpublic static FoodController SpawnFood(Food food)\n\t{\n\t\tvar entityController = Instantiate(Instance.FoodPrefab);\n\t\tentityController.name = $\"Food - {food.EntityId}\";\n\t\tentityController.Spawn(food);\n\t\treturn entityController;\n\t}\n\n\tpublic static PlayerController SpawnPlayer(Player player)\n\t{\n\t\tvar playerController = Instantiate(Instance.PlayerPrefab);\n\t\tplayerController.name = $\"PlayerController - {player.Name}\";\n\t\tplayerController.Initialize(player);\n\t\treturn playerController;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FROM Clause Syntax for Subscriptions in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the FROM clause in subscription SQL queries, including join support limited to two tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_2\n\nLANGUAGE: ebnf\nCODE:\n```\nFROM table [ [AS] alias ] [ [INNER] JOIN table [ [AS] alias ] ON column '=' column ]\n```\n\n----------------------------------------\n\nTITLE: Finding a User by Identity in C#\nDESCRIPTION: Method to look up a User by their Identity using the remote tables interface. Returns null if the user is not found.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nUser? FindUser(RemoteTables tables, Identity id) => tables.User.Identity.Find(id);\n```\n\n----------------------------------------\n\nTITLE: EventContext reducers Field\nDESCRIPTION: Defines the `reducers` field within the `EventContext` struct. The `reducers` field of the context provides access to reducers exposed by the remote module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\n\"struct EventContext {\\n    pub reducers: RemoteReducers,\n    /* other members */\\n}\"\n```\n\n----------------------------------------\n\nTITLE: SubscriptionEventContext DB Field Definition\nDESCRIPTION: Defines the db field in the SubscriptionEventContext struct which provides access to the subscribed view of the remote database's tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_49\n\nLANGUAGE: rust\nCODE:\n```\nstruct SubscriptionEventContext {\n    pub db: RemoteTables,\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tables and Reducers in C# for SpacetimeDB\nDESCRIPTION: Basic example showing how to define a table and a reducer in a SpacetimeDB C# module. The table stores player data with an ID and name, while the reducer provides functionality to add a new player to the database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstatic partial class Module\n{\n    [SpacetimeDB.Table(Name = \"player\")]\n    public partial struct Player\n    {\n        public int Id;\n        public string Name;\n    }\n\n    [SpacetimeDB.Reducer]\n    public static void AddPerson(ReducerContext ctx, int Id, string Name) {\n        ctx.Db.player.Insert(new Player { Id = Id, Name = Name });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Access Remote Database Tables - C#\nDESCRIPTION: This property provides access to the subscribed view of the remote database's tables, enabling interaction with the cached data.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nclass EventContext {\n    public RemoteTables Db;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Identity Struct in C# for SpacetimeDB\nDESCRIPTION: Defines the Identity struct used for interacting with the database. It includes methods for creating an Identity from a hex string and converting it to a string representation.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace SpacetimeDB;\n\npublic readonly record struct Identity\n{\n    public static Identity FromHexString(string hex);\n    public string ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: Practical Zoo Animal Filter Examples in SpacetimeDB C#\nDESCRIPTION: Shows practical examples of filtering data using a zoo_animal table with a BTree index. Demonstrates various filtering approaches including filtering by species, age ranges, and name prefixes.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\npublic static partial class Module\n{\n    [SpacetimeDB.Table(Name = \"zoo_animal\")]\n    [SpacetimeDB.Index.BTree(Name = \"SpeciesAgeName\", Columns = [nameof(Species), nameof(Age), nameof(Name)])]\n    public partial struct ZooAnimal\n    {\n        public string Species;\n        public uint Age;\n        public string Name;\n        [SpacetimeDB.PrimaryKey]\n        public uint Id;\n    }\n\n    [SpacetimeDB.Reducer]\n    public static void Example(ReducerContext ctx)\n    {\n        foreach (var baboon in ctx.Db.zoo_animal.SpeciesAgeName.Filter(\"baboon\"))\n        {\n            // Work with the baboon.\n        }\n        foreach (var animal in ctx.Db.zoo_animal.SpeciesAgeName.Filter((\"b\", \"e\")))\n        {\n            // Work with the animal.\n            // The name of the species starts with a character between \"b\" and \"e\".\n        }\n        foreach (var babyBaboon in ctx.Db.zoo_animal.SpeciesAgeName.Filter((\"baboon\", 1)))\n        {\n            // Work with the baby baboon.\n        }\n        foreach (var youngBaboon in ctx.Db.zoo_animal.SpeciesAgeName.Filter((\"baboon\", (1, 5))))\n        {\n            // Work with the young baboon.\n        }\n        foreach (var babyBaboonNamedBob in ctx.Db.zoo_animal.SpeciesAgeName.Filter((\"baboon\", 1, \"Bob\")))\n        {\n            // Work with the baby baboon named \"Bob\".\n        }\n        foreach (var babyBaboon in ctx.Db.zoo_animal.SpeciesAgeName.Filter((\"baboon\", 1, (\"a\", \"f\"))))\n        {\n            // Work with the baby baboon, whose name starts with a letter between \"a\" and \"f\".\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheritance-Based Multiple Tables in SpacetimeDB\nDESCRIPTION: Shows how to create multiple tables from a single base class using inheritance. Demonstrates proper attribute usage and field declarations for derived tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\n// Define the core data structure (must be [Type] if used elsewhere)\n[Type]\npublic partial class CharacterInfo\n{\n     [PrimaryKey]\n     public ulong CharacterId; // Use public field\n     public string Name = \"\";   // Use public field\n     public ushort Level;      // Use public field\n}\n\n// Define derived classes, each with its own table attribute\n[Table(Name = \"active_characters\")]\npublic partial class ActiveCharacter : CharacterInfo { \n    // Can add specific public fields if needed\n    public bool IsOnline;\n}\n\n[Table(Name = \"deleted_characters\")]\npublic partial class DeletedCharacter : CharacterInfo { \n    // Can add specific public fields if needed\n    public Timestamp DeletionTime;\n}\n\n// Reducers would interact with ActiveCharacter or DeletedCharacter tables\n// E.g., ctx.Db.active_characters.Insert(new ActiveCharacter { CharacterId = 1, Name = \"Hero\", Level = 10, IsOnline = true });\n```\n\n----------------------------------------\n\nTITLE: Calling SpacetimeDB Reducers\nDESCRIPTION: Example of calling a reducer using the SpacetimeDB CLI with JSON-formatted arguments.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nspacetime call quickstart-chat send_message 'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Scheduling Movement Reducer in Rust\nDESCRIPTION: Schedules the `move_all_players` reducer to run every 50 milliseconds for updating game simulation. It requires insertion of a timer into the server database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nctx.db\n    .move_all_players_timer()\n    .try_insert(MoveAllPlayersTimer {\n        scheduled_id: 0,\n        scheduled_at: ScheduleAt::Interval(Duration::from_millis(50).into()),\n    })?;\n```\n\n----------------------------------------\n\nTITLE: Using Docker for SpacetimeDB CLI Commands\nDESCRIPTION: Commands demonstrating how to use the SpacetimeDB Docker image to run CLI commands without local installation. Shows building and publishing modules with volume mounting.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Example: Build a module located in the current directory (.)\n# Mount current dir to /module inside container, set working dir to /module\ndocker run --rm -v \"$(pwd):/module\" -w /module clockworklabs/spacetime build --project-path .\n\n# Example: Publish the module after building\n# Assumes a local server is running (or use --host for Maincloud/other)\ndocker run --rm -v \"$(pwd):/module\" -w /module --network host clockworklabs/spacetime publish --project-path . my-database-name\n# Note: `--network host` is often needed to connect to a local server from the container.\n```\n\n----------------------------------------\n\nTITLE: Reducer Failure Handling for Name Changes in SpacetimeDB C#\nDESCRIPTION: The snippet defines a callback, `Reducer_OnSetNameEvent`, to handle failed name change operations in SpacetimeDB. It checks for failures in the reducer event status and prints a warning message along with the error detail when name changes are rejected.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n/// Our `OnSetNameEvent` callback: print a warning if the reducer failed.\nvoid Reducer_OnSetNameEvent(ReducerEventContext ctx, string name)\n{\n    var e = ctx.Event;\n    if (e.CallerIdentity == local_identity && e.Status is Status.Failed(var error))\n    {\n        Console.Write($\"Failed to change name to {name}: {error}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Event in ErrorContext in C#\nDESCRIPTION: Shows the Event property in ErrorContext which contains the exception that caused the error callback.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionEventContext {\n    public readonly Exception Event;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Rust Dependencies for SpacetimeDB\nDESCRIPTION: Import statements for the Rust SpacetimeDB module, including necessary features like random number generation, tables, and scheduling.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse std::time::Duration;\nuse spacetimedb::{rand::Rng, Identity, SpacetimeType, ReducerContext, ScheduleAt, Table, Timestamp};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types for SpacetimeDB in C#\nDESCRIPTION: Example of custom type definitions in C# for SpacetimeDB, including structs, tagged unions (emulating Rust-style enums with data), standard enums, and type aliases. Shows the required [Type] attribute and partial keyword usage.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\nusing System; // Required for System.UInt32 if using aliases like below\n\n// Example Struct\n[Type]\npublic partial struct Position { public int X; public int Y; }\n\n// Example Tagged Union (Enum with Data) Pattern:\n// 1. Base abstract record\n[Type] public abstract partial record PlayerStatusBase { }\n// 2. Derived records for variants\n[Type] public partial record IdleStatus : PlayerStatusBase { }\n[Type] public partial record WalkingStatus : PlayerStatusBase { public Position Target; }\n[Type] public partial record FightingStatus : PlayerStatusBase { public Identity OpponentId; }\n// 3. Final type inheriting from TaggedEnum\n[Type]\npublic partial record PlayerStatus : TaggedEnum<(\n    IdleStatus Idle,\n    WalkingStatus Walking,\n    FightingStatus Fighting\n)> { }\n\n// Example Standard Enum\n[Type]\npublic enum ItemType { Weapon, Armor, Potion }\n\n// Example Type Alias\nusing PlayerScore = System.UInt32;\n```\n\n----------------------------------------\n\nTITLE: Implementing FoodController in C# for Unity\nDESCRIPTION: This code defines the FoodController class, which inherits from EntityController. It handles spawning and management of food game objects, including color assignment based on entity ID.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_17\n\nLANGUAGE: cs\nCODE:\n```\nusing SpacetimeDB.Types;\nusing Unity.VisualScripting;\nusing UnityEngine;\n\npublic class FoodController : EntityController\n{\n\tpublic static Color[] ColorPalette = new[]\n\t{\n\t\t(Color)new Color32(119, 252, 173, 255),\n\t\t(Color)new Color32(76, 250, 146, 255),\n\t\t(Color)new Color32(35, 246, 120, 255),\n\n\t\t(Color)new Color32(119, 251, 201, 255),\n\t\t(Color)new Color32(76, 249, 184, 255),\n\t\t(Color)new Color32(35, 245, 165, 255),\n\t};\n\n    public void Spawn(Food food)\n    {\n        base.Spawn(food.EntityId);\n\t\tSetColor(ColorPalette[EntityId % ColorPalette.Length]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScheduleAt Record in C# for SpacetimeDB\nDESCRIPTION: Defines the ScheduleAt record as a TaggedEnum for specifying when a scheduled reducer should execute, either at a specific point in time or at regular intervals.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace SpacetimeDB;\n\npublic partial record ScheduleAt : TaggedEnum<(TimeDuration Interval, Timestamp Time)>\n```\n\n----------------------------------------\n\nTITLE: Scheduling Movement Reducer in C#\nDESCRIPTION: Schedules the `MoveAllPlayers` reducer to run every 50 milliseconds for updating game simulation. It requires insertion of a timer into the server database via C#.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nctx.Db.move_all_players_timer.Insert(new MoveAllPlayersTimer\n{\n    scheduled_at = new ScheduleAt.Interval(TimeSpan.FromMilliseconds(50))\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Module Bindings using Spacetime CLI in Bash\nDESCRIPTION: This bash command generates client-side interfaces from server module definitions using Spacetime CLI. It expects the project path to be configured and creates necessary directories for client module bindings.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p client/src/module_bindings\nspacetime generate --lang typescript --out-dir client/src/module_bindings --project-path server\n```\n\n----------------------------------------\n\nTITLE: Calling a Reducer Function in a Database\nDESCRIPTION: Command to invoke a reducer function in a SpacetimeDB database. Takes the database name, reducer name, and JSON-formatted arguments.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nspacetime call [OPTIONS] <database> <reducer_name> [arguments]...\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Handler in C#\nDESCRIPTION: C# implementation of the client connection handler that logs when clients connect to the database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer(ReducerKind.ClientConnected)]\npublic static void Connect(ReducerContext ctx)\n{\n    Log.Info($\"{ctx.Sender} just connected.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running SpacetimeDB Server in Docker\nDESCRIPTION: Command to start a SpacetimeDB server instance in Docker. Maps port 3000 to the host to allow external connections.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# This command starts a SpacetimeDB server instance in Docker\ndocker run --rm --pull always -p 3000:3000 clockworklabs/spacetime start \n# Note: While the CLI can be installed separately (see above), you can also execute \n# CLI commands *within* the running Docker container (e.g., using `docker exec`) \n# or use the image as a base for a custom image containing your module management tools.\n```\n\n----------------------------------------\n\nTITLE: Deleting a Row using ITableView.Delete in C#\nDESCRIPTION: This code snippet shows the `Delete` method of the `ITableView` interface. It demonstrates deleting a row from the table and returning `true` if the row was present and deleted, or `false` otherwise. It also mentions that an exception is thrown if deleting the row would violate any constraints.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nbool Delete(Row row);\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorContext in TypeScript\nDESCRIPTION: Defines the `ErrorContext` class which extends `DbContext`, adding an `event` field to represent errors during database operations. This context is utilized in error handling callbacks.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nclass ErrorContext {\n  public event: Error\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SpacetimeDB Dependencies in Rust\nDESCRIPTION: Required imports for a SpacetimeDB module in Rust, including table and reducer macros and core types.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{table, reducer, Table, ReducerContext, Identity, Timestamp};\n```\n\n----------------------------------------\n\nTITLE: Implementing User Input Handling in C#\nDESCRIPTION: This snippet defines functions for handling user input. It includes an InputLoop for reading commands from standard input and a ProcessCommands function for processing these commands, supporting message sending and name setting.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n/// Read each line of standard input, and either set our name or send a message as appropriate.\nvoid InputLoop()\n{\n    while (true)\n    {\n        var input = Console.ReadLine();\n        if (input == null)\n        {\n            break;\n        }\n\n        if (input.StartsWith(\"/name \"))\n        {\n            input_queue.Enqueue((\"name\", input[6..]));\n            continue;\n        }\n        else\n        {\n            input_queue.Enqueue((\"message\", input));\n        }\n    }\n}\n\nvoid ProcessCommands(RemoteReducers reducers)\n{\n    // process input queue commands\n    while (input_queue.TryDequeue(out var command))\n    {\n        switch (command.Command)\n        {\n            case \"message\":\n                reducers.SendMessage(command.Args);\n                break;\n            case \"name\":\n                reducers.SetName(command.Args);\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table with Unique and Primary Key Columns in C#\nDESCRIPTION: Demonstrates how to create a table struct with unique and primary key annotations for defining column constraints and identification in SpacetimeDB\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Table(Name = \"citizen\")]\npublic partial struct Citizen {\n    [SpacetimeDB.PrimaryKey]\n    ulong Id;\n\n    [SpacetimeDB.Unique]\n    string Ssn;\n\n    [SpacetimeDB.Unique]\n    string Email;\n\n    string name;\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext try_identity Method\nDESCRIPTION: Defines the `try_identity` method for the `DbContext` trait. Like `DbContext::identity`, but returns `None` instead of panicking if the `Identity` is not yet available.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\n\"trait DbContext {\\n    fn try_identity(&self) -> Option<Identity>;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Example Schema Response - Spacetime Database Schema JSON\nDESCRIPTION: Example response from the /schema endpoint showing the default module structure generated by spacetime init. Includes type definitions, tables, reducers, and security configurations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typespace\": {\n    \"types\": [\n      {\n        \"Product\": {\n          \"elements\": [\n            {\n              \"name\": {\n                \"some\": \"name\"\n              },\n              \"algebraic_type\": {\n                \"String\": []\n              }\n            }\n          ]\n        }\n      }\n    ]\n  },\n  \"tables\": [\n    {\n      \"name\": \"person\",\n      \"product_type_ref\": 0,\n      \"primary_key\": [],\n      \"indexes\": [],\n      \"constraints\": [],\n      \"sequences\": [],\n      \"schedule\": {\n        \"none\": []\n      },\n      \"table_type\": {\n        \"User\": []\n      },\n      \"table_access\": {\n        \"Private\": []\n      }\n    }\n  ],\n  \"reducers\": [\n    {\n      \"name\": \"add\",\n      \"params\": {\n        \"elements\": [\n          {\n            \"name\": {\n              \"some\": \"name\"\n            },\n            \"algebraic_type\": {\n              \"String\": []\n            }\n          }\n        ]\n      },\n      \"lifecycle\": {\n        \"none\": []\n      }\n    },\n    {\n      \"name\": \"identity_connected\",\n      \"params\": {\n        \"elements\": []\n      },\n      \"lifecycle\": {\n        \"some\": {\n          \"OnConnect\": []\n        }\n      }\n    },\n    {\n      \"name\": \"identity_disconnected\",\n      \"params\": {\n        \"elements\": []\n      },\n      \"lifecycle\": {\n        \"some\": {\n          \"OnDisconnect\": []\n        }\n      }\n    },\n    {\n      \"name\": \"init\",\n      \"params\": {\n        \"elements\": []\n      },\n      \"lifecycle\": {\n        \"some\": {\n          \"Init\": []\n        }\n      }\n    },\n    {\n      \"name\": \"say_hello\",\n      \"params\": {\n        \"elements\": []\n      },\n      \"lifecycle\": {\n        \"none\": []\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": {\n        \"scope\": [],\n        \"name\": \"Person\"\n      },\n      \"ty\": 0,\n      \"custom_ordering\": true\n    }\n  ],\n  \"misc_exports\": [],\n  \"row_level_security\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Row Count using ITableView.Count in C#\nDESCRIPTION: This snippet shows the `Count` property of the `ITableView` interface. It represents the number of rows in the table, considering modifications from the current transaction, which includes insertions, deletions, and updates.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nulong Count { get; }\n```\n\n----------------------------------------\n\nTITLE: Viewing SpacetimeDB Database Logs\nDESCRIPTION: Command to print logs from a SpacetimeDB database. Includes options for controlling the number of lines, following logs in real-time, and formatting output.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nspacetime logs [OPTIONS] <database>\n```\n\n----------------------------------------\n\nTITLE: Accessing Reducers via SubscriptionEventContext in C#\nDESCRIPTION: Shows how SubscriptionEventContext provides access to reducers exposed by the remote module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionEventContext {\n    public RemoteReducers Reducers;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Let's Encrypt Certificate Renewal\nDESCRIPTION: Command to perform a dry run of the Let's Encrypt certificate renewal process to identify any potential issues.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nsudo certbot renew --dry-run\n```\n\n----------------------------------------\n\nTITLE: Counting Players at a Specific Level in C#\nDESCRIPTION: Method that uses a BTree index to filter and count players at a specific level. This demonstrates efficient querying using predefined indexes.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nint CountPlayersAtLevel(RemoteTables tables, uint level) => tables.Player.Level.Filter(level).Count();\n```\n\n----------------------------------------\n\nTITLE: Connection Callback Registration\nDESCRIPTION: Method to register a callback that executes when the connection is established successfully.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnectionBuilder {\n    fn on_connect(self, callback: impl FnOnce(&DbConnection, Identity, &str)) -> DbConnectionBuilder;\n}\n```\n\n----------------------------------------\n\nTITLE: DbConnection Class Fields Definition\nDESCRIPTION: Core fields of the DbConnection class providing access to remote tables and reducers.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass DbConnection {\n  public db: RemoteTables\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass DbConnection {\n  public reducers: RemoteReducers\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Username from Identity in TypeScript\nDESCRIPTION: This code snippet computes the name of the user from their Identity for display, providing a fallback to a substring of the identity if the name is not available.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst name =\n  users.get(identity?.toHexString())?.name ||\n  identity?.toHexString().substring(0, 8) ||\n  'unknown';\n```\n\n----------------------------------------\n\nTITLE: Defining TimeDuration Struct in C# for SpacetimeDB\nDESCRIPTION: Defines the TimeDuration struct representing an interval between two Timestamps. It includes properties and methods for duration-related operations and conversions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace SpacetimeDB;\n\npublic record struct TimeDuration(long Microseconds) : IStructuralReadWrite {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Log Level Constants in Rust for SpacetimeDB\nDESCRIPTION: Defines constants for different log levels in the SpacetimeDB Module ABI, including error, warn, info, debug, trace, and panic levels. The panic level (101) is emitted just before a fatal error causes the WASM module to trap.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/webassembly-abi/index.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// The error log level.\nconst LOG_LEVEL_ERROR: u8 = 0;\n/// The warn log level.\nconst LOG_LEVEL_WARN: u8 = 1;\n/// The info log level.\nconst LOG_LEVEL_INFO: u8 = 2;\n/// The debug log level.\nconst LOG_LEVEL_DEBUG: u8 = 3;\n/// The trace log level.\nconst LOG_LEVEL_TRACE: u8 = 4;\n/// The panic log level.\n///\n/// A panic level is emitted just before\n/// a fatal error causes the WASM module to trap.\nconst LOG_LEVEL_PANIC: u8 = 101;\n```\n\n----------------------------------------\n\nTITLE: SubscriptionHandle unsubscribe Method\nDESCRIPTION: Defines the `unsubscribe` method for the `SubscriptionHandle` struct. This method terminates the subscription, causing matching rows to be removed from the client cache. It returns an error if the subscription has already ended.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\n\"impl SubscriptionHandle {\\n    fn unsubscribe(&self) -> Result<(), spacetimedb_sdk::Error>;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Reducers via ErrorContext in C#\nDESCRIPTION: Shows how ErrorContext provides access to reducers exposed by the remote database through the Reducers property.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nclass ErrorContext {\n    public RemoteReducers Reducers;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling RLS in Rust Modules via Cargo.toml\nDESCRIPTION: Demonstrates how to enable the experimental Row Level Security feature in a Rust module by adding the 'unstable' feature to the SpacetimeDB dependency in Cargo.toml.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nspacetimedb = { version = \"...\", features = [\"unstable\"] }\n```\n\n----------------------------------------\n\nTITLE: SubscriptionHandle Type Definition\nDESCRIPTION: Defines the `SubscriptionHandle` type alias from the `module_bindings` module. This handle represents a subscribed query or a group of subscribed queries within the SpacetimeDB client.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\n\"module_bindings::SubscriptionHandle\"\n```\n\n----------------------------------------\n\nTITLE: Subscription Builder Methods\nDESCRIPTION: Methods for configuring and managing database query subscriptions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DbContext {\n  subscriptionBuilder(): SubscriptionBuilder\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionBuilder {\n  public onApplied(\n    callback: (ctx: SubscriptionEventContext) => void\n  ): SubscriptionBuilder\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionBuilder {\n  public onError(\n    callback: (ctx: ErrorContext, error: Error) => void\n  ): SubscriptionBuilder\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionBuilder {\n  subscribe(queries: string | string[]): SubscriptionHandle\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionBuilder {\n  subscribeToAllTables(): void\n}\n```\n\n----------------------------------------\n\nTITLE: Status Enum Declaration for Reducer Execution Results\nDESCRIPTION: Defines the Status enum which represents the possible outcomes of a reducer execution: successful commitment, failure with an error message, or abortion due to insufficient energy.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_42\n\nLANGUAGE: rust\nCODE:\n```\nspacetimedb_sdk::Status\n```\n\n----------------------------------------\n\nTITLE: ReducerEventContext Reducers Field for Remote Reducer Access\nDESCRIPTION: Defines the reducers field in the ReducerEventContext struct which provides access to reducers exposed by the remote module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_48\n\nLANGUAGE: rust\nCODE:\n```\nstruct ReducerEventContext {\n    pub reducers: RemoteReducers,\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame-Based Connection Processing in Rust\nDESCRIPTION: Method for non-blocking connection processing suitable for frame-based applications like games. Processes available messages and returns connection status.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnection {\n    fn frame_tick(&self) -> Result<(), spacetimedb_sdk::Error>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SELECT Clause Syntax for Queries in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the SELECT clause in query SQL, including support for individual column projections and aggregations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_7\n\nLANGUAGE: ebnf\nCODE:\n```\nprojection\n    = '*'\n    | table '.' '*'\n    | projExpr { ',' projExpr }\n    | aggExpr\n    ;\n\nprojExpr\n    = column [ [ AS ] alias ]\n    ;\n\naggExpr\n    = COUNT '(' '*' ')' [AS] alias\n    ;\n```\n\n----------------------------------------\n\nTITLE: UpdateStatus Type Definition\nDESCRIPTION: Type definition for UpdateStatus showing possible states of reducer execution.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype UpdateStatus =\n  | { tag: 'Committed'; value: __DatabaseUpdate }\n  | { tag: 'Failed'; value: string }\n  | { tag: 'OutOfEnergy' };\n```\n\n----------------------------------------\n\nTITLE: Registering OnInsert Callback in RemoteTableHandle in C#\nDESCRIPTION: Shows how to define and register a callback that runs when a new row is inserted into the client cache.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nclass RemoteTableHandle\n{\n    public delegate void RowEventHandler(EventContext context, Row row);\n    public event RowEventHandler? OnInsert;\n}\n```\n\n----------------------------------------\n\nTITLE: Committed Status Variant for Successful Reducer Execution\nDESCRIPTION: Represents the Status variant for when a reducer successfully returns and its changes are committed to the database state.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_43\n\nLANGUAGE: rust\nCODE:\n```\nspacetimedb_sdk::Status::Committed\n```\n\n----------------------------------------\n\nTITLE: Implementing Disconnect Method in Rust\nDESCRIPTION: Method implementation for gracefully closing database connections with error handling.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\ntrait DbContext {\n    fn disconnect(&self) -> spacetimedb_sdk::Result<()>;\n}\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB CLI Migration Verification Commands\nDESCRIPTION: Series of CLI commands demonstrating the incremental migration process, showing how data is maintained in both old and new table schemas while new features are added. Includes SQL queries and reducer calls to verify data consistency.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/how-to/incremental-migrations.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Our row in `character` still exists:\n$ spacetime sql incr-migration-demo 'SELECT * FROM character'\n\n player_id | nickname | level | class\n-----------+----------+-------+----------------\n <snip>    | \"Gefjon\" | 2     | (Fighter = ())\n\n# We haven't triggered the \"Gefjon\" row to migrate yet, so `character_v2` is empty:\n$ spacetime sql -s local incr-migration-demo 'SELECT * FROM character_v2'\n\n player_id | nickname | level | class | alliance\n-----------+----------+-------+-------+----------\n\n# Accessing our character, e.g. by leveling up, will cause it to migrate into `character_v2`:\n$ spacetime call incr-migration-demo level_up_character\n\n2025-01-07T16:00:20.500600Z  INFO: src/lib.rs:110: Leveling up Gefjon from 2 to 3\n\n# Now `character_v2` is populated:\n$ spacetime sql incr-migration-demo 'SELECT * FROM character_v2'\n\n player_id | nickname | level | class          | alliance\n-----------+----------+-------+----------------+----------------\n <snip>    | \"Gefjon\" | 3     | (Fighter = ()) | (Neutral = ()) \n\n# The original row in `character` still got updated by `level_up_character`,\n# so outdated clients can continue to function:\n$ spacetime sql incr-migration-demo 'SELECT * FROM character'\n\n player_id | nickname | level | class\n-----------+----------+-------+----------------\n <snip>    | \"Gefjon\" | 3     | (Fighter = ())\n\n# We can set our alliance:\n$ spacetime call incr-migration-demo choose_alliance '{ \"Good\": {} }'\n\n2025-01-07T16:13:53.816501Z  INFO: src/lib.rs:129: Setting alliance of Gefjon to Good\n\n# And that change shows up in `character_v2`:\n$ spacetime sql incr-migration-demo 'SELECT * FROM character_v2'\n\n player_id | nickname | level | class          | alliance\n-----------+----------+-------+----------------+-------------\n <snip>    | \"Gefjon\" | 3     | (Fighter = ()) | (Good = ())\n\n# But `character` is not changed, since it doesn't know about alliances:\n$ spacetime sql incr-migration-demo 'SELECT * FROM character'\n\n player_id | nickname | level | class\n-----------+----------+-------+----------------\n <snip>    | \"Gefjon\" | 3     | (Fighter = ())\n```\n\n----------------------------------------\n\nTITLE: Rust Module Example for Violating Memory Safety Rules in WASM\nDESCRIPTION: Demonstrates how WASM memory access can violate language-specific memory safety rules without causing undefined behavior in WASM itself. This example shows writing beyond the allocated buffer in Rust, which could overwrite adjacent memory.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/webassembly-abi/index.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let mut bytes = [0u8; 12];\n    let other_bytes = [0u8; 4];\n    unsafe { ffi_func_with_out_ptr_and_len(&mut bytes as *mut u8, 16); }\n    assert_eq!(other_bytes, [0u8; 4]);\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext Fields Implementation\nDESCRIPTION: Field implementations for accessing database views and reducers in the DbContext interface.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DbContext {\n  db: DbView\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DbContext {\n  reducers: Reducers\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DbContext {\n  disconnect(): void\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Database via ErrorContext in C#\nDESCRIPTION: Shows how ErrorContext provides access to the client cache through the Db property.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nclass ErrorContext {\n    public RemoteTables Db;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: ReducerEventContext Event Field Definition\nDESCRIPTION: Defines the event field in the ReducerEventContext struct which contains a ReducerEvent with metadata about the executed reducer.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_46\n\nLANGUAGE: rust\nCODE:\n```\nstruct ReducerEventContext {\n    pub event: spacetimedb_sdk::ReducerEvent<module_bindings::Reducer>,\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Connection Processing in Rust\nDESCRIPTION: Asynchronous method for continuous connection processing that awaits when idle and handles connection state changes with proper error handling.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnection {\n    async fn run_async(&self) -> Result<(), spacetimedb_sdk::Error>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Identifiers in SQL\nDESCRIPTION: This SQL snippet includes examples of how to properly use identifiers, showcasing the need to quote keywords and special characters. It aims to prevent conflicts and ensure accurate SQL syntax.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\n-- `ORDER` is a sql keyword and therefore needs to be quoted\nSELECT * FROM \"Order\"\n\n-- A table containing '$' needs to be quoted as well\nSELECT * FROM \"Balance$\"\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Errors in Rust with SpacetimeDB\nDESCRIPTION: This callback function handles subscription errors by printing the error message and exiting the process. It's important for detecting and responding to subscription failures.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nfn on_sub_error(_ctx: &ErrorContext, err: Error) {\n    eprintln!(\"Subscription failed: {}\", err);\n    std::process::exit(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OnDelete Callback in RemoteTableHandle in C#\nDESCRIPTION: Shows how to define and register a callback that runs when a row is deleted from the client cache.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nclass RemoteTableHandle\n{\n    public delegate void RowEventHandler(EventContext context, Row row);\n    public event RowEventHandler? OnDelete;\n}\n```\n\n----------------------------------------\n\nTITLE: Reducer Type Example\nDESCRIPTION: Example type definition showing the structure of a Reducer with multiple variants.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\ntype Reducer =\n  | { name: 'ReducerA'; args: ReducerA }\n  | { name: 'ReducerB'; args: ReducerB }\n```\n\n----------------------------------------\n\nTITLE: Reducer Status Record - C#\nDESCRIPTION: This record defines possible statuses for a reducer execution, providing information on whether it was committed, failed, or out of energy.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nrecord Status : TaggedEnum<(\n    Unit Committed,\n    string Failed,\n    Unit OutOfEnergy\n)>;\n\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries in SpacetimeDB\nDESCRIPTION: Example of running SQL queries to retrieve data from SpacetimeDB tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nspacetime sql quickstart-chat \"SELECT * FROM message\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Table Attributes on Single Class in SpacetimeDB\nDESCRIPTION: Demonstrates how to map a single class to multiple tables using multiple Table attributes. Shows configuration for shared data structure across different table contexts.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\n// Define the core data structure once\n// Apply multiple [Table] attributes to map it to different tables\n[Type] // Mark as a type if used elsewhere (e.g., reducer args)\n[Table(Name = \"logged_in_players\", Public = true)]\n[Table(Name = \"players_in_lobby\", Public = true)]\npublic partial class PlayerSessionData\n{\n    [PrimaryKey]\n    public Identity PlayerId; // Use public field\n    [Unique]\n    [AutoInc]\n    public ulong SessionId; // Use public field\n    public Timestamp LastActivity;\n}\n\n// Reducers would interact with the specific table handles:\n// E.g., ctx.Db.logged_in_players.Insert(new PlayerSessionData { ... });\n// E.g., var lobbyPlayer = ctx.Db.players_in_lobby.PlayerId.Find(someId);\n```\n\n----------------------------------------\n\nTITLE: Event::UnsubscribeApplied Variant\nDESCRIPTION: Defines the `UnsubscribeApplied` variant of the `Event` enum. This variant represents the event when our subscription is removed after a call to `SubscriptionHandle::unsubscribe` or `SubscriptionHandle::unsubscribe_then` and its matching rows are deleted from the client cache.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_39\n\nLANGUAGE: rust\nCODE:\n```\n\"spacetimedb_sdk::Event::UnsubscribeApplied\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Methods\nDESCRIPTION: Implementation of methods for subscribing to specific queries and all tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionBuilder\n{\n    public SubscriptionHandle Subscribe(string[] querySqls);\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionBuilder\n{\n    public void SubscribeToAllTables();\n}\n```\n\n----------------------------------------\n\nTITLE: OnConnectError Callback Registration for DbConnectionBuilder\nDESCRIPTION: Method for registering a callback that runs when a connection attempt to a SpacetimeDB database fails. Note: there is a known bug where this may not be invoked.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnectionBuilder<DbConnection>\n{\n    public DbConnectionBuilder<DbConnection> OnConnectError(Action<ErrorContext, SpacetimeDbException> callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for SpacetimeDB\nDESCRIPTION: Nginx server configuration that sets up a reverse proxy to SpacetimeDB running locally on port 3000. It includes WebSocket support and restricts the publish endpoint to local connections for security.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name example.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header Host $host;\n    }\n\n    # This restricts who can publish new databases to your SpacetimeDB instance. We recommend\n    # restricting this ability to local connections. \n    location /v1/publish {\n        allow 127.0.0.1;\n        deny all;\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header Host $host;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ReducerEventContext DB Field Implementation\nDESCRIPTION: Definition of the db field in ReducerEventContext for accessing client cache.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nclass ReducerEventContext {\n  public db: RemoteTables\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Connection Reducer\nDESCRIPTION: Handles player connection logic by either moving a logged-out player to the active player table or creating a new player entry\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer(client_connected)]\npub fn connect(ctx: &ReducerContext) -> Result<(), String> {\n    if let Some(player) = ctx.db.logged_out_player().identity().find(&ctx.sender) {\n        ctx.db.player().insert(player.clone());\n        ctx.db\n            .logged_out_player()\n            .identity()\n            .delete(&player.identity);\n    } else {\n        ctx.db.player().try_insert(Player {\n            identity: ctx.sender,\n            player_id: 0,\n            name: String::new(),\n        })?;\n    }\n    Ok(())\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer(ReducerKind.ClientConnected)]\npublic static void Connect(ReducerContext ctx)\n{\n    var player = ctx.Db.logged_out_player.identity.Find(ctx.Sender);\n    if (player != null)\n    {\n        ctx.Db.player.Insert(player.Value);\n        ctx.Db.logged_out_player.identity.Delete(player.Value.identity);\n    }\n    else\n    {\n        ctx.Db.player.Insert(new Player\n        {\n            identity = ctx.Sender,\n            name = \"\",\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EventContext Event Field Implementation\nDESCRIPTION: Definition of the event field in EventContext class that describes the cause of row callbacks.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventContext {\n  public event: Event<Reducer>\n}\n/* other fields */\n```\n\n----------------------------------------\n\nTITLE: Event::Reducer Variant\nDESCRIPTION: Defines the `Reducer` variant of the `Event` enum. This variant represents the event when we are notified that a reducer ran in the remote database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\n\"spacetimedb_sdk::Event::Reducer(spacetimedb_sdk::ReducerEvent<module_bindings::Reducer>)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Cargo.toml\nDESCRIPTION: Adds the required dependencies 'spacetimedb-sdk' and 'hex' to the client's Cargo.toml file.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nspacetimedb-sdk = \"1.0\"\nhex = \"0.4\"\n```\n\n----------------------------------------\n\nTITLE: Database Publication Success Response Format\nDESCRIPTION: JSON structure returned when successfully publishing a database. The response includes the database identity and whether it was created or updated.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ \"Success\": {\n    \"database_identity\": string,\n    \"op\": \"created\" | \"updated\"\n} }\n```\n\n----------------------------------------\n\nTITLE: Registering OnUpdate Callback in RemoteTableHandle in C#\nDESCRIPTION: Shows how to define and register a callback that runs when a row in the client cache is updated with a new version.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nclass RemoteTableHandle\n{\n    public delegate void RowEventHandler(EventContext context, Row row);\n    public event RowEventHandler? OnUpdate;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReducerEventContext in TypeScript\nDESCRIPTION: Defines the `ReducerEventContext` class, which includes a field for accessing remote reducers. This context is essential for managing reducer functions triggered by events in the remote database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass ReducerEventContext {\n  public reducers: RemoteReducers\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext Interface Definition\nDESCRIPTION: Generic interface implemented by connection contexts providing database access and configuration capabilities.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DbContext<\n    DbView,\n    Reducers,\n>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Unsubscribe Operation - C#\nDESCRIPTION: This method terminates a subscription and executes an onEnded callback once the matching rows are removed from the client cache. It handles errors if the subscription has previously ended.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionHandle\n{\n    public void UnsubscribeThen(Action<SubscriptionEventContext>? onEnded);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Disconnection Reducer\nDESCRIPTION: Handles player disconnection by moving the active player to the logged out table\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer(client_disconnected)]\npub fn disconnect(ctx: &ReducerContext) -> Result<(), String> {\n    let player = ctx\n        .db\n        .player()\n        .identity()\n        .find(&ctx.sender)\n        .ok_or(\"Player not found\")?;\n    let player_id = player.player_id;\n    ctx.db.logged_out_player().insert(player);\n    ctx.db.player().identity().delete(&ctx.sender);\n\n    Ok(())\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer(ReducerKind.ClientDisconnected)]\npublic static void Disconnect(ReducerContext ctx)\n{\n    var player = ctx.Db.player.identity.Find(ctx.Sender) ?? throw new Exception(\"Player not found\");\n    ctx.Db.logged_out_player.Insert(player);\n    ctx.Db.player.identity.Delete(player.identity);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SpacetimeDB SDK Components in TypeScript\nDESCRIPTION: Shows how to import the necessary generated types and SDK components from both the SpacetimeDB SDK and generated module bindings.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// Import SDK core types\nimport { Identity, Status } from \"@clockworklabs/spacetimedb-sdk\";\n// Import generated connection class, event contexts, and table types\nimport { DbConnection, EventContext, ReducerEventContext, Message, User } from \"./module_bindings\"; \n// Reducer functions are accessed via conn.reducers\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DELETE Statement Usage\nDESCRIPTION: Provides examples of using the DELETE statement to remove rows from a table, with and without a WHERE clause.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n-- Delete all rows\nDELETE FROM Inventory;\n\n-- Delete all rows with a specific item_id\nDELETE FROM Inventory WHERE item_id = 1;\n```\n\n----------------------------------------\n\nTITLE: EventContext DB Field Implementation\nDESCRIPTION: Definition of the db field that provides access to subscribed view of remote database tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventContext {\n  public db: RemoteTables\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing SpacetimeDB Logs\nDESCRIPTION: Command for viewing the logs of a SpacetimeDB module to verify reducer execution.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nspacetime logs quickstart-chat\n```\n\n----------------------------------------\n\nTITLE: Grouping Subscriptions by Lifetime in Rust\nDESCRIPTION: Demonstrates how to organize subscriptions based on their lifetime in the application. Shows separation between global and level-specific subscriptions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet conn: DbConnection = connect_to_db();\n\n// Never need to unsubscribe from global subscriptions\nlet global_subscriptions = conn\n    .subscription_builder()\n    .subscribe([\n        // Global messages the client should always display\n        \"SELECT * FROM announcements\",\n        // A description of rewards for in-game achievements\n        \"SELECT * FROM badges\",\n    ]);\n\n// May unsubscribe to shop_items as player advances\nlet shop_subscription = conn\n    .subscription_builder()\n    .subscribe([\n        \"SELECT * FROM shop_items WHERE required_level <= 5\",\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Defining Identity Type for Client Identification in SpacetimeDB Rust SDK\nDESCRIPTION: Declares the Identity type used as a unique public identifier for clients connected to a SpacetimeDB database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_56\n\nLANGUAGE: rust\nCODE:\n```\nspacetimedb_sdk::Identity\n```\n\n----------------------------------------\n\nTITLE: Defining Generic RemoteTableHandle in C#\nDESCRIPTION: Shows the generic definition of RemoteTableHandle with type parameters for EventContext and Row types.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nclass RemoteTableHandle<EventContext, Row>\n{\n    /* members */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Database Context Trait in Rust\nDESCRIPTION: Module-specific trait extending DbContext with associated type constraints for specific module implementations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\ntrait module_bindings::RemoteDbContext\n    : spacetimedb_sdk::DbContext</* Associated type constraints */> {}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Subscription - C#\nDESCRIPTION: This method terminates a subscription, removing matching rows from the client cache and invoking OnDelete callbacks for them. It supports asynchronous operations and returns an error if the subscription has already ended.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionHandle\n{\n    public void Unsubscribe();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reducer Access Method in Rust\nDESCRIPTION: Trait method implementation for accessing reducers in generic contexts.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\ntrait DbContext {\n    fn reducerrs(&self) -> &Self::Reducers;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Spacetime Bindings for Unity C#\nDESCRIPTION: This shell command generates C# bindings for the Spacetime project, outputting them to the Unity project's Assets/autogen directory.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nspacetime generate --lang csharp --out-dir ../client-unity/Assets/autogen\n```\n\n----------------------------------------\n\nTITLE: Multi-Column B-Tree Index Definition\nDESCRIPTION: Shows how to create B-Tree indexes on multiple columns using SpacetimeDB annotations in table structs\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Table(Name = \"paper\")]\n[SpacetimeDB.Index.BTree(Name = \"TitleAndDate\", Columns = [nameof(Title), nameof(Date)])]\n[SpacetimeDB.Index.BTree(Name = \"UrlAndCountry\", Columns = [nameof(Url), nameof(Country)])]\npublic partial struct AcademicPaper {\n    public string Title;\n    public string Url;\n    public string Date;\n    public string Venue;\n    public string Country;\n}\n```\n\n----------------------------------------\n\nTITLE: ReducerEventContext Event Field Implementation\nDESCRIPTION: Definition of the event field in ReducerEventContext class containing reducer metadata.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nclass ReducerEventContext {\n  public event: ReducerEvent<Reducer>\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a SpacetimeDB Database\nDESCRIPTION: Command for creating and updating a SpacetimeDB database. Includes options for handling existing data, specifying build options, and project paths.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspacetime publish [OPTIONS] [name|identity]\n```\n\n----------------------------------------\n\nTITLE: Defining ReducerEventContext Class Structure in C#\nDESCRIPTION: Definition of the ReducerEventContext class showing the Event property which contains metadata about the reducer that ran.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nclass ReducerEventContext {\n    public readonly ReducerEvent<Reducer> Event;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Table Data in Rust and SQL\nDESCRIPTION: Demonstrates how to find rows in a table using unique or primary key columns, showing both Rust implementation and equivalent SQL query. Includes meta-variable syntax for customizable elements.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/STYLE.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nctx.db.{table}.{column}().find({value})\n```\n\nLANGUAGE: rust\nCODE:\n```\nctx.db.people().name().find(\"Billy\")\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM {table} WHERE {column} = {value}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionId Type for Client Connections in SpacetimeDB Rust SDK\nDESCRIPTION: Declares the ConnectionId type as an opaque identifier for client connections to a SpacetimeDB database, used to differentiate between connections from the same Identity.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_57\n\nLANGUAGE: rust\nCODE:\n```\nspacetimedb_sdk::ConnectionId\n```\n\n----------------------------------------\n\nTITLE: Managing Connection Loop in SpacetimeDB Rust Client\nDESCRIPTION: Shows different approaches to manage the connection loop including threaded, async, and manual tick options. The example demonstrates the threaded approach for background message processing.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\n// Example using run_threaded\nfn main() {\n    let connection = connect_to_db();\n    let handle = connection.run_threaded(); // Spawns background thread\n    \n    // Main thread can now do other work, like handling user input\n    // handle_user_input(&connection);\n\n    handle.join().expect(\"Connection thread panicked\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Reducer Access Structure in Rust\nDESCRIPTION: Structure definition showing reducer access through the reducers field in DbConnection.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nstruct DbConnection {\n    pub reducers: RemoteReducers,\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Update Pattern in C#\nDESCRIPTION: C# implementation of the recommended pattern for updating subscriptions, showing how to create new subscriptions before removing old ones.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar conn = ConnectToDB();\n\n// Initial subscription: player at level 5.\nvar shopSubscription = conn\n    .SubscriptionBuilder()\n    .Subscribe(new string[] {\n        // For displaying the price of shop items in the player's currency of choice\n        \"SELECT * FROM exchange_rates\",\n        \"SELECT * FROM shop_items WHERE required_level <= 5\"\n    });\n\n// New subscription: player now at level 6, which overlaps with the previous query.\nvar newShopSubscription = conn\n    .SubscriptionBuilder()\n    .Subscribe(new string[] {\n        // For displaying the price of shop items in the player's currency of choice\n        \"SELECT * FROM exchange_rates\",\n        \"SELECT * FROM shop_items WHERE required_level <= 6\"\n    });\n\n// Unsubscribe from the old subscription once the new one is in place.\nif (shopSubscription.IsActive)\n{\n    shopSubscription.Unsubscribe();\n}\n```\n\n----------------------------------------\n\nTITLE: OnDisconnect Callback Registration for DbConnectionBuilder\nDESCRIPTION: Method for registering a callback that runs when a DbConnection disconnects from a SpacetimeDB database, either intentionally or due to an error.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnectionBuilder<DbConnection>\n{\n    public DbConnectionBuilder<DbConnection> OnDisconnect(Action<ErrorContext, SpacetimeDbException> callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SpacetimeDB C# Module Project\nDESCRIPTION: Command to initialize a new SpacetimeDB C# module project using the spacetime CLI.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspacetime init --lang csharp server\n```\n\n----------------------------------------\n\nTITLE: Accessing Database via SubscriptionEventContext in C#\nDESCRIPTION: Shows how SubscriptionEventContext provides access to the subscribed view of remote database tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionEventContext {\n    public RemoteTables Db;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Reducers Property in DbConnection\nDESCRIPTION: Property definition for accessing reducers exposed by the remote database module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnection\n{\n    public RemoteReducers Reducers;\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: ErrorContext DB Field for Client Cache Access\nDESCRIPTION: Defines the db field in the ErrorContext struct which provides access to the subscribed view of the remote database's tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_52\n\nLANGUAGE: rust\nCODE:\n```\nstruct ErrorContext {\n    pub db: RemoteTables,\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext connection_id Method\nDESCRIPTION: Defines the `connection_id` method for the `DbContext` trait. This method gets the `ConnectionId` with which SpacetimeDB identifies the connection.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\n\"trait DbContext {\\n    fn connection_id(&self) -> ConnectionId;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: ProductType JSON Structure\nDESCRIPTION: Defines the structure for ProductType and its elements, including optional field naming.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sats-json.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// ProductType:\n{\n    \"elements\": array<ProductTypeElement>,\n}\n\n// ProductTypeElement:\n{\n    \"algebraic_type\": AlgebraicType,\n    \"name\": { \"some\": string } | { \"none\": [] }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Vector Type in Rust for SpacetimeDB\nDESCRIPTION: Definition of a DbVector2 type in Rust for storing 2D positions in SpacetimeDB tables, implementing the SpacetimeType trait.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// This allows us to store 2D points in tables.\n#[derive(SpacetimeType, Clone, Debug)]\npub struct DbVector2 {\n    pub x: f32,\n    pub y: f32,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Player Table Structure in Rust\nDESCRIPTION: Creates a table structure for storing player data with identity as primary key, auto-incrementing player_id, and name fields. Uses SpacetimeDB table attributes for configuration.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::table(name = player, public)]\n#[derive(Debug, Clone)]\npub struct Player {\n    #[primary_key]\n    identity: Identity,\n    #[unique]\n    #[auto_inc]\n    player_id: u32,\n    name: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Calling SpacetimeDB Reducers via CLI\nDESCRIPTION: Example of calling a reducer function through the SpacetimeDB CLI with a message parameter.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nspacetime call quickstart-chat SendMessage \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Game Configuration - C#\nDESCRIPTION: C# implementation of the init reducer for setting up game configuration and food spawning timer. Configures world size and periodic food spawning.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Reducer(ReducerKind.Init)]\npublic static void Init(ReducerContext ctx)\n{\n    Log.Info($\"Initializing...\");\n    ctx.Db.config.Insert(new Config { world_size = 1000 });\n    ctx.Db.spawn_food_timer.Insert(new SpawnFoodTimer\n    {\n        scheduled_at = new ScheduleAt.Interval(TimeSpan.FromMilliseconds(500))\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Vector Type in C# for SpacetimeDB\nDESCRIPTION: Definition of a DbVector2 type in C# for storing 2D positions in SpacetimeDB tables, implementing the SpacetimeDB.Type attribute.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// This allows us to store 2D points in tables.\n[SpacetimeDB.Type]\npublic partial struct DbVector2\n{\n    public float x;\n    public float y;\n\n    public DbVector2(float x, float y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building SpacetimeDB Modules\nDESCRIPTION: Command to compile a SpacetimeDB module into WebAssembly. This should be run from the parent directory of the module folder.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Run from the directory containing your module folder\nspacetime build --project-path my_server_module \n```\n\n----------------------------------------\n\nTITLE: Iterating Through Rows with RemoteTableHandle in C#\nDESCRIPTION: Shows the Iter method which returns an IEnumerable of all subscribed rows in the client cache.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nclass RemoteTableHandle\n{\n    public IEnumerable<Row> Iter();\n}\n```\n\n----------------------------------------\n\nTITLE: Event Enum Definition\nDESCRIPTION: Defines the `Event` enum from the `spacetimedb_sdk` crate. This enum represents the possible events which can cause a row callback to be invoked.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\n\"spacetimedb_sdk::Event<module_bindings::Reducer>\"\n```\n\n----------------------------------------\n\nTITLE: Defining db Field in ErrorContext in TypeScript\nDESCRIPTION: Defines the `db` field of the `ErrorContext` class, providing access to the client cache of the remote database's tables for error handling.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nclass ErrorContext {\n  public db: RemoteTables\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SpacetimeDB Server Module with C#\nDESCRIPTION: Command to initialize a new SpacetimeDB server module project with C# as the programming language, creating a server-csharp directory alongside the Unity project.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspacetime init --lang=csharp server-csharp\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Struct in C# for SpacetimeDB\nDESCRIPTION: Defines the Timestamp struct representing a point in time measured in microseconds since the Unix epoch. It includes various properties and methods for time-related operations and conversions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace SpacetimeDB;\n\npublic record struct Timestamp(long MicrosecondsSinceUnixEpoch)\n    : IStructuralReadWrite,\n        IComparable<Timestamp>\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JOIN Usage in Subscription SQL Queries\nDESCRIPTION: Provides examples of valid JOIN usage in subscription SQL queries, including indexing requirements and column qualification.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Subscribe to all orders of products with less than 10 items in stock.\n-- Must have an index on the `product_id` column of the `Orders` table,\n-- as well as the `id` column of the `Product` table.\nSELECT o.*\nFROM Orders o JOIN Inventory product ON o.product_id = product.id\nWHERE product.quantity < 10\n\n-- Subscribe to all products that have at least one purchase\nSELECT product.*\nFROM Orders o JOIN Inventory product ON o.product_id = product.id\n\n-- INVALID: Must qualify the column names referenced in `ON`\nSELECT product.* FROM Orders JOIN Inventory product ON product_id = id\n```\n\n----------------------------------------\n\nTITLE: Defining reducers Field in ErrorContext in TypeScript\nDESCRIPTION: Adds a `reducers` field to the `ErrorContext` class to access reducers in error situations. This is important for managing state during error recovery.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nclass ErrorContext {\n  public reducers: RemoteReducers\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reducer in Rust\nDESCRIPTION: Shows how to define a reducer function in Rust that can be called by clients. This example creates a 'set_player_name' reducer that takes a player ID and name parameters, along with a context object for authentication.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/index.md#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer]\npub fn set_player_name(ctx: &spacetimedb::ReducerContext, id: u64, name: String) -> Result<(), String> {\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Config Table in Rust for SpacetimeDB\nDESCRIPTION: Definition of a Config table in Rust for SpacetimeDB that stores game configuration as a singleton, including world size.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// We're using this table as a singleton, so in this table\n// there only be one element where the `id` is 0.\n#[spacetimedb::table(name = config, public)]\npub struct Config {\n    #[primary_key]\n    pub id: u32,\n    pub world_size: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpacetimeDB Module Class in C#\nDESCRIPTION: Creating the static partial class that will contain all the module code for the SpacetimeDB C# module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static partial class Module\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating WHERE Clause Usage in Subscription SQL Queries\nDESCRIPTION: Provides examples of valid WHERE clause usage in subscription SQL queries for filtering data.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Find products that sell for more than $X\nSELECT * FROM Inventory WHERE price > {X}\n\n-- Find products that sell for more than $X and have fewer than Y items in stock\nSELECT * FROM Inventory WHERE price > {X} AND amount < {Y}\n```\n\n----------------------------------------\n\nTITLE: Event::SubscribeApplied Variant\nDESCRIPTION: Defines the `SubscribeApplied` variant of the `Event` enum.  This variant represents the event when our subscription is applied and its rows are inserted into the client cache.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\n\"spacetimedb_sdk::Event::SubscribeApplied\"\n```\n\n----------------------------------------\n\nTITLE: ErrorContext Reducers Field for Remote Reducer Access\nDESCRIPTION: Defines the reducers field in the ErrorContext struct which provides access to reducers exposed by the remote module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_53\n\nLANGUAGE: rust\nCODE:\n```\nstruct ErrorContext {\n    pub reducers: RemoteReducers,\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: WithModuleName Configuration Method for DbConnectionBuilder\nDESCRIPTION: Method for specifying the module name or identity of the remote SpacetimeDB database when building a DbConnection.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnectionBuilder\n{\n    public DbConnectionBuilder<DbConnection> WithModuleName(string nameOrIdentity);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Row Count from RemoteTableHandle in C#\nDESCRIPTION: Shows the Count property which returns the number of rows in the table that match any subscribed query.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nclass RemoteTableHandle\n{\n    public int Count;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Maincloud from Rust Client SDK\nDESCRIPTION: Rust code snippet to create a DbConnection builder and set the URI for connecting to a SpacetimeDB module deployed on Maincloud.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/maincloud.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nDbConnection::builder()\n    .with_uri(\"https://maincloud.spacetimedb.com\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Disconnect Method\nDESCRIPTION: Method implementation for gracefully closing database connections.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IRemoteDbContext\n{\n    public void Disconnect();\n}\n```\n\n----------------------------------------\n\nTITLE: Event Type Definition\nDESCRIPTION: Comprehensive type definition for Event, including all possible variants for different database operations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\ntype Event<Reducer> =\n  | { tag: 'Reducer'; value: ReducerEvent<Reducer> }\n  | { tag: 'SubscribeApplied' }\n  | { tag: 'UnsubscribeApplied' }\n  | { tag: 'Error'; value: Error }\n  | { tag: 'UnknownTransaction' };\n```\n\n----------------------------------------\n\nTITLE: Setting Up Arena Boundaries in Unity C#\nDESCRIPTION: Unity C# code for the GameManager class that creates border walls around the game arena with configurable sizes and positions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n    private void SetupArena(float worldSize)\n    {\n        CreateBorderCube(new Vector2(worldSize / 2.0f, worldSize + borderThickness / 2),\n            new Vector2(worldSize + borderThickness * 2.0f, borderThickness)); //North\n        CreateBorderCube(new Vector2(worldSize / 2.0f, -borderThickness / 2),\n            new Vector2(worldSize + borderThickness * 2.0f, borderThickness)); //South\n        CreateBorderCube(new Vector2(worldSize + borderThickness / 2, worldSize / 2.0f),\n            new Vector2(borderThickness, worldSize + borderThickness * 2.0f)); //East\n        CreateBorderCube(new Vector2(-borderThickness / 2, worldSize / 2.0f),\n            new Vector2(borderThickness, worldSize + borderThickness * 2.0f)); //West\n    }\n\n    private void CreateBorderCube(Vector2 position, Vector2 scale)\n    {\n        var cube = GameObject.CreatePrimitive(PrimitiveType.Cube);\n        cube.name = \"Border\";\n        cube.transform.localScale = new Vector3(scale.x, scale.y, 1);\n        cube.transform.position = new Vector3(position.x, position.y, 1);\n        cube.GetComponent<MeshRenderer>().material = borderMaterial;\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing SpacetimeDB Namespace in C#\nDESCRIPTION: Adding the necessary using statement to import SpacetimeDB functionality in the C# module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n```\n\n----------------------------------------\n\nTITLE: Defining WHERE Clause Syntax for Subscriptions in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the WHERE clause in subscription SQL queries, including supported predicates and operators.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_4\n\nLANGUAGE: ebnf\nCODE:\n```\npredicate\n    = expr\n    | predicate AND predicate\n    | predicate OR  predicate\n    ;\n\nexpr\n    = literal\n    | column\n    | expr op expr\n    ;\n\nop\n    = '='\n    | '<'\n    | '>'\n    | '<' '='\n    | '>' '='\n    | '!' '='\n    | '<' '>'\n    ;\n\nliteral\n    = INTEGER\n    | STRING\n    | HEX\n    | TRUE\n    | FALSE\n    ;\n```\n\n----------------------------------------\n\nTITLE: Using Optimized SQL for Performance\nDESCRIPTION: This SQL snippet illustrates a well-structured SQL query that adheres to performance best practices, particularly in join order and index usage. It's a practical application of previously discussed concepts.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\n-- Find all customers who ordered a particular product and when they ordered it\nSELECT c.first_name, c.last_name, o.date\nFROM Inventory product\nJOIN Orders o ON product.id = o.product_id\nJOIN Customers c ON c.id = o.customer_id\nWHERE product.name = {product_name};\n```\n\n----------------------------------------\n\nTITLE: Implementing IRemoteDbContext Db Property\nDESCRIPTION: Property getter implementation for accessing module-specific database views.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IRemoteDbContext\n{\n    public DbView Db { get; }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar conn = ConnectToDB();\n\n// Get a handle to the User table\nvar tableHandle = conn.Db.User;\n```\n\n----------------------------------------\n\nTITLE: Event::SubscribeError Variant\nDESCRIPTION: Defines the `SubscribeError` variant of the `Event` enum. This variant represents the event when a subscription ends unexpectedly due to an error.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_40\n\nLANGUAGE: rust\nCODE:\n```\n\"spacetimedb_sdk::Event::SubscribeError(spacetimedb_sdk::Error)\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Template for Reference Documentation\nDESCRIPTION: Example table structure for documenting namespaces and definitions in reference pages, showing proper formatting for name-description pairs.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/STYLE.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description |\n|-|-|\n| `Microsoft.CSharp.RuntimeBinder` Namespace | Provides classes and interfaces that support interoperation between Dynamic Language Runtime and C#. |\n| `Microsoft.VisualBasic` Namespace | Contains types that support the Visual Basic Runtime in Visual Basic. |\n```\n\n----------------------------------------\n\nTITLE: Auto-Increment Column Implementation\nDESCRIPTION: Demonstrates using the [AutoInc] attribute to automatically generate unique integer values for columns when inserting rows\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Table(Name = \"example\")]\npublic partial struct Example {\n    [SpacetimeDB.AutoInc]\n    public int Field;\n}\n\n[SpacetimeDB.Reducer]\npublic static void InsertAutoIncExample(ReducerContext ctx, int Id, string Name) {\n    for (var i = 0; i < 10; i++) {\n        var actual = ctx.Db.example.Insert(new Example { Field = 0 });\n        Debug.Assert(actual.Field != 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WithToken Authentication Method for DbConnectionBuilder\nDESCRIPTION: Method for providing an OpenID Connect compliant JSON Web Token for authentication when connecting to a SpacetimeDB database. If omitted, a new identity will be generated.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnectionBuilder<DbConnection>\n{\n    public DbConnectionBuilder<DbConnection> WithToken(string token = null);\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Error Callback Registration\nDESCRIPTION: Method to register a callback for handling connection errors.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnectionBuilder {\n    fn on_connect_error(\n        self,\n        callback: impl FnOnce(&ErrorContext, spacetimedb_sdk::Error),\n    ) -> DbConnectionBuilder;\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer Handling Functions for SpacetimeDB Module ABI\nDESCRIPTION: Defines three functions for buffer management: _buffer_len to get a buffer's length, _buffer_consume to move buffer contents to WASM memory, and _buffer_alloc to create a new buffer from WASM memory data. These functions manage memory between the host and module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/webassembly-abi/index.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Returns the length of buffer `bufh` without\n/// transferring ownership of the data into the function.\n///\n/// The `bufh` must have previously been allocating using `_buffer_alloc`.\n///\n/// Traps if the buffer does not exist.\nfn _buffer_len(\n    // The buffer previously allocated using `_buffer_alloc`.\n    // Ownership of the buffer is not taken.\n    bufh: ManuallyDrop<Buffer>\n) -> usize;\n\n/// Consumes the buffer `bufh`,\n/// moving its contents to the WASM byte slice `(ptr, len)`.\n///\n/// Returns an error if the buffer does not exist\n/// or on any memory access violations associated with `(ptr, len)`.\nfn _buffer_consume(\n    // The buffer to consume and move into `(ptr, len)`.\n    // Ownership of the buffer and its contents are taken.\n    // That is, `bufh` won't be usable after this call.\n    bufh: Buffer,\n    // A WASM out pointer to write the contents of `bufh` to.\n    ptr: *mut u8,\n    // The size of the buffer pointed to by `ptr`.\n    // This size must match that of `bufh` or a trap will occur.\n    len: usize\n);\n\n/// Creates a buffer of size `data_len` in the host environment.\n///\n/// The contents of the byte slice lasting `data_len` bytes\n/// at the `data` WASM pointer are read\n/// and written into the newly initialized buffer.\n///\n/// Traps on any memory access violations.\nfn _buffer_alloc(data: *const u8, data_len: usize) -> Buffer;\n```\n\n----------------------------------------\n\nTITLE: Importing SpacetimeDB Module Bindings in TypeScript\nDESCRIPTION: Shows how to import generated module bindings and SDK definitions in a TypeScript file.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as moduleBindings from './module_bindings/index';\n\nimport {\n  Identity, ConnectionId, Event, ReducerEvent\n} from '@clockworklabs/spacetimedb-sdk';\n```\n\n----------------------------------------\n\nTITLE: Updating SpacetimeDB Version\nDESCRIPTION: Commands to properly update SpacetimeDB to the latest version, including stopping the service, performing the upgrade, and restarting the service.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl stop spacetimedb\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo -u spacetimedb -i -- spacetime --root-dir=/stdb version upgrade\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo -u spacetimedb -i -- spacetime --root-dir=/stdb install <version-number>\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start spacetimedb\n```\n\n----------------------------------------\n\nTITLE: Defining FROM Clause Syntax for Queries in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the FROM clause in query SQL, supporting multiple table joins unlike the subscription language.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_9\n\nLANGUAGE: ebnf\nCODE:\n```\nFROM table [ [AS] alias ] { [INNER] JOIN table [ [AS] alias ] ON predicate }\n```\n\n----------------------------------------\n\nTITLE: Querying SpacetimeDB Messages using SQL\nDESCRIPTION: SQL query example for retrieving all messages from the SpacetimeDB database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM message\n```\n\n----------------------------------------\n\nTITLE: SubscriptionEventContext Reducers Field Definition\nDESCRIPTION: Defines the reducers field in the SubscriptionEventContext struct which provides access to reducers exposed by the remote module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_50\n\nLANGUAGE: rust\nCODE:\n```\nstruct SubscriptionEventContext {\n    pub reducers: RemoteReducers,\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: BSATN Encoding of Primitive Types in F#\nDESCRIPTION: This comprehensive snippet defines BSATN encodings for various primitive types including booleans, unsigned and signed integers, floats, and strings. It uses little-endian byte representation for multi-byte types.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/bsatn.md#2025-04-18_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nbsatn(Bool(false)) = [0]\nbsatn(Bool(true)) = [1]\nbsatn(U8(x)) = [x]\nbsatn(U16(x: u16)) = to_little_endian_bytes(x)\nbsatn(U32(x: u32)) = to_little_endian_bytes(x)\nbsatn(U64(x: u64)) = to_little_endian_bytes(x)\nbsatn(U128(x: u128)) = to_little_endian_bytes(x)\nbsatn(U256(x: u256)) = to_little_endian_bytes(x)\nbsatn(I8(x: i8)) = to_little_endian_bytes(x)\nbsatn(I16(x: i16)) = to_little_endian_bytes(x)\nbsatn(I32(x: i32)) = to_little_endian_bytes(x)\nbsatn(I64(x: i64)) = to_little_endian_bytes(x)\nbsatn(I128(x: i128)) = to_little_endian_bytes(x)\nbsatn(I256(x: i256)) = to_little_endian_bytes(x)\nbsatn(F32(x: f32)) = bsatn(f32_to_raw_bits(x)) // lossless conversion\nbsatn(F64(x: f64)) = bsatn(f64_to_raw_bits(x)) // lossless conversion\nbsatn(String(s)) = bsatn(len(s) as u32) ++ bsatn(bytes(s))\n```\n\n----------------------------------------\n\nTITLE: Importing Module Bindings in Rust\nDESCRIPTION: Declares the generated module bindings and imports its definitions in the main.rs file.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nmod module_bindings;\nuse module_bindings::*;\n```\n\n----------------------------------------\n\nTITLE: Defining Query SQL Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for query SQL in SpacetimeDB, which is a superset of the subscription language with additional features.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_6\n\nLANGUAGE: ebnf\nCODE:\n```\nSELECT projection FROM relation [ WHERE predicate ] [LIMIT NUM]\n```\n\n----------------------------------------\n\nTITLE: Publishing SpacetimeDB Module to Maincloud via CLI\nDESCRIPTION: Command to publish a SpacetimeDB module to Maincloud using the SpacetimeDB CLI. This requires the CLI to be installed and a module to be created.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/maincloud.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspacetime publish -s maincloud my-cool-module\n```\n\n----------------------------------------\n\nTITLE: BuiltinValue JSON Structure\nDESCRIPTION: Defines the possible JSON types for BuiltinValue encoding, including primitives and complex types.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sats-json.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nboolean | number | string | array<AlgebraicValue> | map<AlgebraicValue, AlgebraicValue>\n```\n\n----------------------------------------\n\nTITLE: Generating Module Types with SpacetimeDB CLI\nDESCRIPTION: Uses the SpacetimeDB CLI to generate Rust interfaces for the server module's tables, reducers, and types.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p client/src/module_bindings\nspacetime generate --lang rust --out-dir client/src/module_bindings --project-path server\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Statement Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the DELETE statement in SpacetimeDB SQL.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_14\n\nLANGUAGE: ebnf\nCODE:\n```\nDELETE FROM table [ WHERE predicate ]\n```\n\n----------------------------------------\n\nTITLE: Reducer Enum Definition in Module Bindings\nDESCRIPTION: References the Reducer enum generated in module bindings that contains variants for each reducer defined by the module, with each variant holding the reducer's arguments.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_45\n\nLANGUAGE: rust\nCODE:\n```\nmodule_bindings::Reducer\n```\n\n----------------------------------------\n\nTITLE: Describing Database Structure\nDESCRIPTION: Command to describe the structure of a database or specific entities within it. Can output JSON-formatted information about reducers or tables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nspacetime describe [OPTIONS] --json <database> [entity_type] [entity_name]\n```\n\n----------------------------------------\n\nTITLE: SubscriptionHandle unsubscribe_then Method\nDESCRIPTION: Defines the `unsubscribe_then` method for the `SubscriptionHandle` struct.  This method terminates the subscription and runs the provided callback when the subscription is ended and its matching rows are removed from the client cache.  It returns an error if the subscription has already ended.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\n\"impl SubscriptionHandle {\\n    fn unsubscribe_then(\\n        self,\\n        on_end: impl FnOnce(&SubscriptionEventContext),\\n    ) -> Result<(), spacetimedb_sdk::Error>;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Publishing SpacetimeDB Module via CLI\nDESCRIPTION: Command line instruction for publishing a SpacetimeDB module to the server with a custom project name.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nspacetime publish --project-path server quickstart-chat\n```\n\n----------------------------------------\n\nTITLE: Fixing Markdown Formatting\nDESCRIPTION: Sed commands to fix markdown formatting issues in the CLI reference documentation, specifically for backticks and bold text in headers.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsed -i'' -E 's!^(##) `(.*)`$!\\1 \\2!' docs/cli-reference.md\nsed -i'' -E 's!^(######) \\*\\*(.*)\\*\\*$!\\1 <b>\\2</b>!' docs/cli-reference.md\n```\n\n----------------------------------------\n\nTITLE: Defining Db Property Access in DbConnection\nDESCRIPTION: Property definition for accessing subscribed view of remote database tables through RemoteTables type.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnection\n{\n    public RemoteTables Db;\n    /* other members */\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Auto-incrementing Sequences with SpacetimeDB CLI\nDESCRIPTION: Command-line examples showing how to call the reducer function and view the results of auto-incrementing sequences. Demonstrates the behavior of sequence gaps after database restart.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/appendix.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n❯ cargo run --bin spacetimedb-cli call sample insert_user 3\n\n❯ spacetimedb-cli logs sample\n...\n.. User: Users { user_id: 1, name: \"User 0\" }\n.. User: Users { user_id: 2, name: \"User 1\" }\n.. User: Users { user_id: 3, name: \"User 2\" }\n\n# Database restart, then\n\n❯ cargo run --bin spacetimedb-cli call sample insert_user 1\n\n❯ spacetimedb-cli logs sample\n...\n.. User: Users { user_id: 3, name: \"User 2\" }\n.. User: Users { user_id: 4098, name: \"User 0\" }\n```\n\n----------------------------------------\n\nTITLE: BSATN Encoding of Strings in F#\nDESCRIPTION: This snippet shows how strings are encoded in BSATN format. It includes the string length as a u32, followed by the UTF-8 representation of the string as bytes.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/bsatn.md#2025-04-18_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nbsatn(String(s)) = bsatn(len(s) as u32) ++ bsatn(utf8_to_bytes(s))\n```\n\n----------------------------------------\n\nTITLE: EventContext event Field\nDESCRIPTION: Defines the `event` field within the `EventContext` struct. The `Event` enum describes what happened to cause the current row callback to be invoked.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\n\"struct EventContext {\\n    pub event: spacetimedb_sdk::Event<module_bindings::Reducer>,\n    /* other fields */\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing SubscriptionBuilder in C#\nDESCRIPTION: C# implementation of the SubscriptionBuilder class with methods for subscription management and callback registration. Provides functionality for database query subscriptions and error handling.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class SubscriptionBuilder\n{\n    /// <summary>\n    /// Register a callback to run when the subscription is applied.\n    /// </summary>\n    public SubscriptionBuilder OnApplied(\n        Action<SubscriptionEventContext> callback\n    );\n\n    /// <summary>\n    /// Register a callback to run when the subscription fails.\n    ///\n    /// Note that this callback may run either when attempting to apply the subscription,\n    /// in which case <c>Self::on_applied</c> will never run,\n    /// or later during the subscription's lifetime if the module's interface changes,\n    /// in which case <c>Self::on_applied</c> may have already run.\n    /// </summary>\n    public SubscriptionBuilder OnError(\n        Action<ErrorContext, Exception> callback\n    );\n\n    /// <summary>\n    /// Subscribe to the following SQL queries.\n    ///\n    /// This method returns immediately, with the data not yet added to the DbConnection.\n    /// The provided callbacks will be invoked once the data is returned from the remote server.\n    /// Data from all the provided queries will be returned at the same time.\n    ///\n    /// See the SpacetimeDB SQL docs for more information on SQL syntax:\n    /// <a href=\"https://spacetimedb.com/docs/sql\">https://spacetimedb.com/docs/sql</a>\n    /// </summary>\n    public SubscriptionHandle Subscribe(\n        string[] querySqls\n    );\n\n    /// <summary>\n    /// Subscribe to all rows from all tables.\n    ///\n    /// This method is intended as a convenience\n    /// for applications where client-side memory use and network bandwidth are not concerns.\n    /// Applications where these resources are a constraint\n    /// should register more precise queries via <c>Self.Subscribe</c>\n    /// in order to replicate only the subset of data which the client needs to function.\n    /// </summary>\n    public void SubscribeToAllTables();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SET Statement Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the experimental SET statement in SpacetimeDB SQL, used for updating system variables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_18\n\nLANGUAGE: ebnf\nCODE:\n```\nSET var ( TO | '=' ) literal\n```\n\n----------------------------------------\n\nTITLE: Defining reducers Field in SubscriptionEventContext in TypeScript\nDESCRIPTION: Adds a `reducers` field to the `SubscriptionEventContext` class, allowing access to reducers exposed by the remote module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionEventContext {\n  public reducers: RemoteReducers\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing SpacetimeDB Modules\nDESCRIPTION: Commands for deploying compiled modules to a SpacetimeDB instance. Demonstrates different publishing options including using pre-compiled WASM files and targeting specific servers.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Build and publish from source to 'my-database-name' on the default server\nspacetime publish --project-path my_server_module my-database-name\n\n# Example: Publish a pre-compiled wasm to Maincloud using its nickname, clearing existing data\nspacetime publish --bin-path ./my_module/target/wasm32-wasi/debug/my_module.wasm -s maincloud -c my-cloud-db-identity\n```\n\n----------------------------------------\n\nTITLE: SubscriptionHandle is_active Method\nDESCRIPTION: Defines the `is_active` method for the `SubscriptionHandle` struct. This method returns true if the subscription has been applied and has not yet been unsubscribed.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\n\"impl SubscriptionHandle {\\n    fn is_active(&self) -> bool;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Logging in to SpacetimeDB via GitHub\nDESCRIPTION: Command to authenticate with SpacetimeDB using GitHub login. This opens a browser for GitHub authentication and is required for commands like 'spacetime publish'.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/getting-started.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspacetime login\n```\n\n----------------------------------------\n\nTITLE: Implementing SubscriptionHandle in Rust\nDESCRIPTION: Rust trait definition for SubscriptionHandle, providing methods to check subscription status and manage unsubscription operations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub trait SubscriptionHandle: InModule + Clone + Send + 'static\nwhere\n    Self::Module: SpacetimeModule<SubscriptionHandle = Self>,\n{\n    /// Returns `true` if the subscription has been ended.\n    /// That is, if it has been unsubscribed or terminated due to an error.\n    fn is_ended(&self) -> bool;\n\n    /// Returns `true` if the subscription is currently active.\n    fn is_active(&self) -> bool;\n\n    /// Unsubscribe from the query controlled by this `SubscriptionHandle`,\n    /// then run `on_end` when its rows are removed from the client cache.\n    /// Returns an error if the subscription is already ended,\n    /// or if unsubscribe has already been called.\n    fn unsubscribe_then(self, on_end: OnEndedCallback<Self::Module>) -> crate::Result<()>;\n\n    /// Unsubscribe from the query controlled by this `SubscriptionHandle`.\n    /// Returns an error if the subscription is already ended,\n    /// or if unsubscribe has already been called.\n    fn unsubscribe(self) -> crate::Result<()>;\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing and Generating Server Bindings\nDESCRIPTION: Commands to publish the server and generate C# server bindings for client integration. Necessary for updating the server and integrating with the Unity client.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nspacetime publish --server local blackholio --delete-data\n```\n\nLANGUAGE: sh\nCODE:\n```\nspacetime generate --lang csharp --out-dir ../client-unity/Assets/autogen\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB Module Build Command\nDESCRIPTION: Command to build a SpacetimeDB module using the spacetime CLI tool, which compiles the C# project to WebAssembly.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nspacetime build\n```\n\n----------------------------------------\n\nTITLE: EventContext Type Definition\nDESCRIPTION: Defines the `EventContext` type alias from the `module_bindings` module. An `EventContext` is a `DbContext` augmented with an `event: Event` field and is passed as the first argument to row callbacks.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_32\n\nLANGUAGE: rust\nCODE:\n```\n\"module_bindings::EventContext\"\n```\n\n----------------------------------------\n\nTITLE: Defining Database Context Trait in Rust\nDESCRIPTION: Trait definition for database context functionality shared across various context types.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\ntrait spacetimedb_sdk::DbContext {\n    /* methods */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Literal Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for literal values in SpacetimeDB SQL, including integers, floats, strings, and booleans.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_21\n\nLANGUAGE: ebnf\nCODE:\n```\nliteral = INTEGER | FLOAT | STRING | HEX | TRUE | FALSE ;\n\nINTEGER\n    = [ '+' | '-' ] NUM\n    | [ '+' | '-' ] NUM 'E' [ '+' ] NUM\n    ;\n\nNUM\n    = DIGIT { DIGIT }\n    ;\n\nDIGIT\n    = 0..9\n    ;\n\nFLOAT\n    = [ '+' | '-' ] [ NUM ] '.' NUM\n    | [ '+' | '-' ] [ NUM ] '.' NUM 'E' [ '+' | '-' ] NUM\n    ;\n\nSTRING\n    = \"'\" { \"''\" | CHAR } \"'\"\n    ;\n```\n\n----------------------------------------\n\nTITLE: Implementing IRemoteDbContext Reducers Property\nDESCRIPTION: Property getter implementation for accessing module-specific reducers with example of event handler registration.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IRemoteDbContext\n{\n    public RemoteReducers Reducers { get; }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar conn = ConnectToDB();\n\n// Register a callback to be run every time the SendMessage reducer is invoked\nconn.Reducers.OnSendMessage += Reducer_OnSendMessageEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining Response Structure for POST /v1/identity in TypeScript\nDESCRIPTION: This snippet defines the JSON structure returned by the POST /v1/identity endpoint. It includes an identity string and a token string.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/identity.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"identity\": string,\n    \"token\": string\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Login Command Usage\nDESCRIPTION: Command for managing SpacetimeDB CLI authentication with options for custom auth servers and direct token usage.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nspacetime login [OPTIONS]\\n       login <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Encoding ProductValue in BSATN Format using F#\nDESCRIPTION: This snippet demonstrates how ProductValue (structs or tuples) are encoded in BSATN format. It concatenates the BSATN encodings of individual elements.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/bsatn.md#2025-04-18_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nbsatn(elems) = bsatn(elem_0) ++ .. ++ bsatn(elem_n)\n```\n\n----------------------------------------\n\nTITLE: Disconnection Callback Registration\nDESCRIPTION: Method to register a callback that executes when the connection is terminated.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnectionBuilder {\n    fn on_disconnect(\n        self,\n        callback: impl FnOnce(&ErrorContext, Option<spacetimedb_sdk::Error>),\n    ) -> DbConnectionBuilder;\n}\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB Module Publication Command\nDESCRIPTION: Shell command to publish the updated SpacetimeDB module to a local server, with the option to delete existing data.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nspacetime publish --server local blackholio --delete-data\n```\n\n----------------------------------------\n\nTITLE: Initializing SpacetimeDB Server Module with Rust\nDESCRIPTION: Command to initialize a new SpacetimeDB server module project with Rust as the programming language, creating a server-rust directory alongside the Unity project.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspacetime init --lang=rust server-rust\n```\n\n----------------------------------------\n\nTITLE: Implementing SubscriptionHandle Properties\nDESCRIPTION: Properties for tracking subscription state and status.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionHandle\n{\n    public bool IsEnded;\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubscriptionHandle\n{\n    public bool IsActive;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Access Method in Rust\nDESCRIPTION: Trait method implementation for accessing database view in generic contexts.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\ntrait DbContext {\n    fn db(&self) -> &Self::DbView;\n}\n```\n\n----------------------------------------\n\nTITLE: Global Styles\nDESCRIPTION: Global CSS styles including CSS reset, theme variables, and common element styles.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* ----- CSS Reset & Global Settings ----- */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n/* ----- Color Variables ----- */\n:root {\n  --theme-color: #3dc373;\n  --theme-color-contrast: #08180e;\n  --textbox-color: #edfef4;\n  color-scheme: light dark;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --theme-color: #4cf490;\n    --theme-color-contrast: #132219;\n    --textbox-color: #0f311d;\n  }\n}\n\n/* ----- Page Setup ----- */\nhtml,\nbody,\n#root {\n  height: 100%;\n  margin: 0;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n/* ----- Buttons ----- */\nbutton {\n  padding: 0.5rem 0.75rem;\n  border: none;\n  border-radius: 0.375rem;\n  background-color: var(--theme-color);\n  color: var(--theme-color-contrast);\n  cursor: pointer;\n  font-weight: 600;\n  letter-spacing: 0.1px;\n  font-family: monospace;\n}\n\n/* ----- Inputs & Textareas ----- */\ninput,\ntextarea {\n  border: none;\n  border-radius: 0.375rem;\n  caret-color: var(--theme-color);\n  font-family: monospace;\n  font-weight: 600;\n  letter-spacing: 0.1px;\n  padding: 0.5rem 0.75rem;\n}\n\ninput:focus,\ntextarea:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px var(--theme-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in C# with SpacetimeDB\nDESCRIPTION: This snippet demonstrates how to use the Log class in SpacetimeDB for writing to a private debug log. It includes examples of different log levels and shows how to log information about users and their dog counts.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\npublic static partial class Module {\n    [Table(Name = \"user\")]\n    public partial struct User {\n        [PrimaryKey]\n        uint Id;\n        [Unique]\n        string Username;\n        ulong DogCount;\n    }\n\n    [Reducer]\n    public static void LogDogs(ReducerContext ctx) {\n        Log.Info(\"Examining users.\");\n\n        var totalDogCount = 0;\n\n        foreach (var user in ctx.Db.user.Iter()) {\n            Log.Info($\"    User: Id = {user.Id}, Username = {user.Username}, DogCount = {user.DogCount}\");\n\n            totalDogCount += user.DogCount;\n        }\n\n        if (totalDogCount < 300) {\n            Log.Warn(\"Insufficient dogs.\");\n        }\n\n        if (totalDogCount < 100) {\n            Log.Error(\"Dog population is critically low!\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB SDK in TypeScript\nDESCRIPTION: Shows how to install the SpacetimeDB SDK package using npm or yarn, and generate module-specific TypeScript bindings for a SpacetimeDB module.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\nnpm install @clockworklabs/spacetimedb-sdk\n\n# Or using yarn\nyarn add @clockworklabs/spacetimedb-sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p src/module_bindings\nspacetime generate --lang typescript \\\n    --out-dir src/module_bindings \\\n    --project-path ../path/to/your/server_module\n```\n\n----------------------------------------\n\nTITLE: Running SQL Queries on a Database\nDESCRIPTION: Command to execute SQL queries on a SpacetimeDB database. Supports both single queries and an interactive mode.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nspacetime sql [OPTIONS] <database> <query>\n```\n\n----------------------------------------\n\nTITLE: Defining Connect Reducer in Rust (Placeholder)\nDESCRIPTION: This code snippet is a placeholder for adding the definition of a connect reducer in a Rust file for a SpacetimeDB project. Although not filled in, it is indicative of where functional code to handle connections should be implemented.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/STYLE.md#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nI don't actually need to fill this in.\n```\n\n----------------------------------------\n\nTITLE: WithUri Configuration Method for DbConnectionBuilder\nDESCRIPTION: Method for configuring the URI of the SpacetimeDB instance that hosts the remote module and database when building a DbConnection.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnectionBuilder<DbConnection>\n{\n    public DbConnectionBuilder<DbConnection> WithUri(Uri uri);\n}\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB Module Publishing Command\nDESCRIPTION: Command to publish a SpacetimeDB module to the public network, specifying the database name where the module will be installed.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nspacetime publish [MY_DATABASE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Check Active Connection Status - C#\nDESCRIPTION: This property indicates whether the connection is active. It will be true if the connection is established and has not yet been disconnected.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IDbContext\n{\n    public bool IsActive { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionId Struct in C# for SpacetimeDB\nDESCRIPTION: Defines the ConnectionId struct used as a unique identifier for client connections to a SpacetimeDB database. It includes methods for creating a ConnectionId from a hex string and converting it to a string representation.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace SpacetimeDB;\n\npublic readonly record struct ConnectionId\n{\n    public static ConnectionId? FromHexString(string hex);\n    public string ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FrameTick Method in DbConnection\nDESCRIPTION: Definition of FrameTick method that advances the connection until no work remains or until disconnected. Should be called on the main thread to avoid data races.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnection {\n    public void FrameTick();\n}\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB Server Module Overview - C# Version\nDESCRIPTION: Summary of concepts learned in the tutorial for C# implementation, including module configuration, table management, reducers, and physics simulation.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\nSo far you've learned how to configure a new Unity project to work with SpacetimeDB, how to develop, build, and publish a SpacetimeDB server module. Within the module, you've learned how to create tables, update tables, and write reducers. You've learned about special reducers like `ClientConnected` and `Init` and how to created scheduled reducers. You learned how we can used scheduled reducers to implement a physics simulation right within your module.\n```\n\n----------------------------------------\n\nTITLE: Starting SpacetimeDB Server in Standalone Mode\nDESCRIPTION: Command to start the SpacetimeDB server in standalone mode. The server listens on port 3000 by default but can be customized using the --listen-addr flag.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/getting-started.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspacetime start\n```\n\n----------------------------------------\n\nTITLE: DbContext is_active Method\nDESCRIPTION: Defines the `is_active` method for the `DbContext` trait. This method returns `true` if the connection has not yet disconnected.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\n\"trait DbContext {\\n    fn is_active(&self) -> bool;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Imports in Rust SpacetimeDB Module\nDESCRIPTION: This code snippet demonstrates how to import necessary dependencies in a Rust module designed for SpacetimeDB. The imports include essential components like tables and reducers that are integral for setting up the database's functionality.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/STYLE.md#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{table, reducer, Table, ReducerContext, Identity, Timestamp};\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionId Type in Rust\nDESCRIPTION: Defines the `ConnectionId` type as an opaque identifier for a database client connection, facilitating the management of connections with the same client identity.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\nConnectionId\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB Authentication Command\nDESCRIPTION: Command to log in to the SpacetimeDB network, allowing you to publish modules to the public SpacetimeDB network.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nspacetime login\n```\n\n----------------------------------------\n\nTITLE: Defining Response Structure for GET /v1/identity/:identity/databases in TypeScript\nDESCRIPTION: This snippet defines the JSON structure returned by the GET /v1/identity/:identity/databases endpoint. It includes an array of strings representing the addresses of databases owned by the specified identity.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/identity.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"addresses\": array<string>\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext identity Method\nDESCRIPTION: Defines the `identity` method for the `DbContext` trait. This method gets the `Identity` with which SpacetimeDB identifies the connection. It may panic if called before the `on_connect` callback is invoked.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_28\n\nLANGUAGE: rust\nCODE:\n```\n\"trait DbContext {\\n    fn identity(&self) -> Identity;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining SHOW Statement Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the experimental SHOW statement in SpacetimeDB SQL, used for retrieving system variable values.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_19\n\nLANGUAGE: ebnf\nCODE:\n```\nSHOW var\n```\n\n----------------------------------------\n\nTITLE: Modifying GameManager.SetupArena in Unity C#\nDESCRIPTION: This method sets up the arena borders and updates the WorldSize for the CameraController. It creates border cubes for the north, south, east, and west boundaries of the game world.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void SetupArena(float worldSize)\n{\n    CreateBorderCube(new Vector2(worldSize / 2.0f, worldSize + borderThickness / 2),\n        new Vector2(worldSize + borderThickness * 2.0f, borderThickness)); //North\n    CreateBorderCube(new Vector2(worldSize / 2.0f, -borderThickness / 2),\n        new Vector2(worldSize + borderThickness * 2.0f, borderThickness)); //South\n    CreateBorderCube(new Vector2(worldSize + borderThickness / 2, worldSize / 2.0f),\n        new Vector2(borderThickness, worldSize + borderThickness * 2.0f)); //East\n    CreateBorderCube(new Vector2(-borderThickness / 2, worldSize / 2.0f),\n        new Vector2(borderThickness, worldSize + borderThickness * 2.0f)); //West\n\n    // Set the world size for the camera controller\n    CameraController.WorldSize = worldSize;\n}\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB Example Database Publish Command\nDESCRIPTION: Example command showing how to publish a module to a specific SpacetimeDB database named 'silly_demo_app'.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nspacetime publish silly_demo_app\n```\n\n----------------------------------------\n\nTITLE: Defining Identity Type in Rust\nDESCRIPTION: Defines the `Identity` type as a unique public identifier for a client connected to a database, ensuring every client can be distinctly referenced.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\nIdentity\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB CLI on Windows with PowerShell\nDESCRIPTION: Command to install the SpacetimeDB CLI tool on Windows systems using PowerShell's Invoke-WebRequest.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\niwr https://windows.spacetimedb.com -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Defining AlgebraicValue JSON Structure\nDESCRIPTION: Shows the basic structure for AlgebraicValue, which can be either a SumValue, ProductValue, or BuiltinValue.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sats-json.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nSumValue | ProductValue | BuiltinValue\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector2 Conversion Extensions in C#\nDESCRIPTION: This code provides extension methods for implicit conversion between SpacetimeDB.Types.DbVector2 and UnityEngine.Vector2 types.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-3.md#2025-04-18_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\nusing SpacetimeDB.Types;\nusing UnityEngine;\n\nnamespace SpacetimeDB.Types\n{\n\tpublic partial class DbVector2\n\t{\n\t\tpublic static implicit operator Vector2(DbVector2 vec)\n\t\t{\n\t\t\treturn new Vector2(vec.X, vec.Y);\n\t\t}\n\n\t\tpublic static implicit operator DbVector2(Vector2 vec)\n\t\t{\n\t\t\treturn new DbVector2(vec.x, vec.y);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Identifiers in EBNF\nDESCRIPTION: This EBNF snippet describes how to define identifiers, which are used to identify database objects like tables or columns in Spacetime SQL. The description includes rules for quoted and unquoted identifiers to avoid conflicts with SQL reserved keywords.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_25\n\nLANGUAGE: ebnf\nCODE:\n```\nidentifier\n    = LATIN { LATIN | DIGIT | '_' }\n    | '\"' { '\"\"' | CHAR } '\"'\n    ;\n\nLATIN\n    = a..z | A..Z\n    ;\n```\n\n----------------------------------------\n\nTITLE: Creating a DbConnection Builder in C#\nDESCRIPTION: Method signature for creating a DbConnection builder object which allows chaining configuration options before establishing a connection to a SpacetimeDB database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nclass DbConnection\n{\n    public static DbConnectionBuilder<DbConnection> Builder();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SpacetimeDB Server Modules\nDESCRIPTION: Commands to create a new SpacetimeDB module project structure for either Rust or C# development.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# For Rust\nspacetime init --lang rust my_server_module\n# For C#\nspacetime init --lang csharp my_server_module\n```\n\n----------------------------------------\n\nTITLE: Defining BSATN Encoding for AlgebraicValue in F#\nDESCRIPTION: This snippet defines the BSATN encoding for AlgebraicValue, which includes various data types such as SumValue, ProductValue, ArrayValue, String, and primitive types.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/bsatn.md#2025-04-18_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nbsatn(AlgebraicValue)\n    = bsatn(SumValue)\n    | bsatn(ProductValue)\n    | bsatn(ArrayValue)\n    | bsatn(String)\n    | bsatn(Bool)\n    | bsatn(U8) | bsatn(U16) | bsatn(U32) | bsatn(U64) | bsatn(U128) | bsatn(U256)\n    | bsatn(I8) | bsatn(I16) | bsatn(I32) | bsatn(I64) | bsatn(I128) | bsatn(I256)\n    | bsatn(F32) | bsatn(F64)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating LIMIT Clause Usage in Query SQL\nDESCRIPTION: Provides an example of using the LIMIT clause to restrict the number of rows returned by a query.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n-- Fetch an example row from my inventory\nSELECT * FROM Inventory LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Header Format for SpacetimeDB in Markdown\nDESCRIPTION: Specifies the format for Authorization headers in SpacetimeDB HTTP requests. It uses Bearer token authentication with a JSON Web Token.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/authorization.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAuthorization: Bearer ${token}\n```\n\n----------------------------------------\n\nTITLE: Installing WebAssembly Support for .NET\nDESCRIPTION: Command to install the wasi-experimental workload for dotnet, which is required to compile C# modules to WebAssembly for use with SpacetimeDB.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet workload install wasi-experimental\n```\n\n----------------------------------------\n\nTITLE: SumType and SumTypeVariant JSON Structure\nDESCRIPTION: Details the structure for SumType and its variants, including optional naming.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sats-json.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// SumType:\n{\n    \"variants\": array<SumTypeVariant>,\n}\n\n// SumTypeVariant:\n{\n    \"algebraic_type\": AlgebraicType,\n    \"name\": { \"some\": string } | { \"none\": [] }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring global variables for identity and thread communication\nDESCRIPTION: Defines global variables to store the client's SpacetimeDB identity and a thread-safe queue for inter-thread command processing.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// our local client SpacetimeDB identity\nIdentity? local_identity = null;\n\n// declare a thread safe queue to store commands\nvar input_queue = new ConcurrentQueue<(string Command, string Args)>();\n```\n\n----------------------------------------\n\nTITLE: Using Hex Literals in SQL\nDESCRIPTION: This SQL snippet demonstrates how to use hex literals in a query to filter records by a hash value. It shows the practical use of hex representation within a SQL SELECT statement.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Program WHERE hash_value = 0xABCD1234\n```\n\n----------------------------------------\n\nTITLE: Enabling RLS in C# Modules\nDESCRIPTION: Shows how to enable the experimental Row Level Security feature in a C# module by adding a preprocessor directive to suppress the STDB_UNSTABLE warning.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable STDB_UNSTABLE\n```\n\n----------------------------------------\n\nTITLE: Adding SpacetimeDB SDK Package with .NET CLI\nDESCRIPTION: Command to add the SpacetimeDB SDK package to a .NET project using the dotnet CLI package manager.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package spacetimedbsdk\n```\n\n----------------------------------------\n\nTITLE: Checking Energy Balance\nDESCRIPTION: Command to show current energy balance for an identity. Can check balance for the default identity or a specified one.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nspacetime energy balance [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Defining Response Structure for POST /v1/identity/websocket-token in TypeScript\nDESCRIPTION: This snippet defines the JSON structure returned by the POST /v1/identity/websocket-token endpoint. It includes a token string, which is a short-lived JSON Web Token.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/identity.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"token\": string\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SpacetimeDB Client SDK via NuGet Package Manager\nDESCRIPTION: Adds the SpacetimeDB.ClientSDK NuGet package to the C# project, which provides the necessary libraries to interact with SpacetimeDB.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package SpacetimeDB.ClientSDK\n```\n\n----------------------------------------\n\nTITLE: Listing SpacetimeDB Databases\nDESCRIPTION: Commands to view databases associated with your identity on a SpacetimeDB server. Useful for finding database identities, especially for unnamed databases.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# List databases on the default server\nspacetime list\n\n# List databases on Maincloud\n# spacetime list -s maincloud\n```\n\n----------------------------------------\n\nTITLE: Invalid Recursive RLS Rules in Rust\nDESCRIPTION: Demonstrates an invalid RLS implementation in Rust with circular dependencies between rules that would cause the module to fail to publish.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{client_visibility_filter, Filter};\n\n/// An account must have a corresponding player\n#[client_visibility_filter]\nconst ACCOUNT_FILTER: Filter = Filter::Sql(\n    \"SELECT a.* FROM account a JOIN player p ON a.id = p.id WHERE a.identity = :sender\"\n);\n\n/// A player must have a corresponding account\n#[client_visibility_filter]\nconst PLAYER_FILTER: Filter = Filter::Sql(\n    \"SELECT p.* FROM account a JOIN player p ON a.id = p.id WHERE a.identity = :sender\"\n);\n```\n\n----------------------------------------\n\nTITLE: SQL Query Response Type Definition - TypeScript Interface\nDESCRIPTION: TypeScript type definition for the SQL query response format, showing the structure of statement results including schema and rows.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"schema\": ProductType,\n    \"rows\": array\n}\n```\n\n----------------------------------------\n\nTITLE: EventContext Structure - C#\nDESCRIPTION: The EventContext class extends IDbContext and includes an Event property that helps identify the cause of callbacks for database row modifications.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nclass EventContext {\n    public readonly Event<Reducer> Event;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB SDK with Cargo\nDESCRIPTION: Command to add the SpacetimeDB SDK as a dependency to a Rust project using cargo.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo add spacetimedb_sdk\n```\n\n----------------------------------------\n\nTITLE: Logging in to SpacetimeDB CLI\nDESCRIPTION: Commands to log out of the current session and log in again to the SpacetimeDB CLI. This is useful for connecting the CLI identity to the web dashboard.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/maincloud.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspacetime logout\nspacetime login\n```\n\n----------------------------------------\n\nTITLE: Defining an ArrayList Class in C#\nDESCRIPTION: This code defines the ArrayList class, which implements the IList interface using a dynamically resizing array. It provides a high-level abstraction for managing collections of objects.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/STYLE.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ArrayList : ICloneable, System.Collections.IList\n```\n\n----------------------------------------\n\nTITLE: Importing required namespaces in Program.cs\nDESCRIPTION: Imports the necessary namespaces for using SpacetimeDB features and concurrent collections for thread-safe operations in the chat client.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\nusing SpacetimeDB.Types;\nusing System.Collections.Concurrent;\n```\n\n----------------------------------------\n\nTITLE: Database Information Response Structure\nDESCRIPTION: JSON structure returned when requesting database information, containing the database identity, owner identity, host type, and program hash.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"database_identity\": string,\n    \"owner_identity\": string,\n    \"host_type\": \"wasm\",\n    \"initial_program\": string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Commands for creating a new React TypeScript project using Vite and installing the SpacetimeDB SDK.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create vite@latest client -- --template react-ts\ncd client\npnpm install\npnpm install @clockworklabs/spacetimedb-sdk\n```\n\n----------------------------------------\n\nTITLE: Permission Denied Error Response for Named Database\nDESCRIPTION: Error response when attempting to edit a database without proper permissions. Returns the name that caused the permission issue.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ \"PermissionDenied\": {\n    \"name\": string\n} }\n```\n\n----------------------------------------\n\nTITLE: ErrorContext Event Field for Error Information\nDESCRIPTION: Defines the event field in the ErrorContext struct which contains the SpacetimeDB error that triggered the current error callback.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_51\n\nLANGUAGE: rust\nCODE:\n```\nstruct ErrorContext {\n    pub event: spacetimedb_sdk::Error,\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Errors in Rust\nDESCRIPTION: Defines callbacks for handling connection errors and disconnections, printing appropriate messages and exiting the program.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n/// Our `on_connect_error` callback: print the error, then exit the process.\nfn on_connect_error(_ctx: &ErrorContext, err: Error) {\n    eprintln!(\"Connection error: {:?}\", err);\n    std::process::exit(1);\n}\n\n/// Our `on_disconnect` callback: print a note, then exit the process.\nfn on_disconnected(_ctx: &ErrorContext, err: Option<Error>) {\n    if let Some(err) = err {\n        eprintln!(\"Disconnected: {}\", err);\n        std::process::exit(1);\n    } else {\n        println!(\"Disconnected.\");\n        std::process::exit(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options for SpacetimeDB SDK\nDESCRIPTION: Sets the minimum TypeScript compiler target for compatibility with the SpacetimeDB SDK.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es2015\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SpacetimeDB SDK in Rust\nDESCRIPTION: Imports necessary components from the SpacetimeDB SDK for database interaction and event handling.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb_sdk::{credentials, DbContext, Error, Event, Identity, Status, Table, TableWithPrimaryKey};\n```\n\n----------------------------------------\n\nTITLE: Creating Client Directory in Rust\nDESCRIPTION: Creates a new Rust crate named 'client' for the chat application client.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo new client\n```\n\n----------------------------------------\n\nTITLE: Module Name Configuration Method\nDESCRIPTION: Method to set the module name or identity for the database connection.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnectionBuilder {\n    fn with_module_name(self, name_or_identity: impl ToString) -> Self;\n}\n```\n\n----------------------------------------\n\nTITLE: Database Publication with Name Success Response\nDESCRIPTION: JSON response format for successful database publication with a name. Includes domain information, database identity, and operation type.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ \"Success\": {\n    \"domain\": null | string,\n    \"database_identity\": string,\n    \"op\": \"created\" | \"updated\"\n} }\n```\n\n----------------------------------------\n\nTITLE: AlgebraicType JSON Structure\nDESCRIPTION: Defines the union type structure for AlgebraicType with its four variants.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sats-json.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"Sum\": SumType }\n| { \"Product\": ProductType }\n| { \"Builtin\": BuiltinType }\n| { \"Ref\": AlgebraicTypeRef }\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries Against SpacetimeDB\nDESCRIPTION: Commands to run SQL queries directly against a SpacetimeDB database for data inspection and verification. Shows both single-query execution and interactive mode.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Query all data from the 'player_state' table in 'my-database-name'\n# Note: Table names are case-sensitive (match your definition)\nspacetime sql my-database-name \"SELECT * FROM PlayerState\"\n\n# Use --interactive for a SQL prompt\n# spacetime sql --interactive my-database-name\n```\n\n----------------------------------------\n\nTITLE: Subscription Handle Methods\nDESCRIPTION: Methods for managing active database subscriptions including status checks and unsubscribe operations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionHandle {\n  public isEnded(): bool\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionHandle {\n  public isActive(): bool\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionHandle {\n  public unsubscribe(): void\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscriptionHandle {\n  public unsubscribeThen(\n    on_end: (ctx: SubscriptionEventContext) => void\n  ): void\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Connection State in TypeScript\nDESCRIPTION: This code provides a loading message to users while the application is attempting to connect to SpacetimeDB, improving the user interface by indicating progress.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nif (!conn || !connected || !identity) {\n  return (\n    <div className=\"App\">\n      <h1>Connecting...</h1>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: EventContext Type Declaration\nDESCRIPTION: Basic type declaration for EventContext showing its relationship to DbContext.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nEventContext\n```\n\n----------------------------------------\n\nTITLE: Code Generation Command Usage\nDESCRIPTION: Command for generating client files from a SpacetimeDB module with support for multiple programming languages and output customization.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nspacetime spacetime generate --lang <LANG> --out-dir <DIR> [--project-path <DIR> | --bin-path <PATH>]\n```\n\n----------------------------------------\n\nTITLE: Database List Command Usage\nDESCRIPTION: Command for listing databases attached to an identity with server specification option.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nspacetime list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Authentication Token Configuration\nDESCRIPTION: Method to configure authentication using an OpenID Connect JWT token.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nimpl DbConnectionBuilder {\n    fn with_token(self, token: Option<impl ToString>>) -> Self;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Top-level Routes Table for SpacetimeDB in Markdown\nDESCRIPTION: Creates a markdown table listing the top-level routes for SpacetimeDB, currently including only the GET /v1/ping endpoint and its description.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/authorization.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Route                         | Description                                            |\n| ----------------------------- | ------------------------------------------------------ |\n| [`GET /v1/ping`](#get-v1ping) | No-op. Used to determine whether a client can connect. |\n```\n\n----------------------------------------\n\nTITLE: Permission Denied Error for Database Name Addition\nDESCRIPTION: Error response when attempting to add a name that already exists and the user lacks permission to use it.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{ \"PermissionDenied\": {\n    \"domain\": string\n} }\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB C# Module Project Configuration\nDESCRIPTION: The csproj file for a SpacetimeDB C# module project. It targets .NET 8.0 with the wasi-wasm runtime identifier to enable WebAssembly compilation and includes the SpacetimeDB.Runtime package.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <RuntimeIdentifier>wasi-wasm</RuntimeIdentifier>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"SpacetimeDB.Runtime\" Version=\"1.0.0\" />\n  </ItemGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Access Reducers in EventContext - C#\nDESCRIPTION: This property provides access to reducers from the remote module, allowing clients to observe and invoke them.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nclass EventContext {\n    public RemoteReducers Reducers;\n    /* other fields */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Types from Generated Module in TypeScript\nDESCRIPTION: This TypeScript code imports required types from the generated module bindings, allowing the application to interact with SpacetimeDB types like DbConnection and User in a TypeScript environment.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DbConnection, ErrorContext, EventContext, Message, User } from './module_bindings';\nimport { Identity } from '@clockworklabs/spacetimedb-sdk';\n```\n\n----------------------------------------\n\nTITLE: Creating a new C# console project with .NET CLI\nDESCRIPTION: Creates a new C# console application project called 'client' using the .NET CLI, which will serve as the chat client application.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new console -o client\n```\n\n----------------------------------------\n\nTITLE: Database Rename Command Usage\nDESCRIPTION: Command syntax for renaming a SpacetimeDB database with options for server specification and non-interactive mode.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nspacetime rename [OPTIONS] --to <new-name> <database-identity>\n```\n\n----------------------------------------\n\nTITLE: Defining Common Production Rules in EBNF\nDESCRIPTION: This EBNF snippet outlines the basic production rules that can be used throughout the document. It specifies the syntax for tables, aliases, variables, and columns in the Spacetime SQL language.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_30\n\nLANGUAGE: ebnf\nCODE:\n```\ntable\n    = identifier\n    ;\n\nalias\n    = identifier\n    ;\n\nvar\n    = identifier\n    ;\n\ncolumn\n    = identifier\n    | identifier '.' identifier\n    ;\n```\n\n----------------------------------------\n\nTITLE: BuiltinType JSON Structure\nDESCRIPTION: Comprehensive definition of all built-in type variants including primitives, arrays, and maps.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sats-json.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ \"Bool\": [] }\n| { \"I8\": [] }\n| { \"U8\": [] }\n| { \"I16\": [] }\n| { \"U16\": [] }\n| { \"I32\": [] }\n| { \"U32\": [] }\n| { \"I64\": [] }\n| { \"U64\": [] }\n| { \"I128\": [] }\n| { \"U128\": [] }\n| { \"F32\": [] }\n| { \"F64\": [] }\n| { \"String\": [] }\n| { \"Array\": AlgebraicType }\n| { \"Map\": {\n      \"key_ty\": AlgebraicType,\n      \"ty\": AlgebraicType,\n  } }\n```\n\n----------------------------------------\n\nTITLE: Invalid Recursive RLS Rules in C#\nDESCRIPTION: Shows an invalid RLS implementation in C# with circular dependencies between rules that would cause the module to fail to publish.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/rls/index.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing SpacetimeDB;\n\npublic partial class Module\n{\n    /// <summary>\n    /// An account must have a corresponding player.\n    /// </summary>\n    [SpacetimeDB.ClientVisibilityFilter]\n    public static readonly Filter ACCOUNT_FILTER = new Filter.Sql(\n        \"SELECT a.* FROM account a JOIN player p ON a.id = p.id WHERE a.identity = :sender\"\n    );\n\n    /// <summary>\n    /// A player must have a corresponding account.\n    /// </summary>\n    [SpacetimeDB.ClientVisibilityFilter]\n    public static readonly Filter ACCOUNT_FILTER = new Filter.Sql(\n        \"SELECT p.* FROM account a JOIN player p ON a.id = p.id WHERE a.identity = :sender\"\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Database Names Response Format\nDESCRIPTION: JSON structure returned when requesting the names associated with a database, containing an array of name strings.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ \"names\": array<string> }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating System Variable Usage\nDESCRIPTION: Provides an example of setting a system variable to limit the number of rows scanned in a query.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n-- Reject queries that scan more than 10K rows\nSET row_limit = 10000\n```\n\n----------------------------------------\n\nTITLE: Retrieve Connection Identifier - C#\nDESCRIPTION: This property retrieves the ConnectionId that SpacetimeDB uses to identify the connection. This is crucial for managing database connections and tracking them uniquely.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IDbContext\n{\n    public ConnectionId ConnectionId { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Rust Chat Client with Cargo\nDESCRIPTION: These bash commands navigate to the client directory and run the Rust chat client using Cargo. This is the final step to execute the chat application.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncd client\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript React Client with PNPM\nDESCRIPTION: Shell command to start the development server for the React client application using PNPM package manager.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncd client\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Dedicated User for SpacetimeDB on Ubuntu\nDESCRIPTION: Commands to create a dedicated system user for SpacetimeDB to enhance security, create the required directory structure, and install SpacetimeDB using the official installation script.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir /stdb\nsudo useradd --system spacetimedb\nsudo chown -R spacetimedb:spacetimedb /stdb\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo -u spacetimedb bash -c 'curl -sSf https://install.spacetimedb.com | sh -s -- --root-dir /stdb --yes'\n```\n\n----------------------------------------\n\nTITLE: Defining a Grammar in EBNF\nDESCRIPTION: This snippet defines a context-free grammar in EBNF format, suitable for describing the structure of specific syntax rules a reader may need to follow.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/STYLE.md#2025-04-18_snippet_5\n\nLANGUAGE: ebnf\nCODE:\n```\nstatement ::= expression\nexpression ::= term (('+' | '-') term)*\nterm ::= factor (('*' | '/') factor)*\nfactor ::= number | '(' expression ')'\nnumber ::= digit+\n```\n\n----------------------------------------\n\nTITLE: Database Name Addition Success Response\nDESCRIPTION: JSON response when successfully adding a new name to a database, including domain and result information.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ \"Success\": {\n    \"domain\": string,\n    \"database_result\": string\n} }\n```\n\n----------------------------------------\n\nTITLE: BSATN Encoding of ArrayValue in F#\nDESCRIPTION: This code defines the BSATN encoding for ArrayValue. It includes the length of the array as a u32, followed by the BSATN encodings of each normalized element.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/bsatn.md#2025-04-18_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\nbsatn(ArrayValue(a))\n    = bsatn(len(a) as u32)\n   ++ bsatn(normalize(a)_0)\n   ++ ..\n   ++ bsatn(normalize(a)_n)\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB Architecture Diagram\nDESCRIPTION: A text-based diagram illustrating the architecture of SpacetimeDB, showing how client applications interact with the database through SQL queries and reducer calls.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    Client Application                          SpacetimeDB\n┌───────────────────────┐                ┌───────────────────────┐\n│                       │                │                       │\n│  ┌─────────────────┐  │    SQL Query   │  ┌─────────────────┐  │\n│  │ Subscribed Data │<─────────────────────│    Database     │  │\n│  └─────────────────┘  │                │  └─────────────────┘  │\n│           │           │                │           ^           │\n│           │           │                │           │           │\n│           v           │                │           v           │\n│  +─────────────────┐  │ call_reducer() │  ┌─────────────────┐  │\n│  │   Client Code   │─────────────────────>│   Module Code   │  │\n│  └─────────────────┘  │                │  └─────────────────┘  │\n│                       │                │                       │\n└───────────────────────┘                └───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining INSERT Statement Syntax in EBNF\nDESCRIPTION: Specifies the EBNF syntax for the INSERT statement in SpacetimeDB SQL.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_12\n\nLANGUAGE: ebnf\nCODE:\n```\nINSERT INTO table [ '(' column { ',' column } ')' ] VALUES '(' literal { ',' literal } ')'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Identity Metadata - C#\nDESCRIPTION: This property retrieves the Identity with which SpacetimeDB identifies the connection. It may return null if the connection was initiated anonymously and the Identity is not yet available.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IDbContext\n{\n    public Identity? Identity { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating C# Module Bindings with SpacetimeDB CLI\nDESCRIPTION: Commands to create a module_bindings directory and generate C# interface files for a SpacetimeDB module using the Spacetime CLI tool.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p module_bindings\nspacetime generate --lang cs --out-dir module_bindings --project-path PATH-TO-MODULE-DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure\nDESCRIPTION: Commands to create and navigate to the project directory for the SpacetimeDB chat application.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir quickstart-chat\ncd quickstart-chat\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Service File for SpacetimeDB\nDESCRIPTION: Commands to create and configure a systemd service file that will ensure SpacetimeDB runs automatically on system startup and restarts if it crashes.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo nano /etc/systemd/system/spacetimedb.service\n```\n\n----------------------------------------\n\nTITLE: SpacetimeDB C Bindings Header\nDESCRIPTION: C header file defining the interface between WASM modules and SpacetimeDB, including buffer management, logging, scheduling, and table operations.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/webassembly-abi/index.md#2025-04-18_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdlib.h>\n\ntypedef uint32_t Buffer;\ntypedef uint32_t BufferIter;\n\nvoid _console_log(\n    uint8_t level,\n    const uint8_t *target,\n    size_t target_len,\n    const uint8_t *filename,\n    size_t filename_len,\n    uint32_t line_number,\n    const uint8_t *text,\n    size_t text_len\n);\n\nBuffer _buffer_alloc(\n    const uint8_t *data,\n    size_t data_len\n);\nvoid _buffer_consume(\n    Buffer bufh,\n    uint8_t *into,\n    size_t len\n);\nsize_t _buffer_len(Buffer bufh);\n\nvoid _schedule_reducer(\n    const uint8_t *name,\n    size_t name_len,\n    const uint8_t *args,\n    size_t args_len,\n    uint64_t time,\n    uint64_t *out\n);\nvoid _cancel_reducer(uint64_t id);\n\nuint16_t _create_index(\n    const uint8_t *index_name,\n    size_t index_name_len,\n    uint32_t table_id,\n    uint8_t index_type,\n    const uint8_t *col_ids,\n    size_t col_len\n);\n```\n\n----------------------------------------\n\nTITLE: Committing Documentation Changes\nDESCRIPTION: Git commands to stage and commit documentation changes with a descriptive message.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"A specific description of the changes I made and why\"\n```\n\n----------------------------------------\n\nTITLE: Running the C# Client Application\nDESCRIPTION: This snippet shows how to run the client application. It includes a call to the Main function in C# and provides a command to run the client using the dotnet CLI.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/c-sharp/quickstart.md#2025-04-18_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMain();\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run --project client\n```\n\n----------------------------------------\n\nTITLE: Connection Status Field\nDESCRIPTION: Field for checking the active status of a database connection.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DbContext {\n  isActive: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vector2 Module in Rust\nDESCRIPTION: Code snippet showing how to import the DbVector2 structure from the math module in the main Rust file. This needs to be added to the lib.rs file after moving the DbVector2 type to math.rs.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-4.md#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub mod math;\n\nuse math::DbVector2;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring UFW Firewall for Nginx\nDESCRIPTION: Commands to configure the Ubuntu UFW firewall to allow both HTTP and HTTPS traffic for Nginx and reload the firewall rules.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo ufw allow 'Nginx Full'\nsudo ufw reload\n```\n\n----------------------------------------\n\nTITLE: Generating Rust Module Bindings with SpacetimeDB CLI\nDESCRIPTION: CLI command to generate Rust interface files for a SpacetimeDB module into the module_bindings directory.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p src/module_bindings\nspacetime generate --lang rust \\\n    --out-dir src/module_bindings \\\n    --project-path PATH-TO-MODULE-DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Examples of EBNF Grammar\nDESCRIPTION: The following examples demonstrate valid expressions according to the defined EBNF grammar, showcasing both simple and complex structures.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/STYLE.md#2025-04-18_snippet_6\n\nLANGUAGE: ebnf\nCODE:\n```\n/* Simple example: */\n3 + 4\n/* Complex example: */\n(2 * (3 + 5)) / 4\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB Unity SDK\nDESCRIPTION: Git URL for installing the SpacetimeDB Unity SDK package via Unity Package Manager.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-1.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/clockworklabs/com.clockworklabs.spacetimedbsdk.git\n```\n\n----------------------------------------\n\nTITLE: Cloning SpacetimeDB Documentation Repository\nDESCRIPTION: Command to clone a forked version of the spacetime-docs repository for local development.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone ssh://git@github.com/<username>/spacetime-docs\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Feature Branch\nDESCRIPTION: Git commands to create a new branch for changes and push it to the remote repository.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b a-branch-name-that-describes-my-change\ngit push -u origin a-branch-name-that-describes-my-change\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB CLI on macOS and Linux\nDESCRIPTION: Command to install the SpacetimeDB CLI tool on macOS and Linux systems using curl.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSf https://install.spacetimedb.com | sh\n```\n\n----------------------------------------\n\nTITLE: SumValue JSON Structure\nDESCRIPTION: Demonstrates the format for SumValue encoding, which uses a tag to identify the variant and associated value.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sats-json.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"<tag>\": AlgebraicValue\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SpacetimeDB Rust Module\nDESCRIPTION: Command to initialize a new SpacetimeDB module using the Rust programming language.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspacetime init --lang rust server\n```\n\n----------------------------------------\n\nTITLE: Example SpacetimeDB CLI Commands\nDESCRIPTION: Demonstrates usage of SpacetimeDB CLI commands for creating and managing character data.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/how-to/incremental-migrations.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ spacetime logs incr-migration-demo -f &\n\n$ spacetime call incr-migration-demo create_character '{ \"Fighter\": {} }' \"Phoebe\"\n\n2025-01-07T15:32:57.447286Z  INFO: src/lib.rs:21: Creating new level 1 Fighter named Phoebe\n\n$ spacetime call -s local incr-migration-demo rename_character \"Gefjon\"\n\n2025-01-07T15:33:48.966134Z  INFO: src/lib.rs:48: Renaming Phoebe to Gefjon\n\n$ spacetime call -s local incr-migration-demo level_up_character\n\n2025-01-07T15:34:01.437495Z  INFO: src/lib.rs:66: Leveling up Gefjon from 1 to 2\n\n$ spacetime sql incr-migration-demo 'SELECT * FROM character'\n```\n\n----------------------------------------\n\nTITLE: Importing Module Bindings in Rust\nDESCRIPTION: Rust code to import the generated module bindings into the main application file.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/index.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nmod module_bindings;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in SpacetimeDB (TOML)\nDESCRIPTION: This snippet demonstrates how to configure logging in SpacetimeDB. It sets the global log level and provides specific directives for different components of the system.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference/standalone-config.md#2025-04-18_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[logs]\nlevel = \"error\"\ndirectives = [\n    \"spacetimedb=warn\",\n    \"spacetimedb_standalone=info\",\n]\n```\n\n----------------------------------------\n\nTITLE: Managing SpacetimeDB Logs and Databases with CLI Commands\nDESCRIPTION: Examples of SpacetimeDB CLI commands for viewing logs and deleting databases. Shows how to follow logs in real-time, limit log output, and delete databases by name or identity.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Show all logs for 'my-database-name'\nspacetime logs my-database-name\n\n# Follow the logs in real-time (like tail -f)\n# spacetime logs -f my-database-name\n\n# Show the last 50 log lines\n# spacetime logs -n 50 my-database-name\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Delete the database named 'my-database-name'\nspacetime delete my-database-name\n\n# Delete a database by its identity (replace with actual identity)\n# spacetime delete 0x123abc...\n```\n\n----------------------------------------\n\nTITLE: Checking .NET SDK Version\nDESCRIPTION: Command to list installed .NET SDK versions to ensure .NET 8 is available.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet --list-sdks\n```\n\n----------------------------------------\n\nTITLE: ProductValue JSON Structure\nDESCRIPTION: Shows the array format for ProductValue encoding, where each element corresponds to the ProductType elements array.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sats-json.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\narray<AlgebraicValue>\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB SDK via npm\nDESCRIPTION: Command to install the SpacetimeDB SDK as a dependency in a TypeScript project.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd client\nnpm install @clockworklabs/spacetimedb-sdk\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ArrayList in C#\nDESCRIPTION: The following example demonstrates how to create and use an ArrayList, including adding elements and printing its properties. It shows how to interact with the ArrayList collection effectively.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/STYLE.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections;\npublic class SamplesArrayList  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new ArrayList.\n      ArrayList myAL = new ArrayList();\n      myAL.Add(\"Hello\");\n      myAL.Add(\"World\");\n      myAL.Add(\"!\");\n\n      // Displays the properties and values of the ArrayList.\n      Console.WriteLine( \"myAL\" );\n      Console.WriteLine( \"    Count:    {0}\", myAL.Count );\n      Console.WriteLine( \"    Capacity: {0}\", myAL.Capacity );\n      Console.Write( \"    Values:\" );\n      PrintValues( myAL );\n   }\n\n   public static void PrintValues( IEnumerable myList )  {\n      foreach ( Object obj in myList )\n         Console.Write( \"   {0}\", obj );\n      Console.WriteLine();\n   }\n}\n\n/*\nThis code produces output similar to the following:\n\nmyAL\n    Count:    3\n    Capacity: 4\n    Values:   Hello   World   !\n*/\n```\n\n----------------------------------------\n\nTITLE: Managing Database Energy Commands\nDESCRIPTION: Main command for invoking operations related to database budgets. Currently supports the 'balance' subcommand.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nspacetime energy\n       energy <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting SpacetimeDB Service\nDESCRIPTION: Commands to enable the SpacetimeDB service to start on boot, start it immediately, and check its status to verify proper operation.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable spacetimedb\nsudo systemctl start spacetimedb\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl status spacetimedb\n```\n\n----------------------------------------\n\nTITLE: Console Logging Function for SpacetimeDB Module ABI\nDESCRIPTION: Defines the _console_log function that allows modules to log messages at different levels with source information. The function accepts UTF-8 strings for target, filename, and message text, copying the provided data without transferring ownership.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/webassembly-abi/index.md#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Log at `level` a `text` message occuring in `filename:line_number`\n/// with `target` being the module path at the `log!` invocation site.\n///\n/// These various pointers are interpreted lossily as UTF-8 strings.\n/// The data pointed to are copied. Ownership does not transfer.\n///\n/// See https://docs.rs/log/latest/log/struct.Record.html#method.target\n/// for more info on `target`.\n///\n/// Calls to the function cannot fail\n/// irrespective of memory access violations.\n/// If they occur, no message is logged.\nfn _console_log(\n    // The level we're logging at.\n    // One of the `LOG_*` constants above.\n    level: u8,\n    // The module path, if any, associated with the message\n    // or to \"blame\" for the reason we're logging.\n    //\n    // This is a pointer to a buffer holding an UTF-8 encoded string.\n    // When the pointer is `NULL`, `target` is ignored.\n    target: *const u8,\n    // The length of the buffer pointed to by `text`.\n    // Unused when `target` is `NULL`.\n    target_len: usize,\n    // The file name, if any, associated with the message\n    // or to \"blame\" for the reason we're logging.\n    //\n    // This is a pointer to a buffer holding an UTF-8 encoded string.\n    // When the pointer is `NULL`, `filename` is ignored.\n    filename: *const u8,\n    // The length of the buffer pointed to by `text`.\n    // Unused when `filename` is `NULL`.\n    filename_len: usize,\n    // The line number associated with the message\n    // or to \"blame\" for the reason we're logging.\n    line_number: u32,\n    // A pointer to a buffer holding an UTF-8 encoded message to log.\n    text: *const u8,\n    // The length of the buffer pointed to by `text`.\n    text_len: usize,\n);\n```\n\n----------------------------------------\n\nTITLE: Database Names Update Success Response\nDESCRIPTION: Simple success response when successfully updating the list of names for a database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{ \"Success\": null }\n```\n\n----------------------------------------\n\nTITLE: Component Styles\nDESCRIPTION: CSS styles for the chat application component, including grid layout and theme variables.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/typescript/quickstart.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: grid;\n  /* \n    3 rows: \n      1) Profile\n      2) Main content (left = message, right = system)\n      3) New message\n  */\n  grid-template-rows: auto 1fr auto;\n  /* 2 columns: left for chat, right for system */\n  grid-template-columns: 2fr 1fr;\n\n  height: 100vh; /* fill viewport height */\n  width: clamp(300px, 100%, 1200px);\n  margin: 0 auto;\n}\n\n/* ----- Profile (Row 1, spans both columns) ----- */\n.profile {\n  grid-column: 1 / 3;\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border-bottom: 1px solid var(--theme-color);\n}\n\n.profile h1 {\n  margin-right: auto; /* pushes name/edit form to the right */\n}\n\n.profile form {\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n  gap: 0.5rem;\n  max-width: 300px;\n}\n\n.profile form input {\n  background-color: var(--textbox-color);\n}\n\n/* ----- Chat Messages (Row 2, Col 1) ----- */\n.message {\n  grid-row: 2 / 3;\n  grid-column: 1 / 2;\n  \n  /* Ensure this section scrolls if content is long */\n  overflow-y: auto;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.message h1 {\n  margin-right: 0.5rem;\n}\n\n/* ----- System Panel (Row 2, Col 2) ----- */\n.system {\n  grid-row: 2 / 3;\n  grid-column: 2 / 3;\n\n  /* Also scroll independently if needed */\n  overflow-y: auto;\n  padding: 1rem;\n  border-left: 1px solid var(--theme-color);\n  white-space: pre-wrap;\n  font-family: monospace;\n}\n\n/* ----- New Message (Row 3, spans columns 1-2) ----- */\n.new-message {\n  grid-column: 1 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n  border-top: 1px solid var(--theme-color);\n}\n\n.new-message form {\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  width: 100%;\n  max-width: 600px;\n}\n\n.new-message form h3 {\n  margin-bottom: 0.25rem;\n}\n\n/* Distinct background for the textarea */\n.new-message form textarea {\n  font-family: monospace;\n  font-weight: 400;\n  font-size: 1rem;\n  resize: vertical;\n  min-height: 80px;\n  background-color: var(--textbox-color);\n  color: inherit;\n\n  /* Subtle shadow for visibility */\n  box-shadow:\n    0 1px 3px rgba(0, 0, 0, 0.12),\n    0 1px 2px rgba(0, 0, 0, 0.24);\n}\n\n@media (prefers-color-scheme: dark) {\n  .new-message form textarea {\n    box-shadow: 0 0 0 1px #17492b;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Denied Error for Database Names Update\nDESCRIPTION: Error response when attempting to update database names without proper permissions.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/http/database.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{ \"PermissionDenied\": null }\n```\n\n----------------------------------------\n\nTITLE: Obtaining SSL Certificate from Let's Encrypt\nDESCRIPTION: Command to request and automatically configure an SSL certificate for your domain using Certbot with the Nginx plugin.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo certbot --nginx -d example.com\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Configuration for SpacetimeDB\nDESCRIPTION: Commands to create a new Nginx site configuration file for SpacetimeDB reverse proxy.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo nano /etc/nginx/sites-available/spacetimedb\n```\n\n----------------------------------------\n\nTITLE: Table Index Creation Function for SpacetimeDB Module ABI\nDESCRIPTION: Defines the _create_index function for creating table indices. Currently limited to single-column btree indices, this function allows naming an index on a specific table column. It returns an error if the table doesn't exist or if invalid parameters are provided.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/webassembly-abi/index.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n/// Creates an index with the name `index_name` and type `index_type`,\n/// on a product of the given columns in `col_ids`\n/// in the table identified by `table_id`.\n///\n/// Here `index_name` points to a UTF-8 slice in WASM memory\n/// and `col_ids` points to a byte slice in WASM memory\n/// with each element being a column.\n///\n/// Currently only single-column-indices are supported\n/// and they may only be of the btree index type.\n/// In the former case, the function will panic,\n/// and in latter, an error is returned.\n///\n/// Returns an error on any memory access violations,\n/// if `(index_name, index_name_len)` is not valid UTF-8,\n/// or when a table with the provided `table_id` doesn't exist.\n///\n/// Traps if `index_type /= 0` or if `col_len /= 1`.\nfn _create_index(\n    // A pointer to a buffer holding an UTF-8 encoded index name.\n    index_name: *const u8,\n    // The length of the buffer pointed to by `index_name`.\n    index_name_len: usize,\n    // The ID of the table to create the index for.\n    table_id: u32,\n    // The type of the index.\n    // Must be `0` currently, that is, a btree-index.\n    index_type: u8,\n    // A pointer to a buffer holding a byte slice\n    // where each element is the position\n    // of a column to include in the index.\n    col_ids: *const u8,\n    // The length of the byte slice in `col_ids`. Must be `1`.\n    col_len: usize,\n) -> u16;\n```\n\n----------------------------------------\n\nTITLE: Clearing and Creating main.rs\nDESCRIPTION: Removes the existing main.rs file and creates a new empty one for the chat client implementation.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sdks/rust/quickstart.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm client/src/main.rs\ntouch client/src/main.rs\n```\n\n----------------------------------------\n\nTITLE: Logging in to SpacetimeDB\nDESCRIPTION: Command to authenticate with SpacetimeDB, which is required for publishing to servers that require authentication such as Maincloud.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nspacetime login\n# Follow the prompts to authenticate via web browser\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx Web Server on Ubuntu\nDESCRIPTION: Commands to update package lists and install the Nginx web server, which will be used as a reverse proxy for SpacetimeDB.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo apt install nginx -y\n```\n\n----------------------------------------\n\nTITLE: Enabling Nginx Configuration and Restarting Service\nDESCRIPTION: Commands to enable the SpacetimeDB Nginx configuration by creating a symbolic link and restarting the Nginx service to apply the changes.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo ln -s /etc/nginx/sites-available/spacetimedb /etc/nginx/sites-enabled/\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Literal Usage in SQL Queries\nDESCRIPTION: Provides examples of using various literal types in SQL queries, including integers, floats, and strings.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\n-- All products that sell for more than $1000\nSELECT * FROM Inventory WHERE price > 1000\nSELECT * FROM Inventory WHERE price > 1e3\nSELECT * FROM Inventory WHERE price > 1E3\n\n-- All measurements where the temperature is greater than 105.3\nSELECT * FROM Measurements WHERE temperature > 105.3\nSELECT * FROM Measurements WHERE temperature > 1053e-1\nSELECT * FROM Measurements WHERE temperature > 1053E-1\n\nSELECT * FROM Customers WHERE first_name = 'John'\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Rust Client SDK Project for SpacetimeDB\nDESCRIPTION: Provides instructions for setting up a Rust client project to interact with a SpacetimeDB module, including project creation, dependency addition, and module binding generation.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncargo new my_rust_client\ncd my_rust_client\ncargo add spacetimedb_sdk\nmkdir -p src/module_bindings\nspacetime generate --lang rust \\\n    --out-dir src/module_bindings \\\n    --project-path ../path/to/your/server_module\n```\n\nLANGUAGE: rust\nCODE:\n```\nmod module_bindings;\n// Optional: bring generated types into scope\n// use module_bindings::*;\n```\n\n----------------------------------------\n\nTITLE: Installing Rust on macOS/Linux\nDESCRIPTION: Command to install Rust compiler on macOS and Linux systems using the official installation script.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/rust/quickstart.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting SpacetimeDB Service Issues\nDESCRIPTION: Commands for diagnosing problems with the SpacetimeDB service, including checking service logs, verifying file permissions, and fixing executable permissions if needed.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nsudo journalctl -u spacetimedb --no-pager | tail -20\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo ls -lah /stdb/spacetime\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo chmod +x /stdb/spacetime\n```\n\n----------------------------------------\n\nTITLE: Installing Let's Encrypt Certbot for SSL\nDESCRIPTION: Commands to install Certbot and its Nginx plugin, which will be used to obtain and configure SSL certificates from Let's Encrypt.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install certbot python3-certbot-nginx -y\n```\n\n----------------------------------------\n\nTITLE: Defining Hex Literals in EBNF\nDESCRIPTION: This snippet defines the structure of hex literals in Spacetime SQL using EBNF syntax. Hex literals are used to represent values in various contexts, including identities and connections. The format allows for both prefixed and quoted hex values.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/sql/index.md#2025-04-18_snippet_23\n\nLANGUAGE: ebnf\nCODE:\n```\nHEX\n    = 'X' \"'\" { HEXIT } \"'\"\n    | '0' 'x' { HEXIT }\n    ;\n\nHEXIT\n    = DIGIT | a..f | A..F\n    ;\n```\n\n----------------------------------------\n\nTITLE: Installing WASI Experimental Workload for .NET 8\nDESCRIPTION: Command to install the WASI experimental workload required for SpacetimeDB C# module development.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/quickstart.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet workload install wasi-experimental\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Nginx Configuration\nDESCRIPTION: Commands to test the Nginx configuration for syntax errors and check the Nginx logs for detailed error information.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nsudo nginx -t\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo journalctl -u nginx --no-pager | tail -20\n```\n\n----------------------------------------\n\nTITLE: Verifying Let's Encrypt Certificate Auto-Renewal\nDESCRIPTION: Command to check if the Certbot automatic renewal timer is active, which ensures SSL certificates are renewed before they expire.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/deploying/spacetimedb-standalone.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl status certbot.timer\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure\nDESCRIPTION: Commands to create and navigate to the project root directory for the Blackholio game.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-1.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir blackholio\ncd blackholio\n```\n\n----------------------------------------\n\nTITLE: Visualizing Identity Byte Structure in SpacetimeDB Authentication\nDESCRIPTION: ASCII diagram showing the byte structure of SpacetimeDB's Identity value, which consists of prefix bytes, checksum hash, and ID hash derived from OIDC issuer/subject pairs\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/llms.md#2025-04-18_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\nByte Index: |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  | ... | 31  |\n            +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\nContents:   | 0xc2| 0x00| Checksum Hash (4 bytes) |  ID Hash (26 bytes) |\n            +-----+-----+-------------------------+---------------------+\n                      (First 4 bytes of           (First 26 bytes of\n                       BLAKE3(0xc200 || idHash))    BLAKE3(iss|sub))\n```\n\n----------------------------------------\n\nTITLE: Markdown Tables for Class and Interface Documentation\nDESCRIPTION: Example showing how to structure separate tables for different types of definitions (classes and interfaces) with appropriate headers.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/STYLE.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Classes\n\n| ArrayList | Implements the IList interface using an array whose size is dynamically increased as required. |\n| BitArray | Manages a compact array of bit values, which are represented as Booleans, where true indicates that the bit is on (1) and false indicates the bit is off (0). |\n\n# Interfaces\n\n| ICollection | Defines size, enumerators, and synchronization methods for all nongeneric collections. |\n| IComparer | Exposes a method that compares two objects. |\n```\n\n----------------------------------------\n\nTITLE: Defining TaggedEnum Abstract Record in C# for SpacetimeDB\nDESCRIPTION: Defines the TaggedEnum abstract record for creating tagged unions in SpacetimeDB. It allows holding a value from any one of several types using code generation.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/modules/c-sharp/index.md#2025-04-18_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace SpacetimeDB;\n\npublic abstract record TaggedEnum<Variants> : IEquatable<TaggedEnum<Variants>> where Variants : struct, ITuple\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Authority in SpacetimeDB (TOML)\nDESCRIPTION: This snippet shows how to set up the certificate authority configuration in SpacetimeDB. It specifies the paths for the JWT private and public key files used for token signing.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/cli-reference/standalone-config.md#2025-04-18_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[certificate-authority]\njwt-priv-key-path = \"/path/to/id_ecdsas\"\njwt-pub-key-path = \"/path/to/id_ecdsas.pub\"\n```\n\n----------------------------------------\n\nTITLE: Example Subscription Usage in Rust\nDESCRIPTION: Demonstrates practical usage of the SubscriptionBuilder in Rust, showing how to establish a database connection and register a subscription with callbacks.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/subscriptions/index.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Establish a database connection\nlet conn: DbConnection = connect_to_db();\n\n// Register a subscription with the database\nlet subscription_handle = conn\n    .subscription_builder()\n    .on_applied(|ctx| { /* handle applied state */ })\n    .on_error(|error_ctx, error| { /* handle error */ })\n    .subscribe([\"SELECT * FROM user\", \"SELECT * FROM message\"]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Handler in Rust\nDESCRIPTION: Creates a client connection handler reducer that logs when clients connect to the database.\nSOURCE: https://github.com/clockworklabs/spacetime-docs/blob/master/docs/unity/part-2.md#2025-04-18_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[spacetimedb::reducer(client_connected)]\npub fn connect(ctx: &ReducerContext) -> Result<(), String> {\n    log::debug!(\"{} just connected.\", ctx.sender);\n    Ok(())\n}\n```"
  }
]