[
  {
    "owner": "grpc",
    "repo": "grpc.io",
    "content": "TITLE: Starting a gRPC Server with Service Implementation\nDESCRIPTION: Creates and starts a gRPC server for the RouteGuide service. It registers the service implementation methods, binds to a network address, and starts listening for client requests on port 50051.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getServer() {\n  var server = new grpc.Server();\n  server.addService(routeguide.RouteGuide.service, {\n    getFeature: getFeature,\n    listFeatures: listFeatures,\n    recordRoute: recordRoute,\n    routeChat: routeChat\n  });\n  return server;\n}\nvar routeServer = getServer();\nrouteServer.bindAsync('0.0.0.0:50051', grpc.ServerCredentials.createInsecure(), () => {\n  routeServer.start();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Streaming RPC Method in Kotlin Server\nDESCRIPTION: Implementation of the recordRoute method which processes a stream of Points from the client and returns a RouteSummary with statistics about the route traversed.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\noverride suspend fun recordRoute(requests: Flow<Point>): RouteSummary {\n  var pointCount = 0\n  var featureCount = 0\n  var distance = 0\n  var previous: Point? = null\n  val stopwatch = Stopwatch.createStarted(ticker)\n  requests.collect { request ->\n    pointCount++\n    if (getFeature(request).exists()) {\n      featureCount++\n    }\n    val prev = previous\n    if (prev != null) {\n      distance += prev distanceTo request\n    }\n    previous = request\n  }\n  return RouteSummary.newBuilder().apply {\n    this.pointCount = pointCount\n    this.featureCount = featureCount\n    this.distance = distance\n    this.elapsedTime = Durations.fromMicros(stopwatch.elapsed(TimeUnit.MICROSECONDS))\n  }.build()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic gRPC Service with Protocol Buffers\nDESCRIPTION: Basic service definition showing a simple Hello service with request and response message types using protocol buffers.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/what-is-grpc/core-concepts.md#2025-04-08_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nservice HelloService {\n  rpc SayHello (HelloRequest) returns (HelloResponse);\n}\n\nmessage HelloRequest {\n  string greeting = 1;\n}\n\nmessage HelloResponse {\n  string reply = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional Streaming RPC Method\nDESCRIPTION: Definition of a bidirectional streaming RPC method where both client and server can send streams of messages independently.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/what-is-grpc/core-concepts.md#2025-04-08_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\nrpc BidiHello(stream HelloRequest) returns (stream HelloResponse);\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC Server in Kotlin\nDESCRIPTION: Server initialization code that creates and starts a gRPC server instance. Shows how to configure the server port, add services, and handle server lifecycle.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RouteGuideServer(\n    val port: Int,\n    val features: Collection<Feature> = Database.features(),\n    val server: Server =\n      ServerBuilder.forPort(port)\n        .addService(RouteGuideService(features)).build()\n) {\n\n  fun start() {\n    server.start()\n    println(\"Server started, listening on $port\")\n    /* ... */\n  }\n  /* ... */\n}\n\nfun main(args: Array<String>) {\n  val port = 8980\n  val server = RouteGuideServer(port)\n  server.start()\n  server.awaitTermination()\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Streaming RPC Method\nDESCRIPTION: Go implementation of the ListFeatures method handling server-side streaming RPC requests.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *routeGuideServer) ListFeatures(rect *pb.Rectangle, stream pb.RouteGuide_ListFeaturesServer) error {\n  for _, feature := range s.savedFeatures {\n    if inRange(feature.Location, rect) {\n      if err := stream.Send(feature); err != nil {\n        return err\n      }\n    }\n  }\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Streaming RPC in Java gRPC\nDESCRIPTION: This method demonstrates how to implement client-side streaming RPC using the RecordRoute service. It uses an asynchronous stub to send a stream of Point objects to the server and receive a single RouteSummary response. The implementation manages both request streaming and handling the asynchronous response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprivate String recordRoute(List<Point> points, int numPoints, RouteGuideStub asyncStub)\n        throws InterruptedException, RuntimeException {\n    final StringBuffer logs = new StringBuffer();\n    appendLogs(logs, \"*** RecordRoute\");\n\n    final CountDownLatch finishLatch = new CountDownLatch(1);\n    StreamObserver<RouteSummary> responseObserver = new StreamObserver<RouteSummary>() {\n        @Override\n        public void onNext(RouteSummary summary) {\n            appendLogs(logs, \"Finished trip with {0} points. Passed {1} features. \"\n                    + \"Travelled {2} meters. It took {3} seconds.\", summary.getPointCount(),\n                    summary.getFeatureCount(), summary.getDistance(),\n                    summary.getElapsedTime());\n        }\n\n        @Override\n        public void onError(Throwable t) {\n            failed = t;\n            finishLatch.countDown();\n        }\n\n        @Override\n        public void onCompleted() {\n            appendLogs(logs, \"Finished RecordRoute\");\n            finishLatch.countDown();\n        }\n    };\n\n    StreamObserver<Point> requestObserver = asyncStub.recordRoute(responseObserver);\n    try {\n        // Send numPoints points randomly selected from the points list.\n        Random rand = new Random();\n        for (int i = 0; i < numPoints; ++i) {\n            int index = rand.nextInt(points.size());\n            Point point = points.get(index);\n            appendLogs(logs, \"Visiting point {0}, {1}\", RouteGuideUtil.getLatitude(point),\n                    RouteGuideUtil.getLongitude(point));\n            requestObserver.onNext(point);\n            // Sleep for a bit before sending the next one.\n            Thread.sleep(rand.nextInt(1000) + 500);\n            if (finishLatch.getCount() == 0) {\n                // RPC completed or errored before we finished sending.\n                // Sending further requests won't error, but they will just be thrown away.\n                break;\n            }\n        }\n    } catch (RuntimeException e) {\n        // Cancel RPC\n        requestObserver.onError(e);\n        throw e;\n    }\n    // Mark the end of requests\n    requestObserver.onCompleted();\n\n    // Receiving happens asynchronously\n    if (!finishLatch.await(1, TimeUnit.MINUTES)) {\n        throw new RuntimeException(\n               \"Could not finish rpc within 1 minute, the server is likely down\");\n    }\n\n    if (failed != null) {\n        throw new RuntimeException(failed);\n    }\n    return logs.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Server-side Streaming RPC Method in Java gRPC\nDESCRIPTION: Example of calling a server-side streaming RPC method (listFeatures) using a blocking stub. The code creates a Rectangle request and receives an Iterator to access the stream of Feature objects returned by the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nRectangle request =\n    Rectangle.newBuilder()\n        .setLo(Point.newBuilder().setLatitude(lowLat).setLongitude(lowLon).build())\n        .setHi(Point.newBuilder().setLatitude(hiLat).setLongitude(hiLon).build()).build();\nIterator<Feature> features;\ntry {\n  features = blockingStub.listFeatures(request);\n} catch (StatusRuntimeException e) {\n  logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client Streaming RPC Method\nDESCRIPTION: Definition of a client streaming RPC method where client sends a stream of requests and receives a single response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/what-is-grpc/core-concepts.md#2025-04-08_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\nrpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: Basic service definition for RouteGuide service showing various RPC method types including simple, server-side streaming, client-side streaming, and bidirectional streaming.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nservice RouteGuide {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple RPC Method in Python\nDESCRIPTION: Example of implementing a simple RPC method (GetFeature) in the RouteGuide service. This method receives a Point and returns a Feature.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef GetFeature(self, request, context):\n    feature = get_feature(self.db, request)\n    if feature is None:\n        return route_guide_pb2.Feature(name=\"\", location=request)\n    else:\n        return feature\n```\n\n----------------------------------------\n\nTITLE: Creating a gRPC Client Stub in Go\nDESCRIPTION: Code to create a client stub from the gRPC connection. The stub is generated from the protobuf definition and provides methods for invoking RPC calls.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nclient := pb.NewRouteGuideClient(conn)\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC Service in Protocol Buffers\nDESCRIPTION: The basic service definition for the RouteGuide service in protocol buffers syntax, which will be used to generate client and server code.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nservice RouteGuide {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC Service in Protocol Buffers\nDESCRIPTION: The basic service definition for the RouteGuide service in protocol buffers syntax, which will be used to generate client and server code.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nservice RouteGuide {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Streaming RPC in Java gRPC\nDESCRIPTION: Implementation of the recordRoute method which demonstrates client-side streaming RPC. The method receives a stream of Point objects from the client and returns a single RouteSummary with trip information.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic StreamObserver<Point> recordRoute(final StreamObserver<RouteSummary> responseObserver) {\n  return new StreamObserver<Point>() {\n    int pointCount;\n    int featureCount;\n    int distance;\n    Point previous;\n    long startTime = System.nanoTime();\n\n    @Override\n    public void onNext(Point point) {\n      pointCount++;\n      if (RouteGuideUtil.exists(checkFeature(point))) {\n        featureCount++;\n      }\n      // For each point after the first, add the incremental distance from the previous point\n      // to the total distance value.\n      if (previous != null) {\n        distance += calcDistance(previous, point);\n      }\n      previous = point;\n    }\n\n    @Override\n    public void onError(Throwable t) {\n      logger.log(Level.WARNING, \"Encountered error in recordRoute\", t);\n    }\n\n    @Override\n    public void onCompleted() {\n      long seconds = NANOSECONDS.toSeconds(System.nanoTime() - startTime);\n      responseObserver.onNext(RouteSummary.newBuilder().setPointCount(pointCount)\n          .setFeatureCount(featureCount).setDistance(distance)\n          .setElapsedTime((int) seconds).build());\n      responseObserver.onCompleted();\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Unary RPC Call to GetFeature\nDESCRIPTION: Demonstrates how to make a simple unary RPC call to the getFeature method. It creates a request with latitude and longitude coordinates, sends it to the server, and processes the response in a callback.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = {latitude: 409146138, longitude: -746188906};\nstub.getFeature(point, function(err, feature) {\n  if (err) {\n    // process error\n  } else {\n    // process feature\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Simple RPC Method in Protocol Buffer\nDESCRIPTION: Definition of a simple RPC method in protocol buffer that accepts a Point and returns a Feature. This demonstrates a unary RPC call pattern.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\n// Obtains the feature at a given position.\nrpc GetFeature(Point) returns (Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side SSL/TLS Authentication in gRPC with C++\nDESCRIPTION: This snippet demonstrates how to create and use SSL credentials to establish a secure connection with a gRPC server. It shows the creation of a default SSL ChannelCredentials object, establishing a channel with those credentials, creating a stub, and making an RPC call.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Create a default SSL ChannelCredentials object.\nauto channel_creds = grpc::SslCredentials(grpc::SslCredentialsOptions());\n// Create a channel using the credentials created in the previous step.\nauto channel = grpc::CreateChannel(server_name, channel_creds);\n// Create a stub on the channel.\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\n// Make actual RPC calls on the stub.\ngrpc::Status s = stub->sayHello(&context, *request, response);\n```\n\n----------------------------------------\n\nTITLE: Simple RPC Method Definition\nDESCRIPTION: Protocol buffer definition for a simple RPC method that gets a feature at a given position.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\n// Obtains the feature at a given position.\nrpc GetFeature(Point) returns (Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing SSL/TLS with Custom Auth Header in Node.js gRPC\nDESCRIPTION: Establishes a secure gRPC connection in Node.js using SSL/TLS and adds a custom authentication header with a token. This approach is useful for custom token-based authentication systems.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootCert = fs.readFileSync('path/to/root-cert');\nconst channelCreds = grpc.credentials.createSsl(rootCert);\nconst metaCallback = (_params, callback) => {\n    const meta = new grpc.Metadata();\n    meta.add('custom-auth-header', 'token');\n    callback(null, meta);\n}\nconst callCreds = grpc.credentials.createFromMetadataGenerator(metaCallback);\nconst combCreds = grpc.credentials.combineChannelCredentials(channelCreds, callCreds);\nconst stub = new helloworld.Greeter('myservice.example.com', combCreds);\n```\n\n----------------------------------------\n\nTITLE: Simple RPC Implementation in Kotlin\nDESCRIPTION: Example of implementing a simple RPC call using the GetFeature method. Shows how to make synchronous RPC calls with suspend functions.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval request = point(latitude, longitude)\nval feature = stub.getFeature(request)\n\nsuspend fun getFeature(latitude: Int, longitude: Int) {\n  val request = point(latitude, longitude)\n  val feature = stub.getFeature(request)\n  if (feature.exists()) { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: Demonstrates how to define a gRPC service and its methods using Protocol Buffers syntax. The example shows different types of RPC methods including simple, server-side streaming, client-side streaming, and bidirectional streaming.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nservice RouteGuide {\n   ...\n}\n\n// Obtains the feature at a given position.\nrpc GetFeature(Point) returns (Feature) {}\n\n// Obtains the Features available within the given Rectangle.  Results are\n// streamed rather than returned at once (e.g. in a response message with a\n// repeated field), as the rectangle may cover a large area and contain a\n// huge number of features.\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n\n// Accepts a stream of Points on a route being traversed, returning a\n// RouteSummary when traversal is completed.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n\n// Accepts a stream of RouteNotes sent while a route is being traversed,\n// while receiving other RouteNotes (e.g. from other users).\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\n----------------------------------------\n\nTITLE: Define RouteGuide Service in Protocol Buffers\nDESCRIPTION: Protocol buffer definitions for the RouteGuide service including various RPC method types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nservice RouteGuide {\n   ...\n}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc GetFeature(Point) returns (Feature) {}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Streaming RPC in Java gRPC\nDESCRIPTION: This method demonstrates how to implement a client-side streaming RPC where the client sends multiple Point objects to the server and receives a single RouteSummary response. It uses the asynchronous stub and StreamObserver interfaces to handle the streaming communication.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic void recordRoute(List<Feature> features, int numPoints) throws InterruptedException {\n  info(\"*** RecordRoute\");\n  final CountDownLatch finishLatch = new CountDownLatch(1);\n  StreamObserver<RouteSummary> responseObserver = new StreamObserver<RouteSummary>() {\n    @Override\n    public void onNext(RouteSummary summary) {\n      info(\"Finished trip with {0} points. Passed {1} features. \"\n          + \"Travelled {2} meters. It took {3} seconds.\", summary.getPointCount(),\n          summary.getFeatureCount(), summary.getDistance(), summary.getElapsedTime());\n    }\n\n    @Override\n    public void onError(Throwable t) {\n      Status status = Status.fromThrowable(t);\n      logger.log(Level.WARNING, \"RecordRoute Failed: {0}\", status);\n      finishLatch.countDown();\n    }\n\n    @Override\n    public void onCompleted() {\n      info(\"Finished RecordRoute\");\n      finishLatch.countDown();\n    }\n  };\n\n  StreamObserver<Point> requestObserver = asyncStub.recordRoute(responseObserver);\n  try {\n    // Send numPoints points randomly selected from the features list.\n    Random rand = new Random();\n    for (int i = 0; i < numPoints; ++i) {\n      int index = rand.nextInt(features.size());\n      Point point = features.get(index).getLocation();\n      info(\"Visiting point {0}, {1}\", RouteGuideUtil.getLatitude(point),\n          RouteGuideUtil.getLongitude(point));\n      requestObserver.onNext(point);\n      // Sleep for a bit before sending the next one.\n      Thread.sleep(rand.nextInt(1000) + 500);\n      if (finishLatch.getCount() == 0) {\n        // RPC completed or errored before we finished sending.\n        // Sending further requests won't error, but they will just be thrown away.\n        return;\n      }\n    }\n  } catch (RuntimeException e) {\n    // Cancel RPC\n    requestObserver.onError(e);\n    throw e;\n  }\n  // Mark the end of requests\n  requestObserver.onCompleted();\n\n  // Receiving happens asynchronously\n  finishLatch.await(1, TimeUnit.MINUTES);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Protocol Buffers\nDESCRIPTION: Example demonstrating how to define a gRPC service using protocol buffers, including a service definition with a greeting method and associated request/response message types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/what-is-grpc/introduction.md#2025-04-08_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\n// The greeter service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Client-side Streaming RPC Method in Protocol Buffers\nDESCRIPTION: Definition of a client-side streaming RPC method that sends a stream of requests and receives a single response, used to record a route consisting of multiple points.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n// Accepts a stream of Points on a route being traversed, returning a\n// RouteSummary when traversal is completed.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with gRPC-Web in JavaScript\nDESCRIPTION: A gRPC-Web implementation for retrieving data from a service. This example imports the necessary Protobuf definitions and client stub, creates a client instance, and makes a type-safe RPC call with automatic serialization/deserialization handling.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/postman-grpcweb.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ExampleRequest, ExampleResponse } = require('./generated/example_pb.js');\nconst { ExampleServiceClient } = require('./generated/example_grpc_web_pb.js');\n\nconst client = new ExampleServiceClient('https://api.example.com');\n\nconst request = new ExampleRequest();\n\nclient.getExampleData(request, {}, (err, response) => {\n    if (err) {\n        console.error('Error:', err);\n    } else {\n        console.log(response.toObject());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: Protocol buffer service definition for the RouteGuide service, which provides the foundation for the gRPC service implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nservice RouteGuide {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC in Python gRPC\nDESCRIPTION: Implementation of RouteChat method that handles bidirectional streaming of RouteNotes. Maintains a list of previous notes and yields matching notes based on location.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef RouteChat(self, request_iterator, context):\n    prev_notes = []\n    for new_note in request_iterator:\n        for prev_note in prev_notes:\n            if prev_note.location == new_note.location:\n                yield prev_note\n        prev_notes.append(new_note)\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Tools in Python\nDESCRIPTION: Command to install the grpcio-tools package using pip, which is necessary for generating gRPC code from Protocol Buffer definitions.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install grpcio-tools\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC in Java gRPC\nDESCRIPTION: Implementation of the routeChat method which demonstrates bidirectional streaming RPC. Both client and server can send messages independently, with the server responding with previous notes at each location while adding new notes.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic StreamObserver<RouteNote> routeChat(final StreamObserver<RouteNote> responseObserver) {\n  return new StreamObserver<RouteNote>() {\n    @Override\n    public void onNext(RouteNote note) {\n      List<RouteNote> notes = getOrCreateNotes(note.getLocation());\n\n      // Respond with all previous notes at this location.\n      for (RouteNote prevNote : notes.toArray(new RouteNote[0])) {\n        responseObserver.onNext(prevNote);\n      }\n\n      // Now add the new note to the list\n      notes.add(note);\n    }\n\n    @Override\n    public void onError(Throwable t) {\n      logger.log(Level.WARNING, \"Encountered error in routeChat\", t);\n    }\n\n    @Override\n    public void onCompleted() {\n      responseObserver.onCompleted();\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Lookup in RouteGuide Service\nDESCRIPTION: Implements the getFeature method that retrieves geographic feature information for a given point. It searches through a feature list and returns the corresponding feature or creates a new empty feature if none exists.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction checkFeature(point) {\n  var feature;\n  // Check if there is already a feature object for the given point\n  for (var i = 0; i < feature_list.length; i++) {\n    feature = feature_list[i];\n    if (feature.location.latitude === point.latitude &&\n        feature.location.longitude === point.longitude) {\n      return feature;\n    }\n  }\n  var name = '';\n  feature = {\n    name: name,\n    location: point\n  };\n  return feature;\n}\nfunction getFeature(call, callback) {\n  callback(null, checkFeature(call.request));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Client Stubs in Java\nDESCRIPTION: Code for creating client stubs to communicate with a gRPC server. It shows how to create both blocking (synchronous) and non-blocking (asynchronous) stubs using a ManagedChannel.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic RouteGuideClient(String host, int port) {\n  this(ManagedChannelBuilder.forAddress(host, port).usePlaintext());\n}\n\n/** Construct client for accessing RouteGuide server using the existing channel. */\npublic RouteGuideClient(ManagedChannelBuilder<?> channelBuilder) {\n  channel = channelBuilder.build();\n  blockingStub = RouteGuideGrpc.newBlockingStub(channel);\n  asyncStub = RouteGuideGrpc.newStub(channel);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side gRPC Service Methods\nDESCRIPTION: Java implementation of the gRPC Greeter service on the server side, including both the original SayHello method and the new SayHelloAgain method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Implementation of the gRPC service on the server-side.\nprivate class GreeterImpl extends GreeterGrpc.GreeterImplBase {\n\n  @Override\n  public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n    // Generate a greeting message for the original method\n    HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build();\n\n    // Send the reply back to the client.\n    responseObserver.onNext(reply);\n\n    // Indicate that no further messages will be sent to the client.\n    responseObserver.onCompleted();\n  }\n\n  @Override\n  public void sayHelloAgain(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n    // Generate another greeting message for the new method.\n    HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello again \" + req.getName()).build();\n\n    // Send the reply back to the client.\n    responseObserver.onNext(reply);\n\n    // Indicate that no further messages will be sent to the client.\n    responseObserver.onCompleted();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetFeature RPC Method in C++\nDESCRIPTION: Implementation of a simple unary RPC method that retrieves feature information for a given point.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nStatus GetFeature(ServerContext* context, const Point* point,\n                  Feature* feature) override {\n  feature->set_name(GetFeatureName(*point, feature_list_));\n  feature->mutable_location()->CopyFrom(*point);\n  return Status::OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Server Implementation\nDESCRIPTION: C++ server implementation of the Greeter service with SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nclass GreeterServiceImpl final : public Greeter::Service {\n  Status SayHello(ServerContext* context, const HelloRequest* request,\n                  HelloReply* reply) override {\n     // ...\n  }\n\n  Status SayHelloAgain(ServerContext* context, const HelloRequest* request,\n                       HelloReply* reply) override {\n    std::string prefix(\"Hello again \");\n    reply->set_message(prefix + request->name());\n    return Status::OK;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Client Stub in Python\nDESCRIPTION: Code to create a client stub for making RPC calls to the RouteGuide service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nchannel = grpc.insecure_channel('localhost:50051')\nstub = route_guide_pb2_grpc.RouteGuideStub(channel)\n```\n\n----------------------------------------\n\nTITLE: Regenerating gRPC Code from Updated Protocol Buffer\nDESCRIPTION: Command to regenerate Go code from the updated protocol buffer definition. This creates updated Go source files for serialization, client, and server code.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nprotoc --go_out=. --go_opt=paths=source_relative \\\n    --go-grpc_out=. --go-grpc_opt=paths=source_relative \\\n    helloworld/helloworld.proto\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC in Kotlin\nDESCRIPTION: Implementation of the RouteChat bidirectional streaming RPC method that handles a flow of RouteNote objects. The server both receives and emits notes while maintaining thread-safe state.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun routeChat(requests: Flow<RouteNote>): Flow<RouteNote> =\n  flow {\n    // could use transform, but it's currently experimental\n    requests.collect { note ->\n      val notes: MutableList<RouteNote> = routeNotes.computeIfAbsent(note.location) {\n        Collections.synchronizedList(mutableListOf<RouteNote>())\n      }\n      for (prevNote in notes.toTypedArray()) { // thread-safe snapshot\n        emit(prevNote)\n      }\n      notes += note\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC service using Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for a simple Greeter service with a SayHello RPC method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting RPC Handling in Asynchronous gRPC C++ Server\nDESCRIPTION: Initiates handling of an RPC request by providing context, request object, responder, and completion queue with a unique tag for identification.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nServerContext context;\nHelloRequest request;\nServerAsyncResponseWriter<HelloReply> responder;\nservice.RequestSayHello(&context, &request, &responder, &cq, &cq, (void*)1);\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: This snippet shows how to define a gRPC service using a .proto file. It demonstrates the use of Protocol Buffers for service definition, which can then be used to generate clients and servers in various supported languages.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/includes/why-grpc.md#2025-04-08_snippet_0\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\n.proto\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC in Go gRPC Server\nDESCRIPTION: Implementation of the RouteChat method that handles bidirectional streaming. The server receives RouteNote messages from the client and sends back notes associated with each location, allowing both sides to read and write messages independently.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *routeGuideServer) RouteChat(stream pb.RouteGuide_RouteChatServer) error {\n  for {\n    in, err := stream.Recv()\n    if err == io.EOF {\n      return nil\n    }\n    if err != nil {\n      return err\n    }\n    key := serialize(in.Location)\n                ... // look for notes to be sent to client\n    for _, note := range s.routeNotes[key] {\n      if err := stream.Send(note); err != nil {\n        return err\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for the Greeter service with a single SayHello method, including request and response message types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading gRPC Java Example Repository\nDESCRIPTION: Git commands to clone the gRPC Java repository and navigate to the examples directory. The command uses a branch parameter to get a specific version.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone -b {{< param grpc_vers.java >}} --depth 1 https://github.com/grpc/grpc-java\n```\n\n----------------------------------------\n\nTITLE: Updating gRPC server implementation in Python\nDESCRIPTION: Python code snippet showing the updated Greeter service implementation with the new SayHelloAgain method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Greeter(helloworld_pb2_grpc.GreeterServicer):\n\n    def SayHello(self, request, context):\n        return helloworld_pb2.HelloReply(message=f\"Hello, {request.name}!\")\n\n    def SayHelloAgain(self, request, context):\n        return helloworld_pb2.HelloReply(message=f\"Hello again, {request.name}!\")\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Response-Streaming RPC in Python gRPC\nDESCRIPTION: Implementation of ListFeatures method that streams multiple Feature responses based on geographic boundaries. Takes a Rectangle request containing longitude and latitude bounds and yields matching features from the database.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef ListFeatures(self, request, context):\n    left = min(request.lo.longitude, request.hi.longitude)\n    right = max(request.lo.longitude, request.hi.longitude)\n    top = max(request.lo.latitude, request.hi.latitude)\n    bottom = min(request.lo.latitude, request.hi.latitude)\n    for feature in self.db:\n        if (\n            feature.location.longitude >= left\n            and feature.location.longitude <= right\n            and feature.location.latitude >= bottom\n            and feature.location.latitude <= top\n        ):\n            yield feature\n```\n\n----------------------------------------\n\nTITLE: Client-Streaming Method Server Interface in Go gRPC\nDESCRIPTION: Signature for client-streaming methods on the generated service interface. Uses a ClientStreamingServer generic interface to handle multiple request messages from the client and send a single response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nFoo(grpc.ClientStreamingServer[*RequestMsg, *ResponseMsg]) error\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Unary RPC Server Handler\nDESCRIPTION: Basic implementation of the GetFeature RPC handler using the default reactor. The server receives a Point and returns a Feature with location details.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\ngrpc::ServerUnaryReactor* GetFeature(CallbackServerContext* context,\n                                   const Point* point,\n                                   Feature* feature) override {\n    feature->set_name(GetFeatureName(*point, feature_list_));\n    feature->mutable_location()->CopyFrom(*point);\n    auto* reactor = context->DefaultReactor();\n    reactor->Finish(Status::OK);\n    return reactor;\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleUnaryInterceptor in JavaScript for gRPC-Web\nDESCRIPTION: This code snippet demonstrates the implementation of a SimpleUnaryInterceptor class in JavaScript for gRPC-Web. It intercepts both the request and response, prepending strings to their messages.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-web-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @constructor\n * @implements {UnaryInterceptor}\n */\nconst SimpleUnaryInterceptor = function() {};\n\n/** @override */\nSimpleUnaryInterceptor.prototype.intercept = function(request, invoker) {\n  // Update the request message before the RPC.\n  const reqMsg = request.getRequestMessage();\n  reqMsg.setMessage('[Intercept request]' + reqMsg.getMessage());\n\n  // After the RPC returns successfully, update the response.\n  return invoker(request).then((response) => {\n    // You can also do something with response metadata here.\n    console.log(response.getMetadata());\n\n    // Update the response message.\n    const responseMsg = response.getResponseMessage();\n    responseMsg.setMessage('[Intercept response]' + responseMsg.getMessage());\n\n    return response;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Server Methods in Kotlin\nDESCRIPTION: Kotlin implementation of the Greeter service methods SayHello and SayHelloAgain on the server side.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate class HelloWorldService : GreeterGrpcKt.GreeterCoroutineImplBase() {\n  override suspend fun sayHello(request: HelloRequest) = helloReply {\n    message = \"Hello ${request.name}\"\n  }\n\n  override suspend fun sayHelloAgain(request: HelloRequest) = helloReply {\n    message = \"Hello again ${request.name}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Unary RPC Call in Objective-C\nDESCRIPTION: Demonstrates how to make a simple unary RPC call using GetFeature method. Creates a point message, sets up a response handler, and initiates the call asynchronously.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: objective-c\nCODE:\n```\nRTGPoint *point = [RTGPoint message];\npoint.latitude = 40E7;\npoint.longitude = -74E7;\n\nGRPCUnaryResponseHandler *handler =\n    [[GRPCUnaryResponseHandler alloc] initWithResponseHandler:\n        ^(RTGFeature *response, NSError *error) {\n          if (response) {\n            // Successful response received\n          } else {\n            // RPC error\n          }\n        }\n                                        responseDispatchQueue:nil];\n\n[[service getFeatureWithMessage:point responseHandler:handler callOptions:nil] start];\n```\n\n----------------------------------------\n\nTITLE: Loading Service Descriptors from Proto Files in Node.js\nDESCRIPTION: Demonstrates how to load a .proto file in Node.js using the gRPC proto loader library. The loaded proto file is then used to generate service descriptors and client stub definitions.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar PROTO_PATH = __dirname + '/../../protos/route_guide.proto';\nvar grpc = require('@grpc/grpc-js');\nvar protoLoader = require('@grpc/proto-loader');\n// Suggested options for similarity to existing grpc.load behavior\nvar packageDefinition = protoLoader.loadSync(\n    PROTO_PATH,\n    {keepCase: true,\n     longs: String,\n     enums: String,\n     defaults: true,\n     oneofs: true\n    });\nvar protoDescriptor = grpc.loadPackageDefinition(packageDefinition);\n// The protoDescriptor object has the full package hierarchy\nvar routeguide = protoDescriptor.routeguide;\n```\n\n----------------------------------------\n\nTITLE: Main Event Loop for Handling RPCs in Asynchronous gRPC C++ Server\nDESCRIPTION: Implements the main loop that continuously processes events from the completion queue. For each event, it identifies the associated CallData instance and proceeds with processing the request.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nvoid HandleRpcs() {\n  // Spawn a new CallData instance to serve new clients.\n  new CallData(&service_, cq_.get());\n  void* tag;  // uniquely identifies a request.\n  bool ok;\n  while (true) {\n    // Block waiting to read the next event from the completion queue. The\n    // event is uniquely identified by its tag, which in this case is the\n    // memory address of a CallData instance.\n    cq_->Next(&tag, &ok);\n    GPR_ASSERT(ok);\n    static_cast<CallData*>(tag)->Proceed();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerBidiReactor for Bidirectional Streaming in gRPC C++\nDESCRIPTION: Implementation of a bidirectional streaming RPC handler using ServerBidiReactor pattern for a RouteChat service. The server can simultaneously receive and send RouteNote messages, maintaining thread safety with mutex locks. It filters notes by location and sends back matching notes to clients.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\n  grpc::ServerBidiReactor<RouteNote, RouteNote>* RouteChat(\n      CallbackServerContext* context) override {\n    class Chatter : public grpc::ServerBidiReactor<RouteNote, RouteNote> {\n     public:\n      Chatter(absl::Mutex* mu, std::vector<RouteNote>* received_notes)\n          : mu_(mu), received_notes_(received_notes) {\n        StartRead(&note_);\n      }\n\n      void OnReadDone(bool ok) override {\n        if (ok) {\n          // Unlike the other example in this directory that's not using\n          // the reactor pattern, we can't grab a local lock to secure the\n          // access to the notes vector, because the reactor will most likely\n          // make us jump threads, so we'll have to use a different locking\n          // strategy. We'll grab the lock locally to build a copy of the\n          // list of nodes we're going to send, then we'll grab the lock\n          // again to append the received note to the existing vector.\n          mu_->Lock();\n          std::copy_if(received_notes_->begin(), received_notes_->end(),\n                       std::back_inserter(to_send_notes_),\n                       [this](const RouteNote& note) {\n                         return note.location().latitude() ==\n                                    note_.location().latitude() &&\n                                note.location().longitude() ==\n                                    note_.location().longitude();\n                       });\n          mu_->Unlock();\n          notes_iterator_ = to_send_notes_.begin();\n          NextWrite();\n        } else {\n          Finish(Status::OK);\n        }\n      }\n      void OnWriteDone(bool /*ok*/) override { NextWrite(); }\n\n      void OnDone() override {\n        LOG(INFO) << \"RPC Completed\";\n        delete this;\n      }\n\n      void OnCancel() override { LOG(ERROR) << \"RPC Cancelled\"; }\n\n     private:\n      void NextWrite() {\n        if (notes_iterator_ != to_send_notes_.end()) {\n          StartWrite(&*notes_iterator_);\n          notes_iterator_++;\n        } else {\n          mu_->Lock();\n          received_notes_->push_back(note_);\n          mu_->Unlock();\n          StartRead(&note_);\n        }\n      }\n\n      RouteNote note_;\n      absl::Mutex* mu_;\n      std::vector<RouteNote>* received_notes_ ABSL_GUARDED_BY(mu_);\n      std::vector<RouteNote> to_send_notes_;\n      std::vector<RouteNote>::iterator notes_iterator_;\n    };\n    return new Chatter(&mu_, &received_notes_);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Streaming RPC with ListFeatures in PHP gRPC\nDESCRIPTION: This snippet demonstrates how to call the server-side streaming method ListFeatures, which returns a stream of geographical Features. It shows how to set up the request parameters and iterate over the server's responses.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$lo_point = new Routeguide\\Point();\n$hi_point = new Routeguide\\Point();\n\n$lo_point->setLatitude(400000000);\n$lo_point->setLongitude(-750000000);\n$hi_point->setLatitude(420000000);\n$hi_point->setLongitude(-730000000);\n\n$rectangle = new Routeguide\\Rectangle();\n$rectangle->setLo($lo_point);\n$rectangle->setHi($hi_point);\n\n$call = $client->ListFeatures($rectangle);\n// an iterator over the server streaming responses\n$features = $call->responses();\nforeach ($features as $feature) {\n  // process each feature\n} // the loop will end when the server indicates there is no more responses to be sent.\n```\n\n----------------------------------------\n\nTITLE: Defining Unary RPC Method\nDESCRIPTION: Definition of a unary RPC method where client sends a single request and receives a single response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/what-is-grpc/core-concepts.md#2025-04-08_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nrpc SayHello(HelloRequest) returns (HelloResponse);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC in C++\nDESCRIPTION: Implementation of RouteChat method that demonstrates bidirectional streaming between client and server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nStatus RouteChat(ServerContext* context,\n                  ServerReaderWriter<RouteNote, RouteNote>* stream) override {\n  RouteNote note;\n  while (stream->Read(&note)) {\n    std::unique_lock<std::mutex> lock(mu_);\n    for (const RouteNote& n : received_notes_) {\n      if (n.location().latitude() == note.location().latitude() &&\n          n.location().longitude() == note.location().longitude()) {\n        stream->Write(n);\n      }\n    }\n    received_notes_.push_back(note);\n  }\n\n  return Status::OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC in Java gRPC\nDESCRIPTION: This method demonstrates how to implement a bidirectional streaming RPC where both client and server exchange multiple messages. The RouteChat method allows sending and receiving RouteNote objects asynchronously, with each side operating independently.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npublic void routeChat() throws Exception {\n  info(\"*** RoutChat\");\n  final CountDownLatch finishLatch = new CountDownLatch(1);\n  StreamObserver<RouteNote> requestObserver =\n      asyncStub.routeChat(new StreamObserver<RouteNote>() {\n        @Override\n        public void onNext(RouteNote note) {\n          info(\"Got message \\\"{0}\\\" at {1}, {2}\", note.getMessage(), note.getLocation()\n              .getLatitude(), note.getLocation().getLongitude());\n        }\n\n        @Override\n        public void onError(Throwable t) {\n          Status status = Status.fromThrowable(t);\n          logger.log(Level.WARNING, \"RouteChat Failed: {0}\", status);\n          finishLatch.countDown();\n        }\n\n        @Override\n        public void onCompleted() {\n          info(\"Finished RouteChat\");\n          finishLatch.countDown();\n        }\n      });\n\n  try {\n    RouteNote[] requests =\n        {newNote(\"First message\", 0, 0), newNote(\"Second message\", 0, 1),\n            newNote(\"Third message\", 1, 0), newNote(\"Fourth message\", 1, 1)};\n\n    for (RouteNote request : requests) {\n      info(\"Sending message \\\"{0}\\\" at {1}, {2}\", request.getMessage(), request.getLocation()\n          .getLatitude(), request.getLocation().getLongitude());\n      requestObserver.onNext(request);\n    }\n  } catch (RuntimeException e) {\n    // Cancel RPC\n    requestObserver.onError(e);\n    throw e;\n  }\n  // Mark the end of requests\n  requestObserver.onCompleted();\n\n  // Receiving happens asynchronously\n  finishLatch.await(1, TimeUnit.MINUTES);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a gRPC Service Client in Objective-C\nDESCRIPTION: Objective-C code to create a gRPC service client with insecure transport for local testing. Imports necessary headers and configures the service object to connect to the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <GRPCClient/GRPCCall+Tests.h>\n#import <RouteGuide/RouteGuide.pbrpc.h>\n#import <GRPCClient/GRPCTransport.h>\n\nstatic NSString * const kHostAddress = @\"localhost:50051\";\n...\nGRPCMutableCallOptions *options = [[GRPCMutableCallOptions alloc] init];\noptions.transport = GRPCDefaultTransportImplList.core_insecure;\n\nRTGRouteGuide *service = [[RTGRouteGuide alloc] initWithHost:kHostAddress callOptions:options];\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Streaming RPC in Java gRPC\nDESCRIPTION: Implementation of the listFeatures method which demonstrates server-side streaming RPC. The method accepts a Rectangle request and streams back multiple Feature objects that fall within the specified geographical boundaries.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void listFeatures(Rectangle request, StreamObserver<Feature> responseObserver) {\n  int left = min(request.getLo().getLongitude(), request.getHi().getLongitude());\n  int right = max(request.getLo().getLongitude(), request.getHi().getLongitude());\n  int top = max(request.getLo().getLatitude(), request.getHi().getLatitude());\n  int bottom = min(request.getLo().getLatitude(), request.getHi().getLatitude());\n\n  for (Feature feature : features) {\n    if (!RouteGuideUtil.exists(feature)) {\n      continue;\n    }\n\n    int lat = feature.getLocation().getLatitude();\n    int lon = feature.getLocation().getLongitude();\n    if (lon >= left && lon <= right && lat >= bottom && lat <= top) {\n      responseObserver.onNext(feature);\n    }\n  }\n  responseObserver.onCompleted();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side gRPC Method Calls\nDESCRIPTION: Java implementation of the client-side logic to call both gRPC methods, handling the responses and potential exceptions.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Client-side logic for interacting with the gRPC service.\npublic void greet(String name) {\n  // Log a message indicating the intention to greet a user.\n  logger.info(\"Will try to greet \" + name + \" ...\");\n\n  // Creating a request with the user's name.\n  HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n  HelloReply response;\n  try {\n    // Call the original method on the server.\n    response = blockingStub.sayHello(request);\n  } catch (StatusRuntimeException e) {\n    // Log a warning if the RPC fails.\n    logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n    return;\n  }\n\n  // Log the response from the original method.\n  logger.info(\"Greeting: \" + response.getMessage());\n\n  try {\n    // Call the new method on the server.\n    response = blockingStub.sayHelloAgain(request);\n  } catch (StatusRuntimeException e) {\n    // Log a warning if the RPC fails.\n    logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n    return;\n  }\n\n  // Log the response from the new method.\n  logger.info(\"Greeting: \" + response.getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Streaming with gRPC in JavaScript\nDESCRIPTION: Example of calling a server-side streaming RPC method 'ListFeatures' that returns a stream of geographical features. Shows how to handle stream events including data reception, error handling, and stream completion.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar call = client.listFeatures(rectangle);\n  call.on('data', function(feature) {\n      console.log('Found feature called \"' + feature.name + '\" at ' +\n          feature.location.latitude/COORD_FACTOR + ', ' +\n          feature.location.longitude/COORD_FACTOR);\n  });\n  call.on('end', function() {\n    // The server has finished sending\n  });\n  call.on('error', function(e) {\n    // An error has occurred and the stream has been closed.\n  });\n  call.on('status', function(status) {\n    // process status\n  });\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Streaming RPC in Ruby\nDESCRIPTION: Demonstrates bidirectional streaming RPC implementation using the route_chat method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nsleeping_enumerator = SleepingEnumerator.new(ROUTE_CHAT_NOTES, 1)\nstub.route_chat(sleeping_enumerator.each_item) { |r| p \"received #{r.inspect}\" }\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Streaming Method Client Interface in Go gRPC\nDESCRIPTION: Signature for bidirectional streaming methods on the generated client stub. Returns a BidiStreamingClient generic interface for handling both client-to-server and server-to-client message streams.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nFoo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[*RequestMsg, *ResponseMsg], error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC in Dart gRPC Server\nDESCRIPTION: This snippet demonstrates the implementation of the routeChat method, which handles bidirectional streaming. It receives a stream of RouteNotes and responds with a stream of previous messages at each location.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@override\nStream<RouteNote> routeChat(\n    grpc.ServiceCall call, Stream<RouteNote> request) async* {\n  await for (var note in request) {\n    final notes = routeNotes.putIfAbsent(note.location, () => <RouteNote>[]);\n    for (var note in notes) yield note;\n    notes.add(note);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ALTS Server Credentials in gRPC C++\nDESCRIPTION: Shows how to set up ALTS credentials on a gRPC server, including server builder configuration and listening port setup.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/alts.md#2025-04-08_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <grpcpp/security/server_credentials.h>\n#include <grpcpp/server.h>\n#include <grpcpp/server_builder.h>\n\nusing grpc::experimental::AltsServerCredentials;\nusing grpc::experimental::AltsServerCredentialsOptions;\n\ngrpc::ServerBuilder builder;\nbuilder.RegisterService(&service);\nauto creds = AltsServerCredentials(AltsServerCredentialsOptions());\nbuilder.AddListeningPort(\"[::]:<port>\", creds);\nstd::unique_ptr<Server> server(builder.BuildAndStart());\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC in Dart gRPC Client\nDESCRIPTION: This snippet demonstrates how to use bidirectional streaming RPC (routeChat) by sending a stream of notes to the server and processing the stream of responses.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nStream<RouteNote> outgoingNotes = ...;\n\nfinal responses = stub.routeChat(outgoingNotes);\nawait for (var note in responses) {\n  print('Got message ${note.message} at ${note.location.latitude}, ${note\n      .location.longitude}');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC Service in Protocol Buffers\nDESCRIPTION: Example protocol buffer definition for a FortuneTeller service with two RPC methods: TellFortune which returns horoscope information, and SuggestFortune which allows updating fortunes for zodiac signs.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/generated-code.md#2025-04-08_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nservice FortuneTeller {\n  // Returns the horoscope and zodiac sign for the given month and day.\n  rpc TellFortune(HoroscopeRequest) returns (HoroscopeResponse) {\n    // errors: invalid month or day, fortune unavailable\n  }\n\n  // Replaces the fortune for the given zodiac sign with the provided one.\n  rpc SuggestFortune(SuggestionRequest) returns (SuggestionResponse) {\n    // errors: invalid zodiac sign\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Streaming Method Server Interface in Go gRPC\nDESCRIPTION: Signature for server-streaming methods on the generated service interface. Takes a request message and a ServerStreamingServer generic interface that will be used to send multiple responses back to the client.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nFoo(*RequestMsg, grpc.ServerStreamingServer[*ResponseMsg]) error\n```\n\n----------------------------------------\n\nTITLE: Server-Side Streaming with ClientReader in gRPC C++\nDESCRIPTION: Demonstrates how to implement server-side streaming using ClientReader to receive multiple Feature objects from the server. The code shows how to read streaming responses until the stream ends and handle the final status.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nstd::unique_ptr<ClientReader<Feature> > reader(\n    stub_->ListFeatures(&context, rect));\nwhile (reader->Read(&feature)) {\n  std::cout << \"Found feature called \"\n            << feature.name() << \" at \"\n            << feature.location().latitude()/kCoordFactor_ << \", \"\n            << feature.location().longitude()/kCoordFactor_ << std::endl;\n}\nStatus status = reader->Finish();\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Streaming Client Implementation in Kotlin\nDESCRIPTION: Client-side implementation of bidirectional streaming for RouteChat RPC. Shows how to handle simultaneous message streams in both directions.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun routeChat() {\n  val requests = generateOutgoingNotes()\n  stub.routeChat(requests).collect { note ->\n    println(\"Got message \\\"${note.message}\\\" at ${note.location.toStr()}\")\n  }\n  println(\"Finished RouteChat\")\n}\n\nprivate fun generateOutgoingNotes(): Flow<RouteNote> = flow {\n  val notes = listOf(/* ... */)\n  for (note in notes) {\n    println(\"Sending message \\\"${note.message}\\\" at ${note.location.toStr()}\")\n    emit(note)\n    delay(500)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Objective-C Class Prefix in Protocol Buffers\nDESCRIPTION: Protocol buffer option to specify a prefix for generated Objective-C classes.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\noption objc_class_prefix = \"RTG\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple RPC Method in Kotlin Server\nDESCRIPTION: Implementation of the getFeature method which handles a simple RPC call. It finds a feature at the requested location or returns an unnamed feature if none exists.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\noverride suspend fun getFeature(request: Point): Feature =\n    features.find { it.location == request } ?:\n    // No feature was found, return an unnamed feature.\n    Feature.newBuilder().apply { location = request }.build()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google in Dart gRPC\nDESCRIPTION: Implements Google authentication for gRPC calls in Dart using a service account JSON file. This approach creates a JWT authenticator and applies it to the client options.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n// Uses publicly trusted roots by default.\nfinal channel = new ClientChannel('greeter.googleapis.com');\nfinal serviceAccountJson =\n     new File('service-account.json').readAsStringSync();\nfinal credentials = new JwtServiceAccountAuthenticator(serviceAccountJson);\nfinal client =\n    new GreeterClient(channel, options: credentials.toCallOptions);\n```\n\n----------------------------------------\n\nTITLE: Starting a gRPC Server in Go\nDESCRIPTION: Code to initialize and start a gRPC server. It creates a TCP listener, initializes a gRPC server with options, registers the RouteGuide service implementation, and starts serving requests.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nlis, err := net.Listen(\"tcp\", fmt.Sprintf(\"localhost:%d\", port))\nif err != nil {\n  log.Fatalf(\"failed to listen: %v\", err)\n}\nvar opts []grpc.ServerOption\n...\ngrpcServer := grpc.NewServer(opts...)\npb.RegisterRouteGuideServer(grpcServer, newServer())\ngrpcServer.Serve(lis)\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Streaming with ClientReaderWriter in gRPC C++\nDESCRIPTION: Demonstrates setup of bidirectional streaming using ClientReaderWriter for simultaneous reading and writing of RouteNote messages between client and server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\nstd::shared_ptr<ClientReaderWriter<RouteNote, RouteNote> > stream(\n    stub_->RouteChat(&context));\n```\n\n----------------------------------------\n\nTITLE: Defining Server-side Streaming RPC Method in Protocol Buffers\nDESCRIPTION: Protocol buffer definition of a server-side streaming RPC that returns multiple features within a rectangle, where the server sends a stream of responses.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\n// Obtains the Features available within the given Rectangle.  Results are\n// streamed rather than returned at once (e.g. in a response message with a\n// repeated field), as the rectangle may cover a large area and contain a\n// huge number of features.\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Using Google Default Credentials for Authentication in gRPC with C++\nDESCRIPTION: This example shows how to authenticate with Google services using GoogleDefaultCredentials. It demonstrates creating credentials that work in various deployment scenarios including Service Accounts and Google Compute Engine, setting up a channel with those credentials, and making an RPC call.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nauto creds = grpc::GoogleDefaultCredentials();\n// Create a channel, stub and make RPC calls (same as in the previous example)\nauto channel = grpc::CreateChannel(server_name, creds);\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\ngrpc::Status s = stub->sayHello(&context, *request, response);\n```\n\n----------------------------------------\n\nTITLE: Client Code for Initiating and Processing a Client-Streaming RPC in gRPC C++\nDESCRIPTION: This code snippet shows how to initiate a client streaming RPC, wait for its completion, and process the results. It creates a Recorder object to handle the streaming operations and then displays the route statistics returned by the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\n    Recorder recorder(stub_.get(), kCoordFactor_, &feature_list_);\n    RouteSummary stats;\n    Status status = recorder.Await(&stats);\n    if (status.ok()) {\n      std::cout << \"Finished trip with \" << stats.point_count() << \" points\\n\"\n                << \"Passed \" << stats.feature_count() << \" features\\n\"\n                << \"Travelled \" << stats.distance() << \" meters\\n\"\n                << \"It took \" << stats.elapsed_time() << \" seconds\"\n                << std::endl;\n    } else {\n      std::cout << \"RecordRoute rpc failed.\" << std::endl;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple RPC Method\nDESCRIPTION: Protocol buffer definition of a simple RPC method that obtains a feature at a given position.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// Obtains the feature at a given position.\nrpc GetFeature(Point) returns (Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Streaming with ClientWriter in gRPC C++\nDESCRIPTION: Shows implementation of client-side streaming using ClientWriter to send multiple Point objects to the server. Includes error handling, stream completion, and processing of the server's response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nstd::unique_ptr<ClientWriter<Point> > writer(\n    stub_->RecordRoute(&context, &stats));\nfor (int i = 0; i < kPoints; i++) {\n  const Feature& f = feature_list_[feature_distribution(generator)];\n  std::cout << \"Visiting point \"\n            << f.location().latitude()/kCoordFactor_ << \", \"\n            << f.location().longitude()/kCoordFactor_ << std::endl;\n  if (!writer->Write(f.location())) {\n    // Broken stream.\n    break;\n  }\n  std::this_thread::sleep_for(std::chrono::milliseconds(\n      delay_distribution(generator)));\n}\nwriter->WritesDone();\nStatus status = writer->Finish();\nif (status.IsOk()) {\n  std::cout << \"Finished trip with \" << stats.point_count() << \" points\\n\"\n            << \"Passed \" << stats.feature_count() << \" features\\n\"\n            << \"Travelled \" << stats.distance() << \" meters\\n\"\n            << \"It took \" << stats.elapsed_time() << \" seconds\"\n            << std::endl;\n} else {\n  std::cout << \"RecordRoute rpc failed.\" << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authentication Plugin for gRPC with C++\nDESCRIPTION: This snippet demonstrates implementing a custom authentication mechanism by extending the gRPC credentials plugin API. It creates a custom authenticator class that implements the MetadataCredentialsPlugin interface to add a custom authentication ticket header to RPC calls.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyCustomAuthenticator : public grpc::MetadataCredentialsPlugin {\n public:\n  MyCustomAuthenticator(const grpc::string& ticket) : ticket_(ticket) {}\n\n  grpc::Status GetMetadata(\n      grpc::string_ref service_url, grpc::string_ref method_name,\n      const grpc::AuthContext& channel_auth_context,\n      std::multimap<grpc::string, grpc::string>* metadata) override {\n    metadata->insert(std::make_pair(\"x-custom-auth-ticket\", ticket_));\n    return grpc::Status::OK;\n  }\n\n private:\n  grpc::string ticket_;\n};\n\nauto call_creds = grpc::MetadataCredentialsFromPlugin(\n    std::unique_ptr<grpc::MetadataCredentialsPlugin>(\n        new MyCustomAuthenticator(\"super-secret-ticket\")));\n```\n\n----------------------------------------\n\nTITLE: Setting Up ALTS Server Credentials for gRPC Server in Python\nDESCRIPTION: This code shows how to set up ALTS server credentials for a gRPC server in Python. It creates a server instance, generates ALTS credentials using grpc.alts_server_credentials(), and adds a secure port to the server using these credentials.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/alts.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport grpc\n\nserver = grpc.server(futures.ThreadPoolExecutor())\nserver_creds = grpc.alts_server_credentials()\nserver.add_secure_port(server_address, server_creds)\n```\n\n----------------------------------------\n\nTITLE: Running the gRPC Server\nDESCRIPTION: Command to run the compiled gRPC server application, which listens on port 50051.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build/install/examples/bin/hello-world-server\nINFO: Server started, listening on 50051\n```\n\n----------------------------------------\n\nTITLE: Implementing a gRPC Service with JSON Encoding\nDESCRIPTION: Java code defining a base class for a gRPC service implementation using custom MethodDescriptors and JSON encoding.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n  static abstract class KeyValueServiceImplBase implements BindableService {\n    public abstract void create(\n        KvGson.CreateRequest request, StreamObserver<CreateResponse> responseObserver);\n\n    public abstract void retrieve(/*...*/);\n\n    public abstract void update(/*...*/);\n\n    public abstract void delete(/*...*/);\n\n    /* Called by the Server to wire up methods to the handlers */\n    @Override\n    public final ServerServiceDefinition bindService() {\n      ServerServiceDefinition.Builder ssd = ServerServiceDefinition.builder(SERVICE_NAME);\n      ssd.addMethod(CREATE_METHOD, ServerCalls.asyncUnaryCall(\n          (request, responseObserver) -> create(request, responseObserver)));\n\n      ssd.addMethod(RETRIEVE_METHOD, /*...*/);\n      ssd.addMethod(UPDATE_METHOD, /*...*/);\n      ssd.addMethod(DELETE_METHOD, /*...*/);\n      return ssd.build();\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Sending gRPC Requests with JSON Encoding\nDESCRIPTION: Java code showing how to send a gRPC request using custom MethodDescriptors and JSON-encoded data with Gson.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n    ByteBuffer key = createRandomKey();\n    ClientCall<CreateRequest, CreateResponse> call =\n        chan.newCall(KvGson.CREATE_METHOD, CallOptions.DEFAULT);\n    KvGson.CreateRequest req = new KvGson.CreateRequest();\n    req.key = key.array();\n    req.value = randomBytes(MEAN_VALUE_SIZE).array();\n\n    ListenableFuture<CreateResponse> res = ClientCalls.futureUnaryCall(call, req);\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Client-Side Streaming RPC in Ruby\nDESCRIPTION: Shows implementation of client-side streaming using the record_route method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nreqs = RandomRoute.new(features, points_on_route)\nresp = stub.record_route(reqs.each)\n```\n\n----------------------------------------\n\nTITLE: Implementing Request-Streaming RPC in Python gRPC\nDESCRIPTION: Implementation of RecordRoute method that processes a stream of Point requests and returns a single RouteSummary. Calculates statistics like point count, feature count, distance, and elapsed time.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef RecordRoute(self, request_iterator, context):\n    point_count = 0\n    feature_count = 0\n    distance = 0.0\n    prev_point = None\n\n    start_time = time.time()\n    for point in request_iterator:\n        point_count += 1\n        if get_feature(self.db, point):\n            feature_count += 1\n        if prev_point:\n            distance += get_distance(prev_point, point)\n        prev_point = point\n\n    elapsed_time = time.time() - start_time\n    return route_guide_pb2.RouteSummary(\n        point_count=point_count,\n        feature_count=feature_count,\n        distance=int(distance),\n        elapsed_time=int(elapsed_time),\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Streaming RPC in Go gRPC Server\nDESCRIPTION: Implementation of the RecordRoute method that handles client-side streaming. The server receives multiple Point messages from the client, processes them to calculate distance and features, and returns a single RouteSummary when the client ends transmission.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *routeGuideServer) RecordRoute(stream pb.RouteGuide_RecordRouteServer) error {\n  var pointCount, featureCount, distance int32\n  var lastPoint *pb.Point\n  startTime := time.Now()\n  for {\n    point, err := stream.Recv()\n    if err == io.EOF {\n      endTime := time.Now()\n      return stream.SendAndClose(&pb.RouteSummary{\n        PointCount:   pointCount,\n        FeatureCount: featureCount,\n        Distance:     distance,\n        ElapsedTime:  int32(endTime.Sub(startTime).Seconds()),\n      })\n    }\n    if err != nil {\n      return err\n    }\n    pointCount++\n    for _, feature := range s.savedFeatures {\n      if proto.Equal(feature.Location, point) {\n        featureCount++\n      }\n    }\n    if lastPoint != nil {\n      distance += calcDistance(lastPoint, point)\n    }\n    lastPoint = point\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC in Java gRPC\nDESCRIPTION: This method implements a bidirectional streaming RPC using the RouteChat service. It creates a StreamObserver to handle incoming messages from the server while simultaneously sending a series of RouteNote messages. The method demonstrates how to manage both sending and receiving streams independently.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate String routeChat(RouteGuideStub asyncStub) throws InterruptedException,\n        RuntimeException {\n    final StringBuffer logs = new StringBuffer();\n    appendLogs(logs, \"*** RouteChat\");\n    final CountDownLatch finishLatch = new CountDownLatch(1);\n    StreamObserver<RouteNote> requestObserver =\n            asyncStub.routeChat(new StreamObserver<RouteNote>() {\n                @Override\n                public void onNext(RouteNote note) {\n                    appendLogs(logs, \"Got message \\\"{0}\\\" at {1}, {2}\", note.getMessage(),\n                            note.getLocation().getLatitude(),\n                            note.getLocation().getLongitude());\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    failed = t;\n                    finishLatch.countDown();\n                }\n\n                @Override\n                public void onCompleted() {\n                    appendLogs(logs,\"Finished RouteChat\");\n                    finishLatch.countDown();\n                }\n            });\n\n    try {\n        RouteNote[] requests =\n                {newNote(\"First message\", 0, 0), newNote(\"Second message\", 0, 1),\n                        newNote(\"Third message\", 1, 0), newNote(\"Fourth message\", 1, 1)};\n\n        for (RouteNote request : requests) {\n            appendLogs(logs, \"Sending message \\\"{0}\\\" at {1}, {2}\", request.getMessage(),\n                    request.getLocation().getLatitude(),\n                    request.getLocation().getLongitude());\n            requestObserver.onNext(request);\n        }\n    } catch (RuntimeException e) {\n        // Cancel RPC\n        requestObserver.onError(e);\n        throw e;\n    }\n    // Mark the end of requests\n    requestObserver.onCompleted();\n\n    // Receiving happens asynchronously\n    if (!finishLatch.await(1, TimeUnit.MINUTES)) {\n        throw new RuntimeException(\n                \"Could not finish rpc within 1 minute, the server is likely down\");\n    }\n\n    if (failed != null) {\n        throw new RuntimeException(failed);\n    }\n\n    return logs.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Streaming RPC Method in Kotlin Server\nDESCRIPTION: Implementation of the listFeatures method which handles a server-side streaming RPC. It returns a Flow of features that exist within the requested rectangle.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun listFeatures(request: Rectangle): Flow<Feature> =\n  features.asFlow().filter { it.exists() && it.location in request }\n```\n\n----------------------------------------\n\nTITLE: Creating ALTS Channel Credentials for gRPC Client in Python\nDESCRIPTION: This snippet demonstrates how to create ALTS channel credentials for a gRPC client in Python. It uses the grpc.alts_channel_credentials() method to generate the credentials, which are then used to create a secure channel.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/alts.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport grpc\n\nchannel_creds = grpc.alts_channel_credentials()\nchannel = grpc.secure_channel(address, channel_creds)\n```\n\n----------------------------------------\n\nTITLE: Defining Client-side Streaming RPC Method in Protocol Buffers\nDESCRIPTION: Protocol buffer definition of a client-side streaming RPC where the client sends multiple points along a route and receives a summary when complete.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of Points on a route being traversed, returning a\n// RouteSummary when traversal is completed.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n```\n\n----------------------------------------\n\nTITLE: Checking for Cancelled Context in C++ gRPC Server\nDESCRIPTION: Checks if a client has cancelled the request or if the deadline has been exceeded in a C++ gRPC server implementation. This helps avoid unnecessary processing when clients are no longer waiting for responses.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/deadlines.md#2025-04-08_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nif (context->IsCancelled()) {\n  return Status(StatusCode::CANCELLED, \"Deadline exceeded or Client cancelled, abandoning.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Streaming RPC in Ruby\nDESCRIPTION: Shows how to implement server-side streaming RPC calls using the list_features method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nresps = stub.list_features(LIST_FEATURES_RECT)\nresps.each do |r|\n  p \"- found '#{r.name}' at #{r.location.inspect}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing and Timeouts in gRPC Service Config (JSON)\nDESCRIPTION: This JSON snippet demonstrates a gRPC service config that enables round-robin load balancing, sets a default 1-second timeout for all methods, and overrides the timeout to 2 seconds for specific methods and services.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/service-config.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"loadBalancingConfig\": [ { \"round_robin\": {} } ],\n  \"methodConfig\": [\n    {\n      \"name\": [{}],\n      \"timeout\": \"1s\"\n    },\n    {\n      \"name\": [\n        { \"service\": \"foo\", \"method\": \"bar\" },\n        { \"service\": \"baz\" }\n      ],\n      \"timeout\": \"2s\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Authorization for ALTS Client in Java\nDESCRIPTION: This snippet illustrates how to set up server authorization when creating an ALTS client channel. It specifies expected server service accounts for enhanced security.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/alts.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.grpc.alts.AltsChannelBuilder;\nimport io.grpc.ManagedChannel;\n\nManagedChannel channel =\n    AltsChannelBuilder.forTarget(serverAddress)\n        .addTargetServiceAccount(\"expected_server_service_account1\")\n        .addTargetServiceAccount(\"expected_server_service_account2\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Protocol Buffers\nDESCRIPTION: A Protocol Buffer definition file (.proto) that defines a gRPC service with a single unary RPC method. This file specifies the request and response message formats with strong typing, providing a clear API contract for client-server communication.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/postman-grpcweb.md#2025-04-08_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\npackage example;\n\nservice ExampleService {\n  rpc GetExampleData(ExampleRequest) returns (ExampleResponse);\n}\n\nmessage ExampleRequest {\n  string query = 1;\n}\n\nmessage ExampleResponse {\n  repeated string data = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Deadlines with Flags in C++ gRPC\nDESCRIPTION: Implements configurable deadlines in C++ gRPC using gflags, allowing deadline values to be adjusted without code changes. This is useful for mitigating issues or performance regressions in production.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/deadlines.md#2025-04-08_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gflags/gflags.h>\nDEFINE_int32(deadline_ms, 20*1000, \"Deadline in milliseconds.\");\n\nClientContext context;\ntime_point deadline = std::chrono::system_clock::now() +\n    std::chrono::milliseconds(FLAGS_deadline_ms);\ncontext.set_deadline(deadline);\n```\n\n----------------------------------------\n\nTITLE: Request-Streaming RPC Implementation in Objective-C\nDESCRIPTION: Demonstrates request-streaming RPC using RecordRoute method. Shows how to create and send multiple points in a stream and handle the final response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_15\n\nLANGUAGE: objective-c\nCODE:\n```\nRTGPoint *point1 = [RTGPoint message];\npoint.latitude = 40E7;\npoint.longitude = -74E7;\n\nRTGPoint *point2 = [RTGPoint message];\npoint.latitude = 40E7;\npoint.longitude = -74E7;\n\nGRPCUnaryResponseHandler *handler =\n    [[GRPCUnaryResponseHandler alloc] initWithResponseHandler:\n        ^(RTGRouteSummary *response, NSError *error) {\n            if (response) {\n              NSLog(@\"Finished trip with %i points\", response.pointCount);\n              NSLog(@\"Passed %i features\", response.featureCount);\n              NSLog(@\"Travelled %i meters\", response.distance);\n              NSLog(@\"It took %i seconds\", response.elapsedTime);\n            } else {\n              NSLog(@\"RPC error: %@\", error);\n            }\n        }\n                                        responseDispatchQueue:nil];\nGRPCStreamingProtoCall *call =\n    [service recordRouteWithResponseHandler:handler callOptions:nil];\n[call start];\n[call writeMessage:point1];\n[call writeMessage:point2];\n[call finish];\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Streaming RPC Definition\nDESCRIPTION: Definition of a bidirectional streaming RPC method for route chat functionality.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of RouteNotes sent while a route is being traversed,\n// while receiving other RouteNotes (e.g. from other users).\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables - Linux/macOS\nDESCRIPTION: Commands to set up environment variables for local package installation directory on Linux/macOS systems.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport MY_INSTALL_DIR=$HOME/.local\nmkdir -p $MY_INSTALL_DIR\nexport PATH=\"$MY_INSTALL_DIR/bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Insecure Connection in Ruby gRPC\nDESCRIPTION: Creates an insecure gRPC stub without any encryption or authentication. This approach is suitable for development environments but not recommended for production.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nstub = Helloworld::Greeter::Stub.new('localhost:50051', :this_channel_is_insecure)\n...\n```\n\n----------------------------------------\n\nTITLE: Server-Side Streaming RPC in Kotlin\nDESCRIPTION: Implementation of server-side streaming using ListFeatures RPC. Shows how to handle a stream of responses using Kotlin Flow.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun listFeatures(lowLat: Int, lowLon: Int, hiLat: Int, hiLon: Int) {\n  val request = Rectangle.newBuilder()\n    .setLo(point(lowLat, lowLon))\n    .setHi(point(hiLat, hiLon))\n    .build()\n  var i = 1\n  stub.listFeatures(request).collect { feature ->\n    println(\"Result #${i++}: $feature\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Client Stream in C++\nDESCRIPTION: Example of reading from a client stream in a server-side implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nwhile (stream->Read(&point)) {\n  ...//process client input\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ALTS Server Credentials in Java\nDESCRIPTION: This code shows how to configure a gRPC server with ALTS authentication in Java. It uses AltsServerBuilder to create a secure server instance that listens on a specified port.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/alts.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.grpc.alts.AltsServerBuilder;\nimport io.grpc.Server;\n\nServer server = AltsServerBuilder.forPort(<port>)\n    .addService(new MyServiceImpl()).build().start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Streaming RPC in Dart gRPC Client\nDESCRIPTION: This snippet shows how to use client-side streaming RPC (recordRoute) by generating a stream of points and sending them to the server, then handling the single response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nfinal random = Random();\n\n// Generate a number of random points\nStream<Point> generateRoute(int count) async* {\n  for (int i = 0; i < count; i++) {\n    final point = featuresDb[random.nextInt(featuresDb.length)].location;\n    yield point;\n  }\n}\n\nfinal pointCount = random.nextInt(100) + 2; // Traverse at least two points\n\nfinal summary = await stub.recordRoute(generateRoute(pointCount));\nprint('Route summary: $summary');\n```\n\n----------------------------------------\n\nTITLE: Response-Streaming RPC Implementation in Objective-C\nDESCRIPTION: Shows implementation of a response-streaming RPC using ListFeatures method. Implements delegate methods to handle incoming messages and stream completion.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_14\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)didReceiveProtoMessage(GPBMessage *)message {\n  if (message) {\n    NSLog(@\"Found feature at %@ called %@.\", response.location, response.name);\n  }\n}\n\n- (void)didCloseWithTrailingMetadata:(NSDictionary *)trailingMetadata error:(NSError *)error {\n  if (error) {\n    NSLog(@\"RPC error: %@\", error);\n  }\n}\n\n- (void)execRequest {\n  ...\n  [[service listFeaturesWithMessage:rectangle responseHandler:self callOptions:nil] start];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Insecure Connection in Dart gRPC\nDESCRIPTION: Creates an insecure gRPC channel and client in Dart without encryption or authentication. This approach should only be used for development environments.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal channel = new ClientChannel('localhost',\n      port: 50051,\n      options: const ChannelOptions(\n          credentials: const ChannelCredentials.insecure()));\nfinal stub = new GreeterClient(channel);\n```\n\n----------------------------------------\n\nTITLE: Client Stub Creation Function for gRPC Service in Go\nDESCRIPTION: Function signature used to create a client stub for interacting with a gRPC service. Takes a ClientConn and returns an implementation of the service client interface.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc BarClient(cc *grpc.ClientConn) BarClient\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Insecure Connection in Node.js gRPC\nDESCRIPTION: Creates an insecure gRPC stub in Node.js without encryption or authentication. This approach should only be used for testing and development environments.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar stub = new helloworld.Greeter('localhost:50051', grpc.credentials.createInsecure());\n```\n\n----------------------------------------\n\nTITLE: Calling Client-side Streaming RPC in Go gRPC Client\nDESCRIPTION: Implementation of a client-side streaming RPC call to RecordRoute. The client sends multiple Point messages and receives a single RouteSummary response. It generates random points, sends them in sequence, and then waits for the server's response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// Create a random number of random points\nr := rand.New(rand.NewSource(time.Now().UnixNano()))\npointCount := int(r.Int31n(100)) + 2 // Traverse at least two points\nvar points []*pb.Point\nfor i := 0; i < pointCount; i++ {\n  points = append(points, randomPoint(r))\n}\nlog.Printf(\"Traversing %d points.\", len(points))\nstream, err := client.RecordRoute(context.Background())\nif err != nil {\n  log.Fatalf(\"%v.RecordRoute(_) = _, %v\", client, err)\n}\nfor _, point := range points {\n  if err := stream.Send(point); err != nil {\n    log.Fatalf(\"%v.Send(%v) = %v\", stream, point, err)\n  }\n}\nreply, err := stream.CloseAndRecv()\nif err != nil {\n  log.Fatalf(\"%v.CloseAndRecv() got error %v, want %v\", stream, err, nil)\n}\nlog.Printf(\"Route summary: %v\", reply)\n```\n\n----------------------------------------\n\nTITLE: Initial Greeter Service Protocol Definition\nDESCRIPTION: Definition of the basic gRPC Greeter service using Protocol Buffers, including SayHello method and message types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ListFeatures Streaming RPC in C++\nDESCRIPTION: Server-side streaming RPC implementation that sends multiple features within a given rectangle.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nStatus ListFeatures(ServerContext* context, const Rectangle* rectangle,\n                    ServerWriter<Feature>* writer) override {\n  auto lo = rectangle->lo();\n  auto hi = rectangle->hi();\n  long left = std::min(lo.longitude(), hi.longitude());\n  long right = std::max(lo.longitude(), hi.longitude());\n  long top = std::max(lo.latitude(), hi.latitude());\n  long bottom = std::min(lo.latitude(), hi.latitude());\n  for (const Feature& f : feature_list_) {\n    if (f.location().longitude() >= left &&\n        f.location().longitude() <= right &&\n        f.location().latitude() >= bottom &&\n        f.location().latitude() <= top) {\n      writer->Write(f);\n    }\n  }\n  return Status::OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Retry Policy\nDESCRIPTION: JSON configuration for gRPC retry policy including maximum attempts, backoff settings, and retryable status codes. Defines core retry behavior parameters.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/retry.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"retryPolicy\": {\n  \"maxAttempts\": 4,\n  \"initialBackoff\": \"0.1s\",\n  \"maxBackoff\": \"1s\",\n  \"backoffMultiplier\": 2,\n  \"retryableStatusCodes\": [\n    \"UNAVAILABLE\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC-Web Repository\nDESCRIPTION: Command to clone the gRPC-Web repository containing the example code.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/grpc/grpc-web\n```\n\n----------------------------------------\n\nTITLE: Calling Server-side Streaming RPC in Go gRPC Client\nDESCRIPTION: Implementation of a server-side streaming RPC call to ListFeatures. The client sends a Rectangle request and receives a stream of Feature responses, processing them until the stream ends.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nrect := &pb.Rectangle{ ... }  // initialize a pb.Rectangle\nstream, err := client.ListFeatures(context.Background(), rect)\nif err != nil {\n  ...\n}\nfor {\n    feature, err := stream.Recv()\n    if err == io.EOF {\n        break\n    }\n    if err != nil {\n        log.Fatalf(\"%v.ListFeatures(_) = _, %v\", client, err)\n    }\n    log.Println(feature)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple RPC Method\nDESCRIPTION: Definition of a simple RPC method in the protocol buffer where the client sends a single request and receives a single response. The method gets a feature at a given position.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\n// Obtains the feature at a given position.\nrpc GetFeature(Point) returns (Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Unary Call Benchmarks in Java\nDESCRIPTION: Implementation of gRPC unary call benchmarking that measures end-to-end latency over a 60-second period. Uses StreamObserver pattern to handle responses and continue benchmarking until time expires.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/mobile-benchmarks.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// This can be found in AsyncClient.java doUnaryCalls()\n// Make stub to send unary call\nfinal BenchmarkServiceStub stub = BenchmarkServiceGrpc.newStub(channel);\nstub.unaryCall(request, new StreamObserver<SimpleResponse>() {\n    long lastCall = System.nanoTime();\n    // Do nothing on next\n    @Override\n    public void onNext(SimpleResponse value) {\n    }\n\n    @Override\n    public void onError(Throwable t) {\n        Status status = Status.fromThrowable(t);\n        System.err.println(\"Encountered an error in unaryCall. Status is \" + status);\n        t.printStackTrace();\n\n        future.cancel(true);\n    }\n    // Repeat if time isn't reached\n    @Override\n    public void onCompleted() {\n        long now = System.nanoTime();\n        // Record the latencies in microseconds\n        histogram.recordValue((now - lastCall) / 1000);\n        lastCall = now;\n\n        Context prevCtx = Context.ROOT.attach();\n        try {\n            if (endTime > now) {\n                stub.unaryCall(request, this);\n            } else {\n                future.done();\n            }\n        } finally {\n            Context.current().detach(prevCtx);\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Benchmark Action Interface in Java\nDESCRIPTION: Demonstrates the benchmark setup using an Action interface to measure execution time of operations while discounting system time checks. Shows an example of benchmarking multiplication.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/mobile-benchmarks.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ninterface Action {\n    void execute();\n}\n\n// Sample benchmark of multiplication\nAction a = new Action() {\n    @Override\n    public void execute() {\n        int x = 1000 * 123456;\n    }\n}\n\nfor (int i = 0; i < 100; ++i) {\n    a.execute();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Client Methods in Kotlin\nDESCRIPTION: Kotlin implementation of the client-side code to call both SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/quickstart.md#2025-04-08_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HelloWorldClient(\n    private val channel: ManagedChannel\n) : Closeable {\n  private val stub: GreeterCoroutineStub = GreeterCoroutineStub(channel)\n\n  suspend fun greet(name: String) {\n    val request = helloRequest { this.name = name }\n    val response = stub.sayHello(request)\n    println(\"Received: ${response.message}\")\n    val againResponse = stub.sayHelloAgain(request)\n    println(\"Received: ${againResponse.message}\")\n  }\n\n  override fun close() {\n    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Proxy for gRPC-Web\nDESCRIPTION: This YAML configuration sets up an Envoy proxy to forward gRPC-Web requests from the browser to the backend gRPC server. It includes listener and cluster configurations.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  address:\n    socket_address: { address: 0.0.0.0, port_value: 9901 }\n\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address: { address: 0.0.0.0, port_value: 8080 }\n    filter_chains:\n    - filters:\n      - name: envoy.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          codec_type: auto\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match: { prefix: \"/\" }\n                route: { cluster: echo_service }\n          http_filters:\n          - name: envoy.grpc_web\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: echo_service\n    connect_timeout: 0.25s\n    type: LOGICAL_DNS\n    typed_extension_protocol_options:\n      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n        \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n        explicit_http_config:\n          http2_protocol_options: {}\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: echo_service\n      endpoints:\n        - lb_endpoints:\n          - endpoint:\n              address:\n                socket_address:\n                  address: node-server\n                  port_value: 9090\n```\n\n----------------------------------------\n\nTITLE: Initializing Bidirectional Streaming RPC with RouteChat in PHP gRPC\nDESCRIPTION: This snippet demonstrates how to initialize a bidirectional streaming RPC call using the RouteChat method. It returns a BidiStreamingCall object for both writing and reading messages.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$call = $client->RouteChat();\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Streaming RPC Implementation in Objective-C\nDESCRIPTION: Shows implementation of bidirectional streaming RPC using RouteChat method. Combines aspects of request and response streaming with message handling and stream completion.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_16\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)didReceiveProtoMessage(GPBMessage *)message {\n  RTGRouteNote *note = (RTGRouteNote *)message;\n  if (note) {\n    NSLog(@\"Got message %@ at %@\", note.message, note.location);\n  }\n}\n\n- (void)didCloseWithTrailingMetadata:(NSDictionary *)trailingMetadata error:(NSError *)error {\n  if (error) {\n    NSLog(@\"RPC error: %@\", error);\n  } else {\n    NSLog(@\"Chat ended.\");\n  }\n}\n\n- (void)execRequest {\n  ...\n  GRPCStreamingProtoCall *call =\n      [service routeChatWithResponseHandler:self callOptions:nil];\n  [call start];\n  [call writeMessage:note1];\n  ...\n  [call writeMessage:noteN];\n  [call finish];\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Streaming RPC in Kotlin\nDESCRIPTION: Implementation of client-side streaming using RecordRoute RPC and point generation. Demonstrates how to send a stream of requests and handle a single response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun recordRoute(points: Flow<Point>) {\n  println(\"*** RecordRoute\")\n  val summary = stub.recordRoute(points)\n  println(\"Finished trip with ${summary.pointCount} points.\")\n  println(\"Passed ${summary.featureCount} features.\")\n  println(\"Travelled ${summary.distance} meters.\")\n  val duration = summary.elapsedTime.seconds\n  println(\"It took $duration seconds.\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun generateRoutePoints(features: List<Feature>, numPoints: Int): Flow<Point> = flow {\n  for (i in 1..numPoints) {\n    val feature = features.random(random)\n    println(\"Visiting point ${feature.location.toStr()}\")\n    emit(feature.location)\n    delay(timeMillis = random.nextLong(500L..1500L))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table for Language Support Status of gRPC and Protobuf on ARM64 Linux\nDESCRIPTION: A formatted HTML table showing the support status for gRPC and Protocol Buffers on ARM64 Linux across different programming languages. It details which languages are continuously tested, how they're distributed, and provides additional information about their implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-on-arm64.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n<tr>\n  <td style=\"white-space: nowrap\">Language</td>\n  <td style=\"white-space: nowrap\">continuously tested</td>\n  <td>distribution/packages</td>\n  <td>additional info</td>\n</tr>\n<tr>\n  <td>C++</td>\n  <td style=\"background: #90ee90;\">✔️</td>\n  <td style=\"background: #90ee90;\">Build from source using cmake or bazel (same approach as on x86_64)</td>\n  <td></td>\n</tr>\n<tr>\n  <td>C#</td>\n  <td style=\"background: #90ee90;\">✔️</td>\n  <td style=\"background: #90ee90;\">Grpc.Core nuget packages now have aarch64 Linux support (starting from <code>v2.38.1</code>)</td>\n  <td>Grpc.Tools nuget package has now support for codegen on aarch64 Linux</td>\n</tr>\n<tr>\n  <td>Go</td>\n  <td style=\"background: #90ee90;\">✔️ <sup>1</sup></td>\n  <td style=\"background: #90ee90;\">Use the standard way of installing libraries in golang (same experience as on x86_64)</td>\n  <td></td>\n</tr>\n<tr>\n  <td>Java</td>\n  <td style=\"background: #90ee90;\">✔️</td>\n  <td style=\"background: #90ee90;\">Maven artifacts published with each release work well on aarch64 Linux</td>\n  <td>aarch64 protoc and grpc-java protoc plugin are published with each release</td>\n</tr>\n<tr>\n  <td  style=\"white-space: nowrap\">Node/Javascript</td>\n  <td style=\"background: #90ee90;\">✔️</td>\n  <td style=\"background: #90ee90;\">Use existing npm packages (they are platform-independent)</td>\n  <td></td>\n</tr>\n<tr>\n  <td>PHP</td>\n  <td style=\"background: #90ee90;\">✔️</td>\n  <td style=\"background: #90ee90;\">Existing PECL and composer packages work well on aarch64 Linux</td>\n  <td></td>\n</tr>\n<tr>\n  <td>Python</td>\n  <td style=\"background: #90ee90;\">✔️</td>\n  <td style=\"background: #90ee90;\">Pre-built wheels for aarch64 Linux are published with each release (starting from <code>v1.38.1</code>)</td>\n  <td>grpcio-tools package has now support for codegen on aarch64 Linux</td>\n</tr>\n<tr>\n  <td>Ruby</td>\n  <td style=\"background: #90ee90;\">✔️</td>\n  <td style=\"background: #ffcccb;\">Pre-built native gems for aarch64 Linux not available yet. In order to use grpc-ruby and protobuf-ruby, users need to build the gems from source</td>\n  <td>Continuous tests are in place and they are passing consistently, but we don't yet provide pre-built packages. gRPC and protobuf in ruby are safe to use, but the installation experience is suboptimal</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Server Registration Function for gRPC Service in Go\nDESCRIPTION: Function signature used to register a concrete implementation of a gRPC service with a server instance. This is generated for each service defined in the .proto file.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc RegisterBarServer(s *grpc.Server, srv BarServer)\n```\n\n----------------------------------------\n\nTITLE: Displaying gRPC Network Failure Error Codes\nDESCRIPTION: This snippet presents a table of gRPC error status codes related to network failures. It covers scenarios such as data transmission before deadline expiration and connection breaks.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/error.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Case | Status code |\n|-----|-----------|\n| No data transmitted before deadline expires. Also applies to cases where some data is transmitted and no other failures are detected before the deadline expires | `GRPC_STATUS_DEADLINE_EXCEEDED` |\n| Some data transmitted (for example, the request metadata has been written to the TCP connection) before the connection breaks | `GRPC_STATUS_UNAVAILABLE` |\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple RPC Method in Java Server\nDESCRIPTION: Implementation of the getFeature method for a simple RPC call. It processes a Point request, finds the corresponding Feature using the checkFeature helper method, and returns the result through the responseObserver.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void getFeature(Point request, StreamObserver<Feature> responseObserver) {\n  responseObserver.onNext(checkFeature(request));\n  responseObserver.onCompleted();\n}\n\n...\n\nprivate Feature checkFeature(Point location) {\n  for (Feature feature : features) {\n    if (feature.getLocation().getLatitude() == location.getLatitude()\n        && feature.getLocation().getLongitude() == location.getLongitude()) {\n      return feature;\n    }\n  }\n\n  // No feature was found, return an unnamed feature.\n  return Feature.newBuilder().setName(\"\").setLocation(location).build();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Simple RPC Method in PHP\nDESCRIPTION: PHP code demonstrating how to call a simple RPC method (GetFeature) and handle the response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$point = new Routeguide\\Point();\n$point->setLatitude(409146138);\n$point->setLongitude(-746188906);\nlist($feature, $status) = $client->GetFeature($point)->wait();\n\nprint sprintf(\"Found %s \\n  at %f, %f\\n\", $feature->getName(),\n              $feature->getLocation()->getLatitude() / COORD_FACTOR,\n              $feature->getLocation()->getLongitude() / COORD_FACTOR);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC for Route Chat\nDESCRIPTION: Implements the routeChat method that allows exchange of route notes between client and server. For each note received, it responds with all previous notes at the same location and stores the new note for future exchanges.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction routeChat(call) {\n  call.on('data', function(note) {\n    var key = pointKey(note.location);\n    /* For each note sent, respond with all previous notes that correspond to\n     * the same point */\n    if (route_notes.hasOwnProperty(key)) {\n      _.each(route_notes[key], function(note) {\n        call.write(note);\n      });\n    } else {\n      route_notes[key] = [];\n    }\n    // Then add the new note to the list\n    route_notes[key].push(JSON.parse(JSON.stringify(note)));\n  });\n  call.on('end', function() {\n    call.end();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Call Options with OAuth2 Access Token\nDESCRIPTION: This Objective-C code snippet demonstrates how to create a GRPCCallOptions object and configure it with an OAuth2 access token.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/oauth2.md#2025-04-08_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\nGRPCMutableCallOptions *options = [[GRPCMutableCallOptions alloc] init];\noptions.oauth2AccessToken = myAccessToken;\n```\n\n----------------------------------------\n\nTITLE: Defining Robot Exclusion Rules for grpc.io Website\nDESCRIPTION: This snippet defines robot exclusion rules for the grpc.io website. It disallows access to '/get_grpcurl' for all user agents and iterates through pages to disallow access to those with 'noindex' in their parameters.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/layouts/robots.txt#2025-04-08_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /get_grpcurl\n{{ range .Pages -}}\n{{ if in (lower .Params.robots) \"noindex\" -}}\nDisallow: {{ .RelPermalink }}$\n{{ end -}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Streaming RPC in Dart gRPC Client\nDESCRIPTION: This snippet demonstrates how to call a server-side streaming RPC method (listFeatures) and process the stream of responses from the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal rect = Rectangle()...; // initialize a Rectangle\n\ntry {\n  await for (var feature in stub.listFeatures(rect)) {\n    print(feature);\n  }\ncatch (e) {\n  print('ERROR: $e');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC-Web Server-Side Streaming in JavaScript\nDESCRIPTION: An example of how to implement server-side streaming with gRPC-Web as an alternative to WebSockets. It creates a client instance, initiates a streaming request, and sets up event listeners to handle data, errors, and stream completion.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/postman-grpcweb.md#2025-04-08_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst { Empty } = require('./generated/common_pb.js');\nconst { DataServiceClient } = require('./generated/data_grpc_web_pb.js');\n\nconst client = new DataServiceClient('https://api.example.com');\n\nconst request = new Empty();\n\nconst stream = client.dataStream(request, {});\n\nstream.on('data', (response) => {\n  console.log(response.toObject());\n});\n\nstream.on('error', (err) => {\n  console.error('Stream Error:', err);\n});\n\nstream.on('end', () => {\n  console.log('Stream ended.');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Message Classes for gRPC with JSON\nDESCRIPTION: Java code defining custom message classes for a key-value store service, replacing Protobuf-generated classes for use with Gson serialization in gRPC.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n  static final class CreateRequest {\n    byte[] key;\n    byte[] value;\n  }\n\n  static final class CreateResponse {\n  }\n\n  static final class RetrieveRequest {\n    byte[] key;\n  }\n\n  static final class RetrieveResponse {\n    byte[] value;\n  }\n\n  static final class UpdateRequest {\n    byte[] key;\n    byte[] value;\n  }\n\n  static final class UpdateResponse {\n  }\n\n  static final class DeleteRequest {\n    byte[] key;\n  }\n\n  static final class DeleteResponse {\n  }\n```\n\n----------------------------------------\n\nTITLE: Replacing Protobuf Components with JSON in gRPC\nDESCRIPTION: A diff showing the replacement of Protobuf-related components with JSON and Gson equivalents in a gRPC implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\n- Protobuf wire encoding\n- Protobuf generated message types\n- gRPC generated stub types\n+ JSON wire encoding\n+ Gson message types\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Channel and Stub in Kotlin\nDESCRIPTION: Code for creating a gRPC channel and initializing a client stub for making RPC calls. Shows channel configuration and stub instantiation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval channel = ManagedChannelBuilder.forAddress(\"localhost\", 8980).usePlaintext().build()\n\nval stub = RouteGuideCoroutineStub(channel)\n```\n\n----------------------------------------\n\nTITLE: Server Streaming RPC Method Signature\nDESCRIPTION: Service stub signature for handling server-streaming RPC calls in Java.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/generated-code.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void serverStreamingExample(\n    RequestType request,\n    StreamObserver<ResponseType> responseObserver)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Streaming RPC for Feature Listing\nDESCRIPTION: Implements the listFeatures method that returns a stream of features within a given rectangular area. It filters features based on their geographic coordinates and streams matching features back to the client.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction listFeatures(call) {\n  var lo = call.request.lo;\n  var hi = call.request.hi;\n  var left = _.min([lo.longitude, hi.longitude]);\n  var right = _.max([lo.longitude, hi.longitude]);\n  var top = _.max([lo.latitude, hi.latitude]);\n  var bottom = _.min([lo.latitude, hi.latitude]);\n  // For each feature, check if it is in the given bounding box\n  _.each(feature_list, function(feature) {\n    if (feature.name === '') {\n      return;\n    }\n    if (feature.location.longitude >= left &&\n        feature.location.longitude <= right &&\n        feature.location.latitude >= bottom &&\n        feature.location.latitude <= top) {\n      call.write(feature);\n    }\n  });\n  call.end();\n}\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Streaming Method Server Interface in Go gRPC\nDESCRIPTION: Signature for bidirectional streaming methods on the generated service interface. Uses a BidiStreamingServer generic interface to handle both client-to-server and server-to-client message streams.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nFoo(grpc.BidiStreamingServer[*RequestMsg, *ResponseMsg]) error\n```\n\n----------------------------------------\n\nTITLE: Creating a gRPC Client Channel and Stub in Dart\nDESCRIPTION: This snippet demonstrates how to create a gRPC channel for client-server communication and instantiate a client stub for making RPC calls.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal channel = ClientChannel('127.0.0.1',\n    port: 8080,\n    options: const ChannelOptions(\n        credentials: ChannelCredentials.insecure()));\n\nstub = RouteGuideClient(channel,\n    options: CallOptions(timeout: Duration(seconds: 30)));\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output Before Optimization\nDESCRIPTION: Example of problematic JSON output where byte arrays are encoded as integer arrays instead of base64 strings, resulting in inefficient serialization.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"key\":[4,-100,-48,22,-128,85,115,5,56,34,-48,-1,-119,60,17,-13,-118]}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unary RPC Client Handler\nDESCRIPTION: Client-side implementation for the GetFeature RPC that sends a Point and handles the Feature response asynchronously with proper synchronization.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nbool GetOneFeature(const Point& point, Feature* feature) {\n    ClientContext context;\n    bool result;\n    std::mutex mu;\n    std::condition_variable cv;\n    bool done = false;\n    stub_->async()->GetFeature(\n        &context, &point, feature,\n        [&result, &mu, &cv, &done, feature, this](Status status) {\n          bool ret;\n          if (!status.ok()) {\n            std::cout << \"GetFeature rpc failed.\" << std::endl;\n            ret = false;\n          } else if (!feature->has_location()) {\n            std::cout << \"Server returns incomplete feature.\" << std::endl;\n            ret = false;\n          } else if (feature->name().empty()) {\n            std::cout << \"Found no feature at \"\n                      << feature->location().latitude() / kCoordFactor_ << \", \"\n                      << feature->location().longitude() / kCoordFactor_\n                      << std::endl;\n            ret = true;\n          } else {\n            std::cout << \"Found feature called \" << feature->name() << \" at \"\n                      << feature->location().latitude() / kCoordFactor_ << \", \"\n                      << feature->location().longitude() / kCoordFactor_\n                      << std::endl;\n            ret = true;\n          }\n          std::lock_guard<std::mutex> lock(mu);\n          result = ret;\n          done = true;\n          cv.notify_one();\n        });\n    std::unique_lock<std::mutex> lock(mu);\n    cv.wait(lock, [&done] { return done; });\n    return result;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Client Stub in Ruby\nDESCRIPTION: Creates a client stub for the RouteGuide service to make RPC calls.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nstub = RouteGuide::Stub.new('localhost:50051')\n```\n\n----------------------------------------\n\nTITLE: Performing Client Authorization Check in ALTS Server Java\nDESCRIPTION: This code demonstrates how to perform a client authorization check on the server side using ALTS. It uses AuthorizationUtil to verify the client's service account against a list of allowed accounts.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/alts.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.grpc.alts.AuthorizationUtil;\nimport io.grpc.ServerCall;\nimport io.grpc.Status;\n\nServerCall<?, ?> call;\nStatus status = AuthorizationUtil.clientAuthorizationCheck(\n    call, Lists.newArrayList(\"foo@iam.gserviceaccount.com\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC-Web Client in JavaScript\nDESCRIPTION: JavaScript implementation showing how to use the generated gRPC-Web client to make requests to the TODO service, including error handling and response processing.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-web-ga.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {GetTodoRequest} = require('./todos_pb.js');\nconst {TodoServiceClient} = require('./todos_grpc_web_pb.js');\n\nconst todoService = new proto.todos.TodoServiceClient('http://localhost:8080');\nconst todoId = 1234;\n\nvar getTodoRequest = new proto.todos.GetTodoRequest();\ngetTodoRequest.setId(todoId);\n\nvar metadata = {};\nvar getTodo = todoService.getTodoById(getTodoRequest, metadata, (err, response) => {\n  if (err) {\n    console.log(err);\n  } else {\n    const todo = response.todo();\n    if (todo == null) {\n      console.log(`A TODO with the ID ${todoId} wasn't found`);\n    } else {\n      console.log(`Fetched TODO with ID ${todoId}: ${todo.content()}`);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Streaming RPC Method in Dart gRPC Server\nDESCRIPTION: Dart implementation of the ListFeatures method that handles a server-side streaming RPC, returning a stream of features contained within a specified rectangle.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n/// ListFeatures handler. Returns a stream of features within the given\n/// rectangle.\n@override\nStream<Feature> listFeatures(\n    grpc.ServiceCall call, Rectangle request) async* {\n  final normalizedRectangle = _normalize(request);\n  // For each feature, check if it is in the given bounding box\n  for (var feature in featuresDb) {\n    if (feature.name.isEmpty) continue;\n    final location = feature.location;\n    if (_contains(normalizedRectangle, location)) {\n      yield feature;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Simple RPC Method in Java gRPC\nDESCRIPTION: Example of calling a simple RPC method (getFeature) using a blocking stub. The code creates a request, calls the service method, and handles potential errors through StatusRuntimeException.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nPoint request = Point.newBuilder().setLatitude(lat).setLongitude(lon).build();\nFeature feature;\ntry {\n  feature = blockingStub.getFeature(request);\n} catch (StatusRuntimeException e) {\n  logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple RPC Call Implementation in Ruby\nDESCRIPTION: Demonstrates how to make a simple RPC call to the GetFeature method using the client stub.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nGET_FEATURE_POINTS = [\n  Point.new(latitude:  409_146_138, longitude: -746_188_906),\n  Point.new(latitude:  0, longitude: 0)\n]\n..\n  GET_FEATURE_POINTS.each do |pt|\n    resp = stub.get_feature(pt)\n\t...\n    p \"- found '#{resp.name}' at #{pt.inspect}\"\n  end\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Python Code\nDESCRIPTION: Command to generate Python code from the Protocol Buffer definition using the gRPC tools.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npython -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/route_guide.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Kotlin gRPC JVM Project\nDESCRIPTION: Gradle configuration for setting up a Kotlin JVM project with gRPC support. Includes plugin setup, dependencies, and protobuf compilation configuration.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/kotlin-gradle-projects.md#2025-04-08_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napply plugin: 'kotlin'\napply plugin: 'com.google.protobuf'\n\n// Generate IntelliJ IDEA's .idea & .iml project files.\n// protobuf-gradle-plugin automatically registers *.proto and the gen output files\n// to IntelliJ as sources.\n// For best results, install the Protobuf and Kotlin plugins for IntelliJ.\napply plugin: 'idea'\n\nbuildscript {\n  ext.kotlin_version = '1.2.21'\n\n  repositories {\n    mavenCentral()\n  }\n  dependencies {\n    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'\n    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n  }\n}\n\ndependencies {\n  compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n  // The rest of the projects dep are added below, refer to example URL\n}\n\n// The standard protobuf block, same as normal gRPC Java projects\nprotobuf {\n  protoc { artifact = 'com.google.protobuf:protoc:3.5.1-1' }\n    plugins {\n      grpc { artifact = \"io.grpc:protoc-gen-grpc-java:${grpcVersion}\" }\n    }\n    generateProtoTasks {\n      all()*.plugins { grpc {} }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the gRPC Client\nDESCRIPTION: Command to compile and run the gRPC client that connects to the server and makes a request. The output shows the response from the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo run greeter_client/main.go\n```\n\n----------------------------------------\n\nTITLE: Updating the Client to Call the New Method\nDESCRIPTION: Go code to update the client to call the newly added SayHelloAgain method. This makes a second RPC call and logs the response message.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nr, err = c.SayHelloAgain(ctx, &pb.HelloRequest{Name: *name})\nif err != nil {\n        log.Fatalf(\"could not greet: %v\", err)\n}\nlog.Printf(\"Greeting: %s\", r.GetMessage())\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Key-Value Store Handler in gRPC Java\nDESCRIPTION: Server implementation of the create operation using synchronized access to ensure thread safety. Includes simulated write delay and error handling.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-1.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate final Map<ByteBuffer, ByteBuffer> store = new HashMap<>();\n\n@Override\npublic synchronized void create(\n    CreateRequest request, StreamObserver<CreateResponse> responseObserver) {\n  ByteBuffer key = request.getKey().asReadOnlyByteBuffer();\n  ByteBuffer value = request.getValue().asReadOnlyByteBuffer();\n  simulateWork(WRITE_DELAY_MILLIS);\n  if (store.putIfAbsent(key, value) == null) {\n    responseObserver.onNext(CreateResponse.getDefaultInstance());\n    responseObserver.onCompleted();\n    return;\n  }\n  responseObserver.onError(Status.ALREADY_EXISTS.asRuntimeException());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MethodDescriptor for gRPC with JSON\nDESCRIPTION: Java code demonstrating how to create a MethodDescriptor for a gRPC method using custom Gson marshallers.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n  static final MethodDescriptor<CreateRequest, CreateResponse> CREATE_METHOD =\n      MethodDescriptor.newBuilder(\n          marshallerFor(CreateRequest.class),\n          marshallerFor(CreateResponse.class))\n          .setFullMethodName(\n              MethodDescriptor.generateFullMethodName(SERVICE_NAME, \"Create\"))\n          .setType(MethodType.UNARY)\n          .build();\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message Types\nDESCRIPTION: Shows how to define message types in Protocol Buffers for use in gRPC service methods. The example defines a Point message type with latitude and longitude fields.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// Points are represented as latitude-longitude pairs in the E7 representation\n// (degrees multiplied by 10**7 and rounded to the nearest integer).\n// Latitudes should be in the range +/- 90 degrees and longitude should be in\n// the range +/- 180 degrees (inclusive).\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Streaming with gRPC in JavaScript\nDESCRIPTION: Implementation of client-side streaming RPC 'RecordRoute' that sends multiple points to the server. Demonstrates how to write data to the stream and handle the server's response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar call = client.recordRoute(function(error, stats) {\n  if (error) {\n    callback(error);\n  }\n  console.log('Finished trip with', stats.point_count, 'points');\n  console.log('Passed', stats.feature_count, 'features');\n  console.log('Travelled', stats.distance, 'meters');\n  console.log('It took', stats.elapsed_time, 'seconds');\n});\nfunction pointSender(lat, lng) {\n  return function(callback) {\n    console.log('Visiting point ' + lat/COORD_FACTOR + ', ' +\n        lng/COORD_FACTOR);\n    call.write({\n      latitude: lat,\n      longitude: lng\n    });\n    _.delay(callback, _.random(500, 1500));\n  };\n}\nvar point_senders = [];\nfor (var i = 0; i < num_points; i++) {\n  var rand_point = feature_list[_.random(0, feature_list.length - 1)];\n  point_senders[i] = pointSender(rand_point.location.latitude,\n                                 rand_point.location.longitude);\n}\nasync.series(point_senders, function() {\n  call.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Building Protocol Buffer and gRPC Code with Make\nDESCRIPTION: Command to compile the protocol buffer definition into C++ code using make target.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake route_guide.grpc.pb.o\n```\n\n----------------------------------------\n\nTITLE: Extending gRPC Service with Additional Method\nDESCRIPTION: Updated Protocol Buffer definition for the Greeter service, adding a new SayHelloAgain method with the same request and response types as the original method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting. Original method.\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting. New method.\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  // The name of the user.\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  // The greeting message.\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TestStreamInterceptor in JavaScript for gRPC-Web\nDESCRIPTION: This code snippet demonstrates the implementation of a TestStreamInterceptor class in JavaScript for gRPC-Web. It wraps the invoker's return value with an InterceptedStream to intercept stream responses.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-web-interceptor.md#2025-04-08_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @constructor\n * @implements {StreamInterceptor}\n */\nconst TestStreamInterceptor = function() {};\n\n/** @override */\nTestStreamInterceptor.prototype.intercept = function(request, invoker) {\n  return new InterceptedStream(invoker(request));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Throttling in gRPC Service Config\nDESCRIPTION: JSON configuration for throttling hedged RPCs to prevent server overload. It uses a token-based system where failed RPCs decrease tokens and successful ones increase them, with hedged requests sent only when token count exceeds a threshold.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/request-hedging.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"retryThrottling\": {\n  \"maxTokens\": 10,\n  \"tokenRatio\": 0.1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ALTS Client Credentials in Go\nDESCRIPTION: Sets up ALTS client credentials using default options and establishes a secure connection to the server. This snippet initializes transport credentials for a gRPC client using ALTS authentication.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/alts.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC := alts.NewClientCreds(alts.DefaultClientOptions())\nconn, err := grpc.NewClient(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n----------------------------------------\n\nTITLE: Defining Message Types in Protocol Buffers\nDESCRIPTION: Definition of the Point message type which represents geographic coordinates as latitude-longitude pairs in the E7 representation (degrees multiplied by 10^7).\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n// Points are represented as latitude-longitude pairs in the E7 representation\n// (degrees multiplied by 10**7 and rounded to the nearest integer).\n// Latitudes should be in the range +/- 90 degrees and longitude should be in\n// the range +/- 180 degrees (inclusive).\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Simple RPC Call in Dart gRPC Client\nDESCRIPTION: This snippet shows how to make a simple RPC call (getFeature) using the gRPC client stub. It demonstrates creating a request object and handling the response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nfinal point = Point()\n  ..latitude = 409146138\n  ..longitude = -746188906;\nfinal feature = await stub.getFeature(point));\n```\n\n----------------------------------------\n\nTITLE: Creating a gRPC Client Stub in Node.js\nDESCRIPTION: Creates a client stub for the RouteGuide service by specifying the server address and port with insecure credentials. The stub is used to make RPC calls to the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnew routeguide.RouteGuide('localhost:50051', grpc.credentials.createInsecure());\n```\n\n----------------------------------------\n\nTITLE: Completing RPC in Asynchronous gRPC C++ Server\nDESCRIPTION: Waits for the completion queue to return the tag set in the Finish call, indicating that the RPC has completed and resources can be cleaned up.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nvoid* got_tag;\nbool ok = false;\ncq.Next(&got_tag, &ok);\nif (ok && got_tag == (void*)2) {\n  // clean up\n}\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Code with Protocol Compiler\nDESCRIPTION: Shell command to generate Go client and server interfaces from the protobuf definition.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nprotoc --go_out=. --go_opt=paths=source_relative \\\n    --go-grpc_out=. --go-grpc_opt=paths=source_relative \\\n    routeguide/route_guide.proto\n```\n\n----------------------------------------\n\nTITLE: Initializing Bidirectional Streaming with gRPC in JavaScript\nDESCRIPTION: Example of setting up a bidirectional streaming RPC 'routeChat' that allows both client and server to send messages independently.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar call = client.routeChat();\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Message Definition\nDESCRIPTION: Definition of a Point message type representing latitude-longitude pairs in E7 representation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\n// Points are represented as latitude-longitude pairs in the E7 representation\n// (degrees multiplied by 10**7 and rounded to the nearest integer).\n// Latitudes should be in the range +/- 90 degrees and longitude should be in\n// the range +/- 180 degrees (inclusive).\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PHP gRPC Client\nDESCRIPTION: PHP code to create a gRPC client object for the RouteGuide service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$client = new Routeguide\\RouteGuideClient('localhost:50051', [\n    'credentials' => Grpc\\ChannelCredentials::createInsecure(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Authorization with ALTS in gRPC C++\nDESCRIPTION: Illustrates how to configure ALTS credentials with specific target service accounts for server authorization.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/alts.md#2025-04-08_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <grpcpp/grpcpp.h>\n#include <grpcpp/security/credentials.h>\n\nusing grpc::experimental::AltsCredentials;\nusing grpc::experimental::AltsCredentialsOptions;\n\nAltsCredentialsOptions opts;\nopts.target_service_accounts.push_back(\"expected_server_service_account1\");\nopts.target_service_accounts.push_back(\"expected_server_service_account2\");\nauto creds = AltsCredentials(opts);\nstd::shared_ptr<grpc::Channel> channel = CreateChannel(server_address, creds);\n```\n\n----------------------------------------\n\nTITLE: Client Streaming RPC Method Signature\nDESCRIPTION: Service stub signature for handling client-streaming RPC calls in Java.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/generated-code.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic StreamObserver<RequestType> clientStreamingExample(\n    StreamObserver<ResponseType> responseObserver)\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with FlatBuffers Schema\nDESCRIPTION: An example FlatBuffers schema (.fbs) file that defines message types and a gRPC service. It demonstrates how to declare request and response message structures and a service with both unary and server streaming methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-flatbuffers.md#2025-04-08_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\ntable HelloReply {\n  message:string;\n}\n\ntable HelloRequest {\n  name:string;\n}\n\ntable ManyHellosRequest {\n  name:string;\n  num_greetings:int;\n}\n\nrpc_service Greeter {\n  SayHello(HelloRequest):HelloReply;\n  SayManyHellos(ManyHellosRequest):HelloReply (streaming: \"server\");\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Request in Asynchronous gRPC C++ Server\nDESCRIPTION: Waits for the completion queue to return the tag, indicating that the context, request, and responder are ready. Then processes the request and sends a response with a new tag.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nHelloReply reply;\nStatus status;\nvoid* got_tag;\nbool ok = false;\ncq.Next(&got_tag, &ok);\nif (ok && got_tag == (void*)1) {\n  // set reply and status\n  responder.Finish(reply, status, (void*)2);\n}\n```\n\n----------------------------------------\n\nTITLE: CallData Class for Managing Concurrent Requests in gRPC C++ Server\nDESCRIPTION: Implements a CallData class to maintain state for each RPC, using the address of the object as a unique tag. Handles creating, processing, and finishing RPC operations through different states.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nclass CallData {\npublic:\n  // Take in the \"service\" instance (in this case representing an asynchronous\n  // server) and the completion queue \"cq\" used for asynchronous communication\n  // with the gRPC runtime.\n  CallData(Greeter::AsyncService* service, ServerCompletionQueue* cq)\n      : service_(service), cq_(cq), responder_(&ctx_), status_(CREATE) {\n    // Invoke the serving logic right away.\n    Proceed();\n  }\n\n  void Proceed() {\n    if (status_ == CREATE) {\n      // As part of the initial CREATE state, we *request* that the system\n      // start processing SayHello requests. In this request, \"this\" acts are\n      // the tag uniquely identifying the request (so that different CallData\n      // instances can serve different requests concurrently), in this case\n      // the memory address of this CallData instance.\n      service_->RequestSayHello(&ctx_, &request_, &responder_, cq_, cq_,\n                                this);\n      // Make this instance progress to the PROCESS state.\n      status_ = PROCESS;\n    } else if (status_ == PROCESS) {\n      // Spawn a new CallData instance to serve new clients while we process\n      // the one for this CallData. The instance will deallocate itself as\n      // part of its FINISH state.\n      new CallData(service_, cq_);\n\n      // The actual processing.\n      std::string prefix(\"Hello \");\n      reply_.set_message(prefix + request_.name());\n\n      // And we are done! Let the gRPC runtime know we've finished, using the\n      // memory address of this instance as the uniquely identifying tag for\n      // the event.\n      responder_.Finish(reply_, Status::OK, this);\n      status_ = FINISH;\n    } else {\n      GPR_ASSERT(status_ == FINISH);\n      // Once in the FINISH state, deallocate ourselves (CallData).\n      delete this;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ALTS Server Credentials in Go\nDESCRIPTION: Configures a gRPC server with ALTS authentication credentials. This snippet creates server credentials using default ALTS options and initializes a new gRPC server with those credentials.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/alts.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC := alts.NewServerCreds(alts.DefaultServerOptions())\nserver := grpc.NewServer(grpc.Creds(altsTC))\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerReadReactor for Client-Side Streaming in gRPC C++\nDESCRIPTION: This code implements a ServerReadReactor that handles client-side streaming RPC. The Recorder class processes incoming point data from the client, tracks features encountered, calculates distance, and returns a summary when the client finishes streaming. It demonstrates proper lifecycle management of a streaming request.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\ngrpc::ServerReadReactor<Point>* RecordRoute(CallbackServerContext* context,\n                                              RouteSummary* summary) override {\n    class Recorder : public grpc::ServerReadReactor<Point> {\n     public:\n      Recorder(RouteSummary* summary, const std::vector<Feature>* feature_list)\n          : start_time_(system_clock::now()),\n            summary_(summary),\n            feature_list_(feature_list) {\n        StartRead(&point_);\n      }\n\n      void OnReadDone(bool ok) override {\n        if (ok) {\n          point_count_++;\n          if (!GetFeatureName(point_, *feature_list_).empty()) {\n            feature_count_++;\n          }\n          if (point_count_ != 1) {\n            distance_ += GetDistance(previous_, point_);\n          }\n          previous_ = point_;\n          StartRead(&point_);\n        } else {\n          summary_->set_point_count(point_count_);\n          summary_->set_feature_count(feature_count_);\n          summary_->set_distance(static_cast<long>(distance_));\n          auto secs = std::chrono::duration_cast<std::chrono::seconds>(\n              system_clock::now() - start_time_);\n          summary_->set_elapsed_time(secs.count());\n          Finish(Status::OK);\n        }\n      }\n\n      void OnDone() override {\n        LOG(INFO) << \"RPC Completed\";\n        delete this;\n      }\n\n      void OnCancel() override { LOG(ERROR) << \"RPC Cancelled\"; }\n\n     private:\n      system_clock::time_point start_time_;\n      RouteSummary* summary_;\n      const std::vector<Feature>* feature_list_;\n      Point point_;\n      int point_count_ = 0;\n      int feature_count_ = 0;\n      float distance_ = 0.0;\n      Point previous_;\n    };\n    return new Recorder(summary, &feature_list_);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing GRPCAuthorizationProtocol for Token Provision\nDESCRIPTION: This Objective-C code shows how to implement a custom class conforming to GRPCAuthorizationProtocol for providing OAuth2 tokens at call time.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/oauth2.md#2025-04-08_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface TokenProvider : NSObject<GRPCAuthorizationProtocol>\n...\n@end\n\n@implementation TokenProvider\n\n- (void)getTokenWithHandler:(void (^)(NSString* token))handler {\n  ...\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Defining UnaryInterceptor Interface in JavaScript for gRPC-Web\nDESCRIPTION: This code snippet defines the UnaryInterceptor interface in JavaScript for gRPC-Web. It declares an intercept method that takes a request and an invoker function as parameters, returning a Promise with the intercepted response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-web-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*\n* @interface\n*/\nconst UnaryInterceptor = function() {};\n\n/**\n * @template REQUEST, RESPONSE\n * @param {!Request<REQUEST, RESPONSE>} request\n * @param {function(!Request<REQUEST,RESPONSE>):!Promise<!UnaryResponse<RESPONSE>>}\n *     invoker\n * @return {!Promise<!UnaryResponse<RESPONSE>>}\n */\nUnaryInterceptor.prototype.intercept = function(request, invoker) {};\n```\n\n----------------------------------------\n\nTITLE: Proper Server Shutdown in Asynchronous gRPC C++ Server\nDESCRIPTION: Implements the proper shutdown sequence for a gRPC server with a completion queue. The server must be shut down before the completion queue to avoid potential issues.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n~ServerImpl() {\n  server_->Shutdown();\n  // Always shutdown the completion queue after the server.\n  cq_->Shutdown();\n}\n```\n\n----------------------------------------\n\nTITLE: Unary Method Server Interface in Go gRPC\nDESCRIPTION: Signature for unary (simple request/response) methods on the generated server interface. Takes a context and request message, returns a response message and error.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nFoo(context.Context, *RequestMsg) (*ResponseMsg, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Streaming Reactor\nDESCRIPTION: Complete implementation of the ServerWriteReactor for handling ListFeatures streaming RPC. Includes logic for filtering and streaming features within a geographic rectangle.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n  grpc::ServerWriteReactor<Feature>* ListFeatures(\n      CallbackServerContext* context,\n      const routeguide::Rectangle* rectangle) override {\n    class Lister : public grpc::ServerWriteReactor<Feature> {\n     public:\n      Lister(const routeguide::Rectangle* rectangle,\n             const std::vector<Feature>* feature_list)\n          : left_((std::min)(rectangle->lo().longitude(),\n                             rectangle->hi().longitude())),\n            right_((std::max)(rectangle->lo().longitude(),\n                              rectangle->hi().longitude())),\n            top_((std::max)(rectangle->lo().latitude(),\n                            rectangle->hi().latitude())),\n            bottom_((std::min)(rectangle->lo().latitude(),\n                               rectangle->hi().latitude())),\n            feature_list_(feature_list),\n            next_feature_(feature_list_->begin()) {\n        NextWrite();\n      }\n\n      void OnWriteDone(bool ok) override {\n        if (!ok) {\n          Finish(Status(grpc::StatusCode::UNKNOWN, \"Unexpected Failure\"));\n        }\n        NextWrite();\n      }\n\n      void OnDone() override {\n        LOG(INFO) << \"RPC Completed\";\n        delete this;\n      }\n\n      void OnCancel() override { LOG(ERROR) << \"RPC Cancelled\"; }\n\n     private:\n      void NextWrite() {\n        while (next_feature_ != feature_list_->end()) {\n          const Feature& f = *next_feature_;\n          next_feature_++;\n          if (f.location().longitude() >= left_ &&\n              f.location().longitude() <= right_ &&\n              f.location().latitude() >= bottom_ &&\n              f.location().latitude() <= top_) {\n            StartWrite(&f);\n            return;\n          }\n        }\n        // Didn't write anything, all is done.\n        Finish(Status::OK);\n      }\n      const long left_;\n      const long right_;\n      const long top_;\n      const long bottom_;\n      const std::vector<Feature>* feature_list_;\n      std::vector<Feature>::const_iterator next_feature_;\n    };\n    return new Lister(rectangle, &feature_list_);\n  }\n```\n\n----------------------------------------\n\nTITLE: Waiting for Completion in Asynchronous gRPC C++ Client\nDESCRIPTION: Waits for the completion queue to return the previously set tag, signaling that the reply and status from the server are ready to be processed.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid* got_tag;\nbool ok = false;\ncq.Next(&got_tag, &ok);\nif (ok && got_tag == (void*)1) {\n  // check reply and status\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of Wait-for-Ready Behavior in gRPC\nDESCRIPTION: Illustrates the sequence of events when a client sends a message to a server, showing different behaviors based on channel state and Wait-for-Ready setting.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/wait-for-ready.md#2025-04-08_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nparticipant A as Application\nparticipant RPC\nparticipant CH as Channel\nparticipant S as Server \nA->>RPC: Create RPC using stub\nRPC->>CH: Initiate Communication\nalt channel state: READY\n  CH->>S: Send message\nelse Channel state: IDLE or CONNECTING\n  CH-->>CH: Wait for state change\nelse Channel state: TRANSIENT_FAILURE\n  alt with Wait-for-Ready\n    CH-->>CH: Wait for channel<br>becoming READY<br>(or a permanent failure)\n    CH->>S: Send message\n  else without Wait-for-Ready\n    CH->>A: Failure\n  end\nelse Channel state is a Permanent Failure\n    CH->>A: Failure\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Bidirectional Streaming RPC Method\nDESCRIPTION: Definition of a bidirectional streaming RPC method where both the client and server send streams of messages. This method allows route notes to be exchanged in real-time.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of RouteNotes sent while a route is being traversed,\n// while receiving other RouteNotes (e.g. from other users).\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Stubs in Android Java\nDESCRIPTION: Code to create blocking and asynchronous stubs using the generated RouteGuideGrpc class. These stubs are used to make RPC calls to the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nblockingStub = RouteGuideGrpc.newBlockingStub(mChannel);\nasyncStub = RouteGuideGrpc.newStub(mChannel);\n```\n\n----------------------------------------\n\nTITLE: Implementing InterceptedStream Wrapper in JavaScript for gRPC-Web\nDESCRIPTION: This code snippet defines an InterceptedStream class that wraps a ClientReadableStream in JavaScript for gRPC-Web. It intercepts the 'data' event to modify response messages before passing them to the original callback.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-web-interceptor.md#2025-04-08_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * A ClientReadableStream wrapper.\n *\n * @template RESPONSE\n * @implements {ClientReadableStream}\n * @constructor\n * @param {!ClientReadableStream<RESPONSE>} stream\n */\nconst InterceptedStream = function(stream) {\n  this.stream = stream;\n};\n\n/** @override */\nInterceptedStream.prototype.on = function(eventType, callback) {\n  if (eventType == 'data') {\n    const newCallback = (response) => {\n      // Update the response message.\n      const msg = response.getMessage();\n      response.setMessage('[Intercept response]' + msg);\n      // Pass along the updated response.\n      callback(response);\n    };\n    // Register the new callback.\n    this.stream.on(eventType, newCallback);\n  } else {\n    // You can also override 'status', 'end', and 'error' eventTypes.\n    this.stream.on(eventType, callback);\n  }\n  return this;\n};\n\n/** @override */\nInterceptedStream.prototype.cancel = function() {\n  this.stream.cancel();\n  return this;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting gRPC Unary Call with OAuth2\nDESCRIPTION: This Objective-C code demonstrates how to create and start a gRPC unary call using the previously configured call options with OAuth2 access token.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/oauth2.md#2025-04-08_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\nGRPCUnaryProtoRPC *rpc = [client unaryCallWithMessage:myRequestMessage\n                                      responseHandler:myResponseHandler\n                                          callOptions:options];\n[rpc start];\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message Type in Proto\nDESCRIPTION: Definition of a Point message type in protocol buffer format. This message represents geographic coordinates with latitude and longitude fields.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: proto\nCODE:\n```\n// Points are represented as latitude-longitude pairs in the E7 representation\n// (degrees multiplied by 10**7 and rounded to the nearest integer).\n// Latitudes should be in the range +/- 90 degrees and longitude should be in\n// the range +/- 180 degrees (inclusive).\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Messages in Bidirectional Streaming RPC with RouteChat in PHP gRPC\nDESCRIPTION: This snippet shows how to write messages from the client in a bidirectional streaming RPC. It demonstrates creating and sending RouteNote objects to the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nforeach ($notes as $n) {\n  $point = new Routeguide\\Point();\n  $point->setLatitude($lat = $n[0]);\n  $point->setLongitude($long = $n[1]);\n\n  $route_note = new Routeguide\\RouteNote();\n  $route_note->setLocation($point);\n  $route_note->setMessage($message = $n[2]);\n  $call->write($route_note);\n}\n$call->writesDone();\n```\n\n----------------------------------------\n\nTITLE: Requesting RPC Response in Asynchronous gRPC C++ Client\nDESCRIPTION: Requests the reply and final status from the server with a unique tag (void*)1. This tag will be used to identify the completion of this specific RPC operation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nStatus status;\nrpc->Finish(&reply, &status, (void*)1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Proxy for gRPC-Web\nDESCRIPTION: A YAML configuration snippet for Envoy proxy that enables gRPC-Web functionality. This configuration is essential for translating between gRPC-Web calls from the browser and gRPC calls to the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/postman-grpcweb.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.grpc_web\n- name: envoy.filters.http.router\n```\n\n----------------------------------------\n\nTITLE: Visualizing gRPC Flow Control Process with Mermaid Diagram\nDESCRIPTION: This Mermaid sequence diagram illustrates the flow control process in gRPC between a sender and receiver. It shows how the gRPC framework handles write operations, message sending, and acknowledgments to manage data flow and prevent overwhelming the receiver.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/flow-control.md#2025-04-08_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant SA as Sender Application\n    participant SG as Sender gRPC Framework\n    participant RG as Receiver gRPC Framework\n    participant RA as Receiver Application\n  \n  SA-)+SG: Stream Write\n  alt sending too fast\n    SG--)SG: Wait\n  end\n  alt allowed to send\n    SG--)-SA: Write call returns\n    SG->>RG:Send Msg\n  end\n  RA->>RG: Request message\n  Note right of RA:  Request can be done either<br>after or before message arrives\n  RG->>RA: Provide message\n  RG->>SG: Send Ack w/ msg size\n  opt waiting messages\n    SG->>RG: Send Next Msg\n  end\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple RPC Method in Dart gRPC Server\nDESCRIPTION: Dart implementation of the GetFeature method that handles a simple RPC request, retrieving a feature based on the provided location point.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n/// GetFeature handler. Returns a feature for the given location.\n/// The [context] object provides access to client metadata, cancellation, etc.\n@override\nFuture<Feature> getFeature(grpc.ServiceCall call, Point request) async {\n  return featuresDb.firstWhere((f) => f.location == request,\n      orElse: () => Feature()..location = request);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Service Class in Java\nDESCRIPTION: Creating a Java class that extends the generated RouteGuideGrpc.RouteGuideImplBase abstract class to implement the RouteGuide service functionality.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate static class RouteGuideService extends RouteGuideGrpc.RouteGuideImplBase {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Interceptor Order with Logging and Caching (Application-Closer)\nDESCRIPTION: This diagram shows an alternative order of interceptors with logging closer to the application and caching closer to the network. It illustrates the flow from the application through the interceptors to the network.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/interceptors.md#2025-04-08_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nAPP(Application) --> INT2\nINT1(Caching\\nInterceptor) -->|Cache miss| NET\nINT2(Logging\\nInterceptor) --> INT1\nNET(Network)\n```\n\n----------------------------------------\n\nTITLE: Defining a Protocol Buffer Message Type\nDESCRIPTION: Protocol buffer definition of a Point message type representing latitude-longitude pairs.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\n// Points are represented as latitude-longitude pairs in the E7 representation\n// (degrees multiplied by 10**7 and rounded to the nearest integer).\n// Latitudes should be in the range +/- 90 degrees and longitude should be in\n// the range +/- 180 degrees (inclusive).\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Streaming RPC Method Signature\nDESCRIPTION: Service stub signature for handling bidirectional-streaming RPC calls in Java.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/generated-code.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic StreamObserver<RequestType> bidirectionalStreamingExample(\n    StreamObserver<ResponseType> responseObserver)\n```\n\n----------------------------------------\n\nTITLE: Calling Simple RPC Method in C++\nDESCRIPTION: Example of calling a unary RPC method from the client side.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nPoint point;\nFeature feature;\npoint = MakePoint(409146138, -746188906);\nGetOneFeature(point, &feature);\n\n...\n\nbool GetOneFeature(const Point& point, Feature* feature) {\n  ClientContext context;\n  Status status = stub_->GetFeature(&context, point, feature);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Asynchronous Client Call in gRPC C++\nDESCRIPTION: Creates an asynchronous gRPC client call by binding a CompletionQueue to the AsyncSayHello RPC method. This establishes the foundation for a non-blocking client implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nCompletionQueue cq;\nstd::unique_ptr<ClientAsyncResponseReader<HelloReply> > rpc(\n    stub_->AsyncSayHello(&context, request, &cq));\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Client Code with protoc\nDESCRIPTION: Command to generate Objective-C client code from protocol buffer definitions using the protoc compiler.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I ../../protos --objc_out=Pods/RouteGuide --objcgrpc_out=Pods/RouteGuide ../../protos/route_guide.proto\n```\n\n----------------------------------------\n\nTITLE: Piggyback window updates in gRPC-Go\nDESCRIPTION: This optimization combines stream-level and connection-level window updates into a single flush syscall when possible, reducing the overhead associated with sending window updates separately.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-go-perf-improvements.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// Code link: https://github.com/grpc/grpc-go/pull/1273\n```\n\n----------------------------------------\n\nTITLE: Updating gRPC service with new method\nDESCRIPTION: Updated Protocol Buffer definition adding a new SayHelloAgain RPC method to the Greeter service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Service in Python\nDESCRIPTION: Example of implementing the RouteGuide service in Python by subclassing the generated RouteGuideServicer class.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# RouteGuideServicer provides an implementation of the methods of the RouteGuide service.\nclass RouteGuideServicer(route_guide_pb2_grpc.RouteGuideServicer):\n```\n\n----------------------------------------\n\nTITLE: Building gRPC C++ Route Guide Example\nDESCRIPTION: Shell commands for building and running the Route Guide example server and client applications.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nmake\n```\n\nLANGUAGE: sh\nCODE:\n```\n./route_guide_server --db_path=path/to/route_guide_db.json\n```\n\nLANGUAGE: sh\nCODE:\n```\n./route_guide_client --db_path=path/to/route_guide_db.json\n```\n\n----------------------------------------\n\nTITLE: Server-Streaming Method Client Interface in Go gRPC\nDESCRIPTION: Signature for server-streaming methods on the generated client stub. Returns a ServerStreamingClient generic interface for receiving the stream of responses from the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nFoo(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (grpc.ServerStreamingClient[*ResponseMsg], error)\n```\n\n----------------------------------------\n\nTITLE: Unary RPC Method Signature\nDESCRIPTION: Service stub signature for handling unary RPC calls in Java.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/generated-code.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void unaryExample(\n    RequestType request,\n    StreamObserver<ResponseType> responseObserver)\n```\n\n----------------------------------------\n\nTITLE: Performing Client Authorization Checks with ALTS in Go\nDESCRIPTION: Verifies client identity by checking if the client's service account matches an authorized list. This snippet demonstrates how to authorize clients based on their service account name.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/alts.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\nerr := alts.ClientAuthorizationCheck(ctx, []string{\"foo@iam.gserviceaccount.com\"})\n```\n\n----------------------------------------\n\nTITLE: Building Asynchronous gRPC C++ Server\nDESCRIPTION: Constructs a gRPC server that exports an asynchronous service. Creates a CompletionQueue for handling asynchronous operations and starts the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/async.md#2025-04-08_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nhelloworld::Greeter::AsyncService service;\nServerBuilder builder;\nbuilder.AddListeningPort(\"0.0.0.0:50051\", InsecureServerCredentials());\nbuilder.RegisterService(&service);\nauto cq = builder.AddCompletionQueue();\nauto server = builder.BuildAndStart();\n```\n\n----------------------------------------\n\nTITLE: Running the gRPC Helloworld Server\nDESCRIPTION: Command to run the compiled gRPC Helloworld server application from the build directory.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/quickstart.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n./greeter_server\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional Streaming RPC Method in Protocol Buffers\nDESCRIPTION: Definition of RouteChat, a bidirectional streaming RPC method where both client and server can send messages independently using streams.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of RouteNotes sent while a route is being traversed,\n// while receiving other RouteNotes (e.g. from other users).\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: Service definition for RouteGuide in a .proto file, which establishes the foundation for the gRPC service interface.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nservice RouteGuide {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Go Interfaces for gRPC Service\nDESCRIPTION: Auto-generated Go code from the protobuf definitions, providing client and server interfaces for the YYAPI service. Includes client creation and server registration functions.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/yikyak.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Client API for YYAPI service\ntype YYAPIClient interface {\n  APIGetMessages(ctx context.Context, in *APIRequest, opts ...grpc.CallOption) (*APIFeedResponse, error)\n}\n\n// NewYYAPIClient returns an implementation of the YYAPIClient interface  which\n// clients can use to call the gRPC service.\nfunc NewYYAPIClient(cc *grpc.ClientConn) YYAPIClient {\n  // Code omitted for clarity..\n}\n\n// Server API for YYAPI service\ntype YYAPIServer interface {\n  APIGetMessages(context.Context, *APIRequest) (*APIFeedResponse, error)\n}\n\n// RegisterYYAPIServer registers an implementation of the YYAPIServer with an\n// existing gRPC server instance.\nfunc RegisterYYAPIServer(s *grpc.Server, srv YYAPIServer) {\n  // Code omitted for clarity..\n}\n```\n\n----------------------------------------\n\nTITLE: Unary Method Client Interface in Go gRPC\nDESCRIPTION: Signature for unary (simple request/response) methods on the generated client stub. Takes a context, request message, and call options, returning a response message and error.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error)\n```\n\n----------------------------------------\n\nTITLE: Defining a Bidirectional Streaming RPC Method in Protocol Buffers\nDESCRIPTION: Definition of a bidirectional streaming RPC method that sends and receives streams of messages, used for route chat functionality where notes can be exchanged between users.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// Accepts a stream of RouteNotes sent while a route is being traversed,\n// while receiving other RouteNotes (e.g. from other users).\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\n----------------------------------------\n\nTITLE: Defining RouteGuide Service Class in C++\nDESCRIPTION: Basic class definition for RouteGuideImpl that implements the generated RouteGuide::Service interface.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nclass RouteGuideImpl final : public RouteGuide::Service {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Authorization with ALTS in Go\nDESCRIPTION: Sets up ALTS client credentials with server service account verification. This snippet configures the client to verify the server's identity by checking its service account against an expected value.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/alts.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\nclientOpts := alts.DefaultClientOptions()\nclientOpts.TargetServiceAccounts = []string{expectedServerSA}\naltsTC := alts.NewClientCreds(clientOpts)\nconn, err := grpc.NewClient(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n----------------------------------------\n\nTITLE: Logging Feature Information from gRPC Response\nDESCRIPTION: Displays information about a geographic feature received from the gRPC service, including its name and normalized coordinates.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Found feature called \"' + feature.name + '\" at ' +\n    feature.location.latitude/COORD_FACTOR + ', ' +\n    feature.location.longitude/COORD_FACTOR);\n```\n\n----------------------------------------\n\nTITLE: Creating a gRPC Server in Node.js\nDESCRIPTION: Initializes a new gRPC server instance that will handle RouteGuide service requests.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar Server = new grpc.Server();\n```\n\n----------------------------------------\n\nTITLE: Cloning the gRPC Repository\nDESCRIPTION: Commands to clone the gRPC repository with a specific version tag and update its submodules.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone -b {{< param grpc_vers.core >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc\ncd grpc\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Sample Output of gRPC Client-Server Interaction\nDESCRIPTION: This code block shows the expected output when running the gRPC client and server. It demonstrates the interaction between the client and server, including feature retrieval, route traversal, and message exchange.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_20\n\nLANGUAGE: nocode\nCODE:\n```\nGetting feature for point (409146138, -746188906)\nname:\"Berkshire Valley Management Area Trail, Jefferson, NJ, USA\" location:<latitude:409146138 longitude:-746188906 >\nGetting feature for point (0, 0)\nlocation:<>\nLooking for features within lo:<latitude:400000000 longitude:-750000000 > hi:<latitude:420000000 longitude:-730000000 >\nname:\"Patriots Path, Mendham, NJ 07945, USA\" location:<latitude:407838351 longitude:-746143763 >\n...\nname:\"3 Hasta Way, Newton, NJ 07860, USA\" location:<latitude:410248224 longitude:-747127767 >\nTraversing 56 points.\nRoute summary: point_count:56 distance:497013163\nGot message First message at point(0, 1)\nGot message Second message at point(0, 2)\nGot message Third message at point(0, 3)\nGot message First message at point(0, 1)\nGot message Fourth message at point(0, 1)\nGot message Second message at point(0, 2)\nGot message Fifth message at point(0, 2)\nGot message Third message at point(0, 3)\nGot message Sixth message at point(0, 3)\n```\n\n----------------------------------------\n\nTITLE: Client-Streaming Method Client Interface in Go gRPC\nDESCRIPTION: Signature for client-streaming methods on the generated client stub. Returns a ClientStreamingClient generic interface for sending a stream of requests to the server and receiving a single response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code.md#2025-04-08_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nFoo(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[*RequestMsg, *ResponseMsg], error)\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: This protobuf snippet defines a simple gRPC service with a unary call method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/oauth2.md#2025-04-08_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\noption objc_class_prefix = \"AUTH\";\n\nservice TestService {\n  rpc UnaryCall(Request) returns (Response);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Bidirectional Streaming RPC Method\nDESCRIPTION: Protocol buffer definition of a bidirectional streaming RPC method that exchanges route notes.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\n// Accepts a stream of RouteNotes sent while a route is being traversed,\n// while receiving other RouteNotes (e.g. from other users).\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\n----------------------------------------\n\nTITLE: Running the gRPC Route Guide Example\nDESCRIPTION: Shell commands to start the server and client applications in separate terminals.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\npython route_guide_server.py\n\npython route_guide_client.py\n```\n\n----------------------------------------\n\nTITLE: Adding a New Method to the gRPC Service Definition\nDESCRIPTION: Updated Protocol Buffer definition that adds a new SayHelloAgain RPC method to the Greeter service, reusing the same request and response message types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Messages in Bidirectional Streaming RPC with RouteChat in PHP gRPC\nDESCRIPTION: This snippet demonstrates how to read messages from the server in a bidirectional streaming RPC. It shows a loop that continuously reads RouteNote replies from the server until the stream ends.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nwhile ($route_note_reply = $call->read()) {\n  // process $route_note_reply\n}\n```\n\n----------------------------------------\n\nTITLE: Implement RouteGuide Server in Ruby\nDESCRIPTION: Ruby implementation of the RouteGuide service including different RPC methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass ServerImpl < RouteGuide::Service\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_feature(point, _call)\n  name = @feature_db[{\n    'longitude' => point.longitude,\n    'latitude' => point.latitude }] || ''\n  Feature.new(location: point, name: name)\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef list_features(rectangle, _call)\n  RectangleEnum.new(@feature_db, rectangle).each\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef route_chat(notes)\n  RouteChatEnumerator.new(notes, @received_notes).each_item\nend\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Client in Go\nDESCRIPTION: This command runs the gRPC client implementation in Go. It should be executed from the 'examples/route_guide' directory in a separate terminal.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ngo run client/client.go\n```\n\n----------------------------------------\n\nTITLE: Client Implementation\nDESCRIPTION: C++ client implementation with methods to call the Greeter service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nclass GreeterClient {\n public:\n  std::string SayHelloAgain(const std::string& user) {\n    HelloRequest request;\n    request.set_name(user);\n    HelloReply reply;\n    ClientContext context;\n\n    Status status = stub_->SayHelloAgain(&context, request, &reply);\n    if (status.ok()) {\n      return reply.message();\n    } else {\n      std::cout << status.error_code() << \": \" << status.error_message()\n                << std::endl;\n      return \"RPC failed\";\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Interface for Server-Streaming Methods in Go gRPC Client\nDESCRIPTION: The generated interface for server-streaming methods on the client side. It provides a Recv method to receive streamed messages from the server and embeds grpc.ClientStream for additional functionality.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code-old.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype <ServiceName>_FooClient interface {\n\tRecv() (*MsgB, error)\n\tgrpc.ClientStream\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Field Name Inconsistency Handling in REST APIs\nDESCRIPTION: Example demonstrating how PHP server code had to handle inconsistent field naming from iOS clients, where 'recipientID' was sent with incorrect casing as 'Recipientid', requiring additional switch case handling.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/yikyak.md#2025-04-08_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Code omitted...\nswitch ($fieldName) {\n  // Code omitted...\n  case \"recipientID\":\n  // This is being added because iOS is passing the recipientID\n  // incorrectly and we still want to capture these events\n  // … expected fall through …\n\n  case \"Recipientid\":\n    $this->yakkerEvent->recipientID = $value;\n    break;\n  // Code omitted...\n}\n// Code omitted...\n```\n\n----------------------------------------\n\nTITLE: Defining a Response-Streaming RPC Method\nDESCRIPTION: Protocol buffer definition of a response-streaming RPC method that returns features within a given rectangle.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n// Obtains the Features available within the given Rectangle.  Results are\n// streamed rather than returned at once (e.g. in a response message with a\n// repeated field), as the rectangle may cover a large area and contain a\n// huge number of features.\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Client Health Check Service Config\nDESCRIPTION: JSON configuration for enabling health checking on a gRPC client channel. Specifies the service name to monitor through the healthCheckConfig property.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/health-checking.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"healthCheckConfig\": {\n    \"serviceName\": \"foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Streaming RPC Definition\nDESCRIPTION: Definition of a server-side streaming RPC method that returns a stream of features within a given rectangle.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\n// Obtains the Features available within the given Rectangle.  Results are\n// streamed rather than returned at once (e.g. in a response message with a\n// repeated field), as the rectangle may cover a large area and contain a\n// huge number of features.\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Setting Deadlines in C++ gRPC Client\nDESCRIPTION: Sets a deadline of 100 milliseconds for a gRPC client request in C++. The deadline represents the maximum time the client will wait for a response before terminating with DEADLINE_EXCEEDED.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/deadlines.md#2025-04-08_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nClientContext context;\ntime_point deadline = std::chrono::system_clock::now() +\n    std::chrono::milliseconds(100);\ncontext.set_deadline(deadline);\n```\n\n----------------------------------------\n\nTITLE: Defining Client-Streaming RPC Method in Protocol Buffer\nDESCRIPTION: Definition of a client-streaming RPC method that accepts a stream of Point objects and returns a RouteSummary. The stream keyword before the request type indicates client-side streaming.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of Points on a route being traversed, returning a\n// RouteSummary when traversal is completed.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n```\n\n----------------------------------------\n\nTITLE: Cloning the gRPC Java Repository\nDESCRIPTION: Command to clone the gRPC Java repository with a specific branch and depth to get the example code.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -b {{< param grpc_vers.java >}} --depth 1 https://github.com/grpc/grpc-java\n```\n\n----------------------------------------\n\nTITLE: Generated gRPC Python Code for a Service Definition\nDESCRIPTION: The Python code generated by the gRPC protoc plugin for the FortuneTeller service. It includes a client stub class, a servicer base class for implementation, and a registration function to connect servicers to servers.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/generated-code.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport grpc\n\nimport fortune_pb2\n\nclass FortuneTellerStub(object):\n\n  def __init__(self, channel):\n    \"\"\"Constructor.\n\n    Args:\n      channel: A grpc.Channel.\n    \"\"\"\n    self.TellFortune = channel.unary_unary(\n        '/example.FortuneTeller/TellFortune',\n        request_serializer=fortune_pb2.HoroscopeRequest.SerializeToString,\n        response_deserializer=fortune_pb2.HoroscopeResponse.FromString,\n        )\n    self.SuggestFortune = channel.unary_unary(\n        '/example.FortuneTeller/SuggestFortune',\n        request_serializer=fortune_pb2.SuggestionRequest.SerializeToString,\n        response_deserializer=fortune_pb2.SuggestionResponse.FromString,\n        )\n\n\nclass FortuneTellerServicer(object):\n\n  def TellFortune(self, request, context):\n    \"\"\"Returns the horoscope and zodiac sign for the given month and day.\n    errors: invalid month or day, fortune unavailable\n    \"\"\"\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details('Method not implemented!')\n    raise NotImplementedError('Method not implemented!')\n\n  def SuggestFortune(self, request, context):\n    \"\"\"Replaces the fortune for the given zodiac sign with the provided\none.\n    errors: invalid zodiac sign\n    \"\"\"\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details('Method not implemented!')\n    raise NotImplementedError('Method not implemented!')\n\n\ndef add_FortuneTellerServicer_to_server(servicer, server):\n  rpc_method_handlers = {\n      'TellFortune': grpc.unary_unary_rpc_method_handler(\n          servicer.TellFortune,\n          request_deserializer=fortune_pb2.HoroscopeRequest.FromString,\n          response_serializer=fortune_pb2.HoroscopeResponse.SerializeToString,\n      ),\n      'SuggestFortune': grpc.unary_unary_rpc_method_handler(\n          servicer.SuggestFortune,\n          request_deserializer=fortune_pb2.SuggestionRequest.FromString,\n          response_serializer=fortune_pb2.SuggestionResponse.SerializeToString,\n      ),\n  }\n  generic_handler = grpc.method_handlers_generic_handler(\n      'example.FortuneTeller', rpc_method_handlers)\n  server.add_generic_rpc_handlers((generic_handler,))\n```\n\n----------------------------------------\n\nTITLE: Initiating Bidirectional Streaming RPC with gRPC Client in C++\nDESCRIPTION: Code snippet showing how to start a bidirectional streaming RPC and wait for its completion using the ClientBidiReactor pattern. It instantiates a Chatter object and uses the Await() method to block until the RPC completes.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\n    Chatter chatter(stub_.get());\n    Status status = chatter.Await();\n    if (!status.ok()) {\n      std::cout << \"RouteChat rpc failed.\" << std::endl;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC Service in Protocol Buffers\nDESCRIPTION: Protocol buffer definition of a gRPC service named RouteGuide with a simple RPC method GetFeature.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nservice RouteGuide {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Channel in C++\nDESCRIPTION: Creating an insecure channel for client-server communication.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\ngrpc::CreateChannel(\"localhost:50051\", grpc::InsecureChannelCredentials());\n```\n\n----------------------------------------\n\nTITLE: Navigating to gRPC Java Examples Directory\nDESCRIPTION: Command to change the current directory to the examples folder after cloning the repository.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd grpc-java/examples\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protobuf\nDESCRIPTION: This Protobuf code defines the Greeter service with SayHello and SayHelloAgain methods, along with the request and response message types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/kotlin/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional Streaming RPC Method in Protocol Buffer\nDESCRIPTION: Definition of a bidirectional streaming RPC method that exchanges streams of RouteNote objects in both directions. The stream keyword appears before both request and response types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of RouteNotes sent while a route is being traversed,\n// while receiving other RouteNotes (e.g. from other users).\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Insecure Connection in PHP gRPC\nDESCRIPTION: Creates an insecure gRPC client in PHP without encryption or authentication. This approach should only be used for development environments.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$client = new helloworld\\GreeterClient('localhost:50051', [\n    'credentials' => Grpc\\ChannelCredentials::createInsecure(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for the Greeter service with a single SayHello method, including request and response message types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Request-Streaming RPC Method\nDESCRIPTION: Protocol buffer definition of a request-streaming RPC method that accepts a stream of points and returns a route summary.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\n// Accepts a stream of Points on a route being traversed, returning a\n// RouteSummary when traversal is completed.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n```\n\n----------------------------------------\n\nTITLE: Original Android Client Implementation\nDESCRIPTION: Initial implementation of the gRPC client call in the Android activity.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nHelloReply reply = stub.sayHello(request);\nreturn reply.getMessage();\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running the C++ Server\nDESCRIPTION: Commands to compile and run the C++ gRPC server for testing the Objective-C client application.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npushd ../../cpp/route_guide\nmake\n./route_guide_server &\npopd\n```\n\n----------------------------------------\n\nTITLE: State Diagram of Wait-for-Ready Channel States\nDESCRIPTION: Shows the state transitions and behavior of the gRPC channel with Wait-for-Ready functionality, including handling of different failure states and transitions.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/wait-for-ready.md#2025-04-08_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n   state \"Initiating Communication\" as IC\n   state \"Channel State\" as CS\n   IC-->CS: Check Channel State\n   state CS {\n      state \"Permanent Failure\" as PF\n      state \"TRANSIENT_FAILURE\" as TF\n      IDLE --> CONNECTING\n      CONNECTING --> READY\n      READY-->[*]\n      CONNECTING-->TF\n      CONNECTING-->PF\n      TF-->READY\n      TF -->[*]: without\\n wait-for-ready\n      TF-->PF\n      PF-->[*]\n   }\n  state \"MSG sent\" as MS\n  state \"RPC Failed\" as RF\n  CS-->WAIT:From IDLE /\\nCONNECTING\n  CS-->WAIT:From Transient\\nFailure with\\nWait-for-Ready\n  WAIT-->CS:State Change \n  CS-->MS: From READY\n  CS-->RF: From Permanent failure or\\nTransient Failure without\\nWait-for-Ready\n  MS-->[*]\n  RF-->[*]\n```\n\n----------------------------------------\n\nTITLE: Setting up a Python virtual environment\nDESCRIPTION: Commands to create and activate a virtual environment, then upgrade pip within it.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install virtualenv\nvirtualenv venv\nsource venv/bin/activate\npython -m pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service Package in Protobuf\nDESCRIPTION: Example of package and Java package declaration in a protobuf file for gRPC service definition.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/generated-code.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\npackage grpcexample;\n\noption java_package = \"io.grpc.examples\";\n```\n\n----------------------------------------\n\nTITLE: Defining Server-side Streaming RPC Method in Protocol Buffers\nDESCRIPTION: Definition of ListFeatures, a server-side streaming RPC method that returns features within a given rectangle. The server streams results back to the client.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\n// Obtains the Features available within the given Rectangle.  Results are\n// streamed rather than returned at once (e.g. in a response message with a\n// repeated field), as the rectangle may cover a large area and contain a\n// huge number of features.\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cancellation Propagation in gRPC Services with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram showing how cancellation propagates from a client to multiple servers. When a client cancels an RPC call, the cancellation signal propagates from Server 1 to Server 2 in a chain.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/cancellation.md#2025-04-08_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  Client ->> Server 1: Cancel\n  Server 1 ->> Server 2: Cancel\n```\n\n----------------------------------------\n\nTITLE: Interface for Bidirectional Streaming Methods in Go gRPC\nDESCRIPTION: The generated interface for bidirectional streaming methods on the server side. It provides Send and Recv methods to transmit and receive messages in both directions, and embeds grpc.ServerStream for additional functionality.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code-old.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype <ServiceName>_FooServer interface {\n\tSend(*MsgA) error\n\tRecv() (*MsgB, error)\n\tgrpc.ServerStream\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a gRPC Server in Java\nDESCRIPTION: Code to initialize and start a gRPC server for the RouteGuide service. It demonstrates creating a server using ServerBuilder, registering the service implementation, and starting the server to listen for requests.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic RouteGuideServer(int port, URL featureFile) throws IOException {\n  this(ServerBuilder.forPort(port), port, RouteGuideUtil.parseFeatures(featureFile));\n}\n\n/** Create a RouteGuide server using serverBuilder as a base and features as data. */\npublic RouteGuideServer(ServerBuilder<?> serverBuilder, int port, Collection<Feature> features) {\n  this.port = port;\n  server = serverBuilder.addService(new RouteGuideService(features))\n      .build();\n}\n...\npublic void start() throws IOException {\n  server.start();\n  logger.info(\"Server started, listening on \" + port);\n ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Unary Reactor for Server Handler\nDESCRIPTION: Advanced implementation of the GetFeature RPC handler using a custom reactor that handles cancellation and completion events with logging.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\ngrpc::ServerUnaryReactor* GetFeature(grpc::CallbackServerContext* context,\n                                   const Point* point,\n                                   Feature* feature) override {\n    class Reactor : public grpc::ServerUnaryReactor {\n     public:\n      Reactor(const Point& point, const std::vector<Feature>& feature_list,\n              Feature* feature) {\n        feature->set_name(GetFeatureName(point, feature_list));\n        *feature->mutable_location() = point;\n        Finish(grpc::Status::OK);\n      }\n\n     private:\n      void OnDone() override {\n        LOG(INFO) << \"RPC Completed\";\n        delete this;\n      }\n\n      void OnCancel() override { LOG(ERROR) << \"RPC Cancelled\"; }\n    };\n    return new Reactor(*point, feature_list_, feature);\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: This snippet defines an EchoService using protocol buffers. It includes message types for request and response, and a service definition with an Echo method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage EchoRequest {\n  string message = 1;\n}\n\nmessage EchoResponse {\n  string message = 1;\n}\n\nservice EchoService {\n  rpc Echo(EchoRequest) returns (EchoResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing gRPC Cancellation Workflow with Mermaid Flowchart\nDESCRIPTION: A flowchart that illustrates how a server handles cancellation. It shows the server periodically checking if an RPC is cancelled, continuing work if not cancelled, and cleaning up and exiting when cancellation is detected. The diagram also shows propagation to upstream servers.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/cancellation.md#2025-04-08_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  subgraph Client\n  end\n  subgraph Server1\n    direction TB\n    cancelled{cancelled?} -->|false| perform(\"perform some work\")\n    perform --> cancelled\n    cancelled -->|true| cleanup(\"cancel upstream RPCs\")\n    cleanup --> exit(\"exit RPC handler\")\n  end\n  subgraph Server2\n  end\n\n  Client -->|CANCEL| Server1\n  Server1 -->|CANCEL| Server2\n```\n\n----------------------------------------\n\nTITLE: Writing gRPC-Web Client in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the generated gRPC-Web client stub to make an RPC call to the EchoService. It imports the necessary modules and creates a client instance.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {EchoRequest, EchoResponse} = require('./echo_pb.js');\nconst {EchoServiceClient} = require('./echo_grpc_web_pb.js');\n\nvar echoService = new EchoServiceClient('http://localhost:8080');\n\nvar request = new EchoRequest();\nrequest.setMessage('Hello World!');\n\nechoService.echo(request, {}, function(err, response) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Simple RPC Method in Protocol Buffers\nDESCRIPTION: Definition of a simple RPC method GetFeature that obtains a feature at a given position. It accepts a Point and returns a Feature.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\n// Obtains the feature at a given position.\nrpc GetFeature(Point) returns (Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Specifying Java Package in Proto File\nDESCRIPTION: Definition of the Java package option in the protocol buffer file. This option specifies the package name for the generated Java classes.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\noption java_package = \"io.grpc.examples\";\n```\n\n----------------------------------------\n\nTITLE: Implementing the SayHelloAgain Method in the Server\nDESCRIPTION: Go code implementing the new SayHelloAgain RPC method in the server. This function processes the request and returns a customized greeting that includes the provided name.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *server) SayHelloAgain(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n        return &pb.HelloReply{Message: \"Hello again \" + in.GetName()}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: Example of defining a gRPC service with various RPC methods using Protocol Buffers syntax.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nservice RouteGuide {\n   // Obtains the feature at a given position.\n   rpc GetFeature(Point) returns (Feature) {}\n\n   // Server-to-client streaming RPC\n   rpc ListFeatures(Rectangle) returns (stream Feature) {}\n\n   // Client-to-server streaming RPC\n   rpc RecordRoute(stream Point) returns (RouteSummary) {}\n\n   // Bidirectional streaming RPC\n   rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Protocol Buffer Generation\nDESCRIPTION: Bazel build configuration for generating Go protobuf and gRPC code using go_proto_library rule.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nload(\"@org_pubref_rules_protobuf//go:rules.bzl\", \"go_proto_library\")\n\ngo_proto_library(\n    name = \"go_default_library\",\n    protos = [\n        \"greetertimer.proto\",\n    ],\n    with_grpc = True,\n)\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC Server in C++\nDESCRIPTION: Server initialization and startup code that configures and launches the gRPC server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nvoid RunServer(const std::string& db_path) {\n  std::string server_address(\"0.0.0.0:50051\");\n  RouteGuideImpl service(db_path);\n\n  ServerBuilder builder;\n  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());\n  builder.RegisterService(&service);\n  std::unique_ptr<Server> server(builder.BuildAndStart());\n  std::cout << \"Server listening on \" << server_address << std::endl;\n  server->Wait();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC for Node.js\nDESCRIPTION: Command to install the gRPC runtime for Node.js using npm package manager. This works on Linux, Mac, and Windows platforms.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/installation.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install grpc\n```\n\n----------------------------------------\n\nTITLE: Multi-language Protocol Buffer Compilation\nDESCRIPTION: Example of using rules_protobuf to compile protocol buffers for multiple programming languages simultaneously.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nproto_compile(\n   name = \"pluriproto\",\n   protos = [\":protos\"],\n   langs = [\n       \"//cpp\",\n       \"//csharp\",\n       \"//closure\",\n       \"//ruby\",\n       \"//java\",\n       \"//java:nano\",\n       \"//python\",\n       \"//objc\",\n       \"//node\",\n   ],\n   verbose = 1,\n   with_grpc = True,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Bazel targets in Google Protobuf repository\nDESCRIPTION: Uses bazel query command to list targets in the external Google Protobuf repository, showing their types and labels.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n~/rules_protobuf$ bazel query @com_github_google_protobuf//... --output label_kind | sort | column -t\n\ncc_binary       rule  @com_github_google_protobuf//:protoc\ncc_library      rule  @com_github_google_protobuf//:protobuf\ncc_library      rule  @com_github_google_protobuf//:protobuf_lite\ncc_library      rule  @com_github_google_protobuf//:protoc_lib\ncc_library      rule  @com_github_google_protobuf//util/python:python_headers\nfilegroup       rule  @com_github_google_protobuf//:well_known_protos\njava_library    rule  @com_github_google_protobuf//:protobuf_java\nobjc_library    rule  @com_github_google_protobuf//:protobuf_objc\npy_library      rule  @com_github_google_protobuf//:protobuf_python\n...\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: Example of defining a gRPC service named RouteGuide using Protocol Buffers syntax. It includes various RPC method types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nservice RouteGuide {\n   // (Method definitions not shown)\n}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\n// Obtains the feature at a given position.\nrpc GetFeature(Point) returns (Feature) {}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\n// Obtains the Features available within the given Rectangle.  Results are\n// streamed rather than returned at once (e.g. in a response message with a\n// repeated field), as the rectangle may cover a large area and contain a\n// huge number of features.\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\n// Accepts a stream of Points on a route being traversed, returning a\n// RouteSummary when traversal is completed.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\n// Accepts a stream of RouteNotes sent while a route is being traversed,\n// while receiving other RouteNotes (e.g. from other users).\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\n----------------------------------------\n\nTITLE: Changing to Repository Directory\nDESCRIPTION: Command to navigate to the root directory of the gRPC-Web repository.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd grpc-web\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming RPC Client in Go\nDESCRIPTION: This code snippet demonstrates how to implement the client-side of a bidirectional streaming RPC named RouteChat. It shows how to send and receive messages concurrently using goroutines and channels.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nstream, err := client.RouteChat(context.Background())\nwaitc := make(chan struct{})\ngo func() {\n  for {\n    in, err := stream.Recv()\n    if err == io.EOF {\n      // read done.\n      close(waitc)\n      return\n    }\n    if err != nil {\n      log.Fatalf(\"Failed to receive a note : %v\", err)\n    }\n    log.Printf(\"Got message %s at point(%d, %d)\", in.Message, in.Location.Latitude, in.Location.Longitude)\n  }\n}()\nfor _, note := range notes {\n  if err := stream.Send(note); err != nil {\n    log.Fatalf(\"Failed to send a note: %v\", err)\n  }\n}\nstream.CloseSend()\n<-waitc\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple RPC Server Method\nDESCRIPTION: Go implementation of the GetFeature method handling simple RPC requests.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *routeGuideServer) GetFeature(ctx context.Context, point *pb.Point) (*pb.Feature, error) {\n  for _, feature := range s.savedFeatures {\n    if proto.Equal(feature.Location, point) {\n      return feature, nil\n    }\n  }\n  // No feature was found, return an unnamed feature\n  return &pb.Feature{Location: point}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Server-side Streaming RPC Method in Protocol Buffers\nDESCRIPTION: Definition of a server-side streaming RPC method that sends a single request and receives a stream of responses, used to list features within a geographic rectangle.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// Obtains the Features available within the given Rectangle.  Results are\n// streamed rather than returned at once (e.g. in a response message with a\n// repeated field), as the rectangle may cover a large area and contain a\n// huge number of features.\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Generating CommonJS Client Code from Protocol Buffer Definition\nDESCRIPTION: Shell command to generate JavaScript client code from the protocol buffer definition using the protoc compiler with CommonJS import style.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-web-ga.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nprotoc echo.proto \\\n  --js_out=import_style=commonjs:./output \\\n  --grpc-web_out=import_style=commonjs:./output\n```\n\n----------------------------------------\n\nTITLE: Running the Updated gRPC Server\nDESCRIPTION: Command to run the updated gRPC server with the new SayHelloAgain method implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngo run greeter_server/main.go\n```\n\n----------------------------------------\n\nTITLE: Using GrpcCleanupRule within Individual Test Methods\nDESCRIPTION: This snippet shows how to use the GrpcCleanupRule to manage gRPC resources within individual test methods. It demonstrates registering servers and channels with custom configurations for each test.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/graceful-cleanup-junit-tests.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class MyTest {\n  @Rule\n  public GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();\n  ...\n  private String serverName = InProcessServerBuilder.generateName();\n  private InProcessServerBuilder serverBuilder = InProcessServerBuilder\n      .forName(serverName).directExecutor();\n  private InProcessChannelBuilder channelBuilder = InProcessChannelBuilder\n      .forName(serverName).directExecutor();\n  ...\n\n  @Test\n  public void testFooBar() {\n    ...\n    grpcCleanup.register(\n    \tserverBuilder.addService(myServiceImpl).build().start());\n    ManagedChannel channel = grpcCleanup.register(\n    \tchannelBuilder.maxInboundMessageSize(1024).build());\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Streaming RPC Method in Protocol Buffer\nDESCRIPTION: Definition of a server-streaming RPC method that accepts a Rectangle and returns a stream of Feature objects. The stream keyword before the return type indicates server-side streaming.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\n// Obtains the Features available within the given Rectangle.  Results are\n// streamed rather than returned at once (e.g. in a response message with a\n// repeated field), as the rectangle may cover a large area and contain a\n// huge number of features.\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Running the Updated gRPC Client with Command-line Arguments\nDESCRIPTION: Command to run the updated gRPC client with a command-line argument for the name. This demonstrates passing parameters to the gRPC service calls.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ngo run greeter_client/main.go --name=Alice\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Server in Go\nDESCRIPTION: This command runs the gRPC server implementation in Go. It should be executed from the 'examples/route_guide' directory.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ngo run server/server.go\n```\n\n----------------------------------------\n\nTITLE: Configuring App-level Gradle for Kotlin Android gRPC Project\nDESCRIPTION: App module Gradle configuration for Android project using Kotlin and gRPC. Includes plugin application, dependencies, and Android-specific settings.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/kotlin-gradle-projects.md#2025-04-08_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\napply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'com.google.protobuf'\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n  // refer to full example for remaining deps\n}\n\nprotobuf {\n  // The normal gRPC configuration for Android goes here\n}\n\nandroid {\n  // Android Studio 3.1 does not automatically pick up 'src/main/kotlin' as source files\n  sourceSets {\n    main.java.srcDirs += 'src/main/kotlin'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Java Package in Protocol Buffer\nDESCRIPTION: Setting the Java package name in a .proto file using the java_package option. This specifies the package name for the generated Java classes.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\noption java_package = \"io.grpc.examples.routeguide\";\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple RPC Method in Protocol Buffers\nDESCRIPTION: Definition of a simple RPC method that sends a single request and receives a single response, used to get a feature at a specific position.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// Obtains the feature at a given position.\nrpc GetFeature(Point) returns (Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC repository and navigating to Python example\nDESCRIPTION: Git commands to clone the gRPC repository and navigate to the Python 'hello world' example directory.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Clone the repository to get the example code:\ngit clone -b {{< param grpc_vers.core >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc\n# Navigate to the \"hello, world\" Python example:\ncd grpc/examples/python/helloworld\n```\n\n----------------------------------------\n\nTITLE: Visualizing gRPC Retry Flow with Mermaid Diagram\nDESCRIPTION: Sequence diagram showing the interaction between Application, gRPC Client, and Server during retry attempts, including initial configuration, message saving, and retry execution.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/retry.md#2025-04-08_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  Application ->> gRPC Client: Configure retry policy. <br> Send request to dns:///my-service\n  gRPC Client ->> gRPC Client: Save message\n  gRPC Client ->> Server: Create initial attempt\n  Server -->> gRPC Client : RPC closed with error \n  gRPC Client ->> Server: Create retry attempt 1 \n  Server -->> gRPC Client: Successful \n  gRPC Client ->> Application: No more retry. Proceed.\n```\n\n----------------------------------------\n\nTITLE: State Diagram of gRPC Server Shutdown States\nDESCRIPTION: Shows the different states a gRPC server transitions through during the shutdown process, from serving to graceful shutdown to termination.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/server-graceful-stop.md#2025-04-08_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> SERVING : Server Started\n    SERVING --> GRACEFUL_SHUTDOWN : Graceful Shutdown Called (with Timeout)\n    GRACEFUL_SHUTDOWN --> TERMINATED : In-Flight RPCs Completed (Before Timeout)\n    GRACEFUL_SHUTDOWN --> TIMER_EXPIRED : Timeout Reached\n    TIMER_EXPIRED --> TERMINATED : Forceful Shutdown Called\n```\n\n----------------------------------------\n\nTITLE: Initial gRPC Service Definition\nDESCRIPTION: Protocol buffer definition for the basic Greeter service with SayHello method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Cocoapods\nDESCRIPTION: Command to install dependencies and generate the client library using Cocoapods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Start gRPC Server in Ruby\nDESCRIPTION: Ruby code to initialize and start the gRPC server on a specified port.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nport = '0.0.0.0:50051'\ns = GRPC::RpcServer.new\ns.add_http2_port(port, :this_port_is_insecure)\nGRPC.logger.info(\"... running insecurely on #{port}\")\ns.handle(ServerImpl.new(feature_db))\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Authentication with SSL/TLS in Node.js gRPC\nDESCRIPTION: Establishes a secure gRPC connection in Node.js using SSL/TLS for server authentication. This requires loading root certificates from the file system.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst root_cert = fs.readFileSync('path/to/root-cert');\nconst ssl_creds = grpc.credentials.createSsl(root_cert);\nconst stub = new helloworld.Greeter('myservice.example.com', ssl_creds);\n```\n\n----------------------------------------\n\nTITLE: Basic Shell Commands for Building gRPC Route Guide Example\nDESCRIPTION: Commands to navigate to the route guide example directory and set up the build environment using CMake.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd examples/cpp/route_guide\n```\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p cmake/build\ncd cmake/build\ncmake -DCMAKE_PREFIX_PATH=$MY_INSTALL_DIR ../..\n```\n\n----------------------------------------\n\nTITLE: Defining EchoService in Protocol Buffers\nDESCRIPTION: Defines the EchoService gRPC service in a .proto file, which takes an EchoMessage and returns it.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/coreos.md#2025-04-08_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nservice EchoService {\n  rpc Echo(EchoMessage) returns (EchoMessage) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking CocoaPods Version\nDESCRIPTION: Command to verify CocoaPods installation and version.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npod --version\n```\n\n----------------------------------------\n\nTITLE: Cloning the gRPC Dart Repository with Git\nDESCRIPTION: Command to clone the gRPC Dart repository from GitHub to get the example code for the tutorial.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --depth 1 https://github.com/grpc/grpc-dart\n```\n\n----------------------------------------\n\nTITLE: Defining EchoMessage in Protocol Buffers\nDESCRIPTION: Defines the EchoMessage structure in a .proto file, which includes a single field called value.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/coreos.md#2025-04-08_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage EchoMessage {\n string value = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Protocol Compiler Plugin\nDESCRIPTION: Command to install the protocol compiler plugin for Dart using pub package manager.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart pub global activate protoc_plugin\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC Server in Python\nDESCRIPTION: Server initialization code that creates a gRPC server instance, registers the RouteGuide service, and starts listening on port 50051.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef serve():\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    route_guide_pb2_grpc.add_RouteGuideServicer_to_server(RouteGuideServicer(), server)\n    server.add_insecure_port(\"[::]:50051\")\n    server.start()\n    server.wait_for_termination()\n```\n\n----------------------------------------\n\nTITLE: Updating Android Client to Use New gRPC Method\nDESCRIPTION: This Kotlin code snippet shows how to update the Android client to call both the SayHello and SayHelloAgain methods of the gRPC service and combine their responses.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/kotlin/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = greeter.sayHello(request)\nval againResponse = greeter.sayHelloAgain(request)\nval message = \"${response.message}\\n${againResponse.message}\"\nresponseText.text = message\n```\n\n----------------------------------------\n\nTITLE: Inserting Dynamic Content for Supported Language and OS Versions\nDESCRIPTION: This code snippet inserts a shortcode that dynamically generates a list of officially supported gRPC language, platform, and OS versions. The content is likely defined elsewhere in the documentation system.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n{{< supported-lang-and-os >}}\n```\n\n----------------------------------------\n\nTITLE: Defining Client-side Streaming RPC Method in Protocol Buffers\nDESCRIPTION: Definition of RecordRoute, a client-side streaming RPC method that accepts a stream of Points and returns a RouteSummary when traversal is completed.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of Points on a route being traversed, returning a\n// RouteSummary when traversal is completed.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n```\n\n----------------------------------------\n\nTITLE: Updating PATH for Protocol Compiler\nDESCRIPTION: Command to update PATH environment variable to include the protocol compiler plugin location.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport PATH=\"$PATH:$HOME/.pub-cache/bin\"\n```\n\n----------------------------------------\n\nTITLE: Cancelling Client-Side Operations in gRPC C++\nDESCRIPTION: Demonstrates how to cancel operations on the client side using the ClientContext::TryCancel() method. This is useful for terminating ongoing gRPC calls.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/best_practices.md#2025-04-08_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nClientContext::TryCancel()\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Dependencies\nDESCRIPTION: Docker command to fetch required container images including prerequisites, Node.js server, Envoy proxy, and CommonJS client.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose pull prereqs node-server envoy commonjs-client\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service Interface with Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for a message service API that handles user requests and responses. Includes message definitions and service endpoint configuration with HTTP option for REST compatibility.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/yikyak.md#2025-04-08_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\n// APIRequest Message — sent by clients\nmessage APIRequest {\n  // userID is the ID of the user making the request\n  string userID = 1;\n  // Other fields omitted for clarity…\n}\n\n// APIFeedResponse contains the set of messages that clients should\n// display.\nmessage APIFeedResponse {\n  repeated APIPost messages = 1;\n  // Other fields omitted for clarity…\n}\n\n// APIPost defines the set of post fields returned to the clients.\nmessage APIPost {\n  string messageID = 1;\n  string message = 2;\n  // Other fields omitted for clarity…\n}\n\n// YYAPI service accessed by Android, iOS and Web clients.\nservice YYAPI {\n  // Other endpoints omitted…\n\n  // APIGetMessages returns the list of messages within a radius of\n  // the user's current location.\n  rpc APIGetMessages (APIRequest) returns (APIFeedResponse) {\n    option (google.api.http) = {\n      get: \"/api/getMessages\" // Option tells grpc-gateway that an HTTP\n                              // GET to /api/getMessages should be\n                              // routed to the APIGetMessages gRPC\n                              // endpoint.\n    };\n  }\n\n  // Other endpoints omitted…\n}\n```\n\n----------------------------------------\n\nTITLE: Retry-Based Lock-Free Update Method in Java gRPC Service\nDESCRIPTION: Improved update method using ConcurrentHashMap's atomic operations with a retry loop. This handles the case where the key's value might change between the get and replace operations, allowing for concurrent access to different keys.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-2.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void update(\n    UpdateRequest request, StreamObserver<UpdateResponse> responseObserver) {\n  // ...\n  ByteBuffer oldValue;\n  do {\n    oldValue = store.get(key);\n    if (oldValue == null) {\n      responseObserver.onError(Status.NOT_FOUND.asRuntimeException());\n      return;\n    }\n  } while (!store.replace(key, oldValue, newValue));\n  responseObserver.onNext(UpdateResponse.getDefaultInstance());\n  responseObserver.onCompleted();\n}\n```\n\n----------------------------------------\n\nTITLE: Running the gRPC Client\nDESCRIPTION: Command to run the compiled gRPC client application, which connects to the server and displays the greeting response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./build/install/examples/bin/hello-world-client\nINFO: Will try to greet world ...\nINFO: Greeting: Hello world\n```\n\n----------------------------------------\n\nTITLE: Setting up ALTS Client Credentials in gRPC C++\nDESCRIPTION: Demonstrates how to create and configure ALTS credentials for a gRPC client. Includes channel creation with ALTS authentication.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/alts.md#2025-04-08_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <grpcpp/grpcpp.h>\n#include <grpcpp/security/credentials.h>\n\nusing grpc::experimental::AltsCredentials;\nusing grpc::experimental::AltsCredentialsOptions;\n\nauto creds = AltsCredentials(AltsCredentialsOptions());\nstd::shared_ptr<grpc::Channel> channel = CreateChannel(server_address, creds);\n```\n\n----------------------------------------\n\nTITLE: Calling Simple RPC in Go gRPC Client\nDESCRIPTION: Implementation of a simple unary RPC call to GetFeature. The client sends a single Point request and receives a single Feature response synchronously.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfeature, err := client.GetFeature(context.Background(), &pb.Point{409146138, -746188906})\nif err != nil {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service Protocol Buffer for TODO Application\nDESCRIPTION: Protocol Buffer definition for a TODO service that includes message types for Todo items and requests, along with service definition for getting TODOs by ID.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-web-ga.md#2025-04-08_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\npackage todos;\n\nmessage Todo {\n  string content = 1;\n  bool finished = 2;\n}\n\nmessage GetTodoRequest {\n  int32 id = 1;\n}\n\nservice TodoService {\n  rpc GetTodoById (GetTodoRequest) returns (Todo);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for gRPC\nDESCRIPTION: Adding Grpc, Grpc.Tools, and Google.Protobuf packages to the project using dotnet CLI commands.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-dotnet-build.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n~/work/MyGreeter$ dotnet add package Grpc\ninfo : PackageReference for package 'Grpc' version '1.17.0' added to file '/home/kkm/work/MyGreeter/MyGreeter.csproj'.\n~/work/MyGreeter$ dotnet add package Grpc.Tools\ninfo : PackageReference for package 'Grpc.Tools' version '1.17.0' added to file '/home/kkm/work/MyGreeter/MyGreeter.csproj'.\n~/work/MyGreeter$ dotnet add package Google.Protobuf\ninfo : PackageReference for package 'Google.Protobuf' version '3.6.1' added to file '/home/kkm/work/MyGreeter/MyGreeter.csproj'.\n```\n\n----------------------------------------\n\nTITLE: Creating a New .NET Class Library Project\nDESCRIPTION: Using the dotnet CLI to create a new class library project and checking its initial file structure.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-dotnet-build.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n~/work$ dotnet new classlib -o MyGreeter\nThe template \"Class library\" was created successfully.\n\n~/work$ cd MyGreeter\n~/work/MyGreeter$ ls -lF\ntotal 12\n-rw-rw-r-- 1 kkm kkm   86 Nov  9 16:10 Class1.cs\n-rw-rw-r-- 1 kkm kkm  145 Nov  9 16:10 MyGreeter.csproj\ndrwxrwxr-x 2 kkm kkm 4096 Nov  9 16:10 obj/\n```\n\n----------------------------------------\n\nTITLE: Defining Message Type in Protocol Buffers\nDESCRIPTION: Definition of a Point message type used in the RouteGuide service, representing geographic coordinates with latitude and longitude.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\n// Points are represented as latitude-longitude pairs in the E7 representation\n// (degrees multiplied by 10**7 and rounded to the nearest integer).\n// Latitudes should be in the range +/- 90 degrees and longitude should be in\n// the range +/- 180 degrees (inclusive).\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Running C# gRPC Server with Bazel\nDESCRIPTION: Command to run the C# Greeter server example using Bazel. This snippet demonstrates how to execute the C# gRPC server implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n~/rules_protobuf$ bazel run examples/helloworld/csharp/GreeterServer\n```\n\n----------------------------------------\n\nTITLE: Running the gRPC Helloworld Client\nDESCRIPTION: Command to run the compiled gRPC Helloworld client application from the build directory in a separate terminal.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/quickstart.md#2025-04-08_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n./greeter_client\n```\n\n----------------------------------------\n\nTITLE: Starting a gRPC Server in Dart\nDESCRIPTION: This snippet shows how to start a gRPC server for the RouteGuide service. It creates an instance of the server and starts listening for requests on a specified port.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main(List<String> args) async {\n  final server = grpc.Server.create([RouteGuideService()]);\n  await server.serve(port: 8080);\n  print('Server listening...');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project File for gRPC in .NET\nDESCRIPTION: The complete .csproj file configuration with proto file inclusion and proper package references. Note the PrivateAssets=\"All\" attribute on Grpc.Tools to prevent it from being transitively included by consumers.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-dotnet-build.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>netstandard2.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Google.Protobuf\" Version=\"3.6.1\" />\n    <PackageReference Include=\"Grpc\" Version=\"1.17.0\" />\n\n    <!-- The Grpc.Tools package generates C# sources from .proto files during\n         project build, but is not needed by projects using the built library.\n         It's IMPORTANT to add the 'PrivateAssets=\"All\"' to this reference: -->\n    <PackageReference Include=\"Grpc.Tools\" Version=\"1.17.0\" PrivateAssets=\"All\" />\n\n    <!-- Explicitly include our helloworld.proto file by adding this line: -->\n    <Protobuf Include=\"helloworld.proto\" />\n  </ItemGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Creating a gRPC Client Connection in Go\nDESCRIPTION: Code to establish a gRPC channel connection to the server. It creates a client connection with dial options and sets up deferred connection closing.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nvar opts []grpc.DialOption\n...\nconn, err := grpc.NewClient(*serverAddr, opts...)\nif err != nil {\n  ...\n}\ndefer conn.Close()\n```\n\n----------------------------------------\n\nTITLE: Manual Cleanup of gRPC Resources in JUnit Test\nDESCRIPTION: This snippet demonstrates how to manually clean up gRPC resources (server and channel) in a JUnit test's tearDown method. It shows how to shut down the resources and assert that the termination was successful.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/graceful-cleanup-junit-tests.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyTest {\n  private Server server;\n  private ManagedChannel channel;\n  ...\n  @After\n  public void tearDown() throws InterruptedException {\n    // assume channel and server are not null\n    channel.shutdownNow();\n    server.shutdownNow();\n    // fail the test if cleanup is not successful\n    assert channel.awaitTermination(5, TimeUnit.SECONDS) : \"channel failed to shutdown\";\n    assert server.awaitTermination(5, TimeUnit.SECONDS) : \"server failed to shutdown\";\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a gRPC Service in .NET Core\nDESCRIPTION: Command line instructions for creating a new gRPC service project using the .NET Core SDK templates and running it. This requires .NET Core 3.0 SDK to be installed.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-on-dotnetcore.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new grpc -o GrpcGreeter\ncd GrpcGreeter\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: gRPC Service Definition\nDESCRIPTION: Protocol Buffer service definition for the Greeter service with SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Protocol Buffer Message Type\nDESCRIPTION: Definition of a protocol buffer message type used in the service. This example defines a Point message representing a latitude-longitude pair in E7 representation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: proto\nCODE:\n```\n// Points are represented as latitude-longitude pairs in the E7 representation\n// (degrees multiplied by 10**7 and rounded to the nearest integer).\n// Latitudes should be in the range +/- 90 degrees and longitude should be in\n// the range +/- 180 degrees (inclusive).\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Protoc binary using Bazel\nDESCRIPTION: Demonstrates how to use bazel run command to execute the protoc binary from the Google Protobuf repository.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n~/rules_protobuf$ bazel run @com_github_google_protobuf//:protoc -- --help\nUsage: /private/var/tmp/_bazel_pcj/63330772b4917b139280caef8bb81867/execroot/rules_protobuf/bazel-out/local-fastbuild/bin/external/com_github_google_protobuf/protoc [OPTION] PROTO_FILES\nParse PROTO_FILES and generate output based on the options given:\n  -IPATH, --proto_path=PATH   Specify the directory in which to search for\n                              imports.  May be specified multiple times;\n                              directories will be searched in order.  If not\n                              given, the current working directory is used.\n  --version                   Show version info and exit.\n  -h, --help                  Show this text and exit.\n...\n```\n\n----------------------------------------\n\nTITLE: Expected Output from gRPC Helloworld Example\nDESCRIPTION: The expected console output when running the gRPC Helloworld client, showing the greetings exchanged between client and server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/quickstart.md#2025-04-08_snippet_10\n\nLANGUAGE: nocode\nCODE:\n```\nGreeter received: Hello world\nGreeter received: Hello again world\n```\n\n----------------------------------------\n\nTITLE: Updating gRPC client implementation in Python\nDESCRIPTION: Python code snippet showing the updated client implementation calling both SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef run():\n    with grpc.insecure_channel('localhost:50051') as channel:\n        stub = helloworld_pb2_grpc.GreeterStub(channel)\n        response = stub.SayHello(helloworld_pb2.HelloRequest(name='you'))\n        print(\"Greeter client received: \" + response.message)\n        response = stub.SayHelloAgain(helloworld_pb2.HelloRequest(name='you'))\n        print(\"Greeter client received: \" + response.message)\n```\n\n----------------------------------------\n\nTITLE: Client-Side Streaming RPC Definition\nDESCRIPTION: Definition of a client-side streaming RPC method that accepts a stream of points and returns a route summary.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of Points on a route being traversed, returning a\n// RouteSummary when traversal is completed.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n```\n\n----------------------------------------\n\nTITLE: Checking All Links (Internal and External) of gRPC Website\nDESCRIPTION: Command to verify all links (both internal and external) in the generated website using htmltest tool.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/README.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run check-links:all\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running the gRPC Gateway Example\nDESCRIPTION: Shell commands to get and run the gRPC gateway example server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/coreos.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/philips/grpc-gateway-example\ngrpc-gateway-example serve\n```\n\n----------------------------------------\n\nTITLE: Updated Dart Client Implementation\nDESCRIPTION: Client-side implementation showing how to call both gRPC methods with proper channel setup and error handling.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main(List<String> args) async {\n  final channel = ClientChannel(\n    'localhost',\n    port: 50051,\n    options: const ChannelOptions(credentials: ChannelCredentials.insecure()),\n  );\n  final stub = GreeterClient(channel);\n\n  final name = args.isNotEmpty ? args[0] : 'world';\n\n  try {\n    var response = await stub.sayHello(HelloRequest()..name = name);\n    print('Greeter client received: ${response.message}');\n    response = await stub.sayHelloAgain(HelloRequest()..name = name);\n    print('Greeter client received: ${response.message}');\n  } catch (e) {\n    print('Caught error: $e');\n  }\n  await channel.shutdown();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Protocol Buffer Message Type\nDESCRIPTION: Protocol buffer definition of the Point message type used in the RouteGuide service, representing geographic coordinates with latitude and longitude.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: proto\nCODE:\n```\n// Points are represented as latitude-longitude pairs in the E7 representation\n// (degrees multiplied by 10**7 and rounded to the nearest integer).\n// Latitudes should be in the range +/- 90 degrees and longitude should be in\n// the range +/- 180 degrees (inclusive).\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Running and Measuring gRPC Client Performance\nDESCRIPTION: Shell commands to build and run the optimized gRPC client, showing performance metrics and execution times.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-1.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew installDist\ntime ./build/install/kvstore/bin/kvstore\n```\n\n----------------------------------------\n\nTITLE: Bazel Configuration for gRPC Code Generation\nDESCRIPTION: Bazel rule configuration for generating gRPC and Protocol Buffers code using java_grpc_library.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/generated-code.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nload(\"@grpc_java//:java_grpc_library.bzl\", \"java_grpc_library\")\n\nproto_library(\n    name = \"helloworld_proto\",\n    srcs = [\"src/main/proto/helloworld.proto\"],\n)\n\njava_proto_library(\n    name = \"helloworld_java_proto\",\n    deps = [\":helloworld_proto\"],\n)\n\njava_grpc_library(\n    name = \"helloworld_java_grpc\",\n    srcs = [\":helloworld_proto\"],\n    deps = [\":helloworld_java_proto\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Operation in gRPC Java Client\nDESCRIPTION: Client-side implementation of key-value creation using gRPC blocking stub. Handles random key generation, duplicate key scenarios, and error cases.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-1.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate void doCreate(KeyValueServiceBlockingStub stub) {\n  ByteString key = createRandomKey();\n  try {\n    CreateResponse res = stub.create(\n        CreateRequest.newBuilder()\n            .setKey(key)\n            .setValue(randomBytes(MEAN_VALUE_SIZE))\n            .build());\n    if (!res.equals(CreateResponse.getDefaultInstance())) {\n      throw new RuntimeException(\"Invalid response\");\n    }\n  } catch (StatusRuntimeException e) {\n    if (e.getStatus().getCode() == Code.ALREADY_EXISTS) {\n      knownKeys.remove(key);\n      logger.log(Level.INFO, \"Key already existed\", e);\n    } else {\n      throw e;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Reference Page with YAML Front Matter\nDESCRIPTION: This YAML configuration sets up the metadata and build instructions for the API reference page in gRPC documentation. It specifies the title, link title, weight, manual link target, and build rendering options.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference\nlinkTitle: API\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google in Node.js gRPC\nDESCRIPTION: Implements Google authentication for gRPC calls in Node.js by combining SSL credentials with Google application default credentials. This approach uses the google-auth-library package.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Authenticating with Google\nvar GoogleAuth = require('google-auth-library'); // from https://www.npmjs.com/package/google-auth-library\n...\nvar ssl_creds = grpc.credentials.createSsl(root_certs);\n(new GoogleAuth()).getApplicationDefault(function(err, auth) {\n  var call_creds = grpc.credentials.createFromGoogleCredential(auth);\n  var combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);\n  var stub = new helloworld.Greeter('greeter.googleapis.com', combined_credentials);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC and REST Interfaces\nDESCRIPTION: Shell commands to test both the gRPC and REST interfaces of the EchoService.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/coreos.md#2025-04-08_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngrpc-gateway-example echo Take a REST from REST with gRPC\ncurl -X POST -k https://localhost:10000/v1/echo -d '{\"value\": \"CoreOS is hiring!\"}'\n```\n\n----------------------------------------\n\nTITLE: Developer Story Links Layout\nDESCRIPTION: HTML structure for displaying developer story buttons in a centered layout with language-specific links.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/showcase/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"l-dev-story-buttons text-center\">\n\n- [Go]({{< relref \"go#dev-stories\" >}})\n- [Java](/docs/languages/java#dev-stories)\n- [Kotlin](/docs/languages/kotlin#dev-stories)\n- [<i class=\"fas fa-ellipsis-h\"></i>]({{< relref \"languages\" >}})\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Container Layout Structure\nDESCRIPTION: Basic HTML structure for the showcase page layout using Bootstrap grid system and custom container classes.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/showcase/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container l-container--padded\">\n\n<div class=\"row\">\n{{< page/toc collapsed=true placement=\"inline\" >}}\n</div>\n\n<div class=\"row\">\n<div class=\"col-12 col-lg-8\">\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Code\nDESCRIPTION: Command to generate Ruby gRPC code from protocol buffer definition.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngrpc_tools_ruby_protoc -I ../protos --ruby_out=lib --grpc_out=lib ../protos/helloworld.proto\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Performance Test After Optimization\nDESCRIPTION: Commands to build and run the gRPC application after implementing the Base64 encoding optimization, showing a dramatic performance improvement to over 2,200 RPCs/s.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew installDist\ntime ./build/install/kvstore/bin/kvstore\n\nINFO: Did 2,202.2 RPCs/s\n```\n\n----------------------------------------\n\nTITLE: Direct Protobuf Plugin Invocation\nDESCRIPTION: Command-line syntax for directly invoking the protobuf plugin for gRPC Java code generation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/generated-code.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nprotoc --plugin=protoc-gen-grpc-java \\\n    --grpc-java_out=\"$OUTPUT_FILE\" --proto_path=\"$DIR_OF_PROTO_FILE\" \"$PROTO_FILE\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side ListFeatures Handler Interface\nDESCRIPTION: Declaration of the ListFeatures RPC handler that returns a ServerWriteReactor for streaming Features based on a Rectangle request.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n  grpc::ServerWriteReactor<Feature>* ListFeatures(\n      CallbackServerContext* context,\n      const routeguide::Rectangle* rectangle);\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Authentication with SSL/TLS in Ruby gRPC\nDESCRIPTION: Establishes a secure gRPC connection using SSL/TLS for server authentication. This requires loading certificate authority (CA) root certificates.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ncreds = GRPC::Core::ChannelCredentials.new(load_certs)  # load_certs typically loads a CA roots file\nstub = Helloworld::Greeter::Stub.new('myservice.example.com', creds)\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for gRPC API Reference Page\nDESCRIPTION: This YAML frontmatter configures the metadata for the API reference page in the gRPC documentation. It sets the title, link title, weight for ordering, and build instructions for a page that redirects to external API documentation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference\nlinkTitle: API\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Updated Android Client Implementation\nDESCRIPTION: Enhanced implementation adding the new sayHelloAgain method call.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nreturn reply.getMessage() + \"\\n\" + stub.sayHelloAgain(request).getMessage();\n```\n\n----------------------------------------\n\nTITLE: Hugo Container Layout Template\nDESCRIPTION: HTML structure defining the main content container with padded layout and table of contents sections\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/community/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container l-container--padded\">\n\n<div class=\"row\">\n{{< page/toc collapsed=true placement=\"inline\" >}}\n</div>\n\n<div class=\"row\">\n<div class=\"col-12 col-lg-8\">\n```\n\n----------------------------------------\n\nTITLE: Updated gRPC Service Definition\nDESCRIPTION: Extended Protocol Buffer definition adding SayHelloAgain method to the Greeter service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Graceful Cleanup of gRPC Resources in JUnit Test\nDESCRIPTION: This snippet shows a more graceful approach to cleaning up gRPC resources in a JUnit test. It attempts a graceful shutdown first, and if that fails, it forces a shutdown using shutdownNow().\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/graceful-cleanup-junit-tests.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MyTest {\n  private Server server;\n  private ManagedChannel channel;\n  ...\n  @After\n  public void tearDown() throws InterruptedException {\n    // assume channel and server are not null\n    channel.shutdown();\n    server.shutdown();\n    // fail the test if cannot gracefully shutdown\n    try {\n      assert channel.awaitTermination(5, TimeUnit.SECONDS) : \"channel cannot be gracefully shutdown\";\n      assert server.awaitTermination(5, TimeUnit.SECONDS) : \"server cannot be gracefully shutdown\";\n    } finally {\n      channel.shutdownNow();\n      server.shutdownNow();\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Examples Repository\nDESCRIPTION: Commands to clone the gRPC repository and navigate to Ruby examples.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Clone the repository to get the example code:\ngit clone -b {{< param grpc_vers.core >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc\n# Navigate to the \"hello, world\" Ruby example:\ncd grpc/examples/ruby\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Streaming RPC in Dart gRPC Server\nDESCRIPTION: This snippet shows the implementation of the recordRoute method, which handles client-side streaming. It receives a stream of Points from the client and returns a single RouteSummary with trip information.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<RouteSummary> recordRoute(\n    grpc.ServiceCall call, Stream<Point> request) async {\n  int pointCount = 0;\n  int featureCount = 0;\n  double distance = 0.0;\n  Point previous;\n  final timer = Stopwatch();\n\n  await for (var location in request) {\n    if (!timer.isRunning) timer.start();\n    pointCount++;\n    final feature = featuresDb.firstWhereOrNull((f) => f.location == location);\n    if (feature != null) {\n      featureCount++;\n    }\n    // For each point after the first, add the incremental distance from the\n    // previous point to the total distance value.\n    if (previous != null) distance += _distance(previous, location);\n    previous = location;\n  }\n  timer.stop();\n  return RouteSummary()\n    ..pointCount = pointCount\n    ..featureCount = featureCount\n    ..distance = distance.round()\n    ..elapsedTime = timer.elapsed.inSeconds;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating gRPC Client Implementation in Node.js\nDESCRIPTION: Node.js code to update the client implementation, calling both the SayHello and SayHelloAgain methods of the Greeter service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfunction main() {\n  var client = new hello_proto.Greeter('localhost:50051',\n                                       grpc.credentials.createInsecure());\n  client.sayHello({name: 'you'}, function(err, response) {\n    console.log('Greeting:', response.message);\n  });\n  client.sayHelloAgain({name: 'you'}, function(err, response) {\n    console.log('Greeting:', response.message);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updated C++ Server Implementation\nDESCRIPTION: C++ server implementation of the Greeter service with both SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nclass GreeterServiceImpl final : public Greeter::Service {\n  Status SayHello(ServerContext* context, const HelloRequest* request,\n                  HelloReply* reply) override {\n    std::string prefix(\"Hello \");\n    reply->set_message(prefix + request->name());\n    return Status::OK;\n  }\n  Status SayHelloAgain(ServerContext* context, const HelloRequest* request,\n                  HelloReply* reply) override {\n    std::string prefix(\"Hello again \");\n    reply->set_message(prefix + request->name());\n    return Status::OK;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Tools for Ruby\nDESCRIPTION: Command to install gRPC tools for code generation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngem install grpc-tools\n```\n\n----------------------------------------\n\nTITLE: Displaying gRPC Error Status Codes\nDESCRIPTION: This snippet shows a table of general gRPC error status codes and their corresponding cases. It includes scenarios like client cancellation, deadline expiration, and server shutdown.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/error.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Case | Status code |\n|-----|-----------|\n| Client application cancelled the request | `GRPC_STATUS_CANCELLED` |\n| Deadline expired before server returned status | `GRPC_STATUS_DEADLINE_EXCEEDED` |\n| Method not found on server | `GRPC_STATUS_UNIMPLEMENTED` |\n| Server shutting down | `GRPC_STATUS_UNAVAILABLE` |\n| Server threw an exception (or did something other than returning a status code to terminate the RPC) | `GRPC_STATUS_UNKNOWN` |\n```\n\n----------------------------------------\n\nTITLE: Updating gRPC Server Implementation in Node.js\nDESCRIPTION: Node.js code to implement the updated Greeter service on the server side, including both the SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction sayHello(call, callback) {\n  callback(null, {message: 'Hello ' + call.request.name});\n}\n\nfunction sayHelloAgain(call, callback) {\n  callback(null, {message: 'Hello again, ' + call.request.name});\n}\n\nfunction main() {\n  var server = new grpc.Server();\n  server.addService(hello_proto.Greeter.service,\n                         {sayHello: sayHello, sayHelloAgain: sayHelloAgain});\n  server.bindAsync('0.0.0.0:50051', grpc.ServerCredentials.createInsecure(), () => {\n    server.start();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Repository\nDESCRIPTION: Command to clone the gRPC repository with its submodules for the quick start example.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --recurse-submodules -b {{< param grpc_vers.core >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc\n```\n\n----------------------------------------\n\nTITLE: Updated Greeter Service Protocol Definition\nDESCRIPTION: Enhanced Protocol Buffers definition adding a new SayHelloAgain method to the Greeter service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Using C++ Generic Stub for Raw ByteBuffer\nDESCRIPTION: Implementation reference for using gRPC::GenericStub to handle raw ByteBuffer data instead of proto serialization.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/performance.md#2025-04-08_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ngRPC::GenericStub\n```\n\n----------------------------------------\n\nTITLE: Updated gRPC Server Implementation\nDESCRIPTION: Ruby server implementation with both SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass GreeterServer < Helloworld::Greeter::Service\n\n  def say_hello(hello_req, _unused_call)\n    Helloworld::HelloReply.new(message: \"Hello #{hello_req.name}\")\n  end\n\n  def say_hello_again(hello_req, _unused_call)\n    Helloworld::HelloReply.new(message: \"Hello again, #{hello_req.name}\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Simple RPC Method in Protocol Buffers\nDESCRIPTION: Protocol buffer definition of a simple RPC method that retrieves a feature at a given position, sending a single request and receiving a single response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\n// Obtains the feature at a given position.\nrpc GetFeature(Point) returns (Feature) {}\n```\n\n----------------------------------------\n\nTITLE: Updating gRPC Service Definition\nDESCRIPTION: Updated Protocol Buffer definition for the Greeter service, adding a new SayHelloAgain method while keeping the existing SayHello method and message types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Top-level Gradle for Kotlin Android gRPC Project\nDESCRIPTION: Top-level Gradle configuration for Android project using Kotlin and gRPC. Sets up build dependencies and repositories.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/kotlin-gradle-projects.md#2025-04-08_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nbuildscript {\n  ext.kotlin_version = '1.2.21'\n\n  repositories {\n    google()\n    jcenter()\n  }\n  dependencies {\n    classpath 'com.android.tools.build:gradle:3.0.1'\n    classpath \"com.google.protobuf:protobuf-gradle-plugin:0.8.5\"\n    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n  }\n}\n\nallprojects {\n  repositories {\n    google()\n    jcenter()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended gRPC Service Definition\nDESCRIPTION: Updated protobuf definition adding a new SayHelloAgain method to the Greeter service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Go gRPC Client Performance Output\nDESCRIPTION: Output from the Go gRPC client showing performance metrics for each batch of requests. This snippet displays the number of hellos processed, errors, remaining requests, and processing speed in hellos per millisecond and microseconds per hello.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n17:34:37 1001 hellos (0 errs, 8999 remaining): 6.0 hellos/ms or ~166µs per hello\n17:34:37 1001 hellos (0 errs, 7998 remaining): 6.7 hellos/ms or ~150µs per hello\n17:34:37 1001 hellos (0 errs, 6997 remaining): 6.8 hellos/ms or ~148µs per hello\n17:34:37 1001 hellos (0 errs, 5996 remaining): 6.8 hellos/ms or ~147µs per hello\n17:34:37 1001 hellos (0 errs, 4995 remaining): 6.7 hellos/ms or ~150µs per hello\n17:34:38 1001 hellos (0 errs, 3994 remaining): 6.7 hellos/ms or ~150µs per hello\n17:34:38 1001 hellos (0 errs, 2993 remaining): 6.7 hellos/ms or ~149µs per hello\n17:34:38 1001 hellos (0 errs, 1992 remaining): 6.7 hellos/ms or ~149µs per hello\n17:34:38 1001 hellos (0 errs, 991 remaining): 6.8 hellos/ms or ~148µs per hello\n17:34:38 991 hellos (0 errs, -1 remaining): 6.8 hellos/ms or ~147µs per hello\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for gRPC-Web Project\nDESCRIPTION: This JSON snippet shows the package.json configuration for a gRPC-Web project. It includes dependencies for Google Protocol Buffers and gRPC-Web, as well as development dependencies for bundling the client code.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"grpc-web-commonjs-example\",\n  \"dependencies\": {\n    \"google-protobuf\": \"^3.6.1\",\n    \"grpc-web\": \"^0.4.0\"\n  },\n  \"devDependencies\": {\n    \"browserify\": \"^16.2.2\",\n    \"webpack\": \"^4.16.5\",\n    \"webpack-cli\": \"^3.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Main Function\nDESCRIPTION: Main function implementation showing how to use the GreeterClient.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nint main(int argc, char** argv) {\n  std::string reply = greeter.SayHello(user);\n  std::cout << \"Greeter received: \" << reply << std::endl;\n\n  reply = greeter.SayHelloAgain(user);\n  std::cout << \"Greeter received: \" << reply << std::endl;\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: Protocol Buffers definition for the Greeter service with SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: BDP estimation and dynamic flow control window in gRPC-Go\nDESCRIPTION: This feature implements Bandwidth Delay Product (BDP) estimation to dynamically adjust flow control window sizes. It helps achieve optimal performance on high latency networks by adapting to network conditions and preventing buffer bloat.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-go-perf-improvements.md#2025-04-08_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// Code link: https://github.com/grpc/grpc-go/pull/1310\n```\n\n----------------------------------------\n\nTITLE: Initializing ALTS Client Channel in Java\nDESCRIPTION: This snippet demonstrates how to create a managed channel using ALTS authentication for a gRPC client in Java. It uses AltsChannelBuilder to establish a secure connection to the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/alts.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.grpc.alts.AltsChannelBuilder;\nimport io.grpc.ManagedChannel;\n\nManagedChannel managedChannel =\n    AltsChannelBuilder.forTarget(serverAddress).build();\n```\n\n----------------------------------------\n\nTITLE: Warning About Server Request-Headers Size Limit\nDESCRIPTION: A warning about servers potentially limiting the size of Request-Headers, with a default suggested limit of 8 KiB.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/metadata.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nWARNING: Servers may limit the size of Request-Headers, with a default of 8 KiB suggested.\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Backend Server in Node.js\nDESCRIPTION: This code snippet shows the implementation of the EchoService in Node.js. It defines a doEcho function that handles the Echo RPC method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doEcho(call, callback) {\n  callback(null, {message: call.request.message});\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Protocol Buffers\nDESCRIPTION: Protocol Buffer definition of a Greeter service with a single SayHello RPC method. It defines the request and response message structures for the service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Kotlin Server\nDESCRIPTION: Command to run the compiled gRPC Kotlin server application.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./server/build/install/server/bin/hello-world-server\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google OAuth2 Token in PHP gRPC (Legacy)\nDESCRIPTION: Implements Google authentication for gRPC calls in PHP using OAuth2 token with a specific scope. This legacy approach requires the GOOGLE_APPLICATION_CREDENTIALS environment variable to be set.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// the environment variable \"GOOGLE_APPLICATION_CREDENTIALS\" needs to be set\n$scope = \"https://www.googleapis.com/auth/grpc-testing\";\n$auth = Google\\Auth\\ApplicationDefaultCredentials::getCredentials($scope);\n$opts = [\n  'credentials' => Grpc\\Credentials::createSsl(file_get_contents('roots.pem'));\n  'update_metadata' => $auth->getUpdateMetadataFunc(),\n];\n$client = new helloworld\\GreeterClient('greeter.googleapis.com', $opts);\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message Structure\nDESCRIPTION: Example showing how to define a basic protocol buffer message structure for a Person entity with name, id, and boolean fields.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/what-is-grpc/introduction.md#2025-04-08_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n  bool has_ponycopter = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Client-Streaming Data in gRPC\nDESCRIPTION: Demonstrates how to handle incoming data from a client stream in a gRPC service. It sets up event listeners for data reception and stream completion, processing user points and responding with a result when the stream ends.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncall.on('data', function(point) {\n  // Process user data\n});\ncall.on('end', function() {\n  callback(null, result);\n});\n```\n\n----------------------------------------\n\nTITLE: Changing to Examples Directory\nDESCRIPTION: Command to change the current working directory to the examples folder.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd grpc-kotlin/examples\n```\n\n----------------------------------------\n\nTITLE: Using GrpcCleanupRule for Resource Management in JUnit Test\nDESCRIPTION: This snippet demonstrates how to use the GrpcCleanupRule to automatically manage the lifecycle of gRPC resources in a JUnit test. It shows how to register servers and channels with the rule before running test methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/graceful-cleanup-junit-tests.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MyTest {\n  @Rule\n  public GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();\n  ...\n  private String serverName = InProcessServerBuilder.generateName();\n  private Server server = grpcCleanup.register(InProcessServerBuilder\n      .forName(serverName).directExecutor().addService(myServiceImpl).build().start());\n  private ManagedChannel channel = grpcCleanup.register(InProcessChannelBuilder\n      .forName(serverName).directExecutor().build());\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Blog Menu in YAML\nDESCRIPTION: YAML front matter configuration that defines the blog section title and its placement in the main navigation menu with a weight of 6 to control positioning.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: gRPC Blog\nlinkTitle: Blog\nmenu:\n  main: {weight: 6}\n```\n\n----------------------------------------\n\nTITLE: Synchronized gRPC Service Implementation in Java\nDESCRIPTION: Original key-value store implementation using synchronized methods to ensure thread safety, which limits concurrency to only one active RPC at a time. This code demonstrates the bottleneck that prevents scaling.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-2.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate final Map<ByteBuffer, ByteBuffer> store = new HashMap<>();\n\n@Override\npublic synchronized void create(\n    CreateRequest request, StreamObserver<CreateResponse> responseObserver) {\n  ByteBuffer key = request.getKey().asReadOnlyByteBuffer();\n  ByteBuffer value = request.getValue().asReadOnlyByteBuffer();\n  simulateWork(WRITE_DELAY_MILLIS);\n  if (store.putIfAbsent(key, value) == null) {\n    responseObserver.onNext(CreateResponse.getDefaultInstance());\n    responseObserver.onCompleted();\n    return;\n  }\n  responseObserver.onError(Status.ALREADY_EXISTS.asRuntimeException());\n}\n```\n\n----------------------------------------\n\nTITLE: Lock-Free gRPC Service Implementation with ConcurrentHashMap in Java\nDESCRIPTION: Improved implementation using ConcurrentHashMap instead of HashMap and removing the synchronized keyword. This allows operations on different keys to proceed concurrently, significantly improving throughput.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-2.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate final ConcurrentMap<ByteBuffer, ByteBuffer> store = new ConcurrentHashMap<>();\n\n@Override\npublic void create(\n    CreateRequest request, StreamObserver<CreateResponse> responseObserver) {\n  ByteBuffer key = request.getKey().asReadOnlyByteBuffer();\n  ByteBuffer value = request.getValue().asReadOnlyByteBuffer();\n  simulateWork(WRITE_DELAY_MILLIS);\n  if (store.putIfAbsent(key, value) == null) {\n    responseObserver.onNext(CreateResponse.getDefaultInstance());\n    responseObserver.onCompleted();\n    return;\n  }\n  responseObserver.onError(Status.ALREADY_EXISTS.asRuntimeException());\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Kotlin Repository\nDESCRIPTION: Command to clone the gRPC Kotlin repository from GitHub.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --depth 1 https://github.com/grpc/grpc-kotlin\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Grpc.Tools Build Page\nDESCRIPTION: YAML configuration block defining metadata and behavior for the Grpc.Tools daily builds documentation page. Sets page title, link behavior, SEO settings, and build parameters.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/csharp/daily-builds.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Daily builds (Grpc.Tools nuget only)\nlinkTitle: Daily builds (legacy)\nrobots: noindex, nofollow\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Checking for Cancelled Context in Java gRPC Server\nDESCRIPTION: Checks if a client has cancelled the request in a Java gRPC server implementation, allowing the server to respond with an appropriate error and avoid unnecessary processing.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/deadlines.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nif (Context.current().isCancelled()) {\n  responseObserver.onError(Status.CANCELLED.withDescription(\"Cancelled by client\").asRuntimeException());\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Updated PHP Client Implementation\nDESCRIPTION: PHP client code showing how to call both SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request = new Helloworld\\HelloRequest();\n$request->setName($name);\nlist($reply, $status) = $client->SayHello($request)->wait();\n$message = $reply->getMessage();\nlist($reply, $status) = $client->SayHelloAgain($request)->wait();\n$message = $reply->getMessage();\n```\n\n----------------------------------------\n\nTITLE: Implementing RouteGuide Server Service Base Class in Kotlin\nDESCRIPTION: Creating the RouteGuideService class that extends the generated RouteGuideCoroutineImplBase class to implement the service functionality.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RouteGuideService(\n  val features: Collection<Feature>,\n  /* ... */\n) : RouteGuideGrpcKt.RouteGuideCoroutineImplBase() {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Dart Server Implementation\nDESCRIPTION: Server-side implementation of the Greeter service with both SayHello and SayHelloAgain methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass GreeterService extends GreeterServiceBase {\n  @override\n  Future<HelloReply> sayHello(ServiceCall call, HelloRequest request) async {\n    return HelloReply()..message = 'Hello, ${request.name}!';\n  }\n\n  @override\n  Future<HelloReply> sayHelloAgain(ServiceCall call, HelloRequest request) async {\n    return HelloReply()..message = 'Hello again, ${request.name}!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Node Repository and Setting Up Example\nDESCRIPTION: Commands to clone the gRPC Node repository, navigate to the example directory, install dependencies, and move to the dynamic codegen 'hello, world' example.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Clone the repository to get the example code\ngit clone -b {{< param grpc_vers.node >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc-node\n# Navigate to the node example\ncd grpc-node/examples\n# Install the example's dependencies\nnpm install\n# Navigate to the dynamic codegen \"hello, world\" Node example:\ncd helloworld/dynamic_codegen\n```\n\n----------------------------------------\n\nTITLE: Displaying gRPC Java Stack Diagram\nDESCRIPTION: An SVG image depicting the gRPC-Java stack, highlighting its support for various transports and the ability to bypass generated stubs and interceptors.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-stacks.md#2025-04-08_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<img src=\"/img/grpc-java-stack.svg\" alt=\"gRPC Java Stack\">\n```\n\n----------------------------------------\n\nTITLE: Implementing a Gson Marshaller for gRPC\nDESCRIPTION: Java code implementing a Marshaller for Gson to convert between Java objects and InputStreams for gRPC transmission.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  static <T> Marshaller<T> marshallerFor(Class<T> clz) {\n    Gson gson = new Gson();\n    return new Marshaller<T>() {\n      @Override\n      public InputStream stream(T value) {\n        return new ByteArrayInputStream(gson.toJson(value, clz).getBytes(StandardCharsets.UTF_8));\n      }\n\n      @Override\n      public T parse(InputStream stream) {\n        return gson.fromJson(new InputStreamReader(stream, StandardCharsets.UTF_8), clz);\n      }\n    };\n  }\n```\n\n----------------------------------------\n\nTITLE: Updated gRPC Service Definition\nDESCRIPTION: Extended protocol buffer definition adding SayHelloAgain RPC method to the Greeter service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Repository for OAuth2 Example\nDESCRIPTION: These shell commands clone the gRPC repository, checking out a specific version and initializing submodules.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/oauth2.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone -b {{< param grpc_vers.core >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc\ncd grpc\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Displaying gRPC Core Stack Diagram\nDESCRIPTION: An SVG image showing the layered architecture of gRPC Core stack, including application layers, language-specific wrappers, and the C-core implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-stacks.md#2025-04-08_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\n<img src=\"/img/grpc-core-stack.svg\" alt=\"gRPC Core Stack\">\n```\n\n----------------------------------------\n\nTITLE: Handling gRPC Requests with JSON Encoding\nDESCRIPTION: Java code showing how to implement a gRPC service method handler using JSON-encoded data with Gson.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nfinal class KvService extends KvGson.KeyValueServiceImplBase {\n\n  @Override\n  public void create(\n      KvGson.CreateRequest request, StreamObserver<KvGson.CreateResponse> responseObserver) {\n    ByteBuffer key = ByteBuffer.wrap(request.key);\n    ByteBuffer value = ByteBuffer.wrap(request.value);\n    // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Initial gRPC Service Definition\nDESCRIPTION: Protocol buffer definition of the Greeter service with SayHello RPC method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Decoupling application reads from connection flow control in gRPC-Go\nDESCRIPTION: This optimization decouples connection-level flow control from application reads to prevent slow or inactive streams from hampering the performance of other streams on the same connection. It addresses potential issues with shared connections among multiple streams.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-go-perf-improvements.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Code link: https://github.com/grpc/grpc-go/pull/1265\n```\n\n----------------------------------------\n\nTITLE: Updated Node.js Server Implementation\nDESCRIPTION: JavaScript code implementing both SayHello and SayHelloAgain methods on the server side.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sayHello(call, callback) {\n  callback(null, {message: 'Hello ' + call.request.name});\n}\n\nfunction sayHelloAgain(call, callback) {\n  callback(null, {message: 'Hello again, ' + call.request.name});\n}\n\nfunction main() {\n  var server = new grpc.Server();\n  server.addProtoService(hello_proto.Greeter.service,\n                         {sayHello: sayHello, sayHelloAgain: sayHelloAgain});\n  server.bind('0.0.0.0:50051', grpc.ServerCredentials.createInsecure());\n  server.start();\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message in Protocol Buffers\nDESCRIPTION: Example of defining a Protocol Buffer message type named Point, used in the RouteGuide service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// Points are represented as latitude-longitude pairs in the E7 representation\n// (degrees multiplied by 10**7 and rounded to the nearest integer).\n// Latitudes should be in the range +/- 90 degrees and longitude should be in\n// the range +/- 180 degrees (inclusive).\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Route Guide Example Directory\nDESCRIPTION: Command to change the current directory to the route guide example folder after cloning the repository.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd grpc-dart/example/route_guide\n```\n\n----------------------------------------\n\nTITLE: Expanding stream window on receiving large messages in gRPC-Go\nDESCRIPTION: This optimization bypasses stream-level flow control to request the whole message when there's an active read by the application on the receive side. It provides significant performance benefits for large messages, especially on high-latency networks.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-go-perf-improvements.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Code link: https://github.com/grpc/grpc-go/pull/1248\n```\n\n----------------------------------------\n\nTITLE: Interface for Bidirectional Streaming Methods in Go gRPC Client\nDESCRIPTION: The generated interface for bidirectional streaming methods on the client side. It provides Send and Recv methods to handle streaming in both directions simultaneously and embeds grpc.ClientStream for additional functionality.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code-old.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype <ServiceName>_FooClient interface {\n\tSend(*MsgA) error\n\tRecv() (*MsgB, error)\n\tgrpc.ClientStream\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Deadlines with Flags in Go gRPC\nDESCRIPTION: Implements configurable deadlines in Go gRPC using command-line flags, allowing deadline values to be adjusted at runtime without code changes.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/deadlines.md#2025-04-08_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar deadlineMs = flag.Int(\"deadline_ms\", 20*1000, \"Default deadline in milliseconds.\")\n\nctx, cancel := context.WithTimeout(ctx, time.Duration(*deadlineMs) * time.Millisecond)\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Messages for Address Book in Protobuf\nDESCRIPTION: This snippet defines the main protocol file 'addressbook.proto' for an address book application. It includes message definitions for Person and AddressBook, along with nested types and imports.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/wireshark.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage tutorial;\nimport \"google/protobuf/timestamp.proto\";\n\nmessage Person {\n  string name = 1;\n  int32 id = 2;  // Unique ID number for this person.\n  string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    string number = 1;\n    PhoneType type = 2;\n  }\n\n  repeated PhoneNumber phone = 4;\n  google.protobuf.Timestamp last_updated = 5;\n  bytes portrait_image = 6;\n}\n\nmessage AddressBook {\n  repeated Person people = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Routing HTTP/2 and gRPC Requests in Go\nDESCRIPTION: Go code snippet that detects if the incoming request is HTTP/2 with gRPC content type and routes it accordingly.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/coreos.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif r.ProtoMajor == 2 && strings.Contains(r.Header.Get(\"Content-Type\"), \"application/grpc\") {\n\tgrpcServer.ServeHTTP(w, r)\n} else {\n\totherHandler.ServeHTTP(w, r)\n}\n```\n\n----------------------------------------\n\nTITLE: Interface for Client-Streaming Methods in Go gRPC Client\nDESCRIPTION: The generated interface for client-streaming methods on the client side. It provides a Send method to stream messages to the server and CloseAndRecv to finalize the stream and receive the server's response. It also embeds grpc.ClientStream.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/generated-code-old.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype <ServiceName>_FooClient interface {\n\tSend(*MsgA) error\n\tCloseAndRecv() (*MsgB, error)\n\tgrpc.ClientStream\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Simple RPC Method in Android Java\nDESCRIPTION: Code example showing how to call a simple RPC method (GetFeature) using the blocking stub. It creates a Point request and receives a Feature response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nPoint request = Point.newBuilder().setLatitude(lat).setLongitude(lon).build();\nFeature feature = blockingStub.getFeature(request);\n```\n\n----------------------------------------\n\nTITLE: Binding Interceptors to gRPC-Web Clients in JavaScript\nDESCRIPTION: This code snippet shows how to bind unary and stream interceptors to gRPC-Web clients during instantiation. It demonstrates passing an array of interceptor instances using the 'unaryInterceptors' and 'streamInterceptors' option keys.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-web-interceptor.md#2025-04-08_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst promiseClient = new MyServicePromiseClient(\n    host, creds, {'unaryInterceptors': [interceptor1, interceptor2, interceptor3]});\n\nconst client = new MyServiceClient(\n    host, creds, {'streamInterceptors': [interceptor1, interceptor2, interceptor3]});\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Channel Arguments for Keepalive\nDESCRIPTION: Setting the keepalive time for HTTP/2 connections using the GRPC_ARG_KEEPALIVE_TIME_MS channel argument.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/performance.md#2025-04-08_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nGRPC_ARG_KEEPALIVE_TIME_MS\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Android Client\nDESCRIPTION: This Gradle command builds the Android client application and installs it on the connected Android device or emulator.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/kotlin/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :android:installDebug\n```\n\n----------------------------------------\n\nTITLE: Adding REST Gateway Metadata to EchoService\nDESCRIPTION: Adds metadata to the EchoService .proto to map the Echo RPC to a RESTful POST method with parameters in the JSON body.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/coreos.md#2025-04-08_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nservice EchoService {\n  rpc Echo(EchoMessage) returns (EchoMessage) {\n    option (google.api.http) = {\n      post: \"/v1/echo\"\n      body: \"*\"\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying gRPC Go Stack Diagram\nDESCRIPTION: An SVG image illustrating the simplified stack structure of gRPC-Go, showing its linear flow and support for multiple HTTP/2 implementations.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-stacks.md#2025-04-08_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\n<img src=\"/img/grpc-go-stack.svg\" alt=\"gRPC Go Stack\">\n```\n\n----------------------------------------\n\nTITLE: Compiling gRPC Kotlin Client and Server\nDESCRIPTION: Gradle command to compile the gRPC Kotlin client and server applications.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew installDist\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for API Reference Page\nDESCRIPTION: YAML front matter configuration for a placeholder API reference page that redirects to an external location. The configuration includes title, link text, weight for ordering, and build settings to render only as a link.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference\nlinkTitle: API\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Retry Throttling\nDESCRIPTION: JSON configuration for retry throttling settings to prevent server overload, including maximum tokens and token ratio parameters.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/retry.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"retryThrottling\": {\n  \"maxTokens\": 10,\n  \"tokenRatio\": 0.1\n}\n```\n\n----------------------------------------\n\nTITLE: Running Updated gRPC Kotlin Client with Argument\nDESCRIPTION: Command to run the updated gRPC Kotlin client application with a command-line argument.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/quickstart.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n./client/build/install/client/bin/hello-world-client Alice\n```\n\n----------------------------------------\n\nTITLE: gRPC Health Check State Diagram\nDESCRIPTION: Mermaid diagram showing the state transitions of a gRPC subchannel based on health check responses, including IDLE, CONNECTING, READY, and TRANSIENT_FAILURE states.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/health-checking.md#2025-04-08_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> IDLE\n    IDLE --> CONNECTING : Connection requested\n    CONNECTING --> READY : Health check#colon;\\nSERVING\n    CONNECTING --> TRANSIENT_FAILURE : Health check#colon;\\nNOT_SERVING\\nor call fails\n    READY --> TRANSIENT_FAILURE : Health check#colon;\\nNOT_SERVING\n    READY --> IDLE : Connection breaks\\nor times out\n    TRANSIENT_FAILURE --> READY : Health check#colon;\\nSERVING\n    note right of TRANSIENT_FAILURE : Allows the load balancer to choose\\nanother, working subchannel\n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Compiler Plugins for Go\nDESCRIPTION: Commands to install the necessary protocol compiler plugins for Go to work with gRPC and protocol buffers. These plugins are required to generate Go code from proto files.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n```\n\n----------------------------------------\n\nTITLE: Accessing FlatBuffers Request Data in gRPC Server\nDESCRIPTION: A C++ code snippet showing how to access data from a FlatBuffers request message in a gRPC server implementation. It demonstrates the direct access to data without unpacking or deserializing.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-flatbuffers.md#2025-04-08_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nauto request = request_msg->GetRoot();\nauto name = request->name()->str();\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for gRPC Code Generation\nDESCRIPTION: Gradle plugin configuration for generating gRPC and Protocol Buffers code using protobuf-gradle-plugin.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/generated-code.md#2025-04-08_snippet_6\n\nLANGUAGE: gradle\nCODE:\n```\napply plugin: 'java'\napply plugin: 'com.google.protobuf'\n\nbuildscript {\n  repositories {\n    mavenCentral()\n  }\n  dependencies {\n    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'\n  }\n}\n\nprotobuf {\n  protoc {\n    artifact = \"com.google.protobuf:protoc:3.2.0\"\n  }\n  plugins {\n    grpc {\n      artifact = 'io.grpc:protoc-gen-grpc-java:1.4.0'\n    }\n  }\n  generateProtoTasks {\n    all()*.plugins {\n      grpc {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Synchronous and Asynchronous RPC Calls in Python gRPC\nDESCRIPTION: Examples of making various types of RPC calls including simple, streaming, and bidirectional using both synchronous and asynchronous patterns.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfeature = stub.GetFeature(point)\n\nfeature_future = stub.GetFeature.future(point)\nfeature = feature_future.result()\n\nfor feature in stub.ListFeatures(rectangle):\n\nroute_summary = stub.RecordRoute(point_iterator)\n\nroute_summary_future = stub.RecordRoute.future(point_iterator)\nroute_summary = route_summary_future.result()\n\nfor received_route_note in stub.RouteChat(sent_route_note_iterator):\n```\n\n----------------------------------------\n\nTITLE: Implementing Concurrent gRPC Client with ListenableFuture\nDESCRIPTION: Implementation of a gRPC client method using KeyValueServiceFutureStub and ListenableFuture for concurrent RPC calls. Includes error handling and thread-safe key management.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-1.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void doCreate(KeyValueServiceFutureStub stub, AtomicReference<Throwable> error) {\n  ByteString key = createRandomKey();\n  ListenableFuture<CreateResponse> res = stub.create(\n      CreateRequest.newBuilder()\n          .setKey(key)\n          .setValue(randomBytes(MEAN_VALUE_SIZE))\n          .build());\n  res.addListener(() -> rpcCount.incrementAndGet(), MoreExecutors.directExecutor());\n  Futures.addCallback(res, new FutureCallback<CreateResponse>() {\n    @Override\n    public void onSuccess(CreateResponse result) {\n      if (!result.equals(CreateResponse.getDefaultInstance())) {\n        error.compareAndSet(null, new RuntimeException(\"Invalid response\"));\n      }\n      synchronized (knownKeys) {\n        knownKeys.add(key);\n      }\n    }\n\n    @Override\n    public void onFailure(Throwable t) {\n      Status status = Status.fromThrowable(t);\n      if (status.getCode() == Code.ALREADY_EXISTS) {\n        synchronized (knownKeys) {\n          knownKeys.remove(key);\n        }\n        logger.log(Level.INFO, \"Key already existed\", t);\n      } else {\n        error.compareAndSet(null, t);\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Generated C# Files\nDESCRIPTION: Command to find the C# files generated by the gRPC tools. The generated files are placed in the intermediate output directory under obj/ to avoid cluttering the working directory.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-dotnet-build.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n~/work/MyGreeter$ find obj -name '*.cs'\nobj/Debug/netstandard2.0/MyGreeter.AssemblyInfo.cs\nobj/Debug/netstandard2.0/Helloworld.cs\nobj/Debug/netstandard2.0/HelloworldGrpc.cs\n```\n\n----------------------------------------\n\nTITLE: Visualizing Deadline Propagation in gRPC with Mermaid\nDESCRIPTION: This Mermaid sequence diagram illustrates the process of deadline propagation in a gRPC system involving a client, a user server, and a billing server. It shows how a deadline is set, propagated, and handled when it expires.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/deadlines.md#2025-04-08_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"sequence\": { \"mirrorActors\": false }}}%%\nsequenceDiagram\n  participant c as Client\n  participant us as User Server\n  participant bs as Billing Server\n  note right of c: Request at 13:00:00<br>Should complete in 2s\n  activate c\n  c ->> us: GetUserProfile<br>(deadline: 13:00:02)\n  activate us\n  note right of us: 0.5s spent before<br>calling billing server\n  us ->> bs: GetTransactionHistory<br>(timeout: 1.5s)\n  activate bs\n  bs ->> bs: Retrieve transactions\n  note left of bs: It's 13:00:02<br>Time's up!\n  note right of c: Stop waiting for server\n  c ->> c: Stop waiting for server<br>DEADLINE_EXCEEDED\n  deactivate c\n  us ->> us: Stop waiting for server\n  us -->> c: Cancel\n  deactivate us\n  bs -->> us: Cancel\n  bs ->> bs: Clean up resources<br>(after noticing that the<br>call was cancelled)\n  deactivate bs\n```\n\n----------------------------------------\n\nTITLE: Running Go gRPC Client with Bazel\nDESCRIPTION: Command to run the Go Greeter client example using Bazel, specifying total size and batch size parameters. This snippet shows how to execute the Go gRPC client implementation with custom parameters.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n~/grpc_greeterclient$ bazel run //go:client -- -total_size 10000 -batch_size 1000\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional Streaming RPC Method in Protocol Buffers\nDESCRIPTION: Protocol buffer definition of a bidirectional streaming RPC where both client and server can send multiple messages independently in a chat-like interaction.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of RouteNotes sent while a route is being traversed,\n// while receiving other RouteNotes (e.g. from other users).\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n```\n\n----------------------------------------\n\nTITLE: Building the gRPC Project\nDESCRIPTION: Using dotnet build with verbosity level to see the proto compilation process in action. This command compiles the .proto file into C# code and then builds the library.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-dotnet-build.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n~/work/MyGreeter$ dotnet build -v:n\n\nBuild started 11/9/18 5:33:44 PM.\n  1:7>Project \"/home/kkm/work/MyGreeter/MyGreeter.csproj\" on node 1 (Build target(s)).\n   1>_Protobuf_CoreCompile:\n      /home/kkm/.nuget/packages/grpc.tools/1.17.0/tools/linux_x64/protoc\n        --csharp_out=obj/Debug/netstandard2.0\n        --plugin=protoc-gen-grpc=/home/kkm/.nuget/packages/grpc.tools/1.17.0/tools/linux_x64/grpc_csharp_plugin\n        --grpc_out=obj/Debug/netstandard2.0 --proto_path=/home/kkm/.nuget/packages/grpc.tools/1.17.0/build/native/include\n        --proto_path=. --dependency_out=obj/Debug/netstandard2.0/da39a3ee5e6b4b0d_helloworld.protodep helloworld.proto\n     CoreCompile:\n\n        [ ... skipping long output ... ]\n\n       MyGreeter -> /home/kkm/work/MyGreeter/bin/Debug/netstandard2.0/MyGreeter.dll\n\nBuild succeeded.\n```\n\n----------------------------------------\n\nTITLE: Visualizing Interceptor Order with Caching and Logging (Network-Closer)\nDESCRIPTION: This diagram illustrates the order of interceptors with caching closer to the application and logging closer to the network. It shows the flow from the application through the interceptors to the network.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/interceptors.md#2025-04-08_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nAPP(Application) --> INT1\nINT1(Caching\\nInterceptor) -->|Cache miss| INT2\nINT2(Logging\\nInterceptor) --> NET\nNET(Network)\n```\n\n----------------------------------------\n\nTITLE: Cloning rules_protobuf repository with Git\nDESCRIPTION: Commands to clone the rules_protobuf repository from GitHub and change into the project directory.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/pubref/rules_protobuf\ncd rules_protobuf\n~/rules_protobuf$\n```\n\n----------------------------------------\n\nTITLE: Original Synchronized Update Method in Java gRPC Service\nDESCRIPTION: The update method in the original implementation requires synchronization due to multiple operations on the HashMap that need to be atomic. This method is a bottleneck for concurrent RPC execution.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-2.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic synchronized void update(\n    UpdateRequest request, StreamObserver<UpdateResponse> responseObserver) {\n  ByteBuffer key = request.getKey().asReadOnlyByteBuffer();\n  ByteBuffer newValue = request.getValue().asReadOnlyByteBuffer();\n  simulateWork(WRITE_DELAY_MILLIS);\n  ByteBuffer oldValue = store.get(key);\n  if (oldValue == null) {\n    responseObserver.onError(Status.NOT_FOUND.asRuntimeException());\n    return;\n  }\n  store.replace(key, oldValue, newValue);\n  responseObserver.onNext(UpdateResponse.getDefaultInstance());\n  responseObserver.onCompleted();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Deadlines in Java gRPC Client\nDESCRIPTION: Sets a deadline for a Java gRPC client by specifying a timeout in milliseconds after which the RPC will be terminated if no response is received.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/deadlines.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nresponse = blockingStub.withDeadlineAfter(deadlineMs, TimeUnit.MILLISECONDS).sayHello(request);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hedging Policy in gRPC Service Config\nDESCRIPTION: JSON configuration for gRPC hedging policy, which includes maxAttempts (required, capped at 5), optional hedgingDelay, and optional nonFatalStatusCodes that determine which errors trigger additional hedged requests.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/request-hedging.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"hedgingPolicy\": {\n  \"maxAttempts\": INTEGER,\n  \"hedgingDelay\": JSON proto3 Duration type,\n  \"nonFatalStatusCodes\": JSON array of grpc status codes (int or string)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GreeterTimer Client in Go\nDESCRIPTION: Go client implementation that submits a TimerRequest and processes the streaming response. Handles errors and EOF conditions while receiving batch responses.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc submit(client greeterTimer.GreeterTimerClient, request *greeterTimer.TimerRequest) error {\n\tstream, err := client.TimeHello(context.Background(), request)\n\tif err != nil {\n\t\tlog.Fatalf(\"could not submit request: %v\", err)\n\t}\n\tfor {\n\t\tbatchResponse, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"error during batch recv: %v\", err)\n\t\t\treturn err\n\t\t}\n\t\treportBatchResult(batchResponse)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC for Go\nDESCRIPTION: Command to install the gRPC runtime for Go using the go get command. This works on Linux, Mac, and Windows platforms.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/installation.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get google.golang.org/grpc\n```\n\n----------------------------------------\n\nTITLE: Setting Deadlines in Go gRPC Client\nDESCRIPTION: Sets a deadline for a gRPC client request in Go by creating a context with a deadline set to a specific duration from the current time.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/deadlines.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclientDeadline := time.Now().Add(time.Duration(*deadlineMs) * time.Millisecond)\nctx, cancel := context.WithDeadline(ctx, clientDeadline)\n```\n\n----------------------------------------\n\nTITLE: Running the Updated gRPC Client\nDESCRIPTION: Command to run the updated client that calls both the original SayHello method and the new SayHelloAgain method, showing both greeting responses.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n./build/install/examples/bin/hello-world-client\nINFO: Will try to greet world ...\nINFO: Greeting: Hello world\nINFO: Greeting: Hello again world\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request to EchoService\nDESCRIPTION: Demonstrates how to send a HTTP request to the EchoService using curl.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/coreos.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -k https://localhost:10000/v1/echo -d '{\"value\": \"CoreOS is hiring!\"}'\n```\n\n----------------------------------------\n\nTITLE: Maven Configuration for gRPC Code Generation\nDESCRIPTION: Maven plugin configuration for generating gRPC and Protocol Buffers code using protobuf-maven-plugin.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/generated-code.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  <extensions>\n    <extension>\n      <groupId>kr.motd.maven</groupId>\n      <artifactId>os-maven-plugin</artifactId>\n      <version>1.4.1.Final</version>\n    </extension>\n  </extensions>\n  <plugins>\n    <plugin>\n      <groupId>org.xolstice.maven.plugins</groupId>\n      <artifactId>protobuf-maven-plugin</artifactId>\n      <version>0.5.0</version>\n      <configuration>\n        <protocArtifact>com.google.protobuf:protoc:3.3.0:exe:${os.detected.classifier}</protocArtifact>\n        <pluginId>grpc-java</pluginId>\n        <pluginArtifact>io.grpc:protoc-gen-grpc-java:1.4.0:exe:${os.detected.classifier}</pluginArtifact>\n      </configuration>\n      <executions>\n        <execution>\n          <goals>\n            <goal>compile</goal>\n            <goal>compile-custom</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Defining Search Results Page with YAML Front Matter\nDESCRIPTION: YAML front matter block that configures a search results page. It sets the page title to 'Search Results' and specifies the layout to be used for rendering the page.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/search.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Search Results\nlayout: search\n---\n```\n\n----------------------------------------\n\nTITLE: Running gRPC client in Python\nDESCRIPTION: Command to run the gRPC client example in Python.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython greeter_client.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Authentication with SSL/TLS in Dart gRPC\nDESCRIPTION: Establishes a secure gRPC connection in Dart using SSL/TLS with custom trusted root certificates. This approach loads certificates from a file and creates secure channel credentials.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n// Load a custom roots file.\nfinal trustedRoot = new File('roots.pem').readAsBytesSync();\nfinal channelCredentials =\n    new ChannelCredentials.secure(certificates: trustedRoot);\nfinal channelOptions = new ChannelOptions(credentials: channelCredentials);\nfinal channel = new ClientChannel('myservice.example.com',\n    options: channelOptions);\nfinal client = new GreeterClient(channel);\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Client Stub in C++\nDESCRIPTION: Client stub initialization using a channel in the constructor.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\npublic:\n RouteGuideClient(std::shared_ptr<ChannelInterface> channel,\n                  const std::string& db)\n     : stub_(RouteGuide::NewStub(channel)) {\n   ...\n }\n```\n\n----------------------------------------\n\nTITLE: Defining Server Streaming RPC Method\nDESCRIPTION: Definition of a server streaming RPC method where client sends a single request and receives a stream of responses.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/what-is-grpc/core-concepts.md#2025-04-08_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nrpc LotsOfReplies(HelloRequest) returns (stream HelloResponse);\n```\n\n----------------------------------------\n\nTITLE: Running the gRPC Server\nDESCRIPTION: Command to compile and run the gRPC server example from the helloworld directory. This starts the server which will listen for client requests.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo run greeter_server/main.go\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Kotlin Client\nDESCRIPTION: Command to run the compiled gRPC Kotlin client application.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/kotlin/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./client/build/install/client/bin/hello-world-client\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message\nDESCRIPTION: Example of defining a Protocol Buffer message type for geographical points.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Point {\n  int32 latitude = 1;\n  int32 longitude = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping gRPC-Web Services\nDESCRIPTION: Docker command to shut down all running services and clean up containers.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Server and Client\nDESCRIPTION: Commands to run the gRPC server and client from separate terminals in the examples/helloworld/dynamic_codegen directory.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode greeter_server.js\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode greeter_client.js\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting gRPC Client with Semaphore\nDESCRIPTION: Implementation of rate limiting using a Semaphore to prevent memory exhaustion in concurrent gRPC calls by limiting the number of active RPCs.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-1.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate final Semaphore limiter = new Semaphore(100);\n\nprivate void doCreate(KeyValueServiceFutureStub stub, AtomicReference<Throwable> error)\n    throws InterruptedException {\n  limiter.acquire();\n  ByteString key = createRandomKey();\n  ListenableFuture<CreateResponse> res = stub.create(\n      CreateRequest.newBuilder()\n          .setKey(key)\n          .setValue(randomBytes(MEAN_VALUE_SIZE))\n          .build());\n  res.addListener(() ->  {\n    rpcCount.incrementAndGet();\n    limiter.release();\n  }, MoreExecutors.directExecutor());\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RouteGuide Service Class in Dart\nDESCRIPTION: Dart implementation of the RouteGuide service that extends the generated abstract base class, providing the structure for implementing all service methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass RouteGuideService extends RouteGuideServiceBase {\n  Future<Feature> getFeature(grpc.ServiceCall call, Point request) async {\n    ...\n  }\n\n  Stream<Feature> listFeatures(\n      grpc.ServiceCall call, Rectangle request) async* {\n    ...\n  }\n\n  Future<RouteSummary> recordRoute(\n      grpc.ServiceCall call, Stream<Point> request) async {\n    ...\n  }\n\n  Stream<RouteNote> routeChat(\n      grpc.ServiceCall call, Stream<RouteNote> request) async* {\n    ...\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC-Web Services\nDESCRIPTION: Docker command to launch the required services (Node.js server, Envoy proxy, and CommonJS client) in detached mode.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/web/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose up -d node-server envoy commonjs-client\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC code from Protocol Buffer definition\nDESCRIPTION: Command to generate Python gRPC code from the updated Protocol Buffer definition.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Work Loop in gRPC Java\nDESCRIPTION: Main client loop that randomly selects and executes CRUD operations using a blocking stub.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-1.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvoid doClientWork(AtomicBoolean done) {\n  Random random = new Random();\n  KeyValueServiceBlockingStub stub = KeyValueServiceGrpc.newBlockingStub(channel);\n\n  while (!done.get()) {\n    // Pick a random CRUD action to take.\n    int command = random.nextInt(4);\n    if (command == 0) {\n      doCreate(stub);\n      continue;\n    }\n    /* ... */\n    rpcCount++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-blocking RPC Operation in Ruby\nDESCRIPTION: Demonstrates non-blocking RPC execution using multiple threads and the return_op flag.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nop = stub.list_features(LIST_FEATURES_RECT, return_op: true)\nThread.new do \n  resps = op.execute\n  resps.each do |r|\n    p \"- found '#{r.name}' at #{r.location.inspect}\"\n  end\nrescue GRPC::Cancelled => e\n  p \"operation cancel called - #{e}\"\nend\n\n# controls for the operation\nop.status\nop.cancelled?\nop.cancel\n```\n\n----------------------------------------\n\nTITLE: Setting Android SDK Environment Variable in Bash\nDESCRIPTION: This command sets the ANDROID_SDK_ROOT environment variable to the path of your Android SDK. This allows other tools and scripts to locate your Android SDK.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/kotlin/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_SDK_ROOT=\"<path-to-your-android-sdk>\"\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Python Code with Custom Package Path\nDESCRIPTION: Command to generate gRPC Python code with a custom package path, allowing for a specific package structure in the generated files.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npython -m grpc_tools.protoc -Igrpc/example/custom/path=../../protos \\\n  --python_out=. --grpc_python_out=. \\\n  ../../protos/route_guide.proto\n```\n\n----------------------------------------\n\nTITLE: Building and Running gRPC Performance Test\nDESCRIPTION: Shell commands to build and execute the gRPC key-value store performance test, showing timing results.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/optimizing-grpc-part-1.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew installDist\ntime ./build/install/kvstore/bin/kvstore\n```\n\n----------------------------------------\n\nTITLE: Generating Protocol Buffer and gRPC Code with protoc\nDESCRIPTION: Commands that are executed by the make target to generate the C++ protocol buffer and gRPC service code using the protoc compiler with the appropriate plugins.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I ../../protos --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` ../../protos/route_guide.proto\nprotoc -I ../../protos --cpp_out=. ../../protos/route_guide.proto\n```\n\n----------------------------------------\n\nTITLE: Basic gRPC Service Definition\nDESCRIPTION: Protobuf definition of a basic gRPC service with a single SayHello method, including request and response message types.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC for Ruby\nDESCRIPTION: Command to install the gRPC gem in Ruby.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngem install grpc\n```\n\n----------------------------------------\n\nTITLE: Performing Client Authorization Checks with ALTS in gRPC C++\nDESCRIPTION: Shows how to perform client authorization checks using ALTS authentication context in a server implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/alts.md#2025-04-08_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <grpcpp/server_context.h>\n#include <grpcpp/security/alts_util.h>\n\ngrpc::ServerContext* context;\ngrpc::Status status = experimental::AltsClientAuthzCheck(\n    context->auth_context(), {\"foo@iam.gserviceaccount.com\"});\n```\n\n----------------------------------------\n\nTITLE: Displaying Language-Specific Error Handling Examples\nDESCRIPTION: This snippet presents a table of language-specific examples for error handling in gRPC. It includes links to example code for C++, Go, Java, Node, and Python, covering both standard error handling and error details handling.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/error.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Language | Example                        |\n|----------|--------------------------------|\n| C++      | [C++ error handling example]   |\n|          | [C++ error details example]    |\n| Go       | [Go error handling example]    |\n|          | [Go error details example]     |\n| Java     | [Java error handling example]  |\n|          | [Java error details example]   |\n| Node     | [Node error handling example]  |\n| Python   | [Python error details example] |\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC system-wide in Python\nDESCRIPTION: Command to install gRPC system-wide using sudo and pip.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo python -m pip install grpcio\n```\n\n----------------------------------------\n\nTITLE: Generating PHP Client Stub\nDESCRIPTION: Command to generate PHP client stub implementation from the .proto file using the gRPC PHP plugin.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nprotoc --proto_path=examples/protos \\\n  --php_out=examples/php/route_guide \\\n  --grpc_out=examples/php/route_guide \\\n  --plugin=protoc-gen-grpc=bins/opt/grpc_php_plugin \\\n  ./examples/protos/route_guide.proto\n```\n\n----------------------------------------\n\nTITLE: Calling a Server-side Streaming RPC Method in Android Java\nDESCRIPTION: Code example showing how to call a server-side streaming RPC method (ListFeatures) using the blocking stub. It creates a Rectangle request and receives an Iterator of Feature objects.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nRectangle request =\n    Rectangle.newBuilder()\n        .setLo(Point.newBuilder().setLatitude(lowLat).setLongitude(lowLon).build())\n        .setHi(Point.newBuilder().setLatitude(hiLat).setLongitude(hiLon).build()).build();\nIterator<Feature> features = blockingStub.listFeatures(request);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gson with Custom Base64 Type Adapter for byte[] Arrays\nDESCRIPTION: Java code that configures Gson with a custom TypeAdapter to properly handle byte arrays by encoding them as base64 strings instead of integer arrays, significantly improving performance.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n  private static final Gson gson =\n      new GsonBuilder().registerTypeAdapter(byte[].class, new TypeAdapter<byte[]>() {\n    @Override\n    public void write(JsonWriter out, byte[] value) throws IOException {\n      out.value(Base64.getEncoder().encodeToString(value));\n    }\n\n    @Override\n    public byte[] read(JsonReader in) throws IOException {\n      return Base64.getDecoder().decode(in.nextString());\n    }\n  }).create();\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Streaming RPC with RecordRoute in PHP gRPC\nDESCRIPTION: This snippet shows how to use the client-side streaming method RecordRoute. It demonstrates writing multiple points from the client side and receiving a RouteSummary from the server.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$call = $client->RecordRoute();\n\nfor ($i = 0; $i < $num_points; $i++) {\n  $point = new Routeguide\\Point();\n  $point->setLatitude($lat);\n  $point->setLongitude($long);\n  $call->write($point);\n}\n\nlist($route_summary, $status) = $call->wait();\n```\n\n----------------------------------------\n\nTITLE: Building gRPC PHP Plugin\nDESCRIPTION: Commands to build the gRPC PHP plugin from source, which is needed to compile .proto files.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd grpc\nmkdir -p cmake/build\npushd cmake/build\ncmake ../..\nmake protoc grpc_php_plugin\npopd\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for gRPC Website\nDESCRIPTION: Command to install NPM packages and git submodules including the Docsy theme required for the website.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/README.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Displaying gRPC Protocol Error Codes\nDESCRIPTION: This snippet shows a table of gRPC error status codes for various protocol-related errors. It includes cases like compression issues, flow-control violations, and authentication failures.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/error.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Case | Status code |\n|-----|-----------|\n| Could not decompress but compression algorithm supported | `GRPC_STATUS_INTERNAL` |\n| Compression mechanism used by client not supported by the server | `GRPC_STATUS_UNIMPLEMENTED` |\n| Flow-control resource limits reached | `GRPC_STATUS_RESOURCE_EXHAUSTED` |\n| Flow-control protocol violation | `GRPC_STATUS_INTERNAL` |\n| Error parsing returned status | `GRPC_STATUS_UNKNOWN` |\n| Unauthenticated: credentials failed to get metadata | `GRPC_STATUS_UNAUTHENTICATED` |\n| Invalid host set in authority metadata | `GRPC_STATUS_UNAUTHENTICATED` |\n| Error parsing response protocol buffer | `GRPC_STATUS_INTERNAL` |\n| Error parsing request protocol buffer | `GRPC_STATUS_INTERNAL` |\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Repository for PHP Example\nDESCRIPTION: Command to clone the gRPC repository and its submodules to access the PHP example code.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --recurse-submodules -b {{< param grpc_vers.core >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc\n```\n\n----------------------------------------\n\nTITLE: Setup and Running Commands\nDESCRIPTION: Shell commands for setting up and running the gRPC example application.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncd examples/ruby\ngem install bundler && bundle install\nbundle exec route_guide/route_guide_server.rb ../python/route_guide/route_guide_db.json\nbundle exec route_guide/route_guide_client.rb ../python/route_guide/route_guide_db.json\n```\n\n----------------------------------------\n\nTITLE: Checking for Cancelled Context in Go gRPC Server\nDESCRIPTION: Checks if a client has cancelled the request in a Go gRPC server implementation, allowing the server to abandon processing and return an appropriate status code.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/deadlines.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif ctx.Err() == context.Canceled {\n\treturn status.New(codes.Canceled, \"Client cancelled, abandoning.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC tools for Python\nDESCRIPTION: Command to install gRPC tools, including the protocol buffer compiler and plugins.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install grpcio-tools\n```\n\n----------------------------------------\n\nTITLE: Updated Objective-C Client Implementation\nDESCRIPTION: Main function implementation in Objective-C showing how to make gRPC calls to both server methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/quickstart.md#2025-04-08_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nint main(int argc, char * argv[]) {\n  @autoreleasepool {\n    HLWGreeter *client = [[HLWGreeter alloc] initWithHost:kHostAddress];\n\n    HLWHelloRequest *request = [HLWHelloRequest message];\n    request.name = @\"Objective-C\";\n\n    GRPCMutableCallOptions *options = [[GRPCMutableCallOptions alloc] init];\n    // this example does not use TLS (secure channel); use insecure channel instead\n    options.transport = GRPCDefaultTransportImplList.core_insecure;\n    options.userAgentPrefix = @\"HelloWorld/1.0\";\n\n    [[client sayHelloWithMessage:request\n                 responseHandler:[[HLWResponseHandler alloc] init]\n                     callOptions:options] start];\n    [[client sayHelloAgainWithMessage:request\n                      responseHandler:[[HLWResponseHandler alloc] init]\n                          callOptions:options] start];\n\n    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHP gRPC Client\nDESCRIPTION: Command to run the PHP gRPC client example.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./run_route_guide_client.sh\n```\n\n----------------------------------------\n\nTITLE: Configurable Deadlines with Options in Java gRPC\nDESCRIPTION: Implements configurable deadlines in Java gRPC using command-line options, allowing deadline values to be adjusted without code changes to mitigate performance issues in production.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/deadlines.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Option(name=\"--deadline_ms\", usage=\"Deadline in milliseconds.\")\nprivate int deadlineMs = 20*1000;\n\nresponse = blockingStub.withDeadlineAfter(deadlineMs, TimeUnit.MILLISECONDS).sayHello(request);\n```\n\n----------------------------------------\n\nTITLE: Compiling the gRPC Client and Server\nDESCRIPTION: Gradle command to compile and install the gRPC client and server applications.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew installDist\n```\n\n----------------------------------------\n\nTITLE: Using Custom Token Provider for gRPC Call\nDESCRIPTION: This Objective-C code demonstrates how to use a custom token provider implementing GRPCAuthorizationProtocol when creating and starting a gRPC call.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/oauth2.md#2025-04-08_snippet_7\n\nLANGUAGE: Objective-C\nCODE:\n```\nGRPCMutableCallOptions *options = [[GRPCMutableCallOptions alloc] init];\noptions.authTokenProvider = [[TokenProvider alloc] init];\nGRPCUnaryProtoCall *rpc = [client unaryCallWithMessage:myRequestMessage\n                                       responseHandler:myResponseHandler\n                                           callOptions:options] start];\n[rpc start];\n```\n\n----------------------------------------\n\nTITLE: Running Node.js gRPC Server\nDESCRIPTION: Commands to set up and run the Node.js gRPC server for testing the PHP client.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ../../node\nnpm install\ncd dynamic_codegen/route_guide\nnodejs ./route_guide_server.js --db_path=route_guide_db.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Authentication with SSL/TLS in PHP gRPC\nDESCRIPTION: Establishes a secure gRPC connection in PHP using SSL/TLS for server authentication. This requires loading root certificates from a file.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$client = new helloworld\\GreeterClient('myservice.example.com', [\n    'credentials' => Grpc\\ChannelCredentials::createSsl(file_get_contents('roots.pem')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Visualizing gRPC Load Balancer Flow with Mermaid\nDESCRIPTION: A flowchart diagram showing the relationship between Name Resolver, Load Balancer, Channel, Picker, and Subchannels in gRPC load balancing implementation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/custom-load-balancing.md#2025-04-08_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nNR(Name Resolver) -->|Provides addresses &\\nLB config| LB(Load Balancer)\nLB --> |Provides a picker| C(Channel)\nC -->|Requests\\na subchannel| P(Picker)\nLB --> |Manages subchannels\\nto backends| SC(Subchannel 1..n)\nLB -. Creates .-> P\nP --> |Picks one| SC\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with CocoaPods\nDESCRIPTION: This command uses CocoaPods to install the necessary dependencies for the OAuth2 example.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/oauth2.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Repository\nDESCRIPTION: Git command to clone the gRPC repository with specific configurations.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --recursive -b {{< param grpc_vers.core >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc\n```\n\n----------------------------------------\n\nTITLE: Calculating Benchmark Iterations in Java\nDESCRIPTION: Shows how to determine the optimal number of iterations for benchmark runs by starting with a single iteration and scaling up until reaching desired sample time. Includes warmup phase to eliminate JVM optimization effects.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/mobile-benchmarks.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// This can be found in ProtobufBenchmarker.java benchmark()\nint iterations = 1;\n// Time action simply reports the time it takes to run a certain action for that number of iterations\nlong elapsed = timeAction(action, iterations);\nwhile (elapsed < MIN_SAMPLE_TIME_MS) {\n    iterations *= 2;\n    elapsed = timeAction(action, iterations);\n}\n// Estimate number of iterations to run for 10 seconds\niterations = (int) ((TARGET_TIME_MS / (double) elapsed) * iterations);\n```\n\n----------------------------------------\n\nTITLE: Updated gRPC Service Definition\nDESCRIPTION: Extended protocol buffer definition adding SayHelloAgain method to the Greeter service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  // Sends another greeting\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffer\nDESCRIPTION: Declaration of a gRPC service named RouteGuide in a .proto file. Services contain RPC method definitions.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/basics.md#2025-04-08_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\nservice RouteGuide {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Examples Directory\nDESCRIPTION: Command to change to the examples directory in the cloned repository.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd grpc-java/examples\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Performance Test with Gradle\nDESCRIPTION: Commands to build and run the gRPC application to measure performance metrics, showing the initial slower performance of around 215 RPCs/s.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew installDist\ntime ./build/install/kvstore/bin/kvstore\n\nINFO: Did 215.883 RPCs/s\n```\n\n----------------------------------------\n\nTITLE: Name Resolution Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between Client, gRPC, NameResolverProvider and NameResolver during custom name resolution process\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/custom-name-resolution.md#2025-04-08_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  Client ->> gRPC: Request to my-resolver:///my-service\n  gRPC ->> NameResolverProvider: requests NameResolver\n  NameResolverProvider -->> gRPC: returns NameResolver\n  gRPC ->> NameResolver: delegates resolution\n  NameResolver -->> gRPC: addresses\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of gRPC Server Graceful Shutdown\nDESCRIPTION: Illustrates the sequence of events during a gRPC server's graceful shutdown process, showing interactions between client and server, handling of in-flight RPCs, and timeout scenarios.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/server-graceful-stop.md#2025-04-08_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nClient->>Server: New RPC Request 1\nClient->>Server: New RPC Request 2\nServer-->>Server: Graceful Shutdown Invoked\nServer->>Client: Continues Processing In-Flight RPCs\nClient->>Client: Detects server shutdown and finds other servers if available\nalt RPCs complete within timeout\n    Server->>Client: Completes RPC 1\n    Server->>Client: Completes RPC 2\n    Server-->>Server: Graceful Shutdown Complete\nelse Timeout reached\n    Server->>Client: Forceful Shutdown Invoked, terminating pending RPCs\n    Server-->>Server: Forceful Shutdown Complete\nend\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Repository in Git\nDESCRIPTION: Command to clone the gRPC repository from GitHub, specifically the examples for the Python route guide.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone -b {{< param grpc_vers.core >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc\n```\n\n----------------------------------------\n\nTITLE: Defining a Client-side Streaming RPC Method\nDESCRIPTION: Definition of a client-side streaming RPC method where the client sends a stream of requests and receives a single response. This method records a route being traversed.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\n// Accepts a stream of Points on a route being traversed, returning a\n// RouteSummary when traversal is completed.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n```\n\n----------------------------------------\n\nTITLE: Server Signal Handler Configuration in Ruby gRPC\nDESCRIPTION: Configures the gRPC server to handle SIGHUP, SIGINT and SIGQUIT signals for graceful shutdown.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ns.run_till_terminated_or_interrupted([1, 'int', 'SIGQUIT'])\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for gRPC Documentation Page\nDESCRIPTION: This code snippet defines the frontmatter for the gRPC documentation page, including the title, link title, and menu settings. It also specifies that the page should not display a list of child pages.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: Documentation\nlinkTitle: Docs\nno_list: true\nmenu:\n  main: {weight: 2}\n---\n```\n\n----------------------------------------\n\nTITLE: Changing to Example Directory\nDESCRIPTION: Command to navigate to the helloworld example directory within the cloned gRPC-Go repository.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd grpc-go/examples/helloworld\n```\n\n----------------------------------------\n\nTITLE: Creating a gRPC Channel in Android Java\nDESCRIPTION: Code to create a gRPC channel that specifies the server address and port to connect to. This uses ManagedChannelBuilder with plaintext communication.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nmChannel = ManagedChannelBuilder.forAddress(host, port).usePlaintext(true).build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Read Reactor\nDESCRIPTION: Implementation of ClientReadReactor for handling streaming responses from the ListFeatures RPC, including read handling and completion notification.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/callback.md#2025-04-08_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n    class Reader : public grpc::ClientReadReactor<Feature> {\n     public:\n      Reader(RouteGuide::Stub* stub, float coord_factor,\n             const routeguide::Rectangle& rect)\n          : coord_factor_(coord_factor) {\n        stub->async()->ListFeatures(&context_, &rect, this);\n        StartRead(&feature_);\n        StartCall();\n      }\n      void OnReadDone(bool ok) override {\n        if (ok) {\n          std::cout << \"Found feature called \" << feature_.name() << \" at \"\n                    << feature_.location().latitude() / coord_factor_ << \", \"\n                    << feature_.location().longitude() / coord_factor_\n                    << std::endl;\n          StartRead(&feature_);\n        }\n      }\n      void OnDone(const Status& s) override {\n        std::unique_lock<std::mutex> l(mu_);\n        status_ = s;\n        done_ = true;\n        cv_.notify_one();\n      }\n      Status Await() {\n        std::unique_lock<std::mutex> l(mu_);\n        cv_.wait(l, [this] { return done_; });\n        return std::move(status_);\n      }\n\n     private:\n      ClientContext context_;\n      float coord_factor_;\n      Feature feature_;\n      std::mutex mu_;\n      std::condition_variable cv_;\n      Status status_;\n      bool done_ = false;\n    };\n```\n\n----------------------------------------\n\nTITLE: Hugo Cards Template\nDESCRIPTION: Hugo shortcode for rendering cards using the main_channels data\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/community/_index.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{% cards \"main_channels\" %}}\n```\n\n----------------------------------------\n\nTITLE: Navigating to OAuth2 Example Directory\nDESCRIPTION: This shell command changes the current directory to the OAuth2 example folder.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/oauth2.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd examples/objective-c/auth_sample\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Android Java gRPC Documentation Page\nDESCRIPTION: This YAML front matter defines the structure and navigation for the Android Java implementation page on the gRPC website. It specifies the title, layout, language variables, and organizes content into sections including examples, API documentation, and related links.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\ntitle: Android Java\nlayout: prog_lang_home\nlanguage: &lang Java\nlinkTitle: *lang\nspelling: cSpell:ignore javadoc\napi_path: grpc-java/javadoc\ncontent:\n  - learn_more:\n    - \"[Examples]($src_repo_url/tree/master/examples/android)\"\n  - reference:\n    - \"[API](api/)\"\n  - other:\n    - \"[Java (non-Android)](/docs/languages/java/)\"\n    - $src_repo_link\n    - \"[Download]($src_repo_url#download)\"\n---\n```\n\n----------------------------------------\n\nTITLE: Equivalent Guava Dependency Declarations in Bazel\nDESCRIPTION: Example showing two equivalent ways to declare a dependency on Google Guava jar using Bazel's target pattern syntax, demonstrating the package name shortcut.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndeps = [\"@com_google_guava_guava//jar:jar\"]\ndeps = [\"@com_google_guava_guava//jar\"]\n```\n\n----------------------------------------\n\nTITLE: Hugo Alert Shortcode\nDESCRIPTION: Hugo shortcode for displaying a success-colored alert box containing the code of conduct message\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/community/_index.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{% alert color=\"success\" %}}\n  The gRPC community values respect and inclusiveness. We enforce our [Code of\n  Conduct][] in all interactions.\n\n  [Code of Conduct]: https://github.com/cncf/foundation/blob/master/code-of-conduct.md\n{{% /alert %}}\n```\n\n----------------------------------------\n\nTITLE: Cloning the gRPC-Go Repository\nDESCRIPTION: Git command to clone the gRPC-Go repository with a specific version at a shallow depth, retrieving the example code needed for the quick start guide.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone -b {{< param grpc_vers.go >}} --depth 1 https://github.com/grpc/grpc-go\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Example Directory\nDESCRIPTION: Command to change the current directory to the Objective-C route guide example.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd examples/objective-c/route_guide\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Maven Jar BUILD File\nDESCRIPTION: Example of an auto-generated BUILD file for a Maven jar dependency, showing java_import and filegroup rules.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# DO NOT EDIT: automatically generated BUILD file for maven_jar rule com_google_guava_guava\njava_import(\n    name = 'jar',\n    jars = ['guava-19.0.jar'],\n    visibility = ['//visibility:public']\n)\n\nfilegroup(\n    name = 'file',\n    srcs = ['guava-19.0.jar'],\n    visibility = ['//visibility:public']\n)\n```\n\n----------------------------------------\n\nTITLE: Hugo Template Block for Page Cover\nDESCRIPTION: Hugo shortcode template for rendering the page header with a primary colored cover block of small height\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/community/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{< blocks/cover color=\"primary\" height=\"sm\" >}}\n{{< page/header >}}\n{{< /blocks/cover >}}\n```\n\n----------------------------------------\n\nTITLE: Cloning the gRPC Java Repository\nDESCRIPTION: Git commands to clone the gRPC Java repository and navigate to the Android examples directory. This is the first step to accessing the example code for the tutorial.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone -b {{< param grpc_vers.java >}} https://github.com/grpc/grpc-java.git\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd grpc-java/examples/android\n```\n\n----------------------------------------\n\nTITLE: Generating Dart gRPC Code with Protocol Compiler\nDESCRIPTION: Command to generate Dart client and server code from the protocol buffer definition using the protoc compiler with the Dart plugin.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/dart/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I protos/ protos/route_guide.proto --dart_out=grpc:lib/src/generated\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Route Guide Example\nDESCRIPTION: Command to navigate to the Python route guide example directory in the cloned gRPC repository.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/basics.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd grpc/examples/python/route_guide\n```\n\n----------------------------------------\n\nTITLE: gRPC-Gateway Handler Registration in Go\nDESCRIPTION: Generated Go code for registering HTTP handlers that translate REST calls to gRPC requests, enabling dual REST/gRPC support for the service.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/yikyak.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// RegisterYYAPIHandler registers the http handlers for service YYAPI to \"mux\".\n// The handlers forward requests to the grpc endpoint over \"conn\".\nfunc RegisterYYAPIHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {\n  // Code omitted for clarity\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Homebrew\nDESCRIPTION: Command to install required build dependencies using Homebrew.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install autoconf automake libtool pkg-config\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for PHP Client\nDESCRIPTION: JSON configuration for Composer to autoload the generated PHP files.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"autoload\": {\n    \"psr-4\": {\n      \"\": \"route_guide/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Protocol Buffer Files for PHP\nDESCRIPTION: Command to compile the example's .proto files for PHP using the route_guide_proto_gen.sh script.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd examples/php/route_guide\n./route_guide_proto_gen.sh\n```\n\n----------------------------------------\n\nTITLE: PHP Boolean/Integer Type Ambiguity in REST APIs\nDESCRIPTION: Example showing inconsistent typing in PHP for the 'hidePin' field on 'yak' object, demonstrating how REST APIs can lead to type confusion when multiple values (boolean and integer) are used for the same field.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/yikyak.md#2025-04-08_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Code omitted…\n$yak->hidePin=false;\n\n// Code omitted…\n$yak->hidePin=true;\n\n// Code omitted…\n$yak->hidePin=0;\n\n// Code omitted…\n$yak->hidePin=1;\n```\n\n----------------------------------------\n\nTITLE: Installing Developer Tools\nDESCRIPTION: Command to install Xcode command line developer tools.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC API Reference Page in YAML\nDESCRIPTION: YAML frontmatter configuration that sets up a placeholder page for the gRPC API reference documentation. Specifies the title, link behavior, weight for ordering, and build settings to render as a link.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: API reference\nlinkTitle: API\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running gRPC Server in Kotlin\nDESCRIPTION: These commands compile the gRPC server using Gradle and then run the compiled server. The server listens on port 50051.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/kotlin/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew installDist\n./server/build/install/server/bin/hello-world-server\n```\n\n----------------------------------------\n\nTITLE: Checking Internal Links of gRPC Website\nDESCRIPTION: Command to verify internal links in the generated website using htmltest tool, which helps identify broken links.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/README.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run check-links\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip in Python\nDESCRIPTION: Command to upgrade pip to the latest version using Python's module system.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Setting Android SDK Environment Variable\nDESCRIPTION: Sets the ANDROID_SDK_ROOT environment variable to specify the Android SDK location for tools and scripts.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport ANDROID_SDK_ROOT=\"<path-to-your-android-sdk>\"\n```\n\n----------------------------------------\n\nTITLE: Updated gRPC Client Implementation\nDESCRIPTION: Ruby client implementation calling both greeting methods.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/quickstart.md#2025-04-08_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef main\n  stub = Helloworld::Greeter::Stub.new('localhost:50051', :this_channel_is_insecure)\n  user = ARGV.size > 0 ?  ARGV[0] : 'world'\n  message = stub.say_hello(Helloworld::HelloRequest.new(name: user)).message\n  p \"Greeting: #{message}\"\n  message = stub.say_hello_again(Helloworld::HelloRequest.new(name: user)).message\n  p \"Greeting: #{message}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables - Windows\nDESCRIPTION: Commands to set up environment variables for local package installation directory on Windows systems.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nset MY_INSTALL_DIR=%USERPROFILE%\\cmake\nmkdir %INSTALL_DIR%\nset PATH=%PATH%;$MY_INSTALL_DIR\\bin\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for gRPC API Documentation\nDESCRIPTION: YAML front matter configuration block that defines metadata for an API reference page. Specifies the title, link text, weight for ordering, and build configuration to render as a link with an external target.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/cpp/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference\nlinkTitle: API\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Updating PATH for Protocol Compiler Plugins\nDESCRIPTION: Command to update the PATH environment variable to include the Go bin directory, allowing the protoc compiler to find the installed plugins.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/go/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport PATH=\"$PATH:$(go env GOPATH)/bin\"\n```\n\n----------------------------------------\n\nTITLE: Preparing the Project for gRPC\nDESCRIPTION: Commands for removing the default class file, downloading a sample .proto file, and adding the necessary NuGet packages for gRPC integration.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-dotnet-build.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n~/work/MyGreeter$ rm Class1.cs\n~/work/MyGreeter$ wget -q https://raw.githubusercontent.com/grpc/grpc/master/examples/protos/helloworld.proto\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service for Person Search in Protobuf\nDESCRIPTION: This snippet defines a gRPC service 'PersonSearchService' in 'person_search_service.proto'. It includes a message for search requests and a service definition for streaming search results.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/wireshark.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage tutorial;\nimport \"addressbook.proto\";\n\nmessage PersonSearchRequest {\n  repeated string name = 1;\n  repeated int32 id = 2;\n  repeated string phoneNumber = 3;\n}\n\nservice PersonSearchService {\n  rpc Search (PersonSearchRequest) returns (stream Person) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Ruby gRPC Code\nDESCRIPTION: Command to generate Ruby client and server interfaces from the protocol buffer definition.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngrpc_tools_ruby_protoc -I ../../protos --ruby_out=../lib --grpc_out=../lib ../../protos/route_guide.proto\n```\n\n----------------------------------------\n\nTITLE: Registering Channelz Service in Go\nDESCRIPTION: This snippet shows how to register the Channelz service to a gRPC server in Go. It imports the necessary package and calls the RegisterChannelzServiceToServer function.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/a-short-introduction-to-channelz.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc/channelz/service\"\n\n// s is a *grpc.Server\nservice.RegisterChannelzServiceToServer(s)\n\n// call s.Serve() to serve channelz service\n```\n\n----------------------------------------\n\nTITLE: Initial gRPC Service Definition\nDESCRIPTION: Protocol Buffer definition for the basic Greeter service with SayHello method.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/objective-c/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up gRPC Route Guide Project\nDESCRIPTION: Shell commands for installing dependencies and running the gRPC route guide server and client examples.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/basics.md#2025-04-08_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode ./routeguide/dynamic_codegen/route_guide_server.js --db_path=./routeguide/dynamic_codegen/route_guide_db.json\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode ./routeguide/dynamic_codegen/route_guide_client.js --db_path=./routeguide/dynamic_codegen/route_guide_db.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Server Binary Build\nDESCRIPTION: Bazel build configuration for creating the Java server binary with required protobuf and gRPC dependencies.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\njava_binary(\n    name = \"server\",\n    main_class = \"org.pubref.grpc.greetertimer.GreeterTimerServer\",\n    srcs = [\n        \"GreeterTimerServer.java\",\n    ],\n    deps = [\n        \":timer_protos\",\n        \"@org_pubref_rules_protobuf//examples/helloworld/proto:java\",\n        \"@org_pubref_rules_protobuf//java:grpc_compiletime_deps\",\n    ],\n    runtime_deps = [\n        \"@org_pubref_rules_protobuf//java:netty_runtime_deps\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Client Binary Build\nDESCRIPTION: Bazel build configuration for compiling the Go client binary with necessary gRPC dependencies.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nload(\"@io_bazel_rules_go//go:def.bzl\", \"go_binary\")\nload(\"@org_pubref_rules_protobuf//go:rules.bzl\", \"GRPC_COMPILE_DEPS\")\n\ngo_binary(\n    name = \"hello_client\",\n    srcs = [\n        \"main.go\",\n    ],\n    deps = [\n        \"//proto:go_default_library\",\n    ] + GRPC_COMPILE_DEPS,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC for Python\nDESCRIPTION: Command to install the gRPC runtime for Python using pip package manager. This works on Linux, Mac, and Windows platforms.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/installation.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install grpcio\n```\n\n----------------------------------------\n\nTITLE: Building Protocol Buffers\nDESCRIPTION: Simple Bazel build command to compile protocol buffers using the pluriproto target.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbazel build :pluriproto\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC API Reference Page Front Matter in YAML\nDESCRIPTION: YAML front matter configuration for a gRPC API reference documentation page. Specifies the page title, link text, weight in navigation, and build settings. This is a placeholder page that redirects to external documentation.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: API reference\nlinkTitle: API\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Kotlin Repository\nDESCRIPTION: This Git command clones the gRPC Kotlin repository from GitHub. It's used to obtain the example code for the quick start guide.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/kotlin/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/grpc/grpc-kotlin\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of Protobuf Dependencies\nDESCRIPTION: Shell command to check for the absence of Protobuf dependencies in the project's Gradle build.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-with-json.md#2025-04-08_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew :dependencies | grep -i proto\n# no proto deps!\n```\n\n----------------------------------------\n\nTITLE: Integrating gRPC into a CMake Project\nDESCRIPTION: This CMake snippet demonstrates how to clone and build the latest stable release of gRPC as part of a CMake project. It uses the FetchContent module to download gRPC and its dependencies, then links against the grpc++ library.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/cmake-improvements.md#2025-04-08_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(my_exe)\n\ninclude(FetchContent)\n\nFetchContent_Declare(\n  gRPC\n  GIT_REPOSITORY https://github.com/grpc/grpc\n  GIT_TAG        v1.28.0\n  )\nset(FETCHCONTENT_QUIET OFF)\nFetchContent_MakeAvailable(gRPC)\n\nadd_executable(my_exe my_exe.cc)\ntarget_link_libraries(my_exe grpc++)\n```\n\n----------------------------------------\n\nTITLE: Building FlatBuffers Response in gRPC Server\nDESCRIPTION: A C++ code snippet showing how to construct a FlatBuffers response message in a gRPC server implementation. It demonstrates the process of creating strings, building message objects, and releasing the message for response.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/grpc-flatbuffers.md#2025-04-08_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto msg_offset = mb_.CreateString(\"Hello, \" + name);\nauto hello_offset = CreateHelloReply(mb_, msg_offset);\nmb_.Finish(hello_offset);\n*response_msg = mb_.ReleaseMessage<HelloReply>();\n```\n\n----------------------------------------\n\nTITLE: Running gRPC server in Python\nDESCRIPTION: Command to run the gRPC server example in Python.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython greeter_server.py\n```\n\n----------------------------------------\n\nTITLE: Clone gRPC Repository Command\nDESCRIPTION: Shell commands to clone the gRPC repository and navigate to the Ruby example directory.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/basics.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -b {{< param grpc_vers.core >}} --depth 1 --shallow-submodules https://github.com/grpc/grpc\ncd grpc\ncd examples/ruby/route_guide\n```\n\n----------------------------------------\n\nTITLE: New Git Repository Declaration\nDESCRIPTION: Example of declaring a new git repository dependency with a custom BUILD file for zlib using new_git_repository rule.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnew_git_repository(\n  name = \"com_github_madler_zlib\",\n  remote = \"https://github.com/madler/zlib\",\n  tag: \"v1.2.8\",\n  build_file: \"//bzl:build_file/com_github_madler_zlib.BUILD\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC for Python\nDESCRIPTION: Command to install the gRPC package for Python using pip.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/python/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install grpcio\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated BUILD File for Maven Jar\nDESCRIPTION: Bash command to display the auto-generated BUILD file for a Maven jar dependency in Bazel's execution root.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n~/rules_protobuf$ cat $(bazel info execution_root)/external/com_google_guava_guava/jar/BUILD\n```\n\n----------------------------------------\n\nTITLE: Querying Bazel targets in examples directory\nDESCRIPTION: Uses bazel query command to list all targets in the examples directory, showing their types and labels.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n~/rules_protobuf$ bazel query //examples/... --output label_kind | sort | column -t\n\ncc_binary                   rule  //examples/helloworld/cpp:client\ncc_binary                   rule  //examples/helloworld/cpp:server\ncc_library                  rule  //examples/helloworld/cpp:clientlib\ncc_library                  rule  //examples/helloworld/proto:cpp\ncc_library                  rule  //examples/proto:cpp\ncc_proto_compile            rule  //examples/helloworld/proto:cpp.pb\ncc_proto_compile            rule  //examples/proto:cpp.pb\ncc_test                     rule  //examples/helloworld/cpp:test\nfilegroup                   rule  //examples/helloworld/proto:protos\nfilegroup                   rule  //examples/proto:protos\ngo_binary                   rule  //examples/helloworld/go/client:client\ngo_binary                   rule  //examples/helloworld/go/server:server\ngo_library                  rule  //examples/helloworld/go/server:greeter\ngo_library                  rule  //examples/helloworld/grpc_gateway:gateway\ngo_library                  rule  //examples/helloworld/proto:go\ngo_library                  rule  //examples/proto:go_default_library\ngo_proto_compile            rule  //examples/helloworld/proto:go.pb\ngo_proto_compile            rule  //examples/proto:go_default_library.pb\ngo_test                     rule  //examples/helloworld/go/greeter_test:greeter_test\ngo_test                     rule  //examples/helloworld/grpc_gateway:greeter_test\ngrpc_gateway_proto_compile  rule  //examples/helloworld/grpc_gateway:gateway.pb\njava_binary                 rule  //examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/client:netty\njava_binary                 rule  //examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/server:netty\njava_library                rule  //examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/client:client\njava_library                rule  //examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/server:server\njava_library                rule  //examples/helloworld/proto:java\njava_library                rule  //examples/proto:java\njava_proto_compile          rule  //examples/helloworld/proto:java.pb\njava_proto_compile          rule  //examples/proto:java.pb\njs_proto_compile            rule  //examples/helloworld/proto:js\njs_proto_compile            rule  //examples/proto:js\npy_proto_compile            rule  //examples/helloworld/proto:py.pb\nruby_proto_compile          rule  //examples/proto:rb.pb\n```\n\n----------------------------------------\n\nTITLE: Authenticating a Single RPC Call in Dart gRPC\nDESCRIPTION: Implements Google authentication for a single gRPC call in Dart using a service account. This approach applies credentials only to the specific RPC call rather than the entire client.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// Uses publicly trusted roots by default.\nfinal channel = new ClientChannel('greeter.googleapis.com');\nfinal client = new GreeterClient(channel);\n...\nfinal serviceAccountJson =\n     new File('service-account.json').readAsStringSync();\nfinal credentials = new JwtServiceAccountAuthenticator(serviceAccountJson);\nfinal response =\n    await client.sayHello(request, options: credentials.toCallOptions);\n```\n\n----------------------------------------\n\nTITLE: Querying Reverse Dependencies in Bazel\nDESCRIPTION: Bash command demonstrating how to query reverse dependencies of zlib and generate a dependency graph visualization.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n~/rules_protobuf$ bazel query \"rdeps(deps(//examples/...), @com_github_madler_zlib//:zlib)\" \\\n                  --output graph | dot -Tpng -O\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Traditional REST API in JavaScript\nDESCRIPTION: A typical RESTful fetch call that retrieves JSON data from an API service. The example demonstrates the use of the fetch API with HTTP method and content type headers, with the response processed as a JSON object in a promise chain.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/postman-grpcweb.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://api.example.com/data', {\n    method: 'GET',\n    headers: {\n        'Accept': 'application/json',\n    },\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google in PHP gRPC\nDESCRIPTION: Implements Google authentication for gRPC calls in PHP by combining SSL credentials with a callback function that updates auth metadata. This approach uses application default credentials.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction updateAuthMetadataCallback($context)\n{\n    $auth_credentials = ApplicationDefaultCredentials::getCredentials();\n    return $auth_credentials->updateMetadata($metadata = [], $context->service_url);\n}\n$channel_credentials = Grpc\\ChannelCredentials::createComposite(\n    Grpc\\ChannelCredentials::createSsl(file_get_contents('roots.pem')),\n    Grpc\\CallCredentials::createFromPlugin('updateAuthMetadataCallback')\n);\n$opts = [\n  'credentials' => $channel_credentials\n];\n$client = new helloworld\\GreeterClient('greeter.googleapis.com', $opts);\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for API Reference Page\nDESCRIPTION: YAML front matter configuration for an API reference page that serves as a redirect. The configuration includes title, link title, weight for navigation ordering, and build instructions to render as a link rather than a page.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/node/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference\nlinkTitle: API\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Grpc.Core API Reference Placeholder Page\nDESCRIPTION: YAML frontmatter that configures a placeholder page for the legacy Grpc.Core API reference. The page is set to render as a link with external targeting (_blank) and has specific navigation parameters.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/csharp/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference (legacy Grpc.Core only)\nlinkTitle: API (legacy)\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google OAuth2 Token in Node.js gRPC (Legacy)\nDESCRIPTION: Implements Google authentication for gRPC calls in Node.js using OAuth2 token with a specific scope. This is considered a legacy approach but still useful for certain scenarios.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar GoogleAuth = require('google-auth-library'); // from https://www.npmjs.com/package/google-auth-library\n...\nvar ssl_creds = grpc.Credentials.createSsl(root_certs); // load_certs typically loads a CA roots file\nvar scope = 'https://www.googleapis.com/auth/grpc-testing';\n(new GoogleAuth()).getApplicationDefault(function(err, auth) {\n  if (auth.createScopeRequired()) {\n    auth = auth.createScoped(scope);\n  }\n  var call_creds = grpc.credentials.createFromGoogleCredential(auth);\n  var combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);\n  var stub = new helloworld.Greeter('greeter.googleapis.com', combined_credentials);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Python Single-Threaded Unary Stream Option\nDESCRIPTION: Experimental channel option for enabling single-threaded unary-stream implementation in Python gRPC.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/performance.md#2025-04-08_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSingleThreadedUnaryStream\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for API Reference Redirection\nDESCRIPTION: YAML front matter configuration for a placeholder page that redirects to an external API reference. The configuration includes metadata like title, weight, and build settings to render it as a link.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/java/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference\nlinkTitle: API\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google in Ruby gRPC\nDESCRIPTION: Implements Google authentication for gRPC calls by combining SSL credentials with Google application default credentials. This approach is suitable for services that require Google authentication.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/auth.md#2025-04-08_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'googleauth'  # from http://www.rubydoc.info/gems/googleauth/0.1.0\n...\nssl_creds = GRPC::Core::ChannelCredentials.new(load_certs)  # load_certs typically loads a CA roots file\nauthentication = Google::Auth.get_application_default()\ncall_creds = GRPC::Core::CallCredentials.new(authentication.updater_proc)\ncombined_creds = ssl_creds.compose(call_creds)\nstub = Helloworld::Greeter::Stub.new('greeter.googleapis.com', combined_creds)\n```\n\n----------------------------------------\n\nTITLE: Configuration Note\nDESCRIPTION: The article contains reference material and feature comparison tables but no actual code snippets to document.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/state-of-grpc-web.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNo code snippets present in the provided content.\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Service Definitions for gRPC Performance Testing\nDESCRIPTION: References to two key proto service definitions used in gRPC performance testing: WorkerService for controlling test workers and BenchmarkService for performing the actual benchmark tests.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/guides/benchmarking.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// Referenced proto files:\n// - src/proto/grpc/testing/worker_service.proto\n// - src/proto/grpc/testing/benchmark_service.proto\n```\n\n----------------------------------------\n\nTITLE: Generating Language-specific Documentation Layout with Hugo Templates\nDESCRIPTION: A Hugo template that constructs a documentation page layout for gRPC language implementations. The template takes language parameters, creates repository links, and renders content in a responsive grid layout with multiple columns. It processes content sections defined in page parameters and supports markdown rendering.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/layouts/shortcodes/docs/prog-lang-home-content.md#2025-04-08_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ $lang := lower ($.Page.Params.language | default $.Page.Params.title) -}}\n{{ $src_repo_url := $.Page.Params.src_repo | default (printf \"https://github.com/grpc/grpc-%s\" $lang) -}}\n{{ $src_repo_link := printf \"[grpc-%s repo](%s)\" $lang $src_repo_url -}}\n\n{{ with .Page.Params.content -}}\n<div class=\"row flex-col flex-md-row o-lang-home__list\">\n{{ range $list_entry := . }}\n{{ range $heading, $items := $list_entry }}\n{{ $hd := printf \"### %s\" (humanize $heading) -}}\n<div class=\"col-12 col-md-4\">\n\n{{ $hd }}\n\n<ul>\n{{ range $items }}\n  {{ $item := replace . \"$src_repo_url\" $src_repo_url }}\n  {{ $item = replace $item \"$src_repo_link\" $src_repo_link }}\n  <li>{{ $item | $.Page.RenderString }}</li>\n{{ end }}\n</ul>\n</div>\n{{ end }}\n{{ end }}\n</div>\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Daily Builds Redirect Page\nDESCRIPTION: YAML front matter for a placeholder page that configures a redirect to external content. The configuration includes metadata settings for robots to prevent indexing, a weight parameter of 90, manual link targeting to open in a new tab, and build settings to render as a link.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/ruby/daily-builds.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Daily builds\nrobots: noindex, nofollow\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Node LTS for gRPC Website Development\nDESCRIPTION: Command to install the latest LTS version of Node using nvm, which is a prerequisite for building the gRPC website.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nvm install --lts\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Matter for Daily Builds Redirect in Hugo\nDESCRIPTION: YAML front matter configuration for a placeholder page that redirects to an external location. The configuration prevents search engine indexing, sets navigation weight, configures links to open in a new tab, and renders only as a link rather than a full page.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/languages/php/daily-builds.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Daily builds\nrobots: noindex, nofollow\nweight: 90\n# Note: this is a placeholder page. The URL to this page redirects elsewhere.\nmanualLinkTarget: _blank\n_build: { render: link }\n---\n```\n\n----------------------------------------\n\nTITLE: Structured HTML Layout for Video Hub\nDESCRIPTION: HTML template structure using Hugo shortcodes and Bootstrap grid system to organize video content with TOC and layout containers.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/Videos/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{< blocks/cover image_anchor=\"top\" height=\"sm\" color=\"primary\" >}}\n{{< page/header >}}\n{{< /blocks/cover >}}\n\n<div class=\"container l-container--padded\">\n\n<div class=\"row\">\n{{< page/toc collapsed=true placement=\"inline\" >}}\n</div>\n\n<div class=\"row\">\n<div class=\"col-12 col-lg-8\">\n  <!-- Content sections -->\n</div>\n\n{{< page/toc placement=\"sidebar\" >}}\n\n</div>\n\n{{< page/page-meta-links >}}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Block Cover Implementation for gRPC Documentation\nDESCRIPTION: HTML markup for the main hero section of the gRPC documentation page, including the logo, main description, and quick start language selection buttons.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/img/logos/grpc-logo.png\" class=\"grpc-logo\" />\n<h2>A high performance, open source universal RPC framework</h2>\n<a\n\tclass=\"btn btn-lg btn-primary font-weight-bold my-4\"\n\thref=\"/docs/what-is-grpc/introduction\"\n>\nLearn more\n</a>\n\n<div class=\"h3 mt-2\">Get started!</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Frontmatter for gRPC.io Content\nDESCRIPTION: This YAML frontmatter block sets up the basic metadata for a new Hugo content page on the gRPC.io website. It includes a title that converts hyphens in the filename to spaces and capitalizes each word, the current date in YYYY-MM-DD format, and sets the draft status to true.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/archetypes/default.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ dateFormat \"2006-01-02\" .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Embedded YouTube Video Implementation\nDESCRIPTION: HTML structure for embedding a YouTube video about \"Ten Years of gRPC\" with responsive wrapper classes.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"youtube-video-center\">\n    <div class=\"video-wrapper\">\n        <iframe \n            src=\"https://www.youtube.com/embed/5dMK5OW6WSw\" \n            title=\"Ten Years of gRPC\" \n            frameborder=\"0\" \n            allowfullscreen>\n        </iframe>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cloning gRPC Java Repository\nDESCRIPTION: Git command to clone the gRPC Java repository with a specific version.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/docs/platforms/android/java/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone -b {{< param grpc_vers.java >}} https://github.com/grpc/grpc-java\n```\n\n----------------------------------------\n\nTITLE: Displaying rules_protobuf examples directory structure\nDESCRIPTION: Uses the tree command to show the directory structure of the examples folder in rules_protobuf, focusing on BUILD and WORKSPACE files.\nSOURCE: https://github.com/grpc/grpc.io/blob/main/content/en/blog/bazel-rules-protobuf.md#2025-04-08_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ntree -P 'BUILD|WORKSPACE' -I 'third_party|bzl' examples/\n.\n├── BUILD\n├── WORKSPACE\n└── examples\n    ├── helloworld\n    │   ├── cpp\n    │   │   └── BUILD\n    │   ├── go\n    │   │   ├── client\n    │   │   │   └── BUILD\n    │   │   ├── greeter_test\n    │   │   │   └── BUILD\n    │   │   └── server\n    │   │       └── BUILD\n    │   ├── grpc_gateway\n    │   │   └── BUILD\n    │   ├── java\n    │   │   └── org\n    │   │       └── pubref\n    │   │           └── rules_protobuf\n    │   │               └── examples\n    │   │                   └── helloworld\n    │   │                       ├── client\n    │   │                       │   └── BUILD\n    │   │                       └── server\n    │   │                           └── BUILD\n    │   └── proto\n    │       └── BUILD\n    └── proto\n        └── BUILD\n```"
  }
]