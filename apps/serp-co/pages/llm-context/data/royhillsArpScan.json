[
  {
    "owner": "royhills",
    "repo": "arp-scan",
    "content": "TITLE: Cloning, Building, and Installing arp-scan from Source - Bash\nDESCRIPTION: This Bash command sequence demonstrates how to clone the latest arp-scan source code from Github, generate the configure script with autoreconf if unavailable, run the configure script to generate a suitable Makefile, build via make, optionally test the build, and install the binaries. This workflow requires GNU autotools (automake/autoconf), make (BSD or GNU), a C compiler, and development headers/libraries for libpcap and optionally libcap. Expected input is direct invocation on a command shell with correct privileges and environment; successful output will be built and optionally installed arp-scan binaries. Source path and build options may need to be adjusted for your system; root or sudo permissions are needed for final install step.\nSOURCE: https://github.com/royhills/arp-scan/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/royhills/arp-scan.git\ncd arp-scan\nautoreconf --install\n./configure\nmake\n# Optionally\nmake check\nmake install\n```\n\n----------------------------------------\n\nTITLE: Getting Command-Line Help for arp-scan - Bash\nDESCRIPTION: This example displays how to use the --help argument with the arp-scan command-line tool to obtain quick usage information and available options directly from the binary. This command expects that arp-scan has been installed successfully and is in the user's PATH. Output provides supported flags and their descriptions; there are no specific software prerequisites besides arp-scan itself.\nSOURCE: https://github.com/royhills/arp-scan/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\narp-scan --help\n```\n\n----------------------------------------\n\nTITLE: Running arp-scan with Version Flag - Bash\nDESCRIPTION: This Bash command example shows how to invoke the arp-scan executable with the --version flag to determine the currently installed version of the tool. This can help users compare their local installation against the latest releases documented on Github or in the project NEWS and ChangeLog files. The only requirement is that arp-scan is already installed and accessible via the current PATH; no additional dependencies are necessary.\nSOURCE: https://github.com/royhills/arp-scan/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\narp-scan --version\n```\n\n----------------------------------------\n\nTITLE: Flexible Output Formatting in arp-scan\nDESCRIPTION: Examples of using the new --format option in arp-scan to customize output, including tab-separated values, aligned columns, XML, and JSON formats.\nSOURCE: https://github.com/royhills/arp-scan/blob/master/NEWS.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n${ip}\\t${mac}\\t${vendor}\n```\n\nLANGUAGE: Bash\nCODE:\n```\n|${ip;-15}|${mac}|\n```\n\nLANGUAGE: XML\nCODE:\n```\n<host><ip>${ip}</ip><mac>${mac}</mac><vendor>${vendor}</vendor></host>\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\"ipAddress\":\"${ip}\", \"macAddress\":\"${mac}\", \"vendor\":\"${vendor}\"},\n```\n\n----------------------------------------\n\nTITLE: Setting CAP_NET_RAW Capability on arp-scan Executable\nDESCRIPTION: Command to set the CAP_NET_RAW capability on the arp-scan executable, allowing it to run with reduced privileges while still being able to open raw sockets.\nSOURCE: https://github.com/royhills/arp-scan/blob/master/NEWS.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nsetcap cap_net_raw+p /path/to/arp-scan\n```\n\n----------------------------------------\n\nTITLE: Configuring clang-format for arp-scan Project in Markdown\nDESCRIPTION: This code snippet specifies the clang-format configuration options for the arp-scan project. It sets the base style to LLVM, defines the indent width, specifies return type formatting, and sets case label indentation.\nSOURCE: https://github.com/royhills/arp-scan/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n   - `BasedOnStyle: LLVM`\n   - `IndentWidth: 3`\n   - `AlwaysBreakAfterDefinitionReturnType: All`\n   - `IndentCaseLabels: true`\n```\n\n----------------------------------------\n\nTITLE: Documenting Test Data Files for ARP-Scan in Markdown\nDESCRIPTION: A markdown table listing test data files used by 'make check' to run self tests for the arp-scan project. Each row describes a file and its purpose, covering various ARP packet scenarios and encapsulations.\nSOURCE: https://github.com/royhills/arp-scan/blob/master/testdata/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Filename | Description |\n| --- | --- |\n| pkt-simple-response.pcap | Simple ARP response packet |\n| pkt-padding-response.pcap | ARP response followed by non-zero padding |\n| pkt-vlan-response.pcap | ARP response with 802.1Q VLAN tag |\n| pkt-llc-response.pcap | ARP response with 802.2 LLC/SNAP framing |\n| pkt-vlan-llc-response.pcap | ARP response with 802.2 LLC/SNAP framing and 802.1Q VLAN tag |\n| pkt-net1921681-response.pcap | 56 ARP responses from 192.168.1.0/24 |\n| pkt-trailer-response.pcap | ARP response with RFC 893 trailer encapsulation |\n| pkt-dup-response.pcap | ARP responses with duplicate packets |\n| pkt-diff-frame-addr.pcap | ARP response with Ethernet source address != ar$sha |\n| pkt-local-admin.pcap | ARP response with locally administered source address |\n| pkt-ieee-regcheck.pcap | ARP responses with source addresses in IEEE IAB, MA-M, MA-L and MA-S registries |\n| pkt-too-short.pcap | Truncated ARP response packet |\n| pkt-simple-request.dat | Raw ARP simple request packet |\n| pkt-custom-request.dat | Raw custom ARP request packet |\n| pkt-custom-request-padding.dat | Raw ARP request followed by non-zero padding |\n| pkt-custom-request-llc.dat | Raw ARP request with 802.2 LLC/SNAP framing |\n| pkt-custom-request-vlan.dat | Raw ARP request with 802.1Q VLAN tag |\n| pkt-custom-request-vlan-llc.dat | Raw ARP request with 802.2 LLC/SNAP framing and 802.1Q VLAN tag |\n```"
  }
]